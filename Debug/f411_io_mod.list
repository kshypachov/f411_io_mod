
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ebc4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005aa8  0802ed68  0802ed68  0002fd68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08034810  08034810  000369c8  2**0
                  CONTENTS
  4 .ARM          00000008  08034810  08034810  00035810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08034818  08034818  000369c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08034818  08034818  00035818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08034820  08034820  00035820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009c8  20000000  08034824  00036000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017acc  200009c8  080351ec  000369c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20018494  080351ec  00037494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000369c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034254  00000000  00000000  000369f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fbe  00000000  00000000  0006ac4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e88  00000000  00000000  00070c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002774  00000000  00000000  00073a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f7ff  00000000  00000000  0007620c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032eed  00000000  00000000  00095a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8327  00000000  00000000  000c88f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170c1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000efb4  00000000  00000000  00170c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0017fc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200009c8 	.word	0x200009c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0802ed4c 	.word	0x0802ed4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200009cc 	.word	0x200009cc
 80001dc:	0802ed4c 	.word	0x0802ed4c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd6:	f000 b9ff 	b.w	80010d8 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f897 	bl	8000e1c <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f88a 	bl	8000e1c <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f879 	bl	8000e1c <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f86b 	bl	8000e1c <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d6c:	f000 b9b4 	b.w	80010d8 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f850 	bl	8000e1c <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__popcountsi2>:
 8000d88:	0843      	lsrs	r3, r0, #1
 8000d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000d8e:	1ac0      	subs	r0, r0, r3
 8000d90:	0883      	lsrs	r3, r0, #2
 8000d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8000d9a:	4418      	add	r0, r3
 8000d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8000da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000dac:	0e00      	lsrs	r0, r0, #24
 8000dae:	4770      	bx	lr

08000db0 <__aeabi_d2lz>:
 8000db0:	b538      	push	{r3, r4, r5, lr}
 8000db2:	2200      	movs	r2, #0
 8000db4:	2300      	movs	r3, #0
 8000db6:	4604      	mov	r4, r0
 8000db8:	460d      	mov	r5, r1
 8000dba:	f7ff fea7 	bl	8000b0c <__aeabi_dcmplt>
 8000dbe:	b928      	cbnz	r0, 8000dcc <__aeabi_d2lz+0x1c>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	4629      	mov	r1, r5
 8000dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc8:	f000 b80a 	b.w	8000de0 <__aeabi_d2ulz>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dd2:	f000 f805 	bl	8000de0 <__aeabi_d2ulz>
 8000dd6:	4240      	negs	r0, r0
 8000dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ddc:	bd38      	pop	{r3, r4, r5, pc}
 8000dde:	bf00      	nop

08000de0 <__aeabi_d2ulz>:
 8000de0:	b5d0      	push	{r4, r6, r7, lr}
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <__aeabi_d2ulz+0x34>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	4606      	mov	r6, r0
 8000de8:	460f      	mov	r7, r1
 8000dea:	f7ff fc1d 	bl	8000628 <__aeabi_dmul>
 8000dee:	f7ff fef3 	bl	8000bd8 <__aeabi_d2uiz>
 8000df2:	4604      	mov	r4, r0
 8000df4:	f7ff fb9e 	bl	8000534 <__aeabi_ui2d>
 8000df8:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <__aeabi_d2ulz+0x38>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f7ff fc14 	bl	8000628 <__aeabi_dmul>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4630      	mov	r0, r6
 8000e06:	4639      	mov	r1, r7
 8000e08:	f7ff fa56 	bl	80002b8 <__aeabi_dsub>
 8000e0c:	f7ff fee4 	bl	8000bd8 <__aeabi_d2uiz>
 8000e10:	4621      	mov	r1, r4
 8000e12:	bdd0      	pop	{r4, r6, r7, pc}
 8000e14:	3df00000 	.word	0x3df00000
 8000e18:	41f00000 	.word	0x41f00000

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of SPI2Mutex */
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 80010e0:	482f      	ldr	r0, [pc, #188]	@ (80011a0 <MX_FREERTOS_Init+0xc4>)
 80010e2:	f007 fe5f 	bl	8008da4 <osMutexNew>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a2e      	ldr	r2, [pc, #184]	@ (80011a4 <MX_FREERTOS_Init+0xc8>)
 80010ea:	6013      	str	r3, [r2, #0]

  /* creation of FSMutex */
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 80010ec:	482e      	ldr	r0, [pc, #184]	@ (80011a8 <MX_FREERTOS_Init+0xcc>)
 80010ee:	f007 fe59 	bl	8008da4 <osMutexNew>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a2d      	ldr	r2, [pc, #180]	@ (80011ac <MX_FREERTOS_Init+0xd0>)
 80010f6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inputReadQ */
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 80010f8:	4a2d      	ldr	r2, [pc, #180]	@ (80011b0 <MX_FREERTOS_Init+0xd4>)
 80010fa:	2103      	movs	r1, #3
 80010fc:	2001      	movs	r0, #1
 80010fe:	f007 ff5f 	bl	8008fc0 <osMessageQueueNew>
 8001102:	4603      	mov	r3, r0
 8001104:	4a2b      	ldr	r2, [pc, #172]	@ (80011b4 <MX_FREERTOS_Init+0xd8>)
 8001106:	6013      	str	r3, [r2, #0]

  /* creation of outputReadQ */
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8001108:	4a2b      	ldr	r2, [pc, #172]	@ (80011b8 <MX_FREERTOS_Init+0xdc>)
 800110a:	2103      	movs	r1, #3
 800110c:	2001      	movs	r0, #1
 800110e:	f007 ff57 	bl	8008fc0 <osMessageQueueNew>
 8001112:	4603      	mov	r3, r0
 8001114:	4a29      	ldr	r2, [pc, #164]	@ (80011bc <MX_FREERTOS_Init+0xe0>)
 8001116:	6013      	str	r3, [r2, #0]

  /* creation of outputWriteQ */
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 8001118:	4a29      	ldr	r2, [pc, #164]	@ (80011c0 <MX_FREERTOS_Init+0xe4>)
 800111a:	2103      	movs	r1, #3
 800111c:	2001      	movs	r0, #1
 800111e:	f007 ff4f 	bl	8008fc0 <osMessageQueueNew>
 8001122:	4603      	mov	r3, r0
 8001124:	4a27      	ldr	r2, [pc, #156]	@ (80011c4 <MX_FREERTOS_Init+0xe8>)
 8001126:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8001128:	4a27      	ldr	r2, [pc, #156]	@ (80011c8 <MX_FREERTOS_Init+0xec>)
 800112a:	21c6      	movs	r1, #198	@ 0xc6
 800112c:	2001      	movs	r0, #1
 800112e:	f007 ff47 	bl	8008fc0 <osMessageQueueNew>
 8001132:	4603      	mov	r3, r0
 8001134:	4a25      	ldr	r2, [pc, #148]	@ (80011cc <MX_FREERTOS_Init+0xf0>)
 8001136:	6013      	str	r3, [r2, #0]

  /* creation of loggingQ */
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 8001138:	4a25      	ldr	r2, [pc, #148]	@ (80011d0 <MX_FREERTOS_Init+0xf4>)
 800113a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800113e:	200f      	movs	r0, #15
 8001140:	f007 ff3e 	bl	8008fc0 <osMessageQueueNew>
 8001144:	4603      	mov	r3, r0
 8001146:	4a23      	ldr	r2, [pc, #140]	@ (80011d4 <MX_FREERTOS_Init+0xf8>)
 8001148:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethTask */
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 800114a:	4a23      	ldr	r2, [pc, #140]	@ (80011d8 <MX_FREERTOS_Init+0xfc>)
 800114c:	2100      	movs	r1, #0
 800114e:	4823      	ldr	r0, [pc, #140]	@ (80011dc <MX_FREERTOS_Init+0x100>)
 8001150:	f007 fd7a 	bl	8008c48 <osThreadNew>
 8001154:	4603      	mov	r3, r0
 8001156:	4a22      	ldr	r2, [pc, #136]	@ (80011e0 <MX_FREERTOS_Init+0x104>)
 8001158:	6013      	str	r3, [r2, #0]

  /* creation of IOTask */
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 800115a:	4a22      	ldr	r2, [pc, #136]	@ (80011e4 <MX_FREERTOS_Init+0x108>)
 800115c:	2100      	movs	r1, #0
 800115e:	4822      	ldr	r0, [pc, #136]	@ (80011e8 <MX_FREERTOS_Init+0x10c>)
 8001160:	f007 fd72 	bl	8008c48 <osThreadNew>
 8001164:	4603      	mov	r3, r0
 8001166:	4a21      	ldr	r2, [pc, #132]	@ (80011ec <MX_FREERTOS_Init+0x110>)
 8001168:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 800116a:	4a21      	ldr	r2, [pc, #132]	@ (80011f0 <MX_FREERTOS_Init+0x114>)
 800116c:	2100      	movs	r1, #0
 800116e:	4821      	ldr	r0, [pc, #132]	@ (80011f4 <MX_FREERTOS_Init+0x118>)
 8001170:	f007 fd6a 	bl	8008c48 <osThreadNew>
 8001174:	4603      	mov	r3, r0
 8001176:	4a20      	ldr	r2, [pc, #128]	@ (80011f8 <MX_FREERTOS_Init+0x11c>)
 8001178:	6013      	str	r3, [r2, #0]

  /* creation of settingsTask */
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 800117a:	4a20      	ldr	r2, [pc, #128]	@ (80011fc <MX_FREERTOS_Init+0x120>)
 800117c:	2100      	movs	r1, #0
 800117e:	4820      	ldr	r0, [pc, #128]	@ (8001200 <MX_FREERTOS_Init+0x124>)
 8001180:	f007 fd62 	bl	8008c48 <osThreadNew>
 8001184:	4603      	mov	r3, r0
 8001186:	4a1f      	ldr	r2, [pc, #124]	@ (8001204 <MX_FREERTOS_Init+0x128>)
 8001188:	6013      	str	r3, [r2, #0]

  /* creation of loggingTask */
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 800118a:	4a1f      	ldr	r2, [pc, #124]	@ (8001208 <MX_FREERTOS_Init+0x12c>)
 800118c:	2100      	movs	r1, #0
 800118e:	481f      	ldr	r0, [pc, #124]	@ (800120c <MX_FREERTOS_Init+0x130>)
 8001190:	f007 fd5a 	bl	8008c48 <osThreadNew>
 8001194:	4603      	mov	r3, r0
 8001196:	4a1e      	ldr	r2, [pc, #120]	@ (8001210 <MX_FREERTOS_Init+0x134>)
 8001198:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	0803326c 	.word	0x0803326c
 80011a4:	20000a14 	.word	0x20000a14
 80011a8:	0803327c 	.word	0x0803327c
 80011ac:	20000a18 	.word	0x20000a18
 80011b0:	080331f4 	.word	0x080331f4
 80011b4:	20000a00 	.word	0x20000a00
 80011b8:	0803320c 	.word	0x0803320c
 80011bc:	20000a04 	.word	0x20000a04
 80011c0:	08033224 	.word	0x08033224
 80011c4:	20000a08 	.word	0x20000a08
 80011c8:	0803323c 	.word	0x0803323c
 80011cc:	20000a0c 	.word	0x20000a0c
 80011d0:	08033254 	.word	0x08033254
 80011d4:	20000a10 	.word	0x20000a10
 80011d8:	08033140 	.word	0x08033140
 80011dc:	08001215 	.word	0x08001215
 80011e0:	200009ec 	.word	0x200009ec
 80011e4:	08033164 	.word	0x08033164
 80011e8:	080014d5 	.word	0x080014d5
 80011ec:	200009f0 	.word	0x200009f0
 80011f0:	08033188 	.word	0x08033188
 80011f4:	0800169d 	.word	0x0800169d
 80011f8:	200009f4 	.word	0x200009f4
 80011fc:	080331ac 	.word	0x080331ac
 8001200:	080018cd 	.word	0x080018cd
 8001204:	200009f8 	.word	0x200009f8
 8001208:	080331d0 	.word	0x080331d0
 800120c:	08001a35 	.word	0x08001a35
 8001210:	200009fc 	.word	0x200009fc

08001214 <StartEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEthTask */
void StartEthTask(void *argument)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b0f1      	sub	sp, #452	@ 0x1c4
 8001218:	af02      	add	r7, sp, #8
 800121a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800121e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001222:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEthTask */
  void 		           *web_handler;
  struct 			   mg_mgr mgr; // Initialise
  MQTT_cred_struct	   mqtt_conf;
  struct mg_connection *mqtt_conn;
  struct               mg_tcpip_spi spi = {
 8001224:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001228:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800122c:	4a9c      	ldr	r2, [pc, #624]	@ (80014a0 <StartEthTask+0x28c>)
 800122e:	461c      	mov	r4, r3
 8001230:	4613      	mov	r3, r2
 8001232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
											  .begin = EthBegin,
											  .end = EthEnd,
											  .txn = EthTxn,
											  .spi = &hspi2,
										  };
  struct              mg_tcpip_if   mif = {
 8001238:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800123c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001240:	4618      	mov	r0, r3
 8001242:	2380      	movs	r3, #128	@ 0x80
 8001244:	461a      	mov	r2, r3
 8001246:	2100      	movs	r1, #0
 8001248:	f024 fc02 	bl	8025a50 <memset>
 800124c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001250:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001254:	2240      	movs	r2, #64	@ 0x40
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800125c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001260:	2222      	movs	r2, #34	@ 0x22
 8001262:	705a      	strb	r2, [r3, #1]
											  .mac = {
													  0x40,
													  0x22,
													  *(uint8_t*)(UID_BASE),
 8001264:	4b8f      	ldr	r3, [pc, #572]	@ (80014a4 <StartEthTask+0x290>)
 8001266:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001268:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800126c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001270:	709a      	strb	r2, [r3, #2]
													  *(uint8_t*)(UID_BASE + 0x02),
 8001272:	4b8d      	ldr	r3, [pc, #564]	@ (80014a8 <StartEthTask+0x294>)
 8001274:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001276:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800127a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800127e:	70da      	strb	r2, [r3, #3]
													  *(uint8_t*)(UID_BASE + 0x04),
 8001280:	4b8a      	ldr	r3, [pc, #552]	@ (80014ac <StartEthTask+0x298>)
 8001282:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001284:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001288:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800128c:	711a      	strb	r2, [r3, #4]
													  *(uint8_t*)(UID_BASE + 0x08)
 800128e:	4b88      	ldr	r3, [pc, #544]	@ (80014b0 <StartEthTask+0x29c>)
 8001290:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001292:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001296:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800129a:	715a      	strb	r2, [r3, #5]
 800129c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80012a0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80012a4:	2201      	movs	r2, #1
 80012a6:	77da      	strb	r2, [r3, #31]
 80012a8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80012ac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2020 	strb.w	r2, [r3, #32]
 80012b6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80012ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80012be:	4a7d      	ldr	r2, [pc, #500]	@ (80014b4 <StartEthTask+0x2a0>)
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80012c2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80012c6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80012ca:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
											  .enable_req_sntp = true,
											  .driver = &mg_tcpip_driver_w5500,
											  .driver_data = &spi
										  };

  mg_full_info.mgr =  &mgr;
 80012d0:	4a79      	ldr	r2, [pc, #484]	@ (80014b8 <StartEthTask+0x2a4>)
 80012d2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012d6:	6013      	str	r3, [r2, #0]
  mg_full_info.mgr_if =  &mif;
 80012d8:	4a77      	ldr	r2, [pc, #476]	@ (80014b8 <StartEthTask+0x2a4>)
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	6053      	str	r3, [r2, #4]



  mg_mgr_init(&mgr);        // Mongoose event manager
 80012e0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012e4:	4618      	mov	r0, r3
 80012e6:	f01c fb6b 	bl	801d9c0 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 80012ea:	4b74      	ldr	r3, [pc, #464]	@ (80014bc <StartEthTask+0x2a8>)
 80012ec:	2203      	movs	r2, #3
 80012ee:	601a      	str	r2, [r3, #0]

  web_handler = dash_hdl(); // Get dashboard handler
 80012f0:	f002 fd00 	bl	8003cf4 <dash_hdl>
 80012f4:	f8c7 01b0 	str.w	r0, [r7, #432]	@ 0x1b0

  while(mif.mtu == 0){
 80012f8:	e013      	b.n	8001322 <StartEthTask+0x10e>
	  EthResetBegin();
 80012fa:	f000 fc75 	bl	8001be8 <EthResetBegin>
	  osDelay(500);
 80012fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001302:	f007 fd34 	bl	8008d6e <osDelay>
	  EthResetEnd();
 8001306:	f000 fc7b 	bl	8001c00 <EthResetEnd>
	  osDelay(2000);
 800130a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800130e:	f007 fd2e 	bl	8008d6e <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8001312:	f107 0208 	add.w	r2, r7, #8
 8001316:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f01f f8d7 	bl	80204d0 <mg_tcpip_init>
  while(mif.mtu == 0){
 8001322:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001326:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800132a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0e3      	beq.n	80012fa <StartEthTask+0xe6>
  }
  set_device_id(mif.mac, sizeof(mif.mac));
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	2106      	movs	r1, #6
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fa15 	bl	8004768 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 800133e:	4860      	ldr	r0, [pc, #384]	@ (80014c0 <StartEthTask+0x2ac>)
 8001340:	f002 fce2 	bl	8003d08 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8001344:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8001348:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 800134c:	4b5a      	ldr	r3, [pc, #360]	@ (80014b8 <StartEthTask+0x2a4>)
 800134e:	495d      	ldr	r1, [pc, #372]	@ (80014c4 <StartEthTask+0x2b0>)
 8001350:	f018 fd4e 	bl	8019df0 <mg_http_listen>

  while (mif.state != MG_TCPIP_STATE_READY) {
 8001354:	e008      	b.n	8001368 <StartEthTask+0x154>
    mg_mgr_poll(&mgr, 1);
 8001356:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800135a:	2101      	movs	r1, #1
 800135c:	4618      	mov	r0, r3
 800135e:	f01f fbcb 	bl	8020af8 <mg_mgr_poll>
    osDelay(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f007 fd03 	bl	8008d6e <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8001368:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800136c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001370:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001374:	2b03      	cmp	r3, #3
 8001376:	d1ee      	bne.n	8001356 <StartEthTask+0x142>
  }

  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001378:	4b4f      	ldr	r3, [pc, #316]	@ (80014b8 <StartEthTask+0x2a4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	b2d9      	uxtb	r1, r3
 8001380:	4b4d      	ldr	r3, [pc, #308]	@ (80014b8 <StartEthTask+0x2a4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	b2d8      	uxtb	r0, r3
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 800138a:	4b4b      	ldr	r3, [pc, #300]	@ (80014b8 <StartEthTask+0x2a4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	0c1b      	lsrs	r3, r3, #16
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001392:	b2db      	uxtb	r3, r3
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8001394:	4a48      	ldr	r2, [pc, #288]	@ (80014b8 <StartEthTask+0x2a4>)
 8001396:	6852      	ldr	r2, [r2, #4]
 8001398:	6892      	ldr	r2, [r2, #8]
 800139a:	0e12      	lsrs	r2, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 800139c:	9201      	str	r2, [sp, #4]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	4603      	mov	r3, r0
 80013a2:	460a      	mov	r2, r1
 80013a4:	4948      	ldr	r1, [pc, #288]	@ (80014c8 <StartEthTask+0x2b4>)
 80013a6:	2001      	movs	r0, #1
 80013a8:	f000 fec8 	bl	800213c <logging>

  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 80013ac:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fceb 	bl	8001d90 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 80013ba:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80013be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d018      	beq.n	80013fa <StartEthTask+0x1e6>
	  logging(L_INFO, "MQTT function enabled.");
 80013c8:	4940      	ldr	r1, [pc, #256]	@ (80014cc <StartEthTask+0x2b8>)
 80013ca:	2001      	movs	r0, #1
 80013cc:	f000 feb6 	bl	800213c <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 80013d0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80013d4:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 80013d8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80013dc:	1c9a      	adds	r2, r3, #2
 80013de:	f107 0108 	add.w	r1, r7, #8
 80013e2:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 80013e6:	4b36      	ldr	r3, [pc, #216]	@ (80014c0 <StartEthTask+0x2ac>)
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80013ee:	33a5      	adds	r3, #165	@ 0xa5
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	4623      	mov	r3, r4
 80013f4:	f003 f8c2 	bl	800457c <mqtt_init>
 80013f8:	e003      	b.n	8001402 <StartEthTask+0x1ee>
  }else{
	  logging(L_INFO, "MQTT function disabled");
 80013fa:	4935      	ldr	r1, [pc, #212]	@ (80014d0 <StartEthTask+0x2bc>)
 80013fc:	2001      	movs	r0, #1
 80013fe:	f000 fe9d 	bl	800213c <logging>
  }
  start_sntp(&mgr);
 8001402:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fea4 	bl	8005154 <start_sntp>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 800140c:	f009 fc28 	bl	800ac60 <xTaskGetTickCount>
 8001410:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4

  /* Infinite loop */
  for(;;)
  {
	  TickType_t current_tick = xTaskGetTickCount();
 8001414:	f009 fc24 	bl	800ac60 <xTaskGetTickCount>
 8001418:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
	  uint32_t elapsed_ms = (current_tick - last_tick) * portTICK_PERIOD_MS; // количество миллисекунд, прошедших с последнего вызова
 800141c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8001420:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	  last_tick = current_tick; // обновляем значение тиков
 800142a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800142e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8001432:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8001436:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f01f fb5b 	bl	8020af8 <mg_mgr_poll>

      while (mif.driver->up(&mif) == false){
 8001442:	e018      	b.n	8001476 <StartEthTask+0x262>
    	  EthResetBegin(); //enable reset state w5500
 8001444:	f000 fbd0 	bl	8001be8 <EthResetBegin>
    	  osDelay(100);
 8001448:	2064      	movs	r0, #100	@ 0x64
 800144a:	f007 fc90 	bl	8008d6e <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 800144e:	f000 fbd7 	bl	8001c00 <EthResetEnd>
    	  osDelay(3000);
 8001452:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001456:	f007 fc8a 	bl	8008d6e <osDelay>
    	  mif.driver->init(&mif);
 800145a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800145e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f107 0208 	add.w	r2, r7, #8
 800146a:	4610      	mov	r0, r2
 800146c:	4798      	blx	r3
    	  osDelay(7000);
 800146e:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8001472:	f007 fc7c 	bl	8008d6e <osDelay>
      while (mif.driver->up(&mif) == false){
 8001476:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800147a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800147e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f107 0208 	add.w	r2, r7, #8
 8001486:	4610      	mov	r0, r2
 8001488:	4798      	blx	r3
 800148a:	4603      	mov	r3, r0
 800148c:	f083 0301 	eor.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1d6      	bne.n	8001444 <StartEthTask+0x230>
      }
      osDelay(1);
 8001496:	2001      	movs	r0, #1
 8001498:	f007 fc69 	bl	8008d6e <osDelay>
  {
 800149c:	e7ba      	b.n	8001414 <StartEthTask+0x200>
 800149e:	bf00      	nop
 80014a0:	0802ee50 	.word	0x0802ee50
 80014a4:	1fff7a10 	.word	0x1fff7a10
 80014a8:	1fff7a12 	.word	0x1fff7a12
 80014ac:	1fff7a14 	.word	0x1fff7a14
 80014b0:	1fff7a18 	.word	0x1fff7a18
 80014b4:	200002a0 	.word	0x200002a0
 80014b8:	200009e4 	.word	0x200009e4
 80014bc:	20000298 	.word	0x20000298
 80014c0:	08001d91 	.word	0x08001d91
 80014c4:	0802edf0 	.word	0x0802edf0
 80014c8:	0802ee04 	.word	0x0802ee04
 80014cc:	0802ee20 	.word	0x0802ee20
 80014d0:	0802ee38 	.word	0x0802ee38

080014d4 <StartIOTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIOTask */
void StartIOTask(void *argument)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b091      	sub	sp, #68	@ 0x44
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIOTask */
	uint16_t pinCoils[] = {coil1_Pin, coil2_Pin, coil3_Pin};
 80014dc:	4a69      	ldr	r2, [pc, #420]	@ (8001684 <StartIOTask+0x1b0>)
 80014de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e6:	6018      	str	r0, [r3, #0]
 80014e8:	3304      	adds	r3, #4
 80014ea:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portCoils[] = {coil1_GPIO_Port, coil2_GPIO_Port, coil3_GPIO_Port};
 80014ec:	4a66      	ldr	r2, [pc, #408]	@ (8001688 <StartIOTask+0x1b4>)
 80014ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t pinInputs[] = {input1_Pin, input2_Pin, input3_Pin};
 80014f8:	4a64      	ldr	r2, [pc, #400]	@ (800168c <StartIOTask+0x1b8>)
 80014fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001502:	6018      	str	r0, [r3, #0]
 8001504:	3304      	adds	r3, #4
 8001506:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portInputs[] = {input1_GPIO_Port, input2_GPIO_Port, input3_GPIO_Port};
 8001508:	4a5f      	ldr	r2, [pc, #380]	@ (8001688 <StartIOTask+0x1b4>)
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001510:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
  /* Infinite loop */
  for(;;)
  {
	 // write outputs
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8001514:	4b5e      	ldr	r3, [pc, #376]	@ (8001690 <StartIOTask+0x1bc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f007 fe83 	bl	8009224 <osMessageQueueGetCount>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d041      	beq.n	80015a8 <StartIOTask+0xd4>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8001524:	4b5a      	ldr	r3, [pc, #360]	@ (8001690 <StartIOTask+0x1bc>)
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	f107 010c 	add.w	r1, r7, #12
 800152c:	2300      	movs	r3, #0
 800152e:	2200      	movs	r2, #0
 8001530:	f007 fe1a 	bl	8009168 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8001534:	2300      	movs	r3, #0
 8001536:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800153a:	e031      	b.n	80015a0 <StartIOTask+0xcc>
		     if (pinOutputs_w[i]) {
 800153c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001540:	3340      	adds	r3, #64	@ 0x40
 8001542:	443b      	add	r3, r7
 8001544:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d012      	beq.n	8001572 <StartIOTask+0x9e>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 800154c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	3340      	adds	r3, #64	@ 0x40
 8001554:	443b      	add	r3, r7
 8001556:	f853 0c14 	ldr.w	r0, [r3, #-20]
 800155a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	3340      	adds	r3, #64	@ 0x40
 8001562:	443b      	add	r3, r7
 8001564:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8001568:	2201      	movs	r2, #1
 800156a:	4619      	mov	r1, r3
 800156c:	f004 fd04 	bl	8005f78 <HAL_GPIO_WritePin>
 8001570:	e011      	b.n	8001596 <StartIOTask+0xc2>
		     } else {
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8001572:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	3340      	adds	r3, #64	@ 0x40
 800157a:	443b      	add	r3, r7
 800157c:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8001580:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	3340      	adds	r3, #64	@ 0x40
 8001588:	443b      	add	r3, r7
 800158a:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	f004 fcf1 	bl	8005f78 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8001596:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800159a:	3301      	adds	r3, #1
 800159c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80015a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d9c9      	bls.n	800153c <StartIOTask+0x68>
		     }
		 }
	 }

	 // read outputs status
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80015ae:	e01f      	b.n	80015f0 <StartIOTask+0x11c>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80015b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	3340      	adds	r3, #64	@ 0x40
 80015b8:	443b      	add	r3, r7
 80015ba:	f853 2c14 	ldr.w	r2, [r3, #-20]
 80015be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	3340      	adds	r3, #64	@ 0x40
 80015c6:	443b      	add	r3, r7
 80015c8:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80015cc:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 80015d0:	4619      	mov	r1, r3
 80015d2:	4610      	mov	r0, r2
 80015d4:	f004 fcb8 	bl	8005f48 <HAL_GPIO_ReadPin>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80015e0:	443b      	add	r3, r7
 80015e2:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80015e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015ea:	3301      	adds	r3, #1
 80015ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80015f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d9db      	bls.n	80015b0 <StartIOTask+0xdc>
	}
	//xQueueOverwrite(outputReadQHandle, &pinOutputs_r);
	osMessageQueueReset(outputReadQHandle);
 80015f8:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <StartIOTask+0x1c0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f007 fe31 	bl	8009264 <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 8001602:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <StartIOTask+0x1c0>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	f107 0110 	add.w	r1, r7, #16
 800160a:	2300      	movs	r3, #0
 800160c:	2200      	movs	r2, #0
 800160e:	f007 fd4b 	bl	80090a8 <osMessageQueuePut>

	// read inputs status
	for (i = 0; i < INPUTS_COUNT; i++) {
 8001612:	2300      	movs	r3, #0
 8001614:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001618:	e01f      	b.n	800165a <StartIOTask+0x186>
		pinInputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]);
 800161a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	3340      	adds	r3, #64	@ 0x40
 8001622:	443b      	add	r3, r7
 8001624:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8001628:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	3340      	adds	r3, #64	@ 0x40
 8001630:	443b      	add	r3, r7
 8001632:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001636:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 800163a:	4619      	mov	r1, r3
 800163c:	4610      	mov	r0, r2
 800163e:	f004 fc83 	bl	8005f48 <HAL_GPIO_ReadPin>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800164a:	443b      	add	r3, r7
 800164c:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8001650:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001654:	3301      	adds	r3, #1
 8001656:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800165a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800165e:	2b02      	cmp	r3, #2
 8001660:	d9db      	bls.n	800161a <StartIOTask+0x146>
	}
	//xQueueOverwrite(inputReadQHandle, &pinInputs_r);
	osMessageQueueReset(inputReadQHandle);
 8001662:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <StartIOTask+0x1c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f007 fdfc 	bl	8009264 <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <StartIOTask+0x1c4>)
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	f107 0114 	add.w	r1, r7, #20
 8001674:	2300      	movs	r3, #0
 8001676:	2200      	movs	r2, #0
 8001678:	f007 fd16 	bl	80090a8 <osMessageQueuePut>

    osDelay(1);
 800167c:	2001      	movs	r0, #1
 800167e:	f007 fb76 	bl	8008d6e <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8001682:	e747      	b.n	8001514 <StartIOTask+0x40>
 8001684:	0802ee60 	.word	0x0802ee60
 8001688:	0802ee68 	.word	0x0802ee68
 800168c:	0802ee74 	.word	0x0802ee74
 8001690:	20000a08 	.word	0x20000a08
 8001694:	20000a04 	.word	0x20000a04
 8001698:	20000a00 	.word	0x20000a00

0800169c <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	b08f      	sub	sp, #60	@ 0x3c
 80016a0:	af04      	add	r7, sp, #16
 80016a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	uint8_t x,y;
	char buf[20];
	osDelay(1000);//
 80016a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016a8:	f007 fb61 	bl	8008d6e <osDelay>

	SSD1306_Init (); // initialise the display
 80016ac:	f006 ff8a 	bl	80085c4 <SSD1306_Init>
	osDelay(100);//
 80016b0:	2064      	movs	r0, #100	@ 0x64
 80016b2:	f007 fb5c 	bl	8008d6e <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80016b6:	2301      	movs	r3, #1
 80016b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80016c2:	2100      	movs	r1, #0
 80016c4:	2001      	movs	r0, #1
 80016c6:	f007 f8dd 	bl	8008884 <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f007 f862 	bl	8008794 <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80016d0:	2201      	movs	r2, #1
 80016d2:	4972      	ldr	r1, [pc, #456]	@ (800189c <StartDisplayTask+0x200>)
 80016d4:	4872      	ldr	r0, [pc, #456]	@ (80018a0 <StartDisplayTask+0x204>)
 80016d6:	f007 f969 	bl	80089ac <SSD1306_Puts>
    //SSD1306_GotoXY(x=1,y=y+11);
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80016da:	2201      	movs	r2, #1
 80016dc:	496f      	ldr	r1, [pc, #444]	@ (800189c <StartDisplayTask+0x200>)
 80016de:	4871      	ldr	r0, [pc, #452]	@ (80018a4 <StartDisplayTask+0x208>)
 80016e0:	f007 f964 	bl	80089ac <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80016e4:	2301      	movs	r3, #1
 80016e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016ea:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016ee:	330b      	adds	r3, #11
 80016f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80016f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4619      	mov	r1, r3
 80016fc:	2001      	movs	r0, #1
 80016fe:	f007 f8c1 	bl	8008884 <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 8001702:	2201      	movs	r2, #1
 8001704:	4965      	ldr	r1, [pc, #404]	@ (800189c <StartDisplayTask+0x200>)
 8001706:	4868      	ldr	r0, [pc, #416]	@ (80018a8 <StartDisplayTask+0x20c>)
 8001708:	f007 f950 	bl	80089ac <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 800170c:	2301      	movs	r3, #1
 800170e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001712:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001716:	330b      	adds	r3, #11
 8001718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800171c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001720:	b29b      	uxth	r3, r3
 8001722:	4619      	mov	r1, r3
 8001724:	2001      	movs	r0, #1
 8001726:	f007 f8ad 	bl	8008884 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 800172a:	2201      	movs	r2, #1
 800172c:	495b      	ldr	r1, [pc, #364]	@ (800189c <StartDisplayTask+0x200>)
 800172e:	485f      	ldr	r0, [pc, #380]	@ (80018ac <StartDisplayTask+0x210>)
 8001730:	f007 f93c 	bl	80089ac <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 8001734:	2301      	movs	r3, #1
 8001736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800173a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800173e:	330b      	adds	r3, #11
 8001740:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001744:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001748:	b29b      	uxth	r3, r3
 800174a:	4619      	mov	r1, r3
 800174c:	2001      	movs	r0, #1
 800174e:	f007 f899 	bl	8008884 <SSD1306_GotoXY>
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8001752:	4b57      	ldr	r3, [pc, #348]	@ (80018b0 <StartDisplayTask+0x214>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	781b      	ldrb	r3, [r3, #0]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001758:	461d      	mov	r5, r3
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 800175a:	4b55      	ldr	r3, [pc, #340]	@ (80018b0 <StartDisplayTask+0x214>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	785b      	ldrb	r3, [r3, #1]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001760:	461e      	mov	r6, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8001762:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <StartDisplayTask+0x214>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	789b      	ldrb	r3, [r3, #2]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001768:	461a      	mov	r2, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 800176a:	4b51      	ldr	r3, [pc, #324]	@ (80018b0 <StartDisplayTask+0x214>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	78db      	ldrb	r3, [r3, #3]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001770:	4619      	mov	r1, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8001772:	4b4f      	ldr	r3, [pc, #316]	@ (80018b0 <StartDisplayTask+0x214>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	791b      	ldrb	r3, [r3, #4]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001778:	461c      	mov	r4, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 800177a:	4b4d      	ldr	r3, [pc, #308]	@ (80018b0 <StartDisplayTask+0x214>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	795b      	ldrb	r3, [r3, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001780:	f107 000c 	add.w	r0, r7, #12
 8001784:	9303      	str	r3, [sp, #12]
 8001786:	9402      	str	r4, [sp, #8]
 8001788:	9101      	str	r1, [sp, #4]
 800178a:	9200      	str	r2, [sp, #0]
 800178c:	4633      	mov	r3, r6
 800178e:	462a      	mov	r2, r5
 8001790:	4948      	ldr	r1, [pc, #288]	@ (80018b4 <StartDisplayTask+0x218>)
 8001792:	f023 fd9b 	bl	80252cc <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2201      	movs	r2, #1
 800179c:	493f      	ldr	r1, [pc, #252]	@ (800189c <StartDisplayTask+0x200>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f007 f904 	bl	80089ac <SSD1306_Puts>

    SSD1306_UpdateScreen();
 80017a4:	f006 ffc8 	bl	8008738 <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 80017a8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80017ac:	f009 f906 	bl	800a9bc <vTaskDelay>
    int i=0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Infinite loop */
  for(;;)
  {
		SSD1306_GotoXY(x=1,y=0);
 80017b4:	2301      	movs	r3, #1
 80017b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80017c0:	2100      	movs	r1, #0
 80017c2:	2001      	movs	r0, #1
 80017c4:	f007 f85e 	bl	8008884 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f006 ffe3 	bl	8008794 <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 80017ce:	2201      	movs	r2, #1
 80017d0:	4932      	ldr	r1, [pc, #200]	@ (800189c <StartDisplayTask+0x200>)
 80017d2:	4839      	ldr	r0, [pc, #228]	@ (80018b8 <StartDisplayTask+0x21c>)
 80017d4:	f007 f8ea 	bl	80089ac <SSD1306_Puts>
	    sprintf(buf,"%lu.%lu.%lu.%lu",
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80017d8:	4b35      	ldr	r3, [pc, #212]	@ (80018b0 <StartDisplayTask+0x214>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80017de:	b2d9      	uxtb	r1, r3
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80017e0:	4b33      	ldr	r3, [pc, #204]	@ (80018b0 <StartDisplayTask+0x214>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	0a1b      	lsrs	r3, r3, #8
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80017e8:	b2dc      	uxtb	r4, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80017ea:	4b31      	ldr	r3, [pc, #196]	@ (80018b0 <StartDisplayTask+0x214>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	0c1b      	lsrs	r3, r3, #16
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80017f2:	b2db      	uxtb	r3, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80017f4:	4a2e      	ldr	r2, [pc, #184]	@ (80018b0 <StartDisplayTask+0x214>)
 80017f6:	6852      	ldr	r2, [r2, #4]
 80017f8:	6892      	ldr	r2, [r2, #8]
 80017fa:	0e12      	lsrs	r2, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80017fc:	f107 000c 	add.w	r0, r7, #12
 8001800:	9201      	str	r2, [sp, #4]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	4623      	mov	r3, r4
 8001806:	460a      	mov	r2, r1
 8001808:	492c      	ldr	r1, [pc, #176]	@ (80018bc <StartDisplayTask+0x220>)
 800180a:	f023 fd5f 	bl	80252cc <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2201      	movs	r2, #1
 8001814:	4921      	ldr	r1, [pc, #132]	@ (800189c <StartDisplayTask+0x200>)
 8001816:	4618      	mov	r0, r3
 8001818:	f007 f8c8 	bl	80089ac <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 800181c:	2301      	movs	r3, #1
 800181e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001822:	230a      	movs	r3, #10
 8001824:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001828:	210a      	movs	r1, #10
 800182a:	2001      	movs	r0, #1
 800182c:	f007 f82a 	bl	8008884 <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 8001830:	2201      	movs	r2, #1
 8001832:	491a      	ldr	r1, [pc, #104]	@ (800189c <StartDisplayTask+0x200>)
 8001834:	4822      	ldr	r0, [pc, #136]	@ (80018c0 <StartDisplayTask+0x224>)
 8001836:	f007 f8b9 	bl	80089ac <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	3301      	adds	r3, #1
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001846:	491f      	ldr	r1, [pc, #124]	@ (80018c4 <StartDisplayTask+0x228>)
 8001848:	4618      	mov	r0, r3
 800184a:	f023 fd3f 	bl	80252cc <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	2201      	movs	r2, #1
 8001854:	4911      	ldr	r1, [pc, #68]	@ (800189c <StartDisplayTask+0x200>)
 8001856:	4618      	mov	r0, r3
 8001858:	f007 f8a8 	bl	80089ac <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800185c:	f006 ff6c 	bl	8008738 <SSD1306_UpdateScreen>

		if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 8001860:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001864:	2201      	movs	r2, #1
 8001866:	2178      	movs	r1, #120	@ 0x78
 8001868:	4817      	ldr	r0, [pc, #92]	@ (80018c8 <StartDisplayTask+0x22c>)
 800186a:	f004 fe11 	bl	8006490 <HAL_I2C_IsDeviceReady>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00e      	beq.n	8001892 <StartDisplayTask+0x1f6>
			HAL_I2C_DeInit(&hi2c1);
 8001874:	4814      	ldr	r0, [pc, #80]	@ (80018c8 <StartDisplayTask+0x22c>)
 8001876:	f004 fcdd 	bl	8006234 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 800187a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800187e:	f009 f89d 	bl	800a9bc <vTaskDelay>
			MX_I2C1_Init();
 8001882:	f000 fb85 	bl	8001f90 <MX_I2C1_Init>
			vTaskDelay(1000);
 8001886:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800188a:	f009 f897 	bl	800a9bc <vTaskDelay>
			SSD1306_Init ();
 800188e:	f006 fe99 	bl	80085c4 <SSD1306_Init>
		}
		osDelay(1000);
 8001892:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001896:	f007 fa6a 	bl	8008d6e <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 800189a:	e78b      	b.n	80017b4 <StartDisplayTask+0x118>
 800189c:	2000007c 	.word	0x2000007c
 80018a0:	0802ee7c 	.word	0x0802ee7c
 80018a4:	0802ee88 	.word	0x0802ee88
 80018a8:	0802ee94 	.word	0x0802ee94
 80018ac:	0802eea0 	.word	0x0802eea0
 80018b0:	200009e4 	.word	0x200009e4
 80018b4:	0802eea8 	.word	0x0802eea8
 80018b8:	0802eec8 	.word	0x0802eec8
 80018bc:	0802eecc 	.word	0x0802eecc
 80018c0:	0802eedc 	.word	0x0802eedc
 80018c4:	0802eee0 	.word	0x0802eee0
 80018c8:	20000a1c 	.word	0x20000a1c

080018cc <StartSettingsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSettingsTask */
void StartSettingsTask(void *argument)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b0b6      	sub	sp, #216	@ 0xd8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSettingsTask */
	size_t  f_size = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	void *  f_pointer = NULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	MQTT_cred_struct mqtt_config;

  SPI_flash_reg_cb(FlashBegin, FlashEnd, RecvBuffSPI2, SendByteSPI2);
 80018e0:	4b46      	ldr	r3, [pc, #280]	@ (80019fc <StartSettingsTask+0x130>)
 80018e2:	4a47      	ldr	r2, [pc, #284]	@ (8001a00 <StartSettingsTask+0x134>)
 80018e4:	4947      	ldr	r1, [pc, #284]	@ (8001a04 <StartSettingsTask+0x138>)
 80018e6:	4848      	ldr	r0, [pc, #288]	@ (8001a08 <StartSettingsTask+0x13c>)
 80018e8:	f003 fc6a 	bl	80051c0 <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 80018ec:	4947      	ldr	r1, [pc, #284]	@ (8001a0c <StartSettingsTask+0x140>)
 80018ee:	4848      	ldr	r0, [pc, #288]	@ (8001a10 <StartSettingsTask+0x144>)
 80018f0:	f00b f88a 	bl	800ca08 <lfs_fs_ll_init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	da01      	bge.n	80018fe <StartSettingsTask+0x32>
	  HAL_NVIC_SystemReset();
 80018fa:	f004 f8b8 	bl	8005a6e <HAL_NVIC_SystemReset>
  }

  mg_fs_lfs_mkdir("/web");
 80018fe:	4845      	ldr	r0, [pc, #276]	@ (8001a14 <StartSettingsTask+0x148>)
 8001900:	f00b f86e 	bl	800c9e0 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 8001904:	4844      	ldr	r0, [pc, #272]	@ (8001a18 <StartSettingsTask+0x14c>)
 8001906:	f00b f857 	bl	800c9b8 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 800190a:	4844      	ldr	r0, [pc, #272]	@ (8001a1c <StartSettingsTask+0x150>)
 800190c:	f00b f854 	bl	800c9b8 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8001910:	4841      	ldr	r0, [pc, #260]	@ (8001a18 <StartSettingsTask+0x14c>)
 8001912:	f00b f865 	bl	800c9e0 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 8001916:	4842      	ldr	r0, [pc, #264]	@ (8001a20 <StartSettingsTask+0x154>)
 8001918:	f00b f862 	bl	800c9e0 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 800191c:	4841      	ldr	r0, [pc, #260]	@ (8001a24 <StartSettingsTask+0x158>)
 800191e:	f00b f85f 	bl	800c9e0 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 8001922:	4841      	ldr	r0, [pc, #260]	@ (8001a28 <StartSettingsTask+0x15c>)
 8001924:	f00b f85c 	bl	800c9e0 <mg_fs_lfs_mkdir>



  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 8001928:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800192c:	2200      	movs	r2, #0
 800192e:	4619      	mov	r1, r3
 8001930:	483e      	ldr	r0, [pc, #248]	@ (8001a2c <StartSettingsTask+0x160>)
 8001932:	f00a fee9 	bl	800c708 <mg_fs_lfs_status>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01c      	beq.n	8001976 <StartSettingsTask+0xaa>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 800193c:	2101      	movs	r1, #1
 800193e:	483b      	ldr	r0, [pc, #236]	@ (8001a2c <StartSettingsTask+0x160>)
 8001940:	f00a ff80 	bl	800c844 <mg_fs_lfs_open>
 8001944:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	22c6      	movs	r2, #198	@ 0xc6
 800194e:	4619      	mov	r1, r3
 8001950:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001954:	f00a ffc4 	bl	800c8e0 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 8001958:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800195c:	f00a ffac 	bl	800c8b8 <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	723b      	strb	r3, [r7, #8]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8001964:	4b32      	ldr	r3, [pc, #200]	@ (8001a30 <StartSettingsTask+0x164>)
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	f107 0108 	add.w	r1, r7, #8
 800196c:	2302      	movs	r3, #2
 800196e:	2200      	movs	r2, #0
 8001970:	f007 ff80 	bl	8009874 <xQueueGenericSend>
 8001974:	e00e      	b.n	8001994 <StartSettingsTask+0xc8>
  }else{
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	22c6      	movs	r2, #198	@ 0xc6
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f024 f866 	bl	8025a50 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8001984:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <StartSettingsTask+0x164>)
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	f107 0108 	add.w	r1, r7, #8
 800198c:	2302      	movs	r3, #2
 800198e:	2200      	movs	r2, #0
 8001990:	f007 ff70 	bl	8009874 <xQueueGenericSend>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 8001994:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <StartSettingsTask+0x164>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f107 0108 	add.w	r1, r7, #8
 800199c:	2200      	movs	r2, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f008 fafa 	bl	8009f98 <xQueuePeek>
	  if(mqtt_config.save){
 80019a4:	7a3b      	ldrb	r3, [r7, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d022      	beq.n	80019f0 <StartSettingsTask+0x124>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 80019aa:	4820      	ldr	r0, [pc, #128]	@ (8001a2c <StartSettingsTask+0x160>)
 80019ac:	f00b f804 	bl	800c9b8 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 80019b0:	2102      	movs	r1, #2
 80019b2:	481e      	ldr	r0, [pc, #120]	@ (8001a2c <StartSettingsTask+0x160>)
 80019b4:	f00a ff46 	bl	800c844 <mg_fs_lfs_open>
 80019b8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 80019bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d015      	beq.n	80019f0 <StartSettingsTask+0x124>
			  //mg_fs_lfs_seek(f_pointer, 0);
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	22c6      	movs	r2, #198	@ 0xc6
 80019ca:	4619      	mov	r1, r3
 80019cc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80019d0:	f00a ff9e 	bl	800c910 <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 80019d4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80019d8:	f00a ff6e 	bl	800c8b8 <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	723b      	strb	r3, [r7, #8]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80019e0:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <StartSettingsTask+0x164>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	f107 0108 	add.w	r1, r7, #8
 80019e8:	2302      	movs	r3, #2
 80019ea:	2200      	movs	r2, #0
 80019ec:	f007 ff42 	bl	8009874 <xQueueGenericSend>
		  }
	  }

    osDelay(1000);
 80019f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f4:	f007 f9bb 	bl	8008d6e <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80019f8:	e7cc      	b.n	8001994 <StartSettingsTask+0xc8>
 80019fa:	bf00      	nop
 80019fc:	08001d01 	.word	0x08001d01
 8001a00:	08001d25 	.word	0x08001d25
 8001a04:	08001cd9 	.word	0x08001cd9
 8001a08:	08001cad 	.word	0x08001cad
 8001a0c:	08001d71 	.word	0x08001d71
 8001a10:	08001d4d 	.word	0x08001d4d
 8001a14:	0802eee4 	.word	0x0802eee4
 8001a18:	0802eeec 	.word	0x0802eeec
 8001a1c:	0802eef8 	.word	0x0802eef8
 8001a20:	0802ef08 	.word	0x0802ef08
 8001a24:	0802ef14 	.word	0x0802ef14
 8001a28:	0802ef1c 	.word	0x0802ef1c
 8001a2c:	0802ef24 	.word	0x0802ef24
 8001a30:	20000a0c 	.word	0x20000a0c

08001a34 <StartLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggingTask */
void StartLoggingTask(void *argument)
{
 8001a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a36:	b0d5      	sub	sp, #340	@ 0x154
 8001a38:	af06      	add	r7, sp, #24
 8001a3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a3e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a42:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartLoggingTask */

	uint32_t count = 2000;
 8001a44:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a48:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	void *  f_pointer = NULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	size_t fs_size;
	HeapStats_t heap_status;

	osDelay(2000);
 8001a52:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a56:	f007 f98a 	bl	8008d6e <osDelay>
	reg_logging_fn(add_log_mess_to_q);
 8001a5a:	4859      	ldr	r0, [pc, #356]	@ (8001bc0 <StartLoggingTask+0x18c>)
 8001a5c:	f000 fb5c 	bl	8002118 <reg_logging_fn>

	logging(L_INFO, "Device started...");
 8001a60:	4958      	ldr	r1, [pc, #352]	@ (8001bc4 <StartLoggingTask+0x190>)
 8001a62:	2001      	movs	r0, #1
 8001a64:	f000 fb6a 	bl	800213c <logging>
  /* Infinite loop */
  for(;;)
  {
	  //--------logging
	  if (osMessageQueueGetCount(loggingQHandle)){
 8001a68:	4b57      	ldr	r3, [pc, #348]	@ (8001bc8 <StartLoggingTask+0x194>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f007 fbd9 	bl	8009224 <osMessageQueueGetCount>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <StartLoggingTask+0x86>
		  log_message_t log;
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 8001a78:	4b53      	ldr	r3, [pc, #332]	@ (8001bc8 <StartLoggingTask+0x194>)
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	f107 010c 	add.w	r1, r7, #12
 8001a80:	2300      	movs	r3, #0
 8001a82:	2200      	movs	r2, #0
 8001a84:	f007 fb70 	bl	8009168 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 8001a88:	2102      	movs	r1, #2
 8001a8a:	4850      	ldr	r0, [pc, #320]	@ (8001bcc <StartLoggingTask+0x198>)
 8001a8c:	f00a feda 	bl	800c844 <mg_fs_lfs_open>
 8001a90:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 8001a94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001a9c:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001aae:	f00a ff2f 	bl	800c910 <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8001ab2:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001ab6:	f00a feff 	bl	800c8b8 <mg_fs_lfs_close>
	  }
	  //--------logging
    osDelay(500);
 8001aba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001abe:	f007 f956 	bl	8008d6e <osDelay>


    if (count == 2000){
 8001ac2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001ac6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001aca:	d173      	bne.n	8001bb4 <StartLoggingTask+0x180>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 8001acc:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	483d      	ldr	r0, [pc, #244]	@ (8001bcc <StartLoggingTask+0x198>)
 8001ad6:	f00a fe17 	bl	800c708 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8001ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001ade:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d90a      	bls.n	8001afc <StartLoggingTask+0xc8>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 8001ae6:	483a      	ldr	r0, [pc, #232]	@ (8001bd0 <StartLoggingTask+0x19c>)
 8001ae8:	f00a ff66 	bl	800c9b8 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 8001aec:	4938      	ldr	r1, [pc, #224]	@ (8001bd0 <StartLoggingTask+0x19c>)
 8001aee:	4837      	ldr	r0, [pc, #220]	@ (8001bcc <StartLoggingTask+0x198>)
 8001af0:	f00a ff4c 	bl	800c98c <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 8001af4:	4937      	ldr	r1, [pc, #220]	@ (8001bd4 <StartLoggingTask+0x1a0>)
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 fb20 	bl	800213c <logging>
    	}

    	count = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    	vPortGetHeapStats(&heap_status);
 8001b02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b06:	4618      	mov	r0, r3
 8001b08:	f00a fd80 	bl	800c60c <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
                (unsigned int)heap_status.xAvailableHeapSpaceInBytes,
 8001b0c:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
                (unsigned int)heap_status.xSizeOfLargestFreeBlockInBytes,
 8001b10:	f8d7 6114 	ldr.w	r6, [r7, #276]	@ 0x114
                (unsigned int)heap_status.xSizeOfSmallestFreeBlockInBytes,
 8001b14:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
                (unsigned int)heap_status.xNumberOfFreeBlocks,
 8001b18:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
                (unsigned int)heap_status.xMinimumEverFreeBytesRemaining,
 8001b1c:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
                (unsigned int)heap_status.xNumberOfSuccessfulAllocations,
 8001b20:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
                (unsigned int)heap_status.xNumberOfSuccessfulFrees);
 8001b24:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8001b28:	9404      	str	r4, [sp, #16]
 8001b2a:	9003      	str	r0, [sp, #12]
 8001b2c:	9102      	str	r1, [sp, #8]
 8001b2e:	9201      	str	r2, [sp, #4]
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	4633      	mov	r3, r6
 8001b34:	462a      	mov	r2, r5
 8001b36:	4928      	ldr	r1, [pc, #160]	@ (8001bd8 <StartLoggingTask+0x1a4>)
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f000 faff 	bl	800213c <logging>

    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001b3e:	4b27      	ldr	r3, [pc, #156]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8001b44:	b2d9      	uxtb	r1, r3
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001b46:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8001b4e:	b2d8      	uxtb	r0, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8001b50:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0c1b      	lsrs	r3, r3, #16
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8001b58:	b2db      	uxtb	r3, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8001b5a:	4a20      	ldr	r2, [pc, #128]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b5c:	6852      	ldr	r2, [r2, #4]
 8001b5e:	6892      	ldr	r2, [r2, #8]
 8001b60:	0e12      	lsrs	r2, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8001b62:	9201      	str	r2, [sp, #4]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	4603      	mov	r3, r0
 8001b68:	460a      	mov	r2, r1
 8001b6a:	491d      	ldr	r1, [pc, #116]	@ (8001be0 <StartLoggingTask+0x1ac>)
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f000 fae5 	bl	800213c <logging>

    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8001b72:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	781b      	ldrb	r3, [r3, #0]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001b78:	461c      	mov	r4, r3
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8001b7a:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	785b      	ldrb	r3, [r3, #1]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001b80:	461d      	mov	r5, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8001b82:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	789b      	ldrb	r3, [r3, #2]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001b88:	461a      	mov	r2, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8001b8a:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	78db      	ldrb	r3, [r3, #3]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001b90:	4619      	mov	r1, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8001b92:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	791b      	ldrb	r3, [r3, #4]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001b98:	4618      	mov	r0, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8001b9a:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <StartLoggingTask+0x1a8>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	795b      	ldrb	r3, [r3, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001ba0:	9303      	str	r3, [sp, #12]
 8001ba2:	9002      	str	r0, [sp, #8]
 8001ba4:	9101      	str	r1, [sp, #4]
 8001ba6:	9200      	str	r2, [sp, #0]
 8001ba8:	462b      	mov	r3, r5
 8001baa:	4622      	mov	r2, r4
 8001bac:	490d      	ldr	r1, [pc, #52]	@ (8001be4 <StartLoggingTask+0x1b0>)
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f000 fac4 	bl	800213c <logging>

    }
    count ++;
 8001bb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	  if (osMessageQueueGetCount(loggingQHandle)){
 8001bbe:	e753      	b.n	8001a68 <StartLoggingTask+0x34>
 8001bc0:	08001e4d 	.word	0x08001e4d
 8001bc4:	0802ef38 	.word	0x0802ef38
 8001bc8:	20000a10 	.word	0x20000a10
 8001bcc:	0802ef4c 	.word	0x0802ef4c
 8001bd0:	0802ef5c 	.word	0x0802ef5c
 8001bd4:	0802ef6c 	.word	0x0802ef6c
 8001bd8:	0802ef80 	.word	0x0802ef80
 8001bdc:	200009e4 	.word	0x200009e4
 8001be0:	0802ee04 	.word	0x0802ee04
 8001be4:	0802f014 	.word	0x0802f014

08001be8 <EthResetBegin>:
  /* USER CODE END StartLoggingTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void EthResetBegin(void){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bf2:	4802      	ldr	r0, [pc, #8]	@ (8001bfc <EthResetBegin+0x14>)
 8001bf4:	f004 f9c0 	bl	8005f78 <HAL_GPIO_WritePin>
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40020000 	.word	0x40020000

08001c00 <EthResetEnd>:

void EthResetEnd(void){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c0a:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <EthResetEnd+0x14>)
 8001c0c:	f004 f9b4 	bl	8005f78 <HAL_GPIO_WritePin>
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40020000 	.word	0x40020000

08001c18 <EthBegin>:

void EthBegin(void * param){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	osMutexAcquire(SPI2MutexHandle, osWaitForever);
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <EthBegin+0x2c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f007 f941 	bl	8008eb0 <osMutexAcquire>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c34:	4804      	ldr	r0, [pc, #16]	@ (8001c48 <EthBegin+0x30>)
 8001c36:	f004 f99f 	bl	8005f78 <HAL_GPIO_WritePin>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000a14 	.word	0x20000a14
 8001c48:	40020400 	.word	0x40020400

08001c4c <EthEnd>:

void EthEnd(void * param){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	//osDelay(1);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c5a:	4806      	ldr	r0, [pc, #24]	@ (8001c74 <EthEnd+0x28>)
 8001c5c:	f004 f98c 	bl	8005f78 <HAL_GPIO_WritePin>
	osMutexRelease(SPI2MutexHandle);
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <EthEnd+0x2c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f007 f96e 	bl	8008f46 <osMutexRelease>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40020400 	.word	0x40020400
 8001c78:	20000a14 	.word	0x20000a14

08001c7c <EthTxn>:

uint8_t EthTxn(void *spi, uint8_t data) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8001c88:	f107 020f 	add.w	r2, r7, #15
 8001c8c:	1cf9      	adds	r1, r7, #3
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2301      	movs	r3, #1
 8001c96:	4804      	ldr	r0, [pc, #16]	@ (8001ca8 <EthTxn+0x2c>)
 8001c98:	f005 ff34 	bl	8007b04 <HAL_SPI_TransmitReceive>
  return rx_data;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000a70 	.word	0x20000a70

08001cac <FlashBegin>:

void FlashBegin(void){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	osMutexAcquire(SPI2MutexHandle, osWaitForever);
 8001cb0:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <FlashBegin+0x24>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f007 f8f9 	bl	8008eb0 <osMutexAcquire>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cc4:	4803      	ldr	r0, [pc, #12]	@ (8001cd4 <FlashBegin+0x28>)
 8001cc6:	f004 f957 	bl	8005f78 <HAL_GPIO_WritePin>
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000a14 	.word	0x20000a14
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <FlashEnd>:

void FlashEnd(void){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ce2:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <FlashEnd+0x20>)
 8001ce4:	f004 f948 	bl	8005f78 <HAL_GPIO_WritePin>
	osMutexRelease(SPI2MutexHandle);
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <FlashEnd+0x24>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f007 f92a 	bl	8008f46 <osMutexRelease>
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	20000a14 	.word	0x20000a14

08001d00 <SendByteSPI2>:

void SendByteSPI2(uint8_t byte){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &byte, 1, HAL_MAX_DELAY);
 8001d0a:	1df9      	adds	r1, r7, #7
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d10:	2201      	movs	r2, #1
 8001d12:	4803      	ldr	r0, [pc, #12]	@ (8001d20 <SendByteSPI2+0x20>)
 8001d14:	f005 fc99 	bl	800764a <HAL_SPI_Transmit>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000a70 	.word	0x20000a70

08001d24 <RecvBuffSPI2>:

int RecvBuffSPI2(uint8_t * buffer, uint16_t size){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Receive(&hspi2, buffer, size, HAL_MAX_DELAY);
 8001d30:	887a      	ldrh	r2, [r7, #2]
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4803      	ldr	r0, [pc, #12]	@ (8001d48 <RecvBuffSPI2+0x24>)
 8001d3a:	f005 fdca 	bl	80078d2 <HAL_SPI_Receive>
 8001d3e:	4603      	mov	r3, r0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000a70 	.word	0x20000a70

08001d4c <FS_Lock>:

void FS_Lock(void * param){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <FS_Lock+0x20>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f007 f8a7 	bl	8008eb0 <osMutexAcquire>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000a18 	.word	0x20000a18

08001d70 <FS_Unlock>:

void FS_Unlock(void * param){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	osMutexRelease(FSMutexHandle);
 8001d78:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <FS_Unlock+0x1c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f007 f8e2 	bl	8008f46 <osMutexRelease>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000a18 	.word	0x20000a18

08001d90 <RW_parameters_from_queue>:

    // �?спользуем функцию отправки и приема байта
    return SPI_SendReceiveByte(hspi, data);
}

void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	70fb      	strb	r3, [r7, #3]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	70bb      	strb	r3, [r7, #2]
	switch (param_type) {
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d02b      	beq.n	8001dfe <RW_parameters_from_queue+0x6e>
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	dc44      	bgt.n	8001e34 <RW_parameters_from_queue+0xa4>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <RW_parameters_from_queue+0x24>
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d018      	beq.n	8001de4 <RW_parameters_from_queue+0x54>
				xQueuePeek(outputReadQHandle, output, 0);
			}else if(direction == S_WRITE){
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}
 8001db2:	e03f      	b.n	8001e34 <RW_parameters_from_queue+0xa4>
			MQTT_cred_struct * pr = (MQTT_cred_struct *) param;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	60fb      	str	r3, [r7, #12]
			if (direction == S_READ){
 8001db8:	78bb      	ldrb	r3, [r7, #2]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d107      	bne.n	8001dce <RW_parameters_from_queue+0x3e>
				xQueuePeek(mqttQHandle, pr, 0);
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <RW_parameters_from_queue+0xac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f008 f8e6 	bl	8009f98 <xQueuePeek>
			break;
 8001dcc:	e02f      	b.n	8001e2e <RW_parameters_from_queue+0x9e>
			}else if (direction == S_WRITE){
 8001dce:	78bb      	ldrb	r3, [r7, #2]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d12c      	bne.n	8001e2e <RW_parameters_from_queue+0x9e>
				xQueueOverwrite(mqttQHandle, pr);
 8001dd4:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <RW_parameters_from_queue+0xac>)
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	2302      	movs	r3, #2
 8001dda:	2200      	movs	r2, #0
 8001ddc:	68f9      	ldr	r1, [r7, #12]
 8001dde:	f007 fd49 	bl	8009874 <xQueueGenericSend>
			break;
 8001de2:	e024      	b.n	8001e2e <RW_parameters_from_queue+0x9e>
			inputs_state_t * input = (inputs_state_t *) param;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	613b      	str	r3, [r7, #16]
			if (direction == S_READ){
 8001de8:	78bb      	ldrb	r3, [r7, #2]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d121      	bne.n	8001e32 <RW_parameters_from_queue+0xa2>
				xQueuePeek(inputReadQHandle, input, 0);
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <RW_parameters_from_queue+0xb0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	6939      	ldr	r1, [r7, #16]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f008 f8ce 	bl	8009f98 <xQueuePeek>
			break;
 8001dfc:	e019      	b.n	8001e32 <RW_parameters_from_queue+0xa2>
			inputs_state_t * output = (inputs_state_t *) param;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	617b      	str	r3, [r7, #20]
			if (direction == S_READ){
 8001e02:	78bb      	ldrb	r3, [r7, #2]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <RW_parameters_from_queue+0x88>
				xQueuePeek(outputReadQHandle, output, 0);
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <RW_parameters_from_queue+0xb4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6979      	ldr	r1, [r7, #20]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 f8c1 	bl	8009f98 <xQueuePeek>
}
 8001e16:	e00d      	b.n	8001e34 <RW_parameters_from_queue+0xa4>
			}else if(direction == S_WRITE){
 8001e18:	78bb      	ldrb	r3, [r7, #2]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10a      	bne.n	8001e34 <RW_parameters_from_queue+0xa4>
				xQueueOverwrite(outputWriteQHandle, output);
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <RW_parameters_from_queue+0xb8>)
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	2302      	movs	r3, #2
 8001e24:	2200      	movs	r2, #0
 8001e26:	6979      	ldr	r1, [r7, #20]
 8001e28:	f007 fd24 	bl	8009874 <xQueueGenericSend>
}
 8001e2c:	e002      	b.n	8001e34 <RW_parameters_from_queue+0xa4>
			break;
 8001e2e:	bf00      	nop
 8001e30:	e000      	b.n	8001e34 <RW_parameters_from_queue+0xa4>
			break;
 8001e32:	bf00      	nop
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000a0c 	.word	0x20000a0c
 8001e40:	20000a00 	.word	0x20000a00
 8001e44:	20000a04 	.word	0x20000a04
 8001e48:	20000a08 	.word	0x20000a08

08001e4c <add_log_mess_to_q>:

void add_log_mess_to_q(struct log_message mess){
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	f107 0c08 	add.w	ip, r7, #8
 8001e56:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8001e5a:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <add_log_mess_to_q+0x2c>)
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2200      	movs	r2, #0
 8001e62:	f107 0108 	add.w	r1, r7, #8
 8001e66:	f007 f91f 	bl	80090a8 <osMessageQueuePut>

}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e72:	b004      	add	sp, #16
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000a10 	.word	0x20000a10

08001e7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a3a      	ldr	r2, [pc, #232]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b38      	ldr	r3, [pc, #224]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	4b34      	ldr	r3, [pc, #208]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	4a33      	ldr	r2, [pc, #204]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebe:	4b31      	ldr	r3, [pc, #196]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4b2d      	ldr	r3, [pc, #180]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eda:	4b2a      	ldr	r3, [pc, #168]	@ (8001f84 <MX_GPIO_Init+0x108>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001eec:	4826      	ldr	r0, [pc, #152]	@ (8001f88 <MX_GPIO_Init+0x10c>)
 8001eee:	f004 f843 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ef8:	4824      	ldr	r0, [pc, #144]	@ (8001f8c <MX_GPIO_Init+0x110>)
 8001efa:	f004 f83d 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f04:	4820      	ldr	r0, [pc, #128]	@ (8001f88 <MX_GPIO_Init+0x10c>)
 8001f06:	f004 f837 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f12:	2302      	movs	r3, #2
 8001f14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	481a      	ldr	r0, [pc, #104]	@ (8001f88 <MX_GPIO_Init+0x10c>)
 8001f1e:	f003 fdab 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8001f22:	23e0      	movs	r3, #224	@ 0xe0
 8001f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f26:	2301      	movs	r3, #1
 8001f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	4619      	mov	r1, r3
 8001f38:	4813      	ldr	r0, [pc, #76]	@ (8001f88 <MX_GPIO_Init+0x10c>)
 8001f3a:	f003 fd9d 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	4619      	mov	r1, r3
 8001f56:	480d      	ldr	r0, [pc, #52]	@ (8001f8c <MX_GPIO_Init+0x110>)
 8001f58:	f003 fd8e 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8001f5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f62:	2301      	movs	r3, #1
 8001f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	4619      	mov	r1, r3
 8001f74:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <MX_GPIO_Init+0x10c>)
 8001f76:	f003 fd7f 	bl	8005a78 <HAL_GPIO_Init>

}
 8001f7a:	bf00      	nop
 8001f7c:	3720      	adds	r7, #32
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020400 	.word	0x40020400

08001f90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001f96:	4a13      	ldr	r2, [pc, #76]	@ (8001fe4 <MX_I2C1_Init+0x54>)
 8001f98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001f9c:	4a12      	ldr	r2, [pc, #72]	@ (8001fe8 <MX_I2C1_Init+0x58>)
 8001f9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	@ (8001fe0 <MX_I2C1_Init+0x50>)
 8001fce:	f003 ffed 	bl	8005fac <HAL_I2C_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fd8:	f000 fa54 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000a1c 	.word	0x20000a1c
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	00030d40 	.word	0x00030d40

08001fec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	@ 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_I2C_MspInit+0x84>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12b      	bne.n	8002066 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	4a17      	ldr	r2, [pc, #92]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	@ 0x30
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800202a:	23c0      	movs	r3, #192	@ 0xc0
 800202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202e:	2312      	movs	r3, #18
 8002030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002032:	2301      	movs	r3, #1
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800203a:	2304      	movs	r3, #4
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	480c      	ldr	r0, [pc, #48]	@ (8002078 <HAL_I2C_MspInit+0x8c>)
 8002046:	f003 fd17 	bl	8005a78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	4a08      	ldr	r2, [pc, #32]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002054:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002058:	6413      	str	r3, [r2, #64]	@ 0x40
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	@ 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40005400 	.word	0x40005400
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400

0800207c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <HAL_I2C_MspDeInit+0x38>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10d      	bne.n	80020aa <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_I2C_MspDeInit+0x3c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	4a09      	ldr	r2, [pc, #36]	@ (80020b8 <HAL_I2C_MspDeInit+0x3c>)
 8002094:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002098:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800209a:	2140      	movs	r1, #64	@ 0x40
 800209c:	4807      	ldr	r0, [pc, #28]	@ (80020bc <HAL_I2C_MspDeInit+0x40>)
 800209e:	f003 fe6f 	bl	8005d80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80020a2:	2180      	movs	r1, #128	@ 0x80
 80020a4:	4805      	ldr	r0, [pc, #20]	@ (80020bc <HAL_I2C_MspDeInit+0x40>)
 80020a6:	f003 fe6b 	bl	8005d80 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40005400 	.word	0x40005400
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020400 	.word	0x40020400

080020c0 <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f00a f8aa 	bl	800c22c <pvPortMalloc>
 80020d8:	4603      	mov	r3, r0
 80020da:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <mg_calloc+0x34>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	2100      	movs	r1, #0
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f023 fcae 	bl	8025a50 <memset>
  return p;
 80020f4:	68fb      	ldr	r3, [r7, #12]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <proto>:

#include "mongoose.h"

#define time_ms_now() mg_now()

static void proto(struct log_message mess ){};
 80020fe:	b084      	sub	sp, #16
 8002100:	b490      	push	{r4, r7}
 8002102:	af00      	add	r7, sp, #0
 8002104:	f107 0408 	add.w	r4, r7, #8
 8002108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bc90      	pop	{r4, r7}
 8002112:	b004      	add	sp, #16
 8002114:	4770      	bx	lr
	...

08002118 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	if (fn != NULL){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <reg_logging_fn+0x14>
		_send_log_mess = fn;
 8002126:	4a04      	ldr	r2, [pc, #16]	@ (8002138 <reg_logging_fn+0x20>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6013      	str	r3, [r2, #0]
	}
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	20000000 	.word	0x20000000

0800213c <logging>:

void logging(uint8_t level, const char *format, ...){
 800213c:	b40e      	push	{r1, r2, r3}
 800213e:	b5b0      	push	{r4, r5, r7, lr}
 8002140:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8002144:	af3e      	add	r7, sp, #248	@ 0xf8
 8002146:	4602      	mov	r2, r0
 8002148:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800214c:	f2a3 1399 	subw	r3, r3, #409	@ 0x199
 8002150:	701a      	strb	r2, [r3, #0]
    va_list args;

    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8002158:	2101      	movs	r1, #1
 800215a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800215e:	f7ff ffaf 	bl	80020c0 <mg_calloc>
 8002162:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

    if (!tmp_buf){
 8002166:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80e8 	beq.w	8002340 <logging+0x204>
    	return;
    }

    // Инициализация структуры нулями
    memset(&mess, 0, sizeof(log_message_t));
 8002170:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002174:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f023 fc68 	bl	8025a50 <memset>

    // Установка уровня логирования
    mess.log_level = level;
 8002180:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002184:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002188:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800218c:	f2a2 1299 	subw	r2, r2, #409	@ 0x199
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	701a      	strb	r2, [r3, #0]


    // Получение текущего времени в миллисекундах
    double ms_now = time_ms_now();
 8002194:	f01f f880 	bl	8021298 <mg_now>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f7fe fa0c 	bl	80005bc <__aeabi_ul2d>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190

    // Преобразование миллисекунд в секунды для time_t
    time_t now = (time_t)(ms_now / 1000.0);
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	4b67      	ldr	r3, [pc, #412]	@ (8002350 <logging+0x214>)
 80021b2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80021b6:	f7fe fb61 	bl	800087c <__aeabi_ddiv>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7fe fdf5 	bl	8000db0 <__aeabi_d2lz>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    // Получение локального времени
    struct tm tm_info;
    localtime_r(&now, &tm_info);
 80021ce:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80021d2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f023 fccf 	bl	8025b7c <localtime_r>

    // Форматирование времени
    char time_str[64];
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 80021de:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80021e2:	f107 000c 	add.w	r0, r7, #12
 80021e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002354 <logging+0x218>)
 80021e8:	2140      	movs	r1, #64	@ 0x40
 80021ea:	f024 fad9 	bl	80267a0 <strftime>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Вычисление миллисекунд
    int millis = (int)(ms_now) % 1000;
 80021f4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80021f8:	f7fe fcc6 	bl	8000b88 <__aeabi_d2iz>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4a56      	ldr	r2, [pc, #344]	@ (8002358 <logging+0x21c>)
 8002200:	fb82 1203 	smull	r1, r2, r2, r3
 8002204:	1191      	asrs	r1, r2, #6
 8002206:	17da      	asrs	r2, r3, #31
 8002208:	1a8a      	subs	r2, r1, r2
 800220a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800220e:	fb01 f202 	mul.w	r2, r1, r2
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

    // Добавление миллисекунд к строке времени
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8002218:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800221c:	f107 020c 	add.w	r2, r7, #12
 8002220:	18d0      	adds	r0, r2, r3
 8002222:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002226:	f1c3 0140 	rsb	r1, r3, #64	@ 0x40
 800222a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800222e:	4a4b      	ldr	r2, [pc, #300]	@ (800235c <logging+0x220>)
 8002230:	f022 fee4 	bl	8024ffc <snprintf>
 8002234:	4602      	mov	r2, r0
 8002236:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800223a:	4413      	add	r3, r2
 800223c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Добавление разделителя, например, пробела
    time_str[time_len++] = ' ';
 8002240:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 800224a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800224e:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8002252:	2120      	movs	r1, #32
 8002254:	54d1      	strb	r1, [r2, r3]
    time_str[time_len++] = '\0';
 8002256:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8002260:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002264:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8002268:	2100      	movs	r1, #0
 800226a:	54d1      	strb	r1, [r2, r3]
    time_len += 1;
 800226c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002270:	3301      	adds	r3, #1
 8002272:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Инициализация списка аргументов
    va_start(args, format);
 8002276:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 800227a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800227e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002282:	601a      	str	r2, [r3, #0]

    // Форматирование строки с ограничением на размер log_text
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8002284:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002288:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800228c:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8002290:	1c50      	adds	r0, r2, #1
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002298:	21fd      	movs	r1, #253	@ 0xfd
 800229a:	f023 f977 	bl	802558c <vsnprintf>
 800229e:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    //formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN  - 3, format, args);

    // Завершение работы со списком аргументов
    va_end(args);

    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s\r\n", time_str, mess.log_text);
 80022a2:	f107 020c 	add.w	r2, r7, #12
 80022a6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80022aa:	3301      	adds	r3, #1
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002360 <logging+0x224>)
 80022b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022b6:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 80022ba:	f022 fe9f 	bl	8024ffc <snprintf>
    // Проверка длины отформатированной строки
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 3) {
 80022be:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	db12      	blt.n	80022ec <logging+0x1b0>
 80022c6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80022ca:	2bfc      	cmp	r3, #252	@ 0xfc
 80022cc:	dc0e      	bgt.n	80022ec <logging+0x1b0>
         mess.log_len = time_len + formatted_len;
 80022ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4413      	add	r3, r2
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022e6:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
 80022ea:	e006      	b.n	80022fa <logging+0x1be>
     } else {
         mess.log_len = LOG_MES_TEXT_LEN - 3;
 80022ec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022f0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022f4:	22fd      	movs	r2, #253	@ 0xfd
 80022f6:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
     }

     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 80022fa:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80022fe:	3301      	adds	r3, #1
 8002300:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002304:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8002308:	4618      	mov	r0, r3
 800230a:	f023 fbe8 	bl	8025ade <strncpy>
//     mess.log_text[mess.log_len + 1] = '\n';
//     mess.log_text[mess.log_len + 2] = '\0';
//     mess.log_len += 2;  // Обновление длины для учёта \r\n

    // Проверка на существование функции перед вызовом
    if (_send_log_mess) {
 800230e:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <logging+0x228>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00f      	beq.n	8002336 <logging+0x1fa>
        _send_log_mess(mess);
 8002316:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <logging+0x228>)
 8002318:	681d      	ldr	r5, [r3, #0]
 800231a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800231e:	f5a3 7490 	sub.w	r4, r3, #288	@ 0x120
 8002322:	4668      	mov	r0, sp
 8002324:	f104 0310 	add.w	r3, r4, #16
 8002328:	22f2      	movs	r2, #242	@ 0xf2
 800232a:	4619      	mov	r1, r3
 800232c:	f024 fdcc 	bl	8026ec8 <memcpy>
 8002330:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002334:	47a8      	blx	r5
    }

    free(tmp_buf);
 8002336:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800233a:	f00a f845 	bl	800c3c8 <vPortFree>
 800233e:	e000      	b.n	8002342 <logging+0x206>
    	return;
 8002340:	bf00      	nop
}
 8002342:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8002346:	46bd      	mov	sp, r7
 8002348:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800234c:	b003      	add	sp, #12
 800234e:	4770      	bx	lr
 8002350:	408f4000 	.word	0x408f4000
 8002354:	0802f03c 	.word	0x0802f03c
 8002358:	10624dd3 	.word	0x10624dd3
 800235c:	0802f050 	.word	0x0802f050
 8002360:	0802f058 	.word	0x0802f058
 8002364:	20000000 	.word	0x20000000

08002368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800236c:	f003 fa20 	bl	80057b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002370:	f000 f80e 	bl	8002390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002374:	f7ff fd82 	bl	8001e7c <MX_GPIO_Init>
  MX_SPI2_Init();
 8002378:	f000 f88a 	bl	8002490 <MX_SPI2_Init>
  MX_I2C1_Init();
 800237c:	f7ff fe08 	bl	8001f90 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002380:	f006 fc18 	bl	8008bb4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002384:	f7fe feaa 	bl	80010dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002388:	f006 fc38 	bl	8008bfc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <main+0x24>

08002390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b094      	sub	sp, #80	@ 0x50
 8002394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002396:	f107 0320 	add.w	r3, r7, #32
 800239a:	2230      	movs	r2, #48	@ 0x30
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f023 fb56 	bl	8025a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	4b27      	ldr	r3, [pc, #156]	@ (8002458 <SystemClock_Config+0xc8>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	4a26      	ldr	r2, [pc, #152]	@ (8002458 <SystemClock_Config+0xc8>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c4:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <SystemClock_Config+0xc8>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d0:	2300      	movs	r3, #0
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	4b21      	ldr	r3, [pc, #132]	@ (800245c <SystemClock_Config+0xcc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a20      	ldr	r2, [pc, #128]	@ (800245c <SystemClock_Config+0xcc>)
 80023da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <SystemClock_Config+0xcc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023ec:	2301      	movs	r3, #1
 80023ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023f6:	2302      	movs	r3, #2
 80023f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002400:	2304      	movs	r3, #4
 8002402:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002404:	2364      	movs	r3, #100	@ 0x64
 8002406:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002408:	2302      	movs	r3, #2
 800240a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800240c:	2304      	movs	r3, #4
 800240e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002410:	f107 0320 	add.w	r3, r7, #32
 8002414:	4618      	mov	r0, r3
 8002416:	f004 fbc5 	bl	8006ba4 <HAL_RCC_OscConfig>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002420:	f000 f830 	bl	8002484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002424:	230f      	movs	r3, #15
 8002426:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002428:	2302      	movs	r3, #2
 800242a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002434:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	2103      	movs	r1, #3
 8002440:	4618      	mov	r0, r3
 8002442:	f004 fe27 	bl	8007094 <HAL_RCC_ClockConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800244c:	f000 f81a 	bl	8002484 <Error_Handler>
  }
}
 8002450:	bf00      	nop
 8002452:	3750      	adds	r7, #80	@ 0x50
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	40007000 	.word	0x40007000

08002460 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a04      	ldr	r2, [pc, #16]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002472:	f003 f9bf 	bl	80057f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40014000 	.word	0x40014000

08002484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002488:	b672      	cpsid	i
}
 800248a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <Error_Handler+0x8>

08002490 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002494:	4b17      	ldr	r3, [pc, #92]	@ (80024f4 <MX_SPI2_Init+0x64>)
 8002496:	4a18      	ldr	r2, [pc, #96]	@ (80024f8 <MX_SPI2_Init+0x68>)
 8002498:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800249a:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <MX_SPI2_Init+0x64>)
 800249c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024a2:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024a8:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ae:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024c2:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024c4:	2210      	movs	r2, #16
 80024c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ce:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d4:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024dc:	220a      	movs	r2, #10
 80024de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024e0:	4804      	ldr	r0, [pc, #16]	@ (80024f4 <MX_SPI2_Init+0x64>)
 80024e2:	f005 f829 	bl	8007538 <HAL_SPI_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024ec:	f7ff ffca 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000a70 	.word	0x20000a70
 80024f8:	40003800 	.word	0x40003800

080024fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	@ 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a19      	ldr	r2, [pc, #100]	@ (8002580 <HAL_SPI_MspInit+0x84>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12c      	bne.n	8002578 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	4b18      	ldr	r3, [pc, #96]	@ (8002584 <HAL_SPI_MspInit+0x88>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	4a17      	ldr	r2, [pc, #92]	@ (8002584 <HAL_SPI_MspInit+0x88>)
 8002528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800252c:	6413      	str	r3, [r2, #64]	@ 0x40
 800252e:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <HAL_SPI_MspInit+0x88>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <HAL_SPI_MspInit+0x88>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a10      	ldr	r2, [pc, #64]	@ (8002584 <HAL_SPI_MspInit+0x88>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <HAL_SPI_MspInit+0x88>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002556:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800255a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002568:	2305      	movs	r3, #5
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	4805      	ldr	r0, [pc, #20]	@ (8002588 <HAL_SPI_MspInit+0x8c>)
 8002574:	f003 fa80 	bl	8005a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002578:	bf00      	nop
 800257a:	3728      	adds	r7, #40	@ 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40003800 	.word	0x40003800
 8002584:	40023800 	.word	0x40023800
 8002588:	40020400 	.word	0x40020400

0800258c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <HAL_MspInit+0x54>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259a:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <HAL_MspInit+0x54>)
 800259c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025a2:	4b0f      	ldr	r3, [pc, #60]	@ (80025e0 <HAL_MspInit+0x54>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <HAL_MspInit+0x54>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	4a0a      	ldr	r2, [pc, #40]	@ (80025e0 <HAL_MspInit+0x54>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025be:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <HAL_MspInit+0x54>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	210f      	movs	r1, #15
 80025ce:	f06f 0001 	mvn.w	r0, #1
 80025d2:	f003 fa22 	bl	8005a1a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800

080025e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08c      	sub	sp, #48	@ 0x30
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	4b2e      	ldr	r3, [pc, #184]	@ (80026b4 <HAL_InitTick+0xd0>)
 80025fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fc:	4a2d      	ldr	r2, [pc, #180]	@ (80026b4 <HAL_InitTick+0xd0>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002602:	6453      	str	r3, [r2, #68]	@ 0x44
 8002604:	4b2b      	ldr	r3, [pc, #172]	@ (80026b4 <HAL_InitTick+0xd0>)
 8002606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002610:	f107 020c 	add.w	r2, r7, #12
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f004 ff5a 	bl	80074d4 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002620:	f004 ff44 	bl	80074ac <HAL_RCC_GetPCLK2Freq>
 8002624:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002628:	4a23      	ldr	r2, [pc, #140]	@ (80026b8 <HAL_InitTick+0xd4>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0c9b      	lsrs	r3, r3, #18
 8002630:	3b01      	subs	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8002634:	4b21      	ldr	r3, [pc, #132]	@ (80026bc <HAL_InitTick+0xd8>)
 8002636:	4a22      	ldr	r2, [pc, #136]	@ (80026c0 <HAL_InitTick+0xdc>)
 8002638:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800263a:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <HAL_InitTick+0xd8>)
 800263c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002640:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8002642:	4a1e      	ldr	r2, [pc, #120]	@ (80026bc <HAL_InitTick+0xd8>)
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002648:	4b1c      	ldr	r3, [pc, #112]	@ (80026bc <HAL_InitTick+0xd8>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264e:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <HAL_InitTick+0xd8>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002654:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <HAL_InitTick+0xd8>)
 8002656:	2200      	movs	r2, #0
 8002658:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 800265a:	4818      	ldr	r0, [pc, #96]	@ (80026bc <HAL_InitTick+0xd8>)
 800265c:	f005 fd3e 	bl	80080dc <HAL_TIM_Base_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002666:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800266a:	2b00      	cmp	r3, #0
 800266c:	d11b      	bne.n	80026a6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800266e:	4813      	ldr	r0, [pc, #76]	@ (80026bc <HAL_InitTick+0xd8>)
 8002670:	f005 fd8e 	bl	8008190 <HAL_TIM_Base_Start_IT>
 8002674:	4603      	mov	r3, r0
 8002676:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800267a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800267e:	2b00      	cmp	r3, #0
 8002680:	d111      	bne.n	80026a6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002682:	2018      	movs	r0, #24
 8002684:	f003 f9e5 	bl	8005a52 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	d808      	bhi.n	80026a0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 800268e:	2200      	movs	r2, #0
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	2018      	movs	r0, #24
 8002694:	f003 f9c1 	bl	8005a1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002698:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <HAL_InitTick+0xe0>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e002      	b.n	80026a6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80026a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3730      	adds	r7, #48	@ 0x30
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	431bde83 	.word	0x431bde83
 80026bc:	20000ac8 	.word	0x20000ac8
 80026c0:	40014000 	.word	0x40014000
 80026c4:	20000074 	.word	0x20000074

080026c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026cc:	bf00      	nop
 80026ce:	e7fd      	b.n	80026cc <NMI_Handler+0x4>

080026d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026d4:	bf00      	nop
 80026d6:	e7fd      	b.n	80026d4 <HardFault_Handler+0x4>

080026d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <MemManage_Handler+0x4>

080026e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <BusFault_Handler+0x4>

080026e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <UsageFault_Handler+0x4>

080026f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002704:	4802      	ldr	r0, [pc, #8]	@ (8002710 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002706:	f005 fda5 	bl	8008254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000ac8 	.word	0x20000ac8

08002714 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return 1;
 8002718:	2301      	movs	r3, #1
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_kill>:

int _kill(int pid, int sig)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800272e:	f024 fb93 	bl	8026e58 <__errno>
 8002732:	4603      	mov	r3, r0
 8002734:	2216      	movs	r2, #22
 8002736:	601a      	str	r2, [r3, #0]
  return -1;
 8002738:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_exit>:

void _exit (int status)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800274c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ffe7 	bl	8002724 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002756:	bf00      	nop
 8002758:	e7fd      	b.n	8002756 <_exit+0x12>

0800275a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e00a      	b.n	8002782 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800276c:	f3af 8000 	nop.w
 8002770:	4601      	mov	r1, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	60ba      	str	r2, [r7, #8]
 8002778:	b2ca      	uxtb	r2, r1
 800277a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	3301      	adds	r3, #1
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	dbf0      	blt.n	800276c <_read+0x12>
  }

  return len;
 800278a:	687b      	ldr	r3, [r7, #4]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e009      	b.n	80027ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	60ba      	str	r2, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3301      	adds	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	dbf1      	blt.n	80027a6 <_write+0x12>
  }
  return len;
 80027c2:	687b      	ldr	r3, [r7, #4]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_close>:

int _close(int file)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027f4:	605a      	str	r2, [r3, #4]
  return 0;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_isatty>:

int _isatty(int file)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800280c:	2301      	movs	r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800283c:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <_sbrk+0x5c>)
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <_sbrk+0x60>)
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002848:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <_sbrk+0x64>)
 8002852:	4a12      	ldr	r2, [pc, #72]	@ (800289c <_sbrk+0x68>)
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <_sbrk+0x64>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	429a      	cmp	r2, r3
 8002862:	d207      	bcs.n	8002874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002864:	f024 faf8 	bl	8026e58 <__errno>
 8002868:	4603      	mov	r3, r0
 800286a:	220c      	movs	r2, #12
 800286c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002872:	e009      	b.n	8002888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002874:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800287a:	4b07      	ldr	r3, [pc, #28]	@ (8002898 <_sbrk+0x64>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <_sbrk+0x64>)
 8002884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20020000 	.word	0x20020000
 8002894:	00000800 	.word	0x00000800
 8002898:	20000b14 	.word	0x20000b14
 800289c:	20018498 	.word	0x20018498

080028a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <SystemInit+0x20>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028aa:	4a05      	ldr	r2, [pc, #20]	@ (80028c0 <SystemInit+0x20>)
 80028ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028c8:	f7ff ffea 	bl	80028a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028cc:	480c      	ldr	r0, [pc, #48]	@ (8002900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ce:	490d      	ldr	r1, [pc, #52]	@ (8002904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d4:	e002      	b.n	80028dc <LoopCopyDataInit>

080028d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028da:	3304      	adds	r3, #4

080028dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e0:	d3f9      	bcc.n	80028d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028e2:	4a0a      	ldr	r2, [pc, #40]	@ (800290c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002910 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e8:	e001      	b.n	80028ee <LoopFillZerobss>

080028ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028ec:	3204      	adds	r2, #4

080028ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f0:	d3fb      	bcc.n	80028ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028f2:	f024 fabf 	bl	8026e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028f6:	f7ff fd37 	bl	8002368 <main>
  bx  lr    
 80028fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002904:	200009c8 	.word	0x200009c8
  ldr r2, =_sidata
 8002908:	08034824 	.word	0x08034824
  ldr r2, =_sbss
 800290c:	200009c8 	.word	0x200009c8
  ldr r4, =_ebss
 8002910:	20018494 	.word	0x20018494

08002914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002914:	e7fe      	b.n	8002914 <ADC_IRQHandler>

08002916 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	fb02 f303 	mul.w	r3, r2, r3
 8002928:	4618      	mov	r0, r3
 800292a:	f009 fc7f 	bl	800c22c <pvPortMalloc>
 800292e:	4603      	mov	r3, r0
 8002930:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <mg_calloc+0x34>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	461a      	mov	r2, r3
 8002942:	2100      	movs	r1, #0
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f023 f883 	bl	8025a50 <memset>
  return p;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <handle_ram_status_get>:

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;



static void handle_ram_status_get(struct mg_connection *c){
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	b093      	sub	sp, #76	@ 0x4c
 8002958:	af08      	add	r7, sp, #32
 800295a:	6078      	str	r0, [r7, #4]
	HeapStats_t heap_status;
	vPortGetHeapStats(&heap_status);
 800295c:	f107 030c 	add.w	r3, r7, #12
 8002960:	4618      	mov	r0, r3
 8002962:	f009 fe53 	bl	800c60c <vPortGetHeapStats>

	logging(1, "Start execute API RAM status");
 8002966:	490e      	ldr	r1, [pc, #56]	@ (80029a0 <handle_ram_status_get+0x4c>)
 8002968:	2001      	movs	r0, #1
 800296a:	f7ff fbe7 	bl	800213c <logging>
                  "\"xNumberOfFreeBlocks\": \"%u\","
                  "\"xMinimumEverFreeBytesRemaining\": \"%u\","
                  "\"xNumberOfSuccessfulAllocations\": \"%u\","
                  "\"xNumberOfSuccessfulFrees\": \"%u\""
                  "}\r\n",
                  (unsigned int)heap_status.xAvailableHeapSpaceInBytes,
 800296e:	68fb      	ldr	r3, [r7, #12]
                  (unsigned int)heap_status.xSizeOfLargestFreeBlockInBytes,
 8002970:	693a      	ldr	r2, [r7, #16]
                  (unsigned int)heap_status.xSizeOfSmallestFreeBlockInBytes,
 8002972:	6979      	ldr	r1, [r7, #20]
                  (unsigned int)heap_status.xNumberOfFreeBlocks,
 8002974:	69b8      	ldr	r0, [r7, #24]
                  (unsigned int)heap_status.xMinimumEverFreeBytesRemaining,
 8002976:	69fc      	ldr	r4, [r7, #28]
                  (unsigned int)heap_status.xNumberOfSuccessfulAllocations,
 8002978:	6a3d      	ldr	r5, [r7, #32]
                  (unsigned int)heap_status.xNumberOfSuccessfulFrees);
 800297a:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 800297c:	9606      	str	r6, [sp, #24]
 800297e:	9505      	str	r5, [sp, #20]
 8002980:	9404      	str	r4, [sp, #16]
 8002982:	9003      	str	r0, [sp, #12]
 8002984:	9102      	str	r1, [sp, #8]
 8002986:	9201      	str	r2, [sp, #4]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <handle_ram_status_get+0x50>)
 800298c:	4a06      	ldr	r2, [pc, #24]	@ (80029a8 <handle_ram_status_get+0x54>)
 800298e:	21c8      	movs	r1, #200	@ 0xc8
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f015 faab 	bl	8017eec <mg_http_reply>
}
 8002996:	bf00      	nop
 8002998:	372c      	adds	r7, #44	@ 0x2c
 800299a:	46bd      	mov	sp, r7
 800299c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800299e:	bf00      	nop
 80029a0:	0802f060 	.word	0x0802f060
 80029a4:	0802f080 	.word	0x0802f080
 80029a8:	0802f184 	.word	0x0802f184

080029ac <calc_file_md5sum>:

static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b0a0      	sub	sp, #128	@ 0x80
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
	uint32_t md5_str_size = 33; // 32 символа для MD5 + 1 символ для '\0'
 80029b6:	2321      	movs	r3, #33	@ 0x21
 80029b8:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint16_t  buff_len = 1024;
 80029ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	uint8_t	  digest_len = 16;
 80029c2:	2310      	movs	r3, #16
 80029c4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	char * buff = calloc(buff_len, 1);
 80029c8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ffa1 	bl	8002916 <mg_calloc>
 80029d4:	6738      	str	r0, [r7, #112]	@ 0x70
	if (buff == NULL){
 80029d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <calc_file_md5sum+0x3c>
		free(buff);
 80029dc:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80029de:	f009 fcf3 	bl	800c3c8 <vPortFree>
		return -1;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029e6:	e067      	b.n	8002ab8 <calc_file_md5sum+0x10c>
	}


	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 80029e8:	2201      	movs	r2, #1
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4834      	ldr	r0, [pc, #208]	@ (8002ac0 <calc_file_md5sum+0x114>)
 80029ee:	f013 ff15 	bl	801681c <mg_fs_open>
 80029f2:	66f8      	str	r0, [r7, #108]	@ 0x6c
	if (fd==NULL){
 80029f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d108      	bne.n	8002a0c <calc_file_md5sum+0x60>
		mg_fs_close(fd);
 80029fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80029fc:	f013 ff35 	bl	801686a <mg_fs_close>
		free(buff);
 8002a00:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002a02:	f009 fce1 	bl	800c3c8 <vPortFree>
		return -2;
 8002a06:	f06f 0301 	mvn.w	r3, #1
 8002a0a:	e055      	b.n	8002ab8 <calc_file_md5sum+0x10c>
		}


	mg_md5_ctx md5_ctx;
	mg_md5_init(&md5_ctx);
 8002a0c:	f107 030c 	add.w	r3, r7, #12
 8002a10:	4618      	mov	r0, r3
 8002a12:	f018 fb7d 	bl	801b110 <mg_md5_init>
	size_t bytes_read;
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8002a16:	e006      	b.n	8002a26 <calc_file_md5sum+0x7a>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a1e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002a20:	4618      	mov	r0, r3
 8002a22:	f019 fa21 	bl	801be68 <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8002a26:	4b26      	ldr	r3, [pc, #152]	@ (8002ac0 <calc_file_md5sum+0x114>)
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a2c:	6810      	ldr	r0, [r2, #0]
 8002a2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8002a32:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002a34:	4798      	blx	r3
 8002a36:	66b8      	str	r0, [r7, #104]	@ 0x68
 8002a38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1ec      	bne.n	8002a18 <calc_file_md5sum+0x6c>
	}

	mg_fs_close(fd);
 8002a3e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002a40:	f013 ff13 	bl	801686a <mg_fs_close>

	uint8_t * digest = calloc(digest_len, 1);
 8002a44:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff63 	bl	8002916 <mg_calloc>
 8002a50:	6678      	str	r0, [r7, #100]	@ 0x64
	if (digest == NULL){
 8002a52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d108      	bne.n	8002a6a <calc_file_md5sum+0xbe>
		free(buff);
 8002a58:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002a5a:	f009 fcb5 	bl	800c3c8 <vPortFree>
		free(digest);
 8002a5e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002a60:	f009 fcb2 	bl	800c3c8 <vPortFree>
		return -1;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a68:	e026      	b.n	8002ab8 <calc_file_md5sum+0x10c>
	}

	mg_md5_final(&md5_ctx, digest);
 8002a6a:	f107 030c 	add.w	r3, r7, #12
 8002a6e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002a70:	4618      	mov	r0, r3
 8002a72:	f019 fa77 	bl	801bf64 <mg_md5_final>
	// Преобразование контрольной суммы в строку
	for (int i = 0; i < 16; ++i) {
 8002a76:	2300      	movs	r3, #0
 8002a78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a7a:	e013      	b.n	8002aa4 <calc_file_md5sum+0xf8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 8002a7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	461a      	mov	r2, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	1898      	adds	r0, r3, r2
 8002a86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a8e:	1a99      	subs	r1, r3, r2
 8002a90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002a94:	4413      	add	r3, r2
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac4 <calc_file_md5sum+0x118>)
 8002a9a:	f022 faaf 	bl	8024ffc <snprintf>
	for (int i = 0; i < 16; ++i) {
 8002a9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002aa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002aa6:	2b0f      	cmp	r3, #15
 8002aa8:	dde8      	ble.n	8002a7c <calc_file_md5sum+0xd0>
	}

	free(buff);
 8002aaa:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002aac:	f009 fc8c 	bl	800c3c8 <vPortFree>
	free(digest);
 8002ab0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002ab2:	f009 fc89 	bl	800c3c8 <vPortFree>

	return 0;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3780      	adds	r7, #128	@ 0x80
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	2000000c 	.word	0x2000000c
 8002ac4:	0802f1c8 	.word	0x0802f1c8

08002ac8 <handle_io_status_get>:

static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8002ac8:	b5b0      	push	{r4, r5, r7, lr}
 8002aca:	b094      	sub	sp, #80	@ 0x50
 8002acc:	af06      	add	r7, sp, #24
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]


	//Processing GET request
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad6:	4960      	ldr	r1, [pc, #384]	@ (8002c58 <handle_io_status_get+0x190>)
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f01e feb3 	bl	8021844 <mg_str_s>
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ae8:	cb0c      	ldmia	r3, {r2, r3}
 8002aea:	c903      	ldmia	r1, {r0, r1}
 8002aec:	f01e ff7d 	bl	80219ea <mg_match>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d023      	beq.n	8002b3e <handle_io_status_get+0x76>
		struct DeviceStatus status;

		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 8002af6:	4b59      	ldr	r3, [pc, #356]	@ (8002c5c <handle_io_status_get+0x194>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f107 001c 	add.w	r0, r7, #28
 8002afe:	2200      	movs	r2, #0
 8002b00:	2101      	movs	r1, #1
 8002b02:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 8002b04:	4b55      	ldr	r3, [pc, #340]	@ (8002c5c <handle_io_status_get+0x194>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f107 021c 	add.w	r2, r7, #28
 8002b0c:	1cd0      	adds	r0, r2, #3
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2102      	movs	r1, #2
 8002b12:	4798      	blx	r3
		mg_http_reply(c, 200, headers, //TODO delete for release,
						"{"
						"\"inputs\": [%d, %d, %d], \"outputs\": [%d, %d, %d]"
						"}\r\n",
						status.inputs[0], status.inputs[1], status.inputs[2],
 8002b14:	7f3b      	ldrb	r3, [r7, #28]
 8002b16:	7f7a      	ldrb	r2, [r7, #29]
 8002b18:	7fb9      	ldrb	r1, [r7, #30]
						status.outputs[0], status.outputs[1], status.outputs[2]
 8002b1a:	7ff8      	ldrb	r0, [r7, #31]
 8002b1c:	f897 4020 	ldrb.w	r4, [r7, #32]
 8002b20:	f897 5021 	ldrb.w	r5, [r7, #33]	@ 0x21
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8002b24:	9505      	str	r5, [sp, #20]
 8002b26:	9404      	str	r4, [sp, #16]
 8002b28:	9003      	str	r0, [sp, #12]
 8002b2a:	9102      	str	r1, [sp, #8]
 8002b2c:	9201      	str	r2, [sp, #4]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4b4b      	ldr	r3, [pc, #300]	@ (8002c60 <handle_io_status_get+0x198>)
 8002b32:	4a4c      	ldr	r2, [pc, #304]	@ (8002c64 <handle_io_status_get+0x19c>)
 8002b34:	21c8      	movs	r1, #200	@ 0xc8
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f015 f9d8 	bl	8017eec <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");

	}
}
 8002b3c:	e087      	b.n	8002c4e <handle_io_status_get+0x186>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8002b3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b42:	4949      	ldr	r1, [pc, #292]	@ (8002c68 <handle_io_status_get+0x1a0>)
 8002b44:	4618      	mov	r0, r3
 8002b46:	f01e fe7d 	bl	8021844 <mg_str_s>
 8002b4a:	6839      	ldr	r1, [r7, #0]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b54:	cb0c      	ldmia	r3, {r2, r3}
 8002b56:	c903      	ldmia	r1, {r0, r1}
 8002b58:	f01e ff47 	bl	80219ea <mg_match>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d06d      	beq.n	8002c3e <handle_io_status_get+0x176>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	6839      	ldr	r1, [r7, #0]
 8002b68:	4a40      	ldr	r2, [pc, #256]	@ (8002c6c <handle_io_status_get+0x1a4>)
 8002b6a:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002b6e:	c903      	ldmia	r1, {r0, r1}
 8002b70:	f017 ffd6 	bl	801ab20 <mg_json_get_num>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d059      	beq.n	8002c2e <handle_io_status_get+0x166>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 8002b7a:	f107 0308 	add.w	r3, r7, #8
 8002b7e:	6839      	ldr	r1, [r7, #0]
 8002b80:	4a3b      	ldr	r2, [pc, #236]	@ (8002c70 <handle_io_status_get+0x1a8>)
 8002b82:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002b86:	c903      	ldmia	r1, {r0, r1}
 8002b88:	f017 ffca 	bl	801ab20 <mg_json_get_num>
 8002b8c:	4603      	mov	r3, r0
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d04d      	beq.n	8002c2e <handle_io_status_get+0x166>
			relay_id = (uint8_t) tmp1;
 8002b92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7fe f81d 	bl	8000bd8 <__aeabi_d2uiz>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			state = (uint8_t) tmp2;
 8002ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	f7fe f814 	bl	8000bd8 <__aeabi_d2uiz>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8002bb6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d02f      	beq.n	8002c1e <handle_io_status_get+0x156>
 8002bbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d82b      	bhi.n	8002c1e <handle_io_status_get+0x156>
 8002bc6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <handle_io_status_get+0x10e>
 8002bce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d123      	bne.n	8002c1e <handle_io_status_get+0x156>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 8002bd6:	4b21      	ldr	r3, [pc, #132]	@ (8002c5c <handle_io_status_get+0x194>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f107 0018 	add.w	r0, r7, #24
 8002bde:	2200      	movs	r2, #0
 8002be0:	2102      	movs	r1, #2
 8002be2:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 8002be4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002be8:	3b01      	subs	r3, #1
 8002bea:	3338      	adds	r3, #56	@ 0x38
 8002bec:	443b      	add	r3, r7
 8002bee:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002bf2:	f803 2c20 	strb.w	r2, [r3, #-32]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 8002bf6:	4b19      	ldr	r3, [pc, #100]	@ (8002c5c <handle_io_status_get+0x194>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f107 0018 	add.w	r0, r7, #24
 8002bfe:	2201      	movs	r2, #1
 8002c00:	2102      	movs	r1, #2
 8002c02:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 8002c04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c08:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002c0c:	9201      	str	r2, [sp, #4]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4b18      	ldr	r3, [pc, #96]	@ (8002c74 <handle_io_status_get+0x1ac>)
 8002c12:	4a14      	ldr	r2, [pc, #80]	@ (8002c64 <handle_io_status_get+0x19c>)
 8002c14:	21c8      	movs	r1, #200	@ 0xc8
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f015 f968 	bl	8017eec <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8002c1c:	e017      	b.n	8002c4e <handle_io_status_get+0x186>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 8002c1e:	4b16      	ldr	r3, [pc, #88]	@ (8002c78 <handle_io_status_get+0x1b0>)
 8002c20:	4a10      	ldr	r2, [pc, #64]	@ (8002c64 <handle_io_status_get+0x19c>)
 8002c22:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f015 f960 	bl	8017eec <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8002c2c:	e00f      	b.n	8002c4e <handle_io_status_get+0x186>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 8002c2e:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <handle_io_status_get+0x1b4>)
 8002c30:	4a0c      	ldr	r2, [pc, #48]	@ (8002c64 <handle_io_status_get+0x19c>)
 8002c32:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f015 f958 	bl	8017eec <mg_http_reply>
}
 8002c3c:	e007      	b.n	8002c4e <handle_io_status_get+0x186>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002c3e:	4b10      	ldr	r3, [pc, #64]	@ (8002c80 <handle_io_status_get+0x1b8>)
 8002c40:	4a08      	ldr	r2, [pc, #32]	@ (8002c64 <handle_io_status_get+0x19c>)
 8002c42:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f015 f950 	bl	8017eec <mg_http_reply>
}
 8002c4c:	e7ff      	b.n	8002c4e <handle_io_status_get+0x186>
 8002c4e:	bf00      	nop
 8002c50:	3738      	adds	r7, #56	@ 0x38
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bdb0      	pop	{r4, r5, r7, pc}
 8002c56:	bf00      	nop
 8002c58:	0802f1d0 	.word	0x0802f1d0
 8002c5c:	20000b18 	.word	0x20000b18
 8002c60:	0802f1d4 	.word	0x0802f1d4
 8002c64:	0802f208 	.word	0x0802f208
 8002c68:	0802f278 	.word	0x0802f278
 8002c6c:	0802f280 	.word	0x0802f280
 8002c70:	0802f28c 	.word	0x0802f28c
 8002c74:	0802f294 	.word	0x0802f294
 8002c78:	0802f2cc 	.word	0x0802f2cc
 8002c7c:	0802f308 	.word	0x0802f308
 8002c80:	0802f344 	.word	0x0802f344

08002c84 <handle_mqtt_conf>:

static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b092      	sub	sp, #72	@ 0x48
 8002c88:	af04      	add	r7, sp, #16
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	49a7      	ldr	r1, [pc, #668]	@ (8002f30 <handle_mqtt_conf+0x2ac>)
 8002c94:	4618      	mov	r0, r3
 8002c96:	f01e fdd5 	bl	8021844 <mg_str_s>
 8002c9a:	6839      	ldr	r1, [r7, #0]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	cb0c      	ldmia	r3, {r2, r3}
 8002ca6:	c903      	ldmia	r1, {r0, r1}
 8002ca8:	f01e fe9f 	bl	80219ea <mg_match>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d04d      	beq.n	8002d4e <handle_mqtt_conf+0xca>

		uint8_t pass_len = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8002cb8:	21c6      	movs	r1, #198	@ 0xc6
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f7ff fe2b 	bl	8002916 <mg_calloc>
 8002cc0:	61f8      	str	r0, [r7, #28]
		if (mqtt_config == NULL) {
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10a      	bne.n	8002cde <handle_mqtt_conf+0x5a>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8002cc8:	4b9a      	ldr	r3, [pc, #616]	@ (8002f34 <handle_mqtt_conf+0x2b0>)
 8002cca:	4a9b      	ldr	r2, [pc, #620]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002ccc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f015 f90b 	bl	8017eec <mg_http_reply>
			free(mqtt_config);
 8002cd6:	69f8      	ldr	r0, [r7, #28]
 8002cd8:	f009 fb76 	bl	800c3c8 <vPortFree>
			return;
 8002cdc:	e124      	b.n	8002f28 <handle_mqtt_conf+0x2a4>
		}

		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 8002cde:	4b97      	ldr	r3, [pc, #604]	@ (8002f3c <handle_mqtt_conf+0x2b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	69f8      	ldr	r0, [r7, #28]
 8002ce8:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	33a5      	adds	r3, #165	@ 0xa5
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fad6 	bl	80002a0 <strlen>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	33a5      	adds	r3, #165	@ 0xa5
 8002cfe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002d02:	212a      	movs	r1, #42	@ 0x2a
 8002d04:	4618      	mov	r0, r3
 8002d06:	f022 fea3 	bl	8025a50 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 8002d0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5


		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <handle_mqtt_conf+0xa0>
 8002d20:	4b87      	ldr	r3, [pc, #540]	@ (8002f40 <handle_mqtt_conf+0x2bc>)
 8002d22:	e000      	b.n	8002d26 <handle_mqtt_conf+0xa2>
 8002d24:	4b87      	ldr	r3, [pc, #540]	@ (8002f44 <handle_mqtt_conf+0x2c0>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	3202      	adds	r2, #2
 8002d2a:	69f9      	ldr	r1, [r7, #28]
 8002d2c:	3184      	adds	r1, #132	@ 0x84
 8002d2e:	69f8      	ldr	r0, [r7, #28]
 8002d30:	30a5      	adds	r0, #165	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8002d32:	9003      	str	r0, [sp, #12]
 8002d34:	9102      	str	r1, [sp, #8]
 8002d36:	9201      	str	r2, [sp, #4]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	4b83      	ldr	r3, [pc, #524]	@ (8002f48 <handle_mqtt_conf+0x2c4>)
 8002d3c:	4a7e      	ldr	r2, [pc, #504]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002d3e:	21c8      	movs	r1, #200	@ 0xc8
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f015 f8d3 	bl	8017eec <mg_http_reply>

		free(mqtt_config);
 8002d46:	69f8      	ldr	r0, [r7, #28]
 8002d48:	f009 fb3e 	bl	800c3c8 <vPortFree>
 8002d4c:	e0ec      	b.n	8002f28 <handle_mqtt_conf+0x2a4>

	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8002d4e:	f107 0314 	add.w	r3, r7, #20
 8002d52:	497e      	ldr	r1, [pc, #504]	@ (8002f4c <handle_mqtt_conf+0x2c8>)
 8002d54:	4618      	mov	r0, r3
 8002d56:	f01e fd75 	bl	8021844 <mg_str_s>
 8002d5a:	6839      	ldr	r1, [r7, #0]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	cb0c      	ldmia	r3, {r2, r3}
 8002d66:	c903      	ldmia	r1, {r0, r1}
 8002d68:	f01e fe3f 	bl	80219ea <mg_match>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80d3 	beq.w	8002f1a <handle_mqtt_conf+0x296>

		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8002d74:	21c6      	movs	r1, #198	@ 0xc6
 8002d76:	2001      	movs	r0, #1
 8002d78:	f7ff fdcd 	bl	8002916 <mg_calloc>
 8002d7c:	6378      	str	r0, [r7, #52]	@ 0x34
		if (mqtt_config == NULL) {
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <handle_mqtt_conf+0x116>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8002d84:	4b6b      	ldr	r3, [pc, #428]	@ (8002f34 <handle_mqtt_conf+0x2b0>)
 8002d86:	4a6c      	ldr	r2, [pc, #432]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002d88:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f015 f8ad 	bl	8017eec <mg_http_reply>
			free(mqtt_config);
 8002d92:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002d94:	f009 fb18 	bl	800c3c8 <vPortFree>
			return;
 8002d98:	e0c6      	b.n	8002f28 <handle_mqtt_conf+0x2a4>
		}
		int length;
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8002d9a:	f107 0308 	add.w	r3, r7, #8
 8002d9e:	6839      	ldr	r1, [r7, #0]
 8002da0:	4a6b      	ldr	r2, [pc, #428]	@ (8002f50 <handle_mqtt_conf+0x2cc>)
 8002da2:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002da6:	c903      	ldmia	r1, {r0, r1}
 8002da8:	f017 fb80 	bl	801a4ac <mg_json_get>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	da07      	bge.n	8002dc2 <handle_mqtt_conf+0x13e>

			mg_http_reply(c, 400, headers, //TODO delete for release,
 8002db2:	4b68      	ldr	r3, [pc, #416]	@ (8002f54 <handle_mqtt_conf+0x2d0>)
 8002db4:	4a60      	ldr	r2, [pc, #384]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002db6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f015 f896 	bl	8017eec <mg_http_reply>
 8002dc0:	e0a7      	b.n	8002f12 <handle_mqtt_conf+0x28e>
					"{\"status\":\"error\",\"message\":\"Incorrect JSON\"}\r\n");

		}else{//JSON validation success
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	6839      	ldr	r1, [r7, #0]
 8002dc8:	4a63      	ldr	r2, [pc, #396]	@ (8002f58 <handle_mqtt_conf+0x2d4>)
 8002dca:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002dce:	c903      	ldmia	r1, {r0, r1}
 8002dd0:	f017 feed 	bl	801abae <mg_json_get_bool>

			char * broker = NULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	633b      	str	r3, [r7, #48]	@ 0x30
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	4a60      	ldr	r2, [pc, #384]	@ (8002f5c <handle_mqtt_conf+0x2d8>)
 8002ddc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002de0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002de4:	f017 ffad 	bl	801ad42 <mg_json_get_str>
 8002de8:	6338      	str	r0, [r7, #48]	@ 0x30
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d04e      	beq.n	8002e8e <handle_mqtt_conf+0x20a>
				int err = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8002df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002df6:	f020 f85f 	bl	8022eb8 <is_valid_mqtt_url>
 8002dfa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <handle_mqtt_conf+0x18e>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8002e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e04:	3302      	adds	r3, #2
 8002e06:	227f      	movs	r2, #127	@ 0x7f
 8002e08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f022 fe67 	bl	8025ade <strncpy>
 8002e10:	e03d      	b.n	8002e8e <handle_mqtt_conf+0x20a>
				}else{
					switch (err) {
 8002e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e14:	3304      	adds	r3, #4
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d82a      	bhi.n	8002e70 <handle_mqtt_conf+0x1ec>
 8002e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e20 <handle_mqtt_conf+0x19c>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e61 	.word	0x08002e61
 8002e24:	08002e51 	.word	0x08002e51
 8002e28:	08002e41 	.word	0x08002e41
 8002e2c:	08002e31 	.word	0x08002e31
						case -1:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e30:	4b4b      	ldr	r3, [pc, #300]	@ (8002f60 <handle_mqtt_conf+0x2dc>)
 8002e32:	4a41      	ldr	r2, [pc, #260]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002e34:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f015 f857 	bl	8017eec <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not start with 'mqtt://'\"}\r\n");
							break;
 8002e3e:	e01f      	b.n	8002e80 <handle_mqtt_conf+0x1fc>
						case -2:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e40:	4b48      	ldr	r3, [pc, #288]	@ (8002f64 <handle_mqtt_conf+0x2e0>)
 8002e42:	4a3d      	ldr	r2, [pc, #244]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002e44:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f015 f84f 	bl	8017eec <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not contain a port separator ':'\"}\r\n");
							break;
 8002e4e:	e017      	b.n	8002e80 <handle_mqtt_conf+0x1fc>
						case -3:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e50:	4b45      	ldr	r3, [pc, #276]	@ (8002f68 <handle_mqtt_conf+0x2e4>)
 8002e52:	4a39      	ldr	r2, [pc, #228]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002e54:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f015 f847 	bl	8017eec <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid domain or IP address\"}\r\n");
							break;
 8002e5e:	e00f      	b.n	8002e80 <handle_mqtt_conf+0x1fc>
						case -4:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e60:	4b42      	ldr	r3, [pc, #264]	@ (8002f6c <handle_mqtt_conf+0x2e8>)
 8002e62:	4a35      	ldr	r2, [pc, #212]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002e64:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f015 f83f 	bl	8017eec <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid port number\"}\r\n");
							break;
 8002e6e:	e007      	b.n	8002e80 <handle_mqtt_conf+0x1fc>
						default:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e70:	4b3f      	ldr	r3, [pc, #252]	@ (8002f70 <handle_mqtt_conf+0x2ec>)
 8002e72:	4a31      	ldr	r2, [pc, #196]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002e74:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f015 f837 	bl	8017eec <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid MQTT_URI\"}\r\n");

							break;
 8002e7e:	bf00      	nop
					}
					free(broker);
 8002e80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e82:	f009 faa1 	bl	800c3c8 <vPortFree>
					free(mqtt_config);
 8002e86:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e88:	f009 fa9e 	bl	800c3c8 <vPortFree>
					return;
 8002e8c:	e04c      	b.n	8002f28 <handle_mqtt_conf+0x2a4>
				}

			}
			free(broker);
 8002e8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e90:	f009 fa9a 	bl	800c3c8 <vPortFree>

			char * username = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62bb      	str	r3, [r7, #40]	@ 0x28
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4a36      	ldr	r2, [pc, #216]	@ (8002f74 <handle_mqtt_conf+0x2f0>)
 8002e9c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ea0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ea4:	f017 ff4d 	bl	801ad42 <mg_json_get_str>
 8002ea8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <handle_mqtt_conf+0x23a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb2:	3384      	adds	r3, #132	@ 0x84
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f022 fe10 	bl	8025ade <strncpy>
			}
			free(username);
 8002ebe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ec0:	f009 fa82 	bl	800c3c8 <vPortFree>

			char * password = NULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4a2b      	ldr	r2, [pc, #172]	@ (8002f78 <handle_mqtt_conf+0x2f4>)
 8002ecc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ed0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ed4:	f017 ff35 	bl	801ad42 <mg_json_get_str>
 8002ed8:	6278      	str	r0, [r7, #36]	@ 0x24
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <handle_mqtt_conf+0x26a>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee2:	33a5      	adds	r3, #165	@ 0xa5
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f022 fdf8 	bl	8025ade <strncpy>
			}
			free(password);
 8002eee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ef0:	f009 fa6a 	bl	800c3c8 <vPortFree>

			mqtt_config->save = 1;
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]

			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 8002efa:	4b10      	ldr	r3, [pc, #64]	@ (8002f3c <handle_mqtt_conf+0x2b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	2100      	movs	r1, #0
 8002f02:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f04:	4798      	blx	r3

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8002f06:	4b1d      	ldr	r3, [pc, #116]	@ (8002f7c <handle_mqtt_conf+0x2f8>)
 8002f08:	4a0b      	ldr	r2, [pc, #44]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002f0a:	21c8      	movs	r1, #200	@ 0xc8
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f014 ffed 	bl	8017eec <mg_http_reply>
				"{\"status\":\"success\",\"message\":\"MQTT settings updated!\"}\r\n");

		}

		free(mqtt_config);
 8002f12:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f14:	f009 fa58 	bl	800c3c8 <vPortFree>
 8002f18:	e006      	b.n	8002f28 <handle_mqtt_conf+0x2a4>

	}else{//error, unsupported method
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002f1a:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <handle_mqtt_conf+0x2fc>)
 8002f1c:	4a06      	ldr	r2, [pc, #24]	@ (8002f38 <handle_mqtt_conf+0x2b4>)
 8002f1e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f014 ffe2 	bl	8017eec <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
	}
}
 8002f28:	3738      	adds	r7, #56	@ 0x38
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	0802f1d0 	.word	0x0802f1d0
 8002f34:	0802f398 	.word	0x0802f398
 8002f38:	0802f208 	.word	0x0802f208
 8002f3c:	20000b18 	.word	0x20000b18
 8002f40:	0802f3d4 	.word	0x0802f3d4
 8002f44:	0802f3dc 	.word	0x0802f3dc
 8002f48:	0802f3e4 	.word	0x0802f3e4
 8002f4c:	0802f278 	.word	0x0802f278
 8002f50:	0802f42c 	.word	0x0802f42c
 8002f54:	0802f430 	.word	0x0802f430
 8002f58:	0802f460 	.word	0x0802f460
 8002f5c:	0802f46c 	.word	0x0802f46c
 8002f60:	0802f478 	.word	0x0802f478
 8002f64:	0802f4bc 	.word	0x0802f4bc
 8002f68:	0802f508 	.word	0x0802f508
 8002f6c:	0802f548 	.word	0x0802f548
 8002f70:	0802f580 	.word	0x0802f580
 8002f74:	0802f5b4 	.word	0x0802f5b4
 8002f78:	0802f5c0 	.word	0x0802f5c0
 8002f7c:	0802f5cc 	.word	0x0802f5cc
 8002f80:	0802f344 	.word	0x0802f344

08002f84 <handle_dev_status>:

static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b0d2      	sub	sp, #328	@ 0x148
 8002f88:	af06      	add	r7, sp, #24
 8002f8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002f92:	6018      	str	r0, [r3, #0]
 8002f94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f98:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f9c:	6019      	str	r1, [r3, #0]

	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8002f9e:	4acf      	ldr	r2, [pc, #828]	@ (80032dc <handle_dev_status+0x358>)
 8002fa0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	2272      	movs	r2, #114	@ 0x72
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f023 ff8d 	bl	8026ec8 <memcpy>
	struct mg_connection* mqtt_connection = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	int    str_part_len = 30;
 8002fb4:	231e      	movs	r3, #30
 8002fb6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8002fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fca8 	bl	8002916 <mg_calloc>
 8002fc6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8002fca:	2101      	movs	r1, #1
 8002fcc:	202e      	movs	r0, #46	@ 0x2e
 8002fce:	f7ff fca2 	bl	8002916 <mg_calloc>
 8002fd2:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	202e      	movs	r0, #46	@ 0x2e
 8002fda:	f7ff fc9c 	bl	8002916 <mg_calloc>
 8002fde:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8002fe8:	f7ff fc95 	bl	8002916 <mg_calloc>
 8002fec:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8002ff6:	f7ff fc8e 	bl	8002916 <mg_calloc>
 8002ffa:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 8002ffe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 8182 	beq.w	800330c <handle_dev_status+0x388>
 8003008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 817d 	beq.w	800330c <handle_dev_status+0x388>
 8003012:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8178 	beq.w	800330c <handle_dev_status+0x388>
 800301c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8173 	beq.w	800330c <handle_dev_status+0x388>
 8003026:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 816e 	beq.w	800330c <handle_dev_status+0x388>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8003030:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8003034:	49aa      	ldr	r1, [pc, #680]	@ (80032e0 <handle_dev_status+0x35c>)
 8003036:	4618      	mov	r0, r3
 8003038:	f01e fc04 	bl	8021844 <mg_str_s>
 800303c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003040:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	2300      	movs	r3, #0
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800304e:	cb0c      	ldmia	r3, {r2, r3}
 8003050:	c903      	ldmia	r1, {r0, r1}
 8003052:	f01e fcca 	bl	80219ea <mg_match>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8132 	beq.w	80032c2 <handle_dev_status+0x33e>
			mqtt_connection =  get_mqtt_connection();
 800305e:	f001 fa81 	bl	8004564 <get_mqtt_connection>
 8003062:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

			if(!mqtt_connection){
 8003066:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800306a:	2b00      	cmp	r3, #0
 800306c:	d108      	bne.n	8003080 <handle_dev_status+0xfc>
				strncpy(mqtt_status_str, "closed", str_part_len);
 800306e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003072:	461a      	mov	r2, r3
 8003074:	499b      	ldr	r1, [pc, #620]	@ (80032e4 <handle_dev_status+0x360>)
 8003076:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800307a:	f022 fd30 	bl	8025ade <strncpy>
 800307e:	e041      	b.n	8003104 <handle_dev_status+0x180>
			}else{
				if (mqtt_connection->is_connecting){
 8003080:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003084:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <handle_dev_status+0x120>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8003092:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003096:	461a      	mov	r2, r3
 8003098:	4993      	ldr	r1, [pc, #588]	@ (80032e8 <handle_dev_status+0x364>)
 800309a:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800309e:	f022 fd1e 	bl	8025ade <strncpy>
 80030a2:	e019      	b.n	80030d8 <handle_dev_status+0x154>
				}else if(mqtt_connection->is_closing){
 80030a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030a8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <handle_dev_status+0x144>
					strncpy(mqtt_status_str, "closing",str_part_len);
 80030b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030ba:	461a      	mov	r2, r3
 80030bc:	498b      	ldr	r1, [pc, #556]	@ (80032ec <handle_dev_status+0x368>)
 80030be:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80030c2:	f022 fd0c 	bl	8025ade <strncpy>
 80030c6:	e007      	b.n	80030d8 <handle_dev_status+0x154>
				}else{
					strncpy(mqtt_status_str, "established", str_part_len);
 80030c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030cc:	461a      	mov	r2, r3
 80030ce:	4988      	ldr	r1, [pc, #544]	@ (80032f0 <handle_dev_status+0x36c>)
 80030d0:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80030d4:	f022 fd03 	bl	8025ade <strncpy>
				}

				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 80030d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030dc:	3308      	adds	r3, #8
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4b84      	ldr	r3, [pc, #528]	@ (80032f4 <handle_dev_status+0x370>)
 80030e2:	4a85      	ldr	r2, [pc, #532]	@ (80032f8 <handle_dev_status+0x374>)
 80030e4:	212e      	movs	r1, #46	@ 0x2e
 80030e6:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80030ea:	f01d fec3 	bl	8020e74 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 80030ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030f2:	331c      	adds	r3, #28
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4b7f      	ldr	r3, [pc, #508]	@ (80032f4 <handle_dev_status+0x370>)
 80030f8:	4a7f      	ldr	r2, [pc, #508]	@ (80032f8 <handle_dev_status+0x374>)
 80030fa:	212e      	movs	r1, #46	@ 0x2e
 80030fc:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8003100:	f01d feb8 	bl	8020e74 <mg_snprintf>

			}

			char topic[MQTT_TOPIK_MAX_LEN];
			strcat(pub_topics_str, "\"");
 8003104:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8003108:	f7fd f8ca 	bl	80002a0 <strlen>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003114:	4413      	add	r3, r2
 8003116:	4979      	ldr	r1, [pc, #484]	@ (80032fc <handle_dev_status+0x378>)
 8003118:	461a      	mov	r2, r3
 800311a:	460b      	mov	r3, r1
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков состояний для INPUT_SENSOR
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8003120:	2301      	movs	r3, #1
 8003122:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003126:	e022      	b.n	800316e <handle_dev_status+0x1ea>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8003128:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f107 000c 	add.w	r0, r7, #12
 8003132:	2201      	movs	r2, #1
 8003134:	2180      	movs	r1, #128	@ 0x80
 8003136:	f001 ff2f 	bl	8004f98 <generate_status_topik>
				strcat(pub_topics_str, topic);
 800313a:	f107 030c 	add.w	r3, r7, #12
 800313e:	4619      	mov	r1, r3
 8003140:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8003144:	f022 fc8c 	bl	8025a60 <strcat>
				strcat(pub_topics_str, "\", \"");
 8003148:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800314c:	f7fd f8a8 	bl	80002a0 <strlen>
 8003150:	4603      	mov	r3, r0
 8003152:	461a      	mov	r2, r3
 8003154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003158:	4413      	add	r3, r2
 800315a:	4a69      	ldr	r2, [pc, #420]	@ (8003300 <handle_dev_status+0x37c>)
 800315c:	6810      	ldr	r0, [r2, #0]
 800315e:	6018      	str	r0, [r3, #0]
 8003160:	7912      	ldrb	r2, [r2, #4]
 8003162:	711a      	strb	r2, [r3, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8003164:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003168:	3301      	adds	r3, #1
 800316a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800316e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003172:	2b03      	cmp	r3, #3
 8003174:	ddd8      	ble.n	8003128 <handle_dev_status+0x1a4>
			}

			// Формируем список топиков состояний для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8003176:	2301      	movs	r3, #1
 8003178:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800317c:	e035      	b.n	80031ea <handle_dev_status+0x266>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 800317e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f107 000c 	add.w	r0, r7, #12
 8003188:	2202      	movs	r2, #2
 800318a:	2180      	movs	r1, #128	@ 0x80
 800318c:	f001 ff04 	bl	8004f98 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8003190:	f107 030c 	add.w	r3, r7, #12
 8003194:	4619      	mov	r1, r3
 8003196:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800319a:	f022 fc61 	bl	8025a60 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 800319e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	dc0e      	bgt.n	80031c4 <handle_dev_status+0x240>
					strcat(pub_topics_str, "\", \"");
 80031a6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80031aa:	f7fd f879 	bl	80002a0 <strlen>
 80031ae:	4603      	mov	r3, r0
 80031b0:	461a      	mov	r2, r3
 80031b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031b6:	4413      	add	r3, r2
 80031b8:	4a51      	ldr	r2, [pc, #324]	@ (8003300 <handle_dev_status+0x37c>)
 80031ba:	6810      	ldr	r0, [r2, #0]
 80031bc:	6018      	str	r0, [r3, #0]
 80031be:	7912      	ldrb	r2, [r2, #4]
 80031c0:	711a      	strb	r2, [r3, #4]
 80031c2:	e00d      	b.n	80031e0 <handle_dev_status+0x25c>
				}else{
					strcat(pub_topics_str, "\"");
 80031c4:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80031c8:	f7fd f86a 	bl	80002a0 <strlen>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031d4:	4413      	add	r3, r2
 80031d6:	4949      	ldr	r1, [pc, #292]	@ (80032fc <handle_dev_status+0x378>)
 80031d8:	461a      	mov	r2, r3
 80031da:	460b      	mov	r3, r1
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80031e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80031e4:	3301      	adds	r3, #1
 80031e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80031ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	ddc5      	ble.n	800317e <handle_dev_status+0x1fa>
				}
			}

			strcat(subscr_topics_str, "\"");
 80031f2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80031f6:	f7fd f853 	bl	80002a0 <strlen>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003202:	4413      	add	r3, r2
 8003204:	493d      	ldr	r1, [pc, #244]	@ (80032fc <handle_dev_status+0x378>)
 8003206:	461a      	mov	r2, r3
 8003208:	460b      	mov	r3, r1
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков подписки для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 800320e:	2301      	movs	r3, #1
 8003210:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003214:	e035      	b.n	8003282 <handle_dev_status+0x2fe>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8003216:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f107 000c 	add.w	r0, r7, #12
 8003220:	2202      	movs	r2, #2
 8003222:	2180      	movs	r1, #128	@ 0x80
 8003224:	f001 fe8e 	bl	8004f44 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	4619      	mov	r1, r3
 800322e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003232:	f022 fc15 	bl	8025a60 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 8003236:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800323a:	2b02      	cmp	r3, #2
 800323c:	dc0e      	bgt.n	800325c <handle_dev_status+0x2d8>
					strcat(subscr_topics_str, "\", \"");
 800323e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003242:	f7fd f82d 	bl	80002a0 <strlen>
 8003246:	4603      	mov	r3, r0
 8003248:	461a      	mov	r2, r3
 800324a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800324e:	4413      	add	r3, r2
 8003250:	4a2b      	ldr	r2, [pc, #172]	@ (8003300 <handle_dev_status+0x37c>)
 8003252:	6810      	ldr	r0, [r2, #0]
 8003254:	6018      	str	r0, [r3, #0]
 8003256:	7912      	ldrb	r2, [r2, #4]
 8003258:	711a      	strb	r2, [r3, #4]
 800325a:	e00d      	b.n	8003278 <handle_dev_status+0x2f4>
				}else{
					strcat(subscr_topics_str, "\"");
 800325c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003260:	f7fd f81e 	bl	80002a0 <strlen>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800326c:	4413      	add	r3, r2
 800326e:	4923      	ldr	r1, [pc, #140]	@ (80032fc <handle_dev_status+0x378>)
 8003270:	461a      	mov	r2, r3
 8003272:	460b      	mov	r3, r1
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8003278:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800327c:	3301      	adds	r3, #1
 800327e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003282:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003286:	2b03      	cmp	r3, #3
 8003288:	ddc5      	ble.n	8003216 <handle_dev_status+0x292>
				}
			}


			mg_http_reply(c, 200, headers, //TODO delete for release,
 800328a:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 800328e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003292:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8003296:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800329a:	9304      	str	r3, [sp, #16]
 800329c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032a0:	9303      	str	r3, [sp, #12]
 80032a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a6:	9302      	str	r3, [sp, #8]
 80032a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	4a13      	ldr	r2, [pc, #76]	@ (8003304 <handle_dev_status+0x380>)
 80032b8:	21c8      	movs	r1, #200	@ 0xc8
 80032ba:	6800      	ldr	r0, [r0, #0]
 80032bc:	f014 fe16 	bl	8017eec <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 80032c0:	e02f      	b.n	8003322 <handle_dev_status+0x39e>
					dev_status_template, mqtt_status_str, mqtt_local_addr, mqtt_server_addr, pub_topics_str, subscr_topics_str);

		}else{//error, unsupported method
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80032c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80032c6:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 80032ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <handle_dev_status+0x384>)
 80032cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003304 <handle_dev_status+0x380>)
 80032ce:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80032d2:	6800      	ldr	r0, [r0, #0]
 80032d4:	f014 fe0a 	bl	8017eec <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 80032d8:	e023      	b.n	8003322 <handle_dev_status+0x39e>
 80032da:	bf00      	nop
 80032dc:	0802f67c 	.word	0x0802f67c
 80032e0:	0802f1d0 	.word	0x0802f1d0
 80032e4:	0802f608 	.word	0x0802f608
 80032e8:	0802f610 	.word	0x0802f610
 80032ec:	0802f61c 	.word	0x0802f61c
 80032f0:	0802f624 	.word	0x0802f624
 80032f4:	080210a5 	.word	0x080210a5
 80032f8:	0802f630 	.word	0x0802f630
 80032fc:	0802f634 	.word	0x0802f634
 8003300:	0802f638 	.word	0x0802f638
 8003304:	0802f208 	.word	0x0802f208
 8003308:	0802f344 	.word	0x0802f344
					"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
		}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800330c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003310:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8003314:	4b0f      	ldr	r3, [pc, #60]	@ (8003354 <handle_dev_status+0x3d0>)
 8003316:	4a10      	ldr	r2, [pc, #64]	@ (8003358 <handle_dev_status+0x3d4>)
 8003318:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800331c:	6800      	ldr	r0, [r0, #0]
 800331e:	f014 fde5 	bl	8017eec <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Memory allocation error\"}\r\n");

	}

	free(mqtt_status_str);
 8003322:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003326:	f009 f84f 	bl	800c3c8 <vPortFree>
	free(mqtt_server_addr);
 800332a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800332e:	f009 f84b 	bl	800c3c8 <vPortFree>
	free(mqtt_local_addr);
 8003332:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8003336:	f009 f847 	bl	800c3c8 <vPortFree>
	free(pub_topics_str);
 800333a:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800333e:	f009 f843 	bl	800c3c8 <vPortFree>
	free(subscr_topics_str);
 8003342:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003346:	f009 f83f 	bl	800c3c8 <vPortFree>
}
 800334a:	bf00      	nop
 800334c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	0802f640 	.word	0x0802f640
 8003358:	0802f208 	.word	0x0802f208

0800335c <handle_OPTIONS_method>:


static void handle_OPTIONS_method(struct mg_connection *c){
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

	mg_http_reply(c, 200,
 8003364:	4b04      	ldr	r3, [pc, #16]	@ (8003378 <handle_OPTIONS_method+0x1c>)
 8003366:	4a05      	ldr	r2, [pc, #20]	@ (800337c <handle_OPTIONS_method+0x20>)
 8003368:	21c8      	movs	r1, #200	@ 0xc8
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f014 fdbe 	bl	8017eec <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	0802f6f0 	.word	0x0802f6f0
 800337c:	0802f6f4 	.word	0x0802f6f4

08003380 <handle_restart_mcu>:

static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	@ 0x28
 8003384:	af04      	add	r7, sp, #16
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]

	//HAL_NVIC_SystemReset();
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 800338a:	f107 030c 	add.w	r3, r7, #12
 800338e:	491a      	ldr	r1, [pc, #104]	@ (80033f8 <handle_restart_mcu+0x78>)
 8003390:	4618      	mov	r0, r3
 8003392:	f01e fa57 	bl	8021844 <mg_str_s>
 8003396:	6839      	ldr	r1, [r7, #0]
 8003398:	2300      	movs	r3, #0
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	cb0c      	ldmia	r3, {r2, r3}
 80033a2:	c903      	ldmia	r1, {r0, r1}
 80033a4:	f01e fb21 	bl	80219ea <mg_match>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d018      	beq.n	80033e0 <handle_restart_mcu+0x60>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033b2:	617b      	str	r3, [r7, #20]


		mg_timer_add(param->mgr, 2000 /* 05 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	6819      	ldr	r1, [r3, #0]
 80033b8:	2300      	movs	r3, #0
 80033ba:	9302      	str	r3, [sp, #8]
 80033bc:	4b0f      	ldr	r3, [pc, #60]	@ (80033fc <handle_restart_mcu+0x7c>)
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	2301      	movs	r3, #1
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	4608      	mov	r0, r1
 80033ce:	f01a facf 	bl	801d970 <mg_timer_add>

		mg_http_reply(c, 200, headers, //TODO delete for release,
 80033d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <handle_restart_mcu+0x80>)
 80033d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003404 <handle_restart_mcu+0x84>)
 80033d6:	21c8      	movs	r1, #200	@ 0xc8
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f014 fd87 	bl	8017eec <mg_http_reply>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 80033de:	e006      	b.n	80033ee <handle_restart_mcu+0x6e>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80033e0:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <handle_restart_mcu+0x88>)
 80033e2:	4a08      	ldr	r2, [pc, #32]	@ (8003404 <handle_restart_mcu+0x84>)
 80033e4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f014 fd7f 	bl	8017eec <mg_http_reply>
}
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	0802f278 	.word	0x0802f278
 80033fc:	08005a6f 	.word	0x08005a6f
 8003400:	0802f794 	.word	0x0802f794
 8003404:	0802f208 	.word	0x0802f208
 8003408:	0802f7c8 	.word	0x0802f7c8

0800340c <handle_firmware_upload>:

static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 800340c:	b580      	push	{r7, lr}
 800340e:	b0a6      	sub	sp, #152	@ 0x98
 8003410:	af02      	add	r7, sp, #8
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8003416:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800341a:	4920      	ldr	r1, [pc, #128]	@ (800349c <handle_firmware_upload+0x90>)
 800341c:	4618      	mov	r0, r3
 800341e:	f01e fa11 	bl	8021844 <mg_str_s>
 8003422:	6839      	ldr	r1, [r7, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800342c:	cb0c      	ldmia	r3, {r2, r3}
 800342e:	c903      	ldmia	r1, {r0, r1}
 8003430:	f01e fadb 	bl	80219ea <mg_match>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d024      	beq.n	8003484 <handle_firmware_upload+0x78>
		char file[MG_PATH_MAX];
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	f103 0010 	add.w	r0, r3, #16
 8003440:	f107 0208 	add.w	r2, r7, #8
 8003444:	2380      	movs	r3, #128	@ 0x80
 8003446:	4916      	ldr	r1, [pc, #88]	@ (80034a0 <handle_firmware_upload+0x94>)
 8003448:	f013 fbc2 	bl	8016bd0 <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 800344c:	f107 0308 	add.w	r3, r7, #8
 8003450:	4914      	ldr	r1, [pc, #80]	@ (80034a4 <handle_firmware_upload+0x98>)
 8003452:	4618      	mov	r0, r3
 8003454:	f7fc fec4 	bl	80001e0 <strcmp>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d108      	bne.n	8003470 <handle_firmware_upload+0x64>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 800345e:	4b12      	ldr	r3, [pc, #72]	@ (80034a8 <handle_firmware_upload+0x9c>)
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	4b12      	ldr	r3, [pc, #72]	@ (80034ac <handle_firmware_upload+0xa0>)
 8003464:	4a12      	ldr	r2, [pc, #72]	@ (80034b0 <handle_firmware_upload+0xa4>)
 8003466:	6839      	ldr	r1, [r7, #0]
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f015 fefb 	bl	8019264 <mg_http_upload>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 800346e:	e010      	b.n	8003492 <handle_firmware_upload+0x86>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8003470:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <handle_firmware_upload+0x98>)
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	4b0f      	ldr	r3, [pc, #60]	@ (80034b4 <handle_firmware_upload+0xa8>)
 8003476:	4a10      	ldr	r2, [pc, #64]	@ (80034b8 <handle_firmware_upload+0xac>)
 8003478:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f014 fd35 	bl	8017eec <mg_http_reply>
}
 8003482:	e006      	b.n	8003492 <handle_firmware_upload+0x86>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003484:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <handle_firmware_upload+0xb0>)
 8003486:	4a0c      	ldr	r2, [pc, #48]	@ (80034b8 <handle_firmware_upload+0xac>)
 8003488:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f014 fd2d 	bl	8017eec <mg_http_reply>
}
 8003492:	bf00      	nop
 8003494:	3790      	adds	r7, #144	@ 0x90
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	0802f278 	.word	0x0802f278
 80034a0:	0802f818 	.word	0x0802f818
 80034a4:	0802f820 	.word	0x0802f820
 80034a8:	00030d40 	.word	0x00030d40
 80034ac:	0802f830 	.word	0x0802f830
 80034b0:	2000000c 	.word	0x2000000c
 80034b4:	0802f83c 	.word	0x0802f83c
 80034b8:	0802f208 	.word	0x0802f208
 80034bc:	0802f7c8 	.word	0x0802f7c8

080034c0 <handle_firmware_md5>:

static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80034ca:	f107 030c 	add.w	r3, r7, #12
 80034ce:	491d      	ldr	r1, [pc, #116]	@ (8003544 <handle_firmware_md5+0x84>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	f01e f9b7 	bl	8021844 <mg_str_s>
 80034d6:	6839      	ldr	r1, [r7, #0]
 80034d8:	2300      	movs	r3, #0
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	cb0c      	ldmia	r3, {r2, r3}
 80034e2:	c903      	ldmia	r1, {r0, r1}
 80034e4:	f01e fa81 	bl	80219ea <mg_match>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01f      	beq.n	800352e <handle_firmware_md5+0x6e>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 80034ee:	2101      	movs	r1, #1
 80034f0:	2021      	movs	r0, #33	@ 0x21
 80034f2:	f7ff fa10 	bl	8002916 <mg_calloc>
 80034f6:	6178      	str	r0, [r7, #20]
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 80034f8:	6979      	ldr	r1, [r7, #20]
 80034fa:	4813      	ldr	r0, [pc, #76]	@ (8003548 <handle_firmware_md5+0x88>)
 80034fc:	f7ff fa56 	bl	80029ac <calc_file_md5sum>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d108      	bne.n	8003518 <handle_firmware_md5+0x58>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4b10      	ldr	r3, [pc, #64]	@ (800354c <handle_firmware_md5+0x8c>)
 800350c:	4a10      	ldr	r2, [pc, #64]	@ (8003550 <handle_firmware_md5+0x90>)
 800350e:	21c8      	movs	r1, #200	@ 0xc8
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f014 fceb 	bl	8017eec <mg_http_reply>
 8003516:	e006      	b.n	8003526 <handle_firmware_md5+0x66>
						"{\"status\":\"success\",\"message\":\"Firmware update file md5 sum: %s\"}\r\n", md5_str);
		}else{
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8003518:	4b0e      	ldr	r3, [pc, #56]	@ (8003554 <handle_firmware_md5+0x94>)
 800351a:	4a0d      	ldr	r2, [pc, #52]	@ (8003550 <handle_firmware_md5+0x90>)
 800351c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f014 fce3 	bl	8017eec <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Firmware update file not found\"}\r\n");
		}

		free(md5_str);
 8003526:	6978      	ldr	r0, [r7, #20]
 8003528:	f008 ff4e 	bl	800c3c8 <vPortFree>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
	}
}
 800352c:	e006      	b.n	800353c <handle_firmware_md5+0x7c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800352e:	4b0a      	ldr	r3, [pc, #40]	@ (8003558 <handle_firmware_md5+0x98>)
 8003530:	4a07      	ldr	r2, [pc, #28]	@ (8003550 <handle_firmware_md5+0x90>)
 8003532:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f014 fcd8 	bl	8017eec <mg_http_reply>
}
 800353c:	bf00      	nop
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	0802f1d0 	.word	0x0802f1d0
 8003548:	0802f888 	.word	0x0802f888
 800354c:	0802f8a0 	.word	0x0802f8a0
 8003550:	0802f208 	.word	0x0802f208
 8003554:	0802f8e4 	.word	0x0802f8e4
 8003558:	0802f924 	.word	0x0802f924

0800355c <handle_firmware_activate>:

static void handle_firmware_activate(struct mg_connection *c, struct mg_http_message *hm){
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	@ 0x28
 8003560:	af02      	add	r7, sp, #8
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8003566:	f107 0310 	add.w	r3, r7, #16
 800356a:	492e      	ldr	r1, [pc, #184]	@ (8003624 <handle_firmware_activate+0xc8>)
 800356c:	4618      	mov	r0, r3
 800356e:	f01e f969 	bl	8021844 <mg_str_s>
 8003572:	6839      	ldr	r1, [r7, #0]
 8003574:	2300      	movs	r3, #0
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	f107 0310 	add.w	r3, r7, #16
 800357c:	cb0c      	ldmia	r3, {r2, r3}
 800357e:	c903      	ldmia	r1, {r0, r1}
 8003580:	f01e fa33 	bl	80219ea <mg_match>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d017      	beq.n	80035ba <handle_firmware_activate+0x5e>
		size_t  size;

		if (mg_fs_lfs.st("/firmware.bin", &size, NULL)){ //Check if file exist
 800358a:	4b27      	ldr	r3, [pc, #156]	@ (8003628 <handle_firmware_activate+0xcc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f107 010c 	add.w	r1, r7, #12
 8003592:	2200      	movs	r2, #0
 8003594:	4825      	ldr	r0, [pc, #148]	@ (800362c <handle_firmware_activate+0xd0>)
 8003596:	4798      	blx	r3
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <handle_firmware_activate+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 800359e:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <handle_firmware_activate+0xd4>)
 80035a0:	4a24      	ldr	r2, [pc, #144]	@ (8003634 <handle_firmware_activate+0xd8>)
 80035a2:	21c8      	movs	r1, #200	@ 0xc8
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f014 fca1 	bl	8017eec <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");

	}
}
 80035aa:	e036      	b.n	800361a <handle_firmware_activate+0xbe>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80035ac:	4b22      	ldr	r3, [pc, #136]	@ (8003638 <handle_firmware_activate+0xdc>)
 80035ae:	4a21      	ldr	r2, [pc, #132]	@ (8003634 <handle_firmware_activate+0xd8>)
 80035b0:	21c8      	movs	r1, #200	@ 0xc8
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f014 fc9a 	bl	8017eec <mg_http_reply>
}
 80035b8:	e02f      	b.n	800361a <handle_firmware_activate+0xbe>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 80035ba:	f107 0318 	add.w	r3, r7, #24
 80035be:	491f      	ldr	r1, [pc, #124]	@ (800363c <handle_firmware_activate+0xe0>)
 80035c0:	4618      	mov	r0, r3
 80035c2:	f01e f93f 	bl	8021844 <mg_str_s>
 80035c6:	6839      	ldr	r1, [r7, #0]
 80035c8:	2300      	movs	r3, #0
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	f107 0318 	add.w	r3, r7, #24
 80035d0:	cb0c      	ldmia	r3, {r2, r3}
 80035d2:	c903      	ldmia	r1, {r0, r1}
 80035d4:	f01e fa09 	bl	80219ea <mg_match>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d016      	beq.n	800360c <handle_firmware_activate+0xb0>
	    if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 80035de:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <handle_firmware_activate+0xcc>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	4912      	ldr	r1, [pc, #72]	@ (800362c <handle_firmware_activate+0xd0>)
 80035e4:	4816      	ldr	r0, [pc, #88]	@ (8003640 <handle_firmware_activate+0xe4>)
 80035e6:	4798      	blx	r3
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d006      	beq.n	80035fc <handle_firmware_activate+0xa0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80035ee:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <handle_firmware_activate+0xd4>)
 80035f0:	4a10      	ldr	r2, [pc, #64]	@ (8003634 <handle_firmware_activate+0xd8>)
 80035f2:	21c8      	movs	r1, #200	@ 0xc8
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f014 fc79 	bl	8017eec <mg_http_reply>
}
 80035fa:	e00e      	b.n	800361a <handle_firmware_activate+0xbe>
			mg_http_reply(c, 500, headers, //TODO delete for release,
 80035fc:	4b11      	ldr	r3, [pc, #68]	@ (8003644 <handle_firmware_activate+0xe8>)
 80035fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003634 <handle_firmware_activate+0xd8>)
 8003600:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f014 fc71 	bl	8017eec <mg_http_reply>
}
 800360a:	e006      	b.n	800361a <handle_firmware_activate+0xbe>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800360c:	4b0e      	ldr	r3, [pc, #56]	@ (8003648 <handle_firmware_activate+0xec>)
 800360e:	4a09      	ldr	r2, [pc, #36]	@ (8003634 <handle_firmware_activate+0xd8>)
 8003610:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f014 fc69 	bl	8017eec <mg_http_reply>
}
 800361a:	bf00      	nop
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	0802f1d0 	.word	0x0802f1d0
 8003628:	2000000c 	.word	0x2000000c
 800362c:	0802f974 	.word	0x0802f974
 8003630:	0802f984 	.word	0x0802f984
 8003634:	0802f208 	.word	0x0802f208
 8003638:	0802f9bc 	.word	0x0802f9bc
 800363c:	0802f278 	.word	0x0802f278
 8003640:	0802f888 	.word	0x0802f888
 8003644:	0802f9f8 	.word	0x0802f9f8
 8003648:	0802fa3c 	.word	0x0802fa3c

0800364c <handle_firmware_deactivate>:

static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af02      	add	r7, sp, #8
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8003656:	f107 0308 	add.w	r3, r7, #8
 800365a:	4918      	ldr	r1, [pc, #96]	@ (80036bc <handle_firmware_deactivate+0x70>)
 800365c:	4618      	mov	r0, r3
 800365e:	f01e f8f1 	bl	8021844 <mg_str_s>
 8003662:	6839      	ldr	r1, [r7, #0]
 8003664:	2300      	movs	r3, #0
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	f107 0308 	add.w	r3, r7, #8
 800366c:	cb0c      	ldmia	r3, {r2, r3}
 800366e:	c903      	ldmia	r1, {r0, r1}
 8003670:	f01e f9bb 	bl	80219ea <mg_match>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d014      	beq.n	80036a4 <handle_firmware_deactivate+0x58>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 800367a:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <handle_firmware_deactivate+0x74>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4811      	ldr	r0, [pc, #68]	@ (80036c4 <handle_firmware_deactivate+0x78>)
 8003680:	4798      	blx	r3
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d006      	beq.n	8003696 <handle_firmware_deactivate+0x4a>

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8003688:	4b0f      	ldr	r3, [pc, #60]	@ (80036c8 <handle_firmware_deactivate+0x7c>)
 800368a:	4a10      	ldr	r2, [pc, #64]	@ (80036cc <handle_firmware_deactivate+0x80>)
 800368c:	21c8      	movs	r1, #200	@ 0xc8
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f014 fc2c 	bl	8017eec <mg_http_reply>
				}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 8003694:	e00d      	b.n	80036b2 <handle_firmware_deactivate+0x66>
					mg_http_reply(c, 200, headers, //TODO delete for release,
 8003696:	4b0e      	ldr	r3, [pc, #56]	@ (80036d0 <handle_firmware_deactivate+0x84>)
 8003698:	4a0c      	ldr	r2, [pc, #48]	@ (80036cc <handle_firmware_deactivate+0x80>)
 800369a:	21c8      	movs	r1, #200	@ 0xc8
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f014 fc25 	bl	8017eec <mg_http_reply>
}
 80036a2:	e006      	b.n	80036b2 <handle_firmware_deactivate+0x66>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <handle_firmware_deactivate+0x88>)
 80036a6:	4a09      	ldr	r2, [pc, #36]	@ (80036cc <handle_firmware_deactivate+0x80>)
 80036a8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f014 fc1d 	bl	8017eec <mg_http_reply>
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	0802f278 	.word	0x0802f278
 80036c0:	2000000c 	.word	0x2000000c
 80036c4:	0802f974 	.word	0x0802f974
 80036c8:	0802fa94 	.word	0x0802fa94
 80036cc:	0802f208 	.word	0x0802f208
 80036d0:	0802fad0 	.word	0x0802fad0
 80036d4:	0802f7c8 	.word	0x0802f7c8

080036d8 <handle_web_files_remove>:

static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80036e2:	f107 0308 	add.w	r3, r7, #8
 80036e6:	4915      	ldr	r1, [pc, #84]	@ (800373c <handle_web_files_remove+0x64>)
 80036e8:	4618      	mov	r0, r3
 80036ea:	f01e f8ab 	bl	8021844 <mg_str_s>
 80036ee:	6839      	ldr	r1, [r7, #0]
 80036f0:	2300      	movs	r3, #0
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	cb0c      	ldmia	r3, {r2, r3}
 80036fa:	c903      	ldmia	r1, {r0, r1}
 80036fc:	f01e f975 	bl	80219ea <mg_match>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00e      	beq.n	8003724 <handle_web_files_remove+0x4c>
			mg_fs_lfs.rm("/web");
 8003706:	4b0e      	ldr	r3, [pc, #56]	@ (8003740 <handle_web_files_remove+0x68>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	480e      	ldr	r0, [pc, #56]	@ (8003744 <handle_web_files_remove+0x6c>)
 800370c:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 800370e:	4b0c      	ldr	r3, [pc, #48]	@ (8003740 <handle_web_files_remove+0x68>)
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	480c      	ldr	r0, [pc, #48]	@ (8003744 <handle_web_files_remove+0x6c>)
 8003714:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8003716:	4b0c      	ldr	r3, [pc, #48]	@ (8003748 <handle_web_files_remove+0x70>)
 8003718:	4a0c      	ldr	r2, [pc, #48]	@ (800374c <handle_web_files_remove+0x74>)
 800371a:	21c8      	movs	r1, #200	@ 0xc8
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f014 fbe5 	bl	8017eec <mg_http_reply>
			    "{\"status\":\"success\",\"message\":\"All web interface files are deleted\"}\r\n");
    }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
    }
}
 8003722:	e006      	b.n	8003732 <handle_web_files_remove+0x5a>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003724:	4b0a      	ldr	r3, [pc, #40]	@ (8003750 <handle_web_files_remove+0x78>)
 8003726:	4a09      	ldr	r2, [pc, #36]	@ (800374c <handle_web_files_remove+0x74>)
 8003728:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f014 fbdd 	bl	8017eec <mg_http_reply>
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	0802f278 	.word	0x0802f278
 8003740:	2000000c 	.word	0x2000000c
 8003744:	0802fb14 	.word	0x0802fb14
 8003748:	0802fb1c 	.word	0x0802fb1c
 800374c:	0802f208 	.word	0x0802f208
 8003750:	0802f7c8 	.word	0x0802f7c8

08003754 <handle_fs_mkdir>:

// Функция для создания папки
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b0c6      	sub	sp, #280	@ 0x118
 8003758:	af02      	add	r7, sp, #8
 800375a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800375e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003762:	6018      	str	r0, [r3, #0]
 8003764:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003768:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800376c:	6019      	str	r1, [r3, #0]
  char name[123];
  char path[MG_PATH_MAX];

  if (mg_match(hm->method, mg_str("POST"), NULL)){
 800376e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003772:	4934      	ldr	r1, [pc, #208]	@ (8003844 <handle_fs_mkdir+0xf0>)
 8003774:	4618      	mov	r0, r3
 8003776:	f01e f865 	bl	8021844 <mg_str_s>
 800377a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800377e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800378c:	cb0c      	ldmia	r3, {r2, r3}
 800378e:	c903      	ldmia	r1, {r0, r1}
 8003790:	f01e f92b 	bl	80219ea <mg_match>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d043      	beq.n	8003822 <handle_fs_mkdir+0xce>
			// Получаем имя папки из параметра запроса
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 800379a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800379e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f503 7000 	add.w	r0, r3, #512	@ 0x200
 80037a8:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80037ac:	237b      	movs	r3, #123	@ 0x7b
 80037ae:	4926      	ldr	r1, [pc, #152]	@ (8003848 <handle_fs_mkdir+0xf4>)
 80037b0:	f013 fa0e 	bl	8016bd0 <mg_http_get_var>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	dd27      	ble.n	800380a <handle_fs_mkdir+0xb6>
		// Формируем полный путь
		snprintf(path, sizeof(path), "/web/%s", name);
 80037ba:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80037be:	f107 000c 	add.w	r0, r7, #12
 80037c2:	4a22      	ldr	r2, [pc, #136]	@ (800384c <handle_fs_mkdir+0xf8>)
 80037c4:	2180      	movs	r1, #128	@ 0x80
 80037c6:	f021 fc19 	bl	8024ffc <snprintf>

		// Создаем папку
		if (mg_fs_lfs.mkd(path)) {
 80037ca:	4b21      	ldr	r3, [pc, #132]	@ (8003850 <handle_fs_mkdir+0xfc>)
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	f107 020c 	add.w	r2, r7, #12
 80037d2:	4610      	mov	r0, r2
 80037d4:	4798      	blx	r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <handle_fs_mkdir+0x9e>
		  // Если создание успешно, отправляем положительный ответ
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 80037dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80037e0:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80037e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003854 <handle_fs_mkdir+0x100>)
 80037e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003858 <handle_fs_mkdir+0x104>)
 80037e8:	21c8      	movs	r1, #200	@ 0xc8
 80037ea:	6800      	ldr	r0, [r0, #0]
 80037ec:	f014 fb7e 	bl	8017eec <mg_http_reply>
	  }
  }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
  }
}
 80037f0:	e022      	b.n	8003838 <handle_fs_mkdir+0xe4>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 80037f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80037f6:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80037fa:	4b18      	ldr	r3, [pc, #96]	@ (800385c <handle_fs_mkdir+0x108>)
 80037fc:	4a16      	ldr	r2, [pc, #88]	@ (8003858 <handle_fs_mkdir+0x104>)
 80037fe:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003802:	6800      	ldr	r0, [r0, #0]
 8003804:	f014 fb72 	bl	8017eec <mg_http_reply>
}
 8003808:	e016      	b.n	8003838 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800380a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800380e:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8003812:	4b13      	ldr	r3, [pc, #76]	@ (8003860 <handle_fs_mkdir+0x10c>)
 8003814:	4a10      	ldr	r2, [pc, #64]	@ (8003858 <handle_fs_mkdir+0x104>)
 8003816:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800381a:	6800      	ldr	r0, [r0, #0]
 800381c:	f014 fb66 	bl	8017eec <mg_http_reply>
}
 8003820:	e00a      	b.n	8003838 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003822:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003826:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 800382a:	4b0e      	ldr	r3, [pc, #56]	@ (8003864 <handle_fs_mkdir+0x110>)
 800382c:	4a0a      	ldr	r2, [pc, #40]	@ (8003858 <handle_fs_mkdir+0x104>)
 800382e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003832:	6800      	ldr	r0, [r0, #0]
 8003834:	f014 fb5a 	bl	8017eec <mg_http_reply>
}
 8003838:	bf00      	nop
 800383a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	0802f278 	.word	0x0802f278
 8003848:	0802fb64 	.word	0x0802fb64
 800384c:	0802fb6c 	.word	0x0802fb6c
 8003850:	2000000c 	.word	0x2000000c
 8003854:	0802fb74 	.word	0x0802fb74
 8003858:	0802f208 	.word	0x0802f208
 800385c:	0802fba8 	.word	0x0802fba8
 8003860:	0802fbe4 	.word	0x0802fbe4
 8003864:	0802f7c8 	.word	0x0802f7c8

08003868 <handle_fs_get_log>:

// function for show logging
// function for show logging
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 8003868:	b580      	push	{r7, lr}
 800386a:	b090      	sub	sp, #64	@ 0x40
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8003874:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003878:	492c      	ldr	r1, [pc, #176]	@ (800392c <handle_fs_get_log+0xc4>)
 800387a:	4618      	mov	r0, r3
 800387c:	f01d ffe2 	bl	8021844 <mg_str_s>
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	2300      	movs	r3, #0
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800388a:	cb0c      	ldmia	r3, {r2, r3}
 800388c:	c903      	ldmia	r1, {r0, r1}
 800388e:	f01e f8ac 	bl	80219ea <mg_match>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02b      	beq.n	80038f0 <handle_fs_get_log+0x88>

		struct mg_http_serve_opts opts = {
 8003898:	f107 0310 	add.w	r3, r7, #16
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	60da      	str	r2, [r3, #12]
 80038a6:	611a      	str	r2, [r3, #16]
 80038a8:	615a      	str	r2, [r3, #20]
 80038aa:	4b21      	ldr	r3, [pc, #132]	@ (8003930 <handle_fs_get_log+0xc8>)
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	4b21      	ldr	r3, [pc, #132]	@ (8003934 <handle_fs_get_log+0xcc>)
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
			.root_dir = "/log",
			.fs = &mg_fs_lfs
		};

		switch (number) {
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <handle_fs_get_log+0x58>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d008      	beq.n	80038d0 <handle_fs_get_log+0x68>
 80038be:	e00f      	b.n	80038e0 <handle_fs_get_log+0x78>
			case 0:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 80038c0:	f107 0310 	add.w	r3, r7, #16
 80038c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003938 <handle_fs_get_log+0xd0>)
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f014 fd03 	bl	80182d4 <mg_http_serve_file>
				break;
 80038ce:	e029      	b.n	8003924 <handle_fs_get_log+0xbc>
			case 1:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 80038d0:	f107 0310 	add.w	r3, r7, #16
 80038d4:	4a19      	ldr	r2, [pc, #100]	@ (800393c <handle_fs_get_log+0xd4>)
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f014 fcfb 	bl	80182d4 <mg_http_serve_file>
				break;
 80038de:	e021      	b.n	8003924 <handle_fs_get_log+0xbc>
			default:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 80038e0:	f107 0310 	add.w	r3, r7, #16
 80038e4:	4a14      	ldr	r2, [pc, #80]	@ (8003938 <handle_fs_get_log+0xd0>)
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f014 fcf3 	bl	80182d4 <mg_http_serve_file>
				break;
 80038ee:	e019      	b.n	8003924 <handle_fs_get_log+0xbc>
		}


	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 80038f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80038f4:	4912      	ldr	r1, [pc, #72]	@ (8003940 <handle_fs_get_log+0xd8>)
 80038f6:	4618      	mov	r0, r3
 80038f8:	f01d ffa4 	bl	8021844 <mg_str_s>
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	2300      	movs	r3, #0
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003906:	cb0c      	ldmia	r3, {r2, r3}
 8003908:	c903      	ldmia	r1, {r0, r1}
 800390a:	f01e f86e 	bl	80219ea <mg_match>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d107      	bne.n	8003924 <handle_fs_get_log+0xbc>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003914:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <handle_fs_get_log+0xdc>)
 8003916:	4a0c      	ldr	r2, [pc, #48]	@ (8003948 <handle_fs_get_log+0xe0>)
 8003918:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f014 fae5 	bl	8017eec <mg_http_reply>
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}
}
 8003922:	e7ff      	b.n	8003924 <handle_fs_get_log+0xbc>
 8003924:	bf00      	nop
 8003926:	3738      	adds	r7, #56	@ 0x38
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	0802f1d0 	.word	0x0802f1d0
 8003930:	0802fc20 	.word	0x0802fc20
 8003934:	2000000c 	.word	0x2000000c
 8003938:	0802fc28 	.word	0x0802fc28
 800393c:	0802fc38 	.word	0x0802fc38
 8003940:	0802f278 	.word	0x0802f278
 8003944:	0802fa3c 	.word	0x0802fa3c
 8003948:	0802f208 	.word	0x0802f208

0800394c <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b0ac      	sub	sp, #176	@ 0xb0
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]

	if (ev == MG_EV_HTTP_MSG) {
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b0b      	cmp	r3, #11
 800395c:	f040 81c0 	bne.w	8003ce0 <dashboard+0x394>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8003966:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800396a:	49b5      	ldr	r1, [pc, #724]	@ (8003c40 <dashboard+0x2f4>)
 800396c:	4618      	mov	r0, r3
 800396e:	f01d ff69 	bl	8021844 <mg_str_s>
 8003972:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800397e:	cb0c      	ldmia	r3, {r2, r3}
 8003980:	c903      	ldmia	r1, {r0, r1}
 8003982:	f01e f832 	bl	80219ea <mg_match>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <dashboard+0x48>
            	handle_OPTIONS_method(c);
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7ff fce5 	bl	800335c <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 8003992:	e1a5      	b.n	8003ce0 <dashboard+0x394>
        }else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 8003994:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003998:	49aa      	ldr	r1, [pc, #680]	@ (8003c44 <dashboard+0x2f8>)
 800399a:	4618      	mov	r0, r3
 800399c:	f01d ff52 	bl	8021844 <mg_str_s>
 80039a0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039a4:	2300      	movs	r3, #0
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039ac:	cb0c      	ldmia	r3, {r2, r3}
 80039ae:	3108      	adds	r1, #8
 80039b0:	c903      	ldmia	r1, {r0, r1}
 80039b2:	f01e f81a 	bl	80219ea <mg_match>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <dashboard+0x78>
			handle_ram_status_get(c);
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7fe ffc9 	bl	8002954 <handle_ram_status_get>
}
 80039c2:	e18d      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 80039c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80039c8:	499f      	ldr	r1, [pc, #636]	@ (8003c48 <dashboard+0x2fc>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	f01d ff3a 	bl	8021844 <mg_str_s>
 80039d0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039d4:	2300      	movs	r3, #0
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80039dc:	cb0c      	ldmia	r3, {r2, r3}
 80039de:	3108      	adds	r1, #8
 80039e0:	c903      	ldmia	r1, {r0, r1}
 80039e2:	f01e f802 	bl	80219ea <mg_match>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <dashboard+0xac>
			handle_io_status_get(c, hm);
 80039ec:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff f869 	bl	8002ac8 <handle_io_status_get>
}
 80039f6:	e173      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 80039f8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80039fc:	4993      	ldr	r1, [pc, #588]	@ (8003c4c <dashboard+0x300>)
 80039fe:	4618      	mov	r0, r3
 8003a00:	f01d ff20 	bl	8021844 <mg_str_s>
 8003a04:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003a10:	cb0c      	ldmia	r3, {r2, r3}
 8003a12:	3108      	adds	r1, #8
 8003a14:	c903      	ldmia	r1, {r0, r1}
 8003a16:	f01d ffe8 	bl	80219ea <mg_match>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <dashboard+0xe0>
			handle_mqtt_conf(c, hm);
 8003a20:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f7ff f92d 	bl	8002c84 <handle_mqtt_conf>
}
 8003a2a:	e159      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8003a2c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003a30:	4987      	ldr	r1, [pc, #540]	@ (8003c50 <dashboard+0x304>)
 8003a32:	4618      	mov	r0, r3
 8003a34:	f01d ff06 	bl	8021844 <mg_str_s>
 8003a38:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003a44:	cb0c      	ldmia	r3, {r2, r3}
 8003a46:	3108      	adds	r1, #8
 8003a48:	c903      	ldmia	r1, {r0, r1}
 8003a4a:	f01d ffce 	bl	80219ea <mg_match>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <dashboard+0x114>
			handle_dev_status(c, hm);
 8003a54:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7ff fa93 	bl	8002f84 <handle_dev_status>
}
 8003a5e:	e13f      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8003a60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a64:	497b      	ldr	r1, [pc, #492]	@ (8003c54 <dashboard+0x308>)
 8003a66:	4618      	mov	r0, r3
 8003a68:	f01d feec 	bl	8021844 <mg_str_s>
 8003a6c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a70:	2300      	movs	r3, #0
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a78:	cb0c      	ldmia	r3, {r2, r3}
 8003a7a:	3108      	adds	r1, #8
 8003a7c:	c903      	ldmia	r1, {r0, r1}
 8003a7e:	f01d ffb4 	bl	80219ea <mg_match>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d006      	beq.n	8003a96 <dashboard+0x14a>
			handle_fs_get_log(c, hm, 0);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f7ff feea 	bl	8003868 <handle_fs_get_log>
}
 8003a94:	e124      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8003a96:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003a9a:	496f      	ldr	r1, [pc, #444]	@ (8003c58 <dashboard+0x30c>)
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f01d fed1 	bl	8021844 <mg_str_s>
 8003aa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003aae:	cb0c      	ldmia	r3, {r2, r3}
 8003ab0:	3108      	adds	r1, #8
 8003ab2:	c903      	ldmia	r1, {r0, r1}
 8003ab4:	f01d ff99 	bl	80219ea <mg_match>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <dashboard+0x180>
			handle_fs_get_log(c, hm, 1);
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f7ff fecf 	bl	8003868 <handle_fs_get_log>
}
 8003aca:	e109      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8003acc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ad0:	4962      	ldr	r1, [pc, #392]	@ (8003c5c <dashboard+0x310>)
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f01d feb6 	bl	8021844 <mg_str_s>
 8003ad8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003adc:	2300      	movs	r3, #0
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ae4:	cb0c      	ldmia	r3, {r2, r3}
 8003ae6:	3108      	adds	r1, #8
 8003ae8:	c903      	ldmia	r1, {r0, r1}
 8003aea:	f01d ff7e 	bl	80219ea <mg_match>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <dashboard+0x1b4>
			handle_restart_mcu(c, hm);
 8003af4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7ff fc41 	bl	8003380 <handle_restart_mcu>
}
 8003afe:	e0ef      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8003b00:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003b04:	4956      	ldr	r1, [pc, #344]	@ (8003c60 <dashboard+0x314>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f01d fe9c 	bl	8021844 <mg_str_s>
 8003b0c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b10:	2300      	movs	r3, #0
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003b18:	cb0c      	ldmia	r3, {r2, r3}
 8003b1a:	3108      	adds	r1, #8
 8003b1c:	c903      	ldmia	r1, {r0, r1}
 8003b1e:	f01d ff64 	bl	80219ea <mg_match>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <dashboard+0x1e8>
			handle_firmware_upload(c, hm);
 8003b28:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff fc6d 	bl	800340c <handle_firmware_upload>
}
 8003b32:	e0d5      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8003b34:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003b38:	494a      	ldr	r1, [pc, #296]	@ (8003c64 <dashboard+0x318>)
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f01d fe82 	bl	8021844 <mg_str_s>
 8003b40:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b44:	2300      	movs	r3, #0
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003b4c:	cb0c      	ldmia	r3, {r2, r3}
 8003b4e:	3108      	adds	r1, #8
 8003b50:	c903      	ldmia	r1, {r0, r1}
 8003b52:	f01d ff4a 	bl	80219ea <mg_match>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <dashboard+0x21c>
			handle_firmware_md5(c, hm);
 8003b5c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff fcad 	bl	80034c0 <handle_firmware_md5>
}
 8003b66:	e0bb      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/activate"), NULL)){
 8003b68:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b6c:	493e      	ldr	r1, [pc, #248]	@ (8003c68 <dashboard+0x31c>)
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f01d fe68 	bl	8021844 <mg_str_s>
 8003b74:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b80:	cb0c      	ldmia	r3, {r2, r3}
 8003b82:	3108      	adds	r1, #8
 8003b84:	c903      	ldmia	r1, {r0, r1}
 8003b86:	f01d ff30 	bl	80219ea <mg_match>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <dashboard+0x250>
			handle_firmware_activate(c, hm);
 8003b90:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f7ff fce1 	bl	800355c <handle_firmware_activate>
}
 8003b9a:	e0a1      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8003b9c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003ba0:	4932      	ldr	r1, [pc, #200]	@ (8003c6c <dashboard+0x320>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f01d fe4e 	bl	8021844 <mg_str_s>
 8003ba8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bac:	2300      	movs	r3, #0
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003bb4:	cb0c      	ldmia	r3, {r2, r3}
 8003bb6:	3108      	adds	r1, #8
 8003bb8:	c903      	ldmia	r1, {r0, r1}
 8003bba:	f01d ff16 	bl	80219ea <mg_match>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <dashboard+0x284>
			handle_firmware_deactivate(c, hm);
 8003bc4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7ff fd3f 	bl	800364c <handle_firmware_deactivate>
}
 8003bce:	e087      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8003bd0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003bd4:	4926      	ldr	r1, [pc, #152]	@ (8003c70 <dashboard+0x324>)
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f01d fe34 	bl	8021844 <mg_str_s>
 8003bdc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003be0:	2300      	movs	r3, #0
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003be8:	cb0c      	ldmia	r3, {r2, r3}
 8003bea:	3108      	adds	r1, #8
 8003bec:	c903      	ldmia	r1, {r0, r1}
 8003bee:	f01d fefc 	bl	80219ea <mg_match>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <dashboard+0x2b8>
			 handle_web_files_remove(c, hm);
 8003bf8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f7ff fd6b 	bl	80036d8 <handle_web_files_remove>
}
 8003c02:	e06d      	b.n	8003ce0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8003c04:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003c08:	491a      	ldr	r1, [pc, #104]	@ (8003c74 <dashboard+0x328>)
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f01d fe1a 	bl	8021844 <mg_str_s>
 8003c10:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c14:	2300      	movs	r3, #0
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003c1c:	cb0c      	ldmia	r3, {r2, r3}
 8003c1e:	3108      	adds	r1, #8
 8003c20:	c903      	ldmia	r1, {r0, r1}
 8003c22:	f01d fee2 	bl	80219ea <mg_match>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d02b      	beq.n	8003c84 <dashboard+0x338>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8003c2c:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <dashboard+0x32c>)
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	4b12      	ldr	r3, [pc, #72]	@ (8003c7c <dashboard+0x330>)
 8003c32:	4a13      	ldr	r2, [pc, #76]	@ (8003c80 <dashboard+0x334>)
 8003c34:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f015 fb13 	bl	8019264 <mg_http_upload>
}
 8003c3e:	e04f      	b.n	8003ce0 <dashboard+0x394>
 8003c40:	0802fc48 	.word	0x0802fc48
 8003c44:	0802fc50 	.word	0x0802fc50
 8003c48:	0802fc60 	.word	0x0802fc60
 8003c4c:	0802fc70 	.word	0x0802fc70
 8003c50:	0802fc84 	.word	0x0802fc84
 8003c54:	0802fc98 	.word	0x0802fc98
 8003c58:	0802fca8 	.word	0x0802fca8
 8003c5c:	0802fcbc 	.word	0x0802fcbc
 8003c60:	0802fcd0 	.word	0x0802fcd0
 8003c64:	0802fce8 	.word	0x0802fce8
 8003c68:	0802fcfc 	.word	0x0802fcfc
 8003c6c:	0802fd14 	.word	0x0802fd14
 8003c70:	0802fd30 	.word	0x0802fd30
 8003c74:	0802fd4c 	.word	0x0802fd4c
 8003c78:	0016e360 	.word	0x0016e360
 8003c7c:	0802fb14 	.word	0x0802fb14
 8003c80:	2000000c 	.word	0x2000000c
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8003c84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003c88:	4917      	ldr	r1, [pc, #92]	@ (8003ce8 <dashboard+0x39c>)
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f01d fdda 	bl	8021844 <mg_str_s>
 8003c90:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c94:	2300      	movs	r3, #0
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003c9c:	cb0c      	ldmia	r3, {r2, r3}
 8003c9e:	3108      	adds	r1, #8
 8003ca0:	c903      	ldmia	r1, {r0, r1}
 8003ca2:	f01d fea2 	bl	80219ea <mg_match>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <dashboard+0x36c>
			 handle_fs_mkdir(c, hm);
 8003cac:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f7ff fd4f 	bl	8003754 <handle_fs_mkdir>
}
 8003cb6:	e013      	b.n	8003ce0 <dashboard+0x394>
			struct mg_http_serve_opts opts = {
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
 8003cc8:	615a      	str	r2, [r3, #20]
 8003cca:	4b08      	ldr	r3, [pc, #32]	@ (8003cec <dashboard+0x3a0>)
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	4b08      	ldr	r3, [pc, #32]	@ (8003cf0 <dashboard+0x3a4>)
 8003cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
			mg_http_serve_dir(c, ev_data, &opts);
 8003cd2:	f107 0314 	add.w	r3, r7, #20
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f015 f9d4 	bl	8019088 <mg_http_serve_dir>
}
 8003ce0:	bf00      	nop
 8003ce2:	37a8      	adds	r7, #168	@ 0xa8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	0802fd68 	.word	0x0802fd68
 8003cec:	0802fb14 	.word	0x0802fb14
 8003cf0:	2000000c 	.word	0x2000000c

08003cf4 <dash_hdl>:

void * dash_hdl (void){
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
	return &dashboard;
 8003cf8:	4b02      	ldr	r3, [pc, #8]	@ (8003d04 <dash_hdl+0x10>)
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	0800394d 	.word	0x0800394d

08003d08 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
    r_w_parameter = func;
 8003d10:	4a04      	ldr	r2, [pc, #16]	@ (8003d24 <reg_parameter_handler+0x1c>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6013      	str	r3, [r2, #0]
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000b18 	.word	0x20000b18

08003d28 <_ZL9my_callocjj>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f008 fa76 	bl	800c22c <pvPortMalloc>
 8003d40:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <_ZL9my_callocjj+0x32>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	2100      	movs	r1, #0
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f021 fe7b 	bl	8025a50 <memset>
  return p;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
		{OUTPUT_SENSOR, 3}
    };

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;

static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b08d      	sub	sp, #52	@ 0x34
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	6178      	str	r0, [r7, #20]
 8003d6c:	6139      	str	r1, [r7, #16]
 8003d6e:	60fa      	str	r2, [r7, #12]

	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8003d70:	4b3a      	ldr	r3, [pc, #232]	@ (8003e5c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3308      	adds	r3, #8
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	4b39      	ldr	r3, [pc, #228]	@ (8003e60 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xfc>)
 8003d7c:	4a39      	ldr	r2, [pc, #228]	@ (8003e64 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x100>)
 8003d7e:	2128      	movs	r1, #40	@ 0x28
 8003d80:	f01d f878 	bl	8020e74 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8003d84:	4b35      	ldr	r3, [pc, #212]	@ (8003e5c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8003d86:	681c      	ldr	r4, [r3, #0]
 8003d88:	4b34      	ldr	r3, [pc, #208]	@ (8003e5c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fc fa87 	bl	80002a0 <strlen>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4619      	mov	r1, r3
 8003d96:	4620      	mov	r0, r4
 8003d98:	f000 fd26 	bl	80047e8 <set_device_conf_ip>


	for (size_t i = 0; i < sensor_count; i++) {
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da0:	e052      	b.n	8003e48 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xe4>
	        int sensor_type = sensors[i].sensor_type;
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4413      	add	r3, r2
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	623b      	str	r3, [r7, #32]
	        int sensor_number = sensors[i].sensor_number;
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4413      	add	r3, r2
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	61fb      	str	r3, [r7, #28]
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8003dba:	4b2b      	ldr	r3, [pc, #172]	@ (8003e68 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2180      	movs	r1, #128	@ 0x80
 8003dc8:	f000 fd40 	bl	800484c <get_config_topik_string>

			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8003dcc:	4b27      	ldr	r3, [pc, #156]	@ (8003e6c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x108>)
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8003ddc:	f000 fe10 	bl	8004a00 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8003de0:	4b21      	ldr	r3, [pc, #132]	@ (8003e68 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4c22      	ldr	r4, [pc, #136]	@ (8003e70 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8003de6:	463b      	mov	r3, r7
 8003de8:	4611      	mov	r1, r2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f01d fd2a 	bl	8021844 <mg_str_s>
 8003df0:	f104 0318 	add.w	r3, r4, #24
 8003df4:	463a      	mov	r2, r7
 8003df6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dfa:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8003dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003e6c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x108>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4c1b      	ldr	r4, [pc, #108]	@ (8003e70 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8003e04:	463b      	mov	r3, r7
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f01d fd1b 	bl	8021844 <mg_str_s>
 8003e0e:	f104 0320 	add.w	r3, r4, #32
 8003e12:	463a      	mov	r2, r7
 8003e14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e18:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8003e1c:	4b14      	ldr	r3, [pc, #80]	@ (8003e70 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8003e24:	4b12      	ldr	r3, [pc, #72]	@ (8003e70 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8003e2c:	4910      	ldr	r1, [pc, #64]	@ (8003e70 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8003e2e:	6978      	ldr	r0, [r7, #20]
 8003e30:	f018 fd5a 	bl	801c8e8 <mg_mqtt_pub>

			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8003e34:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	490e      	ldr	r1, [pc, #56]	@ (8003e74 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	f7fe f97d 	bl	800213c <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	3301      	adds	r3, #1
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d3a8      	bcc.n	8003da2 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x3e>

	}
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	372c      	adds	r7, #44	@ 0x2c
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd90      	pop	{r4, r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000b7c 	.word	0x20000b7c
 8003e60:	0802105b 	.word	0x0802105b
 8003e64:	0802fd84 	.word	0x0802fd84
 8003e68:	20000b28 	.word	0x20000b28
 8003e6c:	20000b2c 	.word	0x20000b2c
 8003e70:	20000b38 	.word	0x20000b38
 8003e74:	0802fd88 	.word	0x0802fd88

08003e78 <_ZL19mqtt_send_io_statusP13mg_connectionb>:


static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8003e78:	b590      	push	{r4, r7, lr}
 8003e7a:	b08d      	sub	sp, #52	@ 0x34
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	460b      	mov	r3, r1
 8003e82:	72fb      	strb	r3, [r7, #11]

	struct   DeviceStatus status;
	static struct DeviceStatus prev_status;
	uint8_t  i;
	char *   payload = NULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	623b      	str	r3, [r7, #32]
	char *   topik = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]

	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8003e8c:	4b70      	ldr	r3, [pc, #448]	@ (8004050 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1d8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f107 0014 	add.w	r0, r7, #20
 8003e94:	2200      	movs	r2, #0
 8003e96:	2101      	movs	r1, #1
 8003e98:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8003e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8004050 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1d8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f107 0214 	add.w	r2, r7, #20
 8003ea2:	1cd0      	adds	r0, r2, #3
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	4798      	blx	r3

	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8003eaa:	f107 0314 	add.w	r3, r7, #20
 8003eae:	2203      	movs	r2, #3
 8003eb0:	4968      	ldr	r1, [pc, #416]	@ (8004054 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1dc>)
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f021 fd38 	bl	8025928 <memcmp>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10e      	bne.n	8003edc <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8003ebe:	f107 0314 	add.w	r3, r7, #20
 8003ec2:	3303      	adds	r3, #3
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	4964      	ldr	r1, [pc, #400]	@ (8004058 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e0>)
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f021 fd2d 	bl	8025928 <memcmp>
 8003ece:	4603      	mov	r3, r0
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d103      	bne.n	8003edc <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8003ed4:	7afb      	ldrb	r3, [r7, #11]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80b5 	beq.w	8004046 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1ce>
	    // Состояние изменилось, продолжаем
		memcpy(&prev_status, &status, sizeof(status));
 8003edc:	4b5d      	ldr	r3, [pc, #372]	@ (8004054 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1dc>)
 8003ede:	f107 0214 	add.w	r2, r7, #20
 8003ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ee6:	6018      	str	r0, [r3, #0]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	8019      	strh	r1, [r3, #0]

		//logging(L_INFO, "Send io status data to MQTT server");

		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8003eec:	2101      	movs	r1, #1
 8003eee:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003ef2:	f7ff ff19 	bl	8003d28 <_ZL9my_callocjj>
 8003ef6:	6238      	str	r0, [r7, #32]
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8003ef8:	2101      	movs	r1, #1
 8003efa:	2080      	movs	r0, #128	@ 0x80
 8003efc:	f7ff ff14 	bl	8003d28 <_ZL9my_callocjj>
 8003f00:	61f8      	str	r0, [r7, #28]

		for (i = 0; i < INPUTS_COUNT; i++){
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003f08:	e045      	b.n	8003f96 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x11e>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8003f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f0e:	3301      	adds	r3, #1
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f16:	3328      	adds	r3, #40	@ 0x28
 8003f18:	443b      	add	r3, r7
 8003f1a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	2201      	movs	r2, #1
 8003f24:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8003f28:	6a38      	ldr	r0, [r7, #32]
 8003f2a:	f000 ffc7 	bl	8004ebc <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8003f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f32:	3301      	adds	r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2201      	movs	r2, #1
 8003f38:	2180      	movs	r1, #128	@ 0x80
 8003f3a:	69f8      	ldr	r0, [r7, #28]
 8003f3c:	f001 f82c 	bl	8004f98 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8003f40:	4c46      	ldr	r4, [pc, #280]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f42:	463b      	mov	r3, r7
 8003f44:	69f9      	ldr	r1, [r7, #28]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f01d fc7c 	bl	8021844 <mg_str_s>
 8003f4c:	f104 0318 	add.w	r3, r4, #24
 8003f50:	463a      	mov	r2, r7
 8003f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f56:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8003f5a:	4c40      	ldr	r4, [pc, #256]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f5c:	463b      	mov	r3, r7
 8003f5e:	6a39      	ldr	r1, [r7, #32]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f01d fc6f 	bl	8021844 <mg_str_s>
 8003f66:	f104 0320 	add.w	r3, r4, #32
 8003f6a:	463a      	mov	r2, r7
 8003f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f70:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8003f74:	4b39      	ldr	r3, [pc, #228]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8003f7c:	4b37      	ldr	r3, [pc, #220]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8003f84:	4935      	ldr	r1, [pc, #212]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f018 fcae 	bl	801c8e8 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8003f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f90:	3301      	adds	r3, #1
 8003f92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003f96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d9b5      	bls.n	8003f0a <_ZL19mqtt_send_io_statusP13mg_connectionb+0x92>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}

		for (i = 0; i < OUTPUTS_COUNT; i++){
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003fa4:	e045      	b.n	8004032 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1ba>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8003fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003faa:	3301      	adds	r3, #1
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fb2:	3328      	adds	r3, #40	@ 0x28
 8003fb4:	443b      	add	r3, r7
 8003fb6:	f813 3c11 	ldrb.w	r3, [r3, #-17]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8003fc4:	6a38      	ldr	r0, [r7, #32]
 8003fc6:	f000 ff79 	bl	8004ebc <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8003fca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fce:	3301      	adds	r3, #1
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	2180      	movs	r1, #128	@ 0x80
 8003fd6:	69f8      	ldr	r0, [r7, #28]
 8003fd8:	f000 ffde 	bl	8004f98 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8003fdc:	4c1f      	ldr	r4, [pc, #124]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003fde:	463b      	mov	r3, r7
 8003fe0:	69f9      	ldr	r1, [r7, #28]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f01d fc2e 	bl	8021844 <mg_str_s>
 8003fe8:	f104 0318 	add.w	r3, r4, #24
 8003fec:	463a      	mov	r2, r7
 8003fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ff2:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8003ff6:	4c19      	ldr	r4, [pc, #100]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	6a39      	ldr	r1, [r7, #32]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f01d fc21 	bl	8021844 <mg_str_s>
 8004002:	f104 0320 	add.w	r3, r4, #32
 8004006:	463a      	mov	r2, r7
 8004008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800400c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8004010:	4b12      	ldr	r3, [pc, #72]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8004018:	4b10      	ldr	r3, [pc, #64]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 800401a:	2200      	movs	r2, #0
 800401c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8004020:	490e      	ldr	r1, [pc, #56]	@ (800405c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f018 fc60 	bl	801c8e8 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8004028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800402c:	3301      	adds	r3, #1
 800402e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004032:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004036:	2b02      	cmp	r3, #2
 8004038:	d9b5      	bls.n	8003fa6 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x12e>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}


		free(payload);
 800403a:	6a38      	ldr	r0, [r7, #32]
 800403c:	f008 f9c4 	bl	800c3c8 <vPortFree>
		free(topik);
 8004040:	69f8      	ldr	r0, [r7, #28]
 8004042:	f008 f9c1 	bl	800c3c8 <vPortFree>
	}
}
 8004046:	bf00      	nop
 8004048:	372c      	adds	r7, #44	@ 0x2c
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}
 800404e:	bf00      	nop
 8004050:	20000b90 	.word	0x20000b90
 8004054:	20000b94 	.word	0x20000b94
 8004058:	20000b97 	.word	0x20000b97
 800405c:	20000b38 	.word	0x20000b38

08004060 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:

static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 8004060:	b590      	push	{r4, r7, lr}
 8004062:	b089      	sub	sp, #36	@ 0x24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6178      	str	r0, [r7, #20]
 8004068:	6139      	str	r1, [r7, #16]
 800406a:	60fa      	str	r2, [r7, #12]

	char * topik = NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61bb      	str	r3, [r7, #24]

	for (size_t i = 0; i < sensor_count; i++) {
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	e036      	b.n	80040e4 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x84>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4413      	add	r3, r2
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d12c      	bne.n	80040de <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7e>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8004084:	2101      	movs	r1, #1
 8004086:	2080      	movs	r0, #128	@ 0x80
 8004088:	f7ff fe4e 	bl	8003d28 <_ZL9my_callocjj>
 800408c:	61b8      	str	r0, [r7, #24]
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4413      	add	r3, r2
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2202      	movs	r2, #2
 800409c:	2180      	movs	r1, #128	@ 0x80
 800409e:	69b8      	ldr	r0, [r7, #24]
 80040a0:	f000 ff50 	bl	8004f44 <generate_comand_topik_for_subscrabe>

			mqtt_opts.qos = 1;
 80040a4:	4b14      	ldr	r3, [pc, #80]	@ (80040f8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 80040ac:	4c12      	ldr	r4, [pc, #72]	@ (80040f8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 80040ae:	463b      	mov	r3, r7
 80040b0:	69b9      	ldr	r1, [r7, #24]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f01d fbc6 	bl	8021844 <mg_str_s>
 80040b8:	f104 0318 	add.w	r3, r4, #24
 80040bc:	463a      	mov	r2, r7
 80040be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040c2:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 80040c6:	490c      	ldr	r1, [pc, #48]	@ (80040f8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 80040c8:	6978      	ldr	r0, [r7, #20]
 80040ca:	f018 fcdb 	bl	801ca84 <mg_mqtt_sub>

			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	490a      	ldr	r1, [pc, #40]	@ (80040fc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x9c>)
 80040d2:	2001      	movs	r0, #1
 80040d4:	f7fe f832 	bl	800213c <logging>
			free(topik);
 80040d8:	69b8      	ldr	r0, [r7, #24]
 80040da:	f008 f975 	bl	800c3c8 <vPortFree>
	for (size_t i = 0; i < sensor_count; i++) {
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3301      	adds	r3, #1
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d3c4      	bcc.n	8004076 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x16>
		}
	}
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	3724      	adds	r7, #36	@ 0x24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd90      	pop	{r4, r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000b38 	.word	0x20000b38
 80040fc:	0802fdac 	.word	0x0802fdac

08004100 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:

static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

	inputs_state_t  sw_r, sw_w;
	int relay_number = 0;  // Переменная для хранения номера реле
 8004108:	2300      	movs	r3, #0
 800410a:	60bb      	str	r3, [r7, #8]
    //char *state = NULL;  // Строка для хранения состояния (ON/OFF)

    //Топик выглядит как "cedar_4022422E1436/switch0/set"
    const char *topic = mess->topic.buf;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61fb      	str	r3, [r7, #28]
    const char *message = mess->data.buf;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61bb      	str	r3, [r7, #24]

    if(message == NULL || topic == NULL){
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10e      	bne.n	8004142 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x42>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8004124:	4b7e      	ldr	r3, [pc, #504]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f340 80f5 	ble.w	8004318 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
 800412e:	4b7d      	ldr	r3, [pc, #500]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8004130:	2292      	movs	r2, #146	@ 0x92
 8004132:	497d      	ldr	r1, [pc, #500]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8004134:	2001      	movs	r0, #1
 8004136:	f016 fe81 	bl	801ae3c <mg_log_prefix>
 800413a:	487c      	ldr	r0, [pc, #496]	@ (800432c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22c>)
 800413c:	f016 fece 	bl	801aedc <mg_log>
    	return;
 8004140:	e0ea      	b.n	8004318 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
    }

    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8004142:	4b7b      	ldr	r3, [pc, #492]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f107 0010 	add.w	r0, r7, #16
 800414a:	2200      	movs	r2, #0
 800414c:	2102      	movs	r1, #2
 800414e:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 8004150:	f107 030c 	add.w	r3, r7, #12
 8004154:	f107 0210 	add.w	r2, r7, #16
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	4611      	mov	r1, r2
 800415c:	8019      	strh	r1, [r3, #0]
 800415e:	3302      	adds	r3, #2
 8004160:	0c12      	lsrs	r2, r2, #16
 8004162:	701a      	strb	r2, [r3, #0]

    // Ищем "switch" в топике и затем извлекаем номер реле
    const char *switch_position = strstr(topic, "switch");
 8004164:	4973      	ldr	r1, [pc, #460]	@ (8004334 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x234>)
 8004166:	69f8      	ldr	r0, [r7, #28]
 8004168:	f021 fcf2 	bl	8025b50 <strstr>
 800416c:	6178      	str	r0, [r7, #20]

    if (switch_position != NULL) {
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80bd 	beq.w	80042f0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>
    	// Извлекаем номер реле (например, "3" из "switch3")
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 8004176:	f107 0308 	add.w	r3, r7, #8
 800417a:	461a      	mov	r2, r3
 800417c:	496e      	ldr	r1, [pc, #440]	@ (8004338 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x238>)
 800417e:	6978      	ldr	r0, [r7, #20]
 8004180:	f021 f8c4 	bl	802530c <sscanf>
 8004184:	4603      	mov	r3, r0
 8004186:	2b01      	cmp	r3, #1
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 809b 	beq.w	80042cc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1cc>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8004196:	4b62      	ldr	r3, [pc, #392]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b01      	cmp	r3, #1
 800419c:	dd0b      	ble.n	80041b6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb6>
 800419e:	4b61      	ldr	r3, [pc, #388]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80041a0:	229f      	movs	r2, #159	@ 0x9f
 80041a2:	4961      	ldr	r1, [pc, #388]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80041a4:	2002      	movs	r0, #2
 80041a6:	f016 fe49 	bl	801ae3c <mg_log_prefix>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	4619      	mov	r1, r3
 80041b0:	4862      	ldr	r0, [pc, #392]	@ (800433c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x23c>)
 80041b2:	f016 fe93 	bl	801aedc <mg_log>

    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, topic);
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4961      	ldr	r1, [pc, #388]	@ (8004340 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x240>)
 80041bc:	2001      	movs	r0, #1
 80041be:	f7fd ffbd 	bl	800213c <logging>

    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	dd02      	ble.n	80041ce <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xce>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	dd16      	ble.n	80041fc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xfc>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 80041ce:	4b54      	ldr	r3, [pc, #336]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dd0b      	ble.n	80041ee <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xee>
 80041d6:	4b53      	ldr	r3, [pc, #332]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80041d8:	22a4      	movs	r2, #164	@ 0xa4
 80041da:	4953      	ldr	r1, [pc, #332]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80041dc:	2001      	movs	r0, #1
 80041de:	f016 fe2d 	bl	801ae3c <mg_log_prefix>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	461a      	mov	r2, r3
 80041e6:	2103      	movs	r1, #3
 80041e8:	4856      	ldr	r0, [pc, #344]	@ (8004344 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x244>)
 80041ea:	f016 fe77 	bl	801aedc <mg_log>

    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2203      	movs	r2, #3
 80041f2:	4954      	ldr	r1, [pc, #336]	@ (8004344 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x244>)
 80041f4:	2003      	movs	r0, #3
 80041f6:	f7fd ffa1 	bl	800213c <logging>

    			return;
 80041fa:	e08e      	b.n	800431a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    		}

    		// Получаем состояние реле (ON или OFF) из данных сообщения
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d125      	bne.n	8004250 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x150>
 8004204:	2202      	movs	r2, #2
 8004206:	4950      	ldr	r1, [pc, #320]	@ (8004348 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x248>)
 8004208:	69b8      	ldr	r0, [r7, #24]
 800420a:	f021 fc56 	bl	8025aba <strncmp>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d11d      	bne.n	8004250 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x150>
				sw_w[relay_number-1] = 1;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	3b01      	subs	r3, #1
 8004218:	3320      	adds	r3, #32
 800421a:	443b      	add	r3, r7
 800421c:	2201      	movs	r2, #1
 800421e:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8004222:	4b3f      	ldr	r3, [pc, #252]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	dd0a      	ble.n	8004240 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x140>
 800422a:	4b3e      	ldr	r3, [pc, #248]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 800422c:	22ae      	movs	r2, #174	@ 0xae
 800422e:	493e      	ldr	r1, [pc, #248]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8004230:	2002      	movs	r0, #2
 8004232:	f016 fe03 	bl	801ae3c <mg_log_prefix>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4619      	mov	r1, r3
 800423a:	4844      	ldr	r0, [pc, #272]	@ (800434c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 800423c:	f016 fe4e 	bl	801aedc <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8004240:	4b3b      	ldr	r3, [pc, #236]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f107 000c 	add.w	r0, r7, #12
 8004248:	2201      	movs	r2, #1
 800424a:	2102      	movs	r1, #2
 800424c:	4798      	blx	r3
 800424e:	e064      	b.n	800431a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d125      	bne.n	80042a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a4>
 8004258:	2203      	movs	r2, #3
 800425a:	493d      	ldr	r1, [pc, #244]	@ (8004350 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 800425c:	69b8      	ldr	r0, [r7, #24]
 800425e:	f021 fc2c 	bl	8025aba <strncmp>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11d      	bne.n	80042a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a4>
				sw_w[relay_number-1] = 0;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	3b01      	subs	r3, #1
 800426c:	3320      	adds	r3, #32
 800426e:	443b      	add	r3, r7
 8004270:	2200      	movs	r2, #0
 8004272:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8004276:	4b2a      	ldr	r3, [pc, #168]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b01      	cmp	r3, #1
 800427c:	dd0a      	ble.n	8004294 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x194>
 800427e:	4b29      	ldr	r3, [pc, #164]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8004280:	22b2      	movs	r2, #178	@ 0xb2
 8004282:	4929      	ldr	r1, [pc, #164]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8004284:	2002      	movs	r0, #2
 8004286:	f016 fdd9 	bl	801ae3c <mg_log_prefix>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4619      	mov	r1, r3
 800428e:	4831      	ldr	r0, [pc, #196]	@ (8004354 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8004290:	f016 fe24 	bl	801aedc <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8004294:	4b26      	ldr	r3, [pc, #152]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f107 000c 	add.w	r0, r7, #12
 800429c:	2201      	movs	r2, #1
 800429e:	2102      	movs	r1, #2
 80042a0:	4798      	blx	r3
 80042a2:	e03a      	b.n	800431a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>

			}else{
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 80042a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	dd09      	ble.n	80042c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c0>
 80042ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80042ae:	22b6      	movs	r2, #182	@ 0xb6
 80042b0:	491d      	ldr	r1, [pc, #116]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80042b2:	2001      	movs	r0, #1
 80042b4:	f016 fdc2 	bl	801ae3c <mg_log_prefix>
 80042b8:	69b9      	ldr	r1, [r7, #24]
 80042ba:	4827      	ldr	r0, [pc, #156]	@ (8004358 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80042bc:	f016 fe0e 	bl	801aedc <mg_log>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message);
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4925      	ldr	r1, [pc, #148]	@ (8004358 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80042c4:	2003      	movs	r0, #3
 80042c6:	f7fd ff39 	bl	800213c <logging>
 80042ca:	e026      	b.n	800431a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
			}

    	}else{
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 80042cc:	4b14      	ldr	r3, [pc, #80]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	dd08      	ble.n	80042e6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e6>
 80042d4:	4b13      	ldr	r3, [pc, #76]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80042d6:	22bb      	movs	r2, #187	@ 0xbb
 80042d8:	4913      	ldr	r1, [pc, #76]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80042da:	2001      	movs	r0, #1
 80042dc:	f016 fdae 	bl	801ae3c <mg_log_prefix>
 80042e0:	481e      	ldr	r0, [pc, #120]	@ (800435c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x25c>)
 80042e2:	f016 fdfb 	bl	801aedc <mg_log>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 80042e6:	491e      	ldr	r1, [pc, #120]	@ (8004360 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 80042e8:	2003      	movs	r0, #3
 80042ea:	f7fd ff27 	bl	800213c <logging>
 80042ee:	e014      	b.n	800431a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    	}
    }else{
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 80042f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004320 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	dd09      	ble.n	800430c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>
 80042f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80042fa:	22bf      	movs	r2, #191	@ 0xbf
 80042fc:	490a      	ldr	r1, [pc, #40]	@ (8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80042fe:	2001      	movs	r0, #1
 8004300:	f016 fd9c 	bl	801ae3c <mg_log_prefix>
 8004304:	69f9      	ldr	r1, [r7, #28]
 8004306:	4817      	ldr	r0, [pc, #92]	@ (8004364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8004308:	f016 fde8 	bl	801aedc <mg_log>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", topic);
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	4915      	ldr	r1, [pc, #84]	@ (8004364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8004310:	2003      	movs	r0, #3
 8004312:	f7fd ff13 	bl	800213c <logging>
 8004316:	e000      	b.n	800431a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    	return;
 8004318:	bf00      	nop
    }
}
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20000298 	.word	0x20000298
 8004324:	0802fdc8 	.word	0x0802fdc8
 8004328:	0802fde8 	.word	0x0802fde8
 800432c:	0802fe14 	.word	0x0802fe14
 8004330:	20000b90 	.word	0x20000b90
 8004334:	0802fe38 	.word	0x0802fe38
 8004338:	0802fe40 	.word	0x0802fe40
 800433c:	0802fe4c 	.word	0x0802fe4c
 8004340:	0802fe78 	.word	0x0802fe78
 8004344:	0802fea0 	.word	0x0802fea0
 8004348:	0802fef0 	.word	0x0802fef0
 800434c:	0802fef4 	.word	0x0802fef4
 8004350:	0802ff08 	.word	0x0802ff08
 8004354:	0802ff0c 	.word	0x0802ff0c
 8004358:	0802ff20 	.word	0x0802ff20
 800435c:	0802ff5c 	.word	0x0802ff5c
 8004360:	0802ff94 	.word	0x0802ff94
 8004364:	0802ffcc 	.word	0x0802ffcc

08004368 <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:


static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	if(is_registered){
 8004370:	4b06      	ldr	r3, [pc, #24]	@ (800438c <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x24>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>
		mqtt_send_io_status(mqtt_conn, 1);
 8004378:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x28>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2101      	movs	r1, #1
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fd7a 	bl	8003e78 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000b8c 	.word	0x20000b8c
 8004390:	20000b78 	.word	0x20000b78

08004394 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:

static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b11      	cmp	r3, #17
 80043a4:	d132      	bne.n	800440c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x78>
		MG_DEBUG(("MQTT_open_connection"));
 80043a6:	4b2d      	ldr	r3, [pc, #180]	@ (800445c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	dd08      	ble.n	80043c0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x2c>
 80043ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004460 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xcc>)
 80043b0:	22cd      	movs	r2, #205	@ 0xcd
 80043b2:	492c      	ldr	r1, [pc, #176]	@ (8004464 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd0>)
 80043b4:	2003      	movs	r0, #3
 80043b6:	f016 fd41 	bl	801ae3c <mg_log_prefix>
 80043ba:	482b      	ldr	r0, [pc, #172]	@ (8004468 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd4>)
 80043bc:	f016 fd8e 	bl	801aedc <mg_log>
		logging(L_INFO, "MQTT Open connection");
 80043c0:	492a      	ldr	r1, [pc, #168]	@ (800446c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd8>)
 80043c2:	2001      	movs	r0, #1
 80043c4:	f7fd feba 	bl	800213c <logging>
		mqtt_conn = conn;
 80043c8:	4a29      	ldr	r2, [pc, #164]	@ (8004470 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6013      	str	r3, [r2, #0]
		if(!is_registered){
 80043ce:	4b29      	ldr	r3, [pc, #164]	@ (8004474 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	f083 0301 	eor.w	r3, r3, #1
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d03a      	beq.n	8004452 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 80043dc:	4b24      	ldr	r3, [pc, #144]	@ (8004470 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2206      	movs	r2, #6
 80043e2:	4925      	ldr	r1, [pc, #148]	@ (8004478 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe4>)
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fcbd 	bl	8003d64 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 80043ea:	4b21      	ldr	r3, [pc, #132]	@ (8004470 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2101      	movs	r1, #1
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fd41 	bl	8003e78 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 80043f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004470 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2206      	movs	r2, #6
 80043fc:	491e      	ldr	r1, [pc, #120]	@ (8004478 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe4>)
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fe2e 	bl	8004060 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8004404:	4b1b      	ldr	r3, [pc, #108]	@ (8004474 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]
	}else if (ev == MG_EV_CLOSE){
		logging(L_INFO, "MQTT Close connection");
		mqtt_conn     = NULL;
		is_registered = false;
	}
}
 800440a:	e022      	b.n	8004452 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_MQTT_MSG){
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b10      	cmp	r3, #16
 8004410:	d10f      	bne.n	8004432 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9e>
		logging(L_INFO, "Receive message from MQTT server");
 8004412:	491a      	ldr	r1, [pc, #104]	@ (800447c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe8>)
 8004414:	2001      	movs	r0, #1
 8004416:	f7fd fe91 	bl	800213c <logging>
		 struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	617b      	str	r3, [r7, #20]
		 mqtt_subscrabe_recv_cmd_parce(mm);
 800441e:	6978      	ldr	r0, [r7, #20]
 8004420:	f7ff fe6e 	bl	8004100 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8004424:	4b12      	ldr	r3, [pc, #72]	@ (8004470 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fd24 	bl	8003e78 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8004430:	e00f      	b.n	8004452 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_MQTT_CMD){
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b0f      	cmp	r3, #15
 8004436:	d00c      	beq.n	8004452 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_CLOSE){
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b09      	cmp	r3, #9
 800443c:	d109      	bne.n	8004452 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
		logging(L_INFO, "MQTT Close connection");
 800443e:	4910      	ldr	r1, [pc, #64]	@ (8004480 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xec>)
 8004440:	2001      	movs	r0, #1
 8004442:	f7fd fe7b 	bl	800213c <logging>
		mqtt_conn     = NULL;
 8004446:	4b0a      	ldr	r3, [pc, #40]	@ (8004470 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
		is_registered = false;
 800444c:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
}
 8004452:	bf00      	nop
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000298 	.word	0x20000298
 8004460:	0802fffc 	.word	0x0802fffc
 8004464:	0802fde8 	.word	0x0802fde8
 8004468:	08030010 	.word	0x08030010
 800446c:	08030028 	.word	0x08030028
 8004470:	20000b78 	.word	0x20000b78
 8004474:	20000b8c 	.word	0x20000b8c
 8004478:	20000034 	.word	0x20000034
 800447c:	08030040 	.word	0x08030040
 8004480:	08030064 	.word	0x08030064

08004484 <_ZL18mqtt_timer_handlerPv>:

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
 8004484:	b590      	push	{r4, r7, lr}
 8004486:	b087      	sub	sp, #28
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
	if (!mqtt_conn){
 800448c:	4b20      	ldr	r3, [pc, #128]	@ (8004510 <_ZL18mqtt_timer_handlerPv+0x8c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d136      	bne.n	8004502 <_ZL18mqtt_timer_handlerPv+0x7e>
		logging(L_INFO, "Try to connect to MQTT server");
 8004494:	491f      	ldr	r1, [pc, #124]	@ (8004514 <_ZL18mqtt_timer_handlerPv+0x90>)
 8004496:	2001      	movs	r0, #1
 8004498:	f7fd fe50 	bl	800213c <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 800449c:	2240      	movs	r2, #64	@ 0x40
 800449e:	2100      	movs	r1, #0
 80044a0:	481d      	ldr	r0, [pc, #116]	@ (8004518 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044a2:	f021 fad5 	bl	8025a50 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 80044a6:	4b1d      	ldr	r3, [pc, #116]	@ (800451c <_ZL18mqtt_timer_handlerPv+0x98>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4c1b      	ldr	r4, [pc, #108]	@ (8004518 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044ac:	463b      	mov	r3, r7
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f01d f9c7 	bl	8021844 <mg_str_s>
 80044b6:	4622      	mov	r2, r4
 80044b8:	463b      	mov	r3, r7
 80044ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80044be:	e882 0003 	stmia.w	r2, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 80044c2:	4b17      	ldr	r3, [pc, #92]	@ (8004520 <_ZL18mqtt_timer_handlerPv+0x9c>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4c14      	ldr	r4, [pc, #80]	@ (8004518 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044c8:	463b      	mov	r3, r7
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f01d f9b9 	bl	8021844 <mg_str_s>
 80044d2:	f104 0308 	add.w	r3, r4, #8
 80044d6:	463a      	mov	r2, r7
 80044d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044dc:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 80044e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044e2:	223c      	movs	r2, #60	@ 0x3c
 80044e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 80044e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004524 <_ZL18mqtt_timer_handlerPv+0xa0>)
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004528 <_ZL18mqtt_timer_handlerPv+0xa4>)
 80044ec:	6819      	ldr	r1, [r3, #0]
 80044ee:	2300      	movs	r3, #0
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	4b0e      	ldr	r3, [pc, #56]	@ (800452c <_ZL18mqtt_timer_handlerPv+0xa8>)
 80044f4:	4a08      	ldr	r2, [pc, #32]	@ (8004518 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044f6:	f018 fd9f 	bl	801d038 <mg_mqtt_connect>
 80044fa:	4603      	mov	r3, r0
 80044fc:	4a04      	ldr	r2, [pc, #16]	@ (8004510 <_ZL18mqtt_timer_handlerPv+0x8c>)
 80044fe:	6013      	str	r3, [r2, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 8004500:	e002      	b.n	8004508 <_ZL18mqtt_timer_handlerPv+0x84>
	}else if(mqtt_conn && is_registered){ //connection established and registered sensors
 8004502:	4b03      	ldr	r3, [pc, #12]	@ (8004510 <_ZL18mqtt_timer_handlerPv+0x8c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
}//void * param, sett_type_t param_type,  sett_direction_t direction
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	bd90      	pop	{r4, r7, pc}
 8004510:	20000b78 	.word	0x20000b78
 8004514:	0803007c 	.word	0x0803007c
 8004518:	20000b38 	.word	0x20000b38
 800451c:	20000b20 	.word	0x20000b20
 8004520:	20000b24 	.word	0x20000b24
 8004524:	20000b30 	.word	0x20000b30
 8004528:	20000b1c 	.word	0x20000b1c
 800452c:	08004395 	.word	0x08004395

08004530 <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	if(mqtt_conn && is_registered){
 8004538:	4b08      	ldr	r3, [pc, #32]	@ (800455c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d009      	beq.n	8004554 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
 8004540:	4b07      	ldr	r3, [pc, #28]	@ (8004560 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x30>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
		mqtt_send_io_status(mqtt_conn, 0);
 8004548:	4b04      	ldr	r3, [pc, #16]	@ (800455c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2100      	movs	r1, #0
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fc92 	bl	8003e78 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20000b78 	.word	0x20000b78
 8004560:	20000b8c 	.word	0x20000b8c

08004564 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
    return mqtt_conn;
 8004568:	4b03      	ldr	r3, [pc, #12]	@ (8004578 <get_mqtt_connection+0x14>)
 800456a:	681b      	ldr	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000b78 	.word	0x20000b78

0800457c <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b08b      	sub	sp, #44	@ 0x2c
 8004580:	af04      	add	r7, sp, #16
 8004582:	6178      	str	r0, [r7, #20]
 8004584:	6139      	str	r1, [r7, #16]
 8004586:	60fa      	str	r2, [r7, #12]
 8004588:	60bb      	str	r3, [r7, #8]

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 800458a:	2101      	movs	r1, #1
 800458c:	2080      	movs	r0, #128	@ 0x80
 800458e:	f7ff fbcb 	bl	8003d28 <_ZL9my_callocjj>
 8004592:	4603      	mov	r3, r0
 8004594:	4a54      	ldr	r2, [pc, #336]	@ (80046e8 <mqtt_init+0x16c>)
 8004596:	6013      	str	r3, [r2, #0]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 8004598:	2101      	movs	r1, #1
 800459a:	2021      	movs	r0, #33	@ 0x21
 800459c:	f7ff fbc4 	bl	8003d28 <_ZL9my_callocjj>
 80045a0:	4603      	mov	r3, r0
 80045a2:	4a52      	ldr	r2, [pc, #328]	@ (80046ec <mqtt_init+0x170>)
 80045a4:	6013      	str	r3, [r2, #0]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 80045a6:	2101      	movs	r1, #1
 80045a8:	2021      	movs	r0, #33	@ 0x21
 80045aa:	f7ff fbbd 	bl	8003d28 <_ZL9my_callocjj>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4a4f      	ldr	r2, [pc, #316]	@ (80046f0 <mqtt_init+0x174>)
 80045b2:	6013      	str	r3, [r2, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80045b4:	2101      	movs	r1, #1
 80045b6:	2080      	movs	r0, #128	@ 0x80
 80045b8:	f7ff fbb6 	bl	8003d28 <_ZL9my_callocjj>
 80045bc:	4603      	mov	r3, r0
 80045be:	4a4d      	ldr	r2, [pc, #308]	@ (80046f4 <mqtt_init+0x178>)
 80045c0:	6013      	str	r3, [r2, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 80045c2:	2101      	movs	r1, #1
 80045c4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80045c8:	f7ff fbae 	bl	8003d28 <_ZL9my_callocjj>
 80045cc:	4603      	mov	r3, r0
 80045ce:	4a4a      	ldr	r2, [pc, #296]	@ (80046f8 <mqtt_init+0x17c>)
 80045d0:	6013      	str	r3, [r2, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 80045d2:	2101      	movs	r1, #1
 80045d4:	2028      	movs	r0, #40	@ 0x28
 80045d6:	f7ff fba7 	bl	8003d28 <_ZL9my_callocjj>
 80045da:	4603      	mov	r3, r0
 80045dc:	4a47      	ldr	r2, [pc, #284]	@ (80046fc <mqtt_init+0x180>)
 80045de:	6013      	str	r3, [r2, #0]
	r_w_parameter   = fn;
 80045e0:	4a47      	ldr	r2, [pc, #284]	@ (8004700 <mqtt_init+0x184>)
 80045e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e4:	6013      	str	r3, [r2, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 80045e6:	4b40      	ldr	r3, [pc, #256]	@ (80046e8 <mqtt_init+0x16c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68f9      	ldr	r1, [r7, #12]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f022 fc39 	bl	8026e64 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 80045f2:	4b3e      	ldr	r3, [pc, #248]	@ (80046ec <mqtt_init+0x170>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f022 fc33 	bl	8026e64 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 80045fe:	4b3c      	ldr	r3, [pc, #240]	@ (80046f0 <mqtt_init+0x174>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004604:	4618      	mov	r0, r3
 8004606:	f022 fc2d 	bl	8026e64 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 800460a:	4b37      	ldr	r3, [pc, #220]	@ (80046e8 <mqtt_init+0x16c>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b37      	ldr	r3, [pc, #220]	@ (80046ec <mqtt_init+0x170>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	493c      	ldr	r1, [pc, #240]	@ (8004704 <mqtt_init+0x188>)
 8004614:	2001      	movs	r0, #1
 8004616:	f7fd fd91 	bl	800213c <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 800461a:	4a3b      	ldr	r2, [pc, #236]	@ (8004708 <mqtt_init+0x18c>)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	6013      	str	r3, [r2, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 8004620:	4a3a      	ldr	r2, [pc, #232]	@ (800470c <mqtt_init+0x190>)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	6013      	str	r3, [r2, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 8004626:	4b39      	ldr	r3, [pc, #228]	@ (800470c <mqtt_init+0x190>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2106      	movs	r1, #6
 800462c:	4618      	mov	r0, r3
 800462e:	f000 f89b 	bl	8004768 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 8004632:	4b2e      	ldr	r3, [pc, #184]	@ (80046ec <mqtt_init+0x170>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4c36      	ldr	r4, [pc, #216]	@ (8004710 <mqtt_init+0x194>)
 8004638:	463b      	mov	r3, r7
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f01d f901 	bl	8021844 <mg_str_s>
 8004642:	4622      	mov	r2, r4
 8004644:	463b      	mov	r3, r7
 8004646:	e893 0003 	ldmia.w	r3, {r0, r1}
 800464a:	e882 0003 	stmia.w	r2, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 800464e:	4b28      	ldr	r3, [pc, #160]	@ (80046f0 <mqtt_init+0x174>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4c2f      	ldr	r4, [pc, #188]	@ (8004710 <mqtt_init+0x194>)
 8004654:	463b      	mov	r3, r7
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f01d f8f3 	bl	8021844 <mg_str_s>
 800465e:	f104 0308 	add.w	r3, r4, #8
 8004662:	463a      	mov	r2, r7
 8004664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004668:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 800466c:	4b28      	ldr	r3, [pc, #160]	@ (8004710 <mqtt_init+0x194>)
 800466e:	223c      	movs	r2, #60	@ 0x3c
 8004670:	855a      	strh	r2, [r3, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 8004672:	4b25      	ldr	r3, [pc, #148]	@ (8004708 <mqtt_init+0x18c>)
 8004674:	6819      	ldr	r1, [r3, #0]
 8004676:	2300      	movs	r3, #0
 8004678:	9302      	str	r3, [sp, #8]
 800467a:	4b26      	ldr	r3, [pc, #152]	@ (8004714 <mqtt_init+0x198>)
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	2303      	movs	r3, #3
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	4608      	mov	r0, r1
 800468c:	f019 f970 	bl	801d970 <mg_timer_add>
 8004690:	4603      	mov	r3, r0
 8004692:	4a21      	ldr	r2, [pc, #132]	@ (8004718 <mqtt_init+0x19c>)
 8004694:	6013      	str	r3, [r2, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 8004696:	4b1c      	ldr	r3, [pc, #112]	@ (8004708 <mqtt_init+0x18c>)
 8004698:	6819      	ldr	r1, [r3, #0]
 800469a:	2300      	movs	r3, #0
 800469c:	9302      	str	r3, [sp, #8]
 800469e:	4b1f      	ldr	r3, [pc, #124]	@ (800471c <mqtt_init+0x1a0>)
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	2301      	movs	r3, #1
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	4608      	mov	r0, r1
 80046b0:	f019 f95e 	bl	801d970 <mg_timer_add>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004720 <mqtt_init+0x1a4>)
 80046b8:	6013      	str	r3, [r2, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 80046ba:	4b13      	ldr	r3, [pc, #76]	@ (8004708 <mqtt_init+0x18c>)
 80046bc:	6819      	ldr	r1, [r3, #0]
 80046be:	2300      	movs	r3, #0
 80046c0:	9302      	str	r3, [sp, #8]
 80046c2:	4b18      	ldr	r3, [pc, #96]	@ (8004724 <mqtt_init+0x1a8>)
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	2301      	movs	r3, #1
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	4608      	mov	r0, r1
 80046d4:	f019 f94c 	bl	801d970 <mg_timer_add>
 80046d8:	4603      	mov	r3, r0
 80046da:	4a13      	ldr	r2, [pc, #76]	@ (8004728 <mqtt_init+0x1ac>)
 80046dc:	6013      	str	r3, [r2, #0]

}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd90      	pop	{r4, r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000b1c 	.word	0x20000b1c
 80046ec:	20000b20 	.word	0x20000b20
 80046f0:	20000b24 	.word	0x20000b24
 80046f4:	20000b28 	.word	0x20000b28
 80046f8:	20000b2c 	.word	0x20000b2c
 80046fc:	20000b7c 	.word	0x20000b7c
 8004700:	20000b90 	.word	0x20000b90
 8004704:	0803009c 	.word	0x0803009c
 8004708:	20000b30 	.word	0x20000b30
 800470c:	20000b34 	.word	0x20000b34
 8004710:	20000b38 	.word	0x20000b38
 8004714:	08004485 	.word	0x08004485
 8004718:	20000b80 	.word	0x20000b80
 800471c:	08004369 	.word	0x08004369
 8004720:	20000b84 	.word	0x20000b84
 8004724:	08004531 	.word	0x08004531
 8004728:	20000b88 	.word	0x20000b88

0800472c <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	4618      	mov	r0, r3
 8004740:	f007 fd74 	bl	800c22c <pvPortMalloc>
 8004744:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <_ZL9my_callocjj+0x32>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	461a      	mov	r2, r3
 8004756:	2100      	movs	r1, #0
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f021 f979 	bl	8025a50 <memset>
  return p;
 800475e:	68fb      	ldr	r3, [r7, #12]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]

	if ( unical_id){
 8004772:	4b1b      	ldr	r3, [pc, #108]	@ (80047e0 <set_device_id+0x78>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d004      	beq.n	8004784 <set_device_id+0x1c>
		free(unical_id);
 800477a:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <set_device_id+0x78>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f007 fe22 	bl	800c3c8 <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	3301      	adds	r3, #1
 800478a:	2101      	movs	r1, #1
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff ffcd 	bl	800472c <_ZL9my_callocjj>
 8004792:	4603      	mov	r3, r0
 8004794:	4a12      	ldr	r2, [pc, #72]	@ (80047e0 <set_device_id+0x78>)
 8004796:	6013      	str	r3, [r2, #0]


	if (unical_id){
 8004798:	4b11      	ldr	r3, [pc, #68]	@ (80047e0 <set_device_id+0x78>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d017      	beq.n	80047d0 <set_device_id+0x68>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	e00f      	b.n	80047c6 <set_device_id+0x5e>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 80047a6:	4b0e      	ldr	r3, [pc, #56]	@ (80047e0 <set_device_id+0x78>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	18d0      	adds	r0, r2, r3
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	490a      	ldr	r1, [pc, #40]	@ (80047e4 <set_device_id+0x7c>)
 80047bc:	f020 fd86 	bl	80252cc <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3301      	adds	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d3eb      	bcc.n	80047a6 <set_device_id+0x3e>
 80047ce:	e002      	b.n	80047d6 <set_device_id+0x6e>
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 80047d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047d4:	e000      	b.n	80047d8 <set_device_id+0x70>
	}

	return NO_ERR; // Успешно
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000b9c 	.word	0x20000b9c
 80047e4:	080300c8 	.word	0x080300c8

080047e8 <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]

	if(dev_conf_ip){
 80047f2:	4b15      	ldr	r3, [pc, #84]	@ (8004848 <set_device_conf_ip+0x60>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d004      	beq.n	8004804 <set_device_conf_ip+0x1c>
		free(dev_conf_ip);
 80047fa:	4b13      	ldr	r3, [pc, #76]	@ (8004848 <set_device_conf_ip+0x60>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f007 fde2 	bl	800c3c8 <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	3301      	adds	r3, #1
 8004808:	2101      	movs	r1, #1
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff ff8e 	bl	800472c <_ZL9my_callocjj>
 8004810:	4603      	mov	r3, r0
 8004812:	4a0d      	ldr	r2, [pc, #52]	@ (8004848 <set_device_conf_ip+0x60>)
 8004814:	6013      	str	r3, [r2, #0]

	if(dev_conf_ip){
 8004816:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <set_device_conf_ip+0x60>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00e      	beq.n	800483c <set_device_conf_ip+0x54>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 800481e:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <set_device_conf_ip+0x60>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4618      	mov	r0, r3
 8004828:	f021 f959 	bl	8025ade <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 800482c:	4b06      	ldr	r3, [pc, #24]	@ (8004848 <set_device_conf_ip+0x60>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	4413      	add	r3, r2
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
 8004838:	2300      	movs	r3, #0
 800483a:	e001      	b.n	8004840 <set_device_conf_ip+0x58>
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 800483c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000ba0 	.word	0x20000ba0

0800484c <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	@ 0x28
 8004850:	af06      	add	r7, sp, #24
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	4611      	mov	r1, r2
 8004858:	461a      	mov	r2, r3
 800485a:	460b      	mov	r3, r1
 800485c:	71fb      	strb	r3, [r7, #7]
 800485e:	4613      	mov	r3, r2
 8004860:	71bb      	strb	r3, [r7, #6]

	strcpy(buff, "");
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	3b01      	subs	r3, #1
 800486c:	2b07      	cmp	r3, #7
 800486e:	f200 80a3 	bhi.w	80049b8 <get_config_topik_string+0x16c>
 8004872:	a201      	add	r2, pc, #4	@ (adr r2, 8004878 <get_config_topik_string+0x2c>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	08004899 	.word	0x08004899
 800487c:	080048bd 	.word	0x080048bd
 8004880:	080048e1 	.word	0x080048e1
 8004884:	08004929 	.word	0x08004929
 8004888:	08004905 	.word	0x08004905
 800488c:	08004971 	.word	0x08004971
 8004890:	08004995 	.word	0x08004995
 8004894:	0800494d 	.word	0x0800494d
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 8004898:	4b4b      	ldr	r3, [pc, #300]	@ (80049c8 <get_config_topik_string+0x17c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	79ba      	ldrb	r2, [r7, #6]
 800489e:	9204      	str	r2, [sp, #16]
 80048a0:	4a4a      	ldr	r2, [pc, #296]	@ (80049cc <get_config_topik_string+0x180>)
 80048a2:	9203      	str	r2, [sp, #12]
 80048a4:	9302      	str	r3, [sp, #8]
 80048a6:	4b4a      	ldr	r3, [pc, #296]	@ (80049d0 <get_config_topik_string+0x184>)
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	4b4a      	ldr	r3, [pc, #296]	@ (80049d4 <get_config_topik_string+0x188>)
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	4b4a      	ldr	r3, [pc, #296]	@ (80049d8 <get_config_topik_string+0x18c>)
 80048b0:	4a4a      	ldr	r2, [pc, #296]	@ (80049dc <get_config_topik_string+0x190>)
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f020 fba1 	bl	8024ffc <snprintf>
			break;
 80048ba:	e080      	b.n	80049be <get_config_topik_string+0x172>
		case OUTPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 80048bc:	4b42      	ldr	r3, [pc, #264]	@ (80049c8 <get_config_topik_string+0x17c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	79ba      	ldrb	r2, [r7, #6]
 80048c2:	9204      	str	r2, [sp, #16]
 80048c4:	4a46      	ldr	r2, [pc, #280]	@ (80049e0 <get_config_topik_string+0x194>)
 80048c6:	9203      	str	r2, [sp, #12]
 80048c8:	9302      	str	r3, [sp, #8]
 80048ca:	4b41      	ldr	r3, [pc, #260]	@ (80049d0 <get_config_topik_string+0x184>)
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	4b44      	ldr	r3, [pc, #272]	@ (80049e0 <get_config_topik_string+0x194>)
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	4b41      	ldr	r3, [pc, #260]	@ (80049d8 <get_config_topik_string+0x18c>)
 80048d4:	4a41      	ldr	r2, [pc, #260]	@ (80049dc <get_config_topik_string+0x190>)
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f020 fb8f 	bl	8024ffc <snprintf>
			break;
 80048de:	e06e      	b.n	80049be <get_config_topik_string+0x172>
		case ENERGY_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 80048e0:	4b39      	ldr	r3, [pc, #228]	@ (80049c8 <get_config_topik_string+0x17c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	79ba      	ldrb	r2, [r7, #6]
 80048e6:	9204      	str	r2, [sp, #16]
 80048e8:	4a3e      	ldr	r2, [pc, #248]	@ (80049e4 <get_config_topik_string+0x198>)
 80048ea:	9203      	str	r2, [sp, #12]
 80048ec:	9302      	str	r3, [sp, #8]
 80048ee:	4b38      	ldr	r3, [pc, #224]	@ (80049d0 <get_config_topik_string+0x184>)
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	4b3d      	ldr	r3, [pc, #244]	@ (80049e8 <get_config_topik_string+0x19c>)
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	4b38      	ldr	r3, [pc, #224]	@ (80049d8 <get_config_topik_string+0x18c>)
 80048f8:	4a38      	ldr	r2, [pc, #224]	@ (80049dc <get_config_topik_string+0x190>)
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f020 fb7d 	bl	8024ffc <snprintf>
			break;
 8004902:	e05c      	b.n	80049be <get_config_topik_string+0x172>
		case VOLTAGE_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 8004904:	4b30      	ldr	r3, [pc, #192]	@ (80049c8 <get_config_topik_string+0x17c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	79ba      	ldrb	r2, [r7, #6]
 800490a:	9204      	str	r2, [sp, #16]
 800490c:	4a37      	ldr	r2, [pc, #220]	@ (80049ec <get_config_topik_string+0x1a0>)
 800490e:	9203      	str	r2, [sp, #12]
 8004910:	9302      	str	r3, [sp, #8]
 8004912:	4b2f      	ldr	r3, [pc, #188]	@ (80049d0 <get_config_topik_string+0x184>)
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	4b34      	ldr	r3, [pc, #208]	@ (80049e8 <get_config_topik_string+0x19c>)
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	4b2f      	ldr	r3, [pc, #188]	@ (80049d8 <get_config_topik_string+0x18c>)
 800491c:	4a2f      	ldr	r2, [pc, #188]	@ (80049dc <get_config_topik_string+0x190>)
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f020 fb6b 	bl	8024ffc <snprintf>
			break;
 8004926:	e04a      	b.n	80049be <get_config_topik_string+0x172>
		case POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 8004928:	4b27      	ldr	r3, [pc, #156]	@ (80049c8 <get_config_topik_string+0x17c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	79ba      	ldrb	r2, [r7, #6]
 800492e:	9204      	str	r2, [sp, #16]
 8004930:	4a2f      	ldr	r2, [pc, #188]	@ (80049f0 <get_config_topik_string+0x1a4>)
 8004932:	9203      	str	r2, [sp, #12]
 8004934:	9302      	str	r3, [sp, #8]
 8004936:	4b26      	ldr	r3, [pc, #152]	@ (80049d0 <get_config_topik_string+0x184>)
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	4b2b      	ldr	r3, [pc, #172]	@ (80049e8 <get_config_topik_string+0x19c>)
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	4b26      	ldr	r3, [pc, #152]	@ (80049d8 <get_config_topik_string+0x18c>)
 8004940:	4a26      	ldr	r2, [pc, #152]	@ (80049dc <get_config_topik_string+0x190>)
 8004942:	68b9      	ldr	r1, [r7, #8]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f020 fb59 	bl	8024ffc <snprintf>
			break;
 800494a:	e038      	b.n	80049be <get_config_topik_string+0x172>
		case APPARENT_POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 800494c:	4b1e      	ldr	r3, [pc, #120]	@ (80049c8 <get_config_topik_string+0x17c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	79ba      	ldrb	r2, [r7, #6]
 8004952:	9204      	str	r2, [sp, #16]
 8004954:	4a27      	ldr	r2, [pc, #156]	@ (80049f4 <get_config_topik_string+0x1a8>)
 8004956:	9203      	str	r2, [sp, #12]
 8004958:	9302      	str	r3, [sp, #8]
 800495a:	4b1d      	ldr	r3, [pc, #116]	@ (80049d0 <get_config_topik_string+0x184>)
 800495c:	9301      	str	r3, [sp, #4]
 800495e:	4b22      	ldr	r3, [pc, #136]	@ (80049e8 <get_config_topik_string+0x19c>)
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	4b1d      	ldr	r3, [pc, #116]	@ (80049d8 <get_config_topik_string+0x18c>)
 8004964:	4a1d      	ldr	r2, [pc, #116]	@ (80049dc <get_config_topik_string+0x190>)
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f020 fb47 	bl	8024ffc <snprintf>
			break;
 800496e:	e026      	b.n	80049be <get_config_topik_string+0x172>
		case POWER_FACTOR_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 8004970:	4b15      	ldr	r3, [pc, #84]	@ (80049c8 <get_config_topik_string+0x17c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	79ba      	ldrb	r2, [r7, #6]
 8004976:	9204      	str	r2, [sp, #16]
 8004978:	4a1f      	ldr	r2, [pc, #124]	@ (80049f8 <get_config_topik_string+0x1ac>)
 800497a:	9203      	str	r2, [sp, #12]
 800497c:	9302      	str	r3, [sp, #8]
 800497e:	4b14      	ldr	r3, [pc, #80]	@ (80049d0 <get_config_topik_string+0x184>)
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	4b19      	ldr	r3, [pc, #100]	@ (80049e8 <get_config_topik_string+0x19c>)
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	4b14      	ldr	r3, [pc, #80]	@ (80049d8 <get_config_topik_string+0x18c>)
 8004988:	4a14      	ldr	r2, [pc, #80]	@ (80049dc <get_config_topik_string+0x190>)
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f020 fb35 	bl	8024ffc <snprintf>
			break;
 8004992:	e014      	b.n	80049be <get_config_topik_string+0x172>
		case CURRENT_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 8004994:	4b0c      	ldr	r3, [pc, #48]	@ (80049c8 <get_config_topik_string+0x17c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	79ba      	ldrb	r2, [r7, #6]
 800499a:	9204      	str	r2, [sp, #16]
 800499c:	4a17      	ldr	r2, [pc, #92]	@ (80049fc <get_config_topik_string+0x1b0>)
 800499e:	9203      	str	r2, [sp, #12]
 80049a0:	9302      	str	r3, [sp, #8]
 80049a2:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <get_config_topik_string+0x184>)
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <get_config_topik_string+0x19c>)
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <get_config_topik_string+0x18c>)
 80049ac:	4a0b      	ldr	r2, [pc, #44]	@ (80049dc <get_config_topik_string+0x190>)
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f020 fb23 	bl	8024ffc <snprintf>
			break;
 80049b6:	e002      	b.n	80049be <get_config_topik_string+0x172>
		default:
			return -1;
 80049b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049bc:	e000      	b.n	80049c0 <get_config_topik_string+0x174>
			break;
	}


	return 0;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20000b9c 	.word	0x20000b9c
 80049cc:	080300e8 	.word	0x080300e8
 80049d0:	080300f0 	.word	0x080300f0
 80049d4:	080300f8 	.word	0x080300f8
 80049d8:	20000064 	.word	0x20000064
 80049dc:	080300d0 	.word	0x080300d0
 80049e0:	08030108 	.word	0x08030108
 80049e4:	08030110 	.word	0x08030110
 80049e8:	08030118 	.word	0x08030118
 80049ec:	08030120 	.word	0x08030120
 80049f0:	08030128 	.word	0x08030128
 80049f4:	08030130 	.word	0x08030130
 80049f8:	08030140 	.word	0x08030140
 80049fc:	08030150 	.word	0x08030150

08004a00 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 8004a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a02:	b09f      	sub	sp, #124	@ 0x7c
 8004a04:	af16      	add	r7, sp, #88	@ 0x58
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	460b      	mov	r3, r1
 8004a10:	71fb      	strb	r3, [r7, #7]
 8004a12:	4613      	mov	r3, r2
 8004a14:	71bb      	strb	r3, [r7, #6]

	uint8_t len = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	77fb      	strb	r3, [r7, #31]
	char * name      = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61bb      	str	r3, [r7, #24]
	char * com_topik = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]
	memset(payload, 0, payload_len * sizeof(char));
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	2100      	movs	r1, #0
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f021 f812 	bl	8025a50 <memset>

	switch (payload_type) {
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	2b07      	cmp	r3, #7
 8004a32:	f200 820f 	bhi.w	8004e54 <get_config_payload_string+0x454>
 8004a36:	a201      	add	r2, pc, #4	@ (adr r2, 8004a3c <get_config_payload_string+0x3c>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a5d 	.word	0x08004a5d
 8004a40:	08004aed 	.word	0x08004aed
 8004a44:	08004bb7 	.word	0x08004bb7
 8004a48:	08004cdd 	.word	0x08004cdd
 8004a4c:	08004c15 	.word	0x08004c15
 8004a50:	08004d99 	.word	0x08004d99
 8004a54:	08004df7 	.word	0x08004df7
 8004a58:	08004d3b 	.word	0x08004d3b

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	2080      	movs	r0, #128	@ 0x80
 8004a60:	f7ff fe64 	bl	800472c <_ZL9my_callocjj>
 8004a64:	61b8      	str	r0, [r7, #24]
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8004a66:	79bb      	ldrb	r3, [r7, #6]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4b82      	ldr	r3, [pc, #520]	@ (8004c74 <get_config_payload_string+0x274>)
 8004a6c:	4a82      	ldr	r2, [pc, #520]	@ (8004c78 <get_config_payload_string+0x278>)
 8004a6e:	2180      	movs	r1, #128	@ 0x80
 8004a70:	69b8      	ldr	r0, [r7, #24]
 8004a72:	f020 fac3 	bl	8024ffc <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8004a76:	4b81      	ldr	r3, [pc, #516]	@ (8004c7c <get_config_payload_string+0x27c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	79ba      	ldrb	r2, [r7, #6]
 8004a7c:	79b9      	ldrb	r1, [r7, #6]
 8004a7e:	487f      	ldr	r0, [pc, #508]	@ (8004c7c <get_config_payload_string+0x27c>)
 8004a80:	6800      	ldr	r0, [r0, #0]
 8004a82:	79bc      	ldrb	r4, [r7, #6]
 8004a84:	4d7d      	ldr	r5, [pc, #500]	@ (8004c7c <get_config_payload_string+0x27c>)
 8004a86:	682d      	ldr	r5, [r5, #0]
 8004a88:	4e7d      	ldr	r6, [pc, #500]	@ (8004c80 <get_config_payload_string+0x280>)
 8004a8a:	6836      	ldr	r6, [r6, #0]
 8004a8c:	9614      	str	r6, [sp, #80]	@ 0x50
 8004a8e:	4e7d      	ldr	r6, [pc, #500]	@ (8004c84 <get_config_payload_string+0x284>)
 8004a90:	9613      	str	r6, [sp, #76]	@ 0x4c
 8004a92:	4e7c      	ldr	r6, [pc, #496]	@ (8004c84 <get_config_payload_string+0x284>)
 8004a94:	9612      	str	r6, [sp, #72]	@ 0x48
 8004a96:	4e7c      	ldr	r6, [pc, #496]	@ (8004c88 <get_config_payload_string+0x288>)
 8004a98:	9611      	str	r6, [sp, #68]	@ 0x44
 8004a9a:	4e7c      	ldr	r6, [pc, #496]	@ (8004c8c <get_config_payload_string+0x28c>)
 8004a9c:	9610      	str	r6, [sp, #64]	@ 0x40
 8004a9e:	4e7c      	ldr	r6, [pc, #496]	@ (8004c90 <get_config_payload_string+0x290>)
 8004aa0:	960f      	str	r6, [sp, #60]	@ 0x3c
 8004aa2:	950e      	str	r5, [sp, #56]	@ 0x38
 8004aa4:	4d7b      	ldr	r5, [pc, #492]	@ (8004c94 <get_config_payload_string+0x294>)
 8004aa6:	950d      	str	r5, [sp, #52]	@ 0x34
 8004aa8:	4d7b      	ldr	r5, [pc, #492]	@ (8004c98 <get_config_payload_string+0x298>)
 8004aaa:	950c      	str	r5, [sp, #48]	@ 0x30
 8004aac:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004aae:	4c7b      	ldr	r4, [pc, #492]	@ (8004c9c <get_config_payload_string+0x29c>)
 8004ab0:	940a      	str	r4, [sp, #40]	@ 0x28
 8004ab2:	9009      	str	r0, [sp, #36]	@ 0x24
 8004ab4:	4877      	ldr	r0, [pc, #476]	@ (8004c94 <get_config_payload_string+0x294>)
 8004ab6:	9008      	str	r0, [sp, #32]
 8004ab8:	69b8      	ldr	r0, [r7, #24]
 8004aba:	9007      	str	r0, [sp, #28]
 8004abc:	4878      	ldr	r0, [pc, #480]	@ (8004ca0 <get_config_payload_string+0x2a0>)
 8004abe:	9006      	str	r0, [sp, #24]
 8004ac0:	9105      	str	r1, [sp, #20]
 8004ac2:	4976      	ldr	r1, [pc, #472]	@ (8004c9c <get_config_payload_string+0x29c>)
 8004ac4:	9104      	str	r1, [sp, #16]
 8004ac6:	9203      	str	r2, [sp, #12]
 8004ac8:	4a74      	ldr	r2, [pc, #464]	@ (8004c9c <get_config_payload_string+0x29c>)
 8004aca:	9202      	str	r2, [sp, #8]
 8004acc:	9301      	str	r3, [sp, #4]
 8004ace:	4b71      	ldr	r3, [pc, #452]	@ (8004c94 <get_config_payload_string+0x294>)
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	4b74      	ldr	r3, [pc, #464]	@ (8004ca4 <get_config_payload_string+0x2a4>)
 8004ad4:	4a74      	ldr	r2, [pc, #464]	@ (8004ca8 <get_config_payload_string+0x2a8>)
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f020 fa8f 	bl	8024ffc <snprintf>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	77fb      	strb	r3, [r7, #31]
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8004ae2:	69b8      	ldr	r0, [r7, #24]
 8004ae4:	f007 fc70 	bl	800c3c8 <vPortFree>

			return len;
 8004ae8:	7ffb      	ldrb	r3, [r7, #31]
 8004aea:	e1b6      	b.n	8004e5a <get_config_payload_string+0x45a>
			break;

		case OUT_CONF_PAYLOAD:

			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8004aec:	2101      	movs	r1, #1
 8004aee:	2080      	movs	r0, #128	@ 0x80
 8004af0:	f7ff fe1c 	bl	800472c <_ZL9my_callocjj>
 8004af4:	61b8      	str	r0, [r7, #24]
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8004af6:	2101      	movs	r1, #1
 8004af8:	2080      	movs	r0, #128	@ 0x80
 8004afa:	f7ff fe17 	bl	800472c <_ZL9my_callocjj>
 8004afe:	6178      	str	r0, [r7, #20]

			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8004b00:	79bb      	ldrb	r3, [r7, #6]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	4b69      	ldr	r3, [pc, #420]	@ (8004cac <get_config_payload_string+0x2ac>)
 8004b06:	4a6a      	ldr	r2, [pc, #424]	@ (8004cb0 <get_config_payload_string+0x2b0>)
 8004b08:	2180      	movs	r1, #128	@ 0x80
 8004b0a:	69b8      	ldr	r0, [r7, #24]
 8004b0c:	f020 fa76 	bl	8024ffc <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 8004b10:	4b5a      	ldr	r3, [pc, #360]	@ (8004c7c <get_config_payload_string+0x27c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a60      	ldr	r2, [pc, #384]	@ (8004c98 <get_config_payload_string+0x298>)
 8004b16:	9202      	str	r2, [sp, #8]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	9201      	str	r2, [sp, #4]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8004c94 <get_config_payload_string+0x294>)
 8004b20:	4a64      	ldr	r2, [pc, #400]	@ (8004cb4 <get_config_payload_string+0x2b4>)
 8004b22:	2180      	movs	r1, #128	@ 0x80
 8004b24:	6978      	ldr	r0, [r7, #20]
 8004b26:	f020 fa69 	bl	8024ffc <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 8004b2a:	79bb      	ldrb	r3, [r7, #6]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4b62      	ldr	r3, [pc, #392]	@ (8004cb8 <get_config_payload_string+0x2b8>)
 8004b30:	4a51      	ldr	r2, [pc, #324]	@ (8004c78 <get_config_payload_string+0x278>)
 8004b32:	2180      	movs	r1, #128	@ 0x80
 8004b34:	69b8      	ldr	r0, [r7, #24]
 8004b36:	f020 fa61 	bl	8024ffc <snprintf>

			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8004b3a:	4b50      	ldr	r3, [pc, #320]	@ (8004c7c <get_config_payload_string+0x27c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	79ba      	ldrb	r2, [r7, #6]
 8004b40:	79b9      	ldrb	r1, [r7, #6]
 8004b42:	484e      	ldr	r0, [pc, #312]	@ (8004c7c <get_config_payload_string+0x27c>)
 8004b44:	6800      	ldr	r0, [r0, #0]
 8004b46:	79bc      	ldrb	r4, [r7, #6]
 8004b48:	4d4c      	ldr	r5, [pc, #304]	@ (8004c7c <get_config_payload_string+0x27c>)
 8004b4a:	682d      	ldr	r5, [r5, #0]
 8004b4c:	4e4c      	ldr	r6, [pc, #304]	@ (8004c80 <get_config_payload_string+0x280>)
 8004b4e:	6836      	ldr	r6, [r6, #0]
 8004b50:	9614      	str	r6, [sp, #80]	@ 0x50
 8004b52:	4e4c      	ldr	r6, [pc, #304]	@ (8004c84 <get_config_payload_string+0x284>)
 8004b54:	9613      	str	r6, [sp, #76]	@ 0x4c
 8004b56:	4e4b      	ldr	r6, [pc, #300]	@ (8004c84 <get_config_payload_string+0x284>)
 8004b58:	9612      	str	r6, [sp, #72]	@ 0x48
 8004b5a:	4e4b      	ldr	r6, [pc, #300]	@ (8004c88 <get_config_payload_string+0x288>)
 8004b5c:	9611      	str	r6, [sp, #68]	@ 0x44
 8004b5e:	4e4b      	ldr	r6, [pc, #300]	@ (8004c8c <get_config_payload_string+0x28c>)
 8004b60:	9610      	str	r6, [sp, #64]	@ 0x40
 8004b62:	4e4b      	ldr	r6, [pc, #300]	@ (8004c90 <get_config_payload_string+0x290>)
 8004b64:	960f      	str	r6, [sp, #60]	@ 0x3c
 8004b66:	950e      	str	r5, [sp, #56]	@ 0x38
 8004b68:	4d4a      	ldr	r5, [pc, #296]	@ (8004c94 <get_config_payload_string+0x294>)
 8004b6a:	950d      	str	r5, [sp, #52]	@ 0x34
 8004b6c:	4d4a      	ldr	r5, [pc, #296]	@ (8004c98 <get_config_payload_string+0x298>)
 8004b6e:	950c      	str	r5, [sp, #48]	@ 0x30
 8004b70:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004b72:	4c4e      	ldr	r4, [pc, #312]	@ (8004cac <get_config_payload_string+0x2ac>)
 8004b74:	940a      	str	r4, [sp, #40]	@ 0x28
 8004b76:	9009      	str	r0, [sp, #36]	@ 0x24
 8004b78:	4846      	ldr	r0, [pc, #280]	@ (8004c94 <get_config_payload_string+0x294>)
 8004b7a:	9008      	str	r0, [sp, #32]
 8004b7c:	69b8      	ldr	r0, [r7, #24]
 8004b7e:	9007      	str	r0, [sp, #28]
 8004b80:	6978      	ldr	r0, [r7, #20]
 8004b82:	9006      	str	r0, [sp, #24]
 8004b84:	9105      	str	r1, [sp, #20]
 8004b86:	4949      	ldr	r1, [pc, #292]	@ (8004cac <get_config_payload_string+0x2ac>)
 8004b88:	9104      	str	r1, [sp, #16]
 8004b8a:	9203      	str	r2, [sp, #12]
 8004b8c:	4a47      	ldr	r2, [pc, #284]	@ (8004cac <get_config_payload_string+0x2ac>)
 8004b8e:	9202      	str	r2, [sp, #8]
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	4b40      	ldr	r3, [pc, #256]	@ (8004c94 <get_config_payload_string+0x294>)
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	4b45      	ldr	r3, [pc, #276]	@ (8004cac <get_config_payload_string+0x2ac>)
 8004b98:	4a43      	ldr	r2, [pc, #268]	@ (8004ca8 <get_config_payload_string+0x2a8>)
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f020 fa2d 	bl	8024ffc <snprintf>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	77fb      	strb	r3, [r7, #31]
							unical_id, component_switch, obj_number, component_switch, obj_number, com_topik, \
							name, dev_system, unical_id, \
							component_switch, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
							dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			//len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
			free(name);
 8004ba6:	69b8      	ldr	r0, [r7, #24]
 8004ba8:	f007 fc0e 	bl	800c3c8 <vPortFree>
			free(com_topik);
 8004bac:	6978      	ldr	r0, [r7, #20]
 8004bae:	f007 fc0b 	bl	800c3c8 <vPortFree>

			return len;
 8004bb2:	7ffb      	ldrb	r3, [r7, #31]
 8004bb4:	e151      	b.n	8004e5a <get_config_payload_string+0x45a>
			break;

		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8004bb6:	4b31      	ldr	r3, [pc, #196]	@ (8004c7c <get_config_payload_string+0x27c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a30      	ldr	r2, [pc, #192]	@ (8004c7c <get_config_payload_string+0x27c>)
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	492f      	ldr	r1, [pc, #188]	@ (8004c7c <get_config_payload_string+0x27c>)
 8004bc0:	6809      	ldr	r1, [r1, #0]
 8004bc2:	482f      	ldr	r0, [pc, #188]	@ (8004c80 <get_config_payload_string+0x280>)
 8004bc4:	6800      	ldr	r0, [r0, #0]
 8004bc6:	9010      	str	r0, [sp, #64]	@ 0x40
 8004bc8:	482e      	ldr	r0, [pc, #184]	@ (8004c84 <get_config_payload_string+0x284>)
 8004bca:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004bcc:	482d      	ldr	r0, [pc, #180]	@ (8004c84 <get_config_payload_string+0x284>)
 8004bce:	900e      	str	r0, [sp, #56]	@ 0x38
 8004bd0:	482d      	ldr	r0, [pc, #180]	@ (8004c88 <get_config_payload_string+0x288>)
 8004bd2:	900d      	str	r0, [sp, #52]	@ 0x34
 8004bd4:	482d      	ldr	r0, [pc, #180]	@ (8004c8c <get_config_payload_string+0x28c>)
 8004bd6:	900c      	str	r0, [sp, #48]	@ 0x30
 8004bd8:	482d      	ldr	r0, [pc, #180]	@ (8004c90 <get_config_payload_string+0x290>)
 8004bda:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004bdc:	910a      	str	r1, [sp, #40]	@ 0x28
 8004bde:	492d      	ldr	r1, [pc, #180]	@ (8004c94 <get_config_payload_string+0x294>)
 8004be0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004be2:	4936      	ldr	r1, [pc, #216]	@ (8004cbc <get_config_payload_string+0x2bc>)
 8004be4:	9108      	str	r1, [sp, #32]
 8004be6:	4936      	ldr	r1, [pc, #216]	@ (8004cc0 <get_config_payload_string+0x2c0>)
 8004be8:	9107      	str	r1, [sp, #28]
 8004bea:	9206      	str	r2, [sp, #24]
 8004bec:	4a29      	ldr	r2, [pc, #164]	@ (8004c94 <get_config_payload_string+0x294>)
 8004bee:	9205      	str	r2, [sp, #20]
 8004bf0:	4a34      	ldr	r2, [pc, #208]	@ (8004cc4 <get_config_payload_string+0x2c4>)
 8004bf2:	9204      	str	r2, [sp, #16]
 8004bf4:	4a34      	ldr	r2, [pc, #208]	@ (8004cc8 <get_config_payload_string+0x2c8>)
 8004bf6:	9203      	str	r2, [sp, #12]
 8004bf8:	4a31      	ldr	r2, [pc, #196]	@ (8004cc0 <get_config_payload_string+0x2c0>)
 8004bfa:	9202      	str	r2, [sp, #8]
 8004bfc:	4a33      	ldr	r2, [pc, #204]	@ (8004ccc <get_config_payload_string+0x2cc>)
 8004bfe:	9201      	str	r2, [sp, #4]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	4b24      	ldr	r3, [pc, #144]	@ (8004c94 <get_config_payload_string+0x294>)
 8004c04:	4a2e      	ldr	r2, [pc, #184]	@ (8004cc0 <get_config_payload_string+0x2c0>)
 8004c06:	4928      	ldr	r1, [pc, #160]	@ (8004ca8 <get_config_payload_string+0x2a8>)
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f020 fb5f 	bl	80252cc <sprintf>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004c12:	e122      	b.n	8004e5a <get_config_payload_string+0x45a>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8004c14:	4b19      	ldr	r3, [pc, #100]	@ (8004c7c <get_config_payload_string+0x27c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a18      	ldr	r2, [pc, #96]	@ (8004c7c <get_config_payload_string+0x27c>)
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	4917      	ldr	r1, [pc, #92]	@ (8004c7c <get_config_payload_string+0x27c>)
 8004c1e:	6809      	ldr	r1, [r1, #0]
 8004c20:	4817      	ldr	r0, [pc, #92]	@ (8004c80 <get_config_payload_string+0x280>)
 8004c22:	6800      	ldr	r0, [r0, #0]
 8004c24:	9010      	str	r0, [sp, #64]	@ 0x40
 8004c26:	4817      	ldr	r0, [pc, #92]	@ (8004c84 <get_config_payload_string+0x284>)
 8004c28:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004c2a:	4816      	ldr	r0, [pc, #88]	@ (8004c84 <get_config_payload_string+0x284>)
 8004c2c:	900e      	str	r0, [sp, #56]	@ 0x38
 8004c2e:	4816      	ldr	r0, [pc, #88]	@ (8004c88 <get_config_payload_string+0x288>)
 8004c30:	900d      	str	r0, [sp, #52]	@ 0x34
 8004c32:	4816      	ldr	r0, [pc, #88]	@ (8004c8c <get_config_payload_string+0x28c>)
 8004c34:	900c      	str	r0, [sp, #48]	@ 0x30
 8004c36:	4816      	ldr	r0, [pc, #88]	@ (8004c90 <get_config_payload_string+0x290>)
 8004c38:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004c3a:	910a      	str	r1, [sp, #40]	@ 0x28
 8004c3c:	4915      	ldr	r1, [pc, #84]	@ (8004c94 <get_config_payload_string+0x294>)
 8004c3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c40:	4923      	ldr	r1, [pc, #140]	@ (8004cd0 <get_config_payload_string+0x2d0>)
 8004c42:	9108      	str	r1, [sp, #32]
 8004c44:	4923      	ldr	r1, [pc, #140]	@ (8004cd4 <get_config_payload_string+0x2d4>)
 8004c46:	9107      	str	r1, [sp, #28]
 8004c48:	9206      	str	r2, [sp, #24]
 8004c4a:	4a12      	ldr	r2, [pc, #72]	@ (8004c94 <get_config_payload_string+0x294>)
 8004c4c:	9205      	str	r2, [sp, #20]
 8004c4e:	4a22      	ldr	r2, [pc, #136]	@ (8004cd8 <get_config_payload_string+0x2d8>)
 8004c50:	9204      	str	r2, [sp, #16]
 8004c52:	4a13      	ldr	r2, [pc, #76]	@ (8004ca0 <get_config_payload_string+0x2a0>)
 8004c54:	9203      	str	r2, [sp, #12]
 8004c56:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd4 <get_config_payload_string+0x2d4>)
 8004c58:	9202      	str	r2, [sp, #8]
 8004c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ccc <get_config_payload_string+0x2cc>)
 8004c5c:	9201      	str	r2, [sp, #4]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	4b0c      	ldr	r3, [pc, #48]	@ (8004c94 <get_config_payload_string+0x294>)
 8004c62:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd4 <get_config_payload_string+0x2d4>)
 8004c64:	4910      	ldr	r1, [pc, #64]	@ (8004ca8 <get_config_payload_string+0x2a8>)
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f020 fb30 	bl	80252cc <sprintf>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004c70:	e0f3      	b.n	8004e5a <get_config_payload_string+0x45a>
 8004c72:	bf00      	nop
 8004c74:	08030158 	.word	0x08030158
 8004c78:	08030164 	.word	0x08030164
 8004c7c:	20000b9c 	.word	0x20000b9c
 8004c80:	20000ba0 	.word	0x20000ba0
 8004c84:	0803016c 	.word	0x0803016c
 8004c88:	08030170 	.word	0x08030170
 8004c8c:	08030180 	.word	0x08030180
 8004c90:	08030194 	.word	0x08030194
 8004c94:	080300f0 	.word	0x080300f0
 8004c98:	080301a0 	.word	0x080301a0
 8004c9c:	080300e8 	.word	0x080300e8
 8004ca0:	080301a4 	.word	0x080301a4
 8004ca4:	08030128 	.word	0x08030128
 8004ca8:	080332a4 	.word	0x080332a4
 8004cac:	08030108 	.word	0x08030108
 8004cb0:	080301a8 	.word	0x080301a8
 8004cb4:	08033424 	.word	0x08033424
 8004cb8:	080301b0 	.word	0x080301b0
 8004cbc:	080301c4 	.word	0x080301c4
 8004cc0:	08030110 	.word	0x08030110
 8004cc4:	080301c8 	.word	0x080301c8
 8004cc8:	080301d8 	.word	0x080301d8
 8004ccc:	080301fc 	.word	0x080301fc
 8004cd0:	08030204 	.word	0x08030204
 8004cd4:	08030120 	.word	0x08030120
 8004cd8:	08030208 	.word	0x08030208
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8004cdc:	4b61      	ldr	r3, [pc, #388]	@ (8004e64 <get_config_payload_string+0x464>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a60      	ldr	r2, [pc, #384]	@ (8004e64 <get_config_payload_string+0x464>)
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	495f      	ldr	r1, [pc, #380]	@ (8004e64 <get_config_payload_string+0x464>)
 8004ce6:	6809      	ldr	r1, [r1, #0]
 8004ce8:	485f      	ldr	r0, [pc, #380]	@ (8004e68 <get_config_payload_string+0x468>)
 8004cea:	6800      	ldr	r0, [r0, #0]
 8004cec:	9010      	str	r0, [sp, #64]	@ 0x40
 8004cee:	485f      	ldr	r0, [pc, #380]	@ (8004e6c <get_config_payload_string+0x46c>)
 8004cf0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004cf2:	485e      	ldr	r0, [pc, #376]	@ (8004e6c <get_config_payload_string+0x46c>)
 8004cf4:	900e      	str	r0, [sp, #56]	@ 0x38
 8004cf6:	485e      	ldr	r0, [pc, #376]	@ (8004e70 <get_config_payload_string+0x470>)
 8004cf8:	900d      	str	r0, [sp, #52]	@ 0x34
 8004cfa:	485e      	ldr	r0, [pc, #376]	@ (8004e74 <get_config_payload_string+0x474>)
 8004cfc:	900c      	str	r0, [sp, #48]	@ 0x30
 8004cfe:	485e      	ldr	r0, [pc, #376]	@ (8004e78 <get_config_payload_string+0x478>)
 8004d00:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004d02:	910a      	str	r1, [sp, #40]	@ 0x28
 8004d04:	495d      	ldr	r1, [pc, #372]	@ (8004e7c <get_config_payload_string+0x47c>)
 8004d06:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d08:	495d      	ldr	r1, [pc, #372]	@ (8004e80 <get_config_payload_string+0x480>)
 8004d0a:	9108      	str	r1, [sp, #32]
 8004d0c:	495d      	ldr	r1, [pc, #372]	@ (8004e84 <get_config_payload_string+0x484>)
 8004d0e:	9107      	str	r1, [sp, #28]
 8004d10:	9206      	str	r2, [sp, #24]
 8004d12:	4a5a      	ldr	r2, [pc, #360]	@ (8004e7c <get_config_payload_string+0x47c>)
 8004d14:	9205      	str	r2, [sp, #20]
 8004d16:	4a5c      	ldr	r2, [pc, #368]	@ (8004e88 <get_config_payload_string+0x488>)
 8004d18:	9204      	str	r2, [sp, #16]
 8004d1a:	4a5c      	ldr	r2, [pc, #368]	@ (8004e8c <get_config_payload_string+0x48c>)
 8004d1c:	9203      	str	r2, [sp, #12]
 8004d1e:	4a59      	ldr	r2, [pc, #356]	@ (8004e84 <get_config_payload_string+0x484>)
 8004d20:	9202      	str	r2, [sp, #8]
 8004d22:	4a5b      	ldr	r2, [pc, #364]	@ (8004e90 <get_config_payload_string+0x490>)
 8004d24:	9201      	str	r2, [sp, #4]
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	4b54      	ldr	r3, [pc, #336]	@ (8004e7c <get_config_payload_string+0x47c>)
 8004d2a:	4a56      	ldr	r2, [pc, #344]	@ (8004e84 <get_config_payload_string+0x484>)
 8004d2c:	4959      	ldr	r1, [pc, #356]	@ (8004e94 <get_config_payload_string+0x494>)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f020 facc 	bl	80252cc <sprintf>
 8004d34:	4603      	mov	r3, r0
 8004d36:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004d38:	e08f      	b.n	8004e5a <get_config_payload_string+0x45a>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8004d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e64 <get_config_payload_string+0x464>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a49      	ldr	r2, [pc, #292]	@ (8004e64 <get_config_payload_string+0x464>)
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	4948      	ldr	r1, [pc, #288]	@ (8004e64 <get_config_payload_string+0x464>)
 8004d44:	6809      	ldr	r1, [r1, #0]
 8004d46:	4848      	ldr	r0, [pc, #288]	@ (8004e68 <get_config_payload_string+0x468>)
 8004d48:	6800      	ldr	r0, [r0, #0]
 8004d4a:	9010      	str	r0, [sp, #64]	@ 0x40
 8004d4c:	4847      	ldr	r0, [pc, #284]	@ (8004e6c <get_config_payload_string+0x46c>)
 8004d4e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004d50:	4846      	ldr	r0, [pc, #280]	@ (8004e6c <get_config_payload_string+0x46c>)
 8004d52:	900e      	str	r0, [sp, #56]	@ 0x38
 8004d54:	4846      	ldr	r0, [pc, #280]	@ (8004e70 <get_config_payload_string+0x470>)
 8004d56:	900d      	str	r0, [sp, #52]	@ 0x34
 8004d58:	4846      	ldr	r0, [pc, #280]	@ (8004e74 <get_config_payload_string+0x474>)
 8004d5a:	900c      	str	r0, [sp, #48]	@ 0x30
 8004d5c:	4846      	ldr	r0, [pc, #280]	@ (8004e78 <get_config_payload_string+0x478>)
 8004d5e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004d60:	910a      	str	r1, [sp, #40]	@ 0x28
 8004d62:	4946      	ldr	r1, [pc, #280]	@ (8004e7c <get_config_payload_string+0x47c>)
 8004d64:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d66:	494c      	ldr	r1, [pc, #304]	@ (8004e98 <get_config_payload_string+0x498>)
 8004d68:	9108      	str	r1, [sp, #32]
 8004d6a:	494c      	ldr	r1, [pc, #304]	@ (8004e9c <get_config_payload_string+0x49c>)
 8004d6c:	9107      	str	r1, [sp, #28]
 8004d6e:	9206      	str	r2, [sp, #24]
 8004d70:	4a42      	ldr	r2, [pc, #264]	@ (8004e7c <get_config_payload_string+0x47c>)
 8004d72:	9205      	str	r2, [sp, #20]
 8004d74:	4a4a      	ldr	r2, [pc, #296]	@ (8004ea0 <get_config_payload_string+0x4a0>)
 8004d76:	9204      	str	r2, [sp, #16]
 8004d78:	4a44      	ldr	r2, [pc, #272]	@ (8004e8c <get_config_payload_string+0x48c>)
 8004d7a:	9203      	str	r2, [sp, #12]
 8004d7c:	4a47      	ldr	r2, [pc, #284]	@ (8004e9c <get_config_payload_string+0x49c>)
 8004d7e:	9202      	str	r2, [sp, #8]
 8004d80:	4a43      	ldr	r2, [pc, #268]	@ (8004e90 <get_config_payload_string+0x490>)
 8004d82:	9201      	str	r2, [sp, #4]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4b3d      	ldr	r3, [pc, #244]	@ (8004e7c <get_config_payload_string+0x47c>)
 8004d88:	4a44      	ldr	r2, [pc, #272]	@ (8004e9c <get_config_payload_string+0x49c>)
 8004d8a:	4942      	ldr	r1, [pc, #264]	@ (8004e94 <get_config_payload_string+0x494>)
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f020 fa9d 	bl	80252cc <sprintf>
 8004d92:	4603      	mov	r3, r0
 8004d94:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004d96:	e060      	b.n	8004e5a <get_config_payload_string+0x45a>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8004d98:	4b32      	ldr	r3, [pc, #200]	@ (8004e64 <get_config_payload_string+0x464>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a31      	ldr	r2, [pc, #196]	@ (8004e64 <get_config_payload_string+0x464>)
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	4930      	ldr	r1, [pc, #192]	@ (8004e64 <get_config_payload_string+0x464>)
 8004da2:	6809      	ldr	r1, [r1, #0]
 8004da4:	4830      	ldr	r0, [pc, #192]	@ (8004e68 <get_config_payload_string+0x468>)
 8004da6:	6800      	ldr	r0, [r0, #0]
 8004da8:	9010      	str	r0, [sp, #64]	@ 0x40
 8004daa:	4830      	ldr	r0, [pc, #192]	@ (8004e6c <get_config_payload_string+0x46c>)
 8004dac:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004dae:	482f      	ldr	r0, [pc, #188]	@ (8004e6c <get_config_payload_string+0x46c>)
 8004db0:	900e      	str	r0, [sp, #56]	@ 0x38
 8004db2:	482f      	ldr	r0, [pc, #188]	@ (8004e70 <get_config_payload_string+0x470>)
 8004db4:	900d      	str	r0, [sp, #52]	@ 0x34
 8004db6:	482f      	ldr	r0, [pc, #188]	@ (8004e74 <get_config_payload_string+0x474>)
 8004db8:	900c      	str	r0, [sp, #48]	@ 0x30
 8004dba:	482f      	ldr	r0, [pc, #188]	@ (8004e78 <get_config_payload_string+0x478>)
 8004dbc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004dbe:	910a      	str	r1, [sp, #40]	@ 0x28
 8004dc0:	492e      	ldr	r1, [pc, #184]	@ (8004e7c <get_config_payload_string+0x47c>)
 8004dc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8004dc4:	4937      	ldr	r1, [pc, #220]	@ (8004ea4 <get_config_payload_string+0x4a4>)
 8004dc6:	9108      	str	r1, [sp, #32]
 8004dc8:	4937      	ldr	r1, [pc, #220]	@ (8004ea8 <get_config_payload_string+0x4a8>)
 8004dca:	9107      	str	r1, [sp, #28]
 8004dcc:	9206      	str	r2, [sp, #24]
 8004dce:	4a2b      	ldr	r2, [pc, #172]	@ (8004e7c <get_config_payload_string+0x47c>)
 8004dd0:	9205      	str	r2, [sp, #20]
 8004dd2:	4a36      	ldr	r2, [pc, #216]	@ (8004eac <get_config_payload_string+0x4ac>)
 8004dd4:	9204      	str	r2, [sp, #16]
 8004dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8004e8c <get_config_payload_string+0x48c>)
 8004dd8:	9203      	str	r2, [sp, #12]
 8004dda:	4a33      	ldr	r2, [pc, #204]	@ (8004ea8 <get_config_payload_string+0x4a8>)
 8004ddc:	9202      	str	r2, [sp, #8]
 8004dde:	4a2c      	ldr	r2, [pc, #176]	@ (8004e90 <get_config_payload_string+0x490>)
 8004de0:	9201      	str	r2, [sp, #4]
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	4b25      	ldr	r3, [pc, #148]	@ (8004e7c <get_config_payload_string+0x47c>)
 8004de6:	4a30      	ldr	r2, [pc, #192]	@ (8004ea8 <get_config_payload_string+0x4a8>)
 8004de8:	492a      	ldr	r1, [pc, #168]	@ (8004e94 <get_config_payload_string+0x494>)
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f020 fa6e 	bl	80252cc <sprintf>
 8004df0:	4603      	mov	r3, r0
 8004df2:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004df4:	e031      	b.n	8004e5a <get_config_payload_string+0x45a>
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8004df6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e64 <get_config_payload_string+0x464>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8004e64 <get_config_payload_string+0x464>)
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	4919      	ldr	r1, [pc, #100]	@ (8004e64 <get_config_payload_string+0x464>)
 8004e00:	6809      	ldr	r1, [r1, #0]
 8004e02:	4819      	ldr	r0, [pc, #100]	@ (8004e68 <get_config_payload_string+0x468>)
 8004e04:	6800      	ldr	r0, [r0, #0]
 8004e06:	9010      	str	r0, [sp, #64]	@ 0x40
 8004e08:	4818      	ldr	r0, [pc, #96]	@ (8004e6c <get_config_payload_string+0x46c>)
 8004e0a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004e0c:	4817      	ldr	r0, [pc, #92]	@ (8004e6c <get_config_payload_string+0x46c>)
 8004e0e:	900e      	str	r0, [sp, #56]	@ 0x38
 8004e10:	4817      	ldr	r0, [pc, #92]	@ (8004e70 <get_config_payload_string+0x470>)
 8004e12:	900d      	str	r0, [sp, #52]	@ 0x34
 8004e14:	4817      	ldr	r0, [pc, #92]	@ (8004e74 <get_config_payload_string+0x474>)
 8004e16:	900c      	str	r0, [sp, #48]	@ 0x30
 8004e18:	4817      	ldr	r0, [pc, #92]	@ (8004e78 <get_config_payload_string+0x478>)
 8004e1a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004e1c:	910a      	str	r1, [sp, #40]	@ 0x28
 8004e1e:	4917      	ldr	r1, [pc, #92]	@ (8004e7c <get_config_payload_string+0x47c>)
 8004e20:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e22:	4923      	ldr	r1, [pc, #140]	@ (8004eb0 <get_config_payload_string+0x4b0>)
 8004e24:	9108      	str	r1, [sp, #32]
 8004e26:	4923      	ldr	r1, [pc, #140]	@ (8004eb4 <get_config_payload_string+0x4b4>)
 8004e28:	9107      	str	r1, [sp, #28]
 8004e2a:	9206      	str	r2, [sp, #24]
 8004e2c:	4a13      	ldr	r2, [pc, #76]	@ (8004e7c <get_config_payload_string+0x47c>)
 8004e2e:	9205      	str	r2, [sp, #20]
 8004e30:	4a21      	ldr	r2, [pc, #132]	@ (8004eb8 <get_config_payload_string+0x4b8>)
 8004e32:	9204      	str	r2, [sp, #16]
 8004e34:	4a15      	ldr	r2, [pc, #84]	@ (8004e8c <get_config_payload_string+0x48c>)
 8004e36:	9203      	str	r2, [sp, #12]
 8004e38:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb4 <get_config_payload_string+0x4b4>)
 8004e3a:	9202      	str	r2, [sp, #8]
 8004e3c:	4a14      	ldr	r2, [pc, #80]	@ (8004e90 <get_config_payload_string+0x490>)
 8004e3e:	9201      	str	r2, [sp, #4]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	4b0e      	ldr	r3, [pc, #56]	@ (8004e7c <get_config_payload_string+0x47c>)
 8004e44:	4a1b      	ldr	r2, [pc, #108]	@ (8004eb4 <get_config_payload_string+0x4b4>)
 8004e46:	4913      	ldr	r1, [pc, #76]	@ (8004e94 <get_config_payload_string+0x494>)
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f020 fa3f 	bl	80252cc <sprintf>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004e52:	e002      	b.n	8004e5a <get_config_payload_string+0x45a>

		default:
			return -1;
 8004e54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e58:	e7ff      	b.n	8004e5a <get_config_payload_string+0x45a>
			break;
	}
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3724      	adds	r7, #36	@ 0x24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000b9c 	.word	0x20000b9c
 8004e68:	20000ba0 	.word	0x20000ba0
 8004e6c:	0803016c 	.word	0x0803016c
 8004e70:	08030170 	.word	0x08030170
 8004e74:	08030180 	.word	0x08030180
 8004e78:	08030194 	.word	0x08030194
 8004e7c:	080300f0 	.word	0x080300f0
 8004e80:	08030218 	.word	0x08030218
 8004e84:	08030128 	.word	0x08030128
 8004e88:	0803021c 	.word	0x0803021c
 8004e8c:	080301a4 	.word	0x080301a4
 8004e90:	080301fc 	.word	0x080301fc
 8004e94:	080332a4 	.word	0x080332a4
 8004e98:	08030240 	.word	0x08030240
 8004e9c:	08030130 	.word	0x08030130
 8004ea0:	08030244 	.word	0x08030244
 8004ea4:	08030264 	.word	0x08030264
 8004ea8:	08030140 	.word	0x08030140
 8004eac:	08030268 	.word	0x08030268
 8004eb0:	08030294 	.word	0x08030294
 8004eb4:	08030150 	.word	0x08030150
 8004eb8:	08030298 	.word	0x08030298

08004ebc <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	461a      	mov	r2, r3
 8004eca:	460b      	mov	r3, r1
 8004ecc:	71fb      	strb	r3, [r7, #7]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	71bb      	strb	r3, [r7, #6]

	char * sens_name = NULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
	switch (sensor_type) {
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d002      	beq.n	8004ee2 <gen_bin_sensor_status_payload_JSON+0x26>
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d003      	beq.n	8004ee8 <gen_bin_sensor_status_payload_JSON+0x2c>
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
			break;
		default:
			break;
 8004ee0:	e005      	b.n	8004eee <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)component_input;
 8004ee2:	4b13      	ldr	r3, [pc, #76]	@ (8004f30 <gen_bin_sensor_status_payload_JSON+0x74>)
 8004ee4:	617b      	str	r3, [r7, #20]
			break;
 8004ee6:	e002      	b.n	8004eee <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)dev_class_switch;
 8004ee8:	4b12      	ldr	r3, [pc, #72]	@ (8004f34 <gen_bin_sensor_status_payload_JSON+0x78>)
 8004eea:	617b      	str	r3, [r7, #20]
			break;
 8004eec:	bf00      	nop
	}

	if (state){
 8004eee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00b      	beq.n	8004f0e <gen_bin_sensor_status_payload_JSON+0x52>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 8004ef6:	79bb      	ldrb	r3, [r7, #6]
 8004ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8004f38 <gen_bin_sensor_status_payload_JSON+0x7c>)
 8004efa:	9201      	str	r2, [sp, #4]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	4a0e      	ldr	r2, [pc, #56]	@ (8004f3c <gen_bin_sensor_status_payload_JSON+0x80>)
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f020 f879 	bl	8024ffc <snprintf>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	e00b      	b.n	8004f26 <gen_bin_sensor_status_payload_JSON+0x6a>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8004f0e:	79bb      	ldrb	r3, [r7, #6]
 8004f10:	4a0b      	ldr	r2, [pc, #44]	@ (8004f40 <gen_bin_sensor_status_payload_JSON+0x84>)
 8004f12:	9201      	str	r2, [sp, #4]
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	4a08      	ldr	r2, [pc, #32]	@ (8004f3c <gen_bin_sensor_status_payload_JSON+0x80>)
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f020 f86d 	bl	8024ffc <snprintf>
 8004f22:	4603      	mov	r3, r0
 8004f24:	bf00      	nop
	}
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	080300e8 	.word	0x080300e8
 8004f34:	08030108 	.word	0x08030108
 8004f38:	080302a4 	.word	0x080302a4
 8004f3c:	0803344c 	.word	0x0803344c
 8004f40:	080302a8 	.word	0x080302a8

08004f44 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af04      	add	r7, sp, #16
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	4611      	mov	r1, r2
 8004f50:	461a      	mov	r2, r3
 8004f52:	460b      	mov	r3, r1
 8004f54:	71fb      	strb	r3, [r7, #7]
 8004f56:	4613      	mov	r3, r2
 8004f58:	71bb      	strb	r3, [r7, #6]

	switch(sensor_type){
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d10e      	bne.n	8004f7e <generate_comand_topik_for_subscrabe+0x3a>

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8004f60:	4b09      	ldr	r3, [pc, #36]	@ (8004f88 <generate_comand_topik_for_subscrabe+0x44>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	79ba      	ldrb	r2, [r7, #6]
 8004f66:	9202      	str	r2, [sp, #8]
 8004f68:	4a08      	ldr	r2, [pc, #32]	@ (8004f8c <generate_comand_topik_for_subscrabe+0x48>)
 8004f6a:	9201      	str	r2, [sp, #4]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	4b08      	ldr	r3, [pc, #32]	@ (8004f90 <generate_comand_topik_for_subscrabe+0x4c>)
 8004f70:	4a08      	ldr	r2, [pc, #32]	@ (8004f94 <generate_comand_topik_for_subscrabe+0x50>)
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f020 f841 	bl	8024ffc <snprintf>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	e7ff      	b.n	8004f7e <generate_comand_topik_for_subscrabe+0x3a>
			break;
	}
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000b9c 	.word	0x20000b9c
 8004f8c:	08030108 	.word	0x08030108
 8004f90:	080300f0 	.word	0x080300f0
 8004f94:	080302ac 	.word	0x080302ac

08004f98 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af04      	add	r7, sp, #16
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	71fb      	strb	r3, [r7, #7]
 8004faa:	4613      	mov	r3, r2
 8004fac:	71bb      	strb	r3, [r7, #6]

	strcpy(topik, "\0");
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	701a      	strb	r2, [r3, #0]

	switch (sensor_type) {
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d002      	beq.n	8004fc0 <generate_status_topik+0x28>
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d00f      	beq.n	8004fde <generate_status_topik+0x46>
 8004fbe:	e01d      	b.n	8004ffc <generate_status_topik+0x64>
		case INPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8004fc0:	4b11      	ldr	r3, [pc, #68]	@ (8005008 <generate_status_topik+0x70>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	79ba      	ldrb	r2, [r7, #6]
 8004fc6:	9202      	str	r2, [sp, #8]
 8004fc8:	4a10      	ldr	r2, [pc, #64]	@ (800500c <generate_status_topik+0x74>)
 8004fca:	9201      	str	r2, [sp, #4]
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	4b10      	ldr	r3, [pc, #64]	@ (8005010 <generate_status_topik+0x78>)
 8004fd0:	4a10      	ldr	r2, [pc, #64]	@ (8005014 <generate_status_topik+0x7c>)
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f020 f811 	bl	8024ffc <snprintf>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	e010      	b.n	8005000 <generate_status_topik+0x68>
			break;

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8004fde:	4b0a      	ldr	r3, [pc, #40]	@ (8005008 <generate_status_topik+0x70>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	79ba      	ldrb	r2, [r7, #6]
 8004fe4:	9202      	str	r2, [sp, #8]
 8004fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8005018 <generate_status_topik+0x80>)
 8004fe8:	9201      	str	r2, [sp, #4]
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	4b08      	ldr	r3, [pc, #32]	@ (8005010 <generate_status_topik+0x78>)
 8004fee:	4a09      	ldr	r2, [pc, #36]	@ (8005014 <generate_status_topik+0x7c>)
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f020 f802 	bl	8024ffc <snprintf>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	e001      	b.n	8005000 <generate_status_topik+0x68>
			break;

		default:
			return -1;
 8004ffc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
			break;
	}

	return 0;
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000b9c 	.word	0x20000b9c
 800500c:	080300e8 	.word	0x080300e8
 8005010:	080300f0 	.word	0x080300f0
 8005014:	080302bc 	.word	0x080302bc
 8005018:	08030108 	.word	0x08030108

0800501c <sfn>:

// SNTP client connection
static struct mg_connection *s_sntp_conn = NULL;

// SNTP client callback
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 800501c:	b5b0      	push	{r4, r5, r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_SNTP_TIME) {
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b12      	cmp	r3, #18
 800502c:	d14b      	bne.n	80050c6 <sfn+0xaa>
	  logging(L_INFO, "Response from NTP server received");
 800502e:	492d      	ldr	r1, [pc, #180]	@ (80050e4 <sfn+0xc8>)
 8005030:	2001      	movs	r0, #1
 8005032:	f7fd f883 	bl	800213c <logging>
    // Time received, the internal protocol handler updates what mg_now() returns
    uint64_t curtime = mg_now();
 8005036:	f01c f92f 	bl	8021298 <mg_now>
 800503a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 800503e:	4b2a      	ldr	r3, [pc, #168]	@ (80050e8 <sfn+0xcc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b01      	cmp	r3, #1
 8005044:	dd0a      	ble.n	800505c <sfn+0x40>
 8005046:	4b29      	ldr	r3, [pc, #164]	@ (80050ec <sfn+0xd0>)
 8005048:	221b      	movs	r2, #27
 800504a:	4929      	ldr	r1, [pc, #164]	@ (80050f0 <sfn+0xd4>)
 800504c:	2002      	movs	r0, #2
 800504e:	f015 fef5 	bl	801ae3c <mg_log_prefix>
 8005052:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005056:	4827      	ldr	r0, [pc, #156]	@ (80050f4 <sfn+0xd8>)
 8005058:	f015 ff40 	bl	801aedc <mg_log>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 800505c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005060:	4924      	ldr	r1, [pc, #144]	@ (80050f4 <sfn+0xd8>)
 8005062:	2001      	movs	r0, #1
 8005064:	f7fd f86a 	bl	800213c <logging>
    // otherwise, you can process the server returned data yourself
    {
      uint64_t t = *(uint64_t *) ev_data;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 8005072:	f01d fc1b 	bl	80228ac <mg_millis>
 8005076:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800507a:	1a14      	subs	r4, r2, r0
 800507c:	eb63 0501 	sbc.w	r5, r3, r1
 8005080:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	4620      	mov	r0, r4
 800508a:	4629      	mov	r1, r5
 800508c:	f7fb fe64 	bl	8000d58 <__aeabi_uldivmod>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4918      	ldr	r1, [pc, #96]	@ (80050f8 <sfn+0xdc>)
 8005096:	e9c1 2300 	strd	r2, r3, [r1]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 800509a:	4b13      	ldr	r3, [pc, #76]	@ (80050e8 <sfn+0xcc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	dd0a      	ble.n	80050b8 <sfn+0x9c>
 80050a2:	4b12      	ldr	r3, [pc, #72]	@ (80050ec <sfn+0xd0>)
 80050a4:	2221      	movs	r2, #33	@ 0x21
 80050a6:	4912      	ldr	r1, [pc, #72]	@ (80050f0 <sfn+0xd4>)
 80050a8:	2002      	movs	r0, #2
 80050aa:	f015 fec7 	bl	801ae3c <mg_log_prefix>
 80050ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050b2:	4812      	ldr	r0, [pc, #72]	@ (80050fc <sfn+0xe0>)
 80050b4:	f015 ff12 	bl	801aedc <mg_log>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 80050b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050bc:	4910      	ldr	r1, [pc, #64]	@ (8005100 <sfn+0xe4>)
 80050be:	2001      	movs	r0, #1
 80050c0:	f7fd f83c 	bl	800213c <logging>
  } else if (ev == MG_EV_CLOSE) {
	  logging(L_ERR, "NTP connection is closed");
    s_sntp_conn = NULL;
  }
  (void) c;
}
 80050c4:	e009      	b.n	80050da <sfn+0xbe>
  } else if (ev == MG_EV_CLOSE) {
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b09      	cmp	r3, #9
 80050ca:	d106      	bne.n	80050da <sfn+0xbe>
	  logging(L_ERR, "NTP connection is closed");
 80050cc:	490d      	ldr	r1, [pc, #52]	@ (8005104 <sfn+0xe8>)
 80050ce:	2003      	movs	r0, #3
 80050d0:	f7fd f834 	bl	800213c <logging>
    s_sntp_conn = NULL;
 80050d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005108 <sfn+0xec>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]
}
 80050da:	bf00      	nop
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bdb0      	pop	{r4, r5, r7, pc}
 80050e2:	bf00      	nop
 80050e4:	080302e0 	.word	0x080302e0
 80050e8:	20000298 	.word	0x20000298
 80050ec:	0803345c 	.word	0x0803345c
 80050f0:	08030304 	.word	0x08030304
 80050f4:	08030324 	.word	0x08030324
 80050f8:	20000ba8 	.word	0x20000ba8
 80050fc:	08030358 	.word	0x08030358
 8005100:	0803037c 	.word	0x0803037c
 8005104:	080303a0 	.word	0x080303a0
 8005108:	20000bb0 	.word	0x20000bb0

0800510c <timer_fn>:


void timer_fn(void *arg) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60fb      	str	r3, [r7, #12]
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8005118:	4b0c      	ldr	r3, [pc, #48]	@ (800514c <timer_fn+0x40>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d108      	bne.n	8005132 <timer_fn+0x26>
 8005120:	2300      	movs	r3, #0
 8005122:	4a0b      	ldr	r2, [pc, #44]	@ (8005150 <timer_fn+0x44>)
 8005124:	2100      	movs	r1, #0
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f01c fb4e 	bl	80217c8 <mg_sntp_connect>
 800512c:	4603      	mov	r3, r0
 800512e:	4a07      	ldr	r2, [pc, #28]	@ (800514c <timer_fn+0x40>)
 8005130:	6013      	str	r3, [r2, #0]
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 8005132:	4b06      	ldr	r3, [pc, #24]	@ (800514c <timer_fn+0x40>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <timer_fn+0x38>
 800513a:	4b04      	ldr	r3, [pc, #16]	@ (800514c <timer_fn+0x40>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f01c fab6 	bl	80216b0 <mg_sntp_request>
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20000bb0 	.word	0x20000bb0
 8005150:	0800501d 	.word	0x0800501d

08005154 <start_sntp>:

void start_sntp(void *arg){
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af04      	add	r7, sp, #16
 800515a:	6078      	str	r0, [r7, #4]
	logging(L_INFO, "starting NTP client service");
 800515c:	4911      	ldr	r1, [pc, #68]	@ (80051a4 <start_sntp+0x50>)
 800515e:	2001      	movs	r0, #1
 8005160:	f7fc ffec 	bl	800213c <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	60fb      	str	r3, [r7, #12]

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	9302      	str	r3, [sp, #8]
 800516c:	4b0e      	ldr	r3, [pc, #56]	@ (80051a8 <start_sntp+0x54>)
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	2300      	movs	r3, #0
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f018 fbf7 	bl	801d970 <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	9302      	str	r3, [sp, #8]
 8005186:	4b08      	ldr	r3, [pc, #32]	@ (80051a8 <start_sntp+0x54>)
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	2301      	movs	r3, #1
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	4a07      	ldr	r2, [pc, #28]	@ (80051ac <start_sntp+0x58>)
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f018 fbeb 	bl	801d970 <mg_timer_add>

}
 800519a:	bf00      	nop
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	080303bc 	.word	0x080303bc
 80051a8:	0800510d 	.word	0x0800510d
 80051ac:	00107ac0 	.word	0x00107ac0

080051b0 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	bf00      	nop
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]

	if (chip_select){
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 80051d4:	4a0e      	ldr	r2, [pc, #56]	@ (8005210 <SPI_flash_reg_cb+0x50>)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	60d3      	str	r3, [r2, #12]
 80051da:	e002      	b.n	80051e2 <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 80051dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005210 <SPI_flash_reg_cb+0x50>)
 80051de:	4a0d      	ldr	r2, [pc, #52]	@ (8005214 <SPI_flash_reg_cb+0x54>)
 80051e0:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 80051e8:	4a09      	ldr	r2, [pc, #36]	@ (8005210 <SPI_flash_reg_cb+0x50>)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6113      	str	r3, [r2, #16]
 80051ee:	e002      	b.n	80051f6 <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 80051f0:	4b07      	ldr	r3, [pc, #28]	@ (8005210 <SPI_flash_reg_cb+0x50>)
 80051f2:	4a08      	ldr	r2, [pc, #32]	@ (8005214 <SPI_flash_reg_cb+0x54>)
 80051f4:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_buffer	= receive_buffer;
 80051f6:	4a06      	ldr	r2, [pc, #24]	@ (8005210 <SPI_flash_reg_cb+0x50>)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 80051fc:	4a04      	ldr	r2, [pc, #16]	@ (8005210 <SPI_flash_reg_cb+0x50>)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6093      	str	r3, [r2, #8]

}
 8005202:	bf00      	nop
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20000bb4 	.word	0x20000bb4
 8005214:	080051b1 	.word	0x080051b1

08005218 <sFLASH_Reset>:

void SPI_flash_io_init(void){

}

void sFLASH_Reset(void){
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
    sFLASH_CS_LOW();
 800521c:	f000 f8d2 	bl	80053c4 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8005220:	2066      	movs	r0, #102	@ 0x66
 8005222:	f000 fa8d 	bl	8005740 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8005226:	2099      	movs	r0, #153	@ 0x99
 8005228:	f000 fa8a 	bl	8005740 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 800522c:	f000 f8d4 	bl	80053d8 <sFLASH_CS_HIGH>
}
 8005230:	bf00      	nop
 8005232:	bd80      	pop	{r7, pc}

08005234 <sFLASH_Init>:

void sFLASH_Init(void){
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0

    HAL_Delay(100);
 8005238:	2064      	movs	r0, #100	@ 0x64
 800523a:	f000 fafb 	bl	8005834 <HAL_Delay>
    sFLASH_Reset();
 800523e:	f7ff ffeb 	bl	8005218 <sFLASH_Reset>
    HAL_Delay(100);
 8005242:	2064      	movs	r0, #100	@ 0x64
 8005244:	f000 faf6 	bl	8005834 <HAL_Delay>
    HAL_Delay(100);
 8005248:	2064      	movs	r0, #100	@ 0x64
 800524a:	f000 faf3 	bl	8005834 <HAL_Delay>
}
 800524e:	bf00      	nop
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <sFLASH_GetInfo>:

struct SPI_flash_info sFLASH_GetInfo(void){
 8005254:	b590      	push	{r4, r7, lr}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

	sFLASH_Init();
 800525c:	f7ff ffea 	bl	8005234 <sFLASH_Init>

	flash_id = sFLASH_ReadID();
 8005260:	f000 fa18 	bl	8005694 <sFLASH_ReadID>
 8005264:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4a4f      	ldr	r2, [pc, #316]	@ (80053a8 <sFLASH_GetInfo+0x154>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d076      	beq.n	800535c <sFLASH_GetInfo+0x108>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4a4d      	ldr	r2, [pc, #308]	@ (80053a8 <sFLASH_GetInfo+0x154>)
 8005272:	4293      	cmp	r3, r2
 8005274:	f0c0 8088 	bcc.w	8005388 <sFLASH_GetInfo+0x134>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4a4c      	ldr	r2, [pc, #304]	@ (80053ac <sFLASH_GetInfo+0x158>)
 800527c:	4293      	cmp	r3, r2
 800527e:	f200 8083 	bhi.w	8005388 <sFLASH_GetInfo+0x134>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4a4a      	ldr	r2, [pc, #296]	@ (80053b0 <sFLASH_GetInfo+0x15c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d37e      	bcc.n	8005388 <sFLASH_GetInfo+0x134>
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4b49      	ldr	r3, [pc, #292]	@ (80053b4 <sFLASH_GetInfo+0x160>)
 800528e:	4413      	add	r3, r2
 8005290:	2b03      	cmp	r3, #3
 8005292:	d879      	bhi.n	8005388 <sFLASH_GetInfo+0x134>
 8005294:	a201      	add	r2, pc, #4	@ (adr r2, 800529c <sFLASH_GetInfo+0x48>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052ad 	.word	0x080052ad
 80052a0:	080052d9 	.word	0x080052d9
 80052a4:	08005305 	.word	0x08005305
 80052a8:	08005331 	.word	0x08005331
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 80052ac:	4b42      	ldr	r3, [pc, #264]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 80052ae:	4a40      	ldr	r2, [pc, #256]	@ (80053b0 <sFLASH_GetInfo+0x15c>)
 80052b0:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80052b2:	4b41      	ldr	r3, [pc, #260]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80052b8:	4b3f      	ldr	r3, [pc, #252]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80052be:	4b3e      	ldr	r3, [pc, #248]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 80052c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80052c4:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80052c6:	4b3c      	ldr	r3, [pc, #240]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 80052c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052cc:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 80052ce:	4b3a      	ldr	r3, [pc, #232]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 80052d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052d4:	819a      	strh	r2, [r3, #12]
			break;
 80052d6:	e05b      	b.n	8005390 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 80052d8:	4b37      	ldr	r3, [pc, #220]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 80052da:	4a38      	ldr	r2, [pc, #224]	@ (80053bc <sFLASH_GetInfo+0x168>)
 80052dc:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80052de:	4b36      	ldr	r3, [pc, #216]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80052e4:	4b34      	ldr	r3, [pc, #208]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80052ea:	4b33      	ldr	r3, [pc, #204]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 80052ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80052f0:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80052f2:	4b31      	ldr	r3, [pc, #196]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 80052f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052f8:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 80052fa:	4b2f      	ldr	r3, [pc, #188]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 80052fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005300:	819a      	strh	r2, [r3, #12]
			break;
 8005302:	e045      	b.n	8005390 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8005304:	4b2c      	ldr	r3, [pc, #176]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005306:	4a2e      	ldr	r2, [pc, #184]	@ (80053c0 <sFLASH_GetInfo+0x16c>)
 8005308:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 800530a:	4b2b      	ldr	r3, [pc, #172]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 800530c:	2201      	movs	r2, #1
 800530e:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8005310:	4b29      	ldr	r3, [pc, #164]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005312:	2201      	movs	r2, #1
 8005314:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8005316:	4b28      	ldr	r3, [pc, #160]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005318:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800531c:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 800531e:	4b26      	ldr	r3, [pc, #152]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005320:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005324:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 8005326:	4b24      	ldr	r3, [pc, #144]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005328:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800532c:	819a      	strh	r2, [r3, #12]
			break;
 800532e:	e02f      	b.n	8005390 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q128BV_ID:
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8005330:	4b21      	ldr	r3, [pc, #132]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005332:	4a1e      	ldr	r2, [pc, #120]	@ (80053ac <sFLASH_GetInfo+0x158>)
 8005334:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8005336:	4b20      	ldr	r3, [pc, #128]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005338:	2201      	movs	r2, #1
 800533a:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 800533c:	4b1e      	ldr	r3, [pc, #120]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 800533e:	2201      	movs	r2, #1
 8005340:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8005342:	4b1d      	ldr	r3, [pc, #116]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005344:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005348:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 800534a:	4b1b      	ldr	r3, [pc, #108]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 800534c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005350:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 4096;
 8005352:	4b19      	ldr	r3, [pc, #100]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005354:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005358:	819a      	strh	r2, [r3, #12]
			break;
 800535a:	e019      	b.n	8005390 <sFLASH_GetInfo+0x13c>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 800535c:	4b16      	ldr	r3, [pc, #88]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 800535e:	4a12      	ldr	r2, [pc, #72]	@ (80053a8 <sFLASH_GetInfo+0x154>)
 8005360:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8005362:	4b15      	ldr	r3, [pc, #84]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005364:	2201      	movs	r2, #1
 8005366:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8005368:	4b13      	ldr	r3, [pc, #76]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 800536a:	2201      	movs	r2, #1
 800536c:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 800536e:	4b12      	ldr	r3, [pc, #72]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005370:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005374:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8005376:	4b10      	ldr	r3, [pc, #64]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005378:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800537c:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 800537e:	4b0e      	ldr	r3, [pc, #56]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005380:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005384:	819a      	strh	r2, [r3, #12]
			break;
 8005386:	e003      	b.n	8005390 <sFLASH_GetInfo+0x13c>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8005388:	4b0b      	ldr	r3, [pc, #44]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
			break;
 800538e:	bf00      	nop
	}

	return flash_info;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a09      	ldr	r2, [pc, #36]	@ (80053b8 <sFLASH_GetInfo+0x164>)
 8005394:	461c      	mov	r4, r3
 8005396:	4613      	mov	r3, r2
 8005398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800539a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd90      	pop	{r4, r7, pc}
 80053a6:	bf00      	nop
 80053a8:	00c22016 	.word	0x00c22016
 80053ac:	00ef4018 	.word	0x00ef4018
 80053b0:	00ef4015 	.word	0x00ef4015
 80053b4:	ff10bfeb 	.word	0xff10bfeb
 80053b8:	20000bc8 	.word	0x20000bc8
 80053bc:	00ef4016 	.word	0x00ef4016
 80053c0:	00ef4017 	.word	0x00ef4017

080053c4 <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 80053c8:	4b02      	ldr	r3, [pc, #8]	@ (80053d4 <sFLASH_CS_LOW+0x10>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4798      	blx	r3

}
 80053ce:	bf00      	nop
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000bb4 	.word	0x20000bb4

080053d8 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 80053dc:	4b02      	ldr	r3, [pc, #8]	@ (80053e8 <sFLASH_CS_HIGH+0x10>)
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	4798      	blx	r3
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000bb4 	.word	0x20000bb4

080053ec <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 80053f4:	f000 f9b4 	bl	8005760 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80053f8:	f7ff ffe4 	bl	80053c4 <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 80053fc:	2020      	movs	r0, #32
 80053fe:	f000 f99f 	bl	8005740 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	0c1b      	lsrs	r3, r3, #16
 8005406:	b2db      	uxtb	r3, r3
 8005408:	4618      	mov	r0, r3
 800540a:	f000 f999 	bl	8005740 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	0a1b      	lsrs	r3, r3, #8
 8005412:	b2db      	uxtb	r3, r3
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f993 	bl	8005740 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	4618      	mov	r0, r3
 8005420:	f000 f98e 	bl	8005740 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8005424:	f7ff ffd8 	bl	80053d8 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8005428:	f000 f9a5 	bl	8005776 <sFLASH_WaitForWriteEnd>
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8005442:	f000 f98d 	bl	8005760 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8005446:	f7ff ffbd 	bl	80053c4 <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 800544a:	2002      	movs	r0, #2
 800544c:	f000 f978 	bl	8005740 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	0c1b      	lsrs	r3, r3, #16
 8005454:	b2db      	uxtb	r3, r3
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f972 	bl	8005740 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	0a1b      	lsrs	r3, r3, #8
 8005460:	b2db      	uxtb	r3, r3
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f96c 	bl	8005740 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f967 	bl	8005740 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 8005472:	e007      	b.n	8005484 <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f000 f961 	bl	8005740 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3301      	adds	r3, #1
 8005482:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	1e5a      	subs	r2, r3, #1
 8005488:	80fa      	strh	r2, [r7, #6]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f2      	bne.n	8005474 <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800548e:	f7ff ffa3 	bl	80053d8 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8005492:	f000 f970 	bl	8005776 <sFLASH_WaitForWriteEnd>
}
 8005496:	bf00      	nop
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b086      	sub	sp, #24
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	4613      	mov	r3, r2
 80054aa:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	75fb      	strb	r3, [r7, #23]
 80054b0:	2300      	movs	r3, #0
 80054b2:	75bb      	strb	r3, [r7, #22]
 80054b4:	2300      	movs	r3, #0
 80054b6:	757b      	strb	r3, [r7, #21]
 80054b8:	2300      	movs	r3, #0
 80054ba:	753b      	strb	r3, [r7, #20]
 80054bc:	2300      	movs	r3, #0
 80054be:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 80054c4:	7d7b      	ldrb	r3, [r7, #21]
 80054c6:	425b      	negs	r3, r3
 80054c8:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	0a1b      	lsrs	r3, r3, #8
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 80054d6:	7d7b      	ldrb	r3, [r7, #21]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d124      	bne.n	8005526 <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d114      	bne.n	800550c <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	461a      	mov	r2, r3
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7ff ffa3 	bl	8005434 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 80054ee:	e07b      	b.n	80055e8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80054f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f7ff ff9c 	bl	8005434 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005502:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800550a:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 800550c:	7dfb      	ldrb	r3, [r7, #23]
 800550e:	1e5a      	subs	r2, r3, #1
 8005510:	75fa      	strb	r2, [r7, #23]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1ec      	bne.n	80054f0 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8005516:	7dbb      	ldrb	r3, [r7, #22]
 8005518:	b29b      	uxth	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f7ff ff88 	bl	8005434 <sFLASH_WritePage>
}
 8005524:	e060      	b.n	80055e8 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8005526:	7dfb      	ldrb	r3, [r7, #23]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d125      	bne.n	8005578 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 800552c:	7dba      	ldrb	r2, [r7, #22]
 800552e:	7d3b      	ldrb	r3, [r7, #20]
 8005530:	429a      	cmp	r2, r3
 8005532:	d91a      	bls.n	800556a <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 8005534:	7dba      	ldrb	r2, [r7, #22]
 8005536:	7d3b      	ldrb	r3, [r7, #20]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 800553c:	7d3b      	ldrb	r3, [r7, #20]
 800553e:	b29b      	uxth	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7ff ff75 	bl	8005434 <sFLASH_WritePage>
        WriteAddr +=  count;
 800554a:	7d3b      	ldrb	r3, [r7, #20]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	4413      	add	r3, r2
 8005550:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 8005552:	7d3b      	ldrb	r3, [r7, #20]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 800555a:	7cfb      	ldrb	r3, [r7, #19]
 800555c:	b29b      	uxth	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f7ff ff66 	bl	8005434 <sFLASH_WritePage>
}
 8005568:	e03e      	b.n	80055e8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	461a      	mov	r2, r3
 800556e:	68b9      	ldr	r1, [r7, #8]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff ff5f 	bl	8005434 <sFLASH_WritePage>
}
 8005576:	e037      	b.n	80055e8 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8005578:	7d3b      	ldrb	r3, [r7, #20]
 800557a:	b29b      	uxth	r3, r3
 800557c:	88fa      	ldrh	r2, [r7, #6]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	0a1b      	lsrs	r3, r3, #8
 8005586:	b29b      	uxth	r3, r3
 8005588:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 800558e:	7d3b      	ldrb	r3, [r7, #20]
 8005590:	b29b      	uxth	r3, r3
 8005592:	461a      	mov	r2, r3
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff ff4c 	bl	8005434 <sFLASH_WritePage>
      WriteAddr +=  count;
 800559c:	7d3b      	ldrb	r3, [r7, #20]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	4413      	add	r3, r2
 80055a2:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 80055a4:	7d3b      	ldrb	r3, [r7, #20]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80055ac:	e00d      	b.n	80055ca <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80055ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f7ff ff3d 	bl	8005434 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055c0:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055c8:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	1e5a      	subs	r2, r3, #1
 80055ce:	75fa      	strb	r2, [r7, #23]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1ec      	bne.n	80055ae <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 80055d4:	7dbb      	ldrb	r3, [r7, #22]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d006      	beq.n	80055e8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80055da:	7dbb      	ldrb	r3, [r7, #22]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff ff26 	bl	8005434 <sFLASH_WritePage>
}
 80055e8:	bf00      	nop
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	4613      	mov	r3, r2
 80055fc:	80fb      	strh	r3, [r7, #6]
//#include "cmsis_os.h"
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80055fe:	f7ff fee1 	bl	80053c4 <sFLASH_CS_LOW>

  if (NumByteToRead > 16){
 8005602:	88fb      	ldrh	r3, [r7, #6]
 8005604:	2b10      	cmp	r3, #16
 8005606:	d91c      	bls.n	8005642 <sFLASH_ReadBuffer+0x52>
	  //Send "Fast read" inctruction
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 8005608:	200b      	movs	r0, #11
 800560a:	f000 f899 	bl	8005740 <sFLASH_SendByte>
	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	0c1b      	lsrs	r3, r3, #16
 8005612:	b2db      	uxtb	r3, r3
 8005614:	4618      	mov	r0, r3
 8005616:	f000 f893 	bl	8005740 <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	0a1b      	lsrs	r3, r3, #8
 800561e:	b2db      	uxtb	r3, r3
 8005620:	4618      	mov	r0, r3
 8005622:	f000 f88d 	bl	8005740 <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f888 	bl	8005740 <sFLASH_SendByte>

	  sFLASH_SendByte(0x00);
 8005630:	2000      	movs	r0, #0
 8005632:	f000 f885 	bl	8005740 <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	4619      	mov	r1, r3
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f86e 	bl	800571c <sFLASH_SPI_ReadBuffer>
 8005640:	e022      	b.n	8005688 <sFLASH_ReadBuffer+0x98>


  }else{
	  /*!< Send "Read from Memory " instruction */
	  sFLASH_SendByte(sFLASH_CMD_READ);
 8005642:	2003      	movs	r0, #3
 8005644:	f000 f87c 	bl	8005740 <sFLASH_SendByte>

	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	b2db      	uxtb	r3, r3
 800564e:	4618      	mov	r0, r3
 8005650:	f000 f876 	bl	8005740 <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	b2db      	uxtb	r3, r3
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f870 	bl	8005740 <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	4618      	mov	r0, r3
 8005666:	f000 f86b 	bl	8005740 <sFLASH_SendByte>

	  while (NumByteToRead--) /*!< while there is data to be read */
 800566a:	e008      	b.n	800567e <sFLASH_ReadBuffer+0x8e>
	  {
		/*!< Read a byte from the FLASH */
		//*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
		  *pBuffer = sFLASH_ReadByte();
 800566c:	f000 f846 	bl	80056fc <sFLASH_ReadByte>
 8005670:	4603      	mov	r3, r0
 8005672:	461a      	mov	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	701a      	strb	r2, [r3, #0]
		/*!< Point to the next location where the byte read will be saved */
		pBuffer++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3301      	adds	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
	  while (NumByteToRead--) /*!< while there is data to be read */
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	1e5a      	subs	r2, r3, #1
 8005682:	80fa      	strh	r2, [r7, #6]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f1      	bne.n	800566c <sFLASH_ReadBuffer+0x7c>
	  }
  }
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8005688:	f7ff fea6 	bl	80053d8 <sFLASH_CS_HIGH>
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	2300      	movs	r3, #0
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	2300      	movs	r3, #0
 80056a4:	607b      	str	r3, [r7, #4]
 80056a6:	2300      	movs	r3, #0
 80056a8:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80056aa:	f7ff fe8b 	bl	80053c4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80056ae:	f7ff fe93 	bl	80053d8 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80056b2:	f7ff fe87 	bl	80053c4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80056b6:	f7ff fe8f 	bl	80053d8 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80056ba:	f7ff fe83 	bl	80053c4 <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 80056be:	209f      	movs	r0, #159	@ 0x9f
 80056c0:	f000 f83e 	bl	8005740 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 80056c4:	f000 f81a 	bl	80056fc <sFLASH_ReadByte>
 80056c8:	4603      	mov	r3, r0
 80056ca:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 80056cc:	f000 f816 	bl	80056fc <sFLASH_ReadByte>
 80056d0:	4603      	mov	r3, r0
 80056d2:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 80056d4:	f000 f812 	bl	80056fc <sFLASH_ReadByte>
 80056d8:	4603      	mov	r3, r0
 80056da:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80056dc:	f7ff fe7c 	bl	80053d8 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	041a      	lsls	r2, r3, #16
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	4313      	orrs	r3, r2
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]

  return Temp;
 80056f0:	68fb      	ldr	r3, [r7, #12]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
	uint8_t byte;
	flash_conf.receive_buffer(&byte, 1);
 8005702:	4b05      	ldr	r3, [pc, #20]	@ (8005718 <sFLASH_ReadByte+0x1c>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	1dfa      	adds	r2, r7, #7
 8005708:	2101      	movs	r1, #1
 800570a:	4610      	mov	r0, r2
 800570c:	4798      	blx	r3
	return byte;
 800570e:	79fb      	ldrb	r3, [r7, #7]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20000bb4 	.word	0x20000bb4

0800571c <sFLASH_SPI_ReadBuffer>:


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	807b      	strh	r3, [r7, #2]
	flash_conf.receive_buffer(buffer, size);
 8005728:	4b04      	ldr	r3, [pc, #16]	@ (800573c <sFLASH_SPI_ReadBuffer+0x20>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	887a      	ldrh	r2, [r7, #2]
 800572e:	4611      	mov	r1, r2
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	4798      	blx	r3
}
 8005734:	bf00      	nop
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20000bb4 	.word	0x20000bb4

08005740 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 800574a:	4b04      	ldr	r3, [pc, #16]	@ (800575c <sFLASH_SendByte+0x1c>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	79fa      	ldrb	r2, [r7, #7]
 8005750:	4610      	mov	r0, r2
 8005752:	4798      	blx	r3
}
 8005754:	bf00      	nop
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000bb4 	.word	0x20000bb4

08005760 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8005764:	f7ff fe2e 	bl	80053c4 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8005768:	2006      	movs	r0, #6
 800576a:	f7ff ffe9 	bl	8005740 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800576e:	f7ff fe33 	bl	80053d8 <sFLASH_CS_HIGH>
}
 8005772:	bf00      	nop
 8005774:	bd80      	pop	{r7, pc}

08005776 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8005780:	f7ff fe20 	bl	80053c4 <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8005784:	2005      	movs	r0, #5
 8005786:	f7ff ffdb 	bl	8005740 <sFLASH_SendByte>

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 800578a:	2005      	movs	r0, #5
 800578c:	f7ff ffd8 	bl	8005740 <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 8005790:	f7ff ffb4 	bl	80056fc <sFLASH_ReadByte>
 8005794:	4603      	mov	r3, r0
 8005796:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f3      	bne.n	800578a <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80057a2:	f7ff fe19 	bl	80053d8 <sFLASH_CS_HIGH>
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057b4:	4b0e      	ldr	r3, [pc, #56]	@ (80057f0 <HAL_Init+0x40>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a0d      	ldr	r2, [pc, #52]	@ (80057f0 <HAL_Init+0x40>)
 80057ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057c0:	4b0b      	ldr	r3, [pc, #44]	@ (80057f0 <HAL_Init+0x40>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a0a      	ldr	r2, [pc, #40]	@ (80057f0 <HAL_Init+0x40>)
 80057c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057cc:	4b08      	ldr	r3, [pc, #32]	@ (80057f0 <HAL_Init+0x40>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a07      	ldr	r2, [pc, #28]	@ (80057f0 <HAL_Init+0x40>)
 80057d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057d8:	2003      	movs	r0, #3
 80057da:	f000 f913 	bl	8005a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057de:	200f      	movs	r0, #15
 80057e0:	f7fc ff00 	bl	80025e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057e4:	f7fc fed2 	bl	800258c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40023c00 	.word	0x40023c00

080057f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057f8:	4b06      	ldr	r3, [pc, #24]	@ (8005814 <HAL_IncTick+0x20>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	461a      	mov	r2, r3
 80057fe:	4b06      	ldr	r3, [pc, #24]	@ (8005818 <HAL_IncTick+0x24>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4413      	add	r3, r2
 8005804:	4a04      	ldr	r2, [pc, #16]	@ (8005818 <HAL_IncTick+0x24>)
 8005806:	6013      	str	r3, [r2, #0]
}
 8005808:	bf00      	nop
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	20000078 	.word	0x20000078
 8005818:	20000bd8 	.word	0x20000bd8

0800581c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  return uwTick;
 8005820:	4b03      	ldr	r3, [pc, #12]	@ (8005830 <HAL_GetTick+0x14>)
 8005822:	681b      	ldr	r3, [r3, #0]
}
 8005824:	4618      	mov	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	20000bd8 	.word	0x20000bd8

08005834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800583c:	f7ff ffee 	bl	800581c <HAL_GetTick>
 8005840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800584c:	d005      	beq.n	800585a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800584e:	4b0a      	ldr	r3, [pc, #40]	@ (8005878 <HAL_Delay+0x44>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800585a:	bf00      	nop
 800585c:	f7ff ffde 	bl	800581c <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	429a      	cmp	r2, r3
 800586a:	d8f7      	bhi.n	800585c <HAL_Delay+0x28>
  {
  }
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000078 	.word	0x20000078

0800587c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800588c:	4b0c      	ldr	r3, [pc, #48]	@ (80058c0 <__NVIC_SetPriorityGrouping+0x44>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005898:	4013      	ands	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80058a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058ae:	4a04      	ldr	r2, [pc, #16]	@ (80058c0 <__NVIC_SetPriorityGrouping+0x44>)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	60d3      	str	r3, [r2, #12]
}
 80058b4:	bf00      	nop
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	e000ed00 	.word	0xe000ed00

080058c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058c8:	4b04      	ldr	r3, [pc, #16]	@ (80058dc <__NVIC_GetPriorityGrouping+0x18>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	f003 0307 	and.w	r3, r3, #7
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	e000ed00 	.word	0xe000ed00

080058e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	db0b      	blt.n	800590a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	f003 021f 	and.w	r2, r3, #31
 80058f8:	4907      	ldr	r1, [pc, #28]	@ (8005918 <__NVIC_EnableIRQ+0x38>)
 80058fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	2001      	movs	r0, #1
 8005902:	fa00 f202 	lsl.w	r2, r0, r2
 8005906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	e000e100 	.word	0xe000e100

0800591c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	6039      	str	r1, [r7, #0]
 8005926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592c:	2b00      	cmp	r3, #0
 800592e:	db0a      	blt.n	8005946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	b2da      	uxtb	r2, r3
 8005934:	490c      	ldr	r1, [pc, #48]	@ (8005968 <__NVIC_SetPriority+0x4c>)
 8005936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593a:	0112      	lsls	r2, r2, #4
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	440b      	add	r3, r1
 8005940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005944:	e00a      	b.n	800595c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4908      	ldr	r1, [pc, #32]	@ (800596c <__NVIC_SetPriority+0x50>)
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	3b04      	subs	r3, #4
 8005954:	0112      	lsls	r2, r2, #4
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	440b      	add	r3, r1
 800595a:	761a      	strb	r2, [r3, #24]
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	e000e100 	.word	0xe000e100
 800596c:	e000ed00 	.word	0xe000ed00

08005970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005970:	b480      	push	{r7}
 8005972:	b089      	sub	sp, #36	@ 0x24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f1c3 0307 	rsb	r3, r3, #7
 800598a:	2b04      	cmp	r3, #4
 800598c:	bf28      	it	cs
 800598e:	2304      	movcs	r3, #4
 8005990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	3304      	adds	r3, #4
 8005996:	2b06      	cmp	r3, #6
 8005998:	d902      	bls.n	80059a0 <NVIC_EncodePriority+0x30>
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	3b03      	subs	r3, #3
 800599e:	e000      	b.n	80059a2 <NVIC_EncodePriority+0x32>
 80059a0:	2300      	movs	r3, #0
 80059a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	43da      	mvns	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	401a      	ands	r2, r3
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	fa01 f303 	lsl.w	r3, r1, r3
 80059c2:	43d9      	mvns	r1, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059c8:	4313      	orrs	r3, r2
         );
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3724      	adds	r7, #36	@ 0x24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80059dc:	f3bf 8f4f 	dsb	sy
}
 80059e0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80059e2:	4b06      	ldr	r3, [pc, #24]	@ (80059fc <__NVIC_SystemReset+0x24>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80059ea:	4904      	ldr	r1, [pc, #16]	@ (80059fc <__NVIC_SystemReset+0x24>)
 80059ec:	4b04      	ldr	r3, [pc, #16]	@ (8005a00 <__NVIC_SystemReset+0x28>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80059f2:	f3bf 8f4f 	dsb	sy
}
 80059f6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80059f8:	bf00      	nop
 80059fa:	e7fd      	b.n	80059f8 <__NVIC_SystemReset+0x20>
 80059fc:	e000ed00 	.word	0xe000ed00
 8005a00:	05fa0004 	.word	0x05fa0004

08005a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff ff35 	bl	800587c <__NVIC_SetPriorityGrouping>
}
 8005a12:	bf00      	nop
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b086      	sub	sp, #24
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	4603      	mov	r3, r0
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	607a      	str	r2, [r7, #4]
 8005a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a2c:	f7ff ff4a 	bl	80058c4 <__NVIC_GetPriorityGrouping>
 8005a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	6978      	ldr	r0, [r7, #20]
 8005a38:	f7ff ff9a 	bl	8005970 <NVIC_EncodePriority>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a42:	4611      	mov	r1, r2
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff ff69 	bl	800591c <__NVIC_SetPriority>
}
 8005a4a:	bf00      	nop
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	4603      	mov	r3, r0
 8005a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff ff3d 	bl	80058e0 <__NVIC_EnableIRQ>
}
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005a72:	f7ff ffb1 	bl	80059d8 <__NVIC_SystemReset>
	...

08005a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b089      	sub	sp, #36	@ 0x24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	e159      	b.n	8005d48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a94:	2201      	movs	r2, #1
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	f040 8148 	bne.w	8005d42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d005      	beq.n	8005aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d130      	bne.n	8005b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	43db      	mvns	r3, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b00:	2201      	movs	r2, #1
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	091b      	lsrs	r3, r3, #4
 8005b16:	f003 0201 	and.w	r2, r3, #1
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d017      	beq.n	8005b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	2203      	movs	r2, #3
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d123      	bne.n	8005bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	08da      	lsrs	r2, r3, #3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3208      	adds	r2, #8
 8005b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	220f      	movs	r2, #15
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	43db      	mvns	r3, r3
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	4013      	ands	r3, r2
 8005b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	08da      	lsrs	r2, r3, #3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3208      	adds	r2, #8
 8005bb6:	69b9      	ldr	r1, [r7, #24]
 8005bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	2203      	movs	r2, #3
 8005bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f003 0203 	and.w	r2, r3, #3
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 80a2 	beq.w	8005d42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	4b57      	ldr	r3, [pc, #348]	@ (8005d60 <HAL_GPIO_Init+0x2e8>)
 8005c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c06:	4a56      	ldr	r2, [pc, #344]	@ (8005d60 <HAL_GPIO_Init+0x2e8>)
 8005c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c0e:	4b54      	ldr	r3, [pc, #336]	@ (8005d60 <HAL_GPIO_Init+0x2e8>)
 8005c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c1a:	4a52      	ldr	r2, [pc, #328]	@ (8005d64 <HAL_GPIO_Init+0x2ec>)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	089b      	lsrs	r3, r3, #2
 8005c20:	3302      	adds	r3, #2
 8005c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	220f      	movs	r2, #15
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	43db      	mvns	r3, r3
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a49      	ldr	r2, [pc, #292]	@ (8005d68 <HAL_GPIO_Init+0x2f0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d019      	beq.n	8005c7a <HAL_GPIO_Init+0x202>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a48      	ldr	r2, [pc, #288]	@ (8005d6c <HAL_GPIO_Init+0x2f4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <HAL_GPIO_Init+0x1fe>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a47      	ldr	r2, [pc, #284]	@ (8005d70 <HAL_GPIO_Init+0x2f8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00d      	beq.n	8005c72 <HAL_GPIO_Init+0x1fa>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a46      	ldr	r2, [pc, #280]	@ (8005d74 <HAL_GPIO_Init+0x2fc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d007      	beq.n	8005c6e <HAL_GPIO_Init+0x1f6>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a45      	ldr	r2, [pc, #276]	@ (8005d78 <HAL_GPIO_Init+0x300>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d101      	bne.n	8005c6a <HAL_GPIO_Init+0x1f2>
 8005c66:	2304      	movs	r3, #4
 8005c68:	e008      	b.n	8005c7c <HAL_GPIO_Init+0x204>
 8005c6a:	2307      	movs	r3, #7
 8005c6c:	e006      	b.n	8005c7c <HAL_GPIO_Init+0x204>
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e004      	b.n	8005c7c <HAL_GPIO_Init+0x204>
 8005c72:	2302      	movs	r3, #2
 8005c74:	e002      	b.n	8005c7c <HAL_GPIO_Init+0x204>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e000      	b.n	8005c7c <HAL_GPIO_Init+0x204>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	f002 0203 	and.w	r2, r2, #3
 8005c82:	0092      	lsls	r2, r2, #2
 8005c84:	4093      	lsls	r3, r2
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c8c:	4935      	ldr	r1, [pc, #212]	@ (8005d64 <HAL_GPIO_Init+0x2ec>)
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	089b      	lsrs	r3, r3, #2
 8005c92:	3302      	adds	r3, #2
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c9a:	4b38      	ldr	r3, [pc, #224]	@ (8005d7c <HAL_GPIO_Init+0x304>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8005d7c <HAL_GPIO_Init+0x304>)
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8005d7c <HAL_GPIO_Init+0x304>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ce8:	4a24      	ldr	r2, [pc, #144]	@ (8005d7c <HAL_GPIO_Init+0x304>)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cee:	4b23      	ldr	r3, [pc, #140]	@ (8005d7c <HAL_GPIO_Init+0x304>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d12:	4a1a      	ldr	r2, [pc, #104]	@ (8005d7c <HAL_GPIO_Init+0x304>)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d18:	4b18      	ldr	r3, [pc, #96]	@ (8005d7c <HAL_GPIO_Init+0x304>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	4013      	ands	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8005d7c <HAL_GPIO_Init+0x304>)
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	3301      	adds	r3, #1
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	2b0f      	cmp	r3, #15
 8005d4c:	f67f aea2 	bls.w	8005a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	3724      	adds	r7, #36	@ 0x24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40023800 	.word	0x40023800
 8005d64:	40013800 	.word	0x40013800
 8005d68:	40020000 	.word	0x40020000
 8005d6c:	40020400 	.word	0x40020400
 8005d70:	40020800 	.word	0x40020800
 8005d74:	40020c00 	.word	0x40020c00
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	40013c00 	.word	0x40013c00

08005d80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	e0bb      	b.n	8005f14 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4013      	ands	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	f040 80ab 	bne.w	8005f0e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005db8:	4a5c      	ldr	r2, [pc, #368]	@ (8005f2c <HAL_GPIO_DeInit+0x1ac>)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	089b      	lsrs	r3, r3, #2
 8005dbe:	3302      	adds	r3, #2
 8005dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	220f      	movs	r2, #15
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a54      	ldr	r2, [pc, #336]	@ (8005f30 <HAL_GPIO_DeInit+0x1b0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d019      	beq.n	8005e16 <HAL_GPIO_DeInit+0x96>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a53      	ldr	r2, [pc, #332]	@ (8005f34 <HAL_GPIO_DeInit+0x1b4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <HAL_GPIO_DeInit+0x92>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a52      	ldr	r2, [pc, #328]	@ (8005f38 <HAL_GPIO_DeInit+0x1b8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00d      	beq.n	8005e0e <HAL_GPIO_DeInit+0x8e>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a51      	ldr	r2, [pc, #324]	@ (8005f3c <HAL_GPIO_DeInit+0x1bc>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d007      	beq.n	8005e0a <HAL_GPIO_DeInit+0x8a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a50      	ldr	r2, [pc, #320]	@ (8005f40 <HAL_GPIO_DeInit+0x1c0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d101      	bne.n	8005e06 <HAL_GPIO_DeInit+0x86>
 8005e02:	2304      	movs	r3, #4
 8005e04:	e008      	b.n	8005e18 <HAL_GPIO_DeInit+0x98>
 8005e06:	2307      	movs	r3, #7
 8005e08:	e006      	b.n	8005e18 <HAL_GPIO_DeInit+0x98>
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e004      	b.n	8005e18 <HAL_GPIO_DeInit+0x98>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e002      	b.n	8005e18 <HAL_GPIO_DeInit+0x98>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <HAL_GPIO_DeInit+0x98>
 8005e16:	2300      	movs	r3, #0
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	f002 0203 	and.w	r2, r2, #3
 8005e1e:	0092      	lsls	r2, r2, #2
 8005e20:	4093      	lsls	r3, r2
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d132      	bne.n	8005e8e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005e28:	4b46      	ldr	r3, [pc, #280]	@ (8005f44 <HAL_GPIO_DeInit+0x1c4>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	43db      	mvns	r3, r3
 8005e30:	4944      	ldr	r1, [pc, #272]	@ (8005f44 <HAL_GPIO_DeInit+0x1c4>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005e36:	4b43      	ldr	r3, [pc, #268]	@ (8005f44 <HAL_GPIO_DeInit+0x1c4>)
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	4941      	ldr	r1, [pc, #260]	@ (8005f44 <HAL_GPIO_DeInit+0x1c4>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005e44:	4b3f      	ldr	r3, [pc, #252]	@ (8005f44 <HAL_GPIO_DeInit+0x1c4>)
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	493d      	ldr	r1, [pc, #244]	@ (8005f44 <HAL_GPIO_DeInit+0x1c4>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005e52:	4b3c      	ldr	r3, [pc, #240]	@ (8005f44 <HAL_GPIO_DeInit+0x1c4>)
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	493a      	ldr	r1, [pc, #232]	@ (8005f44 <HAL_GPIO_DeInit+0x1c4>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	220f      	movs	r2, #15
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005e70:	4a2e      	ldr	r2, [pc, #184]	@ (8005f2c <HAL_GPIO_DeInit+0x1ac>)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	089b      	lsrs	r3, r3, #2
 8005e76:	3302      	adds	r3, #2
 8005e78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	43da      	mvns	r2, r3
 8005e80:	482a      	ldr	r0, [pc, #168]	@ (8005f2c <HAL_GPIO_DeInit+0x1ac>)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	089b      	lsrs	r3, r3, #2
 8005e86:	400a      	ands	r2, r1
 8005e88:	3302      	adds	r3, #2
 8005e8a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	2103      	movs	r1, #3
 8005e98:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	401a      	ands	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	08da      	lsrs	r2, r3, #3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3208      	adds	r2, #8
 8005eac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	220f      	movs	r2, #15
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	08d2      	lsrs	r2, r2, #3
 8005ec4:	4019      	ands	r1, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3208      	adds	r2, #8
 8005eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	2103      	movs	r1, #3
 8005ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8005edc:	43db      	mvns	r3, r3
 8005ede:	401a      	ands	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	2101      	movs	r1, #1
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	401a      	ands	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	2103      	movs	r1, #3
 8005f02:	fa01 f303 	lsl.w	r3, r1, r3
 8005f06:	43db      	mvns	r3, r3
 8005f08:	401a      	ands	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	3301      	adds	r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2b0f      	cmp	r3, #15
 8005f18:	f67f af40 	bls.w	8005d9c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	40013800 	.word	0x40013800
 8005f30:	40020000 	.word	0x40020000
 8005f34:	40020400 	.word	0x40020400
 8005f38:	40020800 	.word	0x40020800
 8005f3c:	40020c00 	.word	0x40020c00
 8005f40:	40021000 	.word	0x40021000
 8005f44:	40013c00 	.word	0x40013c00

08005f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	887b      	ldrh	r3, [r7, #2]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
 8005f64:	e001      	b.n	8005f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	807b      	strh	r3, [r7, #2]
 8005f84:	4613      	mov	r3, r2
 8005f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f88:	787b      	ldrb	r3, [r7, #1]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f8e:	887a      	ldrh	r2, [r7, #2]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f94:	e003      	b.n	8005f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f96:	887b      	ldrh	r3, [r7, #2]
 8005f98:	041a      	lsls	r2, r3, #16
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	619a      	str	r2, [r3, #24]
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
	...

08005fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e12b      	b.n	8006216 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fc f80a 	bl	8001fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2224      	movs	r2, #36	@ 0x24
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800600e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006010:	f001 fa38 	bl	8007484 <HAL_RCC_GetPCLK1Freq>
 8006014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	4a81      	ldr	r2, [pc, #516]	@ (8006220 <HAL_I2C_Init+0x274>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d807      	bhi.n	8006030 <HAL_I2C_Init+0x84>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4a80      	ldr	r2, [pc, #512]	@ (8006224 <HAL_I2C_Init+0x278>)
 8006024:	4293      	cmp	r3, r2
 8006026:	bf94      	ite	ls
 8006028:	2301      	movls	r3, #1
 800602a:	2300      	movhi	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	e006      	b.n	800603e <HAL_I2C_Init+0x92>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4a7d      	ldr	r2, [pc, #500]	@ (8006228 <HAL_I2C_Init+0x27c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	bf94      	ite	ls
 8006038:	2301      	movls	r3, #1
 800603a:	2300      	movhi	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e0e7      	b.n	8006216 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4a78      	ldr	r2, [pc, #480]	@ (800622c <HAL_I2C_Init+0x280>)
 800604a:	fba2 2303 	umull	r2, r3, r2, r3
 800604e:	0c9b      	lsrs	r3, r3, #18
 8006050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	4a6a      	ldr	r2, [pc, #424]	@ (8006220 <HAL_I2C_Init+0x274>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d802      	bhi.n	8006080 <HAL_I2C_Init+0xd4>
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	3301      	adds	r3, #1
 800607e:	e009      	b.n	8006094 <HAL_I2C_Init+0xe8>
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006086:	fb02 f303 	mul.w	r3, r2, r3
 800608a:	4a69      	ldr	r2, [pc, #420]	@ (8006230 <HAL_I2C_Init+0x284>)
 800608c:	fba2 2303 	umull	r2, r3, r2, r3
 8006090:	099b      	lsrs	r3, r3, #6
 8006092:	3301      	adds	r3, #1
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	430b      	orrs	r3, r1
 800609a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80060a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	495c      	ldr	r1, [pc, #368]	@ (8006220 <HAL_I2C_Init+0x274>)
 80060b0:	428b      	cmp	r3, r1
 80060b2:	d819      	bhi.n	80060e8 <HAL_I2C_Init+0x13c>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	1e59      	subs	r1, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	fbb1 f3f3 	udiv	r3, r1, r3
 80060c2:	1c59      	adds	r1, r3, #1
 80060c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80060c8:	400b      	ands	r3, r1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <HAL_I2C_Init+0x138>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1e59      	subs	r1, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80060dc:	3301      	adds	r3, #1
 80060de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060e2:	e051      	b.n	8006188 <HAL_I2C_Init+0x1dc>
 80060e4:	2304      	movs	r3, #4
 80060e6:	e04f      	b.n	8006188 <HAL_I2C_Init+0x1dc>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d111      	bne.n	8006114 <HAL_I2C_Init+0x168>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	1e58      	subs	r0, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6859      	ldr	r1, [r3, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	440b      	add	r3, r1
 80060fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006102:	3301      	adds	r3, #1
 8006104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006108:	2b00      	cmp	r3, #0
 800610a:	bf0c      	ite	eq
 800610c:	2301      	moveq	r3, #1
 800610e:	2300      	movne	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	e012      	b.n	800613a <HAL_I2C_Init+0x18e>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	1e58      	subs	r0, r3, #1
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6859      	ldr	r1, [r3, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	440b      	add	r3, r1
 8006122:	0099      	lsls	r1, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	fbb0 f3f3 	udiv	r3, r0, r3
 800612a:	3301      	adds	r3, #1
 800612c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006130:	2b00      	cmp	r3, #0
 8006132:	bf0c      	ite	eq
 8006134:	2301      	moveq	r3, #1
 8006136:	2300      	movne	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_I2C_Init+0x196>
 800613e:	2301      	movs	r3, #1
 8006140:	e022      	b.n	8006188 <HAL_I2C_Init+0x1dc>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10e      	bne.n	8006168 <HAL_I2C_Init+0x1bc>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	1e58      	subs	r0, r3, #1
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6859      	ldr	r1, [r3, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	440b      	add	r3, r1
 8006158:	fbb0 f3f3 	udiv	r3, r0, r3
 800615c:	3301      	adds	r3, #1
 800615e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006166:	e00f      	b.n	8006188 <HAL_I2C_Init+0x1dc>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	1e58      	subs	r0, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6859      	ldr	r1, [r3, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	0099      	lsls	r1, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	fbb0 f3f3 	udiv	r3, r0, r3
 800617e:	3301      	adds	r3, #1
 8006180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006184:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	6809      	ldr	r1, [r1, #0]
 800618c:	4313      	orrs	r3, r2
 800618e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69da      	ldr	r2, [r3, #28]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80061b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6911      	ldr	r1, [r2, #16]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	68d2      	ldr	r2, [r2, #12]
 80061c2:	4311      	orrs	r1, r2
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	430b      	orrs	r3, r1
 80061ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0201 	orr.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	000186a0 	.word	0x000186a0
 8006224:	001e847f 	.word	0x001e847f
 8006228:	003d08ff 	.word	0x003d08ff
 800622c:	431bde83 	.word	0x431bde83
 8006230:	10624dd3 	.word	0x10624dd3

08006234 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e021      	b.n	800628a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2224      	movs	r2, #36	@ 0x24
 800624a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fb ff0c 	bl	800207c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	607a      	str	r2, [r7, #4]
 800629e:	461a      	mov	r2, r3
 80062a0:	460b      	mov	r3, r1
 80062a2:	817b      	strh	r3, [r7, #10]
 80062a4:	4613      	mov	r3, r2
 80062a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062a8:	f7ff fab8 	bl	800581c <HAL_GetTick>
 80062ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	f040 80e0 	bne.w	800647c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	2319      	movs	r3, #25
 80062c2:	2201      	movs	r2, #1
 80062c4:	4970      	ldr	r1, [pc, #448]	@ (8006488 <HAL_I2C_Master_Transmit+0x1f4>)
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 fa92 	bl	80067f0 <I2C_WaitOnFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80062d2:	2302      	movs	r3, #2
 80062d4:	e0d3      	b.n	800647e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_I2C_Master_Transmit+0x50>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e0cc      	b.n	800647e <HAL_I2C_Master_Transmit+0x1ea>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d007      	beq.n	800630a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0201 	orr.w	r2, r2, #1
 8006308:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006318:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2221      	movs	r2, #33	@ 0x21
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2210      	movs	r2, #16
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	893a      	ldrh	r2, [r7, #8]
 800633a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4a50      	ldr	r2, [pc, #320]	@ (800648c <HAL_I2C_Master_Transmit+0x1f8>)
 800634a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800634c:	8979      	ldrh	r1, [r7, #10]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	6a3a      	ldr	r2, [r7, #32]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 f9ca 	bl	80066ec <I2C_MasterRequestWrite>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e08d      	b.n	800647e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006362:	2300      	movs	r3, #0
 8006364:	613b      	str	r3, [r7, #16]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006378:	e066      	b.n	8006448 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	6a39      	ldr	r1, [r7, #32]
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 fb50 	bl	8006a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00d      	beq.n	80063a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638e:	2b04      	cmp	r3, #4
 8006390:	d107      	bne.n	80063a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e06b      	b.n	800647e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d11b      	bne.n	800641c <HAL_I2C_Master_Transmit+0x188>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d017      	beq.n	800641c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	6a39      	ldr	r1, [r7, #32]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fb47 	bl	8006ab4 <I2C_WaitOnBTFFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00d      	beq.n	8006448 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006430:	2b04      	cmp	r3, #4
 8006432:	d107      	bne.n	8006444 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006442:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e01a      	b.n	800647e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800644c:	2b00      	cmp	r3, #0
 800644e:	d194      	bne.n	800637a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800645e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e000      	b.n	800647e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	00100002 	.word	0x00100002
 800648c:	ffff0000 	.word	0xffff0000

08006490 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08a      	sub	sp, #40	@ 0x28
 8006494:	af02      	add	r7, sp, #8
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	607a      	str	r2, [r7, #4]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	460b      	mov	r3, r1
 800649e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80064a0:	f7ff f9bc 	bl	800581c <HAL_GetTick>
 80064a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	f040 8111 	bne.w	80066da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	2319      	movs	r3, #25
 80064be:	2201      	movs	r2, #1
 80064c0:	4988      	ldr	r1, [pc, #544]	@ (80066e4 <HAL_I2C_IsDeviceReady+0x254>)
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 f994 	bl	80067f0 <I2C_WaitOnFlagUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80064ce:	2302      	movs	r3, #2
 80064d0:	e104      	b.n	80066dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_I2C_IsDeviceReady+0x50>
 80064dc:	2302      	movs	r3, #2
 80064de:	e0fd      	b.n	80066dc <HAL_I2C_IsDeviceReady+0x24c>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d007      	beq.n	8006506 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f042 0201 	orr.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006514:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2224      	movs	r2, #36	@ 0x24
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4a70      	ldr	r2, [pc, #448]	@ (80066e8 <HAL_I2C_IsDeviceReady+0x258>)
 8006528:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006538:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2200      	movs	r2, #0
 8006542:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 f952 	bl	80067f0 <I2C_WaitOnFlagUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00d      	beq.n	800656e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800655c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006560:	d103      	bne.n	800656a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006568:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e0b6      	b.n	80066dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800656e:	897b      	ldrh	r3, [r7, #10]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	461a      	mov	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800657c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800657e:	f7ff f94d 	bl	800581c <HAL_GetTick>
 8006582:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b02      	cmp	r3, #2
 8006590:	bf0c      	ite	eq
 8006592:	2301      	moveq	r3, #1
 8006594:	2300      	movne	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065a8:	bf0c      	ite	eq
 80065aa:	2301      	moveq	r3, #1
 80065ac:	2300      	movne	r3, #0
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80065b2:	e025      	b.n	8006600 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065b4:	f7ff f932 	bl	800581c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <HAL_I2C_IsDeviceReady+0x13a>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d103      	bne.n	80065d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	22a0      	movs	r2, #160	@ 0xa0
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b02      	cmp	r3, #2
 80065de:	bf0c      	ite	eq
 80065e0:	2301      	moveq	r3, #1
 80065e2:	2300      	movne	r3, #0
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065f6:	bf0c      	ite	eq
 80065f8:	2301      	moveq	r3, #1
 80065fa:	2300      	movne	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2ba0      	cmp	r3, #160	@ 0xa0
 800660a:	d005      	beq.n	8006618 <HAL_I2C_IsDeviceReady+0x188>
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d102      	bne.n	8006618 <HAL_I2C_IsDeviceReady+0x188>
 8006612:	7dbb      	ldrb	r3, [r7, #22]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0cd      	beq.n	80065b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b02      	cmp	r3, #2
 800662c:	d129      	bne.n	8006682 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800663c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	2319      	movs	r3, #25
 800665a:	2201      	movs	r2, #1
 800665c:	4921      	ldr	r1, [pc, #132]	@ (80066e4 <HAL_I2C_IsDeviceReady+0x254>)
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 f8c6 	bl	80067f0 <I2C_WaitOnFlagUntilTimeout>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e036      	b.n	80066dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2220      	movs	r2, #32
 8006672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	e02c      	b.n	80066dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006690:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800669a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	2319      	movs	r3, #25
 80066a2:	2201      	movs	r2, #1
 80066a4:	490f      	ldr	r1, [pc, #60]	@ (80066e4 <HAL_I2C_IsDeviceReady+0x254>)
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f8a2 	bl	80067f0 <I2C_WaitOnFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e012      	b.n	80066dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	3301      	adds	r3, #1
 80066ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	f4ff af32 	bcc.w	800652a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80066da:	2302      	movs	r3, #2
  }
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3720      	adds	r7, #32
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	00100002 	.word	0x00100002
 80066e8:	ffff0000 	.word	0xffff0000

080066ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	607a      	str	r2, [r7, #4]
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	460b      	mov	r3, r1
 80066fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d006      	beq.n	8006716 <I2C_MasterRequestWrite+0x2a>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d003      	beq.n	8006716 <I2C_MasterRequestWrite+0x2a>
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006714:	d108      	bne.n	8006728 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	e00b      	b.n	8006740 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672c:	2b12      	cmp	r3, #18
 800672e:	d107      	bne.n	8006740 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800673e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f84f 	bl	80067f0 <I2C_WaitOnFlagUntilTimeout>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00d      	beq.n	8006774 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006766:	d103      	bne.n	8006770 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800676e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e035      	b.n	80067e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800677c:	d108      	bne.n	8006790 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800677e:	897b      	ldrh	r3, [r7, #10]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	461a      	mov	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800678c:	611a      	str	r2, [r3, #16]
 800678e:	e01b      	b.n	80067c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006790:	897b      	ldrh	r3, [r7, #10]
 8006792:	11db      	asrs	r3, r3, #7
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f003 0306 	and.w	r3, r3, #6
 800679a:	b2db      	uxtb	r3, r3
 800679c:	f063 030f 	orn	r3, r3, #15
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	490e      	ldr	r1, [pc, #56]	@ (80067e8 <I2C_MasterRequestWrite+0xfc>)
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 f898 	bl	80068e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e010      	b.n	80067e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80067be:	897b      	ldrh	r3, [r7, #10]
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	4907      	ldr	r1, [pc, #28]	@ (80067ec <I2C_MasterRequestWrite+0x100>)
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 f888 	bl	80068e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	00010008 	.word	0x00010008
 80067ec:	00010002 	.word	0x00010002

080067f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	4613      	mov	r3, r2
 80067fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006800:	e048      	b.n	8006894 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006808:	d044      	beq.n	8006894 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680a:	f7ff f807 	bl	800581c <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d302      	bcc.n	8006820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d139      	bne.n	8006894 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	0c1b      	lsrs	r3, r3, #16
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b01      	cmp	r3, #1
 8006828:	d10d      	bne.n	8006846 <I2C_WaitOnFlagUntilTimeout+0x56>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	43da      	mvns	r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	4013      	ands	r3, r2
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	bf0c      	ite	eq
 800683c:	2301      	moveq	r3, #1
 800683e:	2300      	movne	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	461a      	mov	r2, r3
 8006844:	e00c      	b.n	8006860 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	43da      	mvns	r2, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	4013      	ands	r3, r2
 8006852:	b29b      	uxth	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	bf0c      	ite	eq
 8006858:	2301      	moveq	r3, #1
 800685a:	2300      	movne	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	79fb      	ldrb	r3, [r7, #7]
 8006862:	429a      	cmp	r2, r3
 8006864:	d116      	bne.n	8006894 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006880:	f043 0220 	orr.w	r2, r3, #32
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e023      	b.n	80068dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	0c1b      	lsrs	r3, r3, #16
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b01      	cmp	r3, #1
 800689c:	d10d      	bne.n	80068ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	43da      	mvns	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4013      	ands	r3, r2
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bf0c      	ite	eq
 80068b0:	2301      	moveq	r3, #1
 80068b2:	2300      	movne	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	e00c      	b.n	80068d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	43da      	mvns	r2, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4013      	ands	r3, r2
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bf0c      	ite	eq
 80068cc:	2301      	moveq	r3, #1
 80068ce:	2300      	movne	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d093      	beq.n	8006802 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068f2:	e071      	b.n	80069d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006902:	d123      	bne.n	800694c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006912:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800691c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006938:	f043 0204 	orr.w	r2, r3, #4
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e067      	b.n	8006a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006952:	d041      	beq.n	80069d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006954:	f7fe ff62 	bl	800581c <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	429a      	cmp	r2, r3
 8006962:	d302      	bcc.n	800696a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d136      	bne.n	80069d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b01      	cmp	r3, #1
 8006972:	d10c      	bne.n	800698e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	43da      	mvns	r2, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	4013      	ands	r3, r2
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	bf14      	ite	ne
 8006986:	2301      	movne	r3, #1
 8006988:	2300      	moveq	r3, #0
 800698a:	b2db      	uxtb	r3, r3
 800698c:	e00b      	b.n	80069a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	43da      	mvns	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	4013      	ands	r3, r2
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	bf14      	ite	ne
 80069a0:	2301      	movne	r3, #1
 80069a2:	2300      	moveq	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d016      	beq.n	80069d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c4:	f043 0220 	orr.w	r2, r3, #32
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e021      	b.n	8006a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	0c1b      	lsrs	r3, r3, #16
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d10c      	bne.n	80069fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	43da      	mvns	r2, r3
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	4013      	ands	r3, r2
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bf14      	ite	ne
 80069f4:	2301      	movne	r3, #1
 80069f6:	2300      	moveq	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	e00b      	b.n	8006a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	43da      	mvns	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4013      	ands	r3, r2
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	bf14      	ite	ne
 8006a0e:	2301      	movne	r3, #1
 8006a10:	2300      	moveq	r3, #0
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f47f af6d 	bne.w	80068f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a30:	e034      	b.n	8006a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 f886 	bl	8006b44 <I2C_IsAcknowledgeFailed>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e034      	b.n	8006aac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a48:	d028      	beq.n	8006a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4a:	f7fe fee7 	bl	800581c <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d302      	bcc.n	8006a60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d11d      	bne.n	8006a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a6a:	2b80      	cmp	r3, #128	@ 0x80
 8006a6c:	d016      	beq.n	8006a9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a88:	f043 0220 	orr.w	r2, r3, #32
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e007      	b.n	8006aac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aa6:	2b80      	cmp	r3, #128	@ 0x80
 8006aa8:	d1c3      	bne.n	8006a32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ac0:	e034      	b.n	8006b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 f83e 	bl	8006b44 <I2C_IsAcknowledgeFailed>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e034      	b.n	8006b3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ad8:	d028      	beq.n	8006b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ada:	f7fe fe9f 	bl	800581c <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d302      	bcc.n	8006af0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11d      	bne.n	8006b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	f003 0304 	and.w	r3, r3, #4
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d016      	beq.n	8006b2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b18:	f043 0220 	orr.w	r2, r3, #32
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e007      	b.n	8006b3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d1c3      	bne.n	8006ac2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b5a:	d11b      	bne.n	8006b94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b80:	f043 0204 	orr.w	r2, r3, #4
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e000      	b.n	8006b96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
	...

08006ba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e267      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d075      	beq.n	8006cae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006bc2:	4b88      	ldr	r3, [pc, #544]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 030c 	and.w	r3, r3, #12
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d00c      	beq.n	8006be8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bce:	4b85      	ldr	r3, [pc, #532]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006bd6:	2b08      	cmp	r3, #8
 8006bd8:	d112      	bne.n	8006c00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bda:	4b82      	ldr	r3, [pc, #520]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be6:	d10b      	bne.n	8006c00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006be8:	4b7e      	ldr	r3, [pc, #504]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d05b      	beq.n	8006cac <HAL_RCC_OscConfig+0x108>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d157      	bne.n	8006cac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e242      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c08:	d106      	bne.n	8006c18 <HAL_RCC_OscConfig+0x74>
 8006c0a:	4b76      	ldr	r3, [pc, #472]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a75      	ldr	r2, [pc, #468]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	e01d      	b.n	8006c54 <HAL_RCC_OscConfig+0xb0>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c20:	d10c      	bne.n	8006c3c <HAL_RCC_OscConfig+0x98>
 8006c22:	4b70      	ldr	r3, [pc, #448]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a6f      	ldr	r2, [pc, #444]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a6c      	ldr	r2, [pc, #432]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	e00b      	b.n	8006c54 <HAL_RCC_OscConfig+0xb0>
 8006c3c:	4b69      	ldr	r3, [pc, #420]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a68      	ldr	r2, [pc, #416]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	4b66      	ldr	r3, [pc, #408]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a65      	ldr	r2, [pc, #404]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d013      	beq.n	8006c84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c5c:	f7fe fdde 	bl	800581c <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c64:	f7fe fdda 	bl	800581c <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b64      	cmp	r3, #100	@ 0x64
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e207      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c76:	4b5b      	ldr	r3, [pc, #364]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0f0      	beq.n	8006c64 <HAL_RCC_OscConfig+0xc0>
 8006c82:	e014      	b.n	8006cae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c84:	f7fe fdca 	bl	800581c <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c8c:	f7fe fdc6 	bl	800581c <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b64      	cmp	r3, #100	@ 0x64
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e1f3      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c9e:	4b51      	ldr	r3, [pc, #324]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f0      	bne.n	8006c8c <HAL_RCC_OscConfig+0xe8>
 8006caa:	e000      	b.n	8006cae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d063      	beq.n	8006d82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cba:	4b4a      	ldr	r3, [pc, #296]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f003 030c 	and.w	r3, r3, #12
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00b      	beq.n	8006cde <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cc6:	4b47      	ldr	r3, [pc, #284]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cce:	2b08      	cmp	r3, #8
 8006cd0:	d11c      	bne.n	8006d0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cd2:	4b44      	ldr	r3, [pc, #272]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d116      	bne.n	8006d0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cde:	4b41      	ldr	r3, [pc, #260]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d005      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x152>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d001      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e1c7      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	00db      	lsls	r3, r3, #3
 8006d04:	4937      	ldr	r1, [pc, #220]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d0a:	e03a      	b.n	8006d82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d020      	beq.n	8006d56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d14:	4b34      	ldr	r3, [pc, #208]	@ (8006de8 <HAL_RCC_OscConfig+0x244>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d1a:	f7fe fd7f 	bl	800581c <HAL_GetTick>
 8006d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d20:	e008      	b.n	8006d34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d22:	f7fe fd7b 	bl	800581c <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e1a8      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d34:	4b2b      	ldr	r3, [pc, #172]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0f0      	beq.n	8006d22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d40:	4b28      	ldr	r3, [pc, #160]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	4925      	ldr	r1, [pc, #148]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	600b      	str	r3, [r1, #0]
 8006d54:	e015      	b.n	8006d82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d56:	4b24      	ldr	r3, [pc, #144]	@ (8006de8 <HAL_RCC_OscConfig+0x244>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5c:	f7fe fd5e 	bl	800581c <HAL_GetTick>
 8006d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d64:	f7fe fd5a 	bl	800581c <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e187      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d76:	4b1b      	ldr	r3, [pc, #108]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f0      	bne.n	8006d64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d036      	beq.n	8006dfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d016      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d96:	4b15      	ldr	r3, [pc, #84]	@ (8006dec <HAL_RCC_OscConfig+0x248>)
 8006d98:	2201      	movs	r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d9c:	f7fe fd3e 	bl	800581c <HAL_GetTick>
 8006da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006da2:	e008      	b.n	8006db6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006da4:	f7fe fd3a 	bl	800581c <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d901      	bls.n	8006db6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e167      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006db6:	4b0b      	ldr	r3, [pc, #44]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0f0      	beq.n	8006da4 <HAL_RCC_OscConfig+0x200>
 8006dc2:	e01b      	b.n	8006dfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dc4:	4b09      	ldr	r3, [pc, #36]	@ (8006dec <HAL_RCC_OscConfig+0x248>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dca:	f7fe fd27 	bl	800581c <HAL_GetTick>
 8006dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd0:	e00e      	b.n	8006df0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dd2:	f7fe fd23 	bl	800581c <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d907      	bls.n	8006df0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e150      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
 8006de4:	40023800 	.word	0x40023800
 8006de8:	42470000 	.word	0x42470000
 8006dec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006df0:	4b88      	ldr	r3, [pc, #544]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1ea      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8097 	beq.w	8006f38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e0e:	4b81      	ldr	r3, [pc, #516]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10f      	bne.n	8006e3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60bb      	str	r3, [r7, #8]
 8006e1e:	4b7d      	ldr	r3, [pc, #500]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e22:	4a7c      	ldr	r2, [pc, #496]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e2a:	4b7a      	ldr	r3, [pc, #488]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e32:	60bb      	str	r3, [r7, #8]
 8006e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e36:	2301      	movs	r3, #1
 8006e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e3a:	4b77      	ldr	r3, [pc, #476]	@ (8007018 <HAL_RCC_OscConfig+0x474>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d118      	bne.n	8006e78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e46:	4b74      	ldr	r3, [pc, #464]	@ (8007018 <HAL_RCC_OscConfig+0x474>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a73      	ldr	r2, [pc, #460]	@ (8007018 <HAL_RCC_OscConfig+0x474>)
 8006e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e52:	f7fe fce3 	bl	800581c <HAL_GetTick>
 8006e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e58:	e008      	b.n	8006e6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e5a:	f7fe fcdf 	bl	800581c <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e10c      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e6c:	4b6a      	ldr	r3, [pc, #424]	@ (8007018 <HAL_RCC_OscConfig+0x474>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0f0      	beq.n	8006e5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d106      	bne.n	8006e8e <HAL_RCC_OscConfig+0x2ea>
 8006e80:	4b64      	ldr	r3, [pc, #400]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e84:	4a63      	ldr	r2, [pc, #396]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e8c:	e01c      	b.n	8006ec8 <HAL_RCC_OscConfig+0x324>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	d10c      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x30c>
 8006e96:	4b5f      	ldr	r3, [pc, #380]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e9c:	f043 0304 	orr.w	r3, r3, #4
 8006ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006ea8:	f043 0301 	orr.w	r3, r3, #1
 8006eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eae:	e00b      	b.n	8006ec8 <HAL_RCC_OscConfig+0x324>
 8006eb0:	4b58      	ldr	r3, [pc, #352]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb4:	4a57      	ldr	r2, [pc, #348]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006eb6:	f023 0301 	bic.w	r3, r3, #1
 8006eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ebc:	4b55      	ldr	r3, [pc, #340]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec0:	4a54      	ldr	r2, [pc, #336]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006ec2:	f023 0304 	bic.w	r3, r3, #4
 8006ec6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d015      	beq.n	8006efc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed0:	f7fe fca4 	bl	800581c <HAL_GetTick>
 8006ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed6:	e00a      	b.n	8006eee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed8:	f7fe fca0 	bl	800581c <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e0cb      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eee:	4b49      	ldr	r3, [pc, #292]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0ee      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x334>
 8006efa:	e014      	b.n	8006f26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006efc:	f7fe fc8e 	bl	800581c <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f02:	e00a      	b.n	8006f1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f04:	f7fe fc8a 	bl	800581c <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e0b5      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1ee      	bne.n	8006f04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d105      	bne.n	8006f38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f2c:	4b39      	ldr	r3, [pc, #228]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f30:	4a38      	ldr	r2, [pc, #224]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 80a1 	beq.w	8007084 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f42:	4b34      	ldr	r3, [pc, #208]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f003 030c 	and.w	r3, r3, #12
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d05c      	beq.n	8007008 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d141      	bne.n	8006fda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f56:	4b31      	ldr	r3, [pc, #196]	@ (800701c <HAL_RCC_OscConfig+0x478>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f5c:	f7fe fc5e 	bl	800581c <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f64:	f7fe fc5a 	bl	800581c <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e087      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f76:	4b27      	ldr	r3, [pc, #156]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1f0      	bne.n	8006f64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	69da      	ldr	r2, [r3, #28]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	019b      	lsls	r3, r3, #6
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f98:	085b      	lsrs	r3, r3, #1
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	041b      	lsls	r3, r3, #16
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa4:	061b      	lsls	r3, r3, #24
 8006fa6:	491b      	ldr	r1, [pc, #108]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fac:	4b1b      	ldr	r3, [pc, #108]	@ (800701c <HAL_RCC_OscConfig+0x478>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb2:	f7fe fc33 	bl	800581c <HAL_GetTick>
 8006fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fba:	f7fe fc2f 	bl	800581c <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e05c      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fcc:	4b11      	ldr	r3, [pc, #68]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0f0      	beq.n	8006fba <HAL_RCC_OscConfig+0x416>
 8006fd8:	e054      	b.n	8007084 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fda:	4b10      	ldr	r3, [pc, #64]	@ (800701c <HAL_RCC_OscConfig+0x478>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe0:	f7fe fc1c 	bl	800581c <HAL_GetTick>
 8006fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe6:	e008      	b.n	8006ffa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fe8:	f7fe fc18 	bl	800581c <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e045      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ffa:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1f0      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x444>
 8007006:	e03d      	b.n	8007084 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d107      	bne.n	8007020 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e038      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
 8007014:	40023800 	.word	0x40023800
 8007018:	40007000 	.word	0x40007000
 800701c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007020:	4b1b      	ldr	r3, [pc, #108]	@ (8007090 <HAL_RCC_OscConfig+0x4ec>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d028      	beq.n	8007080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007038:	429a      	cmp	r2, r3
 800703a:	d121      	bne.n	8007080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007046:	429a      	cmp	r2, r3
 8007048:	d11a      	bne.n	8007080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007050:	4013      	ands	r3, r2
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007056:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007058:	4293      	cmp	r3, r2
 800705a:	d111      	bne.n	8007080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	3b01      	subs	r3, #1
 800706a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800706c:	429a      	cmp	r2, r3
 800706e:	d107      	bne.n	8007080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800707c:	429a      	cmp	r2, r3
 800707e:	d001      	beq.n	8007084 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	40023800 	.word	0x40023800

08007094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e0cc      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070a8:	4b68      	ldr	r3, [pc, #416]	@ (800724c <HAL_RCC_ClockConfig+0x1b8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d90c      	bls.n	80070d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b6:	4b65      	ldr	r3, [pc, #404]	@ (800724c <HAL_RCC_ClockConfig+0x1b8>)
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070be:	4b63      	ldr	r3, [pc, #396]	@ (800724c <HAL_RCC_ClockConfig+0x1b8>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d001      	beq.n	80070d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0b8      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d020      	beq.n	800711e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070e8:	4b59      	ldr	r3, [pc, #356]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	4a58      	ldr	r2, [pc, #352]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 80070ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80070f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0308 	and.w	r3, r3, #8
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d005      	beq.n	800710c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007100:	4b53      	ldr	r3, [pc, #332]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	4a52      	ldr	r2, [pc, #328]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007106:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800710a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800710c:	4b50      	ldr	r3, [pc, #320]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	494d      	ldr	r1, [pc, #308]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 800711a:	4313      	orrs	r3, r2
 800711c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d044      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d107      	bne.n	8007142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007132:	4b47      	ldr	r3, [pc, #284]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d119      	bne.n	8007172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e07f      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d003      	beq.n	8007152 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800714e:	2b03      	cmp	r3, #3
 8007150:	d107      	bne.n	8007162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007152:	4b3f      	ldr	r3, [pc, #252]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d109      	bne.n	8007172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e06f      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007162:	4b3b      	ldr	r3, [pc, #236]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e067      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007172:	4b37      	ldr	r3, [pc, #220]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f023 0203 	bic.w	r2, r3, #3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	4934      	ldr	r1, [pc, #208]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007180:	4313      	orrs	r3, r2
 8007182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007184:	f7fe fb4a 	bl	800581c <HAL_GetTick>
 8007188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800718a:	e00a      	b.n	80071a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800718c:	f7fe fb46 	bl	800581c <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800719a:	4293      	cmp	r3, r2
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e04f      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071a2:	4b2b      	ldr	r3, [pc, #172]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f003 020c 	and.w	r2, r3, #12
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d1eb      	bne.n	800718c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071b4:	4b25      	ldr	r3, [pc, #148]	@ (800724c <HAL_RCC_ClockConfig+0x1b8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d20c      	bcs.n	80071dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071c2:	4b22      	ldr	r3, [pc, #136]	@ (800724c <HAL_RCC_ClockConfig+0x1b8>)
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ca:	4b20      	ldr	r3, [pc, #128]	@ (800724c <HAL_RCC_ClockConfig+0x1b8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d001      	beq.n	80071dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e032      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071e8:	4b19      	ldr	r3, [pc, #100]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	4916      	ldr	r1, [pc, #88]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d009      	beq.n	800721a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007206:	4b12      	ldr	r3, [pc, #72]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	490e      	ldr	r1, [pc, #56]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007216:	4313      	orrs	r3, r2
 8007218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800721a:	f000 f821 	bl	8007260 <HAL_RCC_GetSysClockFreq>
 800721e:	4602      	mov	r2, r0
 8007220:	4b0b      	ldr	r3, [pc, #44]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	091b      	lsrs	r3, r3, #4
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	490a      	ldr	r1, [pc, #40]	@ (8007254 <HAL_RCC_ClockConfig+0x1c0>)
 800722c:	5ccb      	ldrb	r3, [r1, r3]
 800722e:	fa22 f303 	lsr.w	r3, r2, r3
 8007232:	4a09      	ldr	r2, [pc, #36]	@ (8007258 <HAL_RCC_ClockConfig+0x1c4>)
 8007234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007236:	4b09      	ldr	r3, [pc, #36]	@ (800725c <HAL_RCC_ClockConfig+0x1c8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f7fb f9d2 	bl	80025e4 <HAL_InitTick>

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40023c00 	.word	0x40023c00
 8007250:	40023800 	.word	0x40023800
 8007254:	0803328c 	.word	0x0803328c
 8007258:	20000008 	.word	0x20000008
 800725c:	20000074 	.word	0x20000074

08007260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007264:	b094      	sub	sp, #80	@ 0x50
 8007266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007278:	4b79      	ldr	r3, [pc, #484]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x200>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 030c 	and.w	r3, r3, #12
 8007280:	2b08      	cmp	r3, #8
 8007282:	d00d      	beq.n	80072a0 <HAL_RCC_GetSysClockFreq+0x40>
 8007284:	2b08      	cmp	r3, #8
 8007286:	f200 80e1 	bhi.w	800744c <HAL_RCC_GetSysClockFreq+0x1ec>
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <HAL_RCC_GetSysClockFreq+0x34>
 800728e:	2b04      	cmp	r3, #4
 8007290:	d003      	beq.n	800729a <HAL_RCC_GetSysClockFreq+0x3a>
 8007292:	e0db      	b.n	800744c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007294:	4b73      	ldr	r3, [pc, #460]	@ (8007464 <HAL_RCC_GetSysClockFreq+0x204>)
 8007296:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007298:	e0db      	b.n	8007452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800729a:	4b73      	ldr	r3, [pc, #460]	@ (8007468 <HAL_RCC_GetSysClockFreq+0x208>)
 800729c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800729e:	e0d8      	b.n	8007452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072a0:	4b6f      	ldr	r3, [pc, #444]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x200>)
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072aa:	4b6d      	ldr	r3, [pc, #436]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x200>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d063      	beq.n	800737e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x200>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	099b      	lsrs	r3, r3, #6
 80072bc:	2200      	movs	r2, #0
 80072be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80072c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80072ca:	2300      	movs	r3, #0
 80072cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80072d2:	4622      	mov	r2, r4
 80072d4:	462b      	mov	r3, r5
 80072d6:	f04f 0000 	mov.w	r0, #0
 80072da:	f04f 0100 	mov.w	r1, #0
 80072de:	0159      	lsls	r1, r3, #5
 80072e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072e4:	0150      	lsls	r0, r2, #5
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4621      	mov	r1, r4
 80072ec:	1a51      	subs	r1, r2, r1
 80072ee:	6139      	str	r1, [r7, #16]
 80072f0:	4629      	mov	r1, r5
 80072f2:	eb63 0301 	sbc.w	r3, r3, r1
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	f04f 0200 	mov.w	r2, #0
 80072fc:	f04f 0300 	mov.w	r3, #0
 8007300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007304:	4659      	mov	r1, fp
 8007306:	018b      	lsls	r3, r1, #6
 8007308:	4651      	mov	r1, sl
 800730a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800730e:	4651      	mov	r1, sl
 8007310:	018a      	lsls	r2, r1, #6
 8007312:	4651      	mov	r1, sl
 8007314:	ebb2 0801 	subs.w	r8, r2, r1
 8007318:	4659      	mov	r1, fp
 800731a:	eb63 0901 	sbc.w	r9, r3, r1
 800731e:	f04f 0200 	mov.w	r2, #0
 8007322:	f04f 0300 	mov.w	r3, #0
 8007326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800732a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800732e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007332:	4690      	mov	r8, r2
 8007334:	4699      	mov	r9, r3
 8007336:	4623      	mov	r3, r4
 8007338:	eb18 0303 	adds.w	r3, r8, r3
 800733c:	60bb      	str	r3, [r7, #8]
 800733e:	462b      	mov	r3, r5
 8007340:	eb49 0303 	adc.w	r3, r9, r3
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007352:	4629      	mov	r1, r5
 8007354:	024b      	lsls	r3, r1, #9
 8007356:	4621      	mov	r1, r4
 8007358:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800735c:	4621      	mov	r1, r4
 800735e:	024a      	lsls	r2, r1, #9
 8007360:	4610      	mov	r0, r2
 8007362:	4619      	mov	r1, r3
 8007364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007366:	2200      	movs	r2, #0
 8007368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800736a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800736c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007370:	f7f9 fcf2 	bl	8000d58 <__aeabi_uldivmod>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4613      	mov	r3, r2
 800737a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800737c:	e058      	b.n	8007430 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800737e:	4b38      	ldr	r3, [pc, #224]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x200>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	099b      	lsrs	r3, r3, #6
 8007384:	2200      	movs	r2, #0
 8007386:	4618      	mov	r0, r3
 8007388:	4611      	mov	r1, r2
 800738a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800738e:	623b      	str	r3, [r7, #32]
 8007390:	2300      	movs	r3, #0
 8007392:	627b      	str	r3, [r7, #36]	@ 0x24
 8007394:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007398:	4642      	mov	r2, r8
 800739a:	464b      	mov	r3, r9
 800739c:	f04f 0000 	mov.w	r0, #0
 80073a0:	f04f 0100 	mov.w	r1, #0
 80073a4:	0159      	lsls	r1, r3, #5
 80073a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073aa:	0150      	lsls	r0, r2, #5
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4641      	mov	r1, r8
 80073b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80073b6:	4649      	mov	r1, r9
 80073b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80073bc:	f04f 0200 	mov.w	r2, #0
 80073c0:	f04f 0300 	mov.w	r3, #0
 80073c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80073c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80073cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80073d0:	ebb2 040a 	subs.w	r4, r2, sl
 80073d4:	eb63 050b 	sbc.w	r5, r3, fp
 80073d8:	f04f 0200 	mov.w	r2, #0
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	00eb      	lsls	r3, r5, #3
 80073e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073e6:	00e2      	lsls	r2, r4, #3
 80073e8:	4614      	mov	r4, r2
 80073ea:	461d      	mov	r5, r3
 80073ec:	4643      	mov	r3, r8
 80073ee:	18e3      	adds	r3, r4, r3
 80073f0:	603b      	str	r3, [r7, #0]
 80073f2:	464b      	mov	r3, r9
 80073f4:	eb45 0303 	adc.w	r3, r5, r3
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	f04f 0200 	mov.w	r2, #0
 80073fe:	f04f 0300 	mov.w	r3, #0
 8007402:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007406:	4629      	mov	r1, r5
 8007408:	028b      	lsls	r3, r1, #10
 800740a:	4621      	mov	r1, r4
 800740c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007410:	4621      	mov	r1, r4
 8007412:	028a      	lsls	r2, r1, #10
 8007414:	4610      	mov	r0, r2
 8007416:	4619      	mov	r1, r3
 8007418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800741a:	2200      	movs	r2, #0
 800741c:	61bb      	str	r3, [r7, #24]
 800741e:	61fa      	str	r2, [r7, #28]
 8007420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007424:	f7f9 fc98 	bl	8000d58 <__aeabi_uldivmod>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4613      	mov	r3, r2
 800742e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007430:	4b0b      	ldr	r3, [pc, #44]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x200>)
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	3301      	adds	r3, #1
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007440:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007444:	fbb2 f3f3 	udiv	r3, r2, r3
 8007448:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800744a:	e002      	b.n	8007452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800744c:	4b05      	ldr	r3, [pc, #20]	@ (8007464 <HAL_RCC_GetSysClockFreq+0x204>)
 800744e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007454:	4618      	mov	r0, r3
 8007456:	3750      	adds	r7, #80	@ 0x50
 8007458:	46bd      	mov	sp, r7
 800745a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800745e:	bf00      	nop
 8007460:	40023800 	.word	0x40023800
 8007464:	00f42400 	.word	0x00f42400
 8007468:	007a1200 	.word	0x007a1200

0800746c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007470:	4b03      	ldr	r3, [pc, #12]	@ (8007480 <HAL_RCC_GetHCLKFreq+0x14>)
 8007472:	681b      	ldr	r3, [r3, #0]
}
 8007474:	4618      	mov	r0, r3
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	20000008 	.word	0x20000008

08007484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007488:	f7ff fff0 	bl	800746c <HAL_RCC_GetHCLKFreq>
 800748c:	4602      	mov	r2, r0
 800748e:	4b05      	ldr	r3, [pc, #20]	@ (80074a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	0a9b      	lsrs	r3, r3, #10
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	4903      	ldr	r1, [pc, #12]	@ (80074a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800749a:	5ccb      	ldrb	r3, [r1, r3]
 800749c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	40023800 	.word	0x40023800
 80074a8:	0803329c 	.word	0x0803329c

080074ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80074b0:	f7ff ffdc 	bl	800746c <HAL_RCC_GetHCLKFreq>
 80074b4:	4602      	mov	r2, r0
 80074b6:	4b05      	ldr	r3, [pc, #20]	@ (80074cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	0b5b      	lsrs	r3, r3, #13
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	4903      	ldr	r1, [pc, #12]	@ (80074d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074c2:	5ccb      	ldrb	r3, [r1, r3]
 80074c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40023800 	.word	0x40023800
 80074d0:	0803329c 	.word	0x0803329c

080074d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	220f      	movs	r2, #15
 80074e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074e4:	4b12      	ldr	r3, [pc, #72]	@ (8007530 <HAL_RCC_GetClockConfig+0x5c>)
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f003 0203 	and.w	r2, r3, #3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80074f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007530 <HAL_RCC_GetClockConfig+0x5c>)
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007530 <HAL_RCC_GetClockConfig+0x5c>)
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007508:	4b09      	ldr	r3, [pc, #36]	@ (8007530 <HAL_RCC_GetClockConfig+0x5c>)
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	08db      	lsrs	r3, r3, #3
 800750e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007516:	4b07      	ldr	r3, [pc, #28]	@ (8007534 <HAL_RCC_GetClockConfig+0x60>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0207 	and.w	r2, r3, #7
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	601a      	str	r2, [r3, #0]
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	40023800 	.word	0x40023800
 8007534:	40023c00 	.word	0x40023c00

08007538 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e07b      	b.n	8007642 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754e:	2b00      	cmp	r3, #0
 8007550:	d108      	bne.n	8007564 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800755a:	d009      	beq.n	8007570 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	61da      	str	r2, [r3, #28]
 8007562:	e005      	b.n	8007570 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d106      	bne.n	8007590 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fa ffb6 	bl	80024fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80075b8:	431a      	orrs	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	431a      	orrs	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f4:	ea42 0103 	orr.w	r1, r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	0c1b      	lsrs	r3, r3, #16
 800760e:	f003 0104 	and.w	r1, r3, #4
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007616:	f003 0210 	and.w	r2, r3, #16
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	69da      	ldr	r2, [r3, #28]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007630:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b088      	sub	sp, #32
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	603b      	str	r3, [r7, #0]
 8007656:	4613      	mov	r3, r2
 8007658:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800765a:	f7fe f8df 	bl	800581c <HAL_GetTick>
 800765e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b01      	cmp	r3, #1
 800766e:	d001      	beq.n	8007674 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007670:	2302      	movs	r3, #2
 8007672:	e12a      	b.n	80078ca <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <HAL_SPI_Transmit+0x36>
 800767a:	88fb      	ldrh	r3, [r7, #6]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e122      	b.n	80078ca <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800768a:	2b01      	cmp	r3, #1
 800768c:	d101      	bne.n	8007692 <HAL_SPI_Transmit+0x48>
 800768e:	2302      	movs	r3, #2
 8007690:	e11b      	b.n	80078ca <HAL_SPI_Transmit+0x280>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2203      	movs	r2, #3
 800769e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	88fa      	ldrh	r2, [r7, #6]
 80076b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	88fa      	ldrh	r2, [r7, #6]
 80076b8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076e0:	d10f      	bne.n	8007702 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007700:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800770c:	2b40      	cmp	r3, #64	@ 0x40
 800770e:	d007      	beq.n	8007720 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800771e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007728:	d152      	bne.n	80077d0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <HAL_SPI_Transmit+0xee>
 8007732:	8b7b      	ldrh	r3, [r7, #26]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d145      	bne.n	80077c4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800773c:	881a      	ldrh	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007748:	1c9a      	adds	r2, r3, #2
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b01      	subs	r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800775c:	e032      	b.n	80077c4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b02      	cmp	r3, #2
 800776a:	d112      	bne.n	8007792 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007770:	881a      	ldrh	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800777c:	1c9a      	adds	r2, r3, #2
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007790:	e018      	b.n	80077c4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007792:	f7fe f843 	bl	800581c <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d803      	bhi.n	80077aa <HAL_SPI_Transmit+0x160>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077a8:	d102      	bne.n	80077b0 <HAL_SPI_Transmit+0x166>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d109      	bne.n	80077c4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e082      	b.n	80078ca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1c7      	bne.n	800775e <HAL_SPI_Transmit+0x114>
 80077ce:	e053      	b.n	8007878 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <HAL_SPI_Transmit+0x194>
 80077d8:	8b7b      	ldrh	r3, [r7, #26]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d147      	bne.n	800786e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	330c      	adds	r3, #12
 80077e8:	7812      	ldrb	r2, [r2, #0]
 80077ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007804:	e033      	b.n	800786e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b02      	cmp	r3, #2
 8007812:	d113      	bne.n	800783c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	330c      	adds	r3, #12
 800781e:	7812      	ldrb	r2, [r2, #0]
 8007820:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007830:	b29b      	uxth	r3, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	b29a      	uxth	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	86da      	strh	r2, [r3, #54]	@ 0x36
 800783a:	e018      	b.n	800786e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800783c:	f7fd ffee 	bl	800581c <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	429a      	cmp	r2, r3
 800784a:	d803      	bhi.n	8007854 <HAL_SPI_Transmit+0x20a>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007852:	d102      	bne.n	800785a <HAL_SPI_Transmit+0x210>
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d109      	bne.n	800786e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e02d      	b.n	80078ca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1c6      	bne.n	8007806 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 fbd9 	bl	8008034 <SPI_EndRxTxTransaction>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2220      	movs	r2, #32
 800788c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10a      	bne.n	80078ac <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	617b      	str	r3, [r7, #20]
 80078aa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e000      	b.n	80078ca <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80078c8:	2300      	movs	r3, #0
  }
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b088      	sub	sp, #32
 80078d6:	af02      	add	r7, sp, #8
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	603b      	str	r3, [r7, #0]
 80078de:	4613      	mov	r3, r2
 80078e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d001      	beq.n	80078f2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80078ee:	2302      	movs	r3, #2
 80078f0:	e104      	b.n	8007afc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078fa:	d112      	bne.n	8007922 <HAL_SPI_Receive+0x50>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10e      	bne.n	8007922 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2204      	movs	r2, #4
 8007908:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800790c:	88fa      	ldrh	r2, [r7, #6]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	4613      	mov	r3, r2
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	68b9      	ldr	r1, [r7, #8]
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f8f3 	bl	8007b04 <HAL_SPI_TransmitReceive>
 800791e:	4603      	mov	r3, r0
 8007920:	e0ec      	b.n	8007afc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007922:	f7fd ff7b 	bl	800581c <HAL_GetTick>
 8007926:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_SPI_Receive+0x62>
 800792e:	88fb      	ldrh	r3, [r7, #6]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e0e1      	b.n	8007afc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <HAL_SPI_Receive+0x74>
 8007942:	2302      	movs	r3, #2
 8007944:	e0da      	b.n	8007afc <HAL_SPI_Receive+0x22a>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2204      	movs	r2, #4
 8007952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	88fa      	ldrh	r2, [r7, #6]
 8007966:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	88fa      	ldrh	r2, [r7, #6]
 800796c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007994:	d10f      	bne.n	80079b6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80079b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c0:	2b40      	cmp	r3, #64	@ 0x40
 80079c2:	d007      	beq.n	80079d4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d170      	bne.n	8007abe <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80079dc:	e035      	b.n	8007a4a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d115      	bne.n	8007a18 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f103 020c 	add.w	r2, r3, #12
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f8:	7812      	ldrb	r2, [r2, #0]
 80079fa:	b2d2      	uxtb	r2, r2
 80079fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a16:	e018      	b.n	8007a4a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a18:	f7fd ff00 	bl	800581c <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d803      	bhi.n	8007a30 <HAL_SPI_Receive+0x15e>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a2e:	d102      	bne.n	8007a36 <HAL_SPI_Receive+0x164>
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d109      	bne.n	8007a4a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e058      	b.n	8007afc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1c4      	bne.n	80079de <HAL_SPI_Receive+0x10c>
 8007a54:	e038      	b.n	8007ac8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d113      	bne.n	8007a8c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6e:	b292      	uxth	r2, r2
 8007a70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a76:	1c9a      	adds	r2, r3, #2
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	3b01      	subs	r3, #1
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a8a:	e018      	b.n	8007abe <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a8c:	f7fd fec6 	bl	800581c <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d803      	bhi.n	8007aa4 <HAL_SPI_Receive+0x1d2>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007aa2:	d102      	bne.n	8007aaa <HAL_SPI_Receive+0x1d8>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d109      	bne.n	8007abe <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e01e      	b.n	8007afc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1c6      	bne.n	8007a56 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 fa4b 	bl	8007f68 <SPI_EndRxTransaction>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2220      	movs	r2, #32
 8007adc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007afa:	2300      	movs	r3, #0
  }
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08a      	sub	sp, #40	@ 0x28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b12:	2301      	movs	r3, #1
 8007b14:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b16:	f7fd fe81 	bl	800581c <HAL_GetTick>
 8007b1a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b22:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007b2a:	887b      	ldrh	r3, [r7, #2]
 8007b2c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b2e:	7ffb      	ldrb	r3, [r7, #31]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d00c      	beq.n	8007b4e <HAL_SPI_TransmitReceive+0x4a>
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b3a:	d106      	bne.n	8007b4a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d102      	bne.n	8007b4a <HAL_SPI_TransmitReceive+0x46>
 8007b44:	7ffb      	ldrb	r3, [r7, #31]
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d001      	beq.n	8007b4e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e17f      	b.n	8007e4e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d005      	beq.n	8007b60 <HAL_SPI_TransmitReceive+0x5c>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <HAL_SPI_TransmitReceive+0x5c>
 8007b5a:	887b      	ldrh	r3, [r7, #2]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e174      	b.n	8007e4e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d101      	bne.n	8007b72 <HAL_SPI_TransmitReceive+0x6e>
 8007b6e:	2302      	movs	r3, #2
 8007b70:	e16d      	b.n	8007e4e <HAL_SPI_TransmitReceive+0x34a>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d003      	beq.n	8007b8e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2205      	movs	r2, #5
 8007b8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	887a      	ldrh	r2, [r7, #2]
 8007b9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	887a      	ldrh	r2, [r7, #2]
 8007ba4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	887a      	ldrh	r2, [r7, #2]
 8007bb0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	887a      	ldrh	r2, [r7, #2]
 8007bb6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bce:	2b40      	cmp	r3, #64	@ 0x40
 8007bd0:	d007      	beq.n	8007be2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007be0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bea:	d17e      	bne.n	8007cea <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <HAL_SPI_TransmitReceive+0xf6>
 8007bf4:	8afb      	ldrh	r3, [r7, #22]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d16c      	bne.n	8007cd4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bfe:	881a      	ldrh	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0a:	1c9a      	adds	r2, r3, #2
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	3b01      	subs	r3, #1
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c1e:	e059      	b.n	8007cd4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d11b      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x162>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d016      	beq.n	8007c66 <HAL_SPI_TransmitReceive+0x162>
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d113      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c42:	881a      	ldrh	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c4e:	1c9a      	adds	r2, r3, #2
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d119      	bne.n	8007ca8 <HAL_SPI_TransmitReceive+0x1a4>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d014      	beq.n	8007ca8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c88:	b292      	uxth	r2, r2
 8007c8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c90:	1c9a      	adds	r2, r3, #2
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ca8:	f7fd fdb8 	bl	800581c <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d80d      	bhi.n	8007cd4 <HAL_SPI_TransmitReceive+0x1d0>
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cbe:	d009      	beq.n	8007cd4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e0bc      	b.n	8007e4e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1a0      	bne.n	8007c20 <HAL_SPI_TransmitReceive+0x11c>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d19b      	bne.n	8007c20 <HAL_SPI_TransmitReceive+0x11c>
 8007ce8:	e082      	b.n	8007df0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <HAL_SPI_TransmitReceive+0x1f4>
 8007cf2:	8afb      	ldrh	r3, [r7, #22]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d171      	bne.n	8007ddc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	330c      	adds	r3, #12
 8007d02:	7812      	ldrb	r2, [r2, #0]
 8007d04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d1e:	e05d      	b.n	8007ddc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d11c      	bne.n	8007d68 <HAL_SPI_TransmitReceive+0x264>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d017      	beq.n	8007d68 <HAL_SPI_TransmitReceive+0x264>
 8007d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d114      	bne.n	8007d68 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	330c      	adds	r3, #12
 8007d48:	7812      	ldrb	r2, [r2, #0]
 8007d4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d50:	1c5a      	adds	r2, r3, #1
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d119      	bne.n	8007daa <HAL_SPI_TransmitReceive+0x2a6>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d014      	beq.n	8007daa <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007da6:	2301      	movs	r3, #1
 8007da8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007daa:	f7fd fd37 	bl	800581c <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d803      	bhi.n	8007dc2 <HAL_SPI_TransmitReceive+0x2be>
 8007dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dc0:	d102      	bne.n	8007dc8 <HAL_SPI_TransmitReceive+0x2c4>
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d109      	bne.n	8007ddc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e038      	b.n	8007e4e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d19c      	bne.n	8007d20 <HAL_SPI_TransmitReceive+0x21c>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d197      	bne.n	8007d20 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007df0:	6a3a      	ldr	r2, [r7, #32]
 8007df2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 f91d 	bl	8008034 <SPI_EndRxTxTransaction>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d008      	beq.n	8007e12 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2220      	movs	r2, #32
 8007e04:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e01d      	b.n	8007e4e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	613b      	str	r3, [r7, #16]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	613b      	str	r3, [r7, #16]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	613b      	str	r3, [r7, #16]
 8007e2e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e000      	b.n	8007e4e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
  }
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3728      	adds	r7, #40	@ 0x28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	4613      	mov	r3, r2
 8007e66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e68:	f7fd fcd8 	bl	800581c <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e70:	1a9b      	subs	r3, r3, r2
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	4413      	add	r3, r2
 8007e76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e78:	f7fd fcd0 	bl	800581c <HAL_GetTick>
 8007e7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e7e:	4b39      	ldr	r3, [pc, #228]	@ (8007f64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	015b      	lsls	r3, r3, #5
 8007e84:	0d1b      	lsrs	r3, r3, #20
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	fb02 f303 	mul.w	r3, r2, r3
 8007e8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e8e:	e054      	b.n	8007f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e96:	d050      	beq.n	8007f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e98:	f7fd fcc0 	bl	800581c <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d902      	bls.n	8007eae <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d13d      	bne.n	8007f2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ebc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ec6:	d111      	bne.n	8007eec <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ed0:	d004      	beq.n	8007edc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eda:	d107      	bne.n	8007eec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007eea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ef4:	d10f      	bne.n	8007f16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e017      	b.n	8007f5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	3b01      	subs	r3, #1
 8007f38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4013      	ands	r3, r2
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	bf0c      	ite	eq
 8007f4a:	2301      	moveq	r3, #1
 8007f4c:	2300      	movne	r3, #0
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d19b      	bne.n	8007e90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20000008 	.word	0x20000008

08007f68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af02      	add	r7, sp, #8
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f7c:	d111      	bne.n	8007fa2 <SPI_EndRxTransaction+0x3a>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f86:	d004      	beq.n	8007f92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f90:	d107      	bne.n	8007fa2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fa0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007faa:	d12a      	bne.n	8008002 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fb4:	d012      	beq.n	8007fdc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2180      	movs	r1, #128	@ 0x80
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f7ff ff49 	bl	8007e58 <SPI_WaitFlagStateUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d02d      	beq.n	8008028 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd0:	f043 0220 	orr.w	r2, r3, #32
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e026      	b.n	800802a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f7ff ff36 	bl	8007e58 <SPI_WaitFlagStateUntilTimeout>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d01a      	beq.n	8008028 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff6:	f043 0220 	orr.w	r2, r3, #32
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e013      	b.n	800802a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2200      	movs	r2, #0
 800800a:	2101      	movs	r1, #1
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff ff23 	bl	8007e58 <SPI_WaitFlagStateUntilTimeout>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d007      	beq.n	8008028 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800801c:	f043 0220 	orr.w	r2, r3, #32
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e000      	b.n	800802a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af02      	add	r7, sp, #8
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2201      	movs	r2, #1
 8008048:	2102      	movs	r1, #2
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f7ff ff04 	bl	8007e58 <SPI_WaitFlagStateUntilTimeout>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d007      	beq.n	8008066 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800805a:	f043 0220 	orr.w	r2, r3, #32
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e032      	b.n	80080cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008066:	4b1b      	ldr	r3, [pc, #108]	@ (80080d4 <SPI_EndRxTxTransaction+0xa0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a1b      	ldr	r2, [pc, #108]	@ (80080d8 <SPI_EndRxTxTransaction+0xa4>)
 800806c:	fba2 2303 	umull	r2, r3, r2, r3
 8008070:	0d5b      	lsrs	r3, r3, #21
 8008072:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008076:	fb02 f303 	mul.w	r3, r2, r3
 800807a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008084:	d112      	bne.n	80080ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2200      	movs	r2, #0
 800808e:	2180      	movs	r1, #128	@ 0x80
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f7ff fee1 	bl	8007e58 <SPI_WaitFlagStateUntilTimeout>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d016      	beq.n	80080ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a0:	f043 0220 	orr.w	r2, r3, #32
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e00f      	b.n	80080cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080c2:	2b80      	cmp	r3, #128	@ 0x80
 80080c4:	d0f2      	beq.n	80080ac <SPI_EndRxTxTransaction+0x78>
 80080c6:	e000      	b.n	80080ca <SPI_EndRxTxTransaction+0x96>
        break;
 80080c8:	bf00      	nop
  }

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	20000008 	.word	0x20000008
 80080d8:	165e9f81 	.word	0x165e9f81

080080dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e041      	b.n	8008172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d106      	bne.n	8008108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f839 	bl	800817a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3304      	adds	r3, #4
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f000 f9b2 	bl	8008484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008182:	bf00      	nop
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
	...

08008190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d001      	beq.n	80081a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e044      	b.n	8008232 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0201 	orr.w	r2, r2, #1
 80081be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a1e      	ldr	r2, [pc, #120]	@ (8008240 <HAL_TIM_Base_Start_IT+0xb0>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d018      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x6c>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081d2:	d013      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x6c>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a1a      	ldr	r2, [pc, #104]	@ (8008244 <HAL_TIM_Base_Start_IT+0xb4>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d00e      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x6c>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a19      	ldr	r2, [pc, #100]	@ (8008248 <HAL_TIM_Base_Start_IT+0xb8>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d009      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x6c>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a17      	ldr	r2, [pc, #92]	@ (800824c <HAL_TIM_Base_Start_IT+0xbc>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d004      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x6c>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a16      	ldr	r2, [pc, #88]	@ (8008250 <HAL_TIM_Base_Start_IT+0xc0>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d111      	bne.n	8008220 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b06      	cmp	r3, #6
 800820c:	d010      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f042 0201 	orr.w	r2, r2, #1
 800821c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800821e:	e007      	b.n	8008230 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0201 	orr.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	40010000 	.word	0x40010000
 8008244:	40000400 	.word	0x40000400
 8008248:	40000800 	.word	0x40000800
 800824c:	40000c00 	.word	0x40000c00
 8008250:	40014000 	.word	0x40014000

08008254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d020      	beq.n	80082b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f003 0302 	and.w	r3, r3, #2
 800827c:	2b00      	cmp	r3, #0
 800827e:	d01b      	beq.n	80082b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f06f 0202 	mvn.w	r2, #2
 8008288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f8d2 	bl	8008448 <HAL_TIM_IC_CaptureCallback>
 80082a4:	e005      	b.n	80082b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f8c4 	bl	8008434 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f8d5 	bl	800845c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f003 0304 	and.w	r3, r3, #4
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d020      	beq.n	8008304 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f003 0304 	and.w	r3, r3, #4
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d01b      	beq.n	8008304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f06f 0204 	mvn.w	r2, #4
 80082d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2202      	movs	r2, #2
 80082da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f8ac 	bl	8008448 <HAL_TIM_IC_CaptureCallback>
 80082f0:	e005      	b.n	80082fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f89e 	bl	8008434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f8af 	bl	800845c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f003 0308 	and.w	r3, r3, #8
 800830a:	2b00      	cmp	r3, #0
 800830c:	d020      	beq.n	8008350 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b00      	cmp	r3, #0
 8008316:	d01b      	beq.n	8008350 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f06f 0208 	mvn.w	r2, #8
 8008320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2204      	movs	r2, #4
 8008326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	f003 0303 	and.w	r3, r3, #3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f886 	bl	8008448 <HAL_TIM_IC_CaptureCallback>
 800833c:	e005      	b.n	800834a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f878 	bl	8008434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f889 	bl	800845c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f003 0310 	and.w	r3, r3, #16
 8008356:	2b00      	cmp	r3, #0
 8008358:	d020      	beq.n	800839c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	2b00      	cmp	r3, #0
 8008362:	d01b      	beq.n	800839c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f06f 0210 	mvn.w	r2, #16
 800836c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2208      	movs	r2, #8
 8008372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f860 	bl	8008448 <HAL_TIM_IC_CaptureCallback>
 8008388:	e005      	b.n	8008396 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f852 	bl	8008434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f863 	bl	800845c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00c      	beq.n	80083c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d007      	beq.n	80083c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f06f 0201 	mvn.w	r2, #1
 80083b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7fa f850 	bl	8002460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00c      	beq.n	80083e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80083dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f8e6 	bl	80085b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00c      	beq.n	8008408 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d007      	beq.n	8008408 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f834 	bl	8008470 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f003 0320 	and.w	r3, r3, #32
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00c      	beq.n	800842c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f003 0320 	and.w	r3, r3, #32
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f06f 0220 	mvn.w	r2, #32
 8008424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f8b8 	bl	800859c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800842c:	bf00      	nop
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a3a      	ldr	r2, [pc, #232]	@ (8008580 <TIM_Base_SetConfig+0xfc>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00f      	beq.n	80084bc <TIM_Base_SetConfig+0x38>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084a2:	d00b      	beq.n	80084bc <TIM_Base_SetConfig+0x38>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a37      	ldr	r2, [pc, #220]	@ (8008584 <TIM_Base_SetConfig+0x100>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d007      	beq.n	80084bc <TIM_Base_SetConfig+0x38>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a36      	ldr	r2, [pc, #216]	@ (8008588 <TIM_Base_SetConfig+0x104>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d003      	beq.n	80084bc <TIM_Base_SetConfig+0x38>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a35      	ldr	r2, [pc, #212]	@ (800858c <TIM_Base_SetConfig+0x108>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d108      	bne.n	80084ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008580 <TIM_Base_SetConfig+0xfc>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d01b      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084dc:	d017      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a28      	ldr	r2, [pc, #160]	@ (8008584 <TIM_Base_SetConfig+0x100>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d013      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a27      	ldr	r2, [pc, #156]	@ (8008588 <TIM_Base_SetConfig+0x104>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d00f      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a26      	ldr	r2, [pc, #152]	@ (800858c <TIM_Base_SetConfig+0x108>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00b      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a25      	ldr	r2, [pc, #148]	@ (8008590 <TIM_Base_SetConfig+0x10c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d007      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a24      	ldr	r2, [pc, #144]	@ (8008594 <TIM_Base_SetConfig+0x110>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d003      	beq.n	800850e <TIM_Base_SetConfig+0x8a>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a23      	ldr	r2, [pc, #140]	@ (8008598 <TIM_Base_SetConfig+0x114>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d108      	bne.n	8008520 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4313      	orrs	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	4313      	orrs	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a0e      	ldr	r2, [pc, #56]	@ (8008580 <TIM_Base_SetConfig+0xfc>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d103      	bne.n	8008554 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	691a      	ldr	r2, [r3, #16]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b01      	cmp	r3, #1
 8008564:	d105      	bne.n	8008572 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f023 0201 	bic.w	r2, r3, #1
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	611a      	str	r2, [r3, #16]
  }
}
 8008572:	bf00      	nop
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	40010000 	.word	0x40010000
 8008584:	40000400 	.word	0x40000400
 8008588:	40000800 	.word	0x40000800
 800858c:	40000c00 	.word	0x40000c00
 8008590:	40014000 	.word	0x40014000
 8008594:	40014400 	.word	0x40014400
 8008598:	40014800 	.word	0x40014800

0800859c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80085ca:	f000 fa15 	bl	80089f8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80085ce:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80085d2:	2201      	movs	r2, #1
 80085d4:	2178      	movs	r1, #120	@ 0x78
 80085d6:	4856      	ldr	r0, [pc, #344]	@ (8008730 <SSD1306_Init+0x16c>)
 80085d8:	f7fd ff5a 	bl	8006490 <HAL_I2C_IsDeviceReady>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	e09f      	b.n	8008726 <SSD1306_Init+0x162>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80085e6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80085ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80085ec:	e002      	b.n	80085f4 <SSD1306_Init+0x30>
		p--;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	3b01      	subs	r3, #1
 80085f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1f9      	bne.n	80085ee <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80085fa:	22ae      	movs	r2, #174	@ 0xae
 80085fc:	2100      	movs	r1, #0
 80085fe:	2078      	movs	r0, #120	@ 0x78
 8008600:	f000 fa76 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8008604:	2220      	movs	r2, #32
 8008606:	2100      	movs	r1, #0
 8008608:	2078      	movs	r0, #120	@ 0x78
 800860a:	f000 fa71 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800860e:	2210      	movs	r2, #16
 8008610:	2100      	movs	r1, #0
 8008612:	2078      	movs	r0, #120	@ 0x78
 8008614:	f000 fa6c 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8008618:	22b0      	movs	r2, #176	@ 0xb0
 800861a:	2100      	movs	r1, #0
 800861c:	2078      	movs	r0, #120	@ 0x78
 800861e:	f000 fa67 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8008622:	22c8      	movs	r2, #200	@ 0xc8
 8008624:	2100      	movs	r1, #0
 8008626:	2078      	movs	r0, #120	@ 0x78
 8008628:	f000 fa62 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800862c:	2200      	movs	r2, #0
 800862e:	2100      	movs	r1, #0
 8008630:	2078      	movs	r0, #120	@ 0x78
 8008632:	f000 fa5d 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8008636:	2210      	movs	r2, #16
 8008638:	2100      	movs	r1, #0
 800863a:	2078      	movs	r0, #120	@ 0x78
 800863c:	f000 fa58 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8008640:	2240      	movs	r2, #64	@ 0x40
 8008642:	2100      	movs	r1, #0
 8008644:	2078      	movs	r0, #120	@ 0x78
 8008646:	f000 fa53 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800864a:	2281      	movs	r2, #129	@ 0x81
 800864c:	2100      	movs	r1, #0
 800864e:	2078      	movs	r0, #120	@ 0x78
 8008650:	f000 fa4e 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8008654:	22ff      	movs	r2, #255	@ 0xff
 8008656:	2100      	movs	r1, #0
 8008658:	2078      	movs	r0, #120	@ 0x78
 800865a:	f000 fa49 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800865e:	22a1      	movs	r2, #161	@ 0xa1
 8008660:	2100      	movs	r1, #0
 8008662:	2078      	movs	r0, #120	@ 0x78
 8008664:	f000 fa44 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8008668:	22a6      	movs	r2, #166	@ 0xa6
 800866a:	2100      	movs	r1, #0
 800866c:	2078      	movs	r0, #120	@ 0x78
 800866e:	f000 fa3f 	bl	8008af0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008672:	22a8      	movs	r2, #168	@ 0xa8
 8008674:	2100      	movs	r1, #0
 8008676:	2078      	movs	r0, #120	@ 0x78
 8008678:	f000 fa3a 	bl	8008af0 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 800867c:	223f      	movs	r2, #63	@ 0x3f
 800867e:	2100      	movs	r1, #0
 8008680:	2078      	movs	r0, #120	@ 0x78
 8008682:	f000 fa35 	bl	8008af0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008686:	22a4      	movs	r2, #164	@ 0xa4
 8008688:	2100      	movs	r1, #0
 800868a:	2078      	movs	r0, #120	@ 0x78
 800868c:	f000 fa30 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8008690:	22d3      	movs	r2, #211	@ 0xd3
 8008692:	2100      	movs	r1, #0
 8008694:	2078      	movs	r0, #120	@ 0x78
 8008696:	f000 fa2b 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800869a:	2200      	movs	r2, #0
 800869c:	2100      	movs	r1, #0
 800869e:	2078      	movs	r0, #120	@ 0x78
 80086a0:	f000 fa26 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80086a4:	22d5      	movs	r2, #213	@ 0xd5
 80086a6:	2100      	movs	r1, #0
 80086a8:	2078      	movs	r0, #120	@ 0x78
 80086aa:	f000 fa21 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80086ae:	22f0      	movs	r2, #240	@ 0xf0
 80086b0:	2100      	movs	r1, #0
 80086b2:	2078      	movs	r0, #120	@ 0x78
 80086b4:	f000 fa1c 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80086b8:	22d9      	movs	r2, #217	@ 0xd9
 80086ba:	2100      	movs	r1, #0
 80086bc:	2078      	movs	r0, #120	@ 0x78
 80086be:	f000 fa17 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80086c2:	2222      	movs	r2, #34	@ 0x22
 80086c4:	2100      	movs	r1, #0
 80086c6:	2078      	movs	r0, #120	@ 0x78
 80086c8:	f000 fa12 	bl	8008af0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80086cc:	22da      	movs	r2, #218	@ 0xda
 80086ce:	2100      	movs	r1, #0
 80086d0:	2078      	movs	r0, #120	@ 0x78
 80086d2:	f000 fa0d 	bl	8008af0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 80086d6:	2212      	movs	r2, #18
 80086d8:	2100      	movs	r1, #0
 80086da:	2078      	movs	r0, #120	@ 0x78
 80086dc:	f000 fa08 	bl	8008af0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80086e0:	22db      	movs	r2, #219	@ 0xdb
 80086e2:	2100      	movs	r1, #0
 80086e4:	2078      	movs	r0, #120	@ 0x78
 80086e6:	f000 fa03 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80086ea:	2220      	movs	r2, #32
 80086ec:	2100      	movs	r1, #0
 80086ee:	2078      	movs	r0, #120	@ 0x78
 80086f0:	f000 f9fe 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80086f4:	228d      	movs	r2, #141	@ 0x8d
 80086f6:	2100      	movs	r1, #0
 80086f8:	2078      	movs	r0, #120	@ 0x78
 80086fa:	f000 f9f9 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80086fe:	2214      	movs	r2, #20
 8008700:	2100      	movs	r1, #0
 8008702:	2078      	movs	r0, #120	@ 0x78
 8008704:	f000 f9f4 	bl	8008af0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8008708:	22af      	movs	r2, #175	@ 0xaf
 800870a:	2100      	movs	r1, #0
 800870c:	2078      	movs	r0, #120	@ 0x78
 800870e:	f000 f9ef 	bl	8008af0 <ssd1306_I2C_Write>
	
	/* Update screen */
	//SSD1306_UpdateScreen();
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8008712:	4b08      	ldr	r3, [pc, #32]	@ (8008734 <SSD1306_Init+0x170>)
 8008714:	2200      	movs	r2, #0
 8008716:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8008718:	4b06      	ldr	r3, [pc, #24]	@ (8008734 <SSD1306_Init+0x170>)
 800871a:	2200      	movs	r2, #0
 800871c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800871e:	4b05      	ldr	r3, [pc, #20]	@ (8008734 <SSD1306_Init+0x170>)
 8008720:	2201      	movs	r2, #1
 8008722:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8008724:	2301      	movs	r3, #1
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20000a1c 	.word	0x20000a1c
 8008734:	20000fdc 	.word	0x20000fdc

08008738 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800873e:	2300      	movs	r3, #0
 8008740:	71fb      	strb	r3, [r7, #7]
 8008742:	e01d      	b.n	8008780 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	3b50      	subs	r3, #80	@ 0x50
 8008748:	b2db      	uxtb	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	2100      	movs	r1, #0
 800874e:	2078      	movs	r0, #120	@ 0x78
 8008750:	f000 f9ce 	bl	8008af0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8008754:	2200      	movs	r2, #0
 8008756:	2100      	movs	r1, #0
 8008758:	2078      	movs	r0, #120	@ 0x78
 800875a:	f000 f9c9 	bl	8008af0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800875e:	2210      	movs	r2, #16
 8008760:	2100      	movs	r1, #0
 8008762:	2078      	movs	r0, #120	@ 0x78
 8008764:	f000 f9c4 	bl	8008af0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	01db      	lsls	r3, r3, #7
 800876c:	4a08      	ldr	r2, [pc, #32]	@ (8008790 <SSD1306_UpdateScreen+0x58>)
 800876e:	441a      	add	r2, r3
 8008770:	2380      	movs	r3, #128	@ 0x80
 8008772:	2140      	movs	r1, #64	@ 0x40
 8008774:	2078      	movs	r0, #120	@ 0x78
 8008776:	f000 f955 	bl	8008a24 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	3301      	adds	r3, #1
 800877e:	71fb      	strb	r3, [r7, #7]
 8008780:	79fb      	ldrb	r3, [r7, #7]
 8008782:	2b07      	cmp	r3, #7
 8008784:	d9de      	bls.n	8008744 <SSD1306_UpdateScreen+0xc>
	}
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20000bdc 	.word	0x20000bdc

08008794 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <SSD1306_Fill+0x14>
 80087a4:	2300      	movs	r3, #0
 80087a6:	e000      	b.n	80087aa <SSD1306_Fill+0x16>
 80087a8:	23ff      	movs	r3, #255	@ 0xff
 80087aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80087ae:	4619      	mov	r1, r3
 80087b0:	4803      	ldr	r0, [pc, #12]	@ (80087c0 <SSD1306_Fill+0x2c>)
 80087b2:	f01d f94d 	bl	8025a50 <memset>
}
 80087b6:	bf00      	nop
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20000bdc 	.word	0x20000bdc

080087c4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	80fb      	strh	r3, [r7, #6]
 80087ce:	460b      	mov	r3, r1
 80087d0:	80bb      	strh	r3, [r7, #4]
 80087d2:	4613      	mov	r3, r2
 80087d4:	70fb      	strb	r3, [r7, #3]
	if (
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80087da:	d848      	bhi.n	800886e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80087dc:	88bb      	ldrh	r3, [r7, #4]
 80087de:	2b3f      	cmp	r3, #63	@ 0x3f
 80087e0:	d845      	bhi.n	800886e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80087e2:	4b26      	ldr	r3, [pc, #152]	@ (800887c <SSD1306_DrawPixel+0xb8>)
 80087e4:	791b      	ldrb	r3, [r3, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d006      	beq.n	80087f8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80087ea:	78fb      	ldrb	r3, [r7, #3]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	bf0c      	ite	eq
 80087f0:	2301      	moveq	r3, #1
 80087f2:	2300      	movne	r3, #0
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d11a      	bne.n	8008834 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80087fe:	88fa      	ldrh	r2, [r7, #6]
 8008800:	88bb      	ldrh	r3, [r7, #4]
 8008802:	08db      	lsrs	r3, r3, #3
 8008804:	b298      	uxth	r0, r3
 8008806:	4603      	mov	r3, r0
 8008808:	01db      	lsls	r3, r3, #7
 800880a:	4413      	add	r3, r2
 800880c:	4a1c      	ldr	r2, [pc, #112]	@ (8008880 <SSD1306_DrawPixel+0xbc>)
 800880e:	5cd3      	ldrb	r3, [r2, r3]
 8008810:	b25a      	sxtb	r2, r3
 8008812:	88bb      	ldrh	r3, [r7, #4]
 8008814:	f003 0307 	and.w	r3, r3, #7
 8008818:	2101      	movs	r1, #1
 800881a:	fa01 f303 	lsl.w	r3, r1, r3
 800881e:	b25b      	sxtb	r3, r3
 8008820:	4313      	orrs	r3, r2
 8008822:	b259      	sxtb	r1, r3
 8008824:	88fa      	ldrh	r2, [r7, #6]
 8008826:	4603      	mov	r3, r0
 8008828:	01db      	lsls	r3, r3, #7
 800882a:	4413      	add	r3, r2
 800882c:	b2c9      	uxtb	r1, r1
 800882e:	4a14      	ldr	r2, [pc, #80]	@ (8008880 <SSD1306_DrawPixel+0xbc>)
 8008830:	54d1      	strb	r1, [r2, r3]
 8008832:	e01d      	b.n	8008870 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008834:	88fa      	ldrh	r2, [r7, #6]
 8008836:	88bb      	ldrh	r3, [r7, #4]
 8008838:	08db      	lsrs	r3, r3, #3
 800883a:	b298      	uxth	r0, r3
 800883c:	4603      	mov	r3, r0
 800883e:	01db      	lsls	r3, r3, #7
 8008840:	4413      	add	r3, r2
 8008842:	4a0f      	ldr	r2, [pc, #60]	@ (8008880 <SSD1306_DrawPixel+0xbc>)
 8008844:	5cd3      	ldrb	r3, [r2, r3]
 8008846:	b25a      	sxtb	r2, r3
 8008848:	88bb      	ldrh	r3, [r7, #4]
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	2101      	movs	r1, #1
 8008850:	fa01 f303 	lsl.w	r3, r1, r3
 8008854:	b25b      	sxtb	r3, r3
 8008856:	43db      	mvns	r3, r3
 8008858:	b25b      	sxtb	r3, r3
 800885a:	4013      	ands	r3, r2
 800885c:	b259      	sxtb	r1, r3
 800885e:	88fa      	ldrh	r2, [r7, #6]
 8008860:	4603      	mov	r3, r0
 8008862:	01db      	lsls	r3, r3, #7
 8008864:	4413      	add	r3, r2
 8008866:	b2c9      	uxtb	r1, r1
 8008868:	4a05      	ldr	r2, [pc, #20]	@ (8008880 <SSD1306_DrawPixel+0xbc>)
 800886a:	54d1      	strb	r1, [r2, r3]
 800886c:	e000      	b.n	8008870 <SSD1306_DrawPixel+0xac>
		return;
 800886e:	bf00      	nop
	}
}
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20000fdc 	.word	0x20000fdc
 8008880:	20000bdc 	.word	0x20000bdc

08008884 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	460a      	mov	r2, r1
 800888e:	80fb      	strh	r3, [r7, #6]
 8008890:	4613      	mov	r3, r2
 8008892:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8008894:	4a05      	ldr	r2, [pc, #20]	@ (80088ac <SSD1306_GotoXY+0x28>)
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800889a:	4a04      	ldr	r2, [pc, #16]	@ (80088ac <SSD1306_GotoXY+0x28>)
 800889c:	88bb      	ldrh	r3, [r7, #4]
 800889e:	8053      	strh	r3, [r2, #2]
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	20000fdc 	.word	0x20000fdc

080088b0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	6039      	str	r1, [r7, #0]
 80088ba:	71fb      	strb	r3, [r7, #7]
 80088bc:	4613      	mov	r3, r2
 80088be:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80088c0:	4b39      	ldr	r3, [pc, #228]	@ (80089a8 <SSD1306_Putc+0xf8>)
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	461a      	mov	r2, r3
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	4413      	add	r3, r2
	if (
 80088cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80088ce:	dc07      	bgt.n	80088e0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80088d0:	4b35      	ldr	r3, [pc, #212]	@ (80089a8 <SSD1306_Putc+0xf8>)
 80088d2:	885b      	ldrh	r3, [r3, #2]
 80088d4:	461a      	mov	r2, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80088dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80088de:	dd01      	ble.n	80088e4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	e05d      	b.n	80089a0 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]
 80088e8:	e04b      	b.n	8008982 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	3b20      	subs	r3, #32
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	7849      	ldrb	r1, [r1, #1]
 80088f6:	fb01 f303 	mul.w	r3, r1, r3
 80088fa:	4619      	mov	r1, r3
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	440b      	add	r3, r1
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	4413      	add	r3, r2
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8008908:	2300      	movs	r3, #0
 800890a:	613b      	str	r3, [r7, #16]
 800890c:	e030      	b.n	8008970 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	fa02 f303 	lsl.w	r3, r2, r3
 8008916:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d010      	beq.n	8008940 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800891e:	4b22      	ldr	r3, [pc, #136]	@ (80089a8 <SSD1306_Putc+0xf8>)
 8008920:	881a      	ldrh	r2, [r3, #0]
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	b29b      	uxth	r3, r3
 8008926:	4413      	add	r3, r2
 8008928:	b298      	uxth	r0, r3
 800892a:	4b1f      	ldr	r3, [pc, #124]	@ (80089a8 <SSD1306_Putc+0xf8>)
 800892c:	885a      	ldrh	r2, [r3, #2]
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	b29b      	uxth	r3, r3
 8008932:	4413      	add	r3, r2
 8008934:	b29b      	uxth	r3, r3
 8008936:	79ba      	ldrb	r2, [r7, #6]
 8008938:	4619      	mov	r1, r3
 800893a:	f7ff ff43 	bl	80087c4 <SSD1306_DrawPixel>
 800893e:	e014      	b.n	800896a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8008940:	4b19      	ldr	r3, [pc, #100]	@ (80089a8 <SSD1306_Putc+0xf8>)
 8008942:	881a      	ldrh	r2, [r3, #0]
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	b29b      	uxth	r3, r3
 8008948:	4413      	add	r3, r2
 800894a:	b298      	uxth	r0, r3
 800894c:	4b16      	ldr	r3, [pc, #88]	@ (80089a8 <SSD1306_Putc+0xf8>)
 800894e:	885a      	ldrh	r2, [r3, #2]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	b29b      	uxth	r3, r3
 8008954:	4413      	add	r3, r2
 8008956:	b299      	uxth	r1, r3
 8008958:	79bb      	ldrb	r3, [r7, #6]
 800895a:	2b00      	cmp	r3, #0
 800895c:	bf0c      	ite	eq
 800895e:	2301      	moveq	r3, #1
 8008960:	2300      	movne	r3, #0
 8008962:	b2db      	uxtb	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	f7ff ff2d 	bl	80087c4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	3301      	adds	r3, #1
 800896e:	613b      	str	r3, [r7, #16]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	461a      	mov	r2, r3
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	4293      	cmp	r3, r2
 800897a:	d3c8      	bcc.n	800890e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	3301      	adds	r3, #1
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	785b      	ldrb	r3, [r3, #1]
 8008986:	461a      	mov	r2, r3
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	4293      	cmp	r3, r2
 800898c:	d3ad      	bcc.n	80088ea <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800898e:	4b06      	ldr	r3, [pc, #24]	@ (80089a8 <SSD1306_Putc+0xf8>)
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	7812      	ldrb	r2, [r2, #0]
 8008996:	4413      	add	r3, r2
 8008998:	b29a      	uxth	r2, r3
 800899a:	4b03      	ldr	r3, [pc, #12]	@ (80089a8 <SSD1306_Putc+0xf8>)
 800899c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800899e:	79fb      	ldrb	r3, [r7, #7]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	20000fdc 	.word	0x20000fdc

080089ac <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	4613      	mov	r3, r2
 80089b8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80089ba:	e012      	b.n	80089e2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	79fa      	ldrb	r2, [r7, #7]
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7ff ff73 	bl	80088b0 <SSD1306_Putc>
 80089ca:	4603      	mov	r3, r0
 80089cc:	461a      	mov	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d002      	beq.n	80089dc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	e008      	b.n	80089ee <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3301      	adds	r3, #1
 80089e0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e8      	bne.n	80089bc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	781b      	ldrb	r3, [r3, #0]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80089fe:	4b08      	ldr	r3, [pc, #32]	@ (8008a20 <ssd1306_I2C_Init+0x28>)
 8008a00:	607b      	str	r3, [r7, #4]
	while(p>0)
 8008a02:	e002      	b.n	8008a0a <ssd1306_I2C_Init+0x12>
		p--;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	607b      	str	r3, [r7, #4]
	while(p>0)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1f9      	bne.n	8008a04 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8008a10:	bf00      	nop
 8008a12:	bf00      	nop
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	0003d090 	.word	0x0003d090

08008a24 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8008a24:	b590      	push	{r4, r7, lr}
 8008a26:	b0c7      	sub	sp, #284	@ 0x11c
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8008a32:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8008a36:	600a      	str	r2, [r1, #0]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a3e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8008a42:	4622      	mov	r2, r4
 8008a44:	701a      	strb	r2, [r3, #0]
 8008a46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a4a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8008a4e:	4602      	mov	r2, r0
 8008a50:	701a      	strb	r2, [r3, #0]
 8008a52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a5a:	460a      	mov	r2, r1
 8008a5c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8008a5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a66:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008a6a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8008a6e:	7812      	ldrb	r2, [r2, #0]
 8008a70:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8008a72:	2300      	movs	r3, #0
 8008a74:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8008a78:	e015      	b.n	8008aa6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8008a7a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008a7e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008a82:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	441a      	add	r2, r3
 8008a8a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008a8e:	3301      	adds	r3, #1
 8008a90:	7811      	ldrb	r1, [r2, #0]
 8008a92:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008a96:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8008a9a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8008a9c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8008aa6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008ab0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8008ab4:	8812      	ldrh	r2, [r2, #0]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d8df      	bhi.n	8008a7a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8008aba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008abe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	b299      	uxth	r1, r3
 8008ac6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008aca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	f107 020c 	add.w	r2, r7, #12
 8008ad8:	200a      	movs	r0, #10
 8008ada:	9000      	str	r0, [sp, #0]
 8008adc:	4803      	ldr	r0, [pc, #12]	@ (8008aec <ssd1306_I2C_WriteMulti+0xc8>)
 8008ade:	f7fd fbd9 	bl	8006294 <HAL_I2C_Master_Transmit>
}
 8008ae2:	bf00      	nop
 8008ae4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd90      	pop	{r4, r7, pc}
 8008aec:	20000a1c 	.word	0x20000a1c

08008af0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	4603      	mov	r3, r0
 8008af8:	71fb      	strb	r3, [r7, #7]
 8008afa:	460b      	mov	r3, r1
 8008afc:	71bb      	strb	r3, [r7, #6]
 8008afe:	4613      	mov	r3, r2
 8008b00:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8008b02:	79bb      	ldrb	r3, [r7, #6]
 8008b04:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8008b06:	797b      	ldrb	r3, [r7, #5]
 8008b08:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	b299      	uxth	r1, r3
 8008b0e:	f107 020c 	add.w	r2, r7, #12
 8008b12:	230a      	movs	r3, #10
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	2302      	movs	r3, #2
 8008b18:	4803      	ldr	r0, [pc, #12]	@ (8008b28 <ssd1306_I2C_Write+0x38>)
 8008b1a:	f7fd fbbb 	bl	8006294 <HAL_I2C_Master_Transmit>
}
 8008b1e:	bf00      	nop
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20000a1c 	.word	0x20000a1c

08008b2c <__NVIC_SetPriority>:
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4603      	mov	r3, r0
 8008b34:	6039      	str	r1, [r7, #0]
 8008b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	db0a      	blt.n	8008b56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	490c      	ldr	r1, [pc, #48]	@ (8008b78 <__NVIC_SetPriority+0x4c>)
 8008b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b4a:	0112      	lsls	r2, r2, #4
 8008b4c:	b2d2      	uxtb	r2, r2
 8008b4e:	440b      	add	r3, r1
 8008b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008b54:	e00a      	b.n	8008b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	4908      	ldr	r1, [pc, #32]	@ (8008b7c <__NVIC_SetPriority+0x50>)
 8008b5c:	79fb      	ldrb	r3, [r7, #7]
 8008b5e:	f003 030f 	and.w	r3, r3, #15
 8008b62:	3b04      	subs	r3, #4
 8008b64:	0112      	lsls	r2, r2, #4
 8008b66:	b2d2      	uxtb	r2, r2
 8008b68:	440b      	add	r3, r1
 8008b6a:	761a      	strb	r2, [r3, #24]
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	e000e100 	.word	0xe000e100
 8008b7c:	e000ed00 	.word	0xe000ed00

08008b80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008b84:	4b05      	ldr	r3, [pc, #20]	@ (8008b9c <SysTick_Handler+0x1c>)
 8008b86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008b88:	f002 fbc2 	bl	800b310 <xTaskGetSchedulerState>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d001      	beq.n	8008b96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008b92:	f003 fab9 	bl	800c108 <xPortSysTickHandler>
  }
}
 8008b96:	bf00      	nop
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	e000e010 	.word	0xe000e010

08008ba0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	f06f 0004 	mvn.w	r0, #4
 8008baa:	f7ff ffbf 	bl	8008b2c <__NVIC_SetPriority>
#endif
}
 8008bae:	bf00      	nop
 8008bb0:	bd80      	pop	{r7, pc}
	...

08008bb4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bba:	f3ef 8305 	mrs	r3, IPSR
 8008bbe:	603b      	str	r3, [r7, #0]
  return(result);
 8008bc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008bc6:	f06f 0305 	mvn.w	r3, #5
 8008bca:	607b      	str	r3, [r7, #4]
 8008bcc:	e00c      	b.n	8008be8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008bce:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf8 <osKernelInitialize+0x44>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d105      	bne.n	8008be2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008bd6:	4b08      	ldr	r3, [pc, #32]	@ (8008bf8 <osKernelInitialize+0x44>)
 8008bd8:	2201      	movs	r2, #1
 8008bda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	607b      	str	r3, [r7, #4]
 8008be0:	e002      	b.n	8008be8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008be2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008be6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008be8:	687b      	ldr	r3, [r7, #4]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	20000fe4 	.word	0x20000fe4

08008bfc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c02:	f3ef 8305 	mrs	r3, IPSR
 8008c06:	603b      	str	r3, [r7, #0]
  return(result);
 8008c08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008c0e:	f06f 0305 	mvn.w	r3, #5
 8008c12:	607b      	str	r3, [r7, #4]
 8008c14:	e010      	b.n	8008c38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c16:	4b0b      	ldr	r3, [pc, #44]	@ (8008c44 <osKernelStart+0x48>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d109      	bne.n	8008c32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c1e:	f7ff ffbf 	bl	8008ba0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008c22:	4b08      	ldr	r3, [pc, #32]	@ (8008c44 <osKernelStart+0x48>)
 8008c24:	2202      	movs	r2, #2
 8008c26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c28:	f001 fefe 	bl	800aa28 <vTaskStartScheduler>
      stat = osOK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	607b      	str	r3, [r7, #4]
 8008c30:	e002      	b.n	8008c38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c38:	687b      	ldr	r3, [r7, #4]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000fe4 	.word	0x20000fe4

08008c48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08e      	sub	sp, #56	@ 0x38
 8008c4c:	af04      	add	r7, sp, #16
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c58:	f3ef 8305 	mrs	r3, IPSR
 8008c5c:	617b      	str	r3, [r7, #20]
  return(result);
 8008c5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d17f      	bne.n	8008d64 <osThreadNew+0x11c>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d07c      	beq.n	8008d64 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008c6a:	2380      	movs	r3, #128	@ 0x80
 8008c6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008c6e:	2318      	movs	r3, #24
 8008c70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008c76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d046      	beq.n	8008d10 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <osThreadNew+0x48>
        name = attr->name;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d008      	beq.n	8008cb6 <osThreadNew+0x6e>
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	2b38      	cmp	r3, #56	@ 0x38
 8008ca8:	d805      	bhi.n	8008cb6 <osThreadNew+0x6e>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <osThreadNew+0x72>
        return (NULL);
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	e055      	b.n	8008d66 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	089b      	lsrs	r3, r3, #2
 8008cc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00f      	beq.n	8008cf2 <osThreadNew+0xaa>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8008cda:	d30a      	bcc.n	8008cf2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d006      	beq.n	8008cf2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <osThreadNew+0xaa>
        mem = 1;
 8008cec:	2301      	movs	r3, #1
 8008cee:	61bb      	str	r3, [r7, #24]
 8008cf0:	e010      	b.n	8008d14 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10c      	bne.n	8008d14 <osThreadNew+0xcc>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d108      	bne.n	8008d14 <osThreadNew+0xcc>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d104      	bne.n	8008d14 <osThreadNew+0xcc>
          mem = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	61bb      	str	r3, [r7, #24]
 8008d0e:	e001      	b.n	8008d14 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d110      	bne.n	8008d3c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d22:	9202      	str	r2, [sp, #8]
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	6a3a      	ldr	r2, [r7, #32]
 8008d2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f001 fc5b 	bl	800a5ec <xTaskCreateStatic>
 8008d36:	4603      	mov	r3, r0
 8008d38:	613b      	str	r3, [r7, #16]
 8008d3a:	e013      	b.n	8008d64 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d110      	bne.n	8008d64 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	f107 0310 	add.w	r3, r7, #16
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f001 fcab 	bl	800a6b0 <xTaskCreate>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d001      	beq.n	8008d64 <osThreadNew+0x11c>
            hTask = NULL;
 8008d60:	2300      	movs	r3, #0
 8008d62:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008d64:	693b      	ldr	r3, [r7, #16]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3728      	adds	r7, #40	@ 0x28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d76:	f3ef 8305 	mrs	r3, IPSR
 8008d7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <osDelay+0x1c>
    stat = osErrorISR;
 8008d82:	f06f 0305 	mvn.w	r3, #5
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	e007      	b.n	8008d9a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <osDelay+0x2c>
      vTaskDelay(ticks);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f001 fe11 	bl	800a9bc <vTaskDelay>
    }
  }

  return (stat);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b088      	sub	sp, #32
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008dac:	2300      	movs	r3, #0
 8008dae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008db0:	f3ef 8305 	mrs	r3, IPSR
 8008db4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008db6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d174      	bne.n	8008ea6 <osMutexNew+0x102>
    if (attr != NULL) {
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <osMutexNew+0x26>
      type = attr->attr_bits;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	61bb      	str	r3, [r7, #24]
 8008dc8:	e001      	b.n	8008dce <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <osMutexNew+0x3a>
      rmtx = 1U;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	617b      	str	r3, [r7, #20]
 8008ddc:	e001      	b.n	8008de2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	f003 0308 	and.w	r3, r3, #8
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d15c      	bne.n	8008ea6 <osMutexNew+0x102>
      mem = -1;
 8008dec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008df0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d015      	beq.n	8008e24 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d006      	beq.n	8008e0e <osMutexNew+0x6a>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	2b4f      	cmp	r3, #79	@ 0x4f
 8008e06:	d902      	bls.n	8008e0e <osMutexNew+0x6a>
          mem = 1;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	613b      	str	r3, [r7, #16]
 8008e0c:	e00c      	b.n	8008e28 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d108      	bne.n	8008e28 <osMutexNew+0x84>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d104      	bne.n	8008e28 <osMutexNew+0x84>
            mem = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	613b      	str	r3, [r7, #16]
 8008e22:	e001      	b.n	8008e28 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d112      	bne.n	8008e54 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d007      	beq.n	8008e44 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	2004      	movs	r0, #4
 8008e3c:	f000 fc93 	bl	8009766 <xQueueCreateMutexStatic>
 8008e40:	61f8      	str	r0, [r7, #28]
 8008e42:	e016      	b.n	8008e72 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	f000 fc8b 	bl	8009766 <xQueueCreateMutexStatic>
 8008e50:	61f8      	str	r0, [r7, #28]
 8008e52:	e00e      	b.n	8008e72 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10b      	bne.n	8008e72 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d004      	beq.n	8008e6a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008e60:	2004      	movs	r0, #4
 8008e62:	f000 fc68 	bl	8009736 <xQueueCreateMutex>
 8008e66:	61f8      	str	r0, [r7, #28]
 8008e68:	e003      	b.n	8008e72 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008e6a:	2001      	movs	r0, #1
 8008e6c:	f000 fc63 	bl	8009736 <xQueueCreateMutex>
 8008e70:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00c      	beq.n	8008e92 <osMutexNew+0xee>
        if (attr != NULL) {
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <osMutexNew+0xe2>
          name = attr->name;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	e001      	b.n	8008e8a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008e86:	2300      	movs	r3, #0
 8008e88:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008e8a:	68f9      	ldr	r1, [r7, #12]
 8008e8c:	69f8      	ldr	r0, [r7, #28]
 8008e8e:	f001 fb4f 	bl	800a530 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d006      	beq.n	8008ea6 <osMutexNew+0x102>
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	f043 0301 	orr.w	r3, r3, #1
 8008ea4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008ea6:	69fb      	ldr	r3, [r7, #28]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3720      	adds	r7, #32
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f023 0301 	bic.w	r3, r3, #1
 8008ec0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ece:	f3ef 8305 	mrs	r3, IPSR
 8008ed2:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ed4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008eda:	f06f 0305 	mvn.w	r3, #5
 8008ede:	617b      	str	r3, [r7, #20]
 8008ee0:	e02c      	b.n	8008f3c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d103      	bne.n	8008ef0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008ee8:	f06f 0303 	mvn.w	r3, #3
 8008eec:	617b      	str	r3, [r7, #20]
 8008eee:	e025      	b.n	8008f3c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d011      	beq.n	8008f1a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6938      	ldr	r0, [r7, #16]
 8008efa:	f000 fc84 	bl	8009806 <xQueueTakeMutexRecursive>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d01b      	beq.n	8008f3c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d003      	beq.n	8008f12 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008f0a:	f06f 0301 	mvn.w	r3, #1
 8008f0e:	617b      	str	r3, [r7, #20]
 8008f10:	e014      	b.n	8008f3c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008f12:	f06f 0302 	mvn.w	r3, #2
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	e010      	b.n	8008f3c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6938      	ldr	r0, [r7, #16]
 8008f1e:	f000 ff2b 	bl	8009d78 <xQueueSemaphoreTake>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d009      	beq.n	8008f3c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008f2e:	f06f 0301 	mvn.w	r3, #1
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	e002      	b.n	8008f3c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008f36:	f06f 0302 	mvn.w	r3, #2
 8008f3a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008f3c:	697b      	ldr	r3, [r7, #20]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b086      	sub	sp, #24
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f023 0301 	bic.w	r3, r3, #1
 8008f54:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f62:	f3ef 8305 	mrs	r3, IPSR
 8008f66:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f68:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008f6e:	f06f 0305 	mvn.w	r3, #5
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	e01f      	b.n	8008fb6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d103      	bne.n	8008f84 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008f7c:	f06f 0303 	mvn.w	r3, #3
 8008f80:	617b      	str	r3, [r7, #20]
 8008f82:	e018      	b.n	8008fb6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d009      	beq.n	8008f9e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008f8a:	6938      	ldr	r0, [r7, #16]
 8008f8c:	f000 fc06 	bl	800979c <xQueueGiveMutexRecursive>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d00f      	beq.n	8008fb6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008f96:	f06f 0302 	mvn.w	r3, #2
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	e00b      	b.n	8008fb6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	6938      	ldr	r0, [r7, #16]
 8008fa6:	f000 fc65 	bl	8009874 <xQueueGenericSend>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d002      	beq.n	8008fb6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008fb0:	f06f 0302 	mvn.w	r3, #2
 8008fb4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008fb6:	697b      	ldr	r3, [r7, #20]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08a      	sub	sp, #40	@ 0x28
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fd0:	f3ef 8305 	mrs	r3, IPSR
 8008fd4:	613b      	str	r3, [r7, #16]
  return(result);
 8008fd6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d15f      	bne.n	800909c <osMessageQueueNew+0xdc>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d05c      	beq.n	800909c <osMessageQueueNew+0xdc>
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d059      	beq.n	800909c <osMessageQueueNew+0xdc>
    mem = -1;
 8008fe8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d029      	beq.n	8009048 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d012      	beq.n	8009022 <osMessageQueueNew+0x62>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2b4f      	cmp	r3, #79	@ 0x4f
 8009002:	d90e      	bls.n	8009022 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	695a      	ldr	r2, [r3, #20]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	68b9      	ldr	r1, [r7, #8]
 8009014:	fb01 f303 	mul.w	r3, r1, r3
 8009018:	429a      	cmp	r2, r3
 800901a:	d302      	bcc.n	8009022 <osMessageQueueNew+0x62>
        mem = 1;
 800901c:	2301      	movs	r3, #1
 800901e:	61bb      	str	r3, [r7, #24]
 8009020:	e014      	b.n	800904c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d110      	bne.n	800904c <osMessageQueueNew+0x8c>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10c      	bne.n	800904c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009036:	2b00      	cmp	r3, #0
 8009038:	d108      	bne.n	800904c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d104      	bne.n	800904c <osMessageQueueNew+0x8c>
          mem = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	61bb      	str	r3, [r7, #24]
 8009046:	e001      	b.n	800904c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d10b      	bne.n	800906a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	691a      	ldr	r2, [r3, #16]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	2100      	movs	r1, #0
 800905c:	9100      	str	r1, [sp, #0]
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 fa73 	bl	800954c <xQueueGenericCreateStatic>
 8009066:	61f8      	str	r0, [r7, #28]
 8009068:	e008      	b.n	800907c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d105      	bne.n	800907c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009070:	2200      	movs	r2, #0
 8009072:	68b9      	ldr	r1, [r7, #8]
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 fae6 	bl	8009646 <xQueueGenericCreate>
 800907a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00c      	beq.n	800909c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d003      	beq.n	8009090 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	617b      	str	r3, [r7, #20]
 800908e:	e001      	b.n	8009094 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009090:	2300      	movs	r3, #0
 8009092:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009094:	6979      	ldr	r1, [r7, #20]
 8009096:	69f8      	ldr	r0, [r7, #28]
 8009098:	f001 fa4a 	bl	800a530 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800909c:	69fb      	ldr	r3, [r7, #28]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3720      	adds	r7, #32
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	603b      	str	r3, [r7, #0]
 80090b4:	4613      	mov	r3, r2
 80090b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80090bc:	2300      	movs	r3, #0
 80090be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090c0:	f3ef 8305 	mrs	r3, IPSR
 80090c4:	617b      	str	r3, [r7, #20]
  return(result);
 80090c6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d028      	beq.n	800911e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d005      	beq.n	80090de <osMessageQueuePut+0x36>
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <osMessageQueuePut+0x36>
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80090de:	f06f 0303 	mvn.w	r3, #3
 80090e2:	61fb      	str	r3, [r7, #28]
 80090e4:	e038      	b.n	8009158 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80090ea:	f107 0210 	add.w	r2, r7, #16
 80090ee:	2300      	movs	r3, #0
 80090f0:	68b9      	ldr	r1, [r7, #8]
 80090f2:	69b8      	ldr	r0, [r7, #24]
 80090f4:	f000 fcc0 	bl	8009a78 <xQueueGenericSendFromISR>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d003      	beq.n	8009106 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80090fe:	f06f 0302 	mvn.w	r3, #2
 8009102:	61fb      	str	r3, [r7, #28]
 8009104:	e028      	b.n	8009158 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d025      	beq.n	8009158 <osMessageQueuePut+0xb0>
 800910c:	4b15      	ldr	r3, [pc, #84]	@ (8009164 <osMessageQueuePut+0xbc>)
 800910e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	e01c      	b.n	8009158 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <osMessageQueuePut+0x82>
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d103      	bne.n	8009132 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800912a:	f06f 0303 	mvn.w	r3, #3
 800912e:	61fb      	str	r3, [r7, #28]
 8009130:	e012      	b.n	8009158 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009132:	2300      	movs	r3, #0
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	68b9      	ldr	r1, [r7, #8]
 8009138:	69b8      	ldr	r0, [r7, #24]
 800913a:	f000 fb9b 	bl	8009874 <xQueueGenericSend>
 800913e:	4603      	mov	r3, r0
 8009140:	2b01      	cmp	r3, #1
 8009142:	d009      	beq.n	8009158 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800914a:	f06f 0301 	mvn.w	r3, #1
 800914e:	61fb      	str	r3, [r7, #28]
 8009150:	e002      	b.n	8009158 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009152:	f06f 0302 	mvn.w	r3, #2
 8009156:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009158:	69fb      	ldr	r3, [r7, #28]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3720      	adds	r7, #32
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	e000ed04 	.word	0xe000ed04

08009168 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009168:	b580      	push	{r7, lr}
 800916a:	b088      	sub	sp, #32
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800917a:	2300      	movs	r3, #0
 800917c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800917e:	f3ef 8305 	mrs	r3, IPSR
 8009182:	617b      	str	r3, [r7, #20]
  return(result);
 8009184:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009186:	2b00      	cmp	r3, #0
 8009188:	d028      	beq.n	80091dc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d005      	beq.n	800919c <osMessageQueueGet+0x34>
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <osMessageQueueGet+0x34>
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800919c:	f06f 0303 	mvn.w	r3, #3
 80091a0:	61fb      	str	r3, [r7, #28]
 80091a2:	e037      	b.n	8009214 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80091a4:	2300      	movs	r3, #0
 80091a6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80091a8:	f107 0310 	add.w	r3, r7, #16
 80091ac:	461a      	mov	r2, r3
 80091ae:	68b9      	ldr	r1, [r7, #8]
 80091b0:	69b8      	ldr	r0, [r7, #24]
 80091b2:	f000 ffd5 	bl	800a160 <xQueueReceiveFromISR>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d003      	beq.n	80091c4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80091bc:	f06f 0302 	mvn.w	r3, #2
 80091c0:	61fb      	str	r3, [r7, #28]
 80091c2:	e027      	b.n	8009214 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d024      	beq.n	8009214 <osMessageQueueGet+0xac>
 80091ca:	4b15      	ldr	r3, [pc, #84]	@ (8009220 <osMessageQueueGet+0xb8>)
 80091cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	e01b      	b.n	8009214 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d002      	beq.n	80091e8 <osMessageQueueGet+0x80>
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d103      	bne.n	80091f0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80091e8:	f06f 0303 	mvn.w	r3, #3
 80091ec:	61fb      	str	r3, [r7, #28]
 80091ee:	e011      	b.n	8009214 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	68b9      	ldr	r1, [r7, #8]
 80091f4:	69b8      	ldr	r0, [r7, #24]
 80091f6:	f000 fcdd 	bl	8009bb4 <xQueueReceive>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d009      	beq.n	8009214 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009206:	f06f 0301 	mvn.w	r3, #1
 800920a:	61fb      	str	r3, [r7, #28]
 800920c:	e002      	b.n	8009214 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800920e:	f06f 0302 	mvn.w	r3, #2
 8009212:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009214:	69fb      	ldr	r3, [r7, #28]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3720      	adds	r7, #32
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	e000ed04 	.word	0xe000ed04

08009224 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d102      	bne.n	800923c <osMessageQueueGetCount+0x18>
    count = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	617b      	str	r3, [r7, #20]
 800923a:	e00e      	b.n	800925a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800923c:	f3ef 8305 	mrs	r3, IPSR
 8009240:	60fb      	str	r3, [r7, #12]
  return(result);
 8009242:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009244:	2b00      	cmp	r3, #0
 8009246:	d004      	beq.n	8009252 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009248:	6938      	ldr	r0, [r7, #16]
 800924a:	f001 f82a 	bl	800a2a2 <uxQueueMessagesWaitingFromISR>
 800924e:	6178      	str	r0, [r7, #20]
 8009250:	e003      	b.n	800925a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009252:	6938      	ldr	r0, [r7, #16]
 8009254:	f001 f806 	bl	800a264 <uxQueueMessagesWaiting>
 8009258:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800925a:	697b      	ldr	r3, [r7, #20]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009270:	f3ef 8305 	mrs	r3, IPSR
 8009274:	60fb      	str	r3, [r7, #12]
  return(result);
 8009276:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800927c:	f06f 0305 	mvn.w	r3, #5
 8009280:	617b      	str	r3, [r7, #20]
 8009282:	e00c      	b.n	800929e <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d103      	bne.n	8009292 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800928a:	f06f 0303 	mvn.w	r3, #3
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	e005      	b.n	800929e <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 8009292:	2300      	movs	r3, #0
 8009294:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8009296:	2100      	movs	r1, #0
 8009298:	6938      	ldr	r0, [r7, #16]
 800929a:	f000 f8ed 	bl	8009478 <xQueueGenericReset>
  }

  return (stat);
 800929e:	697b      	ldr	r3, [r7, #20]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4a07      	ldr	r2, [pc, #28]	@ (80092d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80092b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	4a06      	ldr	r2, [pc, #24]	@ (80092d8 <vApplicationGetIdleTaskMemory+0x30>)
 80092be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2280      	movs	r2, #128	@ 0x80
 80092c4:	601a      	str	r2, [r3, #0]
}
 80092c6:	bf00      	nop
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	20000fe8 	.word	0x20000fe8
 80092d8:	20001168 	.word	0x20001168

080092dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4a07      	ldr	r2, [pc, #28]	@ (8009308 <vApplicationGetTimerTaskMemory+0x2c>)
 80092ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	4a06      	ldr	r2, [pc, #24]	@ (800930c <vApplicationGetTimerTaskMemory+0x30>)
 80092f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80092fa:	601a      	str	r2, [r3, #0]
}
 80092fc:	bf00      	nop
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	20001368 	.word	0x20001368
 800930c:	200014e8 	.word	0x200014e8

08009310 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f103 0208 	add.w	r2, r3, #8
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009328:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f103 0208 	add.w	r2, r3, #8
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f103 0208 	add.w	r2, r3, #8
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800936a:	b480      	push	{r7}
 800936c:	b085      	sub	sp, #20
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	689a      	ldr	r2, [r3, #8]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	1c5a      	adds	r2, r3, #1
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	601a      	str	r2, [r3, #0]
}
 80093a6:	bf00      	nop
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093b2:	b480      	push	{r7}
 80093b4:	b085      	sub	sp, #20
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093c8:	d103      	bne.n	80093d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	e00c      	b.n	80093ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3308      	adds	r3, #8
 80093d6:	60fb      	str	r3, [r7, #12]
 80093d8:	e002      	b.n	80093e0 <vListInsert+0x2e>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d2f6      	bcs.n	80093da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	601a      	str	r2, [r3, #0]
}
 8009418:	bf00      	nop
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	6892      	ldr	r2, [r2, #8]
 800943a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	6852      	ldr	r2, [r2, #4]
 8009444:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	429a      	cmp	r2, r3
 800944e:	d103      	bne.n	8009458 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	689a      	ldr	r2, [r3, #8]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	1e5a      	subs	r2, r3, #1
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10b      	bne.n	80094a4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800949e:	bf00      	nop
 80094a0:	bf00      	nop
 80094a2:	e7fd      	b.n	80094a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80094a4:	f002 fda0 	bl	800bfe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094b0:	68f9      	ldr	r1, [r7, #12]
 80094b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80094b4:	fb01 f303 	mul.w	r3, r1, r3
 80094b8:	441a      	add	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094d4:	3b01      	subs	r3, #1
 80094d6:	68f9      	ldr	r1, [r7, #12]
 80094d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80094da:	fb01 f303 	mul.w	r3, r1, r3
 80094de:	441a      	add	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	22ff      	movs	r2, #255	@ 0xff
 80094e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	22ff      	movs	r2, #255	@ 0xff
 80094f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d114      	bne.n	8009524 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d01a      	beq.n	8009538 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3310      	adds	r3, #16
 8009506:	4618      	mov	r0, r3
 8009508:	f001 fd2c 	bl	800af64 <xTaskRemoveFromEventList>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d012      	beq.n	8009538 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009512:	4b0d      	ldr	r3, [pc, #52]	@ (8009548 <xQueueGenericReset+0xd0>)
 8009514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	e009      	b.n	8009538 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3310      	adds	r3, #16
 8009528:	4618      	mov	r0, r3
 800952a:	f7ff fef1 	bl	8009310 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	3324      	adds	r3, #36	@ 0x24
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff feec 	bl	8009310 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009538:	f002 fd88 	bl	800c04c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800953c:	2301      	movs	r3, #1
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	e000ed04 	.word	0xe000ed04

0800954c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08e      	sub	sp, #56	@ 0x38
 8009550:	af02      	add	r7, sp, #8
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10b      	bne.n	8009578 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	e7fd      	b.n	8009574 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10b      	bne.n	8009596 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009590:	bf00      	nop
 8009592:	bf00      	nop
 8009594:	e7fd      	b.n	8009592 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <xQueueGenericCreateStatic+0x56>
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <xQueueGenericCreateStatic+0x5a>
 80095a2:	2301      	movs	r3, #1
 80095a4:	e000      	b.n	80095a8 <xQueueGenericCreateStatic+0x5c>
 80095a6:	2300      	movs	r3, #0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10b      	bne.n	80095c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	623b      	str	r3, [r7, #32]
}
 80095be:	bf00      	nop
 80095c0:	bf00      	nop
 80095c2:	e7fd      	b.n	80095c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d102      	bne.n	80095d0 <xQueueGenericCreateStatic+0x84>
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <xQueueGenericCreateStatic+0x88>
 80095d0:	2301      	movs	r3, #1
 80095d2:	e000      	b.n	80095d6 <xQueueGenericCreateStatic+0x8a>
 80095d4:	2300      	movs	r3, #0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10b      	bne.n	80095f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80095da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	61fb      	str	r3, [r7, #28]
}
 80095ec:	bf00      	nop
 80095ee:	bf00      	nop
 80095f0:	e7fd      	b.n	80095ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095f2:	2350      	movs	r3, #80	@ 0x50
 80095f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2b50      	cmp	r3, #80	@ 0x50
 80095fa:	d00b      	beq.n	8009614 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	61bb      	str	r3, [r7, #24]
}
 800960e:	bf00      	nop
 8009610:	bf00      	nop
 8009612:	e7fd      	b.n	8009610 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009614:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800961a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00d      	beq.n	800963c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009628:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800962c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	4613      	mov	r3, r2
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	68b9      	ldr	r1, [r7, #8]
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f000 f840 	bl	80096bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800963c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800963e:	4618      	mov	r0, r3
 8009640:	3730      	adds	r7, #48	@ 0x30
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009646:	b580      	push	{r7, lr}
 8009648:	b08a      	sub	sp, #40	@ 0x28
 800964a:	af02      	add	r7, sp, #8
 800964c:	60f8      	str	r0, [r7, #12]
 800964e:	60b9      	str	r1, [r7, #8]
 8009650:	4613      	mov	r3, r2
 8009652:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10b      	bne.n	8009672 <xQueueGenericCreate+0x2c>
	__asm volatile
 800965a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	613b      	str	r3, [r7, #16]
}
 800966c:	bf00      	nop
 800966e:	bf00      	nop
 8009670:	e7fd      	b.n	800966e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	fb02 f303 	mul.w	r3, r2, r3
 800967a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	3350      	adds	r3, #80	@ 0x50
 8009680:	4618      	mov	r0, r3
 8009682:	f002 fdd3 	bl	800c22c <pvPortMalloc>
 8009686:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d011      	beq.n	80096b2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	3350      	adds	r3, #80	@ 0x50
 8009696:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096a0:	79fa      	ldrb	r2, [r7, #7]
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	4613      	mov	r3, r2
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 f805 	bl	80096bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096b2:	69bb      	ldr	r3, [r7, #24]
	}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3720      	adds	r7, #32
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d103      	bne.n	80096d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	69ba      	ldr	r2, [r7, #24]
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	e002      	b.n	80096de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096ea:	2101      	movs	r1, #1
 80096ec:	69b8      	ldr	r0, [r7, #24]
 80096ee:	f7ff fec3 	bl	8009478 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80096fa:	bf00      	nop
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00e      	beq.n	800972e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009722:	2300      	movs	r3, #0
 8009724:	2200      	movs	r2, #0
 8009726:	2100      	movs	r1, #0
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f8a3 	bl	8009874 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009736:	b580      	push	{r7, lr}
 8009738:	b086      	sub	sp, #24
 800973a:	af00      	add	r7, sp, #0
 800973c:	4603      	mov	r3, r0
 800973e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009740:	2301      	movs	r3, #1
 8009742:	617b      	str	r3, [r7, #20]
 8009744:	2300      	movs	r3, #0
 8009746:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009748:	79fb      	ldrb	r3, [r7, #7]
 800974a:	461a      	mov	r2, r3
 800974c:	6939      	ldr	r1, [r7, #16]
 800974e:	6978      	ldr	r0, [r7, #20]
 8009750:	f7ff ff79 	bl	8009646 <xQueueGenericCreate>
 8009754:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f7ff ffd3 	bl	8009702 <prvInitialiseMutex>

		return xNewQueue;
 800975c:	68fb      	ldr	r3, [r7, #12]
	}
 800975e:	4618      	mov	r0, r3
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009766:	b580      	push	{r7, lr}
 8009768:	b088      	sub	sp, #32
 800976a:	af02      	add	r7, sp, #8
 800976c:	4603      	mov	r3, r0
 800976e:	6039      	str	r1, [r7, #0]
 8009770:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009772:	2301      	movs	r3, #1
 8009774:	617b      	str	r3, [r7, #20]
 8009776:	2300      	movs	r3, #0
 8009778:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2200      	movs	r2, #0
 8009782:	6939      	ldr	r1, [r7, #16]
 8009784:	6978      	ldr	r0, [r7, #20]
 8009786:	f7ff fee1 	bl	800954c <xQueueGenericCreateStatic>
 800978a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f7ff ffb8 	bl	8009702 <prvInitialiseMutex>

		return xNewQueue;
 8009792:	68fb      	ldr	r3, [r7, #12]
	}
 8009794:	4618      	mov	r0, r3
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800979c:	b590      	push	{r4, r7, lr}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10b      	bne.n	80097c6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	60fb      	str	r3, [r7, #12]
}
 80097c0:	bf00      	nop
 80097c2:	bf00      	nop
 80097c4:	e7fd      	b.n	80097c2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	689c      	ldr	r4, [r3, #8]
 80097ca:	f001 fd91 	bl	800b2f0 <xTaskGetCurrentTaskHandle>
 80097ce:	4603      	mov	r3, r0
 80097d0:	429c      	cmp	r4, r3
 80097d2:	d111      	bne.n	80097f8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	1e5a      	subs	r2, r3, #1
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d105      	bne.n	80097f2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80097e6:	2300      	movs	r3, #0
 80097e8:	2200      	movs	r2, #0
 80097ea:	2100      	movs	r1, #0
 80097ec:	6938      	ldr	r0, [r7, #16]
 80097ee:	f000 f841 	bl	8009874 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80097f2:	2301      	movs	r3, #1
 80097f4:	617b      	str	r3, [r7, #20]
 80097f6:	e001      	b.n	80097fc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80097f8:	2300      	movs	r3, #0
 80097fa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80097fc:	697b      	ldr	r3, [r7, #20]
	}
 80097fe:	4618      	mov	r0, r3
 8009800:	371c      	adds	r7, #28
 8009802:	46bd      	mov	sp, r7
 8009804:	bd90      	pop	{r4, r7, pc}

08009806 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009806:	b590      	push	{r4, r7, lr}
 8009808:	b087      	sub	sp, #28
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10b      	bne.n	8009832 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	60fb      	str	r3, [r7, #12]
}
 800982c:	bf00      	nop
 800982e:	bf00      	nop
 8009830:	e7fd      	b.n	800982e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	689c      	ldr	r4, [r3, #8]
 8009836:	f001 fd5b 	bl	800b2f0 <xTaskGetCurrentTaskHandle>
 800983a:	4603      	mov	r3, r0
 800983c:	429c      	cmp	r4, r3
 800983e:	d107      	bne.n	8009850 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800984a:	2301      	movs	r3, #1
 800984c:	617b      	str	r3, [r7, #20]
 800984e:	e00c      	b.n	800986a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6938      	ldr	r0, [r7, #16]
 8009854:	f000 fa90 	bl	8009d78 <xQueueSemaphoreTake>
 8009858:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d004      	beq.n	800986a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800986a:	697b      	ldr	r3, [r7, #20]
	}
 800986c:	4618      	mov	r0, r3
 800986e:	371c      	adds	r7, #28
 8009870:	46bd      	mov	sp, r7
 8009872:	bd90      	pop	{r4, r7, pc}

08009874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08e      	sub	sp, #56	@ 0x38
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
 8009880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009882:	2300      	movs	r3, #0
 8009884:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800988a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10b      	bne.n	80098a8 <xQueueGenericSend+0x34>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	e7fd      	b.n	80098a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d103      	bne.n	80098b6 <xQueueGenericSend+0x42>
 80098ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d101      	bne.n	80098ba <xQueueGenericSend+0x46>
 80098b6:	2301      	movs	r3, #1
 80098b8:	e000      	b.n	80098bc <xQueueGenericSend+0x48>
 80098ba:	2300      	movs	r3, #0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10b      	bne.n	80098d8 <xQueueGenericSend+0x64>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80098d2:	bf00      	nop
 80098d4:	bf00      	nop
 80098d6:	e7fd      	b.n	80098d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d103      	bne.n	80098e6 <xQueueGenericSend+0x72>
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d101      	bne.n	80098ea <xQueueGenericSend+0x76>
 80098e6:	2301      	movs	r3, #1
 80098e8:	e000      	b.n	80098ec <xQueueGenericSend+0x78>
 80098ea:	2300      	movs	r3, #0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10b      	bne.n	8009908 <xQueueGenericSend+0x94>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	623b      	str	r3, [r7, #32]
}
 8009902:	bf00      	nop
 8009904:	bf00      	nop
 8009906:	e7fd      	b.n	8009904 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009908:	f001 fd02 	bl	800b310 <xTaskGetSchedulerState>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d102      	bne.n	8009918 <xQueueGenericSend+0xa4>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d101      	bne.n	800991c <xQueueGenericSend+0xa8>
 8009918:	2301      	movs	r3, #1
 800991a:	e000      	b.n	800991e <xQueueGenericSend+0xaa>
 800991c:	2300      	movs	r3, #0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10b      	bne.n	800993a <xQueueGenericSend+0xc6>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	61fb      	str	r3, [r7, #28]
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop
 8009938:	e7fd      	b.n	8009936 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800993a:	f002 fb55 	bl	800bfe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800993e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009946:	429a      	cmp	r2, r3
 8009948:	d302      	bcc.n	8009950 <xQueueGenericSend+0xdc>
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2b02      	cmp	r3, #2
 800994e:	d129      	bne.n	80099a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	68b9      	ldr	r1, [r7, #8]
 8009954:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009956:	f000 fcdb 	bl	800a310 <prvCopyDataToQueue>
 800995a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800995c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009960:	2b00      	cmp	r3, #0
 8009962:	d010      	beq.n	8009986 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	3324      	adds	r3, #36	@ 0x24
 8009968:	4618      	mov	r0, r3
 800996a:	f001 fafb 	bl	800af64 <xTaskRemoveFromEventList>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d013      	beq.n	800999c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009974:	4b3f      	ldr	r3, [pc, #252]	@ (8009a74 <xQueueGenericSend+0x200>)
 8009976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	e00a      	b.n	800999c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009988:	2b00      	cmp	r3, #0
 800998a:	d007      	beq.n	800999c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800998c:	4b39      	ldr	r3, [pc, #228]	@ (8009a74 <xQueueGenericSend+0x200>)
 800998e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800999c:	f002 fb56 	bl	800c04c <vPortExitCritical>
				return pdPASS;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e063      	b.n	8009a6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d103      	bne.n	80099b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099aa:	f002 fb4f 	bl	800c04c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	e05c      	b.n	8009a6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d106      	bne.n	80099c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099b8:	f107 0314 	add.w	r3, r7, #20
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 fb35 	bl	800b02c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099c2:	2301      	movs	r3, #1
 80099c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099c6:	f002 fb41 	bl	800c04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099ca:	f001 f89d 	bl	800ab08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099ce:	f002 fb0b 	bl	800bfe8 <vPortEnterCritical>
 80099d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099d8:	b25b      	sxtb	r3, r3
 80099da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099de:	d103      	bne.n	80099e8 <xQueueGenericSend+0x174>
 80099e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099ee:	b25b      	sxtb	r3, r3
 80099f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099f4:	d103      	bne.n	80099fe <xQueueGenericSend+0x18a>
 80099f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099fe:	f002 fb25 	bl	800c04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a02:	1d3a      	adds	r2, r7, #4
 8009a04:	f107 0314 	add.w	r3, r7, #20
 8009a08:	4611      	mov	r1, r2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f001 fb24 	bl	800b058 <xTaskCheckForTimeOut>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d124      	bne.n	8009a60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a18:	f000 fd72 	bl	800a500 <prvIsQueueFull>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d018      	beq.n	8009a54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a24:	3310      	adds	r3, #16
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	4611      	mov	r1, r2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f001 fa48 	bl	800aec0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a32:	f000 fcfd 	bl	800a430 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a36:	f001 f875 	bl	800ab24 <xTaskResumeAll>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f47f af7c 	bne.w	800993a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009a42:	4b0c      	ldr	r3, [pc, #48]	@ (8009a74 <xQueueGenericSend+0x200>)
 8009a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a48:	601a      	str	r2, [r3, #0]
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	e772      	b.n	800993a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a56:	f000 fceb 	bl	800a430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a5a:	f001 f863 	bl	800ab24 <xTaskResumeAll>
 8009a5e:	e76c      	b.n	800993a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a62:	f000 fce5 	bl	800a430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a66:	f001 f85d 	bl	800ab24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3738      	adds	r7, #56	@ 0x38
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	e000ed04 	.word	0xe000ed04

08009a78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b090      	sub	sp, #64	@ 0x40
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
 8009a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10b      	bne.n	8009aa8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009aa2:	bf00      	nop
 8009aa4:	bf00      	nop
 8009aa6:	e7fd      	b.n	8009aa4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d103      	bne.n	8009ab6 <xQueueGenericSendFromISR+0x3e>
 8009aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d101      	bne.n	8009aba <xQueueGenericSendFromISR+0x42>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e000      	b.n	8009abc <xQueueGenericSendFromISR+0x44>
 8009aba:	2300      	movs	r3, #0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d10b      	bne.n	8009ad8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009ad2:	bf00      	nop
 8009ad4:	bf00      	nop
 8009ad6:	e7fd      	b.n	8009ad4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d103      	bne.n	8009ae6 <xQueueGenericSendFromISR+0x6e>
 8009ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d101      	bne.n	8009aea <xQueueGenericSendFromISR+0x72>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e000      	b.n	8009aec <xQueueGenericSendFromISR+0x74>
 8009aea:	2300      	movs	r3, #0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10b      	bne.n	8009b08 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	623b      	str	r3, [r7, #32]
}
 8009b02:	bf00      	nop
 8009b04:	bf00      	nop
 8009b06:	e7fd      	b.n	8009b04 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b08:	f002 fb4e 	bl	800c1a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b0c:	f3ef 8211 	mrs	r2, BASEPRI
 8009b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	61fa      	str	r2, [r7, #28]
 8009b22:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b24:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b26:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d302      	bcc.n	8009b3a <xQueueGenericSendFromISR+0xc2>
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d12f      	bne.n	8009b9a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	68b9      	ldr	r1, [r7, #8]
 8009b4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b50:	f000 fbde 	bl	800a310 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009b58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b5c:	d112      	bne.n	8009b84 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d016      	beq.n	8009b94 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b68:	3324      	adds	r3, #36	@ 0x24
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f001 f9fa 	bl	800af64 <xTaskRemoveFromEventList>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00e      	beq.n	8009b94 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00b      	beq.n	8009b94 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	e007      	b.n	8009b94 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009b88:	3301      	adds	r3, #1
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	b25a      	sxtb	r2, r3
 8009b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009b94:	2301      	movs	r3, #1
 8009b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009b98:	e001      	b.n	8009b9e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ba8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3740      	adds	r7, #64	@ 0x40
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08c      	sub	sp, #48	@ 0x30
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10b      	bne.n	8009be6 <xQueueReceive+0x32>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	623b      	str	r3, [r7, #32]
}
 8009be0:	bf00      	nop
 8009be2:	bf00      	nop
 8009be4:	e7fd      	b.n	8009be2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d103      	bne.n	8009bf4 <xQueueReceive+0x40>
 8009bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d101      	bne.n	8009bf8 <xQueueReceive+0x44>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e000      	b.n	8009bfa <xQueueReceive+0x46>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10b      	bne.n	8009c16 <xQueueReceive+0x62>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	61fb      	str	r3, [r7, #28]
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	e7fd      	b.n	8009c12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c16:	f001 fb7b 	bl	800b310 <xTaskGetSchedulerState>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d102      	bne.n	8009c26 <xQueueReceive+0x72>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <xQueueReceive+0x76>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e000      	b.n	8009c2c <xQueueReceive+0x78>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10b      	bne.n	8009c48 <xQueueReceive+0x94>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	61bb      	str	r3, [r7, #24]
}
 8009c42:	bf00      	nop
 8009c44:	bf00      	nop
 8009c46:	e7fd      	b.n	8009c44 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c48:	f002 f9ce 	bl	800bfe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d01f      	beq.n	8009c98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c58:	68b9      	ldr	r1, [r7, #8]
 8009c5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c5c:	f000 fbc2 	bl	800a3e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c62:	1e5a      	subs	r2, r3, #1
 8009c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00f      	beq.n	8009c90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c72:	3310      	adds	r3, #16
 8009c74:	4618      	mov	r0, r3
 8009c76:	f001 f975 	bl	800af64 <xTaskRemoveFromEventList>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d007      	beq.n	8009c90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c80:	4b3c      	ldr	r3, [pc, #240]	@ (8009d74 <xQueueReceive+0x1c0>)
 8009c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c90:	f002 f9dc 	bl	800c04c <vPortExitCritical>
				return pdPASS;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e069      	b.n	8009d6c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d103      	bne.n	8009ca6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c9e:	f002 f9d5 	bl	800c04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	e062      	b.n	8009d6c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d106      	bne.n	8009cba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cac:	f107 0310 	add.w	r3, r7, #16
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 f9bb 	bl	800b02c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cba:	f002 f9c7 	bl	800c04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cbe:	f000 ff23 	bl	800ab08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cc2:	f002 f991 	bl	800bfe8 <vPortEnterCritical>
 8009cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ccc:	b25b      	sxtb	r3, r3
 8009cce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cd2:	d103      	bne.n	8009cdc <xQueueReceive+0x128>
 8009cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ce2:	b25b      	sxtb	r3, r3
 8009ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ce8:	d103      	bne.n	8009cf2 <xQueueReceive+0x13e>
 8009cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cf2:	f002 f9ab 	bl	800c04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cf6:	1d3a      	adds	r2, r7, #4
 8009cf8:	f107 0310 	add.w	r3, r7, #16
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f001 f9aa 	bl	800b058 <xTaskCheckForTimeOut>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d123      	bne.n	8009d52 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d0c:	f000 fbe2 	bl	800a4d4 <prvIsQueueEmpty>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d017      	beq.n	8009d46 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d18:	3324      	adds	r3, #36	@ 0x24
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f001 f8ce 	bl	800aec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d26:	f000 fb83 	bl	800a430 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d2a:	f000 fefb 	bl	800ab24 <xTaskResumeAll>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d189      	bne.n	8009c48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009d34:	4b0f      	ldr	r3, [pc, #60]	@ (8009d74 <xQueueReceive+0x1c0>)
 8009d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	e780      	b.n	8009c48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d48:	f000 fb72 	bl	800a430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d4c:	f000 feea 	bl	800ab24 <xTaskResumeAll>
 8009d50:	e77a      	b.n	8009c48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d54:	f000 fb6c 	bl	800a430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d58:	f000 fee4 	bl	800ab24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d5e:	f000 fbb9 	bl	800a4d4 <prvIsQueueEmpty>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f43f af6f 	beq.w	8009c48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3730      	adds	r7, #48	@ 0x30
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	e000ed04 	.word	0xe000ed04

08009d78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b08e      	sub	sp, #56	@ 0x38
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d82:	2300      	movs	r3, #0
 8009d84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10b      	bne.n	8009dac <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	623b      	str	r3, [r7, #32]
}
 8009da6:	bf00      	nop
 8009da8:	bf00      	nop
 8009daa:	e7fd      	b.n	8009da8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00b      	beq.n	8009dcc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	61fb      	str	r3, [r7, #28]
}
 8009dc6:	bf00      	nop
 8009dc8:	bf00      	nop
 8009dca:	e7fd      	b.n	8009dc8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dcc:	f001 faa0 	bl	800b310 <xTaskGetSchedulerState>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d102      	bne.n	8009ddc <xQueueSemaphoreTake+0x64>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <xQueueSemaphoreTake+0x68>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e000      	b.n	8009de2 <xQueueSemaphoreTake+0x6a>
 8009de0:	2300      	movs	r3, #0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10b      	bne.n	8009dfe <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dea:	f383 8811 	msr	BASEPRI, r3
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f3bf 8f4f 	dsb	sy
 8009df6:	61bb      	str	r3, [r7, #24]
}
 8009df8:	bf00      	nop
 8009dfa:	bf00      	nop
 8009dfc:	e7fd      	b.n	8009dfa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dfe:	f002 f8f3 	bl	800bfe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e06:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d024      	beq.n	8009e58 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e10:	1e5a      	subs	r2, r3, #1
 8009e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e14:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d104      	bne.n	8009e28 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009e1e:	f001 fbf1 	bl	800b604 <pvTaskIncrementMutexHeldCount>
 8009e22:	4602      	mov	r2, r0
 8009e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e26:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00f      	beq.n	8009e50 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e32:	3310      	adds	r3, #16
 8009e34:	4618      	mov	r0, r3
 8009e36:	f001 f895 	bl	800af64 <xTaskRemoveFromEventList>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d007      	beq.n	8009e50 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e40:	4b54      	ldr	r3, [pc, #336]	@ (8009f94 <xQueueSemaphoreTake+0x21c>)
 8009e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e46:	601a      	str	r2, [r3, #0]
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e50:	f002 f8fc 	bl	800c04c <vPortExitCritical>
				return pdPASS;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e098      	b.n	8009f8a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d112      	bne.n	8009e84 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00b      	beq.n	8009e7c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	617b      	str	r3, [r7, #20]
}
 8009e76:	bf00      	nop
 8009e78:	bf00      	nop
 8009e7a:	e7fd      	b.n	8009e78 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009e7c:	f002 f8e6 	bl	800c04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e80:	2300      	movs	r3, #0
 8009e82:	e082      	b.n	8009f8a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d106      	bne.n	8009e98 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e8a:	f107 030c 	add.w	r3, r7, #12
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f001 f8cc 	bl	800b02c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e94:	2301      	movs	r3, #1
 8009e96:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e98:	f002 f8d8 	bl	800c04c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e9c:	f000 fe34 	bl	800ab08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ea0:	f002 f8a2 	bl	800bfe8 <vPortEnterCritical>
 8009ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009eaa:	b25b      	sxtb	r3, r3
 8009eac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009eb0:	d103      	bne.n	8009eba <xQueueSemaphoreTake+0x142>
 8009eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ec0:	b25b      	sxtb	r3, r3
 8009ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ec6:	d103      	bne.n	8009ed0 <xQueueSemaphoreTake+0x158>
 8009ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ed0:	f002 f8bc 	bl	800c04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ed4:	463a      	mov	r2, r7
 8009ed6:	f107 030c 	add.w	r3, r7, #12
 8009eda:	4611      	mov	r1, r2
 8009edc:	4618      	mov	r0, r3
 8009ede:	f001 f8bb 	bl	800b058 <xTaskCheckForTimeOut>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d132      	bne.n	8009f4e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ee8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009eea:	f000 faf3 	bl	800a4d4 <prvIsQueueEmpty>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d026      	beq.n	8009f42 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d109      	bne.n	8009f10 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009efc:	f002 f874 	bl	800bfe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f001 fa21 	bl	800b34c <xTaskPriorityInherit>
 8009f0a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009f0c:	f002 f89e 	bl	800c04c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f12:	3324      	adds	r3, #36	@ 0x24
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	4611      	mov	r1, r2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 ffd1 	bl	800aec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f20:	f000 fa86 	bl	800a430 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f24:	f000 fdfe 	bl	800ab24 <xTaskResumeAll>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f47f af67 	bne.w	8009dfe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009f30:	4b18      	ldr	r3, [pc, #96]	@ (8009f94 <xQueueSemaphoreTake+0x21c>)
 8009f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f36:	601a      	str	r2, [r3, #0]
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	e75d      	b.n	8009dfe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009f42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f44:	f000 fa74 	bl	800a430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f48:	f000 fdec 	bl	800ab24 <xTaskResumeAll>
 8009f4c:	e757      	b.n	8009dfe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009f4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f50:	f000 fa6e 	bl	800a430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f54:	f000 fde6 	bl	800ab24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f5a:	f000 fabb 	bl	800a4d4 <prvIsQueueEmpty>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f43f af4c 	beq.w	8009dfe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00d      	beq.n	8009f88 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009f6c:	f002 f83c 	bl	800bfe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009f70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f72:	f000 f9b5 	bl	800a2e0 <prvGetDisinheritPriorityAfterTimeout>
 8009f76:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f001 fabc 	bl	800b4fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009f84:	f002 f862 	bl	800c04c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3738      	adds	r7, #56	@ 0x38
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	e000ed04 	.word	0xe000ed04

08009f98 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b08e      	sub	sp, #56	@ 0x38
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10b      	bne.n	8009fca <xQueuePeek+0x32>
	__asm volatile
 8009fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb6:	f383 8811 	msr	BASEPRI, r3
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009fc4:	bf00      	nop
 8009fc6:	bf00      	nop
 8009fc8:	e7fd      	b.n	8009fc6 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d103      	bne.n	8009fd8 <xQueuePeek+0x40>
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <xQueuePeek+0x44>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e000      	b.n	8009fde <xQueuePeek+0x46>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10b      	bne.n	8009ffa <xQueuePeek+0x62>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	623b      	str	r3, [r7, #32]
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop
 8009ff8:	e7fd      	b.n	8009ff6 <xQueuePeek+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ffa:	f001 f989 	bl	800b310 <xTaskGetSchedulerState>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d102      	bne.n	800a00a <xQueuePeek+0x72>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d101      	bne.n	800a00e <xQueuePeek+0x76>
 800a00a:	2301      	movs	r3, #1
 800a00c:	e000      	b.n	800a010 <xQueuePeek+0x78>
 800a00e:	2300      	movs	r3, #0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10b      	bne.n	800a02c <xQueuePeek+0x94>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	61fb      	str	r3, [r7, #28]
}
 800a026:	bf00      	nop
 800a028:	bf00      	nop
 800a02a:	e7fd      	b.n	800a028 <xQueuePeek+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a02c:	f001 ffdc 	bl	800bfe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a034:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d021      	beq.n	800a080 <xQueuePeek+0xe8>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 800a03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a042:	68b9      	ldr	r1, [r7, #8]
 800a044:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a046:	f000 f9cd 	bl	800a3e4 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 800a04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a04e:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00f      	beq.n	800a078 <xQueuePeek+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05a:	3324      	adds	r3, #36	@ 0x24
 800a05c:	4618      	mov	r0, r3
 800a05e:	f000 ff81 	bl	800af64 <xTaskRemoveFromEventList>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d007      	beq.n	800a078 <xQueuePeek+0xe0>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 800a068:	4b3c      	ldr	r3, [pc, #240]	@ (800a15c <xQueuePeek+0x1c4>)
 800a06a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a06e:	601a      	str	r2, [r3, #0]
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a078:	f001 ffe8 	bl	800c04c <vPortExitCritical>
				return pdPASS;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e069      	b.n	800a154 <xQueuePeek+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d103      	bne.n	800a08e <xQueuePeek+0xf6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a086:	f001 ffe1 	bl	800c04c <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a08a:	2300      	movs	r3, #0
 800a08c:	e062      	b.n	800a154 <xQueuePeek+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a090:	2b00      	cmp	r3, #0
 800a092:	d106      	bne.n	800a0a2 <xQueuePeek+0x10a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a094:	f107 0314 	add.w	r3, r7, #20
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 ffc7 	bl	800b02c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0a2:	f001 ffd3 	bl	800c04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0a6:	f000 fd2f 	bl	800ab08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0aa:	f001 ff9d 	bl	800bfe8 <vPortEnterCritical>
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0b4:	b25b      	sxtb	r3, r3
 800a0b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0ba:	d103      	bne.n	800a0c4 <xQueuePeek+0x12c>
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0ca:	b25b      	sxtb	r3, r3
 800a0cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0d0:	d103      	bne.n	800a0da <xQueuePeek+0x142>
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0da:	f001 ffb7 	bl	800c04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0de:	1d3a      	adds	r2, r7, #4
 800a0e0:	f107 0314 	add.w	r3, r7, #20
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 ffb6 	bl	800b058 <xTaskCheckForTimeOut>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d123      	bne.n	800a13a <xQueuePeek+0x1a2>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0f4:	f000 f9ee 	bl	800a4d4 <prvIsQueueEmpty>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d017      	beq.n	800a12e <xQueuePeek+0x196>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a100:	3324      	adds	r3, #36	@ 0x24
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	4611      	mov	r1, r2
 800a106:	4618      	mov	r0, r3
 800a108:	f000 feda 	bl	800aec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a10c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a10e:	f000 f98f 	bl	800a430 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a112:	f000 fd07 	bl	800ab24 <xTaskResumeAll>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d187      	bne.n	800a02c <xQueuePeek+0x94>
				{
					portYIELD_WITHIN_API();
 800a11c:	4b0f      	ldr	r3, [pc, #60]	@ (800a15c <xQueuePeek+0x1c4>)
 800a11e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	e77e      	b.n	800a02c <xQueuePeek+0x94>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 800a12e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a130:	f000 f97e 	bl	800a430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a134:	f000 fcf6 	bl	800ab24 <xTaskResumeAll>
 800a138:	e778      	b.n	800a02c <xQueuePeek+0x94>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800a13a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a13c:	f000 f978 	bl	800a430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a140:	f000 fcf0 	bl	800ab24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a146:	f000 f9c5 	bl	800a4d4 <prvIsQueueEmpty>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f43f af6d 	beq.w	800a02c <xQueuePeek+0x94>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a152:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a154:	4618      	mov	r0, r3
 800a156:	3738      	adds	r7, #56	@ 0x38
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	e000ed04 	.word	0xe000ed04

0800a160 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08e      	sub	sp, #56	@ 0x38
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10b      	bne.n	800a18e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a17a:	f383 8811 	msr	BASEPRI, r3
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	623b      	str	r3, [r7, #32]
}
 800a188:	bf00      	nop
 800a18a:	bf00      	nop
 800a18c:	e7fd      	b.n	800a18a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d103      	bne.n	800a19c <xQueueReceiveFromISR+0x3c>
 800a194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <xQueueReceiveFromISR+0x40>
 800a19c:	2301      	movs	r3, #1
 800a19e:	e000      	b.n	800a1a2 <xQueueReceiveFromISR+0x42>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10b      	bne.n	800a1be <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	61fb      	str	r3, [r7, #28]
}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	e7fd      	b.n	800a1ba <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1be:	f001 fff3 	bl	800c1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800a1c2:	f3ef 8211 	mrs	r2, BASEPRI
 800a1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	61ba      	str	r2, [r7, #24]
 800a1d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a1da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d02f      	beq.n	800a24a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1f4:	68b9      	ldr	r1, [r7, #8]
 800a1f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1f8:	f000 f8f4 	bl	800a3e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fe:	1e5a      	subs	r2, r3, #1
 800a200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a202:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a204:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a208:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a20c:	d112      	bne.n	800a234 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d016      	beq.n	800a244 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a218:	3310      	adds	r3, #16
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 fea2 	bl	800af64 <xTaskRemoveFromEventList>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00e      	beq.n	800a244 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00b      	beq.n	800a244 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	e007      	b.n	800a244 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a238:	3301      	adds	r3, #1
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	b25a      	sxtb	r2, r3
 800a23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a244:	2301      	movs	r3, #1
 800a246:	637b      	str	r3, [r7, #52]	@ 0x34
 800a248:	e001      	b.n	800a24e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a250:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f383 8811 	msr	BASEPRI, r3
}
 800a258:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3738      	adds	r7, #56	@ 0x38
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10b      	bne.n	800a28a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	60bb      	str	r3, [r7, #8]
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop
 800a288:	e7fd      	b.n	800a286 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a28a:	f001 fead 	bl	800bfe8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a292:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a294:	f001 feda 	bl	800c04c <vPortExitCritical>

	return uxReturn;
 800a298:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b087      	sub	sp, #28
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10b      	bne.n	800a2cc <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	60fb      	str	r3, [r7, #12]
}
 800a2c6:	bf00      	nop
 800a2c8:	bf00      	nop
 800a2ca:	e7fd      	b.n	800a2c8 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a2d2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d006      	beq.n	800a2fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	e001      	b.n	800a302 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a2fe:	2300      	movs	r3, #0
 800a300:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a302:	68fb      	ldr	r3, [r7, #12]
	}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a31c:	2300      	movs	r3, #0
 800a31e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a324:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10d      	bne.n	800a34a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d14d      	bne.n	800a3d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f001 f86e 	bl	800b41c <xTaskPriorityDisinherit>
 800a340:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	609a      	str	r2, [r3, #8]
 800a348:	e043      	b.n	800a3d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d119      	bne.n	800a384 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6858      	ldr	r0, [r3, #4]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a358:	461a      	mov	r2, r3
 800a35a:	68b9      	ldr	r1, [r7, #8]
 800a35c:	f01c fdb4 	bl	8026ec8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a368:	441a      	add	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	429a      	cmp	r2, r3
 800a378:	d32b      	bcc.n	800a3d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	605a      	str	r2, [r3, #4]
 800a382:	e026      	b.n	800a3d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	68d8      	ldr	r0, [r3, #12]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a38c:	461a      	mov	r2, r3
 800a38e:	68b9      	ldr	r1, [r7, #8]
 800a390:	f01c fd9a 	bl	8026ec8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	68da      	ldr	r2, [r3, #12]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a39c:	425b      	negs	r3, r3
 800a39e:	441a      	add	r2, r3
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	68da      	ldr	r2, [r3, #12]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d207      	bcs.n	800a3c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	689a      	ldr	r2, [r3, #8]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3b8:	425b      	negs	r3, r3
 800a3ba:	441a      	add	r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d105      	bne.n	800a3d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	1c5a      	adds	r2, r3, #1
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a3da:	697b      	ldr	r3, [r7, #20]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d018      	beq.n	800a428 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	68da      	ldr	r2, [r3, #12]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3fe:	441a      	add	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	68da      	ldr	r2, [r3, #12]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d303      	bcc.n	800a418 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68d9      	ldr	r1, [r3, #12]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a420:	461a      	mov	r2, r3
 800a422:	6838      	ldr	r0, [r7, #0]
 800a424:	f01c fd50 	bl	8026ec8 <memcpy>
	}
}
 800a428:	bf00      	nop
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a438:	f001 fdd6 	bl	800bfe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a442:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a444:	e011      	b.n	800a46a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d012      	beq.n	800a474 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	3324      	adds	r3, #36	@ 0x24
 800a452:	4618      	mov	r0, r3
 800a454:	f000 fd86 	bl	800af64 <xTaskRemoveFromEventList>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a45e:	f000 fe5f 	bl	800b120 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	3b01      	subs	r3, #1
 800a466:	b2db      	uxtb	r3, r3
 800a468:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a46a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	dce9      	bgt.n	800a446 <prvUnlockQueue+0x16>
 800a472:	e000      	b.n	800a476 <prvUnlockQueue+0x46>
					break;
 800a474:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	22ff      	movs	r2, #255	@ 0xff
 800a47a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a47e:	f001 fde5 	bl	800c04c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a482:	f001 fdb1 	bl	800bfe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a48c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a48e:	e011      	b.n	800a4b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d012      	beq.n	800a4be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	3310      	adds	r3, #16
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 fd61 	bl	800af64 <xTaskRemoveFromEventList>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a4a8:	f000 fe3a 	bl	800b120 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	dce9      	bgt.n	800a490 <prvUnlockQueue+0x60>
 800a4bc:	e000      	b.n	800a4c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a4be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	22ff      	movs	r2, #255	@ 0xff
 800a4c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a4c8:	f001 fdc0 	bl	800c04c <vPortExitCritical>
}
 800a4cc:	bf00      	nop
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4dc:	f001 fd84 	bl	800bfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	e001      	b.n	800a4f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4f2:	f001 fdab 	bl	800c04c <vPortExitCritical>

	return xReturn;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a508:	f001 fd6e 	bl	800bfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a514:	429a      	cmp	r2, r3
 800a516:	d102      	bne.n	800a51e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a518:	2301      	movs	r3, #1
 800a51a:	60fb      	str	r3, [r7, #12]
 800a51c:	e001      	b.n	800a522 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a51e:	2300      	movs	r3, #0
 800a520:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a522:	f001 fd93 	bl	800c04c <vPortExitCritical>

	return xReturn;
 800a526:	68fb      	ldr	r3, [r7, #12]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a53a:	2300      	movs	r3, #0
 800a53c:	60fb      	str	r3, [r7, #12]
 800a53e:	e014      	b.n	800a56a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a540:	4a0f      	ldr	r2, [pc, #60]	@ (800a580 <vQueueAddToRegistry+0x50>)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10b      	bne.n	800a564 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a54c:	490c      	ldr	r1, [pc, #48]	@ (800a580 <vQueueAddToRegistry+0x50>)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a556:	4a0a      	ldr	r2, [pc, #40]	@ (800a580 <vQueueAddToRegistry+0x50>)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	00db      	lsls	r3, r3, #3
 800a55c:	4413      	add	r3, r2
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a562:	e006      	b.n	800a572 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	3301      	adds	r3, #1
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2b07      	cmp	r3, #7
 800a56e:	d9e7      	bls.n	800a540 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a570:	bf00      	nop
 800a572:	bf00      	nop
 800a574:	3714      	adds	r7, #20
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	200018e8 	.word	0x200018e8

0800a584 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a594:	f001 fd28 	bl	800bfe8 <vPortEnterCritical>
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a59e:	b25b      	sxtb	r3, r3
 800a5a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5a4:	d103      	bne.n	800a5ae <vQueueWaitForMessageRestricted+0x2a>
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5b4:	b25b      	sxtb	r3, r3
 800a5b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5ba:	d103      	bne.n	800a5c4 <vQueueWaitForMessageRestricted+0x40>
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5c4:	f001 fd42 	bl	800c04c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d106      	bne.n	800a5de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	3324      	adds	r3, #36	@ 0x24
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	68b9      	ldr	r1, [r7, #8]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f000 fc97 	bl	800af0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a5de:	6978      	ldr	r0, [r7, #20]
 800a5e0:	f7ff ff26 	bl	800a430 <prvUnlockQueue>
	}
 800a5e4:	bf00      	nop
 800a5e6:	3718      	adds	r7, #24
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b08e      	sub	sp, #56	@ 0x38
 800a5f0:	af04      	add	r7, sp, #16
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	607a      	str	r2, [r7, #4]
 800a5f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10b      	bne.n	800a618 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	623b      	str	r3, [r7, #32]
}
 800a612:	bf00      	nop
 800a614:	bf00      	nop
 800a616:	e7fd      	b.n	800a614 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10b      	bne.n	800a636 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	61fb      	str	r3, [r7, #28]
}
 800a630:	bf00      	nop
 800a632:	bf00      	nop
 800a634:	e7fd      	b.n	800a632 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a636:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800a63a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800a642:	d00b      	beq.n	800a65c <xTaskCreateStatic+0x70>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	61bb      	str	r3, [r7, #24]
}
 800a656:	bf00      	nop
 800a658:	bf00      	nop
 800a65a:	e7fd      	b.n	800a658 <xTaskCreateStatic+0x6c>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a65c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a660:	2b00      	cmp	r3, #0
 800a662:	d01e      	beq.n	800a6a2 <xTaskCreateStatic+0xb6>
 800a664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a666:	2b00      	cmp	r3, #0
 800a668:	d01b      	beq.n	800a6a2 <xTaskCreateStatic+0xb6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a670:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a672:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a676:	2202      	movs	r2, #2
 800a678:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a67c:	2300      	movs	r3, #0
 800a67e:	9303      	str	r3, [sp, #12]
 800a680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a682:	9302      	str	r3, [sp, #8]
 800a684:	f107 0314 	add.w	r3, r7, #20
 800a688:	9301      	str	r3, [sp, #4]
 800a68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	68b9      	ldr	r1, [r7, #8]
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 f851 	bl	800a73c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a69a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a69c:	f000 f91e 	bl	800a8dc <prvAddNewTaskToReadyList>
 800a6a0:	e001      	b.n	800a6a6 <xTaskCreateStatic+0xba>
		}
		else
		{
			xReturn = NULL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a6a6:	697b      	ldr	r3, [r7, #20]
	}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3728      	adds	r7, #40	@ 0x28
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b08c      	sub	sp, #48	@ 0x30
 800a6b4:	af04      	add	r7, sp, #16
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	603b      	str	r3, [r7, #0]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a6c0:	88fb      	ldrh	r3, [r7, #6]
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f001 fdb1 	bl	800c22c <pvPortMalloc>
 800a6ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00f      	beq.n	800a6f2 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a6d2:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800a6d6:	f001 fda9 	bl	800c22c <pvPortMalloc>
 800a6da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d003      	beq.n	800a6ea <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	631a      	str	r2, [r3, #48]	@ 0x30
 800a6e8:	e005      	b.n	800a6f6 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a6ea:	6978      	ldr	r0, [r7, #20]
 800a6ec:	f001 fe6c 	bl	800c3c8 <vPortFree>
 800a6f0:	e001      	b.n	800a6f6 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d017      	beq.n	800a72c <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a704:	88fa      	ldrh	r2, [r7, #6]
 800a706:	2300      	movs	r3, #0
 800a708:	9303      	str	r3, [sp, #12]
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	9302      	str	r3, [sp, #8]
 800a70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	68b9      	ldr	r1, [r7, #8]
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f000 f80e 	bl	800a73c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a720:	69f8      	ldr	r0, [r7, #28]
 800a722:	f000 f8db 	bl	800a8dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a726:	2301      	movs	r3, #1
 800a728:	61bb      	str	r3, [r7, #24]
 800a72a:	e002      	b.n	800a732 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a72c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a730:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a732:	69bb      	ldr	r3, [r7, #24]
	}
 800a734:	4618      	mov	r0, r3
 800a736:	3720      	adds	r7, #32
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
 800a748:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	461a      	mov	r2, r3
 800a754:	21a5      	movs	r1, #165	@ 0xa5
 800a756:	f01b f97b 	bl	8025a50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a764:	3b01      	subs	r3, #1
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4413      	add	r3, r2
 800a76a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	f023 0307 	bic.w	r3, r3, #7
 800a772:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00b      	beq.n	800a796 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	617b      	str	r3, [r7, #20]
}
 800a790:	bf00      	nop
 800a792:	bf00      	nop
 800a794:	e7fd      	b.n	800a792 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d01f      	beq.n	800a7dc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a79c:	2300      	movs	r3, #0
 800a79e:	61fb      	str	r3, [r7, #28]
 800a7a0:	e012      	b.n	800a7c8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	7819      	ldrb	r1, [r3, #0]
 800a7aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	3334      	adds	r3, #52	@ 0x34
 800a7b2:	460a      	mov	r2, r1
 800a7b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d006      	beq.n	800a7d0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	61fb      	str	r3, [r7, #28]
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	2b0f      	cmp	r3, #15
 800a7cc:	d9e9      	bls.n	800a7a2 <prvInitialiseNewTask+0x66>
 800a7ce:	e000      	b.n	800a7d2 <prvInitialiseNewTask+0x96>
			{
				break;
 800a7d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a7da:	e003      	b.n	800a7e4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e6:	2b37      	cmp	r3, #55	@ 0x37
 800a7e8:	d901      	bls.n	800a7ee <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a7ea:	2337      	movs	r3, #55	@ 0x37
 800a7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a802:	3304      	adds	r3, #4
 800a804:	4618      	mov	r0, r3
 800a806:	f7fe fda3 	bl	8009350 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80c:	3318      	adds	r3, #24
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fe fd9e 	bl	8009350 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a818:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a822:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a828:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82c:	2200      	movs	r2, #0
 800a82e:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a834:	2200      	movs	r2, #0
 800a836:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83c:	3358      	adds	r3, #88	@ 0x58
 800a83e:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800a842:	2100      	movs	r1, #0
 800a844:	4618      	mov	r0, r3
 800a846:	f01b f903 	bl	8025a50 <memset>
 800a84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84c:	4a20      	ldr	r2, [pc, #128]	@ (800a8d0 <prvInitialiseNewTask+0x194>)
 800a84e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a852:	4a20      	ldr	r2, [pc, #128]	@ (800a8d4 <prvInitialiseNewTask+0x198>)
 800a854:	661a      	str	r2, [r3, #96]	@ 0x60
 800a856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a858:	4a1f      	ldr	r2, [pc, #124]	@ (800a8d8 <prvInitialiseNewTask+0x19c>)
 800a85a:	665a      	str	r2, [r3, #100]	@ 0x64
 800a85c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a85e:	f04f 0201 	mov.w	r2, #1
 800a862:	f04f 0300 	mov.w	r3, #0
 800a866:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
 800a86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86c:	f243 320e 	movw	r2, #13070	@ 0x330e
 800a870:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 800a874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a876:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 800a87a:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
 800a87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a880:	f241 2234 	movw	r2, #4660	@ 0x1234
 800a884:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
 800a888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88a:	f24e 626d 	movw	r2, #58989	@ 0xe66d
 800a88e:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
 800a892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a894:	f64d 62ec 	movw	r2, #57068	@ 0xdeec
 800a898:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 800a89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89e:	2205      	movs	r2, #5
 800a8a0:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a6:	220b      	movs	r2, #11
 800a8a8:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	68f9      	ldr	r1, [r7, #12]
 800a8b0:	69b8      	ldr	r0, [r7, #24]
 800a8b2:	f001 fa69 	bl	800bd88 <pxPortInitialiseStack>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d002      	beq.n	800a8c8 <prvInitialiseNewTask+0x18c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8c8:	bf00      	nop
 800a8ca:	3720      	adds	r7, #32
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	20018160 	.word	0x20018160
 800a8d4:	200181c8 	.word	0x200181c8
 800a8d8:	20018230 	.word	0x20018230

0800a8dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8e4:	f001 fb80 	bl	800bfe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8e8:	4b2d      	ldr	r3, [pc, #180]	@ (800a9a0 <prvAddNewTaskToReadyList+0xc4>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	4a2c      	ldr	r2, [pc, #176]	@ (800a9a0 <prvAddNewTaskToReadyList+0xc4>)
 800a8f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a8f2:	4b2c      	ldr	r3, [pc, #176]	@ (800a9a4 <prvAddNewTaskToReadyList+0xc8>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d109      	bne.n	800a90e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a8fa:	4a2a      	ldr	r2, [pc, #168]	@ (800a9a4 <prvAddNewTaskToReadyList+0xc8>)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a900:	4b27      	ldr	r3, [pc, #156]	@ (800a9a0 <prvAddNewTaskToReadyList+0xc4>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d110      	bne.n	800a92a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a908:	f000 fc2e 	bl	800b168 <prvInitialiseTaskLists>
 800a90c:	e00d      	b.n	800a92a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a90e:	4b26      	ldr	r3, [pc, #152]	@ (800a9a8 <prvAddNewTaskToReadyList+0xcc>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d109      	bne.n	800a92a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a916:	4b23      	ldr	r3, [pc, #140]	@ (800a9a4 <prvAddNewTaskToReadyList+0xc8>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a920:	429a      	cmp	r2, r3
 800a922:	d802      	bhi.n	800a92a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a924:	4a1f      	ldr	r2, [pc, #124]	@ (800a9a4 <prvAddNewTaskToReadyList+0xc8>)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a92a:	4b20      	ldr	r3, [pc, #128]	@ (800a9ac <prvAddNewTaskToReadyList+0xd0>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3301      	adds	r3, #1
 800a930:	4a1e      	ldr	r2, [pc, #120]	@ (800a9ac <prvAddNewTaskToReadyList+0xd0>)
 800a932:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a934:	4b1d      	ldr	r3, [pc, #116]	@ (800a9ac <prvAddNewTaskToReadyList+0xd0>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a940:	4b1b      	ldr	r3, [pc, #108]	@ (800a9b0 <prvAddNewTaskToReadyList+0xd4>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	429a      	cmp	r2, r3
 800a946:	d903      	bls.n	800a950 <prvAddNewTaskToReadyList+0x74>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a94c:	4a18      	ldr	r2, [pc, #96]	@ (800a9b0 <prvAddNewTaskToReadyList+0xd4>)
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a954:	4613      	mov	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4a15      	ldr	r2, [pc, #84]	@ (800a9b4 <prvAddNewTaskToReadyList+0xd8>)
 800a95e:	441a      	add	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	3304      	adds	r3, #4
 800a964:	4619      	mov	r1, r3
 800a966:	4610      	mov	r0, r2
 800a968:	f7fe fcff 	bl	800936a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a96c:	f001 fb6e 	bl	800c04c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a970:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a8 <prvAddNewTaskToReadyList+0xcc>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00e      	beq.n	800a996 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a978:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a4 <prvAddNewTaskToReadyList+0xc8>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a982:	429a      	cmp	r2, r3
 800a984:	d207      	bcs.n	800a996 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a986:	4b0c      	ldr	r3, [pc, #48]	@ (800a9b8 <prvAddNewTaskToReadyList+0xdc>)
 800a988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a98c:	601a      	str	r2, [r3, #0]
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	20001dfc 	.word	0x20001dfc
 800a9a4:	20001928 	.word	0x20001928
 800a9a8:	20001e08 	.word	0x20001e08
 800a9ac:	20001e18 	.word	0x20001e18
 800a9b0:	20001e04 	.word	0x20001e04
 800a9b4:	2000192c 	.word	0x2000192c
 800a9b8:	e000ed04 	.word	0xe000ed04

0800a9bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d018      	beq.n	800aa00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a9ce:	4b14      	ldr	r3, [pc, #80]	@ (800aa20 <vTaskDelay+0x64>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00b      	beq.n	800a9ee <vTaskDelay+0x32>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	60bb      	str	r3, [r7, #8]
}
 800a9e8:	bf00      	nop
 800a9ea:	bf00      	nop
 800a9ec:	e7fd      	b.n	800a9ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a9ee:	f000 f88b 	bl	800ab08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fe19 	bl	800b62c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a9fa:	f000 f893 	bl	800ab24 <xTaskResumeAll>
 800a9fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d107      	bne.n	800aa16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800aa06:	4b07      	ldr	r3, [pc, #28]	@ (800aa24 <vTaskDelay+0x68>)
 800aa08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa0c:	601a      	str	r2, [r3, #0]
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa16:	bf00      	nop
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20001e24 	.word	0x20001e24
 800aa24:	e000ed04 	.word	0xe000ed04

0800aa28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08a      	sub	sp, #40	@ 0x28
 800aa2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa36:	463a      	mov	r2, r7
 800aa38:	1d39      	adds	r1, r7, #4
 800aa3a:	f107 0308 	add.w	r3, r7, #8
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe fc32 	bl	80092a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa44:	6839      	ldr	r1, [r7, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	9202      	str	r2, [sp, #8]
 800aa4c:	9301      	str	r3, [sp, #4]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	2300      	movs	r3, #0
 800aa54:	460a      	mov	r2, r1
 800aa56:	4924      	ldr	r1, [pc, #144]	@ (800aae8 <vTaskStartScheduler+0xc0>)
 800aa58:	4824      	ldr	r0, [pc, #144]	@ (800aaec <vTaskStartScheduler+0xc4>)
 800aa5a:	f7ff fdc7 	bl	800a5ec <xTaskCreateStatic>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	4a23      	ldr	r2, [pc, #140]	@ (800aaf0 <vTaskStartScheduler+0xc8>)
 800aa62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa64:	4b22      	ldr	r3, [pc, #136]	@ (800aaf0 <vTaskStartScheduler+0xc8>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	617b      	str	r3, [r7, #20]
 800aa70:	e001      	b.n	800aa76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa72:	2300      	movs	r3, #0
 800aa74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d102      	bne.n	800aa82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa7c:	f000 fe2a 	bl	800b6d4 <xTimerCreateTimerTask>
 800aa80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d11b      	bne.n	800aac0 <vTaskStartScheduler+0x98>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	613b      	str	r3, [r7, #16]
}
 800aa9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa9c:	4b15      	ldr	r3, [pc, #84]	@ (800aaf4 <vTaskStartScheduler+0xcc>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3358      	adds	r3, #88	@ 0x58
 800aaa2:	4a15      	ldr	r2, [pc, #84]	@ (800aaf8 <vTaskStartScheduler+0xd0>)
 800aaa4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aaa6:	4b15      	ldr	r3, [pc, #84]	@ (800aafc <vTaskStartScheduler+0xd4>)
 800aaa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aaac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aaae:	4b14      	ldr	r3, [pc, #80]	@ (800ab00 <vTaskStartScheduler+0xd8>)
 800aab0:	2201      	movs	r2, #1
 800aab2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aab4:	4b13      	ldr	r3, [pc, #76]	@ (800ab04 <vTaskStartScheduler+0xdc>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aaba:	f001 f9f1 	bl	800bea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aabe:	e00f      	b.n	800aae0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aac6:	d10b      	bne.n	800aae0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	60fb      	str	r3, [r7, #12]
}
 800aada:	bf00      	nop
 800aadc:	bf00      	nop
 800aade:	e7fd      	b.n	800aadc <vTaskStartScheduler+0xb4>
}
 800aae0:	bf00      	nop
 800aae2:	3718      	adds	r7, #24
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	080303d8 	.word	0x080303d8
 800aaec:	0800b139 	.word	0x0800b139
 800aaf0:	20001e20 	.word	0x20001e20
 800aaf4:	20001928 	.word	0x20001928
 800aaf8:	20000430 	.word	0x20000430
 800aafc:	20001e1c 	.word	0x20001e1c
 800ab00:	20001e08 	.word	0x20001e08
 800ab04:	20001e00 	.word	0x20001e00

0800ab08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ab08:	b480      	push	{r7}
 800ab0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ab0c:	4b04      	ldr	r3, [pc, #16]	@ (800ab20 <vTaskSuspendAll+0x18>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3301      	adds	r3, #1
 800ab12:	4a03      	ldr	r2, [pc, #12]	@ (800ab20 <vTaskSuspendAll+0x18>)
 800ab14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ab16:	bf00      	nop
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr
 800ab20:	20001e24 	.word	0x20001e24

0800ab24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ab32:	4b42      	ldr	r3, [pc, #264]	@ (800ac3c <xTaskResumeAll+0x118>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10b      	bne.n	800ab52 <xTaskResumeAll+0x2e>
	__asm volatile
 800ab3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	603b      	str	r3, [r7, #0]
}
 800ab4c:	bf00      	nop
 800ab4e:	bf00      	nop
 800ab50:	e7fd      	b.n	800ab4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab52:	f001 fa49 	bl	800bfe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab56:	4b39      	ldr	r3, [pc, #228]	@ (800ac3c <xTaskResumeAll+0x118>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	4a37      	ldr	r2, [pc, #220]	@ (800ac3c <xTaskResumeAll+0x118>)
 800ab5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab60:	4b36      	ldr	r3, [pc, #216]	@ (800ac3c <xTaskResumeAll+0x118>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d162      	bne.n	800ac2e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab68:	4b35      	ldr	r3, [pc, #212]	@ (800ac40 <xTaskResumeAll+0x11c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d05e      	beq.n	800ac2e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab70:	e02f      	b.n	800abd2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab72:	4b34      	ldr	r3, [pc, #208]	@ (800ac44 <xTaskResumeAll+0x120>)
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	3318      	adds	r3, #24
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fe fc50 	bl	8009424 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	3304      	adds	r3, #4
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fe fc4b 	bl	8009424 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab92:	4b2d      	ldr	r3, [pc, #180]	@ (800ac48 <xTaskResumeAll+0x124>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d903      	bls.n	800aba2 <xTaskResumeAll+0x7e>
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab9e:	4a2a      	ldr	r2, [pc, #168]	@ (800ac48 <xTaskResumeAll+0x124>)
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aba6:	4613      	mov	r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4413      	add	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4a27      	ldr	r2, [pc, #156]	@ (800ac4c <xTaskResumeAll+0x128>)
 800abb0:	441a      	add	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	3304      	adds	r3, #4
 800abb6:	4619      	mov	r1, r3
 800abb8:	4610      	mov	r0, r2
 800abba:	f7fe fbd6 	bl	800936a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abc2:	4b23      	ldr	r3, [pc, #140]	@ (800ac50 <xTaskResumeAll+0x12c>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abc8:	429a      	cmp	r2, r3
 800abca:	d302      	bcc.n	800abd2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800abcc:	4b21      	ldr	r3, [pc, #132]	@ (800ac54 <xTaskResumeAll+0x130>)
 800abce:	2201      	movs	r2, #1
 800abd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abd2:	4b1c      	ldr	r3, [pc, #112]	@ (800ac44 <xTaskResumeAll+0x120>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1cb      	bne.n	800ab72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d001      	beq.n	800abe4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800abe0:	f000 fb66 	bl	800b2b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800abe4:	4b1c      	ldr	r3, [pc, #112]	@ (800ac58 <xTaskResumeAll+0x134>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d010      	beq.n	800ac12 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800abf0:	f000 f846 	bl	800ac80 <xTaskIncrementTick>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d002      	beq.n	800ac00 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800abfa:	4b16      	ldr	r3, [pc, #88]	@ (800ac54 <xTaskResumeAll+0x130>)
 800abfc:	2201      	movs	r2, #1
 800abfe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1f1      	bne.n	800abf0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ac0c:	4b12      	ldr	r3, [pc, #72]	@ (800ac58 <xTaskResumeAll+0x134>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ac12:	4b10      	ldr	r3, [pc, #64]	@ (800ac54 <xTaskResumeAll+0x130>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d009      	beq.n	800ac2e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ac1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ac5c <xTaskResumeAll+0x138>)
 800ac20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac2e:	f001 fa0d 	bl	800c04c <vPortExitCritical>

	return xAlreadyYielded;
 800ac32:	68bb      	ldr	r3, [r7, #8]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	20001e24 	.word	0x20001e24
 800ac40:	20001dfc 	.word	0x20001dfc
 800ac44:	20001dbc 	.word	0x20001dbc
 800ac48:	20001e04 	.word	0x20001e04
 800ac4c:	2000192c 	.word	0x2000192c
 800ac50:	20001928 	.word	0x20001928
 800ac54:	20001e10 	.word	0x20001e10
 800ac58:	20001e0c 	.word	0x20001e0c
 800ac5c:	e000ed04 	.word	0xe000ed04

0800ac60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ac66:	4b05      	ldr	r3, [pc, #20]	@ (800ac7c <xTaskGetTickCount+0x1c>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ac6c:	687b      	ldr	r3, [r7, #4]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	370c      	adds	r7, #12
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	20001e00 	.word	0x20001e00

0800ac80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac86:	2300      	movs	r3, #0
 800ac88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac8a:	4b4f      	ldr	r3, [pc, #316]	@ (800adc8 <xTaskIncrementTick+0x148>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f040 8090 	bne.w	800adb4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac94:	4b4d      	ldr	r3, [pc, #308]	@ (800adcc <xTaskIncrementTick+0x14c>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac9c:	4a4b      	ldr	r2, [pc, #300]	@ (800adcc <xTaskIncrementTick+0x14c>)
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d121      	bne.n	800acec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800aca8:	4b49      	ldr	r3, [pc, #292]	@ (800add0 <xTaskIncrementTick+0x150>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00b      	beq.n	800acca <xTaskIncrementTick+0x4a>
	__asm volatile
 800acb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	603b      	str	r3, [r7, #0]
}
 800acc4:	bf00      	nop
 800acc6:	bf00      	nop
 800acc8:	e7fd      	b.n	800acc6 <xTaskIncrementTick+0x46>
 800acca:	4b41      	ldr	r3, [pc, #260]	@ (800add0 <xTaskIncrementTick+0x150>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	4b40      	ldr	r3, [pc, #256]	@ (800add4 <xTaskIncrementTick+0x154>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a3e      	ldr	r2, [pc, #248]	@ (800add0 <xTaskIncrementTick+0x150>)
 800acd6:	6013      	str	r3, [r2, #0]
 800acd8:	4a3e      	ldr	r2, [pc, #248]	@ (800add4 <xTaskIncrementTick+0x154>)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6013      	str	r3, [r2, #0]
 800acde:	4b3e      	ldr	r3, [pc, #248]	@ (800add8 <xTaskIncrementTick+0x158>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3301      	adds	r3, #1
 800ace4:	4a3c      	ldr	r2, [pc, #240]	@ (800add8 <xTaskIncrementTick+0x158>)
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	f000 fae2 	bl	800b2b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acec:	4b3b      	ldr	r3, [pc, #236]	@ (800addc <xTaskIncrementTick+0x15c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d349      	bcc.n	800ad8a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acf6:	4b36      	ldr	r3, [pc, #216]	@ (800add0 <xTaskIncrementTick+0x150>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d104      	bne.n	800ad0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad00:	4b36      	ldr	r3, [pc, #216]	@ (800addc <xTaskIncrementTick+0x15c>)
 800ad02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad06:	601a      	str	r2, [r3, #0]
					break;
 800ad08:	e03f      	b.n	800ad8a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad0a:	4b31      	ldr	r3, [pc, #196]	@ (800add0 <xTaskIncrementTick+0x150>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ad1a:	693a      	ldr	r2, [r7, #16]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d203      	bcs.n	800ad2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ad22:	4a2e      	ldr	r2, [pc, #184]	@ (800addc <xTaskIncrementTick+0x15c>)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ad28:	e02f      	b.n	800ad8a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7fe fb78 	bl	8009424 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d004      	beq.n	800ad46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	3318      	adds	r3, #24
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fe fb6f 	bl	8009424 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad4a:	4b25      	ldr	r3, [pc, #148]	@ (800ade0 <xTaskIncrementTick+0x160>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d903      	bls.n	800ad5a <xTaskIncrementTick+0xda>
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad56:	4a22      	ldr	r2, [pc, #136]	@ (800ade0 <xTaskIncrementTick+0x160>)
 800ad58:	6013      	str	r3, [r2, #0]
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad5e:	4613      	mov	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4a1f      	ldr	r2, [pc, #124]	@ (800ade4 <xTaskIncrementTick+0x164>)
 800ad68:	441a      	add	r2, r3
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	4619      	mov	r1, r3
 800ad70:	4610      	mov	r0, r2
 800ad72:	f7fe fafa 	bl	800936a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad7a:	4b1b      	ldr	r3, [pc, #108]	@ (800ade8 <xTaskIncrementTick+0x168>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d3b8      	bcc.n	800acf6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ad84:	2301      	movs	r3, #1
 800ad86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad88:	e7b5      	b.n	800acf6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad8a:	4b17      	ldr	r3, [pc, #92]	@ (800ade8 <xTaskIncrementTick+0x168>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad90:	4914      	ldr	r1, [pc, #80]	@ (800ade4 <xTaskIncrementTick+0x164>)
 800ad92:	4613      	mov	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4413      	add	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	440b      	add	r3, r1
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d901      	bls.n	800ada6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ada2:	2301      	movs	r3, #1
 800ada4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ada6:	4b11      	ldr	r3, [pc, #68]	@ (800adec <xTaskIncrementTick+0x16c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d007      	beq.n	800adbe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800adae:	2301      	movs	r3, #1
 800adb0:	617b      	str	r3, [r7, #20]
 800adb2:	e004      	b.n	800adbe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800adb4:	4b0e      	ldr	r3, [pc, #56]	@ (800adf0 <xTaskIncrementTick+0x170>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	3301      	adds	r3, #1
 800adba:	4a0d      	ldr	r2, [pc, #52]	@ (800adf0 <xTaskIncrementTick+0x170>)
 800adbc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800adbe:	697b      	ldr	r3, [r7, #20]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20001e24 	.word	0x20001e24
 800adcc:	20001e00 	.word	0x20001e00
 800add0:	20001db4 	.word	0x20001db4
 800add4:	20001db8 	.word	0x20001db8
 800add8:	20001e14 	.word	0x20001e14
 800addc:	20001e1c 	.word	0x20001e1c
 800ade0:	20001e04 	.word	0x20001e04
 800ade4:	2000192c 	.word	0x2000192c
 800ade8:	20001928 	.word	0x20001928
 800adec:	20001e10 	.word	0x20001e10
 800adf0:	20001e0c 	.word	0x20001e0c

0800adf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800adfa:	4b2b      	ldr	r3, [pc, #172]	@ (800aea8 <vTaskSwitchContext+0xb4>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ae02:	4b2a      	ldr	r3, [pc, #168]	@ (800aeac <vTaskSwitchContext+0xb8>)
 800ae04:	2201      	movs	r2, #1
 800ae06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ae08:	e047      	b.n	800ae9a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ae0a:	4b28      	ldr	r3, [pc, #160]	@ (800aeac <vTaskSwitchContext+0xb8>)
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae10:	4b27      	ldr	r3, [pc, #156]	@ (800aeb0 <vTaskSwitchContext+0xbc>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	60fb      	str	r3, [r7, #12]
 800ae16:	e011      	b.n	800ae3c <vTaskSwitchContext+0x48>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10b      	bne.n	800ae36 <vTaskSwitchContext+0x42>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	607b      	str	r3, [r7, #4]
}
 800ae30:	bf00      	nop
 800ae32:	bf00      	nop
 800ae34:	e7fd      	b.n	800ae32 <vTaskSwitchContext+0x3e>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	60fb      	str	r3, [r7, #12]
 800ae3c:	491d      	ldr	r1, [pc, #116]	@ (800aeb4 <vTaskSwitchContext+0xc0>)
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	4613      	mov	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4413      	add	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	440b      	add	r3, r1
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d0e3      	beq.n	800ae18 <vTaskSwitchContext+0x24>
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	4613      	mov	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4a16      	ldr	r2, [pc, #88]	@ (800aeb4 <vTaskSwitchContext+0xc0>)
 800ae5c:	4413      	add	r3, r2
 800ae5e:	60bb      	str	r3, [r7, #8]
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	685a      	ldr	r2, [r3, #4]
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	605a      	str	r2, [r3, #4]
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	3308      	adds	r3, #8
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d104      	bne.n	800ae80 <vTaskSwitchContext+0x8c>
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	605a      	str	r2, [r3, #4]
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	4a0c      	ldr	r2, [pc, #48]	@ (800aeb8 <vTaskSwitchContext+0xc4>)
 800ae88:	6013      	str	r3, [r2, #0]
 800ae8a:	4a09      	ldr	r2, [pc, #36]	@ (800aeb0 <vTaskSwitchContext+0xbc>)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae90:	4b09      	ldr	r3, [pc, #36]	@ (800aeb8 <vTaskSwitchContext+0xc4>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	3358      	adds	r3, #88	@ 0x58
 800ae96:	4a09      	ldr	r2, [pc, #36]	@ (800aebc <vTaskSwitchContext+0xc8>)
 800ae98:	6013      	str	r3, [r2, #0]
}
 800ae9a:	bf00      	nop
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	20001e24 	.word	0x20001e24
 800aeac:	20001e10 	.word	0x20001e10
 800aeb0:	20001e04 	.word	0x20001e04
 800aeb4:	2000192c 	.word	0x2000192c
 800aeb8:	20001928 	.word	0x20001928
 800aebc:	20000430 	.word	0x20000430

0800aec0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10b      	bne.n	800aee8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800aed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	60fb      	str	r3, [r7, #12]
}
 800aee2:	bf00      	nop
 800aee4:	bf00      	nop
 800aee6:	e7fd      	b.n	800aee4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aee8:	4b07      	ldr	r3, [pc, #28]	@ (800af08 <vTaskPlaceOnEventList+0x48>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3318      	adds	r3, #24
 800aeee:	4619      	mov	r1, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f7fe fa5e 	bl	80093b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aef6:	2101      	movs	r1, #1
 800aef8:	6838      	ldr	r0, [r7, #0]
 800aefa:	f000 fb97 	bl	800b62c <prvAddCurrentTaskToDelayedList>
}
 800aefe:	bf00      	nop
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	20001928 	.word	0x20001928

0800af0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10b      	bne.n	800af36 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	617b      	str	r3, [r7, #20]
}
 800af30:	bf00      	nop
 800af32:	bf00      	nop
 800af34:	e7fd      	b.n	800af32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af36:	4b0a      	ldr	r3, [pc, #40]	@ (800af60 <vTaskPlaceOnEventListRestricted+0x54>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	3318      	adds	r3, #24
 800af3c:	4619      	mov	r1, r3
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f7fe fa13 	bl	800936a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d002      	beq.n	800af50 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800af4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af50:	6879      	ldr	r1, [r7, #4]
 800af52:	68b8      	ldr	r0, [r7, #8]
 800af54:	f000 fb6a 	bl	800b62c <prvAddCurrentTaskToDelayedList>
	}
 800af58:	bf00      	nop
 800af5a:	3718      	adds	r7, #24
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20001928 	.word	0x20001928

0800af64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d10b      	bne.n	800af92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800af7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	60fb      	str	r3, [r7, #12]
}
 800af8c:	bf00      	nop
 800af8e:	bf00      	nop
 800af90:	e7fd      	b.n	800af8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	3318      	adds	r3, #24
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fa44 	bl	8009424 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af9c:	4b1d      	ldr	r3, [pc, #116]	@ (800b014 <xTaskRemoveFromEventList+0xb0>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d11d      	bne.n	800afe0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	3304      	adds	r3, #4
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7fe fa3b 	bl	8009424 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afb2:	4b19      	ldr	r3, [pc, #100]	@ (800b018 <xTaskRemoveFromEventList+0xb4>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d903      	bls.n	800afc2 <xTaskRemoveFromEventList+0x5e>
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afbe:	4a16      	ldr	r2, [pc, #88]	@ (800b018 <xTaskRemoveFromEventList+0xb4>)
 800afc0:	6013      	str	r3, [r2, #0]
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afc6:	4613      	mov	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4a13      	ldr	r2, [pc, #76]	@ (800b01c <xTaskRemoveFromEventList+0xb8>)
 800afd0:	441a      	add	r2, r3
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	3304      	adds	r3, #4
 800afd6:	4619      	mov	r1, r3
 800afd8:	4610      	mov	r0, r2
 800afda:	f7fe f9c6 	bl	800936a <vListInsertEnd>
 800afde:	e005      	b.n	800afec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	3318      	adds	r3, #24
 800afe4:	4619      	mov	r1, r3
 800afe6:	480e      	ldr	r0, [pc, #56]	@ (800b020 <xTaskRemoveFromEventList+0xbc>)
 800afe8:	f7fe f9bf 	bl	800936a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aff0:	4b0c      	ldr	r3, [pc, #48]	@ (800b024 <xTaskRemoveFromEventList+0xc0>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d905      	bls.n	800b006 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800affa:	2301      	movs	r3, #1
 800affc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800affe:	4b0a      	ldr	r3, [pc, #40]	@ (800b028 <xTaskRemoveFromEventList+0xc4>)
 800b000:	2201      	movs	r2, #1
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	e001      	b.n	800b00a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b006:	2300      	movs	r3, #0
 800b008:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b00a:	697b      	ldr	r3, [r7, #20]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	20001e24 	.word	0x20001e24
 800b018:	20001e04 	.word	0x20001e04
 800b01c:	2000192c 	.word	0x2000192c
 800b020:	20001dbc 	.word	0x20001dbc
 800b024:	20001928 	.word	0x20001928
 800b028:	20001e10 	.word	0x20001e10

0800b02c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b034:	4b06      	ldr	r3, [pc, #24]	@ (800b050 <vTaskInternalSetTimeOutState+0x24>)
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b03c:	4b05      	ldr	r3, [pc, #20]	@ (800b054 <vTaskInternalSetTimeOutState+0x28>)
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	605a      	str	r2, [r3, #4]
}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	20001e14 	.word	0x20001e14
 800b054:	20001e00 	.word	0x20001e00

0800b058 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b088      	sub	sp, #32
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10b      	bne.n	800b080 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b06c:	f383 8811 	msr	BASEPRI, r3
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	613b      	str	r3, [r7, #16]
}
 800b07a:	bf00      	nop
 800b07c:	bf00      	nop
 800b07e:	e7fd      	b.n	800b07c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10b      	bne.n	800b09e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	60fb      	str	r3, [r7, #12]
}
 800b098:	bf00      	nop
 800b09a:	bf00      	nop
 800b09c:	e7fd      	b.n	800b09a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b09e:	f000 ffa3 	bl	800bfe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b0a2:	4b1d      	ldr	r3, [pc, #116]	@ (800b118 <xTaskCheckForTimeOut+0xc0>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	69ba      	ldr	r2, [r7, #24]
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0ba:	d102      	bne.n	800b0c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	61fb      	str	r3, [r7, #28]
 800b0c0:	e023      	b.n	800b10a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	4b15      	ldr	r3, [pc, #84]	@ (800b11c <xTaskCheckForTimeOut+0xc4>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d007      	beq.n	800b0de <xTaskCheckForTimeOut+0x86>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	69ba      	ldr	r2, [r7, #24]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d302      	bcc.n	800b0de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	61fb      	str	r3, [r7, #28]
 800b0dc:	e015      	b.n	800b10a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d20b      	bcs.n	800b100 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	1ad2      	subs	r2, r2, r3
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7ff ff99 	bl	800b02c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	61fb      	str	r3, [r7, #28]
 800b0fe:	e004      	b.n	800b10a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	2200      	movs	r2, #0
 800b104:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b106:	2301      	movs	r3, #1
 800b108:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b10a:	f000 ff9f 	bl	800c04c <vPortExitCritical>

	return xReturn;
 800b10e:	69fb      	ldr	r3, [r7, #28]
}
 800b110:	4618      	mov	r0, r3
 800b112:	3720      	adds	r7, #32
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	20001e00 	.word	0x20001e00
 800b11c:	20001e14 	.word	0x20001e14

0800b120 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b120:	b480      	push	{r7}
 800b122:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b124:	4b03      	ldr	r3, [pc, #12]	@ (800b134 <vTaskMissedYield+0x14>)
 800b126:	2201      	movs	r2, #1
 800b128:	601a      	str	r2, [r3, #0]
}
 800b12a:	bf00      	nop
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr
 800b134:	20001e10 	.word	0x20001e10

0800b138 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b140:	f000 f852 	bl	800b1e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b144:	4b06      	ldr	r3, [pc, #24]	@ (800b160 <prvIdleTask+0x28>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d9f9      	bls.n	800b140 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b14c:	4b05      	ldr	r3, [pc, #20]	@ (800b164 <prvIdleTask+0x2c>)
 800b14e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b152:	601a      	str	r2, [r3, #0]
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b15c:	e7f0      	b.n	800b140 <prvIdleTask+0x8>
 800b15e:	bf00      	nop
 800b160:	2000192c 	.word	0x2000192c
 800b164:	e000ed04 	.word	0xe000ed04

0800b168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b16e:	2300      	movs	r3, #0
 800b170:	607b      	str	r3, [r7, #4]
 800b172:	e00c      	b.n	800b18e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4a12      	ldr	r2, [pc, #72]	@ (800b1c8 <prvInitialiseTaskLists+0x60>)
 800b180:	4413      	add	r3, r2
 800b182:	4618      	mov	r0, r3
 800b184:	f7fe f8c4 	bl	8009310 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3301      	adds	r3, #1
 800b18c:	607b      	str	r3, [r7, #4]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b37      	cmp	r3, #55	@ 0x37
 800b192:	d9ef      	bls.n	800b174 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b194:	480d      	ldr	r0, [pc, #52]	@ (800b1cc <prvInitialiseTaskLists+0x64>)
 800b196:	f7fe f8bb 	bl	8009310 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b19a:	480d      	ldr	r0, [pc, #52]	@ (800b1d0 <prvInitialiseTaskLists+0x68>)
 800b19c:	f7fe f8b8 	bl	8009310 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b1a0:	480c      	ldr	r0, [pc, #48]	@ (800b1d4 <prvInitialiseTaskLists+0x6c>)
 800b1a2:	f7fe f8b5 	bl	8009310 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b1a6:	480c      	ldr	r0, [pc, #48]	@ (800b1d8 <prvInitialiseTaskLists+0x70>)
 800b1a8:	f7fe f8b2 	bl	8009310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b1ac:	480b      	ldr	r0, [pc, #44]	@ (800b1dc <prvInitialiseTaskLists+0x74>)
 800b1ae:	f7fe f8af 	bl	8009310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b1b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b1e0 <prvInitialiseTaskLists+0x78>)
 800b1b4:	4a05      	ldr	r2, [pc, #20]	@ (800b1cc <prvInitialiseTaskLists+0x64>)
 800b1b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b1b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1e4 <prvInitialiseTaskLists+0x7c>)
 800b1ba:	4a05      	ldr	r2, [pc, #20]	@ (800b1d0 <prvInitialiseTaskLists+0x68>)
 800b1bc:	601a      	str	r2, [r3, #0]
}
 800b1be:	bf00      	nop
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	2000192c 	.word	0x2000192c
 800b1cc:	20001d8c 	.word	0x20001d8c
 800b1d0:	20001da0 	.word	0x20001da0
 800b1d4:	20001dbc 	.word	0x20001dbc
 800b1d8:	20001dd0 	.word	0x20001dd0
 800b1dc:	20001de8 	.word	0x20001de8
 800b1e0:	20001db4 	.word	0x20001db4
 800b1e4:	20001db8 	.word	0x20001db8

0800b1e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1ee:	e019      	b.n	800b224 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1f0:	f000 fefa 	bl	800bfe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1f4:	4b10      	ldr	r3, [pc, #64]	@ (800b238 <prvCheckTasksWaitingTermination+0x50>)
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	3304      	adds	r3, #4
 800b200:	4618      	mov	r0, r3
 800b202:	f7fe f90f 	bl	8009424 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b206:	4b0d      	ldr	r3, [pc, #52]	@ (800b23c <prvCheckTasksWaitingTermination+0x54>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	3b01      	subs	r3, #1
 800b20c:	4a0b      	ldr	r2, [pc, #44]	@ (800b23c <prvCheckTasksWaitingTermination+0x54>)
 800b20e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b210:	4b0b      	ldr	r3, [pc, #44]	@ (800b240 <prvCheckTasksWaitingTermination+0x58>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3b01      	subs	r3, #1
 800b216:	4a0a      	ldr	r2, [pc, #40]	@ (800b240 <prvCheckTasksWaitingTermination+0x58>)
 800b218:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b21a:	f000 ff17 	bl	800c04c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f810 	bl	800b244 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b224:	4b06      	ldr	r3, [pc, #24]	@ (800b240 <prvCheckTasksWaitingTermination+0x58>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1e1      	bne.n	800b1f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b22c:	bf00      	nop
 800b22e:	bf00      	nop
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	20001dd0 	.word	0x20001dd0
 800b23c:	20001dfc 	.word	0x20001dfc
 800b240:	20001de4 	.word	0x20001de4

0800b244 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	3358      	adds	r3, #88	@ 0x58
 800b250:	4618      	mov	r0, r3
 800b252:	f01b fd9f 	bl	8026d94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d108      	bne.n	800b272 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b264:	4618      	mov	r0, r3
 800b266:	f001 f8af 	bl	800c3c8 <vPortFree>
				vPortFree( pxTCB );
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 f8ac 	bl	800c3c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b270:	e019      	b.n	800b2a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d103      	bne.n	800b284 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f001 f8a3 	bl	800c3c8 <vPortFree>
	}
 800b282:	e010      	b.n	800b2a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	d00b      	beq.n	800b2a6 <prvDeleteTCB+0x62>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	60fb      	str	r3, [r7, #12]
}
 800b2a0:	bf00      	nop
 800b2a2:	bf00      	nop
 800b2a4:	e7fd      	b.n	800b2a2 <prvDeleteTCB+0x5e>
	}
 800b2a6:	bf00      	nop
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e8 <prvResetNextTaskUnblockTime+0x38>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d104      	bne.n	800b2ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b2c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b2ec <prvResetNextTaskUnblockTime+0x3c>)
 800b2c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b2c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b2c8:	e008      	b.n	800b2dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2ca:	4b07      	ldr	r3, [pc, #28]	@ (800b2e8 <prvResetNextTaskUnblockTime+0x38>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	4a04      	ldr	r2, [pc, #16]	@ (800b2ec <prvResetNextTaskUnblockTime+0x3c>)
 800b2da:	6013      	str	r3, [r2, #0]
}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	20001db4 	.word	0x20001db4
 800b2ec:	20001e1c 	.word	0x20001e1c

0800b2f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b2f6:	4b05      	ldr	r3, [pc, #20]	@ (800b30c <xTaskGetCurrentTaskHandle+0x1c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b2fc:	687b      	ldr	r3, [r7, #4]
	}
 800b2fe:	4618      	mov	r0, r3
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	20001928 	.word	0x20001928

0800b310 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b316:	4b0b      	ldr	r3, [pc, #44]	@ (800b344 <xTaskGetSchedulerState+0x34>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d102      	bne.n	800b324 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b31e:	2301      	movs	r3, #1
 800b320:	607b      	str	r3, [r7, #4]
 800b322:	e008      	b.n	800b336 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b324:	4b08      	ldr	r3, [pc, #32]	@ (800b348 <xTaskGetSchedulerState+0x38>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d102      	bne.n	800b332 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b32c:	2302      	movs	r3, #2
 800b32e:	607b      	str	r3, [r7, #4]
 800b330:	e001      	b.n	800b336 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b332:	2300      	movs	r3, #0
 800b334:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b336:	687b      	ldr	r3, [r7, #4]
	}
 800b338:	4618      	mov	r0, r3
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	20001e08 	.word	0x20001e08
 800b348:	20001e24 	.word	0x20001e24

0800b34c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b358:	2300      	movs	r3, #0
 800b35a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d051      	beq.n	800b406 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b366:	4b2a      	ldr	r3, [pc, #168]	@ (800b410 <xTaskPriorityInherit+0xc4>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d241      	bcs.n	800b3f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	2b00      	cmp	r3, #0
 800b376:	db06      	blt.n	800b386 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b378:	4b25      	ldr	r3, [pc, #148]	@ (800b410 <xTaskPriorityInherit+0xc4>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b37e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	6959      	ldr	r1, [r3, #20]
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b38e:	4613      	mov	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4a1f      	ldr	r2, [pc, #124]	@ (800b414 <xTaskPriorityInherit+0xc8>)
 800b398:	4413      	add	r3, r2
 800b39a:	4299      	cmp	r1, r3
 800b39c:	d122      	bne.n	800b3e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe f83e 	bl	8009424 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b3a8:	4b19      	ldr	r3, [pc, #100]	@ (800b410 <xTaskPriorityInherit+0xc4>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3b6:	4b18      	ldr	r3, [pc, #96]	@ (800b418 <xTaskPriorityInherit+0xcc>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d903      	bls.n	800b3c6 <xTaskPriorityInherit+0x7a>
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c2:	4a15      	ldr	r2, [pc, #84]	@ (800b418 <xTaskPriorityInherit+0xcc>)
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	4a10      	ldr	r2, [pc, #64]	@ (800b414 <xTaskPriorityInherit+0xc8>)
 800b3d4:	441a      	add	r2, r3
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	3304      	adds	r3, #4
 800b3da:	4619      	mov	r1, r3
 800b3dc:	4610      	mov	r0, r2
 800b3de:	f7fd ffc4 	bl	800936a <vListInsertEnd>
 800b3e2:	e004      	b.n	800b3ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b3e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b410 <xTaskPriorityInherit+0xc4>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	60fb      	str	r3, [r7, #12]
 800b3f2:	e008      	b.n	800b406 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3f8:	4b05      	ldr	r3, [pc, #20]	@ (800b410 <xTaskPriorityInherit+0xc4>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d201      	bcs.n	800b406 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b402:	2301      	movs	r3, #1
 800b404:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b406:	68fb      	ldr	r3, [r7, #12]
	}
 800b408:	4618      	mov	r0, r3
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	20001928 	.word	0x20001928
 800b414:	2000192c 	.word	0x2000192c
 800b418:	20001e04 	.word	0x20001e04

0800b41c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b428:	2300      	movs	r3, #0
 800b42a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d058      	beq.n	800b4e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b432:	4b2f      	ldr	r3, [pc, #188]	@ (800b4f0 <xTaskPriorityDisinherit+0xd4>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d00b      	beq.n	800b454 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b440:	f383 8811 	msr	BASEPRI, r3
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	60fb      	str	r3, [r7, #12]
}
 800b44e:	bf00      	nop
 800b450:	bf00      	nop
 800b452:	e7fd      	b.n	800b450 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10b      	bne.n	800b474 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b45c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	60bb      	str	r3, [r7, #8]
}
 800b46e:	bf00      	nop
 800b470:	bf00      	nop
 800b472:	e7fd      	b.n	800b470 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b478:	1e5a      	subs	r2, r3, #1
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b486:	429a      	cmp	r2, r3
 800b488:	d02c      	beq.n	800b4e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d128      	bne.n	800b4e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	3304      	adds	r3, #4
 800b496:	4618      	mov	r0, r3
 800b498:	f7fd ffc4 	bl	8009424 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b4f4 <xTaskPriorityDisinherit+0xd8>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d903      	bls.n	800b4c4 <xTaskPriorityDisinherit+0xa8>
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4c0:	4a0c      	ldr	r2, [pc, #48]	@ (800b4f4 <xTaskPriorityDisinherit+0xd8>)
 800b4c2:	6013      	str	r3, [r2, #0]
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	4a09      	ldr	r2, [pc, #36]	@ (800b4f8 <xTaskPriorityDisinherit+0xdc>)
 800b4d2:	441a      	add	r2, r3
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	f7fd ff45 	bl	800936a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4e4:	697b      	ldr	r3, [r7, #20]
	}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3718      	adds	r7, #24
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20001928 	.word	0x20001928
 800b4f4:	20001e04 	.word	0x20001e04
 800b4f8:	2000192c 	.word	0x2000192c

0800b4fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b088      	sub	sp, #32
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b50a:	2301      	movs	r3, #1
 800b50c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d06c      	beq.n	800b5ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10b      	bne.n	800b534 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	60fb      	str	r3, [r7, #12]
}
 800b52e:	bf00      	nop
 800b530:	bf00      	nop
 800b532:	e7fd      	b.n	800b530 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b538:	683a      	ldr	r2, [r7, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d902      	bls.n	800b544 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	61fb      	str	r3, [r7, #28]
 800b542:	e002      	b.n	800b54a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b548:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b54e:	69fa      	ldr	r2, [r7, #28]
 800b550:	429a      	cmp	r2, r3
 800b552:	d04c      	beq.n	800b5ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b558:	697a      	ldr	r2, [r7, #20]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d147      	bne.n	800b5ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b55e:	4b26      	ldr	r3, [pc, #152]	@ (800b5f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	429a      	cmp	r2, r3
 800b566:	d10b      	bne.n	800b580 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56c:	f383 8811 	msr	BASEPRI, r3
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	60bb      	str	r3, [r7, #8]
}
 800b57a:	bf00      	nop
 800b57c:	bf00      	nop
 800b57e:	e7fd      	b.n	800b57c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b584:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	69fa      	ldr	r2, [r7, #28]
 800b58a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	2b00      	cmp	r3, #0
 800b592:	db04      	blt.n	800b59e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	6959      	ldr	r1, [r3, #20]
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4413      	add	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4a13      	ldr	r2, [pc, #76]	@ (800b5fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b5ae:	4413      	add	r3, r2
 800b5b0:	4299      	cmp	r1, r3
 800b5b2:	d11c      	bne.n	800b5ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fd ff33 	bl	8009424 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5c2:	4b0f      	ldr	r3, [pc, #60]	@ (800b600 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d903      	bls.n	800b5d2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ce:	4a0c      	ldr	r2, [pc, #48]	@ (800b600 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b5d0:	6013      	str	r3, [r2, #0]
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4413      	add	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4a07      	ldr	r2, [pc, #28]	@ (800b5fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b5e0:	441a      	add	r2, r3
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	f7fd febe 	bl	800936a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5ee:	bf00      	nop
 800b5f0:	3720      	adds	r7, #32
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20001928 	.word	0x20001928
 800b5fc:	2000192c 	.word	0x2000192c
 800b600:	20001e04 	.word	0x20001e04

0800b604 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b604:	b480      	push	{r7}
 800b606:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b608:	4b07      	ldr	r3, [pc, #28]	@ (800b628 <pvTaskIncrementMutexHeldCount+0x24>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d004      	beq.n	800b61a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b610:	4b05      	ldr	r3, [pc, #20]	@ (800b628 <pvTaskIncrementMutexHeldCount+0x24>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b616:	3201      	adds	r2, #1
 800b618:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b61a:	4b03      	ldr	r3, [pc, #12]	@ (800b628 <pvTaskIncrementMutexHeldCount+0x24>)
 800b61c:	681b      	ldr	r3, [r3, #0]
	}
 800b61e:	4618      	mov	r0, r3
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr
 800b628:	20001928 	.word	0x20001928

0800b62c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b636:	4b21      	ldr	r3, [pc, #132]	@ (800b6bc <prvAddCurrentTaskToDelayedList+0x90>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b63c:	4b20      	ldr	r3, [pc, #128]	@ (800b6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3304      	adds	r3, #4
 800b642:	4618      	mov	r0, r3
 800b644:	f7fd feee 	bl	8009424 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b64e:	d10a      	bne.n	800b666 <prvAddCurrentTaskToDelayedList+0x3a>
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d007      	beq.n	800b666 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b656:	4b1a      	ldr	r3, [pc, #104]	@ (800b6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	3304      	adds	r3, #4
 800b65c:	4619      	mov	r1, r3
 800b65e:	4819      	ldr	r0, [pc, #100]	@ (800b6c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b660:	f7fd fe83 	bl	800936a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b664:	e026      	b.n	800b6b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4413      	add	r3, r2
 800b66c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b66e:	4b14      	ldr	r3, [pc, #80]	@ (800b6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d209      	bcs.n	800b692 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b67e:	4b12      	ldr	r3, [pc, #72]	@ (800b6c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	3304      	adds	r3, #4
 800b688:	4619      	mov	r1, r3
 800b68a:	4610      	mov	r0, r2
 800b68c:	f7fd fe91 	bl	80093b2 <vListInsert>
}
 800b690:	e010      	b.n	800b6b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b692:	4b0e      	ldr	r3, [pc, #56]	@ (800b6cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	3304      	adds	r3, #4
 800b69c:	4619      	mov	r1, r3
 800b69e:	4610      	mov	r0, r2
 800b6a0:	f7fd fe87 	bl	80093b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b6a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b6d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68ba      	ldr	r2, [r7, #8]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d202      	bcs.n	800b6b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b6ae:	4a08      	ldr	r2, [pc, #32]	@ (800b6d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	6013      	str	r3, [r2, #0]
}
 800b6b4:	bf00      	nop
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	20001e00 	.word	0x20001e00
 800b6c0:	20001928 	.word	0x20001928
 800b6c4:	20001de8 	.word	0x20001de8
 800b6c8:	20001db8 	.word	0x20001db8
 800b6cc:	20001db4 	.word	0x20001db4
 800b6d0:	20001e1c 	.word	0x20001e1c

0800b6d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b08a      	sub	sp, #40	@ 0x28
 800b6d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b6de:	f000 fb13 	bl	800bd08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b6e2:	4b1d      	ldr	r3, [pc, #116]	@ (800b758 <xTimerCreateTimerTask+0x84>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d021      	beq.n	800b72e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b6f2:	1d3a      	adds	r2, r7, #4
 800b6f4:	f107 0108 	add.w	r1, r7, #8
 800b6f8:	f107 030c 	add.w	r3, r7, #12
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fd fded 	bl	80092dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b702:	6879      	ldr	r1, [r7, #4]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	9202      	str	r2, [sp, #8]
 800b70a:	9301      	str	r3, [sp, #4]
 800b70c:	2302      	movs	r3, #2
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	2300      	movs	r3, #0
 800b712:	460a      	mov	r2, r1
 800b714:	4911      	ldr	r1, [pc, #68]	@ (800b75c <xTimerCreateTimerTask+0x88>)
 800b716:	4812      	ldr	r0, [pc, #72]	@ (800b760 <xTimerCreateTimerTask+0x8c>)
 800b718:	f7fe ff68 	bl	800a5ec <xTaskCreateStatic>
 800b71c:	4603      	mov	r3, r0
 800b71e:	4a11      	ldr	r2, [pc, #68]	@ (800b764 <xTimerCreateTimerTask+0x90>)
 800b720:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b722:	4b10      	ldr	r3, [pc, #64]	@ (800b764 <xTimerCreateTimerTask+0x90>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b72a:	2301      	movs	r3, #1
 800b72c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10b      	bne.n	800b74c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	613b      	str	r3, [r7, #16]
}
 800b746:	bf00      	nop
 800b748:	bf00      	nop
 800b74a:	e7fd      	b.n	800b748 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b74c:	697b      	ldr	r3, [r7, #20]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20001e58 	.word	0x20001e58
 800b75c:	080303e0 	.word	0x080303e0
 800b760:	0800b8a1 	.word	0x0800b8a1
 800b764:	20001e5c 	.word	0x20001e5c

0800b768 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08a      	sub	sp, #40	@ 0x28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b776:	2300      	movs	r3, #0
 800b778:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10b      	bne.n	800b798 <xTimerGenericCommand+0x30>
	__asm volatile
 800b780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b784:	f383 8811 	msr	BASEPRI, r3
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	623b      	str	r3, [r7, #32]
}
 800b792:	bf00      	nop
 800b794:	bf00      	nop
 800b796:	e7fd      	b.n	800b794 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b798:	4b19      	ldr	r3, [pc, #100]	@ (800b800 <xTimerGenericCommand+0x98>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d02a      	beq.n	800b7f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2b05      	cmp	r3, #5
 800b7b0:	dc18      	bgt.n	800b7e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b7b2:	f7ff fdad 	bl	800b310 <xTaskGetSchedulerState>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d109      	bne.n	800b7d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b7bc:	4b10      	ldr	r3, [pc, #64]	@ (800b800 <xTimerGenericCommand+0x98>)
 800b7be:	6818      	ldr	r0, [r3, #0]
 800b7c0:	f107 0110 	add.w	r1, r7, #16
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7c8:	f7fe f854 	bl	8009874 <xQueueGenericSend>
 800b7cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800b7ce:	e012      	b.n	800b7f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b7d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b800 <xTimerGenericCommand+0x98>)
 800b7d2:	6818      	ldr	r0, [r3, #0]
 800b7d4:	f107 0110 	add.w	r1, r7, #16
 800b7d8:	2300      	movs	r3, #0
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f7fe f84a 	bl	8009874 <xQueueGenericSend>
 800b7e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b7e2:	e008      	b.n	800b7f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b7e4:	4b06      	ldr	r3, [pc, #24]	@ (800b800 <xTimerGenericCommand+0x98>)
 800b7e6:	6818      	ldr	r0, [r3, #0]
 800b7e8:	f107 0110 	add.w	r1, r7, #16
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	f7fe f942 	bl	8009a78 <xQueueGenericSendFromISR>
 800b7f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3728      	adds	r7, #40	@ 0x28
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	20001e58 	.word	0x20001e58

0800b804 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b088      	sub	sp, #32
 800b808:	af02      	add	r7, sp, #8
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b80e:	4b23      	ldr	r3, [pc, #140]	@ (800b89c <prvProcessExpiredTimer+0x98>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	3304      	adds	r3, #4
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7fd fe01 	bl	8009424 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b828:	f003 0304 	and.w	r3, r3, #4
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d023      	beq.n	800b878 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	699a      	ldr	r2, [r3, #24]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	18d1      	adds	r1, r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	683a      	ldr	r2, [r7, #0]
 800b83c:	6978      	ldr	r0, [r7, #20]
 800b83e:	f000 f8d5 	bl	800b9ec <prvInsertTimerInActiveList>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d020      	beq.n	800b88a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b848:	2300      	movs	r3, #0
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	2300      	movs	r3, #0
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	2100      	movs	r1, #0
 800b852:	6978      	ldr	r0, [r7, #20]
 800b854:	f7ff ff88 	bl	800b768 <xTimerGenericCommand>
 800b858:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d114      	bne.n	800b88a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b864:	f383 8811 	msr	BASEPRI, r3
 800b868:	f3bf 8f6f 	isb	sy
 800b86c:	f3bf 8f4f 	dsb	sy
 800b870:	60fb      	str	r3, [r7, #12]
}
 800b872:	bf00      	nop
 800b874:	bf00      	nop
 800b876:	e7fd      	b.n	800b874 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b87e:	f023 0301 	bic.w	r3, r3, #1
 800b882:	b2da      	uxtb	r2, r3
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	6978      	ldr	r0, [r7, #20]
 800b890:	4798      	blx	r3
}
 800b892:	bf00      	nop
 800b894:	3718      	adds	r7, #24
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	20001e50 	.word	0x20001e50

0800b8a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8a8:	f107 0308 	add.w	r3, r7, #8
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f000 f859 	bl	800b964 <prvGetNextExpireTime>
 800b8b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f000 f805 	bl	800b8c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b8be:	f000 f8d7 	bl	800ba70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8c2:	bf00      	nop
 800b8c4:	e7f0      	b.n	800b8a8 <prvTimerTask+0x8>
	...

0800b8c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8d2:	f7ff f919 	bl	800ab08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8d6:	f107 0308 	add.w	r3, r7, #8
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 f866 	bl	800b9ac <prvSampleTimeNow>
 800b8e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d130      	bne.n	800b94a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10a      	bne.n	800b904 <prvProcessTimerOrBlockTask+0x3c>
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d806      	bhi.n	800b904 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b8f6:	f7ff f915 	bl	800ab24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b8fa:	68f9      	ldr	r1, [r7, #12]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7ff ff81 	bl	800b804 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b902:	e024      	b.n	800b94e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d008      	beq.n	800b91c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b90a:	4b13      	ldr	r3, [pc, #76]	@ (800b958 <prvProcessTimerOrBlockTask+0x90>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d101      	bne.n	800b918 <prvProcessTimerOrBlockTask+0x50>
 800b914:	2301      	movs	r3, #1
 800b916:	e000      	b.n	800b91a <prvProcessTimerOrBlockTask+0x52>
 800b918:	2300      	movs	r3, #0
 800b91a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b91c:	4b0f      	ldr	r3, [pc, #60]	@ (800b95c <prvProcessTimerOrBlockTask+0x94>)
 800b91e:	6818      	ldr	r0, [r3, #0]
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	683a      	ldr	r2, [r7, #0]
 800b928:	4619      	mov	r1, r3
 800b92a:	f7fe fe2b 	bl	800a584 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b92e:	f7ff f8f9 	bl	800ab24 <xTaskResumeAll>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10a      	bne.n	800b94e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b938:	4b09      	ldr	r3, [pc, #36]	@ (800b960 <prvProcessTimerOrBlockTask+0x98>)
 800b93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	f3bf 8f6f 	isb	sy
}
 800b948:	e001      	b.n	800b94e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b94a:	f7ff f8eb 	bl	800ab24 <xTaskResumeAll>
}
 800b94e:	bf00      	nop
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20001e54 	.word	0x20001e54
 800b95c:	20001e58 	.word	0x20001e58
 800b960:	e000ed04 	.word	0xe000ed04

0800b964 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b96c:	4b0e      	ldr	r3, [pc, #56]	@ (800b9a8 <prvGetNextExpireTime+0x44>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <prvGetNextExpireTime+0x16>
 800b976:	2201      	movs	r2, #1
 800b978:	e000      	b.n	800b97c <prvGetNextExpireTime+0x18>
 800b97a:	2200      	movs	r2, #0
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d105      	bne.n	800b994 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b988:	4b07      	ldr	r3, [pc, #28]	@ (800b9a8 <prvGetNextExpireTime+0x44>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	60fb      	str	r3, [r7, #12]
 800b992:	e001      	b.n	800b998 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b994:	2300      	movs	r3, #0
 800b996:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b998:	68fb      	ldr	r3, [r7, #12]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3714      	adds	r7, #20
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	20001e50 	.word	0x20001e50

0800b9ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b9b4:	f7ff f954 	bl	800ac60 <xTaskGetTickCount>
 800b9b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b9ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b9e8 <prvSampleTimeNow+0x3c>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d205      	bcs.n	800b9d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b9c4:	f000 f93a 	bl	800bc3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	601a      	str	r2, [r3, #0]
 800b9ce:	e002      	b.n	800b9d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b9d6:	4a04      	ldr	r2, [pc, #16]	@ (800b9e8 <prvSampleTimeNow+0x3c>)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20001e60 	.word	0x20001e60

0800b9ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
 800b9f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d812      	bhi.n	800ba38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	1ad2      	subs	r2, r2, r3
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d302      	bcc.n	800ba26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba20:	2301      	movs	r3, #1
 800ba22:	617b      	str	r3, [r7, #20]
 800ba24:	e01b      	b.n	800ba5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba26:	4b10      	ldr	r3, [pc, #64]	@ (800ba68 <prvInsertTimerInActiveList+0x7c>)
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4610      	mov	r0, r2
 800ba32:	f7fd fcbe 	bl	80093b2 <vListInsert>
 800ba36:	e012      	b.n	800ba5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d206      	bcs.n	800ba4e <prvInsertTimerInActiveList+0x62>
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d302      	bcc.n	800ba4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	617b      	str	r3, [r7, #20]
 800ba4c:	e007      	b.n	800ba5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba4e:	4b07      	ldr	r3, [pc, #28]	@ (800ba6c <prvInsertTimerInActiveList+0x80>)
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	3304      	adds	r3, #4
 800ba56:	4619      	mov	r1, r3
 800ba58:	4610      	mov	r0, r2
 800ba5a:	f7fd fcaa 	bl	80093b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba5e:	697b      	ldr	r3, [r7, #20]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	20001e54 	.word	0x20001e54
 800ba6c:	20001e50 	.word	0x20001e50

0800ba70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08e      	sub	sp, #56	@ 0x38
 800ba74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba76:	e0ce      	b.n	800bc16 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	da19      	bge.n	800bab2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba7e:	1d3b      	adds	r3, r7, #4
 800ba80:	3304      	adds	r3, #4
 800ba82:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10b      	bne.n	800baa2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	61fb      	str	r3, [r7, #28]
}
 800ba9c:	bf00      	nop
 800ba9e:	bf00      	nop
 800baa0:	e7fd      	b.n	800ba9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800baa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800baa8:	6850      	ldr	r0, [r2, #4]
 800baaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800baac:	6892      	ldr	r2, [r2, #8]
 800baae:	4611      	mov	r1, r2
 800bab0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f2c0 80ae 	blt.w	800bc16 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800babe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac0:	695b      	ldr	r3, [r3, #20]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d004      	beq.n	800bad0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac8:	3304      	adds	r3, #4
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fd fcaa 	bl	8009424 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bad0:	463b      	mov	r3, r7
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7ff ff6a 	bl	800b9ac <prvSampleTimeNow>
 800bad8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2b09      	cmp	r3, #9
 800bade:	f200 8097 	bhi.w	800bc10 <prvProcessReceivedCommands+0x1a0>
 800bae2:	a201      	add	r2, pc, #4	@ (adr r2, 800bae8 <prvProcessReceivedCommands+0x78>)
 800bae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae8:	0800bb11 	.word	0x0800bb11
 800baec:	0800bb11 	.word	0x0800bb11
 800baf0:	0800bb11 	.word	0x0800bb11
 800baf4:	0800bb87 	.word	0x0800bb87
 800baf8:	0800bb9b 	.word	0x0800bb9b
 800bafc:	0800bbe7 	.word	0x0800bbe7
 800bb00:	0800bb11 	.word	0x0800bb11
 800bb04:	0800bb11 	.word	0x0800bb11
 800bb08:	0800bb87 	.word	0x0800bb87
 800bb0c:	0800bb9b 	.word	0x0800bb9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb16:	f043 0301 	orr.w	r3, r3, #1
 800bb1a:	b2da      	uxtb	r2, r3
 800bb1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb22:	68ba      	ldr	r2, [r7, #8]
 800bb24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	18d1      	adds	r1, r2, r3
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb30:	f7ff ff5c 	bl	800b9ec <prvInsertTimerInActiveList>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d06c      	beq.n	800bc14 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb48:	f003 0304 	and.w	r3, r3, #4
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d061      	beq.n	800bc14 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb50:	68ba      	ldr	r2, [r7, #8]
 800bb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb54:	699b      	ldr	r3, [r3, #24]
 800bb56:	441a      	add	r2, r3
 800bb58:	2300      	movs	r3, #0
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	2100      	movs	r1, #0
 800bb60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb62:	f7ff fe01 	bl	800b768 <xTimerGenericCommand>
 800bb66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb68:	6a3b      	ldr	r3, [r7, #32]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d152      	bne.n	800bc14 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	61bb      	str	r3, [r7, #24]
}
 800bb80:	bf00      	nop
 800bb82:	bf00      	nop
 800bb84:	e7fd      	b.n	800bb82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb8c:	f023 0301 	bic.w	r3, r3, #1
 800bb90:	b2da      	uxtb	r2, r3
 800bb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bb98:	e03d      	b.n	800bc16 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bba0:	f043 0301 	orr.w	r3, r3, #1
 800bba4:	b2da      	uxtb	r2, r3
 800bba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bbac:	68ba      	ldr	r2, [r7, #8]
 800bbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb4:	699b      	ldr	r3, [r3, #24]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d10b      	bne.n	800bbd2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bbba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	617b      	str	r3, [r7, #20]
}
 800bbcc:	bf00      	nop
 800bbce:	bf00      	nop
 800bbd0:	e7fd      	b.n	800bbce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd4:	699a      	ldr	r2, [r3, #24]
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd8:	18d1      	adds	r1, r2, r3
 800bbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbe0:	f7ff ff04 	bl	800b9ec <prvInsertTimerInActiveList>
					break;
 800bbe4:	e017      	b.n	800bc16 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bbe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbec:	f003 0302 	and.w	r3, r3, #2
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d103      	bne.n	800bbfc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bbf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbf6:	f000 fbe7 	bl	800c3c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bbfa:	e00c      	b.n	800bc16 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc02:	f023 0301 	bic.w	r3, r3, #1
 800bc06:	b2da      	uxtb	r2, r3
 800bc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bc0e:	e002      	b.n	800bc16 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bc10:	bf00      	nop
 800bc12:	e000      	b.n	800bc16 <prvProcessReceivedCommands+0x1a6>
					break;
 800bc14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc16:	4b08      	ldr	r3, [pc, #32]	@ (800bc38 <prvProcessReceivedCommands+0x1c8>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	1d39      	adds	r1, r7, #4
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fd ffc8 	bl	8009bb4 <xQueueReceive>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f47f af26 	bne.w	800ba78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bc2c:	bf00      	nop
 800bc2e:	bf00      	nop
 800bc30:	3730      	adds	r7, #48	@ 0x30
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	20001e58 	.word	0x20001e58

0800bc3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b088      	sub	sp, #32
 800bc40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc42:	e049      	b.n	800bcd8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc44:	4b2e      	ldr	r3, [pc, #184]	@ (800bd00 <prvSwitchTimerLists+0xc4>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc4e:	4b2c      	ldr	r3, [pc, #176]	@ (800bd00 <prvSwitchTimerLists+0xc4>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fd fbe1 	bl	8009424 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6a1b      	ldr	r3, [r3, #32]
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc70:	f003 0304 	and.w	r3, r3, #4
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d02f      	beq.n	800bcd8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	699b      	ldr	r3, [r3, #24]
 800bc7c:	693a      	ldr	r2, [r7, #16]
 800bc7e:	4413      	add	r3, r2
 800bc80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d90e      	bls.n	800bca8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	68ba      	ldr	r2, [r7, #8]
 800bc8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc96:	4b1a      	ldr	r3, [pc, #104]	@ (800bd00 <prvSwitchTimerLists+0xc4>)
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	3304      	adds	r3, #4
 800bc9e:	4619      	mov	r1, r3
 800bca0:	4610      	mov	r0, r2
 800bca2:	f7fd fb86 	bl	80093b2 <vListInsert>
 800bca6:	e017      	b.n	800bcd8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bca8:	2300      	movs	r3, #0
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	2300      	movs	r3, #0
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f7ff fd58 	bl	800b768 <xTimerGenericCommand>
 800bcb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10b      	bne.n	800bcd8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bcc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	603b      	str	r3, [r7, #0]
}
 800bcd2:	bf00      	nop
 800bcd4:	bf00      	nop
 800bcd6:	e7fd      	b.n	800bcd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcd8:	4b09      	ldr	r3, [pc, #36]	@ (800bd00 <prvSwitchTimerLists+0xc4>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1b0      	bne.n	800bc44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bce2:	4b07      	ldr	r3, [pc, #28]	@ (800bd00 <prvSwitchTimerLists+0xc4>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bce8:	4b06      	ldr	r3, [pc, #24]	@ (800bd04 <prvSwitchTimerLists+0xc8>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a04      	ldr	r2, [pc, #16]	@ (800bd00 <prvSwitchTimerLists+0xc4>)
 800bcee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bcf0:	4a04      	ldr	r2, [pc, #16]	@ (800bd04 <prvSwitchTimerLists+0xc8>)
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	6013      	str	r3, [r2, #0]
}
 800bcf6:	bf00      	nop
 800bcf8:	3718      	adds	r7, #24
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	20001e50 	.word	0x20001e50
 800bd04:	20001e54 	.word	0x20001e54

0800bd08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bd0e:	f000 f96b 	bl	800bfe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd12:	4b15      	ldr	r3, [pc, #84]	@ (800bd68 <prvCheckForValidListAndQueue+0x60>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d120      	bne.n	800bd5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd1a:	4814      	ldr	r0, [pc, #80]	@ (800bd6c <prvCheckForValidListAndQueue+0x64>)
 800bd1c:	f7fd faf8 	bl	8009310 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd20:	4813      	ldr	r0, [pc, #76]	@ (800bd70 <prvCheckForValidListAndQueue+0x68>)
 800bd22:	f7fd faf5 	bl	8009310 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd26:	4b13      	ldr	r3, [pc, #76]	@ (800bd74 <prvCheckForValidListAndQueue+0x6c>)
 800bd28:	4a10      	ldr	r2, [pc, #64]	@ (800bd6c <prvCheckForValidListAndQueue+0x64>)
 800bd2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd2c:	4b12      	ldr	r3, [pc, #72]	@ (800bd78 <prvCheckForValidListAndQueue+0x70>)
 800bd2e:	4a10      	ldr	r2, [pc, #64]	@ (800bd70 <prvCheckForValidListAndQueue+0x68>)
 800bd30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd32:	2300      	movs	r3, #0
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	4b11      	ldr	r3, [pc, #68]	@ (800bd7c <prvCheckForValidListAndQueue+0x74>)
 800bd38:	4a11      	ldr	r2, [pc, #68]	@ (800bd80 <prvCheckForValidListAndQueue+0x78>)
 800bd3a:	2110      	movs	r1, #16
 800bd3c:	200a      	movs	r0, #10
 800bd3e:	f7fd fc05 	bl	800954c <xQueueGenericCreateStatic>
 800bd42:	4603      	mov	r3, r0
 800bd44:	4a08      	ldr	r2, [pc, #32]	@ (800bd68 <prvCheckForValidListAndQueue+0x60>)
 800bd46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd48:	4b07      	ldr	r3, [pc, #28]	@ (800bd68 <prvCheckForValidListAndQueue+0x60>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d005      	beq.n	800bd5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd50:	4b05      	ldr	r3, [pc, #20]	@ (800bd68 <prvCheckForValidListAndQueue+0x60>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	490b      	ldr	r1, [pc, #44]	@ (800bd84 <prvCheckForValidListAndQueue+0x7c>)
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe fbea 	bl	800a530 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd5c:	f000 f976 	bl	800c04c <vPortExitCritical>
}
 800bd60:	bf00      	nop
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	20001e58 	.word	0x20001e58
 800bd6c:	20001e28 	.word	0x20001e28
 800bd70:	20001e3c 	.word	0x20001e3c
 800bd74:	20001e50 	.word	0x20001e50
 800bd78:	20001e54 	.word	0x20001e54
 800bd7c:	20001f04 	.word	0x20001f04
 800bd80:	20001e64 	.word	0x20001e64
 800bd84:	080303e8 	.word	0x080303e8

0800bd88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	3b04      	subs	r3, #4
 800bd98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bda0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3b04      	subs	r3, #4
 800bda6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	f023 0201 	bic.w	r2, r3, #1
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	3b04      	subs	r3, #4
 800bdb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bdb8:	4a0c      	ldr	r2, [pc, #48]	@ (800bdec <pxPortInitialiseStack+0x64>)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	3b14      	subs	r3, #20
 800bdc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	3b04      	subs	r3, #4
 800bdce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f06f 0202 	mvn.w	r2, #2
 800bdd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	3b20      	subs	r3, #32
 800bddc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdde:	68fb      	ldr	r3, [r7, #12]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3714      	adds	r7, #20
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr
 800bdec:	0800bdf1 	.word	0x0800bdf1

0800bdf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdfa:	4b13      	ldr	r3, [pc, #76]	@ (800be48 <prvTaskExitError+0x58>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be02:	d00b      	beq.n	800be1c <prvTaskExitError+0x2c>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	60fb      	str	r3, [r7, #12]
}
 800be16:	bf00      	nop
 800be18:	bf00      	nop
 800be1a:	e7fd      	b.n	800be18 <prvTaskExitError+0x28>
	__asm volatile
 800be1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be20:	f383 8811 	msr	BASEPRI, r3
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	60bb      	str	r3, [r7, #8]
}
 800be2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be30:	bf00      	nop
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d0fc      	beq.n	800be32 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be38:	bf00      	nop
 800be3a:	bf00      	nop
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	20000084 	.word	0x20000084
 800be4c:	00000000 	.word	0x00000000

0800be50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be50:	4b07      	ldr	r3, [pc, #28]	@ (800be70 <pxCurrentTCBConst2>)
 800be52:	6819      	ldr	r1, [r3, #0]
 800be54:	6808      	ldr	r0, [r1, #0]
 800be56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5a:	f380 8809 	msr	PSP, r0
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f04f 0000 	mov.w	r0, #0
 800be66:	f380 8811 	msr	BASEPRI, r0
 800be6a:	4770      	bx	lr
 800be6c:	f3af 8000 	nop.w

0800be70 <pxCurrentTCBConst2>:
 800be70:	20001928 	.word	0x20001928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be74:	bf00      	nop
 800be76:	bf00      	nop

0800be78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be78:	4808      	ldr	r0, [pc, #32]	@ (800be9c <prvPortStartFirstTask+0x24>)
 800be7a:	6800      	ldr	r0, [r0, #0]
 800be7c:	6800      	ldr	r0, [r0, #0]
 800be7e:	f380 8808 	msr	MSP, r0
 800be82:	f04f 0000 	mov.w	r0, #0
 800be86:	f380 8814 	msr	CONTROL, r0
 800be8a:	b662      	cpsie	i
 800be8c:	b661      	cpsie	f
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	df00      	svc	0
 800be98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be9a:	bf00      	nop
 800be9c:	e000ed08 	.word	0xe000ed08

0800bea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bea6:	4b47      	ldr	r3, [pc, #284]	@ (800bfc4 <xPortStartScheduler+0x124>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a47      	ldr	r2, [pc, #284]	@ (800bfc8 <xPortStartScheduler+0x128>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d10b      	bne.n	800bec8 <xPortStartScheduler+0x28>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	613b      	str	r3, [r7, #16]
}
 800bec2:	bf00      	nop
 800bec4:	bf00      	nop
 800bec6:	e7fd      	b.n	800bec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bec8:	4b3e      	ldr	r3, [pc, #248]	@ (800bfc4 <xPortStartScheduler+0x124>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a3f      	ldr	r2, [pc, #252]	@ (800bfcc <xPortStartScheduler+0x12c>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d10b      	bne.n	800beea <xPortStartScheduler+0x4a>
	__asm volatile
 800bed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	60fb      	str	r3, [r7, #12]
}
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop
 800bee8:	e7fd      	b.n	800bee6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800beea:	4b39      	ldr	r3, [pc, #228]	@ (800bfd0 <xPortStartScheduler+0x130>)
 800beec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	22ff      	movs	r2, #255	@ 0xff
 800befa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf04:	78fb      	ldrb	r3, [r7, #3]
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	4b31      	ldr	r3, [pc, #196]	@ (800bfd4 <xPortStartScheduler+0x134>)
 800bf10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf12:	4b31      	ldr	r3, [pc, #196]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf14:	2207      	movs	r2, #7
 800bf16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf18:	e009      	b.n	800bf2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bf1a:	4b2f      	ldr	r3, [pc, #188]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	4a2d      	ldr	r2, [pc, #180]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf24:	78fb      	ldrb	r3, [r7, #3]
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf2e:	78fb      	ldrb	r3, [r7, #3]
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf36:	2b80      	cmp	r3, #128	@ 0x80
 800bf38:	d0ef      	beq.n	800bf1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf3a:	4b27      	ldr	r3, [pc, #156]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f1c3 0307 	rsb	r3, r3, #7
 800bf42:	2b04      	cmp	r3, #4
 800bf44:	d00b      	beq.n	800bf5e <xPortStartScheduler+0xbe>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	60bb      	str	r3, [r7, #8]
}
 800bf58:	bf00      	nop
 800bf5a:	bf00      	nop
 800bf5c:	e7fd      	b.n	800bf5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf5e:	4b1e      	ldr	r3, [pc, #120]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	021b      	lsls	r3, r3, #8
 800bf64:	4a1c      	ldr	r2, [pc, #112]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf68:	4b1b      	ldr	r3, [pc, #108]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bf70:	4a19      	ldr	r2, [pc, #100]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	b2da      	uxtb	r2, r3
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf7c:	4b17      	ldr	r3, [pc, #92]	@ (800bfdc <xPortStartScheduler+0x13c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a16      	ldr	r2, [pc, #88]	@ (800bfdc <xPortStartScheduler+0x13c>)
 800bf82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bf86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf88:	4b14      	ldr	r3, [pc, #80]	@ (800bfdc <xPortStartScheduler+0x13c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a13      	ldr	r2, [pc, #76]	@ (800bfdc <xPortStartScheduler+0x13c>)
 800bf8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bf92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf94:	f000 f8da 	bl	800c14c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf98:	4b11      	ldr	r3, [pc, #68]	@ (800bfe0 <xPortStartScheduler+0x140>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf9e:	f000 f8f9 	bl	800c194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bfa2:	4b10      	ldr	r3, [pc, #64]	@ (800bfe4 <xPortStartScheduler+0x144>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a0f      	ldr	r2, [pc, #60]	@ (800bfe4 <xPortStartScheduler+0x144>)
 800bfa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bfac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bfae:	f7ff ff63 	bl	800be78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bfb2:	f7fe ff1f 	bl	800adf4 <vTaskSwitchContext>
	prvTaskExitError();
 800bfb6:	f7ff ff1b 	bl	800bdf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	e000ed00 	.word	0xe000ed00
 800bfc8:	410fc271 	.word	0x410fc271
 800bfcc:	410fc270 	.word	0x410fc270
 800bfd0:	e000e400 	.word	0xe000e400
 800bfd4:	20001f54 	.word	0x20001f54
 800bfd8:	20001f58 	.word	0x20001f58
 800bfdc:	e000ed20 	.word	0xe000ed20
 800bfe0:	20000084 	.word	0x20000084
 800bfe4:	e000ef34 	.word	0xe000ef34

0800bfe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	607b      	str	r3, [r7, #4]
}
 800c000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c002:	4b10      	ldr	r3, [pc, #64]	@ (800c044 <vPortEnterCritical+0x5c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3301      	adds	r3, #1
 800c008:	4a0e      	ldr	r2, [pc, #56]	@ (800c044 <vPortEnterCritical+0x5c>)
 800c00a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c00c:	4b0d      	ldr	r3, [pc, #52]	@ (800c044 <vPortEnterCritical+0x5c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b01      	cmp	r3, #1
 800c012:	d110      	bne.n	800c036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c014:	4b0c      	ldr	r3, [pc, #48]	@ (800c048 <vPortEnterCritical+0x60>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00b      	beq.n	800c036 <vPortEnterCritical+0x4e>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	603b      	str	r3, [r7, #0]
}
 800c030:	bf00      	nop
 800c032:	bf00      	nop
 800c034:	e7fd      	b.n	800c032 <vPortEnterCritical+0x4a>
	}
}
 800c036:	bf00      	nop
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	20000084 	.word	0x20000084
 800c048:	e000ed04 	.word	0xe000ed04

0800c04c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c052:	4b12      	ldr	r3, [pc, #72]	@ (800c09c <vPortExitCritical+0x50>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10b      	bne.n	800c072 <vPortExitCritical+0x26>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	607b      	str	r3, [r7, #4]
}
 800c06c:	bf00      	nop
 800c06e:	bf00      	nop
 800c070:	e7fd      	b.n	800c06e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c072:	4b0a      	ldr	r3, [pc, #40]	@ (800c09c <vPortExitCritical+0x50>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3b01      	subs	r3, #1
 800c078:	4a08      	ldr	r2, [pc, #32]	@ (800c09c <vPortExitCritical+0x50>)
 800c07a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c07c:	4b07      	ldr	r3, [pc, #28]	@ (800c09c <vPortExitCritical+0x50>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d105      	bne.n	800c090 <vPortExitCritical+0x44>
 800c084:	2300      	movs	r3, #0
 800c086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	f383 8811 	msr	BASEPRI, r3
}
 800c08e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c090:	bf00      	nop
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	20000084 	.word	0x20000084

0800c0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c0a0:	f3ef 8009 	mrs	r0, PSP
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	4b15      	ldr	r3, [pc, #84]	@ (800c100 <pxCurrentTCBConst>)
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	f01e 0f10 	tst.w	lr, #16
 800c0b0:	bf08      	it	eq
 800c0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ba:	6010      	str	r0, [r2, #0]
 800c0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c0c4:	f380 8811 	msr	BASEPRI, r0
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f7fe fe90 	bl	800adf4 <vTaskSwitchContext>
 800c0d4:	f04f 0000 	mov.w	r0, #0
 800c0d8:	f380 8811 	msr	BASEPRI, r0
 800c0dc:	bc09      	pop	{r0, r3}
 800c0de:	6819      	ldr	r1, [r3, #0]
 800c0e0:	6808      	ldr	r0, [r1, #0]
 800c0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e6:	f01e 0f10 	tst.w	lr, #16
 800c0ea:	bf08      	it	eq
 800c0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c0f0:	f380 8809 	msr	PSP, r0
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	f3af 8000 	nop.w

0800c100 <pxCurrentTCBConst>:
 800c100:	20001928 	.word	0x20001928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c104:	bf00      	nop
 800c106:	bf00      	nop

0800c108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	607b      	str	r3, [r7, #4]
}
 800c120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c122:	f7fe fdad 	bl	800ac80 <xTaskIncrementTick>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c12c:	4b06      	ldr	r3, [pc, #24]	@ (800c148 <xPortSysTickHandler+0x40>)
 800c12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	2300      	movs	r3, #0
 800c136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	f383 8811 	msr	BASEPRI, r3
}
 800c13e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	e000ed04 	.word	0xe000ed04

0800c14c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c14c:	b480      	push	{r7}
 800c14e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c150:	4b0b      	ldr	r3, [pc, #44]	@ (800c180 <vPortSetupTimerInterrupt+0x34>)
 800c152:	2200      	movs	r2, #0
 800c154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c156:	4b0b      	ldr	r3, [pc, #44]	@ (800c184 <vPortSetupTimerInterrupt+0x38>)
 800c158:	2200      	movs	r2, #0
 800c15a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c15c:	4b0a      	ldr	r3, [pc, #40]	@ (800c188 <vPortSetupTimerInterrupt+0x3c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a0a      	ldr	r2, [pc, #40]	@ (800c18c <vPortSetupTimerInterrupt+0x40>)
 800c162:	fba2 2303 	umull	r2, r3, r2, r3
 800c166:	099b      	lsrs	r3, r3, #6
 800c168:	4a09      	ldr	r2, [pc, #36]	@ (800c190 <vPortSetupTimerInterrupt+0x44>)
 800c16a:	3b01      	subs	r3, #1
 800c16c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c16e:	4b04      	ldr	r3, [pc, #16]	@ (800c180 <vPortSetupTimerInterrupt+0x34>)
 800c170:	2207      	movs	r2, #7
 800c172:	601a      	str	r2, [r3, #0]
}
 800c174:	bf00      	nop
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop
 800c180:	e000e010 	.word	0xe000e010
 800c184:	e000e018 	.word	0xe000e018
 800c188:	20000008 	.word	0x20000008
 800c18c:	10624dd3 	.word	0x10624dd3
 800c190:	e000e014 	.word	0xe000e014

0800c194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c1a4 <vPortEnableVFP+0x10>
 800c198:	6801      	ldr	r1, [r0, #0]
 800c19a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c19e:	6001      	str	r1, [r0, #0]
 800c1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c1a2:	bf00      	nop
 800c1a4:	e000ed88 	.word	0xe000ed88

0800c1a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1ae:	f3ef 8305 	mrs	r3, IPSR
 800c1b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2b0f      	cmp	r3, #15
 800c1b8:	d915      	bls.n	800c1e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1ba:	4a18      	ldr	r2, [pc, #96]	@ (800c21c <vPortValidateInterruptPriority+0x74>)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	4413      	add	r3, r2
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1c4:	4b16      	ldr	r3, [pc, #88]	@ (800c220 <vPortValidateInterruptPriority+0x78>)
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	7afa      	ldrb	r2, [r7, #11]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d20b      	bcs.n	800c1e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	607b      	str	r3, [r7, #4]
}
 800c1e0:	bf00      	nop
 800c1e2:	bf00      	nop
 800c1e4:	e7fd      	b.n	800c1e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c224 <vPortValidateInterruptPriority+0x7c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c228 <vPortValidateInterruptPriority+0x80>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d90b      	bls.n	800c20e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	603b      	str	r3, [r7, #0]
}
 800c208:	bf00      	nop
 800c20a:	bf00      	nop
 800c20c:	e7fd      	b.n	800c20a <vPortValidateInterruptPriority+0x62>
	}
 800c20e:	bf00      	nop
 800c210:	3714      	adds	r7, #20
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	e000e3f0 	.word	0xe000e3f0
 800c220:	20001f54 	.word	0x20001f54
 800c224:	e000ed0c 	.word	0xe000ed0c
 800c228:	20001f58 	.word	0x20001f58

0800c22c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b08a      	sub	sp, #40	@ 0x28
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c234:	2300      	movs	r3, #0
 800c236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c238:	f7fe fc66 	bl	800ab08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c23c:	4b5c      	ldr	r3, [pc, #368]	@ (800c3b0 <pvPortMalloc+0x184>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c244:	f000 f924 	bl	800c490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c248:	4b5a      	ldr	r3, [pc, #360]	@ (800c3b4 <pvPortMalloc+0x188>)
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4013      	ands	r3, r2
 800c250:	2b00      	cmp	r3, #0
 800c252:	f040 8095 	bne.w	800c380 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d01e      	beq.n	800c29a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c25c:	2208      	movs	r2, #8
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4413      	add	r3, r2
 800c262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f003 0307 	and.w	r3, r3, #7
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d015      	beq.n	800c29a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f023 0307 	bic.w	r3, r3, #7
 800c274:	3308      	adds	r3, #8
 800c276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f003 0307 	and.w	r3, r3, #7
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00b      	beq.n	800c29a <pvPortMalloc+0x6e>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	617b      	str	r3, [r7, #20]
}
 800c294:	bf00      	nop
 800c296:	bf00      	nop
 800c298:	e7fd      	b.n	800c296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d06f      	beq.n	800c380 <pvPortMalloc+0x154>
 800c2a0:	4b45      	ldr	r3, [pc, #276]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d86a      	bhi.n	800c380 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2aa:	4b44      	ldr	r3, [pc, #272]	@ (800c3bc <pvPortMalloc+0x190>)
 800c2ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2ae:	4b43      	ldr	r3, [pc, #268]	@ (800c3bc <pvPortMalloc+0x190>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2b4:	e004      	b.n	800c2c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d903      	bls.n	800c2d2 <pvPortMalloc+0xa6>
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1f1      	bne.n	800c2b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2d2:	4b37      	ldr	r3, [pc, #220]	@ (800c3b0 <pvPortMalloc+0x184>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d051      	beq.n	800c380 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2dc:	6a3b      	ldr	r3, [r7, #32]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2208      	movs	r2, #8
 800c2e2:	4413      	add	r3, r2
 800c2e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	6a3b      	ldr	r3, [r7, #32]
 800c2ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f0:	685a      	ldr	r2, [r3, #4]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	1ad2      	subs	r2, r2, r3
 800c2f6:	2308      	movs	r3, #8
 800c2f8:	005b      	lsls	r3, r3, #1
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d920      	bls.n	800c340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4413      	add	r3, r2
 800c304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	f003 0307 	and.w	r3, r3, #7
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00b      	beq.n	800c328 <pvPortMalloc+0xfc>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	613b      	str	r3, [r7, #16]
}
 800c322:	bf00      	nop
 800c324:	bf00      	nop
 800c326:	e7fd      	b.n	800c324 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	1ad2      	subs	r2, r2, r3
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c33a:	69b8      	ldr	r0, [r7, #24]
 800c33c:	f000 f90c 	bl	800c558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c340:	4b1d      	ldr	r3, [pc, #116]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	1ad3      	subs	r3, r2, r3
 800c34a:	4a1b      	ldr	r2, [pc, #108]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c34c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c34e:	4b1a      	ldr	r3, [pc, #104]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	4b1b      	ldr	r3, [pc, #108]	@ (800c3c0 <pvPortMalloc+0x194>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	429a      	cmp	r2, r3
 800c358:	d203      	bcs.n	800c362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c35a:	4b17      	ldr	r3, [pc, #92]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a18      	ldr	r2, [pc, #96]	@ (800c3c0 <pvPortMalloc+0x194>)
 800c360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	4b13      	ldr	r3, [pc, #76]	@ (800c3b4 <pvPortMalloc+0x188>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	431a      	orrs	r2, r3
 800c36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c372:	2200      	movs	r2, #0
 800c374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c376:	4b13      	ldr	r3, [pc, #76]	@ (800c3c4 <pvPortMalloc+0x198>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3301      	adds	r3, #1
 800c37c:	4a11      	ldr	r2, [pc, #68]	@ (800c3c4 <pvPortMalloc+0x198>)
 800c37e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c380:	f7fe fbd0 	bl	800ab24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00b      	beq.n	800c3a6 <pvPortMalloc+0x17a>
	__asm volatile
 800c38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c392:	f383 8811 	msr	BASEPRI, r3
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	60fb      	str	r3, [r7, #12]
}
 800c3a0:	bf00      	nop
 800c3a2:	bf00      	nop
 800c3a4:	e7fd      	b.n	800c3a2 <pvPortMalloc+0x176>
	return pvReturn;
 800c3a6:	69fb      	ldr	r3, [r7, #28]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3728      	adds	r7, #40	@ 0x28
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	2001805c 	.word	0x2001805c
 800c3b4:	20018070 	.word	0x20018070
 800c3b8:	20018060 	.word	0x20018060
 800c3bc:	20018054 	.word	0x20018054
 800c3c0:	20018064 	.word	0x20018064
 800c3c4:	20018068 	.word	0x20018068

0800c3c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d04f      	beq.n	800c47a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3da:	2308      	movs	r3, #8
 800c3dc:	425b      	negs	r3, r3
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	685a      	ldr	r2, [r3, #4]
 800c3ec:	4b25      	ldr	r3, [pc, #148]	@ (800c484 <vPortFree+0xbc>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4013      	ands	r3, r2
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d10b      	bne.n	800c40e <vPortFree+0x46>
	__asm volatile
 800c3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3fa:	f383 8811 	msr	BASEPRI, r3
 800c3fe:	f3bf 8f6f 	isb	sy
 800c402:	f3bf 8f4f 	dsb	sy
 800c406:	60fb      	str	r3, [r7, #12]
}
 800c408:	bf00      	nop
 800c40a:	bf00      	nop
 800c40c:	e7fd      	b.n	800c40a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00b      	beq.n	800c42e <vPortFree+0x66>
	__asm volatile
 800c416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41a:	f383 8811 	msr	BASEPRI, r3
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	60bb      	str	r3, [r7, #8]
}
 800c428:	bf00      	nop
 800c42a:	bf00      	nop
 800c42c:	e7fd      	b.n	800c42a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	685a      	ldr	r2, [r3, #4]
 800c432:	4b14      	ldr	r3, [pc, #80]	@ (800c484 <vPortFree+0xbc>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4013      	ands	r3, r2
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d01e      	beq.n	800c47a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d11a      	bne.n	800c47a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	4b0e      	ldr	r3, [pc, #56]	@ (800c484 <vPortFree+0xbc>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	43db      	mvns	r3, r3
 800c44e:	401a      	ands	r2, r3
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c454:	f7fe fb58 	bl	800ab08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	685a      	ldr	r2, [r3, #4]
 800c45c:	4b0a      	ldr	r3, [pc, #40]	@ (800c488 <vPortFree+0xc0>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4413      	add	r3, r2
 800c462:	4a09      	ldr	r2, [pc, #36]	@ (800c488 <vPortFree+0xc0>)
 800c464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c466:	6938      	ldr	r0, [r7, #16]
 800c468:	f000 f876 	bl	800c558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c46c:	4b07      	ldr	r3, [pc, #28]	@ (800c48c <vPortFree+0xc4>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	3301      	adds	r3, #1
 800c472:	4a06      	ldr	r2, [pc, #24]	@ (800c48c <vPortFree+0xc4>)
 800c474:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c476:	f7fe fb55 	bl	800ab24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c47a:	bf00      	nop
 800c47c:	3718      	adds	r7, #24
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	20018070 	.word	0x20018070
 800c488:	20018060 	.word	0x20018060
 800c48c:	2001806c 	.word	0x2001806c

0800c490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c496:	4b29      	ldr	r3, [pc, #164]	@ (800c53c <prvHeapInit+0xac>)
 800c498:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c49a:	4b29      	ldr	r3, [pc, #164]	@ (800c540 <prvHeapInit+0xb0>)
 800c49c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f003 0307 	and.w	r3, r3, #7
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00c      	beq.n	800c4c2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3307      	adds	r3, #7
 800c4ac:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f023 0307 	bic.w	r3, r3, #7
 800c4b4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4b6:	68ba      	ldr	r2, [r7, #8]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	1ad3      	subs	r3, r2, r3
 800c4bc:	4a20      	ldr	r2, [pc, #128]	@ (800c540 <prvHeapInit+0xb0>)
 800c4be:	4413      	add	r3, r2
 800c4c0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4c6:	4a1f      	ldr	r2, [pc, #124]	@ (800c544 <prvHeapInit+0xb4>)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4cc:	4b1d      	ldr	r3, [pc, #116]	@ (800c544 <prvHeapInit+0xb4>)
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68ba      	ldr	r2, [r7, #8]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4da:	2208      	movs	r2, #8
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	1a9b      	subs	r3, r3, r2
 800c4e0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f023 0307 	bic.w	r3, r3, #7
 800c4e8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	4a16      	ldr	r2, [pc, #88]	@ (800c548 <prvHeapInit+0xb8>)
 800c4ee:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4f0:	4b15      	ldr	r3, [pc, #84]	@ (800c548 <prvHeapInit+0xb8>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4f8:	4b13      	ldr	r3, [pc, #76]	@ (800c548 <prvHeapInit+0xb8>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	1ad2      	subs	r2, r2, r3
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c50e:	4b0e      	ldr	r3, [pc, #56]	@ (800c548 <prvHeapInit+0xb8>)
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	4a0c      	ldr	r2, [pc, #48]	@ (800c54c <prvHeapInit+0xbc>)
 800c51c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	4a0b      	ldr	r2, [pc, #44]	@ (800c550 <prvHeapInit+0xc0>)
 800c524:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c526:	4b0b      	ldr	r3, [pc, #44]	@ (800c554 <prvHeapInit+0xc4>)
 800c528:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c52c:	601a      	str	r2, [r3, #0]
}
 800c52e:	bf00      	nop
 800c530:	3714      	adds	r7, #20
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	000160f8 	.word	0x000160f8
 800c540:	20001f5c 	.word	0x20001f5c
 800c544:	20018054 	.word	0x20018054
 800c548:	2001805c 	.word	0x2001805c
 800c54c:	20018064 	.word	0x20018064
 800c550:	20018060 	.word	0x20018060
 800c554:	20018070 	.word	0x20018070

0800c558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c560:	4b28      	ldr	r3, [pc, #160]	@ (800c604 <prvInsertBlockIntoFreeList+0xac>)
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	e002      	b.n	800c56c <prvInsertBlockIntoFreeList+0x14>
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	60fb      	str	r3, [r7, #12]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	429a      	cmp	r2, r3
 800c574:	d8f7      	bhi.n	800c566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	4413      	add	r3, r2
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	429a      	cmp	r2, r3
 800c586:	d108      	bne.n	800c59a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	441a      	add	r2, r3
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	441a      	add	r2, r3
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d118      	bne.n	800c5e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	4b15      	ldr	r3, [pc, #84]	@ (800c608 <prvInsertBlockIntoFreeList+0xb0>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d00d      	beq.n	800c5d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	685a      	ldr	r2, [r3, #4]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	441a      	add	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	601a      	str	r2, [r3, #0]
 800c5d4:	e008      	b.n	800c5e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c608 <prvInsertBlockIntoFreeList+0xb0>)
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	601a      	str	r2, [r3, #0]
 800c5de:	e003      	b.n	800c5e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d002      	beq.n	800c5f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5f6:	bf00      	nop
 800c5f8:	3714      	adds	r7, #20
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	20018054 	.word	0x20018054
 800c608:	2001805c 	.word	0x2001805c

0800c60c <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b086      	sub	sp, #24
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 800c614:	2300      	movs	r3, #0
 800c616:	613b      	str	r3, [r7, #16]
 800c618:	2300      	movs	r3, #0
 800c61a:	60fb      	str	r3, [r7, #12]
 800c61c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c620:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 800c622:	f7fe fa71 	bl	800ab08 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 800c626:	4b22      	ldr	r3, [pc, #136]	@ (800c6b0 <vPortGetHeapStats+0xa4>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	617b      	str	r3, [r7, #20]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d01a      	beq.n	800c668 <vPortGetHeapStats+0x5c>
		{
			do
			{
				/* Increment the number of blocks and record the largest block seen
				so far. */
				xBlocks++;
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	3301      	adds	r3, #1
 800c636:	613b      	str	r3, [r7, #16]

				if( pxBlock->xBlockSize > xMaxSize )
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d202      	bcs.n	800c648 <vPortGetHeapStats+0x3c>
				{
					xMaxSize = pxBlock->xBlockSize;
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	60fb      	str	r3, [r7, #12]
				}

				if( pxBlock->xBlockSize < xMinSize )
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d902      	bls.n	800c658 <vPortGetHeapStats+0x4c>
				{
					xMinSize = pxBlock->xBlockSize;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	60bb      	str	r3, [r7, #8]
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	617b      	str	r3, [r7, #20]
			} while( pxBlock != pxEnd );
 800c65e:	4b15      	ldr	r3, [pc, #84]	@ (800c6b4 <vPortGetHeapStats+0xa8>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	429a      	cmp	r2, r3
 800c666:	d1e4      	bne.n	800c632 <vPortGetHeapStats+0x26>
		}
	}
	xTaskResumeAll();
 800c668:	f7fe fa5c 	bl	800ab24 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	605a      	str	r2, [r3, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	68ba      	ldr	r2, [r7, #8]
 800c676:	609a      	str	r2, [r3, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	693a      	ldr	r2, [r7, #16]
 800c67c:	60da      	str	r2, [r3, #12]

	taskENTER_CRITICAL();
 800c67e:	f7ff fcb3 	bl	800bfe8 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 800c682:	4b0d      	ldr	r3, [pc, #52]	@ (800c6b8 <vPortGetHeapStats+0xac>)
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	601a      	str	r2, [r3, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 800c68a:	4b0c      	ldr	r3, [pc, #48]	@ (800c6bc <vPortGetHeapStats+0xb0>)
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	615a      	str	r2, [r3, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 800c692:	4b0b      	ldr	r3, [pc, #44]	@ (800c6c0 <vPortGetHeapStats+0xb4>)
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	619a      	str	r2, [r3, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 800c69a:	4b0a      	ldr	r3, [pc, #40]	@ (800c6c4 <vPortGetHeapStats+0xb8>)
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	611a      	str	r2, [r3, #16]
	}
	taskEXIT_CRITICAL();
 800c6a2:	f7ff fcd3 	bl	800c04c <vPortExitCritical>
}
 800c6a6:	bf00      	nop
 800c6a8:	3718      	adds	r7, #24
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	20018054 	.word	0x20018054
 800c6b4:	2001805c 	.word	0x2001805c
 800c6b8:	20018060 	.word	0x20018060
 800c6bc:	20018068 	.word	0x20018068
 800c6c0:	2001806c 	.word	0x2001806c
 800c6c4:	20018064 	.word	0x20018064

0800c6c8 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	fb02 f303 	mul.w	r3, r2, r3
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7ff fda6 	bl	800c22c <pvPortMalloc>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d008      	beq.n	800c6fc <mg_calloc+0x34>
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	fb02 f303 	mul.w	r3, r2, r3
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f019 f9aa 	bl	8025a50 <memset>
  return p;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
	...

0800c708 <mg_fs_lfs_status>:
//struct mg_fs *mg_fs;

void fs_proto(void){}; //function prototype

// Получение информации о файле
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 800c708:	b580      	push	{r7, lr}
 800c70a:	b0c6      	sub	sp, #280	@ 0x118
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c712:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c716:	6018      	str	r0, [r3, #0]
 800c718:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c71c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c720:	6019      	str	r1, [r3, #0]
 800c722:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c726:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c72a:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    if (lfs_stat(&lfs, path, &info) == 0) {
 800c72c:	f107 0210 	add.w	r2, r7, #16
 800c730:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c734:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c738:	6819      	ldr	r1, [r3, #0]
 800c73a:	481d      	ldr	r0, [pc, #116]	@ (800c7b0 <mg_fs_lfs_status+0xa8>)
 800c73c:	f007 ff3c 	bl	80145b8 <lfs_stat>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d12e      	bne.n	800c7a4 <mg_fs_lfs_status+0x9c>
        if (size) *size = info.size;
 800c746:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c74a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00a      	beq.n	800c76a <mg_fs_lfs_status+0x62>
 800c754:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c75c:	685a      	ldr	r2, [r3, #4]
 800c75e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c762:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	601a      	str	r2, [r3, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 800c76a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c76e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00a      	beq.n	800c78e <mg_fs_lfs_status+0x86>
 800c778:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c77c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c780:	6819      	ldr	r1, [r3, #0]
 800c782:	f04f 0200 	mov.w	r2, #0
 800c786:	f04f 0300 	mov.w	r3, #0
 800c78a:	e9c1 2300 	strd	r2, r3, [r1]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 800c78e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d101      	bne.n	800c7a0 <mg_fs_lfs_status+0x98>
 800c79c:	2304      	movs	r3, #4
 800c79e:	e002      	b.n	800c7a6 <mg_fs_lfs_status+0x9e>
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e000      	b.n	800c7a6 <mg_fs_lfs_status+0x9e>
    }
    return 0;
 800c7a4:	2300      	movs	r3, #0
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	20018074 	.word	0x20018074

0800c7b4 <mg_fs_lfs_list>:

// Список файлов в директории
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b0d4      	sub	sp, #336	@ 0x150
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c7be:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800c7c2:	6018      	str	r0, [r3, #0]
 800c7c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c7c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800c7cc:	6019      	str	r1, [r3, #0]
 800c7ce:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c7d2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800c7d6:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    lfs_dir_t dir;
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 800c7d8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c7dc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800c7e0:	f107 0114 	add.w	r1, r7, #20
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	4816      	ldr	r0, [pc, #88]	@ (800c840 <mg_fs_lfs_list+0x8c>)
 800c7e8:	f008 f89e 	bl	8014928 <lfs_dir_open>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d120      	bne.n	800c834 <mg_fs_lfs_list+0x80>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 800c7f2:	e00e      	b.n	800c812 <mg_fs_lfs_list+0x5e>
            fn(info.name, userdata);
 800c7f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c7f8:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 800c7fc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c800:	f103 0008 	add.w	r0, r3, #8
 800c804:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800c808:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	6811      	ldr	r1, [r2, #0]
 800c810:	4798      	blx	r3
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 800c812:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800c816:	f107 0314 	add.w	r3, r7, #20
 800c81a:	4619      	mov	r1, r3
 800c81c:	4808      	ldr	r0, [pc, #32]	@ (800c840 <mg_fs_lfs_list+0x8c>)
 800c81e:	f008 f8e4 	bl	80149ea <lfs_dir_read>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	dce5      	bgt.n	800c7f4 <mg_fs_lfs_list+0x40>
        }
        lfs_dir_close(&lfs, &dir);
 800c828:	f107 0314 	add.w	r3, r7, #20
 800c82c:	4619      	mov	r1, r3
 800c82e:	4804      	ldr	r0, [pc, #16]	@ (800c840 <mg_fs_lfs_list+0x8c>)
 800c830:	f008 f8b8 	bl	80149a4 <lfs_dir_close>
    }
}
 800c834:	bf00      	nop
 800c836:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20018074 	.word	0x20018074

0800c844 <mg_fs_lfs_open>:

// Открытие файла
void *mg_fs_lfs_open(const char *path, int flags) {
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 800c84e:	2054      	movs	r0, #84	@ 0x54
 800c850:	f7ff fcec 	bl	800c22c <pvPortMalloc>
 800c854:	4603      	mov	r3, r0
 800c856:	60bb      	str	r3, [r7, #8]
    if (fd == NULL) return NULL;
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d101      	bne.n	800c862 <mg_fs_lfs_open+0x1e>
 800c85e:	2300      	movs	r3, #0
 800c860:	e024      	b.n	800c8ac <mg_fs_lfs_open+0x68>

    int lfs_flags = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	f003 0301 	and.w	r3, r3, #1
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d003      	beq.n	800c878 <mg_fs_lfs_open+0x34>
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f043 0301 	orr.w	r3, r3, #1
 800c876:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	f003 0302 	and.w	r3, r3, #2
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d005      	beq.n	800c88e <mg_fs_lfs_open+0x4a>
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 800c888:	f043 0302 	orr.w	r3, r3, #2
 800c88c:	60fb      	str	r3, [r7, #12]

    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 800c88e:	68b9      	ldr	r1, [r7, #8]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	4807      	ldr	r0, [pc, #28]	@ (800c8b4 <mg_fs_lfs_open+0x70>)
 800c896:	f007 feb5 	bl	8014604 <lfs_file_open>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	da04      	bge.n	800c8aa <mg_fs_lfs_open+0x66>
        free(fd);
 800c8a0:	68b8      	ldr	r0, [r7, #8]
 800c8a2:	f7ff fd91 	bl	800c3c8 <vPortFree>
        return NULL;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	e000      	b.n	800c8ac <mg_fs_lfs_open+0x68>
    }
    return fd;
 800c8aa:	68bb      	ldr	r3, [r7, #8]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	20018074 	.word	0x20018074

0800c8b8 <mg_fs_lfs_close>:

// Закрытие файла
void mg_fs_lfs_close(void *fd) {
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	60fb      	str	r3, [r7, #12]
    lfs_file_close(&lfs, &file->file);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	4804      	ldr	r0, [pc, #16]	@ (800c8dc <mg_fs_lfs_close+0x24>)
 800c8ca:	f007 fedb 	bl	8014684 <lfs_file_close>
    free(file);
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f7ff fd7a 	bl	800c3c8 <vPortFree>
}
 800c8d4:	bf00      	nop
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	20018074 	.word	0x20018074

0800c8e0 <mg_fs_lfs_read>:

// Чтение из файла
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b086      	sub	sp, #24
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	60f8      	str	r0, [r7, #12]
 800c8e8:	60b9      	str	r1, [r7, #8]
 800c8ea:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	617b      	str	r3, [r7, #20]
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 800c8f0:	6979      	ldr	r1, [r7, #20]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	4805      	ldr	r0, [pc, #20]	@ (800c90c <mg_fs_lfs_read+0x2c>)
 800c8f8:	f007 fefe 	bl	80146f8 <lfs_file_read>
 800c8fc:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800c904:	4618      	mov	r0, r3
 800c906:	3718      	adds	r7, #24
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	20018074 	.word	0x20018074

0800c910 <mg_fs_lfs_write>:

// Запись в файл
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	617b      	str	r3, [r7, #20]
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 800c920:	6979      	ldr	r1, [r7, #20]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	4805      	ldr	r0, [pc, #20]	@ (800c93c <mg_fs_lfs_write+0x2c>)
 800c928:	f007 ff24 	bl	8014774 <lfs_file_write>
 800c92c:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800c934:	4618      	mov	r0, r3
 800c936:	3718      	adds	r7, #24
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	20018074 	.word	0x20018074

0800c940 <mg_fs_lfs_seek>:

// Установка позиции в файле
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	60fb      	str	r3, [r7, #12]

    // Попытка установить позицию в файле
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 800c94e:	68f9      	ldr	r1, [r7, #12]
 800c950:	683a      	ldr	r2, [r7, #0]
 800c952:	2300      	movs	r3, #0
 800c954:	480c      	ldr	r0, [pc, #48]	@ (800c988 <mg_fs_lfs_seek+0x48>)
 800c956:	f007 ff4b 	bl	80147f0 <lfs_file_seek>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	da02      	bge.n	800c966 <mg_fs_lfs_seek+0x26>
        return (size_t)-1;  // Ошибка при перемещении
 800c960:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c964:	e00c      	b.n	800c980 <mg_fs_lfs_seek+0x40>
    }

    // Получение текущей позиции в файле
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	4619      	mov	r1, r3
 800c96a:	4807      	ldr	r0, [pc, #28]	@ (800c988 <mg_fs_lfs_seek+0x48>)
 800c96c:	f007 ff7e 	bl	801486c <lfs_file_tell>
 800c970:	60b8      	str	r0, [r7, #8]

    // Проверка ошибки
     if (pos < 0) {
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	2b00      	cmp	r3, #0
 800c976:	da02      	bge.n	800c97e <mg_fs_lfs_seek+0x3e>
         return (size_t)-1;  // Ошибка при получении позиции
 800c978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c97c:	e000      	b.n	800c980 <mg_fs_lfs_seek+0x40>
     }

     return (size_t)pos;  // Возвращаем текущую позицию
 800c97e:	68bb      	ldr	r3, [r7, #8]

}
 800c980:	4618      	mov	r0, r3
 800c982:	3710      	adds	r7, #16
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	20018074 	.word	0x20018074

0800c98c <mg_fs_lfs_rename>:

// Переименование файла
bool mg_fs_lfs_rename(const char *from, const char *to) {
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
    return lfs_rename(&lfs, from, to) == 0;
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	6879      	ldr	r1, [r7, #4]
 800c99a:	4806      	ldr	r0, [pc, #24]	@ (800c9b4 <mg_fs_lfs_rename+0x28>)
 800c99c:	f007 fde7 	bl	801456e <lfs_rename>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	bf0c      	ite	eq
 800c9a6:	2301      	moveq	r3, #1
 800c9a8:	2300      	movne	r3, #0
 800c9aa:	b2db      	uxtb	r3, r3
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3708      	adds	r7, #8
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	20018074 	.word	0x20018074

0800c9b8 <mg_fs_lfs_remove>:

// Удаление файла
bool mg_fs_lfs_remove(const char *path) {
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
    return lfs_remove(&lfs, path) == 0;
 800c9c0:	6879      	ldr	r1, [r7, #4]
 800c9c2:	4806      	ldr	r0, [pc, #24]	@ (800c9dc <mg_fs_lfs_remove+0x24>)
 800c9c4:	f007 fdb0 	bl	8014528 <lfs_remove>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	bf0c      	ite	eq
 800c9ce:	2301      	moveq	r3, #1
 800c9d0:	2300      	movne	r3, #0
 800c9d2:	b2db      	uxtb	r3, r3
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	20018074 	.word	0x20018074

0800c9e0 <mg_fs_lfs_mkdir>:
    // Удаление пустой директории
    return lfs_remove(&lfs, path);
}

// Создание директории
bool mg_fs_lfs_mkdir(const char *path) {
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
    return lfs_mkdir(&lfs, path) == 0;
 800c9e8:	6879      	ldr	r1, [r7, #4]
 800c9ea:	4806      	ldr	r0, [pc, #24]	@ (800ca04 <mg_fs_lfs_mkdir+0x24>)
 800c9ec:	f007 ff78 	bl	80148e0 <lfs_mkdir>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	bf0c      	ite	eq
 800c9f6:	2301      	moveq	r3, #1
 800c9f8:	2300      	movne	r3, #0
 800c9fa:	b2db      	uxtb	r3, r3
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	20018074 	.word	0x20018074

0800ca08 <lfs_fs_ll_init>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size);
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size);
int block_device_erase(const struct lfs_config *c, lfs_block_t block);
int block_device_sync(const struct lfs_config *c);

int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b08a      	sub	sp, #40	@ 0x28
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]

	struct SPI_flash_info	flash_info;

	flash_info = sFLASH_GetInfo();
 800ca12:	f107 030c 	add.w	r3, r7, #12
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7f8 fc1c 	bl	8005254 <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d102      	bne.n	800ca28 <lfs_fs_ll_init+0x20>
 800ca22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca26:	e066      	b.n	800caf6 <lfs_fs_ll_init+0xee>

	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 800ca28:	8afb      	ldrh	r3, [r7, #22]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	2001      	movs	r0, #1
 800ca2e:	f7ff fe4b 	bl	800c6c8 <mg_calloc>
 800ca32:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 800ca34:	8afb      	ldrh	r3, [r7, #22]
 800ca36:	4619      	mov	r1, r3
 800ca38:	2001      	movs	r0, #1
 800ca3a:	f7ff fe45 	bl	800c6c8 <mg_calloc>
 800ca3e:	6238      	str	r0, [r7, #32]
	void * lookahead_buff = calloc(1, flash_info.page_size);
 800ca40:	8afb      	ldrh	r3, [r7, #22]
 800ca42:	4619      	mov	r1, r3
 800ca44:	2001      	movs	r0, #1
 800ca46:	f7ff fe3f 	bl	800c6c8 <mg_calloc>
 800ca4a:	61f8      	str	r0, [r7, #28]

	if (!(read_buff || write_buff || lookahead_buff)){
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d108      	bne.n	800ca64 <lfs_fs_ll_init+0x5c>
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d105      	bne.n	800ca64 <lfs_fs_ll_init+0x5c>
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d102      	bne.n	800ca64 <lfs_fs_ll_init+0x5c>
		return -2;
 800ca5e:	f06f 0301 	mvn.w	r3, #1
 800ca62:	e048      	b.n	800caf6 <lfs_fs_ll_init+0xee>
	}

	cfg.read_size         = flash_info.read_size;
 800ca64:	8a3b      	ldrh	r3, [r7, #16]
 800ca66:	461a      	mov	r2, r3
 800ca68:	4b25      	ldr	r3, [pc, #148]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800ca6a:	61da      	str	r2, [r3, #28]
	cfg.prog_size         = flash_info.write_size;
 800ca6c:	8a7b      	ldrh	r3, [r7, #18]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	4b23      	ldr	r3, [pc, #140]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800ca72:	621a      	str	r2, [r3, #32]
    cfg.block_size        = flash_info.erase_size;
 800ca74:	8abb      	ldrh	r3, [r7, #20]
 800ca76:	461a      	mov	r2, r3
 800ca78:	4b21      	ldr	r3, [pc, #132]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800ca7a:	625a      	str	r2, [r3, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 800ca7c:	8b3b      	ldrh	r3, [r7, #24]
 800ca7e:	461a      	mov	r2, r3
 800ca80:	4b1f      	ldr	r3, [pc, #124]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800ca82:	629a      	str	r2, [r3, #40]	@ 0x28

    cfg.lookahead_size    = flash_info.page_size;
 800ca84:	8afb      	ldrh	r3, [r7, #22]
 800ca86:	461a      	mov	r2, r3
 800ca88:	4b1d      	ldr	r3, [pc, #116]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800ca8a:	635a      	str	r2, [r3, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 800ca8c:	8afb      	ldrh	r3, [r7, #22]
 800ca8e:	461a      	mov	r2, r3
 800ca90:	4b1b      	ldr	r3, [pc, #108]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800ca92:	631a      	str	r2, [r3, #48]	@ 0x30

    cfg.read_buffer       = read_buff;
 800ca94:	4a1a      	ldr	r2, [pc, #104]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800ca96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca98:	63d3      	str	r3, [r2, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 800ca9a:	4a19      	ldr	r2, [pc, #100]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800ca9c:	6a3b      	ldr	r3, [r7, #32]
 800ca9e:	6413      	str	r3, [r2, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 800caa0:	4a17      	ldr	r2, [pc, #92]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	6453      	str	r3, [r2, #68]	@ 0x44

    cfg.read   = block_device_read;
 800caa6:	4b16      	ldr	r3, [pc, #88]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800caa8:	4a16      	ldr	r2, [pc, #88]	@ (800cb04 <lfs_fs_ll_init+0xfc>)
 800caaa:	605a      	str	r2, [r3, #4]
    cfg.prog   = block_device_prog;
 800caac:	4b14      	ldr	r3, [pc, #80]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800caae:	4a16      	ldr	r2, [pc, #88]	@ (800cb08 <lfs_fs_ll_init+0x100>)
 800cab0:	609a      	str	r2, [r3, #8]
    cfg.erase  = block_device_erase;
 800cab2:	4b13      	ldr	r3, [pc, #76]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800cab4:	4a15      	ldr	r2, [pc, #84]	@ (800cb0c <lfs_fs_ll_init+0x104>)
 800cab6:	60da      	str	r2, [r3, #12]
    cfg.sync   = block_device_sync;
 800cab8:	4b11      	ldr	r3, [pc, #68]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800caba:	4a15      	ldr	r2, [pc, #84]	@ (800cb10 <lfs_fs_ll_init+0x108>)
 800cabc:	611a      	str	r2, [r3, #16]

    cfg.lock 	= lock;
 800cabe:	4a10      	ldr	r2, [pc, #64]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6153      	str	r3, [r2, #20]
	cfg.unlock	= unlock;
 800cac4:	4a0e      	ldr	r2, [pc, #56]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	6193      	str	r3, [r2, #24]

#ifdef LFS_THREADSAFE
#endif

    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 800caca:	4b0d      	ldr	r3, [pc, #52]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800cacc:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cad0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (lfs_mount(&lfs, &cfg)< 0){
 800cad2:	490b      	ldr	r1, [pc, #44]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800cad4:	480f      	ldr	r0, [pc, #60]	@ (800cb14 <lfs_fs_ll_init+0x10c>)
 800cad6:	f007 fd0a 	bl	80144ee <lfs_mount>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	da09      	bge.n	800caf4 <lfs_fs_ll_init+0xec>
    	lfs_format(&lfs, &cfg);
 800cae0:	4907      	ldr	r1, [pc, #28]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800cae2:	480c      	ldr	r0, [pc, #48]	@ (800cb14 <lfs_fs_ll_init+0x10c>)
 800cae4:	f007 fce6 	bl	80144b4 <lfs_format>
    	return lfs_mount(&lfs, &cfg);
 800cae8:	4905      	ldr	r1, [pc, #20]	@ (800cb00 <lfs_fs_ll_init+0xf8>)
 800caea:	480a      	ldr	r0, [pc, #40]	@ (800cb14 <lfs_fs_ll_init+0x10c>)
 800caec:	f007 fcff 	bl	80144ee <lfs_mount>
 800caf0:	4603      	mov	r3, r0
 800caf2:	e000      	b.n	800caf6 <lfs_fs_ll_init+0xee>
    }

	return 0;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3728      	adds	r7, #40	@ 0x28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	200180f4 	.word	0x200180f4
 800cb04:	0800cb19 	.word	0x0800cb19
 800cb08:	0800cbb9 	.word	0x0800cbb9
 800cb0c:	0800cb71 	.word	0x0800cb71
 800cb10:	0800cc11 	.word	0x0800cc11
 800cb14:	20018074 	.word	0x20018074

0800cb18 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb2a:	68ba      	ldr	r2, [r7, #8]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d306      	bcc.n	800cb3e <block_device_read+0x26>
 800cb30:	4b0c      	ldr	r3, [pc, #48]	@ (800cb64 <block_device_read+0x4c>)
 800cb32:	4a0d      	ldr	r2, [pc, #52]	@ (800cb68 <block_device_read+0x50>)
 800cb34:	f240 1111 	movw	r1, #273	@ 0x111
 800cb38:	480c      	ldr	r0, [pc, #48]	@ (800cb6c <block_device_read+0x54>)
 800cb3a:	f016 fa35 	bl	8022fa8 <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	fb03 f202 	mul.w	r2, r3, r2
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	69ba      	ldr	r2, [r7, #24]
 800cb4e:	b292      	uxth	r2, r2
 800cb50:	4619      	mov	r1, r3
 800cb52:	6838      	ldr	r0, [r7, #0]
 800cb54:	f7f8 fd4c 	bl	80055f0 <sFLASH_ReadBuffer>
	return 0;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	08030400 	.word	0x08030400
 800cb68:	08033bcc 	.word	0x08033bcc
 800cb6c:	08030418 	.word	0x08030418

0800cb70 <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d306      	bcc.n	800cb92 <block_device_erase+0x22>
 800cb84:	4b09      	ldr	r3, [pc, #36]	@ (800cbac <block_device_erase+0x3c>)
 800cb86:	4a0a      	ldr	r2, [pc, #40]	@ (800cbb0 <block_device_erase+0x40>)
 800cb88:	f240 1119 	movw	r1, #281	@ 0x119
 800cb8c:	4809      	ldr	r0, [pc, #36]	@ (800cbb4 <block_device_erase+0x44>)
 800cb8e:	f016 fa0b 	bl	8022fa8 <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb96:	683a      	ldr	r2, [r7, #0]
 800cb98:	fb02 f303 	mul.w	r3, r2, r3
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7f8 fc25 	bl	80053ec <sFLASH_EraseSector>
	return 0;
 800cba2:	2300      	movs	r3, #0
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	08030400 	.word	0x08030400
 800cbb0:	08033be0 	.word	0x08033be0
 800cbb4:	08030418 	.word	0x08030418

0800cbb8 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	607a      	str	r2, [r7, #4]
 800cbc4:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d306      	bcc.n	800cbde <block_device_prog+0x26>
 800cbd0:	4b0c      	ldr	r3, [pc, #48]	@ (800cc04 <block_device_prog+0x4c>)
 800cbd2:	4a0d      	ldr	r2, [pc, #52]	@ (800cc08 <block_device_prog+0x50>)
 800cbd4:	f240 1121 	movw	r1, #289	@ 0x121
 800cbd8:	480c      	ldr	r0, [pc, #48]	@ (800cc0c <block_device_prog+0x54>)
 800cbda:	f016 f9e5 	bl	8022fa8 <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe2:	68ba      	ldr	r2, [r7, #8]
 800cbe4:	fb03 f202 	mul.w	r2, r3, r2
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4413      	add	r3, r2
 800cbec:	69ba      	ldr	r2, [r7, #24]
 800cbee:	b292      	uxth	r2, r2
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	6838      	ldr	r0, [r7, #0]
 800cbf4:	f7f8 fc53 	bl	800549e <sFLASH_WriteBuffer>
	return 0;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	08030400 	.word	0x08030400
 800cc08:	08033bf4 	.word	0x08033bf4
 800cc0c:	08030418 	.word	0x08030418

0800cc10 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
	return 0;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	370c      	adds	r7, #12
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr

0800cc26 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800cc26:	b480      	push	{r7}
 800cc28:	b083      	sub	sp, #12
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800cc30:	683a      	ldr	r2, [r7, #0]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4293      	cmp	r3, r2
 800cc36:	bf38      	it	cc
 800cc38:	4613      	movcc	r3, r2
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	370c      	adds	r7, #12
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr

0800cc46 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800cc46:	b480      	push	{r7}
 800cc48:	b083      	sub	sp, #12
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
 800cc4e:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800cc50:	683a      	ldr	r2, [r7, #0]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4293      	cmp	r3, r2
 800cc56:	bf28      	it	cs
 800cc58:	4613      	movcs	r3, r2
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	370c      	adds	r7, #12
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800cc66:	b480      	push	{r7}
 800cc68:	b083      	sub	sp, #12
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
 800cc6e:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	683a      	ldr	r2, [r7, #0]
 800cc74:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc78:	6839      	ldr	r1, [r7, #0]
 800cc7a:	fb01 f202 	mul.w	r2, r1, r2
 800cc7e:	1a9b      	subs	r3, r3, r2
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	1ad3      	subs	r3, r2, r3
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	370c      	adds	r7, #12
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	4413      	add	r3, r2
 800cca0:	3b01      	subs	r3, #1
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7ff ffde 	bl	800cc66 <lfs_aligndown>
 800ccaa:	4603      	mov	r3, r0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3708      	adds	r7, #8
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	fab3 f383 	clz	r3, r3
 800ccc4:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	fa93 f3a3 	rbit	r3, r3
 800cce2:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	370c      	adds	r7, #12
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr

0800ccf2 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b082      	sub	sp, #8
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f7f4 f844 	bl	8000d88 <__popcountsi2>
 800cd00:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800cd0a:	b480      	push	{r7}
 800cd0c:	b083      	sub	sp, #12
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
 800cd12:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	1ad3      	subs	r3, r2, r3
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	370c      	adds	r7, #12
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr

0800cd26 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800cd26:	b480      	push	{r7}
 800cd28:	b083      	sub	sp, #12
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800cd2e:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7ff ffee 	bl	800cd26 <lfs_fromle32>
 800cd4a:	4603      	mov	r3, r0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3708      	adds	r7, #8
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f7ff ffed 	bl	800cd54 <lfs_frombe32>
 800cd7a:	4603      	mov	r3, r0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7ff fa4d 	bl	800c22c <pvPortMalloc>
 800cd92:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7ff fb0f 	bl	800c3c8 <vPortFree>
#else
    (void)p;
#endif
}
 800cdaa:	bf00      	nop
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800cdb2:	b480      	push	{r7}
 800cdb4:	b083      	sub	sp, #12
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
 800cdba:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdc2:	601a      	str	r2, [r3, #0]
}
 800cdc4:	bf00      	nop
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	68d8      	ldr	r0, [r3, #12]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cde2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cde4:	461a      	mov	r2, r3
 800cde6:	21ff      	movs	r1, #255	@ 0xff
 800cde8:	f018 fe32 	bl	8025a50 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdf2:	601a      	str	r2, [r3, #0]
}
 800cdf4:	bf00      	nop
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800cdfc:	b5b0      	push	{r4, r5, r7, lr}
 800cdfe:	b08a      	sub	sp, #40	@ 0x28
 800ce00:	af02      	add	r7, sp, #8
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
 800ce08:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce0c:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 800ce0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce12:	441a      	add	r2, r3
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ce18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d80a      	bhi.n	800ce34 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f000 8124 	beq.w	800d070 <lfs_bd_read+0x274>
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	f0c0 811e 	bcc.w	800d070 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 800ce34:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800ce38:	e11f      	b.n	800d07a <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800ce3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce3c:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d03f      	beq.n	800cec4 <lfs_bd_read+0xc8>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d13a      	bne.n	800cec4 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	685a      	ldr	r2, [r3, #4]
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800ce58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d232      	bcs.n	800cec4 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d324      	bcc.n	800ceb2 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	689a      	ldr	r2, [r3, #8]
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	6859      	ldr	r1, [r3, #4]
 800ce70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce72:	1acb      	subs	r3, r1, r3
 800ce74:	4413      	add	r3, r2
 800ce76:	4619      	mov	r1, r3
 800ce78:	69b8      	ldr	r0, [r7, #24]
 800ce7a:	f7ff fee4 	bl	800cc46 <lfs_min>
 800ce7e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	68da      	ldr	r2, [r3, #12]
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ce8a:	1acb      	subs	r3, r1, r3
 800ce8c:	4413      	add	r3, r2
 800ce8e:	69ba      	ldr	r2, [r7, #24]
 800ce90:	4619      	mov	r1, r3
 800ce92:	69f8      	ldr	r0, [r7, #28]
 800ce94:	f01a f818 	bl	8026ec8 <memcpy>

                data += diff;
 800ce98:	69fa      	ldr	r2, [r7, #28]
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	61fb      	str	r3, [r7, #28]
                off += diff;
 800cea0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	4413      	add	r3, r2
 800cea6:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800cea8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	1ad3      	subs	r3, r2, r3
 800ceae:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800ceb0:	e0de      	b.n	800d070 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	685a      	ldr	r2, [r3, #4]
 800ceb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	4619      	mov	r1, r3
 800cebc:	69b8      	ldr	r0, [r7, #24]
 800cebe:	f7ff fec2 	bl	800cc46 <lfs_min>
 800cec2:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d13a      	bne.n	800cf44 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	685a      	ldr	r2, [r3, #4]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	4413      	add	r3, r2
        if (block == rcache->block &&
 800ced8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d232      	bcs.n	800cf44 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d324      	bcc.n	800cf32 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	689a      	ldr	r2, [r3, #8]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6859      	ldr	r1, [r3, #4]
 800cef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cef2:	1acb      	subs	r3, r1, r3
 800cef4:	4413      	add	r3, r2
 800cef6:	4619      	mov	r1, r3
 800cef8:	69b8      	ldr	r0, [r7, #24]
 800cefa:	f7ff fea4 	bl	800cc46 <lfs_min>
 800cefe:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	68da      	ldr	r2, [r3, #12]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cf0a:	1acb      	subs	r3, r1, r3
 800cf0c:	4413      	add	r3, r2
 800cf0e:	69ba      	ldr	r2, [r7, #24]
 800cf10:	4619      	mov	r1, r3
 800cf12:	69f8      	ldr	r0, [r7, #28]
 800cf14:	f019 ffd8 	bl	8026ec8 <memcpy>

                data += diff;
 800cf18:	69fa      	ldr	r2, [r7, #28]
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	61fb      	str	r3, [r7, #28]
                off += diff;
 800cf20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	4413      	add	r3, r2
 800cf26:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800cf28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cf2a:	69bb      	ldr	r3, [r7, #24]
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800cf30:	e09e      	b.n	800d070 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	685a      	ldr	r2, [r3, #4]
 800cf36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf38:	1ad3      	subs	r3, r2, r3
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	69b8      	ldr	r0, [r7, #24]
 800cf3e:	f7ff fe82 	bl	800cc46 <lfs_min>
 800cf42:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800cf44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d336      	bcc.n	800cfba <lfs_bd_read+0x1be>
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf50:	69da      	ldr	r2, [r3, #28]
 800cf52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf54:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf58:	fb01 f202 	mul.w	r2, r1, r2
 800cf5c:	1a9b      	subs	r3, r3, r2
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d12b      	bne.n	800cfba <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf66:	69db      	ldr	r3, [r3, #28]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800cf68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d325      	bcc.n	800cfba <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf72:	69db      	ldr	r3, [r3, #28]
 800cf74:	4619      	mov	r1, r3
 800cf76:	69b8      	ldr	r0, [r7, #24]
 800cf78:	f7ff fe75 	bl	800cc66 <lfs_aligndown>
 800cf7c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf82:	685c      	ldr	r4, [r3, #4]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	9300      	str	r3, [sp, #0]
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cf92:	47a0      	blx	r4
 800cf94:	6178      	str	r0, [r7, #20]
            if (err) {
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d001      	beq.n	800cfa0 <lfs_bd_read+0x1a4>
                return err;
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	e06c      	b.n	800d07a <lfs_bd_read+0x27e>
            }

            data += diff;
 800cfa0:	69fa      	ldr	r2, [r7, #28]
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	61fb      	str	r3, [r7, #28]
            off += diff;
 800cfa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	4413      	add	r3, r2
 800cfae:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 800cfb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 800cfb8:	e05a      	b.n	800d070 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00a      	beq.n	800cfd8 <lfs_bd_read+0x1dc>
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d305      	bcc.n	800cfd8 <lfs_bd_read+0x1dc>
 800cfcc:	4b2d      	ldr	r3, [pc, #180]	@ (800d084 <lfs_bd_read+0x288>)
 800cfce:	4a2e      	ldr	r2, [pc, #184]	@ (800d088 <lfs_bd_read+0x28c>)
 800cfd0:	216b      	movs	r1, #107	@ 0x6b
 800cfd2:	482e      	ldr	r0, [pc, #184]	@ (800d08c <lfs_bd_read+0x290>)
 800cfd4:	f015 ffe8 	bl	8022fa8 <__assert_func>
        rcache->block = block;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfdc:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfe2:	69db      	ldr	r3, [r3, #28]
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cfe8:	f7ff fe3d 	bl	800cc66 <lfs_aligndown>
 800cfec:	4602      	mov	r2, r0
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800cff2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cffc:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 800cffe:	4619      	mov	r1, r3
 800d000:	4610      	mov	r0, r2
 800d002:	f7ff fe45 	bl	800cc90 <lfs_alignup>
 800d006:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d00c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                lfs_min(
 800d00e:	4619      	mov	r1, r3
 800d010:	4610      	mov	r0, r2
 800d012:	f7ff fe18 	bl	800cc46 <lfs_min>
 800d016:	4602      	mov	r2, r0
                - rcache->off,
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800d01c:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(
 800d024:	4619      	mov	r1, r3
 800d026:	4610      	mov	r0, r2
 800d028:	f7ff fe0d 	bl	800cc46 <lfs_min>
 800d02c:	4602      	mov	r2, r0
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d036:	685c      	ldr	r4, [r3, #4]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6819      	ldr	r1, [r3, #0]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	462b      	mov	r3, r5
 800d050:	47a0      	blx	r4
 800d052:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	2b00      	cmp	r3, #0
 800d058:	dd05      	ble.n	800d066 <lfs_bd_read+0x26a>
 800d05a:	4b0d      	ldr	r3, [pc, #52]	@ (800d090 <lfs_bd_read+0x294>)
 800d05c:	4a0a      	ldr	r2, [pc, #40]	@ (800d088 <lfs_bd_read+0x28c>)
 800d05e:	2176      	movs	r1, #118	@ 0x76
 800d060:	480a      	ldr	r0, [pc, #40]	@ (800d08c <lfs_bd_read+0x290>)
 800d062:	f015 ffa1 	bl	8022fa8 <__assert_func>
        if (err) {
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d001      	beq.n	800d070 <lfs_bd_read+0x274>
            return err;
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	e004      	b.n	800d07a <lfs_bd_read+0x27e>
    while (size > 0) {
 800d070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d072:	2b00      	cmp	r3, #0
 800d074:	f47f aee1 	bne.w	800ce3a <lfs_bd_read+0x3e>
        }
    }

    return 0;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3720      	adds	r7, #32
 800d07e:	46bd      	mov	sp, r7
 800d080:	bdb0      	pop	{r4, r5, r7, pc}
 800d082:	bf00      	nop
 800d084:	08030454 	.word	0x08030454
 800d088:	08033c08 	.word	0x08033c08
 800d08c:	08030484 	.word	0x08030484
 800d090:	080304b4 	.word	0x080304b4

0800d094 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800d094:	b580      	push	{r7, lr}
 800d096:	b090      	sub	sp, #64	@ 0x40
 800d098:	af04      	add	r7, sp, #16
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
 800d0a0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800d0a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d0ae:	e039      	b.n	800d124 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800d0b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b4:	1ad3      	subs	r3, r2, r3
 800d0b6:	2108      	movs	r1, #8
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7ff fdc4 	bl	800cc46 <lfs_min>
 800d0be:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 800d0c0:	683a      	ldr	r2, [r7, #0]
 800d0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c4:	1ad1      	subs	r1, r2, r3
 800d0c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ca:	4413      	add	r3, r2
 800d0cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0ce:	9203      	str	r2, [sp, #12]
 800d0d0:	f107 0214 	add.w	r2, r7, #20
 800d0d4:	9202      	str	r2, [sp, #8]
 800d0d6:	9301      	str	r3, [sp, #4]
 800d0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0da:	9300      	str	r3, [sp, #0]
 800d0dc:	460b      	mov	r3, r1
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	68b9      	ldr	r1, [r7, #8]
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f7ff fe8a 	bl	800cdfc <lfs_bd_read>
 800d0e8:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800d0ea:	6a3b      	ldr	r3, [r7, #32]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d001      	beq.n	800d0f4 <lfs_bd_cmp+0x60>
            return err;
 800d0f0:	6a3b      	ldr	r3, [r7, #32]
 800d0f2:	e01c      	b.n	800d12e <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 800d0f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f8:	18d1      	adds	r1, r2, r3
 800d0fa:	f107 0314 	add.w	r3, r7, #20
 800d0fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d100:	4618      	mov	r0, r3
 800d102:	f018 fc11 	bl	8025928 <memcmp>
 800d106:	61f8      	str	r0, [r7, #28]
        if (res) {
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d006      	beq.n	800d11c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	2b00      	cmp	r3, #0
 800d112:	da01      	bge.n	800d118 <lfs_bd_cmp+0x84>
 800d114:	2301      	movs	r3, #1
 800d116:	e00a      	b.n	800d12e <lfs_bd_cmp+0x9a>
 800d118:	2302      	movs	r3, #2
 800d11a:	e008      	b.n	800d12e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800d11c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d120:	4413      	add	r3, r2
 800d122:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d128:	429a      	cmp	r2, r3
 800d12a:	d3c1      	bcc.n	800d0b0 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3730      	adds	r7, #48	@ 0x30
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 800d136:	b580      	push	{r7, lr}
 800d138:	b08e      	sub	sp, #56	@ 0x38
 800d13a:	af04      	add	r7, sp, #16
 800d13c:	60f8      	str	r0, [r7, #12]
 800d13e:	60b9      	str	r1, [r7, #8]
 800d140:	607a      	str	r2, [r7, #4]
 800d142:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 800d144:	2300      	movs	r3, #0
 800d146:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800d148:	2300      	movs	r3, #0
 800d14a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d14c:	e030      	b.n	800d1b0 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 800d14e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d152:	1ad3      	subs	r3, r2, r3
 800d154:	2108      	movs	r1, #8
 800d156:	4618      	mov	r0, r3
 800d158:	f7ff fd75 	bl	800cc46 <lfs_min>
 800d15c:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 800d15e:	683a      	ldr	r2, [r7, #0]
 800d160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d162:	1ad1      	subs	r1, r2, r3
 800d164:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d168:	4413      	add	r3, r2
 800d16a:	6a3a      	ldr	r2, [r7, #32]
 800d16c:	9203      	str	r2, [sp, #12]
 800d16e:	f107 0214 	add.w	r2, r7, #20
 800d172:	9202      	str	r2, [sp, #8]
 800d174:	9301      	str	r3, [sp, #4]
 800d176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	460b      	mov	r3, r1
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	68b9      	ldr	r1, [r7, #8]
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f7ff fe3b 	bl	800cdfc <lfs_bd_read>
 800d186:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d001      	beq.n	800d192 <lfs_bd_crc+0x5c>
            return err;
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	e013      	b.n	800d1ba <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 800d192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f107 0114 	add.w	r1, r7, #20
 800d19a:	6a3a      	ldr	r2, [r7, #32]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f007 fc49 	bl	8014a34 <lfs_crc>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1a6:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 800d1a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1aa:	6a3b      	ldr	r3, [r7, #32]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d3ca      	bcc.n	800d14e <lfs_bd_crc+0x18>
    }

    return 0;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3728      	adds	r7, #40	@ 0x28
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
	...

0800d1c4 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800d1c4:	b5b0      	push	{r4, r5, r7, lr}
 800d1c6:	b08c      	sub	sp, #48	@ 0x30
 800d1c8:	af04      	add	r7, sp, #16
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	607a      	str	r2, [r7, #4]
 800d1d0:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1da:	d060      	beq.n	800d29e <lfs_bd_flush+0xda>
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f113 0f02 	cmn.w	r3, #2
 800d1e4:	d05b      	beq.n	800d29e <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d305      	bcc.n	800d1fe <lfs_bd_flush+0x3a>
 800d1f2:	4b2d      	ldr	r3, [pc, #180]	@ (800d2a8 <lfs_bd_flush+0xe4>)
 800d1f4:	4a2d      	ldr	r2, [pc, #180]	@ (800d2ac <lfs_bd_flush+0xe8>)
 800d1f6:	21b3      	movs	r1, #179	@ 0xb3
 800d1f8:	482d      	ldr	r0, [pc, #180]	@ (800d2b0 <lfs_bd_flush+0xec>)
 800d1fa:	f015 fed5 	bl	8022fa8 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	689a      	ldr	r2, [r3, #8]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d206:	6a1b      	ldr	r3, [r3, #32]
 800d208:	4619      	mov	r1, r3
 800d20a:	4610      	mov	r0, r2
 800d20c:	f7ff fd40 	bl	800cc90 <lfs_alignup>
 800d210:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d216:	689c      	ldr	r4, [r3, #8]
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	6819      	ldr	r1, [r3, #0]
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	9300      	str	r3, [sp, #0]
 800d22c:	462b      	mov	r3, r5
 800d22e:	47a0      	blx	r4
 800d230:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	2b00      	cmp	r3, #0
 800d236:	dd05      	ble.n	800d244 <lfs_bd_flush+0x80>
 800d238:	4b1e      	ldr	r3, [pc, #120]	@ (800d2b4 <lfs_bd_flush+0xf0>)
 800d23a:	4a1c      	ldr	r2, [pc, #112]	@ (800d2ac <lfs_bd_flush+0xe8>)
 800d23c:	21b7      	movs	r1, #183	@ 0xb7
 800d23e:	481c      	ldr	r0, [pc, #112]	@ (800d2b0 <lfs_bd_flush+0xec>)
 800d240:	f015 feb2 	bl	8022fa8 <__assert_func>
        if (err) {
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <lfs_bd_flush+0x8a>
            return err;
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	e028      	b.n	800d2a0 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 800d24e:	78fb      	ldrb	r3, [r7, #3]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d020      	beq.n	800d296 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800d254:	6879      	ldr	r1, [r7, #4]
 800d256:	68f8      	ldr	r0, [r7, #12]
 800d258:	f7ff fdab 	bl	800cdb2 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	68ba      	ldr	r2, [r7, #8]
 800d262:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800d264:	68b9      	ldr	r1, [r7, #8]
 800d266:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800d268:	69f8      	ldr	r0, [r7, #28]
 800d26a:	9003      	str	r0, [sp, #12]
 800d26c:	9102      	str	r1, [sp, #8]
 800d26e:	9201      	str	r2, [sp, #4]
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	2100      	movs	r1, #0
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f7ff ff0b 	bl	800d094 <lfs_bd_cmp>
 800d27e:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	2b00      	cmp	r3, #0
 800d284:	da01      	bge.n	800d28a <lfs_bd_flush+0xc6>
                return res;
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	e00a      	b.n	800d2a0 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d002      	beq.n	800d296 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 800d290:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800d294:	e004      	b.n	800d2a0 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800d296:	68b9      	ldr	r1, [r7, #8]
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f7ff fd99 	bl	800cdd0 <lfs_cache_zero>
    }

    return 0;
 800d29e:	2300      	movs	r3, #0
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3720      	adds	r7, #32
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bdb0      	pop	{r4, r5, r7, pc}
 800d2a8:	080304c0 	.word	0x080304c0
 800d2ac:	08033c14 	.word	0x08033c14
 800d2b0:	08030484 	.word	0x08030484
 800d2b4:	080304b4 	.word	0x080304b4

0800d2b8 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b086      	sub	sp, #24
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
 800d2c4:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800d2c6:	6879      	ldr	r1, [r7, #4]
 800d2c8:	68f8      	ldr	r0, [r7, #12]
 800d2ca:	f7ff fd72 	bl	800cdb2 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800d2ce:	78fb      	ldrb	r3, [r7, #3]
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	68b9      	ldr	r1, [r7, #8]
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f7ff ff75 	bl	800d1c4 <lfs_bd_flush>
 800d2da:	6178      	str	r0, [r7, #20]
    if (err) {
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d001      	beq.n	800d2e6 <lfs_bd_sync+0x2e>
        return err;
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	e011      	b.n	800d30a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2ea:	691b      	ldr	r3, [r3, #16]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	4798      	blx	r3
 800d2f4:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	dd05      	ble.n	800d308 <lfs_bd_sync+0x50>
 800d2fc:	4b05      	ldr	r3, [pc, #20]	@ (800d314 <lfs_bd_sync+0x5c>)
 800d2fe:	4a06      	ldr	r2, [pc, #24]	@ (800d318 <lfs_bd_sync+0x60>)
 800d300:	21dd      	movs	r1, #221	@ 0xdd
 800d302:	4806      	ldr	r0, [pc, #24]	@ (800d31c <lfs_bd_sync+0x64>)
 800d304:	f015 fe50 	bl	8022fa8 <__assert_func>
    return err;
 800d308:	697b      	ldr	r3, [r7, #20]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3718      	adds	r7, #24
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	080304b4 	.word	0x080304b4
 800d318:	08033c24 	.word	0x08033c24
 800d31c:	08030484 	.word	0x08030484

0800d320 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800d320:	b580      	push	{r7, lr}
 800d322:	b088      	sub	sp, #32
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
 800d32c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800d32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d330:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800d332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d334:	f113 0f02 	cmn.w	r3, #2
 800d338:	d00a      	beq.n	800d350 <lfs_bd_prog+0x30>
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d33e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d340:	429a      	cmp	r2, r3
 800d342:	d305      	bcc.n	800d350 <lfs_bd_prog+0x30>
 800d344:	4b48      	ldr	r3, [pc, #288]	@ (800d468 <lfs_bd_prog+0x148>)
 800d346:	4a49      	ldr	r2, [pc, #292]	@ (800d46c <lfs_bd_prog+0x14c>)
 800d348:	21e8      	movs	r1, #232	@ 0xe8
 800d34a:	4849      	ldr	r0, [pc, #292]	@ (800d470 <lfs_bd_prog+0x150>)
 800d34c:	f015 fe2c 	bl	8022fa8 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800d350:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d354:	441a      	add	r2, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d97a      	bls.n	800d456 <lfs_bd_prog+0x136>
 800d360:	4b44      	ldr	r3, [pc, #272]	@ (800d474 <lfs_bd_prog+0x154>)
 800d362:	4a42      	ldr	r2, [pc, #264]	@ (800d46c <lfs_bd_prog+0x14c>)
 800d364:	21e9      	movs	r1, #233	@ 0xe9
 800d366:	4842      	ldr	r0, [pc, #264]	@ (800d470 <lfs_bd_prog+0x150>)
 800d368:	f015 fe1e 	bl	8022fa8 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d372:	429a      	cmp	r2, r3
 800d374:	d151      	bne.n	800d41a <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800d37a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d34c      	bcc.n	800d41a <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	685a      	ldr	r2, [r3, #4]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d38a:	4413      	add	r3, r2
                off >= pcache->off &&
 800d38c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d38e:	429a      	cmp	r2, r3
 800d390:	d243      	bcs.n	800d41a <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d396:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	6859      	ldr	r1, [r3, #4]
 800d39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d39e:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800d3a0:	4413      	add	r3, r2
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d3a6:	f7ff fc4e 	bl	800cc46 <lfs_min>
 800d3aa:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	68da      	ldr	r2, [r3, #12]
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3b6:	1acb      	subs	r3, r1, r3
 800d3b8:	4413      	add	r3, r2
 800d3ba:	69ba      	ldr	r2, [r7, #24]
 800d3bc:	69f9      	ldr	r1, [r7, #28]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f019 fd82 	bl	8026ec8 <memcpy>

            data += diff;
 800d3c4:	69fa      	ldr	r2, [r7, #28]
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	61fb      	str	r3, [r7, #28]
            off += diff;
 800d3cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 800d3d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	1ad3      	subs	r3, r2, r3
 800d3da:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	6898      	ldr	r0, [r3, #8]
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3e6:	1ad3      	subs	r3, r2, r3
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	f7ff fc1c 	bl	800cc26 <lfs_max>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	689a      	ldr	r2, [r3, #8]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d128      	bne.n	800d454 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800d402:	78fb      	ldrb	r3, [r7, #3]
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	68b9      	ldr	r1, [r7, #8]
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f7ff fedb 	bl	800d1c4 <lfs_bd_flush>
 800d40e:	6178      	str	r0, [r7, #20]
                if (err) {
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d01e      	beq.n	800d454 <lfs_bd_prog+0x134>
                    return err;
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	e021      	b.n	800d45e <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d422:	d006      	beq.n	800d432 <lfs_bd_prog+0x112>
 800d424:	4b14      	ldr	r3, [pc, #80]	@ (800d478 <lfs_bd_prog+0x158>)
 800d426:	4a11      	ldr	r2, [pc, #68]	@ (800d46c <lfs_bd_prog+0x14c>)
 800d428:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800d42c:	4810      	ldr	r0, [pc, #64]	@ (800d470 <lfs_bd_prog+0x150>)
 800d42e:	f015 fdbb 	bl	8022fa8 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d436:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d43c:	6a1b      	ldr	r3, [r3, #32]
 800d43e:	4619      	mov	r1, r3
 800d440:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d442:	f7ff fc10 	bl	800cc66 <lfs_aligndown>
 800d446:	4602      	mov	r2, r0
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	2200      	movs	r2, #0
 800d450:	609a      	str	r2, [r3, #8]
 800d452:	e000      	b.n	800d456 <lfs_bd_prog+0x136>
            continue;
 800d454:	bf00      	nop
    while (size > 0) {
 800d456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d187      	bne.n	800d36c <lfs_bd_prog+0x4c>
    }

    return 0;
 800d45c:	2300      	movs	r3, #0
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3720      	adds	r7, #32
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	080304e4 	.word	0x080304e4
 800d46c:	08033c30 	.word	0x08033c30
 800d470:	08030484 	.word	0x08030484
 800d474:	0803051c 	.word	0x0803051c
 800d478:	08030540 	.word	0x08030540

0800d47c <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d48a:	683a      	ldr	r2, [r7, #0]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d306      	bcc.n	800d49e <lfs_bd_erase+0x22>
 800d490:	4b0f      	ldr	r3, [pc, #60]	@ (800d4d0 <lfs_bd_erase+0x54>)
 800d492:	4a10      	ldr	r2, [pc, #64]	@ (800d4d4 <lfs_bd_erase+0x58>)
 800d494:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800d498:	480f      	ldr	r0, [pc, #60]	@ (800d4d8 <lfs_bd_erase+0x5c>)
 800d49a:	f015 fd85 	bl	8022fa8 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d4a8:	6839      	ldr	r1, [r7, #0]
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	4798      	blx	r3
 800d4ae:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	dd06      	ble.n	800d4c4 <lfs_bd_erase+0x48>
 800d4b6:	4b09      	ldr	r3, [pc, #36]	@ (800d4dc <lfs_bd_erase+0x60>)
 800d4b8:	4a06      	ldr	r2, [pc, #24]	@ (800d4d4 <lfs_bd_erase+0x58>)
 800d4ba:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800d4be:	4806      	ldr	r0, [pc, #24]	@ (800d4d8 <lfs_bd_erase+0x5c>)
 800d4c0:	f015 fd72 	bl	8022fa8 <__assert_func>
    return err;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3710      	adds	r7, #16
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	08030564 	.word	0x08030564
 800d4d4:	08033c3c 	.word	0x08033c3c
 800d4d8:	08030484 	.word	0x08030484
 800d4dc:	080304b4 	.word	0x080304b4

0800d4e0 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	685a      	ldr	r2, [r3, #4]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	601a      	str	r2, [r3, #0]
}
 800d4fe:	bf00      	nop
 800d500:	3714      	adds	r7, #20
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr

0800d50a <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800d50a:	b480      	push	{r7}
 800d50c:	b083      	sub	sp, #12
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d51a:	d005      	beq.n	800d528 <lfs_pair_isnull+0x1e>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	3304      	adds	r3, #4
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d526:	d101      	bne.n	800d52c <lfs_pair_isnull+0x22>
 800d528:	2301      	movs	r3, #1
 800d52a:	e000      	b.n	800d52e <lfs_pair_isnull+0x24>
 800d52c:	2300      	movs	r3, #0
 800d52e:	f003 0301 	and.w	r3, r3, #1
 800d532:	b2db      	uxtb	r3, r3
}
 800d534:	4618      	mov	r0, r3
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	429a      	cmp	r2, r3
 800d554:	d017      	beq.n	800d586 <lfs_pair_cmp+0x46>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	3304      	adds	r3, #4
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	3304      	adds	r3, #4
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	429a      	cmp	r2, r3
 800d564:	d00f      	beq.n	800d586 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	3304      	adds	r3, #4
 800d56e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d570:	429a      	cmp	r2, r3
 800d572:	d008      	beq.n	800d586 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	3304      	adds	r3, #4
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d57e:	429a      	cmp	r2, r3
 800d580:	d001      	beq.n	800d586 <lfs_pair_cmp+0x46>
 800d582:	2301      	movs	r3, #1
 800d584:	e000      	b.n	800d588 <lfs_pair_cmp+0x48>
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	370c      	adds	r7, #12
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d107      	bne.n	800d5ba <lfs_pair_issync+0x26>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d00d      	beq.n	800d5d6 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	3304      	adds	r3, #4
 800d5c2:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d108      	bne.n	800d5da <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	3304      	adds	r3, #4
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d101      	bne.n	800d5da <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	e000      	b.n	800d5dc <lfs_pair_issync+0x48>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f003 0301 	and.w	r3, r3, #1
 800d5e0:	b2db      	uxtb	r3, r3
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	370c      	adds	r7, #12
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr

0800d5ee <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800d5ee:	b590      	push	{r4, r7, lr}
 800d5f0:	b083      	sub	sp, #12
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7ff fb93 	bl	800cd26 <lfs_fromle32>
 800d600:	4602      	mov	r2, r0
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	3304      	adds	r3, #4
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	1d1c      	adds	r4, r3, #4
 800d610:	4610      	mov	r0, r2
 800d612:	f7ff fb88 	bl	800cd26 <lfs_fromle32>
 800d616:	4603      	mov	r3, r0
 800d618:	6023      	str	r3, [r4, #0]
}
 800d61a:	bf00      	nop
 800d61c:	370c      	adds	r7, #12
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd90      	pop	{r4, r7, pc}

0800d622 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800d622:	b590      	push	{r4, r7, lr}
 800d624:	b083      	sub	sp, #12
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	4618      	mov	r0, r3
 800d630:	f7ff fb84 	bl	800cd3c <lfs_tole32>
 800d634:	4602      	mov	r2, r0
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	3304      	adds	r3, #4
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	1d1c      	adds	r4, r3, #4
 800d644:	4610      	mov	r0, r2
 800d646:	f7ff fb79 	bl	800cd3c <lfs_tole32>
 800d64a:	4603      	mov	r3, r0
 800d64c:	6023      	str	r3, [r4, #0]
}
 800d64e:	bf00      	nop
 800d650:	370c      	adds	r7, #12
 800d652:	46bd      	mov	sp, r7
 800d654:	bd90      	pop	{r4, r7, pc}

0800d656 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800d656:	b480      	push	{r7}
 800d658:	b083      	sub	sp, #12
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	43db      	mvns	r3, r3
 800d662:	0fdb      	lsrs	r3, r3, #31
 800d664:	b2db      	uxtb	r3, r3
}
 800d666:	4618      	mov	r0, r3
 800d668:	370c      	adds	r7, #12
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr

0800d672 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800d672:	b480      	push	{r7}
 800d674:	b083      	sub	sp, #12
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	059b      	lsls	r3, r3, #22
 800d67e:	159b      	asrs	r3, r3, #22
 800d680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d684:	bf0c      	ite	eq
 800d686:	2301      	moveq	r3, #1
 800d688:	2300      	movne	r3, #0
 800d68a:	b2db      	uxtb	r3, r3
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	0d1b      	lsrs	r3, r3, #20
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d6aa:	b29b      	uxth	r3, r3
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 800d6b8:	b480      	push	{r7}
 800d6ba:	b083      	sub	sp, #12
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	0d1b      	lsrs	r3, r3, #20
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 800d6ca:	b29b      	uxth	r3, r3
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	370c      	adds	r7, #12
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	0d1b      	lsrs	r3, r3, #20
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d6ea:	b29b      	uxth	r3, r3
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	0d1b      	lsrs	r3, r3, #20
 800d704:	b2db      	uxtb	r3, r3
}
 800d706:	4618      	mov	r0, r3
 800d708:	370c      	adds	r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr

0800d712 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800d712:	b580      	push	{r7, lr}
 800d714:	b082      	sub	sp, #8
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff ffec 	bl	800d6f8 <lfs_tag_chunk>
 800d720:	4603      	mov	r3, r0
 800d722:	b25b      	sxtb	r3, r3
}
 800d724:	4618      	mov	r0, r3
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	0a9b      	lsrs	r3, r3, #10
 800d738:	b29b      	uxth	r3, r3
 800d73a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d73e:	b29b      	uxth	r3, r3
}
 800d740:	4618      	mov	r0, r3
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800d766:	b580      	push	{r7, lr}
 800d768:	b082      	sub	sp, #8
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7ff ff7f 	bl	800d672 <lfs_tag_isdelete>
 800d774:	4603      	mov	r3, r0
 800d776:	461a      	mov	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	4413      	add	r3, r2
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7ff ffe5 	bl	800d74c <lfs_tag_size>
 800d782:	4603      	mov	r3, r0
 800d784:	3304      	adds	r3, #4
}
 800d786:	4618      	mov	r0, r3
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800d78e:	b480      	push	{r7}
 800d790:	b085      	sub	sp, #20
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
 800d796:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800d798:	2300      	movs	r3, #0
 800d79a:	60fb      	str	r3, [r7, #12]
 800d79c:	e012      	b.n	800d7c4 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	6819      	ldr	r1, [r3, #0]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	683a      	ldr	r2, [r7, #0]
 800d7ae:	4413      	add	r3, r2
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	4403      	add	r3, r0
 800d7ba:	404a      	eors	r2, r1
 800d7bc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	60fb      	str	r3, [r7, #12]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b02      	cmp	r3, #2
 800d7c8:	dde9      	ble.n	800d79e <lfs_gstate_xor+0x10>
    }
}
 800d7ca:	bf00      	nop
 800d7cc:	bf00      	nop
 800d7ce:	3714      	adds	r7, #20
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	60fb      	str	r3, [r7, #12]
 800d7e4:	e00b      	b.n	800d7fe <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d001      	beq.n	800d7f8 <lfs_gstate_iszero+0x20>
            return false;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	e006      	b.n	800d806 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	60fb      	str	r3, [r7, #12]
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b02      	cmp	r3, #2
 800d802:	ddf0      	ble.n	800d7e6 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800d804:	2301      	movs	r3, #1
}
 800d806:	4618      	mov	r0, r3
 800d808:	3714      	adds	r7, #20
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr

0800d812 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800d812:	b580      	push	{r7, lr}
 800d814:	b082      	sub	sp, #8
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4618      	mov	r0, r3
 800d820:	f7ff ff94 	bl	800d74c <lfs_tag_size>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	bf14      	ite	ne
 800d82a:	2301      	movne	r3, #1
 800d82c:	2300      	moveq	r3, #0
 800d82e:	b2db      	uxtb	r3, r3
}
 800d830:	4618      	mov	r0, r3
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4618      	mov	r0, r3
 800d846:	f7ff ff81 	bl	800d74c <lfs_tag_size>
 800d84a:	4603      	mov	r3, r0
 800d84c:	b2db      	uxtb	r3, r3
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800d856:	b580      	push	{r7, lr}
 800d858:	b082      	sub	sp, #8
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4618      	mov	r0, r3
 800d864:	f7ff ff18 	bl	800d698 <lfs_tag_type1>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	bf14      	ite	ne
 800d86e:	2301      	movne	r3, #1
 800d870:	2300      	moveq	r3, #0
 800d872:	b2db      	uxtb	r3, r3
}
 800d874:	4618      	mov	r0, r3
 800d876:	3708      	adds	r7, #8
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4618      	mov	r0, r3
 800d88a:	f7ff ff5f 	bl	800d74c <lfs_tag_size>
 800d88e:	4603      	mov	r3, r0
 800d890:	0a5b      	lsrs	r3, r3, #9
 800d892:	2b00      	cmp	r3, #0
 800d894:	bf14      	ite	ne
 800d896:	2301      	movne	r3, #1
 800d898:	2300      	moveq	r3, #0
 800d89a:	b2db      	uxtb	r3, r3
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7ff fef0 	bl	800d698 <lfs_tag_type1>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00a      	beq.n	800d8d4 <lfs_gstate_hasmovehere+0x30>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	3304      	adds	r3, #4
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7ff fe3b 	bl	800d540 <lfs_pair_cmp>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d101      	bne.n	800d8d4 <lfs_gstate_hasmovehere+0x30>
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	e000      	b.n	800d8d6 <lfs_gstate_hasmovehere+0x32>
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	f003 0301 	and.w	r3, r3, #1
 800d8da:	b2db      	uxtb	r3, r3
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7ff fa18 	bl	800cd26 <lfs_fromle32>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	4618      	mov	r0, r3
 800d902:	f7ff fa10 	bl	800cd26 <lfs_fromle32>
 800d906:	4602      	mov	r2, r0
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	4618      	mov	r0, r3
 800d912:	f7ff fa08 	bl	800cd26 <lfs_fromle32>
 800d916:	4602      	mov	r2, r0
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	609a      	str	r2, [r3, #8]
}
 800d91c:	bf00      	nop
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4618      	mov	r0, r3
 800d932:	f7ff fa03 	bl	800cd3c <lfs_tole32>
 800d936:	4602      	mov	r2, r0
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	4618      	mov	r0, r3
 800d942:	f7ff f9fb 	bl	800cd3c <lfs_tole32>
 800d946:	4602      	mov	r2, r0
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	689b      	ldr	r3, [r3, #8]
 800d950:	4618      	mov	r0, r3
 800d952:	f7ff f9f3 	bl	800cd3c <lfs_tole32>
 800d956:	4602      	mov	r2, r0
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	609a      	str	r2, [r3, #8]
}
 800d95c:	bf00      	nop
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4618      	mov	r0, r3
 800d972:	f7ff f9d8 	bl	800cd26 <lfs_fromle32>
 800d976:	4602      	mov	r2, r0
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	4618      	mov	r0, r3
 800d982:	f7ff f9d0 	bl	800cd26 <lfs_fromle32>
 800d986:	4602      	mov	r2, r0
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	605a      	str	r2, [r3, #4]
}
 800d98c:	bf00      	nop
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7ff f9cb 	bl	800cd3c <lfs_tole32>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7ff f9c3 	bl	800cd3c <lfs_tole32>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	605a      	str	r2, [r3, #4]
}
 800d9bc:	bf00      	nop
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7ff f9a8 	bl	800cd26 <lfs_fromle32>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7ff f9a0 	bl	800cd26 <lfs_fromle32>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	605a      	str	r2, [r3, #4]
}
 800d9ec:	bf00      	nop
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff f99b 	bl	800cd3c <lfs_tole32>
 800da06:	4602      	mov	r2, r0
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	4618      	mov	r0, r3
 800da12:	f7ff f993 	bl	800cd3c <lfs_tole32>
 800da16:	4602      	mov	r2, r0
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	605a      	str	r2, [r3, #4]
}
 800da1c:	bf00      	nop
 800da1e:	3708      	adds	r7, #8
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff f978 	bl	800cd26 <lfs_fromle32>
 800da36:	4602      	mov	r2, r0
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	4618      	mov	r0, r3
 800da42:	f7ff f970 	bl	800cd26 <lfs_fromle32>
 800da46:	4602      	mov	r2, r0
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	4618      	mov	r0, r3
 800da52:	f7ff f968 	bl	800cd26 <lfs_fromle32>
 800da56:	4602      	mov	r2, r0
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	4618      	mov	r0, r3
 800da62:	f7ff f960 	bl	800cd26 <lfs_fromle32>
 800da66:	4602      	mov	r2, r0
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	4618      	mov	r0, r3
 800da72:	f7ff f958 	bl	800cd26 <lfs_fromle32>
 800da76:	4602      	mov	r2, r0
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	695b      	ldr	r3, [r3, #20]
 800da80:	4618      	mov	r0, r3
 800da82:	f7ff f950 	bl	800cd26 <lfs_fromle32>
 800da86:	4602      	mov	r2, r0
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	615a      	str	r2, [r3, #20]
}
 800da8c:	bf00      	nop
 800da8e:	3708      	adds	r7, #8
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff f94b 	bl	800cd3c <lfs_tole32>
 800daa6:	4602      	mov	r2, r0
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7ff f943 	bl	800cd3c <lfs_tole32>
 800dab6:	4602      	mov	r2, r0
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7ff f93b 	bl	800cd3c <lfs_tole32>
 800dac6:	4602      	mov	r2, r0
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	68db      	ldr	r3, [r3, #12]
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7ff f933 	bl	800cd3c <lfs_tole32>
 800dad6:	4602      	mov	r2, r0
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	691b      	ldr	r3, [r3, #16]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7ff f92b 	bl	800cd3c <lfs_tole32>
 800dae6:	4602      	mov	r2, r0
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	695b      	ldr	r3, [r3, #20]
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7ff f923 	bl	800cd3c <lfs_tole32>
 800daf6:	4602      	mov	r2, r0
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	615a      	str	r2, [r3, #20]
}
 800dafc:	bf00      	nop
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800db0e:	1d3b      	adds	r3, r7, #4
 800db10:	60fb      	str	r3, [r7, #12]
 800db12:	e009      	b.n	800db28 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	683a      	ldr	r2, [r7, #0]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d101      	bne.n	800db22 <lfs_mlist_isopen+0x1e>
            return true;
 800db1e:	2301      	movs	r3, #1
 800db20:	e007      	b.n	800db32 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	60fb      	str	r3, [r7, #12]
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d1f1      	bne.n	800db14 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800db30:	2300      	movs	r3, #0
}
 800db32:	4618      	mov	r0, r3
 800db34:	3714      	adds	r7, #20
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr

0800db3e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800db3e:	b480      	push	{r7}
 800db40:	b085      	sub	sp, #20
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
 800db46:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	3328      	adds	r3, #40	@ 0x28
 800db4c:	60fb      	str	r3, [r7, #12]
 800db4e:	e00d      	b.n	800db6c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	683a      	ldr	r2, [r7, #0]
 800db56:	429a      	cmp	r2, r3
 800db58:	d105      	bne.n	800db66 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	601a      	str	r2, [r3, #0]
            break;
 800db64:	e007      	b.n	800db76 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	60fb      	str	r3, [r7, #12]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d1ed      	bne.n	800db50 <lfs_mlist_remove+0x12>
        }
    }
}
 800db74:	bf00      	nop
 800db76:	bf00      	nop
 800db78:	3714      	adds	r7, #20
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr

0800db82 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800db82:	b480      	push	{r7}
 800db84:	b083      	sub	sp, #12
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
 800db8a:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	683a      	ldr	r2, [r7, #0]
 800db98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800db9a:	bf00      	nop
 800db9c:	370c      	adds	r7, #12
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
	...

0800dba8 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 800dba8:	b480      	push	{r7}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 800dbb0:	4b03      	ldr	r3, [pc, #12]	@ (800dbc0 <lfs_fs_disk_version+0x18>)
    }
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	370c      	adds	r7, #12
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr
 800dbbe:	bf00      	nop
 800dbc0:	00020001 	.word	0x00020001

0800dbc4 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7ff ffeb 	bl	800dba8 <lfs_fs_disk_version>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	0c1b      	lsrs	r3, r3, #16
 800dbd6:	b29b      	uxth	r3, r3

}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7ff ffdd 	bl	800dba8 <lfs_fs_disk_version>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	b29b      	uxth	r3, r3
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3708      	adds	r7, #8
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 800dbfa:	b480      	push	{r7}
 800dbfc:	b083      	sub	sp, #12
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800dc0a:	bf00      	nop
 800dc0c:	370c      	adds	r7, #12
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr

0800dc16 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b082      	sub	sp, #8
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2200      	movs	r2, #0
 800dc28:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7ff ffe5 	bl	800dbfa <lfs_alloc_ckpoint>
}
 800dc30:	bf00      	nop
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc52:	4413      	add	r3, r2
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 800dc58:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc5c:	fb01 f202 	mul.w	r2, r1, r2
 800dc60:	1a9b      	subs	r3, r3, r2
 800dc62:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc68:	68ba      	ldr	r2, [r7, #8]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d212      	bcs.n	800dc94 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	08db      	lsrs	r3, r3, #3
 800dc76:	441a      	add	r2, r3
 800dc78:	7811      	ldrb	r1, [r2, #0]
 800dc7a:	68ba      	ldr	r2, [r7, #8]
 800dc7c:	f002 0207 	and.w	r2, r2, #7
 800dc80:	2001      	movs	r0, #1
 800dc82:	fa00 f202 	lsl.w	r2, r0, r2
 800dc86:	b2d2      	uxtb	r2, r2
 800dc88:	68f8      	ldr	r0, [r7, #12]
 800dc8a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 800dc8c:	4403      	add	r3, r0
 800dc8e:	430a      	orrs	r2, r1
 800dc90:	b2d2      	uxtb	r2, r2
 800dc92:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 800dc94:	2300      	movs	r3, #0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3714      	adds	r7, #20
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr
	...

0800dca4 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcb4:	4413      	add	r3, r2
            % lfs->block_count;
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800dcba:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcbe:	fb01 f202 	mul.w	r2, r1, r2
 800dcc2:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dcd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 800dcd4:	00da      	lsls	r2, r3, #3
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dcda:	4619      	mov	r1, r3
 800dcdc:	4610      	mov	r0, r2
 800dcde:	f7fe ffb2 	bl	800cc46 <lfs_min>
 800dce2:	4602      	mov	r2, r0
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dcf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	f017 feab 	bl	8025a50 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	687a      	ldr	r2, [r7, #4]
 800dcfe:	4909      	ldr	r1, [pc, #36]	@ (800dd24 <lfs_alloc_scan+0x80>)
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f005 fdc9 	bl	8013898 <lfs_fs_traverse_>
 800dd06:	60f8      	str	r0, [r7, #12]
    if (err) {
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d004      	beq.n	800dd18 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f7ff ff81 	bl	800dc16 <lfs_alloc_drop>
        return err;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	e000      	b.n	800dd1a <lfs_alloc_scan+0x76>
    }

    return 0;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	0800dc39 	.word	0x0800dc39

0800dd28 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	af02      	add	r7, sp, #8
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800dd32:	e04d      	b.n	800ddd0 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd3c:	08db      	lsrs	r3, r3, #3
 800dd3e:	4413      	add	r3, r2
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd48:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800dd4c:	fa22 f303 	lsr.w	r3, r2, r3
 800dd50:	f003 0301 	and.w	r3, r3, #1
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d131      	bne.n	800ddbc <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd60:	4413      	add	r3, r2
                        % lfs->block_count;
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800dd66:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd6a:	fb01 f202 	mul.w	r2, r1, r2
 800dd6e:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd78:	1c5a      	adds	r2, r3, #1
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd82:	1e5a      	subs	r2, r3, #1
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d211      	bcs.n	800ddb8 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd9c:	08db      	lsrs	r3, r3, #3
 800dd9e:	4413      	add	r3, r2
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dda8:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800ddac:	fa22 f303 	lsr.w	r3, r2, r3
 800ddb0:	f003 0301 	and.w	r3, r3, #1
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d1dd      	bne.n	800dd74 <lfs_alloc+0x4c>
                        return 0;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	e032      	b.n	800de22 <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddc0:	1c5a      	adds	r2, r3, #1
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ddca:	1e5a      	subs	r2, r3, #1
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d3ab      	bcc.n	800dd34 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d116      	bne.n	800de12 <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddec:	4413      	add	r3, r2
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800ddf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddf6:	fb01 f202 	mul.w	r2, r1, r2
 800ddfa:	1a9b      	subs	r3, r3, r2
 800ddfc:	4a0b      	ldr	r2, [pc, #44]	@ (800de2c <lfs_alloc+0x104>)
 800ddfe:	9200      	str	r2, [sp, #0]
 800de00:	f240 22b1 	movw	r2, #689	@ 0x2b1
 800de04:	490a      	ldr	r1, [pc, #40]	@ (800de30 <lfs_alloc+0x108>)
 800de06:	480b      	ldr	r0, [pc, #44]	@ (800de34 <lfs_alloc+0x10c>)
 800de08:	f015 f902 	bl	8023010 <printf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 800de0c:	f06f 031b 	mvn.w	r3, #27
 800de10:	e007      	b.n	800de22 <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f7ff ff46 	bl	800dca4 <lfs_alloc_scan>
 800de18:	60f8      	str	r0, [r7, #12]
        if(err) {
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d088      	beq.n	800dd32 <lfs_alloc+0xa>
            return err;
 800de20:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800de22:	4618      	mov	r0, r3
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	080305ac 	.word	0x080305ac
 800de30:	08030484 	.word	0x08030484
 800de34:	08030580 	.word	0x08030580

0800de38 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800de38:	b590      	push	{r4, r7, lr}
 800de3a:	b08f      	sub	sp, #60	@ 0x3c
 800de3c:	af04      	add	r7, sp, #16
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
 800de44:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	691b      	ldr	r3, [r3, #16]
 800de50:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800de52:	2300      	movs	r3, #0
 800de54:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	333c      	adds	r3, #60	@ 0x3c
 800de5a:	68ba      	ldr	r2, [r7, #8]
 800de5c:	4611      	mov	r1, r2
 800de5e:	4618      	mov	r0, r3
 800de60:	f7ff fd20 	bl	800d8a4 <lfs_gstate_hasmovehere>
 800de64:	4603      	mov	r3, r0
 800de66:	2b00      	cmp	r3, #0
 800de68:	f000 80ca 	beq.w	800e000 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f7ff fc5d 	bl	800d72c <lfs_tag_id>
 800de72:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800de74:	2b00      	cmp	r3, #0
 800de76:	f000 80c3 	beq.w	800e000 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de7e:	4618      	mov	r0, r3
 800de80:	f7ff fc54 	bl	800d72c <lfs_tag_id>
 800de84:	4603      	mov	r3, r0
 800de86:	461c      	mov	r4, r3
 800de88:	6838      	ldr	r0, [r7, #0]
 800de8a:	f7ff fc4f 	bl	800d72c <lfs_tag_id>
 800de8e:	4603      	mov	r3, r0
 800de90:	429c      	cmp	r4, r3
 800de92:	d102      	bne.n	800de9a <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 800de94:	f06f 0301 	mvn.w	r3, #1
 800de98:	e0be      	b.n	800e018 <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7ff fc44 	bl	800d72c <lfs_tag_id>
 800dea4:	4603      	mov	r3, r0
 800dea6:	461c      	mov	r4, r3
 800dea8:	6838      	ldr	r0, [r7, #0]
 800deaa:	f7ff fc3f 	bl	800d72c <lfs_tag_id>
 800deae:	4603      	mov	r3, r0
 800deb0:	429c      	cmp	r4, r3
 800deb2:	f080 80a5 	bcs.w	800e000 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800debc:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800debe:	e09f      	b.n	800e000 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7ff fc4f 	bl	800d766 <lfs_tag_dsize>
 800dec8:	4602      	mov	r2, r0
 800deca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800decc:	1a9b      	subs	r3, r3, r2
 800dece:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800ded4:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800deda:	2204      	movs	r2, #4
 800dedc:	9203      	str	r2, [sp, #12]
 800dede:	f107 0210 	add.w	r2, r7, #16
 800dee2:	9202      	str	r2, [sp, #8]
 800dee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dee6:	9201      	str	r2, [sp, #4]
 800dee8:	9300      	str	r3, [sp, #0]
 800deea:	2304      	movs	r3, #4
 800deec:	460a      	mov	r2, r1
 800deee:	2100      	movs	r1, #0
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f7fe ff83 	bl	800cdfc <lfs_bd_read>
 800def6:	61b8      	str	r0, [r7, #24]
        if (err) {
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <lfs_dir_getslice+0xca>
            return err;
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	e08a      	b.n	800e018 <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	4618      	mov	r0, r3
 800df06:	f7fe ff25 	bl	800cd54 <lfs_frombe32>
 800df0a:	4602      	mov	r2, r0
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	4053      	eors	r3, r2
 800df10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df14:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7ff fc08 	bl	800d72c <lfs_tag_id>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d02b      	beq.n	800df7a <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800df22:	69f8      	ldr	r0, [r7, #28]
 800df24:	f7ff fbb8 	bl	800d698 <lfs_tag_type1>
 800df28:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800df2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df2e:	d124      	bne.n	800df7a <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800df30:	69f8      	ldr	r0, [r7, #28]
 800df32:	f7ff fbfb 	bl	800d72c <lfs_tag_id>
 800df36:	4603      	mov	r3, r0
 800df38:	461c      	mov	r4, r3
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	683a      	ldr	r2, [r7, #0]
 800df3e:	1ad3      	subs	r3, r2, r3
 800df40:	4618      	mov	r0, r3
 800df42:	f7ff fbf3 	bl	800d72c <lfs_tag_id>
 800df46:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800df48:	429c      	cmp	r4, r3
 800df4a:	d816      	bhi.n	800df7a <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800df4c:	6a3b      	ldr	r3, [r7, #32]
 800df4e:	683a      	ldr	r2, [r7, #0]
 800df50:	1ad2      	subs	r2, r2, r3
 800df52:	4b33      	ldr	r3, [pc, #204]	@ (800e020 <lfs_dir_getslice+0x1e8>)
 800df54:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800df56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800df5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df5e:	69fa      	ldr	r2, [r7, #28]
 800df60:	429a      	cmp	r2, r3
 800df62:	d102      	bne.n	800df6a <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 800df64:	f06f 0301 	mvn.w	r3, #1
 800df68:	e056      	b.n	800e018 <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800df6a:	69f8      	ldr	r0, [r7, #28]
 800df6c:	f7ff fbd1 	bl	800d712 <lfs_tag_splice>
 800df70:	4603      	mov	r3, r0
 800df72:	029a      	lsls	r2, r3, #10
 800df74:	6a3b      	ldr	r3, [r7, #32]
 800df76:	4413      	add	r3, r2
 800df78:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	401a      	ands	r2, r3
 800df80:	6a3b      	ldr	r3, [r7, #32]
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	1ac9      	subs	r1, r1, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	400b      	ands	r3, r1
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d138      	bne.n	800e000 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 800df8e:	69f8      	ldr	r0, [r7, #28]
 800df90:	f7ff fb6f 	bl	800d672 <lfs_tag_isdelete>
 800df94:	4603      	mov	r3, r0
 800df96:	2b00      	cmp	r3, #0
 800df98:	d002      	beq.n	800dfa0 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 800df9a:	f06f 0301 	mvn.w	r3, #1
 800df9e:	e03b      	b.n	800e018 <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800dfa0:	69f8      	ldr	r0, [r7, #28]
 800dfa2:	f7ff fbd3 	bl	800d74c <lfs_tag_size>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fe fe4b 	bl	800cc46 <lfs_min>
 800dfb0:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800dfb2:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dfba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dfbc:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800dfbe:	3204      	adds	r2, #4
 800dfc0:	6979      	ldr	r1, [r7, #20]
 800dfc2:	9103      	str	r1, [sp, #12]
 800dfc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dfc6:	9102      	str	r1, [sp, #8]
 800dfc8:	9201      	str	r2, [sp, #4]
 800dfca:	9300      	str	r3, [sp, #0]
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	4602      	mov	r2, r0
 800dfd0:	2100      	movs	r1, #0
 800dfd2:	68f8      	ldr	r0, [r7, #12]
 800dfd4:	f7fe ff12 	bl	800cdfc <lfs_bd_read>
 800dfd8:	61b8      	str	r0, [r7, #24]
            if (err) {
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d001      	beq.n	800dfe4 <lfs_dir_getslice+0x1ac>
                return err;
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	e019      	b.n	800e018 <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800dfe4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	18d0      	adds	r0, r2, r3
 800dfea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	1ad3      	subs	r3, r2, r3
 800dff0:	461a      	mov	r2, r3
 800dff2:	2100      	movs	r1, #0
 800dff4:	f017 fd2c 	bl	8025a50 <memset>

            return tag + gdiff;
 800dff8:	6a3a      	ldr	r2, [r7, #32]
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	4413      	add	r3, r2
 800dffe:	e00b      	b.n	800e018 <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	4618      	mov	r0, r3
 800e004:	f7ff fbaf 	bl	800d766 <lfs_tag_dsize>
 800e008:	4603      	mov	r3, r0
 800e00a:	3304      	adds	r3, #4
 800e00c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e00e:	429a      	cmp	r2, r3
 800e010:	f4bf af56 	bcs.w	800dec0 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 800e014:	f06f 0301 	mvn.w	r3, #1
}
 800e018:	4618      	mov	r0, r3
 800e01a:	372c      	adds	r7, #44	@ 0x2c
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd90      	pop	{r4, r7, pc}
 800e020:	000ffc00 	.word	0x000ffc00

0800e024 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800e024:	b580      	push	{r7, lr}
 800e026:	b088      	sub	sp, #32
 800e028:	af04      	add	r7, sp, #16
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
 800e030:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800e032:	6838      	ldr	r0, [r7, #0]
 800e034:	f7ff fb8a 	bl	800d74c <lfs_tag_size>
 800e038:	4603      	mov	r3, r0
 800e03a:	9302      	str	r3, [sp, #8]
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	9301      	str	r3, [sp, #4]
 800e040:	2300      	movs	r3, #0
 800e042:	9300      	str	r3, [sp, #0]
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	68b9      	ldr	r1, [r7, #8]
 800e04a:	68f8      	ldr	r0, [r7, #12]
 800e04c:	f7ff fef4 	bl	800de38 <lfs_dir_getslice>
 800e050:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b08c      	sub	sp, #48	@ 0x30
 800e05e:	af04      	add	r7, sp, #16
 800e060:	60f8      	str	r0, [r7, #12]
 800e062:	60b9      	str	r1, [r7, #8]
 800e064:	607a      	str	r2, [r7, #4]
 800e066:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800e068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e06a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800e06c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e070:	441a      	add	r2, r3
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e078:	429a      	cmp	r2, r3
 800e07a:	f240 80c0 	bls.w	800e1fe <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800e07e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800e082:	e0c1      	b.n	800e208 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800e084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e086:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d03f      	beq.n	800e10e <lfs_dir_getread+0xb4>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f113 0f02 	cmn.w	r3, #2
 800e096:	d13a      	bne.n	800e10e <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	685a      	ldr	r2, [r3, #4]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800e0a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d232      	bcs.n	800e10e <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d324      	bcc.n	800e0fc <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	689a      	ldr	r2, [r3, #8]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6859      	ldr	r1, [r3, #4]
 800e0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0bc:	1acb      	subs	r3, r1, r3
 800e0be:	4413      	add	r3, r2
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	69b8      	ldr	r0, [r7, #24]
 800e0c4:	f7fe fdbf 	bl	800cc46 <lfs_min>
 800e0c8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	68da      	ldr	r2, [r3, #12]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e0d4:	1acb      	subs	r3, r1, r3
 800e0d6:	4413      	add	r3, r2
 800e0d8:	69ba      	ldr	r2, [r7, #24]
 800e0da:	4619      	mov	r1, r3
 800e0dc:	69f8      	ldr	r0, [r7, #28]
 800e0de:	f018 fef3 	bl	8026ec8 <memcpy>

                data += diff;
 800e0e2:	69fa      	ldr	r2, [r7, #28]
 800e0e4:	69bb      	ldr	r3, [r7, #24]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	61fb      	str	r3, [r7, #28]
                off += diff;
 800e0ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800e0f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	1ad3      	subs	r3, r2, r3
 800e0f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800e0fa:	e080      	b.n	800e1fe <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	685a      	ldr	r2, [r3, #4]
 800e100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e102:	1ad3      	subs	r3, r2, r3
 800e104:	4619      	mov	r1, r3
 800e106:	69b8      	ldr	r0, [r7, #24]
 800e108:	f7fe fd9d 	bl	800cc46 <lfs_min>
 800e10c:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f113 0f02 	cmn.w	r3, #2
 800e116:	d13a      	bne.n	800e18e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	685a      	ldr	r2, [r3, #4]
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800e122:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e124:	429a      	cmp	r2, r3
 800e126:	d232      	bcs.n	800e18e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e12e:	429a      	cmp	r2, r3
 800e130:	d324      	bcc.n	800e17c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	689a      	ldr	r2, [r3, #8]
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	6859      	ldr	r1, [r3, #4]
 800e13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e13c:	1acb      	subs	r3, r1, r3
 800e13e:	4413      	add	r3, r2
 800e140:	4619      	mov	r1, r3
 800e142:	69b8      	ldr	r0, [r7, #24]
 800e144:	f7fe fd7f 	bl	800cc46 <lfs_min>
 800e148:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	68da      	ldr	r2, [r3, #12]
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e154:	1acb      	subs	r3, r1, r3
 800e156:	4413      	add	r3, r2
 800e158:	69ba      	ldr	r2, [r7, #24]
 800e15a:	4619      	mov	r1, r3
 800e15c:	69f8      	ldr	r0, [r7, #28]
 800e15e:	f018 feb3 	bl	8026ec8 <memcpy>

                data += diff;
 800e162:	69fa      	ldr	r2, [r7, #28]
 800e164:	69bb      	ldr	r3, [r7, #24]
 800e166:	4413      	add	r3, r2
 800e168:	61fb      	str	r3, [r7, #28]
                off += diff;
 800e16a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e16c:	69bb      	ldr	r3, [r7, #24]
 800e16e:	4413      	add	r3, r2
 800e170:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800e172:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e174:	69bb      	ldr	r3, [r7, #24]
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800e17a:	e040      	b.n	800e1fe <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	685a      	ldr	r2, [r3, #4]
 800e180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e182:	1ad3      	subs	r3, r2, r3
 800e184:	4619      	mov	r1, r3
 800e186:	69b8      	ldr	r0, [r7, #24]
 800e188:	f7fe fd5d 	bl	800cc46 <lfs_min>
 800e18c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	f06f 0201 	mvn.w	r2, #1
 800e194:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e19a:	69db      	ldr	r3, [r3, #28]
 800e19c:	4619      	mov	r1, r3
 800e19e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e1a0:	f7fe fd61 	bl	800cc66 <lfs_aligndown>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800e1aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ae:	441a      	add	r2, r3
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e1b4:	69db      	ldr	r3, [r3, #28]
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	4610      	mov	r0, r2
 800e1ba:	f7fe fd69 	bl	800cc90 <lfs_alignup>
 800e1be:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e1c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	f7fe fd3c 	bl	800cc46 <lfs_min>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800e1d8:	683a      	ldr	r2, [r7, #0]
 800e1da:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800e1dc:	6839      	ldr	r1, [r7, #0]
 800e1de:	6889      	ldr	r1, [r1, #8]
 800e1e0:	9102      	str	r1, [sp, #8]
 800e1e2:	9201      	str	r2, [sp, #4]
 800e1e4:	9300      	str	r3, [sp, #0]
 800e1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1ea:	68b9      	ldr	r1, [r7, #8]
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f7ff fe23 	bl	800de38 <lfs_dir_getslice>
 800e1f2:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	da01      	bge.n	800e1fe <lfs_dir_getread+0x1a4>
            return err;
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	e004      	b.n	800e208 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800e1fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e200:	2b00      	cmp	r3, #0
 800e202:	f47f af3f 	bne.w	800e084 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800e206:	2300      	movs	r3, #0
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3720      	adds	r7, #32
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800e210:	b590      	push	{r4, r7, lr}
 800e212:	b087      	sub	sp, #28
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800e226:	2b00      	cmp	r3, #0
 800e228:	d001      	beq.n	800e22e <lfs_dir_traverse_filter+0x1e>
 800e22a:	4b24      	ldr	r3, [pc, #144]	@ (800e2bc <lfs_dir_traverse_filter+0xac>)
 800e22c:	e000      	b.n	800e230 <lfs_dir_traverse_filter+0x20>
 800e22e:	4b24      	ldr	r3, [pc, #144]	@ (800e2c0 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800e230:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	405a      	eors	r2, r3
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	4013      	ands	r3, r2
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d014      	beq.n	800e26c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4618      	mov	r0, r3
 800e248:	f7ff fa13 	bl	800d672 <lfs_tag_isdelete>
 800e24c:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d10c      	bne.n	800e26c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	4a19      	ldr	r2, [pc, #100]	@ (800e2bc <lfs_dir_traverse_filter+0xac>)
 800e256:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	6819      	ldr	r1, [r3, #0]
 800e25c:	4b19      	ldr	r3, [pc, #100]	@ (800e2c4 <lfs_dir_traverse_filter+0xb4>)
 800e25e:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800e260:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800e264:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800e268:	429a      	cmp	r2, r3
 800e26a:	d104      	bne.n	800e276 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	2200      	movs	r2, #0
 800e270:	601a      	str	r2, [r3, #0]
        return true;
 800e272:	2301      	movs	r3, #1
 800e274:	e01e      	b.n	800e2b4 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800e276:	68b8      	ldr	r0, [r7, #8]
 800e278:	f7ff fa0e 	bl	800d698 <lfs_tag_type1>
 800e27c:	4603      	mov	r3, r0
 800e27e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e282:	d116      	bne.n	800e2b2 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800e284:	68b8      	ldr	r0, [r7, #8]
 800e286:	f7ff fa51 	bl	800d72c <lfs_tag_id>
 800e28a:	4603      	mov	r3, r0
 800e28c:	461c      	mov	r4, r3
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4618      	mov	r0, r3
 800e294:	f7ff fa4a 	bl	800d72c <lfs_tag_id>
 800e298:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800e29a:	429c      	cmp	r4, r3
 800e29c:	d809      	bhi.n	800e2b2 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800e29e:	68b8      	ldr	r0, [r7, #8]
 800e2a0:	f7ff fa37 	bl	800d712 <lfs_tag_splice>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	029a      	lsls	r2, r3, #10
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	441a      	add	r2, r3
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	601a      	str	r2, [r3, #0]
    }

    return false;
 800e2b2:	2300      	movs	r3, #0
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	371c      	adds	r7, #28
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd90      	pop	{r4, r7, pc}
 800e2bc:	7ffffc00 	.word	0x7ffffc00
 800e2c0:	700ffc00 	.word	0x700ffc00
 800e2c4:	000ffc00 	.word	0x000ffc00

0800e2c8 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800e2c8:	b590      	push	{r4, r7, lr}
 800e2ca:	b0c1      	sub	sp, #260	@ 0x104
 800e2cc:	af04      	add	r7, sp, #16
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	607a      	str	r2, [r7, #4]
 800e2d4:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 800e2dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	601a      	str	r2, [r3, #0]
 800e2e4:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 800e2e6:	6838      	ldr	r0, [r7, #0]
 800e2e8:	f7ff fa3d 	bl	800d766 <lfs_tag_dsize>
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	441a      	add	r2, r3
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	68db      	ldr	r3, [r3, #12]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d237      	bcs.n	800e36a <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 800e2fa:	6838      	ldr	r0, [r7, #0]
 800e2fc:	f7ff fa33 	bl	800d766 <lfs_tag_dsize>
 800e300:	4602      	mov	r2, r0
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	4413      	add	r3, r2
 800e306:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 800e308:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 800e30e:	2204      	movs	r2, #4
 800e310:	9203      	str	r2, [sp, #12]
 800e312:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800e316:	9202      	str	r2, [sp, #8]
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	9201      	str	r2, [sp, #4]
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	2304      	movs	r3, #4
 800e320:	460a      	mov	r2, r1
 800e322:	2100      	movs	r1, #0
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	f7fe fd69 	bl	800cdfc <lfs_bd_read>
 800e32a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 800e32e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e332:	2b00      	cmp	r3, #0
 800e334:	d002      	beq.n	800e33c <lfs_dir_traverse+0x74>
                    return err;
 800e336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e33a:	e3a5      	b.n	800ea88 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800e33c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fe fd08 	bl	800cd54 <lfs_frombe32>
 800e344:	4602      	mov	r2, r0
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	4053      	eors	r3, r2
 800e34a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e34e:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	3304      	adds	r3, #4
 800e35a:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 800e35c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e360:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 800e364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e366:	603b      	str	r3, [r7, #0]
 800e368:	e01b      	b.n	800e3a2 <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 800e36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e36e:	2b00      	cmp	r3, #0
 800e370:	dd13      	ble.n	800e39a <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800e372:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 800e37a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 800e384:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e388:	3308      	adds	r3, #8
 800e38a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 800e38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e392:	3b01      	subs	r3, #1
 800e394:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e398:	e003      	b.n	800e3a2 <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800e39a:	2300      	movs	r3, #0
 800e39c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 800e3a0:	e2a1      	b.n	800e8e6 <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800e3a2:	4b7e      	ldr	r3, [pc, #504]	@ (800e59c <lfs_dir_traverse+0x2d4>)
 800e3a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800e3a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e3aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e3ae:	405a      	eors	r2, r3
 800e3b0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800e3b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800e3b8:	400b      	ands	r3, r1
 800e3ba:	4013      	ands	r3, r2
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f040 8284 	bne.w	800e8ca <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800e3c2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800e3c6:	f7ff f9b1 	bl	800d72c <lfs_tag_id>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 80ef 	beq.w	800e5b0 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800e3d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e3d6:	2b02      	cmp	r3, #2
 800e3d8:	d906      	bls.n	800e3e8 <lfs_dir_traverse+0x120>
 800e3da:	4b71      	ldr	r3, [pc, #452]	@ (800e5a0 <lfs_dir_traverse+0x2d8>)
 800e3dc:	4a71      	ldr	r2, [pc, #452]	@ (800e5a4 <lfs_dir_traverse+0x2dc>)
 800e3de:	f240 31b6 	movw	r1, #950	@ 0x3b6
 800e3e2:	4871      	ldr	r0, [pc, #452]	@ (800e5a8 <lfs_dir_traverse+0x2e0>)
 800e3e4:	f014 fde0 	bl	8022fa8 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 800e3e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e3ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e3ee:	4613      	mov	r3, r2
 800e3f0:	011b      	lsls	r3, r3, #4
 800e3f2:	1a9b      	subs	r3, r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	33f0      	adds	r3, #240	@ 0xf0
 800e3f8:	443b      	add	r3, r7
 800e3fa:	3b98      	subs	r3, #152	@ 0x98
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	601a      	str	r2, [r3, #0]
 800e400:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e404:	4613      	mov	r3, r2
 800e406:	011b      	lsls	r3, r3, #4
 800e408:	1a9b      	subs	r3, r3, r2
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	33f0      	adds	r3, #240	@ 0xf0
 800e40e:	443b      	add	r3, r7
 800e410:	3b94      	subs	r3, #148	@ 0x94
 800e412:	687a      	ldr	r2, [r7, #4]
 800e414:	601a      	str	r2, [r3, #0]
 800e416:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e41a:	4613      	mov	r3, r2
 800e41c:	011b      	lsls	r3, r3, #4
 800e41e:	1a9b      	subs	r3, r3, r2
 800e420:	009b      	lsls	r3, r3, #2
 800e422:	33f0      	adds	r3, #240	@ 0xf0
 800e424:	443b      	add	r3, r7
 800e426:	3b90      	subs	r3, #144	@ 0x90
 800e428:	683a      	ldr	r2, [r7, #0]
 800e42a:	601a      	str	r2, [r3, #0]
 800e42c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e430:	4613      	mov	r3, r2
 800e432:	011b      	lsls	r3, r3, #4
 800e434:	1a9b      	subs	r3, r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	33f0      	adds	r3, #240	@ 0xf0
 800e43a:	443b      	add	r3, r7
 800e43c:	3b8c      	subs	r3, #140	@ 0x8c
 800e43e:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e448:	4613      	mov	r3, r2
 800e44a:	011b      	lsls	r3, r3, #4
 800e44c:	1a9b      	subs	r3, r3, r2
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	33f0      	adds	r3, #240	@ 0xf0
 800e452:	443b      	add	r3, r7
 800e454:	3b88      	subs	r3, #136	@ 0x88
 800e456:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800e45a:	601a      	str	r2, [r3, #0]
 800e45c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e460:	4613      	mov	r3, r2
 800e462:	011b      	lsls	r3, r3, #4
 800e464:	1a9b      	subs	r3, r3, r2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	33f0      	adds	r3, #240	@ 0xf0
 800e46a:	443b      	add	r3, r7
 800e46c:	3b84      	subs	r3, #132	@ 0x84
 800e46e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800e472:	601a      	str	r2, [r3, #0]
 800e474:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e478:	4613      	mov	r3, r2
 800e47a:	011b      	lsls	r3, r3, #4
 800e47c:	1a9b      	subs	r3, r3, r2
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	33f0      	adds	r3, #240	@ 0xf0
 800e482:	443b      	add	r3, r7
 800e484:	3b80      	subs	r3, #128	@ 0x80
 800e486:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800e48a:	601a      	str	r2, [r3, #0]
 800e48c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e490:	4613      	mov	r3, r2
 800e492:	011b      	lsls	r3, r3, #4
 800e494:	1a9b      	subs	r3, r3, r2
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	33f0      	adds	r3, #240	@ 0xf0
 800e49a:	443b      	add	r3, r7
 800e49c:	3b7c      	subs	r3, #124	@ 0x7c
 800e49e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800e4a2:	801a      	strh	r2, [r3, #0]
 800e4a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	011b      	lsls	r3, r3, #4
 800e4ac:	1a9b      	subs	r3, r3, r2
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	33f0      	adds	r3, #240	@ 0xf0
 800e4b2:	443b      	add	r3, r7
 800e4b4:	3b7a      	subs	r3, #122	@ 0x7a
 800e4b6:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800e4ba:	801a      	strh	r2, [r3, #0]
 800e4bc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e4c0:	4613      	mov	r3, r2
 800e4c2:	011b      	lsls	r3, r3, #4
 800e4c4:	1a9b      	subs	r3, r3, r2
 800e4c6:	009b      	lsls	r3, r3, #2
 800e4c8:	33f0      	adds	r3, #240	@ 0xf0
 800e4ca:	443b      	add	r3, r7
 800e4cc:	3b78      	subs	r3, #120	@ 0x78
 800e4ce:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800e4d2:	801a      	strh	r2, [r3, #0]
 800e4d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e4d8:	4613      	mov	r3, r2
 800e4da:	011b      	lsls	r3, r3, #4
 800e4dc:	1a9b      	subs	r3, r3, r2
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	33f0      	adds	r3, #240	@ 0xf0
 800e4e2:	443b      	add	r3, r7
 800e4e4:	3b74      	subs	r3, #116	@ 0x74
 800e4e6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e4ea:	601a      	str	r2, [r3, #0]
 800e4ec:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e4f0:	4613      	mov	r3, r2
 800e4f2:	011b      	lsls	r3, r3, #4
 800e4f4:	1a9b      	subs	r3, r3, r2
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	33f0      	adds	r3, #240	@ 0xf0
 800e4fa:	443b      	add	r3, r7
 800e4fc:	3b70      	subs	r3, #112	@ 0x70
 800e4fe:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e502:	601a      	str	r2, [r3, #0]
 800e504:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e508:	4613      	mov	r3, r2
 800e50a:	011b      	lsls	r3, r3, #4
 800e50c:	1a9b      	subs	r3, r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	33f0      	adds	r3, #240	@ 0xf0
 800e512:	443b      	add	r3, r7
 800e514:	3b6c      	subs	r3, #108	@ 0x6c
 800e516:	6019      	str	r1, [r3, #0]
 800e518:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e51c:	4613      	mov	r3, r2
 800e51e:	011b      	lsls	r3, r3, #4
 800e520:	1a9b      	subs	r3, r3, r2
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	33f0      	adds	r3, #240	@ 0xf0
 800e526:	443b      	add	r3, r7
 800e528:	3b68      	subs	r3, #104	@ 0x68
 800e52a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e52e:	601a      	str	r2, [r3, #0]
 800e530:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e534:	4613      	mov	r3, r2
 800e536:	011b      	lsls	r3, r3, #4
 800e538:	1a9b      	subs	r3, r3, r2
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	33f0      	adds	r3, #240	@ 0xf0
 800e53e:	443b      	add	r3, r7
 800e540:	3b68      	subs	r3, #104	@ 0x68
 800e542:	3304      	adds	r3, #4
 800e544:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800e548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e54c:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800e550:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e554:	3301      	adds	r3, #1
 800e556:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 800e55a:	2300      	movs	r3, #0
 800e55c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 800e560:	2300      	movs	r3, #0
 800e562:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 800e566:	2300      	movs	r3, #0
 800e568:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 800e56c:	2300      	movs	r3, #0
 800e56e:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 800e572:	2300      	movs	r3, #0
 800e574:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 800e578:	4b0c      	ldr	r3, [pc, #48]	@ (800e5ac <lfs_dir_traverse+0x2e4>)
 800e57a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 800e57e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e582:	1e5a      	subs	r2, r3, #1
 800e584:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800e588:	4613      	mov	r3, r2
 800e58a:	011b      	lsls	r3, r3, #4
 800e58c:	1a9b      	subs	r3, r3, r2
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	3328      	adds	r3, #40	@ 0x28
 800e592:	440b      	add	r3, r1
 800e594:	3304      	adds	r3, #4
 800e596:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 800e59a:	e19d      	b.n	800e8d8 <lfs_dir_traverse+0x610>
 800e59c:	7ff00000 	.word	0x7ff00000
 800e5a0:	080305b0 	.word	0x080305b0
 800e5a4:	08033c4c 	.word	0x08033c4c
 800e5a8:	08030484 	.word	0x08030484
 800e5ac:	0800e211 	.word	0x0800e211
            }
        }

popped:
 800e5b0:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800e5b2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800e5b6:	f7ff f8b9 	bl	800d72c <lfs_tag_id>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d015      	beq.n	800e5ec <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800e5c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7ff f8b2 	bl	800d72c <lfs_tag_id>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800e5cc:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	f200 817c 	bhi.w	800e8ce <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800e5d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7ff f8a7 	bl	800d72c <lfs_tag_id>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	f240 8171 	bls.w	800e8ce <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800e5ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7ff f872 	bl	800d6d8 <lfs_tag_type3>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f43f ae75 	beq.w	800e2e6 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800e5fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7ff f86a 	bl	800d6d8 <lfs_tag_type3>
 800e604:	4603      	mov	r3, r0
 800e606:	461a      	mov	r2, r3
 800e608:	f240 1301 	movw	r3, #257	@ 0x101
 800e60c:	429a      	cmp	r2, r3
 800e60e:	f040 80e0 	bne.w	800e7d2 <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800e612:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e616:	4ab1      	ldr	r2, [pc, #708]	@ (800e8dc <lfs_dir_traverse+0x614>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	f000 815a 	beq.w	800e8d2 <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800e61e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e622:	4613      	mov	r3, r2
 800e624:	011b      	lsls	r3, r3, #4
 800e626:	1a9b      	subs	r3, r3, r2
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	33f0      	adds	r3, #240	@ 0xf0
 800e62c:	443b      	add	r3, r7
 800e62e:	3b98      	subs	r3, #152	@ 0x98
 800e630:	4618      	mov	r0, r3
 800e632:	233c      	movs	r3, #60	@ 0x3c
 800e634:	461a      	mov	r2, r3
 800e636:	2100      	movs	r1, #0
 800e638:	f017 fa0a 	bl	8025a50 <memset>
 800e63c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e640:	4613      	mov	r3, r2
 800e642:	011b      	lsls	r3, r3, #4
 800e644:	1a9b      	subs	r3, r3, r2
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	33f0      	adds	r3, #240	@ 0xf0
 800e64a:	443b      	add	r3, r7
 800e64c:	3b98      	subs	r3, #152	@ 0x98
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	601a      	str	r2, [r3, #0]
 800e652:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e656:	4613      	mov	r3, r2
 800e658:	011b      	lsls	r3, r3, #4
 800e65a:	1a9b      	subs	r3, r3, r2
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	33f0      	adds	r3, #240	@ 0xf0
 800e660:	443b      	add	r3, r7
 800e662:	3b94      	subs	r3, #148	@ 0x94
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	601a      	str	r2, [r3, #0]
 800e668:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e66c:	4613      	mov	r3, r2
 800e66e:	011b      	lsls	r3, r3, #4
 800e670:	1a9b      	subs	r3, r3, r2
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	33f0      	adds	r3, #240	@ 0xf0
 800e676:	443b      	add	r3, r7
 800e678:	3b90      	subs	r3, #144	@ 0x90
 800e67a:	683a      	ldr	r2, [r7, #0]
 800e67c:	601a      	str	r2, [r3, #0]
 800e67e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e682:	4613      	mov	r3, r2
 800e684:	011b      	lsls	r3, r3, #4
 800e686:	1a9b      	subs	r3, r3, r2
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	33f0      	adds	r3, #240	@ 0xf0
 800e68c:	443b      	add	r3, r7
 800e68e:	3b8c      	subs	r3, #140	@ 0x8c
 800e690:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800e694:	601a      	str	r2, [r3, #0]
 800e696:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e69a:	4613      	mov	r3, r2
 800e69c:	011b      	lsls	r3, r3, #4
 800e69e:	1a9b      	subs	r3, r3, r2
 800e6a0:	009b      	lsls	r3, r3, #2
 800e6a2:	33f0      	adds	r3, #240	@ 0xf0
 800e6a4:	443b      	add	r3, r7
 800e6a6:	3b88      	subs	r3, #136	@ 0x88
 800e6a8:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800e6ac:	601a      	str	r2, [r3, #0]
 800e6ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e6b2:	4613      	mov	r3, r2
 800e6b4:	011b      	lsls	r3, r3, #4
 800e6b6:	1a9b      	subs	r3, r3, r2
 800e6b8:	009b      	lsls	r3, r3, #2
 800e6ba:	33f0      	adds	r3, #240	@ 0xf0
 800e6bc:	443b      	add	r3, r7
 800e6be:	3b84      	subs	r3, #132	@ 0x84
 800e6c0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800e6c4:	601a      	str	r2, [r3, #0]
 800e6c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	011b      	lsls	r3, r3, #4
 800e6ce:	1a9b      	subs	r3, r3, r2
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	33f0      	adds	r3, #240	@ 0xf0
 800e6d4:	443b      	add	r3, r7
 800e6d6:	3b80      	subs	r3, #128	@ 0x80
 800e6d8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800e6dc:	601a      	str	r2, [r3, #0]
 800e6de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	011b      	lsls	r3, r3, #4
 800e6e6:	1a9b      	subs	r3, r3, r2
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	33f0      	adds	r3, #240	@ 0xf0
 800e6ec:	443b      	add	r3, r7
 800e6ee:	3b7c      	subs	r3, #124	@ 0x7c
 800e6f0:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800e6f4:	801a      	strh	r2, [r3, #0]
 800e6f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e6fa:	4613      	mov	r3, r2
 800e6fc:	011b      	lsls	r3, r3, #4
 800e6fe:	1a9b      	subs	r3, r3, r2
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	33f0      	adds	r3, #240	@ 0xf0
 800e704:	443b      	add	r3, r7
 800e706:	3b7a      	subs	r3, #122	@ 0x7a
 800e708:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800e70c:	801a      	strh	r2, [r3, #0]
 800e70e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e712:	4613      	mov	r3, r2
 800e714:	011b      	lsls	r3, r3, #4
 800e716:	1a9b      	subs	r3, r3, r2
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	33f0      	adds	r3, #240	@ 0xf0
 800e71c:	443b      	add	r3, r7
 800e71e:	3b78      	subs	r3, #120	@ 0x78
 800e720:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800e724:	801a      	strh	r2, [r3, #0]
 800e726:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e72a:	4613      	mov	r3, r2
 800e72c:	011b      	lsls	r3, r3, #4
 800e72e:	1a9b      	subs	r3, r3, r2
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	33f0      	adds	r3, #240	@ 0xf0
 800e734:	443b      	add	r3, r7
 800e736:	3b74      	subs	r3, #116	@ 0x74
 800e738:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e73c:	601a      	str	r2, [r3, #0]
 800e73e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e742:	4613      	mov	r3, r2
 800e744:	011b      	lsls	r3, r3, #4
 800e746:	1a9b      	subs	r3, r3, r2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	33f0      	adds	r3, #240	@ 0xf0
 800e74c:	443b      	add	r3, r7
 800e74e:	3b70      	subs	r3, #112	@ 0x70
 800e750:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e754:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800e756:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e75a:	3301      	adds	r3, #1
 800e75c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 800e760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e762:	4618      	mov	r0, r3
 800e764:	f7fe fff2 	bl	800d74c <lfs_tag_size>
 800e768:	4603      	mov	r3, r0
 800e76a:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 800e76e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e770:	4618      	mov	r0, r3
 800e772:	f7fe ffdb 	bl	800d72c <lfs_tag_id>
 800e776:	4603      	mov	r3, r0
 800e778:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 800e77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e780:	60bb      	str	r3, [r7, #8]
            off = 0;
 800e782:	2300      	movs	r3, #0
 800e784:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800e786:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e78a:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800e78c:	2300      	movs	r3, #0
 800e78e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 800e792:	2300      	movs	r3, #0
 800e794:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800e798:	4b51      	ldr	r3, [pc, #324]	@ (800e8e0 <lfs_dir_traverse+0x618>)
 800e79a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800e79e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800e7a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 800e7a6:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800e7aa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 800e7ae:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 800e7b8:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 800e7bc:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800e7c0:	1ad3      	subs	r3, r2, r3
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800e7c8:	4413      	add	r3, r2
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 800e7d0:	e589      	b.n	800e2e6 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800e7d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fe ff7f 	bl	800d6d8 <lfs_tag_type3>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800e7e0:	d159      	bne.n	800e896 <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e7e8:	e04b      	b.n	800e882 <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 800e7ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800e7f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	005b      	lsls	r3, r3, #1
 800e7fa:	4413      	add	r3, r2
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	461a      	mov	r2, r3
 800e800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e804:	4413      	add	r3, r2
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800e80c:	051c      	lsls	r4, r3, #20
 800e80e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e810:	4618      	mov	r0, r3
 800e812:	f7fe ff8b 	bl	800d72c <lfs_tag_id>
 800e816:	4603      	mov	r3, r0
 800e818:	461a      	mov	r2, r3
 800e81a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800e81e:	4413      	add	r3, r2
 800e820:	029b      	lsls	r3, r3, #10
 800e822:	ea44 0103 	orr.w	r1, r4, r3
 800e826:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e82a:	4613      	mov	r3, r2
 800e82c:	005b      	lsls	r3, r3, #1
 800e82e:	4413      	add	r3, r2
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	461a      	mov	r2, r3
 800e834:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e838:	4413      	add	r3, r2
 800e83a:	689b      	ldr	r3, [r3, #8]
 800e83c:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800e83e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e842:	4613      	mov	r3, r2
 800e844:	005b      	lsls	r3, r3, #1
 800e846:	4413      	add	r3, r2
 800e848:	009b      	lsls	r3, r3, #2
 800e84a:	461a      	mov	r2, r3
 800e84c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e850:	4413      	add	r3, r2
 800e852:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800e854:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e858:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800e85c:	4798      	blx	r3
 800e85e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 800e862:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e866:	2b00      	cmp	r3, #0
 800e868:	da02      	bge.n	800e870 <lfs_dir_traverse+0x5a8>
                    return res;
 800e86a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e86e:	e10b      	b.n	800ea88 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 800e870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e874:	2b00      	cmp	r3, #0
 800e876:	d12e      	bne.n	800e8d6 <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800e878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e87c:	3301      	adds	r3, #1
 800e87e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e884:	4618      	mov	r0, r3
 800e886:	f7fe ff61 	bl	800d74c <lfs_tag_size>
 800e88a:	4602      	mov	r2, r0
 800e88c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e890:	4293      	cmp	r3, r2
 800e892:	d3aa      	bcc.n	800e7ea <lfs_dir_traverse+0x522>
 800e894:	e527      	b.n	800e2e6 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800e896:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800e89a:	029a      	lsls	r2, r3, #10
 800e89c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e89e:	18d1      	adds	r1, r2, r3
 800e8a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e8a4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e8a8:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800e8ac:	4798      	blx	r3
 800e8ae:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 800e8b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	da02      	bge.n	800e8c0 <lfs_dir_traverse+0x5f8>
                return res;
 800e8ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e8be:	e0e3      	b.n	800ea88 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 800e8c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d10d      	bne.n	800e8e4 <lfs_dir_traverse+0x61c>
 800e8c8:	e50d      	b.n	800e2e6 <lfs_dir_traverse+0x1e>
                continue;
 800e8ca:	bf00      	nop
 800e8cc:	e50b      	b.n	800e2e6 <lfs_dir_traverse+0x1e>
            continue;
 800e8ce:	bf00      	nop
 800e8d0:	e509      	b.n	800e2e6 <lfs_dir_traverse+0x1e>
                continue;
 800e8d2:	bf00      	nop
 800e8d4:	e507      	b.n	800e2e6 <lfs_dir_traverse+0x1e>
                    break;
 800e8d6:	bf00      	nop
        {
 800e8d8:	e505      	b.n	800e2e6 <lfs_dir_traverse+0x1e>
 800e8da:	bf00      	nop
 800e8dc:	0800e211 	.word	0x0800e211
 800e8e0:	600ffc00 	.word	0x600ffc00
                break;
 800e8e4:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800e8e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	f000 80ca 	beq.w	800ea84 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 800e8f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e8f4:	1e5a      	subs	r2, r3, #1
 800e8f6:	4613      	mov	r3, r2
 800e8f8:	011b      	lsls	r3, r3, #4
 800e8fa:	1a9b      	subs	r3, r3, r2
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	33f0      	adds	r3, #240	@ 0xf0
 800e900:	443b      	add	r3, r7
 800e902:	3b98      	subs	r3, #152	@ 0x98
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800e908:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e90c:	1e5a      	subs	r2, r3, #1
 800e90e:	4613      	mov	r3, r2
 800e910:	011b      	lsls	r3, r3, #4
 800e912:	1a9b      	subs	r3, r3, r2
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	33f0      	adds	r3, #240	@ 0xf0
 800e918:	443b      	add	r3, r7
 800e91a:	3b94      	subs	r3, #148	@ 0x94
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 800e920:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e924:	1e5a      	subs	r2, r3, #1
 800e926:	4613      	mov	r3, r2
 800e928:	011b      	lsls	r3, r3, #4
 800e92a:	1a9b      	subs	r3, r3, r2
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	33f0      	adds	r3, #240	@ 0xf0
 800e930:	443b      	add	r3, r7
 800e932:	3b90      	subs	r3, #144	@ 0x90
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 800e938:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e93c:	1e5a      	subs	r2, r3, #1
 800e93e:	4613      	mov	r3, r2
 800e940:	011b      	lsls	r3, r3, #4
 800e942:	1a9b      	subs	r3, r3, r2
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	33f0      	adds	r3, #240	@ 0xf0
 800e948:	443b      	add	r3, r7
 800e94a:	3b8c      	subs	r3, #140	@ 0x8c
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 800e952:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e956:	1e5a      	subs	r2, r3, #1
 800e958:	4613      	mov	r3, r2
 800e95a:	011b      	lsls	r3, r3, #4
 800e95c:	1a9b      	subs	r3, r3, r2
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	33f0      	adds	r3, #240	@ 0xf0
 800e962:	443b      	add	r3, r7
 800e964:	3b88      	subs	r3, #136	@ 0x88
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 800e96c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e970:	1e5a      	subs	r2, r3, #1
 800e972:	4613      	mov	r3, r2
 800e974:	011b      	lsls	r3, r3, #4
 800e976:	1a9b      	subs	r3, r3, r2
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	33f0      	adds	r3, #240	@ 0xf0
 800e97c:	443b      	add	r3, r7
 800e97e:	3b84      	subs	r3, #132	@ 0x84
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 800e986:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e98a:	1e5a      	subs	r2, r3, #1
 800e98c:	4613      	mov	r3, r2
 800e98e:	011b      	lsls	r3, r3, #4
 800e990:	1a9b      	subs	r3, r3, r2
 800e992:	009b      	lsls	r3, r3, #2
 800e994:	33f0      	adds	r3, #240	@ 0xf0
 800e996:	443b      	add	r3, r7
 800e998:	3b80      	subs	r3, #128	@ 0x80
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 800e9a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e9a4:	1e5a      	subs	r2, r3, #1
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	011b      	lsls	r3, r3, #4
 800e9aa:	1a9b      	subs	r3, r3, r2
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	33f0      	adds	r3, #240	@ 0xf0
 800e9b0:	443b      	add	r3, r7
 800e9b2:	3b7c      	subs	r3, #124	@ 0x7c
 800e9b4:	881b      	ldrh	r3, [r3, #0]
 800e9b6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 800e9ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e9be:	1e5a      	subs	r2, r3, #1
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	011b      	lsls	r3, r3, #4
 800e9c4:	1a9b      	subs	r3, r3, r2
 800e9c6:	009b      	lsls	r3, r3, #2
 800e9c8:	33f0      	adds	r3, #240	@ 0xf0
 800e9ca:	443b      	add	r3, r7
 800e9cc:	3b7a      	subs	r3, #122	@ 0x7a
 800e9ce:	881b      	ldrh	r3, [r3, #0]
 800e9d0:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 800e9d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e9d8:	1e5a      	subs	r2, r3, #1
 800e9da:	4613      	mov	r3, r2
 800e9dc:	011b      	lsls	r3, r3, #4
 800e9de:	1a9b      	subs	r3, r3, r2
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	33f0      	adds	r3, #240	@ 0xf0
 800e9e4:	443b      	add	r3, r7
 800e9e6:	3b78      	subs	r3, #120	@ 0x78
 800e9e8:	881b      	ldrh	r3, [r3, #0]
 800e9ea:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 800e9ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e9f2:	1e5a      	subs	r2, r3, #1
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	011b      	lsls	r3, r3, #4
 800e9f8:	1a9b      	subs	r3, r3, r2
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	33f0      	adds	r3, #240	@ 0xf0
 800e9fe:	443b      	add	r3, r7
 800ea00:	3b74      	subs	r3, #116	@ 0x74
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 800ea08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ea0c:	1e5a      	subs	r2, r3, #1
 800ea0e:	4613      	mov	r3, r2
 800ea10:	011b      	lsls	r3, r3, #4
 800ea12:	1a9b      	subs	r3, r3, r2
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	33f0      	adds	r3, #240	@ 0xf0
 800ea18:	443b      	add	r3, r7
 800ea1a:	3b70      	subs	r3, #112	@ 0x70
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 800ea22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ea26:	1e5a      	subs	r2, r3, #1
 800ea28:	4613      	mov	r3, r2
 800ea2a:	011b      	lsls	r3, r3, #4
 800ea2c:	1a9b      	subs	r3, r3, r2
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	33f0      	adds	r3, #240	@ 0xf0
 800ea32:	443b      	add	r3, r7
 800ea34:	3b6c      	subs	r3, #108	@ 0x6c
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 800ea3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ea3e:	1e5a      	subs	r2, r3, #1
 800ea40:	4613      	mov	r3, r2
 800ea42:	011b      	lsls	r3, r3, #4
 800ea44:	1a9b      	subs	r3, r3, r2
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	33f0      	adds	r3, #240	@ 0xf0
 800ea4a:	443b      	add	r3, r7
 800ea4c:	3b68      	subs	r3, #104	@ 0x68
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 800ea54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ea58:	1e5a      	subs	r2, r3, #1
 800ea5a:	4613      	mov	r3, r2
 800ea5c:	011b      	lsls	r3, r3, #4
 800ea5e:	1a9b      	subs	r3, r3, r2
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	33f0      	adds	r3, #240	@ 0xf0
 800ea64:	443b      	add	r3, r7
 800ea66:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 800ea6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ea6e:	3204      	adds	r2, #4
 800ea70:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea74:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800ea78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ea7c:	3b01      	subs	r3, #1
 800ea7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 800ea82:	e596      	b.n	800e5b2 <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 800ea84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	37f4      	adds	r7, #244	@ 0xf4
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd90      	pop	{r4, r7, pc}

0800ea90 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800ea90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea92:	b0a5      	sub	sp, #148	@ 0x94
 800ea94:	af04      	add	r7, sp, #16
 800ea96:	6178      	str	r0, [r7, #20]
 800ea98:	6139      	str	r1, [r7, #16]
 800ea9a:	60fa      	str	r2, [r7, #12]
 800ea9c:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800ea9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eaa2:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d00f      	beq.n	800eacc <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d206      	bcs.n	800eac6 <lfs_dir_fetchmatch+0x36>
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	3304      	adds	r3, #4
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d302      	bcc.n	800eacc <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800eac6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800eaca:	e3a4      	b.n	800f216 <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800eacc:	2300      	movs	r3, #0
 800eace:	647b      	str	r3, [r7, #68]	@ 0x44
 800ead0:	2300      	movs	r3, #0
 800ead2:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 800ead4:	2300      	movs	r3, #0
 800ead6:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800ead8:	2300      	movs	r3, #0
 800eada:	677b      	str	r3, [r7, #116]	@ 0x74
 800eadc:	e05a      	b.n	800eb94 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 800eade:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800eae0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eae2:	009b      	lsls	r3, r3, #2
 800eae4:	68fa      	ldr	r2, [r7, #12]
 800eae6:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800eae8:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800eaea:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800eaee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800eaf0:	0092      	lsls	r2, r2, #2
 800eaf2:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800eaf4:	2104      	movs	r1, #4
 800eaf6:	9103      	str	r1, [sp, #12]
 800eaf8:	9202      	str	r2, [sp, #8]
 800eafa:	2200      	movs	r2, #0
 800eafc:	9201      	str	r2, [sp, #4]
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	2304      	movs	r3, #4
 800eb02:	4602      	mov	r2, r0
 800eb04:	2100      	movs	r1, #0
 800eb06:	6978      	ldr	r0, [r7, #20]
 800eb08:	f7fe f978 	bl	800cdfc <lfs_bd_read>
 800eb0c:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 800eb0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	3378      	adds	r3, #120	@ 0x78
 800eb14:	f107 0208 	add.w	r2, r7, #8
 800eb18:	4413      	add	r3, r2
 800eb1a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7fe f901 	bl	800cd26 <lfs_fromle32>
 800eb24:	4602      	mov	r2, r0
 800eb26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	3378      	adds	r3, #120	@ 0x78
 800eb2c:	f107 0108 	add.w	r1, r7, #8
 800eb30:	440b      	add	r3, r1
 800eb32:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800eb36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d005      	beq.n	800eb48 <lfs_dir_fetchmatch+0xb8>
 800eb3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb3e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800eb42:	d001      	beq.n	800eb48 <lfs_dir_fetchmatch+0xb8>
            return err;
 800eb44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb46:	e366      	b.n	800f216 <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 800eb48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb4a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800eb4e:	d01e      	beq.n	800eb8e <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800eb50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb52:	009b      	lsls	r3, r3, #2
 800eb54:	3378      	adds	r3, #120	@ 0x78
 800eb56:	f107 0208 	add.w	r2, r7, #8
 800eb5a:	4413      	add	r3, r2
 800eb5c:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800eb60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb62:	3301      	adds	r3, #1
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	f003 0301 	and.w	r3, r3, #1
 800eb6a:	bfb8      	it	lt
 800eb6c:	425b      	neglt	r3, r3
 800eb6e:	009b      	lsls	r3, r3, #2
 800eb70:	3378      	adds	r3, #120	@ 0x78
 800eb72:	f107 0108 	add.w	r1, r7, #8
 800eb76:	440b      	add	r3, r1
 800eb78:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	4610      	mov	r0, r2
 800eb80:	f7fe f8c3 	bl	800cd0a <lfs_scmp>
 800eb84:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	dd01      	ble.n	800eb8e <lfs_dir_fetchmatch+0xfe>
            r = i;
 800eb8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb8c:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800eb8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb90:	3301      	adds	r3, #1
 800eb92:	677b      	str	r3, [r7, #116]	@ 0x74
 800eb94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	dda1      	ble.n	800eade <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800eb9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	f003 0301 	and.w	r3, r3, #1
 800eba2:	bfb8      	it	lt
 800eba4:	425b      	neglt	r3, r3
 800eba6:	009b      	lsls	r3, r3, #2
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	4413      	add	r3, r2
 800ebac:	681a      	ldr	r2, [r3, #0]
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800ebb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	f003 0301 	and.w	r3, r3, #1
 800ebbc:	bfb8      	it	lt
 800ebbe:	425b      	neglt	r3, r3
 800ebc0:	009b      	lsls	r3, r3, #2
 800ebc2:	68fa      	ldr	r2, [r7, #12]
 800ebc4:	4413      	add	r3, r2
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800ebcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f003 0301 	and.w	r3, r3, #1
 800ebd4:	bfb8      	it	lt
 800ebd6:	425b      	neglt	r3, r3
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	3378      	adds	r3, #120	@ 0x78
 800ebdc:	f107 0208 	add.w	r2, r7, #8
 800ebe0:	4413      	add	r3, r2
 800ebe2:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	2200      	movs	r2, #0
 800ebee:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	673b      	str	r3, [r7, #112]	@ 0x70
 800ebf4:	e2fb      	b.n	800f1ee <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 800ebfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ebfe:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 800ec00:	2300      	movs	r3, #0
 800ec02:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800ec06:	4aa9      	ldr	r2, [pc, #676]	@ (800eeac <lfs_dir_fetchmatch+0x41c>)
 800ec08:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ec0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec10:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800ec14:	2300      	movs	r3, #0
 800ec16:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 800ec1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ec1c:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 800ec24:	2300      	movs	r3, #0
 800ec26:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	689b      	ldr	r3, [r3, #8]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fe f884 	bl	800cd3c <lfs_tole32>
 800ec34:	4602      	mov	r2, r0
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	3308      	adds	r3, #8
 800ec3e:	2204      	movs	r2, #4
 800ec40:	4619      	mov	r1, r3
 800ec42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec46:	f005 fef5 	bl	8014a34 <lfs_crc>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	689b      	ldr	r3, [r3, #8]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7fe f867 	bl	800cd26 <lfs_fromle32>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800ec5e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800ec60:	f7fe fd81 	bl	800d766 <lfs_tag_dsize>
 800ec64:	4602      	mov	r2, r0
 800ec66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec68:	4413      	add	r3, r2
 800ec6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 800ec6c:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ec72:	6a58      	ldr	r0, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2204      	movs	r2, #4
 800ec7a:	9203      	str	r2, [sp, #12]
 800ec7c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ec80:	9202      	str	r2, [sp, #8]
 800ec82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ec84:	9201      	str	r2, [sp, #4]
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	4603      	mov	r3, r0
 800ec8a:	460a      	mov	r2, r1
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	6978      	ldr	r0, [r7, #20]
 800ec90:	f7fe f8b4 	bl	800cdfc <lfs_bd_read>
 800ec94:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800ec96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d006      	beq.n	800ecaa <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 800ec9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec9e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800eca2:	f000 81d6 	beq.w	800f052 <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 800eca6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eca8:	e2b5      	b.n	800f216 <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecac:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ecb0:	2204      	movs	r2, #4
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f005 febe 	bl	8014a34 <lfs_crc>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 800ecbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fe f848 	bl	800cd54 <lfs_frombe32>
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ecc8:	4053      	eors	r3, r2
 800ecca:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 800eccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fe fcc1 	bl	800d656 <lfs_tag_isvalid>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	f083 0301 	eor.w	r3, r3, #1
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d00b      	beq.n	800ecf8 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 800ece0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800ece2:	f7fe fce9 	bl	800d6b8 <lfs_tag_type2>
 800ece6:	4603      	mov	r3, r0
 800ece8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800ecec:	bf0c      	ite	eq
 800ecee:	2301      	moveq	r3, #1
 800ecf0:	2300      	movne	r3, #0
 800ecf2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 800ecf6:	e1bb      	b.n	800f070 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800ecf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fe fd33 	bl	800d766 <lfs_tag_dsize>
 800ed00:	4602      	mov	r2, r0
 800ed02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed04:	441a      	add	r2, r3
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	f200 81a2 	bhi.w	800f056 <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 800ed12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed14:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 800ed16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fe fccd 	bl	800d6b8 <lfs_tag_type2>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800ed24:	d15e      	bne.n	800ede4 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800ed26:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed2c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ed34:	3204      	adds	r2, #4
 800ed36:	2104      	movs	r1, #4
 800ed38:	9103      	str	r1, [sp, #12]
 800ed3a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ed3e:	9102      	str	r1, [sp, #8]
 800ed40:	9201      	str	r2, [sp, #4]
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	4623      	mov	r3, r4
 800ed46:	4602      	mov	r2, r0
 800ed48:	2100      	movs	r1, #0
 800ed4a:	6978      	ldr	r0, [r7, #20]
 800ed4c:	f7fe f856 	bl	800cdfc <lfs_bd_read>
 800ed50:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800ed52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d006      	beq.n	800ed66 <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 800ed58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed5a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ed5e:	f000 817c 	beq.w	800f05a <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 800ed62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 800ed64:	e257      	b.n	800f216 <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 800ed66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7fd ffdc 	bl	800cd26 <lfs_fromle32>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 800ed72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed76:	429a      	cmp	r2, r3
 800ed78:	f040 8171 	bne.w	800f05e <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800ed7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7fe fcba 	bl	800d6f8 <lfs_tag_chunk>
 800ed84:	4603      	mov	r3, r0
 800ed86:	07db      	lsls	r3, r3, #31
 800ed88:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ed8a:	4053      	eors	r3, r2
 800ed8c:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed92:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800ed96:	2204      	movs	r2, #4
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f005 fe4b 	bl	8014a34 <lfs_crc>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800eda4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eda6:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 800eda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edaa:	4618      	mov	r0, r3
 800edac:	f7fe fcdb 	bl	800d766 <lfs_tag_dsize>
 800edb0:	4602      	mov	r2, r0
 800edb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800edb4:	441a      	add	r2, r3
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800edbe:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800edc6:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800edc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800edce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800edda:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 800eddc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ede0:	633b      	str	r3, [r7, #48]	@ 0x30
 800ede2:	e73c      	b.n	800ec5e <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 800ede4:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800edea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edec:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	681c      	ldr	r4, [r3, #0]
 800edf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800edf4:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 800edf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fe fcb4 	bl	800d766 <lfs_tag_dsize>
 800edfe:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 800ee00:	3b04      	subs	r3, #4
 800ee02:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ee06:	9203      	str	r2, [sp, #12]
 800ee08:	9302      	str	r3, [sp, #8]
 800ee0a:	9501      	str	r5, [sp, #4]
 800ee0c:	9400      	str	r4, [sp, #0]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	4632      	mov	r2, r6
 800ee12:	2100      	movs	r1, #0
 800ee14:	6978      	ldr	r0, [r7, #20]
 800ee16:	f7fe f98e 	bl	800d136 <lfs_bd_crc>
 800ee1a:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 800ee1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d006      	beq.n	800ee30 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 800ee22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee24:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ee28:	f000 811b 	beq.w	800f062 <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 800ee2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee2e:	e1f2      	b.n	800f216 <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800ee30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7fe fc30 	bl	800d698 <lfs_tag_type1>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d113      	bne.n	800ee66 <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800ee3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7fe fc73 	bl	800d72c <lfs_tag_id>
 800ee46:	4603      	mov	r3, r0
 800ee48:	461a      	mov	r2, r3
 800ee4a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	f200 80b6 	bhi.w	800efc0 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 800ee54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7fe fc68 	bl	800d72c <lfs_tag_id>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	3301      	adds	r3, #1
 800ee60:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800ee64:	e0ac      	b.n	800efc0 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800ee66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7fe fc15 	bl	800d698 <lfs_tag_type1>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee74:	d13a      	bne.n	800eeec <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 800ee76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7fe fc4a 	bl	800d712 <lfs_tag_splice>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800ee86:	4413      	add	r3, r2
 800ee88:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800ee8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ee8e:	4b08      	ldr	r3, [pc, #32]	@ (800eeb0 <lfs_dir_fetchmatch+0x420>)
 800ee90:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800ee92:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800ee96:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800ee9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d109      	bne.n	800eeb4 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 800eea0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eea2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eea6:	663b      	str	r3, [r7, #96]	@ 0x60
 800eea8:	e08a      	b.n	800efc0 <lfs_dir_fetchmatch+0x530>
 800eeaa:	bf00      	nop
 800eeac:	080305f0 	.word	0x080305f0
 800eeb0:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 800eeb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eeb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eeba:	f000 8081 	beq.w	800efc0 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800eebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fe fc33 	bl	800d72c <lfs_tag_id>
 800eec6:	4603      	mov	r3, r0
 800eec8:	461c      	mov	r4, r3
 800eeca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eecc:	4618      	mov	r0, r3
 800eece:	f7fe fc2d 	bl	800d72c <lfs_tag_id>
 800eed2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800eed4:	429c      	cmp	r4, r3
 800eed6:	d873      	bhi.n	800efc0 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800eed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7fe fc19 	bl	800d712 <lfs_tag_splice>
 800eee0:	4603      	mov	r3, r0
 800eee2:	029a      	lsls	r2, r3, #10
 800eee4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eee6:	4413      	add	r3, r2
 800eee8:	663b      	str	r3, [r7, #96]	@ 0x60
 800eeea:	e069      	b.n	800efc0 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800eeec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fe fbd2 	bl	800d698 <lfs_tag_type1>
 800eef4:	4603      	mov	r3, r0
 800eef6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800eefa:	d132      	bne.n	800ef62 <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800eefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fe fbfa 	bl	800d6f8 <lfs_tag_chunk>
 800ef04:	4603      	mov	r3, r0
 800ef06:	f003 0301 	and.w	r3, r3, #1
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	bf14      	ite	ne
 800ef0e:	2301      	movne	r3, #1
 800ef10:	2300      	moveq	r3, #0
 800ef12:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 800ef16:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ef1c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ef24:	3204      	adds	r2, #4
 800ef26:	2108      	movs	r1, #8
 800ef28:	9103      	str	r1, [sp, #12]
 800ef2a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800ef2e:	9102      	str	r1, [sp, #8]
 800ef30:	9201      	str	r2, [sp, #4]
 800ef32:	9300      	str	r3, [sp, #0]
 800ef34:	4623      	mov	r3, r4
 800ef36:	4602      	mov	r2, r0
 800ef38:	2100      	movs	r1, #0
 800ef3a:	6978      	ldr	r0, [r7, #20]
 800ef3c:	f7fd ff5e 	bl	800cdfc <lfs_bd_read>
 800ef40:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800ef42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d006      	beq.n	800ef56 <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 800ef48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef4a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ef4e:	f000 808a 	beq.w	800f066 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 800ef52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef54:	e15f      	b.n	800f216 <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 800ef56:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fe fb47 	bl	800d5ee <lfs_pair_fromle32>
 800ef60:	e02e      	b.n	800efc0 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 800ef62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fe fbb7 	bl	800d6d8 <lfs_tag_type3>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d124      	bne.n	800efc0 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 800ef76:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ef7c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ef84:	3204      	adds	r2, #4
 800ef86:	2108      	movs	r1, #8
 800ef88:	9103      	str	r1, [sp, #12]
 800ef8a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800ef8e:	9102      	str	r1, [sp, #8]
 800ef90:	9201      	str	r2, [sp, #4]
 800ef92:	9300      	str	r3, [sp, #0]
 800ef94:	4623      	mov	r3, r4
 800ef96:	4602      	mov	r2, r0
 800ef98:	2100      	movs	r1, #0
 800ef9a:	6978      	ldr	r0, [r7, #20]
 800ef9c:	f7fd ff2e 	bl	800cdfc <lfs_bd_read>
 800efa0:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 800efa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d003      	beq.n	800efb0 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 800efa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800efaa:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800efae:	d05c      	beq.n	800f06a <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 800efb0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7fe fcd5 	bl	800d964 <lfs_fcrc_fromle32>
                hasfcrc = true;
 800efba:	2301      	movs	r3, #1
 800efbc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800efc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800efc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800efc6:	405a      	eors	r2, r3
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	4013      	ands	r3, r2
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f47f ae46 	bne.w	800ec5e <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800efd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800efd8:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800efda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efdc:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800efde:	627b      	str	r3, [r7, #36]	@ 0x24
 800efe0:	f107 0220 	add.w	r2, r7, #32
 800efe4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800efe8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800efec:	4798      	blx	r3
 800efee:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 800eff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	da05      	bge.n	800f002 <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 800eff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eff8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800effc:	d037      	beq.n	800f06e <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 800effe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 800f000:	e109      	b.n	800f216 <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 800f002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f004:	2b00      	cmp	r3, #0
 800f006:	d102      	bne.n	800f00e <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 800f008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f00a:	663b      	str	r3, [r7, #96]	@ 0x60
 800f00c:	e627      	b.n	800ec5e <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800f00e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f010:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f012:	405a      	eors	r2, r3
 800f014:	4b82      	ldr	r3, [pc, #520]	@ (800f220 <lfs_dir_fetchmatch+0x790>)
 800f016:	4013      	ands	r3, r2
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d103      	bne.n	800f024 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800f01c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f020:	663b      	str	r3, [r7, #96]	@ 0x60
 800f022:	e61c      	b.n	800ec5e <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 800f024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f026:	2b02      	cmp	r3, #2
 800f028:	f47f ae19 	bne.w	800ec5e <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800f02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f02e:	4618      	mov	r0, r3
 800f030:	f7fe fb7c 	bl	800d72c <lfs_tag_id>
 800f034:	4603      	mov	r3, r0
 800f036:	461c      	mov	r4, r3
 800f038:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fe fb76 	bl	800d72c <lfs_tag_id>
 800f040:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800f042:	429c      	cmp	r4, r3
 800f044:	f63f ae0b 	bhi.w	800ec5e <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800f048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f04a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f04e:	663b      	str	r3, [r7, #96]	@ 0x60
 800f050:	e605      	b.n	800ec5e <lfs_dir_fetchmatch+0x1ce>
                    break;
 800f052:	bf00      	nop
 800f054:	e00c      	b.n	800f070 <lfs_dir_fetchmatch+0x5e0>
                break;
 800f056:	bf00      	nop
 800f058:	e00a      	b.n	800f070 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800f05a:	bf00      	nop
 800f05c:	e008      	b.n	800f070 <lfs_dir_fetchmatch+0x5e0>
                    break;
 800f05e:	bf00      	nop
 800f060:	e006      	b.n	800f070 <lfs_dir_fetchmatch+0x5e0>
                    break;
 800f062:	bf00      	nop
 800f064:	e004      	b.n	800f070 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800f066:	bf00      	nop
 800f068:	e002      	b.n	800f070 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800f06a:	bf00      	nop
 800f06c:	e000      	b.n	800f070 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800f06e:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	68db      	ldr	r3, [r3, #12]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d000      	beq.n	800f07a <lfs_dir_fetchmatch+0x5ea>
 800f078:	e017      	b.n	800f0aa <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7fe fa2f 	bl	800d4e0 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 800f082:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f084:	3301      	adds	r3, #1
 800f086:	2b00      	cmp	r3, #0
 800f088:	f003 0301 	and.w	r3, r3, #1
 800f08c:	bfb8      	it	lt
 800f08e:	425b      	neglt	r3, r3
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	3378      	adds	r3, #120	@ 0x78
 800f094:	f107 0208 	add.w	r2, r7, #8
 800f098:	4413      	add	r3, r2
 800f09a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800f0a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	673b      	str	r3, [r7, #112]	@ 0x70
 800f0a8:	e0a1      	b.n	800f1ee <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 800f0b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d03a      	beq.n	800f12e <lfs_dir_fetchmatch+0x69e>
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	68db      	ldr	r3, [r3, #12]
 800f0bc:	697a      	ldr	r2, [r7, #20]
 800f0be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800f0c0:	6a12      	ldr	r2, [r2, #32]
 800f0c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0c6:	fb01 f202 	mul.w	r2, r1, r2
 800f0ca:	1a9b      	subs	r3, r3, r2
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d12e      	bne.n	800f12e <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 800f0d0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d02a      	beq.n	800f12e <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 800f0d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f0dc:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 800f0de:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f0e4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	693a      	ldr	r2, [r7, #16]
 800f0ec:	68d2      	ldr	r2, [r2, #12]
 800f0ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f0f0:	f107 001c 	add.w	r0, r7, #28
 800f0f4:	9003      	str	r0, [sp, #12]
 800f0f6:	9102      	str	r1, [sp, #8]
 800f0f8:	9201      	str	r2, [sp, #4]
 800f0fa:	9300      	str	r3, [sp, #0]
 800f0fc:	462b      	mov	r3, r5
 800f0fe:	4622      	mov	r2, r4
 800f100:	2100      	movs	r1, #0
 800f102:	6978      	ldr	r0, [r7, #20]
 800f104:	f7fe f817 	bl	800d136 <lfs_bd_crc>
 800f108:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 800f10a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d005      	beq.n	800f11c <lfs_dir_fetchmatch+0x68c>
 800f110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f112:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f116:	d001      	beq.n	800f11c <lfs_dir_fetchmatch+0x68c>
                    return err;
 800f118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f11a:	e07c      	b.n	800f216 <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 800f11c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	429a      	cmp	r2, r3
 800f122:	bf0c      	ite	eq
 800f124:	2301      	moveq	r3, #1
 800f126:	2300      	movne	r3, #0
 800f128:	b2da      	uxtb	r2, r3
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	333c      	adds	r3, #60	@ 0x3c
 800f132:	693a      	ldr	r2, [r7, #16]
 800f134:	4611      	mov	r1, r2
 800f136:	4618      	mov	r0, r3
 800f138:	f7fe fbb4 	bl	800d8a4 <lfs_gstate_hasmovehere>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d028      	beq.n	800f194 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f146:	4618      	mov	r0, r3
 800f148:	f7fe faf0 	bl	800d72c <lfs_tag_id>
 800f14c:	4603      	mov	r3, r0
 800f14e:	461c      	mov	r4, r3
 800f150:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f152:	4618      	mov	r0, r3
 800f154:	f7fe faea 	bl	800d72c <lfs_tag_id>
 800f158:	4603      	mov	r3, r0
 800f15a:	429c      	cmp	r4, r3
 800f15c:	d104      	bne.n	800f168 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 800f15e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f160:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f164:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f166:	e015      	b.n	800f194 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 800f168:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f16a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f16e:	d011      	beq.n	800f194 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f174:	4618      	mov	r0, r3
 800f176:	f7fe fad9 	bl	800d72c <lfs_tag_id>
 800f17a:	4603      	mov	r3, r0
 800f17c:	461c      	mov	r4, r3
 800f17e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f180:	4618      	mov	r0, r3
 800f182:	f7fe fad3 	bl	800d72c <lfs_tag_id>
 800f186:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 800f188:	429c      	cmp	r4, r3
 800f18a:	d203      	bcs.n	800f194 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 800f18c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f18e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800f192:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 800f194:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d010      	beq.n	800f1be <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800f19c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7fe fac4 	bl	800d72c <lfs_tag_id>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	8a9b      	ldrh	r3, [r3, #20]
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	4610      	mov	r0, r2
 800f1b0:	f7fd fd49 	bl	800cc46 <lfs_min>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f1bc:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 800f1be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7fe fa48 	bl	800d656 <lfs_tag_isvalid>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d001      	beq.n	800f1d0 <lfs_dir_fetchmatch+0x740>
            return besttag;
 800f1cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f1ce:	e022      	b.n	800f216 <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 800f1d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7fe faaa 	bl	800d72c <lfs_tag_id>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	461a      	mov	r2, r3
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	8a9b      	ldrh	r3, [r3, #20]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d202      	bcs.n	800f1ea <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 800f1e4:	f06f 0301 	mvn.w	r3, #1
 800f1e8:	e015      	b.n	800f216 <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	e013      	b.n	800f216 <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 800f1ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	f77f ad00 	ble.w	800ebf6 <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	4909      	ldr	r1, [pc, #36]	@ (800f224 <lfs_dir_fetchmatch+0x794>)
 800f200:	9101      	str	r1, [sp, #4]
 800f202:	9300      	str	r3, [sp, #0]
 800f204:	4613      	mov	r3, r2
 800f206:	f240 5259 	movw	r2, #1369	@ 0x559
 800f20a:	4907      	ldr	r1, [pc, #28]	@ (800f228 <lfs_dir_fetchmatch+0x798>)
 800f20c:	4807      	ldr	r0, [pc, #28]	@ (800f22c <lfs_dir_fetchmatch+0x79c>)
 800f20e:	f013 feff 	bl	8023010 <printf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800f212:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 800f216:	4618      	mov	r0, r3
 800f218:	3784      	adds	r7, #132	@ 0x84
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f21e:	bf00      	nop
 800f220:	7ffffc00 	.word	0x7ffffc00
 800f224:	080305ac 	.word	0x080305ac
 800f228:	08030484 	.word	0x08030484
 800f22c:	080305b8 	.word	0x080305b8

0800f230 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800f230:	b580      	push	{r7, lr}
 800f232:	b088      	sub	sp, #32
 800f234:	af04      	add	r7, sp, #16
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800f23c:	2300      	movs	r3, #0
 800f23e:	9303      	str	r3, [sp, #12]
 800f240:	2300      	movs	r3, #0
 800f242:	9302      	str	r3, [sp, #8]
 800f244:	2300      	movs	r3, #0
 800f246:	9301      	str	r3, [sp, #4]
 800f248:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f24c:	9300      	str	r3, [sp, #0]
 800f24e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	68b9      	ldr	r1, [r7, #8]
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	f7ff fc1a 	bl	800ea90 <lfs_dir_fetchmatch>
 800f25c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
	...

0800f268 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800f268:	b580      	push	{r7, lr}
 800f26a:	b08a      	sub	sp, #40	@ 0x28
 800f26c:	af02      	add	r7, sp, #8
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800f274:	f107 0310 	add.w	r3, r7, #16
 800f278:	9300      	str	r3, [sp, #0]
 800f27a:	4b12      	ldr	r3, [pc, #72]	@ (800f2c4 <lfs_dir_getgstate+0x5c>)
 800f27c:	4a12      	ldr	r2, [pc, #72]	@ (800f2c8 <lfs_dir_getgstate+0x60>)
 800f27e:	68b9      	ldr	r1, [r7, #8]
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f7fe fecf 	bl	800e024 <lfs_dir_get>
 800f286:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	da05      	bge.n	800f29a <lfs_dir_getgstate+0x32>
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	f113 0f02 	cmn.w	r3, #2
 800f294:	d001      	beq.n	800f29a <lfs_dir_getgstate+0x32>
        return res;
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	e00f      	b.n	800f2ba <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	f113 0f02 	cmn.w	r3, #2
 800f2a0:	d00a      	beq.n	800f2b8 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800f2a2:	f107 0310 	add.w	r3, r7, #16
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fe fb1c 	bl	800d8e4 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800f2ac:	f107 0310 	add.w	r3, r7, #16
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7fe fa6b 	bl	800d78e <lfs_gstate_xor>
    }

    return 0;
 800f2b8:	2300      	movs	r3, #0
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3720      	adds	r7, #32
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	7ff0000c 	.word	0x7ff0000c
 800f2c8:	7ff00000 	.word	0x7ff00000

0800f2cc <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b08a      	sub	sp, #40	@ 0x28
 800f2d0:	af02      	add	r7, sp, #8
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	603b      	str	r3, [r7, #0]
 800f2d8:	4613      	mov	r3, r2
 800f2da:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 800f2dc:	88fb      	ldrh	r3, [r7, #6]
 800f2de:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d10b      	bne.n	800f2fe <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	3308      	adds	r3, #8
 800f2ea:	4932      	ldr	r1, [pc, #200]	@ (800f3b4 <lfs_dir_getinfo+0xe8>)
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	881b      	ldrh	r3, [r3, #0]
 800f2f2:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	2202      	movs	r2, #2
 800f2f8:	701a      	strb	r2, [r3, #0]
        return 0;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	e055      	b.n	800f3aa <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800f2fe:	88fb      	ldrh	r3, [r7, #6]
 800f300:	029a      	lsls	r2, r3, #10
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f306:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800f308:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800f30e:	9300      	str	r3, [sp, #0]
 800f310:	4613      	mov	r3, r2
 800f312:	4a29      	ldr	r2, [pc, #164]	@ (800f3b8 <lfs_dir_getinfo+0xec>)
 800f314:	68b9      	ldr	r1, [r7, #8]
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f7fe fe84 	bl	800e024 <lfs_dir_get>
 800f31c:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	2b00      	cmp	r3, #0
 800f322:	da01      	bge.n	800f328 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	e040      	b.n	800f3aa <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fe f9d4 	bl	800d6d8 <lfs_tag_type3>
 800f330:	4603      	mov	r3, r0
 800f332:	b2da      	uxtb	r2, r3
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800f338:	88fb      	ldrh	r3, [r7, #6]
 800f33a:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f33c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f340:	f043 0308 	orr.w	r3, r3, #8
 800f344:	f107 0214 	add.w	r2, r7, #20
 800f348:	9200      	str	r2, [sp, #0]
 800f34a:	4a1c      	ldr	r2, [pc, #112]	@ (800f3bc <lfs_dir_getinfo+0xf0>)
 800f34c:	68b9      	ldr	r1, [r7, #8]
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f7fe fe68 	bl	800e024 <lfs_dir_get>
 800f354:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	da01      	bge.n	800f360 <lfs_dir_getinfo+0x94>
        return (int)tag;
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	e024      	b.n	800f3aa <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 800f360:	f107 0314 	add.w	r3, r7, #20
 800f364:	4618      	mov	r0, r3
 800f366:	f7fe fb2d 	bl	800d9c4 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7fe f9b3 	bl	800d6d8 <lfs_tag_type3>
 800f372:	4603      	mov	r3, r0
 800f374:	461a      	mov	r2, r3
 800f376:	f240 2302 	movw	r3, #514	@ 0x202
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d103      	bne.n	800f386 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 800f37e:	69ba      	ldr	r2, [r7, #24]
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	605a      	str	r2, [r3, #4]
 800f384:	e010      	b.n	800f3a8 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	4618      	mov	r0, r3
 800f38a:	f7fe f9a5 	bl	800d6d8 <lfs_tag_type3>
 800f38e:	4603      	mov	r3, r0
 800f390:	461a      	mov	r2, r3
 800f392:	f240 2301 	movw	r3, #513	@ 0x201
 800f396:	429a      	cmp	r2, r3
 800f398:	d106      	bne.n	800f3a8 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7fe f9d5 	bl	800d74c <lfs_tag_size>
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	605a      	str	r2, [r3, #4]
    }

    return 0;
 800f3a8:	2300      	movs	r3, #0
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3720      	adds	r7, #32
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	080305f8 	.word	0x080305f8
 800f3b8:	780ffc00 	.word	0x780ffc00
 800f3bc:	700ffc00 	.word	0x700ffc00

0800f3c0 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800f3c0:	b590      	push	{r4, r7, lr}
 800f3c2:	b08f      	sub	sp, #60	@ 0x3c
 800f3c4:	af04      	add	r7, sp, #16
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 800f3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800f3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3dc:	689c      	ldr	r4, [r3, #8]
 800f3de:	68b8      	ldr	r0, [r7, #8]
 800f3e0:	f7fe f9b4 	bl	800d74c <lfs_tag_size>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	f7fd fc2c 	bl	800cc46 <lfs_min>
 800f3ee:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800f3f0:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800f3f2:	69fb      	ldr	r3, [r7, #28]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	69fa      	ldr	r2, [r7, #28]
 800f3f8:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800f3fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f3fc:	6849      	ldr	r1, [r1, #4]
 800f3fe:	69b8      	ldr	r0, [r7, #24]
 800f400:	9003      	str	r0, [sp, #12]
 800f402:	9102      	str	r1, [sp, #8]
 800f404:	9201      	str	r2, [sp, #4]
 800f406:	9300      	str	r3, [sp, #0]
 800f408:	69bb      	ldr	r3, [r7, #24]
 800f40a:	4622      	mov	r2, r4
 800f40c:	2100      	movs	r1, #0
 800f40e:	6a38      	ldr	r0, [r7, #32]
 800f410:	f7fd fe40 	bl	800d094 <lfs_bd_cmp>
 800f414:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d001      	beq.n	800f420 <lfs_dir_find_match+0x60>
        return res;
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	e014      	b.n	800f44a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800f420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f422:	689c      	ldr	r4, [r3, #8]
 800f424:	68b8      	ldr	r0, [r7, #8]
 800f426:	f7fe f991 	bl	800d74c <lfs_tag_size>
 800f42a:	4603      	mov	r3, r0
 800f42c:	429c      	cmp	r4, r3
 800f42e:	d00b      	beq.n	800f448 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800f430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f432:	689c      	ldr	r4, [r3, #8]
 800f434:	68b8      	ldr	r0, [r7, #8]
 800f436:	f7fe f989 	bl	800d74c <lfs_tag_size>
 800f43a:	4603      	mov	r3, r0
 800f43c:	429c      	cmp	r4, r3
 800f43e:	d201      	bcs.n	800f444 <lfs_dir_find_match+0x84>
 800f440:	2301      	movs	r3, #1
 800f442:	e002      	b.n	800f44a <lfs_dir_find_match+0x8a>
 800f444:	2302      	movs	r3, #2
 800f446:	e000      	b.n	800f44a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800f448:	2300      	movs	r3, #0
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	372c      	adds	r7, #44	@ 0x2c
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd90      	pop	{r4, r7, pc}
	...

0800f454 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800f454:	b590      	push	{r4, r7, lr}
 800f456:	b093      	sub	sp, #76	@ 0x4c
 800f458:	af04      	add	r7, sp, #16
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
 800f460:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d003      	beq.n	800f476 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800f474:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800f476:	4b6e      	ldr	r3, [pc, #440]	@ (800f630 <lfs_dir_find+0x1dc>)
 800f478:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	6a1a      	ldr	r2, [r3, #32]
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800f48a:	496a      	ldr	r1, [pc, #424]	@ (800f634 <lfs_dir_find+0x1e0>)
 800f48c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f48e:	f016 fb4f 	bl	8025b30 <strspn>
 800f492:	4602      	mov	r2, r0
 800f494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f496:	4413      	add	r3, r2
 800f498:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800f49a:	4966      	ldr	r1, [pc, #408]	@ (800f634 <lfs_dir_find+0x1e0>)
 800f49c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f49e:	f016 fafb 	bl	8025a98 <strcspn>
 800f4a2:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4a6:	2b01      	cmp	r3, #1
 800f4a8:	d105      	bne.n	800f4b6 <lfs_dir_find+0x62>
 800f4aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4ac:	781a      	ldrb	r2, [r3, #0]
 800f4ae:	4b62      	ldr	r3, [pc, #392]	@ (800f638 <lfs_dir_find+0x1e4>)
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d00a      	beq.n	800f4cc <lfs_dir_find+0x78>
 800f4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b8:	2b02      	cmp	r3, #2
 800f4ba:	d10c      	bne.n	800f4d6 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800f4bc:	2202      	movs	r2, #2
 800f4be:	495f      	ldr	r1, [pc, #380]	@ (800f63c <lfs_dir_find+0x1e8>)
 800f4c0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f4c2:	f016 fa31 	bl	8025928 <memcmp>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d104      	bne.n	800f4d6 <lfs_dir_find+0x82>
            name += namelen;
 800f4cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d0:	4413      	add	r3, r2
 800f4d2:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 800f4d4:	e7d9      	b.n	800f48a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800f4d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4da:	4413      	add	r3, r2
 800f4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800f4de:	2301      	movs	r3, #1
 800f4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800f4e2:	4954      	ldr	r1, [pc, #336]	@ (800f634 <lfs_dir_find+0x1e0>)
 800f4e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f4e6:	f016 fb23 	bl	8025b30 <strspn>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ee:	4413      	add	r3, r2
 800f4f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 800f4f2:	4950      	ldr	r1, [pc, #320]	@ (800f634 <lfs_dir_find+0x1e0>)
 800f4f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f4f6:	f016 facf 	bl	8025a98 <strcspn>
 800f4fa:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800f4fc:	6a3b      	ldr	r3, [r7, #32]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d01d      	beq.n	800f53e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800f502:	6a3b      	ldr	r3, [r7, #32]
 800f504:	2b02      	cmp	r3, #2
 800f506:	d112      	bne.n	800f52e <lfs_dir_find+0xda>
 800f508:	2202      	movs	r2, #2
 800f50a:	494c      	ldr	r1, [pc, #304]	@ (800f63c <lfs_dir_find+0x1e8>)
 800f50c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f50e:	f016 fa0b 	bl	8025928 <memcmp>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	d10a      	bne.n	800f52e <lfs_dir_find+0xda>
                depth -= 1;
 800f518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f51a:	3b01      	subs	r3, #1
 800f51c:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 800f51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f520:	2b00      	cmp	r3, #0
 800f522:	d107      	bne.n	800f534 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800f524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f526:	6a3b      	ldr	r3, [r7, #32]
 800f528:	4413      	add	r3, r2
 800f52a:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 800f52c:	e7ad      	b.n	800f48a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800f52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f530:	3301      	adds	r3, #1
 800f532:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 800f534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f536:	6a3b      	ldr	r3, [r7, #32]
 800f538:	4413      	add	r3, r2
 800f53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 800f53c:	e7d1      	b.n	800f4e2 <lfs_dir_find+0x8e>
                break;
 800f53e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800f540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d101      	bne.n	800f54c <lfs_dir_find+0xf8>
            return tag;
 800f548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f54a:	e06c      	b.n	800f626 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f550:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800f552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f554:	4618      	mov	r0, r3
 800f556:	f7fe f8bf 	bl	800d6d8 <lfs_tag_type3>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b02      	cmp	r3, #2
 800f55e:	d002      	beq.n	800f566 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800f560:	f06f 0313 	mvn.w	r3, #19
 800f564:	e05f      	b.n	800f626 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800f566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fe f8df 	bl	800d72c <lfs_tag_id>
 800f56e:	4603      	mov	r3, r0
 800f570:	461a      	mov	r2, r3
 800f572:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800f576:	429a      	cmp	r2, r3
 800f578:	d01c      	beq.n	800f5b4 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800f57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fe f8d5 	bl	800d72c <lfs_tag_id>
 800f582:	4603      	mov	r3, r0
 800f584:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f586:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f58a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800f58e:	68ba      	ldr	r2, [r7, #8]
 800f590:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f592:	9200      	str	r2, [sp, #0]
 800f594:	4a2a      	ldr	r2, [pc, #168]	@ (800f640 <lfs_dir_find+0x1ec>)
 800f596:	68b9      	ldr	r1, [r7, #8]
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f7fe fd43 	bl	800e024 <lfs_dir_get>
 800f59e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	da01      	bge.n	800f5aa <lfs_dir_find+0x156>
                return res;
 800f5a6:	69fb      	ldr	r3, [r7, #28]
 800f5a8:	e03d      	b.n	800f626 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	3318      	adds	r3, #24
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fe f81d 	bl	800d5ee <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800f5ba:	212f      	movs	r1, #47	@ 0x2f
 800f5bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f5be:	f016 fa5e 	bl	8025a7e <strchr>
 800f5c2:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d101      	bne.n	800f5cc <lfs_dir_find+0x178>
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	e000      	b.n	800f5ce <lfs_dir_find+0x17a>
 800f5cc:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800f5ce:	68fa      	ldr	r2, [r7, #12]
 800f5d0:	613a      	str	r2, [r7, #16]
 800f5d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5d4:	617a      	str	r2, [r7, #20]
 800f5d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f5d8:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f5da:	f107 0210 	add.w	r2, r7, #16
 800f5de:	9203      	str	r2, [sp, #12]
 800f5e0:	4a18      	ldr	r2, [pc, #96]	@ (800f644 <lfs_dir_find+0x1f0>)
 800f5e2:	9202      	str	r2, [sp, #8]
 800f5e4:	9301      	str	r3, [sp, #4]
 800f5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 800f5ee:	4622      	mov	r2, r4
 800f5f0:	68b9      	ldr	r1, [r7, #8]
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	f7ff fa4c 	bl	800ea90 <lfs_dir_fetchmatch>
 800f5f8:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800f5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	da01      	bge.n	800f604 <lfs_dir_find+0x1b0>
                return tag;
 800f600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f602:	e010      	b.n	800f626 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800f604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f606:	2b00      	cmp	r3, #0
 800f608:	d004      	beq.n	800f614 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800f60a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f60e:	4413      	add	r3, r2
 800f610:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 800f612:	e73a      	b.n	800f48a <lfs_dir_find+0x36>
            if (!dir->split) {
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	7ddb      	ldrb	r3, [r3, #23]
 800f618:	f083 0301 	eor.w	r3, r3, #1
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d0c8      	beq.n	800f5b4 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800f622:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f626:	4618      	mov	r0, r3
 800f628:	373c      	adds	r7, #60	@ 0x3c
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd90      	pop	{r4, r7, pc}
 800f62e:	bf00      	nop
 800f630:	002ffc00 	.word	0x002ffc00
 800f634:	080305f8 	.word	0x080305f8
 800f638:	080305fc 	.word	0x080305fc
 800f63c:	08030600 	.word	0x08030600
 800f640:	700ffc00 	.word	0x700ffc00
 800f644:	0800f3c1 	.word	0x0800f3c1

0800f648 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800f648:	b590      	push	{r4, r7, lr}
 800f64a:	b08b      	sub	sp, #44	@ 0x2c
 800f64c:	af04      	add	r7, sp, #16
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	607a      	str	r2, [r7, #4]
 800f654:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f103 0010 	add.w	r0, r3, #16
 800f65c:	68fc      	ldr	r4, [r7, #12]
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	68ba      	ldr	r2, [r7, #8]
 800f664:	6852      	ldr	r2, [r2, #4]
 800f666:	6839      	ldr	r1, [r7, #0]
 800f668:	9103      	str	r1, [sp, #12]
 800f66a:	6879      	ldr	r1, [r7, #4]
 800f66c:	9102      	str	r1, [sp, #8]
 800f66e:	9201      	str	r2, [sp, #4]
 800f670:	9300      	str	r3, [sp, #0]
 800f672:	2300      	movs	r3, #0
 800f674:	4622      	mov	r2, r4
 800f676:	4601      	mov	r1, r0
 800f678:	68f8      	ldr	r0, [r7, #12]
 800f67a:	f7fd fe51 	bl	800d320 <lfs_bd_prog>
 800f67e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d001      	beq.n	800f68a <lfs_dir_commitprog+0x42>
        return err;
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	e010      	b.n	800f6ac <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	683a      	ldr	r2, [r7, #0]
 800f690:	6879      	ldr	r1, [r7, #4]
 800f692:	4618      	mov	r0, r3
 800f694:	f005 f9ce 	bl	8014a34 <lfs_crc>
 800f698:	4602      	mov	r2, r0
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	685a      	ldr	r2, [r3, #4]
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	441a      	add	r2, r3
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	605a      	str	r2, [r3, #4]
    return 0;
 800f6aa:	2300      	movs	r3, #0
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	371c      	adds	r7, #28
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd90      	pop	{r4, r7, pc}

0800f6b4 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800f6b4:	b590      	push	{r4, r7, lr}
 800f6b6:	b08f      	sub	sp, #60	@ 0x3c
 800f6b8:	af04      	add	r7, sp, #16
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	607a      	str	r2, [r7, #4]
 800f6c0:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f7fe f84f 	bl	800d766 <lfs_tag_dsize>
 800f6c8:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	685a      	ldr	r2, [r3, #4]
 800f6ce:	6a3b      	ldr	r3, [r7, #32]
 800f6d0:	441a      	add	r2, r3
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	695b      	ldr	r3, [r3, #20]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d902      	bls.n	800f6e0 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800f6da:	f06f 031b 	mvn.w	r3, #27
 800f6de:	e065      	b.n	800f7ac <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	689b      	ldr	r3, [r3, #8]
 800f6ea:	4053      	eors	r3, r2
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7fd fb3d 	bl	800cd6c <lfs_tobe32>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800f6f6:	f107 0214 	add.w	r2, r7, #20
 800f6fa:	2304      	movs	r3, #4
 800f6fc:	68b9      	ldr	r1, [r7, #8]
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	f7ff ffa2 	bl	800f648 <lfs_dir_commitprog>
 800f704:	61f8      	str	r0, [r7, #28]
    if (err) {
 800f706:	69fb      	ldr	r3, [r7, #28]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d001      	beq.n	800f710 <lfs_dir_commitattr+0x5c>
        return err;
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	e04d      	b.n	800f7ac <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2b00      	cmp	r3, #0
 800f714:	db0c      	blt.n	800f730 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800f716:	6a3b      	ldr	r3, [r7, #32]
 800f718:	3b04      	subs	r3, #4
 800f71a:	683a      	ldr	r2, [r7, #0]
 800f71c:	68b9      	ldr	r1, [r7, #8]
 800f71e:	68f8      	ldr	r0, [r7, #12]
 800f720:	f7ff ff92 	bl	800f648 <lfs_dir_commitprog>
 800f724:	61f8      	str	r0, [r7, #28]
        if (err) {
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d039      	beq.n	800f7a0 <lfs_dir_commitattr+0xec>
            return err;
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	e03d      	b.n	800f7ac <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800f734:	2300      	movs	r3, #0
 800f736:	627b      	str	r3, [r7, #36]	@ 0x24
 800f738:	e02d      	b.n	800f796 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800f73a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800f73c:	6a3a      	ldr	r2, [r7, #32]
 800f73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f740:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800f742:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800f744:	69bb      	ldr	r3, [r7, #24]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	69ba      	ldr	r2, [r7, #24]
 800f74a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800f74c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f74e:	440a      	add	r2, r1
 800f750:	2101      	movs	r1, #1
 800f752:	9103      	str	r1, [sp, #12]
 800f754:	f107 0113 	add.w	r1, r7, #19
 800f758:	9102      	str	r1, [sp, #8]
 800f75a:	9201      	str	r2, [sp, #4]
 800f75c:	9300      	str	r3, [sp, #0]
 800f75e:	4623      	mov	r3, r4
 800f760:	4602      	mov	r2, r0
 800f762:	2100      	movs	r1, #0
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f7fd fb49 	bl	800cdfc <lfs_bd_read>
 800f76a:	61f8      	str	r0, [r7, #28]
            if (err) {
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d001      	beq.n	800f776 <lfs_dir_commitattr+0xc2>
                return err;
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	e01a      	b.n	800f7ac <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800f776:	f107 0213 	add.w	r2, r7, #19
 800f77a:	2301      	movs	r3, #1
 800f77c:	68b9      	ldr	r1, [r7, #8]
 800f77e:	68f8      	ldr	r0, [r7, #12]
 800f780:	f7ff ff62 	bl	800f648 <lfs_dir_commitprog>
 800f784:	61f8      	str	r0, [r7, #28]
            if (err) {
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d001      	beq.n	800f790 <lfs_dir_commitattr+0xdc>
                return err;
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	e00d      	b.n	800f7ac <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800f790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f792:	3301      	adds	r3, #1
 800f794:	627b      	str	r3, [r7, #36]	@ 0x24
 800f796:	6a3b      	ldr	r3, [r7, #32]
 800f798:	3b04      	subs	r3, #4
 800f79a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d3cc      	bcc.n	800f73a <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	609a      	str	r2, [r3, #8]
    return 0;
 800f7aa:	2300      	movs	r3, #0
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	372c      	adds	r7, #44	@ 0x2c
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd90      	pop	{r4, r7, pc}

0800f7b4 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800f7b4:	b590      	push	{r4, r7, lr}
 800f7b6:	b097      	sub	sp, #92	@ 0x5c
 800f7b8:	af04      	add	r7, sp, #16
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 800f7c2:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    const lfs_off_t end = lfs_alignup(
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	4610      	mov	r0, r2
 800f7d0:	f7fd fa39 	bl	800cc46 <lfs_min>
 800f7d4:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7da:	6a1b      	ldr	r3, [r3, #32]
    const lfs_off_t end = lfs_alignup(
 800f7dc:	4619      	mov	r1, r3
 800f7de:	4610      	mov	r0, r2
 800f7e0:	f7fd fa56 	bl	800cc90 <lfs_alignup>
 800f7e4:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800f7ee:	e0fe      	b.n	800f9ee <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f7f6:	1ad3      	subs	r3, r2, r3
 800f7f8:	3b04      	subs	r3, #4
 800f7fa:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7fd fa21 	bl	800cc46 <lfs_min>
 800f804:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	4413      	add	r3, r2
        lfs_off_t noff = (
 800f80c:	3304      	adds	r3, #4
 800f80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 800f810:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f814:	429a      	cmp	r2, r3
 800f816:	d206      	bcs.n	800f826 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 800f818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f81a:	3b14      	subs	r3, #20
 800f81c:	4619      	mov	r1, r3
 800f81e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f820:	f7fd fa11 	bl	800cc46 <lfs_min>
 800f824:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 800f826:	23ff      	movs	r3, #255	@ 0xff
 800f828:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800f82a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82e:	429a      	cmp	r2, r3
 800f830:	d35f      	bcc.n	800f8f2 <lfs_dir_commitcrc+0x13e>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f836:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f83c:	6a1b      	ldr	r3, [r3, #32]
 800f83e:	1ad3      	subs	r3, r2, r3
 800f840:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f842:	429a      	cmp	r2, r3
 800f844:	d855      	bhi.n	800f8f2 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800f846:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f84c:	6a18      	ldr	r0, [r3, #32]
            int err = lfs_bd_read(lfs,
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	2201      	movs	r2, #1
 800f854:	9203      	str	r2, [sp, #12]
 800f856:	f107 021b 	add.w	r2, r7, #27
 800f85a:	9202      	str	r2, [sp, #8]
 800f85c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f85e:	9201      	str	r2, [sp, #4]
 800f860:	9300      	str	r3, [sp, #0]
 800f862:	4603      	mov	r3, r0
 800f864:	460a      	mov	r2, r1
 800f866:	2100      	movs	r1, #0
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f7fd fac7 	bl	800cdfc <lfs_bd_read>
 800f86e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 800f870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f872:	2b00      	cmp	r3, #0
 800f874:	d005      	beq.n	800f882 <lfs_dir_commitcrc+0xce>
 800f876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f878:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f87c:	d001      	beq.n	800f882 <lfs_dir_commitcrc+0xce>
                return err;
 800f87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f880:	e101      	b.n	800fa86 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f886:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 800f888:	60bb      	str	r3, [r7, #8]
 800f88a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f88e:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 800f890:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f896:	6a1c      	ldr	r4, [r3, #32]
                err = lfs_bd_crc(lfs,
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	f107 0108 	add.w	r1, r7, #8
 800f8a2:	3104      	adds	r1, #4
 800f8a4:	9103      	str	r1, [sp, #12]
 800f8a6:	9202      	str	r2, [sp, #8]
 800f8a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f8aa:	9201      	str	r2, [sp, #4]
 800f8ac:	9300      	str	r3, [sp, #0]
 800f8ae:	4623      	mov	r3, r4
 800f8b0:	4602      	mov	r2, r0
 800f8b2:	2100      	movs	r1, #0
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f7fd fc3e 	bl	800d136 <lfs_bd_crc>
 800f8ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 800f8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d005      	beq.n	800f8ce <lfs_dir_commitcrc+0x11a>
 800f8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f8c8:	d001      	beq.n	800f8ce <lfs_dir_commitcrc+0x11a>
                    return err;
 800f8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8cc:	e0db      	b.n	800fa86 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 800f8ce:	f107 0308 	add.w	r3, r7, #8
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fe f85e 	bl	800d994 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 800f8d8:	f107 0308 	add.w	r3, r7, #8
 800f8dc:	4a6c      	ldr	r2, [pc, #432]	@ (800fa90 <lfs_dir_commitcrc+0x2dc>)
 800f8de:	6839      	ldr	r1, [r7, #0]
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f7ff fee7 	bl	800f6b4 <lfs_dir_commitattr>
 800f8e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 800f8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d001      	beq.n	800f8f2 <lfs_dir_commitcrc+0x13e>
                    return err;
 800f8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8f0:	e0c9      	b.n	800fa86 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 800f8f2:	7efb      	ldrb	r3, [r7, #27]
 800f8f4:	43db      	mvns	r3, r3
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	09db      	lsrs	r3, r3, #7
 800f8fa:	b2db      	uxtb	r3, r3
 800f8fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f900:	051a      	lsls	r2, r3, #20
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f908:	1acb      	subs	r3, r1, r3
 800f90a:	3b04      	subs	r3, #4
 800f90c:	4313      	orrs	r3, r2
 800f90e:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 800f912:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800f916:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	689a      	ldr	r2, [r3, #8]
 800f91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f91e:	4053      	eors	r3, r2
 800f920:	4618      	mov	r0, r3
 800f922:	f7fd fa23 	bl	800cd6c <lfs_tobe32>
 800f926:	4603      	mov	r3, r0
 800f928:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	f107 0110 	add.w	r1, r7, #16
 800f932:	2204      	movs	r2, #4
 800f934:	4618      	mov	r0, r3
 800f936:	f005 f87d 	bl	8014a34 <lfs_crc>
 800f93a:	4602      	mov	r2, r0
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	68db      	ldr	r3, [r3, #12]
 800f944:	4618      	mov	r0, r3
 800f946:	f7fd f9f9 	bl	800cd3c <lfs_tole32>
 800f94a:	4603      	mov	r3, r0
 800f94c:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f103 0010 	add.w	r0, r3, #16
 800f954:	687c      	ldr	r4, [r7, #4]
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	683a      	ldr	r2, [r7, #0]
 800f95c:	6852      	ldr	r2, [r2, #4]
 800f95e:	2108      	movs	r1, #8
 800f960:	9103      	str	r1, [sp, #12]
 800f962:	f107 0110 	add.w	r1, r7, #16
 800f966:	9102      	str	r1, [sp, #8]
 800f968:	9201      	str	r2, [sp, #4]
 800f96a:	9300      	str	r3, [sp, #0]
 800f96c:	2300      	movs	r3, #0
 800f96e:	4622      	mov	r2, r4
 800f970:	4601      	mov	r1, r0
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f7fd fcd4 	bl	800d320 <lfs_bd_prog>
 800f978:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800f97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d001      	beq.n	800f984 <lfs_dir_commitcrc+0x1d0>
            return err;
 800f980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f982:	e080      	b.n	800fa86 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800f984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f986:	2b00      	cmp	r3, #0
 800f988:	d106      	bne.n	800f998 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	3304      	adds	r3, #4
 800f990:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f99c:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 800f99e:	7efb      	ldrb	r3, [r7, #27]
 800f9a0:	43db      	mvns	r3, r3
 800f9a2:	061b      	lsls	r3, r3, #24
 800f9a4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800f9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9aa:	405a      	eors	r2, r3
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9b6:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 800f9b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d208      	bcs.n	800f9d2 <lfs_dir_commitcrc+0x21e>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	695a      	ldr	r2, [r3, #20]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f9c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9ca:	4413      	add	r3, r2
 800f9cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d30d      	bcc.n	800f9ee <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f103 0110 	add.w	r1, r3, #16
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	2300      	movs	r3, #0
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f7fd fc6b 	bl	800d2b8 <lfs_bd_sync>
 800f9e2:	6238      	str	r0, [r7, #32]
            if (err) {
 800f9e4:	6a3b      	ldr	r3, [r7, #32]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d001      	beq.n	800f9ee <lfs_dir_commitcrc+0x23a>
                return err;
 800f9ea:	6a3b      	ldr	r3, [r7, #32]
 800f9ec:	e04b      	b.n	800fa86 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	f63f aefb 	bhi.w	800f7f0 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	691b      	ldr	r3, [r3, #16]
 800f9fe:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 800fa00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fa04:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa0a:	1d1c      	adds	r4, r3, #4
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa14:	1a8a      	subs	r2, r1, r2
 800fa16:	f107 011c 	add.w	r1, r7, #28
 800fa1a:	9103      	str	r1, [sp, #12]
 800fa1c:	9202      	str	r2, [sp, #8]
 800fa1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa20:	9201      	str	r2, [sp, #4]
 800fa22:	9300      	str	r3, [sp, #0]
 800fa24:	4623      	mov	r3, r4
 800fa26:	4602      	mov	r2, r0
 800fa28:	2100      	movs	r1, #0
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f7fd fb83 	bl	800d136 <lfs_bd_crc>
 800fa30:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 800fa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d001      	beq.n	800fa3c <lfs_dir_commitcrc+0x288>
        return err;
 800fa38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa3a:	e024      	b.n	800fa86 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 800fa3c:	69fb      	ldr	r3, [r7, #28]
 800fa3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d002      	beq.n	800fa4a <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 800fa44:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800fa48:	e01d      	b.n	800fa86 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 800fa4a:	6879      	ldr	r1, [r7, #4]
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f107 021c 	add.w	r2, r7, #28
 800fa54:	9203      	str	r2, [sp, #12]
 800fa56:	2204      	movs	r2, #4
 800fa58:	9202      	str	r2, [sp, #8]
 800fa5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fa5c:	9201      	str	r2, [sp, #4]
 800fa5e:	9300      	str	r3, [sp, #0]
 800fa60:	2304      	movs	r3, #4
 800fa62:	460a      	mov	r2, r1
 800fa64:	2100      	movs	r1, #0
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f7fd fb65 	bl	800d136 <lfs_bd_crc>
 800fa6c:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 800fa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d001      	beq.n	800fa78 <lfs_dir_commitcrc+0x2c4>
        return err;
 800fa74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa76:	e006      	b.n	800fa86 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 800fa78:	69fb      	ldr	r3, [r7, #28]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d002      	beq.n	800fa84 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 800fa7e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800fa82:	e000      	b.n	800fa86 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	374c      	adds	r7, #76	@ 0x4c
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd90      	pop	{r4, r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	5ffffc08 	.word	0x5ffffc08

0800fa94 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b08a      	sub	sp, #40	@ 0x28
 800fa98:	af04      	add	r7, sp, #16
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800fa9e:	2300      	movs	r3, #0
 800faa0:	617b      	str	r3, [r7, #20]
 800faa2:	e016      	b.n	800fad2 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	3301      	adds	r3, #1
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f003 0301 	and.w	r3, r3, #1
 800faae:	bfb8      	it	lt
 800fab0:	425b      	neglt	r3, r3
 800fab2:	009b      	lsls	r3, r3, #2
 800fab4:	683a      	ldr	r2, [r7, #0]
 800fab6:	4413      	add	r3, r2
 800fab8:	4619      	mov	r1, r3
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f7fe f934 	bl	800dd28 <lfs_alloc>
 800fac0:	60f8      	str	r0, [r7, #12]
        if (err) {
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d001      	beq.n	800facc <lfs_dir_alloc+0x38>
            return err;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	e058      	b.n	800fb7e <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	3301      	adds	r3, #1
 800fad0:	617b      	str	r3, [r7, #20]
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	dde5      	ble.n	800faa4 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	2200      	movs	r2, #0
 800fadc:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800fade:	6879      	ldr	r1, [r7, #4]
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800fae4:	683a      	ldr	r2, [r7, #0]
 800fae6:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800fae8:	2004      	movs	r0, #4
 800faea:	9003      	str	r0, [sp, #12]
 800faec:	9202      	str	r2, [sp, #8]
 800faee:	2200      	movs	r2, #0
 800faf0:	9201      	str	r2, [sp, #4]
 800faf2:	9300      	str	r3, [sp, #0]
 800faf4:	2304      	movs	r3, #4
 800faf6:	460a      	mov	r2, r1
 800faf8:	2100      	movs	r1, #0
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f7fd f97e 	bl	800cdfc <lfs_bd_read>
 800fb00:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7fd f90d 	bl	800cd26 <lfs_fromle32>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d005      	beq.n	800fb24 <lfs_dir_alloc+0x90>
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fb1e:	d001      	beq.n	800fb24 <lfs_dir_alloc+0x90>
        return err;
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	e02c      	b.n	800fb7e <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fb28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	dd0e      	ble.n	800fb4c <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	689a      	ldr	r2, [r3, #8]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fb36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb38:	3301      	adds	r3, #1
 800fb3a:	f043 0301 	orr.w	r3, r3, #1
 800fb3e:	4619      	mov	r1, r3
 800fb40:	4610      	mov	r0, r2
 800fb42:	f7fd f8a5 	bl	800cc90 <lfs_alignup>
 800fb46:	4602      	mov	r2, r0
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	2204      	movs	r2, #4
 800fb50:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fb58:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fb66:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fb6e:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	2200      	movs	r2, #0
 800fb74:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3718      	adds	r7, #24
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
	...

0800fb88 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b08a      	sub	sp, #40	@ 0x28
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	3348      	adds	r3, #72	@ 0x48
 800fb98:	461a      	mov	r2, r3
 800fb9a:	6879      	ldr	r1, [r7, #4]
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f7ff fb63 	bl	800f268 <lfs_dir_getgstate>
 800fba2:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 800fba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d001      	beq.n	800fbae <lfs_dir_drop+0x26>
        return err;
 800fbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbac:	e022      	b.n	800fbf4 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	3318      	adds	r3, #24
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fd fd35 	bl	800d622 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	7ddb      	ldrb	r3, [r3, #23]
 800fbbc:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800fbc0:	051a      	lsls	r2, r3, #20
 800fbc2:	4b0e      	ldr	r3, [pc, #56]	@ (800fbfc <lfs_dir_drop+0x74>)
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	61fb      	str	r3, [r7, #28]
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	3318      	adds	r3, #24
 800fbcc:	623b      	str	r3, [r7, #32]
 800fbce:	f107 021c 	add.w	r2, r7, #28
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	68b9      	ldr	r1, [r7, #8]
 800fbd6:	68f8      	ldr	r0, [r7, #12]
 800fbd8:	f001 f984 	bl	8010ee4 <lfs_dir_commit>
 800fbdc:	6278      	str	r0, [r7, #36]	@ 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	3318      	adds	r3, #24
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f7fd fd03 	bl	800d5ee <lfs_pair_fromle32>
    if (err) {
 800fbe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d001      	beq.n	800fbf2 <lfs_dir_drop+0x6a>
        return err;
 800fbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf0:	e000      	b.n	800fbf4 <lfs_dir_drop+0x6c>
    }

    return 0;
 800fbf2:	2300      	movs	r3, #0
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3728      	adds	r7, #40	@ 0x28
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	000ffc08 	.word	0x000ffc08

0800fc00 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b092      	sub	sp, #72	@ 0x48
 800fc04:	af04      	add	r7, sp, #16
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	607a      	str	r2, [r7, #4]
 800fc0c:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800fc0e:	f107 0310 	add.w	r3, r7, #16
 800fc12:	4619      	mov	r1, r3
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	f7ff ff3d 	bl	800fa94 <lfs_dir_alloc>
 800fc1a:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 800fc1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d001      	beq.n	800fc26 <lfs_dir_split+0x26>
        return err;
 800fc22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc24:	e03c      	b.n	800fca0 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	7ddb      	ldrb	r3, [r3, #23]
 800fc2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	699b      	ldr	r3, [r3, #24]
 800fc32:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	69db      	ldr	r3, [r3, #28]
 800fc38:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800fc3a:	f107 0110 	add.w	r1, r7, #16
 800fc3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800fc42:	9302      	str	r3, [sp, #8]
 800fc44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fc48:	9301      	str	r3, [sp, #4]
 800fc4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	68f8      	ldr	r0, [r7, #12]
 800fc54:	f000 f87a 	bl	800fd4c <lfs_dir_compact>
 800fc58:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 800fc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	da01      	bge.n	800fc64 <lfs_dir_split+0x64>
        return res;
 800fc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc62:	e01d      	b.n	800fca0 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800fc64:	693a      	ldr	r2, [r7, #16]
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800fc6a:	697a      	ldr	r2, [r7, #20]
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	2201      	movs	r2, #1
 800fc74:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800fc76:	68ba      	ldr	r2, [r7, #8]
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	3320      	adds	r3, #32
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	4610      	mov	r0, r2
 800fc80:	f7fd fc5e 	bl	800d540 <lfs_pair_cmp>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d109      	bne.n	800fc9e <lfs_dir_split+0x9e>
 800fc8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d105      	bne.n	800fc9e <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 800fc92:	693a      	ldr	r2, [r7, #16]
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800fc98:	697a      	ldr	r2, [r7, #20]
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 800fc9e:	2300      	movs	r3, #0
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3738      	adds	r7, #56	@ 0x38
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b086      	sub	sp, #24
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800fcb8:	68b8      	ldr	r0, [r7, #8]
 800fcba:	f7fd fd54 	bl	800d766 <lfs_tag_dsize>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	441a      	add	r2, r3
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	601a      	str	r2, [r3, #0]
    return 0;
 800fcca:	2300      	movs	r3, #0
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3718      	adds	r7, #24
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b086      	sub	sp, #24
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	6818      	ldr	r0, [r3, #0]
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	6859      	ldr	r1, [r3, #4]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	68ba      	ldr	r2, [r7, #8]
 800fcf0:	f7ff fce0 	bl	800f6b4 <lfs_dir_commitattr>
 800fcf4:	4603      	mov	r3, r0
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3718      	adds	r7, #24
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}

0800fcfe <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 800fcfe:	b480      	push	{r7}
 800fd00:	b083      	sub	sp, #12
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	6078      	str	r0, [r7, #4]
 800fd06:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fd0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	dd11      	ble.n	800fd36 <lfs_dir_needsrelocation+0x38>
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	689b      	ldr	r3, [r3, #8]
 800fd16:	3301      	adds	r3, #1
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800fd1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800fd1e:	3201      	adds	r2, #1
 800fd20:	f042 0201 	orr.w	r2, r2, #1
 800fd24:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd28:	fb01 f202 	mul.w	r2, r1, r2
 800fd2c:	1a9b      	subs	r3, r3, r2
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d101      	bne.n	800fd36 <lfs_dir_needsrelocation+0x38>
 800fd32:	2301      	movs	r3, #1
 800fd34:	e000      	b.n	800fd38 <lfs_dir_needsrelocation+0x3a>
 800fd36:	2300      	movs	r3, #0
 800fd38:	f003 0301 	and.w	r3, r3, #1
 800fd3c:	b2db      	uxtb	r3, r3
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	370c      	adds	r7, #12
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr
	...

0800fd4c <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b0a4      	sub	sp, #144	@ 0x90
 800fd50:	af0a      	add	r7, sp, #40	@ 0x28
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	60b9      	str	r1, [r7, #8]
 800fd56:	607a      	str	r2, [r7, #4]
 800fd58:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 800fd60:	68b9      	ldr	r1, [r7, #8]
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f7ff ffcb 	bl	800fcfe <lfs_dir_needsrelocation>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	689b      	ldr	r3, [r3, #8]
 800fd72:	1c5a      	adds	r2, r3, #1
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 800fd78:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d00e      	beq.n	800fd9e <lfs_dir_compact+0x52>
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	2200      	movs	r2, #0
 800fd84:	657a      	str	r2, [r7, #84]	@ 0x54
 800fd86:	2201      	movs	r2, #1
 800fd88:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fd8a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800fd8e:	4611      	mov	r1, r2
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7fd fbd5 	bl	800d540 <lfs_pair_cmp>
 800fd96:	4603      	mov	r3, r0
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	f040 8155 	bne.w	8010048 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800fda2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fda4:	2300      	movs	r3, #0
 800fda6:	643b      	str	r3, [r7, #64]	@ 0x40
 800fda8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fdac:	647b      	str	r3, [r7, #68]	@ 0x44
 800fdae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fdb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fdbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d004      	beq.n	800fdcc <lfs_dir_compact+0x80>
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fdc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fdc8:	3b08      	subs	r3, #8
 800fdca:	e003      	b.n	800fdd4 <lfs_dir_compact+0x88>
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fdd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdd2:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800fdd4:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	4619      	mov	r1, r3
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	f7fd fb4d 	bl	800d47c <lfs_bd_erase>
 800fde2:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800fde4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d006      	beq.n	800fdf8 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800fdea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fdec:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fdf0:	f000 812c 	beq.w	801004c <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800fdf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fdf6:	e188      	b.n	801010a <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7fc ff9d 	bl	800cd3c <lfs_tole32>
 800fe02:	4602      	mov	r2, r0
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800fe0e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800fe12:	2304      	movs	r3, #4
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	f7ff fc17 	bl	800f648 <lfs_dir_commitprog>
 800fe1a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	689b      	ldr	r3, [r3, #8]
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7fc ff80 	bl	800cd26 <lfs_fromle32>
 800fe26:	4602      	mov	r2, r0
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	609a      	str	r2, [r3, #8]
            if (err) {
 800fe2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d006      	beq.n	800fe40 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800fe32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe34:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fe38:	f000 810a 	beq.w	8010050 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 800fe3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe3e:	e164      	b.n	801010a <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800fe40:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800fe44:	425b      	negs	r3, r3
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800fe4a:	68fa      	ldr	r2, [r7, #12]
 800fe4c:	637a      	str	r2, [r7, #52]	@ 0x34
 800fe4e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800fe52:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 800fe54:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fe58:	9208      	str	r2, [sp, #32]
 800fe5a:	4aae      	ldr	r2, [pc, #696]	@ (8010114 <lfs_dir_compact+0x3c8>)
 800fe5c:	9207      	str	r2, [sp, #28]
 800fe5e:	9306      	str	r3, [sp, #24]
 800fe60:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800fe64:	9305      	str	r3, [sp, #20]
 800fe66:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800fe6a:	9304      	str	r3, [sp, #16]
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	9303      	str	r3, [sp, #12]
 800fe70:	4ba9      	ldr	r3, [pc, #676]	@ (8010118 <lfs_dir_compact+0x3cc>)
 800fe72:	9302      	str	r3, [sp, #8]
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	9301      	str	r3, [sp, #4]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fe80:	2200      	movs	r2, #0
 800fe82:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800fe84:	68f8      	ldr	r0, [r7, #12]
 800fe86:	f7fe fa1f 	bl	800e2c8 <lfs_dir_traverse>
 800fe8a:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 800fe8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d006      	beq.n	800fea0 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 800fe92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe94:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fe98:	f000 80dc 	beq.w	8010054 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 800fe9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe9e:	e134      	b.n	801010a <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	3318      	adds	r3, #24
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7fd fb30 	bl	800d50a <lfs_pair_isnull>
 800feaa:	4603      	mov	r3, r0
 800feac:	f083 0301 	eor.w	r3, r3, #1
 800feb0:	b2db      	uxtb	r3, r3
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d022      	beq.n	800fefc <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	3318      	adds	r3, #24
 800feba:	4618      	mov	r0, r3
 800febc:	f7fd fbb1 	bl	800d622 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	7ddb      	ldrb	r3, [r3, #23]
 800fec4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800fec8:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800feca:	4a94      	ldr	r2, [pc, #592]	@ (801011c <lfs_dir_compact+0x3d0>)
 800fecc:	431a      	orrs	r2, r3
                        dir->tail);
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800fed2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800fed6:	68f8      	ldr	r0, [r7, #12]
 800fed8:	f7ff fbec 	bl	800f6b4 <lfs_dir_commitattr>
 800fedc:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	3318      	adds	r3, #24
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7fd fb83 	bl	800d5ee <lfs_pair_fromle32>
                if (err) {
 800fee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800feea:	2b00      	cmp	r3, #0
 800feec:	d006      	beq.n	800fefc <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800feee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fef0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fef4:	f000 80b0 	beq.w	8010058 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 800fef8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fefa:	e106      	b.n	801010a <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800fefc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff00:	2200      	movs	r2, #0
 800ff02:	601a      	str	r2, [r3, #0]
 800ff04:	605a      	str	r2, [r3, #4]
 800ff06:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800ff08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ff0c:	f083 0301 	eor.w	r3, r3, #1
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d011      	beq.n	800ff3a <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800ff1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff20:	4611      	mov	r1, r2
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7fd fc33 	bl	800d78e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff32:	4611      	mov	r1, r2
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fd fc2a 	bl	800d78e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800ff40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff44:	4611      	mov	r1, r2
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fd fc21 	bl	800d78e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800ff4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800ff52:	f023 0303 	bic.w	r3, r3, #3
 800ff56:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800ff58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff5c:	461a      	mov	r2, r3
 800ff5e:	68b9      	ldr	r1, [r7, #8]
 800ff60:	68f8      	ldr	r0, [r7, #12]
 800ff62:	f7ff f981 	bl	800f268 <lfs_dir_getgstate>
 800ff66:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800ff68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d001      	beq.n	800ff72 <lfs_dir_compact+0x226>
                return err;
 800ff6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff70:	e0cb      	b.n	801010a <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800ff72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fd fc2e 	bl	800d7d8 <lfs_gstate_iszero>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	f083 0301 	eor.w	r3, r3, #1
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d016      	beq.n	800ffb6 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 800ff88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7fd fcc9 	bl	800d924 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800ff92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff96:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800ff9a:	4a61      	ldr	r2, [pc, #388]	@ (8010120 <lfs_dir_compact+0x3d4>)
 800ff9c:	68f8      	ldr	r0, [r7, #12]
 800ff9e:	f7ff fb89 	bl	800f6b4 <lfs_dir_commitattr>
 800ffa2:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800ffa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d005      	beq.n	800ffb6 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800ffaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffac:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ffb0:	d054      	beq.n	801005c <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 800ffb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffb4:	e0a9      	b.n	801010a <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800ffb6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ffba:	4619      	mov	r1, r3
 800ffbc:	68f8      	ldr	r0, [r7, #12]
 800ffbe:	f7ff fbf9 	bl	800f7b4 <lfs_dir_commitcrc>
 800ffc2:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 800ffc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d005      	beq.n	800ffd6 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800ffca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffcc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ffd0:	d046      	beq.n	8010060 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 800ffd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffd4:	e099      	b.n	801010a <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800ffd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ffd8:	68fa      	ldr	r2, [r7, #12]
 800ffda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ffdc:	6a12      	ldr	r2, [r2, #32]
 800ffde:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffe2:	fb01 f202 	mul.w	r2, r1, r2
 800ffe6:	1a9b      	subs	r3, r3, r2
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d006      	beq.n	800fffa <lfs_dir_compact+0x2ae>
 800ffec:	4b4d      	ldr	r3, [pc, #308]	@ (8010124 <lfs_dir_compact+0x3d8>)
 800ffee:	4a4e      	ldr	r2, [pc, #312]	@ (8010128 <lfs_dir_compact+0x3dc>)
 800fff0:	f640 0106 	movw	r1, #2054	@ 0x806
 800fff4:	484d      	ldr	r0, [pc, #308]	@ (801012c <lfs_dir_compact+0x3e0>)
 800fff6:	f012 ffd7 	bl	8022fa8 <__assert_func>
            lfs_pair_swap(dir->pair);
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7fd fa6f 	bl	800d4e0 <lfs_pair_swap>
            dir->count = end - begin;
 8010002:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8010006:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 801000a:	1ad3      	subs	r3, r2, r3
 801000c:	b29a      	uxth	r2, r3
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8010012:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8010018:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	3348      	adds	r3, #72	@ 0x48
 8010022:	2200      	movs	r2, #0
 8010024:	601a      	str	r2, [r3, #0]
 8010026:	605a      	str	r2, [r3, #4]
 8010028:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 801002a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801002e:	f083 0301 	eor.w	r3, r3, #1
 8010032:	b2db      	uxtb	r3, r3
 8010034:	2b00      	cmp	r3, #0
 8010036:	d065      	beq.n	8010104 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	68fa      	ldr	r2, [r7, #12]
 801003c:	333c      	adds	r3, #60	@ 0x3c
 801003e:	3230      	adds	r2, #48	@ 0x30
 8010040:	ca07      	ldmia	r2, {r0, r1, r2}
 8010042:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8010046:	e05d      	b.n	8010104 <lfs_dir_compact+0x3b8>
        goto relocate;
 8010048:	bf00      	nop
 801004a:	e00a      	b.n	8010062 <lfs_dir_compact+0x316>
                    goto relocate;
 801004c:	bf00      	nop
 801004e:	e008      	b.n	8010062 <lfs_dir_compact+0x316>
                    goto relocate;
 8010050:	bf00      	nop
 8010052:	e006      	b.n	8010062 <lfs_dir_compact+0x316>
                    goto relocate;
 8010054:	bf00      	nop
 8010056:	e004      	b.n	8010062 <lfs_dir_compact+0x316>
                        goto relocate;
 8010058:	bf00      	nop
 801005a:	e002      	b.n	8010062 <lfs_dir_compact+0x316>
                        goto relocate;
 801005c:	bf00      	nop
 801005e:	e000      	b.n	8010062 <lfs_dir_compact+0x316>
                    goto relocate;
 8010060:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8010062:	2301      	movs	r3, #1
 8010064:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	3310      	adds	r3, #16
 801006c:	4619      	mov	r1, r3
 801006e:	68f8      	ldr	r0, [r7, #12]
 8010070:	f7fc fe9f 	bl	800cdb2 <lfs_cache_drop>
        if (!tired) {
 8010074:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8010078:	f083 0301 	eor.w	r3, r3, #1
 801007c:	b2db      	uxtb	r3, r3
 801007e:	2b00      	cmp	r3, #0
 8010080:	d009      	beq.n	8010096 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	685b      	ldr	r3, [r3, #4]
 8010086:	4a2a      	ldr	r2, [pc, #168]	@ (8010130 <lfs_dir_compact+0x3e4>)
 8010088:	9200      	str	r2, [sp, #0]
 801008a:	f640 0218 	movw	r2, #2072	@ 0x818
 801008e:	4927      	ldr	r1, [pc, #156]	@ (801012c <lfs_dir_compact+0x3e0>)
 8010090:	4828      	ldr	r0, [pc, #160]	@ (8010134 <lfs_dir_compact+0x3e8>)
 8010092:	f012 ffbd 	bl	8023010 <printf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	2200      	movs	r2, #0
 801009a:	617a      	str	r2, [r7, #20]
 801009c:	2201      	movs	r2, #1
 801009e:	61ba      	str	r2, [r7, #24]
 80100a0:	f107 0214 	add.w	r2, r7, #20
 80100a4:	4611      	mov	r1, r2
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7fd fa4a 	bl	800d540 <lfs_pair_cmp>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d10c      	bne.n	80100cc <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	4a1e      	ldr	r2, [pc, #120]	@ (8010130 <lfs_dir_compact+0x3e4>)
 80100b8:	9200      	str	r2, [sp, #0]
 80100ba:	f640 021d 	movw	r2, #2077	@ 0x81d
 80100be:	491b      	ldr	r1, [pc, #108]	@ (801012c <lfs_dir_compact+0x3e0>)
 80100c0:	481d      	ldr	r0, [pc, #116]	@ (8010138 <lfs_dir_compact+0x3ec>)
 80100c2:	f012 ffa5 	bl	8023010 <printf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 80100c6:	f06f 031b 	mvn.w	r3, #27
 80100ca:	e01e      	b.n	801010a <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	3304      	adds	r3, #4
 80100d0:	4619      	mov	r1, r3
 80100d2:	68f8      	ldr	r0, [r7, #12]
 80100d4:	f7fd fe28 	bl	800dd28 <lfs_alloc>
 80100d8:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 80100da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00c      	beq.n	80100fa <lfs_dir_compact+0x3ae>
 80100e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80100e2:	f113 0f1c 	cmn.w	r3, #28
 80100e6:	d106      	bne.n	80100f6 <lfs_dir_compact+0x3aa>
 80100e8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80100ec:	f083 0301 	eor.w	r3, r3, #1
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d001      	beq.n	80100fa <lfs_dir_compact+0x3ae>
            return err;
 80100f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80100f8:	e007      	b.n	801010a <lfs_dir_compact+0x3be>
        }

        tired = false;
 80100fa:	2300      	movs	r3, #0
 80100fc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 8010100:	bf00      	nop
    while (true) {
 8010102:	e64c      	b.n	800fd9e <lfs_dir_compact+0x52>
        break;
 8010104:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8010106:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801010a:	4618      	mov	r0, r3
 801010c:	3768      	adds	r7, #104	@ 0x68
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	0800fcd5 	.word	0x0800fcd5
 8010118:	400ffc00 	.word	0x400ffc00
 801011c:	000ffc08 	.word	0x000ffc08
 8010120:	7ffffc0c 	.word	0x7ffffc0c
 8010124:	08030604 	.word	0x08030604
 8010128:	08033c60 	.word	0x08033c60
 801012c:	08030484 	.word	0x08030484
 8010130:	080305ac 	.word	0x080305ac
 8010134:	0803062c 	.word	0x0803062c
 8010138:	08030650 	.word	0x08030650

0801013c <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801013c:	b590      	push	{r4, r7, lr}
 801013e:	b097      	sub	sp, #92	@ 0x5c
 8010140:	af0a      	add	r7, sp, #40	@ 0x28
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	607a      	str	r2, [r7, #4]
 8010148:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 801014a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801014e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8010150:	e058      	b.n	8010204 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8010152:	2300      	movs	r3, #0
 8010154:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8010156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010158:	b29b      	uxth	r3, r3
 801015a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801015c:	b292      	uxth	r2, r2
 801015e:	4252      	negs	r2, r2
 8010160:	b292      	uxth	r2, r2
 8010162:	b212      	sxth	r2, r2
 8010164:	f107 0118 	add.w	r1, r7, #24
 8010168:	9108      	str	r1, [sp, #32]
 801016a:	4979      	ldr	r1, [pc, #484]	@ (8010350 <lfs_dir_splittingcompact+0x214>)
 801016c:	9107      	str	r1, [sp, #28]
 801016e:	9206      	str	r2, [sp, #24]
 8010170:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8010174:	9205      	str	r2, [sp, #20]
 8010176:	9304      	str	r3, [sp, #16]
 8010178:	2300      	movs	r3, #0
 801017a:	9303      	str	r3, [sp, #12]
 801017c:	4b75      	ldr	r3, [pc, #468]	@ (8010354 <lfs_dir_splittingcompact+0x218>)
 801017e:	9302      	str	r3, [sp, #8]
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	9301      	str	r3, [sp, #4]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	9300      	str	r3, [sp, #0]
 8010188:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801018c:	2200      	movs	r2, #0
 801018e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010190:	68f8      	ldr	r0, [r7, #12]
 8010192:	f7fe f899 	bl	800e2c8 <lfs_dir_traverse>
 8010196:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8010198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801019a:	2b00      	cmp	r3, #0
 801019c:	d001      	beq.n	80101a2 <lfs_dir_splittingcompact+0x66>
                return err;
 801019e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101a0:	e0d2      	b.n	8010348 <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 80101a2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80101a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101a8:	1ad3      	subs	r3, r2, r3
 80101aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80101ac:	d822      	bhi.n	80101f4 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 80101b4:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d004      	beq.n	80101cc <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 80101c8:	085b      	lsrs	r3, r3, #1
 80101ca:	e003      	b.n	80101d4 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 80101d2:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 80101d4:	68fa      	ldr	r2, [r7, #12]
 80101d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80101d8:	6a12      	ldr	r2, [r2, #32]
                    && size <= lfs_min(
 80101da:	4611      	mov	r1, r2
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fc fd57 	bl	800cc90 <lfs_alignup>
 80101e2:	4603      	mov	r3, r0
 80101e4:	4619      	mov	r1, r3
 80101e6:	4620      	mov	r0, r4
 80101e8:	f7fc fd2d 	bl	800cc46 <lfs_min>
 80101ec:	4602      	mov	r2, r0
 80101ee:	69bb      	ldr	r3, [r7, #24]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d20e      	bcs.n	8010212 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 80101f4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80101f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101fa:	1ad3      	subs	r3, r2, r3
 80101fc:	085b      	lsrs	r3, r3, #1
 80101fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010200:	4413      	add	r3, r2
 8010202:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8010204:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8010208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801020a:	1ad3      	subs	r3, r2, r3
 801020c:	2b01      	cmp	r3, #1
 801020e:	d8a0      	bhi.n	8010152 <lfs_dir_splittingcompact+0x16>
 8010210:	e000      	b.n	8010214 <lfs_dir_splittingcompact+0xd8>
                break;
 8010212:	bf00      	nop
        }

        if (split == begin) {
 8010214:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801021a:	429a      	cmp	r2, r3
 801021c:	d02d      	beq.n	801027a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801021e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010220:	b29b      	uxth	r3, r3
 8010222:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8010226:	9202      	str	r2, [sp, #8]
 8010228:	9301      	str	r3, [sp, #4]
 801022a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801022c:	9300      	str	r3, [sp, #0]
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	68b9      	ldr	r1, [r7, #8]
 8010234:	68f8      	ldr	r0, [r7, #12]
 8010236:	f7ff fce3 	bl	800fc00 <lfs_dir_split>
 801023a:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 801023c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801023e:	2b00      	cmp	r3, #0
 8010240:	d005      	beq.n	801024e <lfs_dir_splittingcompact+0x112>
 8010242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010244:	f113 0f1c 	cmn.w	r3, #28
 8010248:	d001      	beq.n	801024e <lfs_dir_splittingcompact+0x112>
            return err;
 801024a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801024c:	e07c      	b.n	8010348 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 801024e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00e      	beq.n	8010272 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	493e      	ldr	r1, [pc, #248]	@ (8010358 <lfs_dir_splittingcompact+0x21c>)
 801025e:	9101      	str	r1, [sp, #4]
 8010260:	9300      	str	r3, [sp, #0]
 8010262:	4613      	mov	r3, r2
 8010264:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 8010268:	493c      	ldr	r1, [pc, #240]	@ (801035c <lfs_dir_splittingcompact+0x220>)
 801026a:	483d      	ldr	r0, [pc, #244]	@ (8010360 <lfs_dir_splittingcompact+0x224>)
 801026c:	f012 fed0 	bl	8023010 <printf>
                    dir->pair[0], dir->pair[1]);
            break;
 8010270:	e004      	b.n	801027c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8010272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010274:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 8010278:	e767      	b.n	801014a <lfs_dir_splittingcompact+0xe>
            break;
 801027a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 801027c:	68b9      	ldr	r1, [r7, #8]
 801027e:	68f8      	ldr	r0, [r7, #12]
 8010280:	f7ff fd3d 	bl	800fcfe <lfs_dir_needsrelocation>
 8010284:	4603      	mov	r3, r0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d04f      	beq.n	801032a <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	2200      	movs	r2, #0
 801028e:	613a      	str	r2, [r7, #16]
 8010290:	2201      	movs	r2, #1
 8010292:	617a      	str	r2, [r7, #20]
 8010294:	f107 0210 	add.w	r2, r7, #16
 8010298:	4611      	mov	r1, r2
 801029a:	4618      	mov	r0, r3
 801029c:	f7fd f950 	bl	800d540 <lfs_pair_cmp>
 80102a0:	4603      	mov	r3, r0
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d141      	bne.n	801032a <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 80102a6:	68f8      	ldr	r0, [r7, #12]
 80102a8:	f004 f8ea 	bl	8014480 <lfs_fs_size_>
 80102ac:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 80102ae:	6a3b      	ldr	r3, [r7, #32]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	da01      	bge.n	80102b8 <lfs_dir_splittingcompact+0x17c>
            return size;
 80102b4:	6a3b      	ldr	r3, [r7, #32]
 80102b6:	e047      	b.n	8010348 <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80102bc:	6a3b      	ldr	r3, [r7, #32]
 80102be:	1ad2      	subs	r2, r2, r3
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102c4:	08db      	lsrs	r3, r3, #3
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d92f      	bls.n	801032a <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	689b      	ldr	r3, [r3, #8]
 80102ce:	4a22      	ldr	r2, [pc, #136]	@ (8010358 <lfs_dir_splittingcompact+0x21c>)
 80102d0:	9200      	str	r2, [sp, #0]
 80102d2:	f640 0286 	movw	r2, #2182	@ 0x886
 80102d6:	4921      	ldr	r1, [pc, #132]	@ (801035c <lfs_dir_splittingcompact+0x220>)
 80102d8:	4822      	ldr	r0, [pc, #136]	@ (8010364 <lfs_dir_splittingcompact+0x228>)
 80102da:	f012 fe99 	bl	8023010 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80102de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80102e2:	9302      	str	r3, [sp, #8]
 80102e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80102e8:	9301      	str	r3, [sp, #4]
 80102ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102ec:	9300      	str	r3, [sp, #0]
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	68b9      	ldr	r1, [r7, #8]
 80102f4:	68f8      	ldr	r0, [r7, #12]
 80102f6:	f7ff fc83 	bl	800fc00 <lfs_dir_split>
 80102fa:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d005      	beq.n	801030e <lfs_dir_splittingcompact+0x1d2>
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	f113 0f1c 	cmn.w	r3, #28
 8010308:	d001      	beq.n	801030e <lfs_dir_splittingcompact+0x1d2>
                return err;
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	e01c      	b.n	8010348 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d007      	beq.n	8010324 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8010314:	4b10      	ldr	r3, [pc, #64]	@ (8010358 <lfs_dir_splittingcompact+0x21c>)
 8010316:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801031a:	4910      	ldr	r1, [pc, #64]	@ (801035c <lfs_dir_splittingcompact+0x220>)
 801031c:	4812      	ldr	r0, [pc, #72]	@ (8010368 <lfs_dir_splittingcompact+0x22c>)
 801031e:	f012 fe77 	bl	8023010 <printf>
 8010322:	e002      	b.n	801032a <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 8010324:	2301      	movs	r3, #1
 8010326:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801032a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801032e:	9302      	str	r3, [sp, #8]
 8010330:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010334:	9301      	str	r3, [sp, #4]
 8010336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010338:	9300      	str	r3, [sp, #0]
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	68b9      	ldr	r1, [r7, #8]
 8010340:	68f8      	ldr	r0, [r7, #12]
 8010342:	f7ff fd03 	bl	800fd4c <lfs_dir_compact>
 8010346:	4603      	mov	r3, r0
}
 8010348:	4618      	mov	r0, r3
 801034a:	3734      	adds	r7, #52	@ 0x34
 801034c:	46bd      	mov	sp, r7
 801034e:	bd90      	pop	{r4, r7, pc}
 8010350:	0800fca9 	.word	0x0800fca9
 8010354:	400ffc00 	.word	0x400ffc00
 8010358:	080305ac 	.word	0x080305ac
 801035c:	08030484 	.word	0x08030484
 8010360:	08030688 	.word	0x08030688
 8010364:	080306b8 	.word	0x080306b8
 8010368:	080306e8 	.word	0x080306e8

0801036c <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 801036c:	b5b0      	push	{r4, r5, r7, lr}
 801036e:	b0a6      	sub	sp, #152	@ 0x98
 8010370:	af0a      	add	r7, sp, #40	@ 0x28
 8010372:	60f8      	str	r0, [r7, #12]
 8010374:	60b9      	str	r1, [r7, #8]
 8010376:	607a      	str	r2, [r7, #4]
 8010378:	603b      	str	r3, [r7, #0]
    int state = 0;
 801037a:	2300      	movs	r3, #0
 801037c:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 801037e:	2300      	movs	r3, #0
 8010380:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 8010384:	2300      	movs	r3, #0
 8010386:	667b      	str	r3, [r7, #100]	@ 0x64
 8010388:	e06d      	b.n	8010466 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801038a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801038c:	00db      	lsls	r3, r3, #3
 801038e:	683a      	ldr	r2, [r7, #0]
 8010390:	4413      	add	r3, r2
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4618      	mov	r0, r3
 8010396:	f7fd f99f 	bl	800d6d8 <lfs_tag_type3>
 801039a:	4603      	mov	r3, r0
 801039c:	461a      	mov	r2, r3
 801039e:	f240 4301 	movw	r3, #1025	@ 0x401
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d106      	bne.n	80103b4 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	8a9b      	ldrh	r3, [r3, #20]
 80103aa:	3301      	adds	r3, #1
 80103ac:	b29a      	uxth	r2, r3
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	829a      	strh	r2, [r3, #20]
 80103b2:	e055      	b.n	8010460 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80103b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103b6:	00db      	lsls	r3, r3, #3
 80103b8:	683a      	ldr	r2, [r7, #0]
 80103ba:	4413      	add	r3, r2
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	4618      	mov	r0, r3
 80103c0:	f7fd f98a 	bl	800d6d8 <lfs_tag_type3>
 80103c4:	4603      	mov	r3, r0
 80103c6:	461a      	mov	r2, r3
 80103c8:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d114      	bne.n	80103fa <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	8a9b      	ldrh	r3, [r3, #20]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d106      	bne.n	80103e6 <lfs_dir_relocatingcommit+0x7a>
 80103d8:	4ba4      	ldr	r3, [pc, #656]	@ (801066c <lfs_dir_relocatingcommit+0x300>)
 80103da:	4aa5      	ldr	r2, [pc, #660]	@ (8010670 <lfs_dir_relocatingcommit+0x304>)
 80103dc:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 80103e0:	48a4      	ldr	r0, [pc, #656]	@ (8010674 <lfs_dir_relocatingcommit+0x308>)
 80103e2:	f012 fde1 	bl	8022fa8 <__assert_func>
            dir->count -= 1;
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	8a9b      	ldrh	r3, [r3, #20]
 80103ea:	3b01      	subs	r3, #1
 80103ec:	b29a      	uxth	r2, r3
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 80103f2:	2301      	movs	r3, #1
 80103f4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 80103f8:	e032      	b.n	8010460 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80103fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103fc:	00db      	lsls	r3, r3, #3
 80103fe:	683a      	ldr	r2, [r7, #0]
 8010400:	4413      	add	r3, r2
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	4618      	mov	r0, r3
 8010406:	f7fd f947 	bl	800d698 <lfs_tag_type1>
 801040a:	4603      	mov	r3, r0
 801040c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8010410:	d126      	bne.n	8010460 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8010412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010414:	00db      	lsls	r3, r3, #3
 8010416:	683a      	ldr	r2, [r7, #0]
 8010418:	4413      	add	r3, r2
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	681a      	ldr	r2, [r3, #0]
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8010422:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010424:	00db      	lsls	r3, r3, #3
 8010426:	683a      	ldr	r2, [r7, #0]
 8010428:	4413      	add	r3, r2
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	685a      	ldr	r2, [r3, #4]
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8010432:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010434:	00db      	lsls	r3, r3, #3
 8010436:	683a      	ldr	r2, [r7, #0]
 8010438:	4413      	add	r3, r2
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4618      	mov	r0, r3
 801043e:	f7fd f95b 	bl	800d6f8 <lfs_tag_chunk>
 8010442:	4603      	mov	r3, r0
 8010444:	f003 0301 	and.w	r3, r3, #1
 8010448:	2b00      	cmp	r3, #0
 801044a:	bf14      	ite	ne
 801044c:	2301      	movne	r3, #1
 801044e:	2300      	moveq	r3, #0
 8010450:	b2da      	uxtb	r2, r3
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	3318      	adds	r3, #24
 801045a:	4618      	mov	r0, r3
 801045c:	f7fd f8c7 	bl	800d5ee <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8010460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010462:	3301      	adds	r3, #1
 8010464:	667b      	str	r3, [r7, #100]	@ 0x64
 8010466:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010468:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801046c:	429a      	cmp	r2, r3
 801046e:	db8c      	blt.n	801038a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8010470:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010474:	2b00      	cmp	r3, #0
 8010476:	d02b      	beq.n	80104d0 <lfs_dir_relocatingcommit+0x164>
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	8a9b      	ldrh	r3, [r3, #20]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d127      	bne.n	80104d0 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8010480:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010484:	2b00      	cmp	r3, #0
 8010486:	d106      	bne.n	8010496 <lfs_dir_relocatingcommit+0x12a>
 8010488:	4b7b      	ldr	r3, [pc, #492]	@ (8010678 <lfs_dir_relocatingcommit+0x30c>)
 801048a:	4a79      	ldr	r2, [pc, #484]	@ (8010670 <lfs_dir_relocatingcommit+0x304>)
 801048c:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 8010490:	4878      	ldr	r0, [pc, #480]	@ (8010674 <lfs_dir_relocatingcommit+0x308>)
 8010492:	f012 fd89 	bl	8022fa8 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801049c:	4619      	mov	r1, r3
 801049e:	68f8      	ldr	r0, [r7, #12]
 80104a0:	f003 fb4a 	bl	8013b38 <lfs_fs_pred>
 80104a4:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 80104a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d005      	beq.n	80104b8 <lfs_dir_relocatingcommit+0x14c>
 80104ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80104ae:	f113 0f02 	cmn.w	r3, #2
 80104b2:	d001      	beq.n	80104b8 <lfs_dir_relocatingcommit+0x14c>
            return err;
 80104b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80104b6:	e210      	b.n	80108da <lfs_dir_relocatingcommit+0x56e>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 80104b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80104ba:	f113 0f02 	cmn.w	r3, #2
 80104be:	d007      	beq.n	80104d0 <lfs_dir_relocatingcommit+0x164>
 80104c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80104c4:	7ddb      	ldrb	r3, [r3, #23]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d002      	beq.n	80104d0 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 80104ca:	2302      	movs	r3, #2
 80104cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 80104ce:	e121      	b.n	8010714 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	7d9b      	ldrb	r3, [r3, #22]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	f000 80fb 	beq.w	80106d0 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 80104de:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80104e4:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 80104ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80104ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80104f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80104f6:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80104fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d004      	beq.n	801050c <lfs_dir_relocatingcommit+0x1a0>
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010508:	3b08      	subs	r3, #8
 801050a:	e003      	b.n	8010514 <lfs_dir_relocatingcommit+0x1a8>
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010512:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8010514:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	3318      	adds	r3, #24
 801051a:	4618      	mov	r0, r3
 801051c:	f7fd f881 	bl	800d622 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	68da      	ldr	r2, [r3, #12]
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801052c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010530:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 8010532:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010536:	9308      	str	r3, [sp, #32]
 8010538:	4b50      	ldr	r3, [pc, #320]	@ (801067c <lfs_dir_relocatingcommit+0x310>)
 801053a:	9307      	str	r3, [sp, #28]
 801053c:	2300      	movs	r3, #0
 801053e:	9306      	str	r3, [sp, #24]
 8010540:	2300      	movs	r3, #0
 8010542:	9305      	str	r3, [sp, #20]
 8010544:	2300      	movs	r3, #0
 8010546:	9304      	str	r3, [sp, #16]
 8010548:	2300      	movs	r3, #0
 801054a:	9303      	str	r3, [sp, #12]
 801054c:	2300      	movs	r3, #0
 801054e:	9302      	str	r3, [sp, #8]
 8010550:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010554:	9301      	str	r3, [sp, #4]
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	9300      	str	r3, [sp, #0]
 801055a:	460b      	mov	r3, r1
 801055c:	68b9      	ldr	r1, [r7, #8]
 801055e:	68f8      	ldr	r0, [r7, #12]
 8010560:	f7fd feb2 	bl	800e2c8 <lfs_dir_traverse>
 8010564:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	3318      	adds	r3, #24
 801056a:	4618      	mov	r0, r3
 801056c:	f7fd f83f 	bl	800d5ee <lfs_pair_fromle32>
        if (err) {
 8010570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010572:	2b00      	cmp	r3, #0
 8010574:	d00b      	beq.n	801058e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8010576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010578:	f113 0f1c 	cmn.w	r3, #28
 801057c:	f000 80aa 	beq.w	80106d4 <lfs_dir_relocatingcommit+0x368>
 8010580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010582:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010586:	f000 80a5 	beq.w	80106d4 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 801058a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801058c:	e1a5      	b.n	80108da <lfs_dir_relocatingcommit+0x56e>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 801058e:	f107 031c 	add.w	r3, r7, #28
 8010592:	2200      	movs	r2, #0
 8010594:	601a      	str	r2, [r3, #0]
 8010596:	605a      	str	r2, [r3, #4]
 8010598:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80105a0:	f107 031c 	add.w	r3, r7, #28
 80105a4:	4611      	mov	r1, r2
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7fd f8f1 	bl	800d78e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80105b2:	f107 031c 	add.w	r3, r7, #28
 80105b6:	4611      	mov	r1, r2
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7fd f8e8 	bl	800d78e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80105c4:	f107 031c 	add.w	r3, r7, #28
 80105c8:	4611      	mov	r1, r2
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fd f8df 	bl	800d78e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80105d6:	f023 0303 	bic.w	r3, r3, #3
 80105da:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 80105dc:	f107 031c 	add.w	r3, r7, #28
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7fd f8f9 	bl	800d7d8 <lfs_gstate_iszero>
 80105e6:	4603      	mov	r3, r0
 80105e8:	f083 0301 	eor.w	r3, r3, #1
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d027      	beq.n	8010642 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80105f2:	f107 031c 	add.w	r3, r7, #28
 80105f6:	461a      	mov	r2, r3
 80105f8:	68b9      	ldr	r1, [r7, #8]
 80105fa:	68f8      	ldr	r0, [r7, #12]
 80105fc:	f7fe fe34 	bl	800f268 <lfs_dir_getgstate>
 8010600:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 8010602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010604:	2b00      	cmp	r3, #0
 8010606:	d001      	beq.n	801060c <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8010608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801060a:	e166      	b.n	80108da <lfs_dir_relocatingcommit+0x56e>
            }

            lfs_gstate_tole32(&delta);
 801060c:	f107 031c 	add.w	r3, r7, #28
 8010610:	4618      	mov	r0, r3
 8010612:	f7fd f987 	bl	800d924 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8010616:	f107 031c 	add.w	r3, r7, #28
 801061a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801061e:	4a18      	ldr	r2, [pc, #96]	@ (8010680 <lfs_dir_relocatingcommit+0x314>)
 8010620:	68f8      	ldr	r0, [r7, #12]
 8010622:	f7ff f847 	bl	800f6b4 <lfs_dir_commitattr>
 8010626:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8010628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801062a:	2b00      	cmp	r3, #0
 801062c:	d009      	beq.n	8010642 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801062e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010630:	f113 0f1c 	cmn.w	r3, #28
 8010634:	d050      	beq.n	80106d8 <lfs_dir_relocatingcommit+0x36c>
 8010636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010638:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801063c:	d04c      	beq.n	80106d8 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 801063e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010640:	e14b      	b.n	80108da <lfs_dir_relocatingcommit+0x56e>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8010642:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010646:	4619      	mov	r1, r3
 8010648:	68f8      	ldr	r0, [r7, #12]
 801064a:	f7ff f8b3 	bl	800f7b4 <lfs_dir_commitcrc>
 801064e:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 8010650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010652:	2b00      	cmp	r3, #0
 8010654:	d016      	beq.n	8010684 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8010656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010658:	f113 0f1c 	cmn.w	r3, #28
 801065c:	d03e      	beq.n	80106dc <lfs_dir_relocatingcommit+0x370>
 801065e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010660:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010664:	d03a      	beq.n	80106dc <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8010666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010668:	e137      	b.n	80108da <lfs_dir_relocatingcommit+0x56e>
 801066a:	bf00      	nop
 801066c:	08030714 	.word	0x08030714
 8010670:	08033c70 	.word	0x08033c70
 8010674:	08030484 	.word	0x08030484
 8010678:	08030724 	.word	0x08030724
 801067c:	0800fcd5 	.word	0x0800fcd5
 8010680:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8010684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010686:	68fa      	ldr	r2, [r7, #12]
 8010688:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801068a:	6a12      	ldr	r2, [r2, #32]
 801068c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010690:	fb01 f202 	mul.w	r2, r1, r2
 8010694:	1a9b      	subs	r3, r3, r2
 8010696:	2b00      	cmp	r3, #0
 8010698:	d006      	beq.n	80106a8 <lfs_dir_relocatingcommit+0x33c>
 801069a:	4b92      	ldr	r3, [pc, #584]	@ (80108e4 <lfs_dir_relocatingcommit+0x578>)
 801069c:	4a92      	ldr	r2, [pc, #584]	@ (80108e8 <lfs_dir_relocatingcommit+0x57c>)
 801069e:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 80106a2:	4892      	ldr	r0, [pc, #584]	@ (80108ec <lfs_dir_relocatingcommit+0x580>)
 80106a4:	f012 fc80 	bl	8022fa8 <__assert_func>
        dir->off = commit.off;
 80106a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80106ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	68fa      	ldr	r2, [r7, #12]
 80106b8:	333c      	adds	r3, #60	@ 0x3c
 80106ba:	3230      	adds	r2, #48	@ 0x30
 80106bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80106be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	3348      	adds	r3, #72	@ 0x48
 80106c6:	2200      	movs	r2, #0
 80106c8:	601a      	str	r2, [r3, #0]
 80106ca:	605a      	str	r2, [r3, #4]
 80106cc:	609a      	str	r2, [r3, #8]
 80106ce:	e021      	b.n	8010714 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80106d0:	bf00      	nop
 80106d2:	e004      	b.n	80106de <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80106d4:	bf00      	nop
 80106d6:	e002      	b.n	80106de <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 80106d8:	bf00      	nop
 80106da:	e000      	b.n	80106de <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80106dc:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	3310      	adds	r3, #16
 80106e2:	4619      	mov	r1, r3
 80106e4:	68f8      	ldr	r0, [r7, #12]
 80106e6:	f7fc fb64 	bl	800cdb2 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	8a9b      	ldrh	r3, [r3, #20]
 80106ee:	9302      	str	r3, [sp, #8]
 80106f0:	2300      	movs	r3, #0
 80106f2:	9301      	str	r3, [sp, #4]
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	9300      	str	r3, [sp, #0]
 80106f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80106fc:	683a      	ldr	r2, [r7, #0]
 80106fe:	68b9      	ldr	r1, [r7, #8]
 8010700:	68f8      	ldr	r0, [r7, #12]
 8010702:	f7ff fd1b 	bl	801013c <lfs_dir_splittingcompact>
 8010706:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8010708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801070a:	2b00      	cmp	r3, #0
 801070c:	da01      	bge.n	8010712 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 801070e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010710:	e0e3      	b.n	80108da <lfs_dir_relocatingcommit+0x56e>
    }

    goto fixmlist;
 8010712:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	64bb      	str	r3, [r7, #72]	@ 0x48
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	3304      	adds	r3, #4
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010726:	663b      	str	r3, [r7, #96]	@ 0x60
 8010728:	e0d2      	b.n	80108d0 <lfs_dir_relocatingcommit+0x564>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 801072a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801072c:	3308      	adds	r3, #8
 801072e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8010732:	4611      	mov	r1, r2
 8010734:	4618      	mov	r0, r3
 8010736:	f7fc ff03 	bl	800d540 <lfs_pair_cmp>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	f040 80c4 	bne.w	80108ca <lfs_dir_relocatingcommit+0x55e>
            d->m = *dir;
 8010742:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010744:	68ba      	ldr	r2, [r7, #8]
 8010746:	f103 0408 	add.w	r4, r3, #8
 801074a:	4615      	mov	r5, r2
 801074c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801074e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010750:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8010758:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801075a:	3308      	adds	r3, #8
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	429a      	cmp	r2, r3
 8010760:	f000 80a9 	beq.w	80108b6 <lfs_dir_relocatingcommit+0x54a>
                for (int i = 0; i < attrcount; i++) {
 8010764:	2300      	movs	r3, #0
 8010766:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010768:	e07b      	b.n	8010862 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801076a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801076c:	00db      	lsls	r3, r3, #3
 801076e:	683a      	ldr	r2, [r7, #0]
 8010770:	4413      	add	r3, r2
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	4618      	mov	r0, r3
 8010776:	f7fc ffaf 	bl	800d6d8 <lfs_tag_type3>
 801077a:	4603      	mov	r3, r0
 801077c:	461a      	mov	r2, r3
 801077e:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8010782:	429a      	cmp	r2, r3
 8010784:	d115      	bne.n	80107b2 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8010786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010788:	889c      	ldrh	r4, [r3, #4]
 801078a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801078c:	00db      	lsls	r3, r3, #3
 801078e:	683a      	ldr	r2, [r7, #0]
 8010790:	4413      	add	r3, r2
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4618      	mov	r0, r3
 8010796:	f7fc ffc9 	bl	800d72c <lfs_tag_id>
 801079a:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801079c:	429c      	cmp	r4, r3
 801079e:	d108      	bne.n	80107b2 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80107a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80107a6:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80107a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80107ae:	60da      	str	r2, [r3, #12]
 80107b0:	e054      	b.n	801085c <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80107b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80107b4:	00db      	lsls	r3, r3, #3
 80107b6:	683a      	ldr	r2, [r7, #0]
 80107b8:	4413      	add	r3, r2
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fc ff8b 	bl	800d6d8 <lfs_tag_type3>
 80107c2:	4603      	mov	r3, r0
 80107c4:	461a      	mov	r2, r3
 80107c6:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d11c      	bne.n	8010808 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80107ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107d0:	889c      	ldrh	r4, [r3, #4]
 80107d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80107d4:	00db      	lsls	r3, r3, #3
 80107d6:	683a      	ldr	r2, [r7, #0]
 80107d8:	4413      	add	r3, r2
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	4618      	mov	r0, r3
 80107de:	f7fc ffa5 	bl	800d72c <lfs_tag_id>
 80107e2:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80107e4:	429c      	cmp	r4, r3
 80107e6:	d90f      	bls.n	8010808 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 80107e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107ea:	889b      	ldrh	r3, [r3, #4]
 80107ec:	3b01      	subs	r3, #1
 80107ee:	b29a      	uxth	r2, r3
 80107f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107f2:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80107f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107f6:	799b      	ldrb	r3, [r3, #6]
 80107f8:	2b02      	cmp	r3, #2
 80107fa:	d12f      	bne.n	801085c <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 80107fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80107fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010800:	1e5a      	subs	r2, r3, #1
 8010802:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010804:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8010806:	e029      	b.n	801085c <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8010808:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801080a:	00db      	lsls	r3, r3, #3
 801080c:	683a      	ldr	r2, [r7, #0]
 801080e:	4413      	add	r3, r2
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	4618      	mov	r0, r3
 8010814:	f7fc ff60 	bl	800d6d8 <lfs_tag_type3>
 8010818:	4603      	mov	r3, r0
 801081a:	461a      	mov	r2, r3
 801081c:	f240 4301 	movw	r3, #1025	@ 0x401
 8010820:	429a      	cmp	r2, r3
 8010822:	d11b      	bne.n	801085c <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8010824:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010826:	889c      	ldrh	r4, [r3, #4]
 8010828:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801082a:	00db      	lsls	r3, r3, #3
 801082c:	683a      	ldr	r2, [r7, #0]
 801082e:	4413      	add	r3, r2
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	4618      	mov	r0, r3
 8010834:	f7fc ff7a 	bl	800d72c <lfs_tag_id>
 8010838:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801083a:	429c      	cmp	r4, r3
 801083c:	d30e      	bcc.n	801085c <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 801083e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010840:	889b      	ldrh	r3, [r3, #4]
 8010842:	3301      	adds	r3, #1
 8010844:	b29a      	uxth	r2, r3
 8010846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010848:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801084a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801084c:	799b      	ldrb	r3, [r3, #6]
 801084e:	2b02      	cmp	r3, #2
 8010850:	d104      	bne.n	801085c <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8010852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010856:	1c5a      	adds	r2, r3, #1
 8010858:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801085a:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 801085c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801085e:	3301      	adds	r3, #1
 8010860:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010862:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010864:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010868:	429a      	cmp	r2, r3
 801086a:	f6ff af7e 	blt.w	801076a <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 801086e:	e022      	b.n	80108b6 <lfs_dir_relocatingcommit+0x54a>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 8010870:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010872:	f103 0220 	add.w	r2, r3, #32
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	3320      	adds	r3, #32
 801087a:	4619      	mov	r1, r3
 801087c:	4610      	mov	r0, r2
 801087e:	f7fc fe5f 	bl	800d540 <lfs_pair_cmp>
 8010882:	4603      	mov	r3, r0
 8010884:	2b00      	cmp	r3, #0
 8010886:	d007      	beq.n	8010898 <lfs_dir_relocatingcommit+0x52c>
                    d->id -= d->m.count;
 8010888:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801088a:	889a      	ldrh	r2, [r3, #4]
 801088c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801088e:	8b9b      	ldrh	r3, [r3, #28]
 8010890:	1ad3      	subs	r3, r2, r3
 8010892:	b29a      	uxth	r2, r3
 8010894:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010896:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8010898:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801089a:	f103 0108 	add.w	r1, r3, #8
 801089e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108a0:	3320      	adds	r3, #32
 80108a2:	461a      	mov	r2, r3
 80108a4:	68f8      	ldr	r0, [r7, #12]
 80108a6:	f7fe fcc3 	bl	800f230 <lfs_dir_fetch>
 80108aa:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 80108ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d001      	beq.n	80108b6 <lfs_dir_relocatingcommit+0x54a>
                    return err;
 80108b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108b4:	e011      	b.n	80108da <lfs_dir_relocatingcommit+0x56e>
            while (d->id >= d->m.count && d->m.split) {
 80108b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108b8:	889a      	ldrh	r2, [r3, #4]
 80108ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108bc:	8b9b      	ldrh	r3, [r3, #28]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d303      	bcc.n	80108ca <lfs_dir_relocatingcommit+0x55e>
 80108c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108c4:	7fdb      	ldrb	r3, [r3, #31]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d1d2      	bne.n	8010870 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80108ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80108d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	f47f af29 	bne.w	801072a <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 80108d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3770      	adds	r7, #112	@ 0x70
 80108de:	46bd      	mov	sp, r7
 80108e0:	bdb0      	pop	{r4, r5, r7, pc}
 80108e2:	bf00      	nop
 80108e4:	08030604 	.word	0x08030604
 80108e8:	08033c70 	.word	0x08033c70
 80108ec:	08030484 	.word	0x08030484

080108f0 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80108f0:	b5b0      	push	{r4, r5, r7, lr}
 80108f2:	b0bc      	sub	sp, #240	@ 0xf0
 80108f4:	af04      	add	r7, sp, #16
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	60b9      	str	r1, [r7, #8]
 80108fa:	607a      	str	r2, [r7, #4]
 80108fc:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010902:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8010906:	e045      	b.n	8010994 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8010908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801090c:	3308      	adds	r3, #8
 801090e:	68ba      	ldr	r2, [r7, #8]
 8010910:	429a      	cmp	r2, r3
 8010912:	d03a      	beq.n	801098a <lfs_dir_orphaningcommit+0x9a>
 8010914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010918:	3308      	adds	r3, #8
 801091a:	68ba      	ldr	r2, [r7, #8]
 801091c:	4611      	mov	r1, r2
 801091e:	4618      	mov	r0, r3
 8010920:	f7fc fe0e 	bl	800d540 <lfs_pair_cmp>
 8010924:	4603      	mov	r3, r0
 8010926:	2b00      	cmp	r3, #0
 8010928:	d12f      	bne.n	801098a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801092a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801092e:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8010930:	2b01      	cmp	r3, #1
 8010932:	d12a      	bne.n	801098a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8010934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801093a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801093e:	2b00      	cmp	r3, #0
 8010940:	d023      	beq.n	801098a <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8010942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801094e:	429a      	cmp	r2, r3
 8010950:	d91b      	bls.n	801098a <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8010952:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8010956:	68f8      	ldr	r0, [r7, #12]
 8010958:	f001 fa3e 	bl	8011dd8 <lfs_file_outline>
 801095c:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8010960:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010964:	2b00      	cmp	r3, #0
 8010966:	d002      	beq.n	801096e <lfs_dir_orphaningcommit+0x7e>
                return err;
 8010968:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801096c:	e2ad      	b.n	8010eca <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 801096e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	f001 fa52 	bl	8011e1c <lfs_file_flush>
 8010978:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 801097c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010980:	2b00      	cmp	r3, #0
 8010982:	d002      	beq.n	801098a <lfs_dir_orphaningcommit+0x9a>
                return err;
 8010984:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010988:	e29f      	b.n	8010eca <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801098a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8010994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010998:	2b00      	cmp	r3, #0
 801099a:	d1b5      	bne.n	8010908 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	685b      	ldr	r3, [r3, #4]
 80109a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80109b2:	461d      	mov	r5, r3
 80109b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80109bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80109c0:	68ba      	ldr	r2, [r7, #8]
 80109c2:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80109c6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80109ca:	9301      	str	r3, [sp, #4]
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	9300      	str	r3, [sp, #0]
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	68f8      	ldr	r0, [r7, #12]
 80109d4:	f7ff fcca 	bl	801036c <lfs_dir_relocatingcommit>
 80109d8:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 80109dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	da02      	bge.n	80109ea <lfs_dir_orphaningcommit+0xfa>
        return state;
 80109e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80109e8:	e26f      	b.n	8010eca <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80109f0:	4611      	mov	r1, r2
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7fc fda4 	bl	800d540 <lfs_pair_cmp>
 80109f8:	4603      	mov	r3, r0
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d109      	bne.n	8010a12 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	461d      	mov	r5, r3
 8010a02:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8010a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010a0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010a0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8010a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010a16:	2b02      	cmp	r3, #2
 8010a18:	d14a      	bne.n	8010ab0 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	3348      	adds	r3, #72	@ 0x48
 8010a1e:	461a      	mov	r2, r3
 8010a20:	68b9      	ldr	r1, [r7, #8]
 8010a22:	68f8      	ldr	r0, [r7, #12]
 8010a24:	f7fe fc20 	bl	800f268 <lfs_dir_getgstate>
 8010a28:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8010a2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d002      	beq.n	8010a3a <lfs_dir_orphaningcommit+0x14a>
            return err;
 8010a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010a38:	e247      	b.n	8010eca <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8010a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 8010a40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010a42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	3318      	adds	r3, #24
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7fc fde9 	bl	800d622 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	7ddb      	ldrb	r3, [r3, #23]
 8010a54:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8010a58:	051a      	lsls	r2, r3, #20
 8010a5a:	4bc2      	ldr	r3, [pc, #776]	@ (8010d64 <lfs_dir_orphaningcommit+0x474>)
 8010a5c:	4313      	orrs	r3, r2
 8010a5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	3318      	adds	r3, #24
 8010a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010a66:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8010a6a:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8010a6e:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8010a72:	2000      	movs	r0, #0
 8010a74:	9001      	str	r0, [sp, #4]
 8010a76:	2001      	movs	r0, #1
 8010a78:	9000      	str	r0, [sp, #0]
 8010a7a:	68f8      	ldr	r0, [r7, #12]
 8010a7c:	f7ff fc76 	bl	801036c <lfs_dir_relocatingcommit>
 8010a80:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	3318      	adds	r3, #24
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7fc fdb0 	bl	800d5ee <lfs_pair_fromle32>
        if (state < 0) {
 8010a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	da02      	bge.n	8010a9c <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8010a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010a9a:	e216      	b.n	8010eca <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8010a9c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8010aa0:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8010aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010aa8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010aac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 8010ab6:	e1fc      	b.n	8010eb2 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8010ab8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8010abc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8010ac0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010ac4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010ac8:	4ca7      	ldr	r4, [pc, #668]	@ (8010d68 <lfs_dir_orphaningcommit+0x478>)
 8010aca:	9403      	str	r4, [sp, #12]
 8010acc:	9102      	str	r1, [sp, #8]
 8010ace:	9201      	str	r2, [sp, #4]
 8010ad0:	9300      	str	r3, [sp, #0]
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	f640 128c 	movw	r2, #2444	@ 0x98c
 8010ad8:	49a4      	ldr	r1, [pc, #656]	@ (8010d6c <lfs_dir_orphaningcommit+0x47c>)
 8010ada:	48a5      	ldr	r0, [pc, #660]	@ (8010d70 <lfs_dir_orphaningcommit+0x480>)
 8010adc:	f012 fa98 	bl	8023010 <printf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	f103 0220 	add.w	r2, r3, #32
 8010aec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010af0:	4611      	mov	r1, r2
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fc fd24 	bl	800d540 <lfs_pair_cmp>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d107      	bne.n	8010b0e <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8010afe:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8010b06:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010b16:	e037      	b.n	8010b88 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8010b18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b1c:	f103 0208 	add.w	r2, r3, #8
 8010b20:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010b24:	4611      	mov	r1, r2
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7fc fd0a 	bl	800d540 <lfs_pair_cmp>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d109      	bne.n	8010b46 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8010b32:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010b36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b3a:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8010b3c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8010b40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b44:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8010b46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b4a:	799b      	ldrb	r3, [r3, #6]
 8010b4c:	2b02      	cmp	r3, #2
 8010b4e:	d116      	bne.n	8010b7e <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8010b50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b54:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8010b58:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010b5c:	4611      	mov	r1, r2
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fc fcee 	bl	800d540 <lfs_pair_cmp>
 8010b64:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d109      	bne.n	8010b7e <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8010b6a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010b6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b72:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8010b74:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8010b78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b7c:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010b7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010b88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d1c3      	bne.n	8010b18 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8010b90:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8010b94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010b98:	4619      	mov	r1, r3
 8010b9a:	68f8      	ldr	r0, [r7, #12]
 8010b9c:	f003 f87e 	bl	8013c9c <lfs_fs_parent>
 8010ba0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8010ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	da07      	bge.n	8010bbc <lfs_dir_orphaningcommit+0x2cc>
 8010bac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010bb0:	f113 0f02 	cmn.w	r3, #2
 8010bb4:	d002      	beq.n	8010bbc <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8010bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010bba:	e186      	b.n	8010eca <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8010bbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010bc0:	f113 0f02 	cmn.w	r3, #2
 8010bc4:	bf14      	ite	ne
 8010bc6:	2301      	movne	r3, #1
 8010bc8:	2300      	moveq	r3, #0
 8010bca:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 8010bce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010bd2:	f113 0f02 	cmn.w	r3, #2
 8010bd6:	f000 809e 	beq.w	8010d16 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8010bda:	2101      	movs	r1, #1
 8010bdc:	68f8      	ldr	r0, [r7, #12]
 8010bde:	f003 f8f5 	bl	8013dcc <lfs_fs_preporphans>
 8010be2:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 8010be6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d002      	beq.n	8010bf4 <lfs_dir_orphaningcommit+0x304>
                return err;
 8010bee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010bf2:	e16a      	b.n	8010eca <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8010bf4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8010bf8:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	3330      	adds	r3, #48	@ 0x30
 8010c00:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8010c04:	4611      	mov	r1, r2
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fc fe4c 	bl	800d8a4 <lfs_gstate_hasmovehere>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d02d      	beq.n	8010c6e <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7fc fd88 	bl	800d72c <lfs_tag_id>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 8010c22:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010c24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010c26:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 8010c2a:	484f      	ldr	r0, [pc, #316]	@ (8010d68 <lfs_dir_orphaningcommit+0x478>)
 8010c2c:	9002      	str	r0, [sp, #8]
 8010c2e:	9201      	str	r2, [sp, #4]
 8010c30:	9300      	str	r3, [sp, #0]
 8010c32:	460b      	mov	r3, r1
 8010c34:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 8010c38:	494c      	ldr	r1, [pc, #304]	@ (8010d6c <lfs_dir_orphaningcommit+0x47c>)
 8010c3a:	484e      	ldr	r0, [pc, #312]	@ (8010d74 <lfs_dir_orphaningcommit+0x484>)
 8010c3c:	f012 f9e8 	bl	8023010 <printf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8010c40:	2200      	movs	r2, #0
 8010c42:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8010c46:	68f8      	ldr	r0, [r7, #12]
 8010c48:	f003 f910 	bl	8013e6c <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8010c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7fc fd6b 	bl	800d72c <lfs_tag_id>
 8010c56:	4603      	mov	r3, r0
 8010c58:	461a      	mov	r2, r3
 8010c5a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d205      	bcs.n	8010c6e <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8010c62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010c66:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8010c6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8010c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c70:	657b      	str	r3, [r7, #84]	@ 0x54
 8010c72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010c74:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 8010c76:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fc fcd1 	bl	800d622 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8010c80:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8010c84:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d007      	beq.n	8010c9c <lfs_dir_orphaningcommit+0x3ac>
 8010c8c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8010c90:	029b      	lsls	r3, r3, #10
 8010c92:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8010c96:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8010c9a:	e000      	b.n	8010c9e <lfs_dir_orphaningcommit+0x3ae>
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010caa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010cae:	653b      	str	r3, [r7, #80]	@ 0x50
 8010cb0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010cb4:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8010cb8:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8010cbc:	2000      	movs	r0, #0
 8010cbe:	9001      	str	r0, [sp, #4]
 8010cc0:	2002      	movs	r0, #2
 8010cc2:	9000      	str	r0, [sp, #0]
 8010cc4:	68f8      	ldr	r0, [r7, #12]
 8010cc6:	f7ff fb51 	bl	801036c <lfs_dir_relocatingcommit>
 8010cca:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8010cce:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fc fc8b 	bl	800d5ee <lfs_pair_fromle32>
            if (state < 0) {
 8010cd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	da02      	bge.n	8010ce6 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8010ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010ce4:	e0f1      	b.n	8010eca <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8010ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d113      	bne.n	8010d16 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8010cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8010cf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 8010cfa:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8010cfe:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8010d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010d0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8010d0e:	2301      	movs	r3, #1
 8010d10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8010d14:	e0cd      	b.n	8010eb2 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8010d16:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8010d1a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010d1e:	4619      	mov	r1, r3
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	f002 ff09 	bl	8013b38 <lfs_fs_pred>
 8010d26:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8010d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d007      	beq.n	8010d42 <lfs_dir_orphaningcommit+0x452>
 8010d32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010d36:	f113 0f02 	cmn.w	r3, #2
 8010d3a:	d002      	beq.n	8010d42 <lfs_dir_orphaningcommit+0x452>
            return err;
 8010d3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010d40:	e0c3      	b.n	8010eca <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8010d42:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d01a      	beq.n	8010d80 <lfs_dir_orphaningcommit+0x490>
 8010d4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010d4e:	f113 0f02 	cmn.w	r3, #2
 8010d52:	d115      	bne.n	8010d80 <lfs_dir_orphaningcommit+0x490>
 8010d54:	4b08      	ldr	r3, [pc, #32]	@ (8010d78 <lfs_dir_orphaningcommit+0x488>)
 8010d56:	4a09      	ldr	r2, [pc, #36]	@ (8010d7c <lfs_dir_orphaningcommit+0x48c>)
 8010d58:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 8010d5c:	4803      	ldr	r0, [pc, #12]	@ (8010d6c <lfs_dir_orphaningcommit+0x47c>)
 8010d5e:	f012 f923 	bl	8022fa8 <__assert_func>
 8010d62:	bf00      	nop
 8010d64:	000ffc08 	.word	0x000ffc08
 8010d68:	080305ac 	.word	0x080305ac
 8010d6c:	08030484 	.word	0x08030484
 8010d70:	0803072c 	.word	0x0803072c
 8010d74:	08030768 	.word	0x08030768
 8010d78:	080307ac 	.word	0x080307ac
 8010d7c:	08033c8c 	.word	0x08033c8c

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8010d80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010d84:	f113 0f02 	cmn.w	r3, #2
 8010d88:	f000 8093 	beq.w	8010eb2 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	3330      	adds	r3, #48	@ 0x30
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7fc fd3e 	bl	800d812 <lfs_gstate_hasorphans>
 8010d96:	4603      	mov	r3, r0
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d011      	beq.n	8010dc0 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8010d9c:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8010da0:	425b      	negs	r3, r3
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	b25b      	sxtb	r3, r3
 8010da6:	4619      	mov	r1, r3
 8010da8:	68f8      	ldr	r0, [r7, #12]
 8010daa:	f003 f80f 	bl	8013dcc <lfs_fs_preporphans>
 8010dae:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 8010db2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d002      	beq.n	8010dc0 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8010dba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010dbe:	e084      	b.n	8010eca <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8010dc0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8010dc4:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	3330      	adds	r3, #48	@ 0x30
 8010dcc:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7fc fd66 	bl	800d8a4 <lfs_gstate_hasmovehere>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d01c      	beq.n	8010e18 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7fc fca2 	bl	800d72c <lfs_tag_id>
 8010de8:	4603      	mov	r3, r0
 8010dea:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8010dee:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010df0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010df2:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8010df6:	4837      	ldr	r0, [pc, #220]	@ (8010ed4 <lfs_dir_orphaningcommit+0x5e4>)
 8010df8:	9002      	str	r0, [sp, #8]
 8010dfa:	9201      	str	r2, [sp, #4]
 8010dfc:	9300      	str	r3, [sp, #0]
 8010dfe:	460b      	mov	r3, r1
 8010e00:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 8010e04:	4934      	ldr	r1, [pc, #208]	@ (8010ed8 <lfs_dir_orphaningcommit+0x5e8>)
 8010e06:	4835      	ldr	r0, [pc, #212]	@ (8010edc <lfs_dir_orphaningcommit+0x5ec>)
 8010e08:	f012 f902 	bl	8023010 <printf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8010e12:	68f8      	ldr	r0, [r7, #12]
 8010e14:	f003 f82a 	bl	8013e6c <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8010e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 8010e1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010e20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 8010e24:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7fc fbfa 	bl	800d622 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8010e2e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8010e32:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8010e36:	4293      	cmp	r3, r2
 8010e38:	d007      	beq.n	8010e4a <lfs_dir_orphaningcommit+0x55a>
 8010e3a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8010e3e:	029b      	lsls	r3, r3, #10
 8010e40:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8010e44:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8010e48:	e000      	b.n	8010e4c <lfs_dir_orphaningcommit+0x55c>
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e4e:	2300      	movs	r3, #0
 8010e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e52:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8010e56:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8010e5a:	051a      	lsls	r2, r3, #20
 8010e5c:	4b20      	ldr	r3, [pc, #128]	@ (8010ee0 <lfs_dir_orphaningcommit+0x5f0>)
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e62:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010e66:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010e6c:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8010e70:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8010e74:	2000      	movs	r0, #0
 8010e76:	9001      	str	r0, [sp, #4]
 8010e78:	2002      	movs	r0, #2
 8010e7a:	9000      	str	r0, [sp, #0]
 8010e7c:	68f8      	ldr	r0, [r7, #12]
 8010e7e:	f7ff fa75 	bl	801036c <lfs_dir_relocatingcommit>
 8010e82:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8010e86:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fc fbaf 	bl	800d5ee <lfs_pair_fromle32>
            if (state < 0) {
 8010e90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	da02      	bge.n	8010e9e <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8010e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010e9c:	e015      	b.n	8010eca <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8010e9e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8010ea2:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8010ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010eaa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010eae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8010eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	f43f adfe 	beq.w	8010ab8 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8010ebc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d001      	beq.n	8010ec8 <lfs_dir_orphaningcommit+0x5d8>
 8010ec4:	2303      	movs	r3, #3
 8010ec6:	e000      	b.n	8010eca <lfs_dir_orphaningcommit+0x5da>
 8010ec8:	2300      	movs	r3, #0
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	37e0      	adds	r7, #224	@ 0xe0
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	080305ac 	.word	0x080305ac
 8010ed8:	08030484 	.word	0x08030484
 8010edc:	08030768 	.word	0x08030768
 8010ee0:	000ffc08 	.word	0x000ffc08

08010ee4 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b086      	sub	sp, #24
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	607a      	str	r2, [r7, #4]
 8010ef0:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	687a      	ldr	r2, [r7, #4]
 8010ef6:	68b9      	ldr	r1, [r7, #8]
 8010ef8:	68f8      	ldr	r0, [r7, #12]
 8010efa:	f7ff fcf9 	bl	80108f0 <lfs_dir_orphaningcommit>
 8010efe:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	da01      	bge.n	8010f0a <lfs_dir_commit+0x26>
        return orphans;
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	e00d      	b.n	8010f26 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d009      	beq.n	8010f24 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8010f10:	2100      	movs	r1, #0
 8010f12:	68f8      	ldr	r0, [r7, #12]
 8010f14:	f003 f8cc 	bl	80140b0 <lfs_fs_deorphan>
 8010f18:	6138      	str	r0, [r7, #16]
        if (err) {
 8010f1a:	693b      	ldr	r3, [r7, #16]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d001      	beq.n	8010f24 <lfs_dir_commit+0x40>
            return err;
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	e000      	b.n	8010f26 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8010f24:	2300      	movs	r3, #0
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3718      	adds	r7, #24
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
	...

08010f30 <lfs_mkdir_>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 8010f30:	b5b0      	push	{r4, r5, r7, lr}
 8010f32:	b0b8      	sub	sp, #224	@ 0xe0
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f003 fa68 	bl	8014410 <lfs_fs_forceconsistency>
 8010f40:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 8010f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d002      	beq.n	8010f52 <lfs_mkdir_+0x22>
        return err;
 8010f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f50:	e128      	b.n	80111a4 <lfs_mkdir_+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 8010f5a:	f107 00ae 	add.w	r0, r7, #174	@ 0xae
 8010f5e:	463a      	mov	r2, r7
 8010f60:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8010f64:	f103 0108 	add.w	r1, r3, #8
 8010f68:	4603      	mov	r3, r0
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f7fe fa72 	bl	800f454 <lfs_dir_find>
 8010f70:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8010f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f78:	f113 0f02 	cmn.w	r3, #2
 8010f7c:	d105      	bne.n	8010f8a <lfs_mkdir_+0x5a>
 8010f7e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8010f82:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8010f86:	4293      	cmp	r3, r2
 8010f88:	d109      	bne.n	8010f9e <lfs_mkdir_+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 8010f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	da02      	bge.n	8010f98 <lfs_mkdir_+0x68>
 8010f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f96:	e105      	b.n	80111a4 <lfs_mkdir_+0x274>
 8010f98:	f06f 0310 	mvn.w	r3, #16
 8010f9c:	e102      	b.n	80111a4 <lfs_mkdir_+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f7ef f97d 	bl	80002a0 <strlen>
 8010fa6:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
    if (nlen > lfs->name_max) {
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010fae:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d902      	bls.n	8010fbc <lfs_mkdir_+0x8c>
        return LFS_ERR_NAMETOOLONG;
 8010fb6:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8010fba:	e0f3      	b.n	80111a4 <lfs_mkdir_+0x274>
    }

    // build up new directory
    lfs_alloc_ckpoint(lfs);
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f7fc fe1c 	bl	800dbfa <lfs_alloc_ckpoint>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 8010fc2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f7fe fd63 	bl	800fa94 <lfs_dir_alloc>
 8010fce:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 8010fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d002      	beq.n	8010fe0 <lfs_mkdir_+0xb0>
        return err;
 8010fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010fde:	e0e1      	b.n	80111a4 <lfs_mkdir_+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 8010fe0:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8010fe4:	f107 05b8 	add.w	r5, r7, #184	@ 0xb8
 8010fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010fec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8010ff4:	e012      	b.n	801101c <lfs_mkdir_+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 8010ff6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8010ffa:	f103 0218 	add.w	r2, r3, #24
 8010ffe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011002:	4619      	mov	r1, r3
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f7fe f913 	bl	800f230 <lfs_dir_fetch>
 801100a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 801100e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011012:	2b00      	cmp	r3, #0
 8011014:	d002      	beq.n	801101c <lfs_mkdir_+0xec>
            return err;
 8011016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801101a:	e0c3      	b.n	80111a4 <lfs_mkdir_+0x274>
    while (pred.split) {
 801101c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011020:	2b00      	cmp	r3, #0
 8011022:	d1e8      	bne.n	8010ff6 <lfs_mkdir_+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8011024:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011028:	3318      	adds	r3, #24
 801102a:	4618      	mov	r0, r3
 801102c:	f7fc faf9 	bl	800d622 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8011030:	4b5e      	ldr	r3, [pc, #376]	@ (80111ac <lfs_mkdir_+0x27c>)
 8011032:	667b      	str	r3, [r7, #100]	@ 0x64
 8011034:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011038:	3318      	adds	r3, #24
 801103a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801103c:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8011040:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8011044:	2301      	movs	r3, #1
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f7ff ff4c 	bl	8010ee4 <lfs_dir_commit>
 801104c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8011050:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011054:	3318      	adds	r3, #24
 8011056:	4618      	mov	r0, r3
 8011058:	f7fc fac9 	bl	800d5ee <lfs_pair_fromle32>
    if (err) {
 801105c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011060:	2b00      	cmp	r3, #0
 8011062:	d002      	beq.n	801106a <lfs_mkdir_+0x13a>
        return err;
 8011064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011068:	e09c      	b.n	80111a4 <lfs_mkdir_+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 801106a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 801106e:	2b00      	cmp	r3, #0
 8011070:	d04c      	beq.n	801110c <lfs_mkdir_+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8011072:	2101      	movs	r1, #1
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f002 fea9 	bl	8013dcc <lfs_fs_preporphans>
 801107a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 801107e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011082:	2b00      	cmp	r3, #0
 8011084:	d002      	beq.n	801108c <lfs_mkdir_+0x15c>
            return err;
 8011086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801108a:	e08b      	b.n	80111a4 <lfs_mkdir_+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 801108c:	2300      	movs	r3, #0
 801108e:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
        cwd.id = 0;
 8011092:	2300      	movs	r3, #0
 8011094:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
        lfs->mlist = &cwd;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 801109e:	629a      	str	r2, [r3, #40]	@ 0x28

        lfs_pair_tole32(dir.pair);
 80110a0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7fc fabc 	bl	800d622 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 80110aa:	4b40      	ldr	r3, [pc, #256]	@ (80111ac <lfs_mkdir_+0x27c>)
 80110ac:	617b      	str	r3, [r7, #20]
 80110ae:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80110b2:	61bb      	str	r3, [r7, #24]
 80110b4:	f107 0214 	add.w	r2, r7, #20
 80110b8:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80110bc:	2301      	movs	r3, #1
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f7ff ff10 	bl	8010ee4 <lfs_dir_commit>
 80110c4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 80110c8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7fc fa8e 	bl	800d5ee <lfs_pair_fromle32>
        if (err) {
 80110d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d006      	beq.n	80110e8 <lfs_mkdir_+0x1b8>
            lfs->mlist = cwd.next;
 80110da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 80110e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80110e6:	e05d      	b.n	80111a4 <lfs_mkdir_+0x274>
        }

        lfs->mlist = cwd.next;
 80110e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	629a      	str	r2, [r3, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 80110f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f002 fe69 	bl	8013dcc <lfs_fs_preporphans>
 80110fa:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 80110fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011102:	2b00      	cmp	r3, #0
 8011104:	d002      	beq.n	801110c <lfs_mkdir_+0x1dc>
            return err;
 8011106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801110a:	e04b      	b.n	80111a4 <lfs_mkdir_+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 801110c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011110:	4618      	mov	r0, r3
 8011112:	f7fc fa86 	bl	800d622 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8011116:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 801111a:	029b      	lsls	r3, r3, #10
 801111c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011120:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011126:	2300      	movs	r3, #0
 8011128:	643b      	str	r3, [r7, #64]	@ 0x40
 801112a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 801112e:	029a      	lsls	r2, r3, #10
 8011130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011134:	4313      	orrs	r3, r2
 8011136:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801113a:	647b      	str	r3, [r7, #68]	@ 0x44
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011140:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8011144:	029b      	lsls	r3, r3, #10
 8011146:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801114a:	f043 0308 	orr.w	r3, r3, #8
 801114e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011150:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011154:	653b      	str	r3, [r7, #80]	@ 0x50
 8011156:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 801115a:	f083 0301 	eor.w	r3, r3, #1
 801115e:	b2db      	uxtb	r3, r3
 8011160:	2b00      	cmp	r3, #0
 8011162:	d001      	beq.n	8011168 <lfs_mkdir_+0x238>
 8011164:	4b11      	ldr	r3, [pc, #68]	@ (80111ac <lfs_mkdir_+0x27c>)
 8011166:	e000      	b.n	801116a <lfs_mkdir_+0x23a>
 8011168:	2300      	movs	r3, #0
 801116a:	657b      	str	r3, [r7, #84]	@ 0x54
 801116c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011170:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011172:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8011176:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801117a:	f103 0108 	add.w	r1, r3, #8
 801117e:	2304      	movs	r3, #4
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f7ff feaf 	bl	8010ee4 <lfs_dir_commit>
 8011186:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 801118a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801118e:	4618      	mov	r0, r3
 8011190:	f7fc fa2d 	bl	800d5ee <lfs_pair_fromle32>
    if (err) {
 8011194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011198:	2b00      	cmp	r3, #0
 801119a:	d002      	beq.n	80111a2 <lfs_mkdir_+0x272>
        return err;
 801119c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80111a0:	e000      	b.n	80111a4 <lfs_mkdir_+0x274>
    }

    return 0;
 80111a2:	2300      	movs	r3, #0
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	37e0      	adds	r7, #224	@ 0xe0
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bdb0      	pop	{r4, r5, r7, pc}
 80111ac:	600ffc08 	.word	0x600ffc08

080111b0 <lfs_dir_open_>:
#endif

static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 80111b0:	b590      	push	{r4, r7, lr}
 80111b2:	b08d      	sub	sp, #52	@ 0x34
 80111b4:	af02      	add	r7, sp, #8
 80111b6:	60f8      	str	r0, [r7, #12]
 80111b8:	60b9      	str	r1, [r7, #8]
 80111ba:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	f103 0108 	add.w	r1, r3, #8
 80111c2:	1d3a      	adds	r2, r7, #4
 80111c4:	2300      	movs	r3, #0
 80111c6:	68f8      	ldr	r0, [r7, #12]
 80111c8:	f7fe f944 	bl	800f454 <lfs_dir_find>
 80111cc:	6278      	str	r0, [r7, #36]	@ 0x24
    if (tag < 0) {
 80111ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	da01      	bge.n	80111d8 <lfs_dir_open_+0x28>
        return tag;
 80111d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d6:	e05e      	b.n	8011296 <lfs_dir_open_+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80111d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111da:	4618      	mov	r0, r3
 80111dc:	f7fc fa7c 	bl	800d6d8 <lfs_tag_type3>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b02      	cmp	r3, #2
 80111e4:	d002      	beq.n	80111ec <lfs_dir_open_+0x3c>
        return LFS_ERR_NOTDIR;
 80111e6:	f06f 0313 	mvn.w	r3, #19
 80111ea:	e054      	b.n	8011296 <lfs_dir_open_+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 80111ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7fc fa9c 	bl	800d72c <lfs_tag_id>
 80111f4:	4603      	mov	r3, r0
 80111f6:	461a      	mov	r2, r3
 80111f8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d106      	bne.n	801120e <lfs_dir_open_+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	6a1b      	ldr	r3, [r3, #32]
 8011204:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801120a:	61bb      	str	r3, [r7, #24]
 801120c:	e01f      	b.n	801124e <lfs_dir_open_+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8011214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011216:	4618      	mov	r0, r3
 8011218:	f7fc fa88 	bl	800d72c <lfs_tag_id>
 801121c:	4603      	mov	r3, r0
 801121e:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8011220:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011224:	f043 0308 	orr.w	r3, r3, #8
 8011228:	f107 0214 	add.w	r2, r7, #20
 801122c:	9200      	str	r2, [sp, #0]
 801122e:	4a1c      	ldr	r2, [pc, #112]	@ (80112a0 <lfs_dir_open_+0xf0>)
 8011230:	4621      	mov	r1, r4
 8011232:	68f8      	ldr	r0, [r7, #12]
 8011234:	f7fc fef6 	bl	800e024 <lfs_dir_get>
 8011238:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 801123a:	6a3b      	ldr	r3, [r7, #32]
 801123c:	2b00      	cmp	r3, #0
 801123e:	da01      	bge.n	8011244 <lfs_dir_open_+0x94>
            return res;
 8011240:	6a3b      	ldr	r3, [r7, #32]
 8011242:	e028      	b.n	8011296 <lfs_dir_open_+0xe6>
        }
        lfs_pair_fromle32(pair);
 8011244:	f107 0314 	add.w	r3, r7, #20
 8011248:	4618      	mov	r0, r3
 801124a:	f7fc f9d0 	bl	800d5ee <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	3308      	adds	r3, #8
 8011252:	f107 0214 	add.w	r2, r7, #20
 8011256:	4619      	mov	r1, r3
 8011258:	68f8      	ldr	r0, [r7, #12]
 801125a:	f7fd ffe9 	bl	800f230 <lfs_dir_fetch>
 801125e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d001      	beq.n	801126a <lfs_dir_open_+0xba>
        return err;
 8011266:	69fb      	ldr	r3, [r7, #28]
 8011268:	e015      	b.n	8011296 <lfs_dir_open_+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	689a      	ldr	r2, [r3, #8]
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	62da      	str	r2, [r3, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 8011272:	68bb      	ldr	r3, [r7, #8]
 8011274:	68da      	ldr	r2, [r3, #12]
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	631a      	str	r2, [r3, #48]	@ 0x30
    dir->id = 0;
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	2200      	movs	r2, #0
 801127e:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	2200      	movs	r2, #0
 8011284:	629a      	str	r2, [r3, #40]	@ 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	2202      	movs	r2, #2
 801128a:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801128c:	68b9      	ldr	r1, [r7, #8]
 801128e:	68f8      	ldr	r0, [r7, #12]
 8011290:	f7fc fc77 	bl	800db82 <lfs_mlist_append>

    return 0;
 8011294:	2300      	movs	r3, #0
}
 8011296:	4618      	mov	r0, r3
 8011298:	372c      	adds	r7, #44	@ 0x2c
 801129a:	46bd      	mov	sp, r7
 801129c:	bd90      	pop	{r4, r7, pc}
 801129e:	bf00      	nop
 80112a0:	700ffc00 	.word	0x700ffc00

080112a4 <lfs_dir_close_>:

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b082      	sub	sp, #8
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 80112ae:	6839      	ldr	r1, [r7, #0]
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f7fc fc44 	bl	800db3e <lfs_mlist_remove>

    return 0;
 80112b6:	2300      	movs	r3, #0
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3708      	adds	r7, #8
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}

080112c0 <lfs_dir_read_>:

static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b086      	sub	sp, #24
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	60f8      	str	r0, [r7, #12]
 80112c8:	60b9      	str	r1, [r7, #8]
 80112ca:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 80112cc:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80112d0:	2100      	movs	r1, #0
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f014 fbbc 	bl	8025a50 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d110      	bne.n	8011302 <lfs_dir_read_+0x42>
        info->type = LFS_TYPE_DIR;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2202      	movs	r2, #2
 80112e4:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	3308      	adds	r3, #8
 80112ea:	4935      	ldr	r1, [pc, #212]	@ (80113c0 <lfs_dir_read_+0x100>)
 80112ec:	461a      	mov	r2, r3
 80112ee:	460b      	mov	r3, r1
 80112f0:	881b      	ldrh	r3, [r3, #0]
 80112f2:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112f8:	1c5a      	adds	r2, r3, #1
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 80112fe:	2301      	movs	r3, #1
 8011300:	e05a      	b.n	80113b8 <lfs_dir_read_+0xf8>
    } else if (dir->pos == 1) {
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011306:	2b01      	cmp	r3, #1
 8011308:	d110      	bne.n	801132c <lfs_dir_read_+0x6c>
        info->type = LFS_TYPE_DIR;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2202      	movs	r2, #2
 801130e:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	3308      	adds	r3, #8
 8011314:	4a2b      	ldr	r2, [pc, #172]	@ (80113c4 <lfs_dir_read_+0x104>)
 8011316:	8811      	ldrh	r1, [r2, #0]
 8011318:	7892      	ldrb	r2, [r2, #2]
 801131a:	8019      	strh	r1, [r3, #0]
 801131c:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011322:	1c5a      	adds	r2, r3, #1
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 8011328:	2301      	movs	r3, #1
 801132a:	e045      	b.n	80113b8 <lfs_dir_read_+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	889a      	ldrh	r2, [r3, #4]
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	8b9b      	ldrh	r3, [r3, #28]
 8011334:	429a      	cmp	r2, r3
 8011336:	d11a      	bne.n	801136e <lfs_dir_read_+0xae>
            if (!dir->m.split) {
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	7fdb      	ldrb	r3, [r3, #31]
 801133c:	f083 0301 	eor.w	r3, r3, #1
 8011340:	b2db      	uxtb	r3, r3
 8011342:	2b00      	cmp	r3, #0
 8011344:	d001      	beq.n	801134a <lfs_dir_read_+0x8a>
                return false;
 8011346:	2300      	movs	r3, #0
 8011348:	e036      	b.n	80113b8 <lfs_dir_read_+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	f103 0108 	add.w	r1, r3, #8
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	3320      	adds	r3, #32
 8011354:	461a      	mov	r2, r3
 8011356:	68f8      	ldr	r0, [r7, #12]
 8011358:	f7fd ff6a 	bl	800f230 <lfs_dir_fetch>
 801135c:	6178      	str	r0, [r7, #20]
            if (err) {
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d001      	beq.n	8011368 <lfs_dir_read_+0xa8>
                return err;
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	e027      	b.n	80113b8 <lfs_dir_read_+0xf8>
            }

            dir->id = 0;
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	2200      	movs	r2, #0
 801136c:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	f103 0108 	add.w	r1, r3, #8
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	889a      	ldrh	r2, [r3, #4]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	68f8      	ldr	r0, [r7, #12]
 801137c:	f7fd ffa6 	bl	800f2cc <lfs_dir_getinfo>
 8011380:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d005      	beq.n	8011394 <lfs_dir_read_+0xd4>
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	f113 0f02 	cmn.w	r3, #2
 801138e:	d001      	beq.n	8011394 <lfs_dir_read_+0xd4>
            return err;
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	e011      	b.n	80113b8 <lfs_dir_read_+0xf8>
        }

        dir->id += 1;
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	889b      	ldrh	r3, [r3, #4]
 8011398:	3301      	adds	r3, #1
 801139a:	b29a      	uxth	r2, r3
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	f113 0f02 	cmn.w	r3, #2
 80113a6:	d100      	bne.n	80113aa <lfs_dir_read_+0xea>
    while (true) {
 80113a8:	e7c0      	b.n	801132c <lfs_dir_read_+0x6c>
            break;
 80113aa:	bf00      	nop
        }
    }

    dir->pos += 1;
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113b0:	1c5a      	adds	r2, r3, #1
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	629a      	str	r2, [r3, #40]	@ 0x28
    return true;
 80113b6:	2301      	movs	r3, #1
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3718      	adds	r7, #24
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	080305fc 	.word	0x080305fc
 80113c4:	08030600 	.word	0x08030600

080113c8 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80113c8:	b590      	push	{r4, r7, lr}
 80113ca:	b087      	sub	sp, #28
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80113dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113de:	3b08      	subs	r3, #8
 80113e0:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80113e2:	697a      	ldr	r2, [r7, #20]
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80113ea:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d101      	bne.n	80113f6 <lfs_ctz_index+0x2e>
        return 0;
 80113f2:	2300      	movs	r3, #0
 80113f4:	e01c      	b.n	8011430 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	3b01      	subs	r3, #1
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7fb fc79 	bl	800ccf2 <lfs_popc>
 8011400:	4603      	mov	r3, r0
 8011402:	3302      	adds	r3, #2
 8011404:	009b      	lsls	r3, r3, #2
 8011406:	697a      	ldr	r2, [r7, #20]
 8011408:	1ad2      	subs	r2, r2, r3
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011410:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	68fa      	ldr	r2, [r7, #12]
 8011416:	fb02 f303 	mul.w	r3, r2, r3
 801141a:	697a      	ldr	r2, [r7, #20]
 801141c:	1ad4      	subs	r4, r2, r3
 801141e:	68f8      	ldr	r0, [r7, #12]
 8011420:	f7fb fc67 	bl	800ccf2 <lfs_popc>
 8011424:	4603      	mov	r3, r0
 8011426:	009b      	lsls	r3, r3, #2
 8011428:	1ae2      	subs	r2, r4, r3
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	601a      	str	r2, [r3, #0]
    return i;
 801142e:	68fb      	ldr	r3, [r7, #12]
}
 8011430:	4618      	mov	r0, r3
 8011432:	371c      	adds	r7, #28
 8011434:	46bd      	mov	sp, r7
 8011436:	bd90      	pop	{r4, r7, pc}

08011438 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8011438:	b590      	push	{r4, r7, lr}
 801143a:	b08f      	sub	sp, #60	@ 0x3c
 801143c:	af04      	add	r7, sp, #16
 801143e:	60f8      	str	r0, [r7, #12]
 8011440:	60b9      	str	r1, [r7, #8]
 8011442:	607a      	str	r2, [r7, #4]
 8011444:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8011446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011448:	2b00      	cmp	r3, #0
 801144a:	d108      	bne.n	801145e <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 801144c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801144e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011452:	601a      	str	r2, [r3, #0]
        *off = 0;
 8011454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011456:	2200      	movs	r2, #0
 8011458:	601a      	str	r2, [r3, #0]
        return 0;
 801145a:	2300      	movs	r3, #0
 801145c:	e053      	b.n	8011506 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801145e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011460:	3b01      	subs	r3, #1
 8011462:	617b      	str	r3, [r7, #20]
 8011464:	f107 0314 	add.w	r3, r7, #20
 8011468:	4619      	mov	r1, r3
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f7ff ffac 	bl	80113c8 <lfs_ctz_index>
 8011470:	4603      	mov	r3, r0
 8011472:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8011474:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011478:	4619      	mov	r1, r3
 801147a:	68f8      	ldr	r0, [r7, #12]
 801147c:	f7ff ffa4 	bl	80113c8 <lfs_ctz_index>
 8011480:	4603      	mov	r3, r0
 8011482:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8011484:	e034      	b.n	80114f0 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8011486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011488:	6a3b      	ldr	r3, [r7, #32]
 801148a:	1ad3      	subs	r3, r2, r3
 801148c:	3301      	adds	r3, #1
 801148e:	4618      	mov	r0, r3
 8011490:	f7fb fc10 	bl	800ccb4 <lfs_npw2>
 8011494:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8011496:	1e5c      	subs	r4, r3, #1
 8011498:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801149a:	f7fb fc1b 	bl	800ccd4 <lfs_ctz>
 801149e:	4603      	mov	r3, r0
 80114a0:	4619      	mov	r1, r3
 80114a2:	4620      	mov	r0, r4
 80114a4:	f7fb fbcf 	bl	800cc46 <lfs_min>
 80114a8:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	69fa      	ldr	r2, [r7, #28]
 80114ae:	0092      	lsls	r2, r2, #2
 80114b0:	2104      	movs	r1, #4
 80114b2:	9103      	str	r1, [sp, #12]
 80114b4:	4639      	mov	r1, r7
 80114b6:	9102      	str	r1, [sp, #8]
 80114b8:	9201      	str	r2, [sp, #4]
 80114ba:	9300      	str	r3, [sp, #0]
 80114bc:	2304      	movs	r3, #4
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	68b9      	ldr	r1, [r7, #8]
 80114c2:	68f8      	ldr	r0, [r7, #12]
 80114c4:	f7fb fc9a 	bl	800cdfc <lfs_bd_read>
 80114c8:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7fb fc2a 	bl	800cd26 <lfs_fromle32>
 80114d2:	4603      	mov	r3, r0
 80114d4:	603b      	str	r3, [r7, #0]
        if (err) {
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d001      	beq.n	80114e0 <lfs_ctz_find+0xa8>
            return err;
 80114dc:	69bb      	ldr	r3, [r7, #24]
 80114de:	e012      	b.n	8011506 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80114e0:	2201      	movs	r2, #1
 80114e2:	69fb      	ldr	r3, [r7, #28]
 80114e4:	fa02 f303 	lsl.w	r3, r2, r3
 80114e8:	461a      	mov	r2, r3
 80114ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ec:	1a9b      	subs	r3, r3, r2
 80114ee:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 80114f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114f2:	6a3b      	ldr	r3, [r7, #32]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d8c6      	bhi.n	8011486 <lfs_ctz_find+0x4e>
    }

    *block = head;
 80114f8:	683a      	ldr	r2, [r7, #0]
 80114fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114fc:	601a      	str	r2, [r3, #0]
    *off = pos;
 80114fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011502:	601a      	str	r2, [r3, #0]
    return 0;
 8011504:	2300      	movs	r3, #0
}
 8011506:	4618      	mov	r0, r3
 8011508:	372c      	adds	r7, #44	@ 0x2c
 801150a:	46bd      	mov	sp, r7
 801150c:	bd90      	pop	{r4, r7, pc}
	...

08011510 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8011510:	b580      	push	{r7, lr}
 8011512:	b092      	sub	sp, #72	@ 0x48
 8011514:	af04      	add	r7, sp, #16
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	607a      	str	r2, [r7, #4]
 801151c:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 801151e:	f107 0320 	add.w	r3, r7, #32
 8011522:	4619      	mov	r1, r3
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f7fc fbff 	bl	800dd28 <lfs_alloc>
 801152a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 801152c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152e:	2b00      	cmp	r3, #0
 8011530:	d001      	beq.n	8011536 <lfs_ctz_extend+0x26>
            return err;
 8011532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011534:	e0e9      	b.n	801170a <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8011536:	6a3b      	ldr	r3, [r7, #32]
 8011538:	4619      	mov	r1, r3
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	f7fb ff9e 	bl	800d47c <lfs_bd_erase>
 8011540:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8011542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011544:	2b00      	cmp	r3, #0
 8011546:	d006      	beq.n	8011556 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8011548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801154a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801154e:	f000 80cb 	beq.w	80116e8 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8011552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011554:	e0d9      	b.n	801170a <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8011556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011558:	2b00      	cmp	r3, #0
 801155a:	d107      	bne.n	801156c <lfs_ctz_extend+0x5c>
                *block = nblock;
 801155c:	6a3a      	ldr	r2, [r7, #32]
 801155e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011560:	601a      	str	r2, [r3, #0]
                *off = 0;
 8011562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011564:	2200      	movs	r2, #0
 8011566:	601a      	str	r2, [r3, #0]
                return 0;
 8011568:	2300      	movs	r3, #0
 801156a:	e0ce      	b.n	801170a <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 801156c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801156e:	3b01      	subs	r3, #1
 8011570:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8011572:	f107 031c 	add.w	r3, r7, #28
 8011576:	4619      	mov	r1, r3
 8011578:	68f8      	ldr	r0, [r7, #12]
 801157a:	f7ff ff25 	bl	80113c8 <lfs_ctz_index>
 801157e:	4603      	mov	r3, r0
 8011580:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8011582:	69fb      	ldr	r3, [r7, #28]
 8011584:	3301      	adds	r3, #1
 8011586:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801158c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	429a      	cmp	r2, r3
 8011592:	d044      	beq.n	801161e <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8011594:	2300      	movs	r3, #0
 8011596:	637b      	str	r3, [r7, #52]	@ 0x34
 8011598:	e035      	b.n	8011606 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 801159a:	69fa      	ldr	r2, [r7, #28]
 801159c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801159e:	1ad2      	subs	r2, r2, r3
 80115a0:	2301      	movs	r3, #1
 80115a2:	9303      	str	r3, [sp, #12]
 80115a4:	f107 0317 	add.w	r3, r7, #23
 80115a8:	9302      	str	r3, [sp, #8]
 80115aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115ac:	9301      	str	r3, [sp, #4]
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	9300      	str	r3, [sp, #0]
 80115b2:	4613      	mov	r3, r2
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	2100      	movs	r1, #0
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	f7fb fc1f 	bl	800cdfc <lfs_bd_read>
 80115be:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 80115c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d001      	beq.n	80115ca <lfs_ctz_extend+0xba>
                        return err;
 80115c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115c8:	e09f      	b.n	801170a <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 80115ca:	6a3b      	ldr	r3, [r7, #32]
 80115cc:	2201      	movs	r2, #1
 80115ce:	9203      	str	r2, [sp, #12]
 80115d0:	f107 0217 	add.w	r2, r7, #23
 80115d4:	9202      	str	r2, [sp, #8]
 80115d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80115d8:	9201      	str	r2, [sp, #4]
 80115da:	9300      	str	r3, [sp, #0]
 80115dc:	2301      	movs	r3, #1
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	68b9      	ldr	r1, [r7, #8]
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f7fb fe9c 	bl	800d320 <lfs_bd_prog>
 80115e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 80115ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d007      	beq.n	8011600 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 80115f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115f2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80115f6:	d101      	bne.n	80115fc <lfs_ctz_extend+0xec>
                            goto relocate;
 80115f8:	bf00      	nop
                    goto relocate;
 80115fa:	e075      	b.n	80116e8 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 80115fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 80115fe:	e084      	b.n	801170a <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8011600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011602:	3301      	adds	r3, #1
 8011604:	637b      	str	r3, [r7, #52]	@ 0x34
 8011606:	69fb      	ldr	r3, [r7, #28]
 8011608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801160a:	429a      	cmp	r2, r3
 801160c:	d3c5      	bcc.n	801159a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 801160e:	6a3a      	ldr	r2, [r7, #32]
 8011610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011612:	601a      	str	r2, [r3, #0]
                *off = noff;
 8011614:	69fa      	ldr	r2, [r7, #28]
 8011616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011618:	601a      	str	r2, [r3, #0]
                return 0;
 801161a:	2300      	movs	r3, #0
 801161c:	e075      	b.n	801170a <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 801161e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011620:	3301      	adds	r3, #1
 8011622:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8011624:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011626:	f7fb fb55 	bl	800ccd4 <lfs_ctz>
 801162a:	4603      	mov	r3, r0
 801162c:	3301      	adds	r3, #1
 801162e:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8011634:	2300      	movs	r3, #0
 8011636:	633b      	str	r3, [r7, #48]	@ 0x30
 8011638:	e049      	b.n	80116ce <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 801163a:	69bb      	ldr	r3, [r7, #24]
 801163c:	4618      	mov	r0, r3
 801163e:	f7fb fb7d 	bl	800cd3c <lfs_tole32>
 8011642:	4603      	mov	r3, r0
 8011644:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8011646:	6a3b      	ldr	r3, [r7, #32]
 8011648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801164a:	0092      	lsls	r2, r2, #2
 801164c:	2104      	movs	r1, #4
 801164e:	9103      	str	r1, [sp, #12]
 8011650:	f107 0118 	add.w	r1, r7, #24
 8011654:	9102      	str	r1, [sp, #8]
 8011656:	9201      	str	r2, [sp, #4]
 8011658:	9300      	str	r3, [sp, #0]
 801165a:	2301      	movs	r3, #1
 801165c:	687a      	ldr	r2, [r7, #4]
 801165e:	68b9      	ldr	r1, [r7, #8]
 8011660:	68f8      	ldr	r0, [r7, #12]
 8011662:	f7fb fe5d 	bl	800d320 <lfs_bd_prog>
 8011666:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	4618      	mov	r0, r3
 801166c:	f7fb fb5b 	bl	800cd26 <lfs_fromle32>
 8011670:	4603      	mov	r3, r0
 8011672:	61bb      	str	r3, [r7, #24]
                if (err) {
 8011674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011676:	2b00      	cmp	r3, #0
 8011678:	d005      	beq.n	8011686 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 801167a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801167c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011680:	d034      	beq.n	80116ec <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8011682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011684:	e041      	b.n	801170a <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8011686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011688:	3b01      	subs	r3, #1
 801168a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801168c:	429a      	cmp	r2, r3
 801168e:	d01b      	beq.n	80116c8 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8011690:	69bb      	ldr	r3, [r7, #24]
 8011692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011694:	0092      	lsls	r2, r2, #2
 8011696:	2104      	movs	r1, #4
 8011698:	9103      	str	r1, [sp, #12]
 801169a:	f107 0118 	add.w	r1, r7, #24
 801169e:	9102      	str	r1, [sp, #8]
 80116a0:	9201      	str	r2, [sp, #4]
 80116a2:	9300      	str	r3, [sp, #0]
 80116a4:	2304      	movs	r3, #4
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	2100      	movs	r1, #0
 80116aa:	68f8      	ldr	r0, [r7, #12]
 80116ac:	f7fb fba6 	bl	800cdfc <lfs_bd_read>
 80116b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80116b2:	69bb      	ldr	r3, [r7, #24]
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7fb fb36 	bl	800cd26 <lfs_fromle32>
 80116ba:	4603      	mov	r3, r0
 80116bc:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80116be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d001      	beq.n	80116c8 <lfs_ctz_extend+0x1b8>
                        return err;
 80116c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116c6:	e020      	b.n	801170a <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 80116c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116ca:	3301      	adds	r3, #1
 80116cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80116ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d3b1      	bcc.n	801163a <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 80116d6:	6a3a      	ldr	r2, [r7, #32]
 80116d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116da:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80116dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116de:	009a      	lsls	r2, r3, #2
 80116e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80116e2:	601a      	str	r2, [r3, #0]
            return 0;
 80116e4:	2300      	movs	r3, #0
 80116e6:	e010      	b.n	801170a <lfs_ctz_extend+0x1fa>
                    goto relocate;
 80116e8:	bf00      	nop
 80116ea:	e000      	b.n	80116ee <lfs_ctz_extend+0x1de>
                        goto relocate;
 80116ec:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80116ee:	6a3b      	ldr	r3, [r7, #32]
 80116f0:	4a08      	ldr	r2, [pc, #32]	@ (8011714 <lfs_ctz_extend+0x204>)
 80116f2:	9200      	str	r2, [sp, #0]
 80116f4:	f640 32a6 	movw	r2, #2982	@ 0xba6
 80116f8:	4907      	ldr	r1, [pc, #28]	@ (8011718 <lfs_ctz_extend+0x208>)
 80116fa:	4808      	ldr	r0, [pc, #32]	@ (801171c <lfs_ctz_extend+0x20c>)
 80116fc:	f011 fc88 	bl	8023010 <printf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8011700:	68b9      	ldr	r1, [r7, #8]
 8011702:	68f8      	ldr	r0, [r7, #12]
 8011704:	f7fb fb55 	bl	800cdb2 <lfs_cache_drop>
    while (true) {
 8011708:	e709      	b.n	801151e <lfs_ctz_extend+0xe>
    }
}
 801170a:	4618      	mov	r0, r3
 801170c:	3738      	adds	r7, #56	@ 0x38
 801170e:	46bd      	mov	sp, r7
 8011710:	bd80      	pop	{r7, pc}
 8011712:	bf00      	nop
 8011714:	080305ac 	.word	0x080305ac
 8011718:	08030484 	.word	0x08030484
 801171c:	0803062c 	.word	0x0803062c

08011720 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8011720:	b580      	push	{r7, lr}
 8011722:	b090      	sub	sp, #64	@ 0x40
 8011724:	af04      	add	r7, sp, #16
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]
 801172c:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 801172e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011730:	2b00      	cmp	r3, #0
 8011732:	d101      	bne.n	8011738 <lfs_ctz_traverse+0x18>
        return 0;
 8011734:	2300      	movs	r3, #0
 8011736:	e06b      	b.n	8011810 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8011738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801173a:	3b01      	subs	r3, #1
 801173c:	61fb      	str	r3, [r7, #28]
 801173e:	f107 031c 	add.w	r3, r7, #28
 8011742:	4619      	mov	r1, r3
 8011744:	68f8      	ldr	r0, [r7, #12]
 8011746:	f7ff fe3f 	bl	80113c8 <lfs_ctz_index>
 801174a:	4603      	mov	r3, r0
 801174c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 801174e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011750:	6839      	ldr	r1, [r7, #0]
 8011752:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011754:	4798      	blx	r3
 8011756:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8011758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801175a:	2b00      	cmp	r3, #0
 801175c:	d001      	beq.n	8011762 <lfs_ctz_traverse+0x42>
            return err;
 801175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011760:	e056      	b.n	8011810 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8011762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011764:	2b00      	cmp	r3, #0
 8011766:	d101      	bne.n	801176c <lfs_ctz_traverse+0x4c>
            return 0;
 8011768:	2300      	movs	r3, #0
 801176a:	e051      	b.n	8011810 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 801176c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801176e:	f003 0301 	and.w	r3, r3, #1
 8011772:	f1c3 0302 	rsb	r3, r3, #2
 8011776:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8011778:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 801177a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 801177c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 801177e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8011780:	9303      	str	r3, [sp, #12]
 8011782:	f107 0314 	add.w	r3, r7, #20
 8011786:	9302      	str	r3, [sp, #8]
 8011788:	2300      	movs	r3, #0
 801178a:	9301      	str	r3, [sp, #4]
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	9300      	str	r3, [sp, #0]
 8011790:	4613      	mov	r3, r2
 8011792:	687a      	ldr	r2, [r7, #4]
 8011794:	68b9      	ldr	r1, [r7, #8]
 8011796:	68f8      	ldr	r0, [r7, #12]
 8011798:	f7fb fb30 	bl	800cdfc <lfs_bd_read>
 801179c:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7fb fac0 	bl	800cd26 <lfs_fromle32>
 80117a6:	4603      	mov	r3, r0
 80117a8:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 80117aa:	69bb      	ldr	r3, [r7, #24]
 80117ac:	4618      	mov	r0, r3
 80117ae:	f7fb faba 	bl	800cd26 <lfs_fromle32>
 80117b2:	4603      	mov	r3, r0
 80117b4:	61bb      	str	r3, [r7, #24]
        if (err) {
 80117b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d001      	beq.n	80117c0 <lfs_ctz_traverse+0xa0>
            return err;
 80117bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117be:	e027      	b.n	8011810 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 80117c0:	2300      	movs	r3, #0
 80117c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80117c4:	e012      	b.n	80117ec <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 80117c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117c8:	009b      	lsls	r3, r3, #2
 80117ca:	3330      	adds	r3, #48	@ 0x30
 80117cc:	443b      	add	r3, r7
 80117ce:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80117d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117d4:	4611      	mov	r1, r2
 80117d6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80117d8:	4798      	blx	r3
 80117da:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 80117dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d001      	beq.n	80117e6 <lfs_ctz_traverse+0xc6>
                return err;
 80117e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117e4:	e014      	b.n	8011810 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 80117e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117e8:	3301      	adds	r3, #1
 80117ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80117ec:	6a3b      	ldr	r3, [r7, #32]
 80117ee:	3b01      	subs	r3, #1
 80117f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117f2:	429a      	cmp	r2, r3
 80117f4:	dbe7      	blt.n	80117c6 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 80117f6:	6a3b      	ldr	r3, [r7, #32]
 80117f8:	3b01      	subs	r3, #1
 80117fa:	009b      	lsls	r3, r3, #2
 80117fc:	3330      	adds	r3, #48	@ 0x30
 80117fe:	443b      	add	r3, r7
 8011800:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8011804:	603b      	str	r3, [r7, #0]
        index -= count;
 8011806:	6a3b      	ldr	r3, [r7, #32]
 8011808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801180a:	1ad3      	subs	r3, r2, r3
 801180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 801180e:	e79e      	b.n	801174e <lfs_ctz_traverse+0x2e>
    }
}
 8011810:	4618      	mov	r0, r3
 8011812:	3730      	adds	r7, #48	@ 0x30
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}

08011818 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8011818:	b5b0      	push	{r4, r5, r7, lr}
 801181a:	b09a      	sub	sp, #104	@ 0x68
 801181c:	af02      	add	r7, sp, #8
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	60b9      	str	r1, [r7, #8]
 8011822:	607a      	str	r2, [r7, #4]
 8011824:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	f003 0302 	and.w	r3, r3, #2
 801182c:	2b00      	cmp	r3, #0
 801182e:	d008      	beq.n	8011842 <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8011830:	68f8      	ldr	r0, [r7, #12]
 8011832:	f002 fded 	bl	8014410 <lfs_fs_forceconsistency>
 8011836:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8011838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801183a:	2b00      	cmp	r3, #0
 801183c:	d001      	beq.n	8011842 <lfs_file_opencfg_+0x2a>
            return err;
 801183e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011840:	e1b0      	b.n	8011ba4 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011846:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8011848:	683a      	ldr	r2, [r7, #0]
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	2200      	movs	r2, #0
 8011852:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	2200      	movs	r2, #0
 8011858:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	2200      	movs	r2, #0
 801185e:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	f103 0108 	add.w	r1, r3, #8
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	3304      	adds	r3, #4
 801186a:	1d3a      	adds	r2, r7, #4
 801186c:	68f8      	ldr	r0, [r7, #12]
 801186e:	f7fd fdf1 	bl	800f454 <lfs_dir_find>
 8011872:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8011874:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011876:	2b00      	cmp	r3, #0
 8011878:	da0c      	bge.n	8011894 <lfs_file_opencfg_+0x7c>
 801187a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801187c:	f113 0f02 	cmn.w	r3, #2
 8011880:	d105      	bne.n	801188e <lfs_file_opencfg_+0x76>
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	889b      	ldrh	r3, [r3, #4]
 8011886:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801188a:	4293      	cmp	r3, r2
 801188c:	d102      	bne.n	8011894 <lfs_file_opencfg_+0x7c>
        err = tag;
 801188e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011890:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8011892:	e17c      	b.n	8011b8e <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	2201      	movs	r2, #1
 8011898:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801189a:	68b9      	ldr	r1, [r7, #8]
 801189c:	68f8      	ldr	r0, [r7, #12]
 801189e:	f7fc f970 	bl	800db82 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 80118a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118a4:	f113 0f02 	cmn.w	r3, #2
 80118a8:	d14e      	bne.n	8011948 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d103      	bne.n	80118bc <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 80118b4:	f06f 0301 	mvn.w	r3, #1
 80118b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80118ba:	e168      	b.n	8011b8e <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	4618      	mov	r0, r3
 80118c0:	f7ee fcee 	bl	80002a0 <strlen>
 80118c4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80118cc:	429a      	cmp	r2, r3
 80118ce:	d903      	bls.n	80118d8 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 80118d0:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80118d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80118d6:	e15a      	b.n	8011b8e <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	f103 0108 	add.w	r1, r3, #8
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	889b      	ldrh	r3, [r3, #4]
 80118e2:	029b      	lsls	r3, r3, #10
 80118e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80118e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80118ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80118ee:	2300      	movs	r3, #0
 80118f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	889b      	ldrh	r3, [r3, #4]
 80118f6:	029a      	lsls	r2, r3, #10
 80118f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118fa:	4313      	orrs	r3, r2
 80118fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011900:	637b      	str	r3, [r7, #52]	@ 0x34
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	889b      	ldrh	r3, [r3, #4]
 801190a:	029b      	lsls	r3, r3, #10
 801190c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011910:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011916:	2300      	movs	r3, #0
 8011918:	643b      	str	r3, [r7, #64]	@ 0x40
 801191a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801191e:	2303      	movs	r3, #3
 8011920:	68f8      	ldr	r0, [r7, #12]
 8011922:	f7ff fadf 	bl	8010ee4 <lfs_dir_commit>
 8011926:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8011928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801192a:	f113 0f1c 	cmn.w	r3, #28
 801192e:	d001      	beq.n	8011934 <lfs_file_opencfg_+0x11c>
 8011930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011932:	e001      	b.n	8011938 <lfs_file_opencfg_+0x120>
 8011934:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8011938:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 801193a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801193c:	2b00      	cmp	r3, #0
 801193e:	f040 8125 	bne.w	8011b8c <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8011942:	4b9a      	ldr	r3, [pc, #616]	@ (8011bac <lfs_file_opencfg_+0x394>)
 8011944:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011946:	e044      	b.n	80119d2 <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801194e:	2b00      	cmp	r3, #0
 8011950:	d003      	beq.n	801195a <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 8011952:	f06f 0310 	mvn.w	r3, #16
 8011956:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8011958:	e119      	b.n	8011b8e <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801195a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801195c:	4618      	mov	r0, r3
 801195e:	f7fb febb 	bl	800d6d8 <lfs_tag_type3>
 8011962:	4603      	mov	r3, r0
 8011964:	2b01      	cmp	r3, #1
 8011966:	d003      	beq.n	8011970 <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 8011968:	f06f 0314 	mvn.w	r3, #20
 801196c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 801196e:	e10e      	b.n	8011b8e <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011976:	2b00      	cmp	r3, #0
 8011978:	d00e      	beq.n	8011998 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	889b      	ldrh	r3, [r3, #4]
 801197e:	029b      	lsls	r3, r3, #10
 8011980:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011984:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011988:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801198e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	631a      	str	r2, [r3, #48]	@ 0x30
 8011996:	e01c      	b.n	80119d2 <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	889b      	ldrh	r3, [r3, #4]
 80119a2:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80119a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80119a8:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80119ac:	68ba      	ldr	r2, [r7, #8]
 80119ae:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80119b0:	9200      	str	r2, [sp, #0]
 80119b2:	4a7f      	ldr	r2, [pc, #508]	@ (8011bb0 <lfs_file_opencfg_+0x398>)
 80119b4:	68f8      	ldr	r0, [r7, #12]
 80119b6:	f7fc fb35 	bl	800e024 <lfs_dir_get>
 80119ba:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 80119bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119be:	2b00      	cmp	r3, #0
 80119c0:	da02      	bge.n	80119c8 <lfs_file_opencfg_+0x1b0>
            err = tag;
 80119c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80119c6:	e0e2      	b.n	8011b8e <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	3328      	adds	r3, #40	@ 0x28
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fb fff9 	bl	800d9c4 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80119d2:	2300      	movs	r3, #0
 80119d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80119d6:	e063      	b.n	8011aa0 <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119dc:	f003 0301 	and.w	r3, r3, #1
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d03c      	beq.n	8011a5e <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119ee:	6859      	ldr	r1, [r3, #4]
 80119f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80119f2:	4613      	mov	r3, r2
 80119f4:	005b      	lsls	r3, r3, #1
 80119f6:	4413      	add	r3, r2
 80119f8:	009b      	lsls	r3, r3, #2
 80119fa:	440b      	add	r3, r1
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8011a02:	051a      	lsls	r2, r3, #20
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	889b      	ldrh	r3, [r3, #4]
 8011a08:	029b      	lsls	r3, r3, #10
 8011a0a:	ea42 0103 	orr.w	r1, r2, r3
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a12:	6858      	ldr	r0, [r3, #4]
 8011a14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a16:	4613      	mov	r3, r2
 8011a18:	005b      	lsls	r3, r3, #1
 8011a1a:	4413      	add	r3, r2
 8011a1c:	009b      	lsls	r3, r3, #2
 8011a1e:	4403      	add	r3, r0
 8011a20:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011a22:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a2a:	6859      	ldr	r1, [r3, #4]
 8011a2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a2e:	4613      	mov	r3, r2
 8011a30:	005b      	lsls	r3, r3, #1
 8011a32:	4413      	add	r3, r2
 8011a34:	009b      	lsls	r3, r3, #2
 8011a36:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	9300      	str	r3, [sp, #0]
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	4a5d      	ldr	r2, [pc, #372]	@ (8011bb4 <lfs_file_opencfg_+0x39c>)
 8011a40:	4621      	mov	r1, r4
 8011a42:	68f8      	ldr	r0, [r7, #12]
 8011a44:	f7fc faee 	bl	800e024 <lfs_dir_get>
 8011a48:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8011a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	da06      	bge.n	8011a5e <lfs_file_opencfg_+0x246>
 8011a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a52:	f113 0f02 	cmn.w	r3, #2
 8011a56:	d002      	beq.n	8011a5e <lfs_file_opencfg_+0x246>
                err = res;
 8011a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8011a5c:	e097      	b.n	8011b8e <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a62:	f003 0302 	and.w	r3, r3, #2
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d017      	beq.n	8011a9a <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a6e:	6859      	ldr	r1, [r3, #4]
 8011a70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a72:	4613      	mov	r3, r2
 8011a74:	005b      	lsls	r3, r3, #1
 8011a76:	4413      	add	r3, r2
 8011a78:	009b      	lsls	r3, r3, #2
 8011a7a:	440b      	add	r3, r1
 8011a7c:	689a      	ldr	r2, [r3, #8]
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d903      	bls.n	8011a8e <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 8011a86:	f06f 031b 	mvn.w	r3, #27
 8011a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8011a8c:	e07f      	b.n	8011b8e <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a92:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8011a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011aa4:	689b      	ldr	r3, [r3, #8]
 8011aa6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011aa8:	429a      	cmp	r2, r3
 8011aaa:	d395      	bcc.n	80119d8 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d005      	beq.n	8011ac2 <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011aba:	681a      	ldr	r2, [r3, #0]
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8011ac0:	e010      	b.n	8011ae4 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7fb f95b 	bl	800cd84 <lfs_malloc>
 8011ace:	4602      	mov	r2, r0
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d103      	bne.n	8011ae4 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 8011adc:	f06f 030b 	mvn.w	r3, #11
 8011ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8011ae2:	e054      	b.n	8011b8e <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	3340      	adds	r3, #64	@ 0x40
 8011ae8:	4619      	mov	r1, r3
 8011aea:	68f8      	ldr	r0, [r7, #12]
 8011aec:	f7fb f970 	bl	800cdd0 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8011af0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7fb fdf0 	bl	800d6d8 <lfs_tag_type3>
 8011af8:	4603      	mov	r3, r0
 8011afa:	461a      	mov	r2, r3
 8011afc:	f240 2301 	movw	r3, #513	@ 0x201
 8011b00:	429a      	cmp	r2, r3
 8011b02:	d141      	bne.n	8011b88 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	f06f 0201 	mvn.w	r2, #1
 8011b0a:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 8011b0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7fb fe1c 	bl	800d74c <lfs_tag_size>
 8011b14:	4602      	mov	r2, r0
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b1e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	2200      	movs	r2, #0
 8011b32:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d020      	beq.n	8011b88 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	889b      	ldrh	r3, [r3, #4]
 8011b50:	029c      	lsls	r4, r3, #10
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b56:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7fb f873 	bl	800cc46 <lfs_min>
 8011b60:	4603      	mov	r3, r0
 8011b62:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011b64:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	4613      	mov	r3, r2
 8011b70:	4a0f      	ldr	r2, [pc, #60]	@ (8011bb0 <lfs_file_opencfg_+0x398>)
 8011b72:	4629      	mov	r1, r5
 8011b74:	68f8      	ldr	r0, [r7, #12]
 8011b76:	f7fc fa55 	bl	800e024 <lfs_dir_get>
 8011b7a:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 8011b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	da02      	bge.n	8011b88 <lfs_file_opencfg_+0x370>
                err = res;
 8011b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8011b86:	e002      	b.n	8011b8e <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 8011b88:	2300      	movs	r3, #0
 8011b8a:	e00b      	b.n	8011ba4 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 8011b8c:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b92:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 8011b9a:	68b9      	ldr	r1, [r7, #8]
 8011b9c:	68f8      	ldr	r0, [r7, #12]
 8011b9e:	f000 f823 	bl	8011be8 <lfs_file_close_>
    return err;
 8011ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3760      	adds	r7, #96	@ 0x60
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bdb0      	pop	{r4, r5, r7, pc}
 8011bac:	20100000 	.word	0x20100000
 8011bb0:	700ffc00 	.word	0x700ffc00
 8011bb4:	7ffffc00 	.word	0x7ffffc00

08011bb8 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b088      	sub	sp, #32
 8011bbc:	af02      	add	r7, sp, #8
 8011bbe:	60f8      	str	r0, [r7, #12]
 8011bc0:	60b9      	str	r1, [r7, #8]
 8011bc2:	607a      	str	r2, [r7, #4]
 8011bc4:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8011bc6:	4b07      	ldr	r3, [pc, #28]	@ (8011be4 <lfs_file_open_+0x2c>)
 8011bc8:	9300      	str	r3, [sp, #0]
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	687a      	ldr	r2, [r7, #4]
 8011bce:	68b9      	ldr	r1, [r7, #8]
 8011bd0:	68f8      	ldr	r0, [r7, #12]
 8011bd2:	f7ff fe21 	bl	8011818 <lfs_file_opencfg_>
 8011bd6:	6178      	str	r0, [r7, #20]
    return err;
 8011bd8:	697b      	ldr	r3, [r7, #20]
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3718      	adds	r7, #24
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}
 8011be2:	bf00      	nop
 8011be4:	08033ca4 	.word	0x08033ca4

08011be8 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b084      	sub	sp, #16
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 8011bf2:	6839      	ldr	r1, [r7, #0]
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f000 f9e5 	bl	8011fc4 <lfs_file_sync_>
 8011bfa:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8011bfc:	6839      	ldr	r1, [r7, #0]
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f7fb ff9d 	bl	800db3e <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d104      	bne.n	8011c18 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7fb f8c2 	bl	800cd9c <lfs_free>
    }

    return err;
 8011c18:	68fb      	ldr	r3, [r7, #12]
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3710      	adds	r7, #16
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
	...

08011c24 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8011c24:	b590      	push	{r4, r7, lr}
 8011c26:	b08d      	sub	sp, #52	@ 0x34
 8011c28:	af06      	add	r7, sp, #24
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8011c2e:	f107 030c 	add.w	r3, r7, #12
 8011c32:	4619      	mov	r1, r3
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f7fc f877 	bl	800dd28 <lfs_alloc>
 8011c3a:	6138      	str	r0, [r7, #16]
        if (err) {
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d001      	beq.n	8011c46 <lfs_file_relocate+0x22>
            return err;
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	e0bb      	b.n	8011dbe <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	4619      	mov	r1, r3
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f7fb fc16 	bl	800d47c <lfs_bd_erase>
 8011c50:	6138      	str	r0, [r7, #16]
        if (err) {
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d006      	beq.n	8011c66 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011c5e:	f000 809b 	beq.w	8011d98 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	e0ab      	b.n	8011dbe <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8011c66:	2300      	movs	r3, #0
 8011c68:	617b      	str	r3, [r7, #20]
 8011c6a:	e069      	b.n	8011d40 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d027      	beq.n	8011cc8 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	f103 0008 	add.w	r0, r3, #8
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	889b      	ldrh	r3, [r3, #4]
 8011c90:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8011c92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c9a:	2101      	movs	r1, #1
 8011c9c:	9105      	str	r1, [sp, #20]
 8011c9e:	f107 010b 	add.w	r1, r7, #11
 8011ca2:	9104      	str	r1, [sp, #16]
 8011ca4:	6979      	ldr	r1, [r7, #20]
 8011ca6:	9103      	str	r1, [sp, #12]
 8011ca8:	9302      	str	r3, [sp, #8]
 8011caa:	4b47      	ldr	r3, [pc, #284]	@ (8011dc8 <lfs_file_relocate+0x1a4>)
 8011cac:	9301      	str	r3, [sp, #4]
 8011cae:	9200      	str	r2, [sp, #0]
 8011cb0:	4623      	mov	r3, r4
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	4601      	mov	r1, r0
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f7fc f9cf 	bl	800e05a <lfs_dir_getread>
 8011cbc:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d01e      	beq.n	8011d02 <lfs_file_relocate+0xde>
                    return err;
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	e07a      	b.n	8011dbe <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 8011cce:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	1ad4      	subs	r4, r2, r3
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cdc:	2201      	movs	r2, #1
 8011cde:	9203      	str	r2, [sp, #12]
 8011ce0:	f107 020b 	add.w	r2, r7, #11
 8011ce4:	9202      	str	r2, [sp, #8]
 8011ce6:	697a      	ldr	r2, [r7, #20]
 8011ce8:	9201      	str	r2, [sp, #4]
 8011cea:	9300      	str	r3, [sp, #0]
 8011cec:	4623      	mov	r3, r4
 8011cee:	4602      	mov	r2, r0
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f7fb f883 	bl	800cdfc <lfs_bd_read>
 8011cf6:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d001      	beq.n	8011d02 <lfs_file_relocate+0xde>
                    return err;
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	e05d      	b.n	8011dbe <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f103 0110 	add.w	r1, r3, #16
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	9203      	str	r2, [sp, #12]
 8011d10:	f107 020b 	add.w	r2, r7, #11
 8011d14:	9202      	str	r2, [sp, #8]
 8011d16:	697a      	ldr	r2, [r7, #20]
 8011d18:	9201      	str	r2, [sp, #4]
 8011d1a:	9300      	str	r3, [sp, #0]
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	4602      	mov	r2, r0
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f7fb fafd 	bl	800d320 <lfs_bd_prog>
 8011d26:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d005      	beq.n	8011d3a <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011d34:	d032      	beq.n	8011d9c <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	e041      	b.n	8011dbe <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	3301      	adds	r3, #1
 8011d3e:	617b      	str	r3, [r7, #20]
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d44:	697a      	ldr	r2, [r7, #20]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d390      	bcc.n	8011c6c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	69d9      	ldr	r1, [r3, #28]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d58:	461a      	mov	r2, r3
 8011d5a:	f015 f8b5 	bl	8026ec8 <memcpy>
        file->cache.block = lfs->pcache.block;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	691a      	ldr	r2, [r3, #16]
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	695a      	ldr	r2, [r3, #20]
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	699a      	ldr	r2, [r3, #24]
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	3310      	adds	r3, #16
 8011d7a:	4619      	mov	r1, r3
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f7fb f827 	bl	800cdd0 <lfs_cache_zero>

        file->block = nblock;
 8011d82:	68fa      	ldr	r2, [r7, #12]
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d8c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8011d94:	2300      	movs	r3, #0
 8011d96:	e012      	b.n	8011dbe <lfs_file_relocate+0x19a>
                goto relocate;
 8011d98:	bf00      	nop
 8011d9a:	e000      	b.n	8011d9e <lfs_file_relocate+0x17a>
                    goto relocate;
 8011d9c:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	4a0a      	ldr	r2, [pc, #40]	@ (8011dcc <lfs_file_relocate+0x1a8>)
 8011da2:	9200      	str	r2, [sp, #0]
 8011da4:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 8011da8:	4909      	ldr	r1, [pc, #36]	@ (8011dd0 <lfs_file_relocate+0x1ac>)
 8011daa:	480a      	ldr	r0, [pc, #40]	@ (8011dd4 <lfs_file_relocate+0x1b0>)
 8011dac:	f011 f930 	bl	8023010 <printf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	3310      	adds	r3, #16
 8011db4:	4619      	mov	r1, r3
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f7fa fffb 	bl	800cdb2 <lfs_cache_drop>
    while (true) {
 8011dbc:	e737      	b.n	8011c2e <lfs_file_relocate+0xa>
    }
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	371c      	adds	r7, #28
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd90      	pop	{r4, r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	fff7fc00 	.word	0xfff7fc00
 8011dcc:	080305ac 	.word	0x080305ac
 8011dd0:	08030484 	.word	0x08030484
 8011dd4:	0803062c 	.word	0x0803062c

08011dd8 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b084      	sub	sp, #16
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7fb ff05 	bl	800dbfa <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 8011df0:	6839      	ldr	r1, [r7, #0]
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f7ff ff16 	bl	8011c24 <lfs_file_relocate>
 8011df8:	60f8      	str	r0, [r7, #12]
    if (err) {
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d001      	beq.n	8011e04 <lfs_file_outline+0x2c>
        return err;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	e006      	b.n	8011e12 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 8011e10:	2300      	movs	r3, #0
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3710      	adds	r7, #16
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
	...

08011e1c <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8011e1c:	b590      	push	{r4, r7, lr}
 8011e1e:	b09f      	sub	sp, #124	@ 0x7c
 8011e20:	af02      	add	r7, sp, #8
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d011      	beq.n	8011e56 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d105      	bne.n	8011e4a <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	3340      	adds	r3, #64	@ 0x40
 8011e42:	4619      	mov	r1, r3
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f7fa ffb4 	bl	800cdb2 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e4e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	f000 80a4 	beq.w	8011fac <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e68:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d176      	bne.n	8011f64 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8011e76:	f107 030c 	add.w	r3, r7, #12
 8011e7a:	2254      	movs	r2, #84	@ 0x54
 8011e7c:	2100      	movs	r1, #0
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f013 fde6 	bl	8025a50 <memset>
                .ctz.head = file->ctz.head,
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8011e88:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 8011e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011e90:	2301      	movs	r3, #1
 8011e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8011e98:	643b      	str	r3, [r7, #64]	@ 0x40
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8011ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011ea2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f7fa ff81 	bl	800cdb2 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8011eb0:	e02b      	b.n	8011f0a <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8011eb2:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8011eb6:	f107 010c 	add.w	r1, r7, #12
 8011eba:	2301      	movs	r3, #1
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f000 f921 	bl	8012104 <lfs_file_flushedread>
 8011ec2:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8011ec4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	da01      	bge.n	8011ece <lfs_file_flush+0xb2>
                    return res;
 8011eca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ecc:	e06f      	b.n	8011fae <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8011ece:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	6839      	ldr	r1, [r7, #0]
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f000 fa1c 	bl	8012314 <lfs_file_flushedwrite>
 8011edc:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8011ede:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	da01      	bge.n	8011ee8 <lfs_file_flush+0xcc>
                    return res;
 8011ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ee6:	e062      	b.n	8011fae <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011ef0:	d00b      	beq.n	8011f0a <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8011ef2:	f107 030c 	add.w	r3, r7, #12
 8011ef6:	3340      	adds	r3, #64	@ 0x40
 8011ef8:	4619      	mov	r1, r3
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f7fa ff59 	bl	800cdb2 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	4619      	mov	r1, r3
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f7fa ff54 	bl	800cdb2 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d3cd      	bcc.n	8011eb2 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8011f1c:	687a      	ldr	r2, [r7, #4]
 8011f1e:	2301      	movs	r3, #1
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f7fb f94f 	bl	800d1c4 <lfs_bd_flush>
 8011f26:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8011f28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d026      	beq.n	8011f7c <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8011f2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f30:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011f34:	d001      	beq.n	8011f3a <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8011f36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f38:	e039      	b.n	8011fae <lfs_file_flush+0x192>
                        goto relocate;
 8011f3a:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f40:	4a1d      	ldr	r2, [pc, #116]	@ (8011fb8 <lfs_file_flush+0x19c>)
 8011f42:	9200      	str	r2, [sp, #0]
 8011f44:	f640 522b 	movw	r2, #3371	@ 0xd2b
 8011f48:	491c      	ldr	r1, [pc, #112]	@ (8011fbc <lfs_file_flush+0x1a0>)
 8011f4a:	481d      	ldr	r0, [pc, #116]	@ (8011fc0 <lfs_file_flush+0x1a4>)
 8011f4c:	f011 f860 	bl	8023010 <printf>
                err = lfs_file_relocate(lfs, file);
 8011f50:	6839      	ldr	r1, [r7, #0]
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f7ff fe66 	bl	8011c24 <lfs_file_relocate>
 8011f58:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8011f5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d0da      	beq.n	8011f16 <lfs_file_flush+0xfa>
                    return err;
 8011f60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f62:	e024      	b.n	8011fae <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	4610      	mov	r0, r2
 8011f70:	f7fa fe59 	bl	800cc26 <lfs_max>
 8011f74:	4602      	mov	r2, r0
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	635a      	str	r2, [r3, #52]	@ 0x34
 8011f7a:	e000      	b.n	8011f7e <lfs_file_flush+0x162>
                break;
 8011f7c:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f92:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011faa:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 8011fac:	2300      	movs	r3, #0
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	3774      	adds	r7, #116	@ 0x74
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd90      	pop	{r4, r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	080305ac 	.word	0x080305ac
 8011fbc:	08030484 	.word	0x08030484
 8011fc0:	0803062c 	.word	0x0803062c

08011fc4 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b090      	sub	sp, #64	@ 0x40
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d001      	beq.n	8011fde <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	e08e      	b.n	80120fc <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 8011fde:	6839      	ldr	r1, [r7, #0]
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f7ff ff1b 	bl	8011e1c <lfs_file_flush>
 8011fe6:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8011fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d007      	beq.n	8011ffe <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ff2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 8011ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ffc:	e07e      	b.n	80120fc <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012006:	2b00      	cmp	r3, #0
 8012008:	d077      	beq.n	80120fa <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	3308      	adds	r3, #8
 801200e:	4618      	mov	r0, r3
 8012010:	f7fb fa7b 	bl	800d50a <lfs_pair_isnull>
 8012014:	4603      	mov	r3, r0
 8012016:	f083 0301 	eor.w	r3, r3, #1
 801201a:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 801201c:	2b00      	cmp	r3, #0
 801201e:	d06c      	beq.n	80120fa <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012028:	2b00      	cmp	r3, #0
 801202a:	d10d      	bne.n	8012048 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f103 0110 	add.w	r1, r3, #16
 8012032:	687a      	ldr	r2, [r7, #4]
 8012034:	2300      	movs	r3, #0
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f7fb f93e 	bl	800d2b8 <lfs_bd_sync>
 801203c:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 801203e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012040:	2b00      	cmp	r3, #0
 8012042:	d001      	beq.n	8012048 <lfs_file_sync_+0x84>
                return err;
 8012044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012046:	e059      	b.n	80120fc <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801204c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012050:	2b00      	cmp	r3, #0
 8012052:	d009      	beq.n	8012068 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8012054:	f240 2301 	movw	r3, #513	@ 0x201
 8012058:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801205e:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012064:	637b      	str	r3, [r7, #52]	@ 0x34
 8012066:	e014      	b.n	8012092 <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8012068:	f240 2302 	movw	r3, #514	@ 0x202
 801206c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 801206e:	683a      	ldr	r2, [r7, #0]
 8012070:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012074:	3228      	adds	r2, #40	@ 0x28
 8012076:	e892 0003 	ldmia.w	r2, {r0, r1}
 801207a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 801207e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012082:	4618      	mov	r0, r3
 8012084:	f7fb fcb6 	bl	800d9f4 <lfs_ctz_tole32>
            buffer = &ctz;
 8012088:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801208c:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 801208e:	2308      	movs	r3, #8
 8012090:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	f103 0108 	add.w	r1, r3, #8
 8012098:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801209a:	051a      	lsls	r2, r3, #20
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	889b      	ldrh	r3, [r3, #4]
 80120a0:	029b      	lsls	r3, r3, #10
 80120a2:	431a      	orrs	r2, r3
 80120a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120a6:	4313      	orrs	r3, r2
 80120a8:	61bb      	str	r3, [r7, #24]
 80120aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120ac:	61fb      	str	r3, [r7, #28]
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	889b      	ldrh	r3, [r3, #4]
 80120b2:	029a      	lsls	r2, r3, #10
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120b8:	689b      	ldr	r3, [r3, #8]
 80120ba:	4313      	orrs	r3, r2
 80120bc:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 80120c0:	623b      	str	r3, [r7, #32]
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80120ca:	f107 0218 	add.w	r2, r7, #24
 80120ce:	2302      	movs	r3, #2
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f7fe ff07 	bl	8010ee4 <lfs_dir_commit>
 80120d6:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80120d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d007      	beq.n	80120ee <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120e2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 80120ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ec:	e006      	b.n	80120fc <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 80120fa:	2300      	movs	r3, #0
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	3740      	adds	r7, #64	@ 0x40
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}

08012104 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8012104:	b5b0      	push	{r4, r5, r7, lr}
 8012106:	b090      	sub	sp, #64	@ 0x40
 8012108:	af06      	add	r7, sp, #24
 801210a:	60f8      	str	r0, [r7, #12]
 801210c:	60b9      	str	r1, [r7, #8]
 801210e:	607a      	str	r2, [r7, #4]
 8012110:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012122:	429a      	cmp	r2, r3
 8012124:	d301      	bcc.n	801212a <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8012126:	2300      	movs	r3, #0
 8012128:	e0b7      	b.n	801229a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012132:	1ad3      	subs	r3, r2, r3
 8012134:	4619      	mov	r1, r3
 8012136:	6838      	ldr	r0, [r7, #0]
 8012138:	f7fa fd85 	bl	800cc46 <lfs_min>
 801213c:	6038      	str	r0, [r7, #0]
    nsize = size;
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8012142:	e0a5      	b.n	8012290 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801214c:	2b00      	cmp	r3, #0
 801214e:	d006      	beq.n	801215e <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801215a:	429a      	cmp	r2, r3
 801215c:	d130      	bne.n	80121c0 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012166:	2b00      	cmp	r3, #0
 8012168:	d11c      	bne.n	80121a4 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012178:	68ba      	ldr	r2, [r7, #8]
 801217a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801217c:	68b9      	ldr	r1, [r7, #8]
 801217e:	3138      	adds	r1, #56	@ 0x38
 8012180:	68b8      	ldr	r0, [r7, #8]
 8012182:	303c      	adds	r0, #60	@ 0x3c
 8012184:	9003      	str	r0, [sp, #12]
 8012186:	9102      	str	r1, [sp, #8]
 8012188:	9201      	str	r2, [sp, #4]
 801218a:	9300      	str	r3, [sp, #0]
 801218c:	462b      	mov	r3, r5
 801218e:	4622      	mov	r2, r4
 8012190:	2100      	movs	r1, #0
 8012192:	68f8      	ldr	r0, [r7, #12]
 8012194:	f7ff f950 	bl	8011438 <lfs_ctz_find>
 8012198:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 801219a:	69fb      	ldr	r3, [r7, #28]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d009      	beq.n	80121b4 <lfs_file_flushedread+0xb0>
                    return err;
 80121a0:	69fb      	ldr	r3, [r7, #28]
 80121a2:	e07a      	b.n	801229a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	f06f 0201 	mvn.w	r2, #1
 80121aa:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80121bc:	68bb      	ldr	r3, [r7, #8]
 80121be:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80121c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80121ca:	1ad3      	subs	r3, r2, r3
 80121cc:	4619      	mov	r1, r3
 80121ce:	6a38      	ldr	r0, [r7, #32]
 80121d0:	f7fa fd39 	bl	800cc46 <lfs_min>
 80121d4:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d026      	beq.n	8012230 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	f103 0408 	add.w	r4, r3, #8
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80121f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	889b      	ldrh	r3, [r3, #4]
 80121f8:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80121fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80121fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012202:	68b9      	ldr	r1, [r7, #8]
 8012204:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8012206:	69b8      	ldr	r0, [r7, #24]
 8012208:	9005      	str	r0, [sp, #20]
 801220a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801220c:	9004      	str	r0, [sp, #16]
 801220e:	9103      	str	r1, [sp, #12]
 8012210:	9302      	str	r3, [sp, #8]
 8012212:	4b24      	ldr	r3, [pc, #144]	@ (80122a4 <lfs_file_flushedread+0x1a0>)
 8012214:	9301      	str	r3, [sp, #4]
 8012216:	9200      	str	r2, [sp, #0]
 8012218:	462b      	mov	r3, r5
 801221a:	2200      	movs	r2, #0
 801221c:	4621      	mov	r1, r4
 801221e:	68f8      	ldr	r0, [r7, #12]
 8012220:	f7fb ff1b 	bl	800e05a <lfs_dir_getread>
 8012224:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d01d      	beq.n	8012268 <lfs_file_flushedread+0x164>
                return err;
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	e034      	b.n	801229a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801223a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012240:	68ba      	ldr	r2, [r7, #8]
 8012242:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8012244:	69b9      	ldr	r1, [r7, #24]
 8012246:	9103      	str	r1, [sp, #12]
 8012248:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801224a:	9102      	str	r1, [sp, #8]
 801224c:	9201      	str	r2, [sp, #4]
 801224e:	9300      	str	r3, [sp, #0]
 8012250:	4623      	mov	r3, r4
 8012252:	4602      	mov	r2, r0
 8012254:	2100      	movs	r1, #0
 8012256:	68f8      	ldr	r0, [r7, #12]
 8012258:	f7fa fdd0 	bl	800cdfc <lfs_bd_read>
 801225c:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d001      	beq.n	8012268 <lfs_file_flushedread+0x164>
                return err;
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	e018      	b.n	801229a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8012268:	68bb      	ldr	r3, [r7, #8]
 801226a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801226c:	69bb      	ldr	r3, [r7, #24]
 801226e:	441a      	add	r2, r3
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012278:	69bb      	ldr	r3, [r7, #24]
 801227a:	441a      	add	r2, r3
 801227c:	68bb      	ldr	r3, [r7, #8]
 801227e:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8012280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012282:	69bb      	ldr	r3, [r7, #24]
 8012284:	4413      	add	r3, r2
 8012286:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8012288:	6a3a      	ldr	r2, [r7, #32]
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	1ad3      	subs	r3, r2, r3
 801228e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8012290:	6a3b      	ldr	r3, [r7, #32]
 8012292:	2b00      	cmp	r3, #0
 8012294:	f47f af56 	bne.w	8012144 <lfs_file_flushedread+0x40>
    }

    return size;
 8012298:	683b      	ldr	r3, [r7, #0]
}
 801229a:	4618      	mov	r0, r3
 801229c:	3728      	adds	r7, #40	@ 0x28
 801229e:	46bd      	mov	sp, r7
 80122a0:	bdb0      	pop	{r4, r5, r7, pc}
 80122a2:	bf00      	nop
 80122a4:	fff7fc00 	.word	0xfff7fc00

080122a8 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b086      	sub	sp, #24
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	607a      	str	r2, [r7, #4]
 80122b4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122ba:	f003 0301 	and.w	r3, r3, #1
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d106      	bne.n	80122d0 <lfs_file_read_+0x28>
 80122c2:	4b11      	ldr	r3, [pc, #68]	@ (8012308 <lfs_file_read_+0x60>)
 80122c4:	4a11      	ldr	r2, [pc, #68]	@ (801230c <lfs_file_read_+0x64>)
 80122c6:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 80122ca:	4811      	ldr	r0, [pc, #68]	@ (8012310 <lfs_file_read_+0x68>)
 80122cc:	f010 fe6c 	bl	8022fa8 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d009      	beq.n	80122f0 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80122dc:	68b9      	ldr	r1, [r7, #8]
 80122de:	68f8      	ldr	r0, [r7, #12]
 80122e0:	f7ff fd9c 	bl	8011e1c <lfs_file_flush>
 80122e4:	6178      	str	r0, [r7, #20]
        if (err) {
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d001      	beq.n	80122f0 <lfs_file_read_+0x48>
            return err;
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	e006      	b.n	80122fe <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	687a      	ldr	r2, [r7, #4]
 80122f4:	68b9      	ldr	r1, [r7, #8]
 80122f6:	68f8      	ldr	r0, [r7, #12]
 80122f8:	f7ff ff04 	bl	8012104 <lfs_file_flushedread>
 80122fc:	4603      	mov	r3, r0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3718      	adds	r7, #24
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	080307d4 	.word	0x080307d4
 801230c:	08033cb0 	.word	0x08033cb0
 8012310:	08030484 	.word	0x08030484

08012314 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8012314:	b5b0      	push	{r4, r5, r7, lr}
 8012316:	b090      	sub	sp, #64	@ 0x40
 8012318:	af04      	add	r7, sp, #16
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	607a      	str	r2, [r7, #4]
 8012320:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801232e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012332:	2b00      	cmp	r3, #0
 8012334:	f000 80f4 	beq.w	8012520 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801233c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801233e:	441a      	add	r2, r3
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012344:	4619      	mov	r1, r3
 8012346:	4610      	mov	r0, r2
 8012348:	f7fa fc6d 	bl	800cc26 <lfs_max>
 801234c:	4602      	mov	r2, r0
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 8012352:	429a      	cmp	r2, r3
 8012354:	f240 80e4 	bls.w	8012520 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8012358:	68b9      	ldr	r1, [r7, #8]
 801235a:	68f8      	ldr	r0, [r7, #12]
 801235c:	f7ff fd3c 	bl	8011dd8 <lfs_file_outline>
 8012360:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8012362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012364:	2b00      	cmp	r3, #0
 8012366:	f000 80db 	beq.w	8012520 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801236e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8012376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012378:	e0d7      	b.n	801252a <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012382:	2b00      	cmp	r3, #0
 8012384:	d006      	beq.n	8012394 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 8012390:	429a      	cmp	r2, r3
 8012392:	d16d      	bne.n	8012470 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012398:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801239c:	2b00      	cmp	r3, #0
 801239e:	d159      	bne.n	8012454 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d12f      	bne.n	801240c <lfs_file_flushedwrite+0xf8>
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d02b      	beq.n	801240c <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80123c2:	68ba      	ldr	r2, [r7, #8]
 80123c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80123c6:	3a01      	subs	r2, #1
 80123c8:	68b9      	ldr	r1, [r7, #8]
 80123ca:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80123cc:	2000      	movs	r0, #0
 80123ce:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80123d0:	f107 0010 	add.w	r0, r7, #16
 80123d4:	9003      	str	r0, [sp, #12]
 80123d6:	9102      	str	r1, [sp, #8]
 80123d8:	9201      	str	r2, [sp, #4]
 80123da:	9300      	str	r3, [sp, #0]
 80123dc:	462b      	mov	r3, r5
 80123de:	4622      	mov	r2, r4
 80123e0:	2100      	movs	r1, #0
 80123e2:	68f8      	ldr	r0, [r7, #12]
 80123e4:	f7ff f828 	bl	8011438 <lfs_ctz_find>
 80123e8:	6238      	str	r0, [r7, #32]
                    if (err) {
 80123ea:	6a3b      	ldr	r3, [r7, #32]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d007      	beq.n	8012400 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123f4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 80123fc:	6a3b      	ldr	r3, [r7, #32]
 80123fe:	e094      	b.n	801252a <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	3340      	adds	r3, #64	@ 0x40
 8012404:	4619      	mov	r1, r3
 8012406:	68f8      	ldr	r0, [r7, #12]
 8012408:	f7fa fce2 	bl	800cdd0 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 801240c:	68f8      	ldr	r0, [r7, #12]
 801240e:	f7fb fbf4 	bl	800dbfa <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8012418:	68fc      	ldr	r4, [r7, #12]
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012422:	68ba      	ldr	r2, [r7, #8]
 8012424:	3238      	adds	r2, #56	@ 0x38
 8012426:	68b9      	ldr	r1, [r7, #8]
 8012428:	313c      	adds	r1, #60	@ 0x3c
 801242a:	9102      	str	r1, [sp, #8]
 801242c:	9201      	str	r2, [sp, #4]
 801242e:	9300      	str	r3, [sp, #0]
 8012430:	462b      	mov	r3, r5
 8012432:	4622      	mov	r2, r4
 8012434:	4601      	mov	r1, r0
 8012436:	68f8      	ldr	r0, [r7, #12]
 8012438:	f7ff f86a 	bl	8011510 <lfs_ctz_extend>
 801243c:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 801243e:	69fb      	ldr	r3, [r7, #28]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d00f      	beq.n	8012464 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012448:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	e06a      	b.n	801252a <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	f06f 0201 	mvn.w	r2, #1
 801245a:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012468:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801247a:	1ad3      	subs	r3, r2, r3
 801247c:	4619      	mov	r1, r3
 801247e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012480:	f7fa fbe1 	bl	800cc46 <lfs_min>
 8012484:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 801248c:	68fc      	ldr	r4, [r7, #12]
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8012496:	69b9      	ldr	r1, [r7, #24]
 8012498:	9103      	str	r1, [sp, #12]
 801249a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801249c:	9102      	str	r1, [sp, #8]
 801249e:	9201      	str	r2, [sp, #4]
 80124a0:	9300      	str	r3, [sp, #0]
 80124a2:	2301      	movs	r3, #1
 80124a4:	4622      	mov	r2, r4
 80124a6:	4601      	mov	r1, r0
 80124a8:	68f8      	ldr	r0, [r7, #12]
 80124aa:	f7fa ff39 	bl	800d320 <lfs_bd_prog>
 80124ae:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d01c      	beq.n	80124f0 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 80124b6:	697b      	ldr	r3, [r7, #20]
 80124b8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80124bc:	d007      	beq.n	80124ce <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124c2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	e02d      	b.n	801252a <lfs_file_flushedwrite+0x216>
                    goto relocate;
 80124ce:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 80124d0:	68b9      	ldr	r1, [r7, #8]
 80124d2:	68f8      	ldr	r0, [r7, #12]
 80124d4:	f7ff fba6 	bl	8011c24 <lfs_file_relocate>
 80124d8:	6178      	str	r0, [r7, #20]
            if (err) {
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d0d2      	beq.n	8012486 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	e01c      	b.n	801252a <lfs_file_flushedwrite+0x216>
            break;
 80124f0:	bf00      	nop
            }
        }

        file->pos += diff;
 80124f2:	68bb      	ldr	r3, [r7, #8]
 80124f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	441a      	add	r2, r3
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012502:	69bb      	ldr	r3, [r7, #24]
 8012504:	441a      	add	r2, r3
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 801250a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801250c:	69bb      	ldr	r3, [r7, #24]
 801250e:	4413      	add	r3, r2
 8012510:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8012512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012514:	69bb      	ldr	r3, [r7, #24]
 8012516:	1ad3      	subs	r3, r2, r3
 8012518:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 801251a:	68f8      	ldr	r0, [r7, #12]
 801251c:	f7fb fb6d 	bl	800dbfa <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8012520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012522:	2b00      	cmp	r3, #0
 8012524:	f47f af29 	bne.w	801237a <lfs_file_flushedwrite+0x66>
    }

    return size;
 8012528:	683b      	ldr	r3, [r7, #0]
}
 801252a:	4618      	mov	r0, r3
 801252c:	3730      	adds	r7, #48	@ 0x30
 801252e:	46bd      	mov	sp, r7
 8012530:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012534 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8012534:	b580      	push	{r7, lr}
 8012536:	b08a      	sub	sp, #40	@ 0x28
 8012538:	af00      	add	r7, sp, #0
 801253a:	60f8      	str	r0, [r7, #12]
 801253c:	60b9      	str	r1, [r7, #8]
 801253e:	607a      	str	r2, [r7, #4]
 8012540:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012546:	f003 0302 	and.w	r3, r3, #2
 801254a:	2b00      	cmp	r3, #0
 801254c:	d106      	bne.n	801255c <lfs_file_write_+0x28>
 801254e:	4b38      	ldr	r3, [pc, #224]	@ (8012630 <lfs_file_write_+0xfc>)
 8012550:	4a38      	ldr	r2, [pc, #224]	@ (8012634 <lfs_file_write_+0x100>)
 8012552:	f640 6126 	movw	r1, #3622	@ 0xe26
 8012556:	4838      	ldr	r0, [pc, #224]	@ (8012638 <lfs_file_write_+0x104>)
 8012558:	f010 fd26 	bl	8022fa8 <__assert_func>

    if (file->flags & LFS_F_READING) {
 801255c:	68bb      	ldr	r3, [r7, #8]
 801255e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012560:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8012564:	2b00      	cmp	r3, #0
 8012566:	d009      	beq.n	801257c <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8012568:	68b9      	ldr	r1, [r7, #8]
 801256a:	68f8      	ldr	r0, [r7, #12]
 801256c:	f7ff fc56 	bl	8011e1c <lfs_file_flush>
 8012570:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8012572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012574:	2b00      	cmp	r3, #0
 8012576:	d001      	beq.n	801257c <lfs_file_write_+0x48>
            return err;
 8012578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801257a:	e055      	b.n	8012628 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012580:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012584:	2b00      	cmp	r3, #0
 8012586:	d009      	beq.n	801259c <lfs_file_write_+0x68>
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012590:	429a      	cmp	r2, r3
 8012592:	d203      	bcs.n	801259c <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	441a      	add	r2, r3
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125a8:	429a      	cmp	r2, r3
 80125aa:	d902      	bls.n	80125b2 <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 80125ac:	f06f 031a 	mvn.w	r3, #26
 80125b0:	e03a      	b.n	8012628 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d121      	bne.n	8012602 <lfs_file_write_+0xce>
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d91b      	bls.n	8012602 <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80125ce:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 80125d8:	e00e      	b.n	80125f8 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 80125da:	2300      	movs	r3, #0
 80125dc:	75fb      	strb	r3, [r7, #23]
 80125de:	f107 0217 	add.w	r2, r7, #23
 80125e2:	2301      	movs	r3, #1
 80125e4:	68b9      	ldr	r1, [r7, #8]
 80125e6:	68f8      	ldr	r0, [r7, #12]
 80125e8:	f7ff fe94 	bl	8012314 <lfs_file_flushedwrite>
 80125ec:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80125ee:	69fb      	ldr	r3, [r7, #28]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	da01      	bge.n	80125f8 <lfs_file_write_+0xc4>
                return res;
 80125f4:	69fb      	ldr	r3, [r7, #28]
 80125f6:	e017      	b.n	8012628 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 80125f8:	68bb      	ldr	r3, [r7, #8]
 80125fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80125fc:	6a3a      	ldr	r2, [r7, #32]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d8eb      	bhi.n	80125da <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	68b9      	ldr	r1, [r7, #8]
 8012608:	68f8      	ldr	r0, [r7, #12]
 801260a:	f7ff fe83 	bl	8012314 <lfs_file_flushedwrite>
 801260e:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8012610:	69bb      	ldr	r3, [r7, #24]
 8012612:	2b00      	cmp	r3, #0
 8012614:	da01      	bge.n	801261a <lfs_file_write_+0xe6>
        return nsize;
 8012616:	69bb      	ldr	r3, [r7, #24]
 8012618:	e006      	b.n	8012628 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801261e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8012626:	69bb      	ldr	r3, [r7, #24]
}
 8012628:	4618      	mov	r0, r3
 801262a:	3728      	adds	r7, #40	@ 0x28
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}
 8012630:	08030804 	.word	0x08030804
 8012634:	08033cc0 	.word	0x08033cc0
 8012638:	08030484 	.word	0x08030484

0801263c <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801263c:	b580      	push	{r7, lr}
 801263e:	b08c      	sub	sp, #48	@ 0x30
 8012640:	af00      	add	r7, sp, #0
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	60b9      	str	r1, [r7, #8]
 8012646:	607a      	str	r2, [r7, #4]
 8012648:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801264e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d102      	bne.n	801265c <lfs_file_seek_+0x20>
        npos = off;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801265a:	e025      	b.n	80126a8 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	2b01      	cmp	r3, #1
 8012660:	d10f      	bne.n	8012682 <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012666:	461a      	mov	r2, r3
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	4413      	add	r3, r2
 801266c:	2b00      	cmp	r3, #0
 801266e:	da02      	bge.n	8012676 <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 8012670:	f06f 0315 	mvn.w	r3, #21
 8012674:	e067      	b.n	8012746 <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	4413      	add	r3, r2
 801267e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012680:	e012      	b.n	80126a8 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	2b02      	cmp	r3, #2
 8012686:	d10f      	bne.n	80126a8 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 8012688:	68b9      	ldr	r1, [r7, #8]
 801268a:	68f8      	ldr	r0, [r7, #12]
 801268c:	f000 f86c 	bl	8012768 <lfs_file_size_>
 8012690:	4602      	mov	r2, r0
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	4413      	add	r3, r2
 8012696:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 8012698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801269a:	2b00      	cmp	r3, #0
 801269c:	da02      	bge.n	80126a4 <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 801269e:	f06f 0315 	mvn.w	r3, #21
 80126a2:	e050      	b.n	8012746 <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 80126a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80126ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d902      	bls.n	80126b8 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 80126b2:	f06f 0315 	mvn.w	r3, #21
 80126b6:	e046      	b.n	8012746 <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80126be:	429a      	cmp	r2, r3
 80126c0:	d101      	bne.n	80126c6 <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 80126c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126c4:	e03f      	b.n	8012746 <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 80126c6:	68bb      	ldr	r3, [r7, #8]
 80126c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d12b      	bne.n	801272a <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126d6:	61bb      	str	r3, [r7, #24]
 80126d8:	f107 0318 	add.w	r3, r7, #24
 80126dc:	4619      	mov	r1, r3
 80126de:	68f8      	ldr	r0, [r7, #12]
 80126e0:	f7fe fe72 	bl	80113c8 <lfs_ctz_index>
 80126e4:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 80126e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126e8:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 80126ea:	f107 0314 	add.w	r3, r7, #20
 80126ee:	4619      	mov	r1, r3
 80126f0:	68f8      	ldr	r0, [r7, #12]
 80126f2:	f7fe fe69 	bl	80113c8 <lfs_ctz_index>
 80126f6:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 80126f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126fa:	6a3b      	ldr	r3, [r7, #32]
 80126fc:	429a      	cmp	r2, r3
 80126fe:	d114      	bne.n	801272a <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	429a      	cmp	r2, r3
 8012708:	d80f      	bhi.n	801272a <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 801270a:	68bb      	ldr	r3, [r7, #8]
 801270c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801270e:	68bb      	ldr	r3, [r7, #8]
 8012710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012712:	441a      	add	r2, r3
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	429a      	cmp	r2, r3
 8012718:	d907      	bls.n	801272a <lfs_file_seek_+0xee>
            file->pos = npos;
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801271e:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 8012720:	697a      	ldr	r2, [r7, #20]
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 8012726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012728:	e00d      	b.n	8012746 <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 801272a:	68b9      	ldr	r1, [r7, #8]
 801272c:	68f8      	ldr	r0, [r7, #12]
 801272e:	f7ff fb75 	bl	8011e1c <lfs_file_flush>
 8012732:	61f8      	str	r0, [r7, #28]
    if (err) {
 8012734:	69fb      	ldr	r3, [r7, #28]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d001      	beq.n	801273e <lfs_file_seek_+0x102>
        return err;
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	e003      	b.n	8012746 <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012742:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8012744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8012746:	4618      	mov	r0, r3
 8012748:	3730      	adds	r7, #48	@ 0x30
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}

0801274e <lfs_file_tell_>:

    return 0;
}
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
 801274e:	b480      	push	{r7}
 8012750:	b083      	sub	sp, #12
 8012752:	af00      	add	r7, sp, #0
 8012754:	6078      	str	r0, [r7, #4]
 8012756:	6039      	str	r1, [r7, #0]
    (void)lfs;
    return file->pos;
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 801275c:	4618      	mov	r0, r3
 801275e:	370c      	adds	r7, #12
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr

08012768 <lfs_file_size_>:
    }

    return 0;
}

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 8012768:	b580      	push	{r7, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
 8012770:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801277a:	2b00      	cmp	r3, #0
 801277c:	d009      	beq.n	8012792 <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012786:	4619      	mov	r1, r3
 8012788:	4610      	mov	r0, r2
 801278a:	f7fa fa4c 	bl	800cc26 <lfs_max>
 801278e:	4603      	mov	r3, r0
 8012790:	e001      	b.n	8012796 <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8012796:	4618      	mov	r0, r3
 8012798:	3708      	adds	r7, #8
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}

0801279e <lfs_stat_>:


/// General fs operations ///
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801279e:	b580      	push	{r7, lr}
 80127a0:	b08e      	sub	sp, #56	@ 0x38
 80127a2:	af00      	add	r7, sp, #0
 80127a4:	60f8      	str	r0, [r7, #12]
 80127a6:	60b9      	str	r1, [r7, #8]
 80127a8:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 80127aa:	f107 0208 	add.w	r2, r7, #8
 80127ae:	f107 0114 	add.w	r1, r7, #20
 80127b2:	2300      	movs	r3, #0
 80127b4:	68f8      	ldr	r0, [r7, #12]
 80127b6:	f7fc fe4d 	bl	800f454 <lfs_dir_find>
 80127ba:	6378      	str	r0, [r7, #52]	@ 0x34
    if (tag < 0) {
 80127bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127be:	2b00      	cmp	r3, #0
 80127c0:	da01      	bge.n	80127c6 <lfs_stat_+0x28>
        return (int)tag;
 80127c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127c4:	e00c      	b.n	80127e0 <lfs_stat_+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 80127c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127c8:	4618      	mov	r0, r3
 80127ca:	f7fa ffaf 	bl	800d72c <lfs_tag_id>
 80127ce:	4603      	mov	r3, r0
 80127d0:	461a      	mov	r2, r3
 80127d2:	f107 0114 	add.w	r1, r7, #20
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	68f8      	ldr	r0, [r7, #12]
 80127da:	f7fc fd77 	bl	800f2cc <lfs_dir_getinfo>
 80127de:	4603      	mov	r3, r0
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3738      	adds	r7, #56	@ 0x38
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <lfs_remove_>:

#ifndef LFS_READONLY
static int lfs_remove_(lfs_t *lfs, const char *path) {
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b0a0      	sub	sp, #128	@ 0x80
 80127ec:	af02      	add	r7, sp, #8
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80127f2:	6878      	ldr	r0, [r7, #4]
 80127f4:	f001 fe0c 	bl	8014410 <lfs_fs_forceconsistency>
 80127f8:	6778      	str	r0, [r7, #116]	@ 0x74
    if (err) {
 80127fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d001      	beq.n	8012804 <lfs_remove_+0x1c>
        return err;
 8012800:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012802:	e0bc      	b.n	801297e <lfs_remove_+0x196>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8012804:	463a      	mov	r2, r7
 8012806:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801280a:	2300      	movs	r3, #0
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f7fc fe21 	bl	800f454 <lfs_dir_find>
 8012812:	6738      	str	r0, [r7, #112]	@ 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8012814:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012816:	2b00      	cmp	r3, #0
 8012818:	db09      	blt.n	801282e <lfs_remove_+0x46>
 801281a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801281c:	4618      	mov	r0, r3
 801281e:	f7fa ff85 	bl	800d72c <lfs_tag_id>
 8012822:	4603      	mov	r3, r0
 8012824:	461a      	mov	r2, r3
 8012826:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801282a:	429a      	cmp	r2, r3
 801282c:	d107      	bne.n	801283e <lfs_remove_+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801282e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012830:	2b00      	cmp	r3, #0
 8012832:	da01      	bge.n	8012838 <lfs_remove_+0x50>
 8012834:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012836:	e0a2      	b.n	801297e <lfs_remove_+0x196>
 8012838:	f06f 0315 	mvn.w	r3, #21
 801283c:	e09f      	b.n	801297e <lfs_remove_+0x196>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012842:	627b      	str	r3, [r7, #36]	@ 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8012844:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012846:	4618      	mov	r0, r3
 8012848:	f7fa ff46 	bl	800d6d8 <lfs_tag_type3>
 801284c:	4603      	mov	r3, r0
 801284e:	2b02      	cmp	r3, #2
 8012850:	d142      	bne.n	80128d8 <lfs_remove_+0xf0>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8012852:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012854:	4618      	mov	r0, r3
 8012856:	f7fa ff69 	bl	800d72c <lfs_tag_id>
 801285a:	4603      	mov	r3, r0
 801285c:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801285e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012862:	f043 0308 	orr.w	r3, r3, #8
 8012866:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801286a:	f107 020c 	add.w	r2, r7, #12
 801286e:	9200      	str	r2, [sp, #0]
 8012870:	4a45      	ldr	r2, [pc, #276]	@ (8012988 <lfs_remove_+0x1a0>)
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7fb fbd6 	bl	800e024 <lfs_dir_get>
 8012878:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (res < 0) {
 801287a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801287c:	2b00      	cmp	r3, #0
 801287e:	da01      	bge.n	8012884 <lfs_remove_+0x9c>
            return (int)res;
 8012880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012882:	e07c      	b.n	801297e <lfs_remove_+0x196>
        }
        lfs_pair_fromle32(pair);
 8012884:	f107 030c 	add.w	r3, r7, #12
 8012888:	4618      	mov	r0, r3
 801288a:	f7fa feb0 	bl	800d5ee <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801288e:	f107 020c 	add.w	r2, r7, #12
 8012892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012896:	3308      	adds	r3, #8
 8012898:	4619      	mov	r1, r3
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f7fc fcc8 	bl	800f230 <lfs_dir_fetch>
 80128a0:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 80128a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d001      	beq.n	80128ac <lfs_remove_+0xc4>
            return err;
 80128a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80128aa:	e068      	b.n	801297e <lfs_remove_+0x196>
        }

        if (dir.m.count > 0 || dir.m.split) {
 80128ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80128b0:	2b00      	cmp	r3, #0
//            return LFS_ERR_NOTEMPTY;  COMMENT make possible to remove directory iven if not epty.
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 80128b2:	2101      	movs	r1, #1
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f001 fa89 	bl	8013dcc <lfs_fs_preporphans>
 80128ba:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 80128bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d001      	beq.n	80128c6 <lfs_remove_+0xde>
            return err;
 80128c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80128c4:	e05b      	b.n	801297e <lfs_remove_+0x196>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 80128c6:	2300      	movs	r3, #0
 80128c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        dir.id = 0;
 80128cc:	2300      	movs	r3, #0
 80128ce:	853b      	strh	r3, [r7, #40]	@ 0x28
        lfs->mlist = &dir;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80128d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 80128d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80128da:	4618      	mov	r0, r3
 80128dc:	f7fa ff26 	bl	800d72c <lfs_tag_id>
 80128e0:	4603      	mov	r3, r0
 80128e2:	029b      	lsls	r3, r3, #10
 80128e4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80128e8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80128ec:	61fb      	str	r3, [r7, #28]
 80128ee:	2300      	movs	r3, #0
 80128f0:	623b      	str	r3, [r7, #32]
 80128f2:	f107 021c 	add.w	r2, r7, #28
 80128f6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80128fa:	2301      	movs	r3, #1
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f7fe faf1 	bl	8010ee4 <lfs_dir_commit>
 8012902:	6778      	str	r0, [r7, #116]	@ 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8012904:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012906:	2b00      	cmp	r3, #0
 8012908:	d004      	beq.n	8012914 <lfs_remove_+0x12c>
        lfs->mlist = dir.next;
 801290a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 8012910:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012912:	e034      	b.n	801297e <lfs_remove_+0x196>
    }

    lfs->mlist = dir.next;
 8012914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	629a      	str	r2, [r3, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801291a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801291c:	4618      	mov	r0, r3
 801291e:	f7fa fedb 	bl	800d6d8 <lfs_tag_type3>
 8012922:	4603      	mov	r3, r0
 8012924:	2b02      	cmp	r3, #2
 8012926:	d129      	bne.n	801297c <lfs_remove_+0x194>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8012928:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f001 fa4d 	bl	8013dcc <lfs_fs_preporphans>
 8012932:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8012934:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012936:	2b00      	cmp	r3, #0
 8012938:	d001      	beq.n	801293e <lfs_remove_+0x156>
            return err;
 801293a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801293c:	e01f      	b.n	801297e <lfs_remove_+0x196>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801293e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8012942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012946:	3308      	adds	r3, #8
 8012948:	4619      	mov	r1, r3
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f001 f8f4 	bl	8013b38 <lfs_fs_pred>
 8012950:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8012952:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012954:	2b00      	cmp	r3, #0
 8012956:	d001      	beq.n	801295c <lfs_remove_+0x174>
            return err;
 8012958:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801295a:	e010      	b.n	801297e <lfs_remove_+0x196>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801295c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012960:	f103 0208 	add.w	r2, r3, #8
 8012964:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012968:	4619      	mov	r1, r3
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f7fd f90c 	bl	800fb88 <lfs_dir_drop>
 8012970:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8012972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012974:	2b00      	cmp	r3, #0
 8012976:	d001      	beq.n	801297c <lfs_remove_+0x194>
            return err;
 8012978:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801297a:	e000      	b.n	801297e <lfs_remove_+0x196>
        }
    }

    return 0;
 801297c:	2300      	movs	r3, #0
}
 801297e:	4618      	mov	r0, r3
 8012980:	3778      	adds	r7, #120	@ 0x78
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}
 8012986:	bf00      	nop
 8012988:	700ffc00 	.word	0x700ffc00

0801298c <lfs_rename_>:
#endif

#ifndef LFS_READONLY
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801298c:	b590      	push	{r4, r7, lr}
 801298e:	b0c3      	sub	sp, #268	@ 0x10c
 8012990:	af02      	add	r7, sp, #8
 8012992:	60f8      	str	r0, [r7, #12]
 8012994:	60b9      	str	r1, [r7, #8]
 8012996:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8012998:	68f8      	ldr	r0, [r7, #12]
 801299a:	f001 fd39 	bl	8014410 <lfs_fs_forceconsistency>
 801299e:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
    if (err) {
 80129a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d002      	beq.n	80129b0 <lfs_rename_+0x24>
        return err;
 80129aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80129ae:	e203      	b.n	8012db8 <lfs_rename_+0x42c>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 80129b0:	f107 0208 	add.w	r2, r7, #8
 80129b4:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 80129b8:	2300      	movs	r3, #0
 80129ba:	68f8      	ldr	r0, [r7, #12]
 80129bc:	f7fc fd4a 	bl	800f454 <lfs_dir_find>
 80129c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 80129c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	db0a      	blt.n	80129e2 <lfs_rename_+0x56>
 80129cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80129d0:	4618      	mov	r0, r3
 80129d2:	f7fa feab 	bl	800d72c <lfs_tag_id>
 80129d6:	4603      	mov	r3, r0
 80129d8:	461a      	mov	r2, r3
 80129da:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80129de:	429a      	cmp	r2, r3
 80129e0:	d109      	bne.n	80129f6 <lfs_rename_+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 80129e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	da02      	bge.n	80129f0 <lfs_rename_+0x64>
 80129ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80129ee:	e1e3      	b.n	8012db8 <lfs_rename_+0x42c>
 80129f0:	f06f 0315 	mvn.w	r3, #21
 80129f4:	e1e0      	b.n	8012db8 <lfs_rename_+0x42c>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 80129f6:	f107 03a2 	add.w	r3, r7, #162	@ 0xa2
 80129fa:	1d3a      	adds	r2, r7, #4
 80129fc:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8012a00:	68f8      	ldr	r0, [r7, #12]
 8012a02:	f7fc fd27 	bl	800f454 <lfs_dir_find>
 8012a06:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 8012a0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	db0a      	blt.n	8012a28 <lfs_rename_+0x9c>
 8012a12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7fa fe88 	bl	800d72c <lfs_tag_id>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	461a      	mov	r2, r3
 8012a20:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d114      	bne.n	8012a52 <lfs_rename_+0xc6>
 8012a28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012a2c:	f113 0f02 	cmn.w	r3, #2
 8012a30:	d105      	bne.n	8012a3e <lfs_rename_+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 8012a32:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012a36:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8012a3a:	4293      	cmp	r3, r2
 8012a3c:	d109      	bne.n	8012a52 <lfs_rename_+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 8012a3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	da02      	bge.n	8012a4c <lfs_rename_+0xc0>
 8012a46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012a4a:	e1b5      	b.n	8012db8 <lfs_rename_+0x42c>
 8012a4c:	f06f 0315 	mvn.w	r3, #21
 8012a50:	e1b2      	b.n	8012db8 <lfs_rename_+0x42c>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 8012a52:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8012a56:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8012a5a:	4611      	mov	r1, r2
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7fa fd6f 	bl	800d540 <lfs_pair_cmp>
 8012a62:	4603      	mov	r3, r0
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	bf0c      	ite	eq
 8012a68:	2301      	moveq	r3, #1
 8012a6a:	2300      	movne	r3, #0
 8012a6c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 8012a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7fa fe59 	bl	800d72c <lfs_tag_id>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a84:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (prevtag == LFS_ERR_NOENT) {
 8012a86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012a8a:	f113 0f02 	cmn.w	r3, #2
 8012a8e:	d120      	bne.n	8012ad2 <lfs_rename_+0x146>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7ed fc04 	bl	80002a0 <strlen>
 8012a98:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (nlen > lfs->name_max) {
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012aa0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d902      	bls.n	8012aae <lfs_rename_+0x122>
            return LFS_ERR_NAMETOOLONG;
 8012aa8:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8012aac:	e184      	b.n	8012db8 <lfs_rename_+0x42c>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 8012aae:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	f000 8090 	beq.w	8012bd8 <lfs_rename_+0x24c>
 8012ab8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012abc:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	f0c0 8089 	bcc.w	8012bd8 <lfs_rename_+0x24c>
            newoldid += 1;
 8012ac6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8012aca:	3301      	adds	r3, #1
 8012acc:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 8012ad0:	e082      	b.n	8012bd8 <lfs_rename_+0x24c>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 8012ad2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f7fa fdfe 	bl	800d6d8 <lfs_tag_type3>
 8012adc:	4603      	mov	r3, r0
 8012ade:	461c      	mov	r4, r3
 8012ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7fa fdf7 	bl	800d6d8 <lfs_tag_type3>
 8012aea:	4603      	mov	r3, r0
 8012aec:	429c      	cmp	r4, r3
 8012aee:	d00d      	beq.n	8012b0c <lfs_rename_+0x180>
        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)
 8012af0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7fa fdef 	bl	800d6d8 <lfs_tag_type3>
 8012afa:	4603      	mov	r3, r0
                ? LFS_ERR_ISDIR
                : LFS_ERR_NOTDIR;
 8012afc:	2b02      	cmp	r3, #2
 8012afe:	d102      	bne.n	8012b06 <lfs_rename_+0x17a>
 8012b00:	f06f 0314 	mvn.w	r3, #20
 8012b04:	e158      	b.n	8012db8 <lfs_rename_+0x42c>
 8012b06:	f06f 0313 	mvn.w	r3, #19
 8012b0a:	e155      	b.n	8012db8 <lfs_rename_+0x42c>
    } else if (samepair && newid == newoldid) {
 8012b0c:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d007      	beq.n	8012b24 <lfs_rename_+0x198>
 8012b14:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012b18:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d101      	bne.n	8012b24 <lfs_rename_+0x198>
        // we're renaming to ourselves??
        return 0;
 8012b20:	2300      	movs	r3, #0
 8012b22:	e149      	b.n	8012db8 <lfs_rename_+0x42c>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8012b24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7fa fdd5 	bl	800d6d8 <lfs_tag_type3>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	2b02      	cmp	r3, #2
 8012b32:	d151      	bne.n	8012bd8 <lfs_rename_+0x24c>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 8012b34:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012b38:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8012b3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012b3e:	f043 0308 	orr.w	r3, r3, #8
 8012b42:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8012b46:	f107 0220 	add.w	r2, r7, #32
 8012b4a:	9200      	str	r2, [sp, #0]
 8012b4c:	4a9d      	ldr	r2, [pc, #628]	@ (8012dc4 <lfs_rename_+0x438>)
 8012b4e:	68f8      	ldr	r0, [r7, #12]
 8012b50:	f7fb fa68 	bl	800e024 <lfs_dir_get>
 8012b54:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
        if (res < 0) {
 8012b58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	da02      	bge.n	8012b66 <lfs_rename_+0x1da>
            return (int)res;
 8012b60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012b64:	e128      	b.n	8012db8 <lfs_rename_+0x42c>
        }
        lfs_pair_fromle32(prevpair);
 8012b66:	f107 0320 	add.w	r3, r7, #32
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f7fa fd3f 	bl	800d5ee <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 8012b70:	f107 0220 	add.w	r2, r7, #32
 8012b74:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8012b78:	3308      	adds	r3, #8
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	68f8      	ldr	r0, [r7, #12]
 8012b7e:	f7fc fb57 	bl	800f230 <lfs_dir_fetch>
 8012b82:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8012b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d002      	beq.n	8012b94 <lfs_rename_+0x208>
            return err;
 8012b8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012b92:	e111      	b.n	8012db8 <lfs_rename_+0x42c>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 8012b94:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d103      	bne.n	8012ba4 <lfs_rename_+0x218>
 8012b9c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d002      	beq.n	8012baa <lfs_rename_+0x21e>
            return LFS_ERR_NOTEMPTY;
 8012ba4:	f06f 0326 	mvn.w	r3, #38	@ 0x26
 8012ba8:	e106      	b.n	8012db8 <lfs_rename_+0x42c>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8012baa:	2101      	movs	r1, #1
 8012bac:	68f8      	ldr	r0, [r7, #12]
 8012bae:	f001 f90d 	bl	8013dcc <lfs_fs_preporphans>
 8012bb2:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8012bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d002      	beq.n	8012bc4 <lfs_rename_+0x238>
            return err;
 8012bbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012bc2:	e0f9      	b.n	8012db8 <lfs_rename_+0x42c>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
        prevdir.id = 0;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        lfs->mlist = &prevdir;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8012bd6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (!samepair) {
 8012bd8:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012bdc:	f083 0301 	eor.w	r3, r3, #1
 8012be0:	b2db      	uxtb	r3, r3
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d007      	beq.n	8012bf6 <lfs_rename_+0x26a>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 8012be6:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8012bea:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8012bee:	4619      	mov	r1, r3
 8012bf0:	68f8      	ldr	r0, [r7, #12]
 8012bf2:	f001 f93b 	bl	8013e6c <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8012bf6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012bfa:	f113 0f02 	cmn.w	r3, #2
 8012bfe:	d007      	beq.n	8012c10 <lfs_rename_+0x284>
 8012c00:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012c04:	029b      	lsls	r3, r3, #10
 8012c06:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012c0a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8012c0e:	e000      	b.n	8012c12 <lfs_rename_+0x286>
 8012c10:	2300      	movs	r3, #0
 8012c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8012c14:	2300      	movs	r3, #0
 8012c16:	657b      	str	r3, [r7, #84]	@ 0x54
 8012c18:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012c1c:	029b      	lsls	r3, r3, #10
 8012c1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012c22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012c26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012c28:	2300      	movs	r3, #0
 8012c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7fa fd51 	bl	800d6d8 <lfs_tag_type3>
 8012c36:	4603      	mov	r3, r0
 8012c38:	051a      	lsls	r2, r3, #20
 8012c3a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012c3e:	029b      	lsls	r3, r3, #10
 8012c40:	ea42 0403 	orr.w	r4, r2, r3
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7ed fb2a 	bl	80002a0 <strlen>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	4323      	orrs	r3, r4
 8012c50:	663b      	str	r3, [r7, #96]	@ 0x60
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	667b      	str	r3, [r7, #100]	@ 0x64
 8012c56:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012c5a:	029c      	lsls	r4, r3, #10
 8012c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7fa fd63 	bl	800d72c <lfs_tag_id>
 8012c66:	4603      	mov	r3, r0
 8012c68:	4323      	orrs	r3, r4
 8012c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012c72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012c74:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8012c78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012c7a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d007      	beq.n	8012c92 <lfs_rename_+0x306>
 8012c82:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8012c86:	029b      	lsls	r3, r3, #10
 8012c88:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012c8c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8012c90:	e000      	b.n	8012c94 <lfs_rename_+0x308>
 8012c92:	2300      	movs	r3, #0
 8012c94:	673b      	str	r3, [r7, #112]	@ 0x70
 8012c96:	2300      	movs	r3, #0
 8012c98:	677b      	str	r3, [r7, #116]	@ 0x74
 8012c9a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8012c9e:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8012ca2:	2305      	movs	r3, #5
 8012ca4:	68f8      	ldr	r0, [r7, #12]
 8012ca6:	f7fe f91d 	bl	8010ee4 <lfs_dir_commit>
 8012caa:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 8012cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d005      	beq.n	8012cc2 <lfs_rename_+0x336>
        lfs->mlist = prevdir.next;
 8012cb6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 8012cbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012cc0:	e07a      	b.n	8012db8 <lfs_rename_+0x42c>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 8012cc2:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012cc6:	f083 0301 	eor.w	r3, r3, #1
 8012cca:	b2db      	uxtb	r3, r3
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d02f      	beq.n	8012d30 <lfs_rename_+0x3a4>
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	3330      	adds	r3, #48	@ 0x30
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7fa fdbe 	bl	800d856 <lfs_gstate_hasmove>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d027      	beq.n	8012d30 <lfs_rename_+0x3a4>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8012ce6:	68f8      	ldr	r0, [r7, #12]
 8012ce8:	f001 f8c0 	bl	8013e6c <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 8012cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f7fa fd1b 	bl	800d72c <lfs_tag_id>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	029b      	lsls	r3, r3, #10
 8012cfa:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012cfe:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8012d02:	61bb      	str	r3, [r7, #24]
 8012d04:	2300      	movs	r3, #0
 8012d06:	61fb      	str	r3, [r7, #28]
 8012d08:	f107 0218 	add.w	r2, r7, #24
 8012d0c:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8012d10:	2301      	movs	r3, #1
 8012d12:	68f8      	ldr	r0, [r7, #12]
 8012d14:	f7fe f8e6 	bl	8010ee4 <lfs_dir_commit>
 8012d18:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 8012d1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d005      	beq.n	8012d30 <lfs_rename_+0x3a4>
            lfs->mlist = prevdir.next;
 8012d24:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 8012d2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d2e:	e043      	b.n	8012db8 <lfs_rename_+0x42c>
        }
    }

    lfs->mlist = prevdir.next;
 8012d30:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	629a      	str	r2, [r3, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 8012d36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012d3a:	f113 0f02 	cmn.w	r3, #2
 8012d3e:	d03a      	beq.n	8012db6 <lfs_rename_+0x42a>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8012d40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7fa fcc7 	bl	800d6d8 <lfs_tag_type3>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b02      	cmp	r3, #2
 8012d4e:	d132      	bne.n	8012db6 <lfs_rename_+0x42a>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8012d50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012d54:	68f8      	ldr	r0, [r7, #12]
 8012d56:	f001 f839 	bl	8013dcc <lfs_fs_preporphans>
 8012d5a:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8012d5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d002      	beq.n	8012d6c <lfs_rename_+0x3e0>
            return err;
 8012d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d6a:	e025      	b.n	8012db8 <lfs_rename_+0x42c>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 8012d6c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8012d70:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8012d74:	3308      	adds	r3, #8
 8012d76:	4619      	mov	r1, r3
 8012d78:	68f8      	ldr	r0, [r7, #12]
 8012d7a:	f000 fedd 	bl	8013b38 <lfs_fs_pred>
 8012d7e:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8012d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d002      	beq.n	8012d90 <lfs_rename_+0x404>
            return err;
 8012d8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012d8e:	e013      	b.n	8012db8 <lfs_rename_+0x42c>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 8012d90:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8012d94:	f103 0208 	add.w	r2, r3, #8
 8012d98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8012d9c:	4619      	mov	r1, r3
 8012d9e:	68f8      	ldr	r0, [r7, #12]
 8012da0:	f7fc fef2 	bl	800fb88 <lfs_dir_drop>
 8012da4:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8012da8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d002      	beq.n	8012db6 <lfs_rename_+0x42a>
            return err;
 8012db0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012db4:	e000      	b.n	8012db8 <lfs_rename_+0x42c>
        }
    }

    return 0;
 8012db6:	2300      	movs	r3, #0
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd90      	pop	{r4, r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	700ffc00 	.word	0x700ffc00

08012dc8 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8012dc8:	b590      	push	{r4, r7, lr}
 8012dca:	b08d      	sub	sp, #52	@ 0x34
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	683a      	ldr	r2, [r7, #0]
 8012dd6:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 8012de0:	2300      	movs	r3, #0
 8012de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012de8:	69db      	ldr	r3, [r3, #28]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d106      	bne.n	8012dfc <lfs_init+0x34>
 8012dee:	4b96      	ldr	r3, [pc, #600]	@ (8013048 <lfs_init+0x280>)
 8012df0:	4a96      	ldr	r2, [pc, #600]	@ (801304c <lfs_init+0x284>)
 8012df2:	f241 0152 	movw	r1, #4178	@ 0x1052
 8012df6:	4896      	ldr	r0, [pc, #600]	@ (8013050 <lfs_init+0x288>)
 8012df8:	f010 f8d6 	bl	8022fa8 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e00:	6a1b      	ldr	r3, [r3, #32]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d106      	bne.n	8012e14 <lfs_init+0x4c>
 8012e06:	4b93      	ldr	r3, [pc, #588]	@ (8013054 <lfs_init+0x28c>)
 8012e08:	4a90      	ldr	r2, [pc, #576]	@ (801304c <lfs_init+0x284>)
 8012e0a:	f241 0153 	movw	r1, #4179	@ 0x1053
 8012e0e:	4890      	ldr	r0, [pc, #576]	@ (8013050 <lfs_init+0x288>)
 8012e10:	f010 f8ca 	bl	8022fa8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d106      	bne.n	8012e2c <lfs_init+0x64>
 8012e1e:	4b8e      	ldr	r3, [pc, #568]	@ (8013058 <lfs_init+0x290>)
 8012e20:	4a8a      	ldr	r2, [pc, #552]	@ (801304c <lfs_init+0x284>)
 8012e22:	f241 0154 	movw	r1, #4180	@ 0x1054
 8012e26:	488a      	ldr	r0, [pc, #552]	@ (8013050 <lfs_init+0x288>)
 8012e28:	f010 f8be 	bl	8022fa8 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012e36:	69d2      	ldr	r2, [r2, #28]
 8012e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e3c:	fb01 f202 	mul.w	r2, r1, r2
 8012e40:	1a9b      	subs	r3, r3, r2
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d006      	beq.n	8012e54 <lfs_init+0x8c>
 8012e46:	4b85      	ldr	r3, [pc, #532]	@ (801305c <lfs_init+0x294>)
 8012e48:	4a80      	ldr	r2, [pc, #512]	@ (801304c <lfs_init+0x284>)
 8012e4a:	f241 0158 	movw	r1, #4184	@ 0x1058
 8012e4e:	4880      	ldr	r0, [pc, #512]	@ (8013050 <lfs_init+0x288>)
 8012e50:	f010 f8aa 	bl	8022fa8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e5a:	687a      	ldr	r2, [r7, #4]
 8012e5c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012e5e:	6a12      	ldr	r2, [r2, #32]
 8012e60:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e64:	fb01 f202 	mul.w	r2, r1, r2
 8012e68:	1a9b      	subs	r3, r3, r2
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d006      	beq.n	8012e7c <lfs_init+0xb4>
 8012e6e:	4b7c      	ldr	r3, [pc, #496]	@ (8013060 <lfs_init+0x298>)
 8012e70:	4a76      	ldr	r2, [pc, #472]	@ (801304c <lfs_init+0x284>)
 8012e72:	f241 0159 	movw	r1, #4185	@ 0x1059
 8012e76:	4876      	ldr	r0, [pc, #472]	@ (8013050 <lfs_init+0x288>)
 8012e78:	f010 f896 	bl	8022fa8 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e82:	687a      	ldr	r2, [r7, #4]
 8012e84:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012e86:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012e88:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e8c:	fb01 f202 	mul.w	r2, r1, r2
 8012e90:	1a9b      	subs	r3, r3, r2
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d006      	beq.n	8012ea4 <lfs_init+0xdc>
 8012e96:	4b73      	ldr	r3, [pc, #460]	@ (8013064 <lfs_init+0x29c>)
 8012e98:	4a6c      	ldr	r2, [pc, #432]	@ (801304c <lfs_init+0x284>)
 8012e9a:	f241 015a 	movw	r1, #4186	@ 0x105a
 8012e9e:	486c      	ldr	r0, [pc, #432]	@ (8013050 <lfs_init+0x288>)
 8012ea0:	f010 f882 	bl	8022fa8 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012eaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8012eac:	d806      	bhi.n	8012ebc <lfs_init+0xf4>
 8012eae:	4b6e      	ldr	r3, [pc, #440]	@ (8013068 <lfs_init+0x2a0>)
 8012eb0:	4a66      	ldr	r2, [pc, #408]	@ (801304c <lfs_init+0x284>)
 8012eb2:	f241 015d 	movw	r1, #4189	@ 0x105d
 8012eb6:	4866      	ldr	r0, [pc, #408]	@ (8013050 <lfs_init+0x288>)
 8012eb8:	f010 f876 	bl	8022fa8 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ec2:	3b08      	subs	r3, #8
 8012ec4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7f9 fef1 	bl	800ccb4 <lfs_npw2>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	009a      	lsls	r2, r3, #2
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d906      	bls.n	8012eee <lfs_init+0x126>
 8012ee0:	4b62      	ldr	r3, [pc, #392]	@ (801306c <lfs_init+0x2a4>)
 8012ee2:	4a5a      	ldr	r2, [pc, #360]	@ (801304c <lfs_init+0x284>)
 8012ee4:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8012ee8:	4859      	ldr	r0, [pc, #356]	@ (8013050 <lfs_init+0x288>)
 8012eea:	f010 f85d 	bl	8022fa8 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d106      	bne.n	8012f06 <lfs_init+0x13e>
 8012ef8:	4b5d      	ldr	r3, [pc, #372]	@ (8013070 <lfs_init+0x2a8>)
 8012efa:	4a54      	ldr	r2, [pc, #336]	@ (801304c <lfs_init+0x284>)
 8012efc:	f241 0169 	movw	r1, #4201	@ 0x1069
 8012f00:	4853      	ldr	r0, [pc, #332]	@ (8013050 <lfs_init+0x288>)
 8012f02:	f010 f851 	bl	8022fa8 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d00f      	beq.n	8012f30 <lfs_init+0x168>
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f1c:	085b      	lsrs	r3, r3, #1
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	d206      	bcs.n	8012f30 <lfs_init+0x168>
 8012f22:	4b54      	ldr	r3, [pc, #336]	@ (8013074 <lfs_init+0x2ac>)
 8012f24:	4a49      	ldr	r2, [pc, #292]	@ (801304c <lfs_init+0x284>)
 8012f26:	f241 016f 	movw	r1, #4207	@ 0x106f
 8012f2a:	4849      	ldr	r0, [pc, #292]	@ (8013050 <lfs_init+0x288>)
 8012f2c:	f010 f83c 	bl	8022fa8 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012f3a:	d00e      	beq.n	8012f5a <lfs_init+0x192>
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d906      	bls.n	8012f5a <lfs_init+0x192>
 8012f4c:	4b4a      	ldr	r3, [pc, #296]	@ (8013078 <lfs_init+0x2b0>)
 8012f4e:	4a3f      	ldr	r2, [pc, #252]	@ (801304c <lfs_init+0x284>)
 8012f50:	f241 0171 	movw	r1, #4209	@ 0x1071
 8012f54:	483e      	ldr	r0, [pc, #248]	@ (8013050 <lfs_init+0x288>)
 8012f56:	f010 f827 	bl	8022fa8 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d005      	beq.n	8012f70 <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	60da      	str	r2, [r3, #12]
 8012f6e:	e010      	b.n	8012f92 <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7f9 ff04 	bl	800cd84 <lfs_malloc>
 8012f7c:	4602      	mov	r2, r0
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	68db      	ldr	r3, [r3, #12]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d103      	bne.n	8012f92 <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 8012f8a:	f06f 030b 	mvn.w	r3, #11
 8012f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8012f90:	e163      	b.n	801325a <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d005      	beq.n	8012fa8 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012fa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	61da      	str	r2, [r3, #28]
 8012fa6:	e010      	b.n	8012fca <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7f9 fee8 	bl	800cd84 <lfs_malloc>
 8012fb4:	4602      	mov	r2, r0
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	69db      	ldr	r3, [r3, #28]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d103      	bne.n	8012fca <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 8012fc2:	f06f 030b 	mvn.w	r3, #11
 8012fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8012fc8:	e147      	b.n	801325a <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	4619      	mov	r1, r3
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f7f9 fefe 	bl	800cdd0 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	3310      	adds	r3, #16
 8012fd8:	4619      	mov	r1, r3
 8012fda:	6878      	ldr	r0, [r7, #4]
 8012fdc:	f7f9 fef8 	bl	800cdd0 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d106      	bne.n	8012ff8 <lfs_init+0x230>
 8012fea:	4b24      	ldr	r3, [pc, #144]	@ (801307c <lfs_init+0x2b4>)
 8012fec:	4a17      	ldr	r2, [pc, #92]	@ (801304c <lfs_init+0x284>)
 8012fee:	f241 0190 	movw	r1, #4240	@ 0x1090
 8012ff2:	4817      	ldr	r0, [pc, #92]	@ (8013050 <lfs_init+0x288>)
 8012ff4:	f00f ffd8 	bl	8022fa8 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d005      	beq.n	801300e <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013006:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	665a      	str	r2, [r3, #100]	@ 0x64
 801300c:	e010      	b.n	8013030 <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013014:	4618      	mov	r0, r3
 8013016:	f7f9 feb5 	bl	800cd84 <lfs_malloc>
 801301a:	4602      	mov	r2, r0
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013024:	2b00      	cmp	r3, #0
 8013026:	d103      	bne.n	8013030 <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 8013028:	f06f 030b 	mvn.w	r3, #11
 801302c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 801302e:	e114      	b.n	801325a <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013036:	2bff      	cmp	r3, #255	@ 0xff
 8013038:	d924      	bls.n	8013084 <lfs_init+0x2bc>
 801303a:	4b11      	ldr	r3, [pc, #68]	@ (8013080 <lfs_init+0x2b8>)
 801303c:	4a03      	ldr	r2, [pc, #12]	@ (801304c <lfs_init+0x284>)
 801303e:	f241 019c 	movw	r1, #4252	@ 0x109c
 8013042:	4803      	ldr	r0, [pc, #12]	@ (8013050 <lfs_init+0x288>)
 8013044:	f00f ffb0 	bl	8022fa8 <__assert_func>
 8013048:	08030834 	.word	0x08030834
 801304c:	08033cd0 	.word	0x08033cd0
 8013050:	08030484 	.word	0x08030484
 8013054:	08030850 	.word	0x08030850
 8013058:	0803086c 	.word	0x0803086c
 801305c:	08030888 	.word	0x08030888
 8013060:	080308b8 	.word	0x080308b8
 8013064:	080308e8 	.word	0x080308e8
 8013068:	0803091c 	.word	0x0803091c
 801306c:	08030938 	.word	0x08030938
 8013070:	08030984 	.word	0x08030984
 8013074:	080309a0 	.word	0x080309a0
 8013078:	080309f4 	.word	0x080309f4
 801307c:	08030a54 	.word	0x08030a54
 8013080:	08030a74 	.word	0x08030a74
    lfs->name_max = lfs->cfg->name_max;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013088:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013092:	2b00      	cmp	r3, #0
 8013094:	d102      	bne.n	801309c <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	22ff      	movs	r2, #255	@ 0xff
 801309a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80130a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	da06      	bge.n	80130b4 <lfs_init+0x2ec>
 80130a6:	4b71      	ldr	r3, [pc, #452]	@ (801326c <lfs_init+0x4a4>)
 80130a8:	4a71      	ldr	r2, [pc, #452]	@ (8013270 <lfs_init+0x4a8>)
 80130aa:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 80130ae:	4871      	ldr	r0, [pc, #452]	@ (8013274 <lfs_init+0x4ac>)
 80130b0:	f00f ff7a 	bl	8022fa8 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80130b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d103      	bne.n	80130ce <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80130cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80130d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80130d4:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80130d8:	4293      	cmp	r3, r2
 80130da:	d906      	bls.n	80130ea <lfs_init+0x322>
 80130dc:	4b66      	ldr	r3, [pc, #408]	@ (8013278 <lfs_init+0x4b0>)
 80130de:	4a64      	ldr	r2, [pc, #400]	@ (8013270 <lfs_init+0x4a8>)
 80130e0:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 80130e4:	4863      	ldr	r0, [pc, #396]	@ (8013274 <lfs_init+0x4ac>)
 80130e6:	f00f ff5f 	bl	8022fa8 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80130ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d103      	bne.n	8013104 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8013102:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013108:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013110:	429a      	cmp	r2, r3
 8013112:	d906      	bls.n	8013122 <lfs_init+0x35a>
 8013114:	4b59      	ldr	r3, [pc, #356]	@ (801327c <lfs_init+0x4b4>)
 8013116:	4a56      	ldr	r2, [pc, #344]	@ (8013270 <lfs_init+0x4a8>)
 8013118:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801311c:	4855      	ldr	r0, [pc, #340]	@ (8013274 <lfs_init+0x4ac>)
 801311e:	f00f ff43 	bl	8022fa8 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801312c:	d00e      	beq.n	801314c <lfs_init+0x384>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013132:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801313a:	429a      	cmp	r2, r3
 801313c:	d906      	bls.n	801314c <lfs_init+0x384>
 801313e:	4b50      	ldr	r3, [pc, #320]	@ (8013280 <lfs_init+0x4b8>)
 8013140:	4a4b      	ldr	r2, [pc, #300]	@ (8013270 <lfs_init+0x4a8>)
 8013142:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 8013146:	484b      	ldr	r0, [pc, #300]	@ (8013274 <lfs_init+0x4ac>)
 8013148:	f00f ff2e 	bl	8022fa8 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013152:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013156:	d00d      	beq.n	8013174 <lfs_init+0x3ac>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801315c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013162:	429a      	cmp	r2, r3
 8013164:	d906      	bls.n	8013174 <lfs_init+0x3ac>
 8013166:	4b47      	ldr	r3, [pc, #284]	@ (8013284 <lfs_init+0x4bc>)
 8013168:	4a41      	ldr	r2, [pc, #260]	@ (8013270 <lfs_init+0x4a8>)
 801316a:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801316e:	4841      	ldr	r0, [pc, #260]	@ (8013274 <lfs_init+0x4ac>)
 8013170:	f00f ff1a 	bl	8022fa8 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801317a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801317e:	d019      	beq.n	80131b4 <lfs_init+0x3ec>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013184:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801318a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801318c:	2b00      	cmp	r3, #0
 801318e:	d004      	beq.n	801319a <lfs_init+0x3d2>
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013196:	08db      	lsrs	r3, r3, #3
 8013198:	e003      	b.n	80131a2 <lfs_init+0x3da>
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131a0:	08db      	lsrs	r3, r3, #3
 80131a2:	4293      	cmp	r3, r2
 80131a4:	d206      	bcs.n	80131b4 <lfs_init+0x3ec>
 80131a6:	4b38      	ldr	r3, [pc, #224]	@ (8013288 <lfs_init+0x4c0>)
 80131a8:	4a31      	ldr	r2, [pc, #196]	@ (8013270 <lfs_init+0x4a8>)
 80131aa:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 80131ae:	4831      	ldr	r0, [pc, #196]	@ (8013274 <lfs_init+0x4ac>)
 80131b0:	f00f fefa 	bl	8022fa8 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80131c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80131c6:	d103      	bne.n	80131d0 <lfs_init+0x408>
        lfs->inline_max = 0;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2200      	movs	r2, #0
 80131cc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80131ce:	e022      	b.n	8013216 <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d11e      	bne.n	8013216 <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131dc:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d004      	beq.n	80131f6 <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 80131f2:	08db      	lsrs	r3, r3, #3
 80131f4:	e003      	b.n	80131fe <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 80131fc:	08db      	lsrs	r3, r3, #3
 80131fe:	4619      	mov	r1, r3
 8013200:	4610      	mov	r0, r2
 8013202:	f7f9 fd20 	bl	800cc46 <lfs_min>
 8013206:	4603      	mov	r3, r0
 8013208:	4619      	mov	r1, r3
 801320a:	4620      	mov	r0, r4
 801320c:	f7f9 fd1b 	bl	800cc46 <lfs_min>
 8013210:	4602      	mov	r2, r0
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801321c:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013224:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2200      	movs	r2, #0
 801322a:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2200      	movs	r2, #0
 8013230:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	333c      	adds	r3, #60	@ 0x3c
 8013236:	2200      	movs	r2, #0
 8013238:	601a      	str	r2, [r3, #0]
 801323a:	605a      	str	r2, [r3, #4]
 801323c:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	3330      	adds	r3, #48	@ 0x30
 8013242:	2200      	movs	r2, #0
 8013244:	601a      	str	r2, [r3, #0]
 8013246:	605a      	str	r2, [r3, #4]
 8013248:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	3348      	adds	r3, #72	@ 0x48
 801324e:	2200      	movs	r2, #0
 8013250:	601a      	str	r2, [r3, #0]
 8013252:	605a      	str	r2, [r3, #4]
 8013254:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8013256:	2300      	movs	r3, #0
 8013258:	e003      	b.n	8013262 <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f000 f816 	bl	801328c <lfs_deinit>
    return err;
 8013260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8013262:	4618      	mov	r0, r3
 8013264:	3734      	adds	r7, #52	@ 0x34
 8013266:	46bd      	mov	sp, r7
 8013268:	bd90      	pop	{r4, r7, pc}
 801326a:	bf00      	nop
 801326c:	08030a90 	.word	0x08030a90
 8013270:	08033cd0 	.word	0x08033cd0
 8013274:	08030484 	.word	0x08030484
 8013278:	08030ab4 	.word	0x08030ab4
 801327c:	08030ad0 	.word	0x08030ad0
 8013280:	08030b00 	.word	0x08030b00
 8013284:	08030b58 	.word	0x08030b58
 8013288:	08030ba8 	.word	0x08030ba8

0801328c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 801328c:	b580      	push	{r7, lr}
 801328e:	b082      	sub	sp, #8
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801329a:	2b00      	cmp	r3, #0
 801329c:	d104      	bne.n	80132a8 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	68db      	ldr	r3, [r3, #12]
 80132a2:	4618      	mov	r0, r3
 80132a4:	f7f9 fd7a 	bl	800cd9c <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80132ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d104      	bne.n	80132bc <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	69db      	ldr	r3, [r3, #28]
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7f9 fd70 	bl	800cd9c <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80132c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d104      	bne.n	80132d0 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7f9 fd66 	bl	800cd9c <lfs_free>
    }

    return 0;
 80132d0:	2300      	movs	r3, #0
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3708      	adds	r7, #8
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
	...

080132dc <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 80132dc:	b580      	push	{r7, lr}
 80132de:	b0a0      	sub	sp, #128	@ 0x80
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	6039      	str	r1, [r7, #0]
    int err = 0;
 80132e6:	2300      	movs	r3, #0
 80132e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 80132ea:	6839      	ldr	r1, [r7, #0]
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f7ff fd6b 	bl	8012dc8 <lfs_init>
 80132f2:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80132f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d001      	beq.n	80132fe <lfs_format_+0x22>
            return err;
 80132fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80132fc:	e08d      	b.n	801341a <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013302:	2b00      	cmp	r3, #0
 8013304:	d106      	bne.n	8013314 <lfs_format_+0x38>
 8013306:	4b47      	ldr	r3, [pc, #284]	@ (8013424 <lfs_format_+0x148>)
 8013308:	4a47      	ldr	r2, [pc, #284]	@ (8013428 <lfs_format_+0x14c>)
 801330a:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801330e:	4847      	ldr	r0, [pc, #284]	@ (801342c <lfs_format_+0x150>)
 8013310:	f00f fe4a 	bl	8022fa8 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801331c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801331e:	461a      	mov	r2, r3
 8013320:	2100      	movs	r1, #0
 8013322:	f012 fb95 	bl	8025a50 <memset>
        lfs->lookahead.start = 0;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	2200      	movs	r2, #0
 801332a:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013332:	00da      	lsls	r2, r3, #3
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013338:	4619      	mov	r1, r3
 801333a:	4610      	mov	r0, r2
 801333c:	f7f9 fc83 	bl	800cc46 <lfs_min>
 8013340:	4602      	mov	r2, r0
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	2200      	movs	r2, #0
 801334a:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f7fa fc54 	bl	800dbfa <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8013352:	f107 030c 	add.w	r3, r7, #12
 8013356:	4619      	mov	r1, r3
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f7fc fb9b 	bl	800fa94 <lfs_dir_alloc>
 801335e:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8013360:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013362:	2b00      	cmp	r3, #0
 8013364:	d150      	bne.n	8013408 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f7fa fc1e 	bl	800dba8 <lfs_fs_disk_version>
 801336c:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 801336e:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 8013376:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801337c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 8013382:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 8013388:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801338e:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 8013390:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013394:	4618      	mov	r0, r3
 8013396:	f7fa fb7d 	bl	800da94 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801339a:	4b25      	ldr	r3, [pc, #148]	@ (8013430 <lfs_format_+0x154>)
 801339c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801339e:	2300      	movs	r3, #0
 80133a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80133a2:	4b24      	ldr	r3, [pc, #144]	@ (8013434 <lfs_format_+0x158>)
 80133a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80133a6:	4b24      	ldr	r3, [pc, #144]	@ (8013438 <lfs_format_+0x15c>)
 80133a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80133aa:	4b24      	ldr	r3, [pc, #144]	@ (801343c <lfs_format_+0x160>)
 80133ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80133ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80133b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80133b4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80133b8:	f107 010c 	add.w	r1, r7, #12
 80133bc:	2303      	movs	r3, #3
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f7fd fd90 	bl	8010ee4 <lfs_dir_commit>
 80133c4:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 80133c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d11f      	bne.n	801340c <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80133cc:	2300      	movs	r3, #0
 80133ce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80133d2:	f107 010c 	add.w	r1, r7, #12
 80133d6:	2300      	movs	r3, #0
 80133d8:	2200      	movs	r2, #0
 80133da:	6878      	ldr	r0, [r7, #4]
 80133dc:	f7fd fd82 	bl	8010ee4 <lfs_dir_commit>
 80133e0:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80133e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d113      	bne.n	8013410 <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80133e8:	2300      	movs	r3, #0
 80133ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80133ec:	2301      	movs	r3, #1
 80133ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80133f0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80133f4:	f107 030c 	add.w	r3, r7, #12
 80133f8:	4619      	mov	r1, r3
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f7fb ff18 	bl	800f230 <lfs_dir_fetch>
 8013400:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8013402:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013404:	2b00      	cmp	r3, #0
 8013406:	e004      	b.n	8013412 <lfs_format_+0x136>
            goto cleanup;
 8013408:	bf00      	nop
 801340a:	e002      	b.n	8013412 <lfs_format_+0x136>
            goto cleanup;
 801340c:	bf00      	nop
 801340e:	e000      	b.n	8013412 <lfs_format_+0x136>
            goto cleanup;
 8013410:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8013412:	6878      	ldr	r0, [r7, #4]
 8013414:	f7ff ff3a 	bl	801328c <lfs_deinit>
    return err;
 8013418:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 801341a:	4618      	mov	r0, r3
 801341c:	3780      	adds	r7, #128	@ 0x80
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	08030c38 	.word	0x08030c38
 8013428:	08033cdc 	.word	0x08033cdc
 801342c:	08030484 	.word	0x08030484
 8013430:	40100000 	.word	0x40100000
 8013434:	0ff00008 	.word	0x0ff00008
 8013438:	08030c50 	.word	0x08030c50
 801343c:	20100018 	.word	0x20100018

08013440 <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8013440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013442:	b0a1      	sub	sp, #132	@ 0x84
 8013444:	af04      	add	r7, sp, #16
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 801344a:	6839      	ldr	r1, [r7, #0]
 801344c:	6878      	ldr	r0, [r7, #4]
 801344e:	f7ff fcbb 	bl	8012dc8 <lfs_init>
 8013452:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 8013454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013456:	2b00      	cmp	r3, #0
 8013458:	d001      	beq.n	801345e <lfs_mount_+0x1e>
        return err;
 801345a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801345c:	e202      	b.n	8013864 <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 801345e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013462:	2220      	movs	r2, #32
 8013464:	2100      	movs	r1, #0
 8013466:	4618      	mov	r0, r3
 8013468:	f012 faf2 	bl	8025a50 <memset>
 801346c:	2301      	movs	r3, #1
 801346e:	657b      	str	r3, [r7, #84]	@ 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8013470:	4a9a      	ldr	r2, [pc, #616]	@ (80136dc <lfs_mount_+0x29c>)
 8013472:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013476:	e892 0003 	ldmia.w	r2, {r0, r1}
 801347a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 801347e:	2301      	movs	r3, #1
 8013480:	66bb      	str	r3, [r7, #104]	@ 0x68
    lfs_size_t tortoise_period = 1;
 8013482:	2301      	movs	r3, #1
 8013484:	667b      	str	r3, [r7, #100]	@ 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 8013486:	e199      	b.n	80137bc <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8013488:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801348c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013490:	3318      	adds	r3, #24
 8013492:	4611      	mov	r1, r2
 8013494:	4618      	mov	r0, r3
 8013496:	f7fa f87d 	bl	800d594 <lfs_pair_issync>
 801349a:	4603      	mov	r3, r0
 801349c:	2b00      	cmp	r3, #0
 801349e:	d00a      	beq.n	80134b6 <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 80134a0:	4b8f      	ldr	r3, [pc, #572]	@ (80136e0 <lfs_mount_+0x2a0>)
 80134a2:	f241 123d 	movw	r2, #4413	@ 0x113d
 80134a6:	498f      	ldr	r1, [pc, #572]	@ (80136e4 <lfs_mount_+0x2a4>)
 80134a8:	488f      	ldr	r0, [pc, #572]	@ (80136e8 <lfs_mount_+0x2a8>)
 80134aa:	f00f fdb1 	bl	8023010 <printf>
            err = LFS_ERR_CORRUPT;
 80134ae:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80134b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 80134b4:	e1d2      	b.n	801385c <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 80134b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80134b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d108      	bne.n	80134d0 <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 80134be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80134c0:	633b      	str	r3, [r7, #48]	@ 0x30
            tortoise[1] = dir.tail[1];
 80134c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134c4:	637b      	str	r3, [r7, #52]	@ 0x34
            tortoise_i = 0;
 80134c6:	2300      	movs	r3, #0
 80134c8:	66bb      	str	r3, [r7, #104]	@ 0x68
            tortoise_period *= 2;
 80134ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80134cc:	005b      	lsls	r3, r3, #1
 80134ce:	667b      	str	r3, [r7, #100]	@ 0x64
        }
        tortoise_i += 1;
 80134d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80134d2:	3301      	adds	r3, #1
 80134d4:	66bb      	str	r3, [r7, #104]	@ 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80134da:	4b84      	ldr	r3, [pc, #528]	@ (80136ec <lfs_mount_+0x2ac>)
 80134dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80134de:	2308      	movs	r3, #8
 80134e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80134e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80134e6:	f103 0218 	add.w	r2, r3, #24
 80134ea:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80134ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80134f2:	9303      	str	r3, [sp, #12]
 80134f4:	4b7e      	ldr	r3, [pc, #504]	@ (80136f0 <lfs_mount_+0x2b0>)
 80134f6:	9302      	str	r3, [sp, #8]
 80134f8:	2300      	movs	r3, #0
 80134fa:	9301      	str	r3, [sp, #4]
 80134fc:	4b7d      	ldr	r3, [pc, #500]	@ (80136f4 <lfs_mount_+0x2b4>)
 80134fe:	9300      	str	r3, [sp, #0]
 8013500:	4b7d      	ldr	r3, [pc, #500]	@ (80136f8 <lfs_mount_+0x2b8>)
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f7fb fac4 	bl	800ea90 <lfs_dir_fetchmatch>
 8013508:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 801350a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801350c:	2b00      	cmp	r3, #0
 801350e:	da02      	bge.n	8013516 <lfs_mount_+0xd6>
            err = tag;
 8013510:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013512:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 8013514:	e1a2      	b.n	801385c <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8013516:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013518:	2b00      	cmp	r3, #0
 801351a:	f000 8142 	beq.w	80137a2 <lfs_mount_+0x362>
 801351e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013520:	4618      	mov	r0, r3
 8013522:	f7fa f8a6 	bl	800d672 <lfs_tag_isdelete>
 8013526:	4603      	mov	r3, r0
 8013528:	f083 0301 	eor.w	r3, r3, #1
 801352c:	b2db      	uxtb	r3, r3
 801352e:	2b00      	cmp	r3, #0
 8013530:	f000 8137 	beq.w	80137a2 <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 8013534:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 801353a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8013540:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8013544:	f107 030c 	add.w	r3, r7, #12
 8013548:	9300      	str	r3, [sp, #0]
 801354a:	4b6c      	ldr	r3, [pc, #432]	@ (80136fc <lfs_mount_+0x2bc>)
 801354c:	4a6a      	ldr	r2, [pc, #424]	@ (80136f8 <lfs_mount_+0x2b8>)
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f7fa fd68 	bl	800e024 <lfs_dir_get>
 8013554:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8013556:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013558:	2b00      	cmp	r3, #0
 801355a:	da02      	bge.n	8013562 <lfs_mount_+0x122>
                err = tag;
 801355c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801355e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8013560:	e17c      	b.n	801385c <lfs_mount_+0x41c>
            }
            lfs_superblock_fromle32(&superblock);
 8013562:	f107 030c 	add.w	r3, r7, #12
 8013566:	4618      	mov	r0, r3
 8013568:	f7fa fa5c 	bl	800da24 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	0c1b      	lsrs	r3, r3, #16
 8013570:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f7fa fb22 	bl	800dbc4 <lfs_fs_disk_version_major>
 8013580:	4603      	mov	r3, r0
 8013582:	461a      	mov	r2, r3
 8013584:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8013588:	4293      	cmp	r3, r2
 801358a:	d108      	bne.n	801359e <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f7fa fb27 	bl	800dbe0 <lfs_fs_disk_version_minor>
 8013592:	4603      	mov	r3, r0
 8013594:	461a      	mov	r2, r3
 8013596:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801359a:	4293      	cmp	r3, r2
 801359c:	d91d      	bls.n	80135da <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 801359e:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 80135a2:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 80135a6:	6878      	ldr	r0, [r7, #4]
 80135a8:	f7fa fb0c 	bl	800dbc4 <lfs_fs_disk_version_major>
 80135ac:	4603      	mov	r3, r0
 80135ae:	461e      	mov	r6, r3
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f7fa fb15 	bl	800dbe0 <lfs_fs_disk_version_minor>
 80135b6:	4603      	mov	r3, r0
 80135b8:	461a      	mov	r2, r3
 80135ba:	4b49      	ldr	r3, [pc, #292]	@ (80136e0 <lfs_mount_+0x2a0>)
 80135bc:	9303      	str	r3, [sp, #12]
 80135be:	9202      	str	r2, [sp, #8]
 80135c0:	9601      	str	r6, [sp, #4]
 80135c2:	9400      	str	r4, [sp, #0]
 80135c4:	462b      	mov	r3, r5
 80135c6:	f241 126b 	movw	r2, #4459	@ 0x116b
 80135ca:	4946      	ldr	r1, [pc, #280]	@ (80136e4 <lfs_mount_+0x2a4>)
 80135cc:	484c      	ldr	r0, [pc, #304]	@ (8013700 <lfs_mount_+0x2c0>)
 80135ce:	f00f fd1f 	bl	8023010 <printf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 80135d2:	f06f 0315 	mvn.w	r3, #21
 80135d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80135d8:	e0e2      	b.n	80137a0 <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 80135da:	2300      	movs	r3, #0
 80135dc:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	f7fa fafd 	bl	800dbe0 <lfs_fs_disk_version_minor>
 80135e6:	4603      	mov	r3, r0
 80135e8:	461a      	mov	r2, r3
 80135ea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80135ee:	4293      	cmp	r3, r2
 80135f0:	d21c      	bcs.n	801362c <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 80135f2:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 80135f6:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f7fa fae2 	bl	800dbc4 <lfs_fs_disk_version_major>
 8013600:	4603      	mov	r3, r0
 8013602:	461e      	mov	r6, r3
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	f7fa faeb 	bl	800dbe0 <lfs_fs_disk_version_minor>
 801360a:	4603      	mov	r3, r0
 801360c:	461a      	mov	r2, r3
 801360e:	4b34      	ldr	r3, [pc, #208]	@ (80136e0 <lfs_mount_+0x2a0>)
 8013610:	9303      	str	r3, [sp, #12]
 8013612:	9202      	str	r2, [sp, #8]
 8013614:	9601      	str	r6, [sp, #4]
 8013616:	9400      	str	r4, [sp, #0]
 8013618:	462b      	mov	r3, r5
 801361a:	f241 127a 	movw	r2, #4474	@ 0x117a
 801361e:	4931      	ldr	r1, [pc, #196]	@ (80136e4 <lfs_mount_+0x2a4>)
 8013620:	4838      	ldr	r0, [pc, #224]	@ (8013704 <lfs_mount_+0x2c4>)
 8013622:	f00f fcf5 	bl	8023010 <printf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 8013626:	2301      	movs	r3, #1
 8013628:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801362c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8013630:	4619      	mov	r1, r3
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f000 fbb4 	bl	8013da0 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 8013638:	69bb      	ldr	r3, [r7, #24]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d018      	beq.n	8013670 <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 801363e:	69ba      	ldr	r2, [r7, #24]
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013644:	429a      	cmp	r2, r3
 8013646:	d910      	bls.n	801366a <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8013648:	69ba      	ldr	r2, [r7, #24]
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801364e:	4924      	ldr	r1, [pc, #144]	@ (80136e0 <lfs_mount_+0x2a0>)
 8013650:	9101      	str	r1, [sp, #4]
 8013652:	9300      	str	r3, [sp, #0]
 8013654:	4613      	mov	r3, r2
 8013656:	f241 1289 	movw	r2, #4489	@ 0x1189
 801365a:	4922      	ldr	r1, [pc, #136]	@ (80136e4 <lfs_mount_+0x2a4>)
 801365c:	482a      	ldr	r0, [pc, #168]	@ (8013708 <lfs_mount_+0x2c8>)
 801365e:	f00f fcd7 	bl	8023010 <printf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8013662:	f06f 0315 	mvn.w	r3, #21
 8013666:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8013668:	e09a      	b.n	80137a0 <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 801366a:	69ba      	ldr	r2, [r7, #24]
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 8013670:	69fb      	ldr	r3, [r7, #28]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d018      	beq.n	80136a8 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 8013676:	69fa      	ldr	r2, [r7, #28]
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801367c:	429a      	cmp	r2, r3
 801367e:	d910      	bls.n	80136a2 <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8013680:	69fa      	ldr	r2, [r7, #28]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013686:	4916      	ldr	r1, [pc, #88]	@ (80136e0 <lfs_mount_+0x2a0>)
 8013688:	9101      	str	r1, [sp, #4]
 801368a:	9300      	str	r3, [sp, #0]
 801368c:	4613      	mov	r3, r2
 801368e:	f241 1294 	movw	r2, #4500	@ 0x1194
 8013692:	4914      	ldr	r1, [pc, #80]	@ (80136e4 <lfs_mount_+0x2a4>)
 8013694:	481d      	ldr	r0, [pc, #116]	@ (801370c <lfs_mount_+0x2cc>)
 8013696:	f00f fcbb 	bl	8023010 <printf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 801369a:	f06f 0315 	mvn.w	r3, #21
 801369e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 80136a0:	e07e      	b.n	80137a0 <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 80136a2:	69fa      	ldr	r2, [r7, #28]
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 80136a8:	6a3b      	ldr	r3, [r7, #32]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d040      	beq.n	8013730 <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 80136ae:	6a3a      	ldr	r2, [r7, #32]
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d92d      	bls.n	8013714 <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80136b8:	6a3a      	ldr	r2, [r7, #32]
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80136be:	4908      	ldr	r1, [pc, #32]	@ (80136e0 <lfs_mount_+0x2a0>)
 80136c0:	9101      	str	r1, [sp, #4]
 80136c2:	9300      	str	r3, [sp, #0]
 80136c4:	4613      	mov	r3, r2
 80136c6:	f241 129f 	movw	r2, #4511	@ 0x119f
 80136ca:	4906      	ldr	r1, [pc, #24]	@ (80136e4 <lfs_mount_+0x2a4>)
 80136cc:	4810      	ldr	r0, [pc, #64]	@ (8013710 <lfs_mount_+0x2d0>)
 80136ce:	f00f fc9f 	bl	8023010 <printf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80136d2:	f06f 0315 	mvn.w	r3, #21
 80136d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 80136d8:	e062      	b.n	80137a0 <lfs_mount_+0x360>
 80136da:	bf00      	nop
 80136dc:	080305f0 	.word	0x080305f0
 80136e0:	080305ac 	.word	0x080305ac
 80136e4:	08030484 	.word	0x08030484
 80136e8:	08030c5c 	.word	0x08030c5c
 80136ec:	08030c50 	.word	0x08030c50
 80136f0:	0800f3c1 	.word	0x0800f3c1
 80136f4:	0ff00008 	.word	0x0ff00008
 80136f8:	7ffffc00 	.word	0x7ffffc00
 80136fc:	20100018 	.word	0x20100018
 8013700:	08030c88 	.word	0x08030c88
 8013704:	08030cc0 	.word	0x08030cc0
 8013708:	08030d00 	.word	0x08030d00
 801370c:	08030d34 	.word	0x08030d34
 8013710:	08030d68 	.word	0x08030d68
                }

                lfs->attr_max = superblock.attr_max;
 8013714:	6a3a      	ldr	r2, [r7, #32]
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013722:	4619      	mov	r1, r3
 8013724:	4610      	mov	r0, r2
 8013726:	f7f9 fa8e 	bl	800cc46 <lfs_min>
 801372a:	4602      	mov	r2, r0
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013736:	2b00      	cmp	r3, #0
 8013738:	d017      	beq.n	801376a <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 801373a:	697a      	ldr	r2, [r7, #20]
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013742:	429a      	cmp	r2, r3
 8013744:	d011      	beq.n	801376a <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8013746:	697a      	ldr	r2, [r7, #20]
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801374c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801374e:	4947      	ldr	r1, [pc, #284]	@ (801386c <lfs_mount_+0x42c>)
 8013750:	9101      	str	r1, [sp, #4]
 8013752:	9300      	str	r3, [sp, #0]
 8013754:	4613      	mov	r3, r2
 8013756:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801375a:	4945      	ldr	r1, [pc, #276]	@ (8013870 <lfs_mount_+0x430>)
 801375c:	4845      	ldr	r0, [pc, #276]	@ (8013874 <lfs_mount_+0x434>)
 801375e:	f00f fc57 	bl	8023010 <printf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8013762:	f06f 0315 	mvn.w	r3, #21
 8013766:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8013768:	e01a      	b.n	80137a0 <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 801376a:	697a      	ldr	r2, [r7, #20]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8013770:	693a      	ldr	r2, [r7, #16]
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013778:	429a      	cmp	r2, r3
 801377a:	d012      	beq.n	80137a2 <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801377c:	693a      	ldr	r2, [r7, #16]
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013784:	4939      	ldr	r1, [pc, #228]	@ (801386c <lfs_mount_+0x42c>)
 8013786:	9101      	str	r1, [sp, #4]
 8013788:	9300      	str	r3, [sp, #0]
 801378a:	4613      	mov	r3, r2
 801378c:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 8013790:	4937      	ldr	r1, [pc, #220]	@ (8013870 <lfs_mount_+0x430>)
 8013792:	4839      	ldr	r0, [pc, #228]	@ (8013878 <lfs_mount_+0x438>)
 8013794:	f00f fc3c 	bl	8023010 <printf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8013798:	f06f 0315 	mvn.w	r3, #21
 801379c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 801379e:	bf00      	nop
            goto cleanup;
 80137a0:	e05c      	b.n	801385c <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80137a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80137ac:	4619      	mov	r1, r3
 80137ae:	6878      	ldr	r0, [r7, #4]
 80137b0:	f7fb fd5a 	bl	800f268 <lfs_dir_getgstate>
 80137b4:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 80137b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d14e      	bne.n	801385a <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 80137bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80137c0:	3318      	adds	r3, #24
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7f9 fea1 	bl	800d50a <lfs_pair_isnull>
 80137c8:	4603      	mov	r3, r0
 80137ca:	f083 0301 	eor.w	r3, r3, #1
 80137ce:	b2db      	uxtb	r3, r3
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	f47f ae59 	bne.w	8013488 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	3330      	adds	r3, #48	@ 0x30
 80137da:	4618      	mov	r0, r3
 80137dc:	f7f9 fffc 	bl	800d7d8 <lfs_gstate_iszero>
 80137e0:	4603      	mov	r3, r0
 80137e2:	f083 0301 	eor.w	r3, r3, #1
 80137e6:	b2db      	uxtb	r3, r3
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d010      	beq.n	801380e <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80137f4:	687a      	ldr	r2, [r7, #4]
 80137f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80137f8:	481c      	ldr	r0, [pc, #112]	@ (801386c <lfs_mount_+0x42c>)
 80137fa:	9002      	str	r0, [sp, #8]
 80137fc:	9201      	str	r2, [sp, #4]
 80137fe:	9300      	str	r3, [sp, #0]
 8013800:	460b      	mov	r3, r1
 8013802:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 8013806:	491a      	ldr	r1, [pc, #104]	@ (8013870 <lfs_mount_+0x430>)
 8013808:	481c      	ldr	r0, [pc, #112]	@ (801387c <lfs_mount_+0x43c>)
 801380a:	f00f fc01 	bl	8023010 <printf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013812:	4618      	mov	r0, r3
 8013814:	f7f9 ff1f 	bl	800d656 <lfs_tag_isvalid>
 8013818:	4603      	mov	r3, r0
 801381a:	f083 0301 	eor.w	r3, r3, #1
 801381e:	b2db      	uxtb	r3, r3
 8013820:	461a      	mov	r2, r3
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013826:	441a      	add	r2, r3
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	687a      	ldr	r2, [r7, #4]
 8013830:	333c      	adds	r3, #60	@ 0x3c
 8013832:	3230      	adds	r2, #48	@ 0x30
 8013834:	ca07      	ldmia	r2, {r0, r1, r2}
 8013836:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801383e:	687a      	ldr	r2, [r7, #4]
 8013840:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8013842:	fbb3 f1f2 	udiv	r1, r3, r2
 8013846:	fb01 f202 	mul.w	r2, r1, r2
 801384a:	1a9a      	subs	r2, r3, r2
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f7fa f9e0 	bl	800dc16 <lfs_alloc_drop>

    return 0;
 8013856:	2300      	movs	r3, #0
 8013858:	e004      	b.n	8013864 <lfs_mount_+0x424>
            goto cleanup;
 801385a:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f000 f80f 	bl	8013880 <lfs_unmount_>
    return err;
 8013862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8013864:	4618      	mov	r0, r3
 8013866:	3774      	adds	r7, #116	@ 0x74
 8013868:	46bd      	mov	sp, r7
 801386a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801386c:	080305ac 	.word	0x080305ac
 8013870:	08030484 	.word	0x08030484
 8013874:	08030d9c 	.word	0x08030d9c
 8013878:	08030dd0 	.word	0x08030dd0
 801387c:	08030e00 	.word	0x08030e00

08013880 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8013880:	b580      	push	{r7, lr}
 8013882:	b082      	sub	sp, #8
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f7ff fcff 	bl	801328c <lfs_deinit>
 801388e:	4603      	mov	r3, r0
}
 8013890:	4618      	mov	r0, r3
 8013892:	3708      	adds	r7, #8
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}

08013898 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8013898:	b590      	push	{r4, r7, lr}
 801389a:	b0a1      	sub	sp, #132	@ 0x84
 801389c:	af04      	add	r7, sp, #16
 801389e:	60f8      	str	r0, [r7, #12]
 80138a0:	60b9      	str	r1, [r7, #8]
 80138a2:	607a      	str	r2, [r7, #4]
 80138a4:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80138a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80138aa:	2220      	movs	r2, #32
 80138ac:	2100      	movs	r1, #0
 80138ae:	4618      	mov	r0, r3
 80138b0:	f012 f8ce 	bl	8025a50 <memset>
 80138b4:	2301      	movs	r3, #1
 80138b6:	643b      	str	r3, [r7, #64]	@ 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80138b8:	4a9a      	ldr	r2, [pc, #616]	@ (8013b24 <lfs_fs_traverse_+0x28c>)
 80138ba:	f107 031c 	add.w	r3, r7, #28
 80138be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80138c2:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80138c6:	2301      	movs	r3, #1
 80138c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    lfs_size_t tortoise_period = 1;
 80138ca:	2301      	movs	r3, #1
 80138cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 80138ce:	e0c0      	b.n	8013a52 <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80138d0:	f107 021c 	add.w	r2, r7, #28
 80138d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80138d8:	3318      	adds	r3, #24
 80138da:	4611      	mov	r1, r2
 80138dc:	4618      	mov	r0, r3
 80138de:	f7f9 fe59 	bl	800d594 <lfs_pair_issync>
 80138e2:	4603      	mov	r3, r0
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d009      	beq.n	80138fc <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 80138e8:	4b8f      	ldr	r3, [pc, #572]	@ (8013b28 <lfs_fs_traverse_+0x290>)
 80138ea:	f241 2222 	movw	r2, #4642	@ 0x1222
 80138ee:	498f      	ldr	r1, [pc, #572]	@ (8013b2c <lfs_fs_traverse_+0x294>)
 80138f0:	488f      	ldr	r0, [pc, #572]	@ (8013b30 <lfs_fs_traverse_+0x298>)
 80138f2:	f00f fb8d 	bl	8023010 <printf>
            return LFS_ERR_CORRUPT;
 80138f6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80138fa:	e10f      	b.n	8013b1c <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 80138fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80138fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013900:	429a      	cmp	r2, r3
 8013902:	d108      	bne.n	8013916 <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 8013904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013906:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8013908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801390a:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 801390c:	2300      	movs	r3, #0
 801390e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            tortoise_period *= 2;
 8013910:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013912:	005b      	lsls	r3, r3, #1
 8013914:	66bb      	str	r3, [r7, #104]	@ 0x68
        }
        tortoise_i += 1;
 8013916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013918:	3301      	adds	r3, #1
 801391a:	66fb      	str	r3, [r7, #108]	@ 0x6c

        for (int i = 0; i < 2; i++) {
 801391c:	2300      	movs	r3, #0
 801391e:	667b      	str	r3, [r7, #100]	@ 0x64
 8013920:	e013      	b.n	801394a <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 8013922:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013924:	3306      	adds	r3, #6
 8013926:	009b      	lsls	r3, r3, #2
 8013928:	3370      	adds	r3, #112	@ 0x70
 801392a:	443b      	add	r3, r7
 801392c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	4611      	mov	r1, r2
 8013934:	6878      	ldr	r0, [r7, #4]
 8013936:	4798      	blx	r3
 8013938:	6478      	str	r0, [r7, #68]	@ 0x44
            if (err) {
 801393a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801393c:	2b00      	cmp	r3, #0
 801393e:	d001      	beq.n	8013944 <lfs_fs_traverse_+0xac>
                return err;
 8013940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013942:	e0eb      	b.n	8013b1c <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 8013944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013946:	3301      	adds	r3, #1
 8013948:	667b      	str	r3, [r7, #100]	@ 0x64
 801394a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801394c:	2b01      	cmp	r3, #1
 801394e:	dde8      	ble.n	8013922 <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8013950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013954:	f103 0218 	add.w	r2, r3, #24
 8013958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801395c:	4619      	mov	r1, r3
 801395e:	68f8      	ldr	r0, [r7, #12]
 8013960:	f7fb fc66 	bl	800f230 <lfs_dir_fetch>
 8013964:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (err) {
 8013966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013968:	2b00      	cmp	r3, #0
 801396a:	d001      	beq.n	8013970 <lfs_fs_traverse_+0xd8>
            return err;
 801396c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801396e:	e0d5      	b.n	8013b1c <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8013970:	2300      	movs	r3, #0
 8013972:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8013976:	e067      	b.n	8013a48 <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8013978:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 801397c:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801397e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013982:	f043 0308 	orr.w	r3, r3, #8
 8013986:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 801398a:	f107 0214 	add.w	r2, r7, #20
 801398e:	9200      	str	r2, [sp, #0]
 8013990:	4a68      	ldr	r2, [pc, #416]	@ (8013b34 <lfs_fs_traverse_+0x29c>)
 8013992:	68f8      	ldr	r0, [r7, #12]
 8013994:	f7fa fb46 	bl	800e024 <lfs_dir_get>
 8013998:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (tag < 0) {
 801399a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801399c:	2b00      	cmp	r3, #0
 801399e:	da05      	bge.n	80139ac <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 80139a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80139a2:	f113 0f02 	cmn.w	r3, #2
 80139a6:	d049      	beq.n	8013a3c <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 80139a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80139aa:	e0b7      	b.n	8013b1c <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 80139ac:	f107 0314 	add.w	r3, r7, #20
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7fa f807 	bl	800d9c4 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80139b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7f9 fe8d 	bl	800d6d8 <lfs_tag_type3>
 80139be:	4603      	mov	r3, r0
 80139c0:	461a      	mov	r2, r3
 80139c2:	f240 2302 	movw	r3, #514	@ 0x202
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d113      	bne.n	80139f2 <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80139ca:	68f9      	ldr	r1, [r7, #12]
 80139cc:	6978      	ldr	r0, [r7, #20]
 80139ce:	69bb      	ldr	r3, [r7, #24]
 80139d0:	687a      	ldr	r2, [r7, #4]
 80139d2:	9202      	str	r2, [sp, #8]
 80139d4:	68ba      	ldr	r2, [r7, #8]
 80139d6:	9201      	str	r2, [sp, #4]
 80139d8:	9300      	str	r3, [sp, #0]
 80139da:	4603      	mov	r3, r0
 80139dc:	460a      	mov	r2, r1
 80139de:	2100      	movs	r1, #0
 80139e0:	68f8      	ldr	r0, [r7, #12]
 80139e2:	f7fd fe9d 	bl	8011720 <lfs_ctz_traverse>
 80139e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80139e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d027      	beq.n	8013a3e <lfs_fs_traverse_+0x1a6>
                    return err;
 80139ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139f0:	e094      	b.n	8013b1c <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 80139f2:	78fb      	ldrb	r3, [r7, #3]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d022      	beq.n	8013a3e <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80139f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7f9 fe6c 	bl	800d6d8 <lfs_tag_type3>
 8013a00:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8013a02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013a06:	d11a      	bne.n	8013a3e <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 8013a08:	2300      	movs	r3, #0
 8013a0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013a0c:	e012      	b.n	8013a34 <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 8013a0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a10:	009b      	lsls	r3, r3, #2
 8013a12:	f107 0214 	add.w	r2, r7, #20
 8013a16:	4413      	add	r3, r2
 8013a18:	681a      	ldr	r2, [r3, #0]
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	4611      	mov	r1, r2
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	4798      	blx	r3
 8013a22:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    if (err) {
 8013a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d001      	beq.n	8013a2e <lfs_fs_traverse_+0x196>
                        return err;
 8013a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a2c:	e076      	b.n	8013b1c <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 8013a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a30:	3301      	adds	r3, #1
 8013a32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013a34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a36:	2b01      	cmp	r3, #1
 8013a38:	dde9      	ble.n	8013a0e <lfs_fs_traverse_+0x176>
 8013a3a:	e000      	b.n	8013a3e <lfs_fs_traverse_+0x1a6>
                    continue;
 8013a3c:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8013a3e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8013a42:	3301      	adds	r3, #1
 8013a44:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8013a48:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8013a4a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	d392      	bcc.n	8013978 <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 8013a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013a56:	3318      	adds	r3, #24
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7f9 fd56 	bl	800d50a <lfs_pair_isnull>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	f083 0301 	eor.w	r3, r3, #1
 8013a64:	b2db      	uxtb	r3, r3
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	f47f af32 	bne.w	80138d0 <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013a72:	e04f      	b.n	8013b14 <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 8013a74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a76:	799b      	ldrb	r3, [r3, #6]
 8013a78:	2b01      	cmp	r3, #1
 8013a7a:	d147      	bne.n	8013b0c <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8013a7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d01d      	beq.n	8013ac4 <lfs_fs_traverse_+0x22c>
 8013a88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d117      	bne.n	8013ac4 <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8013a94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a96:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8013a9a:	68f8      	ldr	r0, [r7, #12]
 8013a9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a9e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8013aa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013aa4:	687a      	ldr	r2, [r7, #4]
 8013aa6:	9202      	str	r2, [sp, #8]
 8013aa8:	68ba      	ldr	r2, [r7, #8]
 8013aaa:	9201      	str	r2, [sp, #4]
 8013aac:	9300      	str	r3, [sp, #0]
 8013aae:	4623      	mov	r3, r4
 8013ab0:	4602      	mov	r2, r0
 8013ab2:	68f8      	ldr	r0, [r7, #12]
 8013ab4:	f7fd fe34 	bl	8011720 <lfs_ctz_traverse>
 8013ab8:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8013aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d001      	beq.n	8013ac4 <lfs_fs_traverse_+0x22c>
                return err;
 8013ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ac2:	e02b      	b.n	8013b1c <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8013ac4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d01e      	beq.n	8013b0e <lfs_fs_traverse_+0x276>
 8013ad0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d118      	bne.n	8013b0e <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8013adc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ade:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8013ae2:	68f8      	ldr	r0, [r7, #12]
 8013ae4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ae6:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8013ae8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	9202      	str	r2, [sp, #8]
 8013af0:	68ba      	ldr	r2, [r7, #8]
 8013af2:	9201      	str	r2, [sp, #4]
 8013af4:	9300      	str	r3, [sp, #0]
 8013af6:	4623      	mov	r3, r4
 8013af8:	4602      	mov	r2, r0
 8013afa:	68f8      	ldr	r0, [r7, #12]
 8013afc:	f7fd fe10 	bl	8011720 <lfs_ctz_traverse>
 8013b00:	6538      	str	r0, [r7, #80]	@ 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8013b02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d002      	beq.n	8013b0e <lfs_fs_traverse_+0x276>
                return err;
 8013b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b0a:	e007      	b.n	8013b1c <lfs_fs_traverse_+0x284>
            continue;
 8013b0c:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8013b0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013b14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d1ac      	bne.n	8013a74 <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 8013b1a:	2300      	movs	r3, #0
}
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3774      	adds	r7, #116	@ 0x74
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd90      	pop	{r4, r7, pc}
 8013b24:	080305f0 	.word	0x080305f0
 8013b28:	080305ac 	.word	0x080305ac
 8013b2c:	08030484 	.word	0x08030484
 8013b30:	08030c5c 	.word	0x08030c5c
 8013b34:	700ffc00 	.word	0x700ffc00

08013b38 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b08a      	sub	sp, #40	@ 0x28
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	60f8      	str	r0, [r7, #12]
 8013b40:	60b9      	str	r1, [r7, #8]
 8013b42:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2200      	movs	r2, #0
 8013b48:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8013b50:	4a2d      	ldr	r2, [pc, #180]	@ (8013c08 <lfs_fs_pred+0xd0>)
 8013b52:	f107 0314 	add.w	r3, r7, #20
 8013b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b5a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8013b5e:	2301      	movs	r3, #1
 8013b60:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t tortoise_period = 1;
 8013b62:	2301      	movs	r3, #1
 8013b64:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8013b66:	e03e      	b.n	8013be6 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	3318      	adds	r3, #24
 8013b6c:	f107 0214 	add.w	r2, r7, #20
 8013b70:	4611      	mov	r1, r2
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7f9 fd0e 	bl	800d594 <lfs_pair_issync>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d009      	beq.n	8013b92 <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8013b7e:	4b23      	ldr	r3, [pc, #140]	@ (8013c0c <lfs_fs_pred+0xd4>)
 8013b80:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 8013b84:	4922      	ldr	r1, [pc, #136]	@ (8013c10 <lfs_fs_pred+0xd8>)
 8013b86:	4823      	ldr	r0, [pc, #140]	@ (8013c14 <lfs_fs_pred+0xdc>)
 8013b88:	f00f fa42 	bl	8023010 <printf>
            return LFS_ERR_CORRUPT;
 8013b8c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8013b90:	e036      	b.n	8013c00 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8013b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b94:	6a3b      	ldr	r3, [r7, #32]
 8013b96:	429a      	cmp	r2, r3
 8013b98:	d10a      	bne.n	8013bb0 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	699b      	ldr	r3, [r3, #24]
 8013b9e:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	69db      	ldr	r3, [r3, #28]
 8013ba4:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	627b      	str	r3, [r7, #36]	@ 0x24
            tortoise_period *= 2;
 8013baa:	6a3b      	ldr	r3, [r7, #32]
 8013bac:	005b      	lsls	r3, r3, #1
 8013bae:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8013bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bb2:	3301      	adds	r3, #1
 8013bb4:	627b      	str	r3, [r7, #36]	@ 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	3318      	adds	r3, #24
 8013bba:	68b9      	ldr	r1, [r7, #8]
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7f9 fcbf 	bl	800d540 <lfs_pair_cmp>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d101      	bne.n	8013bcc <lfs_fs_pred+0x94>
            return 0;
 8013bc8:	2300      	movs	r3, #0
 8013bca:	e019      	b.n	8013c00 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	3318      	adds	r3, #24
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	6879      	ldr	r1, [r7, #4]
 8013bd4:	68f8      	ldr	r0, [r7, #12]
 8013bd6:	f7fb fb2b 	bl	800f230 <lfs_dir_fetch>
 8013bda:	61f8      	str	r0, [r7, #28]
        if (err) {
 8013bdc:	69fb      	ldr	r3, [r7, #28]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d001      	beq.n	8013be6 <lfs_fs_pred+0xae>
            return err;
 8013be2:	69fb      	ldr	r3, [r7, #28]
 8013be4:	e00c      	b.n	8013c00 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	3318      	adds	r3, #24
 8013bea:	4618      	mov	r0, r3
 8013bec:	f7f9 fc8d 	bl	800d50a <lfs_pair_isnull>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	f083 0301 	eor.w	r3, r3, #1
 8013bf6:	b2db      	uxtb	r3, r3
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d1b5      	bne.n	8013b68 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8013bfc:	f06f 0301 	mvn.w	r3, #1
}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3728      	adds	r7, #40	@ 0x28
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	080305f0 	.word	0x080305f0
 8013c0c:	080305ac 	.word	0x080305ac
 8013c10:	08030484 	.word	0x08030484
 8013c14:	08030c5c 	.word	0x08030c5c

08013c18 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8013c18:	b5b0      	push	{r4, r5, r7, lr}
 8013c1a:	b08e      	sub	sp, #56	@ 0x38
 8013c1c:	af04      	add	r7, sp, #16
 8013c1e:	60f8      	str	r0, [r7, #12]
 8013c20:	60b9      	str	r1, [r7, #8]
 8013c22:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8013c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8013c32:	6a3b      	ldr	r3, [r7, #32]
 8013c34:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8013c38:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8013c3a:	6a3b      	ldr	r3, [r7, #32]
 8013c3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013c3e:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 8013c40:	69fb      	ldr	r3, [r7, #28]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	69fa      	ldr	r2, [r7, #28]
 8013c46:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8013c48:	2108      	movs	r1, #8
 8013c4a:	9103      	str	r1, [sp, #12]
 8013c4c:	f107 0110 	add.w	r1, r7, #16
 8013c50:	9102      	str	r1, [sp, #8]
 8013c52:	9201      	str	r2, [sp, #4]
 8013c54:	9300      	str	r3, [sp, #0]
 8013c56:	462b      	mov	r3, r5
 8013c58:	4622      	mov	r2, r4
 8013c5a:	4601      	mov	r1, r0
 8013c5c:	6a38      	ldr	r0, [r7, #32]
 8013c5e:	f7f9 f8cd 	bl	800cdfc <lfs_bd_read>
 8013c62:	61b8      	str	r0, [r7, #24]
    if (err) {
 8013c64:	69bb      	ldr	r3, [r7, #24]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d001      	beq.n	8013c6e <lfs_fs_parent_match+0x56>
        return err;
 8013c6a:	69bb      	ldr	r3, [r7, #24]
 8013c6c:	e012      	b.n	8013c94 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8013c6e:	f107 0310 	add.w	r3, r7, #16
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7f9 fcbb 	bl	800d5ee <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8013c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c7a:	1d1a      	adds	r2, r3, #4
 8013c7c:	f107 0310 	add.w	r3, r7, #16
 8013c80:	4611      	mov	r1, r2
 8013c82:	4618      	mov	r0, r3
 8013c84:	f7f9 fc5c 	bl	800d540 <lfs_pair_cmp>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	bf14      	ite	ne
 8013c8e:	2301      	movne	r3, #1
 8013c90:	2300      	moveq	r3, #0
 8013c92:	b2db      	uxtb	r3, r3
}
 8013c94:	4618      	mov	r0, r3
 8013c96:	3728      	adds	r7, #40	@ 0x28
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bdb0      	pop	{r4, r5, r7, pc}

08013c9c <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b090      	sub	sp, #64	@ 0x40
 8013ca0:	af04      	add	r7, sp, #16
 8013ca2:	60f8      	str	r0, [r7, #12]
 8013ca4:	60b9      	str	r1, [r7, #8]
 8013ca6:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2200      	movs	r2, #0
 8013cac:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	2201      	movs	r2, #1
 8013cb2:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8013cb4:	4a33      	ldr	r2, [pc, #204]	@ (8013d84 <lfs_fs_parent+0xe8>)
 8013cb6:	f107 031c 	add.w	r3, r7, #28
 8013cba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013cbe:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t tortoise_period = 1;
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8013cca:	e04a      	b.n	8013d62 <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	3318      	adds	r3, #24
 8013cd0:	f107 021c 	add.w	r2, r7, #28
 8013cd4:	4611      	mov	r1, r2
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7f9 fc5c 	bl	800d594 <lfs_pair_issync>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d009      	beq.n	8013cf6 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8013ce2:	4b29      	ldr	r3, [pc, #164]	@ (8013d88 <lfs_fs_parent+0xec>)
 8013ce4:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 8013ce8:	4928      	ldr	r1, [pc, #160]	@ (8013d8c <lfs_fs_parent+0xf0>)
 8013cea:	4829      	ldr	r0, [pc, #164]	@ (8013d90 <lfs_fs_parent+0xf4>)
 8013cec:	f00f f990 	bl	8023010 <printf>
            return LFS_ERR_CORRUPT;
 8013cf0:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8013cf4:	e042      	b.n	8013d7c <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8013cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	d10a      	bne.n	8013d14 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	699b      	ldr	r3, [r3, #24]
 8013d02:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	69db      	ldr	r3, [r3, #28]
 8013d08:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise_period *= 2;
 8013d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d10:	005b      	lsls	r3, r3, #1
 8013d12:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        tortoise_i += 1;
 8013d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d16:	3301      	adds	r3, #1
 8013d18:	62fb      	str	r3, [r7, #44]	@ 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8013d28:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	3304      	adds	r3, #4
 8013d2e:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8013d30:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8013d32:	f107 0310 	add.w	r3, r7, #16
 8013d36:	9303      	str	r3, [sp, #12]
 8013d38:	4b16      	ldr	r3, [pc, #88]	@ (8013d94 <lfs_fs_parent+0xf8>)
 8013d3a:	9302      	str	r3, [sp, #8]
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	9301      	str	r3, [sp, #4]
 8013d40:	4b15      	ldr	r3, [pc, #84]	@ (8013d98 <lfs_fs_parent+0xfc>)
 8013d42:	9300      	str	r3, [sp, #0]
 8013d44:	4b15      	ldr	r3, [pc, #84]	@ (8013d9c <lfs_fs_parent+0x100>)
 8013d46:	6879      	ldr	r1, [r7, #4]
 8013d48:	68f8      	ldr	r0, [r7, #12]
 8013d4a:	f7fa fea1 	bl	800ea90 <lfs_dir_fetchmatch>
 8013d4e:	6278      	str	r0, [r7, #36]	@ 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8013d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d005      	beq.n	8013d62 <lfs_fs_parent+0xc6>
 8013d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d58:	f113 0f02 	cmn.w	r3, #2
 8013d5c:	d001      	beq.n	8013d62 <lfs_fs_parent+0xc6>
            return tag;
 8013d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d60:	e00c      	b.n	8013d7c <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	3318      	adds	r3, #24
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7f9 fbcf 	bl	800d50a <lfs_pair_isnull>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	f083 0301 	eor.w	r3, r3, #1
 8013d72:	b2db      	uxtb	r3, r3
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d1a9      	bne.n	8013ccc <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8013d78:	f06f 0301 	mvn.w	r3, #1
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3730      	adds	r7, #48	@ 0x30
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	080305f0 	.word	0x080305f0
 8013d88:	080305ac 	.word	0x080305ac
 8013d8c:	08030484 	.word	0x08030484
 8013d90:	08030c5c 	.word	0x08030c5c
 8013d94:	08013c19 	.word	0x08013c19
 8013d98:	20000008 	.word	0x20000008
 8013d9c:	7ff003ff 	.word	0x7ff003ff

08013da0 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8013da0:	b480      	push	{r7}
 8013da2:	b083      	sub	sp, #12
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	460b      	mov	r3, r1
 8013daa:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013db0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 8013db4:	78fb      	ldrb	r3, [r7, #3]
 8013db6:	025b      	lsls	r3, r3, #9
 8013db8:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8013dbe:	bf00      	nop
 8013dc0:	370c      	adds	r7, #12
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc8:	4770      	bx	lr
	...

08013dcc <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8013dcc:	b590      	push	{r4, r7, lr}
 8013dce:	b083      	sub	sp, #12
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
 8013dd4:	460b      	mov	r3, r1
 8013dd6:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7f9 fcb5 	bl	800d74c <lfs_tag_size>
 8013de2:	4603      	mov	r3, r0
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d10a      	bne.n	8013dfe <lfs_fs_preporphans+0x32>
 8013de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	da06      	bge.n	8013dfe <lfs_fs_preporphans+0x32>
 8013df0:	4b1a      	ldr	r3, [pc, #104]	@ (8013e5c <lfs_fs_preporphans+0x90>)
 8013df2:	4a1b      	ldr	r2, [pc, #108]	@ (8013e60 <lfs_fs_preporphans+0x94>)
 8013df4:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 8013df8:	481a      	ldr	r0, [pc, #104]	@ (8013e64 <lfs_fs_preporphans+0x98>)
 8013dfa:	f00f f8d5 	bl	8022fa8 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7f9 fca2 	bl	800d74c <lfs_tag_size>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8013e0e:	d90a      	bls.n	8013e26 <lfs_fs_preporphans+0x5a>
 8013e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	dd06      	ble.n	8013e26 <lfs_fs_preporphans+0x5a>
 8013e18:	4b13      	ldr	r3, [pc, #76]	@ (8013e68 <lfs_fs_preporphans+0x9c>)
 8013e1a:	4a11      	ldr	r2, [pc, #68]	@ (8013e60 <lfs_fs_preporphans+0x94>)
 8013e1c:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 8013e20:	4810      	ldr	r0, [pc, #64]	@ (8013e64 <lfs_fs_preporphans+0x98>)
 8013e22:	f00f f8c1 	bl	8022fa8 <__assert_func>
    lfs->gstate.tag += orphans;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e2e:	441a      	add	r2, r3
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e38:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	3330      	adds	r3, #48	@ 0x30
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7f9 fce6 	bl	800d812 <lfs_gstate_hasorphans>
 8013e46:	4603      	mov	r3, r0
 8013e48:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8013e4a:	ea44 0203 	orr.w	r2, r4, r3
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8013e52:	2300      	movs	r3, #0
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	370c      	adds	r7, #12
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd90      	pop	{r4, r7, pc}
 8013e5c:	08030e38 	.word	0x08030e38
 8013e60:	08033ce8 	.word	0x08033ce8
 8013e64:	08030484 	.word	0x08030484
 8013e68:	08030e70 	.word	0x08030e70

08013e6c <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8013e6c:	b480      	push	{r7}
 8013e6e:	b085      	sub	sp, #20
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	60f8      	str	r0, [r7, #12]
 8013e74:	460b      	mov	r3, r1
 8013e76:	607a      	str	r2, [r7, #4]
 8013e78:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e7e:	4a17      	ldr	r2, [pc, #92]	@ (8013edc <lfs_fs_prepmove+0x70>)
 8013e80:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8013e82:	897b      	ldrh	r3, [r7, #10]
 8013e84:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8013e88:	428b      	cmp	r3, r1
 8013e8a:	d006      	beq.n	8013e9a <lfs_fs_prepmove+0x2e>
 8013e8c:	897b      	ldrh	r3, [r7, #10]
 8013e8e:	029b      	lsls	r3, r3, #10
 8013e90:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8013e94:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8013e98:	e000      	b.n	8013e9c <lfs_fs_prepmove+0x30>
 8013e9a:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8013e9c:	431a      	orrs	r2, r3
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8013ea2:	897b      	ldrh	r3, [r7, #10]
 8013ea4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8013ea8:	4293      	cmp	r3, r2
 8013eaa:	d002      	beq.n	8013eb2 <lfs_fs_prepmove+0x46>
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	e000      	b.n	8013eb4 <lfs_fs_prepmove+0x48>
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	68fa      	ldr	r2, [r7, #12]
 8013eb6:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8013eb8:	897b      	ldrh	r3, [r7, #10]
 8013eba:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8013ebe:	4293      	cmp	r3, r2
 8013ec0:	d003      	beq.n	8013eca <lfs_fs_prepmove+0x5e>
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	3304      	adds	r3, #4
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	e000      	b.n	8013ecc <lfs_fs_prepmove+0x60>
 8013eca:	2300      	movs	r3, #0
 8013ecc:	68fa      	ldr	r2, [r7, #12]
 8013ece:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8013ed0:	bf00      	nop
 8013ed2:	3714      	adds	r7, #20
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eda:	4770      	bx	lr
 8013edc:	800003ff 	.word	0x800003ff

08013ee0 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b098      	sub	sp, #96	@ 0x60
 8013ee4:	af02      	add	r7, sp, #8
 8013ee6:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	3330      	adds	r3, #48	@ 0x30
 8013eec:	4618      	mov	r0, r3
 8013eee:	f7f9 fcc5 	bl	800d87c <lfs_gstate_needssuperblock>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	f083 0301 	eor.w	r3, r3, #1
 8013ef8:	b2db      	uxtb	r3, r3
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d001      	beq.n	8013f02 <lfs_fs_desuperblock+0x22>
        return 0;
 8013efe:	2300      	movs	r3, #0
 8013f00:	e04e      	b.n	8013fa0 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	6a1a      	ldr	r2, [r3, #32]
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f0a:	4927      	ldr	r1, [pc, #156]	@ (8013fa8 <lfs_fs_desuperblock+0xc8>)
 8013f0c:	9101      	str	r1, [sp, #4]
 8013f0e:	9300      	str	r3, [sp, #0]
 8013f10:	4613      	mov	r3, r2
 8013f12:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 8013f16:	4925      	ldr	r1, [pc, #148]	@ (8013fac <lfs_fs_desuperblock+0xcc>)
 8013f18:	4825      	ldr	r0, [pc, #148]	@ (8013fb0 <lfs_fs_desuperblock+0xd0>)
 8013f1a:	f00f f879 	bl	8023010 <printf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f103 0220 	add.w	r2, r3, #32
 8013f24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013f28:	4619      	mov	r1, r3
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f7fb f980 	bl	800f230 <lfs_dir_fetch>
 8013f30:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 8013f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d001      	beq.n	8013f3c <lfs_fs_desuperblock+0x5c>
        return err;
 8013f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f3a:	e031      	b.n	8013fa0 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f7f9 fe33 	bl	800dba8 <lfs_fs_disk_version>
 8013f42:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8013f44:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 8013f4c:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 8013f52:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 8013f58:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 8013f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8013f64:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 8013f66:	f107 031c 	add.w	r3, r7, #28
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7f9 fd92 	bl	800da94 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8013f70:	4b10      	ldr	r3, [pc, #64]	@ (8013fb4 <lfs_fs_desuperblock+0xd4>)
 8013f72:	617b      	str	r3, [r7, #20]
 8013f74:	f107 031c 	add.w	r3, r7, #28
 8013f78:	61bb      	str	r3, [r7, #24]
 8013f7a:	f107 0214 	add.w	r2, r7, #20
 8013f7e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8013f82:	2301      	movs	r3, #1
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f7fc ffad 	bl	8010ee4 <lfs_dir_commit>
 8013f8a:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8013f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d001      	beq.n	8013f96 <lfs_fs_desuperblock+0xb6>
        return err;
 8013f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f94:	e004      	b.n	8013fa0 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8013f96:	2100      	movs	r1, #0
 8013f98:	6878      	ldr	r0, [r7, #4]
 8013f9a:	f7ff ff01 	bl	8013da0 <lfs_fs_prepsuperblock>
    return 0;
 8013f9e:	2300      	movs	r3, #0
}
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	3758      	adds	r7, #88	@ 0x58
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}
 8013fa8:	080305ac 	.word	0x080305ac
 8013fac:	08030484 	.word	0x08030484
 8013fb0:	08030ea8 	.word	0x08030ea8
 8013fb4:	20100018 	.word	0x20100018

08013fb8 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8013fb8:	b5b0      	push	{r4, r5, r7, lr}
 8013fba:	b094      	sub	sp, #80	@ 0x50
 8013fbc:	af04      	add	r7, sp, #16
 8013fbe:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	333c      	adds	r3, #60	@ 0x3c
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f7f9 fc46 	bl	800d856 <lfs_gstate_hasmove>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	f083 0301 	eor.w	r3, r3, #1
 8013fd0:	b2db      	uxtb	r3, r3
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d001      	beq.n	8013fda <lfs_fs_demove+0x22>
        return 0;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	e05b      	b.n	8014092 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7f9 fba0 	bl	800d72c <lfs_tag_id>
 8013fec:	4603      	mov	r3, r0
 8013fee:	461a      	mov	r2, r3
 8013ff0:	4b2a      	ldr	r3, [pc, #168]	@ (801409c <lfs_fs_demove+0xe4>)
 8013ff2:	9302      	str	r3, [sp, #8]
 8013ff4:	9201      	str	r2, [sp, #4]
 8013ff6:	9400      	str	r4, [sp, #0]
 8013ff8:	462b      	mov	r3, r5
 8013ffa:	f241 3224 	movw	r2, #4900	@ 0x1324
 8013ffe:	4928      	ldr	r1, [pc, #160]	@ (80140a0 <lfs_fs_demove+0xe8>)
 8014000:	4828      	ldr	r0, [pc, #160]	@ (80140a4 <lfs_fs_demove+0xec>)
 8014002:	f00f f805 	bl	8023010 <printf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801400a:	4618      	mov	r0, r3
 801400c:	f7f9 fb64 	bl	800d6d8 <lfs_tag_type3>
 8014010:	4603      	mov	r3, r0
 8014012:	461a      	mov	r2, r3
 8014014:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8014018:	429a      	cmp	r2, r3
 801401a:	d006      	beq.n	801402a <lfs_fs_demove+0x72>
 801401c:	4b22      	ldr	r3, [pc, #136]	@ (80140a8 <lfs_fs_demove+0xf0>)
 801401e:	4a23      	ldr	r2, [pc, #140]	@ (80140ac <lfs_fs_demove+0xf4>)
 8014020:	f241 312b 	movw	r1, #4907	@ 0x132b
 8014024:	481e      	ldr	r0, [pc, #120]	@ (80140a0 <lfs_fs_demove+0xe8>)
 8014026:	f00e ffbf 	bl	8022fa8 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8014030:	f107 0318 	add.w	r3, r7, #24
 8014034:	4619      	mov	r1, r3
 8014036:	6878      	ldr	r0, [r7, #4]
 8014038:	f7fb f8fa 	bl	800f230 <lfs_dir_fetch>
 801403c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 801403e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014040:	2b00      	cmp	r3, #0
 8014042:	d001      	beq.n	8014048 <lfs_fs_demove+0x90>
        return err;
 8014044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014046:	e024      	b.n	8014092 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801404c:	4618      	mov	r0, r3
 801404e:	f7f9 fb6d 	bl	800d72c <lfs_tag_id>
 8014052:	4603      	mov	r3, r0
 8014054:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8014056:	2200      	movs	r2, #0
 8014058:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801405c:	6878      	ldr	r0, [r7, #4]
 801405e:	f7ff ff05 	bl	8013e6c <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8014062:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014064:	029b      	lsls	r3, r3, #10
 8014066:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801406a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801406e:	613b      	str	r3, [r7, #16]
 8014070:	2300      	movs	r3, #0
 8014072:	617b      	str	r3, [r7, #20]
 8014074:	f107 0210 	add.w	r2, r7, #16
 8014078:	f107 0118 	add.w	r1, r7, #24
 801407c:	2301      	movs	r3, #1
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f7fc ff30 	bl	8010ee4 <lfs_dir_commit>
 8014084:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8014086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014088:	2b00      	cmp	r3, #0
 801408a:	d001      	beq.n	8014090 <lfs_fs_demove+0xd8>
        return err;
 801408c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801408e:	e000      	b.n	8014092 <lfs_fs_demove+0xda>
    }

    return 0;
 8014090:	2300      	movs	r3, #0
}
 8014092:	4618      	mov	r0, r3
 8014094:	3740      	adds	r7, #64	@ 0x40
 8014096:	46bd      	mov	sp, r7
 8014098:	bdb0      	pop	{r4, r5, r7, pc}
 801409a:	bf00      	nop
 801409c:	080305ac 	.word	0x080305ac
 80140a0:	08030484 	.word	0x08030484
 80140a4:	08030edc 	.word	0x08030edc
 80140a8:	08030f10 	.word	0x08030f10
 80140ac:	08033cfc 	.word	0x08033cfc

080140b0 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 80140b0:	b5b0      	push	{r4, r5, r7, lr}
 80140b2:	b0b2      	sub	sp, #200	@ 0xc8
 80140b4:	af04      	add	r7, sp, #16
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	460b      	mov	r3, r1
 80140ba:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	3330      	adds	r3, #48	@ 0x30
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7f9 fba6 	bl	800d812 <lfs_gstate_hasorphans>
 80140c6:	4603      	mov	r3, r0
 80140c8:	f083 0301 	eor.w	r3, r3, #1
 80140cc:	b2db      	uxtb	r3, r3
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d001      	beq.n	80140d6 <lfs_fs_deorphan+0x26>
        return 0;
 80140d2:	2300      	movs	r3, #0
 80140d4:	e187      	b.n	80143e6 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 80140d6:	2300      	movs	r3, #0
 80140d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 80140dc:	e170      	b.n	80143c0 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80140de:	f107 0308 	add.w	r3, r7, #8
 80140e2:	2220      	movs	r2, #32
 80140e4:	2100      	movs	r1, #0
 80140e6:	4618      	mov	r0, r3
 80140e8:	f011 fcb2 	bl	8025a50 <memset>
 80140ec:	2301      	movs	r3, #1
 80140ee:	77fb      	strb	r3, [r7, #31]
 80140f0:	2301      	movs	r3, #1
 80140f2:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 80140f4:	2300      	movs	r3, #0
 80140f6:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 80140fa:	e149      	b.n	8014390 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 80140fc:	f107 0308 	add.w	r3, r7, #8
 8014100:	f103 0218 	add.w	r2, r3, #24
 8014104:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014108:	4619      	mov	r1, r3
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f7fb f890 	bl	800f230 <lfs_dir_fetch>
 8014110:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 8014114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014118:	2b00      	cmp	r3, #0
 801411a:	d002      	beq.n	8014122 <lfs_fs_deorphan+0x72>
                return err;
 801411c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014120:	e161      	b.n	80143e6 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8014122:	7ffb      	ldrb	r3, [r7, #31]
 8014124:	f083 0301 	eor.w	r3, r3, #1
 8014128:	b2db      	uxtb	r3, r3
 801412a:	2b00      	cmp	r3, #0
 801412c:	f000 8124 	beq.w	8014378 <lfs_fs_deorphan+0x2c8>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8014130:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8014134:	f107 0308 	add.w	r3, r7, #8
 8014138:	3318      	adds	r3, #24
 801413a:	4619      	mov	r1, r3
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f7ff fdad 	bl	8013c9c <lfs_fs_parent>
 8014142:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8014146:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801414a:	2b00      	cmp	r3, #0
 801414c:	da07      	bge.n	801415e <lfs_fs_deorphan+0xae>
 801414e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8014152:	f113 0f02 	cmn.w	r3, #2
 8014156:	d002      	beq.n	801415e <lfs_fs_deorphan+0xae>
                    return tag;
 8014158:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801415c:	e143      	b.n	80143e6 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801415e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014162:	2b00      	cmp	r3, #0
 8014164:	f040 80ac 	bne.w	80142c0 <lfs_fs_deorphan+0x210>
 8014168:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801416c:	f113 0f02 	cmn.w	r3, #2
 8014170:	f000 80a6 	beq.w	80142c0 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8014174:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8014178:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801417c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8014180:	9300      	str	r3, [sp, #0]
 8014182:	4613      	mov	r3, r2
 8014184:	4a9a      	ldr	r2, [pc, #616]	@ (80143f0 <lfs_fs_deorphan+0x340>)
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f7f9 ff4c 	bl	800e024 <lfs_dir_get>
 801418c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8014190:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014194:	2b00      	cmp	r3, #0
 8014196:	da02      	bge.n	801419e <lfs_fs_deorphan+0xee>
                        return state;
 8014198:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801419c:	e0eb      	b.n	8014376 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 801419e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80141a2:	4618      	mov	r0, r3
 80141a4:	f7f9 fa23 	bl	800d5ee <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 80141a8:	f107 0308 	add.w	r3, r7, #8
 80141ac:	f103 0218 	add.w	r2, r3, #24
 80141b0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80141b4:	4611      	mov	r1, r2
 80141b6:	4618      	mov	r0, r3
 80141b8:	f7f9 f9ec 	bl	800d594 <lfs_pair_issync>
 80141bc:	4603      	mov	r3, r0
 80141be:	f083 0301 	eor.w	r3, r3, #1
 80141c2:	b2db      	uxtb	r3, r3
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d07b      	beq.n	80142c0 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 80141c8:	6a38      	ldr	r0, [r7, #32]
 80141ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80141d0:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80141d4:	4c87      	ldr	r4, [pc, #540]	@ (80143f4 <lfs_fs_deorphan+0x344>)
 80141d6:	9403      	str	r4, [sp, #12]
 80141d8:	9102      	str	r1, [sp, #8]
 80141da:	9201      	str	r2, [sp, #4]
 80141dc:	9300      	str	r3, [sp, #0]
 80141de:	4603      	mov	r3, r0
 80141e0:	f241 3271 	movw	r2, #4977	@ 0x1371
 80141e4:	4984      	ldr	r1, [pc, #528]	@ (80143f8 <lfs_fs_deorphan+0x348>)
 80141e6:	4885      	ldr	r0, [pc, #532]	@ (80143fc <lfs_fs_deorphan+0x34c>)
 80141e8:	f00e ff12 	bl	8023010 <printf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 80141ec:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80141f0:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	3330      	adds	r3, #48	@ 0x30
 80141f8:	f107 0208 	add.w	r2, r7, #8
 80141fc:	4611      	mov	r1, r2
 80141fe:	4618      	mov	r0, r3
 8014200:	f7f9 fb50 	bl	800d8a4 <lfs_gstate_hasmovehere>
 8014204:	4603      	mov	r3, r0
 8014206:	2b00      	cmp	r3, #0
 8014208:	d01c      	beq.n	8014244 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801420e:	4618      	mov	r0, r3
 8014210:	f7f9 fa8c 	bl	800d72c <lfs_tag_id>
 8014214:	4603      	mov	r3, r0
 8014216:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 801421a:	68b9      	ldr	r1, [r7, #8]
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8014222:	4874      	ldr	r0, [pc, #464]	@ (80143f4 <lfs_fs_deorphan+0x344>)
 8014224:	9002      	str	r0, [sp, #8]
 8014226:	9201      	str	r2, [sp, #4]
 8014228:	9300      	str	r3, [sp, #0]
 801422a:	460b      	mov	r3, r1
 801422c:	f241 327c 	movw	r2, #4988	@ 0x137c
 8014230:	4971      	ldr	r1, [pc, #452]	@ (80143f8 <lfs_fs_deorphan+0x348>)
 8014232:	4873      	ldr	r0, [pc, #460]	@ (8014400 <lfs_fs_deorphan+0x350>)
 8014234:	f00e feec 	bl	8023010 <printf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8014238:	2200      	movs	r2, #0
 801423a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f7ff fe14 	bl	8013e6c <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8014244:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8014248:	4618      	mov	r0, r3
 801424a:	f7f9 f9ea 	bl	800d622 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801424e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8014252:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8014256:	4293      	cmp	r3, r2
 8014258:	d007      	beq.n	801426a <lfs_fs_deorphan+0x1ba>
 801425a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 801425e:	029b      	lsls	r3, r3, #10
 8014260:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8014264:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8014268:	e000      	b.n	801426c <lfs_fs_deorphan+0x1bc>
 801426a:	2300      	movs	r3, #0
 801426c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014270:	2300      	movs	r3, #0
 8014272:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014276:	4b63      	ldr	r3, [pc, #396]	@ (8014404 <lfs_fs_deorphan+0x354>)
 8014278:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801427c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8014280:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014284:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8014288:	f107 0108 	add.w	r1, r7, #8
 801428c:	2302      	movs	r3, #2
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f7fc fb2e 	bl	80108f0 <lfs_dir_orphaningcommit>
 8014294:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8014298:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801429c:	4618      	mov	r0, r3
 801429e:	f7f9 f9a6 	bl	800d5ee <lfs_pair_fromle32>
                        if (state < 0) {
 80142a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	da02      	bge.n	80142b0 <lfs_fs_deorphan+0x200>
                            return state;
 80142aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 80142ae:	e062      	b.n	8014376 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80142b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80142b4:	2b03      	cmp	r3, #3
 80142b6:	d16b      	bne.n	8014390 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 80142b8:	2301      	movs	r3, #1
 80142ba:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80142be:	e067      	b.n	8014390 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 80142c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80142c4:	2b01      	cmp	r3, #1
 80142c6:	d157      	bne.n	8014378 <lfs_fs_deorphan+0x2c8>
 80142c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80142cc:	f113 0f02 	cmn.w	r3, #2
 80142d0:	d152      	bne.n	8014378 <lfs_fs_deorphan+0x2c8>
 80142d2:	78fb      	ldrb	r3, [r7, #3]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d04f      	beq.n	8014378 <lfs_fs_deorphan+0x2c8>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80142d8:	6a3a      	ldr	r2, [r7, #32]
 80142da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142dc:	4945      	ldr	r1, [pc, #276]	@ (80143f4 <lfs_fs_deorphan+0x344>)
 80142de:	9101      	str	r1, [sp, #4]
 80142e0:	9300      	str	r3, [sp, #0]
 80142e2:	4613      	mov	r3, r2
 80142e4:	f241 329c 	movw	r2, #5020	@ 0x139c
 80142e8:	4943      	ldr	r1, [pc, #268]	@ (80143f8 <lfs_fs_deorphan+0x348>)
 80142ea:	4847      	ldr	r0, [pc, #284]	@ (8014408 <lfs_fs_deorphan+0x358>)
 80142ec:	f00e fe90 	bl	8023010 <printf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80142f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80142fa:	4619      	mov	r1, r3
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f7fa ffb3 	bl	800f268 <lfs_dir_getgstate>
 8014302:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 8014306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801430a:	2b00      	cmp	r3, #0
 801430c:	d002      	beq.n	8014314 <lfs_fs_deorphan+0x264>
                        return err;
 801430e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014312:	e030      	b.n	8014376 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8014314:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014318:	3318      	adds	r3, #24
 801431a:	4618      	mov	r0, r3
 801431c:	f7f9 f981 	bl	800d622 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8014320:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014324:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8014328:	051a      	lsls	r2, r3, #20
 801432a:	4b38      	ldr	r3, [pc, #224]	@ (801440c <lfs_fs_deorphan+0x35c>)
 801432c:	4313      	orrs	r3, r2
 801432e:	673b      	str	r3, [r7, #112]	@ 0x70
 8014330:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014334:	3318      	adds	r3, #24
 8014336:	677b      	str	r3, [r7, #116]	@ 0x74
 8014338:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801433c:	f107 0108 	add.w	r1, r7, #8
 8014340:	2301      	movs	r3, #1
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	f7fc fad4 	bl	80108f0 <lfs_dir_orphaningcommit>
 8014348:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 801434c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014350:	3318      	adds	r3, #24
 8014352:	4618      	mov	r0, r3
 8014354:	f7f9 f94b 	bl	800d5ee <lfs_pair_fromle32>
                    if (state < 0) {
 8014358:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801435c:	2b00      	cmp	r3, #0
 801435e:	da02      	bge.n	8014366 <lfs_fs_deorphan+0x2b6>
                        return state;
 8014360:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
                    return tag;
 8014364:	e03f      	b.n	80143e6 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8014366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801436a:	2b03      	cmp	r3, #3
 801436c:	d10f      	bne.n	801438e <lfs_fs_deorphan+0x2de>
                        moreorphans = true;
 801436e:	2301      	movs	r3, #1
 8014370:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8014374:	e00c      	b.n	8014390 <lfs_fs_deorphan+0x2e0>
                return err;
 8014376:	e036      	b.n	80143e6 <lfs_fs_deorphan+0x336>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 8014378:	f107 0408 	add.w	r4, r7, #8
 801437c:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8014380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014384:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801438c:	e000      	b.n	8014390 <lfs_fs_deorphan+0x2e0>
                    continue;
 801438e:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 8014390:	f107 0308 	add.w	r3, r7, #8
 8014394:	3318      	adds	r3, #24
 8014396:	4618      	mov	r0, r3
 8014398:	f7f9 f8b7 	bl	800d50a <lfs_pair_isnull>
 801439c:	4603      	mov	r3, r0
 801439e:	f083 0301 	eor.w	r3, r3, #1
 80143a2:	b2db      	uxtb	r3, r3
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	f47f aea9 	bne.w	80140fc <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 80143aa:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d001      	beq.n	80143b6 <lfs_fs_deorphan+0x306>
 80143b2:	2300      	movs	r3, #0
 80143b4:	e002      	b.n	80143bc <lfs_fs_deorphan+0x30c>
 80143b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80143ba:	3301      	adds	r3, #1
 80143bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 80143c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80143c4:	2b01      	cmp	r3, #1
 80143c6:	f77f ae8a 	ble.w	80140de <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	3330      	adds	r3, #48	@ 0x30
 80143ce:	4618      	mov	r0, r3
 80143d0:	f7f9 fa32 	bl	800d838 <lfs_gstate_getorphans>
 80143d4:	4603      	mov	r3, r0
 80143d6:	425b      	negs	r3, r3
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	b25b      	sxtb	r3, r3
 80143dc:	4619      	mov	r1, r3
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f7ff fcf4 	bl	8013dcc <lfs_fs_preporphans>
 80143e4:	4603      	mov	r3, r0
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	37b8      	adds	r7, #184	@ 0xb8
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bdb0      	pop	{r4, r5, r7, pc}
 80143ee:	bf00      	nop
 80143f0:	7ffffc00 	.word	0x7ffffc00
 80143f4:	080305ac 	.word	0x080305ac
 80143f8:	08030484 	.word	0x08030484
 80143fc:	08030f44 	.word	0x08030f44
 8014400:	08030f88 	.word	0x08030f88
 8014404:	600ffc08 	.word	0x600ffc08
 8014408:	08030fd0 	.word	0x08030fd0
 801440c:	000ffc08 	.word	0x000ffc08

08014410 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8014410:	b580      	push	{r7, lr}
 8014412:	b084      	sub	sp, #16
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8014418:	6878      	ldr	r0, [r7, #4]
 801441a:	f7ff fd61 	bl	8013ee0 <lfs_fs_desuperblock>
 801441e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d001      	beq.n	801442a <lfs_fs_forceconsistency+0x1a>
        return err;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	e013      	b.n	8014452 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 801442a:	6878      	ldr	r0, [r7, #4]
 801442c:	f7ff fdc4 	bl	8013fb8 <lfs_fs_demove>
 8014430:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d001      	beq.n	801443c <lfs_fs_forceconsistency+0x2c>
        return err;
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	e00a      	b.n	8014452 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 801443c:	2101      	movs	r1, #1
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f7ff fe36 	bl	80140b0 <lfs_fs_deorphan>
 8014444:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d001      	beq.n	8014450 <lfs_fs_forceconsistency+0x40>
        return err;
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	e000      	b.n	8014452 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8014450:	2300      	movs	r3, #0
}
 8014452:	4618      	mov	r0, r3
 8014454:	3710      	adds	r7, #16
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}

0801445a <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 801445a:	b480      	push	{r7}
 801445c:	b085      	sub	sp, #20
 801445e:	af00      	add	r7, sp, #0
 8014460:	6078      	str	r0, [r7, #4]
 8014462:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	1c5a      	adds	r2, r3, #1
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	601a      	str	r2, [r3, #0]
    return 0;
 8014472:	2300      	movs	r3, #0
}
 8014474:	4618      	mov	r0, r3
 8014476:	3714      	adds	r7, #20
 8014478:	46bd      	mov	sp, r7
 801447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447e:	4770      	bx	lr

08014480 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8014480:	b580      	push	{r7, lr}
 8014482:	b084      	sub	sp, #16
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8014488:	2300      	movs	r3, #0
 801448a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801448c:	f107 0208 	add.w	r2, r7, #8
 8014490:	2300      	movs	r3, #0
 8014492:	4907      	ldr	r1, [pc, #28]	@ (80144b0 <lfs_fs_size_+0x30>)
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f7ff f9ff 	bl	8013898 <lfs_fs_traverse_>
 801449a:	60f8      	str	r0, [r7, #12]
    if (err) {
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d001      	beq.n	80144a6 <lfs_fs_size_+0x26>
        return err;
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	e000      	b.n	80144a8 <lfs_fs_size_+0x28>
    }

    return size;
 80144a6:	68bb      	ldr	r3, [r7, #8]
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3710      	adds	r7, #16
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}
 80144b0:	0801445b 	.word	0x0801445b

080144b4 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b084      	sub	sp, #16
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	695b      	ldr	r3, [r3, #20]
 80144c2:	6838      	ldr	r0, [r7, #0]
 80144c4:	4798      	blx	r3
 80144c6:	60f8      	str	r0, [r7, #12]
    if (err) {
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d001      	beq.n	80144d2 <lfs_format+0x1e>
        return err;
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	e009      	b.n	80144e6 <lfs_format+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 80144d2:	6839      	ldr	r1, [r7, #0]
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f7fe ff01 	bl	80132dc <lfs_format_>
 80144da:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	699b      	ldr	r3, [r3, #24]
 80144e0:	6838      	ldr	r0, [r7, #0]
 80144e2:	4798      	blx	r3
    return err;
 80144e4:	68fb      	ldr	r3, [r7, #12]
}
 80144e6:	4618      	mov	r0, r3
 80144e8:	3710      	adds	r7, #16
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}

080144ee <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 80144ee:	b580      	push	{r7, lr}
 80144f0:	b084      	sub	sp, #16
 80144f2:	af00      	add	r7, sp, #0
 80144f4:	6078      	str	r0, [r7, #4]
 80144f6:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	695b      	ldr	r3, [r3, #20]
 80144fc:	6838      	ldr	r0, [r7, #0]
 80144fe:	4798      	blx	r3
 8014500:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d001      	beq.n	801450c <lfs_mount+0x1e>
        return err;
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	e009      	b.n	8014520 <lfs_mount+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 801450c:	6839      	ldr	r1, [r7, #0]
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f7fe ff96 	bl	8013440 <lfs_mount_>
 8014514:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
 8014516:	683b      	ldr	r3, [r7, #0]
 8014518:	699b      	ldr	r3, [r3, #24]
 801451a:	6838      	ldr	r0, [r7, #0]
 801451c:	4798      	blx	r3
    return err;
 801451e:	68fb      	ldr	r3, [r7, #12]
}
 8014520:	4618      	mov	r0, r3
 8014522:	3710      	adds	r7, #16
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}

08014528 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8014528:	b580      	push	{r7, lr}
 801452a:	b084      	sub	sp, #16
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
 8014530:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014536:	695b      	ldr	r3, [r3, #20]
 8014538:	687a      	ldr	r2, [r7, #4]
 801453a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801453c:	4610      	mov	r0, r2
 801453e:	4798      	blx	r3
 8014540:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d001      	beq.n	801454c <lfs_remove+0x24>
        return err;
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	e00c      	b.n	8014566 <lfs_remove+0x3e>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_remove_(lfs, path);
 801454c:	6839      	ldr	r1, [r7, #0]
 801454e:	6878      	ldr	r0, [r7, #4]
 8014550:	f7fe f94a 	bl	80127e8 <lfs_remove_>
 8014554:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801455a:	699b      	ldr	r3, [r3, #24]
 801455c:	687a      	ldr	r2, [r7, #4]
 801455e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014560:	4610      	mov	r0, r2
 8014562:	4798      	blx	r3
    return err;
 8014564:	68fb      	ldr	r3, [r7, #12]
}
 8014566:	4618      	mov	r0, r3
 8014568:	3710      	adds	r7, #16
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}

0801456e <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801456e:	b580      	push	{r7, lr}
 8014570:	b086      	sub	sp, #24
 8014572:	af00      	add	r7, sp, #0
 8014574:	60f8      	str	r0, [r7, #12]
 8014576:	60b9      	str	r1, [r7, #8]
 8014578:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801457e:	695b      	ldr	r3, [r3, #20]
 8014580:	68fa      	ldr	r2, [r7, #12]
 8014582:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014584:	4610      	mov	r0, r2
 8014586:	4798      	blx	r3
 8014588:	6178      	str	r0, [r7, #20]
    if (err) {
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d001      	beq.n	8014594 <lfs_rename+0x26>
        return err;
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	e00d      	b.n	80145b0 <lfs_rename+0x42>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rename_(lfs, oldpath, newpath);
 8014594:	687a      	ldr	r2, [r7, #4]
 8014596:	68b9      	ldr	r1, [r7, #8]
 8014598:	68f8      	ldr	r0, [r7, #12]
 801459a:	f7fe f9f7 	bl	801298c <lfs_rename_>
 801459e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80145a4:	699b      	ldr	r3, [r3, #24]
 80145a6:	68fa      	ldr	r2, [r7, #12]
 80145a8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80145aa:	4610      	mov	r0, r2
 80145ac:	4798      	blx	r3
    return err;
 80145ae:	697b      	ldr	r3, [r7, #20]
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	3718      	adds	r7, #24
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}

080145b8 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b086      	sub	sp, #24
 80145bc:	af00      	add	r7, sp, #0
 80145be:	60f8      	str	r0, [r7, #12]
 80145c0:	60b9      	str	r1, [r7, #8]
 80145c2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80145c8:	695b      	ldr	r3, [r3, #20]
 80145ca:	68fa      	ldr	r2, [r7, #12]
 80145cc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80145ce:	4610      	mov	r0, r2
 80145d0:	4798      	blx	r3
 80145d2:	6178      	str	r0, [r7, #20]
    if (err) {
 80145d4:	697b      	ldr	r3, [r7, #20]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d001      	beq.n	80145de <lfs_stat+0x26>
        return err;
 80145da:	697b      	ldr	r3, [r7, #20]
 80145dc:	e00d      	b.n	80145fa <lfs_stat+0x42>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_stat_(lfs, path, info);
 80145de:	687a      	ldr	r2, [r7, #4]
 80145e0:	68b9      	ldr	r1, [r7, #8]
 80145e2:	68f8      	ldr	r0, [r7, #12]
 80145e4:	f7fe f8db 	bl	801279e <lfs_stat_>
 80145e8:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80145ee:	699b      	ldr	r3, [r3, #24]
 80145f0:	68fa      	ldr	r2, [r7, #12]
 80145f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80145f4:	4610      	mov	r0, r2
 80145f6:	4798      	blx	r3
    return err;
 80145f8:	697b      	ldr	r3, [r7, #20]
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3718      	adds	r7, #24
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}
	...

08014604 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8014604:	b580      	push	{r7, lr}
 8014606:	b086      	sub	sp, #24
 8014608:	af00      	add	r7, sp, #0
 801460a:	60f8      	str	r0, [r7, #12]
 801460c:	60b9      	str	r1, [r7, #8]
 801460e:	607a      	str	r2, [r7, #4]
 8014610:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014616:	695b      	ldr	r3, [r3, #20]
 8014618:	68fa      	ldr	r2, [r7, #12]
 801461a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801461c:	4610      	mov	r0, r2
 801461e:	4798      	blx	r3
 8014620:	6178      	str	r0, [r7, #20]
    if (err) {
 8014622:	697b      	ldr	r3, [r7, #20]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d001      	beq.n	801462c <lfs_file_open+0x28>
        return err;
 8014628:	697b      	ldr	r3, [r7, #20]
 801462a:	e021      	b.n	8014670 <lfs_file_open+0x6c>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014630:	68b9      	ldr	r1, [r7, #8]
 8014632:	4618      	mov	r0, r3
 8014634:	f7f9 fa66 	bl	800db04 <lfs_mlist_isopen>
 8014638:	4603      	mov	r3, r0
 801463a:	f083 0301 	eor.w	r3, r3, #1
 801463e:	b2db      	uxtb	r3, r3
 8014640:	2b00      	cmp	r3, #0
 8014642:	d106      	bne.n	8014652 <lfs_file_open+0x4e>
 8014644:	4b0c      	ldr	r3, [pc, #48]	@ (8014678 <lfs_file_open+0x74>)
 8014646:	4a0d      	ldr	r2, [pc, #52]	@ (801467c <lfs_file_open+0x78>)
 8014648:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801464c:	480c      	ldr	r0, [pc, #48]	@ (8014680 <lfs_file_open+0x7c>)
 801464e:	f00e fcab 	bl	8022fa8 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	687a      	ldr	r2, [r7, #4]
 8014656:	68b9      	ldr	r1, [r7, #8]
 8014658:	68f8      	ldr	r0, [r7, #12]
 801465a:	f7fd faad 	bl	8011bb8 <lfs_file_open_>
 801465e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014664:	699b      	ldr	r3, [r3, #24]
 8014666:	68fa      	ldr	r2, [r7, #12]
 8014668:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801466a:	4610      	mov	r0, r2
 801466c:	4798      	blx	r3
    return err;
 801466e:	697b      	ldr	r3, [r7, #20]
}
 8014670:	4618      	mov	r0, r3
 8014672:	3718      	adds	r7, #24
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}
 8014678:	08031020 	.word	0x08031020
 801467c:	08033d0c 	.word	0x08033d0c
 8014680:	08030484 	.word	0x08030484

08014684 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8014684:	b580      	push	{r7, lr}
 8014686:	b084      	sub	sp, #16
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
 801468c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014692:	695b      	ldr	r3, [r3, #20]
 8014694:	687a      	ldr	r2, [r7, #4]
 8014696:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014698:	4610      	mov	r0, r2
 801469a:	4798      	blx	r3
 801469c:	60f8      	str	r0, [r7, #12]
    if (err) {
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d001      	beq.n	80146a8 <lfs_file_close+0x24>
        return err;
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	e01c      	b.n	80146e2 <lfs_file_close+0x5e>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146ac:	6839      	ldr	r1, [r7, #0]
 80146ae:	4618      	mov	r0, r3
 80146b0:	f7f9 fa28 	bl	800db04 <lfs_mlist_isopen>
 80146b4:	4603      	mov	r3, r0
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d106      	bne.n	80146c8 <lfs_file_close+0x44>
 80146ba:	4b0c      	ldr	r3, [pc, #48]	@ (80146ec <lfs_file_close+0x68>)
 80146bc:	4a0c      	ldr	r2, [pc, #48]	@ (80146f0 <lfs_file_close+0x6c>)
 80146be:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 80146c2:	480c      	ldr	r0, [pc, #48]	@ (80146f4 <lfs_file_close+0x70>)
 80146c4:	f00e fc70 	bl	8022fa8 <__assert_func>

    err = lfs_file_close_(lfs, file);
 80146c8:	6839      	ldr	r1, [r7, #0]
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f7fd fa8c 	bl	8011be8 <lfs_file_close_>
 80146d0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80146d6:	699b      	ldr	r3, [r3, #24]
 80146d8:	687a      	ldr	r2, [r7, #4]
 80146da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80146dc:	4610      	mov	r0, r2
 80146de:	4798      	blx	r3
    return err;
 80146e0:	68fb      	ldr	r3, [r7, #12]
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3710      	adds	r7, #16
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
 80146ea:	bf00      	nop
 80146ec:	08031058 	.word	0x08031058
 80146f0:	08033d1c 	.word	0x08033d1c
 80146f4:	08030484 	.word	0x08030484

080146f8 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b086      	sub	sp, #24
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	60f8      	str	r0, [r7, #12]
 8014700:	60b9      	str	r1, [r7, #8]
 8014702:	607a      	str	r2, [r7, #4]
 8014704:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801470a:	695b      	ldr	r3, [r3, #20]
 801470c:	68fa      	ldr	r2, [r7, #12]
 801470e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014710:	4610      	mov	r0, r2
 8014712:	4798      	blx	r3
 8014714:	6178      	str	r0, [r7, #20]
    if (err) {
 8014716:	697b      	ldr	r3, [r7, #20]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d001      	beq.n	8014720 <lfs_file_read+0x28>
        return err;
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	e01e      	b.n	801475e <lfs_file_read+0x66>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014724:	68b9      	ldr	r1, [r7, #8]
 8014726:	4618      	mov	r0, r3
 8014728:	f7f9 f9ec 	bl	800db04 <lfs_mlist_isopen>
 801472c:	4603      	mov	r3, r0
 801472e:	2b00      	cmp	r3, #0
 8014730:	d106      	bne.n	8014740 <lfs_file_read+0x48>
 8014732:	4b0d      	ldr	r3, [pc, #52]	@ (8014768 <lfs_file_read+0x70>)
 8014734:	4a0d      	ldr	r2, [pc, #52]	@ (801476c <lfs_file_read+0x74>)
 8014736:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 801473a:	480d      	ldr	r0, [pc, #52]	@ (8014770 <lfs_file_read+0x78>)
 801473c:	f00e fc34 	bl	8022fa8 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	68b9      	ldr	r1, [r7, #8]
 8014746:	68f8      	ldr	r0, [r7, #12]
 8014748:	f7fd fdae 	bl	80122a8 <lfs_file_read_>
 801474c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014752:	699b      	ldr	r3, [r3, #24]
 8014754:	68fa      	ldr	r2, [r7, #12]
 8014756:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014758:	4610      	mov	r0, r2
 801475a:	4798      	blx	r3
    return res;
 801475c:	693b      	ldr	r3, [r7, #16]
}
 801475e:	4618      	mov	r0, r3
 8014760:	3718      	adds	r7, #24
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
 8014766:	bf00      	nop
 8014768:	08031058 	.word	0x08031058
 801476c:	08033d2c 	.word	0x08033d2c
 8014770:	08030484 	.word	0x08030484

08014774 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8014774:	b580      	push	{r7, lr}
 8014776:	b086      	sub	sp, #24
 8014778:	af00      	add	r7, sp, #0
 801477a:	60f8      	str	r0, [r7, #12]
 801477c:	60b9      	str	r1, [r7, #8]
 801477e:	607a      	str	r2, [r7, #4]
 8014780:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014786:	695b      	ldr	r3, [r3, #20]
 8014788:	68fa      	ldr	r2, [r7, #12]
 801478a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801478c:	4610      	mov	r0, r2
 801478e:	4798      	blx	r3
 8014790:	6178      	str	r0, [r7, #20]
    if (err) {
 8014792:	697b      	ldr	r3, [r7, #20]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d001      	beq.n	801479c <lfs_file_write+0x28>
        return err;
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	e01e      	b.n	80147da <lfs_file_write+0x66>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147a0:	68b9      	ldr	r1, [r7, #8]
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7f9 f9ae 	bl	800db04 <lfs_mlist_isopen>
 80147a8:	4603      	mov	r3, r0
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d106      	bne.n	80147bc <lfs_file_write+0x48>
 80147ae:	4b0d      	ldr	r3, [pc, #52]	@ (80147e4 <lfs_file_write+0x70>)
 80147b0:	4a0d      	ldr	r2, [pc, #52]	@ (80147e8 <lfs_file_write+0x74>)
 80147b2:	f641 0105 	movw	r1, #6149	@ 0x1805
 80147b6:	480d      	ldr	r0, [pc, #52]	@ (80147ec <lfs_file_write+0x78>)
 80147b8:	f00e fbf6 	bl	8022fa8 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 80147bc:	683b      	ldr	r3, [r7, #0]
 80147be:	687a      	ldr	r2, [r7, #4]
 80147c0:	68b9      	ldr	r1, [r7, #8]
 80147c2:	68f8      	ldr	r0, [r7, #12]
 80147c4:	f7fd feb6 	bl	8012534 <lfs_file_write_>
 80147c8:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80147ce:	699b      	ldr	r3, [r3, #24]
 80147d0:	68fa      	ldr	r2, [r7, #12]
 80147d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80147d4:	4610      	mov	r0, r2
 80147d6:	4798      	blx	r3
    return res;
 80147d8:	693b      	ldr	r3, [r7, #16]
}
 80147da:	4618      	mov	r0, r3
 80147dc:	3718      	adds	r7, #24
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}
 80147e2:	bf00      	nop
 80147e4:	08031058 	.word	0x08031058
 80147e8:	08033d3c 	.word	0x08033d3c
 80147ec:	08030484 	.word	0x08030484

080147f0 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b086      	sub	sp, #24
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	60f8      	str	r0, [r7, #12]
 80147f8:	60b9      	str	r1, [r7, #8]
 80147fa:	607a      	str	r2, [r7, #4]
 80147fc:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014802:	695b      	ldr	r3, [r3, #20]
 8014804:	68fa      	ldr	r2, [r7, #12]
 8014806:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014808:	4610      	mov	r0, r2
 801480a:	4798      	blx	r3
 801480c:	6178      	str	r0, [r7, #20]
    if (err) {
 801480e:	697b      	ldr	r3, [r7, #20]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d001      	beq.n	8014818 <lfs_file_seek+0x28>
        return err;
 8014814:	697b      	ldr	r3, [r7, #20]
 8014816:	e01e      	b.n	8014856 <lfs_file_seek+0x66>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801481c:	68b9      	ldr	r1, [r7, #8]
 801481e:	4618      	mov	r0, r3
 8014820:	f7f9 f970 	bl	800db04 <lfs_mlist_isopen>
 8014824:	4603      	mov	r3, r0
 8014826:	2b00      	cmp	r3, #0
 8014828:	d106      	bne.n	8014838 <lfs_file_seek+0x48>
 801482a:	4b0d      	ldr	r3, [pc, #52]	@ (8014860 <lfs_file_seek+0x70>)
 801482c:	4a0d      	ldr	r2, [pc, #52]	@ (8014864 <lfs_file_seek+0x74>)
 801482e:	f641 0117 	movw	r1, #6167	@ 0x1817
 8014832:	480d      	ldr	r0, [pc, #52]	@ (8014868 <lfs_file_seek+0x78>)
 8014834:	f00e fbb8 	bl	8022fa8 <__assert_func>

    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	687a      	ldr	r2, [r7, #4]
 801483c:	68b9      	ldr	r1, [r7, #8]
 801483e:	68f8      	ldr	r0, [r7, #12]
 8014840:	f7fd fefc 	bl	801263c <lfs_file_seek_>
 8014844:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801484a:	699b      	ldr	r3, [r3, #24]
 801484c:	68fa      	ldr	r2, [r7, #12]
 801484e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014850:	4610      	mov	r0, r2
 8014852:	4798      	blx	r3
    return res;
 8014854:	693b      	ldr	r3, [r7, #16]
}
 8014856:	4618      	mov	r0, r3
 8014858:	3718      	adds	r7, #24
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}
 801485e:	bf00      	nop
 8014860:	08031058 	.word	0x08031058
 8014864:	08033d4c 	.word	0x08033d4c
 8014868:	08030484 	.word	0x08030484

0801486c <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 801486c:	b580      	push	{r7, lr}
 801486e:	b084      	sub	sp, #16
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801487a:	695b      	ldr	r3, [r3, #20]
 801487c:	687a      	ldr	r2, [r7, #4]
 801487e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014880:	4610      	mov	r0, r2
 8014882:	4798      	blx	r3
 8014884:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d001      	beq.n	8014890 <lfs_file_tell+0x24>
        return err;
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	e01c      	b.n	80148ca <lfs_file_tell+0x5e>
    }
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014894:	6839      	ldr	r1, [r7, #0]
 8014896:	4618      	mov	r0, r3
 8014898:	f7f9 f934 	bl	800db04 <lfs_mlist_isopen>
 801489c:	4603      	mov	r3, r0
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d106      	bne.n	80148b0 <lfs_file_tell+0x44>
 80148a2:	4b0c      	ldr	r3, [pc, #48]	@ (80148d4 <lfs_file_tell+0x68>)
 80148a4:	4a0c      	ldr	r2, [pc, #48]	@ (80148d8 <lfs_file_tell+0x6c>)
 80148a6:	f641 0138 	movw	r1, #6200	@ 0x1838
 80148aa:	480c      	ldr	r0, [pc, #48]	@ (80148dc <lfs_file_tell+0x70>)
 80148ac:	f00e fb7c 	bl	8022fa8 <__assert_func>

    lfs_soff_t res = lfs_file_tell_(lfs, file);
 80148b0:	6839      	ldr	r1, [r7, #0]
 80148b2:	6878      	ldr	r0, [r7, #4]
 80148b4:	f7fd ff4b 	bl	801274e <lfs_file_tell_>
 80148b8:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80148be:	699b      	ldr	r3, [r3, #24]
 80148c0:	687a      	ldr	r2, [r7, #4]
 80148c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80148c4:	4610      	mov	r0, r2
 80148c6:	4798      	blx	r3
    return res;
 80148c8:	68bb      	ldr	r3, [r7, #8]
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3710      	adds	r7, #16
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop
 80148d4:	08031058 	.word	0x08031058
 80148d8:	08033d5c 	.word	0x08033d5c
 80148dc:	08030484 	.word	0x08030484

080148e0 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b084      	sub	sp, #16
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80148ee:	695b      	ldr	r3, [r3, #20]
 80148f0:	687a      	ldr	r2, [r7, #4]
 80148f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80148f4:	4610      	mov	r0, r2
 80148f6:	4798      	blx	r3
 80148f8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d001      	beq.n	8014904 <lfs_mkdir+0x24>
        return err;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	e00c      	b.n	801491e <lfs_mkdir+0x3e>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_mkdir_(lfs, path);
 8014904:	6839      	ldr	r1, [r7, #0]
 8014906:	6878      	ldr	r0, [r7, #4]
 8014908:	f7fc fb12 	bl	8010f30 <lfs_mkdir_>
 801490c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014912:	699b      	ldr	r3, [r3, #24]
 8014914:	687a      	ldr	r2, [r7, #4]
 8014916:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014918:	4610      	mov	r0, r2
 801491a:	4798      	blx	r3
    return err;
 801491c:	68fb      	ldr	r3, [r7, #12]
}
 801491e:	4618      	mov	r0, r3
 8014920:	3710      	adds	r7, #16
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}
	...

08014928 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8014928:	b580      	push	{r7, lr}
 801492a:	b086      	sub	sp, #24
 801492c:	af00      	add	r7, sp, #0
 801492e:	60f8      	str	r0, [r7, #12]
 8014930:	60b9      	str	r1, [r7, #8]
 8014932:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014938:	695b      	ldr	r3, [r3, #20]
 801493a:	68fa      	ldr	r2, [r7, #12]
 801493c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801493e:	4610      	mov	r0, r2
 8014940:	4798      	blx	r3
 8014942:	6178      	str	r0, [r7, #20]
    if (err) {
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d001      	beq.n	801494e <lfs_dir_open+0x26>
        return err;
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	e020      	b.n	8014990 <lfs_dir_open+0x68>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014952:	68b9      	ldr	r1, [r7, #8]
 8014954:	4618      	mov	r0, r3
 8014956:	f7f9 f8d5 	bl	800db04 <lfs_mlist_isopen>
 801495a:	4603      	mov	r3, r0
 801495c:	f083 0301 	eor.w	r3, r3, #1
 8014960:	b2db      	uxtb	r3, r3
 8014962:	2b00      	cmp	r3, #0
 8014964:	d106      	bne.n	8014974 <lfs_dir_open+0x4c>
 8014966:	4b0c      	ldr	r3, [pc, #48]	@ (8014998 <lfs_dir_open+0x70>)
 8014968:	4a0c      	ldr	r2, [pc, #48]	@ (801499c <lfs_dir_open+0x74>)
 801496a:	f641 0174 	movw	r1, #6260	@ 0x1874
 801496e:	480c      	ldr	r0, [pc, #48]	@ (80149a0 <lfs_dir_open+0x78>)
 8014970:	f00e fb1a 	bl	8022fa8 <__assert_func>

    err = lfs_dir_open_(lfs, dir, path);
 8014974:	687a      	ldr	r2, [r7, #4]
 8014976:	68b9      	ldr	r1, [r7, #8]
 8014978:	68f8      	ldr	r0, [r7, #12]
 801497a:	f7fc fc19 	bl	80111b0 <lfs_dir_open_>
 801497e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014984:	699b      	ldr	r3, [r3, #24]
 8014986:	68fa      	ldr	r2, [r7, #12]
 8014988:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801498a:	4610      	mov	r0, r2
 801498c:	4798      	blx	r3
    return err;
 801498e:	697b      	ldr	r3, [r7, #20]
}
 8014990:	4618      	mov	r0, r3
 8014992:	3718      	adds	r7, #24
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	08031090 	.word	0x08031090
 801499c:	08033d6c 	.word	0x08033d6c
 80149a0:	08030484 	.word	0x08030484

080149a4 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b084      	sub	sp, #16
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80149b2:	695b      	ldr	r3, [r3, #20]
 80149b4:	687a      	ldr	r2, [r7, #4]
 80149b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80149b8:	4610      	mov	r0, r2
 80149ba:	4798      	blx	r3
 80149bc:	60f8      	str	r0, [r7, #12]
    if (err) {
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d001      	beq.n	80149c8 <lfs_dir_close+0x24>
        return err;
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	e00c      	b.n	80149e2 <lfs_dir_close+0x3e>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_close_(lfs, dir);
 80149c8:	6839      	ldr	r1, [r7, #0]
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f7fc fc6a 	bl	80112a4 <lfs_dir_close_>
 80149d0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80149d6:	699b      	ldr	r3, [r3, #24]
 80149d8:	687a      	ldr	r2, [r7, #4]
 80149da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80149dc:	4610      	mov	r0, r2
 80149de:	4798      	blx	r3
    return err;
 80149e0:	68fb      	ldr	r3, [r7, #12]
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3710      	adds	r7, #16
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}

080149ea <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 80149ea:	b580      	push	{r7, lr}
 80149ec:	b086      	sub	sp, #24
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	60f8      	str	r0, [r7, #12]
 80149f2:	60b9      	str	r1, [r7, #8]
 80149f4:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80149fa:	695b      	ldr	r3, [r3, #20]
 80149fc:	68fa      	ldr	r2, [r7, #12]
 80149fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014a00:	4610      	mov	r0, r2
 8014a02:	4798      	blx	r3
 8014a04:	6178      	str	r0, [r7, #20]
    if (err) {
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d001      	beq.n	8014a10 <lfs_dir_read+0x26>
        return err;
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	e00d      	b.n	8014a2c <lfs_dir_read+0x42>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_read_(lfs, dir, info);
 8014a10:	687a      	ldr	r2, [r7, #4]
 8014a12:	68b9      	ldr	r1, [r7, #8]
 8014a14:	68f8      	ldr	r0, [r7, #12]
 8014a16:	f7fc fc53 	bl	80112c0 <lfs_dir_read_>
 8014a1a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014a20:	699b      	ldr	r3, [r3, #24]
 8014a22:	68fa      	ldr	r2, [r7, #12]
 8014a24:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014a26:	4610      	mov	r0, r2
 8014a28:	4798      	blx	r3
    return err;
 8014a2a:	697b      	ldr	r3, [r7, #20]
}
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	3718      	adds	r7, #24
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}

08014a34 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8014a34:	b480      	push	{r7}
 8014a36:	b087      	sub	sp, #28
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	60f8      	str	r0, [r7, #12]
 8014a3c:	60b9      	str	r1, [r7, #8]
 8014a3e:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8014a44:	2300      	movs	r3, #0
 8014a46:	617b      	str	r3, [r7, #20]
 8014a48:	e024      	b.n	8014a94 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	091a      	lsrs	r2, r3, #4
 8014a4e:	6939      	ldr	r1, [r7, #16]
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	440b      	add	r3, r1
 8014a54:	781b      	ldrb	r3, [r3, #0]
 8014a56:	4619      	mov	r1, r3
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	404b      	eors	r3, r1
 8014a5c:	f003 030f 	and.w	r3, r3, #15
 8014a60:	4912      	ldr	r1, [pc, #72]	@ (8014aac <lfs_crc+0x78>)
 8014a62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014a66:	4053      	eors	r3, r2
 8014a68:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	091a      	lsrs	r2, r3, #4
 8014a6e:	6939      	ldr	r1, [r7, #16]
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	440b      	add	r3, r1
 8014a74:	781b      	ldrb	r3, [r3, #0]
 8014a76:	091b      	lsrs	r3, r3, #4
 8014a78:	b2db      	uxtb	r3, r3
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	404b      	eors	r3, r1
 8014a80:	f003 030f 	and.w	r3, r3, #15
 8014a84:	4909      	ldr	r1, [pc, #36]	@ (8014aac <lfs_crc+0x78>)
 8014a86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014a8a:	4053      	eors	r3, r2
 8014a8c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	3301      	adds	r3, #1
 8014a92:	617b      	str	r3, [r7, #20]
 8014a94:	697a      	ldr	r2, [r7, #20]
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d3d6      	bcc.n	8014a4a <lfs_crc+0x16>
    }

    return crc;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
}
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	371c      	adds	r7, #28
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa8:	4770      	bx	lr
 8014aaa:	bf00      	nop
 8014aac:	08033d7c 	.word	0x08033d7c

08014ab0 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b084      	sub	sp, #16
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
 8014ab8:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	683a      	ldr	r2, [r7, #0]
 8014abe:	fb02 f303 	mul.w	r3, r2, r3
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7f7 fbb2 	bl	800c22c <pvPortMalloc>
 8014ac8:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d008      	beq.n	8014ae2 <mg_calloc+0x32>
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	687a      	ldr	r2, [r7, #4]
 8014ad4:	fb02 f303 	mul.w	r3, r2, r3
 8014ad8:	461a      	mov	r2, r3
 8014ada:	2100      	movs	r1, #0
 8014adc:	68f8      	ldr	r0, [r7, #12]
 8014ade:	f010 ffb7 	bl	8025a50 <memset>
  return p;
 8014ae2:	68fb      	ldr	r3, [r7, #12]
}
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	3710      	adds	r7, #16
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}

08014aec <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b084      	sub	sp, #16
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	60fb      	str	r3, [r7, #12]
 8014afa:	e002      	b.n	8014b02 <mg_dns_free+0x16>
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	60fb      	str	r3, [r7, #12]
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	683a      	ldr	r2, [r7, #0]
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	d1f7      	bne.n	8014afc <mg_dns_free+0x10>
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	681a      	ldr	r2, [r3, #0]
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	601a      	str	r2, [r3, #0]
  free(d);
 8014b14:	6838      	ldr	r0, [r7, #0]
 8014b16:	f7f7 fc57 	bl	800c3c8 <vPortFree>
}
 8014b1a:	bf00      	nop
 8014b1c:	3710      	adds	r7, #16
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}

08014b22 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8014b22:	b580      	push	{r7, lr}
 8014b24:	b086      	sub	sp, #24
 8014b26:	af00      	add	r7, sp, #0
 8014b28:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	685b      	ldr	r3, [r3, #4]
 8014b2e:	3330      	adds	r3, #48	@ 0x30
 8014b30:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 8014b32:	693b      	ldr	r3, [r7, #16]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	617b      	str	r3, [r7, #20]
 8014b38:	e00d      	b.n	8014b56 <mg_resolve_cancel+0x34>
    tmp = d->next;
 8014b3a:	697b      	ldr	r3, [r7, #20]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 8014b40:	697b      	ldr	r3, [r7, #20]
 8014b42:	685b      	ldr	r3, [r3, #4]
 8014b44:	687a      	ldr	r2, [r7, #4]
 8014b46:	429a      	cmp	r2, r3
 8014b48:	d103      	bne.n	8014b52 <mg_resolve_cancel+0x30>
 8014b4a:	6979      	ldr	r1, [r7, #20]
 8014b4c:	6938      	ldr	r0, [r7, #16]
 8014b4e:	f7ff ffcd 	bl	8014aec <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	617b      	str	r3, [r7, #20]
 8014b56:	697b      	ldr	r3, [r7, #20]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d1ee      	bne.n	8014b3a <mg_resolve_cancel+0x18>
  }
}
 8014b5c:	bf00      	nop
 8014b5e:	bf00      	nop
 8014b60:	3718      	adds	r7, #24
 8014b62:	46bd      	mov	sp, r7
 8014b64:	bd80      	pop	{r7, pc}

08014b66 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8014b66:	b580      	push	{r7, lr}
 8014b68:	b08c      	sub	sp, #48	@ 0x30
 8014b6a:	af04      	add	r7, sp, #16
 8014b6c:	60f8      	str	r0, [r7, #12]
 8014b6e:	60b9      	str	r1, [r7, #8]
 8014b70:	607a      	str	r2, [r7, #4]
 8014b72:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8014b74:	2300      	movs	r3, #0
 8014b76:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8014b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d005      	beq.n	8014b8a <mg_dns_parse_name_depth+0x24>
 8014b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d102      	bne.n	8014b8a <mg_dns_parse_name_depth+0x24>
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	2200      	movs	r2, #0
 8014b88:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 8014b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b8c:	2b05      	cmp	r3, #5
 8014b8e:	f340 8084 	ble.w	8014c9a <mg_dns_parse_name_depth+0x134>
 8014b92:	2300      	movs	r3, #0
 8014b94:	e093      	b.n	8014cbe <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8014b96:	687a      	ldr	r2, [r7, #4]
 8014b98:	69fb      	ldr	r3, [r7, #28]
 8014b9a:	4413      	add	r3, r2
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	4413      	add	r3, r2
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8014ba4:	69bb      	ldr	r3, [r7, #24]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d103      	bne.n	8014bb2 <mg_dns_parse_name_depth+0x4c>
      i++;
 8014baa:	69fb      	ldr	r3, [r7, #28]
 8014bac:	3301      	adds	r3, #1
 8014bae:	61fb      	str	r3, [r7, #28]
      break;
 8014bb0:	e07b      	b.n	8014caa <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 8014bb2:	69bb      	ldr	r3, [r7, #24]
 8014bb4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d02f      	beq.n	8014c1c <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8014bbc:	69bb      	ldr	r3, [r7, #24]
 8014bbe:	021b      	lsls	r3, r3, #8
 8014bc0:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8014bc4:	6879      	ldr	r1, [r7, #4]
 8014bc6:	69fa      	ldr	r2, [r7, #28]
 8014bc8:	440a      	add	r2, r1
 8014bca:	3201      	adds	r2, #1
 8014bcc:	68f9      	ldr	r1, [r7, #12]
 8014bce:	440a      	add	r2, r1
 8014bd0:	7812      	ldrb	r2, [r2, #0]
 8014bd2:	4313      	orrs	r3, r2
 8014bd4:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8014bd6:	697b      	ldr	r3, [r7, #20]
 8014bd8:	3301      	adds	r3, #1
 8014bda:	68ba      	ldr	r2, [r7, #8]
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d919      	bls.n	8014c14 <mg_dns_parse_name_depth+0xae>
 8014be0:	68fa      	ldr	r2, [r7, #12]
 8014be2:	697b      	ldr	r3, [r7, #20]
 8014be4:	4413      	add	r3, r2
 8014be6:	781b      	ldrb	r3, [r3, #0]
 8014be8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d111      	bne.n	8014c14 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8014bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	9302      	str	r3, [sp, #8]
 8014bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bf8:	9301      	str	r3, [sp, #4]
 8014bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bfc:	9300      	str	r3, [sp, #0]
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	697a      	ldr	r2, [r7, #20]
 8014c02:	68b9      	ldr	r1, [r7, #8]
 8014c04:	68f8      	ldr	r0, [r7, #12]
 8014c06:	f7ff ffae 	bl	8014b66 <mg_dns_parse_name_depth>
 8014c0a:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d101      	bne.n	8014c14 <mg_dns_parse_name_depth+0xae>
        return 0;
 8014c10:	2300      	movs	r3, #0
 8014c12:	e054      	b.n	8014cbe <mg_dns_parse_name_depth+0x158>
      i += 2;
 8014c14:	69fb      	ldr	r3, [r7, #28]
 8014c16:	3302      	adds	r3, #2
 8014c18:	61fb      	str	r3, [r7, #28]
      break;
 8014c1a:	e046      	b.n	8014caa <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8014c1c:	687a      	ldr	r2, [r7, #4]
 8014c1e:	69fb      	ldr	r3, [r7, #28]
 8014c20:	441a      	add	r2, r3
 8014c22:	69bb      	ldr	r3, [r7, #24]
 8014c24:	4413      	add	r3, r2
 8014c26:	3301      	adds	r3, #1
 8014c28:	68ba      	ldr	r2, [r7, #8]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d801      	bhi.n	8014c32 <mg_dns_parse_name_depth+0xcc>
 8014c2e:	2300      	movs	r3, #0
 8014c30:	e045      	b.n	8014cbe <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 8014c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d00b      	beq.n	8014c50 <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8014c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d204      	bcs.n	8014c4a <mg_dns_parse_name_depth+0xe4>
 8014c40:	683a      	ldr	r2, [r7, #0]
 8014c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c44:	4413      	add	r3, r2
 8014c46:	222e      	movs	r2, #46	@ 0x2e
 8014c48:	701a      	strb	r2, [r3, #0]
      j++;
 8014c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c4c:	3301      	adds	r3, #1
 8014c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8014c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c52:	69bb      	ldr	r3, [r7, #24]
 8014c54:	4413      	add	r3, r2
 8014c56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c58:	429a      	cmp	r2, r3
 8014c5a:	d90c      	bls.n	8014c76 <mg_dns_parse_name_depth+0x110>
 8014c5c:	683a      	ldr	r2, [r7, #0]
 8014c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c60:	18d0      	adds	r0, r2, r3
 8014c62:	687a      	ldr	r2, [r7, #4]
 8014c64:	69fb      	ldr	r3, [r7, #28]
 8014c66:	4413      	add	r3, r2
 8014c68:	3301      	adds	r3, #1
 8014c6a:	68fa      	ldr	r2, [r7, #12]
 8014c6c:	4413      	add	r3, r2
 8014c6e:	69ba      	ldr	r2, [r7, #24]
 8014c70:	4619      	mov	r1, r3
 8014c72:	f012 f929 	bl	8026ec8 <memcpy>
    j += n;
 8014c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c78:	69bb      	ldr	r3, [r7, #24]
 8014c7a:	4413      	add	r3, r2
 8014c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 8014c7e:	69ba      	ldr	r2, [r7, #24]
 8014c80:	69fb      	ldr	r3, [r7, #28]
 8014c82:	4413      	add	r3, r2
 8014c84:	3301      	adds	r3, #1
 8014c86:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8014c88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d204      	bcs.n	8014c9a <mg_dns_parse_name_depth+0x134>
 8014c90:	683a      	ldr	r2, [r7, #0]
 8014c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c94:	4413      	add	r3, r2
 8014c96:	2200      	movs	r2, #0
 8014c98:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	69fb      	ldr	r3, [r7, #28]
 8014c9e:	4413      	add	r3, r2
 8014ca0:	3301      	adds	r3, #1
 8014ca2:	68ba      	ldr	r2, [r7, #8]
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	f63f af76 	bhi.w	8014b96 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8014caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d005      	beq.n	8014cbc <mg_dns_parse_name_depth+0x156>
 8014cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cb2:	3b01      	subs	r3, #1
 8014cb4:	683a      	ldr	r2, [r7, #0]
 8014cb6:	4413      	add	r3, r2
 8014cb8:	2200      	movs	r2, #0
 8014cba:	701a      	strb	r2, [r3, #0]
  return i;
 8014cbc:	69fb      	ldr	r3, [r7, #28]
}
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	3720      	adds	r7, #32
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	bd80      	pop	{r7, pc}

08014cc6 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8014cc6:	b580      	push	{r7, lr}
 8014cc8:	b088      	sub	sp, #32
 8014cca:	af04      	add	r7, sp, #16
 8014ccc:	60f8      	str	r0, [r7, #12]
 8014cce:	60b9      	str	r1, [r7, #8]
 8014cd0:	607a      	str	r2, [r7, #4]
 8014cd2:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	9302      	str	r3, [sp, #8]
 8014cd8:	2300      	movs	r3, #0
 8014cda:	9301      	str	r3, [sp, #4]
 8014cdc:	69bb      	ldr	r3, [r7, #24]
 8014cde:	9300      	str	r3, [sp, #0]
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	687a      	ldr	r2, [r7, #4]
 8014ce4:	68b9      	ldr	r1, [r7, #8]
 8014ce6:	68f8      	ldr	r0, [r7, #12]
 8014ce8:	f7ff ff3d 	bl	8014b66 <mg_dns_parse_name_depth>
 8014cec:	4603      	mov	r3, r0
}
 8014cee:	4618      	mov	r0, r3
 8014cf0:	3710      	adds	r7, #16
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd80      	pop	{r7, pc}

08014cf6 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8014cf6:	b580      	push	{r7, lr}
 8014cf8:	b088      	sub	sp, #32
 8014cfa:	af02      	add	r7, sp, #8
 8014cfc:	60f8      	str	r0, [r7, #12]
 8014cfe:	60b9      	str	r1, [r7, #8]
 8014d00:	607a      	str	r2, [r7, #4]
 8014d02:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8014d04:	68fa      	ldr	r2, [r7, #12]
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	4413      	add	r3, r2
 8014d0a:	617b      	str	r3, [r7, #20]
 8014d0c:	68fa      	ldr	r2, [r7, #12]
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	4413      	add	r3, r2
 8014d12:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 8014d14:	2208      	movs	r2, #8
 8014d16:	2100      	movs	r1, #0
 8014d18:	6a38      	ldr	r0, [r7, #32]
 8014d1a:	f010 fe99 	bl	8025a50 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	2b0b      	cmp	r3, #11
 8014d22:	d801      	bhi.n	8014d28 <mg_dns_parse_rr+0x32>
 8014d24:	2300      	movs	r3, #0
 8014d26:	e074      	b.n	8014e12 <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014d2e:	d901      	bls.n	8014d34 <mg_dns_parse_rr+0x3e>
 8014d30:	2300      	movs	r3, #0
 8014d32:	e06e      	b.n	8014e12 <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 8014d34:	697a      	ldr	r2, [r7, #20]
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	429a      	cmp	r2, r3
 8014d3a:	d301      	bcc.n	8014d40 <mg_dns_parse_rr+0x4a>
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	e068      	b.n	8014e12 <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8014d40:	2300      	movs	r3, #0
 8014d42:	9300      	str	r3, [sp, #0]
 8014d44:	2300      	movs	r3, #0
 8014d46:	687a      	ldr	r2, [r7, #4]
 8014d48:	68b9      	ldr	r1, [r7, #8]
 8014d4a:	68f8      	ldr	r0, [r7, #12]
 8014d4c:	f7ff ffbb 	bl	8014cc6 <mg_dns_parse_name>
 8014d50:	4603      	mov	r3, r0
 8014d52:	b29a      	uxth	r2, r3
 8014d54:	6a3b      	ldr	r3, [r7, #32]
 8014d56:	801a      	strh	r2, [r3, #0]
 8014d58:	6a3b      	ldr	r3, [r7, #32]
 8014d5a:	881b      	ldrh	r3, [r3, #0]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d101      	bne.n	8014d64 <mg_dns_parse_rr+0x6e>
    return 0;
 8014d60:	2300      	movs	r3, #0
 8014d62:	e056      	b.n	8014e12 <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 8014d64:	6a3b      	ldr	r3, [r7, #32]
 8014d66:	881b      	ldrh	r3, [r3, #0]
 8014d68:	3304      	adds	r3, #4
 8014d6a:	697a      	ldr	r2, [r7, #20]
 8014d6c:	4413      	add	r3, r2
 8014d6e:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8014d70:	697a      	ldr	r2, [r7, #20]
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	429a      	cmp	r2, r3
 8014d76:	d901      	bls.n	8014d7c <mg_dns_parse_rr+0x86>
 8014d78:	2300      	movs	r3, #0
 8014d7a:	e04a      	b.n	8014e12 <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8014d7c:	697b      	ldr	r3, [r7, #20]
 8014d7e:	3b04      	subs	r3, #4
 8014d80:	781b      	ldrb	r3, [r3, #0]
 8014d82:	021b      	lsls	r3, r3, #8
 8014d84:	b21a      	sxth	r2, r3
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	3b03      	subs	r3, #3
 8014d8a:	781b      	ldrb	r3, [r3, #0]
 8014d8c:	b21b      	sxth	r3, r3
 8014d8e:	4313      	orrs	r3, r2
 8014d90:	b21b      	sxth	r3, r3
 8014d92:	b29a      	uxth	r2, r3
 8014d94:	6a3b      	ldr	r3, [r7, #32]
 8014d96:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8014d98:	697b      	ldr	r3, [r7, #20]
 8014d9a:	3b02      	subs	r3, #2
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	021b      	lsls	r3, r3, #8
 8014da0:	b21a      	sxth	r2, r3
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	3b01      	subs	r3, #1
 8014da6:	781b      	ldrb	r3, [r3, #0]
 8014da8:	b21b      	sxth	r3, r3
 8014daa:	4313      	orrs	r3, r2
 8014dac:	b21b      	sxth	r3, r3
 8014dae:	b29a      	uxth	r2, r3
 8014db0:	6a3b      	ldr	r3, [r7, #32]
 8014db2:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8014db4:	78fb      	ldrb	r3, [r7, #3]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d003      	beq.n	8014dc2 <mg_dns_parse_rr+0xcc>
 8014dba:	6a3b      	ldr	r3, [r7, #32]
 8014dbc:	881b      	ldrh	r3, [r3, #0]
 8014dbe:	3304      	adds	r3, #4
 8014dc0:	e027      	b.n	8014e12 <mg_dns_parse_rr+0x11c>

  s += 6;
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	3306      	adds	r3, #6
 8014dc6:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8014dc8:	697a      	ldr	r2, [r7, #20]
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	429a      	cmp	r2, r3
 8014dce:	d901      	bls.n	8014dd4 <mg_dns_parse_rr+0xde>
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	e01e      	b.n	8014e12 <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	3b02      	subs	r3, #2
 8014dd8:	781b      	ldrb	r3, [r3, #0]
 8014dda:	021b      	lsls	r3, r3, #8
 8014ddc:	b21a      	sxth	r2, r3
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	3b01      	subs	r3, #1
 8014de2:	781b      	ldrb	r3, [r3, #0]
 8014de4:	b21b      	sxth	r3, r3
 8014de6:	4313      	orrs	r3, r2
 8014de8:	b21b      	sxth	r3, r3
 8014dea:	b29a      	uxth	r2, r3
 8014dec:	6a3b      	ldr	r3, [r7, #32]
 8014dee:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 8014df0:	6a3b      	ldr	r3, [r7, #32]
 8014df2:	88db      	ldrh	r3, [r3, #6]
 8014df4:	461a      	mov	r2, r3
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	4413      	add	r3, r2
 8014dfa:	693a      	ldr	r2, [r7, #16]
 8014dfc:	429a      	cmp	r2, r3
 8014dfe:	d201      	bcs.n	8014e04 <mg_dns_parse_rr+0x10e>
 8014e00:	2300      	movs	r3, #0
 8014e02:	e006      	b.n	8014e12 <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 8014e04:	6a3b      	ldr	r3, [r7, #32]
 8014e06:	881b      	ldrh	r3, [r3, #0]
 8014e08:	461a      	mov	r2, r3
 8014e0a:	6a3b      	ldr	r3, [r7, #32]
 8014e0c:	88db      	ldrh	r3, [r3, #6]
 8014e0e:	4413      	add	r3, r2
 8014e10:	330a      	adds	r3, #10
}
 8014e12:	4618      	mov	r0, r3
 8014e14:	3718      	adds	r7, #24
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd80      	pop	{r7, pc}
	...

08014e1c <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b08e      	sub	sp, #56	@ 0x38
 8014e20:	af02      	add	r7, sp, #8
 8014e22:	60f8      	str	r0, [r7, #12]
 8014e24:	60b9      	str	r1, [r7, #8]
 8014e26:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 8014e2c:	230c      	movs	r3, #12
 8014e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(dm, 0, sizeof(*dm));
 8014e30:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8014e34:	2100      	movs	r1, #0
 8014e36:	6878      	ldr	r0, [r7, #4]
 8014e38:	f010 fe0a 	bl	8025a50 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8014e3c:	68bb      	ldr	r3, [r7, #8]
 8014e3e:	2b0b      	cmp	r3, #11
 8014e40:	d801      	bhi.n	8014e46 <mg_dns_parse+0x2a>
 8014e42:	2300      	movs	r3, #0
 8014e44:	e0aa      	b.n	8014f9c <mg_dns_parse+0x180>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8014e46:	6a3b      	ldr	r3, [r7, #32]
 8014e48:	889b      	ldrh	r3, [r3, #4]
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f00d fc9d 	bl	802278a <mg_ntohs>
 8014e50:	4603      	mov	r3, r0
 8014e52:	2b01      	cmp	r3, #1
 8014e54:	d901      	bls.n	8014e5a <mg_dns_parse+0x3e>
 8014e56:	2300      	movs	r3, #0
 8014e58:	e0a0      	b.n	8014f9c <mg_dns_parse+0x180>
  num_answers = mg_ntohs(h->num_answers);
 8014e5a:	6a3b      	ldr	r3, [r7, #32]
 8014e5c:	88db      	ldrh	r3, [r3, #6]
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f00d fc93 	bl	802278a <mg_ntohs>
 8014e64:	4603      	mov	r3, r0
 8014e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8014e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e6a:	2b0a      	cmp	r3, #10
 8014e6c:	d910      	bls.n	8014e90 <mg_dns_parse+0x74>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8014e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8014fa4 <mg_dns_parse+0x188>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	2b02      	cmp	r3, #2
 8014e74:	dd0a      	ble.n	8014e8c <mg_dns_parse+0x70>
 8014e76:	4b4c      	ldr	r3, [pc, #304]	@ (8014fa8 <mg_dns_parse+0x18c>)
 8014e78:	f240 4293 	movw	r2, #1171	@ 0x493
 8014e7c:	494b      	ldr	r1, [pc, #300]	@ (8014fac <mg_dns_parse+0x190>)
 8014e7e:	2003      	movs	r0, #3
 8014e80:	f005 ffdc 	bl	801ae3c <mg_log_prefix>
 8014e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014e86:	484a      	ldr	r0, [pc, #296]	@ (8014fb0 <mg_dns_parse+0x194>)
 8014e88:	f006 f828 	bl	801aedc <mg_log>
    num_answers = 10;  // Sanity cap
 8014e8c:	230a      	movs	r3, #10
 8014e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 8014e90:	6a3b      	ldr	r3, [r7, #32]
 8014e92:	881b      	ldrh	r3, [r3, #0]
 8014e94:	4618      	mov	r0, r3
 8014e96:	f00d fc78 	bl	802278a <mg_ntohs>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	461a      	mov	r2, r3
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014ea6:	e015      	b.n	8014ed4 <mg_dns_parse+0xb8>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8014ea8:	f107 0314 	add.w	r3, r7, #20
 8014eac:	9300      	str	r3, [sp, #0]
 8014eae:	2301      	movs	r3, #1
 8014eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014eb2:	68b9      	ldr	r1, [r7, #8]
 8014eb4:	68f8      	ldr	r0, [r7, #12]
 8014eb6:	f7ff ff1e 	bl	8014cf6 <mg_dns_parse_rr>
 8014eba:	61f8      	str	r0, [r7, #28]
 8014ebc:	69fb      	ldr	r3, [r7, #28]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d101      	bne.n	8014ec6 <mg_dns_parse+0xaa>
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	e06a      	b.n	8014f9c <mg_dns_parse+0x180>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 8014ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ec8:	69fb      	ldr	r3, [r7, #28]
 8014eca:	4413      	add	r3, r2
 8014ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8014ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ed0:	3301      	adds	r3, #1
 8014ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014ed4:	6a3b      	ldr	r3, [r7, #32]
 8014ed6:	889b      	ldrh	r3, [r3, #4]
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f00d fc56 	bl	802278a <mg_ntohs>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	461a      	mov	r2, r3
 8014ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ee4:	4293      	cmp	r3, r2
 8014ee6:	d3df      	bcc.n	8014ea8 <mg_dns_parse+0x8c>
  }
  for (i = 0; i < num_answers; i++) {
 8014ee8:	2300      	movs	r3, #0
 8014eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014eec:	e051      	b.n	8014f92 <mg_dns_parse+0x176>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8014eee:	f107 0314 	add.w	r3, r7, #20
 8014ef2:	9300      	str	r3, [sp, #0]
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ef8:	68b9      	ldr	r1, [r7, #8]
 8014efa:	68f8      	ldr	r0, [r7, #12]
 8014efc:	f7ff fefb 	bl	8014cf6 <mg_dns_parse_rr>
 8014f00:	61f8      	str	r0, [r7, #28]
 8014f02:	69fb      	ldr	r3, [r7, #28]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d101      	bne.n	8014f0c <mg_dns_parse+0xf0>
 8014f08:	2300      	movs	r3, #0
 8014f0a:	e047      	b.n	8014f9c <mg_dns_parse+0x180>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	3318      	adds	r3, #24
 8014f10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014f14:	9200      	str	r2, [sp, #0]
 8014f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f18:	68b9      	ldr	r1, [r7, #8]
 8014f1a:	68f8      	ldr	r0, [r7, #12]
 8014f1c:	f7ff fed3 	bl	8014cc6 <mg_dns_parse_name>
    ofs += n;
 8014f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f22:	69fb      	ldr	r3, [r7, #28]
 8014f24:	4413      	add	r3, r2
 8014f26:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8014f28:	8b7b      	ldrh	r3, [r7, #26]
 8014f2a:	2b04      	cmp	r3, #4
 8014f2c:	d114      	bne.n	8014f58 <mg_dns_parse+0x13c>
 8014f2e:	8afb      	ldrh	r3, [r7, #22]
 8014f30:	2b01      	cmp	r3, #1
 8014f32:	d111      	bne.n	8014f58 <mg_dns_parse+0x13c>
 8014f34:	8b3b      	ldrh	r3, [r7, #24]
 8014f36:	2b01      	cmp	r3, #1
 8014f38:	d10e      	bne.n	8014f58 <mg_dns_parse+0x13c>
      dm->addr.is_ip6 = false;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	3304      	adds	r3, #4
 8014f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f46:	3a04      	subs	r2, #4
 8014f48:	68f9      	ldr	r1, [r7, #12]
 8014f4a:	440a      	add	r2, r1
 8014f4c:	6812      	ldr	r2, [r2, #0]
 8014f4e:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2201      	movs	r2, #1
 8014f54:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8014f56:	e020      	b.n	8014f9a <mg_dns_parse+0x17e>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8014f58:	8b7b      	ldrh	r3, [r7, #26]
 8014f5a:	2b10      	cmp	r3, #16
 8014f5c:	d116      	bne.n	8014f8c <mg_dns_parse+0x170>
 8014f5e:	8afb      	ldrh	r3, [r7, #22]
 8014f60:	2b1c      	cmp	r3, #28
 8014f62:	d113      	bne.n	8014f8c <mg_dns_parse+0x170>
 8014f64:	8b3b      	ldrh	r3, [r7, #24]
 8014f66:	2b01      	cmp	r3, #1
 8014f68:	d110      	bne.n	8014f8c <mg_dns_parse+0x170>
      dm->addr.is_ip6 = true;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2201      	movs	r2, #1
 8014f6e:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	1d18      	adds	r0, r3, #4
 8014f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f76:	3b10      	subs	r3, #16
 8014f78:	68fa      	ldr	r2, [r7, #12]
 8014f7a:	4413      	add	r3, r2
 8014f7c:	2210      	movs	r2, #16
 8014f7e:	4619      	mov	r1, r3
 8014f80:	f011 ffa2 	bl	8026ec8 <memcpy>
      dm->resolved = true;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	2201      	movs	r2, #1
 8014f88:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8014f8a:	e006      	b.n	8014f9a <mg_dns_parse+0x17e>
  for (i = 0; i < num_answers; i++) {
 8014f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f8e:	3301      	adds	r3, #1
 8014f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014f92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f96:	429a      	cmp	r2, r3
 8014f98:	d3a9      	bcc.n	8014eee <mg_dns_parse+0xd2>
    }
  }
  return true;
 8014f9a:	2301      	movs	r3, #1
}
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	3730      	adds	r7, #48	@ 0x30
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	bd80      	pop	{r7, pc}
 8014fa4:	20000298 	.word	0x20000298
 8014fa8:	08033dfc 	.word	0x08033dfc
 8014fac:	080310c8 	.word	0x080310c8
 8014fb0:	080310f8 	.word	0x080310f8

08014fb4 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8014fb4:	b5b0      	push	{r4, r5, r7, lr}
 8014fb6:	b0d2      	sub	sp, #328	@ 0x148
 8014fb8:	af02      	add	r7, sp, #8
 8014fba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014fbe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014fc2:	6018      	str	r0, [r3, #0]
 8014fc4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014fc8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014fcc:	6019      	str	r1, [r3, #0]
 8014fce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014fd2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014fd6:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8014fd8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014fdc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	685b      	ldr	r3, [r3, #4]
 8014fe4:	3330      	adds	r3, #48	@ 0x30
 8014fe6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 8014fea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014fee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2b02      	cmp	r3, #2
 8014ff6:	d12d      	bne.n	8015054 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8014ff8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014ffc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015006:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 801500a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8015014:	e019      	b.n	801504a <dns_cb+0x96>
      tmp = d->next;
 8015016:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8015020:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015024:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8015028:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 801502c:	4290      	cmp	r0, r2
 801502e:	eb71 0303 	sbcs.w	r3, r1, r3
 8015032:	d206      	bcs.n	8015042 <dns_cb+0x8e>
 8015034:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015038:	685b      	ldr	r3, [r3, #4]
 801503a:	4992      	ldr	r1, [pc, #584]	@ (8015284 <dns_cb+0x2d0>)
 801503c:	4618      	mov	r0, r3
 801503e:	f000 fb37 	bl	80156b0 <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 8015042:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015046:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801504a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801504e:	2b00      	cmp	r3, #0
 8015050:	d1e1      	bne.n	8015016 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 8015052:	e112      	b.n	801527a <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 8015054:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015058:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	2b07      	cmp	r3, #7
 8015060:	f040 80e4 	bne.w	801522c <dns_cb+0x278>
    int resolved = 0;
 8015064:	2300      	movs	r3, #0
 8015066:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 801506a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801506e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015076:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801507a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015082:	f107 0210 	add.w	r2, r7, #16
 8015086:	4619      	mov	r1, r3
 8015088:	f7ff fec8 	bl	8014e1c <mg_dns_parse>
 801508c:	4603      	mov	r3, r0
 801508e:	f083 0301 	eor.w	r3, r3, #1
 8015092:	b2db      	uxtb	r3, r3
 8015094:	2b00      	cmp	r3, #0
 8015096:	d01e      	beq.n	80150d6 <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8015098:	4b7b      	ldr	r3, [pc, #492]	@ (8015288 <dns_cb+0x2d4>)
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	2b00      	cmp	r3, #0
 801509e:	dd09      	ble.n	80150b4 <dns_cb+0x100>
 80150a0:	4b7a      	ldr	r3, [pc, #488]	@ (801528c <dns_cb+0x2d8>)
 80150a2:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 80150a6:	497a      	ldr	r1, [pc, #488]	@ (8015290 <dns_cb+0x2dc>)
 80150a8:	2001      	movs	r0, #1
 80150aa:	f005 fec7 	bl	801ae3c <mg_log_prefix>
 80150ae:	4879      	ldr	r0, [pc, #484]	@ (8015294 <dns_cb+0x2e0>)
 80150b0:	f005 ff14 	bl	801aedc <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 80150b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80150b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80150c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80150c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80150cc:	4619      	mov	r1, r3
 80150ce:	4610      	mov	r0, r2
 80150d0:	f005 ff3a 	bl	801af48 <mg_hexdump>
 80150d4:	e090      	b.n	80151f8 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 80150d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80150e0:	e085      	b.n	80151ee <dns_cb+0x23a>
        tmp = d->next;
 80150e2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 80150ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80150f0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80150f4:	881a      	ldrh	r2, [r3, #0]
 80150f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80150fa:	8a1b      	ldrh	r3, [r3, #16]
 80150fc:	429a      	cmp	r2, r3
 80150fe:	d171      	bne.n	80151e4 <dns_cb+0x230>
        if (d->c->is_resolving) {
 8015100:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015104:	685b      	ldr	r3, [r3, #4]
 8015106:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801510a:	f003 0308 	and.w	r3, r3, #8
 801510e:	b2db      	uxtb	r3, r3
 8015110:	2b00      	cmp	r3, #0
 8015112:	d04a      	beq.n	80151aa <dns_cb+0x1f6>
          if (dm.resolved) {
 8015114:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015118:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801511c:	789b      	ldrb	r3, [r3, #2]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d038      	beq.n	8015194 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 8015122:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015126:	685b      	ldr	r3, [r3, #4]
 8015128:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801512a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801512e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015132:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 8015134:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015138:	685a      	ldr	r2, [r3, #4]
 801513a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801513e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015142:	f102 041c 	add.w	r4, r2, #28
 8015146:	1d1d      	adds	r5, r3, #4
 8015148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801514a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801514c:	682b      	ldr	r3, [r5, #0]
 801514e:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 8015150:	4b4d      	ldr	r3, [pc, #308]	@ (8015288 <dns_cb+0x2d4>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	2b02      	cmp	r3, #2
 8015156:	dd16      	ble.n	8015186 <dns_cb+0x1d2>
 8015158:	4b4c      	ldr	r3, [pc, #304]	@ (801528c <dns_cb+0x2d8>)
 801515a:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 801515e:	494c      	ldr	r1, [pc, #304]	@ (8015290 <dns_cb+0x2dc>)
 8015160:	2003      	movs	r0, #3
 8015162:	f005 fe6b 	bl	801ae3c <mg_log_prefix>
 8015166:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801516a:	685b      	ldr	r3, [r3, #4]
 801516c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801516e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015172:	685b      	ldr	r3, [r3, #4]
 8015174:	331c      	adds	r3, #28
 8015176:	f107 0210 	add.w	r2, r7, #16
 801517a:	3218      	adds	r2, #24
 801517c:	9300      	str	r3, [sp, #0]
 801517e:	4b46      	ldr	r3, [pc, #280]	@ (8015298 <dns_cb+0x2e4>)
 8015180:	4846      	ldr	r0, [pc, #280]	@ (801529c <dns_cb+0x2e8>)
 8015182:	f005 feab 	bl	801aedc <mg_log>
            mg_connect_resolved(d->c);
 8015186:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801518a:	685b      	ldr	r3, [r3, #4]
 801518c:	4618      	mov	r0, r3
 801518e:	f00b faad 	bl	80206ec <mg_connect_resolved>
 8015192:	e01d      	b.n	80151d0 <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8015194:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015198:	6858      	ldr	r0, [r3, #4]
 801519a:	f107 0310 	add.w	r3, r7, #16
 801519e:	3318      	adds	r3, #24
 80151a0:	461a      	mov	r2, r3
 80151a2:	493f      	ldr	r1, [pc, #252]	@ (80152a0 <dns_cb+0x2ec>)
 80151a4:	f000 fa84 	bl	80156b0 <mg_error>
 80151a8:	e012      	b.n	80151d0 <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 80151aa:	4b37      	ldr	r3, [pc, #220]	@ (8015288 <dns_cb+0x2d4>)
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	dd0e      	ble.n	80151d0 <dns_cb+0x21c>
 80151b2:	4b36      	ldr	r3, [pc, #216]	@ (801528c <dns_cb+0x2d8>)
 80151b4:	f240 42da 	movw	r2, #1242	@ 0x4da
 80151b8:	4935      	ldr	r1, [pc, #212]	@ (8015290 <dns_cb+0x2dc>)
 80151ba:	2001      	movs	r0, #1
 80151bc:	f005 fe3e 	bl	801ae3c <mg_log_prefix>
 80151c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80151c4:	685b      	ldr	r3, [r3, #4]
 80151c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80151c8:	4619      	mov	r1, r3
 80151ca:	4836      	ldr	r0, [pc, #216]	@ (80152a4 <dns_cb+0x2f0>)
 80151cc:	f005 fe86 	bl	801aedc <mg_log>
        mg_dns_free(head, d);
 80151d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80151d4:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80151d8:	f7ff fc88 	bl	8014aec <mg_dns_free>
        resolved = 1;
 80151dc:	2301      	movs	r3, #1
 80151de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80151e2:	e000      	b.n	80151e6 <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 80151e4:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 80151e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80151ea:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80151ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	f47f af75 	bne.w	80150e2 <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80151f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d10d      	bne.n	801521c <dns_cb+0x268>
 8015200:	4b21      	ldr	r3, [pc, #132]	@ (8015288 <dns_cb+0x2d4>)
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	2b00      	cmp	r3, #0
 8015206:	dd09      	ble.n	801521c <dns_cb+0x268>
 8015208:	4b20      	ldr	r3, [pc, #128]	@ (801528c <dns_cb+0x2d8>)
 801520a:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 801520e:	4920      	ldr	r1, [pc, #128]	@ (8015290 <dns_cb+0x2dc>)
 8015210:	2001      	movs	r0, #1
 8015212:	f005 fe13 	bl	801ae3c <mg_log_prefix>
 8015216:	4824      	ldr	r0, [pc, #144]	@ (80152a8 <dns_cb+0x2f4>)
 8015218:	f005 fe60 	bl	801aedc <mg_log>
    c->recv.len = 0;
 801521c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015220:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	2200      	movs	r2, #0
 8015228:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801522a:	e026      	b.n	801527a <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 801522c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015230:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	2b09      	cmp	r3, #9
 8015238:	d11f      	bne.n	801527a <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 801523a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8015244:	e015      	b.n	8015272 <dns_cb+0x2be>
      tmp = d->next;
 8015246:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 8015250:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	4915      	ldr	r1, [pc, #84]	@ (80152ac <dns_cb+0x2f8>)
 8015258:	4618      	mov	r0, r3
 801525a:	f000 fa29 	bl	80156b0 <mg_error>
      mg_dns_free(head, d);
 801525e:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8015262:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8015266:	f7ff fc41 	bl	8014aec <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 801526a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801526e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8015272:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015276:	2b00      	cmp	r3, #0
 8015278:	d1e5      	bne.n	8015246 <dns_cb+0x292>
}
 801527a:	bf00      	nop
 801527c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8015280:	46bd      	mov	sp, r7
 8015282:	bdb0      	pop	{r4, r5, r7, pc}
 8015284:	08031124 	.word	0x08031124
 8015288:	20000298 	.word	0x20000298
 801528c:	08033e0c 	.word	0x08033e0c
 8015290:	080310c8 	.word	0x080310c8
 8015294:	08031130 	.word	0x08031130
 8015298:	0802105b 	.word	0x0802105b
 801529c:	0803114c 	.word	0x0803114c
 80152a0:	0803115c 	.word	0x0803115c
 80152a4:	08031174 	.word	0x08031174
 80152a8:	0803118c 	.word	0x0803118c
 80152ac:	0803119c 	.word	0x0803119c

080152b0 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 80152b0:	b590      	push	{r4, r7, lr}
 80152b2:	b0cb      	sub	sp, #300	@ 0x12c
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 80152ba:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80152be:	6020      	str	r0, [r4, #0]
 80152c0:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80152c4:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 80152c8:	6001      	str	r1, [r0, #0]
 80152ca:	4619      	mov	r1, r3
 80152cc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80152d0:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80152d4:	801a      	strh	r2, [r3, #0]
 80152d6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80152da:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 80152de:	460a      	mov	r2, r1
 80152e0:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 80152e2:	f107 0314 	add.w	r3, r7, #20
 80152e6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80152ea:	2100      	movs	r1, #0
 80152ec:	4618      	mov	r0, r3
 80152ee:	f010 fbaf 	bl	8025a50 <memset>
  pkt.header.txnid = mg_htons(txnid);
 80152f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80152f6:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80152fa:	881b      	ldrh	r3, [r3, #0]
 80152fc:	4618      	mov	r0, r3
 80152fe:	f00d fa44 	bl	802278a <mg_ntohs>
 8015302:	4603      	mov	r3, r0
 8015304:	461a      	mov	r2, r3
 8015306:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801530a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801530e:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 8015310:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8015314:	f00d fa39 	bl	802278a <mg_ntohs>
 8015318:	4603      	mov	r3, r0
 801531a:	461a      	mov	r2, r3
 801531c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015320:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8015324:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 8015326:	2001      	movs	r0, #1
 8015328:	f00d fa2f 	bl	802278a <mg_ntohs>
 801532c:	4603      	mov	r3, r0
 801532e:	461a      	mov	r2, r3
 8015330:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015334:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8015338:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 801533a:	2300      	movs	r3, #0
 801533c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8015340:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015344:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8015348:	e054      	b.n	80153f4 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 801534a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801534e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	681a      	ldr	r2, [r3, #0]
 8015356:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801535a:	4413      	add	r3, r2
 801535c:	781b      	ldrb	r3, [r3, #0]
 801535e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015360:	d009      	beq.n	8015376 <mg_dns_send+0xc6>
 8015362:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015366:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	685b      	ldr	r3, [r3, #4]
 801536e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8015372:	429a      	cmp	r2, r3
 8015374:	d32f      	bcc.n	80153d6 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8015376:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801537a:	b2da      	uxtb	r2, r3
 801537c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015380:	b2db      	uxtb	r3, r3
 8015382:	1ad3      	subs	r3, r2, r3
 8015384:	b2d9      	uxtb	r1, r3
 8015386:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801538a:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 801538e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015392:	4413      	add	r3, r2
 8015394:	330c      	adds	r3, #12
 8015396:	460a      	mov	r2, r1
 8015398:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 801539a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801539e:	3301      	adds	r3, #1
 80153a0:	f107 0214 	add.w	r2, r7, #20
 80153a4:	3308      	adds	r3, #8
 80153a6:	4413      	add	r3, r2
 80153a8:	1d18      	adds	r0, r3, #4
 80153aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80153ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	681a      	ldr	r2, [r3, #0]
 80153b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80153ba:	18d1      	adds	r1, r2, r3
 80153bc:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80153c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80153c4:	1ad3      	subs	r3, r2, r3
 80153c6:	461a      	mov	r2, r3
 80153c8:	f011 fd7e 	bl	8026ec8 <memcpy>
      n = i + 1;
 80153cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80153d0:	3301      	adds	r3, #1
 80153d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 80153d6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80153da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80153e6:	429a      	cmp	r2, r3
 80153e8:	d209      	bcs.n	80153fe <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80153ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80153ee:	3301      	adds	r3, #1
 80153f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80153f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80153f8:	2bfa      	cmp	r3, #250	@ 0xfa
 80153fa:	d9a6      	bls.n	801534a <mg_dns_send+0x9a>
 80153fc:	e000      	b.n	8015400 <mg_dns_send+0x150>
    if (i >= name->len) break;
 80153fe:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8015400:	f107 0214 	add.w	r2, r7, #20
 8015404:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015408:	3308      	adds	r3, #8
 801540a:	4413      	add	r3, r2
 801540c:	3304      	adds	r3, #4
 801540e:	2205      	movs	r2, #5
 8015410:	4916      	ldr	r1, [pc, #88]	@ (801546c <mg_dns_send+0x1bc>)
 8015412:	4618      	mov	r0, r3
 8015414:	f011 fd58 	bl	8026ec8 <memcpy>
  n += 5;
 8015418:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801541c:	3305      	adds	r3, #5
 801541e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8015422:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015426:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 801542a:	781b      	ldrb	r3, [r3, #0]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d009      	beq.n	8015444 <mg_dns_send+0x194>
 8015430:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015434:	3b03      	subs	r3, #3
 8015436:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801543a:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801543e:	4413      	add	r3, r2
 8015440:	221c      	movs	r2, #28
 8015442:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8015444:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015448:	f103 020c 	add.w	r2, r3, #12
 801544c:	f107 0114 	add.w	r1, r7, #20
 8015450:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015454:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015458:	6818      	ldr	r0, [r3, #0]
 801545a:	f00b fc1d 	bl	8020c98 <mg_send>
 801545e:	4603      	mov	r3, r0
}
 8015460:	4618      	mov	r0, r3
 8015462:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8015466:	46bd      	mov	sp, r7
 8015468:	bd90      	pop	{r4, r7, pc}
 801546a:	bf00      	nop
 801546c:	080311a8 	.word	0x080311a8

08015470 <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8015470:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015474:	b088      	sub	sp, #32
 8015476:	af02      	add	r7, sp, #8
 8015478:	60f8      	str	r0, [r7, #12]
 801547a:	60b9      	str	r1, [r7, #8]
 801547c:	607a      	str	r2, [r7, #4]
 801547e:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8015480:	2300      	movs	r3, #0
 8015482:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d104      	bne.n	8015496 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 801548c:	494d      	ldr	r1, [pc, #308]	@ (80155c4 <mg_sendnsreq+0x154>)
 801548e:	68f8      	ldr	r0, [r7, #12]
 8015490:	f000 f90e 	bl	80156b0 <mg_error>
 8015494:	e017      	b.n	80154c6 <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	685b      	ldr	r3, [r3, #4]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d113      	bne.n	80154c6 <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	6858      	ldr	r0, [r3, #4]
 80154a2:	683b      	ldr	r3, [r7, #0]
 80154a4:	6819      	ldr	r1, [r3, #0]
 80154a6:	2300      	movs	r3, #0
 80154a8:	2200      	movs	r2, #0
 80154aa:	f008 f931 	bl	801d710 <mg_connect>
 80154ae:	4602      	mov	r2, r0
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d004      	beq.n	80154c6 <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 80154bc:	683b      	ldr	r3, [r7, #0]
 80154be:	685b      	ldr	r3, [r3, #4]
 80154c0:	4a41      	ldr	r2, [pc, #260]	@ (80155c8 <mg_sendnsreq+0x158>)
 80154c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 80154c6:	683b      	ldr	r3, [r7, #0]
 80154c8:	685b      	ldr	r3, [r3, #4]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d104      	bne.n	80154d8 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 80154ce:	493f      	ldr	r1, [pc, #252]	@ (80155cc <mg_sendnsreq+0x15c>)
 80154d0:	68f8      	ldr	r0, [r7, #12]
 80154d2:	f000 f8ed 	bl	80156b0 <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 80154d6:	e06f      	b.n	80155b8 <mg_sendnsreq+0x148>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 80154d8:	2118      	movs	r1, #24
 80154da:	2001      	movs	r0, #1
 80154dc:	f7ff fae8 	bl	8014ab0 <mg_calloc>
 80154e0:	6178      	str	r0, [r7, #20]
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d104      	bne.n	80154f2 <mg_sendnsreq+0x82>
    mg_error(c, "resolve OOM");
 80154e8:	4939      	ldr	r1, [pc, #228]	@ (80155d0 <mg_sendnsreq+0x160>)
 80154ea:	68f8      	ldr	r0, [r7, #12]
 80154ec:	f000 f8e0 	bl	80156b0 <mg_error>
}
 80154f0:	e062      	b.n	80155b8 <mg_sendnsreq+0x148>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80154f8:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 80154fa:	693b      	ldr	r3, [r7, #16]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d004      	beq.n	801550a <mg_sendnsreq+0x9a>
 8015500:	693b      	ldr	r3, [r7, #16]
 8015502:	8a1b      	ldrh	r3, [r3, #16]
 8015504:	3301      	adds	r3, #1
 8015506:	b29a      	uxth	r2, r3
 8015508:	e000      	b.n	801550c <mg_sendnsreq+0x9c>
 801550a:	2201      	movs	r2, #1
 801550c:	697b      	ldr	r3, [r7, #20]
 801550e:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	685b      	ldr	r3, [r3, #4]
 8015514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	685b      	ldr	r3, [r3, #4]
 801551e:	697a      	ldr	r2, [r7, #20]
 8015520:	631a      	str	r2, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8015522:	f00d f9c3 	bl	80228ac <mg_millis>
 8015526:	4602      	mov	r2, r0
 8015528:	460b      	mov	r3, r1
 801552a:	6879      	ldr	r1, [r7, #4]
 801552c:	17c8      	asrs	r0, r1, #31
 801552e:	460c      	mov	r4, r1
 8015530:	4605      	mov	r5, r0
 8015532:	eb12 0804 	adds.w	r8, r2, r4
 8015536:	eb43 0905 	adc.w	r9, r3, r5
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	68fa      	ldr	r2, [r7, #12]
 8015544:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8015546:	68fa      	ldr	r2, [r7, #12]
 8015548:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801554c:	f043 0308 	orr.w	r3, r3, #8
 8015550:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8015554:	4b1f      	ldr	r3, [pc, #124]	@ (80155d4 <mg_sendnsreq+0x164>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	2b03      	cmp	r3, #3
 801555a:	dd18      	ble.n	801558e <mg_sendnsreq+0x11e>
 801555c:	4b1e      	ldr	r3, [pc, #120]	@ (80155d8 <mg_sendnsreq+0x168>)
 801555e:	f240 521e 	movw	r2, #1310	@ 0x51e
 8015562:	491e      	ldr	r1, [pc, #120]	@ (80155dc <mg_sendnsreq+0x16c>)
 8015564:	2004      	movs	r0, #4
 8015566:	f005 fc69 	bl	801ae3c <mg_log_prefix>
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801556e:	68bb      	ldr	r3, [r7, #8]
 8015570:	685b      	ldr	r3, [r3, #4]
 8015572:	461c      	mov	r4, r3
 8015574:	68bb      	ldr	r3, [r7, #8]
 8015576:	6818      	ldr	r0, [r3, #0]
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	697a      	ldr	r2, [r7, #20]
 801557e:	8a12      	ldrh	r2, [r2, #16]
 8015580:	9201      	str	r2, [sp, #4]
 8015582:	9300      	str	r3, [sp, #0]
 8015584:	4603      	mov	r3, r0
 8015586:	4622      	mov	r2, r4
 8015588:	4815      	ldr	r0, [pc, #84]	@ (80155e0 <mg_sendnsreq+0x170>)
 801558a:	f005 fca7 	bl	801aedc <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 801558e:	683b      	ldr	r3, [r7, #0]
 8015590:	6858      	ldr	r0, [r3, #4]
 8015592:	697b      	ldr	r3, [r7, #20]
 8015594:	8a1a      	ldrh	r2, [r3, #16]
 8015596:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801559a:	68b9      	ldr	r1, [r7, #8]
 801559c:	f7ff fe88 	bl	80152b0 <mg_dns_send>
 80155a0:	4603      	mov	r3, r0
 80155a2:	f083 0301 	eor.w	r3, r3, #1
 80155a6:	b2db      	uxtb	r3, r3
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d005      	beq.n	80155b8 <mg_sendnsreq+0x148>
      mg_error(dnsc->c, "DNS send");
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	685b      	ldr	r3, [r3, #4]
 80155b0:	490c      	ldr	r1, [pc, #48]	@ (80155e4 <mg_sendnsreq+0x174>)
 80155b2:	4618      	mov	r0, r3
 80155b4:	f000 f87c 	bl	80156b0 <mg_error>
}
 80155b8:	bf00      	nop
 80155ba:	3718      	adds	r7, #24
 80155bc:	46bd      	mov	sp, r7
 80155be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80155c2:	bf00      	nop
 80155c4:	080311b0 	.word	0x080311b0
 80155c8:	08014fb5 	.word	0x08014fb5
 80155cc:	080311dc 	.word	0x080311dc
 80155d0:	080311e8 	.word	0x080311e8
 80155d4:	20000298 	.word	0x20000298
 80155d8:	08033e14 	.word	0x08033e14
 80155dc:	080310c8 	.word	0x080310c8
 80155e0:	080311f4 	.word	0x080311f4
 80155e4:	08031218 	.word	0x08031218

080155e8 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b088      	sub	sp, #32
 80155ec:	af02      	add	r7, sp, #8
 80155ee:	6078      	str	r0, [r7, #4]
 80155f0:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 80155f2:	f107 030c 	add.w	r3, r7, #12
 80155f6:	6839      	ldr	r1, [r7, #0]
 80155f8:	4618      	mov	r0, r3
 80155fa:	f00c ff96 	bl	802252a <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 80155fe:	6838      	ldr	r0, [r7, #0]
 8015600:	f00c ffc6 	bl	8022590 <mg_url_port>
 8015604:	4603      	mov	r3, r0
 8015606:	4618      	mov	r0, r3
 8015608:	f00d f8bf 	bl	802278a <mg_ntohs>
 801560c:	4603      	mov	r3, r0
 801560e:	461a      	mov	r2, r3
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	331c      	adds	r3, #28
 8015618:	461a      	mov	r2, r3
 801561a:	f107 030c 	add.w	r3, r7, #12
 801561e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015622:	f007 ffa6 	bl	801d572 <mg_aton>
 8015626:	4603      	mov	r3, r0
 8015628:	2b00      	cmp	r3, #0
 801562a:	d003      	beq.n	8015634 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f00b f85d 	bl	80206ec <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 8015632:	e019      	b.n	8015668 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	685b      	ldr	r3, [r3, #4]
 8015638:	7e1b      	ldrb	r3, [r3, #24]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d003      	beq.n	8015646 <mg_resolve+0x5e>
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	685b      	ldr	r3, [r3, #4]
 8015642:	330c      	adds	r3, #12
 8015644:	e002      	b.n	801564c <mg_resolve+0x64>
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	685b      	ldr	r3, [r3, #4]
 801564a:	3304      	adds	r3, #4
 801564c:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	685b      	ldr	r3, [r3, #4]
 8015652:	695a      	ldr	r2, [r3, #20]
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	685b      	ldr	r3, [r3, #4]
 8015658:	7e1b      	ldrb	r3, [r3, #24]
 801565a:	f107 010c 	add.w	r1, r7, #12
 801565e:	9300      	str	r3, [sp, #0]
 8015660:	697b      	ldr	r3, [r7, #20]
 8015662:	6878      	ldr	r0, [r7, #4]
 8015664:	f7ff ff04 	bl	8015470 <mg_sendnsreq>
}
 8015668:	bf00      	nop
 801566a:	3718      	adds	r7, #24
 801566c:	46bd      	mov	sp, r7
 801566e:	bd80      	pop	{r7, pc}

08015670 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8015670:	b580      	push	{r7, lr}
 8015672:	b084      	sub	sp, #16
 8015674:	af00      	add	r7, sp, #0
 8015676:	60f8      	str	r0, [r7, #12]
 8015678:	60b9      	str	r1, [r7, #8]
 801567a:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015682:	2b00      	cmp	r3, #0
 8015684:	d006      	beq.n	8015694 <mg_call+0x24>
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801568c:	687a      	ldr	r2, [r7, #4]
 801568e:	68b9      	ldr	r1, [r7, #8]
 8015690:	68f8      	ldr	r0, [r7, #12]
 8015692:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015698:	2b00      	cmp	r3, #0
 801569a:	d005      	beq.n	80156a8 <mg_call+0x38>
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80156a0:	687a      	ldr	r2, [r7, #4]
 80156a2:	68b9      	ldr	r1, [r7, #8]
 80156a4:	68f8      	ldr	r0, [r7, #12]
 80156a6:	4798      	blx	r3
}
 80156a8:	bf00      	nop
 80156aa:	3710      	adds	r7, #16
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}

080156b0 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80156b0:	b40e      	push	{r1, r2, r3}
 80156b2:	b580      	push	{r7, lr}
 80156b4:	b095      	sub	sp, #84	@ 0x54
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 80156ba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80156be:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80156c0:	f107 030c 	add.w	r3, r7, #12
 80156c4:	f107 0010 	add.w	r0, r7, #16
 80156c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80156ca:	2140      	movs	r1, #64	@ 0x40
 80156cc:	f00b fbaa 	bl	8020e24 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 80156d0:	4b14      	ldr	r3, [pc, #80]	@ (8015724 <mg_error+0x74>)
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	dd0f      	ble.n	80156f8 <mg_error+0x48>
 80156d8:	4b13      	ldr	r3, [pc, #76]	@ (8015728 <mg_error+0x78>)
 80156da:	f240 5253 	movw	r2, #1363	@ 0x553
 80156de:	4913      	ldr	r1, [pc, #76]	@ (801572c <mg_error+0x7c>)
 80156e0:	2001      	movs	r0, #1
 80156e2:	f005 fbab 	bl	801ae3c <mg_log_prefix>
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80156ee:	f107 0310 	add.w	r3, r7, #16
 80156f2:	480f      	ldr	r0, [pc, #60]	@ (8015730 <mg_error+0x80>)
 80156f4:	f005 fbf2 	bl	801aedc <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 80156f8:	687a      	ldr	r2, [r7, #4]
 80156fa:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80156fe:	f043 0320 	orr.w	r3, r3, #32
 8015702:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8015706:	f107 0310 	add.w	r3, r7, #16
 801570a:	461a      	mov	r2, r3
 801570c:	2100      	movs	r1, #0
 801570e:	6878      	ldr	r0, [r7, #4]
 8015710:	f7ff ffae 	bl	8015670 <mg_call>
}
 8015714:	bf00      	nop
 8015716:	3754      	adds	r7, #84	@ 0x54
 8015718:	46bd      	mov	sp, r7
 801571a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801571e:	b003      	add	sp, #12
 8015720:	4770      	bx	lr
 8015722:	bf00      	nop
 8015724:	20000298 	.word	0x20000298
 8015728:	08033e24 	.word	0x08033e24
 801572c:	080310c8 	.word	0x080310c8
 8015730:	08031224 	.word	0x08031224

08015734 <is_digit>:
#endif




static bool is_digit(int c) {
 8015734:	b480      	push	{r7}
 8015736:	b083      	sub	sp, #12
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	2b2f      	cmp	r3, #47	@ 0x2f
 8015740:	dd04      	ble.n	801574c <is_digit+0x18>
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2b39      	cmp	r3, #57	@ 0x39
 8015746:	dc01      	bgt.n	801574c <is_digit+0x18>
 8015748:	2301      	movs	r3, #1
 801574a:	e000      	b.n	801574e <is_digit+0x1a>
 801574c:	2300      	movs	r3, #0
 801574e:	f003 0301 	and.w	r3, r3, #1
 8015752:	b2db      	uxtb	r3, r3
}
 8015754:	4618      	mov	r0, r3
 8015756:	370c      	adds	r7, #12
 8015758:	46bd      	mov	sp, r7
 801575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575e:	4770      	bx	lr

08015760 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8015760:	b480      	push	{r7}
 8015762:	b087      	sub	sp, #28
 8015764:	af00      	add	r7, sp, #0
 8015766:	60f8      	str	r0, [r7, #12]
 8015768:	60b9      	str	r1, [r7, #8]
 801576a:	607a      	str	r2, [r7, #4]
  int n = 0;
 801576c:	2300      	movs	r3, #0
 801576e:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8015770:	697b      	ldr	r3, [r7, #20]
 8015772:	1c5a      	adds	r2, r3, #1
 8015774:	617a      	str	r2, [r7, #20]
 8015776:	461a      	mov	r2, r3
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	4413      	add	r3, r2
 801577c:	2265      	movs	r2, #101	@ 0x65
 801577e:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8015780:	697b      	ldr	r3, [r7, #20]
 8015782:	1c5a      	adds	r2, r3, #1
 8015784:	617a      	str	r2, [r7, #20]
 8015786:	461a      	mov	r2, r3
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	4413      	add	r3, r2
 801578c:	687a      	ldr	r2, [r7, #4]
 801578e:	b2d2      	uxtb	r2, r2
 8015790:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8015798:	dd01      	ble.n	801579e <addexp+0x3e>
 801579a:	2300      	movs	r3, #0
 801579c:	e057      	b.n	801584e <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 801579e:	68bb      	ldr	r3, [r7, #8]
 80157a0:	2b09      	cmp	r3, #9
 80157a2:	dc07      	bgt.n	80157b4 <addexp+0x54>
 80157a4:	697b      	ldr	r3, [r7, #20]
 80157a6:	1c5a      	adds	r2, r3, #1
 80157a8:	617a      	str	r2, [r7, #20]
 80157aa:	461a      	mov	r2, r3
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	4413      	add	r3, r2
 80157b0:	2230      	movs	r2, #48	@ 0x30
 80157b2:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 80157b4:	68bb      	ldr	r3, [r7, #8]
 80157b6:	2b63      	cmp	r3, #99	@ 0x63
 80157b8:	dd1c      	ble.n	80157f4 <addexp+0x94>
 80157ba:	68bb      	ldr	r3, [r7, #8]
 80157bc:	4a27      	ldr	r2, [pc, #156]	@ (801585c <addexp+0xfc>)
 80157be:	fb82 1203 	smull	r1, r2, r2, r3
 80157c2:	1152      	asrs	r2, r2, #5
 80157c4:	17db      	asrs	r3, r3, #31
 80157c6:	1ad3      	subs	r3, r2, r3
 80157c8:	b2da      	uxtb	r2, r3
 80157ca:	697b      	ldr	r3, [r7, #20]
 80157cc:	1c59      	adds	r1, r3, #1
 80157ce:	6179      	str	r1, [r7, #20]
 80157d0:	4619      	mov	r1, r3
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	440b      	add	r3, r1
 80157d6:	3230      	adds	r2, #48	@ 0x30
 80157d8:	b2d2      	uxtb	r2, r2
 80157da:	701a      	strb	r2, [r3, #0]
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	4a1f      	ldr	r2, [pc, #124]	@ (801585c <addexp+0xfc>)
 80157e0:	fb82 1203 	smull	r1, r2, r2, r3
 80157e4:	1151      	asrs	r1, r2, #5
 80157e6:	17da      	asrs	r2, r3, #31
 80157e8:	1a8a      	subs	r2, r1, r2
 80157ea:	2164      	movs	r1, #100	@ 0x64
 80157ec:	fb01 f202 	mul.w	r2, r1, r2
 80157f0:	1a9b      	subs	r3, r3, r2
 80157f2:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	2b09      	cmp	r3, #9
 80157f8:	dd1d      	ble.n	8015836 <addexp+0xd6>
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	4a18      	ldr	r2, [pc, #96]	@ (8015860 <addexp+0x100>)
 80157fe:	fb82 1203 	smull	r1, r2, r2, r3
 8015802:	1092      	asrs	r2, r2, #2
 8015804:	17db      	asrs	r3, r3, #31
 8015806:	1ad3      	subs	r3, r2, r3
 8015808:	b2da      	uxtb	r2, r3
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	1c59      	adds	r1, r3, #1
 801580e:	6179      	str	r1, [r7, #20]
 8015810:	4619      	mov	r1, r3
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	440b      	add	r3, r1
 8015816:	3230      	adds	r2, #48	@ 0x30
 8015818:	b2d2      	uxtb	r2, r2
 801581a:	701a      	strb	r2, [r3, #0]
 801581c:	68ba      	ldr	r2, [r7, #8]
 801581e:	4b10      	ldr	r3, [pc, #64]	@ (8015860 <addexp+0x100>)
 8015820:	fb83 1302 	smull	r1, r3, r3, r2
 8015824:	1099      	asrs	r1, r3, #2
 8015826:	17d3      	asrs	r3, r2, #31
 8015828:	1ac9      	subs	r1, r1, r3
 801582a:	460b      	mov	r3, r1
 801582c:	009b      	lsls	r3, r3, #2
 801582e:	440b      	add	r3, r1
 8015830:	005b      	lsls	r3, r3, #1
 8015832:	1ad3      	subs	r3, r2, r3
 8015834:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8015836:	68bb      	ldr	r3, [r7, #8]
 8015838:	b2da      	uxtb	r2, r3
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	1c59      	adds	r1, r3, #1
 801583e:	6179      	str	r1, [r7, #20]
 8015840:	4619      	mov	r1, r3
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	440b      	add	r3, r1
 8015846:	3230      	adds	r2, #48	@ 0x30
 8015848:	b2d2      	uxtb	r2, r2
 801584a:	701a      	strb	r2, [r3, #0]
  return n;
 801584c:	697b      	ldr	r3, [r7, #20]
}
 801584e:	4618      	mov	r0, r3
 8015850:	371c      	adds	r7, #28
 8015852:	46bd      	mov	sp, r7
 8015854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015858:	4770      	bx	lr
 801585a:	bf00      	nop
 801585c:	51eb851f 	.word	0x51eb851f
 8015860:	66666667 	.word	0x66666667

08015864 <xisinf>:

static int xisinf(double x) {
 8015864:	b480      	push	{r7}
 8015866:	b085      	sub	sp, #20
 8015868:	af00      	add	r7, sp, #0
 801586a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 801586e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015872:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8015876:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801587a:	f04f 0200 	mov.w	r2, #0
 801587e:	f04f 0300 	mov.w	r3, #0
 8015882:	000a      	movs	r2, r1
 8015884:	2300      	movs	r3, #0
 8015886:	4613      	mov	r3, r2
 8015888:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801588c:	4a08      	ldr	r2, [pc, #32]	@ (80158b0 <xisinf+0x4c>)
 801588e:	4293      	cmp	r3, r2
 8015890:	d106      	bne.n	80158a0 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8015892:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015896:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8015898:	2b00      	cmp	r3, #0
 801589a:	d101      	bne.n	80158a0 <xisinf+0x3c>
 801589c:	2301      	movs	r3, #1
 801589e:	e000      	b.n	80158a2 <xisinf+0x3e>
 80158a0:	2300      	movs	r3, #0
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	3714      	adds	r7, #20
 80158a6:	46bd      	mov	sp, r7
 80158a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ac:	4770      	bx	lr
 80158ae:	bf00      	nop
 80158b0:	7ff00000 	.word	0x7ff00000

080158b4 <xisnan>:

static int xisnan(double x) {
 80158b4:	b480      	push	{r7}
 80158b6:	b085      	sub	sp, #20
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 80158be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80158c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80158c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80158ca:	f04f 0200 	mov.w	r2, #0
 80158ce:	f04f 0300 	mov.w	r3, #0
 80158d2:	000a      	movs	r2, r1
 80158d4:	2300      	movs	r3, #0
 80158d6:	4613      	mov	r3, r2
 80158d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 80158dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80158e0:	4613      	mov	r3, r2
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	bf14      	ite	ne
 80158e6:	2301      	movne	r3, #1
 80158e8:	2300      	moveq	r3, #0
 80158ea:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80158ec:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 80158ee:	4a06      	ldr	r2, [pc, #24]	@ (8015908 <xisnan+0x54>)
 80158f0:	4293      	cmp	r3, r2
 80158f2:	bf8c      	ite	hi
 80158f4:	2301      	movhi	r3, #1
 80158f6:	2300      	movls	r3, #0
 80158f8:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3714      	adds	r7, #20
 80158fe:	46bd      	mov	sp, r7
 8015900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015904:	4770      	bx	lr
 8015906:	bf00      	nop
 8015908:	7ff00000 	.word	0x7ff00000
 801590c:	00000000 	.word	0x00000000

08015910 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8015910:	b5b0      	push	{r4, r5, r7, lr}
 8015912:	b09e      	sub	sp, #120	@ 0x78
 8015914:	af02      	add	r7, sp, #8
 8015916:	6178      	str	r0, [r7, #20]
 8015918:	6139      	str	r1, [r7, #16]
 801591a:	ed87 0b02 	vstr	d0, [r7, #8]
 801591e:	607a      	str	r2, [r7, #4]
 8015920:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8015922:	2300      	movs	r3, #0
 8015924:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015926:	2300      	movs	r3, #0
 8015928:	667b      	str	r3, [r7, #100]	@ 0x64
 801592a:	2300      	movs	r3, #0
 801592c:	663b      	str	r3, [r7, #96]	@ 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 801592e:	f04f 0200 	mov.w	r2, #0
 8015932:	f04f 0300 	mov.w	r3, #0
 8015936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801593a:	f7eb f8dd 	bl	8000af8 <__aeabi_dcmpeq>
 801593e:	4603      	mov	r3, r0
 8015940:	2b00      	cmp	r3, #0
 8015942:	d007      	beq.n	8015954 <mg_dtoa+0x44>
 8015944:	4b7f      	ldr	r3, [pc, #508]	@ (8015b44 <mg_dtoa+0x234>)
 8015946:	4a80      	ldr	r2, [pc, #512]	@ (8015b48 <mg_dtoa+0x238>)
 8015948:	6939      	ldr	r1, [r7, #16]
 801594a:	6978      	ldr	r0, [r7, #20]
 801594c:	f00b fa92 	bl	8020e74 <mg_snprintf>
 8015950:	4603      	mov	r3, r0
 8015952:	e2c9      	b.n	8015ee8 <mg_dtoa+0x5d8>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8015954:	ed97 0b02 	vldr	d0, [r7, #8]
 8015958:	f7ff ff84 	bl	8015864 <xisinf>
 801595c:	4603      	mov	r3, r0
 801595e:	2b00      	cmp	r3, #0
 8015960:	d014      	beq.n	801598c <mg_dtoa+0x7c>
 8015962:	f04f 0200 	mov.w	r2, #0
 8015966:	f04f 0300 	mov.w	r3, #0
 801596a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801596e:	f7eb f8eb 	bl	8000b48 <__aeabi_dcmpgt>
 8015972:	4603      	mov	r3, r0
 8015974:	2b00      	cmp	r3, #0
 8015976:	d001      	beq.n	801597c <mg_dtoa+0x6c>
 8015978:	4b74      	ldr	r3, [pc, #464]	@ (8015b4c <mg_dtoa+0x23c>)
 801597a:	e000      	b.n	801597e <mg_dtoa+0x6e>
 801597c:	4b74      	ldr	r3, [pc, #464]	@ (8015b50 <mg_dtoa+0x240>)
 801597e:	4a72      	ldr	r2, [pc, #456]	@ (8015b48 <mg_dtoa+0x238>)
 8015980:	6939      	ldr	r1, [r7, #16]
 8015982:	6978      	ldr	r0, [r7, #20]
 8015984:	f00b fa76 	bl	8020e74 <mg_snprintf>
 8015988:	4603      	mov	r3, r0
 801598a:	e2ad      	b.n	8015ee8 <mg_dtoa+0x5d8>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 801598c:	ed97 0b02 	vldr	d0, [r7, #8]
 8015990:	f7ff ff90 	bl	80158b4 <xisnan>
 8015994:	4603      	mov	r3, r0
 8015996:	2b00      	cmp	r3, #0
 8015998:	d007      	beq.n	80159aa <mg_dtoa+0x9a>
 801599a:	4b6e      	ldr	r3, [pc, #440]	@ (8015b54 <mg_dtoa+0x244>)
 801599c:	4a6a      	ldr	r2, [pc, #424]	@ (8015b48 <mg_dtoa+0x238>)
 801599e:	6939      	ldr	r1, [r7, #16]
 80159a0:	6978      	ldr	r0, [r7, #20]
 80159a2:	f00b fa67 	bl	8020e74 <mg_snprintf>
 80159a6:	4603      	mov	r3, r0
 80159a8:	e29e      	b.n	8015ee8 <mg_dtoa+0x5d8>
  if (d < 0.0) d = -d, buf[s++] = '-';
 80159aa:	f04f 0200 	mov.w	r2, #0
 80159ae:	f04f 0300 	mov.w	r3, #0
 80159b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80159b6:	f7eb f8a9 	bl	8000b0c <__aeabi_dcmplt>
 80159ba:	4603      	mov	r3, r0
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d00d      	beq.n	80159dc <mg_dtoa+0xcc>
 80159c0:	68bc      	ldr	r4, [r7, #8]
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80159c8:	e9c7 4502 	strd	r4, r5, [r7, #8]
 80159cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80159ce:	1c5a      	adds	r2, r3, #1
 80159d0:	66ba      	str	r2, [r7, #104]	@ 0x68
 80159d2:	3370      	adds	r3, #112	@ 0x70
 80159d4:	443b      	add	r3, r7
 80159d6:	222d      	movs	r2, #45	@ 0x2d
 80159d8:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 80159dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80159e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  mul = 1.0;
 80159e4:	f04f 0200 	mov.w	r2, #0
 80159e8:	4b5b      	ldr	r3, [pc, #364]	@ (8015b58 <mg_dtoa+0x248>)
 80159ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 80159ee:	e00a      	b.n	8015a06 <mg_dtoa+0xf6>
 80159f0:	f04f 0200 	mov.w	r2, #0
 80159f4:	4b59      	ldr	r3, [pc, #356]	@ (8015b5c <mg_dtoa+0x24c>)
 80159f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80159fa:	f7ea fe15 	bl	8000628 <__aeabi_dmul>
 80159fe:	4602      	mov	r2, r0
 8015a00:	460b      	mov	r3, r1
 8015a02:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8015a06:	f04f 0200 	mov.w	r2, #0
 8015a0a:	4b54      	ldr	r3, [pc, #336]	@ (8015b5c <mg_dtoa+0x24c>)
 8015a0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015a10:	f7eb f890 	bl	8000b34 <__aeabi_dcmpge>
 8015a14:	4603      	mov	r3, r0
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d011      	beq.n	8015a3e <mg_dtoa+0x12e>
 8015a1a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015a1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015a22:	f7ea ff2b 	bl	800087c <__aeabi_ddiv>
 8015a26:	4602      	mov	r2, r0
 8015a28:	460b      	mov	r3, r1
 8015a2a:	4610      	mov	r0, r2
 8015a2c:	4619      	mov	r1, r3
 8015a2e:	f04f 0200 	mov.w	r2, #0
 8015a32:	4b4a      	ldr	r3, [pc, #296]	@ (8015b5c <mg_dtoa+0x24c>)
 8015a34:	f7eb f87e 	bl	8000b34 <__aeabi_dcmpge>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d1d8      	bne.n	80159f0 <mg_dtoa+0xe0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8015a3e:	e00a      	b.n	8015a56 <mg_dtoa+0x146>
 8015a40:	f04f 0200 	mov.w	r2, #0
 8015a44:	4b45      	ldr	r3, [pc, #276]	@ (8015b5c <mg_dtoa+0x24c>)
 8015a46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015a4a:	f7ea ff17 	bl	800087c <__aeabi_ddiv>
 8015a4e:	4602      	mov	r2, r0
 8015a50:	460b      	mov	r3, r1
 8015a52:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8015a56:	f04f 0200 	mov.w	r2, #0
 8015a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8015b58 <mg_dtoa+0x248>)
 8015a5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015a60:	f7eb f85e 	bl	8000b20 <__aeabi_dcmple>
 8015a64:	4603      	mov	r3, r0
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d011      	beq.n	8015a8e <mg_dtoa+0x17e>
 8015a6a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015a6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015a72:	f7ea ff03 	bl	800087c <__aeabi_ddiv>
 8015a76:	4602      	mov	r2, r0
 8015a78:	460b      	mov	r3, r1
 8015a7a:	4610      	mov	r0, r2
 8015a7c:	4619      	mov	r1, r3
 8015a7e:	f04f 0200 	mov.w	r2, #0
 8015a82:	4b35      	ldr	r3, [pc, #212]	@ (8015b58 <mg_dtoa+0x248>)
 8015a84:	f7eb f84c 	bl	8000b20 <__aeabi_dcmple>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d1d8      	bne.n	8015a40 <mg_dtoa+0x130>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015a92:	f04f 0200 	mov.w	r2, #0
 8015a96:	4b32      	ldr	r3, [pc, #200]	@ (8015b60 <mg_dtoa+0x250>)
 8015a98:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015a9c:	f7ea fdc4 	bl	8000628 <__aeabi_dmul>
 8015aa0:	4602      	mov	r2, r0
 8015aa2:	460b      	mov	r3, r1
 8015aa4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8015aa8:	e00d      	b.n	8015ac6 <mg_dtoa+0x1b6>
 8015aaa:	f04f 0200 	mov.w	r2, #0
 8015aae:	4b2b      	ldr	r3, [pc, #172]	@ (8015b5c <mg_dtoa+0x24c>)
 8015ab0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015ab4:	f7ea fee2 	bl	800087c <__aeabi_ddiv>
 8015ab8:	4602      	mov	r2, r0
 8015aba:	460b      	mov	r3, r1
 8015abc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8015ac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015ac2:	3301      	adds	r3, #1
 8015ac4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015ac6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	429a      	cmp	r2, r3
 8015acc:	dbed      	blt.n	8015aaa <mg_dtoa+0x19a>
  d += t;
 8015ace:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015ad2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015ad6:	f7ea fbf1 	bl	80002bc <__adddf3>
 8015ada:	4602      	mov	r2, r0
 8015adc:	460b      	mov	r3, r1
 8015ade:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8015ae2:	f04f 0200 	mov.w	r2, #0
 8015ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8015b58 <mg_dtoa+0x248>)
 8015ae8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8015aec:	e00d      	b.n	8015b0a <mg_dtoa+0x1fa>
 8015aee:	f04f 0200 	mov.w	r2, #0
 8015af2:	4b1a      	ldr	r3, [pc, #104]	@ (8015b5c <mg_dtoa+0x24c>)
 8015af4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015af8:	f7ea fd96 	bl	8000628 <__aeabi_dmul>
 8015afc:	4602      	mov	r2, r0
 8015afe:	460b      	mov	r3, r1
 8015b00:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8015b04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015b06:	3301      	adds	r3, #1
 8015b08:	663b      	str	r3, [r7, #96]	@ 0x60
 8015b0a:	f04f 0200 	mov.w	r2, #0
 8015b0e:	4b13      	ldr	r3, [pc, #76]	@ (8015b5c <mg_dtoa+0x24c>)
 8015b10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015b14:	f7eb f80e 	bl	8000b34 <__aeabi_dcmpge>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d011      	beq.n	8015b42 <mg_dtoa+0x232>
 8015b1e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015b22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015b26:	f7ea fea9 	bl	800087c <__aeabi_ddiv>
 8015b2a:	4602      	mov	r2, r0
 8015b2c:	460b      	mov	r3, r1
 8015b2e:	4610      	mov	r0, r2
 8015b30:	4619      	mov	r1, r3
 8015b32:	f04f 0200 	mov.w	r2, #0
 8015b36:	4b09      	ldr	r3, [pc, #36]	@ (8015b5c <mg_dtoa+0x24c>)
 8015b38:	f7ea fffc 	bl	8000b34 <__aeabi_dcmpge>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d1d5      	bne.n	8015aee <mg_dtoa+0x1de>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8015b42:	e01d      	b.n	8015b80 <mg_dtoa+0x270>
 8015b44:	08031230 	.word	0x08031230
 8015b48:	08031234 	.word	0x08031234
 8015b4c:	08031238 	.word	0x08031238
 8015b50:	0803123c 	.word	0x0803123c
 8015b54:	08031244 	.word	0x08031244
 8015b58:	3ff00000 	.word	0x3ff00000
 8015b5c:	40240000 	.word	0x40240000
 8015b60:	40140000 	.word	0x40140000
 8015b64:	f04f 0200 	mov.w	r2, #0
 8015b68:	4b9d      	ldr	r3, [pc, #628]	@ (8015de0 <mg_dtoa+0x4d0>)
 8015b6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015b6e:	f7ea fe85 	bl	800087c <__aeabi_ddiv>
 8015b72:	4602      	mov	r2, r0
 8015b74:	460b      	mov	r3, r1
 8015b76:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8015b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015b7c:	3b01      	subs	r3, #1
 8015b7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8015b80:	f04f 0200 	mov.w	r2, #0
 8015b84:	4b97      	ldr	r3, [pc, #604]	@ (8015de4 <mg_dtoa+0x4d4>)
 8015b86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015b8a:	f7ea ffbf 	bl	8000b0c <__aeabi_dcmplt>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d011      	beq.n	8015bb8 <mg_dtoa+0x2a8>
 8015b94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015b98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015b9c:	f7ea fe6e 	bl	800087c <__aeabi_ddiv>
 8015ba0:	4602      	mov	r2, r0
 8015ba2:	460b      	mov	r3, r1
 8015ba4:	4610      	mov	r0, r2
 8015ba6:	4619      	mov	r1, r3
 8015ba8:	f04f 0200 	mov.w	r2, #0
 8015bac:	4b8d      	ldr	r3, [pc, #564]	@ (8015de4 <mg_dtoa+0x4d4>)
 8015bae:	f7ea ffad 	bl	8000b0c <__aeabi_dcmplt>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d1d5      	bne.n	8015b64 <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8015bb8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	429a      	cmp	r2, r3
 8015bbe:	db33      	blt.n	8015c28 <mg_dtoa+0x318>
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	2b01      	cmp	r3, #1
 8015bc4:	dd30      	ble.n	8015c28 <mg_dtoa+0x318>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8015bc6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015bca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8015bce:	f7ea fe55 	bl	800087c <__aeabi_ddiv>
 8015bd2:	4602      	mov	r2, r0
 8015bd4:	460b      	mov	r3, r1
 8015bd6:	ec43 2b17 	vmov	d7, r2, r3
 8015bda:	78fb      	ldrb	r3, [r7, #3]
 8015bdc:	f107 0018 	add.w	r0, r7, #24
 8015be0:	687a      	ldr	r2, [r7, #4]
 8015be2:	eeb0 0a47 	vmov.f32	s0, s14
 8015be6:	eef0 0a67 	vmov.f32	s1, s15
 8015bea:	2128      	movs	r1, #40	@ 0x28
 8015bec:	f7ff fe90 	bl	8015910 <mg_dtoa>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8015bf4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015bf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015bf8:	4413      	add	r3, r2
 8015bfa:	f107 0218 	add.w	r2, r7, #24
 8015bfe:	4413      	add	r3, r2
 8015c00:	222b      	movs	r2, #43	@ 0x2b
 8015c02:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8015c04:	4618      	mov	r0, r3
 8015c06:	f7ff fdab 	bl	8015760 <addexp>
 8015c0a:	4602      	mov	r2, r0
 8015c0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015c0e:	4413      	add	r3, r2
 8015c10:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8015c12:	f107 0318 	add.w	r3, r7, #24
 8015c16:	9300      	str	r3, [sp, #0]
 8015c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015c1a:	4a73      	ldr	r2, [pc, #460]	@ (8015de8 <mg_dtoa+0x4d8>)
 8015c1c:	6939      	ldr	r1, [r7, #16]
 8015c1e:	6978      	ldr	r0, [r7, #20]
 8015c20:	f00b f928 	bl	8020e74 <mg_snprintf>
 8015c24:	4603      	mov	r3, r0
 8015c26:	e15f      	b.n	8015ee8 <mg_dtoa+0x5d8>
  } else if (e <= -width && width > 1) {
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	425b      	negs	r3, r3
 8015c2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	dc34      	bgt.n	8015c9c <mg_dtoa+0x38c>
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	2b01      	cmp	r3, #1
 8015c36:	dd31      	ble.n	8015c9c <mg_dtoa+0x38c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8015c38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015c3c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8015c40:	f7ea fe1c 	bl	800087c <__aeabi_ddiv>
 8015c44:	4602      	mov	r2, r0
 8015c46:	460b      	mov	r3, r1
 8015c48:	ec43 2b17 	vmov	d7, r2, r3
 8015c4c:	78fb      	ldrb	r3, [r7, #3]
 8015c4e:	f107 0018 	add.w	r0, r7, #24
 8015c52:	687a      	ldr	r2, [r7, #4]
 8015c54:	eeb0 0a47 	vmov.f32	s0, s14
 8015c58:	eef0 0a67 	vmov.f32	s1, s15
 8015c5c:	2128      	movs	r1, #40	@ 0x28
 8015c5e:	f7ff fe57 	bl	8015910 <mg_dtoa>
 8015c62:	4603      	mov	r3, r0
 8015c64:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8015c66:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015c6a:	4413      	add	r3, r2
 8015c6c:	f107 0218 	add.w	r2, r7, #24
 8015c70:	18d0      	adds	r0, r2, r3
 8015c72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015c74:	425b      	negs	r3, r3
 8015c76:	222d      	movs	r2, #45	@ 0x2d
 8015c78:	4619      	mov	r1, r3
 8015c7a:	f7ff fd71 	bl	8015760 <addexp>
 8015c7e:	4602      	mov	r2, r0
 8015c80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015c82:	4413      	add	r3, r2
 8015c84:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8015c86:	f107 0318 	add.w	r3, r7, #24
 8015c8a:	9300      	str	r3, [sp, #0]
 8015c8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015c8e:	4a56      	ldr	r2, [pc, #344]	@ (8015de8 <mg_dtoa+0x4d8>)
 8015c90:	6939      	ldr	r1, [r7, #16]
 8015c92:	6978      	ldr	r0, [r7, #20]
 8015c94:	f00b f8ee 	bl	8020e74 <mg_snprintf>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	e125      	b.n	8015ee8 <mg_dtoa+0x5d8>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015ca0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015ca4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8015ca8:	e03f      	b.n	8015d2a <mg_dtoa+0x41a>
      int ch = (int) (d / t);
 8015caa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015cae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015cb2:	f7ea fde3 	bl	800087c <__aeabi_ddiv>
 8015cb6:	4602      	mov	r2, r0
 8015cb8:	460b      	mov	r3, r1
 8015cba:	4610      	mov	r0, r2
 8015cbc:	4619      	mov	r1, r3
 8015cbe:	f7ea ff63 	bl	8000b88 <__aeabi_d2iz>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8015cc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	dc02      	bgt.n	8015cd2 <mg_dtoa+0x3c2>
 8015ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	dd0c      	ble.n	8015cec <mg_dtoa+0x3dc>
 8015cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015cd4:	b2da      	uxtb	r2, r3
 8015cd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015cd8:	1c59      	adds	r1, r3, #1
 8015cda:	6679      	str	r1, [r7, #100]	@ 0x64
 8015cdc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8015cde:	440b      	add	r3, r1
 8015ce0:	3230      	adds	r2, #48	@ 0x30
 8015ce2:	b2d2      	uxtb	r2, r2
 8015ce4:	3370      	adds	r3, #112	@ 0x70
 8015ce6:	443b      	add	r3, r7
 8015ce8:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8015cec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015cee:	f7ea fc31 	bl	8000554 <__aeabi_i2d>
 8015cf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015cf6:	f7ea fc97 	bl	8000628 <__aeabi_dmul>
 8015cfa:	4602      	mov	r2, r0
 8015cfc:	460b      	mov	r3, r1
 8015cfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015d02:	f7ea fad9 	bl	80002b8 <__aeabi_dsub>
 8015d06:	4602      	mov	r2, r0
 8015d08:	460b      	mov	r3, r1
 8015d0a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8015d0e:	f04f 0200 	mov.w	r2, #0
 8015d12:	4b33      	ldr	r3, [pc, #204]	@ (8015de0 <mg_dtoa+0x4d0>)
 8015d14:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015d18:	f7ea fdb0 	bl	800087c <__aeabi_ddiv>
 8015d1c:	4602      	mov	r2, r0
 8015d1e:	460b      	mov	r3, r1
 8015d20:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8015d24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015d26:	3301      	adds	r3, #1
 8015d28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015d2a:	f04f 0200 	mov.w	r2, #0
 8015d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8015de4 <mg_dtoa+0x4d4>)
 8015d30:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015d34:	f7ea fefe 	bl	8000b34 <__aeabi_dcmpge>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d004      	beq.n	8015d48 <mg_dtoa+0x438>
 8015d3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015d40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015d42:	4413      	add	r3, r2
 8015d44:	2b27      	cmp	r3, #39	@ 0x27
 8015d46:	ddb0      	ble.n	8015caa <mg_dtoa+0x39a>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8015d48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d11b      	bne.n	8015d86 <mg_dtoa+0x476>
 8015d4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015d50:	1c5a      	adds	r2, r3, #1
 8015d52:	66ba      	str	r2, [r7, #104]	@ 0x68
 8015d54:	3370      	adds	r3, #112	@ 0x70
 8015d56:	443b      	add	r3, r7
 8015d58:	2230      	movs	r2, #48	@ 0x30
 8015d5a:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8015d5e:	e012      	b.n	8015d86 <mg_dtoa+0x476>
 8015d60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015d62:	1c5a      	adds	r2, r3, #1
 8015d64:	667a      	str	r2, [r7, #100]	@ 0x64
 8015d66:	3370      	adds	r3, #112	@ 0x70
 8015d68:	443b      	add	r3, r7
 8015d6a:	2230      	movs	r2, #48	@ 0x30
 8015d6c:	f803 2c58 	strb.w	r2, [r3, #-88]
 8015d70:	f04f 0200 	mov.w	r2, #0
 8015d74:	4b1a      	ldr	r3, [pc, #104]	@ (8015de0 <mg_dtoa+0x4d0>)
 8015d76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015d7a:	f7ea fd7f 	bl	800087c <__aeabi_ddiv>
 8015d7e:	4602      	mov	r2, r0
 8015d80:	460b      	mov	r3, r1
 8015d82:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8015d86:	f04f 0200 	mov.w	r2, #0
 8015d8a:	4b16      	ldr	r3, [pc, #88]	@ (8015de4 <mg_dtoa+0x4d4>)
 8015d8c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015d90:	f7ea fed0 	bl	8000b34 <__aeabi_dcmpge>
 8015d94:	4603      	mov	r3, r0
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d004      	beq.n	8015da4 <mg_dtoa+0x494>
 8015d9a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015d9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015d9e:	4413      	add	r3, r2
 8015da0:	2b27      	cmp	r3, #39	@ 0x27
 8015da2:	dddd      	ble.n	8015d60 <mg_dtoa+0x450>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8015da4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015da6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015da8:	4413      	add	r3, r2
 8015daa:	2b27      	cmp	r3, #39	@ 0x27
 8015dac:	dc09      	bgt.n	8015dc2 <mg_dtoa+0x4b2>
 8015dae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015db0:	1c5a      	adds	r2, r3, #1
 8015db2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8015db4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015db6:	4413      	add	r3, r2
 8015db8:	3370      	adds	r3, #112	@ 0x70
 8015dba:	443b      	add	r3, r7
 8015dbc:	222e      	movs	r2, #46	@ 0x2e
 8015dbe:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015dc6:	a304      	add	r3, pc, #16	@ (adr r3, 8015dd8 <mg_dtoa+0x4c8>)
 8015dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dcc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8015dd0:	e046      	b.n	8015e60 <mg_dtoa+0x550>
 8015dd2:	bf00      	nop
 8015dd4:	f3af 8000 	nop.w
 8015dd8:	9999999a 	.word	0x9999999a
 8015ddc:	3fb99999 	.word	0x3fb99999
 8015de0:	40240000 	.word	0x40240000
 8015de4:	3ff00000 	.word	0x3ff00000
 8015de8:	08031248 	.word	0x08031248
      int ch = (int) (d / t);
 8015dec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015df0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015df4:	f7ea fd42 	bl	800087c <__aeabi_ddiv>
 8015df8:	4602      	mov	r2, r0
 8015dfa:	460b      	mov	r3, r1
 8015dfc:	4610      	mov	r0, r2
 8015dfe:	4619      	mov	r1, r3
 8015e00:	f7ea fec2 	bl	8000b88 <__aeabi_d2iz>
 8015e04:	4603      	mov	r3, r0
 8015e06:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 8015e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015e0a:	b2da      	uxtb	r2, r3
 8015e0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015e0e:	1c59      	adds	r1, r3, #1
 8015e10:	6679      	str	r1, [r7, #100]	@ 0x64
 8015e12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8015e14:	440b      	add	r3, r1
 8015e16:	3230      	adds	r2, #48	@ 0x30
 8015e18:	b2d2      	uxtb	r2, r2
 8015e1a:	3370      	adds	r3, #112	@ 0x70
 8015e1c:	443b      	add	r3, r7
 8015e1e:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8015e22:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015e24:	f7ea fb96 	bl	8000554 <__aeabi_i2d>
 8015e28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015e2c:	f7ea fbfc 	bl	8000628 <__aeabi_dmul>
 8015e30:	4602      	mov	r2, r0
 8015e32:	460b      	mov	r3, r1
 8015e34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015e38:	f7ea fa3e 	bl	80002b8 <__aeabi_dsub>
 8015e3c:	4602      	mov	r2, r0
 8015e3e:	460b      	mov	r3, r1
 8015e40:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8015e44:	f04f 0200 	mov.w	r2, #0
 8015e48:	4b29      	ldr	r3, [pc, #164]	@ (8015ef0 <mg_dtoa+0x5e0>)
 8015e4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015e4e:	f7ea fd15 	bl	800087c <__aeabi_ddiv>
 8015e52:	4602      	mov	r2, r0
 8015e54:	460b      	mov	r3, r1
 8015e56:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8015e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015e5c:	3301      	adds	r3, #1
 8015e5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015e60:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015e62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015e64:	4413      	add	r3, r2
 8015e66:	2b27      	cmp	r3, #39	@ 0x27
 8015e68:	dc07      	bgt.n	8015e7a <mg_dtoa+0x56a>
 8015e6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	429a      	cmp	r2, r3
 8015e70:	dbbc      	blt.n	8015dec <mg_dtoa+0x4dc>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8015e72:	e002      	b.n	8015e7a <mg_dtoa+0x56a>
 8015e74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015e76:	3b01      	subs	r3, #1
 8015e78:	667b      	str	r3, [r7, #100]	@ 0x64
 8015e7a:	78fb      	ldrb	r3, [r7, #3]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d00c      	beq.n	8015e9a <mg_dtoa+0x58a>
 8015e80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	dd09      	ble.n	8015e9a <mg_dtoa+0x58a>
 8015e86:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015e88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015e8a:	4413      	add	r3, r2
 8015e8c:	3b01      	subs	r3, #1
 8015e8e:	3370      	adds	r3, #112	@ 0x70
 8015e90:	443b      	add	r3, r7
 8015e92:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8015e96:	2b30      	cmp	r3, #48	@ 0x30
 8015e98:	d0ec      	beq.n	8015e74 <mg_dtoa+0x564>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8015e9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	dd0c      	ble.n	8015eba <mg_dtoa+0x5aa>
 8015ea0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015ea2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015ea4:	4413      	add	r3, r2
 8015ea6:	3b01      	subs	r3, #1
 8015ea8:	3370      	adds	r3, #112	@ 0x70
 8015eaa:	443b      	add	r3, r7
 8015eac:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8015eb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8015eb2:	d102      	bne.n	8015eba <mg_dtoa+0x5aa>
 8015eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015eb6:	3b01      	subs	r3, #1
 8015eb8:	667b      	str	r3, [r7, #100]	@ 0x64
  n += s;
 8015eba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015ebc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015ebe:	4413      	add	r3, r2
 8015ec0:	667b      	str	r3, [r7, #100]	@ 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8015ec2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015ec4:	2b27      	cmp	r3, #39	@ 0x27
 8015ec6:	dd01      	ble.n	8015ecc <mg_dtoa+0x5bc>
 8015ec8:	2327      	movs	r3, #39	@ 0x27
 8015eca:	667b      	str	r3, [r7, #100]	@ 0x64
  buf[n] = '\0';
 8015ecc:	f107 0218 	add.w	r2, r7, #24
 8015ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015ed2:	4413      	add	r3, r2
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8015ed8:	f107 0318 	add.w	r3, r7, #24
 8015edc:	4a05      	ldr	r2, [pc, #20]	@ (8015ef4 <mg_dtoa+0x5e4>)
 8015ede:	6939      	ldr	r1, [r7, #16]
 8015ee0:	6978      	ldr	r0, [r7, #20]
 8015ee2:	f00a ffc7 	bl	8020e74 <mg_snprintf>
 8015ee6:	4603      	mov	r3, r0
}
 8015ee8:	4618      	mov	r0, r3
 8015eea:	3770      	adds	r7, #112	@ 0x70
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bdb0      	pop	{r4, r5, r7, pc}
 8015ef0:	40240000 	.word	0x40240000
 8015ef4:	08031234 	.word	0x08031234

08015ef8 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8015ef8:	b5b0      	push	{r4, r5, r7, lr}
 8015efa:	b08c      	sub	sp, #48	@ 0x30
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	60f8      	str	r0, [r7, #12]
 8015f00:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8015f04:	4b53      	ldr	r3, [pc, #332]	@ (8016054 <mg_lld+0x15c>)
 8015f06:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8015f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015f0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 8015f10:	2300      	movs	r3, #0
 8015f12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8015f14:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d012      	beq.n	8015f42 <mg_lld+0x4a>
 8015f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	da0e      	bge.n	8015f42 <mg_lld+0x4a>
 8015f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f26:	1c5a      	adds	r2, r3, #1
 8015f28:	627a      	str	r2, [r7, #36]	@ 0x24
 8015f2a:	68fa      	ldr	r2, [r7, #12]
 8015f2c:	4413      	add	r3, r2
 8015f2e:	222d      	movs	r2, #45	@ 0x2d
 8015f30:	701a      	strb	r2, [r3, #0]
 8015f32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015f36:	2100      	movs	r1, #0
 8015f38:	4254      	negs	r4, r2
 8015f3a:	eb61 0503 	sbc.w	r5, r1, r3
 8015f3e:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8015f42:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d021      	beq.n	8015f8e <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	623b      	str	r3, [r7, #32]
 8015f4e:	e019      	b.n	8015f84 <mg_lld+0x8c>
 8015f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f52:	f003 030f 	and.w	r3, r3, #15
 8015f56:	69ba      	ldr	r2, [r7, #24]
 8015f58:	441a      	add	r2, r3
 8015f5a:	6a3b      	ldr	r3, [r7, #32]
 8015f5c:	1c59      	adds	r1, r3, #1
 8015f5e:	6239      	str	r1, [r7, #32]
 8015f60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015f62:	440b      	add	r3, r1
 8015f64:	68f9      	ldr	r1, [r7, #12]
 8015f66:	440b      	add	r3, r1
 8015f68:	7812      	ldrb	r2, [r2, #0]
 8015f6a:	701a      	strb	r2, [r3, #0]
 8015f6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8015f70:	f04f 0200 	mov.w	r2, #0
 8015f74:	f04f 0300 	mov.w	r3, #0
 8015f78:	0902      	lsrs	r2, r0, #4
 8015f7a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8015f7e:	090b      	lsrs	r3, r1, #4
 8015f80:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8015f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8015f88:	4313      	orrs	r3, r2
 8015f8a:	d1e1      	bne.n	8015f50 <mg_lld+0x58>
 8015f8c:	e025      	b.n	8015fda <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8015f8e:	2300      	movs	r3, #0
 8015f90:	623b      	str	r3, [r7, #32]
 8015f92:	e01e      	b.n	8015fd2 <mg_lld+0xda>
 8015f94:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8015f98:	f04f 020a 	mov.w	r2, #10
 8015f9c:	f04f 0300 	mov.w	r3, #0
 8015fa0:	f7ea feda 	bl	8000d58 <__aeabi_uldivmod>
 8015fa4:	69bb      	ldr	r3, [r7, #24]
 8015fa6:	441a      	add	r2, r3
 8015fa8:	6a3b      	ldr	r3, [r7, #32]
 8015faa:	1c59      	adds	r1, r3, #1
 8015fac:	6239      	str	r1, [r7, #32]
 8015fae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015fb0:	440b      	add	r3, r1
 8015fb2:	68f9      	ldr	r1, [r7, #12]
 8015fb4:	440b      	add	r3, r1
 8015fb6:	7812      	ldrb	r2, [r2, #0]
 8015fb8:	701a      	strb	r2, [r3, #0]
 8015fba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8015fbe:	f04f 020a 	mov.w	r2, #10
 8015fc2:	f04f 0300 	mov.w	r3, #0
 8015fc6:	f7ea fec7 	bl	8000d58 <__aeabi_uldivmod>
 8015fca:	4602      	mov	r2, r0
 8015fcc:	460b      	mov	r3, r1
 8015fce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8015fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8015fd6:	4313      	orrs	r3, r2
 8015fd8:	d1dc      	bne.n	8015f94 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8015fda:	2300      	movs	r3, #0
 8015fdc:	61fb      	str	r3, [r7, #28]
 8015fde:	e022      	b.n	8016026 <mg_lld+0x12e>
    char t = buf[s + i];
 8015fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015fe2:	69fb      	ldr	r3, [r7, #28]
 8015fe4:	4413      	add	r3, r2
 8015fe6:	68fa      	ldr	r2, [r7, #12]
 8015fe8:	4413      	add	r3, r2
 8015fea:	781b      	ldrb	r3, [r3, #0]
 8015fec:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8015fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015ff0:	6a3b      	ldr	r3, [r7, #32]
 8015ff2:	441a      	add	r2, r3
 8015ff4:	69fb      	ldr	r3, [r7, #28]
 8015ff6:	1ad3      	subs	r3, r2, r3
 8015ff8:	3b01      	subs	r3, #1
 8015ffa:	68fa      	ldr	r2, [r7, #12]
 8015ffc:	441a      	add	r2, r3
 8015ffe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016000:	69fb      	ldr	r3, [r7, #28]
 8016002:	440b      	add	r3, r1
 8016004:	68f9      	ldr	r1, [r7, #12]
 8016006:	440b      	add	r3, r1
 8016008:	7812      	ldrb	r2, [r2, #0]
 801600a:	701a      	strb	r2, [r3, #0]
 801600c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801600e:	6a3b      	ldr	r3, [r7, #32]
 8016010:	441a      	add	r2, r3
 8016012:	69fb      	ldr	r3, [r7, #28]
 8016014:	1ad3      	subs	r3, r2, r3
 8016016:	3b01      	subs	r3, #1
 8016018:	68fa      	ldr	r2, [r7, #12]
 801601a:	4413      	add	r3, r2
 801601c:	7dfa      	ldrb	r2, [r7, #23]
 801601e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8016020:	69fb      	ldr	r3, [r7, #28]
 8016022:	3301      	adds	r3, #1
 8016024:	61fb      	str	r3, [r7, #28]
 8016026:	6a3b      	ldr	r3, [r7, #32]
 8016028:	085b      	lsrs	r3, r3, #1
 801602a:	69fa      	ldr	r2, [r7, #28]
 801602c:	429a      	cmp	r2, r3
 801602e:	d3d7      	bcc.n	8015fe0 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8016030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016034:	4313      	orrs	r3, r2
 8016036:	d106      	bne.n	8016046 <mg_lld+0x14e>
 8016038:	6a3b      	ldr	r3, [r7, #32]
 801603a:	1c5a      	adds	r2, r3, #1
 801603c:	623a      	str	r2, [r7, #32]
 801603e:	68fa      	ldr	r2, [r7, #12]
 8016040:	4413      	add	r3, r2
 8016042:	2230      	movs	r2, #48	@ 0x30
 8016044:	701a      	strb	r2, [r3, #0]
  return n + s;
 8016046:	6a3a      	ldr	r2, [r7, #32]
 8016048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801604a:	4413      	add	r3, r2
}
 801604c:	4618      	mov	r0, r3
 801604e:	3730      	adds	r7, #48	@ 0x30
 8016050:	46bd      	mov	sp, r7
 8016052:	bdb0      	pop	{r4, r5, r7, pc}
 8016054:	08031250 	.word	0x08031250

08016058 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8016058:	b580      	push	{r7, lr}
 801605a:	b086      	sub	sp, #24
 801605c:	af00      	add	r7, sp, #0
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	607a      	str	r2, [r7, #4]
 8016064:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8016066:	2300      	movs	r3, #0
 8016068:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 801606a:	e009      	b.n	8016080 <scpy+0x28>
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	1c5a      	adds	r2, r3, #1
 8016070:	617a      	str	r2, [r7, #20]
 8016072:	687a      	ldr	r2, [r7, #4]
 8016074:	4413      	add	r3, r2
 8016076:	781a      	ldrb	r2, [r3, #0]
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	68b9      	ldr	r1, [r7, #8]
 801607c:	4610      	mov	r0, r2
 801607e:	4798      	blx	r3
 8016080:	697a      	ldr	r2, [r7, #20]
 8016082:	683b      	ldr	r3, [r7, #0]
 8016084:	429a      	cmp	r2, r3
 8016086:	d205      	bcs.n	8016094 <scpy+0x3c>
 8016088:	687a      	ldr	r2, [r7, #4]
 801608a:	697b      	ldr	r3, [r7, #20]
 801608c:	4413      	add	r3, r2
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d1eb      	bne.n	801606c <scpy+0x14>
  return i;
 8016094:	697b      	ldr	r3, [r7, #20]
}
 8016096:	4618      	mov	r0, r3
 8016098:	3718      	adds	r7, #24
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}

0801609e <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 801609e:	b40c      	push	{r2, r3}
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b084      	sub	sp, #16
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
 80160a8:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80160aa:	2300      	movs	r3, #0
 80160ac:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80160ae:	f107 031c 	add.w	r3, r7, #28
 80160b2:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 80160b4:	f107 0308 	add.w	r3, r7, #8
 80160b8:	69ba      	ldr	r2, [r7, #24]
 80160ba:	6839      	ldr	r1, [r7, #0]
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f000 f809 	bl	80160d4 <mg_vxprintf>
 80160c2:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80160c4:	68fb      	ldr	r3, [r7, #12]
}
 80160c6:	4618      	mov	r0, r3
 80160c8:	3710      	adds	r7, #16
 80160ca:	46bd      	mov	sp, r7
 80160cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80160d0:	b002      	add	sp, #8
 80160d2:	4770      	bx	lr

080160d4 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 80160d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80160d8:	b0a6      	sub	sp, #152	@ 0x98
 80160da:	af02      	add	r7, sp, #8
 80160dc:	60f8      	str	r0, [r7, #12]
 80160de:	60b9      	str	r1, [r7, #8]
 80160e0:	607a      	str	r2, [r7, #4]
 80160e2:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 80160e4:	2300      	movs	r3, #0
 80160e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80160ea:	2300      	movs	r3, #0
 80160ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 80160f0:	e383      	b.n	80167fa <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 80160f2:	687a      	ldr	r2, [r7, #4]
 80160f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80160f8:	4413      	add	r3, r2
 80160fa:	781b      	ldrb	r3, [r3, #0]
 80160fc:	2b25      	cmp	r3, #37	@ 0x25
 80160fe:	f040 8369 	bne.w	80167d4 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8016102:	2300      	movs	r3, #0
 8016104:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016106:	2300      	movs	r3, #0
 8016108:	67bb      	str	r3, [r7, #120]	@ 0x78
 801610a:	2300      	movs	r3, #0
 801610c:	677b      	str	r3, [r7, #116]	@ 0x74
 801610e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016112:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8016114:	2320      	movs	r3, #32
 8016116:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801611a:	2300      	movs	r3, #0
 801611c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8016120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016124:	3301      	adds	r3, #1
 8016126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801612a:	687a      	ldr	r2, [r7, #4]
 801612c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016130:	4413      	add	r3, r2
 8016132:	781b      	ldrb	r3, [r3, #0]
 8016134:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 8016138:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801613c:	2b23      	cmp	r3, #35	@ 0x23
 801613e:	d10e      	bne.n	801615e <mg_vxprintf+0x8a>
 8016140:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016142:	3301      	adds	r3, #1
 8016144:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801614a:	3301      	adds	r3, #1
 801614c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016150:	687a      	ldr	r2, [r7, #4]
 8016152:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016156:	4413      	add	r3, r2
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 801615e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016162:	2b2d      	cmp	r3, #45	@ 0x2d
 8016164:	d110      	bne.n	8016188 <mg_vxprintf+0xb4>
 8016166:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801616a:	3301      	adds	r3, #1
 801616c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8016170:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016174:	3301      	adds	r3, #1
 8016176:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801617a:	687a      	ldr	r2, [r7, #4]
 801617c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016180:	4413      	add	r3, r2
 8016182:	781b      	ldrb	r3, [r3, #0]
 8016184:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8016188:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801618c:	2b30      	cmp	r3, #48	@ 0x30
 801618e:	d127      	bne.n	80161e0 <mg_vxprintf+0x10c>
 8016190:	2330      	movs	r3, #48	@ 0x30
 8016192:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8016196:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801619a:	3301      	adds	r3, #1
 801619c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80161a0:	687a      	ldr	r2, [r7, #4]
 80161a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80161a6:	4413      	add	r3, r2
 80161a8:	781b      	ldrb	r3, [r3, #0]
 80161aa:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 80161ae:	e017      	b.n	80161e0 <mg_vxprintf+0x10c>
 80161b0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80161b2:	4613      	mov	r3, r2
 80161b4:	009b      	lsls	r3, r3, #2
 80161b6:	4413      	add	r3, r2
 80161b8:	005b      	lsls	r3, r3, #1
 80161ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80161bc:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80161c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80161c2:	4413      	add	r3, r2
 80161c4:	3b30      	subs	r3, #48	@ 0x30
 80161c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80161c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80161cc:	3301      	adds	r3, #1
 80161ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80161d2:	687a      	ldr	r2, [r7, #4]
 80161d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80161d8:	4413      	add	r3, r2
 80161da:	781b      	ldrb	r3, [r3, #0]
 80161dc:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80161e0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7ff faa5 	bl	8015734 <is_digit>
 80161ea:	4603      	mov	r3, r0
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d1df      	bne.n	80161b0 <mg_vxprintf+0xdc>
      if (c == '.') {
 80161f0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80161f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80161f6:	d153      	bne.n	80162a0 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 80161f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80161fc:	3301      	adds	r3, #1
 80161fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016202:	687a      	ldr	r2, [r7, #4]
 8016204:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016208:	4413      	add	r3, r2
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 8016210:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016214:	2b2a      	cmp	r3, #42	@ 0x2a
 8016216:	d113      	bne.n	8016240 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8016218:	683b      	ldr	r3, [r7, #0]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	1d19      	adds	r1, r3, #4
 801621e:	683a      	ldr	r2, [r7, #0]
 8016220:	6011      	str	r1, [r2, #0]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 8016226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801622a:	3301      	adds	r3, #1
 801622c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016230:	687a      	ldr	r2, [r7, #4]
 8016232:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016236:	4413      	add	r3, r2
 8016238:	781b      	ldrb	r3, [r3, #0]
 801623a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 801623e:	e02f      	b.n	80162a0 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8016240:	2300      	movs	r3, #0
 8016242:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8016244:	e017      	b.n	8016276 <mg_vxprintf+0x1a2>
 8016246:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016248:	4613      	mov	r3, r2
 801624a:	009b      	lsls	r3, r3, #2
 801624c:	4413      	add	r3, r2
 801624e:	005b      	lsls	r3, r3, #1
 8016250:	673b      	str	r3, [r7, #112]	@ 0x70
 8016252:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8016256:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016258:	4413      	add	r3, r2
 801625a:	3b30      	subs	r3, #48	@ 0x30
 801625c:	673b      	str	r3, [r7, #112]	@ 0x70
 801625e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016262:	3301      	adds	r3, #1
 8016264:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016268:	687a      	ldr	r2, [r7, #4]
 801626a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801626e:	4413      	add	r3, r2
 8016270:	781b      	ldrb	r3, [r3, #0]
 8016272:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8016276:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801627a:	4618      	mov	r0, r3
 801627c:	f7ff fa5a 	bl	8015734 <is_digit>
 8016280:	4603      	mov	r3, r0
 8016282:	2b00      	cmp	r3, #0
 8016284:	d1df      	bne.n	8016246 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8016286:	e00b      	b.n	80162a0 <mg_vxprintf+0x1cc>
 8016288:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801628c:	3301      	adds	r3, #1
 801628e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016292:	687a      	ldr	r2, [r7, #4]
 8016294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016298:	4413      	add	r3, r2
 801629a:	781b      	ldrb	r3, [r3, #0]
 801629c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80162a0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80162a4:	2b68      	cmp	r3, #104	@ 0x68
 80162a6:	d0ef      	beq.n	8016288 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 80162a8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80162ac:	2b6c      	cmp	r3, #108	@ 0x6c
 80162ae:	d121      	bne.n	80162f4 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 80162b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80162b2:	3301      	adds	r3, #1
 80162b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80162b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80162ba:	3301      	adds	r3, #1
 80162bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80162c0:	687a      	ldr	r2, [r7, #4]
 80162c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80162c6:	4413      	add	r3, r2
 80162c8:	781b      	ldrb	r3, [r3, #0]
 80162ca:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 80162ce:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80162d2:	2b6c      	cmp	r3, #108	@ 0x6c
 80162d4:	d10e      	bne.n	80162f4 <mg_vxprintf+0x220>
 80162d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80162d8:	3301      	adds	r3, #1
 80162da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80162dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80162e0:	3301      	adds	r3, #1
 80162e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80162e6:	687a      	ldr	r2, [r7, #4]
 80162e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80162ec:	4413      	add	r3, r2
 80162ee:	781b      	ldrb	r3, [r3, #0]
 80162f0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 80162f4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80162f8:	2b70      	cmp	r3, #112	@ 0x70
 80162fa:	d103      	bne.n	8016304 <mg_vxprintf+0x230>
 80162fc:	2301      	movs	r3, #1
 80162fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016300:	2301      	movs	r3, #1
 8016302:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8016304:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016308:	2b64      	cmp	r3, #100	@ 0x64
 801630a:	d018      	beq.n	801633e <mg_vxprintf+0x26a>
 801630c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016310:	2b75      	cmp	r3, #117	@ 0x75
 8016312:	d014      	beq.n	801633e <mg_vxprintf+0x26a>
 8016314:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016318:	2b78      	cmp	r3, #120	@ 0x78
 801631a:	d010      	beq.n	801633e <mg_vxprintf+0x26a>
 801631c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016320:	2b58      	cmp	r3, #88	@ 0x58
 8016322:	d00c      	beq.n	801633e <mg_vxprintf+0x26a>
 8016324:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016328:	2b70      	cmp	r3, #112	@ 0x70
 801632a:	d008      	beq.n	801633e <mg_vxprintf+0x26a>
 801632c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016330:	2b67      	cmp	r3, #103	@ 0x67
 8016332:	d004      	beq.n	801633e <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8016334:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016338:	2b66      	cmp	r3, #102	@ 0x66
 801633a:	f040 816c 	bne.w	8016616 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 801633e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016342:	2b64      	cmp	r3, #100	@ 0x64
 8016344:	bf0c      	ite	eq
 8016346:	2301      	moveq	r3, #1
 8016348:	2300      	movne	r3, #0
 801634a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801634e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016352:	2b78      	cmp	r3, #120	@ 0x78
 8016354:	d007      	beq.n	8016366 <mg_vxprintf+0x292>
 8016356:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801635a:	2b58      	cmp	r3, #88	@ 0x58
 801635c:	d003      	beq.n	8016366 <mg_vxprintf+0x292>
 801635e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016362:	2b70      	cmp	r3, #112	@ 0x70
 8016364:	d101      	bne.n	801636a <mg_vxprintf+0x296>
 8016366:	2301      	movs	r3, #1
 8016368:	e000      	b.n	801636c <mg_vxprintf+0x298>
 801636a:	2300      	movs	r3, #0
 801636c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8016370:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8016374:	f003 0301 	and.w	r3, r3, #1
 8016378:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 801637c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801637e:	2b00      	cmp	r3, #0
 8016380:	d001      	beq.n	8016386 <mg_vxprintf+0x2b2>
 8016382:	2302      	movs	r3, #2
 8016384:	e000      	b.n	8016388 <mg_vxprintf+0x2b4>
 8016386:	2300      	movs	r3, #0
 8016388:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 801638a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801638e:	2b67      	cmp	r3, #103	@ 0x67
 8016390:	d003      	beq.n	801639a <mg_vxprintf+0x2c6>
 8016392:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016396:	2b66      	cmp	r3, #102	@ 0x66
 8016398:	d124      	bne.n	80163e4 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 801639a:	683b      	ldr	r3, [r7, #0]
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	3307      	adds	r3, #7
 80163a0:	f023 0307 	bic.w	r3, r3, #7
 80163a4:	f103 0108 	add.w	r1, r3, #8
 80163a8:	683a      	ldr	r2, [r7, #0]
 80163aa:	6011      	str	r1, [r2, #0]
 80163ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163b0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 80163b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80163b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80163ba:	d101      	bne.n	80163c0 <mg_vxprintf+0x2ec>
 80163bc:	2306      	movs	r3, #6
 80163be:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 80163c0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80163c2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80163c6:	2b67      	cmp	r3, #103	@ 0x67
 80163c8:	bf0c      	ite	eq
 80163ca:	2301      	moveq	r3, #1
 80163cc:	2300      	movne	r3, #0
 80163ce:	b2db      	uxtb	r3, r3
 80163d0:	f107 0014 	add.w	r0, r7, #20
 80163d4:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80163d8:	2128      	movs	r1, #40	@ 0x28
 80163da:	f7ff fa99 	bl	8015910 <mg_dtoa>
 80163de:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 80163e2:	e069      	b.n	80164b8 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 80163e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80163e6:	2b02      	cmp	r3, #2
 80163e8:	d11c      	bne.n	8016424 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	3307      	adds	r3, #7
 80163f0:	f023 0307 	bic.w	r3, r3, #7
 80163f4:	f103 0108 	add.w	r1, r3, #8
 80163f8:	683a      	ldr	r2, [r7, #0]
 80163fa:	6011      	str	r1, [r2, #0]
 80163fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016400:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8016404:	f107 0114 	add.w	r1, r7, #20
 8016408:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 801640c:	9301      	str	r3, [sp, #4]
 801640e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016412:	9300      	str	r3, [sp, #0]
 8016414:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8016418:	4608      	mov	r0, r1
 801641a:	f7ff fd6d 	bl	8015ef8 <mg_lld>
 801641e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8016422:	e049      	b.n	80164b8 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8016424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016426:	2b01      	cmp	r3, #1
 8016428:	d123      	bne.n	8016472 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 801642a:	683b      	ldr	r3, [r7, #0]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	1d19      	adds	r1, r3, #4
 8016430:	683a      	ldr	r2, [r7, #0]
 8016432:	6011      	str	r1, [r2, #0]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8016438:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801643c:	2b00      	cmp	r3, #0
 801643e:	d004      	beq.n	801644a <mg_vxprintf+0x376>
 8016440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016442:	17da      	asrs	r2, r3, #31
 8016444:	461c      	mov	r4, r3
 8016446:	4615      	mov	r5, r2
 8016448:	e003      	b.n	8016452 <mg_vxprintf+0x37e>
 801644a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801644c:	2200      	movs	r2, #0
 801644e:	461c      	mov	r4, r3
 8016450:	4615      	mov	r5, r2
 8016452:	f107 0114 	add.w	r1, r7, #20
 8016456:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 801645a:	9301      	str	r3, [sp, #4]
 801645c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016460:	9300      	str	r3, [sp, #0]
 8016462:	4622      	mov	r2, r4
 8016464:	462b      	mov	r3, r5
 8016466:	4608      	mov	r0, r1
 8016468:	f7ff fd46 	bl	8015ef8 <mg_lld>
 801646c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8016470:	e022      	b.n	80164b8 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8016472:	683b      	ldr	r3, [r7, #0]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	1d19      	adds	r1, r3, #4
 8016478:	683a      	ldr	r2, [r7, #0]
 801647a:	6011      	str	r1, [r2, #0]
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8016480:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016484:	2b00      	cmp	r3, #0
 8016486:	d004      	beq.n	8016492 <mg_vxprintf+0x3be>
 8016488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801648a:	17da      	asrs	r2, r3, #31
 801648c:	4698      	mov	r8, r3
 801648e:	4691      	mov	r9, r2
 8016490:	e003      	b.n	801649a <mg_vxprintf+0x3c6>
 8016492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016494:	2200      	movs	r2, #0
 8016496:	4698      	mov	r8, r3
 8016498:	4691      	mov	r9, r2
 801649a:	f107 0114 	add.w	r1, r7, #20
 801649e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80164a2:	9301      	str	r3, [sp, #4]
 80164a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80164a8:	9300      	str	r3, [sp, #0]
 80164aa:	4642      	mov	r2, r8
 80164ac:	464b      	mov	r3, r9
 80164ae:	4608      	mov	r0, r1
 80164b0:	f7ff fd22 	bl	8015ef8 <mg_lld>
 80164b4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 80164b8:	2300      	movs	r3, #0
 80164ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80164be:	e007      	b.n	80164d0 <mg_vxprintf+0x3fc>
 80164c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80164c2:	3b01      	subs	r3, #1
 80164c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80164c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80164ca:	3301      	adds	r3, #1
 80164cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80164d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80164d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80164d6:	429a      	cmp	r2, r3
 80164d8:	d202      	bcs.n	80164e0 <mg_vxprintf+0x40c>
 80164da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d1ef      	bne.n	80164c0 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80164e0:	2300      	movs	r3, #0
 80164e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80164e6:	e011      	b.n	801650c <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 80164e8:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80164ec:	2301      	movs	r3, #1
 80164ee:	68b9      	ldr	r1, [r7, #8]
 80164f0:	68f8      	ldr	r0, [r7, #12]
 80164f2:	f7ff fdb1 	bl	8016058 <scpy>
 80164f6:	4602      	mov	r2, r0
 80164f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80164fc:	4413      	add	r3, r2
 80164fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8016502:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016506:	3301      	adds	r3, #1
 8016508:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801650c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016510:	2b20      	cmp	r3, #32
 8016512:	d110      	bne.n	8016536 <mg_vxprintf+0x462>
 8016514:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8016518:	2b00      	cmp	r3, #0
 801651a:	d10c      	bne.n	8016536 <mg_vxprintf+0x462>
 801651c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016520:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016522:	429a      	cmp	r2, r3
 8016524:	d207      	bcs.n	8016536 <mg_vxprintf+0x462>
 8016526:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801652a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801652e:	4413      	add	r3, r2
 8016530:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016532:	429a      	cmp	r2, r3
 8016534:	d8d8      	bhi.n	80164e8 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8016536:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016538:	4ab7      	ldr	r2, [pc, #732]	@ (8016818 <mg_vxprintf+0x744>)
 801653a:	68b9      	ldr	r1, [r7, #8]
 801653c:	68f8      	ldr	r0, [r7, #12]
 801653e:	f7ff fd8b 	bl	8016058 <scpy>
 8016542:	4602      	mov	r2, r0
 8016544:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016548:	4413      	add	r3, r2
 801654a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 801654e:	2300      	movs	r3, #0
 8016550:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016554:	e011      	b.n	801657a <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8016556:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 801655a:	2301      	movs	r3, #1
 801655c:	68b9      	ldr	r1, [r7, #8]
 801655e:	68f8      	ldr	r0, [r7, #12]
 8016560:	f7ff fd7a 	bl	8016058 <scpy>
 8016564:	4602      	mov	r2, r0
 8016566:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801656a:	4413      	add	r3, r2
 801656c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8016570:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016574:	3301      	adds	r3, #1
 8016576:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801657a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801657e:	2b30      	cmp	r3, #48	@ 0x30
 8016580:	d10c      	bne.n	801659c <mg_vxprintf+0x4c8>
 8016582:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016586:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016588:	429a      	cmp	r2, r3
 801658a:	d207      	bcs.n	801659c <mg_vxprintf+0x4c8>
 801658c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016590:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016594:	4413      	add	r3, r2
 8016596:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016598:	429a      	cmp	r2, r3
 801659a:	d8dc      	bhi.n	8016556 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 801659c:	f107 0214 	add.w	r2, r7, #20
 80165a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80165a4:	68b9      	ldr	r1, [r7, #8]
 80165a6:	68f8      	ldr	r0, [r7, #12]
 80165a8:	f7ff fd56 	bl	8016058 <scpy>
 80165ac:	4602      	mov	r2, r0
 80165ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80165b2:	4413      	add	r3, r2
 80165b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80165b8:	2300      	movs	r3, #0
 80165ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80165be:	e011      	b.n	80165e4 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 80165c0:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80165c4:	2301      	movs	r3, #1
 80165c6:	68b9      	ldr	r1, [r7, #8]
 80165c8:	68f8      	ldr	r0, [r7, #12]
 80165ca:	f7ff fd45 	bl	8016058 <scpy>
 80165ce:	4602      	mov	r2, r0
 80165d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80165d4:	4413      	add	r3, r2
 80165d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80165da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80165de:	3301      	adds	r3, #1
 80165e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80165e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80165e8:	2b20      	cmp	r3, #32
 80165ea:	f040 80ea 	bne.w	80167c2 <mg_vxprintf+0x6ee>
 80165ee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	f000 80e5 	beq.w	80167c2 <mg_vxprintf+0x6ee>
 80165f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80165fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80165fe:	429a      	cmp	r2, r3
 8016600:	f080 80df 	bcs.w	80167c2 <mg_vxprintf+0x6ee>
 8016604:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016608:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801660c:	4413      	add	r3, r2
 801660e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016610:	429a      	cmp	r2, r3
 8016612:	d8d5      	bhi.n	80165c0 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8016614:	e0d5      	b.n	80167c2 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8016616:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801661a:	2b6d      	cmp	r3, #109	@ 0x6d
 801661c:	d003      	beq.n	8016626 <mg_vxprintf+0x552>
 801661e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016622:	2b4d      	cmp	r3, #77	@ 0x4d
 8016624:	d128      	bne.n	8016678 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8016626:	683b      	ldr	r3, [r7, #0]
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	1d19      	adds	r1, r3, #4
 801662c:	683a      	ldr	r2, [r7, #0]
 801662e:	6011      	str	r1, [r2, #0]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8016634:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016638:	2b6d      	cmp	r3, #109	@ 0x6d
 801663a:	d103      	bne.n	8016644 <mg_vxprintf+0x570>
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	68b9      	ldr	r1, [r7, #8]
 8016640:	2022      	movs	r0, #34	@ 0x22
 8016642:	4798      	blx	r3
        n += f(out, param, ap);
 8016644:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016646:	683a      	ldr	r2, [r7, #0]
 8016648:	68b9      	ldr	r1, [r7, #8]
 801664a:	68f8      	ldr	r0, [r7, #12]
 801664c:	4798      	blx	r3
 801664e:	4602      	mov	r2, r0
 8016650:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016654:	4413      	add	r3, r2
 8016656:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 801665a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801665e:	2b6d      	cmp	r3, #109	@ 0x6d
 8016660:	f040 80b1 	bne.w	80167c6 <mg_vxprintf+0x6f2>
 8016664:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016668:	3302      	adds	r3, #2
 801666a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	68b9      	ldr	r1, [r7, #8]
 8016672:	2022      	movs	r0, #34	@ 0x22
 8016674:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8016676:	e0a6      	b.n	80167c6 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8016678:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801667c:	2b63      	cmp	r3, #99	@ 0x63
 801667e:	d112      	bne.n	80166a6 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8016680:	683b      	ldr	r3, [r7, #0]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	1d19      	adds	r1, r3, #4
 8016686:	683a      	ldr	r2, [r7, #0]
 8016688:	6011      	str	r1, [r2, #0]
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 801668e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016690:	b2da      	uxtb	r2, r3
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	68b9      	ldr	r1, [r7, #8]
 8016696:	4610      	mov	r0, r2
 8016698:	4798      	blx	r3
        n++;
 801669a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801669e:	3301      	adds	r3, #1
 80166a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80166a4:	e090      	b.n	80167c8 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 80166a6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80166aa:	2b73      	cmp	r3, #115	@ 0x73
 80166ac:	d16b      	bne.n	8016786 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	1d19      	adds	r1, r3, #4
 80166b4:	683a      	ldr	r2, [r7, #0]
 80166b6:	6011      	str	r1, [r2, #0]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80166bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80166be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80166c2:	d109      	bne.n	80166d8 <mg_vxprintf+0x604>
 80166c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d004      	beq.n	80166d4 <mg_vxprintf+0x600>
 80166ca:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80166cc:	f7e9 fde8 	bl	80002a0 <strlen>
 80166d0:	4603      	mov	r3, r0
 80166d2:	e000      	b.n	80166d6 <mg_vxprintf+0x602>
 80166d4:	2300      	movs	r3, #0
 80166d6:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80166d8:	2300      	movs	r3, #0
 80166da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80166de:	e011      	b.n	8016704 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 80166e0:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80166e4:	2301      	movs	r3, #1
 80166e6:	68b9      	ldr	r1, [r7, #8]
 80166e8:	68f8      	ldr	r0, [r7, #12]
 80166ea:	f7ff fcb5 	bl	8016058 <scpy>
 80166ee:	4602      	mov	r2, r0
 80166f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80166f4:	4413      	add	r3, r2
 80166f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80166fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80166fe:	3301      	adds	r3, #1
 8016700:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016704:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8016708:	2b00      	cmp	r3, #0
 801670a:	d10a      	bne.n	8016722 <mg_vxprintf+0x64e>
 801670c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801670e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016710:	429a      	cmp	r2, r3
 8016712:	d206      	bcs.n	8016722 <mg_vxprintf+0x64e>
 8016714:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016718:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801671a:	4413      	add	r3, r2
 801671c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801671e:	429a      	cmp	r2, r3
 8016720:	d8de      	bhi.n	80166e0 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8016722:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016724:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016726:	68b9      	ldr	r1, [r7, #8]
 8016728:	68f8      	ldr	r0, [r7, #12]
 801672a:	f7ff fc95 	bl	8016058 <scpy>
 801672e:	4602      	mov	r2, r0
 8016730:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016734:	4413      	add	r3, r2
 8016736:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 801673a:	2300      	movs	r3, #0
 801673c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016740:	e011      	b.n	8016766 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8016742:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8016746:	2301      	movs	r3, #1
 8016748:	68b9      	ldr	r1, [r7, #8]
 801674a:	68f8      	ldr	r0, [r7, #12]
 801674c:	f7ff fc84 	bl	8016058 <scpy>
 8016750:	4602      	mov	r2, r0
 8016752:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016756:	4413      	add	r3, r2
 8016758:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 801675c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016760:	3301      	adds	r3, #1
 8016762:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016766:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801676a:	2b00      	cmp	r3, #0
 801676c:	d02c      	beq.n	80167c8 <mg_vxprintf+0x6f4>
 801676e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016772:	429a      	cmp	r2, r3
 8016774:	d228      	bcs.n	80167c8 <mg_vxprintf+0x6f4>
 8016776:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801677a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801677c:	4413      	add	r3, r2
 801677e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016780:	429a      	cmp	r2, r3
 8016782:	d8de      	bhi.n	8016742 <mg_vxprintf+0x66e>
 8016784:	e020      	b.n	80167c8 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8016786:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801678a:	2b25      	cmp	r3, #37	@ 0x25
 801678c:	d109      	bne.n	80167a2 <mg_vxprintf+0x6ce>
        out('%', param);
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	68b9      	ldr	r1, [r7, #8]
 8016792:	2025      	movs	r0, #37	@ 0x25
 8016794:	4798      	blx	r3
        n++;
 8016796:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801679a:	3301      	adds	r3, #1
 801679c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80167a0:	e012      	b.n	80167c8 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	68b9      	ldr	r1, [r7, #8]
 80167a6:	2025      	movs	r0, #37	@ 0x25
 80167a8:	4798      	blx	r3
        out(c, param);
 80167aa:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	68b9      	ldr	r1, [r7, #8]
 80167b2:	4610      	mov	r0, r2
 80167b4:	4798      	blx	r3
        n += 2;
 80167b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80167ba:	3302      	adds	r3, #2
 80167bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80167c0:	e002      	b.n	80167c8 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 80167c2:	bf00      	nop
 80167c4:	e000      	b.n	80167c8 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 80167c6:	bf00      	nop
      }
      i++;
 80167c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80167cc:	3301      	adds	r3, #1
 80167ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80167d2:	e012      	b.n	80167fa <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 80167d4:	687a      	ldr	r2, [r7, #4]
 80167d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80167da:	4413      	add	r3, r2
 80167dc:	781a      	ldrb	r2, [r3, #0]
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	68b9      	ldr	r1, [r7, #8]
 80167e2:	4610      	mov	r0, r2
 80167e4:	4798      	blx	r3
 80167e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80167ea:	3301      	adds	r3, #1
 80167ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80167f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80167f4:	3301      	adds	r3, #1
 80167f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 80167fa:	687a      	ldr	r2, [r7, #4]
 80167fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016800:	4413      	add	r3, r2
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	2b00      	cmp	r3, #0
 8016806:	f47f ac74 	bne.w	80160f2 <mg_vxprintf+0x1e>
    }
  }
  return n;
 801680a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 801680e:	4618      	mov	r0, r3
 8016810:	3790      	adds	r7, #144	@ 0x90
 8016812:	46bd      	mov	sp, r7
 8016814:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8016818:	08031264 	.word	0x08031264

0801681c <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 801681c:	b580      	push	{r7, lr}
 801681e:	b086      	sub	sp, #24
 8016820:	af00      	add	r7, sp, #0
 8016822:	60f8      	str	r0, [r7, #12]
 8016824:	60b9      	str	r1, [r7, #8]
 8016826:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8016828:	2108      	movs	r1, #8
 801682a:	2001      	movs	r0, #1
 801682c:	f7fe f940 	bl	8014ab0 <mg_calloc>
 8016830:	6178      	str	r0, [r7, #20]
  if (fd != NULL) {
 8016832:	697b      	ldr	r3, [r7, #20]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d013      	beq.n	8016860 <mg_fs_open+0x44>
    fd->fd = fs->op(path, flags);
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	689b      	ldr	r3, [r3, #8]
 801683c:	6879      	ldr	r1, [r7, #4]
 801683e:	68b8      	ldr	r0, [r7, #8]
 8016840:	4798      	blx	r3
 8016842:	4602      	mov	r2, r0
 8016844:	697b      	ldr	r3, [r7, #20]
 8016846:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	68fa      	ldr	r2, [r7, #12]
 801684c:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 801684e:	697b      	ldr	r3, [r7, #20]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d104      	bne.n	8016860 <mg_fs_open+0x44>
      free(fd);
 8016856:	6978      	ldr	r0, [r7, #20]
 8016858:	f7f5 fdb6 	bl	800c3c8 <vPortFree>
      fd = NULL;
 801685c:	2300      	movs	r3, #0
 801685e:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8016860:	697b      	ldr	r3, [r7, #20]
}
 8016862:	4618      	mov	r0, r3
 8016864:	3718      	adds	r7, #24
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}

0801686a <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 801686a:	b580      	push	{r7, lr}
 801686c:	b082      	sub	sp, #8
 801686e:	af00      	add	r7, sp, #0
 8016870:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d009      	beq.n	801688c <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	685b      	ldr	r3, [r3, #4]
 801687c:	68db      	ldr	r3, [r3, #12]
 801687e:	687a      	ldr	r2, [r7, #4]
 8016880:	6812      	ldr	r2, [r2, #0]
 8016882:	4610      	mov	r0, r2
 8016884:	4798      	blx	r3
    free(fd);
 8016886:	6878      	ldr	r0, [r7, #4]
 8016888:	f7f5 fd9e 	bl	800c3c8 <vPortFree>
  }
}
 801688c:	bf00      	nop
 801688e:	3708      	adds	r7, #8
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}

08016894 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8016894:	b480      	push	{r7}
 8016896:	b085      	sub	sp, #20
 8016898:	af00      	add	r7, sp, #0
 801689a:	60f8      	str	r0, [r7, #12]
 801689c:	60b9      	str	r1, [r7, #8]
 801689e:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 80168a0:	2300      	movs	r3, #0
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	3714      	adds	r7, #20
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr

080168ae <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 80168ae:	b480      	push	{r7}
 80168b0:	b085      	sub	sp, #20
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	60f8      	str	r0, [r7, #12]
 80168b6:	60b9      	str	r1, [r7, #8]
 80168b8:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 80168ba:	bf00      	nop
 80168bc:	3714      	adds	r7, #20
 80168be:	46bd      	mov	sp, r7
 80168c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c4:	4770      	bx	lr

080168c6 <p_open>:
static void *p_open(const char *path, int flags) {
 80168c6:	b480      	push	{r7}
 80168c8:	b083      	sub	sp, #12
 80168ca:	af00      	add	r7, sp, #0
 80168cc:	6078      	str	r0, [r7, #4]
 80168ce:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 80168d0:	2300      	movs	r3, #0
}
 80168d2:	4618      	mov	r0, r3
 80168d4:	370c      	adds	r7, #12
 80168d6:	46bd      	mov	sp, r7
 80168d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168dc:	4770      	bx	lr

080168de <p_close>:
static void p_close(void *fp) {
 80168de:	b480      	push	{r7}
 80168e0:	b083      	sub	sp, #12
 80168e2:	af00      	add	r7, sp, #0
 80168e4:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 80168e6:	bf00      	nop
 80168e8:	370c      	adds	r7, #12
 80168ea:	46bd      	mov	sp, r7
 80168ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f0:	4770      	bx	lr

080168f2 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 80168f2:	b480      	push	{r7}
 80168f4:	b085      	sub	sp, #20
 80168f6:	af00      	add	r7, sp, #0
 80168f8:	60f8      	str	r0, [r7, #12]
 80168fa:	60b9      	str	r1, [r7, #8]
 80168fc:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 80168fe:	2300      	movs	r3, #0
}
 8016900:	4618      	mov	r0, r3
 8016902:	3714      	adds	r7, #20
 8016904:	46bd      	mov	sp, r7
 8016906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690a:	4770      	bx	lr

0801690c <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 801690c:	b480      	push	{r7}
 801690e:	b085      	sub	sp, #20
 8016910:	af00      	add	r7, sp, #0
 8016912:	60f8      	str	r0, [r7, #12]
 8016914:	60b9      	str	r1, [r7, #8]
 8016916:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8016918:	2300      	movs	r3, #0
}
 801691a:	4618      	mov	r0, r3
 801691c:	3714      	adds	r7, #20
 801691e:	46bd      	mov	sp, r7
 8016920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016924:	4770      	bx	lr

08016926 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8016926:	b480      	push	{r7}
 8016928:	b083      	sub	sp, #12
 801692a:	af00      	add	r7, sp, #0
 801692c:	6078      	str	r0, [r7, #4]
 801692e:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8016930:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8016934:	4618      	mov	r0, r3
 8016936:	370c      	adds	r7, #12
 8016938:	46bd      	mov	sp, r7
 801693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693e:	4770      	bx	lr

08016940 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8016940:	b480      	push	{r7}
 8016942:	b083      	sub	sp, #12
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 801694a:	2300      	movs	r3, #0
}
 801694c:	4618      	mov	r0, r3
 801694e:	370c      	adds	r7, #12
 8016950:	46bd      	mov	sp, r7
 8016952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016956:	4770      	bx	lr

08016958 <p_remove>:
static bool p_remove(const char *path) {
 8016958:	b480      	push	{r7}
 801695a:	b083      	sub	sp, #12
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8016960:	2300      	movs	r3, #0
}
 8016962:	4618      	mov	r0, r3
 8016964:	370c      	adds	r7, #12
 8016966:	46bd      	mov	sp, r7
 8016968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696c:	4770      	bx	lr

0801696e <p_mkdir>:
static bool p_mkdir(const char *path) {
 801696e:	b480      	push	{r7}
 8016970:	b083      	sub	sp, #12
 8016972:	af00      	add	r7, sp, #0
 8016974:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8016976:	2300      	movs	r3, #0
}
 8016978:	4618      	mov	r0, r3
 801697a:	370c      	adds	r7, #12
 801697c:	46bd      	mov	sp, r7
 801697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016982:	4770      	bx	lr

08016984 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8016984:	b480      	push	{r7}
 8016986:	b089      	sub	sp, #36	@ 0x24
 8016988:	af00      	add	r7, sp, #0
 801698a:	60f8      	str	r0, [r7, #12]
 801698c:	60b9      	str	r1, [r7, #8]
 801698e:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8016990:	2300      	movs	r3, #0
 8016992:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d02d      	beq.n	80169f6 <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	1c5a      	adds	r2, r3, #1
 801699e:	60fa      	str	r2, [r7, #12]
 80169a0:	781b      	ldrb	r3, [r3, #0]
 80169a2:	61bb      	str	r3, [r7, #24]
 80169a4:	68bb      	ldr	r3, [r7, #8]
 80169a6:	1c5a      	adds	r2, r3, #1
 80169a8:	60ba      	str	r2, [r7, #8]
 80169aa:	781b      	ldrb	r3, [r3, #0]
 80169ac:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 80169ae:	69bb      	ldr	r3, [r7, #24]
 80169b0:	2b40      	cmp	r3, #64	@ 0x40
 80169b2:	dd05      	ble.n	80169c0 <mg_ncasecmp+0x3c>
 80169b4:	69bb      	ldr	r3, [r7, #24]
 80169b6:	2b5a      	cmp	r3, #90	@ 0x5a
 80169b8:	dc02      	bgt.n	80169c0 <mg_ncasecmp+0x3c>
 80169ba:	69bb      	ldr	r3, [r7, #24]
 80169bc:	3320      	adds	r3, #32
 80169be:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	2b40      	cmp	r3, #64	@ 0x40
 80169c4:	dd05      	ble.n	80169d2 <mg_ncasecmp+0x4e>
 80169c6:	697b      	ldr	r3, [r7, #20]
 80169c8:	2b5a      	cmp	r3, #90	@ 0x5a
 80169ca:	dc02      	bgt.n	80169d2 <mg_ncasecmp+0x4e>
 80169cc:	697b      	ldr	r3, [r7, #20]
 80169ce:	3320      	adds	r3, #32
 80169d0:	617b      	str	r3, [r7, #20]
      diff = c - d;
 80169d2:	69ba      	ldr	r2, [r7, #24]
 80169d4:	697b      	ldr	r3, [r7, #20]
 80169d6:	1ad3      	subs	r3, r2, r3
 80169d8:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 80169da:	69fb      	ldr	r3, [r7, #28]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d10a      	bne.n	80169f6 <mg_ncasecmp+0x72>
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	3b01      	subs	r3, #1
 80169e4:	781b      	ldrb	r3, [r3, #0]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d005      	beq.n	80169f6 <mg_ncasecmp+0x72>
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	3b01      	subs	r3, #1
 80169ee:	607b      	str	r3, [r7, #4]
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d1d1      	bne.n	801699a <mg_ncasecmp+0x16>
  return diff;
 80169f6:	69fb      	ldr	r3, [r7, #28]
}
 80169f8:	4618      	mov	r0, r3
 80169fa:	3724      	adds	r7, #36	@ 0x24
 80169fc:	46bd      	mov	sp, r7
 80169fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a02:	4770      	bx	lr

08016a04 <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8016a04:	b480      	push	{r7}
 8016a06:	b08b      	sub	sp, #44	@ 0x2c
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	f107 0308 	add.w	r3, r7, #8
 8016a0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8016a12:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8016a14:	2300      	movs	r3, #0
 8016a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8016a18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016a1c:	61bb      	str	r3, [r7, #24]
 8016a1e:	69bb      	ldr	r3, [r7, #24]
 8016a20:	4a42      	ldr	r2, [pc, #264]	@ (8016b2c <mg_to_size_t+0x128>)
 8016a22:	fba2 2303 	umull	r2, r3, r2, r3
 8016a26:	08db      	lsrs	r3, r3, #3
 8016a28:	617b      	str	r3, [r7, #20]
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	623b      	str	r3, [r7, #32]
 8016a2e:	2300      	movs	r3, #0
 8016a30:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8016a32:	e002      	b.n	8016a3a <mg_to_size_t+0x36>
 8016a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a36:	3301      	adds	r3, #1
 8016a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	d20b      	bcs.n	8016a5a <mg_to_size_t+0x56>
 8016a42:	68ba      	ldr	r2, [r7, #8]
 8016a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a46:	4413      	add	r3, r2
 8016a48:	781b      	ldrb	r3, [r3, #0]
 8016a4a:	2b20      	cmp	r3, #32
 8016a4c:	d0f2      	beq.n	8016a34 <mg_to_size_t+0x30>
 8016a4e:	68ba      	ldr	r2, [r7, #8]
 8016a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a52:	4413      	add	r3, r2
 8016a54:	781b      	ldrb	r3, [r3, #0]
 8016a56:	2b09      	cmp	r3, #9
 8016a58:	d0ec      	beq.n	8016a34 <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a5e:	429a      	cmp	r2, r3
 8016a60:	d22b      	bcs.n	8016aba <mg_to_size_t+0xb6>
 8016a62:	68ba      	ldr	r2, [r7, #8]
 8016a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a66:	4413      	add	r3, r2
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8016a6c:	d125      	bne.n	8016aba <mg_to_size_t+0xb6>
 8016a6e:	2300      	movs	r3, #0
 8016a70:	e056      	b.n	8016b20 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 8016a72:	68ba      	ldr	r2, [r7, #8]
 8016a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a76:	4413      	add	r3, r2
 8016a78:	781b      	ldrb	r3, [r3, #0]
 8016a7a:	3b30      	subs	r3, #48	@ 0x30
 8016a7c:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 8016a7e:	6a3a      	ldr	r2, [r7, #32]
 8016a80:	697b      	ldr	r3, [r7, #20]
 8016a82:	429a      	cmp	r2, r3
 8016a84:	d901      	bls.n	8016a8a <mg_to_size_t+0x86>
 8016a86:	2300      	movs	r3, #0
 8016a88:	e04a      	b.n	8016b20 <mg_to_size_t+0x11c>
    result *= 10;
 8016a8a:	6a3a      	ldr	r2, [r7, #32]
 8016a8c:	4613      	mov	r3, r2
 8016a8e:	009b      	lsls	r3, r3, #2
 8016a90:	4413      	add	r3, r2
 8016a92:	005b      	lsls	r3, r3, #1
 8016a94:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 8016a96:	69ba      	ldr	r2, [r7, #24]
 8016a98:	693b      	ldr	r3, [r7, #16]
 8016a9a:	1ad3      	subs	r3, r2, r3
 8016a9c:	6a3a      	ldr	r2, [r7, #32]
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	d901      	bls.n	8016aa6 <mg_to_size_t+0xa2>
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	e03c      	b.n	8016b20 <mg_to_size_t+0x11c>
    result += digit;
 8016aa6:	6a3a      	ldr	r2, [r7, #32]
 8016aa8:	693b      	ldr	r3, [r7, #16]
 8016aaa:	4413      	add	r3, r2
 8016aac:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 8016aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ab0:	3301      	adds	r3, #1
 8016ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8016ab4:	69fb      	ldr	r3, [r7, #28]
 8016ab6:	3301      	adds	r3, #1
 8016ab8:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	d20f      	bcs.n	8016ae2 <mg_to_size_t+0xde>
 8016ac2:	68ba      	ldr	r2, [r7, #8]
 8016ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ac6:	4413      	add	r3, r2
 8016ac8:	781b      	ldrb	r3, [r3, #0]
 8016aca:	2b2f      	cmp	r3, #47	@ 0x2f
 8016acc:	d909      	bls.n	8016ae2 <mg_to_size_t+0xde>
 8016ace:	68ba      	ldr	r2, [r7, #8]
 8016ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ad2:	4413      	add	r3, r2
 8016ad4:	781b      	ldrb	r3, [r3, #0]
 8016ad6:	2b39      	cmp	r3, #57	@ 0x39
 8016ad8:	d9cb      	bls.n	8016a72 <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8016ada:	e002      	b.n	8016ae2 <mg_to_size_t+0xde>
 8016adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ade:	3301      	adds	r3, #1
 8016ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d20b      	bcs.n	8016b02 <mg_to_size_t+0xfe>
 8016aea:	68ba      	ldr	r2, [r7, #8]
 8016aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aee:	4413      	add	r3, r2
 8016af0:	781b      	ldrb	r3, [r3, #0]
 8016af2:	2b20      	cmp	r3, #32
 8016af4:	d0f2      	beq.n	8016adc <mg_to_size_t+0xd8>
 8016af6:	68ba      	ldr	r2, [r7, #8]
 8016af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016afa:	4413      	add	r3, r2
 8016afc:	781b      	ldrb	r3, [r3, #0]
 8016afe:	2b09      	cmp	r3, #9
 8016b00:	d0ec      	beq.n	8016adc <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8016b02:	69fb      	ldr	r3, [r7, #28]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d101      	bne.n	8016b0c <mg_to_size_t+0x108>
 8016b08:	2300      	movs	r3, #0
 8016b0a:	e009      	b.n	8016b20 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b10:	429a      	cmp	r2, r3
 8016b12:	d001      	beq.n	8016b18 <mg_to_size_t+0x114>
 8016b14:	2300      	movs	r3, #0
 8016b16:	e003      	b.n	8016b20 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	6a3a      	ldr	r2, [r7, #32]
 8016b1c:	601a      	str	r2, [r3, #0]
  return true;
 8016b1e:	2301      	movs	r3, #1
}
 8016b20:	4618      	mov	r0, r3
 8016b22:	372c      	adds	r7, #44	@ 0x2c
 8016b24:	46bd      	mov	sp, r7
 8016b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2a:	4770      	bx	lr
 8016b2c:	cccccccd 	.word	0xcccccccd

08016b30 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8016b30:	b082      	sub	sp, #8
 8016b32:	b580      	push	{r7, lr}
 8016b34:	b08e      	sub	sp, #56	@ 0x38
 8016b36:	af02      	add	r7, sp, #8
 8016b38:	60f8      	str	r0, [r7, #12]
 8016b3a:	1d38      	adds	r0, r7, #4
 8016b3c:	e880 0006 	stmia.w	r0, {r1, r2}
 8016b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8016b42:	f107 0310 	add.w	r3, r7, #16
 8016b46:	2200      	movs	r2, #0
 8016b48:	2100      	movs	r1, #0
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	f00a fe97 	bl	802187e <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8016b50:	e023      	b.n	8016b9a <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8016b52:	f107 0318 	add.w	r3, r7, #24
 8016b56:	f107 0220 	add.w	r2, r7, #32
 8016b5a:	213d      	movs	r1, #61	@ 0x3d
 8016b5c:	9100      	str	r1, [sp, #0]
 8016b5e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8016b62:	c903      	ldmia	r1, {r0, r1}
 8016b64:	f00b f835 	bl	8021bd2 <mg_span>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d015      	beq.n	8016b9a <mg_http_var+0x6a>
 8016b6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d111      	bne.n	8016b9a <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8016b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016b78:	6a39      	ldr	r1, [r7, #32]
 8016b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	f7ff ff01 	bl	8016984 <mg_ncasecmp>
 8016b82:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d108      	bne.n	8016b9a <mg_http_var+0x6a>
      result = v;
 8016b88:	f107 0310 	add.w	r3, r7, #16
 8016b8c:	f107 0218 	add.w	r2, r7, #24
 8016b90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016b94:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8016b98:	e00b      	b.n	8016bb2 <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 8016b9a:	1d3b      	adds	r3, r7, #4
 8016b9c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8016ba0:	2126      	movs	r1, #38	@ 0x26
 8016ba2:	9100      	str	r1, [sp, #0]
 8016ba4:	1d39      	adds	r1, r7, #4
 8016ba6:	c903      	ldmia	r1, {r0, r1}
 8016ba8:	f00b f813 	bl	8021bd2 <mg_span>
 8016bac:	4603      	mov	r3, r0
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d1cf      	bne.n	8016b52 <mg_http_var+0x22>
    }
  }
  return result;
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	461a      	mov	r2, r3
 8016bb6:	f107 0310 	add.w	r3, r7, #16
 8016bba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016bbe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8016bc2:	68f8      	ldr	r0, [r7, #12]
 8016bc4:	3730      	adds	r7, #48	@ 0x30
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016bcc:	b002      	add	sp, #8
 8016bce:	4770      	bx	lr

08016bd0 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	b08c      	sub	sp, #48	@ 0x30
 8016bd4:	af02      	add	r7, sp, #8
 8016bd6:	60f8      	str	r0, [r7, #12]
 8016bd8:	60b9      	str	r1, [r7, #8]
 8016bda:	607a      	str	r2, [r7, #4]
 8016bdc:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d005      	beq.n	8016bf0 <mg_http_get_var+0x20>
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d002      	beq.n	8016bf0 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	2200      	movs	r2, #0
 8016bee:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d002      	beq.n	8016bfc <mg_http_get_var+0x2c>
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d103      	bne.n	8016c04 <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 8016bfc:	f06f 0301 	mvn.w	r3, #1
 8016c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8016c02:	e033      	b.n	8016c6c <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d006      	beq.n	8016c1a <mg_http_get_var+0x4a>
 8016c0c:	68bb      	ldr	r3, [r7, #8]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d003      	beq.n	8016c1a <mg_http_get_var+0x4a>
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	685b      	ldr	r3, [r3, #4]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d103      	bne.n	8016c22 <mg_http_get_var+0x52>
    len = -1;  // Bad source
 8016c1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016c20:	e024      	b.n	8016c6c <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8016c22:	f107 031c 	add.w	r3, r7, #28
 8016c26:	68b9      	ldr	r1, [r7, #8]
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f00a fe0b 	bl	8021844 <mg_str_s>
 8016c2e:	f107 0014 	add.w	r0, r7, #20
 8016c32:	68fa      	ldr	r2, [r7, #12]
 8016c34:	6a3b      	ldr	r3, [r7, #32]
 8016c36:	9300      	str	r3, [sp, #0]
 8016c38:	69fb      	ldr	r3, [r7, #28]
 8016c3a:	ca06      	ldmia	r2, {r1, r2}
 8016c3c:	f7ff ff78 	bl	8016b30 <mg_http_var>
    if (v.buf == NULL) {
 8016c40:	697b      	ldr	r3, [r7, #20]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d103      	bne.n	8016c4e <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 8016c46:	f06f 0303 	mvn.w	r3, #3
 8016c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8016c4c:	e00e      	b.n	8016c6c <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8016c4e:	6978      	ldr	r0, [r7, #20]
 8016c50:	69b9      	ldr	r1, [r7, #24]
 8016c52:	2301      	movs	r3, #1
 8016c54:	9300      	str	r3, [sp, #0]
 8016c56:	683b      	ldr	r3, [r7, #0]
 8016c58:	687a      	ldr	r2, [r7, #4]
 8016c5a:	f000 f82e 	bl	8016cba <mg_url_decode>
 8016c5e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8016c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	da02      	bge.n	8016c6c <mg_http_get_var+0x9c>
 8016c66:	f06f 0302 	mvn.w	r3, #2
 8016c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 8016c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	3728      	adds	r7, #40	@ 0x28
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}

08016c76 <isx>:

static bool isx(int c) {
 8016c76:	b480      	push	{r7}
 8016c78:	b083      	sub	sp, #12
 8016c7a:	af00      	add	r7, sp, #0
 8016c7c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	2b2f      	cmp	r3, #47	@ 0x2f
 8016c82:	dd02      	ble.n	8016c8a <isx+0x14>
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	2b39      	cmp	r3, #57	@ 0x39
 8016c88:	dd0b      	ble.n	8016ca2 <isx+0x2c>
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	2b60      	cmp	r3, #96	@ 0x60
 8016c8e:	dd02      	ble.n	8016c96 <isx+0x20>
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2b66      	cmp	r3, #102	@ 0x66
 8016c94:	dd05      	ble.n	8016ca2 <isx+0x2c>
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	2b40      	cmp	r3, #64	@ 0x40
 8016c9a:	dd04      	ble.n	8016ca6 <isx+0x30>
         (c >= 'A' && c <= 'F');
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	2b46      	cmp	r3, #70	@ 0x46
 8016ca0:	dc01      	bgt.n	8016ca6 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	e000      	b.n	8016ca8 <isx+0x32>
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	f003 0301 	and.w	r3, r3, #1
 8016cac:	b2db      	uxtb	r3, r3
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	370c      	adds	r7, #12
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb8:	4770      	bx	lr

08016cba <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8016cba:	b580      	push	{r7, lr}
 8016cbc:	b08a      	sub	sp, #40	@ 0x28
 8016cbe:	af02      	add	r7, sp, #8
 8016cc0:	60f8      	str	r0, [r7, #12]
 8016cc2:	60b9      	str	r1, [r7, #8]
 8016cc4:	607a      	str	r2, [r7, #4]
 8016cc6:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8016cc8:	2300      	movs	r3, #0
 8016cca:	61bb      	str	r3, [r7, #24]
 8016ccc:	69bb      	ldr	r3, [r7, #24]
 8016cce:	61fb      	str	r3, [r7, #28]
 8016cd0:	e059      	b.n	8016d86 <mg_url_decode+0xcc>
    if (src[i] == '%') {
 8016cd2:	68fa      	ldr	r2, [r7, #12]
 8016cd4:	69fb      	ldr	r3, [r7, #28]
 8016cd6:	4413      	add	r3, r2
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	2b25      	cmp	r3, #37	@ 0x25
 8016cdc:	d136      	bne.n	8016d4c <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8016cde:	69fb      	ldr	r3, [r7, #28]
 8016ce0:	3302      	adds	r3, #2
 8016ce2:	68ba      	ldr	r2, [r7, #8]
 8016ce4:	429a      	cmp	r2, r3
 8016ce6:	d92e      	bls.n	8016d46 <mg_url_decode+0x8c>
 8016ce8:	69fb      	ldr	r3, [r7, #28]
 8016cea:	3301      	adds	r3, #1
 8016cec:	68fa      	ldr	r2, [r7, #12]
 8016cee:	4413      	add	r3, r2
 8016cf0:	781b      	ldrb	r3, [r3, #0]
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f7ff ffbf 	bl	8016c76 <isx>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d023      	beq.n	8016d46 <mg_url_decode+0x8c>
 8016cfe:	69fb      	ldr	r3, [r7, #28]
 8016d00:	3302      	adds	r3, #2
 8016d02:	68fa      	ldr	r2, [r7, #12]
 8016d04:	4413      	add	r3, r2
 8016d06:	781b      	ldrb	r3, [r3, #0]
 8016d08:	4618      	mov	r0, r3
 8016d0a:	f7ff ffb4 	bl	8016c76 <isx>
 8016d0e:	4603      	mov	r3, r0
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d018      	beq.n	8016d46 <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8016d14:	69fb      	ldr	r3, [r7, #28]
 8016d16:	3301      	adds	r3, #1
 8016d18:	68fa      	ldr	r2, [r7, #12]
 8016d1a:	18d1      	adds	r1, r2, r3
 8016d1c:	f107 0310 	add.w	r3, r7, #16
 8016d20:	2202      	movs	r2, #2
 8016d22:	4618      	mov	r0, r3
 8016d24:	f00a fdab 	bl	802187e <mg_str_n>
 8016d28:	687a      	ldr	r2, [r7, #4]
 8016d2a:	69bb      	ldr	r3, [r7, #24]
 8016d2c:	4413      	add	r3, r2
 8016d2e:	2201      	movs	r2, #1
 8016d30:	9200      	str	r2, [sp, #0]
 8016d32:	2210      	movs	r2, #16
 8016d34:	f107 0110 	add.w	r1, r7, #16
 8016d38:	c903      	ldmia	r1, {r0, r1}
 8016d3a:	f00a ffa7 	bl	8021c8c <mg_str_to_num>
        i += 2;
 8016d3e:	69fb      	ldr	r3, [r7, #28]
 8016d40:	3302      	adds	r3, #2
 8016d42:	61fb      	str	r3, [r7, #28]
 8016d44:	e019      	b.n	8016d7a <mg_url_decode+0xc0>
      } else {
        return -1;
 8016d46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016d4a:	e03a      	b.n	8016dc2 <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8016d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d00b      	beq.n	8016d6a <mg_url_decode+0xb0>
 8016d52:	68fa      	ldr	r2, [r7, #12]
 8016d54:	69fb      	ldr	r3, [r7, #28]
 8016d56:	4413      	add	r3, r2
 8016d58:	781b      	ldrb	r3, [r3, #0]
 8016d5a:	2b2b      	cmp	r3, #43	@ 0x2b
 8016d5c:	d105      	bne.n	8016d6a <mg_url_decode+0xb0>
      dst[j] = ' ';
 8016d5e:	687a      	ldr	r2, [r7, #4]
 8016d60:	69bb      	ldr	r3, [r7, #24]
 8016d62:	4413      	add	r3, r2
 8016d64:	2220      	movs	r2, #32
 8016d66:	701a      	strb	r2, [r3, #0]
 8016d68:	e007      	b.n	8016d7a <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 8016d6a:	68fa      	ldr	r2, [r7, #12]
 8016d6c:	69fb      	ldr	r3, [r7, #28]
 8016d6e:	441a      	add	r2, r3
 8016d70:	6879      	ldr	r1, [r7, #4]
 8016d72:	69bb      	ldr	r3, [r7, #24]
 8016d74:	440b      	add	r3, r1
 8016d76:	7812      	ldrb	r2, [r2, #0]
 8016d78:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8016d7a:	69fb      	ldr	r3, [r7, #28]
 8016d7c:	3301      	adds	r3, #1
 8016d7e:	61fb      	str	r3, [r7, #28]
 8016d80:	69bb      	ldr	r3, [r7, #24]
 8016d82:	3301      	adds	r3, #1
 8016d84:	61bb      	str	r3, [r7, #24]
 8016d86:	69fa      	ldr	r2, [r7, #28]
 8016d88:	68bb      	ldr	r3, [r7, #8]
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	d204      	bcs.n	8016d98 <mg_url_decode+0xde>
 8016d8e:	69bb      	ldr	r3, [r7, #24]
 8016d90:	3301      	adds	r3, #1
 8016d92:	683a      	ldr	r2, [r7, #0]
 8016d94:	429a      	cmp	r2, r3
 8016d96:	d89c      	bhi.n	8016cd2 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8016d98:	69ba      	ldr	r2, [r7, #24]
 8016d9a:	683b      	ldr	r3, [r7, #0]
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d204      	bcs.n	8016daa <mg_url_decode+0xf0>
 8016da0:	687a      	ldr	r2, [r7, #4]
 8016da2:	69bb      	ldr	r3, [r7, #24]
 8016da4:	4413      	add	r3, r2
 8016da6:	2200      	movs	r2, #0
 8016da8:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8016daa:	69fa      	ldr	r2, [r7, #28]
 8016dac:	68bb      	ldr	r3, [r7, #8]
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d305      	bcc.n	8016dbe <mg_url_decode+0x104>
 8016db2:	69ba      	ldr	r2, [r7, #24]
 8016db4:	683b      	ldr	r3, [r7, #0]
 8016db6:	429a      	cmp	r2, r3
 8016db8:	d201      	bcs.n	8016dbe <mg_url_decode+0x104>
 8016dba:	69bb      	ldr	r3, [r7, #24]
 8016dbc:	e001      	b.n	8016dc2 <mg_url_decode+0x108>
 8016dbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	3720      	adds	r7, #32
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bd80      	pop	{r7, pc}

08016dca <isok>:

static bool isok(uint8_t c) {
 8016dca:	b480      	push	{r7}
 8016dcc:	b083      	sub	sp, #12
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 8016dd4:	79fb      	ldrb	r3, [r7, #7]
 8016dd6:	2b0a      	cmp	r3, #10
 8016dd8:	d008      	beq.n	8016dec <isok+0x22>
 8016dda:	79fb      	ldrb	r3, [r7, #7]
 8016ddc:	2b0d      	cmp	r3, #13
 8016dde:	d005      	beq.n	8016dec <isok+0x22>
 8016de0:	79fb      	ldrb	r3, [r7, #7]
 8016de2:	2b09      	cmp	r3, #9
 8016de4:	d002      	beq.n	8016dec <isok+0x22>
 8016de6:	79fb      	ldrb	r3, [r7, #7]
 8016de8:	2b1f      	cmp	r3, #31
 8016dea:	d901      	bls.n	8016df0 <isok+0x26>
 8016dec:	2301      	movs	r3, #1
 8016dee:	e000      	b.n	8016df2 <isok+0x28>
 8016df0:	2300      	movs	r3, #0
 8016df2:	f003 0301 	and.w	r3, r3, #1
 8016df6:	b2db      	uxtb	r3, r3
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	370c      	adds	r7, #12
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e02:	4770      	bx	lr

08016e04 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b084      	sub	sp, #16
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
 8016e0c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 8016e0e:	2300      	movs	r3, #0
 8016e10:	60fb      	str	r3, [r7, #12]
 8016e12:	e03c      	b.n	8016e8e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 8016e14:	687a      	ldr	r2, [r7, #4]
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	4413      	add	r3, r2
 8016e1a:	781b      	ldrb	r3, [r3, #0]
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	f7ff ffd4 	bl	8016dca <isok>
 8016e22:	4603      	mov	r3, r0
 8016e24:	f083 0301 	eor.w	r3, r3, #1
 8016e28:	b2db      	uxtb	r3, r3
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d002      	beq.n	8016e34 <mg_http_get_request_len+0x30>
 8016e2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016e32:	e031      	b.n	8016e98 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d00c      	beq.n	8016e54 <mg_http_get_request_len+0x50>
 8016e3a:	687a      	ldr	r2, [r7, #4]
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	4413      	add	r3, r2
 8016e40:	781b      	ldrb	r3, [r3, #0]
 8016e42:	2b0a      	cmp	r3, #10
 8016e44:	d106      	bne.n	8016e54 <mg_http_get_request_len+0x50>
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	3b01      	subs	r3, #1
 8016e4a:	687a      	ldr	r2, [r7, #4]
 8016e4c:	4413      	add	r3, r2
 8016e4e:	781b      	ldrb	r3, [r3, #0]
 8016e50:	2b0a      	cmp	r3, #10
 8016e52:	d016      	beq.n	8016e82 <mg_http_get_request_len+0x7e>
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	2b03      	cmp	r3, #3
 8016e58:	d916      	bls.n	8016e88 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8016e5a:	687a      	ldr	r2, [r7, #4]
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	4413      	add	r3, r2
 8016e60:	781b      	ldrb	r3, [r3, #0]
 8016e62:	2b0a      	cmp	r3, #10
 8016e64:	d110      	bne.n	8016e88 <mg_http_get_request_len+0x84>
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	3b01      	subs	r3, #1
 8016e6a:	687a      	ldr	r2, [r7, #4]
 8016e6c:	4413      	add	r3, r2
 8016e6e:	781b      	ldrb	r3, [r3, #0]
 8016e70:	2b0d      	cmp	r3, #13
 8016e72:	d109      	bne.n	8016e88 <mg_http_get_request_len+0x84>
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	3b02      	subs	r3, #2
 8016e78:	687a      	ldr	r2, [r7, #4]
 8016e7a:	4413      	add	r3, r2
 8016e7c:	781b      	ldrb	r3, [r3, #0]
 8016e7e:	2b0a      	cmp	r3, #10
 8016e80:	d102      	bne.n	8016e88 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	3301      	adds	r3, #1
 8016e86:	e007      	b.n	8016e98 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	3301      	adds	r3, #1
 8016e8c:	60fb      	str	r3, [r7, #12]
 8016e8e:	68fa      	ldr	r2, [r7, #12]
 8016e90:	683b      	ldr	r3, [r7, #0]
 8016e92:	429a      	cmp	r2, r3
 8016e94:	d3be      	bcc.n	8016e14 <mg_http_get_request_len+0x10>
  }
  return 0;
 8016e96:	2300      	movs	r3, #0
}
 8016e98:	4618      	mov	r0, r3
 8016e9a:	3710      	adds	r7, #16
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	bd80      	pop	{r7, pc}

08016ea0 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b088      	sub	sp, #32
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
 8016ea8:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8016eaa:	6838      	ldr	r0, [r7, #0]
 8016eac:	f7e9 f9f8 	bl	80002a0 <strlen>
 8016eb0:	61b8      	str	r0, [r7, #24]
 8016eb2:	231e      	movs	r3, #30
 8016eb4:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	61fb      	str	r3, [r7, #28]
 8016eba:	e01f      	b.n	8016efc <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8016ebc:	69fb      	ldr	r3, [r7, #28]
 8016ebe:	3302      	adds	r3, #2
 8016ec0:	011b      	lsls	r3, r3, #4
 8016ec2:	687a      	ldr	r2, [r7, #4]
 8016ec4:	4413      	add	r3, r2
 8016ec6:	613b      	str	r3, [r7, #16]
 8016ec8:	69fb      	ldr	r3, [r7, #28]
 8016eca:	011b      	lsls	r3, r3, #4
 8016ecc:	3328      	adds	r3, #40	@ 0x28
 8016ece:	687a      	ldr	r2, [r7, #4]
 8016ed0:	4413      	add	r3, r2
 8016ed2:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8016ed4:	693b      	ldr	r3, [r7, #16]
 8016ed6:	685b      	ldr	r3, [r3, #4]
 8016ed8:	69ba      	ldr	r2, [r7, #24]
 8016eda:	429a      	cmp	r2, r3
 8016edc:	d10b      	bne.n	8016ef6 <mg_http_get_header+0x56>
 8016ede:	693b      	ldr	r3, [r7, #16]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	69ba      	ldr	r2, [r7, #24]
 8016ee4:	6839      	ldr	r1, [r7, #0]
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7ff fd4c 	bl	8016984 <mg_ncasecmp>
 8016eec:	4603      	mov	r3, r0
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d101      	bne.n	8016ef6 <mg_http_get_header+0x56>
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	e010      	b.n	8016f18 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8016ef6:	69fb      	ldr	r3, [r7, #28]
 8016ef8:	3301      	adds	r3, #1
 8016efa:	61fb      	str	r3, [r7, #28]
 8016efc:	69fa      	ldr	r2, [r7, #28]
 8016efe:	697b      	ldr	r3, [r7, #20]
 8016f00:	429a      	cmp	r2, r3
 8016f02:	d208      	bcs.n	8016f16 <mg_http_get_header+0x76>
 8016f04:	687a      	ldr	r2, [r7, #4]
 8016f06:	69fb      	ldr	r3, [r7, #28]
 8016f08:	3302      	adds	r3, #2
 8016f0a:	011b      	lsls	r3, r3, #4
 8016f0c:	4413      	add	r3, r2
 8016f0e:	3304      	adds	r3, #4
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d1d2      	bne.n	8016ebc <mg_http_get_header+0x1c>
  }
  return NULL;
 8016f16:	2300      	movs	r3, #0
}
 8016f18:	4618      	mov	r0, r3
 8016f1a:	3720      	adds	r7, #32
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	bd80      	pop	{r7, pc}

08016f20 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 8016f20:	b480      	push	{r7}
 8016f22:	b083      	sub	sp, #12
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	4603      	mov	r3, r0
 8016f28:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 8016f2a:	79fb      	ldrb	r3, [r7, #7]
 8016f2c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8016f30:	2b80      	cmp	r3, #128	@ 0x80
 8016f32:	bf0c      	ite	eq
 8016f34:	2301      	moveq	r3, #1
 8016f36:	2300      	movne	r3, #0
 8016f38:	b2db      	uxtb	r3, r3
}
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	370c      	adds	r7, #12
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f44:	4770      	bx	lr

08016f46 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 8016f46:	b580      	push	{r7, lr}
 8016f48:	b086      	sub	sp, #24
 8016f4a:	af00      	add	r7, sp, #0
 8016f4c:	6078      	str	r0, [r7, #4]
 8016f4e:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	617b      	str	r3, [r7, #20]
 8016f54:	697b      	ldr	r3, [r7, #20]
 8016f56:	781b      	ldrb	r3, [r3, #0]
 8016f58:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 8016f5a:	683a      	ldr	r2, [r7, #0]
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	1ad3      	subs	r3, r2, r3
 8016f60:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8016f62:	7cfb      	ldrb	r3, [r7, #19]
 8016f64:	2b20      	cmp	r3, #32
 8016f66:	d904      	bls.n	8016f72 <clen+0x2c>
 8016f68:	7cfb      	ldrb	r3, [r7, #19]
 8016f6a:	2b7d      	cmp	r3, #125	@ 0x7d
 8016f6c:	d801      	bhi.n	8016f72 <clen+0x2c>
 8016f6e:	2301      	movs	r3, #1
 8016f70:	e054      	b.n	801701c <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8016f72:	7cfb      	ldrb	r3, [r7, #19]
 8016f74:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8016f78:	2bc0      	cmp	r3, #192	@ 0xc0
 8016f7a:	d10d      	bne.n	8016f98 <clen+0x52>
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	2b01      	cmp	r3, #1
 8016f80:	dd0a      	ble.n	8016f98 <clen+0x52>
 8016f82:	697b      	ldr	r3, [r7, #20]
 8016f84:	3301      	adds	r3, #1
 8016f86:	781b      	ldrb	r3, [r3, #0]
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f7ff ffc9 	bl	8016f20 <vcb>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d001      	beq.n	8016f98 <clen+0x52>
 8016f94:	2302      	movs	r3, #2
 8016f96:	e041      	b.n	801701c <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8016f98:	7cfb      	ldrb	r3, [r7, #19]
 8016f9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016f9e:	2be0      	cmp	r3, #224	@ 0xe0
 8016fa0:	d116      	bne.n	8016fd0 <clen+0x8a>
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	2b02      	cmp	r3, #2
 8016fa6:	dd13      	ble.n	8016fd0 <clen+0x8a>
 8016fa8:	697b      	ldr	r3, [r7, #20]
 8016faa:	3301      	adds	r3, #1
 8016fac:	781b      	ldrb	r3, [r3, #0]
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f7ff ffb6 	bl	8016f20 <vcb>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d00a      	beq.n	8016fd0 <clen+0x8a>
 8016fba:	697b      	ldr	r3, [r7, #20]
 8016fbc:	3302      	adds	r3, #2
 8016fbe:	781b      	ldrb	r3, [r3, #0]
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f7ff ffad 	bl	8016f20 <vcb>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d001      	beq.n	8016fd0 <clen+0x8a>
 8016fcc:	2303      	movs	r3, #3
 8016fce:	e025      	b.n	801701c <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8016fd0:	7cfb      	ldrb	r3, [r7, #19]
 8016fd2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8016fd6:	2bf0      	cmp	r3, #240	@ 0xf0
 8016fd8:	d11f      	bne.n	801701a <clen+0xd4>
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	2b03      	cmp	r3, #3
 8016fde:	dd1c      	ble.n	801701a <clen+0xd4>
 8016fe0:	697b      	ldr	r3, [r7, #20]
 8016fe2:	3301      	adds	r3, #1
 8016fe4:	781b      	ldrb	r3, [r3, #0]
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f7ff ff9a 	bl	8016f20 <vcb>
 8016fec:	4603      	mov	r3, r0
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d013      	beq.n	801701a <clen+0xd4>
 8016ff2:	697b      	ldr	r3, [r7, #20]
 8016ff4:	3302      	adds	r3, #2
 8016ff6:	781b      	ldrb	r3, [r3, #0]
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7ff ff91 	bl	8016f20 <vcb>
 8016ffe:	4603      	mov	r3, r0
 8017000:	2b00      	cmp	r3, #0
 8017002:	d00a      	beq.n	801701a <clen+0xd4>
 8017004:	697b      	ldr	r3, [r7, #20]
 8017006:	3303      	adds	r3, #3
 8017008:	781b      	ldrb	r3, [r3, #0]
 801700a:	4618      	mov	r0, r3
 801700c:	f7ff ff88 	bl	8016f20 <vcb>
 8017010:	4603      	mov	r3, r0
 8017012:	2b00      	cmp	r3, #0
 8017014:	d001      	beq.n	801701a <clen+0xd4>
    return 4;
 8017016:	2304      	movs	r3, #4
 8017018:	e000      	b.n	801701c <clen+0xd6>
  return 0;
 801701a:	2300      	movs	r3, #0
}
 801701c:	4618      	mov	r0, r3
 801701e:	3718      	adds	r7, #24
 8017020:	46bd      	mov	sp, r7
 8017022:	bd80      	pop	{r7, pc}

08017024 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 8017024:	b480      	push	{r7}
 8017026:	b085      	sub	sp, #20
 8017028:	af00      	add	r7, sp, #0
 801702a:	60f8      	str	r0, [r7, #12]
 801702c:	60b9      	str	r1, [r7, #8]
 801702e:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	68fa      	ldr	r2, [r7, #12]
 8017034:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8017036:	e007      	b.n	8017048 <skiptorn+0x24>
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	3301      	adds	r3, #1
 801703c:	60fb      	str	r3, [r7, #12]
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	685b      	ldr	r3, [r3, #4]
 8017042:	1c5a      	adds	r2, r3, #1
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	605a      	str	r2, [r3, #4]
 8017048:	68fa      	ldr	r2, [r7, #12]
 801704a:	68bb      	ldr	r3, [r7, #8]
 801704c:	429a      	cmp	r2, r3
 801704e:	d207      	bcs.n	8017060 <skiptorn+0x3c>
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	781b      	ldrb	r3, [r3, #0]
 8017054:	2b0a      	cmp	r3, #10
 8017056:	d003      	beq.n	8017060 <skiptorn+0x3c>
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	2b0d      	cmp	r3, #13
 801705e:	d1eb      	bne.n	8017038 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8017060:	68fa      	ldr	r2, [r7, #12]
 8017062:	68bb      	ldr	r3, [r7, #8]
 8017064:	429a      	cmp	r2, r3
 8017066:	d208      	bcs.n	801707a <skiptorn+0x56>
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	781b      	ldrb	r3, [r3, #0]
 801706c:	2b0d      	cmp	r3, #13
 801706e:	d106      	bne.n	801707e <skiptorn+0x5a>
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	3301      	adds	r3, #1
 8017074:	781b      	ldrb	r3, [r3, #0]
 8017076:	2b0a      	cmp	r3, #10
 8017078:	d001      	beq.n	801707e <skiptorn+0x5a>
 801707a:	2300      	movs	r3, #0
 801707c:	e017      	b.n	80170ae <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801707e:	68fa      	ldr	r2, [r7, #12]
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	429a      	cmp	r2, r3
 8017084:	d206      	bcs.n	8017094 <skiptorn+0x70>
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	781b      	ldrb	r3, [r3, #0]
 801708a:	2b0d      	cmp	r3, #13
 801708c:	d102      	bne.n	8017094 <skiptorn+0x70>
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	3301      	adds	r3, #1
 8017092:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8017094:	68fa      	ldr	r2, [r7, #12]
 8017096:	68bb      	ldr	r3, [r7, #8]
 8017098:	429a      	cmp	r2, r3
 801709a:	d205      	bcs.n	80170a8 <skiptorn+0x84>
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	1c5a      	adds	r2, r3, #1
 80170a0:	60fa      	str	r2, [r7, #12]
 80170a2:	781b      	ldrb	r3, [r3, #0]
 80170a4:	2b0a      	cmp	r3, #10
 80170a6:	d001      	beq.n	80170ac <skiptorn+0x88>
 80170a8:	2300      	movs	r3, #0
 80170aa:	e000      	b.n	80170ae <skiptorn+0x8a>
  return s;
 80170ac:	68fb      	ldr	r3, [r7, #12]
}
 80170ae:	4618      	mov	r0, r3
 80170b0:	3714      	adds	r7, #20
 80170b2:	46bd      	mov	sp, r7
 80170b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b8:	4770      	bx	lr

080170ba <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 80170ba:	b580      	push	{r7, lr}
 80170bc:	b08a      	sub	sp, #40	@ 0x28
 80170be:	af00      	add	r7, sp, #0
 80170c0:	60f8      	str	r0, [r7, #12]
 80170c2:	60b9      	str	r1, [r7, #8]
 80170c4:	607a      	str	r2, [r7, #4]
 80170c6:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 80170c8:	2300      	movs	r3, #0
 80170ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80170cc:	e09a      	b.n	8017204 <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 80170ce:	2300      	movs	r3, #0
 80170d0:	61bb      	str	r3, [r7, #24]
 80170d2:	2300      	movs	r3, #0
 80170d4:	61fb      	str	r3, [r7, #28]
 80170d6:	2300      	movs	r3, #0
 80170d8:	613b      	str	r3, [r7, #16]
 80170da:	2300      	movs	r3, #0
 80170dc:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 80170de:	68fa      	ldr	r2, [r7, #12]
 80170e0:	68bb      	ldr	r3, [r7, #8]
 80170e2:	429a      	cmp	r2, r3
 80170e4:	d301      	bcc.n	80170ea <mg_http_parse_headers+0x30>
 80170e6:	2300      	movs	r3, #0
 80170e8:	e092      	b.n	8017210 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	781b      	ldrb	r3, [r3, #0]
 80170ee:	2b0a      	cmp	r3, #10
 80170f0:	f000 808d 	beq.w	801720e <mg_http_parse_headers+0x154>
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	781b      	ldrb	r3, [r3, #0]
 80170f8:	2b0d      	cmp	r3, #13
 80170fa:	d105      	bne.n	8017108 <mg_http_parse_headers+0x4e>
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	3301      	adds	r3, #1
 8017100:	781b      	ldrb	r3, [r3, #0]
 8017102:	2b0a      	cmp	r3, #10
 8017104:	f000 8083 	beq.w	801720e <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801710c:	e007      	b.n	801711e <mg_http_parse_headers+0x64>
 801710e:	68fa      	ldr	r2, [r7, #12]
 8017110:	6a3b      	ldr	r3, [r7, #32]
 8017112:	4413      	add	r3, r2
 8017114:	60fb      	str	r3, [r7, #12]
 8017116:	69fa      	ldr	r2, [r7, #28]
 8017118:	6a3b      	ldr	r3, [r7, #32]
 801711a:	4413      	add	r3, r2
 801711c:	61fb      	str	r3, [r7, #28]
 801711e:	68fa      	ldr	r2, [r7, #12]
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	429a      	cmp	r2, r3
 8017124:	d20b      	bcs.n	801713e <mg_http_parse_headers+0x84>
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	781b      	ldrb	r3, [r3, #0]
 801712a:	2b3a      	cmp	r3, #58	@ 0x3a
 801712c:	d007      	beq.n	801713e <mg_http_parse_headers+0x84>
 801712e:	68b9      	ldr	r1, [r7, #8]
 8017130:	68f8      	ldr	r0, [r7, #12]
 8017132:	f7ff ff08 	bl	8016f46 <clen>
 8017136:	6238      	str	r0, [r7, #32]
 8017138:	6a3b      	ldr	r3, [r7, #32]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d1e7      	bne.n	801710e <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 801713e:	69fb      	ldr	r3, [r7, #28]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d101      	bne.n	8017148 <mg_http_parse_headers+0x8e>
 8017144:	2300      	movs	r3, #0
 8017146:	e063      	b.n	8017210 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8017148:	68fa      	ldr	r2, [r7, #12]
 801714a:	68bb      	ldr	r3, [r7, #8]
 801714c:	429a      	cmp	r2, r3
 801714e:	d206      	bcs.n	801715e <mg_http_parse_headers+0xa4>
 8017150:	68b9      	ldr	r1, [r7, #8]
 8017152:	68f8      	ldr	r0, [r7, #12]
 8017154:	f7ff fef7 	bl	8016f46 <clen>
 8017158:	4603      	mov	r3, r0
 801715a:	2b00      	cmp	r3, #0
 801715c:	d101      	bne.n	8017162 <mg_http_parse_headers+0xa8>
 801715e:	2300      	movs	r3, #0
 8017160:	e056      	b.n	8017210 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	1c5a      	adds	r2, r3, #1
 8017166:	60fa      	str	r2, [r7, #12]
 8017168:	781b      	ldrb	r3, [r3, #0]
 801716a:	2b3a      	cmp	r3, #58	@ 0x3a
 801716c:	d004      	beq.n	8017178 <mg_http_parse_headers+0xbe>
 801716e:	2300      	movs	r3, #0
 8017170:	e04e      	b.n	8017210 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	3301      	adds	r3, #1
 8017176:	60fb      	str	r3, [r7, #12]
 8017178:	68fa      	ldr	r2, [r7, #12]
 801717a:	68bb      	ldr	r3, [r7, #8]
 801717c:	429a      	cmp	r2, r3
 801717e:	d207      	bcs.n	8017190 <mg_http_parse_headers+0xd6>
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	781b      	ldrb	r3, [r3, #0]
 8017184:	2b20      	cmp	r3, #32
 8017186:	d0f4      	beq.n	8017172 <mg_http_parse_headers+0xb8>
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	781b      	ldrb	r3, [r3, #0]
 801718c:	2b09      	cmp	r3, #9
 801718e:	d0f0      	beq.n	8017172 <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8017190:	f107 0310 	add.w	r3, r7, #16
 8017194:	461a      	mov	r2, r3
 8017196:	68b9      	ldr	r1, [r7, #8]
 8017198:	68f8      	ldr	r0, [r7, #12]
 801719a:	f7ff ff43 	bl	8017024 <skiptorn>
 801719e:	60f8      	str	r0, [r7, #12]
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d104      	bne.n	80171b0 <mg_http_parse_headers+0xf6>
 80171a6:	2300      	movs	r3, #0
 80171a8:	e032      	b.n	8017210 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 80171aa:	697b      	ldr	r3, [r7, #20]
 80171ac:	3b01      	subs	r3, #1
 80171ae:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 80171b0:	697b      	ldr	r3, [r7, #20]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d00d      	beq.n	80171d2 <mg_http_parse_headers+0x118>
 80171b6:	693a      	ldr	r2, [r7, #16]
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	3b01      	subs	r3, #1
 80171bc:	4413      	add	r3, r2
 80171be:	781b      	ldrb	r3, [r3, #0]
 80171c0:	2b20      	cmp	r3, #32
 80171c2:	d0f2      	beq.n	80171aa <mg_http_parse_headers+0xf0>
 80171c4:	693a      	ldr	r2, [r7, #16]
 80171c6:	697b      	ldr	r3, [r7, #20]
 80171c8:	3b01      	subs	r3, #1
 80171ca:	4413      	add	r3, r2
 80171cc:	781b      	ldrb	r3, [r3, #0]
 80171ce:	2b09      	cmp	r3, #9
 80171d0:	d0eb      	beq.n	80171aa <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 80171d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171d4:	011b      	lsls	r3, r3, #4
 80171d6:	687a      	ldr	r2, [r7, #4]
 80171d8:	4413      	add	r3, r2
 80171da:	461a      	mov	r2, r3
 80171dc:	f107 0318 	add.w	r3, r7, #24
 80171e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80171e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80171e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171ea:	011b      	lsls	r3, r3, #4
 80171ec:	687a      	ldr	r2, [r7, #4]
 80171ee:	4413      	add	r3, r2
 80171f0:	3308      	adds	r3, #8
 80171f2:	f107 0210 	add.w	r2, r7, #16
 80171f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80171fa:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 80171fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017200:	3301      	adds	r3, #1
 8017202:	627b      	str	r3, [r7, #36]	@ 0x24
 8017204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017206:	683b      	ldr	r3, [r7, #0]
 8017208:	429a      	cmp	r2, r3
 801720a:	f4ff af60 	bcc.w	80170ce <mg_http_parse_headers+0x14>
  }
  return true;
 801720e:	2301      	movs	r3, #1
}
 8017210:	4618      	mov	r0, r3
 8017212:	3728      	adds	r7, #40	@ 0x28
 8017214:	46bd      	mov	sp, r7
 8017216:	bd80      	pop	{r7, pc}

08017218 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8017218:	b580      	push	{r7, lr}
 801721a:	b090      	sub	sp, #64	@ 0x40
 801721c:	af00      	add	r7, sp, #0
 801721e:	60f8      	str	r0, [r7, #12]
 8017220:	60b9      	str	r1, [r7, #8]
 8017222:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8017224:	68b9      	ldr	r1, [r7, #8]
 8017226:	68f8      	ldr	r0, [r7, #12]
 8017228:	f7ff fdec 	bl	8016e04 <mg_http_get_request_len>
 801722c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d003      	beq.n	801723c <mg_http_parse+0x24>
 8017234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017236:	68fa      	ldr	r2, [r7, #12]
 8017238:	4413      	add	r3, r2
 801723a:	e000      	b.n	801723e <mg_http_parse+0x26>
 801723c:	2300      	movs	r3, #0
 801723e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 8017240:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017244:	2100      	movs	r1, #0
 8017246:	6878      	ldr	r0, [r7, #4]
 8017248:	f00e fc02 	bl	8025a50 <memset>
  if (req_len <= 0) return req_len;
 801724c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801724e:	2b00      	cmp	r3, #0
 8017250:	dc01      	bgt.n	8017256 <mg_http_parse+0x3e>
 8017252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017254:	e13f      	b.n	80174d6 <mg_http_parse+0x2be>

  hm->message.buf = hm->head.buf = (char *) s;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	68fa      	ldr	r2, [r7, #12]
 801725a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801726e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8017272:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017280:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	68fa      	ldr	r2, [r7, #12]
 8017294:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8017296:	e009      	b.n	80172ac <mg_http_parse+0x94>
 8017298:	68fa      	ldr	r2, [r7, #12]
 801729a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801729c:	4413      	add	r3, r2
 801729e:	60fb      	str	r3, [r7, #12]
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	685a      	ldr	r2, [r3, #4]
 80172a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172a6:	441a      	add	r2, r3
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	605a      	str	r2, [r3, #4]
 80172ac:	68fa      	ldr	r2, [r7, #12]
 80172ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d20b      	bcs.n	80172cc <mg_http_parse+0xb4>
 80172b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80172b6:	68f8      	ldr	r0, [r7, #12]
 80172b8:	f7ff fe45 	bl	8016f46 <clen>
 80172bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80172be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d1e9      	bne.n	8017298 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80172c4:	e002      	b.n	80172cc <mg_http_parse+0xb4>
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	3301      	adds	r3, #1
 80172ca:	60fb      	str	r3, [r7, #12]
 80172cc:	68fa      	ldr	r2, [r7, #12]
 80172ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172d0:	429a      	cmp	r2, r3
 80172d2:	d203      	bcs.n	80172dc <mg_http_parse+0xc4>
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	781b      	ldrb	r3, [r3, #0]
 80172d8:	2b20      	cmp	r3, #32
 80172da:	d0f4      	beq.n	80172c6 <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	68fa      	ldr	r2, [r7, #12]
 80172e0:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 80172e2:	e009      	b.n	80172f8 <mg_http_parse+0xe0>
 80172e4:	68fa      	ldr	r2, [r7, #12]
 80172e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172e8:	4413      	add	r3, r2
 80172ea:	60fb      	str	r3, [r7, #12]
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	68da      	ldr	r2, [r3, #12]
 80172f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172f2:	441a      	add	r2, r3
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	60da      	str	r2, [r3, #12]
 80172f8:	68fa      	ldr	r2, [r7, #12]
 80172fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172fc:	429a      	cmp	r2, r3
 80172fe:	d20b      	bcs.n	8017318 <mg_http_parse+0x100>
 8017300:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017302:	68f8      	ldr	r0, [r7, #12]
 8017304:	f7ff fe1f 	bl	8016f46 <clen>
 8017308:	6378      	str	r0, [r7, #52]	@ 0x34
 801730a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801730c:	2b00      	cmp	r3, #0
 801730e:	d1e9      	bne.n	80172e4 <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8017310:	e002      	b.n	8017318 <mg_http_parse+0x100>
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	3301      	adds	r3, #1
 8017316:	60fb      	str	r3, [r7, #12]
 8017318:	68fa      	ldr	r2, [r7, #12]
 801731a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801731c:	429a      	cmp	r2, r3
 801731e:	d203      	bcs.n	8017328 <mg_http_parse+0x110>
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	781b      	ldrb	r3, [r3, #0]
 8017324:	2b20      	cmp	r3, #32
 8017326:	d0f4      	beq.n	8017312 <mg_http_parse+0xfa>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	3318      	adds	r3, #24
 801732c:	461a      	mov	r2, r3
 801732e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017330:	68f8      	ldr	r0, [r7, #12]
 8017332:	f7ff fe77 	bl	8017024 <skiptorn>
 8017336:	60f8      	str	r0, [r7, #12]
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d101      	bne.n	8017342 <mg_http_parse+0x12a>
 801733e:	2300      	movs	r3, #0
 8017340:	e0c9      	b.n	80174d6 <mg_http_parse+0x2be>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	6898      	ldr	r0, [r3, #8]
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	68db      	ldr	r3, [r3, #12]
 801734a:	461a      	mov	r2, r3
 801734c:	213f      	movs	r1, #63	@ 0x3f
 801734e:	f7e8 ff57 	bl	8000200 <memchr>
 8017352:	6338      	str	r0, [r7, #48]	@ 0x30
 8017354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017356:	2b00      	cmp	r3, #0
 8017358:	d015      	beq.n	8017386 <mg_http_parse+0x16e>
    hm->query.buf = (char *) qs + 1;
 801735a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801735c:	1c5a      	adds	r2, r3, #1
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	689a      	ldr	r2, [r3, #8]
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	68db      	ldr	r3, [r3, #12]
 801736a:	441a      	add	r2, r3
 801736c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801736e:	3301      	adds	r3, #1
 8017370:	1ad3      	subs	r3, r2, r3
 8017372:	461a      	mov	r2, r3
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	689b      	ldr	r3, [r3, #8]
 801737c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801737e:	1ad3      	subs	r3, r2, r3
 8017380:	461a      	mov	r2, r3
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	685b      	ldr	r3, [r3, #4]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d003      	beq.n	8017396 <mg_http_parse+0x17e>
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	68db      	ldr	r3, [r3, #12]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d102      	bne.n	801739c <mg_http_parse+0x184>
 8017396:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801739a:	e09c      	b.n	80174d6 <mg_http_parse+0x2be>

  if (!mg_http_parse_headers(s, end, hm->headers,
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	f103 0220 	add.w	r2, r3, #32
 80173a2:	231e      	movs	r3, #30
 80173a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80173a6:	68f8      	ldr	r0, [r7, #12]
 80173a8:	f7ff fe87 	bl	80170ba <mg_http_parse_headers>
 80173ac:	4603      	mov	r3, r0
 80173ae:	f083 0301 	eor.w	r3, r3, #1
 80173b2:	b2db      	uxtb	r3, r3
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d002      	beq.n	80173be <mg_http_parse+0x1a6>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 80173b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80173bc:	e08b      	b.n	80174d6 <mg_http_parse+0x2be>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80173be:	4948      	ldr	r1, [pc, #288]	@ (80174e0 <mg_http_parse+0x2c8>)
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f7ff fd6d 	bl	8016ea0 <mg_http_get_header>
 80173c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80173c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d018      	beq.n	8017400 <mg_http_parse+0x1e8>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 80173d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80173da:	f7ff fb13 	bl	8016a04 <mg_to_size_t>
 80173de:	4603      	mov	r3, r0
 80173e0:	f083 0301 	eor.w	r3, r3, #1
 80173e4:	b2db      	uxtb	r3, r3
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d002      	beq.n	80173f0 <mg_http_parse+0x1d8>
 80173ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80173ee:	e072      	b.n	80174d6 <mg_http_parse+0x2be>
    hm->message.len = (size_t) req_len + hm->body.len;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80173f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80173f8:	441a      	add	r2, r3
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	2205      	movs	r2, #5
 8017406:	4937      	ldr	r1, [pc, #220]	@ (80174e4 <mg_http_parse+0x2cc>)
 8017408:	4618      	mov	r0, r3
 801740a:	f7ff fabb 	bl	8016984 <mg_ncasecmp>
 801740e:	4603      	mov	r3, r0
 8017410:	2b00      	cmp	r3, #0
 8017412:	bf0c      	ite	eq
 8017414:	2301      	moveq	r3, #1
 8017416:	2300      	movne	r3, #0
 8017418:	b2db      	uxtb	r3, r3
 801741a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (hm->body.len == (size_t) ~0 && !is_response &&
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017422:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017426:	d12a      	bne.n	801747e <mg_http_parse+0x266>
 8017428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801742a:	2b00      	cmp	r3, #0
 801742c:	d127      	bne.n	801747e <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 801742e:	f107 0310 	add.w	r3, r7, #16
 8017432:	492d      	ldr	r1, [pc, #180]	@ (80174e8 <mg_http_parse+0x2d0>)
 8017434:	4618      	mov	r0, r3
 8017436:	f00a fa05 	bl	8021844 <mg_str_s>
 801743a:	6879      	ldr	r1, [r7, #4]
 801743c:	f107 0310 	add.w	r3, r7, #16
 8017440:	cb0c      	ldmia	r3, {r2, r3}
 8017442:	c903      	ldmia	r1, {r0, r1}
 8017444:	f00a fa8a 	bl	802195c <mg_strcasecmp>
 8017448:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 801744a:	2b00      	cmp	r3, #0
 801744c:	d017      	beq.n	801747e <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 801744e:	f107 0318 	add.w	r3, r7, #24
 8017452:	4926      	ldr	r1, [pc, #152]	@ (80174ec <mg_http_parse+0x2d4>)
 8017454:	4618      	mov	r0, r3
 8017456:	f00a f9f5 	bl	8021844 <mg_str_s>
 801745a:	6879      	ldr	r1, [r7, #4]
 801745c:	f107 0318 	add.w	r3, r7, #24
 8017460:	cb0c      	ldmia	r3, {r2, r3}
 8017462:	c903      	ldmia	r1, {r0, r1}
 8017464:	f00a fa7a 	bl	802195c <mg_strcasecmp>
 8017468:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 801746a:	2b00      	cmp	r3, #0
 801746c:	d007      	beq.n	801747e <mg_http_parse+0x266>
    hm->body.len = 0;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	2200      	movs	r2, #0
 8017472:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8017476:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017484:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017488:	d11b      	bne.n	80174c2 <mg_http_parse+0x2aa>
 801748a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801748c:	2b00      	cmp	r3, #0
 801748e:	d018      	beq.n	80174c2 <mg_http_parse+0x2aa>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8017490:	f107 0320 	add.w	r3, r7, #32
 8017494:	4916      	ldr	r1, [pc, #88]	@ (80174f0 <mg_http_parse+0x2d8>)
 8017496:	4618      	mov	r0, r3
 8017498:	f00a f9d4 	bl	8021844 <mg_str_s>
 801749c:	6879      	ldr	r1, [r7, #4]
 801749e:	f107 0320 	add.w	r3, r7, #32
 80174a2:	cb0c      	ldmia	r3, {r2, r3}
 80174a4:	3108      	adds	r1, #8
 80174a6:	c903      	ldmia	r1, {r0, r1}
 80174a8:	f00a fa58 	bl	802195c <mg_strcasecmp>
 80174ac:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d107      	bne.n	80174c2 <mg_http_parse+0x2aa>
    hm->body.len = 0;
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	2200      	movs	r2, #0
 80174b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 80174ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80174c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174ca:	429a      	cmp	r2, r3
 80174cc:	d202      	bcs.n	80174d4 <mg_http_parse+0x2bc>
 80174ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80174d2:	e000      	b.n	80174d6 <mg_http_parse+0x2be>

  return req_len;
 80174d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80174d6:	4618      	mov	r0, r3
 80174d8:	3740      	adds	r7, #64	@ 0x40
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}
 80174de:	bf00      	nop
 80174e0:	080312c4 	.word	0x080312c4
 80174e4:	080312d4 	.word	0x080312d4
 80174e8:	080312dc 	.word	0x080312dc
 80174ec:	080312e0 	.word	0x080312e0
 80174f0:	080312e8 	.word	0x080312e8

080174f4 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 80174f4:	b480      	push	{r7}
 80174f6:	b083      	sub	sp, #12
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	3b64      	subs	r3, #100	@ 0x64
 8017500:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8017504:	4293      	cmp	r3, r2
 8017506:	f200 8469 	bhi.w	8017ddc <mg_http_status_code_str+0x8e8>
 801750a:	a101      	add	r1, pc, #4	@ (adr r1, 8017510 <mg_http_status_code_str+0x1c>)
 801750c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017510:	08017ce1 	.word	0x08017ce1
 8017514:	08017ce5 	.word	0x08017ce5
 8017518:	08017ce9 	.word	0x08017ce9
 801751c:	08017ddd 	.word	0x08017ddd
 8017520:	08017ddd 	.word	0x08017ddd
 8017524:	08017ddd 	.word	0x08017ddd
 8017528:	08017ddd 	.word	0x08017ddd
 801752c:	08017ddd 	.word	0x08017ddd
 8017530:	08017ddd 	.word	0x08017ddd
 8017534:	08017ddd 	.word	0x08017ddd
 8017538:	08017ddd 	.word	0x08017ddd
 801753c:	08017ddd 	.word	0x08017ddd
 8017540:	08017ddd 	.word	0x08017ddd
 8017544:	08017ddd 	.word	0x08017ddd
 8017548:	08017ddd 	.word	0x08017ddd
 801754c:	08017ddd 	.word	0x08017ddd
 8017550:	08017ddd 	.word	0x08017ddd
 8017554:	08017ddd 	.word	0x08017ddd
 8017558:	08017ddd 	.word	0x08017ddd
 801755c:	08017ddd 	.word	0x08017ddd
 8017560:	08017ddd 	.word	0x08017ddd
 8017564:	08017ddd 	.word	0x08017ddd
 8017568:	08017ddd 	.word	0x08017ddd
 801756c:	08017ddd 	.word	0x08017ddd
 8017570:	08017ddd 	.word	0x08017ddd
 8017574:	08017ddd 	.word	0x08017ddd
 8017578:	08017ddd 	.word	0x08017ddd
 801757c:	08017ddd 	.word	0x08017ddd
 8017580:	08017ddd 	.word	0x08017ddd
 8017584:	08017ddd 	.word	0x08017ddd
 8017588:	08017ddd 	.word	0x08017ddd
 801758c:	08017ddd 	.word	0x08017ddd
 8017590:	08017ddd 	.word	0x08017ddd
 8017594:	08017ddd 	.word	0x08017ddd
 8017598:	08017ddd 	.word	0x08017ddd
 801759c:	08017ddd 	.word	0x08017ddd
 80175a0:	08017ddd 	.word	0x08017ddd
 80175a4:	08017ddd 	.word	0x08017ddd
 80175a8:	08017ddd 	.word	0x08017ddd
 80175ac:	08017ddd 	.word	0x08017ddd
 80175b0:	08017ddd 	.word	0x08017ddd
 80175b4:	08017ddd 	.word	0x08017ddd
 80175b8:	08017ddd 	.word	0x08017ddd
 80175bc:	08017ddd 	.word	0x08017ddd
 80175c0:	08017ddd 	.word	0x08017ddd
 80175c4:	08017ddd 	.word	0x08017ddd
 80175c8:	08017ddd 	.word	0x08017ddd
 80175cc:	08017ddd 	.word	0x08017ddd
 80175d0:	08017ddd 	.word	0x08017ddd
 80175d4:	08017ddd 	.word	0x08017ddd
 80175d8:	08017ddd 	.word	0x08017ddd
 80175dc:	08017ddd 	.word	0x08017ddd
 80175e0:	08017ddd 	.word	0x08017ddd
 80175e4:	08017ddd 	.word	0x08017ddd
 80175e8:	08017ddd 	.word	0x08017ddd
 80175ec:	08017ddd 	.word	0x08017ddd
 80175f0:	08017ddd 	.word	0x08017ddd
 80175f4:	08017ddd 	.word	0x08017ddd
 80175f8:	08017ddd 	.word	0x08017ddd
 80175fc:	08017ddd 	.word	0x08017ddd
 8017600:	08017ddd 	.word	0x08017ddd
 8017604:	08017ddd 	.word	0x08017ddd
 8017608:	08017ddd 	.word	0x08017ddd
 801760c:	08017ddd 	.word	0x08017ddd
 8017610:	08017ddd 	.word	0x08017ddd
 8017614:	08017ddd 	.word	0x08017ddd
 8017618:	08017ddd 	.word	0x08017ddd
 801761c:	08017ddd 	.word	0x08017ddd
 8017620:	08017ddd 	.word	0x08017ddd
 8017624:	08017ddd 	.word	0x08017ddd
 8017628:	08017ddd 	.word	0x08017ddd
 801762c:	08017ddd 	.word	0x08017ddd
 8017630:	08017ddd 	.word	0x08017ddd
 8017634:	08017ddd 	.word	0x08017ddd
 8017638:	08017ddd 	.word	0x08017ddd
 801763c:	08017ddd 	.word	0x08017ddd
 8017640:	08017ddd 	.word	0x08017ddd
 8017644:	08017ddd 	.word	0x08017ddd
 8017648:	08017ddd 	.word	0x08017ddd
 801764c:	08017ddd 	.word	0x08017ddd
 8017650:	08017ddd 	.word	0x08017ddd
 8017654:	08017ddd 	.word	0x08017ddd
 8017658:	08017ddd 	.word	0x08017ddd
 801765c:	08017ddd 	.word	0x08017ddd
 8017660:	08017ddd 	.word	0x08017ddd
 8017664:	08017ddd 	.word	0x08017ddd
 8017668:	08017ddd 	.word	0x08017ddd
 801766c:	08017ddd 	.word	0x08017ddd
 8017670:	08017ddd 	.word	0x08017ddd
 8017674:	08017ddd 	.word	0x08017ddd
 8017678:	08017ddd 	.word	0x08017ddd
 801767c:	08017ddd 	.word	0x08017ddd
 8017680:	08017ddd 	.word	0x08017ddd
 8017684:	08017ddd 	.word	0x08017ddd
 8017688:	08017ddd 	.word	0x08017ddd
 801768c:	08017ddd 	.word	0x08017ddd
 8017690:	08017ddd 	.word	0x08017ddd
 8017694:	08017ddd 	.word	0x08017ddd
 8017698:	08017ddd 	.word	0x08017ddd
 801769c:	08017ddd 	.word	0x08017ddd
 80176a0:	08017ced 	.word	0x08017ced
 80176a4:	08017cf1 	.word	0x08017cf1
 80176a8:	08017cf5 	.word	0x08017cf5
 80176ac:	08017cf9 	.word	0x08017cf9
 80176b0:	08017cfd 	.word	0x08017cfd
 80176b4:	08017d01 	.word	0x08017d01
 80176b8:	08017d05 	.word	0x08017d05
 80176bc:	08017d09 	.word	0x08017d09
 80176c0:	08017d0d 	.word	0x08017d0d
 80176c4:	08017ddd 	.word	0x08017ddd
 80176c8:	08017ddd 	.word	0x08017ddd
 80176cc:	08017ddd 	.word	0x08017ddd
 80176d0:	08017ddd 	.word	0x08017ddd
 80176d4:	08017ddd 	.word	0x08017ddd
 80176d8:	08017ddd 	.word	0x08017ddd
 80176dc:	08017ddd 	.word	0x08017ddd
 80176e0:	08017ddd 	.word	0x08017ddd
 80176e4:	08017ddd 	.word	0x08017ddd
 80176e8:	08017ddd 	.word	0x08017ddd
 80176ec:	08017ddd 	.word	0x08017ddd
 80176f0:	08017ddd 	.word	0x08017ddd
 80176f4:	08017ddd 	.word	0x08017ddd
 80176f8:	08017ddd 	.word	0x08017ddd
 80176fc:	08017ddd 	.word	0x08017ddd
 8017700:	08017ddd 	.word	0x08017ddd
 8017704:	08017ddd 	.word	0x08017ddd
 8017708:	08017d11 	.word	0x08017d11
 801770c:	08017ddd 	.word	0x08017ddd
 8017710:	08017ddd 	.word	0x08017ddd
 8017714:	08017ddd 	.word	0x08017ddd
 8017718:	08017ddd 	.word	0x08017ddd
 801771c:	08017ddd 	.word	0x08017ddd
 8017720:	08017ddd 	.word	0x08017ddd
 8017724:	08017ddd 	.word	0x08017ddd
 8017728:	08017ddd 	.word	0x08017ddd
 801772c:	08017ddd 	.word	0x08017ddd
 8017730:	08017ddd 	.word	0x08017ddd
 8017734:	08017ddd 	.word	0x08017ddd
 8017738:	08017ddd 	.word	0x08017ddd
 801773c:	08017ddd 	.word	0x08017ddd
 8017740:	08017ddd 	.word	0x08017ddd
 8017744:	08017ddd 	.word	0x08017ddd
 8017748:	08017ddd 	.word	0x08017ddd
 801774c:	08017ddd 	.word	0x08017ddd
 8017750:	08017ddd 	.word	0x08017ddd
 8017754:	08017ddd 	.word	0x08017ddd
 8017758:	08017ddd 	.word	0x08017ddd
 801775c:	08017ddd 	.word	0x08017ddd
 8017760:	08017ddd 	.word	0x08017ddd
 8017764:	08017ddd 	.word	0x08017ddd
 8017768:	08017ddd 	.word	0x08017ddd
 801776c:	08017ddd 	.word	0x08017ddd
 8017770:	08017ddd 	.word	0x08017ddd
 8017774:	08017ddd 	.word	0x08017ddd
 8017778:	08017ddd 	.word	0x08017ddd
 801777c:	08017ddd 	.word	0x08017ddd
 8017780:	08017ddd 	.word	0x08017ddd
 8017784:	08017ddd 	.word	0x08017ddd
 8017788:	08017ddd 	.word	0x08017ddd
 801778c:	08017ddd 	.word	0x08017ddd
 8017790:	08017ddd 	.word	0x08017ddd
 8017794:	08017ddd 	.word	0x08017ddd
 8017798:	08017ddd 	.word	0x08017ddd
 801779c:	08017ddd 	.word	0x08017ddd
 80177a0:	08017ddd 	.word	0x08017ddd
 80177a4:	08017ddd 	.word	0x08017ddd
 80177a8:	08017ddd 	.word	0x08017ddd
 80177ac:	08017ddd 	.word	0x08017ddd
 80177b0:	08017ddd 	.word	0x08017ddd
 80177b4:	08017ddd 	.word	0x08017ddd
 80177b8:	08017ddd 	.word	0x08017ddd
 80177bc:	08017ddd 	.word	0x08017ddd
 80177c0:	08017ddd 	.word	0x08017ddd
 80177c4:	08017ddd 	.word	0x08017ddd
 80177c8:	08017ddd 	.word	0x08017ddd
 80177cc:	08017ddd 	.word	0x08017ddd
 80177d0:	08017ddd 	.word	0x08017ddd
 80177d4:	08017ddd 	.word	0x08017ddd
 80177d8:	08017ddd 	.word	0x08017ddd
 80177dc:	08017ddd 	.word	0x08017ddd
 80177e0:	08017ddd 	.word	0x08017ddd
 80177e4:	08017ddd 	.word	0x08017ddd
 80177e8:	08017ddd 	.word	0x08017ddd
 80177ec:	08017ddd 	.word	0x08017ddd
 80177f0:	08017ddd 	.word	0x08017ddd
 80177f4:	08017ddd 	.word	0x08017ddd
 80177f8:	08017ddd 	.word	0x08017ddd
 80177fc:	08017ddd 	.word	0x08017ddd
 8017800:	08017ddd 	.word	0x08017ddd
 8017804:	08017ddd 	.word	0x08017ddd
 8017808:	08017ddd 	.word	0x08017ddd
 801780c:	08017ddd 	.word	0x08017ddd
 8017810:	08017ddd 	.word	0x08017ddd
 8017814:	08017ddd 	.word	0x08017ddd
 8017818:	08017ddd 	.word	0x08017ddd
 801781c:	08017ddd 	.word	0x08017ddd
 8017820:	08017ddd 	.word	0x08017ddd
 8017824:	08017ddd 	.word	0x08017ddd
 8017828:	08017ddd 	.word	0x08017ddd
 801782c:	08017ddd 	.word	0x08017ddd
 8017830:	08017d15 	.word	0x08017d15
 8017834:	08017d19 	.word	0x08017d19
 8017838:	08017d1d 	.word	0x08017d1d
 801783c:	08017d21 	.word	0x08017d21
 8017840:	08017d25 	.word	0x08017d25
 8017844:	08017d29 	.word	0x08017d29
 8017848:	08017ddd 	.word	0x08017ddd
 801784c:	08017d2d 	.word	0x08017d2d
 8017850:	08017d31 	.word	0x08017d31
 8017854:	08017ddd 	.word	0x08017ddd
 8017858:	08017ddd 	.word	0x08017ddd
 801785c:	08017ddd 	.word	0x08017ddd
 8017860:	08017ddd 	.word	0x08017ddd
 8017864:	08017ddd 	.word	0x08017ddd
 8017868:	08017ddd 	.word	0x08017ddd
 801786c:	08017ddd 	.word	0x08017ddd
 8017870:	08017ddd 	.word	0x08017ddd
 8017874:	08017ddd 	.word	0x08017ddd
 8017878:	08017ddd 	.word	0x08017ddd
 801787c:	08017ddd 	.word	0x08017ddd
 8017880:	08017ddd 	.word	0x08017ddd
 8017884:	08017ddd 	.word	0x08017ddd
 8017888:	08017ddd 	.word	0x08017ddd
 801788c:	08017ddd 	.word	0x08017ddd
 8017890:	08017ddd 	.word	0x08017ddd
 8017894:	08017ddd 	.word	0x08017ddd
 8017898:	08017ddd 	.word	0x08017ddd
 801789c:	08017ddd 	.word	0x08017ddd
 80178a0:	08017ddd 	.word	0x08017ddd
 80178a4:	08017ddd 	.word	0x08017ddd
 80178a8:	08017ddd 	.word	0x08017ddd
 80178ac:	08017ddd 	.word	0x08017ddd
 80178b0:	08017ddd 	.word	0x08017ddd
 80178b4:	08017ddd 	.word	0x08017ddd
 80178b8:	08017ddd 	.word	0x08017ddd
 80178bc:	08017ddd 	.word	0x08017ddd
 80178c0:	08017ddd 	.word	0x08017ddd
 80178c4:	08017ddd 	.word	0x08017ddd
 80178c8:	08017ddd 	.word	0x08017ddd
 80178cc:	08017ddd 	.word	0x08017ddd
 80178d0:	08017ddd 	.word	0x08017ddd
 80178d4:	08017ddd 	.word	0x08017ddd
 80178d8:	08017ddd 	.word	0x08017ddd
 80178dc:	08017ddd 	.word	0x08017ddd
 80178e0:	08017ddd 	.word	0x08017ddd
 80178e4:	08017ddd 	.word	0x08017ddd
 80178e8:	08017ddd 	.word	0x08017ddd
 80178ec:	08017ddd 	.word	0x08017ddd
 80178f0:	08017ddd 	.word	0x08017ddd
 80178f4:	08017ddd 	.word	0x08017ddd
 80178f8:	08017ddd 	.word	0x08017ddd
 80178fc:	08017ddd 	.word	0x08017ddd
 8017900:	08017ddd 	.word	0x08017ddd
 8017904:	08017ddd 	.word	0x08017ddd
 8017908:	08017ddd 	.word	0x08017ddd
 801790c:	08017ddd 	.word	0x08017ddd
 8017910:	08017ddd 	.word	0x08017ddd
 8017914:	08017ddd 	.word	0x08017ddd
 8017918:	08017ddd 	.word	0x08017ddd
 801791c:	08017ddd 	.word	0x08017ddd
 8017920:	08017ddd 	.word	0x08017ddd
 8017924:	08017ddd 	.word	0x08017ddd
 8017928:	08017ddd 	.word	0x08017ddd
 801792c:	08017ddd 	.word	0x08017ddd
 8017930:	08017ddd 	.word	0x08017ddd
 8017934:	08017ddd 	.word	0x08017ddd
 8017938:	08017ddd 	.word	0x08017ddd
 801793c:	08017ddd 	.word	0x08017ddd
 8017940:	08017ddd 	.word	0x08017ddd
 8017944:	08017ddd 	.word	0x08017ddd
 8017948:	08017ddd 	.word	0x08017ddd
 801794c:	08017ddd 	.word	0x08017ddd
 8017950:	08017ddd 	.word	0x08017ddd
 8017954:	08017ddd 	.word	0x08017ddd
 8017958:	08017ddd 	.word	0x08017ddd
 801795c:	08017ddd 	.word	0x08017ddd
 8017960:	08017ddd 	.word	0x08017ddd
 8017964:	08017ddd 	.word	0x08017ddd
 8017968:	08017ddd 	.word	0x08017ddd
 801796c:	08017ddd 	.word	0x08017ddd
 8017970:	08017ddd 	.word	0x08017ddd
 8017974:	08017ddd 	.word	0x08017ddd
 8017978:	08017ddd 	.word	0x08017ddd
 801797c:	08017ddd 	.word	0x08017ddd
 8017980:	08017ddd 	.word	0x08017ddd
 8017984:	08017ddd 	.word	0x08017ddd
 8017988:	08017ddd 	.word	0x08017ddd
 801798c:	08017ddd 	.word	0x08017ddd
 8017990:	08017ddd 	.word	0x08017ddd
 8017994:	08017ddd 	.word	0x08017ddd
 8017998:	08017ddd 	.word	0x08017ddd
 801799c:	08017ddd 	.word	0x08017ddd
 80179a0:	08017ddd 	.word	0x08017ddd
 80179a4:	08017ddd 	.word	0x08017ddd
 80179a8:	08017ddd 	.word	0x08017ddd
 80179ac:	08017ddd 	.word	0x08017ddd
 80179b0:	08017ddd 	.word	0x08017ddd
 80179b4:	08017ddd 	.word	0x08017ddd
 80179b8:	08017ddd 	.word	0x08017ddd
 80179bc:	08017ddd 	.word	0x08017ddd
 80179c0:	08017d35 	.word	0x08017d35
 80179c4:	08017d39 	.word	0x08017d39
 80179c8:	08017d3d 	.word	0x08017d3d
 80179cc:	08017d41 	.word	0x08017d41
 80179d0:	08017d45 	.word	0x08017d45
 80179d4:	08017d49 	.word	0x08017d49
 80179d8:	08017d4d 	.word	0x08017d4d
 80179dc:	08017d51 	.word	0x08017d51
 80179e0:	08017d55 	.word	0x08017d55
 80179e4:	08017d59 	.word	0x08017d59
 80179e8:	08017d5d 	.word	0x08017d5d
 80179ec:	08017d61 	.word	0x08017d61
 80179f0:	08017d65 	.word	0x08017d65
 80179f4:	08017d69 	.word	0x08017d69
 80179f8:	08017d6d 	.word	0x08017d6d
 80179fc:	08017d71 	.word	0x08017d71
 8017a00:	08017d75 	.word	0x08017d75
 8017a04:	08017d79 	.word	0x08017d79
 8017a08:	08017d7d 	.word	0x08017d7d
 8017a0c:	08017ddd 	.word	0x08017ddd
 8017a10:	08017ddd 	.word	0x08017ddd
 8017a14:	08017d81 	.word	0x08017d81
 8017a18:	08017d85 	.word	0x08017d85
 8017a1c:	08017d89 	.word	0x08017d89
 8017a20:	08017d8d 	.word	0x08017d8d
 8017a24:	08017ddd 	.word	0x08017ddd
 8017a28:	08017d91 	.word	0x08017d91
 8017a2c:	08017ddd 	.word	0x08017ddd
 8017a30:	08017d95 	.word	0x08017d95
 8017a34:	08017d99 	.word	0x08017d99
 8017a38:	08017ddd 	.word	0x08017ddd
 8017a3c:	08017d9d 	.word	0x08017d9d
 8017a40:	08017ddd 	.word	0x08017ddd
 8017a44:	08017ddd 	.word	0x08017ddd
 8017a48:	08017ddd 	.word	0x08017ddd
 8017a4c:	08017ddd 	.word	0x08017ddd
 8017a50:	08017ddd 	.word	0x08017ddd
 8017a54:	08017ddd 	.word	0x08017ddd
 8017a58:	08017ddd 	.word	0x08017ddd
 8017a5c:	08017ddd 	.word	0x08017ddd
 8017a60:	08017ddd 	.word	0x08017ddd
 8017a64:	08017ddd 	.word	0x08017ddd
 8017a68:	08017ddd 	.word	0x08017ddd
 8017a6c:	08017ddd 	.word	0x08017ddd
 8017a70:	08017da1 	.word	0x08017da1
 8017a74:	08017ddd 	.word	0x08017ddd
 8017a78:	08017ddd 	.word	0x08017ddd
 8017a7c:	08017ddd 	.word	0x08017ddd
 8017a80:	08017ddd 	.word	0x08017ddd
 8017a84:	08017ddd 	.word	0x08017ddd
 8017a88:	08017ddd 	.word	0x08017ddd
 8017a8c:	08017da5 	.word	0x08017da5
 8017a90:	08017ddd 	.word	0x08017ddd
 8017a94:	08017ddd 	.word	0x08017ddd
 8017a98:	08017ddd 	.word	0x08017ddd
 8017a9c:	08017ddd 	.word	0x08017ddd
 8017aa0:	08017ddd 	.word	0x08017ddd
 8017aa4:	08017ddd 	.word	0x08017ddd
 8017aa8:	08017ddd 	.word	0x08017ddd
 8017aac:	08017ddd 	.word	0x08017ddd
 8017ab0:	08017ddd 	.word	0x08017ddd
 8017ab4:	08017ddd 	.word	0x08017ddd
 8017ab8:	08017ddd 	.word	0x08017ddd
 8017abc:	08017ddd 	.word	0x08017ddd
 8017ac0:	08017ddd 	.word	0x08017ddd
 8017ac4:	08017ddd 	.word	0x08017ddd
 8017ac8:	08017ddd 	.word	0x08017ddd
 8017acc:	08017ddd 	.word	0x08017ddd
 8017ad0:	08017ddd 	.word	0x08017ddd
 8017ad4:	08017ddd 	.word	0x08017ddd
 8017ad8:	08017ddd 	.word	0x08017ddd
 8017adc:	08017ddd 	.word	0x08017ddd
 8017ae0:	08017ddd 	.word	0x08017ddd
 8017ae4:	08017ddd 	.word	0x08017ddd
 8017ae8:	08017ddd 	.word	0x08017ddd
 8017aec:	08017ddd 	.word	0x08017ddd
 8017af0:	08017ddd 	.word	0x08017ddd
 8017af4:	08017ddd 	.word	0x08017ddd
 8017af8:	08017ddd 	.word	0x08017ddd
 8017afc:	08017ddd 	.word	0x08017ddd
 8017b00:	08017ddd 	.word	0x08017ddd
 8017b04:	08017ddd 	.word	0x08017ddd
 8017b08:	08017ddd 	.word	0x08017ddd
 8017b0c:	08017ddd 	.word	0x08017ddd
 8017b10:	08017ddd 	.word	0x08017ddd
 8017b14:	08017ddd 	.word	0x08017ddd
 8017b18:	08017ddd 	.word	0x08017ddd
 8017b1c:	08017ddd 	.word	0x08017ddd
 8017b20:	08017ddd 	.word	0x08017ddd
 8017b24:	08017ddd 	.word	0x08017ddd
 8017b28:	08017ddd 	.word	0x08017ddd
 8017b2c:	08017ddd 	.word	0x08017ddd
 8017b30:	08017ddd 	.word	0x08017ddd
 8017b34:	08017ddd 	.word	0x08017ddd
 8017b38:	08017ddd 	.word	0x08017ddd
 8017b3c:	08017ddd 	.word	0x08017ddd
 8017b40:	08017ddd 	.word	0x08017ddd
 8017b44:	08017ddd 	.word	0x08017ddd
 8017b48:	08017ddd 	.word	0x08017ddd
 8017b4c:	08017da9 	.word	0x08017da9
 8017b50:	08017dad 	.word	0x08017dad
 8017b54:	08017db1 	.word	0x08017db1
 8017b58:	08017db5 	.word	0x08017db5
 8017b5c:	08017db9 	.word	0x08017db9
 8017b60:	08017dbd 	.word	0x08017dbd
 8017b64:	08017dc1 	.word	0x08017dc1
 8017b68:	08017dc5 	.word	0x08017dc5
 8017b6c:	08017dc9 	.word	0x08017dc9
 8017b70:	08017dcd 	.word	0x08017dcd
 8017b74:	08017ddd 	.word	0x08017ddd
 8017b78:	08017dd1 	.word	0x08017dd1
 8017b7c:	08017dd5 	.word	0x08017dd5
 8017b80:	08017ddd 	.word	0x08017ddd
 8017b84:	08017ddd 	.word	0x08017ddd
 8017b88:	08017ddd 	.word	0x08017ddd
 8017b8c:	08017ddd 	.word	0x08017ddd
 8017b90:	08017ddd 	.word	0x08017ddd
 8017b94:	08017ddd 	.word	0x08017ddd
 8017b98:	08017ddd 	.word	0x08017ddd
 8017b9c:	08017ddd 	.word	0x08017ddd
 8017ba0:	08017ddd 	.word	0x08017ddd
 8017ba4:	08017ddd 	.word	0x08017ddd
 8017ba8:	08017ddd 	.word	0x08017ddd
 8017bac:	08017ddd 	.word	0x08017ddd
 8017bb0:	08017ddd 	.word	0x08017ddd
 8017bb4:	08017ddd 	.word	0x08017ddd
 8017bb8:	08017ddd 	.word	0x08017ddd
 8017bbc:	08017ddd 	.word	0x08017ddd
 8017bc0:	08017ddd 	.word	0x08017ddd
 8017bc4:	08017ddd 	.word	0x08017ddd
 8017bc8:	08017ddd 	.word	0x08017ddd
 8017bcc:	08017ddd 	.word	0x08017ddd
 8017bd0:	08017ddd 	.word	0x08017ddd
 8017bd4:	08017ddd 	.word	0x08017ddd
 8017bd8:	08017ddd 	.word	0x08017ddd
 8017bdc:	08017ddd 	.word	0x08017ddd
 8017be0:	08017ddd 	.word	0x08017ddd
 8017be4:	08017ddd 	.word	0x08017ddd
 8017be8:	08017ddd 	.word	0x08017ddd
 8017bec:	08017ddd 	.word	0x08017ddd
 8017bf0:	08017ddd 	.word	0x08017ddd
 8017bf4:	08017ddd 	.word	0x08017ddd
 8017bf8:	08017ddd 	.word	0x08017ddd
 8017bfc:	08017ddd 	.word	0x08017ddd
 8017c00:	08017ddd 	.word	0x08017ddd
 8017c04:	08017ddd 	.word	0x08017ddd
 8017c08:	08017ddd 	.word	0x08017ddd
 8017c0c:	08017ddd 	.word	0x08017ddd
 8017c10:	08017ddd 	.word	0x08017ddd
 8017c14:	08017ddd 	.word	0x08017ddd
 8017c18:	08017ddd 	.word	0x08017ddd
 8017c1c:	08017ddd 	.word	0x08017ddd
 8017c20:	08017ddd 	.word	0x08017ddd
 8017c24:	08017ddd 	.word	0x08017ddd
 8017c28:	08017ddd 	.word	0x08017ddd
 8017c2c:	08017ddd 	.word	0x08017ddd
 8017c30:	08017ddd 	.word	0x08017ddd
 8017c34:	08017ddd 	.word	0x08017ddd
 8017c38:	08017ddd 	.word	0x08017ddd
 8017c3c:	08017ddd 	.word	0x08017ddd
 8017c40:	08017ddd 	.word	0x08017ddd
 8017c44:	08017ddd 	.word	0x08017ddd
 8017c48:	08017ddd 	.word	0x08017ddd
 8017c4c:	08017ddd 	.word	0x08017ddd
 8017c50:	08017ddd 	.word	0x08017ddd
 8017c54:	08017ddd 	.word	0x08017ddd
 8017c58:	08017ddd 	.word	0x08017ddd
 8017c5c:	08017ddd 	.word	0x08017ddd
 8017c60:	08017ddd 	.word	0x08017ddd
 8017c64:	08017ddd 	.word	0x08017ddd
 8017c68:	08017ddd 	.word	0x08017ddd
 8017c6c:	08017ddd 	.word	0x08017ddd
 8017c70:	08017ddd 	.word	0x08017ddd
 8017c74:	08017ddd 	.word	0x08017ddd
 8017c78:	08017ddd 	.word	0x08017ddd
 8017c7c:	08017ddd 	.word	0x08017ddd
 8017c80:	08017ddd 	.word	0x08017ddd
 8017c84:	08017ddd 	.word	0x08017ddd
 8017c88:	08017ddd 	.word	0x08017ddd
 8017c8c:	08017ddd 	.word	0x08017ddd
 8017c90:	08017ddd 	.word	0x08017ddd
 8017c94:	08017ddd 	.word	0x08017ddd
 8017c98:	08017ddd 	.word	0x08017ddd
 8017c9c:	08017ddd 	.word	0x08017ddd
 8017ca0:	08017ddd 	.word	0x08017ddd
 8017ca4:	08017ddd 	.word	0x08017ddd
 8017ca8:	08017ddd 	.word	0x08017ddd
 8017cac:	08017ddd 	.word	0x08017ddd
 8017cb0:	08017ddd 	.word	0x08017ddd
 8017cb4:	08017ddd 	.word	0x08017ddd
 8017cb8:	08017ddd 	.word	0x08017ddd
 8017cbc:	08017ddd 	.word	0x08017ddd
 8017cc0:	08017ddd 	.word	0x08017ddd
 8017cc4:	08017ddd 	.word	0x08017ddd
 8017cc8:	08017ddd 	.word	0x08017ddd
 8017ccc:	08017ddd 	.word	0x08017ddd
 8017cd0:	08017ddd 	.word	0x08017ddd
 8017cd4:	08017ddd 	.word	0x08017ddd
 8017cd8:	08017ddd 	.word	0x08017ddd
 8017cdc:	08017dd9 	.word	0x08017dd9
    case 100: return "Continue";
 8017ce0:	4b42      	ldr	r3, [pc, #264]	@ (8017dec <mg_http_status_code_str+0x8f8>)
 8017ce2:	e07c      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8017ce4:	4b42      	ldr	r3, [pc, #264]	@ (8017df0 <mg_http_status_code_str+0x8fc>)
 8017ce6:	e07a      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8017ce8:	4b42      	ldr	r3, [pc, #264]	@ (8017df4 <mg_http_status_code_str+0x900>)
 8017cea:	e078      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8017cec:	4b42      	ldr	r3, [pc, #264]	@ (8017df8 <mg_http_status_code_str+0x904>)
 8017cee:	e076      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8017cf0:	4b42      	ldr	r3, [pc, #264]	@ (8017dfc <mg_http_status_code_str+0x908>)
 8017cf2:	e074      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8017cf4:	4b42      	ldr	r3, [pc, #264]	@ (8017e00 <mg_http_status_code_str+0x90c>)
 8017cf6:	e072      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8017cf8:	4b42      	ldr	r3, [pc, #264]	@ (8017e04 <mg_http_status_code_str+0x910>)
 8017cfa:	e070      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8017cfc:	4b42      	ldr	r3, [pc, #264]	@ (8017e08 <mg_http_status_code_str+0x914>)
 8017cfe:	e06e      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8017d00:	4b42      	ldr	r3, [pc, #264]	@ (8017e0c <mg_http_status_code_str+0x918>)
 8017d02:	e06c      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8017d04:	4b42      	ldr	r3, [pc, #264]	@ (8017e10 <mg_http_status_code_str+0x91c>)
 8017d06:	e06a      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8017d08:	4b42      	ldr	r3, [pc, #264]	@ (8017e14 <mg_http_status_code_str+0x920>)
 8017d0a:	e068      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8017d0c:	4b42      	ldr	r3, [pc, #264]	@ (8017e18 <mg_http_status_code_str+0x924>)
 8017d0e:	e066      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8017d10:	4b42      	ldr	r3, [pc, #264]	@ (8017e1c <mg_http_status_code_str+0x928>)
 8017d12:	e064      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8017d14:	4b42      	ldr	r3, [pc, #264]	@ (8017e20 <mg_http_status_code_str+0x92c>)
 8017d16:	e062      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8017d18:	4b42      	ldr	r3, [pc, #264]	@ (8017e24 <mg_http_status_code_str+0x930>)
 8017d1a:	e060      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8017d1c:	4b42      	ldr	r3, [pc, #264]	@ (8017e28 <mg_http_status_code_str+0x934>)
 8017d1e:	e05e      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8017d20:	4b42      	ldr	r3, [pc, #264]	@ (8017e2c <mg_http_status_code_str+0x938>)
 8017d22:	e05c      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8017d24:	4b42      	ldr	r3, [pc, #264]	@ (8017e30 <mg_http_status_code_str+0x93c>)
 8017d26:	e05a      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8017d28:	4b42      	ldr	r3, [pc, #264]	@ (8017e34 <mg_http_status_code_str+0x940>)
 8017d2a:	e058      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8017d2c:	4b42      	ldr	r3, [pc, #264]	@ (8017e38 <mg_http_status_code_str+0x944>)
 8017d2e:	e056      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8017d30:	4b42      	ldr	r3, [pc, #264]	@ (8017e3c <mg_http_status_code_str+0x948>)
 8017d32:	e054      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8017d34:	4b42      	ldr	r3, [pc, #264]	@ (8017e40 <mg_http_status_code_str+0x94c>)
 8017d36:	e052      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8017d38:	4b42      	ldr	r3, [pc, #264]	@ (8017e44 <mg_http_status_code_str+0x950>)
 8017d3a:	e050      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8017d3c:	4b42      	ldr	r3, [pc, #264]	@ (8017e48 <mg_http_status_code_str+0x954>)
 8017d3e:	e04e      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8017d40:	4b42      	ldr	r3, [pc, #264]	@ (8017e4c <mg_http_status_code_str+0x958>)
 8017d42:	e04c      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8017d44:	4b42      	ldr	r3, [pc, #264]	@ (8017e50 <mg_http_status_code_str+0x95c>)
 8017d46:	e04a      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8017d48:	4b42      	ldr	r3, [pc, #264]	@ (8017e54 <mg_http_status_code_str+0x960>)
 8017d4a:	e048      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8017d4c:	4b42      	ldr	r3, [pc, #264]	@ (8017e58 <mg_http_status_code_str+0x964>)
 8017d4e:	e046      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8017d50:	4b42      	ldr	r3, [pc, #264]	@ (8017e5c <mg_http_status_code_str+0x968>)
 8017d52:	e044      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 8017d54:	4b42      	ldr	r3, [pc, #264]	@ (8017e60 <mg_http_status_code_str+0x96c>)
 8017d56:	e042      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8017d58:	4b42      	ldr	r3, [pc, #264]	@ (8017e64 <mg_http_status_code_str+0x970>)
 8017d5a:	e040      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 8017d5c:	4b42      	ldr	r3, [pc, #264]	@ (8017e68 <mg_http_status_code_str+0x974>)
 8017d5e:	e03e      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8017d60:	4b42      	ldr	r3, [pc, #264]	@ (8017e6c <mg_http_status_code_str+0x978>)
 8017d62:	e03c      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8017d64:	4b42      	ldr	r3, [pc, #264]	@ (8017e70 <mg_http_status_code_str+0x97c>)
 8017d66:	e03a      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8017d68:	4b42      	ldr	r3, [pc, #264]	@ (8017e74 <mg_http_status_code_str+0x980>)
 8017d6a:	e038      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 8017d6c:	4b42      	ldr	r3, [pc, #264]	@ (8017e78 <mg_http_status_code_str+0x984>)
 8017d6e:	e036      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8017d70:	4b42      	ldr	r3, [pc, #264]	@ (8017e7c <mg_http_status_code_str+0x988>)
 8017d72:	e034      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8017d74:	4b42      	ldr	r3, [pc, #264]	@ (8017e80 <mg_http_status_code_str+0x98c>)
 8017d76:	e032      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8017d78:	4b42      	ldr	r3, [pc, #264]	@ (8017e84 <mg_http_status_code_str+0x990>)
 8017d7a:	e030      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 8017d7c:	4b42      	ldr	r3, [pc, #264]	@ (8017e88 <mg_http_status_code_str+0x994>)
 8017d7e:	e02e      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8017d80:	4b42      	ldr	r3, [pc, #264]	@ (8017e8c <mg_http_status_code_str+0x998>)
 8017d82:	e02c      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8017d84:	4b42      	ldr	r3, [pc, #264]	@ (8017e90 <mg_http_status_code_str+0x99c>)
 8017d86:	e02a      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8017d88:	4b42      	ldr	r3, [pc, #264]	@ (8017e94 <mg_http_status_code_str+0x9a0>)
 8017d8a:	e028      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 8017d8c:	4b42      	ldr	r3, [pc, #264]	@ (8017e98 <mg_http_status_code_str+0x9a4>)
 8017d8e:	e026      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8017d90:	4b42      	ldr	r3, [pc, #264]	@ (8017e9c <mg_http_status_code_str+0x9a8>)
 8017d92:	e024      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 8017d94:	4b42      	ldr	r3, [pc, #264]	@ (8017ea0 <mg_http_status_code_str+0x9ac>)
 8017d96:	e022      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8017d98:	4b42      	ldr	r3, [pc, #264]	@ (8017ea4 <mg_http_status_code_str+0x9b0>)
 8017d9a:	e020      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 8017d9c:	4b42      	ldr	r3, [pc, #264]	@ (8017ea8 <mg_http_status_code_str+0x9b4>)
 8017d9e:	e01e      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 8017da0:	4b42      	ldr	r3, [pc, #264]	@ (8017eac <mg_http_status_code_str+0x9b8>)
 8017da2:	e01c      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 8017da4:	4b42      	ldr	r3, [pc, #264]	@ (8017eb0 <mg_http_status_code_str+0x9bc>)
 8017da6:	e01a      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 8017da8:	4b42      	ldr	r3, [pc, #264]	@ (8017eb4 <mg_http_status_code_str+0x9c0>)
 8017daa:	e018      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 8017dac:	4b42      	ldr	r3, [pc, #264]	@ (8017eb8 <mg_http_status_code_str+0x9c4>)
 8017dae:	e016      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8017db0:	4b42      	ldr	r3, [pc, #264]	@ (8017ebc <mg_http_status_code_str+0x9c8>)
 8017db2:	e014      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 8017db4:	4b42      	ldr	r3, [pc, #264]	@ (8017ec0 <mg_http_status_code_str+0x9cc>)
 8017db6:	e012      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8017db8:	4b42      	ldr	r3, [pc, #264]	@ (8017ec4 <mg_http_status_code_str+0x9d0>)
 8017dba:	e010      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 8017dbc:	4b42      	ldr	r3, [pc, #264]	@ (8017ec8 <mg_http_status_code_str+0x9d4>)
 8017dbe:	e00e      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8017dc0:	4b42      	ldr	r3, [pc, #264]	@ (8017ecc <mg_http_status_code_str+0x9d8>)
 8017dc2:	e00c      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 8017dc4:	4b42      	ldr	r3, [pc, #264]	@ (8017ed0 <mg_http_status_code_str+0x9dc>)
 8017dc6:	e00a      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8017dc8:	4b42      	ldr	r3, [pc, #264]	@ (8017ed4 <mg_http_status_code_str+0x9e0>)
 8017dca:	e008      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 8017dcc:	4b42      	ldr	r3, [pc, #264]	@ (8017ed8 <mg_http_status_code_str+0x9e4>)
 8017dce:	e006      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8017dd0:	4b42      	ldr	r3, [pc, #264]	@ (8017edc <mg_http_status_code_str+0x9e8>)
 8017dd2:	e004      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 8017dd4:	4b42      	ldr	r3, [pc, #264]	@ (8017ee0 <mg_http_status_code_str+0x9ec>)
 8017dd6:	e002      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8017dd8:	4b42      	ldr	r3, [pc, #264]	@ (8017ee4 <mg_http_status_code_str+0x9f0>)
 8017dda:	e000      	b.n	8017dde <mg_http_status_code_str+0x8ea>
    default: return "";
 8017ddc:	4b42      	ldr	r3, [pc, #264]	@ (8017ee8 <mg_http_status_code_str+0x9f4>)
  }
}
 8017dde:	4618      	mov	r0, r3
 8017de0:	370c      	adds	r7, #12
 8017de2:	46bd      	mov	sp, r7
 8017de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de8:	4770      	bx	lr
 8017dea:	bf00      	nop
 8017dec:	08031308 	.word	0x08031308
 8017df0:	08031314 	.word	0x08031314
 8017df4:	08031328 	.word	0x08031328
 8017df8:	08031334 	.word	0x08031334
 8017dfc:	08031338 	.word	0x08031338
 8017e00:	08031340 	.word	0x08031340
 8017e04:	0803134c 	.word	0x0803134c
 8017e08:	0803136c 	.word	0x0803136c
 8017e0c:	08031378 	.word	0x08031378
 8017e10:	08031388 	.word	0x08031388
 8017e14:	08031398 	.word	0x08031398
 8017e18:	080313a8 	.word	0x080313a8
 8017e1c:	080313bc 	.word	0x080313bc
 8017e20:	080313c4 	.word	0x080313c4
 8017e24:	080313d8 	.word	0x080313d8
 8017e28:	080313ec 	.word	0x080313ec
 8017e2c:	080313f4 	.word	0x080313f4
 8017e30:	08031400 	.word	0x08031400
 8017e34:	08031410 	.word	0x08031410
 8017e38:	0803141c 	.word	0x0803141c
 8017e3c:	08031430 	.word	0x08031430
 8017e40:	08031444 	.word	0x08031444
 8017e44:	08031450 	.word	0x08031450
 8017e48:	08031460 	.word	0x08031460
 8017e4c:	08031474 	.word	0x08031474
 8017e50:	08031480 	.word	0x08031480
 8017e54:	0803148c 	.word	0x0803148c
 8017e58:	080314a0 	.word	0x080314a0
 8017e5c:	080314b0 	.word	0x080314b0
 8017e60:	080314d0 	.word	0x080314d0
 8017e64:	080314e0 	.word	0x080314e0
 8017e68:	080314ec 	.word	0x080314ec
 8017e6c:	080314f4 	.word	0x080314f4
 8017e70:	08031504 	.word	0x08031504
 8017e74:	08031518 	.word	0x08031518
 8017e78:	0803152c 	.word	0x0803152c
 8017e7c:	08031544 	.word	0x08031544
 8017e80:	0803155c 	.word	0x0803155c
 8017e84:	0803157c 	.word	0x0803157c
 8017e88:	08031590 	.word	0x08031590
 8017e8c:	080315a0 	.word	0x080315a0
 8017e90:	080315b4 	.word	0x080315b4
 8017e94:	080315cc 	.word	0x080315cc
 8017e98:	080315d4 	.word	0x080315d4
 8017e9c:	080315e8 	.word	0x080315e8
 8017ea0:	080315fc 	.word	0x080315fc
 8017ea4:	08031614 	.word	0x08031614
 8017ea8:	08031628 	.word	0x08031628
 8017eac:	08031648 	.word	0x08031648
 8017eb0:	0803166c 	.word	0x0803166c
 8017eb4:	0803168c 	.word	0x0803168c
 8017eb8:	080316a4 	.word	0x080316a4
 8017ebc:	080316bc 	.word	0x080316bc
 8017ec0:	080316cc 	.word	0x080316cc
 8017ec4:	080316d8 	.word	0x080316d8
 8017ec8:	080316ec 	.word	0x080316ec
 8017ecc:	080316fc 	.word	0x080316fc
 8017ed0:	08031718 	.word	0x08031718
 8017ed4:	08031730 	.word	0x08031730
 8017ed8:	08031748 	.word	0x08031748
 8017edc:	08031758 	.word	0x08031758
 8017ee0:	08031768 	.word	0x08031768
 8017ee4:	08031788 	.word	0x08031788
 8017ee8:	080317a8 	.word	0x080317a8

08017eec <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8017eec:	b408      	push	{r3}
 8017eee:	b580      	push	{r7, lr}
 8017ef0:	b08b      	sub	sp, #44	@ 0x2c
 8017ef2:	af02      	add	r7, sp, #8
 8017ef4:	60f8      	str	r0, [r7, #12]
 8017ef6:	60b9      	str	r1, [r7, #8]
 8017ef8:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8017efa:	68b8      	ldr	r0, [r7, #8]
 8017efc:	f7ff fafa 	bl	80174f4 <mg_http_status_code_str>
 8017f00:	4602      	mov	r2, r0
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d001      	beq.n	8017f0c <mg_http_reply+0x20>
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	e000      	b.n	8017f0e <mg_http_reply+0x22>
 8017f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8017f8c <mg_http_reply+0xa0>)
 8017f0e:	9300      	str	r3, [sp, #0]
 8017f10:	4613      	mov	r3, r2
 8017f12:	68ba      	ldr	r2, [r7, #8]
 8017f14:	491e      	ldr	r1, [pc, #120]	@ (8017f90 <mg_http_reply+0xa4>)
 8017f16:	68f8      	ldr	r0, [r7, #12]
 8017f18:	f005 f8d8 	bl	801d0cc <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017f20:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 8017f22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017f26:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8017f2e:	f107 0314 	add.w	r3, r7, #20
 8017f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017f34:	4817      	ldr	r0, [pc, #92]	@ (8017f94 <mg_http_reply+0xa8>)
 8017f36:	f7fe f8cd 	bl	80160d4 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017f3e:	2b10      	cmp	r3, #16
 8017f40:	d916      	bls.n	8017f70 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017f46:	69fb      	ldr	r3, [r7, #28]
 8017f48:	3b0f      	subs	r3, #15
 8017f4a:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017f50:	69fb      	ldr	r3, [r7, #28]
 8017f52:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8017f54:	4a10      	ldr	r2, [pc, #64]	@ (8017f98 <mg_http_reply+0xac>)
 8017f56:	210b      	movs	r1, #11
 8017f58:	f008 ff8c 	bl	8020e74 <mg_snprintf>
 8017f5c:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017f62:	69f9      	ldr	r1, [r7, #28]
 8017f64:	69bb      	ldr	r3, [r7, #24]
 8017f66:	440b      	add	r3, r1
 8017f68:	3b0f      	subs	r3, #15
 8017f6a:	4413      	add	r3, r2
 8017f6c:	2220      	movs	r2, #32
 8017f6e:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8017f70:	68fa      	ldr	r2, [r7, #12]
 8017f72:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8017f76:	f36f 13c7 	bfc	r3, #7, #1
 8017f7a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8017f7e:	bf00      	nop
 8017f80:	3724      	adds	r7, #36	@ 0x24
 8017f82:	46bd      	mov	sp, r7
 8017f84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017f88:	b001      	add	sp, #4
 8017f8a:	4770      	bx	lr
 8017f8c:	080317a8 	.word	0x080317a8
 8017f90:	080317ac 	.word	0x080317ac
 8017f94:	08020e05 	.word	0x08020e05
 8017f98:	080317e0 	.word	0x080317e0

08017f9c <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b082      	sub	sp, #8
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017faa:	4618      	mov	r0, r3
 8017fac:	f7fe fc5d 	bl	801686a <mg_fs_close>
  c->pfn_data = NULL;
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	4a07      	ldr	r2, [pc, #28]	@ (8017fd8 <restore_http_cb+0x3c>)
 8017fbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 8017fc0:	687a      	ldr	r2, [r7, #4]
 8017fc2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8017fc6:	f36f 13c7 	bfc	r3, #7, #1
 8017fca:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8017fce:	bf00      	nop
 8017fd0:	3708      	adds	r7, #8
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bd80      	pop	{r7, pc}
 8017fd6:	bf00      	nop
 8017fd8:	08019759 	.word	0x08019759

08017fdc <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8017fdc:	b5b0      	push	{r4, r5, r7, lr}
 8017fde:	b088      	sub	sp, #32
 8017fe0:	af04      	add	r7, sp, #16
 8017fe2:	60f8      	str	r0, [r7, #12]
 8017fe4:	60b9      	str	r1, [r7, #8]
 8017fe6:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	2200      	movs	r2, #0
 8017fec:	461c      	mov	r4, r3
 8017fee:	4615      	mov	r5, r2
 8017ff0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8017ff4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017ff8:	e9cd 2300 	strd	r2, r3, [sp]
 8017ffc:	4a04      	ldr	r2, [pc, #16]	@ (8018010 <mg_http_etag+0x34>)
 8017ffe:	68b9      	ldr	r1, [r7, #8]
 8018000:	68f8      	ldr	r0, [r7, #12]
 8018002:	f008 ff37 	bl	8020e74 <mg_snprintf>
  return buf;
 8018006:	68fb      	ldr	r3, [r7, #12]
}
 8018008:	4618      	mov	r0, r3
 801800a:	3710      	adds	r7, #16
 801800c:	46bd      	mov	sp, r7
 801800e:	bdb0      	pop	{r4, r5, r7, pc}
 8018010:	080317e8 	.word	0x080317e8

08018014 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8018014:	b580      	push	{r7, lr}
 8018016:	b08a      	sub	sp, #40	@ 0x28
 8018018:	af00      	add	r7, sp, #0
 801801a:	60f8      	str	r0, [r7, #12]
 801801c:	60b9      	str	r1, [r7, #8]
 801801e:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8018020:	68bb      	ldr	r3, [r7, #8]
 8018022:	2b08      	cmp	r3, #8
 8018024:	d002      	beq.n	801802c <static_cb+0x18>
 8018026:	68bb      	ldr	r3, [r7, #8]
 8018028:	2b02      	cmp	r3, #2
 801802a:	d148      	bne.n	80180be <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018032:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 8018034:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018038:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	33a4      	adds	r3, #164	@ 0xa4
 801803e:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018044:	69fa      	ldr	r2, [r7, #28]
 8018046:	429a      	cmp	r2, r3
 8018048:	d905      	bls.n	8018056 <static_cb+0x42>
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	3348      	adds	r3, #72	@ 0x48
 801804e:	69f9      	ldr	r1, [r7, #28]
 8018050:	4618      	mov	r0, r3
 8018052:	f001 ff03 	bl	8019e5c <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801805e:	429a      	cmp	r2, r3
 8018060:	d234      	bcs.n	80180cc <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801806a:	1ad3      	subs	r3, r2, r3
 801806c:	627b      	str	r3, [r7, #36]	@ 0x24
 801806e:	69bb      	ldr	r3, [r7, #24]
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018074:	429a      	cmp	r2, r3
 8018076:	d902      	bls.n	801807e <static_cb+0x6a>
 8018078:	69bb      	ldr	r3, [r7, #24]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 801807e:	6a3b      	ldr	r3, [r7, #32]
 8018080:	685b      	ldr	r3, [r3, #4]
 8018082:	691b      	ldr	r3, [r3, #16]
 8018084:	6a3a      	ldr	r2, [r7, #32]
 8018086:	6810      	ldr	r0, [r2, #0]
 8018088:	68fa      	ldr	r2, [r7, #12]
 801808a:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 801808c:	68fa      	ldr	r2, [r7, #12]
 801808e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8018090:	4411      	add	r1, r2
 8018092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018094:	4798      	blx	r3
 8018096:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801809c:	697b      	ldr	r3, [r7, #20]
 801809e:	441a      	add	r2, r3
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 80180a4:	69bb      	ldr	r3, [r7, #24]
 80180a6:	681a      	ldr	r2, [r3, #0]
 80180a8:	697b      	ldr	r3, [r7, #20]
 80180aa:	1ad2      	subs	r2, r2, r3
 80180ac:	69bb      	ldr	r3, [r7, #24]
 80180ae:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 80180b0:	697b      	ldr	r3, [r7, #20]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d10c      	bne.n	80180d0 <static_cb+0xbc>
 80180b6:	68f8      	ldr	r0, [r7, #12]
 80180b8:	f7ff ff70 	bl	8017f9c <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80180bc:	e008      	b.n	80180d0 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 80180be:	68bb      	ldr	r3, [r7, #8]
 80180c0:	2b09      	cmp	r3, #9
 80180c2:	d106      	bne.n	80180d2 <static_cb+0xbe>
    restore_http_cb(c);
 80180c4:	68f8      	ldr	r0, [r7, #12]
 80180c6:	f7ff ff69 	bl	8017f9c <restore_http_cb>
 80180ca:	e002      	b.n	80180d2 <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80180cc:	bf00      	nop
 80180ce:	e000      	b.n	80180d2 <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80180d0:	bf00      	nop
  }
  (void) ev_data;
}
 80180d2:	3728      	adds	r7, #40	@ 0x28
 80180d4:	46bd      	mov	sp, r7
 80180d6:	bd80      	pop	{r7, pc}

080180d8 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 80180d8:	b590      	push	{r4, r7, lr}
 80180da:	b091      	sub	sp, #68	@ 0x44
 80180dc:	af02      	add	r7, sp, #8
 80180de:	60f8      	str	r0, [r7, #12]
 80180e0:	1d38      	adds	r0, r7, #4
 80180e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80180e6:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra);
 80180e8:	f107 0314 	add.w	r3, r7, #20
 80180ec:	6839      	ldr	r1, [r7, #0]
 80180ee:	4618      	mov	r0, r3
 80180f0:	f009 fba8 	bl	8021844 <mg_str_s>
  size_t i = 0;
 80180f4:	2300      	movs	r3, #0
 80180f6:	637b      	str	r3, [r7, #52]	@ 0x34

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 80180f8:	e002      	b.n	8018100 <guess_content_type+0x28>
 80180fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80180fc:	3301      	adds	r3, #1
 80180fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018104:	429a      	cmp	r2, r3
 8018106:	d208      	bcs.n	801811a <guess_content_type+0x42>
 8018108:	687a      	ldr	r2, [r7, #4]
 801810a:	68b9      	ldr	r1, [r7, #8]
 801810c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801810e:	1acb      	subs	r3, r1, r3
 8018110:	3b01      	subs	r3, #1
 8018112:	4413      	add	r3, r2
 8018114:	781b      	ldrb	r3, [r3, #0]
 8018116:	2b2e      	cmp	r3, #46	@ 0x2e
 8018118:	d1ef      	bne.n	80180fa <guess_content_type+0x22>
  path.buf += path.len - i;
 801811a:	687a      	ldr	r2, [r7, #4]
 801811c:	68b9      	ldr	r1, [r7, #8]
 801811e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018120:	1acb      	subs	r3, r1, r3
 8018122:	4413      	add	r3, r2
 8018124:	607b      	str	r3, [r7, #4]
  path.len = i;
 8018126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018128:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 801812a:	e020      	b.n	801816e <guess_content_type+0x96>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 801812c:	f107 031c 	add.w	r3, r7, #28
 8018130:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018134:	213d      	movs	r1, #61	@ 0x3d
 8018136:	9100      	str	r1, [sp, #0]
 8018138:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 801813c:	c903      	ldmia	r1, {r0, r1}
 801813e:	f009 fd48 	bl	8021bd2 <mg_span>
 8018142:	4603      	mov	r3, r0
 8018144:	2b00      	cmp	r3, #0
 8018146:	d012      	beq.n	801816e <guess_content_type+0x96>
 8018148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801814c:	cb0c      	ldmia	r3, {r2, r3}
 801814e:	1d39      	adds	r1, r7, #4
 8018150:	c903      	ldmia	r1, {r0, r1}
 8018152:	f009 fbc1 	bl	80218d8 <mg_strcmp>
 8018156:	4603      	mov	r3, r0
 8018158:	2b00      	cmp	r3, #0
 801815a:	d108      	bne.n	801816e <guess_content_type+0x96>
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	461a      	mov	r2, r3
 8018160:	f107 031c 	add.w	r3, r7, #28
 8018164:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018168:	e882 0003 	stmia.w	r2, {r0, r1}
 801816c:	e036      	b.n	80181dc <guess_content_type+0x104>
  while (mg_span(s, &entry, &s, ',')) {
 801816e:	f107 0314 	add.w	r3, r7, #20
 8018172:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8018176:	212c      	movs	r1, #44	@ 0x2c
 8018178:	9100      	str	r1, [sp, #0]
 801817a:	f107 0114 	add.w	r1, r7, #20
 801817e:	c903      	ldmia	r1, {r0, r1}
 8018180:	f009 fd27 	bl	8021bd2 <mg_span>
 8018184:	4603      	mov	r3, r0
 8018186:	2b00      	cmp	r3, #0
 8018188:	d1d0      	bne.n	801812c <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 801818a:	2300      	movs	r3, #0
 801818c:	637b      	str	r3, [r7, #52]	@ 0x34
 801818e:	e01a      	b.n	80181c6 <guess_content_type+0xee>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8018190:	4a14      	ldr	r2, [pc, #80]	@ (80181e4 <guess_content_type+0x10c>)
 8018192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018194:	00db      	lsls	r3, r3, #3
 8018196:	4413      	add	r3, r2
 8018198:	cb0c      	ldmia	r3, {r2, r3}
 801819a:	1d39      	adds	r1, r7, #4
 801819c:	c903      	ldmia	r1, {r0, r1}
 801819e:	f009 fb9b 	bl	80218d8 <mg_strcmp>
 80181a2:	4603      	mov	r3, r0
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d10b      	bne.n	80181c0 <guess_content_type+0xe8>
 80181a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181aa:	3301      	adds	r3, #1
 80181ac:	68f9      	ldr	r1, [r7, #12]
 80181ae:	4a0d      	ldr	r2, [pc, #52]	@ (80181e4 <guess_content_type+0x10c>)
 80181b0:	460c      	mov	r4, r1
 80181b2:	00db      	lsls	r3, r3, #3
 80181b4:	4413      	add	r3, r2
 80181b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80181ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80181be:	e00d      	b.n	80181dc <guess_content_type+0x104>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80181c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181c2:	3302      	adds	r3, #2
 80181c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80181c6:	4a07      	ldr	r2, [pc, #28]	@ (80181e4 <guess_content_type+0x10c>)
 80181c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d1de      	bne.n	8018190 <guess_content_type+0xb8>
  }

  return mg_str("text/plain; charset=utf-8");
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	4904      	ldr	r1, [pc, #16]	@ (80181e8 <guess_content_type+0x110>)
 80181d6:	4618      	mov	r0, r3
 80181d8:	f009 fb34 	bl	8021844 <mg_str_s>
}
 80181dc:	68f8      	ldr	r0, [r7, #12]
 80181de:	373c      	adds	r7, #60	@ 0x3c
 80181e0:	46bd      	mov	sp, r7
 80181e2:	bd90      	pop	{r4, r7, pc}
 80181e4:	200000b0 	.word	0x200000b0
 80181e8:	080318d0 	.word	0x080318d0

080181ec <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b08c      	sub	sp, #48	@ 0x30
 80181f0:	af02      	add	r7, sp, #8
 80181f2:	60f8      	str	r0, [r7, #12]
 80181f4:	60b9      	str	r1, [r7, #8]
 80181f6:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 80181f8:	2300      	movs	r3, #0
 80181fa:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 80181fc:	2300      	movs	r3, #0
 80181fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8018200:	e058      	b.n	80182b4 <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	681a      	ldr	r2, [r3, #0]
 8018206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018208:	3306      	adds	r3, #6
 801820a:	18d1      	adds	r1, r2, r3
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	685a      	ldr	r2, [r3, #4]
 8018210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018212:	1ad3      	subs	r3, r2, r3
 8018214:	1f9a      	subs	r2, r3, #6
 8018216:	f107 0310 	add.w	r3, r7, #16
 801821a:	4618      	mov	r0, r3
 801821c:	f009 fb2f 	bl	802187e <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	681a      	ldr	r2, [r3, #0]
 8018224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018226:	4413      	add	r3, r2
 8018228:	2206      	movs	r2, #6
 801822a:	4929      	ldr	r1, [pc, #164]	@ (80182d0 <getrange+0xe4>)
 801822c:	4618      	mov	r0, r3
 801822e:	f00d fb7b 	bl	8025928 <memcmp>
 8018232:	4603      	mov	r3, r0
 8018234:	2b00      	cmp	r3, #0
 8018236:	d003      	beq.n	8018240 <getrange+0x54>
  for (i = 0; i + 6 < s->len; i++) {
 8018238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801823a:	3301      	adds	r3, #1
 801823c:	627b      	str	r3, [r7, #36]	@ 0x24
 801823e:	e039      	b.n	80182b4 <getrange+0xc8>
    if (mg_span(v, &k, &v, '-')) {
 8018240:	f107 0310 	add.w	r3, r7, #16
 8018244:	f107 0218 	add.w	r2, r7, #24
 8018248:	212d      	movs	r1, #45	@ 0x2d
 801824a:	9100      	str	r1, [sp, #0]
 801824c:	f107 0110 	add.w	r1, r7, #16
 8018250:	c903      	ldmia	r1, {r0, r1}
 8018252:	f009 fcbe 	bl	8021bd2 <mg_span>
 8018256:	4603      	mov	r3, r0
 8018258:	2b00      	cmp	r3, #0
 801825a:	d01d      	beq.n	8018298 <getrange+0xac>
      if (mg_to_size_t(k, a)) numparsed++;
 801825c:	68ba      	ldr	r2, [r7, #8]
 801825e:	f107 0318 	add.w	r3, r7, #24
 8018262:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018266:	f7fe fbcd 	bl	8016a04 <mg_to_size_t>
 801826a:	4603      	mov	r3, r0
 801826c:	2b00      	cmp	r3, #0
 801826e:	d002      	beq.n	8018276 <getrange+0x8a>
 8018270:	6a3b      	ldr	r3, [r7, #32]
 8018272:	3301      	adds	r3, #1
 8018274:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8018276:	697b      	ldr	r3, [r7, #20]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d022      	beq.n	80182c2 <getrange+0xd6>
 801827c:	687a      	ldr	r2, [r7, #4]
 801827e:	f107 0310 	add.w	r3, r7, #16
 8018282:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018286:	f7fe fbbd 	bl	8016a04 <mg_to_size_t>
 801828a:	4603      	mov	r3, r0
 801828c:	2b00      	cmp	r3, #0
 801828e:	d018      	beq.n	80182c2 <getrange+0xd6>
 8018290:	6a3b      	ldr	r3, [r7, #32]
 8018292:	3301      	adds	r3, #1
 8018294:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 8018296:	e014      	b.n	80182c2 <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 8018298:	68ba      	ldr	r2, [r7, #8]
 801829a:	f107 0310 	add.w	r3, r7, #16
 801829e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80182a2:	f7fe fbaf 	bl	8016a04 <mg_to_size_t>
 80182a6:	4603      	mov	r3, r0
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d00a      	beq.n	80182c2 <getrange+0xd6>
 80182ac:	6a3b      	ldr	r3, [r7, #32]
 80182ae:	3301      	adds	r3, #1
 80182b0:	623b      	str	r3, [r7, #32]
 80182b2:	e007      	b.n	80182c4 <getrange+0xd8>
  for (i = 0; i + 6 < s->len; i++) {
 80182b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182b6:	1d9a      	adds	r2, r3, #6
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	685b      	ldr	r3, [r3, #4]
 80182bc:	429a      	cmp	r2, r3
 80182be:	d3a0      	bcc.n	8018202 <getrange+0x16>
 80182c0:	e000      	b.n	80182c4 <getrange+0xd8>
    break;
 80182c2:	bf00      	nop
  }
  return (int) numparsed;
 80182c4:	6a3b      	ldr	r3, [r7, #32]
}
 80182c6:	4618      	mov	r0, r3
 80182c8:	3728      	adds	r7, #40	@ 0x28
 80182ca:	46bd      	mov	sp, r7
 80182cc:	bd80      	pop	{r7, pc}
 80182ce:	bf00      	nop
 80182d0:	08031a54 	.word	0x08031a54

080182d4 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 80182d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182d8:	b0f9      	sub	sp, #484	@ 0x1e4
 80182da:	af0a      	add	r7, sp, #40	@ 0x28
 80182dc:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 80182e0:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 80182e4:	6020      	str	r0, [r4, #0]
 80182e6:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 80182ea:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 80182ee:	6001      	str	r1, [r0, #0]
 80182f0:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 80182f4:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80182f8:	600a      	str	r2, [r1, #0]
 80182fa:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80182fe:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8018302:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8018304:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018308:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	695b      	ldr	r3, [r3, #20]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d006      	beq.n	8018322 <mg_http_serve_file+0x4e>
 8018314:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018318:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	695b      	ldr	r3, [r3, #20]
 8018320:	e000      	b.n	8018324 <mg_http_serve_file+0x50>
 8018322:	4ba7      	ldr	r3, [pc, #668]	@ (80185c0 <mg_http_serve_file+0x2ec>)
 8018324:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  struct mg_fd *fd = NULL;
 8018328:	2300      	movs	r3, #0
 801832a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
  size_t size = 0;
 801832e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018332:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8018336:	2200      	movs	r2, #0
 8018338:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 801833a:	f04f 0200 	mov.w	r2, #0
 801833e:	f04f 0300 	mov.w	r3, #0
 8018342:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 8018346:	2300      	movs	r3, #0
 8018348:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 801834c:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8018350:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018354:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8018358:	6819      	ldr	r1, [r3, #0]
 801835a:	4610      	mov	r0, r2
 801835c:	f009 fa72 	bl	8021844 <mg_str_s>
 8018360:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018364:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	68db      	ldr	r3, [r3, #12]
 801836c:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8018370:	f5a2 7090 	sub.w	r0, r2, #288	@ 0x120
 8018374:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8018378:	ca06      	ldmia	r2, {r1, r2}
 801837a:	f7ff fead 	bl	80180d8 <guess_content_type>
  bool gzip = false;
 801837e:	2300      	movs	r3, #0
 8018380:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3

  if (path != NULL) {
 8018384:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018388:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d05c      	beq.n	801844c <mg_http_serve_file+0x178>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8018392:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018396:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 801839a:	498a      	ldr	r1, [pc, #552]	@ (80185c4 <mg_http_serve_file+0x2f0>)
 801839c:	6818      	ldr	r0, [r3, #0]
 801839e:	f7fe fd7f 	bl	8016ea0 <mg_http_get_header>
 80183a2:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    if (ae != NULL) {
 80183a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d03e      	beq.n	801842c <mg_http_serve_file+0x158>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 80183ae:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80183b2:	6859      	ldr	r1, [r3, #4]
 80183b4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	461a      	mov	r2, r3
 80183bc:	4882      	ldr	r0, [pc, #520]	@ (80185c8 <mg_http_serve_file+0x2f4>)
 80183be:	f008 fd8f 	bl	8020ee0 <mg_mprintf>
 80183c2:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 80183c6:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d02a      	beq.n	8018424 <mg_http_serve_file+0x150>
 80183ce:	497f      	ldr	r1, [pc, #508]	@ (80185cc <mg_http_serve_file+0x2f8>)
 80183d0:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80183d4:	f00d fbbc 	bl	8025b50 <strstr>
 80183d8:	4603      	mov	r3, r0
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d022      	beq.n	8018424 <mg_http_serve_file+0x150>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 80183de:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80183e2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80183e6:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	4a78      	ldr	r2, [pc, #480]	@ (80185d0 <mg_http_serve_file+0x2fc>)
 80183ee:	2180      	movs	r1, #128	@ 0x80
 80183f0:	f008 fd40 	bl	8020e74 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 80183f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80183f8:	2201      	movs	r2, #1
 80183fa:	4619      	mov	r1, r3
 80183fc:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8018400:	f7fe fa0c 	bl	801681c <mg_fs_open>
 8018404:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
        if (fd != NULL) gzip = true, path = tmp;
 8018408:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801840c:	2b00      	cmp	r3, #0
 801840e:	d009      	beq.n	8018424 <mg_http_serve_file+0x150>
 8018410:	2301      	movs	r3, #1
 8018412:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
 8018416:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801841a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 801841e:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8018422:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 8018424:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8018428:	f7f3 ffce 	bl	800c3c8 <vPortFree>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 801842c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8018430:	2b00      	cmp	r3, #0
 8018432:	d10b      	bne.n	801844c <mg_http_serve_file+0x178>
 8018434:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018438:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 801843c:	2201      	movs	r2, #1
 801843e:	6819      	ldr	r1, [r3, #0]
 8018440:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8018444:	f7fe f9ea 	bl	801681c <mg_fs_open>
 8018448:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 801844c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8018450:	2b00      	cmp	r3, #0
 8018452:	d144      	bne.n	80184de <mg_http_serve_file+0x20a>
 8018454:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018458:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	691b      	ldr	r3, [r3, #16]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d03c      	beq.n	80184de <mg_http_serve_file+0x20a>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8018464:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018468:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	691b      	ldr	r3, [r3, #16]
 8018470:	2201      	movs	r2, #1
 8018472:	4619      	mov	r1, r3
 8018474:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8018478:	f7fe f9d0 	bl	801681c <mg_fs_open>
 801847c:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
    path = opts->page404;
 8018480:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018484:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8018488:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 801848c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8018490:	6812      	ldr	r2, [r2, #0]
 8018492:	6912      	ldr	r2, [r2, #16]
 8018494:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8018496:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 801849a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801849e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80184a2:	6819      	ldr	r1, [r3, #0]
 80184a4:	4610      	mov	r0, r2
 80184a6:	f009 f9cd 	bl	8021844 <mg_str_s>
 80184aa:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80184ae:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	68db      	ldr	r3, [r3, #12]
 80184b6:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80184ba:	f5a2 7490 	sub.w	r4, r2, #288	@ 0x120
 80184be:	f107 0010 	add.w	r0, r7, #16
 80184c2:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 80184c6:	ca06      	ldmia	r2, {r1, r2}
 80184c8:	f7ff fe06 	bl	80180d8 <guess_content_type>
 80184cc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80184d0:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 80184d4:	4623      	mov	r3, r4
 80184d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80184da:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 80184de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d00f      	beq.n	8018506 <mg_http_serve_file+0x232>
 80184e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80184ea:	681c      	ldr	r4, [r3, #0]
 80184ec:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80184f0:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 80184f4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80184f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80184fc:	6818      	ldr	r0, [r3, #0]
 80184fe:	47a0      	blx	r4
 8018500:	4603      	mov	r3, r0
 8018502:	2b00      	cmp	r3, #0
 8018504:	d114      	bne.n	8018530 <mg_http_serve_file+0x25c>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8018506:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801850a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	689a      	ldr	r2, [r3, #8]
 8018512:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018516:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 801851a:	4b2e      	ldr	r3, [pc, #184]	@ (80185d4 <mg_http_serve_file+0x300>)
 801851c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8018520:	6800      	ldr	r0, [r0, #0]
 8018522:	f7ff fce3 	bl	8017eec <mg_http_reply>
    mg_fs_close(fd);
 8018526:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 801852a:	f7fe f99e 	bl	801686a <mg_fs_close>
 801852e:	e19d      	b.n	801886c <mg_http_serve_file+0x598>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8018530:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018534:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8018538:	6819      	ldr	r1, [r3, #0]
 801853a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 801853e:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8018542:	e9cd 2300 	strd	r2, r3, [sp]
 8018546:	460a      	mov	r2, r1
 8018548:	2140      	movs	r1, #64	@ 0x40
 801854a:	f7ff fd47 	bl	8017fdc <mg_http_etag>
 801854e:	4603      	mov	r3, r0
 8018550:	2b00      	cmp	r3, #0
 8018552:	d045      	beq.n	80185e0 <mg_http_serve_file+0x30c>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8018554:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018558:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 801855c:	491e      	ldr	r1, [pc, #120]	@ (80185d8 <mg_http_serve_file+0x304>)
 801855e:	6818      	ldr	r0, [r3, #0]
 8018560:	f7fe fc9e 	bl	8016ea0 <mg_http_get_header>
 8018564:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8018568:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 801856c:	2b00      	cmp	r3, #0
 801856e:	d037      	beq.n	80185e0 <mg_http_serve_file+0x30c>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8018570:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8018574:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8018578:	4611      	mov	r1, r2
 801857a:	4618      	mov	r0, r3
 801857c:	f009 f962 	bl	8021844 <mg_str_s>
 8018580:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8018584:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8018588:	cb0c      	ldmia	r3, {r2, r3}
 801858a:	c903      	ldmia	r1, {r0, r1}
 801858c:	f009 f9e6 	bl	802195c <mg_strcasecmp>
 8018590:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8018592:	2b00      	cmp	r3, #0
 8018594:	d124      	bne.n	80185e0 <mg_http_serve_file+0x30c>
    mg_fs_close(fd);
 8018596:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 801859a:	f7fe f966 	bl	801686a <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 801859e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80185a2:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	689a      	ldr	r2, [r3, #8]
 80185aa:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80185ae:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 80185b2:	4b0a      	ldr	r3, [pc, #40]	@ (80185dc <mg_http_serve_file+0x308>)
 80185b4:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80185b8:	6800      	ldr	r0, [r0, #0]
 80185ba:	f7ff fc97 	bl	8017eec <mg_http_reply>
 80185be:	e155      	b.n	801886c <mg_http_serve_file+0x598>
 80185c0:	20000088 	.word	0x20000088
 80185c4:	08031a5c 	.word	0x08031a5c
 80185c8:	08031248 	.word	0x08031248
 80185cc:	08031a6c 	.word	0x08031a6c
 80185d0:	08031a74 	.word	0x08031a74
 80185d4:	08031a7c 	.word	0x08031a7c
 80185d8:	08031a88 	.word	0x08031a88
 80185dc:	080317a8 	.word	0x080317a8
  } else {
    int n, status = 200;
 80185e0:	23c8      	movs	r3, #200	@ 0xc8
 80185e2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 80185e6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80185ea:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80185ee:	2200      	movs	r2, #0
 80185f0:	601a      	str	r2, [r3, #0]
 80185f2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80185f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80185fa:	2200      	movs	r2, #0
 80185fc:	601a      	str	r2, [r3, #0]
 80185fe:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018602:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 801860c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018610:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8018614:	4998      	ldr	r1, [pc, #608]	@ (8018878 <mg_http_serve_file+0x5a4>)
 8018616:	6818      	ldr	r0, [r3, #0]
 8018618:	f7fe fc42 	bl	8016ea0 <mg_http_get_header>
 801861c:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
    range[0] = '\0';
 8018620:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018624:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018628:	2200      	movs	r2, #0
 801862a:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 801862c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8018630:	2b00      	cmp	r3, #0
 8018632:	f000 8095 	beq.w	8018760 <mg_http_serve_file+0x48c>
 8018636:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801863a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801863e:	4619      	mov	r1, r3
 8018640:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8018644:	f7ff fdd2 	bl	80181ec <getrange>
 8018648:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 801864c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8018650:	2b00      	cmp	r3, #0
 8018652:	f340 8085 	ble.w	8018760 <mg_http_serve_file+0x48c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8018656:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 801865a:	2b01      	cmp	r3, #1
 801865c:	d107      	bne.n	801866e <mg_http_serve_file+0x39a>
 801865e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8018662:	1e5a      	subs	r2, r3, #1
 8018664:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018668:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801866c:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 801866e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018672:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8018676:	681a      	ldr	r2, [r3, #0]
 8018678:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801867c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	429a      	cmp	r2, r3
 8018684:	d808      	bhi.n	8018698 <mg_http_serve_file+0x3c4>
 8018686:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801868a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8018694:	429a      	cmp	r2, r3
 8018696:	d81a      	bhi.n	80186ce <mg_http_serve_file+0x3fa>
        status = 416;
 8018698:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 801869c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = 0;
 80186a0:	2300      	movs	r3, #0
 80186a2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 80186a6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80186aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	2200      	movs	r2, #0
 80186b2:	60bb      	str	r3, [r7, #8]
 80186b4:	60fa      	str	r2, [r7, #12]
 80186b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80186ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80186be:	e9cd 1200 	strd	r1, r2, [sp]
 80186c2:	4a6e      	ldr	r2, [pc, #440]	@ (801887c <mg_http_serve_file+0x5a8>)
 80186c4:	2164      	movs	r1, #100	@ 0x64
 80186c6:	4618      	mov	r0, r3
 80186c8:	f008 fbd4 	bl	8020e74 <mg_snprintf>
 80186cc:	e048      	b.n	8018760 <mg_http_serve_file+0x48c>
                    (int64_t) size);
      } else {
        status = 206;
 80186ce:	23ce      	movs	r3, #206	@ 0xce
 80186d0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = r2 - r1 + 1;
 80186d4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80186d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80186dc:	681a      	ldr	r2, [r3, #0]
 80186de:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80186e2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	1ad3      	subs	r3, r2, r3
 80186ea:	3301      	adds	r3, #1
 80186ec:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range),
 80186f0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80186f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	2200      	movs	r2, #0
 80186fc:	469a      	mov	sl, r3
 80186fe:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8018700:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018704:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8018708:	681a      	ldr	r2, [r3, #0]
 801870a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801870e:	4413      	add	r3, r2
 8018710:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 8018712:	2200      	movs	r2, #0
 8018714:	461d      	mov	r5, r3
 8018716:	4616      	mov	r6, r2
 8018718:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801871c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	2200      	movs	r2, #0
 8018724:	603b      	str	r3, [r7, #0]
 8018726:	607a      	str	r2, [r7, #4]
 8018728:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801872c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8018730:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018734:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8018738:	e9cd ab00 	strd	sl, fp, [sp]
 801873c:	4a50      	ldr	r2, [pc, #320]	@ (8018880 <mg_http_serve_file+0x5ac>)
 801873e:	2164      	movs	r1, #100	@ 0x64
 8018740:	4618      	mov	r0, r3
 8018742:	f008 fb97 	bl	8020e74 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8018746:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801874a:	699b      	ldr	r3, [r3, #24]
 801874c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8018750:	6810      	ldr	r0, [r2, #0]
 8018752:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8018756:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 801875a:	6812      	ldr	r2, [r2, #0]
 801875c:	4611      	mov	r1, r2
 801875e:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8018760:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 8018764:	f7fe fec6 	bl	80174f4 <mg_http_status_code_str>
 8018768:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 801876a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801876e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8018772:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 8018774:	461d      	mov	r5, r3
 8018776:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801877a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801877e:	681a      	ldr	r2, [r3, #0]
 8018780:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8018784:	2100      	movs	r1, #0
 8018786:	4698      	mov	r8, r3
 8018788:	4689      	mov	r9, r1
 801878a:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 801878e:	2b00      	cmp	r3, #0
 8018790:	d001      	beq.n	8018796 <mg_http_serve_file+0x4c2>
 8018792:	493c      	ldr	r1, [pc, #240]	@ (8018884 <mg_http_serve_file+0x5b0>)
 8018794:	e000      	b.n	8018798 <mg_http_serve_file+0x4c4>
 8018796:	493c      	ldr	r1, [pc, #240]	@ (8018888 <mg_http_serve_file+0x5b4>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8018798:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801879c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d006      	beq.n	80187b6 <mg_http_serve_file+0x4e2>
 80187a8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80187ac:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	689b      	ldr	r3, [r3, #8]
 80187b4:	e000      	b.n	80187b8 <mg_http_serve_file+0x4e4>
 80187b6:	4b34      	ldr	r3, [pc, #208]	@ (8018888 <mg_http_serve_file+0x5b4>)
 80187b8:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 80187bc:	f5a0 70ca 	sub.w	r0, r0, #404	@ 0x194
 80187c0:	9308      	str	r3, [sp, #32]
 80187c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80187c6:	9307      	str	r3, [sp, #28]
 80187c8:	9106      	str	r1, [sp, #24]
 80187ca:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80187ce:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80187d2:	9302      	str	r3, [sp, #8]
 80187d4:	9201      	str	r2, [sp, #4]
 80187d6:	9500      	str	r5, [sp, #0]
 80187d8:	4623      	mov	r3, r4
 80187da:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80187de:	492b      	ldr	r1, [pc, #172]	@ (801888c <mg_http_serve_file+0x5b8>)
 80187e0:	6800      	ldr	r0, [r0, #0]
 80187e2:	f004 fc73 	bl	801d0cc <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 80187e6:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80187ea:	4929      	ldr	r1, [pc, #164]	@ (8018890 <mg_http_serve_file+0x5bc>)
 80187ec:	4618      	mov	r0, r3
 80187ee:	f009 f829 	bl	8021844 <mg_str_s>
 80187f2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80187f6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80187fa:	6819      	ldr	r1, [r3, #0]
 80187fc:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8018800:	cb0c      	ldmia	r3, {r2, r3}
 8018802:	c903      	ldmia	r1, {r0, r1}
 8018804:	f009 f8aa 	bl	802195c <mg_strcasecmp>
 8018808:	4603      	mov	r3, r0
 801880a:	2b00      	cmp	r3, #0
 801880c:	d10f      	bne.n	801882e <mg_http_serve_file+0x55a>
      c->is_resp = 0;
 801880e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018812:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8018816:	681a      	ldr	r2, [r3, #0]
 8018818:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801881c:	f36f 13c7 	bfc	r3, #7, #1
 8018820:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_fs_close(fd);
 8018824:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8018828:	f7fe f81f 	bl	801686a <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 801882c:	e01e      	b.n	801886c <mg_http_serve_file+0x598>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 801882e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018832:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	33a4      	adds	r3, #164	@ 0xa4
 801883a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
      c->pfn = static_cb;
 801883e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018842:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	4a12      	ldr	r2, [pc, #72]	@ (8018894 <mg_http_serve_file+0x5c0>)
 801884a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 801884e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018852:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 801885c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 8018860:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8018864:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8018868:	601a      	str	r2, [r3, #0]
}
 801886a:	e7ff      	b.n	801886c <mg_http_serve_file+0x598>
 801886c:	bf00      	nop
 801886e:	f507 77de 	add.w	r7, r7, #444	@ 0x1bc
 8018872:	46bd      	mov	sp, r7
 8018874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018878:	08031a98 	.word	0x08031a98
 801887c:	08031aa0 	.word	0x08031aa0
 8018880:	08031ac0 	.word	0x08031ac0
 8018884:	08031ae8 	.word	0x08031ae8
 8018888:	080317a8 	.word	0x080317a8
 801888c:	08031b04 	.word	0x08031b04
 8018890:	08031b54 	.word	0x08031b54
 8018894:	08018015 	.word	0x08018015

08018898 <printdirentry>:
  const struct mg_http_serve_opts *opts;
  const char *dir;
};

#if MG_ENABLE_DIRLIST
static void printdirentry(const char *name, void *userdata) {
 8018898:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801889c:	b0c8      	sub	sp, #288	@ 0x120
 801889e:	af0a      	add	r7, sp, #40	@ 0x28
 80188a0:	6078      	str	r0, [r7, #4]
 80188a2:	6039      	str	r1, [r7, #0]
  struct printdirentrydata *d = (struct printdirentrydata *) userdata;
 80188a4:	683b      	ldr	r3, [r7, #0]
 80188a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 80188aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80188ae:	689b      	ldr	r3, [r3, #8]
 80188b0:	695b      	ldr	r3, [r3, #20]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d004      	beq.n	80188c0 <printdirentry+0x28>
 80188b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80188ba:	689b      	ldr	r3, [r3, #8]
 80188bc:	695b      	ldr	r3, [r3, #20]
 80188be:	e000      	b.n	80188c2 <printdirentry+0x2a>
 80188c0:	4b66      	ldr	r3, [pc, #408]	@ (8018a5c <printdirentry+0x1c4>)
 80188c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  size_t size = 0;
 80188c6:	2300      	movs	r3, #0
 80188c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  time_t t = 0;
 80188cc:	f04f 0200 	mov.w	r2, #0
 80188d0:	f04f 0300 	mov.w	r3, #0
 80188d4:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
  char path[MG_PATH_MAX], sz[40], mod[40];
  int flags, n = 0;
 80188d8:	2300      	movs	r3, #0
 80188da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

  // MG_DEBUG(("[%s] [%s]", d->dir, name));
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 80188de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80188e2:	68da      	ldr	r2, [r3, #12]
 80188e4:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	9301      	str	r3, [sp, #4]
 80188ec:	232f      	movs	r3, #47	@ 0x2f
 80188ee:	9300      	str	r3, [sp, #0]
 80188f0:	4613      	mov	r3, r2
 80188f2:	4a5b      	ldr	r2, [pc, #364]	@ (8018a60 <printdirentry+0x1c8>)
 80188f4:	2180      	movs	r1, #128	@ 0x80
 80188f6:	f008 fabd 	bl	8020e74 <mg_snprintf>
 80188fa:	4603      	mov	r3, r0
 80188fc:	2b80      	cmp	r3, #128	@ 0x80
 80188fe:	d910      	bls.n	8018922 <printdirentry+0x8a>
      sizeof(path)) {
    MG_ERROR(("%s truncated", name));
 8018900:	4b58      	ldr	r3, [pc, #352]	@ (8018a64 <printdirentry+0x1cc>)
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	2b00      	cmp	r3, #0
 8018906:	f340 80a3 	ble.w	8018a50 <printdirentry+0x1b8>
 801890a:	4b57      	ldr	r3, [pc, #348]	@ (8018a68 <printdirentry+0x1d0>)
 801890c:	f640 3248 	movw	r2, #2888	@ 0xb48
 8018910:	4956      	ldr	r1, [pc, #344]	@ (8018a6c <printdirentry+0x1d4>)
 8018912:	2001      	movs	r0, #1
 8018914:	f002 fa92 	bl	801ae3c <mg_log_prefix>
 8018918:	6879      	ldr	r1, [r7, #4]
 801891a:	4855      	ldr	r0, [pc, #340]	@ (8018a70 <printdirentry+0x1d8>)
 801891c:	f002 fade 	bl	801aedc <mg_log>
              "  <tr><td><a href=\"%.*s%s\">%s%s</a></td>"
              "<td name=%lu>%s</td><td name=%lld>%s</td></tr>\n",
              n, path, slash, name, slash, (unsigned long) t, mod,
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
  }
}
 8018920:	e096      	b.n	8018a50 <printdirentry+0x1b8>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8018922:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 801892c:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8018930:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8018934:	4798      	blx	r3
 8018936:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 801893a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801893e:	2b00      	cmp	r3, #0
 8018940:	d11a      	bne.n	8018978 <printdirentry+0xe0>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8018942:	4b48      	ldr	r3, [pc, #288]	@ (8018a64 <printdirentry+0x1cc>)
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	2b00      	cmp	r3, #0
 8018948:	f340 8082 	ble.w	8018a50 <printdirentry+0x1b8>
 801894c:	4b46      	ldr	r3, [pc, #280]	@ (8018a68 <printdirentry+0x1d0>)
 801894e:	f640 324a 	movw	r2, #2890	@ 0xb4a
 8018952:	4946      	ldr	r1, [pc, #280]	@ (8018a6c <printdirentry+0x1d4>)
 8018954:	2001      	movs	r0, #1
 8018956:	f002 fa71 	bl	801ae3c <mg_log_prefix>
 801895a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8018962:	f00e fa79 	bl	8026e58 <__errno>
 8018966:	4603      	mov	r3, r0
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801896e:	4621      	mov	r1, r4
 8018970:	4840      	ldr	r0, [pc, #256]	@ (8018a74 <printdirentry+0x1dc>)
 8018972:	f002 fab3 	bl	801aedc <mg_log>
}
 8018976:	e06b      	b.n	8018a50 <printdirentry+0x1b8>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8018978:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801897c:	f003 0304 	and.w	r3, r3, #4
 8018980:	2b00      	cmp	r3, #0
 8018982:	d001      	beq.n	8018988 <printdirentry+0xf0>
 8018984:	4b3c      	ldr	r3, [pc, #240]	@ (8018a78 <printdirentry+0x1e0>)
 8018986:	e000      	b.n	801898a <printdirentry+0xf2>
 8018988:	4b3c      	ldr	r3, [pc, #240]	@ (8018a7c <printdirentry+0x1e4>)
 801898a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (flags & MG_FS_DIR) {
 801898e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8018992:	f003 0304 	and.w	r3, r3, #4
 8018996:	2b00      	cmp	r3, #0
 8018998:	d007      	beq.n	80189aa <printdirentry+0x112>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 801899a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801899e:	4b38      	ldr	r3, [pc, #224]	@ (8018a80 <printdirentry+0x1e8>)
 80189a0:	4a38      	ldr	r2, [pc, #224]	@ (8018a84 <printdirentry+0x1ec>)
 80189a2:	2128      	movs	r1, #40	@ 0x28
 80189a4:	f008 fa66 	bl	8020e74 <mg_snprintf>
 80189a8:	e00d      	b.n	80189c6 <printdirentry+0x12e>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 80189aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80189ae:	2200      	movs	r2, #0
 80189b0:	4698      	mov	r8, r3
 80189b2:	4691      	mov	r9, r2
 80189b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80189b8:	e9cd 8900 	strd	r8, r9, [sp]
 80189bc:	4a32      	ldr	r2, [pc, #200]	@ (8018a88 <printdirentry+0x1f0>)
 80189be:	2128      	movs	r1, #40	@ 0x28
 80189c0:	4618      	mov	r0, r3
 80189c2:	f008 fa57 	bl	8020e74 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 80189c6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80189ca:	4613      	mov	r3, r2
 80189cc:	f107 0008 	add.w	r0, r7, #8
 80189d0:	4a2e      	ldr	r2, [pc, #184]	@ (8018a8c <printdirentry+0x1f4>)
 80189d2:	2128      	movs	r1, #40	@ 0x28
 80189d4:	f008 fa4e 	bl	8020e74 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 80189d8:	6878      	ldr	r0, [r7, #4]
 80189da:	f7e7 fc61 	bl	80002a0 <strlen>
 80189de:	4601      	mov	r1, r0
 80189e0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80189e4:	2380      	movs	r3, #128	@ 0x80
 80189e6:	6878      	ldr	r0, [r7, #4]
 80189e8:	f000 fbdc 	bl	80191a4 <mg_url_encode>
 80189ec:	4603      	mov	r3, r0
 80189ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_printf(d->c,
 80189f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80189f6:	6818      	ldr	r0, [r3, #0]
 80189f8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80189fc:	4611      	mov	r1, r2
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 80189fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8018a02:	f003 0304 	and.w	r3, r3, #4
    mg_printf(d->c,
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d105      	bne.n	8018a16 <printdirentry+0x17e>
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 8018a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
    mg_printf(d->c,
 8018a0e:	2200      	movs	r2, #0
 8018a10:	461c      	mov	r4, r3
 8018a12:	4615      	mov	r5, r2
 8018a14:	e003      	b.n	8018a1e <printdirentry+0x186>
 8018a16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018a1a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8018a1e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8018a22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018a26:	9308      	str	r3, [sp, #32]
 8018a28:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018a2c:	f107 0308 	add.w	r3, r7, #8
 8018a30:	9304      	str	r3, [sp, #16]
 8018a32:	9103      	str	r1, [sp, #12]
 8018a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018a38:	9302      	str	r3, [sp, #8]
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	9301      	str	r3, [sp, #4]
 8018a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018a42:	9300      	str	r3, [sp, #0]
 8018a44:	4613      	mov	r3, r2
 8018a46:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8018a4a:	4911      	ldr	r1, [pc, #68]	@ (8018a90 <printdirentry+0x1f8>)
 8018a4c:	f004 fb3e 	bl	801d0cc <mg_printf>
}
 8018a50:	bf00      	nop
 8018a52:	37f8      	adds	r7, #248	@ 0xf8
 8018a54:	46bd      	mov	sp, r7
 8018a56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018a5a:	bf00      	nop
 8018a5c:	20000088 	.word	0x20000088
 8018a60:	08031b5c 	.word	0x08031b5c
 8018a64:	20000298 	.word	0x20000298
 8018a68:	08033e30 	.word	0x08033e30
 8018a6c:	080310c8 	.word	0x080310c8
 8018a70:	08031b64 	.word	0x08031b64
 8018a74:	08031b74 	.word	0x08031b74
 8018a78:	08031b88 	.word	0x08031b88
 8018a7c:	080317a8 	.word	0x080317a8
 8018a80:	08031b8c 	.word	0x08031b8c
 8018a84:	08031234 	.word	0x08031234
 8018a88:	08031b94 	.word	0x08031b94
 8018a8c:	08031b9c 	.word	0x08031b9c
 8018a90:	08031ba0 	.word	0x08031ba0

08018a94 <listdir>:

static void listdir(struct mg_connection *c, struct mg_http_message *hm,
                    const struct mg_http_serve_opts *opts, char *dir) {
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b0b8      	sub	sp, #224	@ 0xe0
 8018a98:	af04      	add	r7, sp, #16
 8018a9a:	60f8      	str	r0, [r7, #12]
 8018a9c:	60b9      	str	r1, [r7, #8]
 8018a9e:	607a      	str	r2, [r7, #4]
 8018aa0:	603b      	str	r3, [r7, #0]
  const char *sort_js_code =
 8018aa2:	4b51      	ldr	r3, [pc, #324]	@ (8018be8 <listdir+0x154>)
 8018aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      "t1 = a.cells[2].getAttribute('name'), "
      "t2 = b.cells[2].getAttribute('name'); "
      "return so * (t1 < 0 && t2 >= 0 ? -1 : t2 < 0 && t1 >= 0 ? 1 : "
      "n1 ? parseInt(n2) - parseInt(n1) : "
      "c1.textContent.trim().localeCompare(c2.textContent.trim())); });";
  const char *sort_js_code2 =
 8018aa8:	4b50      	ldr	r3, [pc, #320]	@ (8018bec <listdir+0x158>)
 8018aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      "var c = ev.target.rel; if (c) {if (c == sc) so *= -1; srt(tb, c, so); "
      "sc = c; ev.preventDefault();}};"
      "srt(tb, sc, so, true);"
      "}"
      "</script>";
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	695b      	ldr	r3, [r3, #20]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d002      	beq.n	8018abc <listdir+0x28>
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	695b      	ldr	r3, [r3, #20]
 8018aba:	e000      	b.n	8018abe <listdir+0x2a>
 8018abc:	4b4c      	ldr	r3, [pc, #304]	@ (8018bf0 <listdir+0x15c>)
 8018abe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  struct printdirentrydata d = {c, hm, opts, dir};
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8018ac8:	68bb      	ldr	r3, [r7, #8]
 8018aca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8018ad4:	683b      	ldr	r3, [r7, #0]
 8018ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  char tmp[10], buf[MG_PATH_MAX];
  size_t off, n;
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 8018ada:	68bb      	ldr	r3, [r7, #8]
 8018adc:	6898      	ldr	r0, [r3, #8]
 8018ade:	68bb      	ldr	r3, [r7, #8]
 8018ae0:	68d9      	ldr	r1, [r3, #12]
 8018ae2:	f107 021c 	add.w	r2, r7, #28
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	9300      	str	r3, [sp, #0]
 8018aea:	2380      	movs	r3, #128	@ 0x80
 8018aec:	f7fe f8e5 	bl	8016cba <mg_url_decode>
 8018af0:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8018af4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	dd09      	ble.n	8018b10 <listdir+0x7c>
 8018afc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8018b00:	f107 0314 	add.w	r3, r7, #20
 8018b04:	f107 011c 	add.w	r1, r7, #28
 8018b08:	4618      	mov	r0, r3
 8018b0a:	f008 feb8 	bl	802187e <mg_str_n>
 8018b0e:	e007      	b.n	8018b20 <listdir+0x8c>
 8018b10:	68ba      	ldr	r2, [r7, #8]
 8018b12:	f107 0314 	add.w	r3, r7, #20
 8018b16:	3208      	adds	r2, #8
 8018b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b1c:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_printf(c,
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html; charset=utf-8\r\n"
            "%s"
            "Content-Length:         \r\n\r\n",
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	689b      	ldr	r3, [r3, #8]
  mg_printf(c,
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d002      	beq.n	8018b2e <listdir+0x9a>
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	689b      	ldr	r3, [r3, #8]
 8018b2c:	e000      	b.n	8018b30 <listdir+0x9c>
 8018b2e:	4b31      	ldr	r3, [pc, #196]	@ (8018bf4 <listdir+0x160>)
 8018b30:	461a      	mov	r2, r3
 8018b32:	4931      	ldr	r1, [pc, #196]	@ (8018bf8 <listdir+0x164>)
 8018b34:	68f8      	ldr	r0, [r7, #12]
 8018b36:	f004 fac9 	bl	801d0cc <mg_printf>
  off = c->send.len;  // Start of body
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018b3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            "<a href=\"#\" rel=\"1\">Modified</a></th>"
            "<th><a href=\"#\" rel=\"2\">Size</a></th></tr>"
            "<tr><td colspan=\"3\"><hr></td></tr>"
            "</thead>"
            "<tbody id=\"tb\">\n",
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8018b42:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 8018b44:	4618      	mov	r0, r3
 8018b46:	697a      	ldr	r2, [r7, #20]
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8018b48:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 8018b4a:	4619      	mov	r1, r3
 8018b4c:	697b      	ldr	r3, [r7, #20]
 8018b4e:	9303      	str	r3, [sp, #12]
 8018b50:	9102      	str	r1, [sp, #8]
 8018b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8018b56:	9301      	str	r3, [sp, #4]
 8018b58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8018b5c:	9300      	str	r3, [sp, #0]
 8018b5e:	4613      	mov	r3, r2
 8018b60:	4602      	mov	r2, r0
 8018b62:	4926      	ldr	r1, [pc, #152]	@ (8018bfc <listdir+0x168>)
 8018b64:	68f8      	ldr	r0, [r7, #12]
 8018b66:	f004 fab1 	bl	801d0cc <mg_printf>
            uri.buf);
  mg_printf(c, "%s",
 8018b6a:	4a25      	ldr	r2, [pc, #148]	@ (8018c00 <listdir+0x16c>)
 8018b6c:	4925      	ldr	r1, [pc, #148]	@ (8018c04 <listdir+0x170>)
 8018b6e:	68f8      	ldr	r0, [r7, #12]
 8018b70:	f004 faac 	bl	801d0cc <mg_printf>
            "  <tr><td><a href=\"..\">..</a></td>"
            "<td name=-1></td><td name=-1>[DIR]</td></tr>\n");

  fs->ls(dir, printdirentry, &d);
 8018b74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8018b78:	685b      	ldr	r3, [r3, #4]
 8018b7a:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8018b7e:	4922      	ldr	r1, [pc, #136]	@ (8018c08 <listdir+0x174>)
 8018b80:	6838      	ldr	r0, [r7, #0]
 8018b82:	4798      	blx	r3
  mg_printf(c,
 8018b84:	4a21      	ldr	r2, [pc, #132]	@ (8018c0c <listdir+0x178>)
 8018b86:	4922      	ldr	r1, [pc, #136]	@ (8018c10 <listdir+0x17c>)
 8018b88:	68f8      	ldr	r0, [r7, #12]
 8018b8a:	f004 fa9f 	bl	801d0cc <mg_printf>
            "</tbody><tfoot><tr><td colspan=\"3\"><hr></td></tr></tfoot>"
            "</table><address>Mongoose v.%s</address></body></html>\n",
            MG_VERSION);
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018b92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8018b96:	1ad3      	subs	r3, r2, r3
 8018b98:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8018b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8018c14 <listdir+0x180>)
 8018b9e:	210a      	movs	r1, #10
 8018ba0:	f008 f968 	bl	8020e74 <mg_snprintf>
 8018ba4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  if (n > sizeof(tmp)) n = 0;
 8018ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8018bac:	2b0a      	cmp	r3, #10
 8018bae:	d902      	bls.n	8018bb6 <listdir+0x122>
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018bba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8018bbe:	3b0c      	subs	r3, #12
 8018bc0:	4413      	add	r3, r2
 8018bc2:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8018bc6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8018bca:	4618      	mov	r0, r3
 8018bcc:	f00e f97c 	bl	8026ec8 <memcpy>
  c->is_resp = 0;                          // Mark response end
 8018bd0:	68fa      	ldr	r2, [r7, #12]
 8018bd2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8018bd6:	f36f 13c7 	bfc	r3, #7, #1
 8018bda:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8018bde:	bf00      	nop
 8018be0:	37d0      	adds	r7, #208	@ 0xd0
 8018be2:	46bd      	mov	sp, r7
 8018be4:	bd80      	pop	{r7, pc}
 8018be6:	bf00      	nop
 8018be8:	08031bf8 	.word	0x08031bf8
 8018bec:	08031dc0 	.word	0x08031dc0
 8018bf0:	20000088 	.word	0x20000088
 8018bf4:	080317a8 	.word	0x080317a8
 8018bf8:	08031f84 	.word	0x08031f84
 8018bfc:	08031fdc 	.word	0x08031fdc
 8018c00:	08032164 	.word	0x08032164
 8018c04:	08031234 	.word	0x08031234
 8018c08:	08018899 	.word	0x08018899
 8018c0c:	080321b4 	.word	0x080321b4
 8018c10:	080321bc 	.word	0x080321bc
 8018c14:	08031b9c 	.word	0x08031b9c

08018c18 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8018c18:	b082      	sub	sp, #8
 8018c1a:	b590      	push	{r4, r7, lr}
 8018c1c:	b08f      	sub	sp, #60	@ 0x3c
 8018c1e:	af02      	add	r7, sp, #8
 8018c20:	60f8      	str	r0, [r7, #12]
 8018c22:	60b9      	str	r1, [r7, #8]
 8018c24:	607a      	str	r2, [r7, #4]
 8018c26:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8018c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018c2a:	461a      	mov	r2, r3
 8018c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018c2e:	9300      	str	r3, [sp, #0]
 8018c30:	4613      	mov	r3, r2
 8018c32:	4a9c      	ldr	r2, [pc, #624]	@ (8018ea4 <uri_to_path2+0x28c>)
 8018c34:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8018c36:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018c38:	f008 f91c 	bl	8020e74 <mg_snprintf>
 8018c3c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 8018c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c40:	3302      	adds	r3, #2
 8018c42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018c44:	429a      	cmp	r2, r3
 8018c46:	d809      	bhi.n	8018c5c <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8018c48:	4b97      	ldr	r3, [pc, #604]	@ (8018ea8 <uri_to_path2+0x290>)
 8018c4a:	4a98      	ldr	r2, [pc, #608]	@ (8018eac <uri_to_path2+0x294>)
 8018c4c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018c50:	68f8      	ldr	r0, [r7, #12]
 8018c52:	f7ff f94b 	bl	8017eec <mg_http_reply>
    return -1;
 8018c56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018c5a:	e143      	b.n	8018ee4 <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 8018c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018c5e:	3b01      	subs	r3, #1
 8018c60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018c62:	4413      	add	r3, r2
 8018c64:	2200      	movs	r2, #0
 8018c66:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8018c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d012      	beq.n	8018c94 <uri_to_path2+0x7c>
 8018c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c70:	3b01      	subs	r3, #1
 8018c72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018c74:	4413      	add	r3, r2
 8018c76:	781b      	ldrb	r3, [r3, #0]
 8018c78:	2b2f      	cmp	r3, #47	@ 0x2f
 8018c7a:	d00b      	beq.n	8018c94 <uri_to_path2+0x7c>
 8018c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c7e:	1c5a      	adds	r2, r3, #1
 8018c80:	627a      	str	r2, [r7, #36]	@ 0x24
 8018c82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018c84:	4413      	add	r3, r2
 8018c86:	222f      	movs	r2, #47	@ 0x2f
 8018c88:	701a      	strb	r2, [r3, #0]
 8018c8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c8e:	4413      	add	r3, r2
 8018c90:	2200      	movs	r2, #0
 8018c92:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 8018c94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018c96:	68bb      	ldr	r3, [r7, #8]
 8018c98:	68db      	ldr	r3, [r3, #12]
 8018c9a:	429a      	cmp	r2, r3
 8018c9c:	d212      	bcs.n	8018cc4 <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 8018c9e:	68bb      	ldr	r3, [r7, #8]
 8018ca0:	689a      	ldr	r2, [r3, #8]
 8018ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018ca4:	18d0      	adds	r0, r2, r3
 8018ca6:	68bb      	ldr	r3, [r7, #8]
 8018ca8:	68da      	ldr	r2, [r3, #12]
 8018caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018cac:	1ad1      	subs	r1, r2, r3
 8018cae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cb2:	18d4      	adds	r4, r2, r3
 8018cb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cb8:	1ad3      	subs	r3, r2, r3
 8018cba:	2200      	movs	r2, #0
 8018cbc:	9200      	str	r2, [sp, #0]
 8018cbe:	4622      	mov	r2, r4
 8018cc0:	f7fd fffb 	bl	8016cba <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 8018cc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018cc6:	3b01      	subs	r3, #1
 8018cc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018cca:	4413      	add	r3, r2
 8018ccc:	2200      	movs	r2, #0
 8018cce:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8018cd0:	f107 0314 	add.w	r3, r7, #20
 8018cd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018cd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018cd8:	4618      	mov	r0, r3
 8018cda:	f008 fdd0 	bl	802187e <mg_str_n>
 8018cde:	f107 0314 	add.w	r3, r7, #20
 8018ce2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018ce6:	f009 fda1 	bl	802282c <mg_path_is_sane>
 8018cea:	4603      	mov	r3, r0
 8018cec:	f083 0301 	eor.w	r3, r3, #1
 8018cf0:	b2db      	uxtb	r3, r3
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d009      	beq.n	8018d0a <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 8018cf6:	4b6e      	ldr	r3, [pc, #440]	@ (8018eb0 <uri_to_path2+0x298>)
 8018cf8:	4a6c      	ldr	r2, [pc, #432]	@ (8018eac <uri_to_path2+0x294>)
 8018cfa:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018cfe:	68f8      	ldr	r0, [r7, #12]
 8018d00:	f7ff f8f4 	bl	8017eec <mg_http_reply>
    return -1;
 8018d04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018d08:	e0ec      	b.n	8018ee4 <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 8018d0a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018d0c:	f7e7 fac8 	bl	80002a0 <strlen>
 8018d10:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8018d12:	e007      	b.n	8018d24 <uri_to_path2+0x10c>
 8018d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d16:	3b01      	subs	r3, #1
 8018d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8018d1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d1e:	4413      	add	r3, r2
 8018d20:	2200      	movs	r2, #0
 8018d22:	701a      	strb	r2, [r3, #0]
 8018d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d26:	2b01      	cmp	r3, #1
 8018d28:	d906      	bls.n	8018d38 <uri_to_path2+0x120>
 8018d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d2c:	3b01      	subs	r3, #1
 8018d2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018d30:	4413      	add	r3, r2
 8018d32:	781b      	ldrb	r3, [r3, #0]
 8018d34:	2b2f      	cmp	r3, #47	@ 0x2f
 8018d36:	d0ed      	beq.n	8018d14 <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8018d38:	f107 031c 	add.w	r3, r7, #28
 8018d3c:	495d      	ldr	r1, [pc, #372]	@ (8018eb4 <uri_to_path2+0x29c>)
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f008 fd80 	bl	8021844 <mg_str_s>
 8018d44:	68b9      	ldr	r1, [r7, #8]
 8018d46:	f107 031c 	add.w	r3, r7, #28
 8018d4a:	cb0c      	ldmia	r3, {r2, r3}
 8018d4c:	3108      	adds	r1, #8
 8018d4e:	c903      	ldmia	r1, {r0, r1}
 8018d50:	f008 fdc2 	bl	80218d8 <mg_strcmp>
 8018d54:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d007      	beq.n	8018d6a <uri_to_path2+0x152>
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	2200      	movs	r2, #0
 8018d60:	2100      	movs	r1, #0
 8018d62:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018d64:	4798      	blx	r3
 8018d66:	4603      	mov	r3, r0
 8018d68:	e000      	b.n	8018d6c <uri_to_path2+0x154>
 8018d6a:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8018d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8018d6e:	4b52      	ldr	r3, [pc, #328]	@ (8018eb8 <uri_to_path2+0x2a0>)
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	2b03      	cmp	r3, #3
 8018d74:	dd16      	ble.n	8018da4 <uri_to_path2+0x18c>
 8018d76:	4b51      	ldr	r3, [pc, #324]	@ (8018ebc <uri_to_path2+0x2a4>)
 8018d78:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 8018d7c:	4950      	ldr	r1, [pc, #320]	@ (8018ec0 <uri_to_path2+0x2a8>)
 8018d7e:	2004      	movs	r0, #4
 8018d80:	f002 f85c 	bl	801ae3c <mg_log_prefix>
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8018d88:	68bb      	ldr	r3, [r7, #8]
 8018d8a:	68db      	ldr	r3, [r3, #12]
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	68bb      	ldr	r3, [r7, #8]
 8018d90:	689a      	ldr	r2, [r3, #8]
 8018d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d94:	9301      	str	r3, [sp, #4]
 8018d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d98:	9300      	str	r3, [sp, #0]
 8018d9a:	4613      	mov	r3, r2
 8018d9c:	4602      	mov	r2, r0
 8018d9e:	4849      	ldr	r0, [pc, #292]	@ (8018ec4 <uri_to_path2+0x2ac>)
 8018da0:	f002 f89c 	bl	801aedc <mg_log>
              flags));
  if (flags == 0) {
 8018da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	f000 809b 	beq.w	8018ee2 <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8018dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dae:	f003 0304 	and.w	r3, r3, #4
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d020      	beq.n	8018df8 <uri_to_path2+0x1e0>
 8018db6:	68bb      	ldr	r3, [r7, #8]
 8018db8:	68db      	ldr	r3, [r3, #12]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d01c      	beq.n	8018df8 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 8018dbe:	68bb      	ldr	r3, [r7, #8]
 8018dc0:	689a      	ldr	r2, [r3, #8]
 8018dc2:	68bb      	ldr	r3, [r7, #8]
 8018dc4:	68db      	ldr	r3, [r3, #12]
 8018dc6:	3b01      	subs	r3, #1
 8018dc8:	4413      	add	r3, r2
 8018dca:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8018dcc:	2b2f      	cmp	r3, #47	@ 0x2f
 8018dce:	d013      	beq.n	8018df8 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 8018dd0:	68bb      	ldr	r3, [r7, #8]
 8018dd2:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8018dd4:	461a      	mov	r2, r3
 8018dd6:	68bb      	ldr	r3, [r7, #8]
 8018dd8:	689b      	ldr	r3, [r3, #8]
 8018dda:	493b      	ldr	r1, [pc, #236]	@ (8018ec8 <uri_to_path2+0x2b0>)
 8018ddc:	68f8      	ldr	r0, [r7, #12]
 8018dde:	f004 f975 	bl	801d0cc <mg_printf>
    c->is_resp = 0;
 8018de2:	68fa      	ldr	r2, [r7, #12]
 8018de4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8018de8:	f36f 13c7 	bfc	r3, #7, #1
 8018dec:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    flags = -1;
 8018df0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018df6:	e074      	b.n	8018ee2 <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 8018df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dfa:	f003 0304 	and.w	r3, r3, #4
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d06f      	beq.n	8018ee2 <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8018e02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e06:	18d0      	adds	r0, r2, r3
 8018e08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e0c:	1ad3      	subs	r3, r2, r3
 8018e0e:	4a2f      	ldr	r2, [pc, #188]	@ (8018ecc <uri_to_path2+0x2b4>)
 8018e10:	4619      	mov	r1, r3
 8018e12:	f008 f82f 	bl	8020e74 <mg_snprintf>
 8018e16:	4603      	mov	r3, r0
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d009      	beq.n	8018e30 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	2200      	movs	r2, #0
 8018e22:	2100      	movs	r1, #0
 8018e24:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018e26:	4798      	blx	r3
 8018e28:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8018e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d116      	bne.n	8018e5e <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8018e30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e34:	18d0      	adds	r0, r2, r3
 8018e36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e3a:	1ad3      	subs	r3, r2, r3
 8018e3c:	4a24      	ldr	r2, [pc, #144]	@ (8018ed0 <uri_to_path2+0x2b8>)
 8018e3e:	4619      	mov	r1, r3
 8018e40:	f008 f818 	bl	8020e74 <mg_snprintf>
 8018e44:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d00c      	beq.n	8018e64 <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	2200      	movs	r2, #0
 8018e50:	2100      	movs	r1, #0
 8018e52:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018e54:	4798      	blx	r3
 8018e56:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8018e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d002      	beq.n	8018e64 <uri_to_path2+0x24c>
      flags = tmp;
 8018e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018e62:	e03e      	b.n	8018ee2 <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8018e64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e68:	18d0      	adds	r0, r2, r3
 8018e6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e6e:	1ad3      	subs	r3, r2, r3
 8018e70:	4a18      	ldr	r2, [pc, #96]	@ (8018ed4 <uri_to_path2+0x2bc>)
 8018e72:	4619      	mov	r1, r3
 8018e74:	f007 fffe 	bl	8020e74 <mg_snprintf>
 8018e78:	4603      	mov	r3, r0
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d02c      	beq.n	8018ed8 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	2200      	movs	r2, #0
 8018e84:	2100      	movs	r1, #0
 8018e86:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018e88:	4798      	blx	r3
 8018e8a:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 8018e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d022      	beq.n	8018ed8 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 8018e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8018e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e98:	330b      	adds	r3, #11
 8018e9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018e9c:	4413      	add	r3, r2
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	701a      	strb	r2, [r3, #0]
 8018ea2:	e01e      	b.n	8018ee2 <uri_to_path2+0x2ca>
 8018ea4:	08031248 	.word	0x08031248
 8018ea8:	08032230 	.word	0x08032230
 8018eac:	080317a8 	.word	0x080317a8
 8018eb0:	08032244 	.word	0x08032244
 8018eb4:	08031b88 	.word	0x08031b88
 8018eb8:	20000298 	.word	0x20000298
 8018ebc:	08033e40 	.word	0x08033e40
 8018ec0:	080310c8 	.word	0x080310c8
 8018ec4:	08032254 	.word	0x08032254
 8018ec8:	08032268 	.word	0x08032268
 8018ecc:	080322a4 	.word	0x080322a4
 8018ed0:	080322b0 	.word	0x080322b0
 8018ed4:	080322c0 	.word	0x080322c0
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8018ed8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018edc:	4413      	add	r3, r2
 8018ede:	2200      	movs	r2, #0
 8018ee0:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 8018ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	3734      	adds	r7, #52	@ 0x34
 8018ee8:	46bd      	mov	sp, r7
 8018eea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8018eee:	b002      	add	sp, #8
 8018ef0:	4770      	bx	lr
 8018ef2:	bf00      	nop

08018ef4 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 8018ef4:	b580      	push	{r7, lr}
 8018ef6:	b09c      	sub	sp, #112	@ 0x70
 8018ef8:	af06      	add	r7, sp, #24
 8018efa:	6178      	str	r0, [r7, #20]
 8018efc:	6139      	str	r1, [r7, #16]
 8018efe:	60fa      	str	r2, [r7, #12]
 8018f00:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	695b      	ldr	r3, [r3, #20]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d002      	beq.n	8018f10 <uri_to_path+0x1c>
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	695b      	ldr	r3, [r3, #20]
 8018f0e:	e000      	b.n	8018f12 <uri_to_path+0x1e>
 8018f10:	4b5b      	ldr	r3, [pc, #364]	@ (8019080 <uri_to_path+0x18c>)
 8018f12:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	681a      	ldr	r2, [r3, #0]
 8018f18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018f1c:	4611      	mov	r1, r2
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f008 fc90 	bl	8021844 <mg_str_s>
 8018f24:	2300      	movs	r3, #0
 8018f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8018f28:	2300      	movs	r3, #0
 8018f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018f2c:	f107 031c 	add.w	r3, r7, #28
 8018f30:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018f34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f38:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 8018f3c:	e078      	b.n	8019030 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8018f3e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018f42:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8018f46:	213d      	movs	r1, #61	@ 0x3d
 8018f48:	9100      	str	r1, [sp, #0]
 8018f4a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8018f4e:	c903      	ldmia	r1, {r0, r1}
 8018f50:	f008 fe3f 	bl	8021bd2 <mg_span>
 8018f54:	4603      	mov	r3, r0
 8018f56:	f083 0301 	eor.w	r3, r3, #1
 8018f5a:	b2db      	uxtb	r3, r3
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d014      	beq.n	8018f8a <uri_to_path+0x96>
 8018f60:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8018f64:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8018f68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018f70:	463b      	mov	r3, r7
 8018f72:	2200      	movs	r2, #0
 8018f74:	2100      	movs	r1, #0
 8018f76:	4618      	mov	r0, r3
 8018f78:	f008 fc81 	bl	802187e <mg_str_n>
 8018f7c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018f80:	463a      	mov	r2, r7
 8018f82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f86:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8018f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d123      	bne.n	8018fd8 <uri_to_path+0xe4>
 8018f90:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018f94:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8018f98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f9c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018fa0:	463b      	mov	r3, r7
 8018fa2:	4938      	ldr	r1, [pc, #224]	@ (8019084 <uri_to_path+0x190>)
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	f008 fc4d 	bl	8021844 <mg_str_s>
 8018faa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8018fae:	463a      	mov	r2, r7
 8018fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018fb4:	e883 0003 	stmia.w	r3, {r0, r1}
 8018fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018fbc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8018fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018fc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8018fc8:	f107 031c 	add.w	r3, r7, #28
 8018fcc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8018fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018fd4:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8018fd8:	693b      	ldr	r3, [r7, #16]
 8018fda:	68da      	ldr	r2, [r3, #12]
 8018fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018fde:	429a      	cmp	r2, r3
 8018fe0:	d323      	bcc.n	801902a <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8018fe2:	693b      	ldr	r3, [r7, #16]
 8018fe4:	6899      	ldr	r1, [r3, #8]
 8018fe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018fe8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018fec:	4618      	mov	r0, r3
 8018fee:	f008 fc46 	bl	802187e <mg_str_n>
 8018ff2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018ff6:	cb0c      	ldmia	r3, {r2, r3}
 8018ff8:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8018ffc:	c903      	ldmia	r1, {r0, r1}
 8018ffe:	f008 fc6b 	bl	80218d8 <mg_strcmp>
 8019002:	4603      	mov	r3, r0
 8019004:	2b00      	cmp	r3, #0
 8019006:	d112      	bne.n	801902e <uri_to_path+0x13a>
    u = k, p = v;
 8019008:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801900c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8019010:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019014:	e883 0003 	stmia.w	r3, {r0, r1}
 8019018:	f107 031c 	add.w	r3, r7, #28
 801901c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8019020:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019024:	e883 0003 	stmia.w	r3, {r0, r1}
 8019028:	e002      	b.n	8019030 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 801902a:	bf00      	nop
 801902c:	e000      	b.n	8019030 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 801902e:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 8019030:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019034:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8019038:	212c      	movs	r1, #44	@ 0x2c
 801903a:	9100      	str	r1, [sp, #0]
 801903c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8019040:	c903      	ldmia	r1, {r0, r1}
 8019042:	f008 fdc6 	bl	8021bd2 <mg_span>
 8019046:	4603      	mov	r3, r0
 8019048:	2b00      	cmp	r3, #0
 801904a:	f47f af78 	bne.w	8018f3e <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 801904e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019050:	9304      	str	r3, [sp, #16]
 8019052:	68bb      	ldr	r3, [r7, #8]
 8019054:	9303      	str	r3, [sp, #12]
 8019056:	aa01      	add	r2, sp, #4
 8019058:	f107 031c 	add.w	r3, r7, #28
 801905c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019060:	e882 0003 	stmia.w	r2, {r0, r1}
 8019064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019066:	9300      	str	r3, [sp, #0]
 8019068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801906a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801906c:	6939      	ldr	r1, [r7, #16]
 801906e:	6978      	ldr	r0, [r7, #20]
 8019070:	f7ff fdd2 	bl	8018c18 <uri_to_path2>
 8019074:	4603      	mov	r3, r0
}
 8019076:	4618      	mov	r0, r3
 8019078:	3758      	adds	r7, #88	@ 0x58
 801907a:	46bd      	mov	sp, r7
 801907c:	bd80      	pop	{r7, pc}
 801907e:	bf00      	nop
 8019080:	20000088 	.word	0x20000088
 8019084:	08031b88 	.word	0x08031b88

08019088 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8019088:	b580      	push	{r7, lr}
 801908a:	b0ac      	sub	sp, #176	@ 0xb0
 801908c:	af02      	add	r7, sp, #8
 801908e:	60f8      	str	r0, [r7, #12]
 8019090:	60b9      	str	r1, [r7, #8]
 8019092:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	685b      	ldr	r3, [r3, #4]
 8019098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 801909c:	f107 0310 	add.w	r3, r7, #16
 80190a0:	2280      	movs	r2, #128	@ 0x80
 80190a2:	9200      	str	r2, [sp, #0]
 80190a4:	687a      	ldr	r2, [r7, #4]
 80190a6:	68b9      	ldr	r1, [r7, #8]
 80190a8:	68f8      	ldr	r0, [r7, #12]
 80190aa:	f7ff ff23 	bl	8018ef4 <uri_to_path>
 80190ae:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  if (flags < 0) {
 80190b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	db41      	blt.n	801913e <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 80190ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80190be:	f003 0304 	and.w	r3, r3, #4
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d007      	beq.n	80190d6 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
 80190c6:	f107 0310 	add.w	r3, r7, #16
 80190ca:	687a      	ldr	r2, [r7, #4]
 80190cc:	68b9      	ldr	r1, [r7, #8]
 80190ce:	68f8      	ldr	r0, [r7, #12]
 80190d0:	f7ff fce0 	bl	8018a94 <listdir>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 80190d4:	e033      	b.n	801913e <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 80190d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d028      	beq.n	8019130 <mg_http_serve_dir+0xa8>
 80190de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d024      	beq.n	8019130 <mg_http_serve_dir+0xa8>
 80190e6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80190ea:	f107 0210 	add.w	r2, r7, #16
 80190ee:	4611      	mov	r1, r2
 80190f0:	4618      	mov	r0, r3
 80190f2:	f008 fba7 	bl	8021844 <mg_str_s>
 80190f6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80190fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80190fe:	4618      	mov	r0, r3
 8019100:	f008 fba0 	bl	8021844 <mg_str_s>
 8019104:	2300      	movs	r3, #0
 8019106:	9300      	str	r3, [sp, #0]
 8019108:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801910c:	cb0c      	ldmia	r3, {r2, r3}
 801910e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8019112:	c903      	ldmia	r1, {r0, r1}
 8019114:	f008 fc69 	bl	80219ea <mg_match>
 8019118:	4603      	mov	r3, r0
 801911a:	2b00      	cmp	r3, #0
 801911c:	d008      	beq.n	8019130 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	f107 0210 	add.w	r2, r7, #16
 8019126:	4619      	mov	r1, r3
 8019128:	68f8      	ldr	r0, [r7, #12]
 801912a:	f008 fb77 	bl	802181c <mg_http_serve_ssi>
}
 801912e:	e006      	b.n	801913e <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 8019130:	f107 0210 	add.w	r2, r7, #16
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	68b9      	ldr	r1, [r7, #8]
 8019138:	68f8      	ldr	r0, [r7, #12]
 801913a:	f7ff f8cb 	bl	80182d4 <mg_http_serve_file>
}
 801913e:	bf00      	nop
 8019140:	37a8      	adds	r7, #168	@ 0xa8
 8019142:	46bd      	mov	sp, r7
 8019144:	bd80      	pop	{r7, pc}

08019146 <mg_is_url_safe>:

static bool mg_is_url_safe(int c) {
 8019146:	b480      	push	{r7}
 8019148:	b083      	sub	sp, #12
 801914a:	af00      	add	r7, sp, #0
 801914c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	2b2f      	cmp	r3, #47	@ 0x2f
 8019152:	dd02      	ble.n	801915a <mg_is_url_safe+0x14>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	2b39      	cmp	r3, #57	@ 0x39
 8019158:	dd17      	ble.n	801918a <mg_is_url_safe+0x44>
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	2b60      	cmp	r3, #96	@ 0x60
 801915e:	dd02      	ble.n	8019166 <mg_is_url_safe+0x20>
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	2b7a      	cmp	r3, #122	@ 0x7a
 8019164:	dd11      	ble.n	801918a <mg_is_url_safe+0x44>
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	2b40      	cmp	r3, #64	@ 0x40
 801916a:	dd02      	ble.n	8019172 <mg_is_url_safe+0x2c>
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	2b5a      	cmp	r3, #90	@ 0x5a
 8019170:	dd0b      	ble.n	801918a <mg_is_url_safe+0x44>
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	2b2e      	cmp	r3, #46	@ 0x2e
 8019176:	d008      	beq.n	801918a <mg_is_url_safe+0x44>
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	2b5f      	cmp	r3, #95	@ 0x5f
 801917c:	d005      	beq.n	801918a <mg_is_url_safe+0x44>
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	2b2d      	cmp	r3, #45	@ 0x2d
 8019182:	d002      	beq.n	801918a <mg_is_url_safe+0x44>
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	2b7e      	cmp	r3, #126	@ 0x7e
 8019188:	d101      	bne.n	801918e <mg_is_url_safe+0x48>
 801918a:	2301      	movs	r3, #1
 801918c:	e000      	b.n	8019190 <mg_is_url_safe+0x4a>
 801918e:	2300      	movs	r3, #0
 8019190:	f003 0301 	and.w	r3, r3, #1
 8019194:	b2db      	uxtb	r3, r3
}
 8019196:	4618      	mov	r0, r3
 8019198:	370c      	adds	r7, #12
 801919a:	46bd      	mov	sp, r7
 801919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a0:	4770      	bx	lr
	...

080191a4 <mg_url_encode>:

size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b08a      	sub	sp, #40	@ 0x28
 80191a8:	af02      	add	r7, sp, #8
 80191aa:	60f8      	str	r0, [r7, #12]
 80191ac:	60b9      	str	r1, [r7, #8]
 80191ae:	607a      	str	r2, [r7, #4]
 80191b0:	603b      	str	r3, [r7, #0]
  size_t i, n = 0;
 80191b2:	2300      	movs	r3, #0
 80191b4:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 80191b6:	2300      	movs	r3, #0
 80191b8:	61fb      	str	r3, [r7, #28]
 80191ba:	e030      	b.n	801921e <mg_url_encode+0x7a>
    int c = *(unsigned char *) &s[i];
 80191bc:	68fa      	ldr	r2, [r7, #12]
 80191be:	69fb      	ldr	r3, [r7, #28]
 80191c0:	4413      	add	r3, r2
 80191c2:	781b      	ldrb	r3, [r3, #0]
 80191c4:	617b      	str	r3, [r7, #20]
    if (n + 4 >= len) return 0;
 80191c6:	69bb      	ldr	r3, [r7, #24]
 80191c8:	3304      	adds	r3, #4
 80191ca:	683a      	ldr	r2, [r7, #0]
 80191cc:	429a      	cmp	r2, r3
 80191ce:	d801      	bhi.n	80191d4 <mg_url_encode+0x30>
 80191d0:	2300      	movs	r3, #0
 80191d2:	e03f      	b.n	8019254 <mg_url_encode+0xb0>
    if (mg_is_url_safe(c)) {
 80191d4:	6978      	ldr	r0, [r7, #20]
 80191d6:	f7ff ffb6 	bl	8019146 <mg_is_url_safe>
 80191da:	4603      	mov	r3, r0
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d00a      	beq.n	80191f6 <mg_url_encode+0x52>
      buf[n++] = s[i];
 80191e0:	68fa      	ldr	r2, [r7, #12]
 80191e2:	69fb      	ldr	r3, [r7, #28]
 80191e4:	441a      	add	r2, r3
 80191e6:	69bb      	ldr	r3, [r7, #24]
 80191e8:	1c59      	adds	r1, r3, #1
 80191ea:	61b9      	str	r1, [r7, #24]
 80191ec:	6879      	ldr	r1, [r7, #4]
 80191ee:	440b      	add	r3, r1
 80191f0:	7812      	ldrb	r2, [r2, #0]
 80191f2:	701a      	strb	r2, [r3, #0]
 80191f4:	e010      	b.n	8019218 <mg_url_encode+0x74>
    } else {
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 80191f6:	687a      	ldr	r2, [r7, #4]
 80191f8:	69bb      	ldr	r3, [r7, #24]
 80191fa:	18d0      	adds	r0, r2, r3
 80191fc:	68fa      	ldr	r2, [r7, #12]
 80191fe:	69fb      	ldr	r3, [r7, #28]
 8019200:	4413      	add	r3, r2
 8019202:	9301      	str	r3, [sp, #4]
 8019204:	2301      	movs	r3, #1
 8019206:	9300      	str	r3, [sp, #0]
 8019208:	4b14      	ldr	r3, [pc, #80]	@ (801925c <mg_url_encode+0xb8>)
 801920a:	4a15      	ldr	r2, [pc, #84]	@ (8019260 <mg_url_encode+0xbc>)
 801920c:	2104      	movs	r1, #4
 801920e:	f007 fe31 	bl	8020e74 <mg_snprintf>
      n += 3;
 8019212:	69bb      	ldr	r3, [r7, #24]
 8019214:	3303      	adds	r3, #3
 8019216:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 8019218:	69fb      	ldr	r3, [r7, #28]
 801921a:	3301      	adds	r3, #1
 801921c:	61fb      	str	r3, [r7, #28]
 801921e:	69fa      	ldr	r2, [r7, #28]
 8019220:	68bb      	ldr	r3, [r7, #8]
 8019222:	429a      	cmp	r2, r3
 8019224:	d3ca      	bcc.n	80191bc <mg_url_encode+0x18>
    }
  }
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 8019226:	683b      	ldr	r3, [r7, #0]
 8019228:	2b00      	cmp	r3, #0
 801922a:	d009      	beq.n	8019240 <mg_url_encode+0x9c>
 801922c:	683b      	ldr	r3, [r7, #0]
 801922e:	3b01      	subs	r3, #1
 8019230:	69ba      	ldr	r2, [r7, #24]
 8019232:	429a      	cmp	r2, r3
 8019234:	d204      	bcs.n	8019240 <mg_url_encode+0x9c>
 8019236:	687a      	ldr	r2, [r7, #4]
 8019238:	69bb      	ldr	r3, [r7, #24]
 801923a:	4413      	add	r3, r2
 801923c:	2200      	movs	r2, #0
 801923e:	701a      	strb	r2, [r3, #0]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8019240:	683b      	ldr	r3, [r7, #0]
 8019242:	2b00      	cmp	r3, #0
 8019244:	d005      	beq.n	8019252 <mg_url_encode+0xae>
 8019246:	683b      	ldr	r3, [r7, #0]
 8019248:	3b01      	subs	r3, #1
 801924a:	687a      	ldr	r2, [r7, #4]
 801924c:	4413      	add	r3, r2
 801924e:	2200      	movs	r2, #0
 8019250:	701a      	strb	r2, [r3, #0]
  return n;
 8019252:	69bb      	ldr	r3, [r7, #24]
}
 8019254:	4618      	mov	r0, r3
 8019256:	3720      	adds	r7, #32
 8019258:	46bd      	mov	sp, r7
 801925a:	bd80      	pop	{r7, pc}
 801925c:	0802115d 	.word	0x0802115d
 8019260:	080322d0 	.word	0x080322d0

08019264 <mg_http_upload>:
#define headers_tmp     "Content-Type: application/json\r\n" "Access-Control-Allow-Origin: *\r\n" "Access-Control-Allow-Headers: Content-Type\r\n"



long mg_http_upload(struct mg_connection *c, struct mg_http_message *hm,
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8019264:	b590      	push	{r4, r7, lr}
 8019266:	b0d3      	sub	sp, #332	@ 0x14c
 8019268:	af02      	add	r7, sp, #8
 801926a:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 801926e:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 8019272:	6020      	str	r0, [r4, #0]
 8019274:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8019278:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 801927c:	6001      	str	r1, [r0, #0]
 801927e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8019282:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8019286:	600a      	str	r2, [r1, #0]
 8019288:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801928c:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8019290:	6013      	str	r3, [r2, #0]
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8019292:	2330      	movs	r3, #48	@ 0x30
 8019294:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8019298:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 801929c:	2200      	movs	r2, #0
 801929e:	601a      	str	r2, [r3, #0]
 80192a0:	605a      	str	r2, [r3, #4]
 80192a2:	609a      	str	r2, [r3, #8]
 80192a4:	60da      	str	r2, [r3, #12]
  long res = 0, offset;
 80192a6:	2300      	movs	r3, #0
 80192a8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 80192ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80192b0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	f103 0010 	add.w	r0, r3, #16
 80192ba:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80192be:	2314      	movs	r3, #20
 80192c0:	49b5      	ldr	r1, [pc, #724]	@ (8019598 <mg_http_upload+0x334>)
 80192c2:	f7fd fc85 	bl	8016bd0 <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80192c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80192ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	f103 0010 	add.w	r0, r3, #16
 80192d4:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 80192d8:	2380      	movs	r3, #128	@ 0x80
 80192da:	49b0      	ldr	r1, [pc, #704]	@ (801959c <mg_http_upload+0x338>)
 80192dc:	f7fd fc78 	bl	8016bd0 <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 80192e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80192e4:	2200      	movs	r2, #0
 80192e6:	2100      	movs	r1, #0
 80192e8:	4618      	mov	r0, r3
 80192ea:	f00b ff37 	bl	802515c <strtol>
 80192ee:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 80192f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80192f6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80192fa:	f107 0018 	add.w	r0, r7, #24
 80192fe:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8019302:	9201      	str	r2, [sp, #4]
 8019304:	222f      	movs	r2, #47	@ 0x2f
 8019306:	9200      	str	r2, [sp, #0]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	4aa5      	ldr	r2, [pc, #660]	@ (80195a0 <mg_http_upload+0x33c>)
 801930c:	2180      	movs	r1, #128	@ 0x80
 801930e:	f007 fdb1 	bl	8020e74 <mg_snprintf>
  if (hm->body.len == 0) {
 8019312:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019316:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019320:	2b00      	cmp	r3, #0
 8019322:	d10d      	bne.n	8019340 <mg_http_upload+0xdc>
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 8019324:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019328:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 801932c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8019330:	9300      	str	r3, [sp, #0]
 8019332:	4b9c      	ldr	r3, [pc, #624]	@ (80195a4 <mg_http_upload+0x340>)
 8019334:	4a9c      	ldr	r2, [pc, #624]	@ (80195a8 <mg_http_upload+0x344>)
 8019336:	21c8      	movs	r1, #200	@ 0xc8
 8019338:	6800      	ldr	r0, [r0, #0]
 801933a:	f7fe fdd7 	bl	8017eec <mg_http_reply>
 801933e:	e123      	b.n	8019588 <mg_http_upload+0x324>
  } else if (file[0] == '\0') {
 8019340:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8019344:	2b00      	cmp	r3, #0
 8019346:	d10f      	bne.n	8019368 <mg_http_upload+0x104>
    mg_http_reply(c, 400, "", "file required");
 8019348:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801934c:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8019350:	4b96      	ldr	r3, [pc, #600]	@ (80195ac <mg_http_upload+0x348>)
 8019352:	4a97      	ldr	r2, [pc, #604]	@ (80195b0 <mg_http_upload+0x34c>)
 8019354:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019358:	6800      	ldr	r0, [r0, #0]
 801935a:	f7fe fdc7 	bl	8017eec <mg_http_reply>
    res = -1;
 801935e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019362:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8019366:	e10f      	b.n	8019588 <mg_http_upload+0x324>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8019368:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 801936c:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8019370:	4611      	mov	r1, r2
 8019372:	4618      	mov	r0, r3
 8019374:	f008 fa66 	bl	8021844 <mg_str_s>
 8019378:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 801937c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019380:	f009 fa54 	bl	802282c <mg_path_is_sane>
 8019384:	4603      	mov	r3, r0
 8019386:	f083 0301 	eor.w	r3, r3, #1
 801938a:	b2db      	uxtb	r3, r3
 801938c:	2b00      	cmp	r3, #0
 801938e:	d012      	beq.n	80193b6 <mg_http_upload+0x152>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8019390:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019394:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8019398:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801939c:	9300      	str	r3, [sp, #0]
 801939e:	4b85      	ldr	r3, [pc, #532]	@ (80195b4 <mg_http_upload+0x350>)
 80193a0:	4a83      	ldr	r2, [pc, #524]	@ (80195b0 <mg_http_upload+0x34c>)
 80193a2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80193a6:	6800      	ldr	r0, [r0, #0]
 80193a8:	f7fe fda0 	bl	8017eec <mg_http_reply>
    res = -2;
 80193ac:	f06f 0301 	mvn.w	r3, #1
 80193b0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80193b4:	e0e8      	b.n	8019588 <mg_http_upload+0x324>
  } else if (offset < 0) {
 80193b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	da0f      	bge.n	80193de <mg_http_upload+0x17a>
    mg_http_reply(c, 400, "", "offset required");
 80193be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80193c2:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80193c6:	4b7c      	ldr	r3, [pc, #496]	@ (80195b8 <mg_http_upload+0x354>)
 80193c8:	4a79      	ldr	r2, [pc, #484]	@ (80195b0 <mg_http_upload+0x34c>)
 80193ca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80193ce:	6800      	ldr	r0, [r0, #0]
 80193d0:	f7fe fd8c 	bl	8017eec <mg_http_reply>
    res = -3;
 80193d4:	f06f 0302 	mvn.w	r3, #2
 80193d8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80193dc:	e0d4      	b.n	8019588 <mg_http_upload+0x324>
  } else if ((size_t) offset + hm->body.len > max_size) {
 80193de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80193e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80193ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80193f0:	4413      	add	r3, r2
 80193f2:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80193f6:	429a      	cmp	r2, r3
 80193f8:	d215      	bcs.n	8019426 <mg_http_upload+0x1c2>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 80193fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80193fe:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8019402:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8019406:	9301      	str	r3, [sp, #4]
 8019408:	f107 0318 	add.w	r3, r7, #24
 801940c:	9300      	str	r3, [sp, #0]
 801940e:	4b6b      	ldr	r3, [pc, #428]	@ (80195bc <mg_http_upload+0x358>)
 8019410:	4a67      	ldr	r2, [pc, #412]	@ (80195b0 <mg_http_upload+0x34c>)
 8019412:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019416:	6800      	ldr	r0, [r0, #0]
 8019418:	f7fe fd68 	bl	8017eec <mg_http_reply>
                  (unsigned long) max_size);
    res = -4;
 801941c:	f06f 0303 	mvn.w	r3, #3
 8019420:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8019424:	e0b0      	b.n	8019588 <mg_http_upload+0x324>
  } else {
    struct mg_fd *fd;
    size_t current_size = 0;
 8019426:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801942a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801942e:	2200      	movs	r2, #0
 8019430:	601a      	str	r2, [r3, #0]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8019432:	4b63      	ldr	r3, [pc, #396]	@ (80195c0 <mg_http_upload+0x35c>)
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	2b02      	cmp	r3, #2
 8019438:	dd14      	ble.n	8019464 <mg_http_upload+0x200>
 801943a:	4b62      	ldr	r3, [pc, #392]	@ (80195c4 <mg_http_upload+0x360>)
 801943c:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8019440:	4961      	ldr	r1, [pc, #388]	@ (80195c8 <mg_http_upload+0x364>)
 8019442:	2003      	movs	r0, #3
 8019444:	f001 fcfa 	bl	801ae3c <mg_log_prefix>
 8019448:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801944c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8019456:	f107 0118 	add.w	r1, r7, #24
 801945a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801945e:	485b      	ldr	r0, [pc, #364]	@ (80195cc <mg_http_upload+0x368>)
 8019460:	f001 fd3c 	bl	801aedc <mg_log>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8019464:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019468:	2b00      	cmp	r3, #0
 801946a:	d109      	bne.n	8019480 <mg_http_upload+0x21c>
 801946c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019470:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	6a1b      	ldr	r3, [r3, #32]
 8019478:	f107 0218 	add.w	r2, r7, #24
 801947c:	4610      	mov	r0, r2
 801947e:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8019480:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019484:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	f107 0114 	add.w	r1, r7, #20
 8019490:	f107 0018 	add.w	r0, r7, #24
 8019494:	2200      	movs	r2, #0
 8019496:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8019498:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801949c:	2b00      	cmp	r3, #0
 801949e:	dd1b      	ble.n	80194d8 <mg_http_upload+0x274>
 80194a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80194a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80194a8:	681a      	ldr	r2, [r3, #0]
 80194aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80194ae:	429a      	cmp	r2, r3
 80194b0:	d012      	beq.n	80194d8 <mg_http_upload+0x274>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 80194b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80194b6:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80194ba:	f107 0318 	add.w	r3, r7, #24
 80194be:	9300      	str	r3, [sp, #0]
 80194c0:	4b43      	ldr	r3, [pc, #268]	@ (80195d0 <mg_http_upload+0x36c>)
 80194c2:	4a3b      	ldr	r2, [pc, #236]	@ (80195b0 <mg_http_upload+0x34c>)
 80194c4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80194c8:	6800      	ldr	r0, [r0, #0]
 80194ca:	f7fe fd0f 	bl	8017eec <mg_http_reply>
      res = -5;
 80194ce:	f06f 0304 	mvn.w	r3, #4
 80194d2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80194d6:	e057      	b.n	8019588 <mg_http_upload+0x324>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 80194d8:	f107 0118 	add.w	r1, r7, #24
 80194dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80194e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80194e4:	2202      	movs	r2, #2
 80194e6:	6818      	ldr	r0, [r3, #0]
 80194e8:	f7fd f998 	bl	801681c <mg_fs_open>
 80194ec:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
 80194f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d117      	bne.n	8019528 <mg_http_upload+0x2c4>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 80194f8:	f00d fcae 	bl	8026e58 <__errno>
 80194fc:	4603      	mov	r3, r0
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8019504:	f5a2 709a 	sub.w	r0, r2, #308	@ 0x134
 8019508:	9301      	str	r3, [sp, #4]
 801950a:	f107 0318 	add.w	r3, r7, #24
 801950e:	9300      	str	r3, [sp, #0]
 8019510:	4b30      	ldr	r3, [pc, #192]	@ (80195d4 <mg_http_upload+0x370>)
 8019512:	4a27      	ldr	r2, [pc, #156]	@ (80195b0 <mg_http_upload+0x34c>)
 8019514:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019518:	6800      	ldr	r0, [r0, #0]
 801951a:	f7fe fce7 	bl	8017eec <mg_http_reply>
      res = -6;
 801951e:	f06f 0305 	mvn.w	r3, #5
 8019522:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8019526:	e02f      	b.n	8019588 <mg_http_upload+0x324>
    } else {
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8019528:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801952c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	695b      	ldr	r3, [r3, #20]
 8019534:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019538:	6810      	ldr	r0, [r2, #0]
 801953a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801953e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8019542:	6812      	ldr	r2, [r2, #0]
 8019544:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8019548:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801954c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8019550:	6812      	ldr	r2, [r2, #0]
 8019552:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8019556:	4798      	blx	r3
 8019558:	4603      	mov	r3, r0
 801955a:	461a      	mov	r2, r3
 801955c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019560:	4413      	add	r3, r2
 8019562:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      mg_fs_close(fd);
 8019566:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 801956a:	f7fd f97e 	bl	801686a <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 801956e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019572:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8019576:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801957a:	9300      	str	r3, [sp, #0]
 801957c:	4b09      	ldr	r3, [pc, #36]	@ (80195a4 <mg_http_upload+0x340>)
 801957e:	4a0a      	ldr	r2, [pc, #40]	@ (80195a8 <mg_http_upload+0x344>)
 8019580:	21c8      	movs	r1, #200	@ 0xc8
 8019582:	6800      	ldr	r0, [r0, #0]
 8019584:	f7fe fcb2 	bl	8017eec <mg_http_reply>
    }
  }
  return res;
 8019588:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
}
 801958c:	4618      	mov	r0, r3
 801958e:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8019592:	46bd      	mov	sp, r7
 8019594:	bd90      	pop	{r4, r7, pc}
 8019596:	bf00      	nop
 8019598:	08032310 	.word	0x08032310
 801959c:	08032318 	.word	0x08032318
 80195a0:	08031b5c 	.word	0x08031b5c
 80195a4:	08032320 	.word	0x08032320
 80195a8:	08032324 	.word	0x08032324
 80195ac:	08032394 	.word	0x08032394
 80195b0:	080317a8 	.word	0x080317a8
 80195b4:	080323a4 	.word	0x080323a4
 80195b8:	080323b8 	.word	0x080323b8
 80195bc:	080323c8 	.word	0x080323c8
 80195c0:	20000298 	.word	0x20000298
 80195c4:	08033e50 	.word	0x08033e50
 80195c8:	080310c8 	.word	0x080310c8
 80195cc:	080323e4 	.word	0x080323e4
 80195d0:	080323fc 	.word	0x080323fc
 80195d4:	08032410 	.word	0x08032410

080195d8 <mg_http_status>:

int mg_http_status(const struct mg_http_message *hm) {
 80195d8:	b580      	push	{r7, lr}
 80195da:	b082      	sub	sp, #8
 80195dc:	af00      	add	r7, sp, #0
 80195de:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	689b      	ldr	r3, [r3, #8]
 80195e4:	4618      	mov	r0, r3
 80195e6:	f009 fcfd 	bl	8022fe4 <atoi>
 80195ea:	4603      	mov	r3, r0
}
 80195ec:	4618      	mov	r0, r3
 80195ee:	3708      	adds	r7, #8
 80195f0:	46bd      	mov	sp, r7
 80195f2:	bd80      	pop	{r7, pc}

080195f4 <is_hex_digit>:

static bool is_hex_digit(int c) {
 80195f4:	b480      	push	{r7}
 80195f6:	b083      	sub	sp, #12
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8019600:	dd02      	ble.n	8019608 <is_hex_digit+0x14>
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	2b39      	cmp	r3, #57	@ 0x39
 8019606:	dd0b      	ble.n	8019620 <is_hex_digit+0x2c>
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	2b60      	cmp	r3, #96	@ 0x60
 801960c:	dd02      	ble.n	8019614 <is_hex_digit+0x20>
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	2b66      	cmp	r3, #102	@ 0x66
 8019612:	dd05      	ble.n	8019620 <is_hex_digit+0x2c>
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	2b40      	cmp	r3, #64	@ 0x40
 8019618:	dd04      	ble.n	8019624 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	2b46      	cmp	r3, #70	@ 0x46
 801961e:	dc01      	bgt.n	8019624 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8019620:	2301      	movs	r3, #1
 8019622:	e000      	b.n	8019626 <is_hex_digit+0x32>
 8019624:	2300      	movs	r3, #0
 8019626:	f003 0301 	and.w	r3, r3, #1
 801962a:	b2db      	uxtb	r3, r3
}
 801962c:	4618      	mov	r0, r3
 801962e:	370c      	adds	r7, #12
 8019630:	46bd      	mov	sp, r7
 8019632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019636:	4770      	bx	lr

08019638 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8019638:	b580      	push	{r7, lr}
 801963a:	b08a      	sub	sp, #40	@ 0x28
 801963c:	af02      	add	r7, sp, #8
 801963e:	60f8      	str	r0, [r7, #12]
 8019640:	60b9      	str	r1, [r7, #8]
 8019642:	607a      	str	r2, [r7, #4]
 8019644:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 8019646:	2300      	movs	r3, #0
 8019648:	61fb      	str	r3, [r7, #28]
 801964a:	2300      	movs	r3, #0
 801964c:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 801964e:	68bb      	ldr	r3, [r7, #8]
 8019650:	2b02      	cmp	r3, #2
 8019652:	dc04      	bgt.n	801965e <skip_chunk+0x26>
 8019654:	2300      	movs	r3, #0
 8019656:	e07a      	b.n	801974e <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 8019658:	69fb      	ldr	r3, [r7, #28]
 801965a:	3301      	adds	r3, #1
 801965c:	61fb      	str	r3, [r7, #28]
 801965e:	69fa      	ldr	r2, [r7, #28]
 8019660:	68bb      	ldr	r3, [r7, #8]
 8019662:	429a      	cmp	r2, r3
 8019664:	da09      	bge.n	801967a <skip_chunk+0x42>
 8019666:	69fb      	ldr	r3, [r7, #28]
 8019668:	68fa      	ldr	r2, [r7, #12]
 801966a:	4413      	add	r3, r2
 801966c:	781b      	ldrb	r3, [r3, #0]
 801966e:	4618      	mov	r0, r3
 8019670:	f7ff ffc0 	bl	80195f4 <is_hex_digit>
 8019674:	4603      	mov	r3, r0
 8019676:	2b00      	cmp	r3, #0
 8019678:	d1ee      	bne.n	8019658 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 801967a:	69fb      	ldr	r3, [r7, #28]
 801967c:	2b00      	cmp	r3, #0
 801967e:	d102      	bne.n	8019686 <skip_chunk+0x4e>
 8019680:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019684:	e063      	b.n	801974e <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8019686:	69fb      	ldr	r3, [r7, #28]
 8019688:	2b08      	cmp	r3, #8
 801968a:	dd02      	ble.n	8019692 <skip_chunk+0x5a>
 801968c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019690:	e05d      	b.n	801974e <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8019692:	69fa      	ldr	r2, [r7, #28]
 8019694:	68bb      	ldr	r3, [r7, #8]
 8019696:	429a      	cmp	r2, r3
 8019698:	da0c      	bge.n	80196b4 <skip_chunk+0x7c>
 801969a:	69fb      	ldr	r3, [r7, #28]
 801969c:	68fa      	ldr	r2, [r7, #12]
 801969e:	4413      	add	r3, r2
 80196a0:	781b      	ldrb	r3, [r3, #0]
 80196a2:	2b0d      	cmp	r3, #13
 80196a4:	d106      	bne.n	80196b4 <skip_chunk+0x7c>
 80196a6:	69fb      	ldr	r3, [r7, #28]
 80196a8:	3301      	adds	r3, #1
 80196aa:	68fa      	ldr	r2, [r7, #12]
 80196ac:	4413      	add	r3, r2
 80196ae:	781b      	ldrb	r3, [r3, #0]
 80196b0:	2b0a      	cmp	r3, #10
 80196b2:	d002      	beq.n	80196ba <skip_chunk+0x82>
 80196b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80196b8:	e049      	b.n	801974e <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 80196ba:	69fa      	ldr	r2, [r7, #28]
 80196bc:	f107 0314 	add.w	r3, r7, #20
 80196c0:	68f9      	ldr	r1, [r7, #12]
 80196c2:	4618      	mov	r0, r3
 80196c4:	f008 f8db 	bl	802187e <mg_str_n>
 80196c8:	f107 0310 	add.w	r3, r7, #16
 80196cc:	2204      	movs	r2, #4
 80196ce:	9200      	str	r2, [sp, #0]
 80196d0:	2210      	movs	r2, #16
 80196d2:	f107 0114 	add.w	r1, r7, #20
 80196d6:	c903      	ldmia	r1, {r0, r1}
 80196d8:	f008 fad8 	bl	8021c8c <mg_str_to_num>
 80196dc:	4603      	mov	r3, r0
 80196de:	f083 0301 	eor.w	r3, r3, #1
 80196e2:	b2db      	uxtb	r3, r3
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d002      	beq.n	80196ee <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 80196e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80196ec:	e02f      	b.n	801974e <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 80196ee:	693b      	ldr	r3, [r7, #16]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	da02      	bge.n	80196fa <skip_chunk+0xc2>
 80196f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80196f8:	e029      	b.n	801974e <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 80196fa:	68ba      	ldr	r2, [r7, #8]
 80196fc:	69fb      	ldr	r3, [r7, #28]
 80196fe:	1ad3      	subs	r3, r2, r3
 8019700:	1eda      	subs	r2, r3, #3
 8019702:	693b      	ldr	r3, [r7, #16]
 8019704:	429a      	cmp	r2, r3
 8019706:	dc01      	bgt.n	801970c <skip_chunk+0xd4>
 8019708:	2300      	movs	r3, #0
 801970a:	e020      	b.n	801974e <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 801970c:	693a      	ldr	r2, [r7, #16]
 801970e:	69fb      	ldr	r3, [r7, #28]
 8019710:	4413      	add	r3, r2
 8019712:	3302      	adds	r3, #2
 8019714:	68fa      	ldr	r2, [r7, #12]
 8019716:	4413      	add	r3, r2
 8019718:	781b      	ldrb	r3, [r3, #0]
 801971a:	2b0d      	cmp	r3, #13
 801971c:	d108      	bne.n	8019730 <skip_chunk+0xf8>
 801971e:	693a      	ldr	r2, [r7, #16]
 8019720:	69fb      	ldr	r3, [r7, #28]
 8019722:	4413      	add	r3, r2
 8019724:	3303      	adds	r3, #3
 8019726:	68fa      	ldr	r2, [r7, #12]
 8019728:	4413      	add	r3, r2
 801972a:	781b      	ldrb	r3, [r3, #0]
 801972c:	2b0a      	cmp	r3, #10
 801972e:	d002      	beq.n	8019736 <skip_chunk+0xfe>
 8019730:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019734:	e00b      	b.n	801974e <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 8019736:	69fb      	ldr	r3, [r7, #28]
 8019738:	1c9a      	adds	r2, r3, #2
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	601a      	str	r2, [r3, #0]
 801973e:	693a      	ldr	r2, [r7, #16]
 8019740:	683b      	ldr	r3, [r7, #0]
 8019742:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 8019744:	69fb      	ldr	r3, [r7, #28]
 8019746:	1c9a      	adds	r2, r3, #2
 8019748:	693b      	ldr	r3, [r7, #16]
 801974a:	4413      	add	r3, r2
 801974c:	3302      	adds	r3, #2
}
 801974e:	4618      	mov	r0, r3
 8019750:	3720      	adds	r7, #32
 8019752:	46bd      	mov	sp, r7
 8019754:	bd80      	pop	{r7, pc}
	...

08019758 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8019758:	b580      	push	{r7, lr}
 801975a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801975e:	af00      	add	r7, sp, #0
 8019760:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019764:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019768:	6018      	str	r0, [r3, #0]
 801976a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801976e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8019772:	6019      	str	r1, [r3, #0]
 8019774:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019778:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 801977c:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 801977e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019782:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	2b07      	cmp	r3, #7
 801978a:	d031      	beq.n	80197f0 <http_cb+0x98>
 801978c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019790:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	2b09      	cmp	r3, #9
 8019798:	d02a      	beq.n	80197f0 <http_cb+0x98>
 801979a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801979e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	2b02      	cmp	r3, #2
 80197a6:	f040 831a 	bne.w	8019dde <http_cb+0x686>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80197aa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80197ae:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80197b8:	f003 0304 	and.w	r3, r3, #4
 80197bc:	b2db      	uxtb	r3, r3
 80197be:	2b00      	cmp	r3, #0
 80197c0:	f000 830d 	beq.w	8019dde <http_cb+0x686>
 80197c4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80197c8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80197d2:	f003 0310 	and.w	r3, r3, #16
 80197d6:	b2db      	uxtb	r3, r3
 80197d8:	2b00      	cmp	r3, #0
 80197da:	f040 8300 	bne.w	8019dde <http_cb+0x686>
       c->recv.len > 0)) {  // see #2796
 80197de:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80197e2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	f000 82f7 	beq.w	8019dde <http_cb+0x686>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 80197f0:	2300      	movs	r3, #0
 80197f2:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 80197f6:	e2c5      	b.n	8019d84 <http_cb+0x62c>
      const char *buf = (char *) c->recv.buf + ofs;
 80197f8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80197fc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019804:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019808:	4413      	add	r3, r2
 801980a:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 801980e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019812:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801981a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 801981e:	1ad3      	subs	r3, r2, r3
 8019820:	f107 0214 	add.w	r2, r7, #20
 8019824:	4619      	mov	r1, r3
 8019826:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 801982a:	f7fd fcf5 	bl	8017218 <mg_http_parse>
 801982e:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 8019832:	2300      	movs	r3, #0
 8019834:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      if (n < 0) {
 8019838:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801983c:	2b00      	cmp	r3, #0
 801983e:	da38      	bge.n	80198b2 <http_cb+0x15a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8019840:	4bc8      	ldr	r3, [pc, #800]	@ (8019b64 <http_cb+0x40c>)
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	2b00      	cmp	r3, #0
 8019846:	dd10      	ble.n	801986a <http_cb+0x112>
 8019848:	4bc7      	ldr	r3, [pc, #796]	@ (8019b68 <http_cb+0x410>)
 801984a:	f640 42a3 	movw	r2, #3235	@ 0xca3
 801984e:	49c7      	ldr	r1, [pc, #796]	@ (8019b6c <http_cb+0x414>)
 8019850:	2001      	movs	r0, #1
 8019852:	f001 faf3 	bl	801ae3c <mg_log_prefix>
 8019856:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801985a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019862:	4619      	mov	r1, r3
 8019864:	48c2      	ldr	r0, [pc, #776]	@ (8019b70 <http_cb+0x418>)
 8019866:	f001 fb39 	bl	801aedc <mg_log>
        c->is_draining = 1;
 801986a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801986e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019872:	681a      	ldr	r2, [r3, #0]
 8019874:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8019878:	f043 0310 	orr.w	r3, r3, #16
 801987c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8019880:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019884:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801988c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019890:	1ad3      	subs	r3, r2, r3
 8019892:	2b10      	cmp	r3, #16
 8019894:	bf28      	it	cs
 8019896:	2310      	movcs	r3, #16
 8019898:	4619      	mov	r1, r3
 801989a:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 801989e:	f001 fb53 	bl	801af48 <mg_hexdump>
        c->recv.len = 0;
 80198a2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80198a6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	2200      	movs	r2, #0
 80198ae:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 80198b0:	e295      	b.n	8019dde <http_cb+0x686>
      }
      if (n == 0) break;                 // Request is not buffered yet
 80198b2:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	f000 827c 	beq.w	8019db4 <http_cb+0x65c>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 80198bc:	f107 0214 	add.w	r2, r7, #20
 80198c0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80198c4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80198c8:	210a      	movs	r1, #10
 80198ca:	6818      	ldr	r0, [r3, #0]
 80198cc:	f7fb fed0 	bl	8015670 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 80198d0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80198d4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	2b09      	cmp	r3, #9
 80198dc:	d128      	bne.n	8019930 <http_cb+0x1d8>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 80198de:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80198e2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80198ea:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80198ee:	1ad2      	subs	r2, r2, r3
 80198f0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80198f4:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80198f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 80198fc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019900:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019904:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8019908:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 801990c:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8019910:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8019914:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8019918:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 801991c:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 8019920:	1a8a      	subs	r2, r1, r2
 8019922:	1a9a      	subs	r2, r3, r2
 8019924:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019928:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 801992c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8019930:	f107 0314 	add.w	r3, r7, #20
 8019934:	498f      	ldr	r1, [pc, #572]	@ (8019b74 <http_cb+0x41c>)
 8019936:	4618      	mov	r0, r3
 8019938:	f7fd fab2 	bl	8016ea0 <mg_http_get_header>
 801993c:	f8c7 0270 	str.w	r0, [r7, #624]	@ 0x270
 8019940:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8019944:	2b00      	cmp	r3, #0
 8019946:	d01d      	beq.n	8019984 <http_cb+0x22c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8019948:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 801994c:	498a      	ldr	r1, [pc, #552]	@ (8019b78 <http_cb+0x420>)
 801994e:	4618      	mov	r0, r3
 8019950:	f007 ff78 	bl	8021844 <mg_str_s>
 8019954:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 8019958:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 801995c:	cb0c      	ldmia	r3, {r2, r3}
 801995e:	c903      	ldmia	r1, {r0, r1}
 8019960:	f007 fffc 	bl	802195c <mg_strcasecmp>
 8019964:	4603      	mov	r3, r0
 8019966:	2b00      	cmp	r3, #0
 8019968:	d103      	bne.n	8019972 <http_cb+0x21a>
          is_chunked = true;
 801996a:	2301      	movs	r3, #1
 801996c:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 8019970:	e09f      	b.n	8019ab2 <http_cb+0x35a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8019972:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019976:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801997a:	4980      	ldr	r1, [pc, #512]	@ (8019b7c <http_cb+0x424>)
 801997c:	6818      	ldr	r0, [r3, #0]
 801997e:	f7fb fe97 	bl	80156b0 <mg_error>
          return;
 8019982:	e22c      	b.n	8019dde <http_cb+0x686>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8019984:	f107 0314 	add.w	r3, r7, #20
 8019988:	497d      	ldr	r1, [pc, #500]	@ (8019b80 <http_cb+0x428>)
 801998a:	4618      	mov	r0, r3
 801998c:	f7fd fa88 	bl	8016ea0 <mg_http_get_header>
 8019990:	4603      	mov	r3, r0
 8019992:	2b00      	cmp	r3, #0
 8019994:	f040 808d 	bne.w	8019ab2 <http_cb+0x35a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8019998:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801999c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	2205      	movs	r2, #5
 80199a4:	4977      	ldr	r1, [pc, #476]	@ (8019b84 <http_cb+0x42c>)
 80199a6:	4618      	mov	r0, r3
 80199a8:	f7fc ffec 	bl	8016984 <mg_ncasecmp>
 80199ac:	4603      	mov	r3, r0
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	bf0c      	ite	eq
 80199b2:	2301      	moveq	r3, #1
 80199b4:	2300      	movne	r3, #0
 80199b6:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
        bool require_content_len = false;
 80199ba:	2300      	movs	r3, #0
 80199bc:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 80199c0:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80199c4:	f083 0301 	eor.w	r3, r3, #1
 80199c8:	b2db      	uxtb	r3, r3
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d030      	beq.n	8019a30 <http_cb+0x2d8>
 80199ce:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 80199d2:	496d      	ldr	r1, [pc, #436]	@ (8019b88 <http_cb+0x430>)
 80199d4:	4618      	mov	r0, r3
 80199d6:	f007 ff35 	bl	8021844 <mg_str_s>
 80199da:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80199de:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 80199e2:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 80199e6:	cb0c      	ldmia	r3, {r2, r3}
 80199e8:	c903      	ldmia	r1, {r0, r1}
 80199ea:	f007 ffb7 	bl	802195c <mg_strcasecmp>
 80199ee:	4603      	mov	r3, r0
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d012      	beq.n	8019a1a <http_cb+0x2c2>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 80199f4:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 80199f8:	4964      	ldr	r1, [pc, #400]	@ (8019b8c <http_cb+0x434>)
 80199fa:	4618      	mov	r0, r3
 80199fc:	f007 ff22 	bl	8021844 <mg_str_s>
 8019a00:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019a04:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 8019a08:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8019a0c:	cb0c      	ldmia	r3, {r2, r3}
 8019a0e:	c903      	ldmia	r1, {r0, r1}
 8019a10:	f007 ffa4 	bl	802195c <mg_strcasecmp>
 8019a14:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d10a      	bne.n	8019a30 <http_cb+0x2d8>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 8019a1a:	2301      	movs	r3, #1
 8019a1c:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 8019a20:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019a24:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8019a28:	4413      	add	r3, r2
 8019a2a:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8019a2e:	e022      	b.n	8019a76 <http_cb+0x31e>
        } else if (is_response) {
 8019a30:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d01e      	beq.n	8019a76 <http_cb+0x31e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 8019a38:	f107 0314 	add.w	r3, r7, #20
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	f7ff fdcb 	bl	80195d8 <mg_http_status>
 8019a42:	f8c7 0268 	str.w	r0, [r7, #616]	@ 0x268
          require_content_len = status >= 200 && status != 204 && status != 304;
 8019a46:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8019a4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8019a4c:	dd0a      	ble.n	8019a64 <http_cb+0x30c>
 8019a4e:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8019a52:	2bcc      	cmp	r3, #204	@ 0xcc
 8019a54:	d006      	beq.n	8019a64 <http_cb+0x30c>
 8019a56:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8019a5a:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8019a5e:	d001      	beq.n	8019a64 <http_cb+0x30c>
 8019a60:	2301      	movs	r3, #1
 8019a62:	e000      	b.n	8019a66 <http_cb+0x30e>
 8019a64:	2300      	movs	r3, #0
 8019a66:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 8019a6a:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8019a6e:	f003 0301 	and.w	r3, r3, #1
 8019a72:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 8019a76:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d019      	beq.n	8019ab2 <http_cb+0x35a>
          mg_http_reply(c, 411, "", "");
 8019a7e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019a82:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 8019a86:	4b42      	ldr	r3, [pc, #264]	@ (8019b90 <http_cb+0x438>)
 8019a88:	4a41      	ldr	r2, [pc, #260]	@ (8019b90 <http_cb+0x438>)
 8019a8a:	f240 119b 	movw	r1, #411	@ 0x19b
 8019a8e:	6800      	ldr	r0, [r0, #0]
 8019a90:	f7fe fa2c 	bl	8017eec <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8019a94:	4b33      	ldr	r3, [pc, #204]	@ (8019b64 <http_cb+0x40c>)
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	dd0a      	ble.n	8019ab2 <http_cb+0x35a>
 8019a9c:	4b32      	ldr	r3, [pc, #200]	@ (8019b68 <http_cb+0x410>)
 8019a9e:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8019aa2:	4932      	ldr	r1, [pc, #200]	@ (8019b6c <http_cb+0x414>)
 8019aa4:	2001      	movs	r0, #1
 8019aa6:	f001 f9c9 	bl	801ae3c <mg_log_prefix>
 8019aaa:	493a      	ldr	r1, [pc, #232]	@ (8019b94 <http_cb+0x43c>)
 8019aac:	483a      	ldr	r0, [pc, #232]	@ (8019b98 <http_cb+0x440>)
 8019aae:	f001 fa15 	bl	801aedc <mg_log>
        }
      }

      if (is_chunked) {
 8019ab2:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	f000 80e8 	beq.w	8019c8c <http_cb+0x534>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 8019abc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019ac0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019ac8:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 8019acc:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019ad0:	440b      	add	r3, r1
 8019ad2:	4413      	add	r3, r2
 8019ad4:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8019ad8:	2300      	movs	r3, #0
 8019ada:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019ade:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019ae2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019aea:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019aee:	1ad2      	subs	r2, r2, r3
 8019af0:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019af4:	1ad3      	subs	r3, r2, r3
 8019af6:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8019afa:	e006      	b.n	8019b0a <http_cb+0x3b2>
 8019afc:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8019b00:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019b04:	4413      	add	r3, r2
 8019b06:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019b0a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019b0e:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019b12:	18d0      	adds	r0, r2, r3
 8019b14:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8019b18:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019b1c:	1ad1      	subs	r1, r2, r3
 8019b1e:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8019b22:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8019b26:	f7ff fd87 	bl	8019638 <skip_chunk>
 8019b2a:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 8019b2e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	dd03      	ble.n	8019b3e <http_cb+0x3e6>
 8019b36:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d1de      	bne.n	8019afc <http_cb+0x3a4>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8019b3e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	f000 8138 	beq.w	8019db8 <http_cb+0x660>
        if (cl < 0) {
 8019b48:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	da27      	bge.n	8019ba0 <http_cb+0x448>
          mg_error(c, "Invalid chunk");
 8019b50:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019b54:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019b58:	4910      	ldr	r1, [pc, #64]	@ (8019b9c <http_cb+0x444>)
 8019b5a:	6818      	ldr	r0, [r3, #0]
 8019b5c:	f7fb fda8 	bl	80156b0 <mg_error>
          break;
 8019b60:	e12d      	b.n	8019dbe <http_cb+0x666>
 8019b62:	bf00      	nop
 8019b64:	20000298 	.word	0x20000298
 8019b68:	08033e60 	.word	0x08033e60
 8019b6c:	080310c8 	.word	0x080310c8
 8019b70:	08032420 	.word	0x08032420
 8019b74:	08032438 	.word	0x08032438
 8019b78:	0803244c 	.word	0x0803244c
 8019b7c:	08032454 	.word	0x08032454
 8019b80:	08032470 	.word	0x08032470
 8019b84:	080312d4 	.word	0x080312d4
 8019b88:	080312e0 	.word	0x080312e0
 8019b8c:	080312dc 	.word	0x080312dc
 8019b90:	080317a8 	.word	0x080317a8
 8019b94:	08032480 	.word	0x08032480
 8019b98:	08031234 	.word	0x08031234
 8019b9c:	080324a4 	.word	0x080324a4
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8019ba0:	2300      	movs	r3, #0
 8019ba2:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019ba6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019baa:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019bae:	2200      	movs	r2, #0
 8019bb0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8019bb4:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8019bb8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019bbc:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019bc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8019bc4:	e03e      	b.n	8019c44 <http_cb+0x4ec>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8019bc6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019bca:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019bce:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019bd2:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019bd6:	18d0      	adds	r0, r2, r3
 8019bd8:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019bdc:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8019be0:	4413      	add	r3, r2
 8019be2:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019be6:	4413      	add	r3, r2
 8019be8:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8019bec:	4619      	mov	r1, r3
 8019bee:	f00b ff15 	bl	8025a1c <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8019bf2:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8019bf6:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019bfa:	4413      	add	r3, r2
 8019bfc:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019c00:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c04:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019c08:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019c0c:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8019c10:	441a      	add	r2, r3
 8019c12:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c16:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019c1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8019c1e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c22:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019c26:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8019c2a:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8019c2e:	441a      	add	r2, r3
 8019c30:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c34:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019c38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 8019c3c:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d016      	beq.n	8019c72 <http_cb+0x51a>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8019c44:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019c48:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019c4c:	18d0      	adds	r0, r2, r3
 8019c4e:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8019c52:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019c56:	1ad1      	subs	r1, r2, r3
 8019c58:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8019c5c:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8019c60:	f7ff fcea 	bl	8019638 <skip_chunk>
 8019c64:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 8019c68:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	dcaa      	bgt.n	8019bc6 <http_cb+0x46e>
 8019c70:	e000      	b.n	8019c74 <http_cb+0x51c>
          if (dl == 0) break;
 8019c72:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 8019c74:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8019c78:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019c7c:	4413      	add	r3, r2
 8019c7e:	461a      	mov	r2, r3
 8019c80:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019c84:	4413      	add	r3, r2
 8019c86:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8019c8a:	e025      	b.n	8019cd8 <http_cb+0x580>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 8019c8c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c90:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019c98:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019c9c:	1ad2      	subs	r2, r2, r3
 8019c9e:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019ca2:	1ad3      	subs	r3, r2, r3
 8019ca4:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
        if (hm.body.len > len) break;  // Buffer more data
 8019ca8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019cac:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019cb0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019cb4:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8019cb8:	429a      	cmp	r2, r3
 8019cba:	d37f      	bcc.n	8019dbc <http_cb+0x664>
        ofs += (size_t) n + hm.body.len;
 8019cbc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019cc0:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019cc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8019cc8:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019ccc:	4413      	add	r3, r2
 8019cce:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8019cd2:	4413      	add	r3, r2
 8019cd4:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8019cd8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019cdc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8019ce6:	f003 0304 	and.w	r3, r3, #4
 8019cea:	b2db      	uxtb	r3, r3
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d00a      	beq.n	8019d06 <http_cb+0x5ae>
 8019cf0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019cf4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019cf8:	681a      	ldr	r2, [r3, #0]
 8019cfa:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8019cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019d02:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8019d06:	f107 0214 	add.w	r2, r7, #20
 8019d0a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019d0e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019d12:	210b      	movs	r1, #11
 8019d14:	6818      	ldr	r0, [r3, #0]
 8019d16:	f7fb fcab 	bl	8015670 <mg_call>
      if (c->is_accepted) {
 8019d1a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019d1e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8019d28:	f003 0304 	and.w	r3, r3, #4
 8019d2c:	b2db      	uxtb	r3, r3
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d028      	beq.n	8019d84 <http_cb+0x62c>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8019d32:	f107 0314 	add.w	r3, r7, #20
 8019d36:	492c      	ldr	r1, [pc, #176]	@ (8019de8 <http_cb+0x690>)
 8019d38:	4618      	mov	r0, r3
 8019d3a:	f7fd f8b1 	bl	8016ea0 <mg_http_get_header>
 8019d3e:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 8019d42:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d01c      	beq.n	8019d84 <http_cb+0x62c>
 8019d4a:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8019d4e:	4927      	ldr	r1, [pc, #156]	@ (8019dec <http_cb+0x694>)
 8019d50:	4618      	mov	r0, r3
 8019d52:	f007 fd77 	bl	8021844 <mg_str_s>
 8019d56:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 8019d5a:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8019d5e:	cb0c      	ldmia	r3, {r2, r3}
 8019d60:	c903      	ldmia	r1, {r0, r1}
 8019d62:	f007 fdfb 	bl	802195c <mg_strcasecmp>
 8019d66:	4603      	mov	r3, r0
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d10b      	bne.n	8019d84 <http_cb+0x62c>
          c->is_draining = 1;  // honor "Connection: close"
 8019d6c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019d70:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019d74:	681a      	ldr	r2, [r3, #0]
 8019d76:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8019d7a:	f043 0310 	orr.w	r3, r3, #16
 8019d7e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 8019d82:	e01c      	b.n	8019dbe <http_cb+0x666>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8019d84:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019d88:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8019d92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8019d96:	b2db      	uxtb	r3, r3
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d110      	bne.n	8019dbe <http_cb+0x666>
 8019d9c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019da0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019da8:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8019dac:	429a      	cmp	r2, r3
 8019dae:	f4ff ad23 	bcc.w	80197f8 <http_cb+0xa0>
 8019db2:	e004      	b.n	8019dbe <http_cb+0x666>
      if (n == 0) break;                 // Request is not buffered yet
 8019db4:	bf00      	nop
 8019db6:	e002      	b.n	8019dbe <http_cb+0x666>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8019db8:	bf00      	nop
 8019dba:	e000      	b.n	8019dbe <http_cb+0x666>
        if (hm.body.len > len) break;  // Buffer more data
 8019dbc:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8019dbe:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d00b      	beq.n	8019dde <http_cb+0x686>
 8019dc6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019dca:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	3338      	adds	r3, #56	@ 0x38
 8019dd2:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8019dd6:	2100      	movs	r1, #0
 8019dd8:	4618      	mov	r0, r3
 8019dda:	f000 f91d 	bl	801a018 <mg_iobuf_del>
  }
  (void) ev_data;
}
 8019dde:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 8019de2:	46bd      	mov	sp, r7
 8019de4:	bd80      	pop	{r7, pc}
 8019de6:	bf00      	nop
 8019de8:	080324b4 	.word	0x080324b4
 8019dec:	080324c0 	.word	0x080324c0

08019df0 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b086      	sub	sp, #24
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	60f8      	str	r0, [r7, #12]
 8019df8:	60b9      	str	r1, [r7, #8]
 8019dfa:	607a      	str	r2, [r7, #4]
 8019dfc:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8019dfe:	683b      	ldr	r3, [r7, #0]
 8019e00:	687a      	ldr	r2, [r7, #4]
 8019e02:	68b9      	ldr	r1, [r7, #8]
 8019e04:	68f8      	ldr	r0, [r7, #12]
 8019e06:	f003 fd11 	bl	801d82c <mg_listen>
 8019e0a:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8019e0c:	697b      	ldr	r3, [r7, #20]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d003      	beq.n	8019e1a <mg_http_listen+0x2a>
 8019e12:	697b      	ldr	r3, [r7, #20]
 8019e14:	4a03      	ldr	r2, [pc, #12]	@ (8019e24 <mg_http_listen+0x34>)
 8019e16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 8019e1a:	697b      	ldr	r3, [r7, #20]
}
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	3718      	adds	r7, #24
 8019e20:	46bd      	mov	sp, r7
 8019e22:	bd80      	pop	{r7, pc}
 8019e24:	08019759 	.word	0x08019759

08019e28 <roundup>:





static size_t roundup(size_t size, size_t align) {
 8019e28:	b480      	push	{r7}
 8019e2a:	b083      	sub	sp, #12
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
 8019e30:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8019e32:	683b      	ldr	r3, [r7, #0]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d00a      	beq.n	8019e4e <roundup+0x26>
 8019e38:	687a      	ldr	r2, [r7, #4]
 8019e3a:	683b      	ldr	r3, [r7, #0]
 8019e3c:	4413      	add	r3, r2
 8019e3e:	1e5a      	subs	r2, r3, #1
 8019e40:	683b      	ldr	r3, [r7, #0]
 8019e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e46:	683a      	ldr	r2, [r7, #0]
 8019e48:	fb02 f303 	mul.w	r3, r2, r3
 8019e4c:	e000      	b.n	8019e50 <roundup+0x28>
 8019e4e:	687b      	ldr	r3, [r7, #4]
}
 8019e50:	4618      	mov	r0, r3
 8019e52:	370c      	adds	r7, #12
 8019e54:	46bd      	mov	sp, r7
 8019e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e5a:	4770      	bx	lr

08019e5c <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8019e5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019e60:	b088      	sub	sp, #32
 8019e62:	af02      	add	r7, sp, #8
 8019e64:	6078      	str	r0, [r7, #4]
 8019e66:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8019e68:	2301      	movs	r3, #1
 8019e6a:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	68db      	ldr	r3, [r3, #12]
 8019e70:	4619      	mov	r1, r3
 8019e72:	6838      	ldr	r0, [r7, #0]
 8019e74:	f7ff ffd8 	bl	8019e28 <roundup>
 8019e78:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d117      	bne.n	8019eb0 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	681a      	ldr	r2, [r3, #0]
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	685b      	ldr	r3, [r3, #4]
 8019e88:	4619      	mov	r1, r3
 8019e8a:	4610      	mov	r0, r2
 8019e8c:	f008 fbe4 	bl	8022658 <mg_bzero>
    free(io->buf);
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	4618      	mov	r0, r3
 8019e96:	f7f2 fa97 	bl	800c3c8 <vPortFree>
    io->buf = NULL;
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	2200      	movs	r2, #0
 8019e9e:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	605a      	str	r2, [r3, #4]
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	685a      	ldr	r2, [r3, #4]
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	609a      	str	r2, [r3, #8]
 8019eae:	e052      	b.n	8019f56 <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	685b      	ldr	r3, [r3, #4]
 8019eb4:	683a      	ldr	r2, [r7, #0]
 8019eb6:	429a      	cmp	r2, r3
 8019eb8:	d04d      	beq.n	8019f56 <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 8019eba:	6839      	ldr	r1, [r7, #0]
 8019ebc:	2001      	movs	r0, #1
 8019ebe:	f7fa fdf7 	bl	8014ab0 <mg_calloc>
 8019ec2:	6138      	str	r0, [r7, #16]
    if (p != NULL) {
 8019ec4:	693b      	ldr	r3, [r7, #16]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d028      	beq.n	8019f1c <mg_iobuf_resize+0xc0>
      size_t len = new_size < io->len ? new_size : io->len;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	689b      	ldr	r3, [r3, #8]
 8019ece:	683a      	ldr	r2, [r7, #0]
 8019ed0:	4293      	cmp	r3, r2
 8019ed2:	bf28      	it	cs
 8019ed4:	4613      	movcs	r3, r2
 8019ed6:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d00a      	beq.n	8019ef4 <mg_iobuf_resize+0x98>
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d006      	beq.n	8019ef4 <mg_iobuf_resize+0x98>
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	68fa      	ldr	r2, [r7, #12]
 8019eec:	4619      	mov	r1, r3
 8019eee:	6938      	ldr	r0, [r7, #16]
 8019ef0:	f00b fd94 	bl	8025a1c <memmove>
      mg_bzero(io->buf, io->size);
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	681a      	ldr	r2, [r3, #0]
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	685b      	ldr	r3, [r3, #4]
 8019efc:	4619      	mov	r1, r3
 8019efe:	4610      	mov	r0, r2
 8019f00:	f008 fbaa 	bl	8022658 <mg_bzero>
      free(io->buf);
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	4618      	mov	r0, r3
 8019f0a:	f7f2 fa5d 	bl	800c3c8 <vPortFree>
      io->buf = (unsigned char *) p;
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	693a      	ldr	r2, [r7, #16]
 8019f12:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	683a      	ldr	r2, [r7, #0]
 8019f18:	605a      	str	r2, [r3, #4]
 8019f1a:	e01c      	b.n	8019f56 <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 8019f1c:	2300      	movs	r3, #0
 8019f1e:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8019f20:	4b10      	ldr	r3, [pc, #64]	@ (8019f64 <mg_iobuf_resize+0x108>)
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	dd16      	ble.n	8019f56 <mg_iobuf_resize+0xfa>
 8019f28:	4b0f      	ldr	r3, [pc, #60]	@ (8019f68 <mg_iobuf_resize+0x10c>)
 8019f2a:	f640 5244 	movw	r2, #3396	@ 0xd44
 8019f2e:	490f      	ldr	r1, [pc, #60]	@ (8019f6c <mg_iobuf_resize+0x110>)
 8019f30:	2001      	movs	r0, #1
 8019f32:	f000 ff83 	bl	801ae3c <mg_log_prefix>
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	685b      	ldr	r3, [r3, #4]
 8019f3a:	2200      	movs	r2, #0
 8019f3c:	4698      	mov	r8, r3
 8019f3e:	4691      	mov	r9, r2
 8019f40:	683b      	ldr	r3, [r7, #0]
 8019f42:	2200      	movs	r2, #0
 8019f44:	461c      	mov	r4, r3
 8019f46:	4615      	mov	r5, r2
 8019f48:	e9cd 4500 	strd	r4, r5, [sp]
 8019f4c:	4642      	mov	r2, r8
 8019f4e:	464b      	mov	r3, r9
 8019f50:	4807      	ldr	r0, [pc, #28]	@ (8019f70 <mg_iobuf_resize+0x114>)
 8019f52:	f000 ffc3 	bl	801aedc <mg_log>
    }
  }
  return ok;
 8019f56:	697b      	ldr	r3, [r7, #20]
}
 8019f58:	4618      	mov	r0, r3
 8019f5a:	3718      	adds	r7, #24
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019f62:	bf00      	nop
 8019f64:	20000298 	.word	0x20000298
 8019f68:	08033e68 	.word	0x08033e68
 8019f6c:	080310c8 	.word	0x080310c8
 8019f70:	08032500 	.word	0x08032500

08019f74 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 8019f74:	b580      	push	{r7, lr}
 8019f76:	b086      	sub	sp, #24
 8019f78:	af00      	add	r7, sp, #0
 8019f7a:	60f8      	str	r0, [r7, #12]
 8019f7c:	60b9      	str	r1, [r7, #8]
 8019f7e:	607a      	str	r2, [r7, #4]
 8019f80:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	689a      	ldr	r2, [r3, #8]
 8019f86:	683b      	ldr	r3, [r7, #0]
 8019f88:	441a      	add	r2, r3
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	68db      	ldr	r3, [r3, #12]
 8019f8e:	4619      	mov	r1, r3
 8019f90:	4610      	mov	r0, r2
 8019f92:	f7ff ff49 	bl	8019e28 <roundup>
 8019f96:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8019f98:	6979      	ldr	r1, [r7, #20]
 8019f9a:	68f8      	ldr	r0, [r7, #12]
 8019f9c:	f7ff ff5e 	bl	8019e5c <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	685b      	ldr	r3, [r3, #4]
 8019fa4:	697a      	ldr	r2, [r7, #20]
 8019fa6:	429a      	cmp	r2, r3
 8019fa8:	d001      	beq.n	8019fae <mg_iobuf_add+0x3a>
 8019faa:	2300      	movs	r3, #0
 8019fac:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	689b      	ldr	r3, [r3, #8]
 8019fb2:	68ba      	ldr	r2, [r7, #8]
 8019fb4:	429a      	cmp	r2, r3
 8019fb6:	d210      	bcs.n	8019fda <mg_iobuf_add+0x66>
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	681a      	ldr	r2, [r3, #0]
 8019fbc:	68b9      	ldr	r1, [r7, #8]
 8019fbe:	683b      	ldr	r3, [r7, #0]
 8019fc0:	440b      	add	r3, r1
 8019fc2:	18d0      	adds	r0, r2, r3
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	681a      	ldr	r2, [r3, #0]
 8019fc8:	68bb      	ldr	r3, [r7, #8]
 8019fca:	18d1      	adds	r1, r2, r3
 8019fcc:	68fb      	ldr	r3, [r7, #12]
 8019fce:	689a      	ldr	r2, [r3, #8]
 8019fd0:	68bb      	ldr	r3, [r7, #8]
 8019fd2:	1ad3      	subs	r3, r2, r3
 8019fd4:	461a      	mov	r2, r3
 8019fd6:	f00b fd21 	bl	8025a1c <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d008      	beq.n	8019ff2 <mg_iobuf_add+0x7e>
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	681a      	ldr	r2, [r3, #0]
 8019fe4:	68bb      	ldr	r3, [r7, #8]
 8019fe6:	4413      	add	r3, r2
 8019fe8:	683a      	ldr	r2, [r7, #0]
 8019fea:	6879      	ldr	r1, [r7, #4]
 8019fec:	4618      	mov	r0, r3
 8019fee:	f00b fd15 	bl	8025a1c <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	689b      	ldr	r3, [r3, #8]
 8019ff6:	68ba      	ldr	r2, [r7, #8]
 8019ff8:	429a      	cmp	r2, r3
 8019ffa:	d902      	bls.n	801a002 <mg_iobuf_add+0x8e>
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	68ba      	ldr	r2, [r7, #8]
 801a000:	609a      	str	r2, [r3, #8]
  io->len += len;
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	689a      	ldr	r2, [r3, #8]
 801a006:	683b      	ldr	r3, [r7, #0]
 801a008:	441a      	add	r2, r3
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	609a      	str	r2, [r3, #8]
  return len;
 801a00e:	683b      	ldr	r3, [r7, #0]
}
 801a010:	4618      	mov	r0, r3
 801a012:	3718      	adds	r7, #24
 801a014:	46bd      	mov	sp, r7
 801a016:	bd80      	pop	{r7, pc}

0801a018 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 801a018:	b580      	push	{r7, lr}
 801a01a:	b084      	sub	sp, #16
 801a01c:	af00      	add	r7, sp, #0
 801a01e:	60f8      	str	r0, [r7, #12]
 801a020:	60b9      	str	r1, [r7, #8]
 801a022:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	689b      	ldr	r3, [r3, #8]
 801a028:	68ba      	ldr	r2, [r7, #8]
 801a02a:	429a      	cmp	r2, r3
 801a02c:	d902      	bls.n	801a034 <mg_iobuf_del+0x1c>
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	689b      	ldr	r3, [r3, #8]
 801a032:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 801a034:	68ba      	ldr	r2, [r7, #8]
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	441a      	add	r2, r3
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	689b      	ldr	r3, [r3, #8]
 801a03e:	429a      	cmp	r2, r3
 801a040:	d904      	bls.n	801a04c <mg_iobuf_del+0x34>
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	689a      	ldr	r2, [r3, #8]
 801a046:	68bb      	ldr	r3, [r7, #8]
 801a048:	1ad3      	subs	r3, r2, r3
 801a04a:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	2b00      	cmp	r3, #0
 801a052:	d012      	beq.n	801a07a <mg_iobuf_del+0x62>
 801a054:	68fb      	ldr	r3, [r7, #12]
 801a056:	681a      	ldr	r2, [r3, #0]
 801a058:	68bb      	ldr	r3, [r7, #8]
 801a05a:	18d0      	adds	r0, r2, r3
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	681a      	ldr	r2, [r3, #0]
 801a060:	68b9      	ldr	r1, [r7, #8]
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	440b      	add	r3, r1
 801a066:	18d1      	adds	r1, r2, r3
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	689a      	ldr	r2, [r3, #8]
 801a06c:	68bb      	ldr	r3, [r7, #8]
 801a06e:	1ad2      	subs	r2, r2, r3
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	1ad3      	subs	r3, r2, r3
 801a074:	461a      	mov	r2, r3
 801a076:	f00b fcd1 	bl	8025a1c <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d00a      	beq.n	801a098 <mg_iobuf_del+0x80>
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	681a      	ldr	r2, [r3, #0]
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	6899      	ldr	r1, [r3, #8]
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	1acb      	subs	r3, r1, r3
 801a08e:	4413      	add	r3, r2
 801a090:	6879      	ldr	r1, [r7, #4]
 801a092:	4618      	mov	r0, r3
 801a094:	f008 fae0 	bl	8022658 <mg_bzero>
  io->len -= len;
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	689a      	ldr	r2, [r3, #8]
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	1ad2      	subs	r2, r2, r3
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	609a      	str	r2, [r3, #8]
  return len;
 801a0a4:	687b      	ldr	r3, [r7, #4]
}
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	3710      	adds	r7, #16
 801a0aa:	46bd      	mov	sp, r7
 801a0ac:	bd80      	pop	{r7, pc}

0801a0ae <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 801a0ae:	b580      	push	{r7, lr}
 801a0b0:	b082      	sub	sp, #8
 801a0b2:	af00      	add	r7, sp, #0
 801a0b4:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 801a0b6:	2100      	movs	r1, #0
 801a0b8:	6878      	ldr	r0, [r7, #4]
 801a0ba:	f7ff fecf 	bl	8019e5c <mg_iobuf_resize>
}
 801a0be:	bf00      	nop
 801a0c0:	3708      	adds	r7, #8
 801a0c2:	46bd      	mov	sp, r7
 801a0c4:	bd80      	pop	{r7, pc}
	...

0801a0c8 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 801a0c8:	b480      	push	{r7}
 801a0ca:	b083      	sub	sp, #12
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d001      	beq.n	801a0da <escapeseq+0x12>
 801a0d6:	4b04      	ldr	r3, [pc, #16]	@ (801a0e8 <escapeseq+0x20>)
 801a0d8:	e000      	b.n	801a0dc <escapeseq+0x14>
 801a0da:	4b04      	ldr	r3, [pc, #16]	@ (801a0ec <escapeseq+0x24>)
}
 801a0dc:	4618      	mov	r0, r3
 801a0de:	370c      	adds	r7, #12
 801a0e0:	46bd      	mov	sp, r7
 801a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e6:	4770      	bx	lr
 801a0e8:	0803250c 	.word	0x0803250c
 801a0ec:	08032514 	.word	0x08032514

0801a0f0 <json_esc>:

static char json_esc(int c, int esc) {
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b086      	sub	sp, #24
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
 801a0f8:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 801a0fa:	6838      	ldr	r0, [r7, #0]
 801a0fc:	f7ff ffe4 	bl	801a0c8 <escapeseq>
 801a100:	6138      	str	r0, [r7, #16]
 801a102:	683b      	ldr	r3, [r7, #0]
 801a104:	2b00      	cmp	r3, #0
 801a106:	bf0c      	ite	eq
 801a108:	2301      	moveq	r3, #1
 801a10a:	2300      	movne	r3, #0
 801a10c:	b2db      	uxtb	r3, r3
 801a10e:	4618      	mov	r0, r3
 801a110:	f7ff ffda 	bl	801a0c8 <escapeseq>
 801a114:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 801a116:	693b      	ldr	r3, [r7, #16]
 801a118:	617b      	str	r3, [r7, #20]
 801a11a:	e010      	b.n	801a13e <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 801a11c:	697b      	ldr	r3, [r7, #20]
 801a11e:	781b      	ldrb	r3, [r3, #0]
 801a120:	461a      	mov	r2, r3
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	4293      	cmp	r3, r2
 801a126:	d107      	bne.n	801a138 <json_esc+0x48>
 801a128:	697a      	ldr	r2, [r7, #20]
 801a12a:	693b      	ldr	r3, [r7, #16]
 801a12c:	1ad3      	subs	r3, r2, r3
 801a12e:	461a      	mov	r2, r3
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	4413      	add	r3, r2
 801a134:	781b      	ldrb	r3, [r3, #0]
 801a136:	e007      	b.n	801a148 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 801a138:	697b      	ldr	r3, [r7, #20]
 801a13a:	3301      	adds	r3, #1
 801a13c:	617b      	str	r3, [r7, #20]
 801a13e:	697b      	ldr	r3, [r7, #20]
 801a140:	781b      	ldrb	r3, [r3, #0]
 801a142:	2b00      	cmp	r3, #0
 801a144:	d1ea      	bne.n	801a11c <json_esc+0x2c>
  }
  return 0;
 801a146:	2300      	movs	r3, #0
}
 801a148:	4618      	mov	r0, r3
 801a14a:	3718      	adds	r7, #24
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd80      	pop	{r7, pc}

0801a150 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 801a150:	b580      	push	{r7, lr}
 801a152:	b084      	sub	sp, #16
 801a154:	af00      	add	r7, sp, #0
 801a156:	6078      	str	r0, [r7, #4]
 801a158:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 801a15a:	2300      	movs	r3, #0
 801a15c:	60fb      	str	r3, [r7, #12]
 801a15e:	e02e      	b.n	801a1be <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	687a      	ldr	r2, [r7, #4]
 801a164:	4413      	add	r3, r2
 801a166:	781b      	ldrb	r3, [r3, #0]
 801a168:	2b5c      	cmp	r3, #92	@ 0x5c
 801a16a:	d114      	bne.n	801a196 <mg_pass_string+0x46>
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	3301      	adds	r3, #1
 801a170:	683a      	ldr	r2, [r7, #0]
 801a172:	429a      	cmp	r2, r3
 801a174:	dd0f      	ble.n	801a196 <mg_pass_string+0x46>
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	3301      	adds	r3, #1
 801a17a:	687a      	ldr	r2, [r7, #4]
 801a17c:	4413      	add	r3, r2
 801a17e:	781b      	ldrb	r3, [r3, #0]
 801a180:	2101      	movs	r1, #1
 801a182:	4618      	mov	r0, r3
 801a184:	f7ff ffb4 	bl	801a0f0 <json_esc>
 801a188:	4603      	mov	r3, r0
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d003      	beq.n	801a196 <mg_pass_string+0x46>
      i++;
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	3301      	adds	r3, #1
 801a192:	60fb      	str	r3, [r7, #12]
 801a194:	e010      	b.n	801a1b8 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	687a      	ldr	r2, [r7, #4]
 801a19a:	4413      	add	r3, r2
 801a19c:	781b      	ldrb	r3, [r3, #0]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d102      	bne.n	801a1a8 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 801a1a2:	f06f 0301 	mvn.w	r3, #1
 801a1a6:	e010      	b.n	801a1ca <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	687a      	ldr	r2, [r7, #4]
 801a1ac:	4413      	add	r3, r2
 801a1ae:	781b      	ldrb	r3, [r3, #0]
 801a1b0:	2b22      	cmp	r3, #34	@ 0x22
 801a1b2:	d101      	bne.n	801a1b8 <mg_pass_string+0x68>
      return i;
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	e008      	b.n	801a1ca <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	3301      	adds	r3, #1
 801a1bc:	60fb      	str	r3, [r7, #12]
 801a1be:	68fa      	ldr	r2, [r7, #12]
 801a1c0:	683b      	ldr	r3, [r7, #0]
 801a1c2:	429a      	cmp	r2, r3
 801a1c4:	dbcc      	blt.n	801a160 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 801a1c6:	f06f 0301 	mvn.w	r3, #1
}
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	3710      	adds	r7, #16
 801a1ce:	46bd      	mov	sp, r7
 801a1d0:	bd80      	pop	{r7, pc}
 801a1d2:	0000      	movs	r0, r0
 801a1d4:	0000      	movs	r0, r0
	...

0801a1d8 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 801a1d8:	b580      	push	{r7, lr}
 801a1da:	b090      	sub	sp, #64	@ 0x40
 801a1dc:	af00      	add	r7, sp, #0
 801a1de:	60f8      	str	r0, [r7, #12]
 801a1e0:	60b9      	str	r1, [r7, #8]
 801a1e2:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 801a1e4:	f04f 0200 	mov.w	r2, #0
 801a1e8:	f04f 0300 	mov.w	r3, #0
 801a1ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	637b      	str	r3, [r7, #52]	@ 0x34
 801a1f4:	2301      	movs	r3, #1
 801a1f6:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 801a1f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a1fa:	68bb      	ldr	r3, [r7, #8]
 801a1fc:	429a      	cmp	r2, r3
 801a1fe:	da0a      	bge.n	801a216 <mg_atod+0x3e>
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	781b      	ldrb	r3, [r3, #0]
 801a204:	2b2d      	cmp	r3, #45	@ 0x2d
 801a206:	d106      	bne.n	801a216 <mg_atod+0x3e>
    sign = -1, i++;
 801a208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a20c:	633b      	str	r3, [r7, #48]	@ 0x30
 801a20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a210:	3301      	adds	r3, #1
 801a212:	637b      	str	r3, [r7, #52]	@ 0x34
 801a214:	e00a      	b.n	801a22c <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 801a216:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a218:	68bb      	ldr	r3, [r7, #8]
 801a21a:	429a      	cmp	r2, r3
 801a21c:	da27      	bge.n	801a26e <mg_atod+0x96>
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	781b      	ldrb	r3, [r3, #0]
 801a222:	2b2b      	cmp	r3, #43	@ 0x2b
 801a224:	d123      	bne.n	801a26e <mg_atod+0x96>
    i++;
 801a226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a228:	3301      	adds	r3, #1
 801a22a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801a22c:	e01f      	b.n	801a26e <mg_atod+0x96>
    d *= 10.0;
 801a22e:	f04f 0200 	mov.w	r2, #0
 801a232:	4b9d      	ldr	r3, [pc, #628]	@ (801a4a8 <mg_atod+0x2d0>)
 801a234:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a238:	f7e6 f9f6 	bl	8000628 <__aeabi_dmul>
 801a23c:	4602      	mov	r2, r0
 801a23e:	460b      	mov	r3, r1
 801a240:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    d += p[i] - '0';
 801a244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a246:	68fa      	ldr	r2, [r7, #12]
 801a248:	4413      	add	r3, r2
 801a24a:	781b      	ldrb	r3, [r3, #0]
 801a24c:	3b30      	subs	r3, #48	@ 0x30
 801a24e:	4618      	mov	r0, r3
 801a250:	f7e6 f980 	bl	8000554 <__aeabi_i2d>
 801a254:	4602      	mov	r2, r0
 801a256:	460b      	mov	r3, r1
 801a258:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a25c:	f7e6 f82e 	bl	80002bc <__adddf3>
 801a260:	4602      	mov	r2, r0
 801a262:	460b      	mov	r3, r1
 801a264:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801a268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a26a:	3301      	adds	r3, #1
 801a26c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a26e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a270:	68bb      	ldr	r3, [r7, #8]
 801a272:	429a      	cmp	r2, r3
 801a274:	da0b      	bge.n	801a28e <mg_atod+0xb6>
 801a276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a278:	68fa      	ldr	r2, [r7, #12]
 801a27a:	4413      	add	r3, r2
 801a27c:	781b      	ldrb	r3, [r3, #0]
 801a27e:	2b2f      	cmp	r3, #47	@ 0x2f
 801a280:	d905      	bls.n	801a28e <mg_atod+0xb6>
 801a282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a284:	68fa      	ldr	r2, [r7, #12]
 801a286:	4413      	add	r3, r2
 801a288:	781b      	ldrb	r3, [r3, #0]
 801a28a:	2b39      	cmp	r3, #57	@ 0x39
 801a28c:	d9cf      	bls.n	801a22e <mg_atod+0x56>
  }
  d *= sign;
 801a28e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a290:	f7e6 f960 	bl	8000554 <__aeabi_i2d>
 801a294:	4602      	mov	r2, r0
 801a296:	460b      	mov	r3, r1
 801a298:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a29c:	f7e6 f9c4 	bl	8000628 <__aeabi_dmul>
 801a2a0:	4602      	mov	r2, r0
 801a2a2:	460b      	mov	r3, r1
 801a2a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 801a2a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a2aa:	68bb      	ldr	r3, [r7, #8]
 801a2ac:	429a      	cmp	r2, r3
 801a2ae:	da59      	bge.n	801a364 <mg_atod+0x18c>
 801a2b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2b2:	68fa      	ldr	r2, [r7, #12]
 801a2b4:	4413      	add	r3, r2
 801a2b6:	781b      	ldrb	r3, [r3, #0]
 801a2b8:	2b2e      	cmp	r3, #46	@ 0x2e
 801a2ba:	d153      	bne.n	801a364 <mg_atod+0x18c>
    double frac = 0.0, base = 0.1;
 801a2bc:	f04f 0200 	mov.w	r2, #0
 801a2c0:	f04f 0300 	mov.w	r3, #0
 801a2c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 801a2c8:	a375      	add	r3, pc, #468	@ (adr r3, 801a4a0 <mg_atod+0x2c8>)
 801a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 801a2d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2d4:	3301      	adds	r3, #1
 801a2d6:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801a2d8:	e023      	b.n	801a322 <mg_atod+0x14a>
      frac += base * (p[i] - '0');
 801a2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2dc:	68fa      	ldr	r2, [r7, #12]
 801a2de:	4413      	add	r3, r2
 801a2e0:	781b      	ldrb	r3, [r3, #0]
 801a2e2:	3b30      	subs	r3, #48	@ 0x30
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	f7e6 f935 	bl	8000554 <__aeabi_i2d>
 801a2ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801a2ee:	f7e6 f99b 	bl	8000628 <__aeabi_dmul>
 801a2f2:	4602      	mov	r2, r0
 801a2f4:	460b      	mov	r3, r1
 801a2f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 801a2fa:	f7e5 ffdf 	bl	80002bc <__adddf3>
 801a2fe:	4602      	mov	r2, r0
 801a300:	460b      	mov	r3, r1
 801a302:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      base /= 10.0;
 801a306:	f04f 0200 	mov.w	r2, #0
 801a30a:	4b67      	ldr	r3, [pc, #412]	@ (801a4a8 <mg_atod+0x2d0>)
 801a30c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a310:	f7e6 fab4 	bl	800087c <__aeabi_ddiv>
 801a314:	4602      	mov	r2, r0
 801a316:	460b      	mov	r3, r1
 801a318:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801a31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a31e:	3301      	adds	r3, #1
 801a320:	637b      	str	r3, [r7, #52]	@ 0x34
 801a322:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a324:	68bb      	ldr	r3, [r7, #8]
 801a326:	429a      	cmp	r2, r3
 801a328:	da0b      	bge.n	801a342 <mg_atod+0x16a>
 801a32a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a32c:	68fa      	ldr	r2, [r7, #12]
 801a32e:	4413      	add	r3, r2
 801a330:	781b      	ldrb	r3, [r3, #0]
 801a332:	2b2f      	cmp	r3, #47	@ 0x2f
 801a334:	d905      	bls.n	801a342 <mg_atod+0x16a>
 801a336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a338:	68fa      	ldr	r2, [r7, #12]
 801a33a:	4413      	add	r3, r2
 801a33c:	781b      	ldrb	r3, [r3, #0]
 801a33e:	2b39      	cmp	r3, #57	@ 0x39
 801a340:	d9cb      	bls.n	801a2da <mg_atod+0x102>
    }
    d += frac * sign;
 801a342:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a344:	f7e6 f906 	bl	8000554 <__aeabi_i2d>
 801a348:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801a34c:	f7e6 f96c 	bl	8000628 <__aeabi_dmul>
 801a350:	4602      	mov	r2, r0
 801a352:	460b      	mov	r3, r1
 801a354:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a358:	f7e5 ffb0 	bl	80002bc <__adddf3>
 801a35c:	4602      	mov	r2, r0
 801a35e:	460b      	mov	r3, r1
 801a360:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 801a364:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a366:	68bb      	ldr	r3, [r7, #8]
 801a368:	429a      	cmp	r2, r3
 801a36a:	f280 8085 	bge.w	801a478 <mg_atod+0x2a0>
 801a36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a370:	68fa      	ldr	r2, [r7, #12]
 801a372:	4413      	add	r3, r2
 801a374:	781b      	ldrb	r3, [r3, #0]
 801a376:	2b65      	cmp	r3, #101	@ 0x65
 801a378:	d005      	beq.n	801a386 <mg_atod+0x1ae>
 801a37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a37c:	68fa      	ldr	r2, [r7, #12]
 801a37e:	4413      	add	r3, r2
 801a380:	781b      	ldrb	r3, [r3, #0]
 801a382:	2b45      	cmp	r3, #69	@ 0x45
 801a384:	d178      	bne.n	801a478 <mg_atod+0x2a0>
    int j, exp = 0, minus = 0;
 801a386:	2300      	movs	r3, #0
 801a388:	61bb      	str	r3, [r7, #24]
 801a38a:	2300      	movs	r3, #0
 801a38c:	617b      	str	r3, [r7, #20]
    i++;
 801a38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a390:	3301      	adds	r3, #1
 801a392:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 801a394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a396:	68bb      	ldr	r3, [r7, #8]
 801a398:	429a      	cmp	r2, r3
 801a39a:	da0a      	bge.n	801a3b2 <mg_atod+0x1da>
 801a39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a39e:	68fa      	ldr	r2, [r7, #12]
 801a3a0:	4413      	add	r3, r2
 801a3a2:	781b      	ldrb	r3, [r3, #0]
 801a3a4:	2b2d      	cmp	r3, #45	@ 0x2d
 801a3a6:	d104      	bne.n	801a3b2 <mg_atod+0x1da>
 801a3a8:	2301      	movs	r3, #1
 801a3aa:	617b      	str	r3, [r7, #20]
 801a3ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3ae:	3301      	adds	r3, #1
 801a3b0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 801a3b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a3b4:	68bb      	ldr	r3, [r7, #8]
 801a3b6:	429a      	cmp	r2, r3
 801a3b8:	da19      	bge.n	801a3ee <mg_atod+0x216>
 801a3ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3bc:	68fa      	ldr	r2, [r7, #12]
 801a3be:	4413      	add	r3, r2
 801a3c0:	781b      	ldrb	r3, [r3, #0]
 801a3c2:	2b2b      	cmp	r3, #43	@ 0x2b
 801a3c4:	d113      	bne.n	801a3ee <mg_atod+0x216>
 801a3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3c8:	3301      	adds	r3, #1
 801a3ca:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 801a3cc:	e00f      	b.n	801a3ee <mg_atod+0x216>
      exp = exp * 10 + (p[i++] - '0');
 801a3ce:	69ba      	ldr	r2, [r7, #24]
 801a3d0:	4613      	mov	r3, r2
 801a3d2:	009b      	lsls	r3, r3, #2
 801a3d4:	4413      	add	r3, r2
 801a3d6:	005b      	lsls	r3, r3, #1
 801a3d8:	4619      	mov	r1, r3
 801a3da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3dc:	1c5a      	adds	r2, r3, #1
 801a3de:	637a      	str	r2, [r7, #52]	@ 0x34
 801a3e0:	461a      	mov	r2, r3
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	4413      	add	r3, r2
 801a3e6:	781b      	ldrb	r3, [r3, #0]
 801a3e8:	3b30      	subs	r3, #48	@ 0x30
 801a3ea:	440b      	add	r3, r1
 801a3ec:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 801a3ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a3f0:	68bb      	ldr	r3, [r7, #8]
 801a3f2:	429a      	cmp	r2, r3
 801a3f4:	da0f      	bge.n	801a416 <mg_atod+0x23e>
 801a3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3f8:	68fa      	ldr	r2, [r7, #12]
 801a3fa:	4413      	add	r3, r2
 801a3fc:	781b      	ldrb	r3, [r3, #0]
 801a3fe:	2b2f      	cmp	r3, #47	@ 0x2f
 801a400:	d909      	bls.n	801a416 <mg_atod+0x23e>
 801a402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a404:	68fa      	ldr	r2, [r7, #12]
 801a406:	4413      	add	r3, r2
 801a408:	781b      	ldrb	r3, [r3, #0]
 801a40a:	2b39      	cmp	r3, #57	@ 0x39
 801a40c:	d803      	bhi.n	801a416 <mg_atod+0x23e>
 801a40e:	69bb      	ldr	r3, [r7, #24]
 801a410:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801a414:	dbdb      	blt.n	801a3ce <mg_atod+0x1f6>
    if (minus) exp = -exp;
 801a416:	697b      	ldr	r3, [r7, #20]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d002      	beq.n	801a422 <mg_atod+0x24a>
 801a41c:	69bb      	ldr	r3, [r7, #24]
 801a41e:	425b      	negs	r3, r3
 801a420:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 801a422:	2300      	movs	r3, #0
 801a424:	61fb      	str	r3, [r7, #28]
 801a426:	e00d      	b.n	801a444 <mg_atod+0x26c>
 801a428:	f04f 0200 	mov.w	r2, #0
 801a42c:	4b1e      	ldr	r3, [pc, #120]	@ (801a4a8 <mg_atod+0x2d0>)
 801a42e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a432:	f7e6 f8f9 	bl	8000628 <__aeabi_dmul>
 801a436:	4602      	mov	r2, r0
 801a438:	460b      	mov	r3, r1
 801a43a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 801a43e:	69fb      	ldr	r3, [r7, #28]
 801a440:	3301      	adds	r3, #1
 801a442:	61fb      	str	r3, [r7, #28]
 801a444:	69fa      	ldr	r2, [r7, #28]
 801a446:	69bb      	ldr	r3, [r7, #24]
 801a448:	429a      	cmp	r2, r3
 801a44a:	dbed      	blt.n	801a428 <mg_atod+0x250>
    for (j = 0; j < -exp; j++) d /= 10.0;
 801a44c:	2300      	movs	r3, #0
 801a44e:	61fb      	str	r3, [r7, #28]
 801a450:	e00d      	b.n	801a46e <mg_atod+0x296>
 801a452:	f04f 0200 	mov.w	r2, #0
 801a456:	4b14      	ldr	r3, [pc, #80]	@ (801a4a8 <mg_atod+0x2d0>)
 801a458:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a45c:	f7e6 fa0e 	bl	800087c <__aeabi_ddiv>
 801a460:	4602      	mov	r2, r0
 801a462:	460b      	mov	r3, r1
 801a464:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 801a468:	69fb      	ldr	r3, [r7, #28]
 801a46a:	3301      	adds	r3, #1
 801a46c:	61fb      	str	r3, [r7, #28]
 801a46e:	69bb      	ldr	r3, [r7, #24]
 801a470:	425b      	negs	r3, r3
 801a472:	69fa      	ldr	r2, [r7, #28]
 801a474:	429a      	cmp	r2, r3
 801a476:	dbec      	blt.n	801a452 <mg_atod+0x27a>
  }

  if (numlen != NULL) *numlen = i;
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d002      	beq.n	801a484 <mg_atod+0x2ac>
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a482:	601a      	str	r2, [r3, #0]
  return d;
 801a484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801a488:	ec43 2b17 	vmov	d7, r2, r3
}
 801a48c:	eeb0 0a47 	vmov.f32	s0, s14
 801a490:	eef0 0a67 	vmov.f32	s1, s15
 801a494:	3740      	adds	r7, #64	@ 0x40
 801a496:	46bd      	mov	sp, r7
 801a498:	bd80      	pop	{r7, pc}
 801a49a:	bf00      	nop
 801a49c:	f3af 8000 	nop.w
 801a4a0:	9999999a 	.word	0x9999999a
 801a4a4:	3fb99999 	.word	0x3fb99999
 801a4a8:	40240000 	.word	0x40240000

0801a4ac <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 801a4ac:	b590      	push	{r4, r7, lr}
 801a4ae:	b09b      	sub	sp, #108	@ 0x6c
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	f107 0408 	add.w	r4, r7, #8
 801a4b6:	e884 0003 	stmia.w	r4, {r0, r1}
 801a4ba:	607a      	str	r2, [r7, #4]
 801a4bc:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 801a4be:	68bb      	ldr	r3, [r7, #8]
 801a4c0:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 801a4c6:	2300      	movs	r3, #0
 801a4c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 801a4cc:	2300      	movs	r3, #0
 801a4ce:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 801a4d0:	2300      	movs	r3, #0
 801a4d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 801a4d8:	2300      	movs	r3, #0
 801a4da:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 801a4dc:	2301      	movs	r3, #1
 801a4de:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 801a4e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a4e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a4e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a4ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 801a4ec:	683b      	ldr	r3, [r7, #0]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d002      	beq.n	801a4f8 <mg_json_get+0x4c>
 801a4f2:	683b      	ldr	r3, [r7, #0]
 801a4f4:	2200      	movs	r2, #0
 801a4f6:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	781b      	ldrb	r3, [r3, #0]
 801a4fc:	2b24      	cmp	r3, #36	@ 0x24
 801a4fe:	d002      	beq.n	801a506 <mg_json_get+0x5a>
 801a500:	f06f 0301 	mvn.w	r3, #1
 801a504:	e308      	b.n	801ab18 <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 801a506:	2300      	movs	r3, #0
 801a508:	663b      	str	r3, [r7, #96]	@ 0x60
 801a50a:	e2fe      	b.n	801ab0a <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 801a50c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a50e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a510:	4413      	add	r3, r2
 801a512:	781b      	ldrb	r3, [r3, #0]
 801a514:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 801a518:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a51c:	2b20      	cmp	r3, #32
 801a51e:	f000 82ee 	beq.w	801aafe <mg_json_get+0x652>
 801a522:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a526:	2b09      	cmp	r3, #9
 801a528:	f000 82e9 	beq.w	801aafe <mg_json_get+0x652>
 801a52c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a530:	2b0a      	cmp	r3, #10
 801a532:	f000 82e4 	beq.w	801aafe <mg_json_get+0x652>
 801a536:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a53a:	2b0d      	cmp	r3, #13
 801a53c:	f000 82df 	beq.w	801aafe <mg_json_get+0x652>
    switch (expecting) {
 801a540:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801a544:	2b03      	cmp	r3, #3
 801a546:	f200 82dd 	bhi.w	801ab04 <mg_json_get+0x658>
 801a54a:	a201      	add	r2, pc, #4	@ (adr r2, 801a550 <mg_json_get+0xa4>)
 801a54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a550:	0801a561 	.word	0x0801a561
 801a554:	0801a849 	.word	0x0801a849
 801a558:	0801a9d7 	.word	0x0801a9d7
 801a55c:	0801a9ed 	.word	0x0801a9ed
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 801a560:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a564:	429a      	cmp	r2, r3
 801a566:	d101      	bne.n	801a56c <mg_json_get+0xc0>
 801a568:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a56a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 801a56c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a570:	2b7b      	cmp	r3, #123	@ 0x7b
 801a572:	d12b      	bne.n	801a5cc <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 801a574:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a576:	2b1d      	cmp	r3, #29
 801a578:	dd02      	ble.n	801a580 <mg_json_get+0xd4>
 801a57a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a57e:	e2cb      	b.n	801ab18 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 801a580:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a584:	429a      	cmp	r2, r3
 801a586:	d114      	bne.n	801a5b2 <mg_json_get+0x106>
 801a588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a58a:	687a      	ldr	r2, [r7, #4]
 801a58c:	4413      	add	r3, r2
 801a58e:	781b      	ldrb	r3, [r3, #0]
 801a590:	2b2e      	cmp	r3, #46	@ 0x2e
 801a592:	d10e      	bne.n	801a5b2 <mg_json_get+0x106>
 801a594:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a598:	429a      	cmp	r2, r3
 801a59a:	d10a      	bne.n	801a5b2 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 801a59c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a59e:	3301      	adds	r3, #1
 801a5a0:	657b      	str	r3, [r7, #84]	@ 0x54
 801a5a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a5a4:	3301      	adds	r3, #1
 801a5a6:	653b      	str	r3, [r7, #80]	@ 0x50
 801a5a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a5ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a5ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a5b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 801a5b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a5b4:	1c5a      	adds	r2, r3, #1
 801a5b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 801a5b8:	3368      	adds	r3, #104	@ 0x68
 801a5ba:	443b      	add	r3, r7
 801a5bc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a5c0:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 801a5c4:	2301      	movs	r3, #1
 801a5c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 801a5ca:	e29b      	b.n	801ab04 <mg_json_get+0x658>
        } else if (c == '[') {
 801a5cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a5d0:	2b5b      	cmp	r3, #91	@ 0x5b
 801a5d2:	d14e      	bne.n	801a672 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 801a5d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a5d6:	2b1d      	cmp	r3, #29
 801a5d8:	dd02      	ble.n	801a5e0 <mg_json_get+0x134>
 801a5da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a5de:	e29b      	b.n	801ab18 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 801a5e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a5e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5e4:	429a      	cmp	r2, r3
 801a5e6:	d13a      	bne.n	801a65e <mg_json_get+0x1b2>
 801a5e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a5ea:	687a      	ldr	r2, [r7, #4]
 801a5ec:	4413      	add	r3, r2
 801a5ee:	781b      	ldrb	r3, [r3, #0]
 801a5f0:	2b5b      	cmp	r3, #91	@ 0x5b
 801a5f2:	d134      	bne.n	801a65e <mg_json_get+0x1b2>
 801a5f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a5f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a5f8:	429a      	cmp	r2, r3
 801a5fa:	d130      	bne.n	801a65e <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 801a5fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5fe:	3301      	adds	r3, #1
 801a600:	657b      	str	r3, [r7, #84]	@ 0x54
 801a602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a604:	3301      	adds	r3, #1
 801a606:	653b      	str	r3, [r7, #80]	@ 0x50
 801a608:	2300      	movs	r3, #0
 801a60a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 801a60c:	2300      	movs	r3, #0
 801a60e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a610:	e010      	b.n	801a634 <mg_json_get+0x188>
              ei *= 10;
 801a612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a614:	4613      	mov	r3, r2
 801a616:	009b      	lsls	r3, r3, #2
 801a618:	4413      	add	r3, r2
 801a61a:	005b      	lsls	r3, r3, #1
 801a61c:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 801a61e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a620:	687a      	ldr	r2, [r7, #4]
 801a622:	4413      	add	r3, r2
 801a624:	781b      	ldrb	r3, [r3, #0]
 801a626:	3b30      	subs	r3, #48	@ 0x30
 801a628:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a62a:	4413      	add	r3, r2
 801a62c:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 801a62e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a630:	3301      	adds	r3, #1
 801a632:	653b      	str	r3, [r7, #80]	@ 0x50
 801a634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a636:	687a      	ldr	r2, [r7, #4]
 801a638:	4413      	add	r3, r2
 801a63a:	781b      	ldrb	r3, [r3, #0]
 801a63c:	2b5d      	cmp	r3, #93	@ 0x5d
 801a63e:	d005      	beq.n	801a64c <mg_json_get+0x1a0>
 801a640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a642:	687a      	ldr	r2, [r7, #4]
 801a644:	4413      	add	r3, r2
 801a646:	781b      	ldrb	r3, [r3, #0]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d1e2      	bne.n	801a612 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 801a64c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a64e:	687a      	ldr	r2, [r7, #4]
 801a650:	4413      	add	r3, r2
 801a652:	781b      	ldrb	r3, [r3, #0]
 801a654:	2b00      	cmp	r3, #0
 801a656:	d002      	beq.n	801a65e <mg_json_get+0x1b2>
 801a658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a65a:	3301      	adds	r3, #1
 801a65c:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 801a65e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a660:	1c5a      	adds	r2, r3, #1
 801a662:	65ba      	str	r2, [r7, #88]	@ 0x58
 801a664:	3368      	adds	r3, #104	@ 0x68
 801a666:	443b      	add	r3, r7
 801a668:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a66c:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 801a670:	e248      	b.n	801ab04 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 801a672:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a676:	2b5d      	cmp	r3, #93	@ 0x5d
 801a678:	d13a      	bne.n	801a6f0 <mg_json_get+0x244>
 801a67a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	dd37      	ble.n	801a6f0 <mg_json_get+0x244>
          MG_EOO(']');
 801a680:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a684:	429a      	cmp	r2, r3
 801a686:	d106      	bne.n	801a696 <mg_json_get+0x1ea>
 801a688:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a68a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a68c:	429a      	cmp	r2, r3
 801a68e:	d002      	beq.n	801a696 <mg_json_get+0x1ea>
 801a690:	f06f 0302 	mvn.w	r3, #2
 801a694:	e240      	b.n	801ab18 <mg_json_get+0x66c>
 801a696:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a69a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a69c:	3b01      	subs	r3, #1
 801a69e:	3368      	adds	r3, #104	@ 0x68
 801a6a0:	443b      	add	r3, r7
 801a6a2:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801a6a6:	3302      	adds	r3, #2
 801a6a8:	429a      	cmp	r2, r3
 801a6aa:	d002      	beq.n	801a6b2 <mg_json_get+0x206>
 801a6ac:	f06f 0301 	mvn.w	r3, #1
 801a6b0:	e232      	b.n	801ab18 <mg_json_get+0x66c>
 801a6b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a6b4:	3b01      	subs	r3, #1
 801a6b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a6b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a6ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6bc:	429a      	cmp	r2, r3
 801a6be:	f040 809c 	bne.w	801a7fa <mg_json_get+0x34e>
 801a6c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a6c4:	687a      	ldr	r2, [r7, #4]
 801a6c6:	4413      	add	r3, r2
 801a6c8:	781b      	ldrb	r3, [r3, #0]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	f040 8095 	bne.w	801a7fa <mg_json_get+0x34e>
 801a6d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a6d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a6d4:	429a      	cmp	r2, r3
 801a6d6:	f040 8090 	bne.w	801a7fa <mg_json_get+0x34e>
 801a6da:	683b      	ldr	r3, [r7, #0]
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d005      	beq.n	801a6ec <mg_json_get+0x240>
 801a6e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a6e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a6e4:	1ad3      	subs	r3, r2, r3
 801a6e6:	1c5a      	adds	r2, r3, #1
 801a6e8:	683b      	ldr	r3, [r7, #0]
 801a6ea:	601a      	str	r2, [r3, #0]
 801a6ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a6ee:	e213      	b.n	801ab18 <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 801a6f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a6f4:	2b74      	cmp	r3, #116	@ 0x74
 801a6f6:	d113      	bne.n	801a720 <mg_json_get+0x274>
 801a6f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a6fa:	3303      	adds	r3, #3
 801a6fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a6fe:	429a      	cmp	r2, r3
 801a700:	dd0e      	ble.n	801a720 <mg_json_get+0x274>
 801a702:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a704:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a706:	4413      	add	r3, r2
 801a708:	2204      	movs	r2, #4
 801a70a:	4998      	ldr	r1, [pc, #608]	@ (801a96c <mg_json_get+0x4c0>)
 801a70c:	4618      	mov	r0, r3
 801a70e:	f00b f90b 	bl	8025928 <memcmp>
 801a712:	4603      	mov	r3, r0
 801a714:	2b00      	cmp	r3, #0
 801a716:	d103      	bne.n	801a720 <mg_json_get+0x274>
          i += 3;
 801a718:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a71a:	3303      	adds	r3, #3
 801a71c:	663b      	str	r3, [r7, #96]	@ 0x60
 801a71e:	e06c      	b.n	801a7fa <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 801a720:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a724:	2b6e      	cmp	r3, #110	@ 0x6e
 801a726:	d113      	bne.n	801a750 <mg_json_get+0x2a4>
 801a728:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a72a:	3303      	adds	r3, #3
 801a72c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a72e:	429a      	cmp	r2, r3
 801a730:	dd0e      	ble.n	801a750 <mg_json_get+0x2a4>
 801a732:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a736:	4413      	add	r3, r2
 801a738:	2204      	movs	r2, #4
 801a73a:	498d      	ldr	r1, [pc, #564]	@ (801a970 <mg_json_get+0x4c4>)
 801a73c:	4618      	mov	r0, r3
 801a73e:	f00b f8f3 	bl	8025928 <memcmp>
 801a742:	4603      	mov	r3, r0
 801a744:	2b00      	cmp	r3, #0
 801a746:	d103      	bne.n	801a750 <mg_json_get+0x2a4>
          i += 3;
 801a748:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a74a:	3303      	adds	r3, #3
 801a74c:	663b      	str	r3, [r7, #96]	@ 0x60
 801a74e:	e054      	b.n	801a7fa <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 801a750:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a754:	2b66      	cmp	r3, #102	@ 0x66
 801a756:	d113      	bne.n	801a780 <mg_json_get+0x2d4>
 801a758:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a75a:	3304      	adds	r3, #4
 801a75c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a75e:	429a      	cmp	r2, r3
 801a760:	dd0e      	ble.n	801a780 <mg_json_get+0x2d4>
 801a762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a764:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a766:	4413      	add	r3, r2
 801a768:	2205      	movs	r2, #5
 801a76a:	4982      	ldr	r1, [pc, #520]	@ (801a974 <mg_json_get+0x4c8>)
 801a76c:	4618      	mov	r0, r3
 801a76e:	f00b f8db 	bl	8025928 <memcmp>
 801a772:	4603      	mov	r3, r0
 801a774:	2b00      	cmp	r3, #0
 801a776:	d103      	bne.n	801a780 <mg_json_get+0x2d4>
          i += 4;
 801a778:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a77a:	3304      	adds	r3, #4
 801a77c:	663b      	str	r3, [r7, #96]	@ 0x60
 801a77e:	e03c      	b.n	801a7fa <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 801a780:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a784:	2b2d      	cmp	r3, #45	@ 0x2d
 801a786:	d007      	beq.n	801a798 <mg_json_get+0x2ec>
 801a788:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a78c:	2b2f      	cmp	r3, #47	@ 0x2f
 801a78e:	d916      	bls.n	801a7be <mg_json_get+0x312>
 801a790:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a794:	2b39      	cmp	r3, #57	@ 0x39
 801a796:	d812      	bhi.n	801a7be <mg_json_get+0x312>
          int numlen = 0;
 801a798:	2300      	movs	r3, #0
 801a79a:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 801a79c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a79e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a7a0:	18d0      	adds	r0, r2, r3
 801a7a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a7a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a7a6:	1ad3      	subs	r3, r2, r3
 801a7a8:	f107 0210 	add.w	r2, r7, #16
 801a7ac:	4619      	mov	r1, r3
 801a7ae:	f7ff fd13 	bl	801a1d8 <mg_atod>
          i += numlen - 1;
 801a7b2:	693b      	ldr	r3, [r7, #16]
 801a7b4:	3b01      	subs	r3, #1
 801a7b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a7b8:	4413      	add	r3, r2
 801a7ba:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 801a7bc:	e01d      	b.n	801a7fa <mg_json_get+0x34e>
        } else if (c == '"') {
 801a7be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a7c2:	2b22      	cmp	r3, #34	@ 0x22
 801a7c4:	d116      	bne.n	801a7f4 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 801a7c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a7c8:	3301      	adds	r3, #1
 801a7ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a7cc:	18d0      	adds	r0, r2, r3
 801a7ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a7d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a7d2:	1ad3      	subs	r3, r2, r3
 801a7d4:	3b01      	subs	r3, #1
 801a7d6:	4619      	mov	r1, r3
 801a7d8:	f7ff fcba 	bl	801a150 <mg_pass_string>
 801a7dc:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 801a7de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	da01      	bge.n	801a7e8 <mg_json_get+0x33c>
 801a7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a7e6:	e197      	b.n	801ab18 <mg_json_get+0x66c>
          i += n + 1;
 801a7e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a7ea:	3301      	adds	r3, #1
 801a7ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a7ee:	4413      	add	r3, r2
 801a7f0:	663b      	str	r3, [r7, #96]	@ 0x60
 801a7f2:	e002      	b.n	801a7fa <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 801a7f4:	f06f 0301 	mvn.w	r3, #1
 801a7f8:	e18e      	b.n	801ab18 <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 801a7fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a7fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a7fe:	429a      	cmp	r2, r3
 801a800:	d114      	bne.n	801a82c <mg_json_get+0x380>
 801a802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a804:	687a      	ldr	r2, [r7, #4]
 801a806:	4413      	add	r3, r2
 801a808:	781b      	ldrb	r3, [r3, #0]
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d10e      	bne.n	801a82c <mg_json_get+0x380>
 801a80e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a812:	429a      	cmp	r2, r3
 801a814:	d10a      	bne.n	801a82c <mg_json_get+0x380>
 801a816:	683b      	ldr	r3, [r7, #0]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d005      	beq.n	801a828 <mg_json_get+0x37c>
 801a81c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a81e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a820:	1ad3      	subs	r3, r2, r3
 801a822:	1c5a      	adds	r2, r3, #1
 801a824:	683b      	ldr	r3, [r7, #0]
 801a826:	601a      	str	r2, [r3, #0]
 801a828:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a82a:	e175      	b.n	801ab18 <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 801a82c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a82e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a830:	429a      	cmp	r2, r3
 801a832:	d105      	bne.n	801a840 <mg_json_get+0x394>
 801a834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a836:	2b00      	cmp	r3, #0
 801a838:	db02      	blt.n	801a840 <mg_json_get+0x394>
 801a83a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a83c:	3301      	adds	r3, #1
 801a83e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 801a840:	2303      	movs	r3, #3
 801a842:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 801a846:	e15d      	b.n	801ab04 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 801a848:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a84c:	2b22      	cmp	r3, #34	@ 0x22
 801a84e:	d170      	bne.n	801a932 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 801a850:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a852:	3301      	adds	r3, #1
 801a854:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a856:	18d0      	adds	r0, r2, r3
 801a858:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a85a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a85c:	1ad3      	subs	r3, r2, r3
 801a85e:	3b01      	subs	r3, #1
 801a860:	4619      	mov	r1, r3
 801a862:	f7ff fc75 	bl	801a150 <mg_pass_string>
 801a866:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 801a868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	da01      	bge.n	801a872 <mg_json_get+0x3c6>
 801a86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a870:	e152      	b.n	801ab18 <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 801a872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a874:	1c5a      	adds	r2, r3, #1
 801a876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a878:	4413      	add	r3, r2
 801a87a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a87c:	429a      	cmp	r2, r3
 801a87e:	dc02      	bgt.n	801a886 <mg_json_get+0x3da>
 801a880:	f06f 0302 	mvn.w	r3, #2
 801a884:	e148      	b.n	801ab18 <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 801a886:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a88a:	429a      	cmp	r2, r3
 801a88c:	da02      	bge.n	801a894 <mg_json_get+0x3e8>
 801a88e:	f06f 0302 	mvn.w	r3, #2
 801a892:	e141      	b.n	801ab18 <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 801a894:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a898:	429a      	cmp	r2, r3
 801a89a:	d109      	bne.n	801a8b0 <mg_json_get+0x404>
 801a89c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a89e:	3b01      	subs	r3, #1
 801a8a0:	687a      	ldr	r2, [r7, #4]
 801a8a2:	4413      	add	r3, r2
 801a8a4:	781b      	ldrb	r3, [r3, #0]
 801a8a6:	2b2e      	cmp	r3, #46	@ 0x2e
 801a8a8:	d002      	beq.n	801a8b0 <mg_json_get+0x404>
 801a8aa:	f06f 0302 	mvn.w	r3, #2
 801a8ae:	e133      	b.n	801ab18 <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 801a8b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a8b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a8b4:	429a      	cmp	r2, r3
 801a8b6:	d133      	bne.n	801a920 <mg_json_get+0x474>
 801a8b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a8ba:	3b01      	subs	r3, #1
 801a8bc:	687a      	ldr	r2, [r7, #4]
 801a8be:	4413      	add	r3, r2
 801a8c0:	781b      	ldrb	r3, [r3, #0]
 801a8c2:	2b2e      	cmp	r3, #46	@ 0x2e
 801a8c4:	d12c      	bne.n	801a920 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 801a8c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a8c8:	3301      	adds	r3, #1
 801a8ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a8cc:	18d0      	adds	r0, r2, r3
 801a8ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a8d0:	687a      	ldr	r2, [r7, #4]
 801a8d2:	4413      	add	r3, r2
 801a8d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a8d6:	4619      	mov	r1, r3
 801a8d8:	f00b f8ef 	bl	8025aba <strncmp>
 801a8dc:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d11e      	bne.n	801a920 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 801a8e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a8e6:	4413      	add	r3, r2
 801a8e8:	461a      	mov	r2, r3
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	4413      	add	r3, r2
 801a8ee:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d011      	beq.n	801a918 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 801a8f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a8f8:	4413      	add	r3, r2
 801a8fa:	461a      	mov	r2, r3
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	4413      	add	r3, r2
 801a900:	781b      	ldrb	r3, [r3, #0]
 801a902:	2b2e      	cmp	r3, #46	@ 0x2e
 801a904:	d008      	beq.n	801a918 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 801a906:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a90a:	4413      	add	r3, r2
 801a90c:	461a      	mov	r2, r3
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	4413      	add	r3, r2
 801a912:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 801a914:	2b5b      	cmp	r3, #91	@ 0x5b
 801a916:	d103      	bne.n	801a920 <mg_json_get+0x474>
            pos += n;
 801a918:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a91c:	4413      	add	r3, r2
 801a91e:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 801a920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a922:	3301      	adds	r3, #1
 801a924:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a926:	4413      	add	r3, r2
 801a928:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 801a92a:	2302      	movs	r3, #2
 801a92c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 801a930:	e0e7      	b.n	801ab02 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 801a932:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a936:	2b7d      	cmp	r3, #125	@ 0x7d
 801a938:	d14a      	bne.n	801a9d0 <mg_json_get+0x524>
          MG_EOO('}');
 801a93a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a93c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a93e:	429a      	cmp	r2, r3
 801a940:	d106      	bne.n	801a950 <mg_json_get+0x4a4>
 801a942:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a946:	429a      	cmp	r2, r3
 801a948:	d002      	beq.n	801a950 <mg_json_get+0x4a4>
 801a94a:	f06f 0302 	mvn.w	r3, #2
 801a94e:	e0e3      	b.n	801ab18 <mg_json_get+0x66c>
 801a950:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a954:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a956:	3b01      	subs	r3, #1
 801a958:	3368      	adds	r3, #104	@ 0x68
 801a95a:	443b      	add	r3, r7
 801a95c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801a960:	3302      	adds	r3, #2
 801a962:	429a      	cmp	r2, r3
 801a964:	d008      	beq.n	801a978 <mg_json_get+0x4cc>
 801a966:	f06f 0301 	mvn.w	r3, #1
 801a96a:	e0d5      	b.n	801ab18 <mg_json_get+0x66c>
 801a96c:	08032520 	.word	0x08032520
 801a970:	08032528 	.word	0x08032528
 801a974:	08032530 	.word	0x08032530
 801a978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a97a:	3b01      	subs	r3, #1
 801a97c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a97e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a982:	429a      	cmp	r2, r3
 801a984:	d114      	bne.n	801a9b0 <mg_json_get+0x504>
 801a986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a988:	687a      	ldr	r2, [r7, #4]
 801a98a:	4413      	add	r3, r2
 801a98c:	781b      	ldrb	r3, [r3, #0]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d10e      	bne.n	801a9b0 <mg_json_get+0x504>
 801a992:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a996:	429a      	cmp	r2, r3
 801a998:	d10a      	bne.n	801a9b0 <mg_json_get+0x504>
 801a99a:	683b      	ldr	r3, [r7, #0]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d005      	beq.n	801a9ac <mg_json_get+0x500>
 801a9a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a9a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a9a4:	1ad3      	subs	r3, r2, r3
 801a9a6:	1c5a      	adds	r2, r3, #1
 801a9a8:	683b      	ldr	r3, [r7, #0]
 801a9aa:	601a      	str	r2, [r3, #0]
 801a9ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a9ae:	e0b3      	b.n	801ab18 <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 801a9b0:	2303      	movs	r3, #3
 801a9b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 801a9b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a9b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a9ba:	429a      	cmp	r2, r3
 801a9bc:	f040 80a1 	bne.w	801ab02 <mg_json_get+0x656>
 801a9c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	f2c0 809d 	blt.w	801ab02 <mg_json_get+0x656>
 801a9c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a9ca:	3301      	adds	r3, #1
 801a9cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 801a9ce:	e098      	b.n	801ab02 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 801a9d0:	f06f 0301 	mvn.w	r3, #1
 801a9d4:	e0a0      	b.n	801ab18 <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 801a9d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a9da:	2b3a      	cmp	r3, #58	@ 0x3a
 801a9dc:	d103      	bne.n	801a9e6 <mg_json_get+0x53a>
          expecting = S_VALUE;
 801a9de:	2300      	movs	r3, #0
 801a9e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 801a9e4:	e08e      	b.n	801ab04 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 801a9e6:	f06f 0301 	mvn.w	r3, #1
 801a9ea:	e095      	b.n	801ab18 <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 801a9ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	dc02      	bgt.n	801a9f8 <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 801a9f2:	f06f 0301 	mvn.w	r3, #1
 801a9f6:	e08f      	b.n	801ab18 <mg_json_get+0x66c>
        } else if (c == ',') {
 801a9f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a9fc:	2b2c      	cmp	r3, #44	@ 0x2c
 801a9fe:	d10d      	bne.n	801aa1c <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 801aa00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aa02:	3b01      	subs	r3, #1
 801aa04:	3368      	adds	r3, #104	@ 0x68
 801aa06:	443b      	add	r3, r7
 801aa08:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801aa0c:	2b7b      	cmp	r3, #123	@ 0x7b
 801aa0e:	bf0c      	ite	eq
 801aa10:	2301      	moveq	r3, #1
 801aa12:	2300      	movne	r3, #0
 801aa14:	b2db      	uxtb	r3, r3
 801aa16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 801aa1a:	e073      	b.n	801ab04 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 801aa1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa20:	2b5d      	cmp	r3, #93	@ 0x5d
 801aa22:	d003      	beq.n	801aa2c <mg_json_get+0x580>
 801aa24:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa28:	2b7d      	cmp	r3, #125	@ 0x7d
 801aa2a:	d163      	bne.n	801aaf4 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 801aa2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aa30:	429a      	cmp	r2, r3
 801aa32:	d10d      	bne.n	801aa50 <mg_json_get+0x5a4>
 801aa34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa38:	2b7d      	cmp	r3, #125	@ 0x7d
 801aa3a:	d109      	bne.n	801aa50 <mg_json_get+0x5a4>
 801aa3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aa3e:	3b01      	subs	r3, #1
 801aa40:	687a      	ldr	r2, [r7, #4]
 801aa42:	4413      	add	r3, r2
 801aa44:	781b      	ldrb	r3, [r3, #0]
 801aa46:	2b2e      	cmp	r3, #46	@ 0x2e
 801aa48:	d102      	bne.n	801aa50 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 801aa4a:	f06f 0302 	mvn.w	r3, #2
 801aa4e:	e063      	b.n	801ab18 <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 801aa50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aa54:	429a      	cmp	r2, r3
 801aa56:	d10d      	bne.n	801aa74 <mg_json_get+0x5c8>
 801aa58:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa5c:	2b5d      	cmp	r3, #93	@ 0x5d
 801aa5e:	d109      	bne.n	801aa74 <mg_json_get+0x5c8>
 801aa60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aa62:	3b01      	subs	r3, #1
 801aa64:	687a      	ldr	r2, [r7, #4]
 801aa66:	4413      	add	r3, r2
 801aa68:	781b      	ldrb	r3, [r3, #0]
 801aa6a:	2b2c      	cmp	r3, #44	@ 0x2c
 801aa6c:	d102      	bne.n	801aa74 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 801aa6e:	f06f 0302 	mvn.w	r3, #2
 801aa72:	e051      	b.n	801ab18 <mg_json_get+0x66c>
          MG_EOO('O');
 801aa74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aa78:	429a      	cmp	r2, r3
 801aa7a:	d106      	bne.n	801aa8a <mg_json_get+0x5de>
 801aa7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801aa7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aa80:	429a      	cmp	r2, r3
 801aa82:	d002      	beq.n	801aa8a <mg_json_get+0x5de>
 801aa84:	f06f 0302 	mvn.w	r3, #2
 801aa88:	e046      	b.n	801ab18 <mg_json_get+0x66c>
 801aa8a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801aa8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aa90:	3b01      	subs	r3, #1
 801aa92:	3368      	adds	r3, #104	@ 0x68
 801aa94:	443b      	add	r3, r7
 801aa96:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801aa9a:	3302      	adds	r3, #2
 801aa9c:	429a      	cmp	r2, r3
 801aa9e:	d002      	beq.n	801aaa6 <mg_json_get+0x5fa>
 801aaa0:	f06f 0301 	mvn.w	r3, #1
 801aaa4:	e038      	b.n	801ab18 <mg_json_get+0x66c>
 801aaa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aaa8:	3b01      	subs	r3, #1
 801aaaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 801aaac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aaae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aab0:	429a      	cmp	r2, r3
 801aab2:	d114      	bne.n	801aade <mg_json_get+0x632>
 801aab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aab6:	687a      	ldr	r2, [r7, #4]
 801aab8:	4413      	add	r3, r2
 801aaba:	781b      	ldrb	r3, [r3, #0]
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d10e      	bne.n	801aade <mg_json_get+0x632>
 801aac0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801aac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aac4:	429a      	cmp	r2, r3
 801aac6:	d10a      	bne.n	801aade <mg_json_get+0x632>
 801aac8:	683b      	ldr	r3, [r7, #0]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d005      	beq.n	801aada <mg_json_get+0x62e>
 801aace:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801aad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801aad2:	1ad3      	subs	r3, r2, r3
 801aad4:	1c5a      	adds	r2, r3, #1
 801aad6:	683b      	ldr	r3, [r7, #0]
 801aad8:	601a      	str	r2, [r3, #0]
 801aada:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801aadc:	e01c      	b.n	801ab18 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 801aade:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aae2:	429a      	cmp	r2, r3
 801aae4:	d109      	bne.n	801aafa <mg_json_get+0x64e>
 801aae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	db06      	blt.n	801aafa <mg_json_get+0x64e>
 801aaec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aaee:	3301      	adds	r3, #1
 801aaf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801aaf2:	e002      	b.n	801aafa <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 801aaf4:	f06f 0301 	mvn.w	r3, #1
 801aaf8:	e00e      	b.n	801ab18 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 801aafa:	bf00      	nop
        break;
 801aafc:	e002      	b.n	801ab04 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 801aafe:	bf00      	nop
 801ab00:	e000      	b.n	801ab04 <mg_json_get+0x658>
        break;
 801ab02:	bf00      	nop
  for (i = 0; i < len; i++) {
 801ab04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ab06:	3301      	adds	r3, #1
 801ab08:	663b      	str	r3, [r7, #96]	@ 0x60
 801ab0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801ab0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ab0e:	429a      	cmp	r2, r3
 801ab10:	f6ff acfc 	blt.w	801a50c <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 801ab14:	f06f 0302 	mvn.w	r3, #2
}
 801ab18:	4618      	mov	r0, r3
 801ab1a:	376c      	adds	r7, #108	@ 0x6c
 801ab1c:	46bd      	mov	sp, r7
 801ab1e:	bd90      	pop	{r4, r7, pc}

0801ab20 <mg_json_get_num>:
  int len = 0, ofs = mg_json_get(json, path, &len);
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
                  (size_t) (len < 0 ? 0 : len));
}

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 801ab20:	b590      	push	{r4, r7, lr}
 801ab22:	b089      	sub	sp, #36	@ 0x24
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	f107 0408 	add.w	r4, r7, #8
 801ab2a:	e884 0003 	stmia.w	r4, {r0, r1}
 801ab2e:	607a      	str	r2, [r7, #4]
 801ab30:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 801ab32:	2300      	movs	r3, #0
 801ab34:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 801ab36:	f107 0314 	add.w	r3, r7, #20
 801ab3a:	687a      	ldr	r2, [r7, #4]
 801ab3c:	f107 0108 	add.w	r1, r7, #8
 801ab40:	c903      	ldmia	r1, {r0, r1}
 801ab42:	f7ff fcb3 	bl	801a4ac <mg_json_get>
 801ab46:	61b8      	str	r0, [r7, #24]
 801ab48:	69bb      	ldr	r3, [r7, #24]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	db25      	blt.n	801ab9a <mg_json_get_num+0x7a>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 801ab4e:	68ba      	ldr	r2, [r7, #8]
 801ab50:	69bb      	ldr	r3, [r7, #24]
 801ab52:	4413      	add	r3, r2
 801ab54:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 801ab56:	2b2d      	cmp	r3, #45	@ 0x2d
 801ab58:	d00b      	beq.n	801ab72 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 801ab5a:	68ba      	ldr	r2, [r7, #8]
 801ab5c:	69bb      	ldr	r3, [r7, #24]
 801ab5e:	4413      	add	r3, r2
 801ab60:	781b      	ldrb	r3, [r3, #0]
 801ab62:	2b2f      	cmp	r3, #47	@ 0x2f
 801ab64:	d919      	bls.n	801ab9a <mg_json_get_num+0x7a>
 801ab66:	68ba      	ldr	r2, [r7, #8]
 801ab68:	69bb      	ldr	r3, [r7, #24]
 801ab6a:	4413      	add	r3, r2
 801ab6c:	781b      	ldrb	r3, [r3, #0]
 801ab6e:	2b39      	cmp	r3, #57	@ 0x39
 801ab70:	d813      	bhi.n	801ab9a <mg_json_get_num+0x7a>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 801ab72:	683b      	ldr	r3, [r7, #0]
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d00e      	beq.n	801ab96 <mg_json_get_num+0x76>
 801ab78:	68ba      	ldr	r2, [r7, #8]
 801ab7a:	69bb      	ldr	r3, [r7, #24]
 801ab7c:	4413      	add	r3, r2
 801ab7e:	6979      	ldr	r1, [r7, #20]
 801ab80:	2200      	movs	r2, #0
 801ab82:	4618      	mov	r0, r3
 801ab84:	f7ff fb28 	bl	801a1d8 <mg_atod>
 801ab88:	eeb0 7a40 	vmov.f32	s14, s0
 801ab8c:	eef0 7a60 	vmov.f32	s15, s1
 801ab90:	683b      	ldr	r3, [r7, #0]
 801ab92:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 801ab96:	2301      	movs	r3, #1
 801ab98:	61fb      	str	r3, [r7, #28]
  }
  return found;
 801ab9a:	69fb      	ldr	r3, [r7, #28]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	bf14      	ite	ne
 801aba0:	2301      	movne	r3, #1
 801aba2:	2300      	moveq	r3, #0
 801aba4:	b2db      	uxtb	r3, r3
}
 801aba6:	4618      	mov	r0, r3
 801aba8:	3724      	adds	r7, #36	@ 0x24
 801abaa:	46bd      	mov	sp, r7
 801abac:	bd90      	pop	{r4, r7, pc}

0801abae <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 801abae:	b590      	push	{r4, r7, lr}
 801abb0:	b087      	sub	sp, #28
 801abb2:	af00      	add	r7, sp, #0
 801abb4:	f107 0408 	add.w	r4, r7, #8
 801abb8:	e884 0003 	stmia.w	r4, {r0, r1}
 801abbc:	607a      	str	r2, [r7, #4]
 801abbe:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 801abc0:	2300      	movs	r3, #0
 801abc2:	617b      	str	r3, [r7, #20]
 801abc4:	2300      	movs	r3, #0
 801abc6:	687a      	ldr	r2, [r7, #4]
 801abc8:	f107 0108 	add.w	r1, r7, #8
 801abcc:	c903      	ldmia	r1, {r0, r1}
 801abce:	f7ff fc6d 	bl	801a4ac <mg_json_get>
 801abd2:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 801abd4:	693b      	ldr	r3, [r7, #16]
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	db1b      	blt.n	801ac12 <mg_json_get_bool+0x64>
 801abda:	68ba      	ldr	r2, [r7, #8]
 801abdc:	693b      	ldr	r3, [r7, #16]
 801abde:	4413      	add	r3, r2
 801abe0:	781b      	ldrb	r3, [r3, #0]
 801abe2:	2b74      	cmp	r3, #116	@ 0x74
 801abe4:	d005      	beq.n	801abf2 <mg_json_get_bool+0x44>
 801abe6:	68ba      	ldr	r2, [r7, #8]
 801abe8:	693b      	ldr	r3, [r7, #16]
 801abea:	4413      	add	r3, r2
 801abec:	781b      	ldrb	r3, [r3, #0]
 801abee:	2b66      	cmp	r3, #102	@ 0x66
 801abf0:	d10f      	bne.n	801ac12 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 801abf2:	683b      	ldr	r3, [r7, #0]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d00a      	beq.n	801ac0e <mg_json_get_bool+0x60>
 801abf8:	68ba      	ldr	r2, [r7, #8]
 801abfa:	693b      	ldr	r3, [r7, #16]
 801abfc:	4413      	add	r3, r2
 801abfe:	781b      	ldrb	r3, [r3, #0]
 801ac00:	2b74      	cmp	r3, #116	@ 0x74
 801ac02:	bf0c      	ite	eq
 801ac04:	2301      	moveq	r3, #1
 801ac06:	2300      	movne	r3, #0
 801ac08:	b2da      	uxtb	r2, r3
 801ac0a:	683b      	ldr	r3, [r7, #0]
 801ac0c:	701a      	strb	r2, [r3, #0]
    found = 1;
 801ac0e:	2301      	movs	r3, #1
 801ac10:	617b      	str	r3, [r7, #20]
  }
  return found;
 801ac12:	697b      	ldr	r3, [r7, #20]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	bf14      	ite	ne
 801ac18:	2301      	movne	r3, #1
 801ac1a:	2300      	moveq	r3, #0
 801ac1c:	b2db      	uxtb	r3, r3
}
 801ac1e:	4618      	mov	r0, r3
 801ac20:	371c      	adds	r7, #28
 801ac22:	46bd      	mov	sp, r7
 801ac24:	bd90      	pop	{r4, r7, pc}

0801ac26 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 801ac26:	b590      	push	{r4, r7, lr}
 801ac28:	b08d      	sub	sp, #52	@ 0x34
 801ac2a:	af02      	add	r7, sp, #8
 801ac2c:	f107 0408 	add.w	r4, r7, #8
 801ac30:	e884 0003 	stmia.w	r4, {r0, r1}
 801ac34:	607a      	str	r2, [r7, #4]
 801ac36:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 801ac38:	2300      	movs	r3, #0
 801ac3a:	627b      	str	r3, [r7, #36]	@ 0x24
 801ac3c:	2300      	movs	r3, #0
 801ac3e:	623b      	str	r3, [r7, #32]
 801ac40:	e064      	b.n	801ad0c <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 801ac42:	68ba      	ldr	r2, [r7, #8]
 801ac44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac46:	4413      	add	r3, r2
 801ac48:	781b      	ldrb	r3, [r3, #0]
 801ac4a:	2b5c      	cmp	r3, #92	@ 0x5c
 801ac4c:	d12c      	bne.n	801aca8 <mg_json_unescape+0x82>
 801ac4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac50:	1d5a      	adds	r2, r3, #5
 801ac52:	68fb      	ldr	r3, [r7, #12]
 801ac54:	429a      	cmp	r2, r3
 801ac56:	d227      	bcs.n	801aca8 <mg_json_unescape+0x82>
 801ac58:	68ba      	ldr	r2, [r7, #8]
 801ac5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac5c:	3301      	adds	r3, #1
 801ac5e:	4413      	add	r3, r2
 801ac60:	781b      	ldrb	r3, [r3, #0]
 801ac62:	2b75      	cmp	r3, #117	@ 0x75
 801ac64:	d120      	bne.n	801aca8 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 801ac66:	68ba      	ldr	r2, [r7, #8]
 801ac68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac6a:	3302      	adds	r3, #2
 801ac6c:	18d1      	adds	r1, r2, r3
 801ac6e:	f107 0314 	add.w	r3, r7, #20
 801ac72:	2204      	movs	r2, #4
 801ac74:	4618      	mov	r0, r3
 801ac76:	f006 fe02 	bl	802187e <mg_str_n>
 801ac7a:	687a      	ldr	r2, [r7, #4]
 801ac7c:	6a3b      	ldr	r3, [r7, #32]
 801ac7e:	4413      	add	r3, r2
 801ac80:	2201      	movs	r2, #1
 801ac82:	9200      	str	r2, [sp, #0]
 801ac84:	2210      	movs	r2, #16
 801ac86:	f107 0114 	add.w	r1, r7, #20
 801ac8a:	c903      	ldmia	r1, {r0, r1}
 801ac8c:	f006 fffe 	bl	8021c8c <mg_str_to_num>
 801ac90:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 801ac92:	f083 0301 	eor.w	r3, r3, #1
 801ac96:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d001      	beq.n	801aca0 <mg_json_unescape+0x7a>
        return false;
 801ac9c:	2300      	movs	r3, #0
 801ac9e:	e04c      	b.n	801ad3a <mg_json_unescape+0x114>
      i += 5;
 801aca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aca2:	3305      	adds	r3, #5
 801aca4:	627b      	str	r3, [r7, #36]	@ 0x24
 801aca6:	e02b      	b.n	801ad00 <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 801aca8:	68ba      	ldr	r2, [r7, #8]
 801acaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acac:	4413      	add	r3, r2
 801acae:	781b      	ldrb	r3, [r3, #0]
 801acb0:	2b5c      	cmp	r3, #92	@ 0x5c
 801acb2:	d11d      	bne.n	801acf0 <mg_json_unescape+0xca>
 801acb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acb6:	1c5a      	adds	r2, r3, #1
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	429a      	cmp	r2, r3
 801acbc:	d218      	bcs.n	801acf0 <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 801acbe:	68ba      	ldr	r2, [r7, #8]
 801acc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acc2:	3301      	adds	r3, #1
 801acc4:	4413      	add	r3, r2
 801acc6:	781b      	ldrb	r3, [r3, #0]
 801acc8:	2100      	movs	r1, #0
 801acca:	4618      	mov	r0, r3
 801accc:	f7ff fa10 	bl	801a0f0 <json_esc>
 801acd0:	4603      	mov	r3, r0
 801acd2:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 801acd4:	7ffb      	ldrb	r3, [r7, #31]
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d101      	bne.n	801acde <mg_json_unescape+0xb8>
 801acda:	2300      	movs	r3, #0
 801acdc:	e02d      	b.n	801ad3a <mg_json_unescape+0x114>
      to[j] = c;
 801acde:	687a      	ldr	r2, [r7, #4]
 801ace0:	6a3b      	ldr	r3, [r7, #32]
 801ace2:	4413      	add	r3, r2
 801ace4:	7ffa      	ldrb	r2, [r7, #31]
 801ace6:	701a      	strb	r2, [r3, #0]
      i++;
 801ace8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acea:	3301      	adds	r3, #1
 801acec:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 801acee:	e007      	b.n	801ad00 <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 801acf0:	68ba      	ldr	r2, [r7, #8]
 801acf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acf4:	441a      	add	r2, r3
 801acf6:	6879      	ldr	r1, [r7, #4]
 801acf8:	6a3b      	ldr	r3, [r7, #32]
 801acfa:	440b      	add	r3, r1
 801acfc:	7812      	ldrb	r2, [r2, #0]
 801acfe:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 801ad00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad02:	3301      	adds	r3, #1
 801ad04:	627b      	str	r3, [r7, #36]	@ 0x24
 801ad06:	6a3b      	ldr	r3, [r7, #32]
 801ad08:	3301      	adds	r3, #1
 801ad0a:	623b      	str	r3, [r7, #32]
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ad10:	429a      	cmp	r2, r3
 801ad12:	d203      	bcs.n	801ad1c <mg_json_unescape+0xf6>
 801ad14:	6a3a      	ldr	r2, [r7, #32]
 801ad16:	683b      	ldr	r3, [r7, #0]
 801ad18:	429a      	cmp	r2, r3
 801ad1a:	d392      	bcc.n	801ac42 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 801ad1c:	6a3a      	ldr	r2, [r7, #32]
 801ad1e:	683b      	ldr	r3, [r7, #0]
 801ad20:	429a      	cmp	r2, r3
 801ad22:	d301      	bcc.n	801ad28 <mg_json_unescape+0x102>
 801ad24:	2300      	movs	r3, #0
 801ad26:	e008      	b.n	801ad3a <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 801ad28:	683b      	ldr	r3, [r7, #0]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d004      	beq.n	801ad38 <mg_json_unescape+0x112>
 801ad2e:	687a      	ldr	r2, [r7, #4]
 801ad30:	6a3b      	ldr	r3, [r7, #32]
 801ad32:	4413      	add	r3, r2
 801ad34:	2200      	movs	r2, #0
 801ad36:	701a      	strb	r2, [r3, #0]
  return true;
 801ad38:	2301      	movs	r3, #1
}
 801ad3a:	4618      	mov	r0, r3
 801ad3c:	372c      	adds	r7, #44	@ 0x2c
 801ad3e:	46bd      	mov	sp, r7
 801ad40:	bd90      	pop	{r4, r7, pc}

0801ad42 <mg_json_get_str>:

char *mg_json_get_str(struct mg_str json, const char *path) {
 801ad42:	b580      	push	{r7, lr}
 801ad44:	b08a      	sub	sp, #40	@ 0x28
 801ad46:	af00      	add	r7, sp, #0
 801ad48:	f107 0308 	add.w	r3, r7, #8
 801ad4c:	e883 0003 	stmia.w	r3, {r0, r1}
 801ad50:	607a      	str	r2, [r7, #4]
  char *result = NULL;
 801ad52:	2300      	movs	r3, #0
 801ad54:	627b      	str	r3, [r7, #36]	@ 0x24
  int len = 0, off = mg_json_get(json, path, &len);
 801ad56:	2300      	movs	r3, #0
 801ad58:	617b      	str	r3, [r7, #20]
 801ad5a:	f107 0314 	add.w	r3, r7, #20
 801ad5e:	687a      	ldr	r2, [r7, #4]
 801ad60:	f107 0108 	add.w	r1, r7, #8
 801ad64:	c903      	ldmia	r1, {r0, r1}
 801ad66:	f7ff fba1 	bl	801a4ac <mg_json_get>
 801ad6a:	6238      	str	r0, [r7, #32]
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 801ad6c:	6a3b      	ldr	r3, [r7, #32]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	db2f      	blt.n	801add2 <mg_json_get_str+0x90>
 801ad72:	697b      	ldr	r3, [r7, #20]
 801ad74:	2b01      	cmp	r3, #1
 801ad76:	dd2c      	ble.n	801add2 <mg_json_get_str+0x90>
 801ad78:	68ba      	ldr	r2, [r7, #8]
 801ad7a:	6a3b      	ldr	r3, [r7, #32]
 801ad7c:	4413      	add	r3, r2
 801ad7e:	781b      	ldrb	r3, [r3, #0]
 801ad80:	2b22      	cmp	r3, #34	@ 0x22
 801ad82:	d126      	bne.n	801add2 <mg_json_get_str+0x90>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 801ad84:	697b      	ldr	r3, [r7, #20]
 801ad86:	4619      	mov	r1, r3
 801ad88:	2001      	movs	r0, #1
 801ad8a:	f7f9 fe91 	bl	8014ab0 <mg_calloc>
 801ad8e:	6278      	str	r0, [r7, #36]	@ 0x24
 801ad90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d01d      	beq.n	801add2 <mg_json_get_str+0x90>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 801ad96:	68ba      	ldr	r2, [r7, #8]
 801ad98:	6a3b      	ldr	r3, [r7, #32]
 801ad9a:	3301      	adds	r3, #1
 801ad9c:	18d1      	adds	r1, r2, r3
 801ad9e:	697b      	ldr	r3, [r7, #20]
 801ada0:	3b02      	subs	r3, #2
 801ada2:	461a      	mov	r2, r3
 801ada4:	f107 0318 	add.w	r3, r7, #24
 801ada8:	4618      	mov	r0, r3
 801adaa:	f006 fd68 	bl	802187e <mg_str_n>
 801adae:	697b      	ldr	r3, [r7, #20]
 801adb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801adb2:	f107 0118 	add.w	r1, r7, #24
 801adb6:	c903      	ldmia	r1, {r0, r1}
 801adb8:	f7ff ff35 	bl	801ac26 <mg_json_unescape>
 801adbc:	4603      	mov	r3, r0
 801adbe:	f083 0301 	eor.w	r3, r3, #1
 801adc2:	b2db      	uxtb	r3, r3
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d004      	beq.n	801add2 <mg_json_get_str+0x90>
                          result, (size_t) len)) {
      free(result);
 801adc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801adca:	f7f1 fafd 	bl	800c3c8 <vPortFree>
      result = NULL;
 801adce:	2300      	movs	r3, #0
 801add0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return result;
 801add2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801add4:	4618      	mov	r0, r3
 801add6:	3728      	adds	r7, #40	@ 0x28
 801add8:	46bd      	mov	sp, r7
 801adda:	bd80      	pop	{r7, pc}

0801addc <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 801addc:	b580      	push	{r7, lr}
 801adde:	b082      	sub	sp, #8
 801ade0:	af00      	add	r7, sp, #0
 801ade2:	4603      	mov	r3, r0
 801ade4:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 801ade6:	4b05      	ldr	r3, [pc, #20]	@ (801adfc <logc+0x20>)
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	4a05      	ldr	r2, [pc, #20]	@ (801ae00 <logc+0x24>)
 801adec:	6811      	ldr	r1, [r2, #0]
 801adee:	79fa      	ldrb	r2, [r7, #7]
 801adf0:	4610      	mov	r0, r2
 801adf2:	4798      	blx	r3
}
 801adf4:	bf00      	nop
 801adf6:	3708      	adds	r7, #8
 801adf8:	46bd      	mov	sp, r7
 801adfa:	bd80      	pop	{r7, pc}
 801adfc:	2000029c 	.word	0x2000029c
 801ae00:	20018150 	.word	0x20018150

0801ae04 <logs>:

static void logs(const char *buf, size_t len) {
 801ae04:	b580      	push	{r7, lr}
 801ae06:	b084      	sub	sp, #16
 801ae08:	af00      	add	r7, sp, #0
 801ae0a:	6078      	str	r0, [r7, #4]
 801ae0c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 801ae0e:	2300      	movs	r3, #0
 801ae10:	60fb      	str	r3, [r7, #12]
 801ae12:	e009      	b.n	801ae28 <logs+0x24>
 801ae14:	687a      	ldr	r2, [r7, #4]
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	4413      	add	r3, r2
 801ae1a:	781b      	ldrb	r3, [r3, #0]
 801ae1c:	4618      	mov	r0, r3
 801ae1e:	f7ff ffdd 	bl	801addc <logc>
 801ae22:	68fb      	ldr	r3, [r7, #12]
 801ae24:	3301      	adds	r3, #1
 801ae26:	60fb      	str	r3, [r7, #12]
 801ae28:	68fa      	ldr	r2, [r7, #12]
 801ae2a:	683b      	ldr	r3, [r7, #0]
 801ae2c:	429a      	cmp	r2, r3
 801ae2e:	d3f1      	bcc.n	801ae14 <logs+0x10>
}
 801ae30:	bf00      	nop
 801ae32:	bf00      	nop
 801ae34:	3710      	adds	r7, #16
 801ae36:	46bd      	mov	sp, r7
 801ae38:	bd80      	pop	{r7, pc}
	...

0801ae3c <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 801ae3c:	b590      	push	{r4, r7, lr}
 801ae3e:	b099      	sub	sp, #100	@ 0x64
 801ae40:	af06      	add	r7, sp, #24
 801ae42:	60f8      	str	r0, [r7, #12]
 801ae44:	60b9      	str	r1, [r7, #8]
 801ae46:	607a      	str	r2, [r7, #4]
 801ae48:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 801ae4a:	212f      	movs	r1, #47	@ 0x2f
 801ae4c:	68b8      	ldr	r0, [r7, #8]
 801ae4e:	f00a fe59 	bl	8025b04 <strrchr>
 801ae52:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 801ae54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d104      	bne.n	801ae64 <mg_log_prefix+0x28>
 801ae5a:	215c      	movs	r1, #92	@ 0x5c
 801ae5c:	68b8      	ldr	r0, [r7, #8]
 801ae5e:	f00a fe51 	bl	8025b04 <strrchr>
 801ae62:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 801ae64:	f007 fd22 	bl	80228ac <mg_millis>
 801ae68:	4602      	mov	r2, r0
 801ae6a:	460b      	mov	r3, r1
 801ae6c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801ae6e:	2900      	cmp	r1, #0
 801ae70:	d002      	beq.n	801ae78 <mg_log_prefix+0x3c>
 801ae72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801ae74:	3101      	adds	r1, #1
 801ae76:	e000      	b.n	801ae7a <mg_log_prefix+0x3e>
 801ae78:	68b9      	ldr	r1, [r7, #8]
 801ae7a:	f107 0414 	add.w	r4, r7, #20
 801ae7e:	6838      	ldr	r0, [r7, #0]
 801ae80:	9005      	str	r0, [sp, #20]
 801ae82:	6878      	ldr	r0, [r7, #4]
 801ae84:	9004      	str	r0, [sp, #16]
 801ae86:	9103      	str	r1, [sp, #12]
 801ae88:	68f9      	ldr	r1, [r7, #12]
 801ae8a:	9102      	str	r1, [sp, #8]
 801ae8c:	e9cd 2300 	strd	r2, r3, [sp]
 801ae90:	4a11      	ldr	r2, [pc, #68]	@ (801aed8 <mg_log_prefix+0x9c>)
 801ae92:	2129      	movs	r1, #41	@ 0x29
 801ae94:	4620      	mov	r0, r4
 801ae96:	f005 ffed 	bl	8020e74 <mg_snprintf>
 801ae9a:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 801ae9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ae9e:	2b27      	cmp	r3, #39	@ 0x27
 801aea0:	d90a      	bls.n	801aeb8 <mg_log_prefix+0x7c>
 801aea2:	2327      	movs	r3, #39	@ 0x27
 801aea4:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 801aea6:	e007      	b.n	801aeb8 <mg_log_prefix+0x7c>
 801aea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aeaa:	1c5a      	adds	r2, r3, #1
 801aeac:	643a      	str	r2, [r7, #64]	@ 0x40
 801aeae:	3348      	adds	r3, #72	@ 0x48
 801aeb0:	443b      	add	r3, r7
 801aeb2:	2220      	movs	r2, #32
 801aeb4:	f803 2c34 	strb.w	r2, [r3, #-52]
 801aeb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aeba:	2b28      	cmp	r3, #40	@ 0x28
 801aebc:	d9f4      	bls.n	801aea8 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 801aebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aec0:	1e5a      	subs	r2, r3, #1
 801aec2:	f107 0314 	add.w	r3, r7, #20
 801aec6:	4611      	mov	r1, r2
 801aec8:	4618      	mov	r0, r3
 801aeca:	f7ff ff9b 	bl	801ae04 <logs>
}
 801aece:	bf00      	nop
 801aed0:	374c      	adds	r7, #76	@ 0x4c
 801aed2:	46bd      	mov	sp, r7
 801aed4:	bd90      	pop	{r4, r7, pc}
 801aed6:	bf00      	nop
 801aed8:	08032538 	.word	0x08032538

0801aedc <mg_log>:

void mg_log(const char *fmt, ...) {
 801aedc:	b40f      	push	{r0, r1, r2, r3}
 801aede:	b580      	push	{r7, lr}
 801aee0:	b082      	sub	sp, #8
 801aee2:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 801aee4:	f107 0314 	add.w	r3, r7, #20
 801aee8:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 801aeea:	4b09      	ldr	r3, [pc, #36]	@ (801af10 <mg_log+0x34>)
 801aeec:	6818      	ldr	r0, [r3, #0]
 801aeee:	4b09      	ldr	r3, [pc, #36]	@ (801af14 <mg_log+0x38>)
 801aef0:	6819      	ldr	r1, [r3, #0]
 801aef2:	1d3b      	adds	r3, r7, #4
 801aef4:	693a      	ldr	r2, [r7, #16]
 801aef6:	f7fb f8ed 	bl	80160d4 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 801aefa:	2102      	movs	r1, #2
 801aefc:	4806      	ldr	r0, [pc, #24]	@ (801af18 <mg_log+0x3c>)
 801aefe:	f7ff ff81 	bl	801ae04 <logs>
}
 801af02:	bf00      	nop
 801af04:	3708      	adds	r7, #8
 801af06:	46bd      	mov	sp, r7
 801af08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801af0c:	b004      	add	sp, #16
 801af0e:	4770      	bx	lr
 801af10:	2000029c 	.word	0x2000029c
 801af14:	20018150 	.word	0x20018150
 801af18:	080312b0 	.word	0x080312b0

0801af1c <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 801af1c:	b480      	push	{r7}
 801af1e:	b083      	sub	sp, #12
 801af20:	af00      	add	r7, sp, #0
 801af22:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	2b09      	cmp	r3, #9
 801af28:	d804      	bhi.n	801af34 <nibble+0x18>
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	b2db      	uxtb	r3, r3
 801af2e:	3330      	adds	r3, #48	@ 0x30
 801af30:	b2db      	uxtb	r3, r3
 801af32:	e003      	b.n	801af3c <nibble+0x20>
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	b2db      	uxtb	r3, r3
 801af38:	3357      	adds	r3, #87	@ 0x57
 801af3a:	b2db      	uxtb	r3, r3
}
 801af3c:	4618      	mov	r0, r3
 801af3e:	370c      	adds	r7, #12
 801af40:	46bd      	mov	sp, r7
 801af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af46:	4770      	bx	lr

0801af48 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 801af48:	b580      	push	{r7, lr}
 801af4a:	b08a      	sub	sp, #40	@ 0x28
 801af4c:	af00      	add	r7, sp, #0
 801af4e:	6078      	str	r0, [r7, #4]
 801af50:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 801af56:	2300      	movs	r3, #0
 801af58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 801af5c:	2300      	movs	r3, #0
 801af5e:	623b      	str	r3, [r7, #32]
 801af60:	e07a      	b.n	801b058 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 801af62:	6a3b      	ldr	r3, [r7, #32]
 801af64:	f003 030f 	and.w	r3, r3, #15
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d13a      	bne.n	801afe2 <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 801af6c:	6a3b      	ldr	r3, [r7, #32]
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d00f      	beq.n	801af92 <mg_hexdump+0x4a>
 801af72:	2102      	movs	r1, #2
 801af74:	484c      	ldr	r0, [pc, #304]	@ (801b0a8 <mg_hexdump+0x160>)
 801af76:	f7ff ff45 	bl	801ae04 <logs>
 801af7a:	f107 030c 	add.w	r3, r7, #12
 801af7e:	2110      	movs	r1, #16
 801af80:	4618      	mov	r0, r3
 801af82:	f7ff ff3f 	bl	801ae04 <logs>
 801af86:	200a      	movs	r0, #10
 801af88:	f7ff ff28 	bl	801addc <logc>
 801af8c:	2300      	movs	r3, #0
 801af8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 801af92:	6a3b      	ldr	r3, [r7, #32]
 801af94:	0b1b      	lsrs	r3, r3, #12
 801af96:	f003 030f 	and.w	r3, r3, #15
 801af9a:	4618      	mov	r0, r3
 801af9c:	f7ff ffbe 	bl	801af1c <nibble>
 801afa0:	4603      	mov	r3, r0
 801afa2:	4618      	mov	r0, r3
 801afa4:	f7ff ff1a 	bl	801addc <logc>
 801afa8:	6a3b      	ldr	r3, [r7, #32]
 801afaa:	0a1b      	lsrs	r3, r3, #8
 801afac:	f003 030f 	and.w	r3, r3, #15
 801afb0:	4618      	mov	r0, r3
 801afb2:	f7ff ffb3 	bl	801af1c <nibble>
 801afb6:	4603      	mov	r3, r0
 801afb8:	4618      	mov	r0, r3
 801afba:	f7ff ff0f 	bl	801addc <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 801afbe:	6a3b      	ldr	r3, [r7, #32]
 801afc0:	091b      	lsrs	r3, r3, #4
 801afc2:	f003 030f 	and.w	r3, r3, #15
 801afc6:	4618      	mov	r0, r3
 801afc8:	f7ff ffa8 	bl	801af1c <nibble>
 801afcc:	4603      	mov	r3, r0
 801afce:	4618      	mov	r0, r3
 801afd0:	f7ff ff04 	bl	801addc <logc>
 801afd4:	2030      	movs	r0, #48	@ 0x30
 801afd6:	f7ff ff01 	bl	801addc <logc>
 801afda:	2103      	movs	r1, #3
 801afdc:	4833      	ldr	r0, [pc, #204]	@ (801b0ac <mg_hexdump+0x164>)
 801afde:	f7ff ff11 	bl	801ae04 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 801afe2:	69fa      	ldr	r2, [r7, #28]
 801afe4:	6a3b      	ldr	r3, [r7, #32]
 801afe6:	4413      	add	r3, r2
 801afe8:	781b      	ldrb	r3, [r3, #0]
 801afea:	091b      	lsrs	r3, r3, #4
 801afec:	b2db      	uxtb	r3, r3
 801afee:	4618      	mov	r0, r3
 801aff0:	f7ff ff94 	bl	801af1c <nibble>
 801aff4:	4603      	mov	r3, r0
 801aff6:	4618      	mov	r0, r3
 801aff8:	f7ff fef0 	bl	801addc <logc>
 801affc:	69fa      	ldr	r2, [r7, #28]
 801affe:	6a3b      	ldr	r3, [r7, #32]
 801b000:	4413      	add	r3, r2
 801b002:	781b      	ldrb	r3, [r3, #0]
 801b004:	f003 030f 	and.w	r3, r3, #15
 801b008:	4618      	mov	r0, r3
 801b00a:	f7ff ff87 	bl	801af1c <nibble>
 801b00e:	4603      	mov	r3, r0
 801b010:	4618      	mov	r0, r3
 801b012:	f7ff fee3 	bl	801addc <logc>
    logc(' ');                                         // Space after hex number
 801b016:	2020      	movs	r0, #32
 801b018:	f7ff fee0 	bl	801addc <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 801b01c:	69fa      	ldr	r2, [r7, #28]
 801b01e:	6a3b      	ldr	r3, [r7, #32]
 801b020:	4413      	add	r3, r2
 801b022:	781b      	ldrb	r3, [r3, #0]
 801b024:	2b1f      	cmp	r3, #31
 801b026:	d90a      	bls.n	801b03e <mg_hexdump+0xf6>
 801b028:	69fa      	ldr	r2, [r7, #28]
 801b02a:	6a3b      	ldr	r3, [r7, #32]
 801b02c:	4413      	add	r3, r2
 801b02e:	781b      	ldrb	r3, [r3, #0]
 801b030:	2b7e      	cmp	r3, #126	@ 0x7e
 801b032:	d804      	bhi.n	801b03e <mg_hexdump+0xf6>
 801b034:	69fa      	ldr	r2, [r7, #28]
 801b036:	6a3b      	ldr	r3, [r7, #32]
 801b038:	4413      	add	r3, r2
 801b03a:	781a      	ldrb	r2, [r3, #0]
 801b03c:	e000      	b.n	801b040 <mg_hexdump+0xf8>
 801b03e:	222e      	movs	r2, #46	@ 0x2e
 801b040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b044:	1c59      	adds	r1, r3, #1
 801b046:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 801b04a:	3328      	adds	r3, #40	@ 0x28
 801b04c:	443b      	add	r3, r7
 801b04e:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 801b052:	6a3b      	ldr	r3, [r7, #32]
 801b054:	3301      	adds	r3, #1
 801b056:	623b      	str	r3, [r7, #32]
 801b058:	6a3a      	ldr	r2, [r7, #32]
 801b05a:	683b      	ldr	r3, [r7, #0]
 801b05c:	429a      	cmp	r2, r3
 801b05e:	d380      	bcc.n	801af62 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 801b060:	e00d      	b.n	801b07e <mg_hexdump+0x136>
 801b062:	2103      	movs	r1, #3
 801b064:	4811      	ldr	r0, [pc, #68]	@ (801b0ac <mg_hexdump+0x164>)
 801b066:	f7ff fecd 	bl	801ae04 <logs>
 801b06a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b06e:	1c5a      	adds	r2, r3, #1
 801b070:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 801b074:	3328      	adds	r3, #40	@ 0x28
 801b076:	443b      	add	r3, r7
 801b078:	2220      	movs	r2, #32
 801b07a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 801b07e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b082:	2b0f      	cmp	r3, #15
 801b084:	d9ed      	bls.n	801b062 <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 801b086:	2102      	movs	r1, #2
 801b088:	4807      	ldr	r0, [pc, #28]	@ (801b0a8 <mg_hexdump+0x160>)
 801b08a:	f7ff febb 	bl	801ae04 <logs>
 801b08e:	f107 030c 	add.w	r3, r7, #12
 801b092:	2110      	movs	r1, #16
 801b094:	4618      	mov	r0, r3
 801b096:	f7ff feb5 	bl	801ae04 <logs>
 801b09a:	200a      	movs	r0, #10
 801b09c:	f7ff fe9e 	bl	801addc <logc>
}
 801b0a0:	bf00      	nop
 801b0a2:	3728      	adds	r7, #40	@ 0x28
 801b0a4:	46bd      	mov	sp, r7
 801b0a6:	bd80      	pop	{r7, pc}
 801b0a8:	0803254c 	.word	0x0803254c
 801b0ac:	08032550 	.word	0x08032550

0801b0b0 <mg_byte_reverse>:
//  needed on buffers full of bytes, and then call MD5Final, which
//  will fill a supplied 16-byte array with the digest.

#if defined(MG_ENABLE_MD5) && MG_ENABLE_MD5

static void mg_byte_reverse(unsigned char *buf, unsigned longs) {
 801b0b0:	b480      	push	{r7}
 801b0b2:	b085      	sub	sp, #20
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	6078      	str	r0, [r7, #4]
 801b0b8:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 801b0ba:	4b14      	ldr	r3, [pc, #80]	@ (801b10c <mg_byte_reverse+0x5c>)
 801b0bc:	881b      	ldrh	r3, [r3, #0]
 801b0be:	2bff      	cmp	r3, #255	@ 0xff
 801b0c0:	d81d      	bhi.n	801b0fe <mg_byte_reverse+0x4e>
    do {
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	3303      	adds	r3, #3
 801b0c6:	781b      	ldrb	r3, [r3, #0]
 801b0c8:	021b      	lsls	r3, r3, #8
 801b0ca:	687a      	ldr	r2, [r7, #4]
 801b0cc:	3202      	adds	r2, #2
 801b0ce:	7812      	ldrb	r2, [r2, #0]
 801b0d0:	4313      	orrs	r3, r2
 801b0d2:	041a      	lsls	r2, r3, #16
                   ((unsigned) buf[1] << 8 | buf[0]);
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	3301      	adds	r3, #1
 801b0d8:	781b      	ldrb	r3, [r3, #0]
 801b0da:	021b      	lsls	r3, r3, #8
 801b0dc:	6879      	ldr	r1, [r7, #4]
 801b0de:	7809      	ldrb	r1, [r1, #0]
 801b0e0:	430b      	orrs	r3, r1
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 801b0e2:	4313      	orrs	r3, r2
 801b0e4:	60fb      	str	r3, [r7, #12]
      *(uint32_t *) buf = t;
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	68fa      	ldr	r2, [r7, #12]
 801b0ea:	601a      	str	r2, [r3, #0]
      buf += 4;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	3304      	adds	r3, #4
 801b0f0:	607b      	str	r3, [r7, #4]
    } while (--longs);
 801b0f2:	683b      	ldr	r3, [r7, #0]
 801b0f4:	3b01      	subs	r3, #1
 801b0f6:	603b      	str	r3, [r7, #0]
 801b0f8:	683b      	ldr	r3, [r7, #0]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d1e1      	bne.n	801b0c2 <mg_byte_reverse+0x12>
  } else {
    (void) buf, (void) longs;  // Little endian. Do nothing
  }
}
 801b0fe:	bf00      	nop
 801b100:	3714      	adds	r7, #20
 801b102:	46bd      	mov	sp, r7
 801b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b108:	4770      	bx	lr
 801b10a:	bf00      	nop
 801b10c:	08032554 	.word	0x08032554

0801b110 <mg_md5_init>:

/*
 * Start MD5 accumulation.  Set bit count to 0 and buffer to mysterious
 * initialization constants.
 */
void mg_md5_init(mg_md5_ctx *ctx) {
 801b110:	b480      	push	{r7}
 801b112:	b083      	sub	sp, #12
 801b114:	af00      	add	r7, sp, #0
 801b116:	6078      	str	r0, [r7, #4]
  ctx->buf[0] = 0x67452301;
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	4a0b      	ldr	r2, [pc, #44]	@ (801b148 <mg_md5_init+0x38>)
 801b11c:	601a      	str	r2, [r3, #0]
  ctx->buf[1] = 0xefcdab89;
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	4a0a      	ldr	r2, [pc, #40]	@ (801b14c <mg_md5_init+0x3c>)
 801b122:	605a      	str	r2, [r3, #4]
  ctx->buf[2] = 0x98badcfe;
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	4a0a      	ldr	r2, [pc, #40]	@ (801b150 <mg_md5_init+0x40>)
 801b128:	609a      	str	r2, [r3, #8]
  ctx->buf[3] = 0x10325476;
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	4a09      	ldr	r2, [pc, #36]	@ (801b154 <mg_md5_init+0x44>)
 801b12e:	60da      	str	r2, [r3, #12]

  ctx->bits[0] = 0;
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	2200      	movs	r2, #0
 801b134:	611a      	str	r2, [r3, #16]
  ctx->bits[1] = 0;
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	2200      	movs	r2, #0
 801b13a:	615a      	str	r2, [r3, #20]
}
 801b13c:	bf00      	nop
 801b13e:	370c      	adds	r7, #12
 801b140:	46bd      	mov	sp, r7
 801b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b146:	4770      	bx	lr
 801b148:	67452301 	.word	0x67452301
 801b14c:	efcdab89 	.word	0xefcdab89
 801b150:	98badcfe 	.word	0x98badcfe
 801b154:	10325476 	.word	0x10325476

0801b158 <mg_md5_transform>:

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 801b158:	b480      	push	{r7}
 801b15a:	b087      	sub	sp, #28
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	6078      	str	r0, [r7, #4]
 801b160:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d;

  a = buf[0];
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	617b      	str	r3, [r7, #20]
  b = buf[1];
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	685b      	ldr	r3, [r3, #4]
 801b16c:	613b      	str	r3, [r7, #16]
  c = buf[2];
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	689b      	ldr	r3, [r3, #8]
 801b172:	60fb      	str	r3, [r7, #12]
  d = buf[3];
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	68db      	ldr	r3, [r3, #12]
 801b178:	60bb      	str	r3, [r7, #8]

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 801b17a:	68fa      	ldr	r2, [r7, #12]
 801b17c:	68bb      	ldr	r3, [r7, #8]
 801b17e:	405a      	eors	r2, r3
 801b180:	693b      	ldr	r3, [r7, #16]
 801b182:	401a      	ands	r2, r3
 801b184:	68bb      	ldr	r3, [r7, #8]
 801b186:	405a      	eors	r2, r3
 801b188:	683b      	ldr	r3, [r7, #0]
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	441a      	add	r2, r3
 801b18e:	697b      	ldr	r3, [r7, #20]
 801b190:	441a      	add	r2, r3
 801b192:	4ba1      	ldr	r3, [pc, #644]	@ (801b418 <mg_md5_transform+0x2c0>)
 801b194:	4413      	add	r3, r2
 801b196:	617b      	str	r3, [r7, #20]
 801b198:	697b      	ldr	r3, [r7, #20]
 801b19a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b19e:	617b      	str	r3, [r7, #20]
 801b1a0:	697a      	ldr	r2, [r7, #20]
 801b1a2:	693b      	ldr	r3, [r7, #16]
 801b1a4:	4413      	add	r3, r2
 801b1a6:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 801b1a8:	693a      	ldr	r2, [r7, #16]
 801b1aa:	68fb      	ldr	r3, [r7, #12]
 801b1ac:	405a      	eors	r2, r3
 801b1ae:	697b      	ldr	r3, [r7, #20]
 801b1b0:	401a      	ands	r2, r3
 801b1b2:	68fb      	ldr	r3, [r7, #12]
 801b1b4:	405a      	eors	r2, r3
 801b1b6:	683b      	ldr	r3, [r7, #0]
 801b1b8:	3304      	adds	r3, #4
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	441a      	add	r2, r3
 801b1be:	68bb      	ldr	r3, [r7, #8]
 801b1c0:	441a      	add	r2, r3
 801b1c2:	4b96      	ldr	r3, [pc, #600]	@ (801b41c <mg_md5_transform+0x2c4>)
 801b1c4:	4413      	add	r3, r2
 801b1c6:	60bb      	str	r3, [r7, #8]
 801b1c8:	68bb      	ldr	r3, [r7, #8]
 801b1ca:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b1ce:	60bb      	str	r3, [r7, #8]
 801b1d0:	68ba      	ldr	r2, [r7, #8]
 801b1d2:	697b      	ldr	r3, [r7, #20]
 801b1d4:	4413      	add	r3, r2
 801b1d6:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 801b1d8:	697a      	ldr	r2, [r7, #20]
 801b1da:	693b      	ldr	r3, [r7, #16]
 801b1dc:	405a      	eors	r2, r3
 801b1de:	68bb      	ldr	r3, [r7, #8]
 801b1e0:	401a      	ands	r2, r3
 801b1e2:	693b      	ldr	r3, [r7, #16]
 801b1e4:	405a      	eors	r2, r3
 801b1e6:	683b      	ldr	r3, [r7, #0]
 801b1e8:	3308      	adds	r3, #8
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	441a      	add	r2, r3
 801b1ee:	68fb      	ldr	r3, [r7, #12]
 801b1f0:	441a      	add	r2, r3
 801b1f2:	4b8b      	ldr	r3, [pc, #556]	@ (801b420 <mg_md5_transform+0x2c8>)
 801b1f4:	4413      	add	r3, r2
 801b1f6:	60fb      	str	r3, [r7, #12]
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b1fe:	60fb      	str	r3, [r7, #12]
 801b200:	68fa      	ldr	r2, [r7, #12]
 801b202:	68bb      	ldr	r3, [r7, #8]
 801b204:	4413      	add	r3, r2
 801b206:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 801b208:	68ba      	ldr	r2, [r7, #8]
 801b20a:	697b      	ldr	r3, [r7, #20]
 801b20c:	405a      	eors	r2, r3
 801b20e:	68fb      	ldr	r3, [r7, #12]
 801b210:	401a      	ands	r2, r3
 801b212:	697b      	ldr	r3, [r7, #20]
 801b214:	405a      	eors	r2, r3
 801b216:	683b      	ldr	r3, [r7, #0]
 801b218:	330c      	adds	r3, #12
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	441a      	add	r2, r3
 801b21e:	693b      	ldr	r3, [r7, #16]
 801b220:	441a      	add	r2, r3
 801b222:	4b80      	ldr	r3, [pc, #512]	@ (801b424 <mg_md5_transform+0x2cc>)
 801b224:	4413      	add	r3, r2
 801b226:	613b      	str	r3, [r7, #16]
 801b228:	693b      	ldr	r3, [r7, #16]
 801b22a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b22e:	613b      	str	r3, [r7, #16]
 801b230:	693a      	ldr	r2, [r7, #16]
 801b232:	68fb      	ldr	r3, [r7, #12]
 801b234:	4413      	add	r3, r2
 801b236:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 801b238:	68fa      	ldr	r2, [r7, #12]
 801b23a:	68bb      	ldr	r3, [r7, #8]
 801b23c:	405a      	eors	r2, r3
 801b23e:	693b      	ldr	r3, [r7, #16]
 801b240:	401a      	ands	r2, r3
 801b242:	68bb      	ldr	r3, [r7, #8]
 801b244:	405a      	eors	r2, r3
 801b246:	683b      	ldr	r3, [r7, #0]
 801b248:	3310      	adds	r3, #16
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	441a      	add	r2, r3
 801b24e:	697b      	ldr	r3, [r7, #20]
 801b250:	441a      	add	r2, r3
 801b252:	4b75      	ldr	r3, [pc, #468]	@ (801b428 <mg_md5_transform+0x2d0>)
 801b254:	4413      	add	r3, r2
 801b256:	617b      	str	r3, [r7, #20]
 801b258:	697b      	ldr	r3, [r7, #20]
 801b25a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b25e:	617b      	str	r3, [r7, #20]
 801b260:	697a      	ldr	r2, [r7, #20]
 801b262:	693b      	ldr	r3, [r7, #16]
 801b264:	4413      	add	r3, r2
 801b266:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 801b268:	693a      	ldr	r2, [r7, #16]
 801b26a:	68fb      	ldr	r3, [r7, #12]
 801b26c:	405a      	eors	r2, r3
 801b26e:	697b      	ldr	r3, [r7, #20]
 801b270:	401a      	ands	r2, r3
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	405a      	eors	r2, r3
 801b276:	683b      	ldr	r3, [r7, #0]
 801b278:	3314      	adds	r3, #20
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	441a      	add	r2, r3
 801b27e:	68bb      	ldr	r3, [r7, #8]
 801b280:	441a      	add	r2, r3
 801b282:	4b6a      	ldr	r3, [pc, #424]	@ (801b42c <mg_md5_transform+0x2d4>)
 801b284:	4413      	add	r3, r2
 801b286:	60bb      	str	r3, [r7, #8]
 801b288:	68bb      	ldr	r3, [r7, #8]
 801b28a:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b28e:	60bb      	str	r3, [r7, #8]
 801b290:	68ba      	ldr	r2, [r7, #8]
 801b292:	697b      	ldr	r3, [r7, #20]
 801b294:	4413      	add	r3, r2
 801b296:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 801b298:	697a      	ldr	r2, [r7, #20]
 801b29a:	693b      	ldr	r3, [r7, #16]
 801b29c:	405a      	eors	r2, r3
 801b29e:	68bb      	ldr	r3, [r7, #8]
 801b2a0:	401a      	ands	r2, r3
 801b2a2:	693b      	ldr	r3, [r7, #16]
 801b2a4:	405a      	eors	r2, r3
 801b2a6:	683b      	ldr	r3, [r7, #0]
 801b2a8:	3318      	adds	r3, #24
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	441a      	add	r2, r3
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	441a      	add	r2, r3
 801b2b2:	4b5f      	ldr	r3, [pc, #380]	@ (801b430 <mg_md5_transform+0x2d8>)
 801b2b4:	4413      	add	r3, r2
 801b2b6:	60fb      	str	r3, [r7, #12]
 801b2b8:	68fb      	ldr	r3, [r7, #12]
 801b2ba:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b2be:	60fb      	str	r3, [r7, #12]
 801b2c0:	68fa      	ldr	r2, [r7, #12]
 801b2c2:	68bb      	ldr	r3, [r7, #8]
 801b2c4:	4413      	add	r3, r2
 801b2c6:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 801b2c8:	68ba      	ldr	r2, [r7, #8]
 801b2ca:	697b      	ldr	r3, [r7, #20]
 801b2cc:	405a      	eors	r2, r3
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	401a      	ands	r2, r3
 801b2d2:	697b      	ldr	r3, [r7, #20]
 801b2d4:	405a      	eors	r2, r3
 801b2d6:	683b      	ldr	r3, [r7, #0]
 801b2d8:	331c      	adds	r3, #28
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	441a      	add	r2, r3
 801b2de:	693b      	ldr	r3, [r7, #16]
 801b2e0:	441a      	add	r2, r3
 801b2e2:	4b54      	ldr	r3, [pc, #336]	@ (801b434 <mg_md5_transform+0x2dc>)
 801b2e4:	4413      	add	r3, r2
 801b2e6:	613b      	str	r3, [r7, #16]
 801b2e8:	693b      	ldr	r3, [r7, #16]
 801b2ea:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b2ee:	613b      	str	r3, [r7, #16]
 801b2f0:	693a      	ldr	r2, [r7, #16]
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	4413      	add	r3, r2
 801b2f6:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 801b2f8:	68fa      	ldr	r2, [r7, #12]
 801b2fa:	68bb      	ldr	r3, [r7, #8]
 801b2fc:	405a      	eors	r2, r3
 801b2fe:	693b      	ldr	r3, [r7, #16]
 801b300:	401a      	ands	r2, r3
 801b302:	68bb      	ldr	r3, [r7, #8]
 801b304:	405a      	eors	r2, r3
 801b306:	683b      	ldr	r3, [r7, #0]
 801b308:	3320      	adds	r3, #32
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	441a      	add	r2, r3
 801b30e:	697b      	ldr	r3, [r7, #20]
 801b310:	441a      	add	r2, r3
 801b312:	4b49      	ldr	r3, [pc, #292]	@ (801b438 <mg_md5_transform+0x2e0>)
 801b314:	4413      	add	r3, r2
 801b316:	617b      	str	r3, [r7, #20]
 801b318:	697b      	ldr	r3, [r7, #20]
 801b31a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b31e:	617b      	str	r3, [r7, #20]
 801b320:	697a      	ldr	r2, [r7, #20]
 801b322:	693b      	ldr	r3, [r7, #16]
 801b324:	4413      	add	r3, r2
 801b326:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 801b328:	693a      	ldr	r2, [r7, #16]
 801b32a:	68fb      	ldr	r3, [r7, #12]
 801b32c:	405a      	eors	r2, r3
 801b32e:	697b      	ldr	r3, [r7, #20]
 801b330:	401a      	ands	r2, r3
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	405a      	eors	r2, r3
 801b336:	683b      	ldr	r3, [r7, #0]
 801b338:	3324      	adds	r3, #36	@ 0x24
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	441a      	add	r2, r3
 801b33e:	68bb      	ldr	r3, [r7, #8]
 801b340:	441a      	add	r2, r3
 801b342:	4b3e      	ldr	r3, [pc, #248]	@ (801b43c <mg_md5_transform+0x2e4>)
 801b344:	4413      	add	r3, r2
 801b346:	60bb      	str	r3, [r7, #8]
 801b348:	68bb      	ldr	r3, [r7, #8]
 801b34a:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b34e:	60bb      	str	r3, [r7, #8]
 801b350:	68ba      	ldr	r2, [r7, #8]
 801b352:	697b      	ldr	r3, [r7, #20]
 801b354:	4413      	add	r3, r2
 801b356:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 801b358:	697a      	ldr	r2, [r7, #20]
 801b35a:	693b      	ldr	r3, [r7, #16]
 801b35c:	405a      	eors	r2, r3
 801b35e:	68bb      	ldr	r3, [r7, #8]
 801b360:	401a      	ands	r2, r3
 801b362:	693b      	ldr	r3, [r7, #16]
 801b364:	405a      	eors	r2, r3
 801b366:	683b      	ldr	r3, [r7, #0]
 801b368:	3328      	adds	r3, #40	@ 0x28
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	441a      	add	r2, r3
 801b36e:	68fb      	ldr	r3, [r7, #12]
 801b370:	4413      	add	r3, r2
 801b372:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 801b376:	3b4f      	subs	r3, #79	@ 0x4f
 801b378:	60fb      	str	r3, [r7, #12]
 801b37a:	68fb      	ldr	r3, [r7, #12]
 801b37c:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b380:	60fb      	str	r3, [r7, #12]
 801b382:	68fa      	ldr	r2, [r7, #12]
 801b384:	68bb      	ldr	r3, [r7, #8]
 801b386:	4413      	add	r3, r2
 801b388:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 801b38a:	68ba      	ldr	r2, [r7, #8]
 801b38c:	697b      	ldr	r3, [r7, #20]
 801b38e:	405a      	eors	r2, r3
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	401a      	ands	r2, r3
 801b394:	697b      	ldr	r3, [r7, #20]
 801b396:	405a      	eors	r2, r3
 801b398:	683b      	ldr	r3, [r7, #0]
 801b39a:	332c      	adds	r3, #44	@ 0x2c
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	441a      	add	r2, r3
 801b3a0:	693b      	ldr	r3, [r7, #16]
 801b3a2:	441a      	add	r2, r3
 801b3a4:	4b26      	ldr	r3, [pc, #152]	@ (801b440 <mg_md5_transform+0x2e8>)
 801b3a6:	4413      	add	r3, r2
 801b3a8:	613b      	str	r3, [r7, #16]
 801b3aa:	693b      	ldr	r3, [r7, #16]
 801b3ac:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b3b0:	613b      	str	r3, [r7, #16]
 801b3b2:	693a      	ldr	r2, [r7, #16]
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	4413      	add	r3, r2
 801b3b8:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 801b3ba:	68fa      	ldr	r2, [r7, #12]
 801b3bc:	68bb      	ldr	r3, [r7, #8]
 801b3be:	405a      	eors	r2, r3
 801b3c0:	693b      	ldr	r3, [r7, #16]
 801b3c2:	401a      	ands	r2, r3
 801b3c4:	68bb      	ldr	r3, [r7, #8]
 801b3c6:	405a      	eors	r2, r3
 801b3c8:	683b      	ldr	r3, [r7, #0]
 801b3ca:	3330      	adds	r3, #48	@ 0x30
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	441a      	add	r2, r3
 801b3d0:	697b      	ldr	r3, [r7, #20]
 801b3d2:	441a      	add	r2, r3
 801b3d4:	4b1b      	ldr	r3, [pc, #108]	@ (801b444 <mg_md5_transform+0x2ec>)
 801b3d6:	4413      	add	r3, r2
 801b3d8:	617b      	str	r3, [r7, #20]
 801b3da:	697b      	ldr	r3, [r7, #20]
 801b3dc:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b3e0:	617b      	str	r3, [r7, #20]
 801b3e2:	697a      	ldr	r2, [r7, #20]
 801b3e4:	693b      	ldr	r3, [r7, #16]
 801b3e6:	4413      	add	r3, r2
 801b3e8:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 801b3ea:	693a      	ldr	r2, [r7, #16]
 801b3ec:	68fb      	ldr	r3, [r7, #12]
 801b3ee:	405a      	eors	r2, r3
 801b3f0:	697b      	ldr	r3, [r7, #20]
 801b3f2:	401a      	ands	r2, r3
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	405a      	eors	r2, r3
 801b3f8:	683b      	ldr	r3, [r7, #0]
 801b3fa:	3334      	adds	r3, #52	@ 0x34
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	441a      	add	r2, r3
 801b400:	68bb      	ldr	r3, [r7, #8]
 801b402:	441a      	add	r2, r3
 801b404:	4b10      	ldr	r3, [pc, #64]	@ (801b448 <mg_md5_transform+0x2f0>)
 801b406:	4413      	add	r3, r2
 801b408:	60bb      	str	r3, [r7, #8]
 801b40a:	68bb      	ldr	r3, [r7, #8]
 801b40c:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b410:	60bb      	str	r3, [r7, #8]
 801b412:	68ba      	ldr	r2, [r7, #8]
 801b414:	e01a      	b.n	801b44c <mg_md5_transform+0x2f4>
 801b416:	bf00      	nop
 801b418:	d76aa478 	.word	0xd76aa478
 801b41c:	e8c7b756 	.word	0xe8c7b756
 801b420:	242070db 	.word	0x242070db
 801b424:	c1bdceee 	.word	0xc1bdceee
 801b428:	f57c0faf 	.word	0xf57c0faf
 801b42c:	4787c62a 	.word	0x4787c62a
 801b430:	a8304613 	.word	0xa8304613
 801b434:	fd469501 	.word	0xfd469501
 801b438:	698098d8 	.word	0x698098d8
 801b43c:	8b44f7af 	.word	0x8b44f7af
 801b440:	895cd7be 	.word	0x895cd7be
 801b444:	6b901122 	.word	0x6b901122
 801b448:	fd987193 	.word	0xfd987193
 801b44c:	697b      	ldr	r3, [r7, #20]
 801b44e:	4413      	add	r3, r2
 801b450:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 801b452:	697a      	ldr	r2, [r7, #20]
 801b454:	693b      	ldr	r3, [r7, #16]
 801b456:	405a      	eors	r2, r3
 801b458:	68bb      	ldr	r3, [r7, #8]
 801b45a:	401a      	ands	r2, r3
 801b45c:	693b      	ldr	r3, [r7, #16]
 801b45e:	405a      	eors	r2, r3
 801b460:	683b      	ldr	r3, [r7, #0]
 801b462:	3338      	adds	r3, #56	@ 0x38
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	441a      	add	r2, r3
 801b468:	68fb      	ldr	r3, [r7, #12]
 801b46a:	441a      	add	r2, r3
 801b46c:	4ba0      	ldr	r3, [pc, #640]	@ (801b6f0 <mg_md5_transform+0x598>)
 801b46e:	4413      	add	r3, r2
 801b470:	60fb      	str	r3, [r7, #12]
 801b472:	68fb      	ldr	r3, [r7, #12]
 801b474:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b478:	60fb      	str	r3, [r7, #12]
 801b47a:	68fa      	ldr	r2, [r7, #12]
 801b47c:	68bb      	ldr	r3, [r7, #8]
 801b47e:	4413      	add	r3, r2
 801b480:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 801b482:	68ba      	ldr	r2, [r7, #8]
 801b484:	697b      	ldr	r3, [r7, #20]
 801b486:	405a      	eors	r2, r3
 801b488:	68fb      	ldr	r3, [r7, #12]
 801b48a:	401a      	ands	r2, r3
 801b48c:	697b      	ldr	r3, [r7, #20]
 801b48e:	405a      	eors	r2, r3
 801b490:	683b      	ldr	r3, [r7, #0]
 801b492:	333c      	adds	r3, #60	@ 0x3c
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	441a      	add	r2, r3
 801b498:	693b      	ldr	r3, [r7, #16]
 801b49a:	441a      	add	r2, r3
 801b49c:	4b95      	ldr	r3, [pc, #596]	@ (801b6f4 <mg_md5_transform+0x59c>)
 801b49e:	4413      	add	r3, r2
 801b4a0:	613b      	str	r3, [r7, #16]
 801b4a2:	693b      	ldr	r3, [r7, #16]
 801b4a4:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b4a8:	613b      	str	r3, [r7, #16]
 801b4aa:	693a      	ldr	r2, [r7, #16]
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	4413      	add	r3, r2
 801b4b0:	613b      	str	r3, [r7, #16]

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 801b4b2:	693a      	ldr	r2, [r7, #16]
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	405a      	eors	r2, r3
 801b4b8:	68bb      	ldr	r3, [r7, #8]
 801b4ba:	401a      	ands	r2, r3
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	405a      	eors	r2, r3
 801b4c0:	683b      	ldr	r3, [r7, #0]
 801b4c2:	3304      	adds	r3, #4
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	441a      	add	r2, r3
 801b4c8:	697b      	ldr	r3, [r7, #20]
 801b4ca:	441a      	add	r2, r3
 801b4cc:	4b8a      	ldr	r3, [pc, #552]	@ (801b6f8 <mg_md5_transform+0x5a0>)
 801b4ce:	4413      	add	r3, r2
 801b4d0:	617b      	str	r3, [r7, #20]
 801b4d2:	697b      	ldr	r3, [r7, #20]
 801b4d4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b4d8:	617b      	str	r3, [r7, #20]
 801b4da:	697a      	ldr	r2, [r7, #20]
 801b4dc:	693b      	ldr	r3, [r7, #16]
 801b4de:	4413      	add	r3, r2
 801b4e0:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 801b4e2:	697a      	ldr	r2, [r7, #20]
 801b4e4:	693b      	ldr	r3, [r7, #16]
 801b4e6:	405a      	eors	r2, r3
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	401a      	ands	r2, r3
 801b4ec:	693b      	ldr	r3, [r7, #16]
 801b4ee:	405a      	eors	r2, r3
 801b4f0:	683b      	ldr	r3, [r7, #0]
 801b4f2:	3318      	adds	r3, #24
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	441a      	add	r2, r3
 801b4f8:	68bb      	ldr	r3, [r7, #8]
 801b4fa:	441a      	add	r2, r3
 801b4fc:	4b7f      	ldr	r3, [pc, #508]	@ (801b6fc <mg_md5_transform+0x5a4>)
 801b4fe:	4413      	add	r3, r2
 801b500:	60bb      	str	r3, [r7, #8]
 801b502:	68bb      	ldr	r3, [r7, #8]
 801b504:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b508:	60bb      	str	r3, [r7, #8]
 801b50a:	68ba      	ldr	r2, [r7, #8]
 801b50c:	697b      	ldr	r3, [r7, #20]
 801b50e:	4413      	add	r3, r2
 801b510:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 801b512:	68ba      	ldr	r2, [r7, #8]
 801b514:	697b      	ldr	r3, [r7, #20]
 801b516:	405a      	eors	r2, r3
 801b518:	693b      	ldr	r3, [r7, #16]
 801b51a:	401a      	ands	r2, r3
 801b51c:	697b      	ldr	r3, [r7, #20]
 801b51e:	405a      	eors	r2, r3
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	332c      	adds	r3, #44	@ 0x2c
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	441a      	add	r2, r3
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	441a      	add	r2, r3
 801b52c:	4b74      	ldr	r3, [pc, #464]	@ (801b700 <mg_md5_transform+0x5a8>)
 801b52e:	4413      	add	r3, r2
 801b530:	60fb      	str	r3, [r7, #12]
 801b532:	68fb      	ldr	r3, [r7, #12]
 801b534:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b538:	60fb      	str	r3, [r7, #12]
 801b53a:	68fa      	ldr	r2, [r7, #12]
 801b53c:	68bb      	ldr	r3, [r7, #8]
 801b53e:	4413      	add	r3, r2
 801b540:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 801b542:	68fa      	ldr	r2, [r7, #12]
 801b544:	68bb      	ldr	r3, [r7, #8]
 801b546:	405a      	eors	r2, r3
 801b548:	697b      	ldr	r3, [r7, #20]
 801b54a:	401a      	ands	r2, r3
 801b54c:	68bb      	ldr	r3, [r7, #8]
 801b54e:	405a      	eors	r2, r3
 801b550:	683b      	ldr	r3, [r7, #0]
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	441a      	add	r2, r3
 801b556:	693b      	ldr	r3, [r7, #16]
 801b558:	441a      	add	r2, r3
 801b55a:	4b6a      	ldr	r3, [pc, #424]	@ (801b704 <mg_md5_transform+0x5ac>)
 801b55c:	4413      	add	r3, r2
 801b55e:	613b      	str	r3, [r7, #16]
 801b560:	693b      	ldr	r3, [r7, #16]
 801b562:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b566:	613b      	str	r3, [r7, #16]
 801b568:	693a      	ldr	r2, [r7, #16]
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	4413      	add	r3, r2
 801b56e:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 801b570:	693a      	ldr	r2, [r7, #16]
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	405a      	eors	r2, r3
 801b576:	68bb      	ldr	r3, [r7, #8]
 801b578:	401a      	ands	r2, r3
 801b57a:	68fb      	ldr	r3, [r7, #12]
 801b57c:	405a      	eors	r2, r3
 801b57e:	683b      	ldr	r3, [r7, #0]
 801b580:	3314      	adds	r3, #20
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	441a      	add	r2, r3
 801b586:	697b      	ldr	r3, [r7, #20]
 801b588:	441a      	add	r2, r3
 801b58a:	4b5f      	ldr	r3, [pc, #380]	@ (801b708 <mg_md5_transform+0x5b0>)
 801b58c:	4413      	add	r3, r2
 801b58e:	617b      	str	r3, [r7, #20]
 801b590:	697b      	ldr	r3, [r7, #20]
 801b592:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b596:	617b      	str	r3, [r7, #20]
 801b598:	697a      	ldr	r2, [r7, #20]
 801b59a:	693b      	ldr	r3, [r7, #16]
 801b59c:	4413      	add	r3, r2
 801b59e:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 801b5a0:	697a      	ldr	r2, [r7, #20]
 801b5a2:	693b      	ldr	r3, [r7, #16]
 801b5a4:	405a      	eors	r2, r3
 801b5a6:	68fb      	ldr	r3, [r7, #12]
 801b5a8:	401a      	ands	r2, r3
 801b5aa:	693b      	ldr	r3, [r7, #16]
 801b5ac:	405a      	eors	r2, r3
 801b5ae:	683b      	ldr	r3, [r7, #0]
 801b5b0:	3328      	adds	r3, #40	@ 0x28
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	441a      	add	r2, r3
 801b5b6:	68bb      	ldr	r3, [r7, #8]
 801b5b8:	441a      	add	r2, r3
 801b5ba:	4b54      	ldr	r3, [pc, #336]	@ (801b70c <mg_md5_transform+0x5b4>)
 801b5bc:	4413      	add	r3, r2
 801b5be:	60bb      	str	r3, [r7, #8]
 801b5c0:	68bb      	ldr	r3, [r7, #8]
 801b5c2:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b5c6:	60bb      	str	r3, [r7, #8]
 801b5c8:	68ba      	ldr	r2, [r7, #8]
 801b5ca:	697b      	ldr	r3, [r7, #20]
 801b5cc:	4413      	add	r3, r2
 801b5ce:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 801b5d0:	68ba      	ldr	r2, [r7, #8]
 801b5d2:	697b      	ldr	r3, [r7, #20]
 801b5d4:	405a      	eors	r2, r3
 801b5d6:	693b      	ldr	r3, [r7, #16]
 801b5d8:	401a      	ands	r2, r3
 801b5da:	697b      	ldr	r3, [r7, #20]
 801b5dc:	405a      	eors	r2, r3
 801b5de:	683b      	ldr	r3, [r7, #0]
 801b5e0:	333c      	adds	r3, #60	@ 0x3c
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	441a      	add	r2, r3
 801b5e6:	68fb      	ldr	r3, [r7, #12]
 801b5e8:	441a      	add	r2, r3
 801b5ea:	4b49      	ldr	r3, [pc, #292]	@ (801b710 <mg_md5_transform+0x5b8>)
 801b5ec:	4413      	add	r3, r2
 801b5ee:	60fb      	str	r3, [r7, #12]
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b5f6:	60fb      	str	r3, [r7, #12]
 801b5f8:	68fa      	ldr	r2, [r7, #12]
 801b5fa:	68bb      	ldr	r3, [r7, #8]
 801b5fc:	4413      	add	r3, r2
 801b5fe:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 801b600:	68fa      	ldr	r2, [r7, #12]
 801b602:	68bb      	ldr	r3, [r7, #8]
 801b604:	405a      	eors	r2, r3
 801b606:	697b      	ldr	r3, [r7, #20]
 801b608:	401a      	ands	r2, r3
 801b60a:	68bb      	ldr	r3, [r7, #8]
 801b60c:	405a      	eors	r2, r3
 801b60e:	683b      	ldr	r3, [r7, #0]
 801b610:	3310      	adds	r3, #16
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	441a      	add	r2, r3
 801b616:	693b      	ldr	r3, [r7, #16]
 801b618:	441a      	add	r2, r3
 801b61a:	4b3e      	ldr	r3, [pc, #248]	@ (801b714 <mg_md5_transform+0x5bc>)
 801b61c:	4413      	add	r3, r2
 801b61e:	613b      	str	r3, [r7, #16]
 801b620:	693b      	ldr	r3, [r7, #16]
 801b622:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b626:	613b      	str	r3, [r7, #16]
 801b628:	693a      	ldr	r2, [r7, #16]
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	4413      	add	r3, r2
 801b62e:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 801b630:	693a      	ldr	r2, [r7, #16]
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	405a      	eors	r2, r3
 801b636:	68bb      	ldr	r3, [r7, #8]
 801b638:	401a      	ands	r2, r3
 801b63a:	68fb      	ldr	r3, [r7, #12]
 801b63c:	405a      	eors	r2, r3
 801b63e:	683b      	ldr	r3, [r7, #0]
 801b640:	3324      	adds	r3, #36	@ 0x24
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	441a      	add	r2, r3
 801b646:	697b      	ldr	r3, [r7, #20]
 801b648:	441a      	add	r2, r3
 801b64a:	4b33      	ldr	r3, [pc, #204]	@ (801b718 <mg_md5_transform+0x5c0>)
 801b64c:	4413      	add	r3, r2
 801b64e:	617b      	str	r3, [r7, #20]
 801b650:	697b      	ldr	r3, [r7, #20]
 801b652:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b656:	617b      	str	r3, [r7, #20]
 801b658:	697a      	ldr	r2, [r7, #20]
 801b65a:	693b      	ldr	r3, [r7, #16]
 801b65c:	4413      	add	r3, r2
 801b65e:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 801b660:	697a      	ldr	r2, [r7, #20]
 801b662:	693b      	ldr	r3, [r7, #16]
 801b664:	405a      	eors	r2, r3
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	401a      	ands	r2, r3
 801b66a:	693b      	ldr	r3, [r7, #16]
 801b66c:	405a      	eors	r2, r3
 801b66e:	683b      	ldr	r3, [r7, #0]
 801b670:	3338      	adds	r3, #56	@ 0x38
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	441a      	add	r2, r3
 801b676:	68bb      	ldr	r3, [r7, #8]
 801b678:	441a      	add	r2, r3
 801b67a:	4b28      	ldr	r3, [pc, #160]	@ (801b71c <mg_md5_transform+0x5c4>)
 801b67c:	4413      	add	r3, r2
 801b67e:	60bb      	str	r3, [r7, #8]
 801b680:	68bb      	ldr	r3, [r7, #8]
 801b682:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b686:	60bb      	str	r3, [r7, #8]
 801b688:	68ba      	ldr	r2, [r7, #8]
 801b68a:	697b      	ldr	r3, [r7, #20]
 801b68c:	4413      	add	r3, r2
 801b68e:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 801b690:	68ba      	ldr	r2, [r7, #8]
 801b692:	697b      	ldr	r3, [r7, #20]
 801b694:	405a      	eors	r2, r3
 801b696:	693b      	ldr	r3, [r7, #16]
 801b698:	401a      	ands	r2, r3
 801b69a:	697b      	ldr	r3, [r7, #20]
 801b69c:	405a      	eors	r2, r3
 801b69e:	683b      	ldr	r3, [r7, #0]
 801b6a0:	330c      	adds	r3, #12
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	441a      	add	r2, r3
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	441a      	add	r2, r3
 801b6aa:	4b1d      	ldr	r3, [pc, #116]	@ (801b720 <mg_md5_transform+0x5c8>)
 801b6ac:	4413      	add	r3, r2
 801b6ae:	60fb      	str	r3, [r7, #12]
 801b6b0:	68fb      	ldr	r3, [r7, #12]
 801b6b2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b6b6:	60fb      	str	r3, [r7, #12]
 801b6b8:	68fa      	ldr	r2, [r7, #12]
 801b6ba:	68bb      	ldr	r3, [r7, #8]
 801b6bc:	4413      	add	r3, r2
 801b6be:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 801b6c0:	68fa      	ldr	r2, [r7, #12]
 801b6c2:	68bb      	ldr	r3, [r7, #8]
 801b6c4:	405a      	eors	r2, r3
 801b6c6:	697b      	ldr	r3, [r7, #20]
 801b6c8:	401a      	ands	r2, r3
 801b6ca:	68bb      	ldr	r3, [r7, #8]
 801b6cc:	405a      	eors	r2, r3
 801b6ce:	683b      	ldr	r3, [r7, #0]
 801b6d0:	3320      	adds	r3, #32
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	441a      	add	r2, r3
 801b6d6:	693b      	ldr	r3, [r7, #16]
 801b6d8:	441a      	add	r2, r3
 801b6da:	4b12      	ldr	r3, [pc, #72]	@ (801b724 <mg_md5_transform+0x5cc>)
 801b6dc:	4413      	add	r3, r2
 801b6de:	613b      	str	r3, [r7, #16]
 801b6e0:	693b      	ldr	r3, [r7, #16]
 801b6e2:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b6e6:	613b      	str	r3, [r7, #16]
 801b6e8:	693a      	ldr	r2, [r7, #16]
 801b6ea:	68fb      	ldr	r3, [r7, #12]
 801b6ec:	e01c      	b.n	801b728 <mg_md5_transform+0x5d0>
 801b6ee:	bf00      	nop
 801b6f0:	a679438e 	.word	0xa679438e
 801b6f4:	49b40821 	.word	0x49b40821
 801b6f8:	f61e2562 	.word	0xf61e2562
 801b6fc:	c040b340 	.word	0xc040b340
 801b700:	265e5a51 	.word	0x265e5a51
 801b704:	e9b6c7aa 	.word	0xe9b6c7aa
 801b708:	d62f105d 	.word	0xd62f105d
 801b70c:	02441453 	.word	0x02441453
 801b710:	d8a1e681 	.word	0xd8a1e681
 801b714:	e7d3fbc8 	.word	0xe7d3fbc8
 801b718:	21e1cde6 	.word	0x21e1cde6
 801b71c:	c33707d6 	.word	0xc33707d6
 801b720:	f4d50d87 	.word	0xf4d50d87
 801b724:	455a14ed 	.word	0x455a14ed
 801b728:	4413      	add	r3, r2
 801b72a:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 801b72c:	693a      	ldr	r2, [r7, #16]
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	405a      	eors	r2, r3
 801b732:	68bb      	ldr	r3, [r7, #8]
 801b734:	401a      	ands	r2, r3
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	405a      	eors	r2, r3
 801b73a:	683b      	ldr	r3, [r7, #0]
 801b73c:	3334      	adds	r3, #52	@ 0x34
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	441a      	add	r2, r3
 801b742:	697b      	ldr	r3, [r7, #20]
 801b744:	441a      	add	r2, r3
 801b746:	4ba1      	ldr	r3, [pc, #644]	@ (801b9cc <mg_md5_transform+0x874>)
 801b748:	4413      	add	r3, r2
 801b74a:	617b      	str	r3, [r7, #20]
 801b74c:	697b      	ldr	r3, [r7, #20]
 801b74e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b752:	617b      	str	r3, [r7, #20]
 801b754:	697a      	ldr	r2, [r7, #20]
 801b756:	693b      	ldr	r3, [r7, #16]
 801b758:	4413      	add	r3, r2
 801b75a:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 801b75c:	697a      	ldr	r2, [r7, #20]
 801b75e:	693b      	ldr	r3, [r7, #16]
 801b760:	405a      	eors	r2, r3
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	401a      	ands	r2, r3
 801b766:	693b      	ldr	r3, [r7, #16]
 801b768:	405a      	eors	r2, r3
 801b76a:	683b      	ldr	r3, [r7, #0]
 801b76c:	3308      	adds	r3, #8
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	441a      	add	r2, r3
 801b772:	68bb      	ldr	r3, [r7, #8]
 801b774:	441a      	add	r2, r3
 801b776:	4b96      	ldr	r3, [pc, #600]	@ (801b9d0 <mg_md5_transform+0x878>)
 801b778:	4413      	add	r3, r2
 801b77a:	60bb      	str	r3, [r7, #8]
 801b77c:	68bb      	ldr	r3, [r7, #8]
 801b77e:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b782:	60bb      	str	r3, [r7, #8]
 801b784:	68ba      	ldr	r2, [r7, #8]
 801b786:	697b      	ldr	r3, [r7, #20]
 801b788:	4413      	add	r3, r2
 801b78a:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 801b78c:	68ba      	ldr	r2, [r7, #8]
 801b78e:	697b      	ldr	r3, [r7, #20]
 801b790:	405a      	eors	r2, r3
 801b792:	693b      	ldr	r3, [r7, #16]
 801b794:	401a      	ands	r2, r3
 801b796:	697b      	ldr	r3, [r7, #20]
 801b798:	405a      	eors	r2, r3
 801b79a:	683b      	ldr	r3, [r7, #0]
 801b79c:	331c      	adds	r3, #28
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	441a      	add	r2, r3
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	441a      	add	r2, r3
 801b7a6:	4b8b      	ldr	r3, [pc, #556]	@ (801b9d4 <mg_md5_transform+0x87c>)
 801b7a8:	4413      	add	r3, r2
 801b7aa:	60fb      	str	r3, [r7, #12]
 801b7ac:	68fb      	ldr	r3, [r7, #12]
 801b7ae:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b7b2:	60fb      	str	r3, [r7, #12]
 801b7b4:	68fa      	ldr	r2, [r7, #12]
 801b7b6:	68bb      	ldr	r3, [r7, #8]
 801b7b8:	4413      	add	r3, r2
 801b7ba:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 801b7bc:	68fa      	ldr	r2, [r7, #12]
 801b7be:	68bb      	ldr	r3, [r7, #8]
 801b7c0:	405a      	eors	r2, r3
 801b7c2:	697b      	ldr	r3, [r7, #20]
 801b7c4:	401a      	ands	r2, r3
 801b7c6:	68bb      	ldr	r3, [r7, #8]
 801b7c8:	405a      	eors	r2, r3
 801b7ca:	683b      	ldr	r3, [r7, #0]
 801b7cc:	3330      	adds	r3, #48	@ 0x30
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	441a      	add	r2, r3
 801b7d2:	693b      	ldr	r3, [r7, #16]
 801b7d4:	441a      	add	r2, r3
 801b7d6:	4b80      	ldr	r3, [pc, #512]	@ (801b9d8 <mg_md5_transform+0x880>)
 801b7d8:	4413      	add	r3, r2
 801b7da:	613b      	str	r3, [r7, #16]
 801b7dc:	693b      	ldr	r3, [r7, #16]
 801b7de:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b7e2:	613b      	str	r3, [r7, #16]
 801b7e4:	693a      	ldr	r2, [r7, #16]
 801b7e6:	68fb      	ldr	r3, [r7, #12]
 801b7e8:	4413      	add	r3, r2
 801b7ea:	613b      	str	r3, [r7, #16]

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 801b7ec:	693a      	ldr	r2, [r7, #16]
 801b7ee:	68fb      	ldr	r3, [r7, #12]
 801b7f0:	405a      	eors	r2, r3
 801b7f2:	68bb      	ldr	r3, [r7, #8]
 801b7f4:	405a      	eors	r2, r3
 801b7f6:	683b      	ldr	r3, [r7, #0]
 801b7f8:	3314      	adds	r3, #20
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	441a      	add	r2, r3
 801b7fe:	697b      	ldr	r3, [r7, #20]
 801b800:	4413      	add	r3, r2
 801b802:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 801b806:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 801b80a:	617b      	str	r3, [r7, #20]
 801b80c:	697b      	ldr	r3, [r7, #20]
 801b80e:	ea4f 7333 	mov.w	r3, r3, ror #28
 801b812:	617b      	str	r3, [r7, #20]
 801b814:	697a      	ldr	r2, [r7, #20]
 801b816:	693b      	ldr	r3, [r7, #16]
 801b818:	4413      	add	r3, r2
 801b81a:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 801b81c:	697a      	ldr	r2, [r7, #20]
 801b81e:	693b      	ldr	r3, [r7, #16]
 801b820:	405a      	eors	r2, r3
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	405a      	eors	r2, r3
 801b826:	683b      	ldr	r3, [r7, #0]
 801b828:	3320      	adds	r3, #32
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	441a      	add	r2, r3
 801b82e:	68bb      	ldr	r3, [r7, #8]
 801b830:	441a      	add	r2, r3
 801b832:	4b6a      	ldr	r3, [pc, #424]	@ (801b9dc <mg_md5_transform+0x884>)
 801b834:	4413      	add	r3, r2
 801b836:	60bb      	str	r3, [r7, #8]
 801b838:	68bb      	ldr	r3, [r7, #8]
 801b83a:	ea4f 5373 	mov.w	r3, r3, ror #21
 801b83e:	60bb      	str	r3, [r7, #8]
 801b840:	68ba      	ldr	r2, [r7, #8]
 801b842:	697b      	ldr	r3, [r7, #20]
 801b844:	4413      	add	r3, r2
 801b846:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 801b848:	68ba      	ldr	r2, [r7, #8]
 801b84a:	697b      	ldr	r3, [r7, #20]
 801b84c:	405a      	eors	r2, r3
 801b84e:	693b      	ldr	r3, [r7, #16]
 801b850:	405a      	eors	r2, r3
 801b852:	683b      	ldr	r3, [r7, #0]
 801b854:	332c      	adds	r3, #44	@ 0x2c
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	441a      	add	r2, r3
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	441a      	add	r2, r3
 801b85e:	4b60      	ldr	r3, [pc, #384]	@ (801b9e0 <mg_md5_transform+0x888>)
 801b860:	4413      	add	r3, r2
 801b862:	60fb      	str	r3, [r7, #12]
 801b864:	68fb      	ldr	r3, [r7, #12]
 801b866:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b86a:	60fb      	str	r3, [r7, #12]
 801b86c:	68fa      	ldr	r2, [r7, #12]
 801b86e:	68bb      	ldr	r3, [r7, #8]
 801b870:	4413      	add	r3, r2
 801b872:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 801b874:	68fa      	ldr	r2, [r7, #12]
 801b876:	68bb      	ldr	r3, [r7, #8]
 801b878:	405a      	eors	r2, r3
 801b87a:	697b      	ldr	r3, [r7, #20]
 801b87c:	405a      	eors	r2, r3
 801b87e:	683b      	ldr	r3, [r7, #0]
 801b880:	3338      	adds	r3, #56	@ 0x38
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	441a      	add	r2, r3
 801b886:	693b      	ldr	r3, [r7, #16]
 801b888:	441a      	add	r2, r3
 801b88a:	4b56      	ldr	r3, [pc, #344]	@ (801b9e4 <mg_md5_transform+0x88c>)
 801b88c:	4413      	add	r3, r2
 801b88e:	613b      	str	r3, [r7, #16]
 801b890:	693b      	ldr	r3, [r7, #16]
 801b892:	ea4f 2373 	mov.w	r3, r3, ror #9
 801b896:	613b      	str	r3, [r7, #16]
 801b898:	693a      	ldr	r2, [r7, #16]
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	4413      	add	r3, r2
 801b89e:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 801b8a0:	693a      	ldr	r2, [r7, #16]
 801b8a2:	68fb      	ldr	r3, [r7, #12]
 801b8a4:	405a      	eors	r2, r3
 801b8a6:	68bb      	ldr	r3, [r7, #8]
 801b8a8:	405a      	eors	r2, r3
 801b8aa:	683b      	ldr	r3, [r7, #0]
 801b8ac:	3304      	adds	r3, #4
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	441a      	add	r2, r3
 801b8b2:	697b      	ldr	r3, [r7, #20]
 801b8b4:	441a      	add	r2, r3
 801b8b6:	4b4c      	ldr	r3, [pc, #304]	@ (801b9e8 <mg_md5_transform+0x890>)
 801b8b8:	4413      	add	r3, r2
 801b8ba:	617b      	str	r3, [r7, #20]
 801b8bc:	697b      	ldr	r3, [r7, #20]
 801b8be:	ea4f 7333 	mov.w	r3, r3, ror #28
 801b8c2:	617b      	str	r3, [r7, #20]
 801b8c4:	697a      	ldr	r2, [r7, #20]
 801b8c6:	693b      	ldr	r3, [r7, #16]
 801b8c8:	4413      	add	r3, r2
 801b8ca:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 801b8cc:	697a      	ldr	r2, [r7, #20]
 801b8ce:	693b      	ldr	r3, [r7, #16]
 801b8d0:	405a      	eors	r2, r3
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	405a      	eors	r2, r3
 801b8d6:	683b      	ldr	r3, [r7, #0]
 801b8d8:	3310      	adds	r3, #16
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	441a      	add	r2, r3
 801b8de:	68bb      	ldr	r3, [r7, #8]
 801b8e0:	441a      	add	r2, r3
 801b8e2:	4b42      	ldr	r3, [pc, #264]	@ (801b9ec <mg_md5_transform+0x894>)
 801b8e4:	4413      	add	r3, r2
 801b8e6:	60bb      	str	r3, [r7, #8]
 801b8e8:	68bb      	ldr	r3, [r7, #8]
 801b8ea:	ea4f 5373 	mov.w	r3, r3, ror #21
 801b8ee:	60bb      	str	r3, [r7, #8]
 801b8f0:	68ba      	ldr	r2, [r7, #8]
 801b8f2:	697b      	ldr	r3, [r7, #20]
 801b8f4:	4413      	add	r3, r2
 801b8f6:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 801b8f8:	68ba      	ldr	r2, [r7, #8]
 801b8fa:	697b      	ldr	r3, [r7, #20]
 801b8fc:	405a      	eors	r2, r3
 801b8fe:	693b      	ldr	r3, [r7, #16]
 801b900:	405a      	eors	r2, r3
 801b902:	683b      	ldr	r3, [r7, #0]
 801b904:	331c      	adds	r3, #28
 801b906:	681b      	ldr	r3, [r3, #0]
 801b908:	441a      	add	r2, r3
 801b90a:	68fb      	ldr	r3, [r7, #12]
 801b90c:	441a      	add	r2, r3
 801b90e:	4b38      	ldr	r3, [pc, #224]	@ (801b9f0 <mg_md5_transform+0x898>)
 801b910:	4413      	add	r3, r2
 801b912:	60fb      	str	r3, [r7, #12]
 801b914:	68fb      	ldr	r3, [r7, #12]
 801b916:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b91a:	60fb      	str	r3, [r7, #12]
 801b91c:	68fa      	ldr	r2, [r7, #12]
 801b91e:	68bb      	ldr	r3, [r7, #8]
 801b920:	4413      	add	r3, r2
 801b922:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 801b924:	68fa      	ldr	r2, [r7, #12]
 801b926:	68bb      	ldr	r3, [r7, #8]
 801b928:	405a      	eors	r2, r3
 801b92a:	697b      	ldr	r3, [r7, #20]
 801b92c:	405a      	eors	r2, r3
 801b92e:	683b      	ldr	r3, [r7, #0]
 801b930:	3328      	adds	r3, #40	@ 0x28
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	441a      	add	r2, r3
 801b936:	693b      	ldr	r3, [r7, #16]
 801b938:	441a      	add	r2, r3
 801b93a:	4b2e      	ldr	r3, [pc, #184]	@ (801b9f4 <mg_md5_transform+0x89c>)
 801b93c:	4413      	add	r3, r2
 801b93e:	613b      	str	r3, [r7, #16]
 801b940:	693b      	ldr	r3, [r7, #16]
 801b942:	ea4f 2373 	mov.w	r3, r3, ror #9
 801b946:	613b      	str	r3, [r7, #16]
 801b948:	693a      	ldr	r2, [r7, #16]
 801b94a:	68fb      	ldr	r3, [r7, #12]
 801b94c:	4413      	add	r3, r2
 801b94e:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 801b950:	693a      	ldr	r2, [r7, #16]
 801b952:	68fb      	ldr	r3, [r7, #12]
 801b954:	405a      	eors	r2, r3
 801b956:	68bb      	ldr	r3, [r7, #8]
 801b958:	405a      	eors	r2, r3
 801b95a:	683b      	ldr	r3, [r7, #0]
 801b95c:	3334      	adds	r3, #52	@ 0x34
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	441a      	add	r2, r3
 801b962:	697b      	ldr	r3, [r7, #20]
 801b964:	441a      	add	r2, r3
 801b966:	4b24      	ldr	r3, [pc, #144]	@ (801b9f8 <mg_md5_transform+0x8a0>)
 801b968:	4413      	add	r3, r2
 801b96a:	617b      	str	r3, [r7, #20]
 801b96c:	697b      	ldr	r3, [r7, #20]
 801b96e:	ea4f 7333 	mov.w	r3, r3, ror #28
 801b972:	617b      	str	r3, [r7, #20]
 801b974:	697a      	ldr	r2, [r7, #20]
 801b976:	693b      	ldr	r3, [r7, #16]
 801b978:	4413      	add	r3, r2
 801b97a:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 801b97c:	697a      	ldr	r2, [r7, #20]
 801b97e:	693b      	ldr	r3, [r7, #16]
 801b980:	405a      	eors	r2, r3
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	405a      	eors	r2, r3
 801b986:	683b      	ldr	r3, [r7, #0]
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	441a      	add	r2, r3
 801b98c:	68bb      	ldr	r3, [r7, #8]
 801b98e:	441a      	add	r2, r3
 801b990:	4b1a      	ldr	r3, [pc, #104]	@ (801b9fc <mg_md5_transform+0x8a4>)
 801b992:	4413      	add	r3, r2
 801b994:	60bb      	str	r3, [r7, #8]
 801b996:	68bb      	ldr	r3, [r7, #8]
 801b998:	ea4f 5373 	mov.w	r3, r3, ror #21
 801b99c:	60bb      	str	r3, [r7, #8]
 801b99e:	68ba      	ldr	r2, [r7, #8]
 801b9a0:	697b      	ldr	r3, [r7, #20]
 801b9a2:	4413      	add	r3, r2
 801b9a4:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 801b9a6:	68ba      	ldr	r2, [r7, #8]
 801b9a8:	697b      	ldr	r3, [r7, #20]
 801b9aa:	405a      	eors	r2, r3
 801b9ac:	693b      	ldr	r3, [r7, #16]
 801b9ae:	405a      	eors	r2, r3
 801b9b0:	683b      	ldr	r3, [r7, #0]
 801b9b2:	330c      	adds	r3, #12
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	441a      	add	r2, r3
 801b9b8:	68fb      	ldr	r3, [r7, #12]
 801b9ba:	441a      	add	r2, r3
 801b9bc:	4b10      	ldr	r3, [pc, #64]	@ (801ba00 <mg_md5_transform+0x8a8>)
 801b9be:	4413      	add	r3, r2
 801b9c0:	60fb      	str	r3, [r7, #12]
 801b9c2:	68fb      	ldr	r3, [r7, #12]
 801b9c4:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b9c8:	e01c      	b.n	801ba04 <mg_md5_transform+0x8ac>
 801b9ca:	bf00      	nop
 801b9cc:	a9e3e905 	.word	0xa9e3e905
 801b9d0:	fcefa3f8 	.word	0xfcefa3f8
 801b9d4:	676f02d9 	.word	0x676f02d9
 801b9d8:	8d2a4c8a 	.word	0x8d2a4c8a
 801b9dc:	8771f681 	.word	0x8771f681
 801b9e0:	6d9d6122 	.word	0x6d9d6122
 801b9e4:	fde5380c 	.word	0xfde5380c
 801b9e8:	a4beea44 	.word	0xa4beea44
 801b9ec:	4bdecfa9 	.word	0x4bdecfa9
 801b9f0:	f6bb4b60 	.word	0xf6bb4b60
 801b9f4:	bebfbc70 	.word	0xbebfbc70
 801b9f8:	289b7ec6 	.word	0x289b7ec6
 801b9fc:	eaa127fa 	.word	0xeaa127fa
 801ba00:	d4ef3085 	.word	0xd4ef3085
 801ba04:	60fb      	str	r3, [r7, #12]
 801ba06:	68fa      	ldr	r2, [r7, #12]
 801ba08:	68bb      	ldr	r3, [r7, #8]
 801ba0a:	4413      	add	r3, r2
 801ba0c:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 801ba0e:	68fa      	ldr	r2, [r7, #12]
 801ba10:	68bb      	ldr	r3, [r7, #8]
 801ba12:	405a      	eors	r2, r3
 801ba14:	697b      	ldr	r3, [r7, #20]
 801ba16:	405a      	eors	r2, r3
 801ba18:	683b      	ldr	r3, [r7, #0]
 801ba1a:	3318      	adds	r3, #24
 801ba1c:	681b      	ldr	r3, [r3, #0]
 801ba1e:	441a      	add	r2, r3
 801ba20:	693b      	ldr	r3, [r7, #16]
 801ba22:	441a      	add	r2, r3
 801ba24:	4ba1      	ldr	r3, [pc, #644]	@ (801bcac <mg_md5_transform+0xb54>)
 801ba26:	4413      	add	r3, r2
 801ba28:	613b      	str	r3, [r7, #16]
 801ba2a:	693b      	ldr	r3, [r7, #16]
 801ba2c:	ea4f 2373 	mov.w	r3, r3, ror #9
 801ba30:	613b      	str	r3, [r7, #16]
 801ba32:	693a      	ldr	r2, [r7, #16]
 801ba34:	68fb      	ldr	r3, [r7, #12]
 801ba36:	4413      	add	r3, r2
 801ba38:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 801ba3a:	693a      	ldr	r2, [r7, #16]
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	405a      	eors	r2, r3
 801ba40:	68bb      	ldr	r3, [r7, #8]
 801ba42:	405a      	eors	r2, r3
 801ba44:	683b      	ldr	r3, [r7, #0]
 801ba46:	3324      	adds	r3, #36	@ 0x24
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	441a      	add	r2, r3
 801ba4c:	697b      	ldr	r3, [r7, #20]
 801ba4e:	441a      	add	r2, r3
 801ba50:	4b97      	ldr	r3, [pc, #604]	@ (801bcb0 <mg_md5_transform+0xb58>)
 801ba52:	4413      	add	r3, r2
 801ba54:	617b      	str	r3, [r7, #20]
 801ba56:	697b      	ldr	r3, [r7, #20]
 801ba58:	ea4f 7333 	mov.w	r3, r3, ror #28
 801ba5c:	617b      	str	r3, [r7, #20]
 801ba5e:	697a      	ldr	r2, [r7, #20]
 801ba60:	693b      	ldr	r3, [r7, #16]
 801ba62:	4413      	add	r3, r2
 801ba64:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 801ba66:	697a      	ldr	r2, [r7, #20]
 801ba68:	693b      	ldr	r3, [r7, #16]
 801ba6a:	405a      	eors	r2, r3
 801ba6c:	68fb      	ldr	r3, [r7, #12]
 801ba6e:	405a      	eors	r2, r3
 801ba70:	683b      	ldr	r3, [r7, #0]
 801ba72:	3330      	adds	r3, #48	@ 0x30
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	441a      	add	r2, r3
 801ba78:	68bb      	ldr	r3, [r7, #8]
 801ba7a:	441a      	add	r2, r3
 801ba7c:	4b8d      	ldr	r3, [pc, #564]	@ (801bcb4 <mg_md5_transform+0xb5c>)
 801ba7e:	4413      	add	r3, r2
 801ba80:	60bb      	str	r3, [r7, #8]
 801ba82:	68bb      	ldr	r3, [r7, #8]
 801ba84:	ea4f 5373 	mov.w	r3, r3, ror #21
 801ba88:	60bb      	str	r3, [r7, #8]
 801ba8a:	68ba      	ldr	r2, [r7, #8]
 801ba8c:	697b      	ldr	r3, [r7, #20]
 801ba8e:	4413      	add	r3, r2
 801ba90:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 801ba92:	68ba      	ldr	r2, [r7, #8]
 801ba94:	697b      	ldr	r3, [r7, #20]
 801ba96:	405a      	eors	r2, r3
 801ba98:	693b      	ldr	r3, [r7, #16]
 801ba9a:	405a      	eors	r2, r3
 801ba9c:	683b      	ldr	r3, [r7, #0]
 801ba9e:	333c      	adds	r3, #60	@ 0x3c
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	441a      	add	r2, r3
 801baa4:	68fb      	ldr	r3, [r7, #12]
 801baa6:	441a      	add	r2, r3
 801baa8:	4b83      	ldr	r3, [pc, #524]	@ (801bcb8 <mg_md5_transform+0xb60>)
 801baaa:	4413      	add	r3, r2
 801baac:	60fb      	str	r3, [r7, #12]
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	ea4f 4333 	mov.w	r3, r3, ror #16
 801bab4:	60fb      	str	r3, [r7, #12]
 801bab6:	68fa      	ldr	r2, [r7, #12]
 801bab8:	68bb      	ldr	r3, [r7, #8]
 801baba:	4413      	add	r3, r2
 801babc:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 801babe:	68fa      	ldr	r2, [r7, #12]
 801bac0:	68bb      	ldr	r3, [r7, #8]
 801bac2:	405a      	eors	r2, r3
 801bac4:	697b      	ldr	r3, [r7, #20]
 801bac6:	405a      	eors	r2, r3
 801bac8:	683b      	ldr	r3, [r7, #0]
 801baca:	3308      	adds	r3, #8
 801bacc:	681b      	ldr	r3, [r3, #0]
 801bace:	441a      	add	r2, r3
 801bad0:	693b      	ldr	r3, [r7, #16]
 801bad2:	441a      	add	r2, r3
 801bad4:	4b79      	ldr	r3, [pc, #484]	@ (801bcbc <mg_md5_transform+0xb64>)
 801bad6:	4413      	add	r3, r2
 801bad8:	613b      	str	r3, [r7, #16]
 801bada:	693b      	ldr	r3, [r7, #16]
 801badc:	ea4f 2373 	mov.w	r3, r3, ror #9
 801bae0:	613b      	str	r3, [r7, #16]
 801bae2:	693a      	ldr	r2, [r7, #16]
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	4413      	add	r3, r2
 801bae8:	613b      	str	r3, [r7, #16]

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 801baea:	68bb      	ldr	r3, [r7, #8]
 801baec:	43da      	mvns	r2, r3
 801baee:	693b      	ldr	r3, [r7, #16]
 801baf0:	431a      	orrs	r2, r3
 801baf2:	68fb      	ldr	r3, [r7, #12]
 801baf4:	405a      	eors	r2, r3
 801baf6:	683b      	ldr	r3, [r7, #0]
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	441a      	add	r2, r3
 801bafc:	697b      	ldr	r3, [r7, #20]
 801bafe:	441a      	add	r2, r3
 801bb00:	4b6f      	ldr	r3, [pc, #444]	@ (801bcc0 <mg_md5_transform+0xb68>)
 801bb02:	4413      	add	r3, r2
 801bb04:	617b      	str	r3, [r7, #20]
 801bb06:	697b      	ldr	r3, [r7, #20]
 801bb08:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801bb0c:	617b      	str	r3, [r7, #20]
 801bb0e:	697a      	ldr	r2, [r7, #20]
 801bb10:	693b      	ldr	r3, [r7, #16]
 801bb12:	4413      	add	r3, r2
 801bb14:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	43da      	mvns	r2, r3
 801bb1a:	697b      	ldr	r3, [r7, #20]
 801bb1c:	431a      	orrs	r2, r3
 801bb1e:	693b      	ldr	r3, [r7, #16]
 801bb20:	405a      	eors	r2, r3
 801bb22:	683b      	ldr	r3, [r7, #0]
 801bb24:	331c      	adds	r3, #28
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	441a      	add	r2, r3
 801bb2a:	68bb      	ldr	r3, [r7, #8]
 801bb2c:	441a      	add	r2, r3
 801bb2e:	4b65      	ldr	r3, [pc, #404]	@ (801bcc4 <mg_md5_transform+0xb6c>)
 801bb30:	4413      	add	r3, r2
 801bb32:	60bb      	str	r3, [r7, #8]
 801bb34:	68bb      	ldr	r3, [r7, #8]
 801bb36:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801bb3a:	60bb      	str	r3, [r7, #8]
 801bb3c:	68ba      	ldr	r2, [r7, #8]
 801bb3e:	697b      	ldr	r3, [r7, #20]
 801bb40:	4413      	add	r3, r2
 801bb42:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 801bb44:	693b      	ldr	r3, [r7, #16]
 801bb46:	43da      	mvns	r2, r3
 801bb48:	68bb      	ldr	r3, [r7, #8]
 801bb4a:	431a      	orrs	r2, r3
 801bb4c:	697b      	ldr	r3, [r7, #20]
 801bb4e:	405a      	eors	r2, r3
 801bb50:	683b      	ldr	r3, [r7, #0]
 801bb52:	3338      	adds	r3, #56	@ 0x38
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	441a      	add	r2, r3
 801bb58:	68fb      	ldr	r3, [r7, #12]
 801bb5a:	441a      	add	r2, r3
 801bb5c:	4b5a      	ldr	r3, [pc, #360]	@ (801bcc8 <mg_md5_transform+0xb70>)
 801bb5e:	4413      	add	r3, r2
 801bb60:	60fb      	str	r3, [r7, #12]
 801bb62:	68fb      	ldr	r3, [r7, #12]
 801bb64:	ea4f 4373 	mov.w	r3, r3, ror #17
 801bb68:	60fb      	str	r3, [r7, #12]
 801bb6a:	68fa      	ldr	r2, [r7, #12]
 801bb6c:	68bb      	ldr	r3, [r7, #8]
 801bb6e:	4413      	add	r3, r2
 801bb70:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 801bb72:	697b      	ldr	r3, [r7, #20]
 801bb74:	43da      	mvns	r2, r3
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	431a      	orrs	r2, r3
 801bb7a:	68bb      	ldr	r3, [r7, #8]
 801bb7c:	405a      	eors	r2, r3
 801bb7e:	683b      	ldr	r3, [r7, #0]
 801bb80:	3314      	adds	r3, #20
 801bb82:	681b      	ldr	r3, [r3, #0]
 801bb84:	441a      	add	r2, r3
 801bb86:	693b      	ldr	r3, [r7, #16]
 801bb88:	441a      	add	r2, r3
 801bb8a:	4b50      	ldr	r3, [pc, #320]	@ (801bccc <mg_md5_transform+0xb74>)
 801bb8c:	4413      	add	r3, r2
 801bb8e:	613b      	str	r3, [r7, #16]
 801bb90:	693b      	ldr	r3, [r7, #16]
 801bb92:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801bb96:	613b      	str	r3, [r7, #16]
 801bb98:	693a      	ldr	r2, [r7, #16]
 801bb9a:	68fb      	ldr	r3, [r7, #12]
 801bb9c:	4413      	add	r3, r2
 801bb9e:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 801bba0:	68bb      	ldr	r3, [r7, #8]
 801bba2:	43da      	mvns	r2, r3
 801bba4:	693b      	ldr	r3, [r7, #16]
 801bba6:	431a      	orrs	r2, r3
 801bba8:	68fb      	ldr	r3, [r7, #12]
 801bbaa:	405a      	eors	r2, r3
 801bbac:	683b      	ldr	r3, [r7, #0]
 801bbae:	3330      	adds	r3, #48	@ 0x30
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	441a      	add	r2, r3
 801bbb4:	697b      	ldr	r3, [r7, #20]
 801bbb6:	441a      	add	r2, r3
 801bbb8:	4b45      	ldr	r3, [pc, #276]	@ (801bcd0 <mg_md5_transform+0xb78>)
 801bbba:	4413      	add	r3, r2
 801bbbc:	617b      	str	r3, [r7, #20]
 801bbbe:	697b      	ldr	r3, [r7, #20]
 801bbc0:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801bbc4:	617b      	str	r3, [r7, #20]
 801bbc6:	697a      	ldr	r2, [r7, #20]
 801bbc8:	693b      	ldr	r3, [r7, #16]
 801bbca:	4413      	add	r3, r2
 801bbcc:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	43da      	mvns	r2, r3
 801bbd2:	697b      	ldr	r3, [r7, #20]
 801bbd4:	431a      	orrs	r2, r3
 801bbd6:	693b      	ldr	r3, [r7, #16]
 801bbd8:	405a      	eors	r2, r3
 801bbda:	683b      	ldr	r3, [r7, #0]
 801bbdc:	330c      	adds	r3, #12
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	441a      	add	r2, r3
 801bbe2:	68bb      	ldr	r3, [r7, #8]
 801bbe4:	441a      	add	r2, r3
 801bbe6:	4b3b      	ldr	r3, [pc, #236]	@ (801bcd4 <mg_md5_transform+0xb7c>)
 801bbe8:	4413      	add	r3, r2
 801bbea:	60bb      	str	r3, [r7, #8]
 801bbec:	68bb      	ldr	r3, [r7, #8]
 801bbee:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801bbf2:	60bb      	str	r3, [r7, #8]
 801bbf4:	68ba      	ldr	r2, [r7, #8]
 801bbf6:	697b      	ldr	r3, [r7, #20]
 801bbf8:	4413      	add	r3, r2
 801bbfa:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 801bbfc:	693b      	ldr	r3, [r7, #16]
 801bbfe:	43da      	mvns	r2, r3
 801bc00:	68bb      	ldr	r3, [r7, #8]
 801bc02:	431a      	orrs	r2, r3
 801bc04:	697b      	ldr	r3, [r7, #20]
 801bc06:	405a      	eors	r2, r3
 801bc08:	683b      	ldr	r3, [r7, #0]
 801bc0a:	3328      	adds	r3, #40	@ 0x28
 801bc0c:	681b      	ldr	r3, [r3, #0]
 801bc0e:	441a      	add	r2, r3
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	4413      	add	r3, r2
 801bc14:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801bc18:	f6a3 3383 	subw	r3, r3, #2947	@ 0xb83
 801bc1c:	60fb      	str	r3, [r7, #12]
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	ea4f 4373 	mov.w	r3, r3, ror #17
 801bc24:	60fb      	str	r3, [r7, #12]
 801bc26:	68fa      	ldr	r2, [r7, #12]
 801bc28:	68bb      	ldr	r3, [r7, #8]
 801bc2a:	4413      	add	r3, r2
 801bc2c:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 801bc2e:	697b      	ldr	r3, [r7, #20]
 801bc30:	43da      	mvns	r2, r3
 801bc32:	68fb      	ldr	r3, [r7, #12]
 801bc34:	431a      	orrs	r2, r3
 801bc36:	68bb      	ldr	r3, [r7, #8]
 801bc38:	405a      	eors	r2, r3
 801bc3a:	683b      	ldr	r3, [r7, #0]
 801bc3c:	3304      	adds	r3, #4
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	441a      	add	r2, r3
 801bc42:	693b      	ldr	r3, [r7, #16]
 801bc44:	441a      	add	r2, r3
 801bc46:	4b24      	ldr	r3, [pc, #144]	@ (801bcd8 <mg_md5_transform+0xb80>)
 801bc48:	4413      	add	r3, r2
 801bc4a:	613b      	str	r3, [r7, #16]
 801bc4c:	693b      	ldr	r3, [r7, #16]
 801bc4e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801bc52:	613b      	str	r3, [r7, #16]
 801bc54:	693a      	ldr	r2, [r7, #16]
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	4413      	add	r3, r2
 801bc5a:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 801bc5c:	68bb      	ldr	r3, [r7, #8]
 801bc5e:	43da      	mvns	r2, r3
 801bc60:	693b      	ldr	r3, [r7, #16]
 801bc62:	431a      	orrs	r2, r3
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	405a      	eors	r2, r3
 801bc68:	683b      	ldr	r3, [r7, #0]
 801bc6a:	3320      	adds	r3, #32
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	441a      	add	r2, r3
 801bc70:	697b      	ldr	r3, [r7, #20]
 801bc72:	441a      	add	r2, r3
 801bc74:	4b19      	ldr	r3, [pc, #100]	@ (801bcdc <mg_md5_transform+0xb84>)
 801bc76:	4413      	add	r3, r2
 801bc78:	617b      	str	r3, [r7, #20]
 801bc7a:	697b      	ldr	r3, [r7, #20]
 801bc7c:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801bc80:	617b      	str	r3, [r7, #20]
 801bc82:	697a      	ldr	r2, [r7, #20]
 801bc84:	693b      	ldr	r3, [r7, #16]
 801bc86:	4413      	add	r3, r2
 801bc88:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 801bc8a:	68fb      	ldr	r3, [r7, #12]
 801bc8c:	43da      	mvns	r2, r3
 801bc8e:	697b      	ldr	r3, [r7, #20]
 801bc90:	431a      	orrs	r2, r3
 801bc92:	693b      	ldr	r3, [r7, #16]
 801bc94:	405a      	eors	r2, r3
 801bc96:	683b      	ldr	r3, [r7, #0]
 801bc98:	333c      	adds	r3, #60	@ 0x3c
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	441a      	add	r2, r3
 801bc9e:	68bb      	ldr	r3, [r7, #8]
 801bca0:	441a      	add	r2, r3
 801bca2:	4b0f      	ldr	r3, [pc, #60]	@ (801bce0 <mg_md5_transform+0xb88>)
 801bca4:	4413      	add	r3, r2
 801bca6:	60bb      	str	r3, [r7, #8]
 801bca8:	68bb      	ldr	r3, [r7, #8]
 801bcaa:	e01b      	b.n	801bce4 <mg_md5_transform+0xb8c>
 801bcac:	04881d05 	.word	0x04881d05
 801bcb0:	d9d4d039 	.word	0xd9d4d039
 801bcb4:	e6db99e5 	.word	0xe6db99e5
 801bcb8:	1fa27cf8 	.word	0x1fa27cf8
 801bcbc:	c4ac5665 	.word	0xc4ac5665
 801bcc0:	f4292244 	.word	0xf4292244
 801bcc4:	432aff97 	.word	0x432aff97
 801bcc8:	ab9423a7 	.word	0xab9423a7
 801bccc:	fc93a039 	.word	0xfc93a039
 801bcd0:	655b59c3 	.word	0x655b59c3
 801bcd4:	8f0ccc92 	.word	0x8f0ccc92
 801bcd8:	85845dd1 	.word	0x85845dd1
 801bcdc:	6fa87e4f 	.word	0x6fa87e4f
 801bce0:	fe2ce6e0 	.word	0xfe2ce6e0
 801bce4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801bce8:	60bb      	str	r3, [r7, #8]
 801bcea:	68ba      	ldr	r2, [r7, #8]
 801bcec:	697b      	ldr	r3, [r7, #20]
 801bcee:	4413      	add	r3, r2
 801bcf0:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 801bcf2:	693b      	ldr	r3, [r7, #16]
 801bcf4:	43da      	mvns	r2, r3
 801bcf6:	68bb      	ldr	r3, [r7, #8]
 801bcf8:	431a      	orrs	r2, r3
 801bcfa:	697b      	ldr	r3, [r7, #20]
 801bcfc:	405a      	eors	r2, r3
 801bcfe:	683b      	ldr	r3, [r7, #0]
 801bd00:	3318      	adds	r3, #24
 801bd02:	681b      	ldr	r3, [r3, #0]
 801bd04:	441a      	add	r2, r3
 801bd06:	68fb      	ldr	r3, [r7, #12]
 801bd08:	441a      	add	r2, r3
 801bd0a:	4b51      	ldr	r3, [pc, #324]	@ (801be50 <mg_md5_transform+0xcf8>)
 801bd0c:	4413      	add	r3, r2
 801bd0e:	60fb      	str	r3, [r7, #12]
 801bd10:	68fb      	ldr	r3, [r7, #12]
 801bd12:	ea4f 4373 	mov.w	r3, r3, ror #17
 801bd16:	60fb      	str	r3, [r7, #12]
 801bd18:	68fa      	ldr	r2, [r7, #12]
 801bd1a:	68bb      	ldr	r3, [r7, #8]
 801bd1c:	4413      	add	r3, r2
 801bd1e:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 801bd20:	697b      	ldr	r3, [r7, #20]
 801bd22:	43da      	mvns	r2, r3
 801bd24:	68fb      	ldr	r3, [r7, #12]
 801bd26:	431a      	orrs	r2, r3
 801bd28:	68bb      	ldr	r3, [r7, #8]
 801bd2a:	405a      	eors	r2, r3
 801bd2c:	683b      	ldr	r3, [r7, #0]
 801bd2e:	3334      	adds	r3, #52	@ 0x34
 801bd30:	681b      	ldr	r3, [r3, #0]
 801bd32:	441a      	add	r2, r3
 801bd34:	693b      	ldr	r3, [r7, #16]
 801bd36:	441a      	add	r2, r3
 801bd38:	4b46      	ldr	r3, [pc, #280]	@ (801be54 <mg_md5_transform+0xcfc>)
 801bd3a:	4413      	add	r3, r2
 801bd3c:	613b      	str	r3, [r7, #16]
 801bd3e:	693b      	ldr	r3, [r7, #16]
 801bd40:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801bd44:	613b      	str	r3, [r7, #16]
 801bd46:	693a      	ldr	r2, [r7, #16]
 801bd48:	68fb      	ldr	r3, [r7, #12]
 801bd4a:	4413      	add	r3, r2
 801bd4c:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 801bd4e:	68bb      	ldr	r3, [r7, #8]
 801bd50:	43da      	mvns	r2, r3
 801bd52:	693b      	ldr	r3, [r7, #16]
 801bd54:	431a      	orrs	r2, r3
 801bd56:	68fb      	ldr	r3, [r7, #12]
 801bd58:	405a      	eors	r2, r3
 801bd5a:	683b      	ldr	r3, [r7, #0]
 801bd5c:	3310      	adds	r3, #16
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	441a      	add	r2, r3
 801bd62:	697b      	ldr	r3, [r7, #20]
 801bd64:	441a      	add	r2, r3
 801bd66:	4b3c      	ldr	r3, [pc, #240]	@ (801be58 <mg_md5_transform+0xd00>)
 801bd68:	4413      	add	r3, r2
 801bd6a:	617b      	str	r3, [r7, #20]
 801bd6c:	697b      	ldr	r3, [r7, #20]
 801bd6e:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801bd72:	617b      	str	r3, [r7, #20]
 801bd74:	697a      	ldr	r2, [r7, #20]
 801bd76:	693b      	ldr	r3, [r7, #16]
 801bd78:	4413      	add	r3, r2
 801bd7a:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 801bd7c:	68fb      	ldr	r3, [r7, #12]
 801bd7e:	43da      	mvns	r2, r3
 801bd80:	697b      	ldr	r3, [r7, #20]
 801bd82:	431a      	orrs	r2, r3
 801bd84:	693b      	ldr	r3, [r7, #16]
 801bd86:	405a      	eors	r2, r3
 801bd88:	683b      	ldr	r3, [r7, #0]
 801bd8a:	332c      	adds	r3, #44	@ 0x2c
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	441a      	add	r2, r3
 801bd90:	68bb      	ldr	r3, [r7, #8]
 801bd92:	441a      	add	r2, r3
 801bd94:	4b31      	ldr	r3, [pc, #196]	@ (801be5c <mg_md5_transform+0xd04>)
 801bd96:	4413      	add	r3, r2
 801bd98:	60bb      	str	r3, [r7, #8]
 801bd9a:	68bb      	ldr	r3, [r7, #8]
 801bd9c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801bda0:	60bb      	str	r3, [r7, #8]
 801bda2:	68ba      	ldr	r2, [r7, #8]
 801bda4:	697b      	ldr	r3, [r7, #20]
 801bda6:	4413      	add	r3, r2
 801bda8:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 801bdaa:	693b      	ldr	r3, [r7, #16]
 801bdac:	43da      	mvns	r2, r3
 801bdae:	68bb      	ldr	r3, [r7, #8]
 801bdb0:	431a      	orrs	r2, r3
 801bdb2:	697b      	ldr	r3, [r7, #20]
 801bdb4:	405a      	eors	r2, r3
 801bdb6:	683b      	ldr	r3, [r7, #0]
 801bdb8:	3308      	adds	r3, #8
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	441a      	add	r2, r3
 801bdbe:	68fb      	ldr	r3, [r7, #12]
 801bdc0:	441a      	add	r2, r3
 801bdc2:	4b27      	ldr	r3, [pc, #156]	@ (801be60 <mg_md5_transform+0xd08>)
 801bdc4:	4413      	add	r3, r2
 801bdc6:	60fb      	str	r3, [r7, #12]
 801bdc8:	68fb      	ldr	r3, [r7, #12]
 801bdca:	ea4f 4373 	mov.w	r3, r3, ror #17
 801bdce:	60fb      	str	r3, [r7, #12]
 801bdd0:	68fa      	ldr	r2, [r7, #12]
 801bdd2:	68bb      	ldr	r3, [r7, #8]
 801bdd4:	4413      	add	r3, r2
 801bdd6:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 801bdd8:	697b      	ldr	r3, [r7, #20]
 801bdda:	43da      	mvns	r2, r3
 801bddc:	68fb      	ldr	r3, [r7, #12]
 801bdde:	431a      	orrs	r2, r3
 801bde0:	68bb      	ldr	r3, [r7, #8]
 801bde2:	405a      	eors	r2, r3
 801bde4:	683b      	ldr	r3, [r7, #0]
 801bde6:	3324      	adds	r3, #36	@ 0x24
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	441a      	add	r2, r3
 801bdec:	693b      	ldr	r3, [r7, #16]
 801bdee:	441a      	add	r2, r3
 801bdf0:	4b1c      	ldr	r3, [pc, #112]	@ (801be64 <mg_md5_transform+0xd0c>)
 801bdf2:	4413      	add	r3, r2
 801bdf4:	613b      	str	r3, [r7, #16]
 801bdf6:	693b      	ldr	r3, [r7, #16]
 801bdf8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801bdfc:	613b      	str	r3, [r7, #16]
 801bdfe:	693a      	ldr	r2, [r7, #16]
 801be00:	68fb      	ldr	r3, [r7, #12]
 801be02:	4413      	add	r3, r2
 801be04:	613b      	str	r3, [r7, #16]

  buf[0] += a;
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	681a      	ldr	r2, [r3, #0]
 801be0a:	697b      	ldr	r3, [r7, #20]
 801be0c:	441a      	add	r2, r3
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	601a      	str	r2, [r3, #0]
  buf[1] += b;
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	3304      	adds	r3, #4
 801be16:	6819      	ldr	r1, [r3, #0]
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	3304      	adds	r3, #4
 801be1c:	693a      	ldr	r2, [r7, #16]
 801be1e:	440a      	add	r2, r1
 801be20:	601a      	str	r2, [r3, #0]
  buf[2] += c;
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	3308      	adds	r3, #8
 801be26:	6819      	ldr	r1, [r3, #0]
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	3308      	adds	r3, #8
 801be2c:	68fa      	ldr	r2, [r7, #12]
 801be2e:	440a      	add	r2, r1
 801be30:	601a      	str	r2, [r3, #0]
  buf[3] += d;
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	330c      	adds	r3, #12
 801be36:	6819      	ldr	r1, [r3, #0]
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	330c      	adds	r3, #12
 801be3c:	68ba      	ldr	r2, [r7, #8]
 801be3e:	440a      	add	r2, r1
 801be40:	601a      	str	r2, [r3, #0]
}
 801be42:	bf00      	nop
 801be44:	371c      	adds	r7, #28
 801be46:	46bd      	mov	sp, r7
 801be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be4c:	4770      	bx	lr
 801be4e:	bf00      	nop
 801be50:	a3014314 	.word	0xa3014314
 801be54:	4e0811a1 	.word	0x4e0811a1
 801be58:	f7537e82 	.word	0xf7537e82
 801be5c:	bd3af235 	.word	0xbd3af235
 801be60:	2ad7d2bb 	.word	0x2ad7d2bb
 801be64:	eb86d391 	.word	0xeb86d391

0801be68 <mg_md5_update>:

void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 801be68:	b580      	push	{r7, lr}
 801be6a:	b086      	sub	sp, #24
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	60f8      	str	r0, [r7, #12]
 801be70:	60b9      	str	r1, [r7, #8]
 801be72:	607a      	str	r2, [r7, #4]
  uint32_t t;

  t = ctx->bits[0];
 801be74:	68fb      	ldr	r3, [r7, #12]
 801be76:	691b      	ldr	r3, [r3, #16]
 801be78:	617b      	str	r3, [r7, #20]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	00da      	lsls	r2, r3, #3
 801be7e:	697b      	ldr	r3, [r7, #20]
 801be80:	441a      	add	r2, r3
 801be82:	68fb      	ldr	r3, [r7, #12]
 801be84:	611a      	str	r2, [r3, #16]
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	691b      	ldr	r3, [r3, #16]
 801be8a:	697a      	ldr	r2, [r7, #20]
 801be8c:	429a      	cmp	r2, r3
 801be8e:	d904      	bls.n	801be9a <mg_md5_update+0x32>
 801be90:	68fb      	ldr	r3, [r7, #12]
 801be92:	695b      	ldr	r3, [r3, #20]
 801be94:	1c5a      	adds	r2, r3, #1
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	615a      	str	r2, [r3, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	695a      	ldr	r2, [r3, #20]
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	0f5b      	lsrs	r3, r3, #29
 801bea2:	441a      	add	r2, r3
 801bea4:	68fb      	ldr	r3, [r7, #12]
 801bea6:	615a      	str	r2, [r3, #20]

  t = (t >> 3) & 0x3f;
 801bea8:	697b      	ldr	r3, [r7, #20]
 801beaa:	08db      	lsrs	r3, r3, #3
 801beac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801beb0:	617b      	str	r3, [r7, #20]

  if (t) {
 801beb2:	697b      	ldr	r3, [r7, #20]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d048      	beq.n	801bf4a <mg_md5_update+0xe2>
    unsigned char *p = (unsigned char *) ctx->in + t;
 801beb8:	68fb      	ldr	r3, [r7, #12]
 801beba:	f103 0218 	add.w	r2, r3, #24
 801bebe:	697b      	ldr	r3, [r7, #20]
 801bec0:	4413      	add	r3, r2
 801bec2:	613b      	str	r3, [r7, #16]

    t = 64 - t;
 801bec4:	697b      	ldr	r3, [r7, #20]
 801bec6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 801beca:	617b      	str	r3, [r7, #20]
    if (len < t) {
 801becc:	687a      	ldr	r2, [r7, #4]
 801bece:	697b      	ldr	r3, [r7, #20]
 801bed0:	429a      	cmp	r2, r3
 801bed2:	d205      	bcs.n	801bee0 <mg_md5_update+0x78>
      memcpy(p, buf, len);
 801bed4:	687a      	ldr	r2, [r7, #4]
 801bed6:	68b9      	ldr	r1, [r7, #8]
 801bed8:	6938      	ldr	r0, [r7, #16]
 801beda:	f00a fff5 	bl	8026ec8 <memcpy>
      return;
 801bede:	e03e      	b.n	801bf5e <mg_md5_update+0xf6>
    }
    memcpy(p, buf, t);
 801bee0:	697a      	ldr	r2, [r7, #20]
 801bee2:	68b9      	ldr	r1, [r7, #8]
 801bee4:	6938      	ldr	r0, [r7, #16]
 801bee6:	f00a ffef 	bl	8026ec8 <memcpy>
    mg_byte_reverse(ctx->in, 16);
 801beea:	68fb      	ldr	r3, [r7, #12]
 801beec:	3318      	adds	r3, #24
 801beee:	2110      	movs	r1, #16
 801bef0:	4618      	mov	r0, r3
 801bef2:	f7ff f8dd 	bl	801b0b0 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801bef6:	68fa      	ldr	r2, [r7, #12]
 801bef8:	68fb      	ldr	r3, [r7, #12]
 801befa:	3318      	adds	r3, #24
 801befc:	4619      	mov	r1, r3
 801befe:	4610      	mov	r0, r2
 801bf00:	f7ff f92a 	bl	801b158 <mg_md5_transform>
    buf += t;
 801bf04:	68ba      	ldr	r2, [r7, #8]
 801bf06:	697b      	ldr	r3, [r7, #20]
 801bf08:	4413      	add	r3, r2
 801bf0a:	60bb      	str	r3, [r7, #8]
    len -= t;
 801bf0c:	687a      	ldr	r2, [r7, #4]
 801bf0e:	697b      	ldr	r3, [r7, #20]
 801bf10:	1ad3      	subs	r3, r2, r3
 801bf12:	607b      	str	r3, [r7, #4]
  }

  while (len >= 64) {
 801bf14:	e019      	b.n	801bf4a <mg_md5_update+0xe2>
    memcpy(ctx->in, buf, 64);
 801bf16:	68fb      	ldr	r3, [r7, #12]
 801bf18:	3318      	adds	r3, #24
 801bf1a:	2240      	movs	r2, #64	@ 0x40
 801bf1c:	68b9      	ldr	r1, [r7, #8]
 801bf1e:	4618      	mov	r0, r3
 801bf20:	f00a ffd2 	bl	8026ec8 <memcpy>
    mg_byte_reverse(ctx->in, 16);
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	3318      	adds	r3, #24
 801bf28:	2110      	movs	r1, #16
 801bf2a:	4618      	mov	r0, r3
 801bf2c:	f7ff f8c0 	bl	801b0b0 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801bf30:	68fa      	ldr	r2, [r7, #12]
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	3318      	adds	r3, #24
 801bf36:	4619      	mov	r1, r3
 801bf38:	4610      	mov	r0, r2
 801bf3a:	f7ff f90d 	bl	801b158 <mg_md5_transform>
    buf += 64;
 801bf3e:	68bb      	ldr	r3, [r7, #8]
 801bf40:	3340      	adds	r3, #64	@ 0x40
 801bf42:	60bb      	str	r3, [r7, #8]
    len -= 64;
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	3b40      	subs	r3, #64	@ 0x40
 801bf48:	607b      	str	r3, [r7, #4]
  while (len >= 64) {
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	2b3f      	cmp	r3, #63	@ 0x3f
 801bf4e:	d8e2      	bhi.n	801bf16 <mg_md5_update+0xae>
  }

  memcpy(ctx->in, buf, len);
 801bf50:	68fb      	ldr	r3, [r7, #12]
 801bf52:	3318      	adds	r3, #24
 801bf54:	687a      	ldr	r2, [r7, #4]
 801bf56:	68b9      	ldr	r1, [r7, #8]
 801bf58:	4618      	mov	r0, r3
 801bf5a:	f00a ffb5 	bl	8026ec8 <memcpy>
}
 801bf5e:	3718      	adds	r7, #24
 801bf60:	46bd      	mov	sp, r7
 801bf62:	bd80      	pop	{r7, pc}

0801bf64 <mg_md5_final>:

void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 801bf64:	b580      	push	{r7, lr}
 801bf66:	b086      	sub	sp, #24
 801bf68:	af00      	add	r7, sp, #0
 801bf6a:	6078      	str	r0, [r7, #4]
 801bf6c:	6039      	str	r1, [r7, #0]
  unsigned count;
  unsigned char *p;
  uint32_t *a;

  count = (ctx->bits[0] >> 3) & 0x3F;
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	691b      	ldr	r3, [r3, #16]
 801bf72:	08db      	lsrs	r3, r3, #3
 801bf74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bf78:	617b      	str	r3, [r7, #20]

  p = ctx->in + count;
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	f103 0218 	add.w	r2, r3, #24
 801bf80:	697b      	ldr	r3, [r7, #20]
 801bf82:	4413      	add	r3, r2
 801bf84:	613b      	str	r3, [r7, #16]
  *p++ = 0x80;
 801bf86:	693b      	ldr	r3, [r7, #16]
 801bf88:	1c5a      	adds	r2, r3, #1
 801bf8a:	613a      	str	r2, [r7, #16]
 801bf8c:	2280      	movs	r2, #128	@ 0x80
 801bf8e:	701a      	strb	r2, [r3, #0]
  count = 64 - 1 - count;
 801bf90:	697b      	ldr	r3, [r7, #20]
 801bf92:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 801bf96:	617b      	str	r3, [r7, #20]
  if (count < 8) {
 801bf98:	697b      	ldr	r3, [r7, #20]
 801bf9a:	2b07      	cmp	r3, #7
 801bf9c:	d819      	bhi.n	801bfd2 <mg_md5_final+0x6e>
    memset(p, 0, count);
 801bf9e:	697a      	ldr	r2, [r7, #20]
 801bfa0:	2100      	movs	r1, #0
 801bfa2:	6938      	ldr	r0, [r7, #16]
 801bfa4:	f009 fd54 	bl	8025a50 <memset>
    mg_byte_reverse(ctx->in, 16);
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	3318      	adds	r3, #24
 801bfac:	2110      	movs	r1, #16
 801bfae:	4618      	mov	r0, r3
 801bfb0:	f7ff f87e 	bl	801b0b0 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801bfb4:	687a      	ldr	r2, [r7, #4]
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	3318      	adds	r3, #24
 801bfba:	4619      	mov	r1, r3
 801bfbc:	4610      	mov	r0, r2
 801bfbe:	f7ff f8cb 	bl	801b158 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	3318      	adds	r3, #24
 801bfc6:	2238      	movs	r2, #56	@ 0x38
 801bfc8:	2100      	movs	r1, #0
 801bfca:	4618      	mov	r0, r3
 801bfcc:	f009 fd40 	bl	8025a50 <memset>
 801bfd0:	e006      	b.n	801bfe0 <mg_md5_final+0x7c>
  } else {
    memset(p, 0, count - 8);
 801bfd2:	697b      	ldr	r3, [r7, #20]
 801bfd4:	3b08      	subs	r3, #8
 801bfd6:	461a      	mov	r2, r3
 801bfd8:	2100      	movs	r1, #0
 801bfda:	6938      	ldr	r0, [r7, #16]
 801bfdc:	f009 fd38 	bl	8025a50 <memset>
  }
  mg_byte_reverse(ctx->in, 14);
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	3318      	adds	r3, #24
 801bfe4:	210e      	movs	r1, #14
 801bfe6:	4618      	mov	r0, r3
 801bfe8:	f7ff f862 	bl	801b0b0 <mg_byte_reverse>

  a = (uint32_t *) ctx->in;
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	3318      	adds	r3, #24
 801bff0:	60fb      	str	r3, [r7, #12]
  a[14] = ctx->bits[0];
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	3338      	adds	r3, #56	@ 0x38
 801bff6:	687a      	ldr	r2, [r7, #4]
 801bff8:	6912      	ldr	r2, [r2, #16]
 801bffa:	601a      	str	r2, [r3, #0]
  a[15] = ctx->bits[1];
 801bffc:	68fb      	ldr	r3, [r7, #12]
 801bffe:	333c      	adds	r3, #60	@ 0x3c
 801c000:	687a      	ldr	r2, [r7, #4]
 801c002:	6952      	ldr	r2, [r2, #20]
 801c004:	601a      	str	r2, [r3, #0]

  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801c006:	687a      	ldr	r2, [r7, #4]
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	3318      	adds	r3, #24
 801c00c:	4619      	mov	r1, r3
 801c00e:	4610      	mov	r0, r2
 801c010:	f7ff f8a2 	bl	801b158 <mg_md5_transform>
  mg_byte_reverse((unsigned char *) ctx->buf, 4);
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	2104      	movs	r1, #4
 801c018:	4618      	mov	r0, r3
 801c01a:	f7ff f849 	bl	801b0b0 <mg_byte_reverse>
  memcpy(digest, ctx->buf, 16);
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	2210      	movs	r2, #16
 801c022:	4619      	mov	r1, r3
 801c024:	6838      	ldr	r0, [r7, #0]
 801c026:	f00a ff4f 	bl	8026ec8 <memcpy>
  memset((char *) ctx, 0, sizeof(*ctx));
 801c02a:	2258      	movs	r2, #88	@ 0x58
 801c02c:	2100      	movs	r1, #0
 801c02e:	6878      	ldr	r0, [r7, #4]
 801c030:	f009 fd0e 	bl	8025a50 <memset>
}
 801c034:	bf00      	nop
 801c036:	3718      	adds	r7, #24
 801c038:	46bd      	mov	sp, r7
 801c03a:	bd80      	pop	{r7, pc}

0801c03c <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 801c03c:	b580      	push	{r7, lr}
 801c03e:	b088      	sub	sp, #32
 801c040:	af00      	add	r7, sp, #0
 801c042:	60f8      	str	r0, [r7, #12]
 801c044:	607b      	str	r3, [r7, #4]
 801c046:	460b      	mov	r3, r1
 801c048:	72fb      	strb	r3, [r7, #11]
 801c04a:	4613      	mov	r3, r2
 801c04c:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 801c04e:	f107 0314 	add.w	r3, r7, #20
 801c052:	3301      	adds	r3, #1
 801c054:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 801c056:	7afb      	ldrb	r3, [r7, #11]
 801c058:	011b      	lsls	r3, r3, #4
 801c05a:	b25a      	sxtb	r2, r3
 801c05c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801c060:	4313      	orrs	r3, r2
 801c062:	b25b      	sxtb	r3, r3
 801c064:	b2db      	uxtb	r3, r3
 801c066:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	b2db      	uxtb	r3, r3
 801c06c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c070:	b2da      	uxtb	r2, r3
 801c072:	69fb      	ldr	r3, [r7, #28]
 801c074:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	09db      	lsrs	r3, r3, #7
 801c07a:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d006      	beq.n	801c090 <mg_mqtt_send_header+0x54>
 801c082:	69fb      	ldr	r3, [r7, #28]
 801c084:	781b      	ldrb	r3, [r3, #0]
 801c086:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801c08a:	b2da      	uxtb	r2, r3
 801c08c:	69fb      	ldr	r3, [r7, #28]
 801c08e:	701a      	strb	r2, [r3, #0]
    vlen++;
 801c090:	69fb      	ldr	r3, [r7, #28]
 801c092:	3301      	adds	r3, #1
 801c094:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d005      	beq.n	801c0a8 <mg_mqtt_send_header+0x6c>
 801c09c:	f107 0314 	add.w	r3, r7, #20
 801c0a0:	3305      	adds	r3, #5
 801c0a2:	69fa      	ldr	r2, [r7, #28]
 801c0a4:	429a      	cmp	r2, r3
 801c0a6:	d3df      	bcc.n	801c068 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 801c0a8:	f107 0314 	add.w	r3, r7, #20
 801c0ac:	69fa      	ldr	r2, [r7, #28]
 801c0ae:	1ad3      	subs	r3, r2, r3
 801c0b0:	461a      	mov	r2, r3
 801c0b2:	f107 0314 	add.w	r3, r7, #20
 801c0b6:	4619      	mov	r1, r3
 801c0b8:	68f8      	ldr	r0, [r7, #12]
 801c0ba:	f004 fded 	bl	8020c98 <mg_send>
}
 801c0be:	bf00      	nop
 801c0c0:	3720      	adds	r7, #32
 801c0c2:	46bd      	mov	sp, r7
 801c0c4:	bd80      	pop	{r7, pc}

0801c0c6 <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 801c0c6:	b580      	push	{r7, lr}
 801c0c8:	b082      	sub	sp, #8
 801c0ca:	af00      	add	r7, sp, #0
 801c0cc:	6078      	str	r0, [r7, #4]
 801c0ce:	460b      	mov	r3, r1
 801c0d0:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 801c0d2:	1cbb      	adds	r3, r7, #2
 801c0d4:	2202      	movs	r2, #2
 801c0d6:	4619      	mov	r1, r3
 801c0d8:	6878      	ldr	r0, [r7, #4]
 801c0da:	f004 fddd 	bl	8020c98 <mg_send>
}
 801c0de:	bf00      	nop
 801c0e0:	3708      	adds	r7, #8
 801c0e2:	46bd      	mov	sp, r7
 801c0e4:	bd80      	pop	{r7, pc}

0801c0e6 <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 801c0e6:	b580      	push	{r7, lr}
 801c0e8:	b082      	sub	sp, #8
 801c0ea:	af00      	add	r7, sp, #0
 801c0ec:	6078      	str	r0, [r7, #4]
 801c0ee:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 801c0f0:	463b      	mov	r3, r7
 801c0f2:	2204      	movs	r2, #4
 801c0f4:	4619      	mov	r1, r3
 801c0f6:	6878      	ldr	r0, [r7, #4]
 801c0f8:	f004 fdce 	bl	8020c98 <mg_send>
}
 801c0fc:	bf00      	nop
 801c0fe:	3708      	adds	r7, #8
 801c100:	46bd      	mov	sp, r7
 801c102:	bd80      	pop	{r7, pc}

0801c104 <varint_size>:

static uint8_t varint_size(size_t length) {
 801c104:	b480      	push	{r7}
 801c106:	b085      	sub	sp, #20
 801c108:	af00      	add	r7, sp, #0
 801c10a:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 801c10c:	2300      	movs	r3, #0
 801c10e:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 801c110:	7bfb      	ldrb	r3, [r7, #15]
 801c112:	3301      	adds	r3, #1
 801c114:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	09db      	lsrs	r3, r3, #7
 801c11a:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d1f6      	bne.n	801c110 <varint_size+0xc>
  return bytes_needed;
 801c122:	7bfb      	ldrb	r3, [r7, #15]
}
 801c124:	4618      	mov	r0, r3
 801c126:	3714      	adds	r7, #20
 801c128:	46bd      	mov	sp, r7
 801c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c12e:	4770      	bx	lr

0801c130 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 801c130:	b480      	push	{r7}
 801c132:	b085      	sub	sp, #20
 801c134:	af00      	add	r7, sp, #0
 801c136:	6078      	str	r0, [r7, #4]
 801c138:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 801c13a:	2300      	movs	r3, #0
 801c13c:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t b = (uint8_t) (value % 128);
 801c13e:	683b      	ldr	r3, [r7, #0]
 801c140:	b2db      	uxtb	r3, r3
 801c142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c146:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 801c148:	683b      	ldr	r3, [r7, #0]
 801c14a:	09db      	lsrs	r3, r3, #7
 801c14c:	603b      	str	r3, [r7, #0]
    if (value > 0) b |= 0x80;
 801c14e:	683b      	ldr	r3, [r7, #0]
 801c150:	2b00      	cmp	r3, #0
 801c152:	d003      	beq.n	801c15c <encode_varint+0x2c>
 801c154:	7afb      	ldrb	r3, [r7, #11]
 801c156:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801c15a:	72fb      	strb	r3, [r7, #11]
    buf[len++] = b;
 801c15c:	68fb      	ldr	r3, [r7, #12]
 801c15e:	1c5a      	adds	r2, r3, #1
 801c160:	60fa      	str	r2, [r7, #12]
 801c162:	687a      	ldr	r2, [r7, #4]
 801c164:	4413      	add	r3, r2
 801c166:	7afa      	ldrb	r2, [r7, #11]
 801c168:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 801c16a:	683b      	ldr	r3, [r7, #0]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d1e6      	bne.n	801c13e <encode_varint+0xe>

  return len;
 801c170:	68fb      	ldr	r3, [r7, #12]
}
 801c172:	4618      	mov	r0, r3
 801c174:	3714      	adds	r7, #20
 801c176:	46bd      	mov	sp, r7
 801c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c17c:	4770      	bx	lr

0801c17e <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 801c17e:	b480      	push	{r7}
 801c180:	b089      	sub	sp, #36	@ 0x24
 801c182:	af00      	add	r7, sp, #0
 801c184:	60f8      	str	r0, [r7, #12]
 801c186:	60b9      	str	r1, [r7, #8]
 801c188:	607a      	str	r2, [r7, #4]
  size_t multiplier = 1, offset;
 801c18a:	2301      	movs	r3, #1
 801c18c:	61fb      	str	r3, [r7, #28]
  *value = 0;
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	2200      	movs	r2, #0
 801c192:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 801c194:	2300      	movs	r3, #0
 801c196:	61bb      	str	r3, [r7, #24]
 801c198:	e01c      	b.n	801c1d4 <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 801c19a:	68fa      	ldr	r2, [r7, #12]
 801c19c:	69bb      	ldr	r3, [r7, #24]
 801c19e:	4413      	add	r3, r2
 801c1a0:	781b      	ldrb	r3, [r3, #0]
 801c1a2:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7f) * multiplier;
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	681a      	ldr	r2, [r3, #0]
 801c1a8:	7dfb      	ldrb	r3, [r7, #23]
 801c1aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c1ae:	69f9      	ldr	r1, [r7, #28]
 801c1b0:	fb01 f303 	mul.w	r3, r1, r3
 801c1b4:	441a      	add	r2, r3
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 801c1ba:	69fb      	ldr	r3, [r7, #28]
 801c1bc:	01db      	lsls	r3, r3, #7
 801c1be:	61fb      	str	r3, [r7, #28]

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 801c1c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	db02      	blt.n	801c1ce <decode_varint+0x50>
 801c1c8:	69bb      	ldr	r3, [r7, #24]
 801c1ca:	3301      	adds	r3, #1
 801c1cc:	e00a      	b.n	801c1e4 <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 801c1ce:	69bb      	ldr	r3, [r7, #24]
 801c1d0:	3301      	adds	r3, #1
 801c1d2:	61bb      	str	r3, [r7, #24]
 801c1d4:	69bb      	ldr	r3, [r7, #24]
 801c1d6:	2b03      	cmp	r3, #3
 801c1d8:	d803      	bhi.n	801c1e2 <decode_varint+0x64>
 801c1da:	69ba      	ldr	r2, [r7, #24]
 801c1dc:	68bb      	ldr	r3, [r7, #8]
 801c1de:	429a      	cmp	r2, r3
 801c1e0:	d3db      	bcc.n	801c19a <decode_varint+0x1c>
  }

  return 0;
 801c1e2:	2300      	movs	r3, #0
}
 801c1e4:	4618      	mov	r0, r3
 801c1e6:	3724      	adds	r7, #36	@ 0x24
 801c1e8:	46bd      	mov	sp, r7
 801c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ee:	4770      	bx	lr

0801c1f0 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 801c1f0:	b480      	push	{r7}
 801c1f2:	b085      	sub	sp, #20
 801c1f4:	af00      	add	r7, sp, #0
 801c1f6:	4603      	mov	r3, r0
 801c1f8:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 801c1fa:	231b      	movs	r3, #27
 801c1fc:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 801c1fe:	2300      	movs	r3, #0
 801c200:	60fb      	str	r3, [r7, #12]
 801c202:	e00f      	b.n	801c224 <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 801c204:	4a0d      	ldr	r2, [pc, #52]	@ (801c23c <mqtt_prop_type_by_id+0x4c>)
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 801c20c:	79fa      	ldrb	r2, [r7, #7]
 801c20e:	429a      	cmp	r2, r3
 801c210:	d105      	bne.n	801c21e <mqtt_prop_type_by_id+0x2e>
 801c212:	4a0a      	ldr	r2, [pc, #40]	@ (801c23c <mqtt_prop_type_by_id+0x4c>)
 801c214:	68fb      	ldr	r3, [r7, #12]
 801c216:	005b      	lsls	r3, r3, #1
 801c218:	4413      	add	r3, r2
 801c21a:	785b      	ldrb	r3, [r3, #1]
 801c21c:	e008      	b.n	801c230 <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 801c21e:	68fb      	ldr	r3, [r7, #12]
 801c220:	3301      	adds	r3, #1
 801c222:	60fb      	str	r3, [r7, #12]
 801c224:	68fa      	ldr	r2, [r7, #12]
 801c226:	68bb      	ldr	r3, [r7, #8]
 801c228:	429a      	cmp	r2, r3
 801c22a:	d3eb      	bcc.n	801c204 <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 801c22c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801c230:	4618      	mov	r0, r3
 801c232:	3714      	adds	r7, #20
 801c234:	46bd      	mov	sp, r7
 801c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c23a:	4770      	bx	lr
 801c23c:	08033dbc 	.word	0x08033dbc

0801c240 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 801c240:	b580      	push	{r7, lr}
 801c242:	b084      	sub	sp, #16
 801c244:	af00      	add	r7, sp, #0
 801c246:	6078      	str	r0, [r7, #4]
 801c248:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 801c24a:	2300      	movs	r3, #0
 801c24c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 801c24e:	2300      	movs	r3, #0
 801c250:	60fb      	str	r3, [r7, #12]
 801c252:	e07a      	b.n	801c34a <get_properties_length+0x10a>
    size++;  // identifier
 801c254:	68bb      	ldr	r3, [r7, #8]
 801c256:	3301      	adds	r3, #1
 801c258:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801c25a:	68fa      	ldr	r2, [r7, #12]
 801c25c:	4613      	mov	r3, r2
 801c25e:	005b      	lsls	r3, r3, #1
 801c260:	4413      	add	r3, r2
 801c262:	00db      	lsls	r3, r3, #3
 801c264:	461a      	mov	r2, r3
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	4413      	add	r3, r2
 801c26a:	781b      	ldrb	r3, [r3, #0]
 801c26c:	4618      	mov	r0, r3
 801c26e:	f7ff ffbf 	bl	801c1f0 <mqtt_prop_type_by_id>
 801c272:	4603      	mov	r3, r0
 801c274:	2b06      	cmp	r3, #6
 801c276:	d863      	bhi.n	801c340 <get_properties_length+0x100>
 801c278:	a201      	add	r2, pc, #4	@ (adr r2, 801c280 <get_properties_length+0x40>)
 801c27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c27e:	bf00      	nop
 801c280:	0801c339 	.word	0x0801c339
 801c284:	0801c2cd 	.word	0x0801c2cd
 801c288:	0801c29d 	.word	0x0801c29d
 801c28c:	0801c2e9 	.word	0x0801c2e9
 801c290:	0801c305 	.word	0x0801c305
 801c294:	0801c329 	.word	0x0801c329
 801c298:	0801c331 	.word	0x0801c331
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 801c29c:	68fa      	ldr	r2, [r7, #12]
 801c29e:	4613      	mov	r3, r2
 801c2a0:	005b      	lsls	r3, r3, #1
 801c2a2:	4413      	add	r3, r2
 801c2a4:	00db      	lsls	r3, r3, #3
 801c2a6:	461a      	mov	r2, r3
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	4413      	add	r3, r2
 801c2ac:	6959      	ldr	r1, [r3, #20]
 801c2ae:	68fa      	ldr	r2, [r7, #12]
 801c2b0:	4613      	mov	r3, r2
 801c2b2:	005b      	lsls	r3, r3, #1
 801c2b4:	4413      	add	r3, r2
 801c2b6:	00db      	lsls	r3, r3, #3
 801c2b8:	461a      	mov	r2, r3
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	4413      	add	r3, r2
 801c2be:	68db      	ldr	r3, [r3, #12]
 801c2c0:	18ca      	adds	r2, r1, r3
 801c2c2:	68bb      	ldr	r3, [r7, #8]
 801c2c4:	4413      	add	r3, r2
 801c2c6:	3304      	adds	r3, #4
 801c2c8:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 801c2ca:	e03b      	b.n	801c344 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801c2cc:	68fa      	ldr	r2, [r7, #12]
 801c2ce:	4613      	mov	r3, r2
 801c2d0:	005b      	lsls	r3, r3, #1
 801c2d2:	4413      	add	r3, r2
 801c2d4:	00db      	lsls	r3, r3, #3
 801c2d6:	461a      	mov	r2, r3
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	4413      	add	r3, r2
 801c2dc:	695a      	ldr	r2, [r3, #20]
 801c2de:	68bb      	ldr	r3, [r7, #8]
 801c2e0:	4413      	add	r3, r2
 801c2e2:	3302      	adds	r3, #2
 801c2e4:	60bb      	str	r3, [r7, #8]
        break;
 801c2e6:	e02d      	b.n	801c344 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801c2e8:	68fa      	ldr	r2, [r7, #12]
 801c2ea:	4613      	mov	r3, r2
 801c2ec:	005b      	lsls	r3, r3, #1
 801c2ee:	4413      	add	r3, r2
 801c2f0:	00db      	lsls	r3, r3, #3
 801c2f2:	461a      	mov	r2, r3
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	4413      	add	r3, r2
 801c2f8:	695a      	ldr	r2, [r3, #20]
 801c2fa:	68bb      	ldr	r3, [r7, #8]
 801c2fc:	4413      	add	r3, r2
 801c2fe:	3302      	adds	r3, #2
 801c300:	60bb      	str	r3, [r7, #8]
        break;
 801c302:	e01f      	b.n	801c344 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 801c304:	68fa      	ldr	r2, [r7, #12]
 801c306:	4613      	mov	r3, r2
 801c308:	005b      	lsls	r3, r3, #1
 801c30a:	4413      	add	r3, r2
 801c30c:	00db      	lsls	r3, r3, #3
 801c30e:	461a      	mov	r2, r3
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	4413      	add	r3, r2
 801c314:	685b      	ldr	r3, [r3, #4]
 801c316:	4618      	mov	r0, r3
 801c318:	f7ff fef4 	bl	801c104 <varint_size>
 801c31c:	4603      	mov	r3, r0
 801c31e:	461a      	mov	r2, r3
 801c320:	68bb      	ldr	r3, [r7, #8]
 801c322:	4413      	add	r3, r2
 801c324:	60bb      	str	r3, [r7, #8]
        break;
 801c326:	e00d      	b.n	801c344 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 801c328:	68bb      	ldr	r3, [r7, #8]
 801c32a:	3304      	adds	r3, #4
 801c32c:	60bb      	str	r3, [r7, #8]
        break;
 801c32e:	e009      	b.n	801c344 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 801c330:	68bb      	ldr	r3, [r7, #8]
 801c332:	3302      	adds	r3, #2
 801c334:	60bb      	str	r3, [r7, #8]
        break;
 801c336:	e005      	b.n	801c344 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 801c338:	68bb      	ldr	r3, [r7, #8]
 801c33a:	3301      	adds	r3, #1
 801c33c:	60bb      	str	r3, [r7, #8]
        break;
 801c33e:	e001      	b.n	801c344 <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 801c340:	68bb      	ldr	r3, [r7, #8]
 801c342:	e007      	b.n	801c354 <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 801c344:	68fb      	ldr	r3, [r7, #12]
 801c346:	3301      	adds	r3, #1
 801c348:	60fb      	str	r3, [r7, #12]
 801c34a:	68fa      	ldr	r2, [r7, #12]
 801c34c:	683b      	ldr	r3, [r7, #0]
 801c34e:	429a      	cmp	r2, r3
 801c350:	d380      	bcc.n	801c254 <get_properties_length+0x14>
    }
  }

  return size;
 801c352:	68bb      	ldr	r3, [r7, #8]
}
 801c354:	4618      	mov	r0, r3
 801c356:	3710      	adds	r7, #16
 801c358:	46bd      	mov	sp, r7
 801c35a:	bd80      	pop	{r7, pc}

0801c35c <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 801c35c:	b580      	push	{r7, lr}
 801c35e:	b084      	sub	sp, #16
 801c360:	af00      	add	r7, sp, #0
 801c362:	6078      	str	r0, [r7, #4]
 801c364:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 801c366:	6839      	ldr	r1, [r7, #0]
 801c368:	6878      	ldr	r0, [r7, #4]
 801c36a:	f7ff ff69 	bl	801c240 <get_properties_length>
 801c36e:	60f8      	str	r0, [r7, #12]
  size += varint_size(size);
 801c370:	68f8      	ldr	r0, [r7, #12]
 801c372:	f7ff fec7 	bl	801c104 <varint_size>
 801c376:	4603      	mov	r3, r0
 801c378:	461a      	mov	r2, r3
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	4413      	add	r3, r2
 801c37e:	60fb      	str	r3, [r7, #12]
  return size;
 801c380:	68fb      	ldr	r3, [r7, #12]
}
 801c382:	4618      	mov	r0, r3
 801c384:	3710      	adds	r7, #16
 801c386:	46bd      	mov	sp, r7
 801c388:	bd80      	pop	{r7, pc}
	...

0801c38c <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 801c38c:	b580      	push	{r7, lr}
 801c38e:	b08a      	sub	sp, #40	@ 0x28
 801c390:	af00      	add	r7, sp, #0
 801c392:	60f8      	str	r0, [r7, #12]
 801c394:	60b9      	str	r1, [r7, #8]
 801c396:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 801c398:	6879      	ldr	r1, [r7, #4]
 801c39a:	68b8      	ldr	r0, [r7, #8]
 801c39c:	f7ff ff50 	bl	801c240 <get_properties_length>
 801c3a0:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 801c3a2:	2300      	movs	r3, #0
 801c3a4:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	617b      	str	r3, [r7, #20]
  size_t i, len = encode_varint(buf, total_size);
 801c3aa:	f107 0314 	add.w	r3, r7, #20
 801c3ae:	6a39      	ldr	r1, [r7, #32]
 801c3b0:	4618      	mov	r0, r3
 801c3b2:	f7ff febd 	bl	801c130 <encode_varint>
 801c3b6:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 801c3b8:	f107 0314 	add.w	r3, r7, #20
 801c3bc:	69fa      	ldr	r2, [r7, #28]
 801c3be:	4619      	mov	r1, r3
 801c3c0:	68f8      	ldr	r0, [r7, #12]
 801c3c2:	f004 fc69 	bl	8020c98 <mg_send>
  for (i = 0; i < nprops; i++) {
 801c3c6:	2300      	movs	r3, #0
 801c3c8:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3ca:	e11f      	b.n	801c60c <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 801c3cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c3ce:	4613      	mov	r3, r2
 801c3d0:	005b      	lsls	r3, r3, #1
 801c3d2:	4413      	add	r3, r2
 801c3d4:	00db      	lsls	r3, r3, #3
 801c3d6:	461a      	mov	r2, r3
 801c3d8:	68bb      	ldr	r3, [r7, #8]
 801c3da:	4413      	add	r3, r2
 801c3dc:	2201      	movs	r2, #1
 801c3de:	4619      	mov	r1, r3
 801c3e0:	68f8      	ldr	r0, [r7, #12]
 801c3e2:	f004 fc59 	bl	8020c98 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801c3e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c3e8:	4613      	mov	r3, r2
 801c3ea:	005b      	lsls	r3, r3, #1
 801c3ec:	4413      	add	r3, r2
 801c3ee:	00db      	lsls	r3, r3, #3
 801c3f0:	461a      	mov	r2, r3
 801c3f2:	68bb      	ldr	r3, [r7, #8]
 801c3f4:	4413      	add	r3, r2
 801c3f6:	781b      	ldrb	r3, [r3, #0]
 801c3f8:	4618      	mov	r0, r3
 801c3fa:	f7ff fef9 	bl	801c1f0 <mqtt_prop_type_by_id>
 801c3fe:	4603      	mov	r3, r0
 801c400:	2b06      	cmp	r3, #6
 801c402:	f200 8100 	bhi.w	801c606 <mg_send_mqtt_properties+0x27a>
 801c406:	a201      	add	r2, pc, #4	@ (adr r2, 801c40c <mg_send_mqtt_properties+0x80>)
 801c408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c40c:	0801c4cb 	.word	0x0801c4cb
 801c410:	0801c533 	.word	0x0801c533
 801c414:	0801c429 	.word	0x0801c429
 801c418:	0801c585 	.word	0x0801c585
 801c41c:	0801c5d7 	.word	0x0801c5d7
 801c420:	0801c50f 	.word	0x0801c50f
 801c424:	0801c4e9 	.word	0x0801c4e9
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 801c428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c42a:	4613      	mov	r3, r2
 801c42c:	005b      	lsls	r3, r3, #1
 801c42e:	4413      	add	r3, r2
 801c430:	00db      	lsls	r3, r3, #3
 801c432:	461a      	mov	r2, r3
 801c434:	68bb      	ldr	r3, [r7, #8]
 801c436:	4413      	add	r3, r2
 801c438:	68db      	ldr	r3, [r3, #12]
 801c43a:	b29b      	uxth	r3, r3
 801c43c:	4618      	mov	r0, r3
 801c43e:	f006 f9a4 	bl	802278a <mg_ntohs>
 801c442:	4603      	mov	r3, r0
 801c444:	4619      	mov	r1, r3
 801c446:	68f8      	ldr	r0, [r7, #12]
 801c448:	f7ff fe3d 	bl	801c0c6 <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 801c44c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c44e:	4613      	mov	r3, r2
 801c450:	005b      	lsls	r3, r3, #1
 801c452:	4413      	add	r3, r2
 801c454:	00db      	lsls	r3, r3, #3
 801c456:	461a      	mov	r2, r3
 801c458:	68bb      	ldr	r3, [r7, #8]
 801c45a:	4413      	add	r3, r2
 801c45c:	6899      	ldr	r1, [r3, #8]
 801c45e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c460:	4613      	mov	r3, r2
 801c462:	005b      	lsls	r3, r3, #1
 801c464:	4413      	add	r3, r2
 801c466:	00db      	lsls	r3, r3, #3
 801c468:	461a      	mov	r2, r3
 801c46a:	68bb      	ldr	r3, [r7, #8]
 801c46c:	4413      	add	r3, r2
 801c46e:	68db      	ldr	r3, [r3, #12]
 801c470:	461a      	mov	r2, r3
 801c472:	68f8      	ldr	r0, [r7, #12]
 801c474:	f004 fc10 	bl	8020c98 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801c478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c47a:	4613      	mov	r3, r2
 801c47c:	005b      	lsls	r3, r3, #1
 801c47e:	4413      	add	r3, r2
 801c480:	00db      	lsls	r3, r3, #3
 801c482:	461a      	mov	r2, r3
 801c484:	68bb      	ldr	r3, [r7, #8]
 801c486:	4413      	add	r3, r2
 801c488:	695b      	ldr	r3, [r3, #20]
 801c48a:	b29b      	uxth	r3, r3
 801c48c:	4618      	mov	r0, r3
 801c48e:	f006 f97c 	bl	802278a <mg_ntohs>
 801c492:	4603      	mov	r3, r0
 801c494:	4619      	mov	r1, r3
 801c496:	68f8      	ldr	r0, [r7, #12]
 801c498:	f7ff fe15 	bl	801c0c6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801c49c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c49e:	4613      	mov	r3, r2
 801c4a0:	005b      	lsls	r3, r3, #1
 801c4a2:	4413      	add	r3, r2
 801c4a4:	00db      	lsls	r3, r3, #3
 801c4a6:	461a      	mov	r2, r3
 801c4a8:	68bb      	ldr	r3, [r7, #8]
 801c4aa:	4413      	add	r3, r2
 801c4ac:	6919      	ldr	r1, [r3, #16]
 801c4ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c4b0:	4613      	mov	r3, r2
 801c4b2:	005b      	lsls	r3, r3, #1
 801c4b4:	4413      	add	r3, r2
 801c4b6:	00db      	lsls	r3, r3, #3
 801c4b8:	461a      	mov	r2, r3
 801c4ba:	68bb      	ldr	r3, [r7, #8]
 801c4bc:	4413      	add	r3, r2
 801c4be:	695b      	ldr	r3, [r3, #20]
 801c4c0:	461a      	mov	r2, r3
 801c4c2:	68f8      	ldr	r0, [r7, #12]
 801c4c4:	f004 fbe8 	bl	8020c98 <mg_send>
        break;
 801c4c8:	e09d      	b.n	801c606 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 801c4ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c4cc:	4613      	mov	r3, r2
 801c4ce:	005b      	lsls	r3, r3, #1
 801c4d0:	4413      	add	r3, r2
 801c4d2:	00db      	lsls	r3, r3, #3
 801c4d4:	461a      	mov	r2, r3
 801c4d6:	68bb      	ldr	r3, [r7, #8]
 801c4d8:	4413      	add	r3, r2
 801c4da:	3304      	adds	r3, #4
 801c4dc:	2201      	movs	r2, #1
 801c4de:	4619      	mov	r1, r3
 801c4e0:	68f8      	ldr	r0, [r7, #12]
 801c4e2:	f004 fbd9 	bl	8020c98 <mg_send>
        break;
 801c4e6:	e08e      	b.n	801c606 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 801c4e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c4ea:	4613      	mov	r3, r2
 801c4ec:	005b      	lsls	r3, r3, #1
 801c4ee:	4413      	add	r3, r2
 801c4f0:	00db      	lsls	r3, r3, #3
 801c4f2:	461a      	mov	r2, r3
 801c4f4:	68bb      	ldr	r3, [r7, #8]
 801c4f6:	4413      	add	r3, r2
 801c4f8:	685b      	ldr	r3, [r3, #4]
 801c4fa:	b29b      	uxth	r3, r3
 801c4fc:	4618      	mov	r0, r3
 801c4fe:	f006 f944 	bl	802278a <mg_ntohs>
 801c502:	4603      	mov	r3, r0
 801c504:	4619      	mov	r1, r3
 801c506:	68f8      	ldr	r0, [r7, #12]
 801c508:	f7ff fddd 	bl	801c0c6 <mg_send_u16>
        break;
 801c50c:	e07b      	b.n	801c606 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 801c50e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c510:	4613      	mov	r3, r2
 801c512:	005b      	lsls	r3, r3, #1
 801c514:	4413      	add	r3, r2
 801c516:	00db      	lsls	r3, r3, #3
 801c518:	461a      	mov	r2, r3
 801c51a:	68bb      	ldr	r3, [r7, #8]
 801c51c:	4413      	add	r3, r2
 801c51e:	685b      	ldr	r3, [r3, #4]
 801c520:	4618      	mov	r0, r3
 801c522:	f006 f919 	bl	8022758 <mg_ntohl>
 801c526:	4603      	mov	r3, r0
 801c528:	4619      	mov	r1, r3
 801c52a:	68f8      	ldr	r0, [r7, #12]
 801c52c:	f7ff fddb 	bl	801c0e6 <mg_send_u32>
        break;
 801c530:	e069      	b.n	801c606 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801c532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c534:	4613      	mov	r3, r2
 801c536:	005b      	lsls	r3, r3, #1
 801c538:	4413      	add	r3, r2
 801c53a:	00db      	lsls	r3, r3, #3
 801c53c:	461a      	mov	r2, r3
 801c53e:	68bb      	ldr	r3, [r7, #8]
 801c540:	4413      	add	r3, r2
 801c542:	695b      	ldr	r3, [r3, #20]
 801c544:	b29b      	uxth	r3, r3
 801c546:	4618      	mov	r0, r3
 801c548:	f006 f91f 	bl	802278a <mg_ntohs>
 801c54c:	4603      	mov	r3, r0
 801c54e:	4619      	mov	r1, r3
 801c550:	68f8      	ldr	r0, [r7, #12]
 801c552:	f7ff fdb8 	bl	801c0c6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801c556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c558:	4613      	mov	r3, r2
 801c55a:	005b      	lsls	r3, r3, #1
 801c55c:	4413      	add	r3, r2
 801c55e:	00db      	lsls	r3, r3, #3
 801c560:	461a      	mov	r2, r3
 801c562:	68bb      	ldr	r3, [r7, #8]
 801c564:	4413      	add	r3, r2
 801c566:	6919      	ldr	r1, [r3, #16]
 801c568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c56a:	4613      	mov	r3, r2
 801c56c:	005b      	lsls	r3, r3, #1
 801c56e:	4413      	add	r3, r2
 801c570:	00db      	lsls	r3, r3, #3
 801c572:	461a      	mov	r2, r3
 801c574:	68bb      	ldr	r3, [r7, #8]
 801c576:	4413      	add	r3, r2
 801c578:	695b      	ldr	r3, [r3, #20]
 801c57a:	461a      	mov	r2, r3
 801c57c:	68f8      	ldr	r0, [r7, #12]
 801c57e:	f004 fb8b 	bl	8020c98 <mg_send>
        break;
 801c582:	e040      	b.n	801c606 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801c584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c586:	4613      	mov	r3, r2
 801c588:	005b      	lsls	r3, r3, #1
 801c58a:	4413      	add	r3, r2
 801c58c:	00db      	lsls	r3, r3, #3
 801c58e:	461a      	mov	r2, r3
 801c590:	68bb      	ldr	r3, [r7, #8]
 801c592:	4413      	add	r3, r2
 801c594:	695b      	ldr	r3, [r3, #20]
 801c596:	b29b      	uxth	r3, r3
 801c598:	4618      	mov	r0, r3
 801c59a:	f006 f8f6 	bl	802278a <mg_ntohs>
 801c59e:	4603      	mov	r3, r0
 801c5a0:	4619      	mov	r1, r3
 801c5a2:	68f8      	ldr	r0, [r7, #12]
 801c5a4:	f7ff fd8f 	bl	801c0c6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801c5a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c5aa:	4613      	mov	r3, r2
 801c5ac:	005b      	lsls	r3, r3, #1
 801c5ae:	4413      	add	r3, r2
 801c5b0:	00db      	lsls	r3, r3, #3
 801c5b2:	461a      	mov	r2, r3
 801c5b4:	68bb      	ldr	r3, [r7, #8]
 801c5b6:	4413      	add	r3, r2
 801c5b8:	6919      	ldr	r1, [r3, #16]
 801c5ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c5bc:	4613      	mov	r3, r2
 801c5be:	005b      	lsls	r3, r3, #1
 801c5c0:	4413      	add	r3, r2
 801c5c2:	00db      	lsls	r3, r3, #3
 801c5c4:	461a      	mov	r2, r3
 801c5c6:	68bb      	ldr	r3, [r7, #8]
 801c5c8:	4413      	add	r3, r2
 801c5ca:	695b      	ldr	r3, [r3, #20]
 801c5cc:	461a      	mov	r2, r3
 801c5ce:	68f8      	ldr	r0, [r7, #12]
 801c5d0:	f004 fb62 	bl	8020c98 <mg_send>
        break;
 801c5d4:	e017      	b.n	801c606 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_varint(buf_v, props[i].iv);
 801c5d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c5d8:	4613      	mov	r3, r2
 801c5da:	005b      	lsls	r3, r3, #1
 801c5dc:	4413      	add	r3, r2
 801c5de:	00db      	lsls	r3, r3, #3
 801c5e0:	461a      	mov	r2, r3
 801c5e2:	68bb      	ldr	r3, [r7, #8]
 801c5e4:	4413      	add	r3, r2
 801c5e6:	685a      	ldr	r2, [r3, #4]
 801c5e8:	f107 0318 	add.w	r3, r7, #24
 801c5ec:	4611      	mov	r1, r2
 801c5ee:	4618      	mov	r0, r3
 801c5f0:	f7ff fd9e 	bl	801c130 <encode_varint>
 801c5f4:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 801c5f6:	f107 0318 	add.w	r3, r7, #24
 801c5fa:	69fa      	ldr	r2, [r7, #28]
 801c5fc:	4619      	mov	r1, r3
 801c5fe:	68f8      	ldr	r0, [r7, #12]
 801c600:	f004 fb4a 	bl	8020c98 <mg_send>
        break;
 801c604:	bf00      	nop
  for (i = 0; i < nprops; i++) {
 801c606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c608:	3301      	adds	r3, #1
 801c60a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c60c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	429a      	cmp	r2, r3
 801c612:	f4ff aedb 	bcc.w	801c3cc <mg_send_mqtt_properties+0x40>
    }
  }
}
 801c616:	bf00      	nop
 801c618:	bf00      	nop
 801c61a:	3728      	adds	r7, #40	@ 0x28
 801c61c:	46bd      	mov	sp, r7
 801c61e:	bd80      	pop	{r7, pc}

0801c620 <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801c620:	b580      	push	{r7, lr}
 801c622:	b08e      	sub	sp, #56	@ 0x38
 801c624:	af00      	add	r7, sp, #0
 801c626:	6078      	str	r0, [r7, #4]
 801c628:	6039      	str	r1, [r7, #0]
  char client_id[21];
  struct mg_str cid = opts->client_id;
 801c62a:	683a      	ldr	r2, [r7, #0]
 801c62c:	f107 0314 	add.w	r3, r7, #20
 801c630:	3210      	adds	r2, #16
 801c632:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c636:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 801c63a:	230c      	movs	r3, #12
 801c63c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 801c63e:	2300      	movs	r3, #0
 801c640:	733b      	strb	r3, [r7, #12]
 801c642:	2304      	movs	r3, #4
 801c644:	737b      	strb	r3, [r7, #13]
 801c646:	234d      	movs	r3, #77	@ 0x4d
 801c648:	73bb      	strb	r3, [r7, #14]
 801c64a:	2351      	movs	r3, #81	@ 0x51
 801c64c:	73fb      	strb	r3, [r7, #15]
 801c64e:	2354      	movs	r3, #84	@ 0x54
 801c650:	743b      	strb	r3, [r7, #16]
 801c652:	2354      	movs	r3, #84	@ 0x54
 801c654:	747b      	strb	r3, [r7, #17]
 801c656:	683b      	ldr	r3, [r7, #0]
 801c658:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801c65c:	74bb      	strb	r3, [r7, #18]
 801c65e:	2300      	movs	r3, #0
 801c660:	74fb      	strb	r3, [r7, #19]

  if (cid.len == 0) {
 801c662:	69bb      	ldr	r3, [r7, #24]
 801c664:	2b00      	cmp	r3, #0
 801c666:	d110      	bne.n	801c68a <mg_mqtt_login+0x6a>
    mg_random_str(client_id, sizeof(client_id) - 1);
 801c668:	f107 031c 	add.w	r3, r7, #28
 801c66c:	2114      	movs	r1, #20
 801c66e:	4618      	mov	r0, r3
 801c670:	f006 f82c 	bl	80226cc <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 801c674:	2300      	movs	r3, #0
 801c676:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    cid = mg_str(client_id);
 801c67a:	f107 0314 	add.w	r3, r7, #20
 801c67e:	f107 021c 	add.w	r2, r7, #28
 801c682:	4611      	mov	r1, r2
 801c684:	4618      	mov	r0, r3
 801c686:	f005 f8dd 	bl	8021844 <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 801c68a:	7cbb      	ldrb	r3, [r7, #18]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d101      	bne.n	801c694 <mg_mqtt_login+0x74>
 801c690:	2304      	movs	r3, #4
 801c692:	74bb      	strb	r3, [r7, #18]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 801c694:	7cbb      	ldrb	r3, [r7, #18]
 801c696:	2b05      	cmp	r3, #5
 801c698:	bf0c      	ite	eq
 801c69a:	2301      	moveq	r3, #1
 801c69c:	2300      	movne	r3, #0
 801c69e:	b2d9      	uxtb	r1, r3
 801c6a0:	687a      	ldr	r2, [r7, #4]
 801c6a2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801c6a6:	f361 0382 	bfi	r3, r1, #2, #1
 801c6aa:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 801c6ae:	683b      	ldr	r3, [r7, #0]
 801c6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c6b4:	00db      	lsls	r3, r3, #3
 801c6b6:	b2db      	uxtb	r3, r3
 801c6b8:	f003 0318 	and.w	r3, r3, #24
 801c6bc:	b2db      	uxtb	r3, r3
 801c6be:	74fb      	strb	r3, [r7, #19]
  if (opts->user.len > 0) {
 801c6c0:	683b      	ldr	r3, [r7, #0]
 801c6c2:	685b      	ldr	r3, [r3, #4]
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d00a      	beq.n	801c6de <mg_mqtt_login+0xbe>
    total_len += 2 + (uint32_t) opts->user.len;
 801c6c8:	683b      	ldr	r3, [r7, #0]
 801c6ca:	685a      	ldr	r2, [r3, #4]
 801c6cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c6ce:	4413      	add	r3, r2
 801c6d0:	3302      	adds	r3, #2
 801c6d2:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_USER_NAME;
 801c6d4:	7cfb      	ldrb	r3, [r7, #19]
 801c6d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801c6da:	b2db      	uxtb	r3, r3
 801c6dc:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->pass.len > 0) {
 801c6de:	683b      	ldr	r3, [r7, #0]
 801c6e0:	68db      	ldr	r3, [r3, #12]
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d00a      	beq.n	801c6fc <mg_mqtt_login+0xdc>
    total_len += 2 + (uint32_t) opts->pass.len;
 801c6e6:	683b      	ldr	r3, [r7, #0]
 801c6e8:	68da      	ldr	r2, [r3, #12]
 801c6ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c6ec:	4413      	add	r3, r2
 801c6ee:	3302      	adds	r3, #2
 801c6f0:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_PASSWORD;
 801c6f2:	7cfb      	ldrb	r3, [r7, #19]
 801c6f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c6f8:	b2db      	uxtb	r3, r3
 801c6fa:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 801c6fc:	683b      	ldr	r3, [r7, #0]
 801c6fe:	69db      	ldr	r3, [r3, #28]
 801c700:	2b00      	cmp	r3, #0
 801c702:	d00d      	beq.n	801c720 <mg_mqtt_login+0x100>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 801c704:	683b      	ldr	r3, [r7, #0]
 801c706:	69da      	ldr	r2, [r3, #28]
 801c708:	683b      	ldr	r3, [r7, #0]
 801c70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c70c:	441a      	add	r2, r3
 801c70e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c710:	4413      	add	r3, r2
 801c712:	3304      	adds	r3, #4
 801c714:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_WILL;
 801c716:	7cfb      	ldrb	r3, [r7, #19]
 801c718:	f043 0304 	orr.w	r3, r3, #4
 801c71c:	b2db      	uxtb	r3, r3
 801c71e:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 801c720:	683b      	ldr	r3, [r7, #0]
 801c722:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c726:	2b00      	cmp	r3, #0
 801c728:	d102      	bne.n	801c730 <mg_mqtt_login+0x110>
 801c72a:	69bb      	ldr	r3, [r7, #24]
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	d104      	bne.n	801c73a <mg_mqtt_login+0x11a>
 801c730:	7cfb      	ldrb	r3, [r7, #19]
 801c732:	f043 0302 	orr.w	r3, r3, #2
 801c736:	b2db      	uxtb	r3, r3
 801c738:	74fb      	strb	r3, [r7, #19]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 801c73a:	683b      	ldr	r3, [r7, #0]
 801c73c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801c740:	2b00      	cmp	r3, #0
 801c742:	d004      	beq.n	801c74e <mg_mqtt_login+0x12e>
 801c744:	7cfb      	ldrb	r3, [r7, #19]
 801c746:	f043 0320 	orr.w	r3, r3, #32
 801c74a:	b2db      	uxtb	r3, r3
 801c74c:	74fb      	strb	r3, [r7, #19]
  total_len += (uint32_t) cid.len;
 801c74e:	69bb      	ldr	r3, [r7, #24]
 801c750:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c752:	4413      	add	r3, r2
 801c754:	637b      	str	r3, [r7, #52]	@ 0x34
  if (c->is_mqtt5) {
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c75c:	f003 0304 	and.w	r3, r3, #4
 801c760:	b2db      	uxtb	r3, r3
 801c762:	2b00      	cmp	r3, #0
 801c764:	d01c      	beq.n	801c7a0 <mg_mqtt_login+0x180>
    total_len += get_props_size(opts->props, opts->num_props);
 801c766:	683b      	ldr	r3, [r7, #0]
 801c768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c76a:	683b      	ldr	r3, [r7, #0]
 801c76c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c76e:	4619      	mov	r1, r3
 801c770:	4610      	mov	r0, r2
 801c772:	f7ff fdf3 	bl	801c35c <get_props_size>
 801c776:	4602      	mov	r2, r0
 801c778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c77a:	4413      	add	r3, r2
 801c77c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (hdr[7] & MQTT_HAS_WILL)
 801c77e:	7cfb      	ldrb	r3, [r7, #19]
 801c780:	f003 0304 	and.w	r3, r3, #4
 801c784:	2b00      	cmp	r3, #0
 801c786:	d00b      	beq.n	801c7a0 <mg_mqtt_login+0x180>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 801c788:	683b      	ldr	r3, [r7, #0]
 801c78a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c78c:	683b      	ldr	r3, [r7, #0]
 801c78e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c790:	4619      	mov	r1, r3
 801c792:	4610      	mov	r0, r2
 801c794:	f7ff fde2 	bl	801c35c <get_props_size>
 801c798:	4602      	mov	r2, r0
 801c79a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c79c:	4413      	add	r3, r2
 801c79e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 801c7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c7a2:	2200      	movs	r2, #0
 801c7a4:	2101      	movs	r1, #1
 801c7a6:	6878      	ldr	r0, [r7, #4]
 801c7a8:	f7ff fc48 	bl	801c03c <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 801c7ac:	f107 030c 	add.w	r3, r7, #12
 801c7b0:	2208      	movs	r2, #8
 801c7b2:	4619      	mov	r1, r3
 801c7b4:	6878      	ldr	r0, [r7, #4]
 801c7b6:	f004 fa6f 	bl	8020c98 <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 801c7ba:	683b      	ldr	r3, [r7, #0]
 801c7bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801c7be:	4618      	mov	r0, r3
 801c7c0:	f005 ffe3 	bl	802278a <mg_ntohs>
 801c7c4:	4603      	mov	r3, r0
 801c7c6:	4619      	mov	r1, r3
 801c7c8:	6878      	ldr	r0, [r7, #4]
 801c7ca:	f7ff fc7c 	bl	801c0c6 <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c7d4:	f003 0304 	and.w	r3, r3, #4
 801c7d8:	b2db      	uxtb	r3, r3
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d007      	beq.n	801c7ee <mg_mqtt_login+0x1ce>
 801c7de:	683b      	ldr	r3, [r7, #0]
 801c7e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801c7e2:	683b      	ldr	r3, [r7, #0]
 801c7e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c7e6:	461a      	mov	r2, r3
 801c7e8:	6878      	ldr	r0, [r7, #4]
 801c7ea:	f7ff fdcf 	bl	801c38c <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 801c7ee:	69bb      	ldr	r3, [r7, #24]
 801c7f0:	b29b      	uxth	r3, r3
 801c7f2:	4618      	mov	r0, r3
 801c7f4:	f005 ffc9 	bl	802278a <mg_ntohs>
 801c7f8:	4603      	mov	r3, r0
 801c7fa:	4619      	mov	r1, r3
 801c7fc:	6878      	ldr	r0, [r7, #4]
 801c7fe:	f7ff fc62 	bl	801c0c6 <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 801c802:	697b      	ldr	r3, [r7, #20]
 801c804:	69ba      	ldr	r2, [r7, #24]
 801c806:	4619      	mov	r1, r3
 801c808:	6878      	ldr	r0, [r7, #4]
 801c80a:	f004 fa45 	bl	8020c98 <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 801c80e:	7cfb      	ldrb	r3, [r7, #19]
 801c810:	f003 0304 	and.w	r3, r3, #4
 801c814:	2b00      	cmp	r3, #0
 801c816:	d035      	beq.n	801c884 <mg_mqtt_login+0x264>
    if (c->is_mqtt5)
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c81e:	f003 0304 	and.w	r3, r3, #4
 801c822:	b2db      	uxtb	r3, r3
 801c824:	2b00      	cmp	r3, #0
 801c826:	d007      	beq.n	801c838 <mg_mqtt_login+0x218>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 801c828:	683b      	ldr	r3, [r7, #0]
 801c82a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801c82c:	683b      	ldr	r3, [r7, #0]
 801c82e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c830:	461a      	mov	r2, r3
 801c832:	6878      	ldr	r0, [r7, #4]
 801c834:	f7ff fdaa 	bl	801c38c <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801c838:	683b      	ldr	r3, [r7, #0]
 801c83a:	69db      	ldr	r3, [r3, #28]
 801c83c:	b29b      	uxth	r3, r3
 801c83e:	4618      	mov	r0, r3
 801c840:	f005 ffa3 	bl	802278a <mg_ntohs>
 801c844:	4603      	mov	r3, r0
 801c846:	4619      	mov	r1, r3
 801c848:	6878      	ldr	r0, [r7, #4]
 801c84a:	f7ff fc3c 	bl	801c0c6 <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 801c84e:	683b      	ldr	r3, [r7, #0]
 801c850:	6999      	ldr	r1, [r3, #24]
 801c852:	683b      	ldr	r3, [r7, #0]
 801c854:	69db      	ldr	r3, [r3, #28]
 801c856:	461a      	mov	r2, r3
 801c858:	6878      	ldr	r0, [r7, #4]
 801c85a:	f004 fa1d 	bl	8020c98 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 801c85e:	683b      	ldr	r3, [r7, #0]
 801c860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c862:	b29b      	uxth	r3, r3
 801c864:	4618      	mov	r0, r3
 801c866:	f005 ff90 	bl	802278a <mg_ntohs>
 801c86a:	4603      	mov	r3, r0
 801c86c:	4619      	mov	r1, r3
 801c86e:	6878      	ldr	r0, [r7, #4]
 801c870:	f7ff fc29 	bl	801c0c6 <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 801c874:	683b      	ldr	r3, [r7, #0]
 801c876:	6a19      	ldr	r1, [r3, #32]
 801c878:	683b      	ldr	r3, [r7, #0]
 801c87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c87c:	461a      	mov	r2, r3
 801c87e:	6878      	ldr	r0, [r7, #4]
 801c880:	f004 fa0a 	bl	8020c98 <mg_send>
  }
  if (opts->user.len > 0) {
 801c884:	683b      	ldr	r3, [r7, #0]
 801c886:	685b      	ldr	r3, [r3, #4]
 801c888:	2b00      	cmp	r3, #0
 801c88a:	d012      	beq.n	801c8b2 <mg_mqtt_login+0x292>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 801c88c:	683b      	ldr	r3, [r7, #0]
 801c88e:	685b      	ldr	r3, [r3, #4]
 801c890:	b29b      	uxth	r3, r3
 801c892:	4618      	mov	r0, r3
 801c894:	f005 ff79 	bl	802278a <mg_ntohs>
 801c898:	4603      	mov	r3, r0
 801c89a:	4619      	mov	r1, r3
 801c89c:	6878      	ldr	r0, [r7, #4]
 801c89e:	f7ff fc12 	bl	801c0c6 <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 801c8a2:	683b      	ldr	r3, [r7, #0]
 801c8a4:	6819      	ldr	r1, [r3, #0]
 801c8a6:	683b      	ldr	r3, [r7, #0]
 801c8a8:	685b      	ldr	r3, [r3, #4]
 801c8aa:	461a      	mov	r2, r3
 801c8ac:	6878      	ldr	r0, [r7, #4]
 801c8ae:	f004 f9f3 	bl	8020c98 <mg_send>
  }
  if (opts->pass.len > 0) {
 801c8b2:	683b      	ldr	r3, [r7, #0]
 801c8b4:	68db      	ldr	r3, [r3, #12]
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d012      	beq.n	801c8e0 <mg_mqtt_login+0x2c0>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 801c8ba:	683b      	ldr	r3, [r7, #0]
 801c8bc:	68db      	ldr	r3, [r3, #12]
 801c8be:	b29b      	uxth	r3, r3
 801c8c0:	4618      	mov	r0, r3
 801c8c2:	f005 ff62 	bl	802278a <mg_ntohs>
 801c8c6:	4603      	mov	r3, r0
 801c8c8:	4619      	mov	r1, r3
 801c8ca:	6878      	ldr	r0, [r7, #4]
 801c8cc:	f7ff fbfb 	bl	801c0c6 <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 801c8d0:	683b      	ldr	r3, [r7, #0]
 801c8d2:	6899      	ldr	r1, [r3, #8]
 801c8d4:	683b      	ldr	r3, [r7, #0]
 801c8d6:	68db      	ldr	r3, [r3, #12]
 801c8d8:	461a      	mov	r2, r3
 801c8da:	6878      	ldr	r0, [r7, #4]
 801c8dc:	f004 f9dc 	bl	8020c98 <mg_send>
  }
}
 801c8e0:	bf00      	nop
 801c8e2:	3738      	adds	r7, #56	@ 0x38
 801c8e4:	46bd      	mov	sp, r7
 801c8e6:	bd80      	pop	{r7, pc}

0801c8e8 <mg_mqtt_pub>:

uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801c8e8:	b590      	push	{r4, r7, lr}
 801c8ea:	b087      	sub	sp, #28
 801c8ec:	af02      	add	r7, sp, #8
 801c8ee:	6078      	str	r0, [r7, #4]
 801c8f0:	6039      	str	r1, [r7, #0]
  uint16_t id = opts->retransmit_id;
 801c8f2:	683b      	ldr	r3, [r7, #0]
 801c8f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801c8f6:	81fb      	strh	r3, [r7, #14]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 801c8f8:	683b      	ldr	r3, [r7, #0]
 801c8fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c8fe:	005b      	lsls	r3, r3, #1
 801c900:	b25b      	sxtb	r3, r3
 801c902:	f003 0306 	and.w	r3, r3, #6
 801c906:	b25b      	sxtb	r3, r3
 801c908:	683a      	ldr	r2, [r7, #0]
 801c90a:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 801c90e:	2a00      	cmp	r2, #0
 801c910:	d001      	beq.n	801c916 <mg_mqtt_pub+0x2e>
 801c912:	2201      	movs	r2, #1
 801c914:	e000      	b.n	801c918 <mg_mqtt_pub+0x30>
 801c916:	2200      	movs	r2, #0
 801c918:	4313      	orrs	r3, r2
 801c91a:	b25b      	sxtb	r3, r3
 801c91c:	737b      	strb	r3, [r7, #13]
  size_t len = 2 + opts->topic.len + opts->message.len;
 801c91e:	683b      	ldr	r3, [r7, #0]
 801c920:	69da      	ldr	r2, [r3, #28]
 801c922:	683b      	ldr	r3, [r7, #0]
 801c924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c926:	4413      	add	r3, r2
 801c928:	3302      	adds	r3, #2
 801c92a:	60bb      	str	r3, [r7, #8]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 801c92c:	4b51      	ldr	r3, [pc, #324]	@ (801ca74 <mg_mqtt_pub+0x18c>)
 801c92e:	681b      	ldr	r3, [r3, #0]
 801c930:	2b02      	cmp	r3, #2
 801c932:	dd19      	ble.n	801c968 <mg_mqtt_pub+0x80>
 801c934:	4b50      	ldr	r3, [pc, #320]	@ (801ca78 <mg_mqtt_pub+0x190>)
 801c936:	f241 123c 	movw	r2, #4412	@ 0x113c
 801c93a:	4950      	ldr	r1, [pc, #320]	@ (801ca7c <mg_mqtt_pub+0x194>)
 801c93c:	2003      	movs	r0, #3
 801c93e:	f7fe fa7d 	bl	801ae3c <mg_log_prefix>
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801c946:	683b      	ldr	r3, [r7, #0]
 801c948:	69db      	ldr	r3, [r3, #28]
 801c94a:	461c      	mov	r4, r3
 801c94c:	683b      	ldr	r3, [r7, #0]
 801c94e:	699a      	ldr	r2, [r3, #24]
 801c950:	683b      	ldr	r3, [r7, #0]
 801c952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c954:	4618      	mov	r0, r3
 801c956:	683b      	ldr	r3, [r7, #0]
 801c958:	6a1b      	ldr	r3, [r3, #32]
 801c95a:	9301      	str	r3, [sp, #4]
 801c95c:	9000      	str	r0, [sp, #0]
 801c95e:	4613      	mov	r3, r2
 801c960:	4622      	mov	r2, r4
 801c962:	4847      	ldr	r0, [pc, #284]	@ (801ca80 <mg_mqtt_pub+0x198>)
 801c964:	f7fe faba 	bl	801aedc <mg_log>
            (char *) opts->topic.buf, (int) opts->message.len,
            (char *) opts->message.buf));
  if (opts->qos > 0) len += 2;
 801c968:	683b      	ldr	r3, [r7, #0]
 801c96a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d002      	beq.n	801c978 <mg_mqtt_pub+0x90>
 801c972:	68bb      	ldr	r3, [r7, #8]
 801c974:	3302      	adds	r3, #2
 801c976:	60bb      	str	r3, [r7, #8]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c97e:	f003 0304 	and.w	r3, r3, #4
 801c982:	b2db      	uxtb	r3, r3
 801c984:	2b00      	cmp	r3, #0
 801c986:	d00b      	beq.n	801c9a0 <mg_mqtt_pub+0xb8>
 801c988:	683b      	ldr	r3, [r7, #0]
 801c98a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c98c:	683b      	ldr	r3, [r7, #0]
 801c98e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c990:	4619      	mov	r1, r3
 801c992:	4610      	mov	r0, r2
 801c994:	f7ff fce2 	bl	801c35c <get_props_size>
 801c998:	4602      	mov	r2, r0
 801c99a:	68bb      	ldr	r3, [r7, #8]
 801c99c:	4413      	add	r3, r2
 801c99e:	60bb      	str	r3, [r7, #8]

  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 801c9a0:	683b      	ldr	r3, [r7, #0]
 801c9a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d006      	beq.n	801c9b8 <mg_mqtt_pub+0xd0>
 801c9aa:	89fb      	ldrh	r3, [r7, #14]
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d003      	beq.n	801c9b8 <mg_mqtt_pub+0xd0>
 801c9b0:	7b7b      	ldrb	r3, [r7, #13]
 801c9b2:	f043 0308 	orr.w	r3, r3, #8
 801c9b6:	737b      	strb	r3, [r7, #13]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 801c9b8:	7b7a      	ldrb	r2, [r7, #13]
 801c9ba:	68bb      	ldr	r3, [r7, #8]
 801c9bc:	2103      	movs	r1, #3
 801c9be:	6878      	ldr	r0, [r7, #4]
 801c9c0:	f7ff fb3c 	bl	801c03c <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801c9c4:	683b      	ldr	r3, [r7, #0]
 801c9c6:	69db      	ldr	r3, [r3, #28]
 801c9c8:	b29b      	uxth	r3, r3
 801c9ca:	4618      	mov	r0, r3
 801c9cc:	f005 fedd 	bl	802278a <mg_ntohs>
 801c9d0:	4603      	mov	r3, r0
 801c9d2:	4619      	mov	r1, r3
 801c9d4:	6878      	ldr	r0, [r7, #4]
 801c9d6:	f7ff fb76 	bl	801c0c6 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 801c9da:	683b      	ldr	r3, [r7, #0]
 801c9dc:	6999      	ldr	r1, [r3, #24]
 801c9de:	683b      	ldr	r3, [r7, #0]
 801c9e0:	69db      	ldr	r3, [r3, #28]
 801c9e2:	461a      	mov	r2, r3
 801c9e4:	6878      	ldr	r0, [r7, #4]
 801c9e6:	f004 f957 	bl	8020c98 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 801c9ea:	683b      	ldr	r3, [r7, #0]
 801c9ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d01e      	beq.n	801ca32 <mg_mqtt_pub+0x14a>
    if (id == 0) {  // generate new one if not resending
 801c9f4:	89fb      	ldrh	r3, [r7, #14]
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d112      	bne.n	801ca20 <mg_mqtt_pub+0x138>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	685b      	ldr	r3, [r3, #4]
 801c9fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801ca00:	3201      	adds	r2, #1
 801ca02:	b292      	uxth	r2, r2
 801ca04:	859a      	strh	r2, [r3, #44]	@ 0x2c
 801ca06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d105      	bne.n	801ca18 <mg_mqtt_pub+0x130>
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	685b      	ldr	r3, [r3, #4]
 801ca10:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801ca12:	3201      	adds	r2, #1
 801ca14:	b292      	uxth	r2, r2
 801ca16:	859a      	strh	r2, [r3, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	685b      	ldr	r3, [r3, #4]
 801ca1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801ca1e:	81fb      	strh	r3, [r7, #14]
    }
    mg_send_u16(c, mg_htons(id));
 801ca20:	89fb      	ldrh	r3, [r7, #14]
 801ca22:	4618      	mov	r0, r3
 801ca24:	f005 feb1 	bl	802278a <mg_ntohs>
 801ca28:	4603      	mov	r3, r0
 801ca2a:	4619      	mov	r1, r3
 801ca2c:	6878      	ldr	r0, [r7, #4]
 801ca2e:	f7ff fb4a 	bl	801c0c6 <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ca38:	f003 0304 	and.w	r3, r3, #4
 801ca3c:	b2db      	uxtb	r3, r3
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d007      	beq.n	801ca52 <mg_mqtt_pub+0x16a>
 801ca42:	683b      	ldr	r3, [r7, #0]
 801ca44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801ca46:	683b      	ldr	r3, [r7, #0]
 801ca48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ca4a:	461a      	mov	r2, r3
 801ca4c:	6878      	ldr	r0, [r7, #4]
 801ca4e:	f7ff fc9d 	bl	801c38c <mg_send_mqtt_properties>

  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 801ca52:	683b      	ldr	r3, [r7, #0]
 801ca54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca56:	2b00      	cmp	r3, #0
 801ca58:	d007      	beq.n	801ca6a <mg_mqtt_pub+0x182>
 801ca5a:	683b      	ldr	r3, [r7, #0]
 801ca5c:	6a19      	ldr	r1, [r3, #32]
 801ca5e:	683b      	ldr	r3, [r7, #0]
 801ca60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca62:	461a      	mov	r2, r3
 801ca64:	6878      	ldr	r0, [r7, #4]
 801ca66:	f004 f917 	bl	8020c98 <mg_send>
  return id;
 801ca6a:	89fb      	ldrh	r3, [r7, #14]
}
 801ca6c:	4618      	mov	r0, r3
 801ca6e:	3714      	adds	r7, #20
 801ca70:	46bd      	mov	sp, r7
 801ca72:	bd90      	pop	{r4, r7, pc}
 801ca74:	20000298 	.word	0x20000298
 801ca78:	08033e78 	.word	0x08033e78
 801ca7c:	080310c8 	.word	0x080310c8
 801ca80:	08032558 	.word	0x08032558

0801ca84 <mg_mqtt_sub>:

void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801ca84:	b580      	push	{r7, lr}
 801ca86:	b086      	sub	sp, #24
 801ca88:	af00      	add	r7, sp, #0
 801ca8a:	6078      	str	r0, [r7, #4]
 801ca8c:	6039      	str	r1, [r7, #0]
  uint8_t qos_ = opts->qos & 3;
 801ca8e:	683b      	ldr	r3, [r7, #0]
 801ca90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801ca94:	f003 0303 	and.w	r3, r3, #3
 801ca98:	b2db      	uxtb	r3, r3
 801ca9a:	73fb      	strb	r3, [r7, #15]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801caa2:	f003 0304 	and.w	r3, r3, #4
 801caa6:	b2db      	uxtb	r3, r3
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d009      	beq.n	801cac0 <mg_mqtt_sub+0x3c>
 801caac:	683b      	ldr	r3, [r7, #0]
 801caae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801cab0:	683b      	ldr	r3, [r7, #0]
 801cab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cab4:	4619      	mov	r1, r3
 801cab6:	4610      	mov	r0, r2
 801cab8:	f7ff fc50 	bl	801c35c <get_props_size>
 801cabc:	4603      	mov	r3, r0
 801cabe:	e000      	b.n	801cac2 <mg_mqtt_sub+0x3e>
 801cac0:	2300      	movs	r3, #0
 801cac2:	617b      	str	r3, [r7, #20]
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 801cac4:	683b      	ldr	r3, [r7, #0]
 801cac6:	69da      	ldr	r2, [r3, #28]
 801cac8:	697b      	ldr	r3, [r7, #20]
 801caca:	4413      	add	r3, r2
 801cacc:	3305      	adds	r3, #5
 801cace:	613b      	str	r3, [r7, #16]

  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 801cad0:	693b      	ldr	r3, [r7, #16]
 801cad2:	2202      	movs	r2, #2
 801cad4:	2108      	movs	r1, #8
 801cad6:	6878      	ldr	r0, [r7, #4]
 801cad8:	f7ff fab0 	bl	801c03c <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	685b      	ldr	r3, [r3, #4]
 801cae0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801cae2:	3201      	adds	r2, #1
 801cae4:	b292      	uxth	r2, r2
 801cae6:	859a      	strh	r2, [r3, #44]	@ 0x2c
 801cae8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801caea:	2b00      	cmp	r3, #0
 801caec:	d105      	bne.n	801cafa <mg_mqtt_sub+0x76>
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	685b      	ldr	r3, [r3, #4]
 801caf2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801caf4:	3201      	adds	r2, #1
 801caf6:	b292      	uxth	r2, r2
 801caf8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	685b      	ldr	r3, [r3, #4]
 801cafe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801cb00:	4618      	mov	r0, r3
 801cb02:	f005 fe42 	bl	802278a <mg_ntohs>
 801cb06:	4603      	mov	r3, r0
 801cb08:	4619      	mov	r1, r3
 801cb0a:	6878      	ldr	r0, [r7, #4]
 801cb0c:	f7ff fadb 	bl	801c0c6 <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cb16:	f003 0304 	and.w	r3, r3, #4
 801cb1a:	b2db      	uxtb	r3, r3
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d007      	beq.n	801cb30 <mg_mqtt_sub+0xac>
 801cb20:	683b      	ldr	r3, [r7, #0]
 801cb22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801cb24:	683b      	ldr	r3, [r7, #0]
 801cb26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cb28:	461a      	mov	r2, r3
 801cb2a:	6878      	ldr	r0, [r7, #4]
 801cb2c:	f7ff fc2e 	bl	801c38c <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801cb30:	683b      	ldr	r3, [r7, #0]
 801cb32:	69db      	ldr	r3, [r3, #28]
 801cb34:	b29b      	uxth	r3, r3
 801cb36:	4618      	mov	r0, r3
 801cb38:	f005 fe27 	bl	802278a <mg_ntohs>
 801cb3c:	4603      	mov	r3, r0
 801cb3e:	4619      	mov	r1, r3
 801cb40:	6878      	ldr	r0, [r7, #4]
 801cb42:	f7ff fac0 	bl	801c0c6 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 801cb46:	683b      	ldr	r3, [r7, #0]
 801cb48:	6999      	ldr	r1, [r3, #24]
 801cb4a:	683b      	ldr	r3, [r7, #0]
 801cb4c:	69db      	ldr	r3, [r3, #28]
 801cb4e:	461a      	mov	r2, r3
 801cb50:	6878      	ldr	r0, [r7, #4]
 801cb52:	f004 f8a1 	bl	8020c98 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 801cb56:	f107 030f 	add.w	r3, r7, #15
 801cb5a:	2201      	movs	r2, #1
 801cb5c:	4619      	mov	r1, r3
 801cb5e:	6878      	ldr	r0, [r7, #4]
 801cb60:	f004 f89a 	bl	8020c98 <mg_send>
}
 801cb64:	bf00      	nop
 801cb66:	3718      	adds	r7, #24
 801cb68:	46bd      	mov	sp, r7
 801cb6a:	bd80      	pop	{r7, pc}

0801cb6c <mg_mqtt_parse>:

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 801cb6c:	b580      	push	{r7, lr}
 801cb6e:	b08a      	sub	sp, #40	@ 0x28
 801cb70:	af00      	add	r7, sp, #0
 801cb72:	60f8      	str	r0, [r7, #12]
 801cb74:	60b9      	str	r1, [r7, #8]
 801cb76:	603b      	str	r3, [r7, #0]
 801cb78:	4613      	mov	r3, r2
 801cb7a:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 801cb7c:	2300      	movs	r3, #0
 801cb7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t n = 0, len_len = 0;
 801cb82:	2300      	movs	r3, #0
 801cb84:	61fb      	str	r3, [r7, #28]
 801cb86:	2300      	movs	r3, #0
 801cb88:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 801cb8a:	2228      	movs	r2, #40	@ 0x28
 801cb8c:	2100      	movs	r1, #0
 801cb8e:	6838      	ldr	r0, [r7, #0]
 801cb90:	f008 ff5e 	bl	8025a50 <memset>
  m->dgram.buf = (char *) buf;
 801cb94:	683b      	ldr	r3, [r7, #0]
 801cb96:	68fa      	ldr	r2, [r7, #12]
 801cb98:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 801cb9a:	68bb      	ldr	r3, [r7, #8]
 801cb9c:	2b01      	cmp	r3, #1
 801cb9e:	d801      	bhi.n	801cba4 <mg_mqtt_parse+0x38>
 801cba0:	2301      	movs	r3, #1
 801cba2:	e104      	b.n	801cdae <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 801cba4:	68fb      	ldr	r3, [r7, #12]
 801cba6:	781b      	ldrb	r3, [r3, #0]
 801cba8:	091b      	lsrs	r3, r3, #4
 801cbaa:	b2da      	uxtb	r2, r3
 801cbac:	683b      	ldr	r3, [r7, #0]
 801cbae:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 801cbb0:	68fb      	ldr	r3, [r7, #12]
 801cbb2:	781b      	ldrb	r3, [r3, #0]
 801cbb4:	085b      	lsrs	r3, r3, #1
 801cbb6:	b2db      	uxtb	r3, r3
 801cbb8:	f003 0303 	and.w	r3, r3, #3
 801cbbc:	b2da      	uxtb	r2, r3
 801cbbe:	683b      	ldr	r3, [r7, #0]
 801cbc0:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 801cbc2:	2300      	movs	r3, #0
 801cbc4:	61bb      	str	r3, [r7, #24]
 801cbc6:	69bb      	ldr	r3, [r7, #24]
 801cbc8:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 801cbca:	68fb      	ldr	r3, [r7, #12]
 801cbcc:	3301      	adds	r3, #1
 801cbce:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 801cbd0:	e01f      	b.n	801cc12 <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 801cbd2:	6a3b      	ldr	r3, [r7, #32]
 801cbd4:	1c5a      	adds	r2, r3, #1
 801cbd6:	623a      	str	r2, [r7, #32]
 801cbd8:	781b      	ldrb	r3, [r3, #0]
 801cbda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 801cbde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbe2:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 801cbe6:	69ba      	ldr	r2, [r7, #24]
 801cbe8:	4613      	mov	r3, r2
 801cbea:	00db      	lsls	r3, r3, #3
 801cbec:	1a9b      	subs	r3, r3, r2
 801cbee:	fa01 f303 	lsl.w	r3, r1, r3
 801cbf2:	461a      	mov	r2, r3
 801cbf4:	69fb      	ldr	r3, [r7, #28]
 801cbf6:	4413      	add	r3, r2
 801cbf8:	61fb      	str	r3, [r7, #28]
    len_len++;
 801cbfa:	69bb      	ldr	r3, [r7, #24]
 801cbfc:	3301      	adds	r3, #1
 801cbfe:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 801cc00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	da0c      	bge.n	801cc22 <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 801cc08:	69bb      	ldr	r3, [r7, #24]
 801cc0a:	2b03      	cmp	r3, #3
 801cc0c:	d901      	bls.n	801cc12 <mg_mqtt_parse+0xa6>
 801cc0e:	2302      	movs	r3, #2
 801cc10:	e0cd      	b.n	801cdae <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 801cc12:	6a3a      	ldr	r2, [r7, #32]
 801cc14:	68fb      	ldr	r3, [r7, #12]
 801cc16:	1ad3      	subs	r3, r2, r3
 801cc18:	461a      	mov	r2, r3
 801cc1a:	68bb      	ldr	r3, [r7, #8]
 801cc1c:	4293      	cmp	r3, r2
 801cc1e:	d8d8      	bhi.n	801cbd2 <mg_mqtt_parse+0x66>
 801cc20:	e000      	b.n	801cc24 <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 801cc22:	bf00      	nop
  }
  end = p + n;
 801cc24:	6a3a      	ldr	r2, [r7, #32]
 801cc26:	69fb      	ldr	r3, [r7, #28]
 801cc28:	4413      	add	r3, r2
 801cc2a:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 801cc2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801cc30:	2b00      	cmp	r3, #0
 801cc32:	db05      	blt.n	801cc40 <mg_mqtt_parse+0xd4>
 801cc34:	68fa      	ldr	r2, [r7, #12]
 801cc36:	68bb      	ldr	r3, [r7, #8]
 801cc38:	4413      	add	r3, r2
 801cc3a:	697a      	ldr	r2, [r7, #20]
 801cc3c:	429a      	cmp	r2, r3
 801cc3e:	d901      	bls.n	801cc44 <mg_mqtt_parse+0xd8>
 801cc40:	2301      	movs	r3, #1
 801cc42:	e0b4      	b.n	801cdae <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 801cc44:	697a      	ldr	r2, [r7, #20]
 801cc46:	68fb      	ldr	r3, [r7, #12]
 801cc48:	1ad3      	subs	r3, r2, r3
 801cc4a:	461a      	mov	r2, r3
 801cc4c:	683b      	ldr	r3, [r7, #0]
 801cc4e:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 801cc50:	683b      	ldr	r3, [r7, #0]
 801cc52:	7e9b      	ldrb	r3, [r3, #26]
 801cc54:	2b0b      	cmp	r3, #11
 801cc56:	f300 80a8 	bgt.w	801cdaa <mg_mqtt_parse+0x23e>
 801cc5a:	2b04      	cmp	r3, #4
 801cc5c:	da10      	bge.n	801cc80 <mg_mqtt_parse+0x114>
 801cc5e:	2b02      	cmp	r3, #2
 801cc60:	d002      	beq.n	801cc68 <mg_mqtt_parse+0xfc>
 801cc62:	2b03      	cmp	r3, #3
 801cc64:	d024      	beq.n	801ccb0 <mg_mqtt_parse+0x144>
      m->data.buf = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 801cc66:	e0a0      	b.n	801cdaa <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 801cc68:	697a      	ldr	r2, [r7, #20]
 801cc6a:	6a3b      	ldr	r3, [r7, #32]
 801cc6c:	1ad3      	subs	r3, r2, r3
 801cc6e:	2b01      	cmp	r3, #1
 801cc70:	dc01      	bgt.n	801cc76 <mg_mqtt_parse+0x10a>
 801cc72:	2302      	movs	r3, #2
 801cc74:	e09b      	b.n	801cdae <mg_mqtt_parse+0x242>
      m->ack = p[1];
 801cc76:	6a3b      	ldr	r3, [r7, #32]
 801cc78:	785a      	ldrb	r2, [r3, #1]
 801cc7a:	683b      	ldr	r3, [r7, #0]
 801cc7c:	771a      	strb	r2, [r3, #28]
      break;
 801cc7e:	e095      	b.n	801cdac <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 801cc80:	6a3b      	ldr	r3, [r7, #32]
 801cc82:	3302      	adds	r3, #2
 801cc84:	697a      	ldr	r2, [r7, #20]
 801cc86:	429a      	cmp	r2, r3
 801cc88:	d201      	bcs.n	801cc8e <mg_mqtt_parse+0x122>
 801cc8a:	2302      	movs	r3, #2
 801cc8c:	e08f      	b.n	801cdae <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801cc8e:	6a3b      	ldr	r3, [r7, #32]
 801cc90:	781b      	ldrb	r3, [r3, #0]
 801cc92:	021b      	lsls	r3, r3, #8
 801cc94:	b21a      	sxth	r2, r3
 801cc96:	6a3b      	ldr	r3, [r7, #32]
 801cc98:	3301      	adds	r3, #1
 801cc9a:	781b      	ldrb	r3, [r3, #0]
 801cc9c:	b21b      	sxth	r3, r3
 801cc9e:	4313      	orrs	r3, r2
 801cca0:	b21b      	sxth	r3, r3
 801cca2:	b29a      	uxth	r2, r3
 801cca4:	683b      	ldr	r3, [r7, #0]
 801cca6:	831a      	strh	r2, [r3, #24]
      p += 2;
 801cca8:	6a3b      	ldr	r3, [r7, #32]
 801ccaa:	3302      	adds	r3, #2
 801ccac:	623b      	str	r3, [r7, #32]
      break;
 801ccae:	e07d      	b.n	801cdac <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 801ccb0:	6a3b      	ldr	r3, [r7, #32]
 801ccb2:	3302      	adds	r3, #2
 801ccb4:	697a      	ldr	r2, [r7, #20]
 801ccb6:	429a      	cmp	r2, r3
 801ccb8:	d201      	bcs.n	801ccbe <mg_mqtt_parse+0x152>
 801ccba:	2302      	movs	r3, #2
 801ccbc:	e077      	b.n	801cdae <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801ccbe:	6a3b      	ldr	r3, [r7, #32]
 801ccc0:	781b      	ldrb	r3, [r3, #0]
 801ccc2:	021b      	lsls	r3, r3, #8
 801ccc4:	b21a      	sxth	r2, r3
 801ccc6:	6a3b      	ldr	r3, [r7, #32]
 801ccc8:	3301      	adds	r3, #1
 801ccca:	781b      	ldrb	r3, [r3, #0]
 801cccc:	b21b      	sxth	r3, r3
 801ccce:	4313      	orrs	r3, r2
 801ccd0:	b21b      	sxth	r3, r3
 801ccd2:	b29b      	uxth	r3, r3
 801ccd4:	461a      	mov	r2, r3
 801ccd6:	683b      	ldr	r3, [r7, #0]
 801ccd8:	605a      	str	r2, [r3, #4]
      m->topic.buf = (char *) p + 2;
 801ccda:	6a3b      	ldr	r3, [r7, #32]
 801ccdc:	1c9a      	adds	r2, r3, #2
 801ccde:	683b      	ldr	r3, [r7, #0]
 801cce0:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 801cce2:	683b      	ldr	r3, [r7, #0]
 801cce4:	685b      	ldr	r3, [r3, #4]
 801cce6:	3302      	adds	r3, #2
 801cce8:	6a3a      	ldr	r2, [r7, #32]
 801ccea:	4413      	add	r3, r2
 801ccec:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801ccee:	6a3a      	ldr	r2, [r7, #32]
 801ccf0:	697b      	ldr	r3, [r7, #20]
 801ccf2:	429a      	cmp	r2, r3
 801ccf4:	d901      	bls.n	801ccfa <mg_mqtt_parse+0x18e>
 801ccf6:	2302      	movs	r3, #2
 801ccf8:	e059      	b.n	801cdae <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 801ccfa:	683b      	ldr	r3, [r7, #0]
 801ccfc:	7edb      	ldrb	r3, [r3, #27]
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d016      	beq.n	801cd30 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 801cd02:	6a3b      	ldr	r3, [r7, #32]
 801cd04:	3302      	adds	r3, #2
 801cd06:	697a      	ldr	r2, [r7, #20]
 801cd08:	429a      	cmp	r2, r3
 801cd0a:	d201      	bcs.n	801cd10 <mg_mqtt_parse+0x1a4>
 801cd0c:	2302      	movs	r3, #2
 801cd0e:	e04e      	b.n	801cdae <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801cd10:	6a3b      	ldr	r3, [r7, #32]
 801cd12:	781b      	ldrb	r3, [r3, #0]
 801cd14:	021b      	lsls	r3, r3, #8
 801cd16:	b21a      	sxth	r2, r3
 801cd18:	6a3b      	ldr	r3, [r7, #32]
 801cd1a:	3301      	adds	r3, #1
 801cd1c:	781b      	ldrb	r3, [r3, #0]
 801cd1e:	b21b      	sxth	r3, r3
 801cd20:	4313      	orrs	r3, r2
 801cd22:	b21b      	sxth	r3, r3
 801cd24:	b29a      	uxth	r2, r3
 801cd26:	683b      	ldr	r3, [r7, #0]
 801cd28:	831a      	strh	r2, [r3, #24]
        p += 2;
 801cd2a:	6a3b      	ldr	r3, [r7, #32]
 801cd2c:	3302      	adds	r3, #2
 801cd2e:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801cd30:	6a3a      	ldr	r2, [r7, #32]
 801cd32:	697b      	ldr	r3, [r7, #20]
 801cd34:	429a      	cmp	r2, r3
 801cd36:	d901      	bls.n	801cd3c <mg_mqtt_parse+0x1d0>
 801cd38:	2302      	movs	r3, #2
 801cd3a:	e038      	b.n	801cdae <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 801cd3c:	79fb      	ldrb	r3, [r7, #7]
 801cd3e:	2b05      	cmp	r3, #5
 801cd40:	d123      	bne.n	801cd8a <mg_mqtt_parse+0x21e>
 801cd42:	6a3b      	ldr	r3, [r7, #32]
 801cd44:	3302      	adds	r3, #2
 801cd46:	697a      	ldr	r2, [r7, #20]
 801cd48:	429a      	cmp	r2, r3
 801cd4a:	d91e      	bls.n	801cd8a <mg_mqtt_parse+0x21e>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 801cd4c:	697a      	ldr	r2, [r7, #20]
 801cd4e:	6a3b      	ldr	r3, [r7, #32]
 801cd50:	1ad3      	subs	r3, r2, r3
 801cd52:	4619      	mov	r1, r3
 801cd54:	683b      	ldr	r3, [r7, #0]
 801cd56:	3324      	adds	r3, #36	@ 0x24
 801cd58:	461a      	mov	r2, r3
 801cd5a:	6a38      	ldr	r0, [r7, #32]
 801cd5c:	f7ff fa0f 	bl	801c17e <decode_varint>
 801cd60:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 801cd62:	69bb      	ldr	r3, [r7, #24]
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d101      	bne.n	801cd6c <mg_mqtt_parse+0x200>
 801cd68:	2302      	movs	r3, #2
 801cd6a:	e020      	b.n	801cdae <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 801cd6c:	6a3a      	ldr	r2, [r7, #32]
 801cd6e:	69bb      	ldr	r3, [r7, #24]
 801cd70:	441a      	add	r2, r3
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	1ad3      	subs	r3, r2, r3
 801cd76:	461a      	mov	r2, r3
 801cd78:	683b      	ldr	r3, [r7, #0]
 801cd7a:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 801cd7c:	683b      	ldr	r3, [r7, #0]
 801cd7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801cd80:	69bb      	ldr	r3, [r7, #24]
 801cd82:	4413      	add	r3, r2
 801cd84:	6a3a      	ldr	r2, [r7, #32]
 801cd86:	4413      	add	r3, r2
 801cd88:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801cd8a:	6a3a      	ldr	r2, [r7, #32]
 801cd8c:	697b      	ldr	r3, [r7, #20]
 801cd8e:	429a      	cmp	r2, r3
 801cd90:	d901      	bls.n	801cd96 <mg_mqtt_parse+0x22a>
 801cd92:	2302      	movs	r3, #2
 801cd94:	e00b      	b.n	801cdae <mg_mqtt_parse+0x242>
      m->data.buf = (char *) p;
 801cd96:	683b      	ldr	r3, [r7, #0]
 801cd98:	6a3a      	ldr	r2, [r7, #32]
 801cd9a:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 801cd9c:	697a      	ldr	r2, [r7, #20]
 801cd9e:	6a3b      	ldr	r3, [r7, #32]
 801cda0:	1ad3      	subs	r3, r2, r3
 801cda2:	461a      	mov	r2, r3
 801cda4:	683b      	ldr	r3, [r7, #0]
 801cda6:	60da      	str	r2, [r3, #12]
      break;
 801cda8:	e000      	b.n	801cdac <mg_mqtt_parse+0x240>
      break;
 801cdaa:	bf00      	nop
  }
  return MQTT_OK;
 801cdac:	2300      	movs	r3, #0
}
 801cdae:	4618      	mov	r0, r3
 801cdb0:	3728      	adds	r7, #40	@ 0x28
 801cdb2:	46bd      	mov	sp, r7
 801cdb4:	bd80      	pop	{r7, pc}
	...

0801cdb8 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 801cdb8:	b590      	push	{r4, r7, lr}
 801cdba:	b099      	sub	sp, #100	@ 0x64
 801cdbc:	af02      	add	r7, sp, #8
 801cdbe:	60f8      	str	r0, [r7, #12]
 801cdc0:	60b9      	str	r1, [r7, #8]
 801cdc2:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 801cdc4:	68bb      	ldr	r3, [r7, #8]
 801cdc6:	2b07      	cmp	r3, #7
 801cdc8:	f040 8124 	bne.w	801d014 <mqtt_cb+0x25c>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 801cdcc:	68fb      	ldr	r3, [r7, #12]
 801cdce:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cdd2:	f003 0304 	and.w	r3, r3, #4
 801cdd6:	b2db      	uxtb	r3, r3
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d001      	beq.n	801cde0 <mqtt_cb+0x28>
 801cddc:	2305      	movs	r3, #5
 801cdde:	e000      	b.n	801cde2 <mqtt_cb+0x2a>
 801cde0:	2304      	movs	r3, #4
 801cde2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 801cde6:	68fb      	ldr	r3, [r7, #12]
 801cde8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801cdea:	68fb      	ldr	r3, [r7, #12]
 801cdec:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801cdee:	f107 0314 	add.w	r3, r7, #20
 801cdf2:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801cdf6:	f7ff feb9 	bl	801cb6c <mg_mqtt_parse>
 801cdfa:	64f8      	str	r0, [r7, #76]	@ 0x4c
      if (rc == MQTT_MALFORMED) {
 801cdfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cdfe:	2b02      	cmp	r3, #2
 801ce00:	d118      	bne.n	801ce34 <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 801ce02:	4b86      	ldr	r3, [pc, #536]	@ (801d01c <mqtt_cb+0x264>)
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	dd0c      	ble.n	801ce24 <mqtt_cb+0x6c>
 801ce0a:	4b85      	ldr	r3, [pc, #532]	@ (801d020 <mqtt_cb+0x268>)
 801ce0c:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 801ce10:	4984      	ldr	r1, [pc, #528]	@ (801d024 <mqtt_cb+0x26c>)
 801ce12:	2001      	movs	r0, #1
 801ce14:	f7fe f812 	bl	801ae3c <mg_log_prefix>
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ce1c:	4619      	mov	r1, r3
 801ce1e:	4882      	ldr	r0, [pc, #520]	@ (801d028 <mqtt_cb+0x270>)
 801ce20:	f7fe f85c 	bl	801aedc <mg_log>
        c->is_closing = 1;
 801ce24:	68fa      	ldr	r2, [r7, #12]
 801ce26:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801ce2a:	f043 0320 	orr.w	r3, r3, #32
 801ce2e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        break;
 801ce32:	e0ef      	b.n	801d014 <mqtt_cb+0x25c>
      } else if (rc == MQTT_OK) {
 801ce34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	f040 80eb 	bne.w	801d012 <mqtt_cb+0x25a>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 801ce3c:	4b77      	ldr	r3, [pc, #476]	@ (801d01c <mqtt_cb+0x264>)
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	2b03      	cmp	r3, #3
 801ce42:	dd17      	ble.n	801ce74 <mqtt_cb+0xbc>
 801ce44:	4b76      	ldr	r3, [pc, #472]	@ (801d020 <mqtt_cb+0x268>)
 801ce46:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 801ce4a:	4976      	ldr	r1, [pc, #472]	@ (801d024 <mqtt_cb+0x26c>)
 801ce4c:	2004      	movs	r0, #4
 801ce4e:	f7fd fff5 	bl	801ae3c <mg_log_prefix>
 801ce52:	68fb      	ldr	r3, [r7, #12]
 801ce54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801ce56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801ce5a:	4618      	mov	r0, r3
 801ce5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce5e:	461c      	mov	r4, r3
 801ce60:	6a3b      	ldr	r3, [r7, #32]
 801ce62:	461a      	mov	r2, r3
 801ce64:	69fb      	ldr	r3, [r7, #28]
 801ce66:	9301      	str	r3, [sp, #4]
 801ce68:	9200      	str	r2, [sp, #0]
 801ce6a:	4623      	mov	r3, r4
 801ce6c:	4602      	mov	r2, r0
 801ce6e:	486f      	ldr	r0, [pc, #444]	@ (801d02c <mqtt_cb+0x274>)
 801ce70:	f7fe f834 	bl	801aedc <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.buf));
        switch (mm.cmd) {
 801ce74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801ce78:	3b02      	subs	r3, #2
 801ce7a:	2b04      	cmp	r3, #4
 801ce7c:	f200 80ba 	bhi.w	801cff4 <mqtt_cb+0x23c>
 801ce80:	a201      	add	r2, pc, #4	@ (adr r2, 801ce88 <mqtt_cb+0xd0>)
 801ce82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ce86:	bf00      	nop
 801ce88:	0801ce9d 	.word	0x0801ce9d
 801ce8c:	0801cf11 	.word	0x0801cf11
 801ce90:	0801cff5 	.word	0x0801cff5
 801ce94:	0801cf9b 	.word	0x0801cf9b
 801ce98:	0801cfc7 	.word	0x0801cfc7
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 801ce9c:	f107 0314 	add.w	r3, r7, #20
 801cea0:	331c      	adds	r3, #28
 801cea2:	461a      	mov	r2, r3
 801cea4:	2111      	movs	r1, #17
 801cea6:	68f8      	ldr	r0, [r7, #12]
 801cea8:	f7f8 fbe2 	bl	8015670 <mg_call>
            if (mm.ack == 0) {
 801ceac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d112      	bne.n	801ceda <mqtt_cb+0x122>
              MG_DEBUG(("%lu Connected", c->id));
 801ceb4:	4b59      	ldr	r3, [pc, #356]	@ (801d01c <mqtt_cb+0x264>)
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	2b02      	cmp	r3, #2
 801ceba:	f340 809a 	ble.w	801cff2 <mqtt_cb+0x23a>
 801cebe:	4b58      	ldr	r3, [pc, #352]	@ (801d020 <mqtt_cb+0x268>)
 801cec0:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 801cec4:	4957      	ldr	r1, [pc, #348]	@ (801d024 <mqtt_cb+0x26c>)
 801cec6:	2003      	movs	r0, #3
 801cec8:	f7fd ffb8 	bl	801ae3c <mg_log_prefix>
 801cecc:	68fb      	ldr	r3, [r7, #12]
 801cece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ced0:	4619      	mov	r1, r3
 801ced2:	4857      	ldr	r0, [pc, #348]	@ (801d030 <mqtt_cb+0x278>)
 801ced4:	f7fe f802 	bl	801aedc <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 801ced8:	e08b      	b.n	801cff2 <mqtt_cb+0x23a>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 801ceda:	4b50      	ldr	r3, [pc, #320]	@ (801d01c <mqtt_cb+0x264>)
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	2b00      	cmp	r3, #0
 801cee0:	dd0e      	ble.n	801cf00 <mqtt_cb+0x148>
 801cee2:	4b4f      	ldr	r3, [pc, #316]	@ (801d020 <mqtt_cb+0x268>)
 801cee4:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 801cee8:	494e      	ldr	r1, [pc, #312]	@ (801d024 <mqtt_cb+0x26c>)
 801ceea:	2001      	movs	r0, #1
 801ceec:	f7fd ffa6 	bl	801ae3c <mg_log_prefix>
 801cef0:	68fb      	ldr	r3, [r7, #12]
 801cef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cef4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801cef8:	4619      	mov	r1, r3
 801cefa:	484e      	ldr	r0, [pc, #312]	@ (801d034 <mqtt_cb+0x27c>)
 801cefc:	f7fd ffee 	bl	801aedc <mg_log>
              c->is_closing = 1;
 801cf00:	68fa      	ldr	r2, [r7, #12]
 801cf02:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801cf06:	f043 0320 	orr.w	r3, r3, #32
 801cf0a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
            break;
 801cf0e:	e070      	b.n	801cff2 <mqtt_cb+0x23a>
          case MQTT_CMD_PUBLISH: {
            /*MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
                      mm.topic.buf, (int) mm.data.len, mm.data.buf));*/
            if (mm.qos > 0) {
 801cf10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d038      	beq.n	801cf8a <mqtt_cb+0x1d2>
              uint16_t id = mg_ntohs(mm.id);
 801cf18:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801cf1a:	4618      	mov	r0, r3
 801cf1c:	f005 fc35 	bl	802278a <mg_ntohs>
 801cf20:	4603      	mov	r3, r0
 801cf22:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
              uint32_t remaining_len = sizeof(id);
 801cf26:	2302      	movs	r3, #2
 801cf28:	657b      	str	r3, [r7, #84]	@ 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 801cf2a:	68fb      	ldr	r3, [r7, #12]
 801cf2c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cf30:	f003 0304 	and.w	r3, r3, #4
 801cf34:	b2db      	uxtb	r3, r3
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d002      	beq.n	801cf40 <mqtt_cb+0x188>
 801cf3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cf3c:	3302      	adds	r3, #2
 801cf3e:	657b      	str	r3, [r7, #84]	@ 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 801cf40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
              mg_mqtt_send_header(
 801cf44:	2b02      	cmp	r3, #2
 801cf46:	d101      	bne.n	801cf4c <mqtt_cb+0x194>
 801cf48:	2105      	movs	r1, #5
 801cf4a:	e000      	b.n	801cf4e <mqtt_cb+0x196>
 801cf4c:	2104      	movs	r1, #4
 801cf4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cf50:	2200      	movs	r2, #0
 801cf52:	68f8      	ldr	r0, [r7, #12]
 801cf54:	f7ff f872 	bl	801c03c <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 801cf58:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 801cf5c:	2202      	movs	r2, #2
 801cf5e:	4619      	mov	r1, r3
 801cf60:	68f8      	ldr	r0, [r7, #12]
 801cf62:	f003 fe99 	bl	8020c98 <mg_send>

              if (c->is_mqtt5) {
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cf6c:	f003 0304 	and.w	r3, r3, #4
 801cf70:	b2db      	uxtb	r3, r3
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d009      	beq.n	801cf8a <mqtt_cb+0x1d2>
                uint16_t zero = 0;
 801cf76:	2300      	movs	r3, #0
 801cf78:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                mg_send(c, &zero, sizeof(zero));
 801cf7c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801cf80:	2202      	movs	r2, #2
 801cf82:	4619      	mov	r1, r3
 801cf84:	68f8      	ldr	r0, [r7, #12]
 801cf86:	f003 fe87 	bl	8020c98 <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 801cf8a:	f107 0314 	add.w	r3, r7, #20
 801cf8e:	461a      	mov	r2, r3
 801cf90:	2110      	movs	r1, #16
 801cf92:	68f8      	ldr	r0, [r7, #12]
 801cf94:	f7f8 fb6c 	bl	8015670 <mg_call>
            break;
 801cf98:	e02c      	b.n	801cff4 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 801cf9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	f005 fbf4 	bl	802278a <mg_ntohs>
 801cfa2:	4603      	mov	r3, r0
 801cfa4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 801cfa6:	2302      	movs	r3, #2
 801cfa8:	647b      	str	r3, [r7, #68]	@ 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 801cfaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cfac:	2202      	movs	r2, #2
 801cfae:	2106      	movs	r1, #6
 801cfb0:	68f8      	ldr	r0, [r7, #12]
 801cfb2:	f7ff f843 	bl	801c03c <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 801cfb6:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 801cfba:	2202      	movs	r2, #2
 801cfbc:	4619      	mov	r1, r3
 801cfbe:	68f8      	ldr	r0, [r7, #12]
 801cfc0:	f003 fe6a 	bl	8020c98 <mg_send>
            break;
 801cfc4:	e016      	b.n	801cff4 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 801cfc6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801cfc8:	4618      	mov	r0, r3
 801cfca:	f005 fbde 	bl	802278a <mg_ntohs>
 801cfce:	4603      	mov	r3, r0
 801cfd0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 801cfd2:	2302      	movs	r3, #2
 801cfd4:	64bb      	str	r3, [r7, #72]	@ 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 801cfd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cfd8:	2200      	movs	r2, #0
 801cfda:	2107      	movs	r1, #7
 801cfdc:	68f8      	ldr	r0, [r7, #12]
 801cfde:	f7ff f82d 	bl	801c03c <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 801cfe2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801cfe6:	2202      	movs	r2, #2
 801cfe8:	4619      	mov	r1, r3
 801cfea:	68f8      	ldr	r0, [r7, #12]
 801cfec:	f003 fe54 	bl	8020c98 <mg_send>
            break;
 801cff0:	e000      	b.n	801cff4 <mqtt_cb+0x23c>
            break;
 801cff2:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 801cff4:	f107 0314 	add.w	r3, r7, #20
 801cff8:	461a      	mov	r2, r3
 801cffa:	210f      	movs	r1, #15
 801cffc:	68f8      	ldr	r0, [r7, #12]
 801cffe:	f7f8 fb37 	bl	8015670 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 801d002:	68fb      	ldr	r3, [r7, #12]
 801d004:	3338      	adds	r3, #56	@ 0x38
 801d006:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d008:	2100      	movs	r1, #0
 801d00a:	4618      	mov	r0, r3
 801d00c:	f7fd f804 	bl	801a018 <mg_iobuf_del>
    for (;;) {
 801d010:	e6dc      	b.n	801cdcc <mqtt_cb+0x14>
      } else {
        break;
 801d012:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 801d014:	bf00      	nop
 801d016:	375c      	adds	r7, #92	@ 0x5c
 801d018:	46bd      	mov	sp, r7
 801d01a:	bd90      	pop	{r4, r7, pc}
 801d01c:	20000298 	.word	0x20000298
 801d020:	08033e84 	.word	0x08033e84
 801d024:	080310c8 	.word	0x080310c8
 801d028:	08032570 	.word	0x08032570
 801d02c:	0803258c 	.word	0x0803258c
 801d030:	080325ac 	.word	0x080325ac
 801d034:	080325bc 	.word	0x080325bc

0801d038 <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 801d038:	b580      	push	{r7, lr}
 801d03a:	b096      	sub	sp, #88	@ 0x58
 801d03c:	af00      	add	r7, sp, #0
 801d03e:	60f8      	str	r0, [r7, #12]
 801d040:	60b9      	str	r1, [r7, #8]
 801d042:	607a      	str	r2, [r7, #4]
 801d044:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 801d046:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d048:	683a      	ldr	r2, [r7, #0]
 801d04a:	68b9      	ldr	r1, [r7, #8]
 801d04c:	68f8      	ldr	r0, [r7, #12]
 801d04e:	f000 fb5f 	bl	801d710 <mg_connect>
 801d052:	6578      	str	r0, [r7, #84]	@ 0x54
  if (c != NULL) {
 801d054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d056:	2b00      	cmp	r3, #0
 801d058:	d015      	beq.n	801d086 <mg_mqtt_connect+0x4e>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 801d05a:	f107 0314 	add.w	r3, r7, #20
 801d05e:	2240      	movs	r2, #64	@ 0x40
 801d060:	2100      	movs	r1, #0
 801d062:	4618      	mov	r0, r3
 801d064:	f008 fcf4 	bl	8025a50 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	d102      	bne.n	801d074 <mg_mqtt_connect+0x3c>
 801d06e:	f107 0314 	add.w	r3, r7, #20
 801d072:	e000      	b.n	801d076 <mg_mqtt_connect+0x3e>
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	4619      	mov	r1, r3
 801d078:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801d07a:	f7ff fad1 	bl	801c620 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 801d07e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d080:	4a03      	ldr	r2, [pc, #12]	@ (801d090 <mg_mqtt_connect+0x58>)
 801d082:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
  return c;
 801d086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 801d088:	4618      	mov	r0, r3
 801d08a:	3758      	adds	r7, #88	@ 0x58
 801d08c:	46bd      	mov	sp, r7
 801d08e:	bd80      	pop	{r7, pc}
 801d090:	0801cdb9 	.word	0x0801cdb9

0801d094 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 801d094:	b580      	push	{r7, lr}
 801d096:	b086      	sub	sp, #24
 801d098:	af00      	add	r7, sp, #0
 801d09a:	60f8      	str	r0, [r7, #12]
 801d09c:	60b9      	str	r1, [r7, #8]
 801d09e:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 801d0a0:	68fb      	ldr	r3, [r7, #12]
 801d0a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d0a4:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 801d0a6:	68fb      	ldr	r3, [r7, #12]
 801d0a8:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	68ba      	ldr	r2, [r7, #8]
 801d0b0:	4805      	ldr	r0, [pc, #20]	@ (801d0c8 <mg_vprintf+0x34>)
 801d0b2:	f7f9 f80f 	bl	80160d4 <mg_vxprintf>
  return c->send.len - old;
 801d0b6:	68fb      	ldr	r3, [r7, #12]
 801d0b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d0ba:	697b      	ldr	r3, [r7, #20]
 801d0bc:	1ad3      	subs	r3, r2, r3
}
 801d0be:	4618      	mov	r0, r3
 801d0c0:	3718      	adds	r7, #24
 801d0c2:	46bd      	mov	sp, r7
 801d0c4:	bd80      	pop	{r7, pc}
 801d0c6:	bf00      	nop
 801d0c8:	08020e05 	.word	0x08020e05

0801d0cc <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 801d0cc:	b40e      	push	{r1, r2, r3}
 801d0ce:	b580      	push	{r7, lr}
 801d0d0:	b085      	sub	sp, #20
 801d0d2:	af00      	add	r7, sp, #0
 801d0d4:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 801d0d6:	2300      	movs	r3, #0
 801d0d8:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 801d0da:	f107 0320 	add.w	r3, r7, #32
 801d0de:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 801d0e0:	f107 0308 	add.w	r3, r7, #8
 801d0e4:	461a      	mov	r2, r3
 801d0e6:	69f9      	ldr	r1, [r7, #28]
 801d0e8:	6878      	ldr	r0, [r7, #4]
 801d0ea:	f7ff ffd3 	bl	801d094 <mg_vprintf>
 801d0ee:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 801d0f0:	68fb      	ldr	r3, [r7, #12]
}
 801d0f2:	4618      	mov	r0, r3
 801d0f4:	3714      	adds	r7, #20
 801d0f6:	46bd      	mov	sp, r7
 801d0f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d0fc:	b003      	add	sp, #12
 801d0fe:	4770      	bx	lr

0801d100 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 801d100:	b580      	push	{r7, lr}
 801d102:	b088      	sub	sp, #32
 801d104:	af00      	add	r7, sp, #0
 801d106:	f107 0308 	add.w	r3, r7, #8
 801d10a:	e883 0003 	stmia.w	r3, {r0, r1}
 801d10e:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 801d110:	4811      	ldr	r0, [pc, #68]	@ (801d158 <mg_atonl+0x58>)
 801d112:	f005 fb21 	bl	8022758 <mg_ntohl>
 801d116:	4603      	mov	r3, r0
 801d118:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 801d11a:	f107 0318 	add.w	r3, r7, #24
 801d11e:	490f      	ldr	r1, [pc, #60]	@ (801d15c <mg_atonl+0x5c>)
 801d120:	4618      	mov	r0, r3
 801d122:	f004 fb8f 	bl	8021844 <mg_str_s>
 801d126:	f107 0318 	add.w	r3, r7, #24
 801d12a:	cb0c      	ldmia	r3, {r2, r3}
 801d12c:	f107 0108 	add.w	r1, r7, #8
 801d130:	c903      	ldmia	r1, {r0, r1}
 801d132:	f004 fc13 	bl	802195c <mg_strcasecmp>
 801d136:	4603      	mov	r3, r0
 801d138:	2b00      	cmp	r3, #0
 801d13a:	d001      	beq.n	801d140 <mg_atonl+0x40>
 801d13c:	2300      	movs	r3, #0
 801d13e:	e006      	b.n	801d14e <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	697a      	ldr	r2, [r7, #20]
 801d144:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	2200      	movs	r2, #0
 801d14a:	74da      	strb	r2, [r3, #19]
  return true;
 801d14c:	2301      	movs	r3, #1
}
 801d14e:	4618      	mov	r0, r3
 801d150:	3720      	adds	r7, #32
 801d152:	46bd      	mov	sp, r7
 801d154:	bd80      	pop	{r7, pc}
 801d156:	bf00      	nop
 801d158:	7f000001 	.word	0x7f000001
 801d15c:	080325dc 	.word	0x080325dc

0801d160 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 801d160:	b580      	push	{r7, lr}
 801d162:	b084      	sub	sp, #16
 801d164:	af00      	add	r7, sp, #0
 801d166:	f107 0308 	add.w	r3, r7, #8
 801d16a:	e883 0003 	stmia.w	r3, {r0, r1}
 801d16e:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	2b00      	cmp	r3, #0
 801d174:	d001      	beq.n	801d17a <mg_atone+0x1a>
 801d176:	2300      	movs	r3, #0
 801d178:	e009      	b.n	801d18e <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 801d17a:	687b      	ldr	r3, [r7, #4]
 801d17c:	2210      	movs	r2, #16
 801d17e:	2100      	movs	r1, #0
 801d180:	4618      	mov	r0, r3
 801d182:	f008 fc65 	bl	8025a50 <memset>
  addr->is_ip6 = false;
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	2200      	movs	r2, #0
 801d18a:	74da      	strb	r2, [r3, #19]
  return true;
 801d18c:	2301      	movs	r3, #1
}
 801d18e:	4618      	mov	r0, r3
 801d190:	3710      	adds	r7, #16
 801d192:	46bd      	mov	sp, r7
 801d194:	bd80      	pop	{r7, pc}

0801d196 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 801d196:	b480      	push	{r7}
 801d198:	b089      	sub	sp, #36	@ 0x24
 801d19a:	af00      	add	r7, sp, #0
 801d19c:	f107 0308 	add.w	r3, r7, #8
 801d1a0:	e883 0003 	stmia.w	r3, {r0, r1}
 801d1a4:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 801d1a6:	2300      	movs	r3, #0
 801d1a8:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 801d1aa:	2300      	movs	r3, #0
 801d1ac:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 801d1ae:	2300      	movs	r3, #0
 801d1b0:	61fb      	str	r3, [r7, #28]
 801d1b2:	e049      	b.n	801d248 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 801d1b4:	68ba      	ldr	r2, [r7, #8]
 801d1b6:	69fb      	ldr	r3, [r7, #28]
 801d1b8:	4413      	add	r3, r2
 801d1ba:	781b      	ldrb	r3, [r3, #0]
 801d1bc:	2b2f      	cmp	r3, #47	@ 0x2f
 801d1be:	d925      	bls.n	801d20c <mg_aton4+0x76>
 801d1c0:	68ba      	ldr	r2, [r7, #8]
 801d1c2:	69fb      	ldr	r3, [r7, #28]
 801d1c4:	4413      	add	r3, r2
 801d1c6:	781b      	ldrb	r3, [r3, #0]
 801d1c8:	2b39      	cmp	r3, #57	@ 0x39
 801d1ca:	d81f      	bhi.n	801d20c <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 801d1cc:	f107 0210 	add.w	r2, r7, #16
 801d1d0:	69bb      	ldr	r3, [r7, #24]
 801d1d2:	4413      	add	r3, r2
 801d1d4:	781b      	ldrb	r3, [r3, #0]
 801d1d6:	461a      	mov	r2, r3
 801d1d8:	4613      	mov	r3, r2
 801d1da:	009b      	lsls	r3, r3, #2
 801d1dc:	4413      	add	r3, r2
 801d1de:	005b      	lsls	r3, r3, #1
 801d1e0:	4619      	mov	r1, r3
 801d1e2:	68ba      	ldr	r2, [r7, #8]
 801d1e4:	69fb      	ldr	r3, [r7, #28]
 801d1e6:	4413      	add	r3, r2
 801d1e8:	781b      	ldrb	r3, [r3, #0]
 801d1ea:	3b30      	subs	r3, #48	@ 0x30
 801d1ec:	440b      	add	r3, r1
 801d1ee:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 801d1f0:	697b      	ldr	r3, [r7, #20]
 801d1f2:	2bff      	cmp	r3, #255	@ 0xff
 801d1f4:	dd01      	ble.n	801d1fa <mg_aton4+0x64>
 801d1f6:	2300      	movs	r3, #0
 801d1f8:	e03d      	b.n	801d276 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 801d1fa:	697b      	ldr	r3, [r7, #20]
 801d1fc:	b2d9      	uxtb	r1, r3
 801d1fe:	f107 0210 	add.w	r2, r7, #16
 801d202:	69bb      	ldr	r3, [r7, #24]
 801d204:	4413      	add	r3, r2
 801d206:	460a      	mov	r2, r1
 801d208:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 801d20a:	e01a      	b.n	801d242 <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 801d20c:	68ba      	ldr	r2, [r7, #8]
 801d20e:	69fb      	ldr	r3, [r7, #28]
 801d210:	4413      	add	r3, r2
 801d212:	781b      	ldrb	r3, [r3, #0]
 801d214:	2b2e      	cmp	r3, #46	@ 0x2e
 801d216:	d112      	bne.n	801d23e <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 801d218:	69bb      	ldr	r3, [r7, #24]
 801d21a:	2b02      	cmp	r3, #2
 801d21c:	d809      	bhi.n	801d232 <mg_aton4+0x9c>
 801d21e:	69fb      	ldr	r3, [r7, #28]
 801d220:	2b00      	cmp	r3, #0
 801d222:	d006      	beq.n	801d232 <mg_aton4+0x9c>
 801d224:	68ba      	ldr	r2, [r7, #8]
 801d226:	69fb      	ldr	r3, [r7, #28]
 801d228:	3b01      	subs	r3, #1
 801d22a:	4413      	add	r3, r2
 801d22c:	781b      	ldrb	r3, [r3, #0]
 801d22e:	2b2e      	cmp	r3, #46	@ 0x2e
 801d230:	d101      	bne.n	801d236 <mg_aton4+0xa0>
 801d232:	2300      	movs	r3, #0
 801d234:	e01f      	b.n	801d276 <mg_aton4+0xe0>
      num_dots++;
 801d236:	69bb      	ldr	r3, [r7, #24]
 801d238:	3301      	adds	r3, #1
 801d23a:	61bb      	str	r3, [r7, #24]
 801d23c:	e001      	b.n	801d242 <mg_aton4+0xac>
    } else {
      return false;
 801d23e:	2300      	movs	r3, #0
 801d240:	e019      	b.n	801d276 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 801d242:	69fb      	ldr	r3, [r7, #28]
 801d244:	3301      	adds	r3, #1
 801d246:	61fb      	str	r3, [r7, #28]
 801d248:	68fb      	ldr	r3, [r7, #12]
 801d24a:	69fa      	ldr	r2, [r7, #28]
 801d24c:	429a      	cmp	r2, r3
 801d24e:	d3b1      	bcc.n	801d1b4 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 801d250:	69bb      	ldr	r3, [r7, #24]
 801d252:	2b03      	cmp	r3, #3
 801d254:	d106      	bne.n	801d264 <mg_aton4+0xce>
 801d256:	68ba      	ldr	r2, [r7, #8]
 801d258:	69fb      	ldr	r3, [r7, #28]
 801d25a:	3b01      	subs	r3, #1
 801d25c:	4413      	add	r3, r2
 801d25e:	781b      	ldrb	r3, [r3, #0]
 801d260:	2b2e      	cmp	r3, #46	@ 0x2e
 801d262:	d101      	bne.n	801d268 <mg_aton4+0xd2>
 801d264:	2300      	movs	r3, #0
 801d266:	e006      	b.n	801d276 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	693a      	ldr	r2, [r7, #16]
 801d26c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	2200      	movs	r2, #0
 801d272:	74da      	strb	r2, [r3, #19]
  return true;
 801d274:	2301      	movs	r3, #1
}
 801d276:	4618      	mov	r0, r3
 801d278:	3724      	adds	r7, #36	@ 0x24
 801d27a:	46bd      	mov	sp, r7
 801d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d280:	4770      	bx	lr

0801d282 <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 801d282:	b580      	push	{r7, lr}
 801d284:	b088      	sub	sp, #32
 801d286:	af00      	add	r7, sp, #0
 801d288:	f107 0308 	add.w	r3, r7, #8
 801d28c:	e883 0003 	stmia.w	r3, {r0, r1}
 801d290:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	2b0d      	cmp	r3, #13
 801d296:	d801      	bhi.n	801d29c <mg_v4mapped+0x1a>
 801d298:	2300      	movs	r3, #0
 801d29a:	e056      	b.n	801d34a <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 801d29c:	68bb      	ldr	r3, [r7, #8]
 801d29e:	781b      	ldrb	r3, [r3, #0]
 801d2a0:	2b3a      	cmp	r3, #58	@ 0x3a
 801d2a2:	d109      	bne.n	801d2b8 <mg_v4mapped+0x36>
 801d2a4:	68bb      	ldr	r3, [r7, #8]
 801d2a6:	3301      	adds	r3, #1
 801d2a8:	781b      	ldrb	r3, [r3, #0]
 801d2aa:	2b3a      	cmp	r3, #58	@ 0x3a
 801d2ac:	d104      	bne.n	801d2b8 <mg_v4mapped+0x36>
 801d2ae:	68bb      	ldr	r3, [r7, #8]
 801d2b0:	3306      	adds	r3, #6
 801d2b2:	781b      	ldrb	r3, [r3, #0]
 801d2b4:	2b3a      	cmp	r3, #58	@ 0x3a
 801d2b6:	d001      	beq.n	801d2bc <mg_v4mapped+0x3a>
 801d2b8:	2300      	movs	r3, #0
 801d2ba:	e046      	b.n	801d34a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 801d2bc:	2302      	movs	r3, #2
 801d2be:	61fb      	str	r3, [r7, #28]
 801d2c0:	e010      	b.n	801d2e4 <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 801d2c2:	68ba      	ldr	r2, [r7, #8]
 801d2c4:	69fb      	ldr	r3, [r7, #28]
 801d2c6:	4413      	add	r3, r2
 801d2c8:	781b      	ldrb	r3, [r3, #0]
 801d2ca:	2b66      	cmp	r3, #102	@ 0x66
 801d2cc:	d007      	beq.n	801d2de <mg_v4mapped+0x5c>
 801d2ce:	68ba      	ldr	r2, [r7, #8]
 801d2d0:	69fb      	ldr	r3, [r7, #28]
 801d2d2:	4413      	add	r3, r2
 801d2d4:	781b      	ldrb	r3, [r3, #0]
 801d2d6:	2b46      	cmp	r3, #70	@ 0x46
 801d2d8:	d001      	beq.n	801d2de <mg_v4mapped+0x5c>
 801d2da:	2300      	movs	r3, #0
 801d2dc:	e035      	b.n	801d34a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 801d2de:	69fb      	ldr	r3, [r7, #28]
 801d2e0:	3301      	adds	r3, #1
 801d2e2:	61fb      	str	r3, [r7, #28]
 801d2e4:	69fb      	ldr	r3, [r7, #28]
 801d2e6:	2b05      	cmp	r3, #5
 801d2e8:	ddeb      	ble.n	801d2c2 <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 801d2ea:	68bb      	ldr	r3, [r7, #8]
 801d2ec:	1dd9      	adds	r1, r3, #7
 801d2ee:	68fb      	ldr	r3, [r7, #12]
 801d2f0:	1fda      	subs	r2, r3, #7
 801d2f2:	f107 0314 	add.w	r3, r7, #20
 801d2f6:	4618      	mov	r0, r3
 801d2f8:	f004 fac1 	bl	802187e <mg_str_n>
 801d2fc:	687a      	ldr	r2, [r7, #4]
 801d2fe:	f107 0314 	add.w	r3, r7, #20
 801d302:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d306:	f7ff ff46 	bl	801d196 <mg_aton4>
 801d30a:	4603      	mov	r3, r0
 801d30c:	f083 0301 	eor.w	r3, r3, #1
 801d310:	b2db      	uxtb	r3, r3
 801d312:	2b00      	cmp	r3, #0
 801d314:	d001      	beq.n	801d31a <mg_v4mapped+0x98>
 801d316:	2300      	movs	r3, #0
 801d318:	e017      	b.n	801d34a <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	2210      	movs	r2, #16
 801d324:	2100      	movs	r1, #0
 801d326:	4618      	mov	r0, r3
 801d328:	f008 fb92 	bl	8025a50 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	22ff      	movs	r2, #255	@ 0xff
 801d330:	72da      	strb	r2, [r3, #11]
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	7ada      	ldrb	r2, [r3, #11]
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	330c      	adds	r3, #12
 801d33e:	693a      	ldr	r2, [r7, #16]
 801d340:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	2201      	movs	r2, #1
 801d346:	74da      	strb	r2, [r3, #19]
  return true;
 801d348:	2301      	movs	r3, #1
}
 801d34a:	4618      	mov	r0, r3
 801d34c:	3720      	adds	r7, #32
 801d34e:	46bd      	mov	sp, r7
 801d350:	bd80      	pop	{r7, pc}

0801d352 <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 801d352:	b580      	push	{r7, lr}
 801d354:	b090      	sub	sp, #64	@ 0x40
 801d356:	af02      	add	r7, sp, #8
 801d358:	f107 0308 	add.w	r3, r7, #8
 801d35c:	e883 0003 	stmia.w	r3, {r0, r1}
 801d360:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 801d362:	2300      	movs	r3, #0
 801d364:	633b      	str	r3, [r7, #48]	@ 0x30
 801d366:	2300      	movs	r3, #0
 801d368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d36a:	232a      	movs	r3, #42	@ 0x2a
 801d36c:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	2200      	movs	r2, #0
 801d372:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 801d374:	68fb      	ldr	r3, [r7, #12]
 801d376:	2b02      	cmp	r3, #2
 801d378:	d909      	bls.n	801d38e <mg_aton6+0x3c>
 801d37a:	68bb      	ldr	r3, [r7, #8]
 801d37c:	781b      	ldrb	r3, [r3, #0]
 801d37e:	2b5b      	cmp	r3, #91	@ 0x5b
 801d380:	d105      	bne.n	801d38e <mg_aton6+0x3c>
 801d382:	68bb      	ldr	r3, [r7, #8]
 801d384:	3301      	adds	r3, #1
 801d386:	60bb      	str	r3, [r7, #8]
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	3b02      	subs	r3, #2
 801d38c:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 801d38e:	687a      	ldr	r2, [r7, #4]
 801d390:	f107 0308 	add.w	r3, r7, #8
 801d394:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d398:	f7ff ff73 	bl	801d282 <mg_v4mapped>
 801d39c:	4603      	mov	r3, r0
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	d001      	beq.n	801d3a6 <mg_aton6+0x54>
 801d3a2:	2301      	movs	r3, #1
 801d3a4:	e0e1      	b.n	801d56a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 801d3a6:	2300      	movs	r3, #0
 801d3a8:	637b      	str	r3, [r7, #52]	@ 0x34
 801d3aa:	e0b0      	b.n	801d50e <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 801d3ac:	68ba      	ldr	r2, [r7, #8]
 801d3ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d3b0:	4413      	add	r3, r2
 801d3b2:	781b      	ldrb	r3, [r3, #0]
 801d3b4:	2b2f      	cmp	r3, #47	@ 0x2f
 801d3b6:	d905      	bls.n	801d3c4 <mg_aton6+0x72>
 801d3b8:	68ba      	ldr	r2, [r7, #8]
 801d3ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d3bc:	4413      	add	r3, r2
 801d3be:	781b      	ldrb	r3, [r3, #0]
 801d3c0:	2b39      	cmp	r3, #57	@ 0x39
 801d3c2:	d917      	bls.n	801d3f4 <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801d3c4:	68ba      	ldr	r2, [r7, #8]
 801d3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d3c8:	4413      	add	r3, r2
 801d3ca:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 801d3cc:	2b60      	cmp	r3, #96	@ 0x60
 801d3ce:	d905      	bls.n	801d3dc <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801d3d0:	68ba      	ldr	r2, [r7, #8]
 801d3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d3d4:	4413      	add	r3, r2
 801d3d6:	781b      	ldrb	r3, [r3, #0]
 801d3d8:	2b66      	cmp	r3, #102	@ 0x66
 801d3da:	d90b      	bls.n	801d3f4 <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801d3dc:	68ba      	ldr	r2, [r7, #8]
 801d3de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d3e0:	4413      	add	r3, r2
 801d3e2:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801d3e4:	2b40      	cmp	r3, #64	@ 0x40
 801d3e6:	d933      	bls.n	801d450 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801d3e8:	68ba      	ldr	r2, [r7, #8]
 801d3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d3ec:	4413      	add	r3, r2
 801d3ee:	781b      	ldrb	r3, [r3, #0]
 801d3f0:	2b46      	cmp	r3, #70	@ 0x46
 801d3f2:	d82d      	bhi.n	801d450 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 801d3f4:	2300      	movs	r3, #0
 801d3f6:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 801d3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d3fa:	3303      	adds	r3, #3
 801d3fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d3fe:	429a      	cmp	r2, r3
 801d400:	d901      	bls.n	801d406 <mg_aton6+0xb4>
 801d402:	2300      	movs	r3, #0
 801d404:	e0b1      	b.n	801d56a <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 801d406:	68ba      	ldr	r2, [r7, #8]
 801d408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d40a:	18d1      	adds	r1, r2, r3
 801d40c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d410:	1ad3      	subs	r3, r2, r3
 801d412:	1c5a      	adds	r2, r3, #1
 801d414:	f107 0318 	add.w	r3, r7, #24
 801d418:	4618      	mov	r0, r3
 801d41a:	f004 fa30 	bl	802187e <mg_str_n>
 801d41e:	f107 0314 	add.w	r3, r7, #20
 801d422:	2204      	movs	r2, #4
 801d424:	9200      	str	r2, [sp, #0]
 801d426:	2210      	movs	r2, #16
 801d428:	f107 0118 	add.w	r1, r7, #24
 801d42c:	c903      	ldmia	r1, {r0, r1}
 801d42e:	f004 fc2d 	bl	8021c8c <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 801d432:	697b      	ldr	r3, [r7, #20]
 801d434:	0a1b      	lsrs	r3, r3, #8
 801d436:	b2d9      	uxtb	r1, r3
 801d438:	687a      	ldr	r2, [r7, #4]
 801d43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d43c:	4413      	add	r3, r2
 801d43e:	460a      	mov	r2, r1
 801d440:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 801d442:	697a      	ldr	r2, [r7, #20]
 801d444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d446:	3301      	adds	r3, #1
 801d448:	b2d1      	uxtb	r1, r2
 801d44a:	687a      	ldr	r2, [r7, #4]
 801d44c:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801d44e:	e05b      	b.n	801d508 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 801d450:	68ba      	ldr	r2, [r7, #8]
 801d452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d454:	4413      	add	r3, r2
 801d456:	781b      	ldrb	r3, [r3, #0]
 801d458:	2b3a      	cmp	r3, #58	@ 0x3a
 801d45a:	d134      	bne.n	801d4c6 <mg_aton6+0x174>
      j = i + 1;
 801d45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d45e:	3301      	adds	r3, #1
 801d460:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 801d462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d464:	2b00      	cmp	r3, #0
 801d466:	d014      	beq.n	801d492 <mg_aton6+0x140>
 801d468:	68ba      	ldr	r2, [r7, #8]
 801d46a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d46c:	3b01      	subs	r3, #1
 801d46e:	4413      	add	r3, r2
 801d470:	781b      	ldrb	r3, [r3, #0]
 801d472:	2b3a      	cmp	r3, #58	@ 0x3a
 801d474:	d10d      	bne.n	801d492 <mg_aton6+0x140>
        dc = n;  // Double colon
 801d476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d478:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 801d47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d47c:	2b01      	cmp	r3, #1
 801d47e:	d90f      	bls.n	801d4a0 <mg_aton6+0x14e>
 801d480:	68ba      	ldr	r2, [r7, #8]
 801d482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d484:	3b02      	subs	r3, #2
 801d486:	4413      	add	r3, r2
 801d488:	781b      	ldrb	r3, [r3, #0]
 801d48a:	2b3a      	cmp	r3, #58	@ 0x3a
 801d48c:	d108      	bne.n	801d4a0 <mg_aton6+0x14e>
 801d48e:	2300      	movs	r3, #0
 801d490:	e06b      	b.n	801d56a <mg_aton6+0x218>
      } else if (i > 0) {
 801d492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d494:	2b00      	cmp	r3, #0
 801d496:	d004      	beq.n	801d4a2 <mg_aton6+0x150>
        n += 2;
 801d498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d49a:	3302      	adds	r3, #2
 801d49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d49e:	e000      	b.n	801d4a2 <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 801d4a0:	bf00      	nop
      }
      if (n > 14) return false;
 801d4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d4a4:	2b0e      	cmp	r3, #14
 801d4a6:	d901      	bls.n	801d4ac <mg_aton6+0x15a>
 801d4a8:	2300      	movs	r3, #0
 801d4aa:	e05e      	b.n	801d56a <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 801d4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d4ae:	3301      	adds	r3, #1
 801d4b0:	687a      	ldr	r2, [r7, #4]
 801d4b2:	2100      	movs	r1, #0
 801d4b4:	54d1      	strb	r1, [r2, r3]
 801d4b6:	687a      	ldr	r2, [r7, #4]
 801d4b8:	5cd1      	ldrb	r1, [r2, r3]
 801d4ba:	687a      	ldr	r2, [r7, #4]
 801d4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d4be:	4413      	add	r3, r2
 801d4c0:	460a      	mov	r2, r1
 801d4c2:	701a      	strb	r2, [r3, #0]
 801d4c4:	e020      	b.n	801d508 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 801d4c6:	68ba      	ldr	r2, [r7, #8]
 801d4c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d4ca:	4413      	add	r3, r2
 801d4cc:	781b      	ldrb	r3, [r3, #0]
 801d4ce:	2b25      	cmp	r3, #37	@ 0x25
 801d4d0:	d118      	bne.n	801d504 <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 801d4d2:	68ba      	ldr	r2, [r7, #8]
 801d4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d4d6:	3301      	adds	r3, #1
 801d4d8:	18d1      	adds	r1, r2, r3
 801d4da:	68fa      	ldr	r2, [r7, #12]
 801d4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d4de:	1ad3      	subs	r3, r2, r3
 801d4e0:	1e5a      	subs	r2, r3, #1
 801d4e2:	f107 0320 	add.w	r3, r7, #32
 801d4e6:	4618      	mov	r0, r3
 801d4e8:	f004 f9c9 	bl	802187e <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 801d4ec:	687b      	ldr	r3, [r7, #4]
 801d4ee:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 801d4f0:	2201      	movs	r2, #1
 801d4f2:	9200      	str	r2, [sp, #0]
 801d4f4:	220a      	movs	r2, #10
 801d4f6:	f107 0120 	add.w	r1, r7, #32
 801d4fa:	c903      	ldmia	r1, {r0, r1}
 801d4fc:	f004 fbc6 	bl	8021c8c <mg_str_to_num>
 801d500:	4603      	mov	r3, r0
 801d502:	e032      	b.n	801d56a <mg_aton6+0x218>
    } else {
      return false;
 801d504:	2300      	movs	r3, #0
 801d506:	e030      	b.n	801d56a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 801d508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d50a:	3301      	adds	r3, #1
 801d50c:	637b      	str	r3, [r7, #52]	@ 0x34
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d512:	429a      	cmp	r2, r3
 801d514:	f4ff af4a 	bcc.w	801d3ac <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 801d518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d51a:	2b0d      	cmp	r3, #13
 801d51c:	d804      	bhi.n	801d528 <mg_aton6+0x1d6>
 801d51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d520:	2b2a      	cmp	r3, #42	@ 0x2a
 801d522:	d101      	bne.n	801d528 <mg_aton6+0x1d6>
 801d524:	2300      	movs	r3, #0
 801d526:	e020      	b.n	801d56a <mg_aton6+0x218>
  if (n < 14) {
 801d528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d52a:	2b0d      	cmp	r3, #13
 801d52c:	d819      	bhi.n	801d562 <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 801d52e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d532:	1ad3      	subs	r3, r2, r3
 801d534:	330e      	adds	r3, #14
 801d536:	687a      	ldr	r2, [r7, #4]
 801d538:	18d0      	adds	r0, r2, r3
 801d53a:	687a      	ldr	r2, [r7, #4]
 801d53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d53e:	18d1      	adds	r1, r2, r3
 801d540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d544:	1ad3      	subs	r3, r2, r3
 801d546:	3302      	adds	r3, #2
 801d548:	461a      	mov	r2, r3
 801d54a:	f008 fa67 	bl	8025a1c <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 801d54e:	687a      	ldr	r2, [r7, #4]
 801d550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d552:	18d0      	adds	r0, r2, r3
 801d554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d556:	f1c3 030e 	rsb	r3, r3, #14
 801d55a:	461a      	mov	r2, r3
 801d55c:	2100      	movs	r1, #0
 801d55e:	f008 fa77 	bl	8025a50 <memset>
  }

  addr->is_ip6 = true;
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	2201      	movs	r2, #1
 801d566:	74da      	strb	r2, [r3, #19]
  return true;
 801d568:	2301      	movs	r3, #1
}
 801d56a:	4618      	mov	r0, r3
 801d56c:	3738      	adds	r7, #56	@ 0x38
 801d56e:	46bd      	mov	sp, r7
 801d570:	bd80      	pop	{r7, pc}

0801d572 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 801d572:	b580      	push	{r7, lr}
 801d574:	b084      	sub	sp, #16
 801d576:	af00      	add	r7, sp, #0
 801d578:	f107 0308 	add.w	r3, r7, #8
 801d57c:	e883 0003 	stmia.w	r3, {r0, r1}
 801d580:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 801d582:	687a      	ldr	r2, [r7, #4]
 801d584:	f107 0308 	add.w	r3, r7, #8
 801d588:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d58c:	f7ff fde8 	bl	801d160 <mg_atone>
 801d590:	4603      	mov	r3, r0
 801d592:	2b00      	cmp	r3, #0
 801d594:	d11d      	bne.n	801d5d2 <mg_aton+0x60>
 801d596:	687a      	ldr	r2, [r7, #4]
 801d598:	f107 0308 	add.w	r3, r7, #8
 801d59c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d5a0:	f7ff fdae 	bl	801d100 <mg_atonl>
 801d5a4:	4603      	mov	r3, r0
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d113      	bne.n	801d5d2 <mg_aton+0x60>
 801d5aa:	687a      	ldr	r2, [r7, #4]
 801d5ac:	f107 0308 	add.w	r3, r7, #8
 801d5b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d5b4:	f7ff fdef 	bl	801d196 <mg_aton4>
 801d5b8:	4603      	mov	r3, r0
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d109      	bne.n	801d5d2 <mg_aton+0x60>
         mg_aton6(str, addr);
 801d5be:	687a      	ldr	r2, [r7, #4]
 801d5c0:	f107 0308 	add.w	r3, r7, #8
 801d5c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d5c8:	f7ff fec3 	bl	801d352 <mg_aton6>
 801d5cc:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	d001      	beq.n	801d5d6 <mg_aton+0x64>
 801d5d2:	2301      	movs	r3, #1
 801d5d4:	e000      	b.n	801d5d8 <mg_aton+0x66>
 801d5d6:	2300      	movs	r3, #0
 801d5d8:	f003 0301 	and.w	r3, r3, #1
 801d5dc:	b2db      	uxtb	r3, r3
}
 801d5de:	4618      	mov	r0, r3
 801d5e0:	3710      	adds	r7, #16
 801d5e2:	46bd      	mov	sp, r7
 801d5e4:	bd80      	pop	{r7, pc}

0801d5e6 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 801d5e6:	b580      	push	{r7, lr}
 801d5e8:	b084      	sub	sp, #16
 801d5ea:	af00      	add	r7, sp, #0
 801d5ec:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d5f2:	33b0      	adds	r3, #176	@ 0xb0
 801d5f4:	4619      	mov	r1, r3
 801d5f6:	2001      	movs	r0, #1
 801d5f8:	f7f7 fa5a 	bl	8014ab0 <mg_calloc>
 801d5fc:	60f8      	str	r0, [r7, #12]
  if (c != NULL) {
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	2b00      	cmp	r3, #0
 801d602:	d017      	beq.n	801d634 <mg_alloc_conn+0x4e>
    c->mgr = mgr;
 801d604:	68fb      	ldr	r3, [r7, #12]
 801d606:	687a      	ldr	r2, [r7, #4]
 801d608:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d610:	675a      	str	r2, [r3, #116]	@ 0x74
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	645a      	str	r2, [r3, #68]	@ 0x44
 801d61a:	68fb      	ldr	r3, [r7, #12]
 801d61c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	69db      	ldr	r3, [r3, #28]
 801d626:	1c5a      	adds	r2, r3, #1
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	61da      	str	r2, [r3, #28]
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	69da      	ldr	r2, [r3, #28]
 801d630:	68fb      	ldr	r3, [r7, #12]
 801d632:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 801d634:	68fb      	ldr	r3, [r7, #12]
}
 801d636:	4618      	mov	r0, r3
 801d638:	3710      	adds	r7, #16
 801d63a:	46bd      	mov	sp, r7
 801d63c:	bd80      	pop	{r7, pc}
	...

0801d640 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 801d640:	b580      	push	{r7, lr}
 801d642:	b084      	sub	sp, #16
 801d644:	af00      	add	r7, sp, #0
 801d646:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 801d648:	6878      	ldr	r0, [r7, #4]
 801d64a:	f7f7 fa6a 	bl	8014b22 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	685b      	ldr	r3, [r3, #4]
 801d652:	60fb      	str	r3, [r7, #12]
 801d654:	e002      	b.n	801d65c <mg_close_conn+0x1c>
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	681b      	ldr	r3, [r3, #0]
 801d65a:	60fb      	str	r3, [r7, #12]
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	681b      	ldr	r3, [r3, #0]
 801d660:	687a      	ldr	r2, [r7, #4]
 801d662:	429a      	cmp	r2, r3
 801d664:	d1f7      	bne.n	801d656 <mg_close_conn+0x16>
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	681a      	ldr	r2, [r3, #0]
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	685b      	ldr	r3, [r3, #4]
 801d672:	689b      	ldr	r3, [r3, #8]
 801d674:	687a      	ldr	r2, [r7, #4]
 801d676:	429a      	cmp	r2, r3
 801d678:	d103      	bne.n	801d682 <mg_close_conn+0x42>
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	685b      	ldr	r3, [r3, #4]
 801d67e:	2200      	movs	r2, #0
 801d680:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	685b      	ldr	r3, [r3, #4]
 801d686:	691b      	ldr	r3, [r3, #16]
 801d688:	687a      	ldr	r2, [r7, #4]
 801d68a:	429a      	cmp	r2, r3
 801d68c:	d103      	bne.n	801d696 <mg_close_conn+0x56>
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	685b      	ldr	r3, [r3, #4]
 801d692:	2200      	movs	r2, #0
 801d694:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 801d696:	2200      	movs	r2, #0
 801d698:	2109      	movs	r1, #9
 801d69a:	6878      	ldr	r0, [r7, #4]
 801d69c:	f7f7 ffe8 	bl	8015670 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 801d6a0:	4b17      	ldr	r3, [pc, #92]	@ (801d700 <mg_close_conn+0xc0>)
 801d6a2:	681b      	ldr	r3, [r3, #0]
 801d6a4:	2b02      	cmp	r3, #2
 801d6a6:	dd0e      	ble.n	801d6c6 <mg_close_conn+0x86>
 801d6a8:	4b16      	ldr	r3, [pc, #88]	@ (801d704 <mg_close_conn+0xc4>)
 801d6aa:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 801d6ae:	4916      	ldr	r1, [pc, #88]	@ (801d708 <mg_close_conn+0xc8>)
 801d6b0:	2003      	movs	r0, #3
 801d6b2:	f7fd fbc3 	bl	801ae3c <mg_log_prefix>
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d6ba:	687b      	ldr	r3, [r7, #4]
 801d6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d6be:	461a      	mov	r2, r3
 801d6c0:	4812      	ldr	r0, [pc, #72]	@ (801d70c <mg_close_conn+0xcc>)
 801d6c2:	f7fd fc0b 	bl	801aedc <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 801d6c6:	6878      	ldr	r0, [r7, #4]
 801d6c8:	f004 fe14 	bl	80222f4 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	3338      	adds	r3, #56	@ 0x38
 801d6d0:	4618      	mov	r0, r3
 801d6d2:	f7fc fcec 	bl	801a0ae <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	3348      	adds	r3, #72	@ 0x48
 801d6da:	4618      	mov	r0, r3
 801d6dc:	f7fc fce7 	bl	801a0ae <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	3368      	adds	r3, #104	@ 0x68
 801d6e4:	4618      	mov	r0, r3
 801d6e6:	f7fc fce2 	bl	801a0ae <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 801d6ea:	21b0      	movs	r1, #176	@ 0xb0
 801d6ec:	6878      	ldr	r0, [r7, #4]
 801d6ee:	f004 ffb3 	bl	8022658 <mg_bzero>
  free(c);
 801d6f2:	6878      	ldr	r0, [r7, #4]
 801d6f4:	f7ee fe68 	bl	800c3c8 <vPortFree>
}
 801d6f8:	bf00      	nop
 801d6fa:	3710      	adds	r7, #16
 801d6fc:	46bd      	mov	sp, r7
 801d6fe:	bd80      	pop	{r7, pc}
 801d700:	20000298 	.word	0x20000298
 801d704:	08033e8c 	.word	0x08033e8c
 801d708:	080310c8 	.word	0x080310c8
 801d70c:	080325e8 	.word	0x080325e8

0801d710 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 801d710:	b580      	push	{r7, lr}
 801d712:	b086      	sub	sp, #24
 801d714:	af00      	add	r7, sp, #0
 801d716:	60f8      	str	r0, [r7, #12]
 801d718:	60b9      	str	r1, [r7, #8]
 801d71a:	607a      	str	r2, [r7, #4]
 801d71c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 801d71e:	2300      	movs	r3, #0
 801d720:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 801d722:	68bb      	ldr	r3, [r7, #8]
 801d724:	2b00      	cmp	r3, #0
 801d726:	d003      	beq.n	801d730 <mg_connect+0x20>
 801d728:	68bb      	ldr	r3, [r7, #8]
 801d72a:	781b      	ldrb	r3, [r3, #0]
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d10e      	bne.n	801d74e <mg_connect+0x3e>
    MG_ERROR(("null url"));
 801d730:	4b37      	ldr	r3, [pc, #220]	@ (801d810 <mg_connect+0x100>)
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	2b00      	cmp	r3, #0
 801d736:	dd66      	ble.n	801d806 <mg_connect+0xf6>
 801d738:	4b36      	ldr	r3, [pc, #216]	@ (801d814 <mg_connect+0x104>)
 801d73a:	f241 22be 	movw	r2, #4798	@ 0x12be
 801d73e:	4936      	ldr	r1, [pc, #216]	@ (801d818 <mg_connect+0x108>)
 801d740:	2001      	movs	r0, #1
 801d742:	f7fd fb7b 	bl	801ae3c <mg_log_prefix>
 801d746:	4835      	ldr	r0, [pc, #212]	@ (801d81c <mg_connect+0x10c>)
 801d748:	f7fd fbc8 	bl	801aedc <mg_log>
 801d74c:	e05b      	b.n	801d806 <mg_connect+0xf6>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 801d74e:	68f8      	ldr	r0, [r7, #12]
 801d750:	f7ff ff49 	bl	801d5e6 <mg_alloc_conn>
 801d754:	6178      	str	r0, [r7, #20]
 801d756:	697b      	ldr	r3, [r7, #20]
 801d758:	2b00      	cmp	r3, #0
 801d75a:	d10e      	bne.n	801d77a <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 801d75c:	4b2c      	ldr	r3, [pc, #176]	@ (801d810 <mg_connect+0x100>)
 801d75e:	681b      	ldr	r3, [r3, #0]
 801d760:	2b00      	cmp	r3, #0
 801d762:	dd50      	ble.n	801d806 <mg_connect+0xf6>
 801d764:	4b2b      	ldr	r3, [pc, #172]	@ (801d814 <mg_connect+0x104>)
 801d766:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 801d76a:	492b      	ldr	r1, [pc, #172]	@ (801d818 <mg_connect+0x108>)
 801d76c:	2001      	movs	r0, #1
 801d76e:	f7fd fb65 	bl	801ae3c <mg_log_prefix>
 801d772:	482b      	ldr	r0, [pc, #172]	@ (801d820 <mg_connect+0x110>)
 801d774:	f7fd fbb2 	bl	801aedc <mg_log>
 801d778:	e045      	b.n	801d806 <mg_connect+0xf6>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	681a      	ldr	r2, [r3, #0]
 801d77e:	697b      	ldr	r3, [r7, #20]
 801d780:	601a      	str	r2, [r3, #0]
 801d782:	68fb      	ldr	r3, [r7, #12]
 801d784:	697a      	ldr	r2, [r7, #20]
 801d786:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 801d788:	2204      	movs	r2, #4
 801d78a:	4926      	ldr	r1, [pc, #152]	@ (801d824 <mg_connect+0x114>)
 801d78c:	68b8      	ldr	r0, [r7, #8]
 801d78e:	f008 f994 	bl	8025aba <strncmp>
 801d792:	4603      	mov	r3, r0
 801d794:	2b00      	cmp	r3, #0
 801d796:	bf0c      	ite	eq
 801d798:	2301      	moveq	r3, #1
 801d79a:	2300      	movne	r3, #0
 801d79c:	b2d9      	uxtb	r1, r3
 801d79e:	697a      	ldr	r2, [r7, #20]
 801d7a0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801d7a4:	f361 0300 	bfi	r3, r1, #0, #1
 801d7a8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 801d7ac:	697b      	ldr	r3, [r7, #20]
 801d7ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d7b2:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 801d7b4:	697b      	ldr	r3, [r7, #20]
 801d7b6:	687a      	ldr	r2, [r7, #4]
 801d7b8:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 801d7ba:	697a      	ldr	r2, [r7, #20]
 801d7bc:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801d7c0:	f043 0302 	orr.w	r3, r3, #2
 801d7c4:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 801d7c8:	697b      	ldr	r3, [r7, #20]
 801d7ca:	683a      	ldr	r2, [r7, #0]
 801d7cc:	67da      	str	r2, [r3, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 801d7ce:	4b10      	ldr	r3, [pc, #64]	@ (801d810 <mg_connect+0x100>)
 801d7d0:	681b      	ldr	r3, [r3, #0]
 801d7d2:	2b02      	cmp	r3, #2
 801d7d4:	dd0e      	ble.n	801d7f4 <mg_connect+0xe4>
 801d7d6:	4b0f      	ldr	r3, [pc, #60]	@ (801d814 <mg_connect+0x104>)
 801d7d8:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 801d7dc:	490e      	ldr	r1, [pc, #56]	@ (801d818 <mg_connect+0x108>)
 801d7de:	2003      	movs	r0, #3
 801d7e0:	f7fd fb2c 	bl	801ae3c <mg_log_prefix>
 801d7e4:	697b      	ldr	r3, [r7, #20]
 801d7e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d7e8:	697b      	ldr	r3, [r7, #20]
 801d7ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d7ec:	68bb      	ldr	r3, [r7, #8]
 801d7ee:	480e      	ldr	r0, [pc, #56]	@ (801d828 <mg_connect+0x118>)
 801d7f0:	f7fd fb74 	bl	801aedc <mg_log>
    mg_call(c, MG_EV_OPEN, (void *) url);
 801d7f4:	68ba      	ldr	r2, [r7, #8]
 801d7f6:	2101      	movs	r1, #1
 801d7f8:	6978      	ldr	r0, [r7, #20]
 801d7fa:	f7f7 ff39 	bl	8015670 <mg_call>
    mg_resolve(c, url);
 801d7fe:	68b9      	ldr	r1, [r7, #8]
 801d800:	6978      	ldr	r0, [r7, #20]
 801d802:	f7f7 fef1 	bl	80155e8 <mg_resolve>
  }
  return c;
 801d806:	697b      	ldr	r3, [r7, #20]
}
 801d808:	4618      	mov	r0, r3
 801d80a:	3718      	adds	r7, #24
 801d80c:	46bd      	mov	sp, r7
 801d80e:	bd80      	pop	{r7, pc}
 801d810:	20000298 	.word	0x20000298
 801d814:	08033e9c 	.word	0x08033e9c
 801d818:	080310c8 	.word	0x080310c8
 801d81c:	080325f8 	.word	0x080325f8
 801d820:	08032604 	.word	0x08032604
 801d824:	08032608 	.word	0x08032608
 801d828:	08031224 	.word	0x08031224

0801d82c <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 801d82c:	b580      	push	{r7, lr}
 801d82e:	b086      	sub	sp, #24
 801d830:	af00      	add	r7, sp, #0
 801d832:	60f8      	str	r0, [r7, #12]
 801d834:	60b9      	str	r1, [r7, #8]
 801d836:	607a      	str	r2, [r7, #4]
 801d838:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 801d83a:	2300      	movs	r3, #0
 801d83c:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 801d83e:	68f8      	ldr	r0, [r7, #12]
 801d840:	f7ff fed1 	bl	801d5e6 <mg_alloc_conn>
 801d844:	6178      	str	r0, [r7, #20]
 801d846:	697b      	ldr	r3, [r7, #20]
 801d848:	2b00      	cmp	r3, #0
 801d84a:	d10f      	bne.n	801d86c <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 801d84c:	4b41      	ldr	r3, [pc, #260]	@ (801d954 <mg_listen+0x128>)
 801d84e:	681b      	ldr	r3, [r3, #0]
 801d850:	2b00      	cmp	r3, #0
 801d852:	dd7a      	ble.n	801d94a <mg_listen+0x11e>
 801d854:	4b40      	ldr	r3, [pc, #256]	@ (801d958 <mg_listen+0x12c>)
 801d856:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 801d85a:	4940      	ldr	r1, [pc, #256]	@ (801d95c <mg_listen+0x130>)
 801d85c:	2001      	movs	r0, #1
 801d85e:	f7fd faed 	bl	801ae3c <mg_log_prefix>
 801d862:	68b9      	ldr	r1, [r7, #8]
 801d864:	483e      	ldr	r0, [pc, #248]	@ (801d960 <mg_listen+0x134>)
 801d866:	f7fd fb39 	bl	801aedc <mg_log>
 801d86a:	e06e      	b.n	801d94a <mg_listen+0x11e>
  } else if (!mg_open_listener(c, url)) {
 801d86c:	68b9      	ldr	r1, [r7, #8]
 801d86e:	6978      	ldr	r0, [r7, #20]
 801d870:	f003 f852 	bl	8020918 <mg_open_listener>
 801d874:	4603      	mov	r3, r0
 801d876:	f083 0301 	eor.w	r3, r3, #1
 801d87a:	b2db      	uxtb	r3, r3
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	d019      	beq.n	801d8b4 <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 801d880:	4b34      	ldr	r3, [pc, #208]	@ (801d954 <mg_listen+0x128>)
 801d882:	681b      	ldr	r3, [r3, #0]
 801d884:	2b00      	cmp	r3, #0
 801d886:	dd0f      	ble.n	801d8a8 <mg_listen+0x7c>
 801d888:	4b33      	ldr	r3, [pc, #204]	@ (801d958 <mg_listen+0x12c>)
 801d88a:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 801d88e:	4933      	ldr	r1, [pc, #204]	@ (801d95c <mg_listen+0x130>)
 801d890:	2001      	movs	r0, #1
 801d892:	f7fd fad3 	bl	801ae3c <mg_log_prefix>
 801d896:	f009 fadf 	bl	8026e58 <__errno>
 801d89a:	4603      	mov	r3, r0
 801d89c:	681b      	ldr	r3, [r3, #0]
 801d89e:	461a      	mov	r2, r3
 801d8a0:	68b9      	ldr	r1, [r7, #8]
 801d8a2:	4830      	ldr	r0, [pc, #192]	@ (801d964 <mg_listen+0x138>)
 801d8a4:	f7fd fb1a 	bl	801aedc <mg_log>
    MG_PROF_FREE(c);
    free(c);
 801d8a8:	6978      	ldr	r0, [r7, #20]
 801d8aa:	f7ee fd8d 	bl	800c3c8 <vPortFree>
    c = NULL;
 801d8ae:	2300      	movs	r3, #0
 801d8b0:	617b      	str	r3, [r7, #20]
 801d8b2:	e04a      	b.n	801d94a <mg_listen+0x11e>
  } else {
    c->is_listening = 1;
 801d8b4:	697a      	ldr	r2, [r7, #20]
 801d8b6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801d8ba:	f043 0301 	orr.w	r3, r3, #1
 801d8be:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 801d8c2:	2204      	movs	r2, #4
 801d8c4:	4928      	ldr	r1, [pc, #160]	@ (801d968 <mg_listen+0x13c>)
 801d8c6:	68b8      	ldr	r0, [r7, #8]
 801d8c8:	f008 f8f7 	bl	8025aba <strncmp>
 801d8cc:	4603      	mov	r3, r0
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	bf0c      	ite	eq
 801d8d2:	2301      	moveq	r3, #1
 801d8d4:	2300      	movne	r3, #0
 801d8d6:	b2d9      	uxtb	r1, r3
 801d8d8:	697a      	ldr	r2, [r7, #20]
 801d8da:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801d8de:	f361 0300 	bfi	r3, r1, #0, #1
 801d8e2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	681a      	ldr	r2, [r3, #0]
 801d8ea:	697b      	ldr	r3, [r7, #20]
 801d8ec:	601a      	str	r2, [r3, #0]
 801d8ee:	68fb      	ldr	r3, [r7, #12]
 801d8f0:	697a      	ldr	r2, [r7, #20]
 801d8f2:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 801d8f4:	697b      	ldr	r3, [r7, #20]
 801d8f6:	687a      	ldr	r2, [r7, #4]
 801d8f8:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 801d8fa:	697b      	ldr	r3, [r7, #20]
 801d8fc:	683a      	ldr	r2, [r7, #0]
 801d8fe:	67da      	str	r2, [r3, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 801d900:	2200      	movs	r2, #0
 801d902:	2101      	movs	r1, #1
 801d904:	6978      	ldr	r0, [r7, #20]
 801d906:	f7f7 feb3 	bl	8015670 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 801d90a:	68b8      	ldr	r0, [r7, #8]
 801d90c:	f004 fd44 	bl	8022398 <mg_url_is_ssl>
 801d910:	4603      	mov	r3, r0
 801d912:	2b00      	cmp	r3, #0
 801d914:	d006      	beq.n	801d924 <mg_listen+0xf8>
 801d916:	697a      	ldr	r2, [r7, #20]
 801d918:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801d91c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d920:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 801d924:	4b0b      	ldr	r3, [pc, #44]	@ (801d954 <mg_listen+0x128>)
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	2b02      	cmp	r3, #2
 801d92a:	dd0e      	ble.n	801d94a <mg_listen+0x11e>
 801d92c:	4b0a      	ldr	r3, [pc, #40]	@ (801d958 <mg_listen+0x12c>)
 801d92e:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 801d932:	490a      	ldr	r1, [pc, #40]	@ (801d95c <mg_listen+0x130>)
 801d934:	2003      	movs	r0, #3
 801d936:	f7fd fa81 	bl	801ae3c <mg_log_prefix>
 801d93a:	697b      	ldr	r3, [r7, #20]
 801d93c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d93e:	697b      	ldr	r3, [r7, #20]
 801d940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d942:	68bb      	ldr	r3, [r7, #8]
 801d944:	4809      	ldr	r0, [pc, #36]	@ (801d96c <mg_listen+0x140>)
 801d946:	f7fd fac9 	bl	801aedc <mg_log>
  }
  return c;
 801d94a:	697b      	ldr	r3, [r7, #20]
}
 801d94c:	4618      	mov	r0, r3
 801d94e:	3718      	adds	r7, #24
 801d950:	46bd      	mov	sp, r7
 801d952:	bd80      	pop	{r7, pc}
 801d954:	20000298 	.word	0x20000298
 801d958:	08033ea8 	.word	0x08033ea8
 801d95c:	080310c8 	.word	0x080310c8
 801d960:	08032610 	.word	0x08032610
 801d964:	08032618 	.word	0x08032618
 801d968:	08032608 	.word	0x08032608
 801d96c:	08031224 	.word	0x08031224

0801d970 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 801d970:	b580      	push	{r7, lr}
 801d972:	b08a      	sub	sp, #40	@ 0x28
 801d974:	af04      	add	r7, sp, #16
 801d976:	60f8      	str	r0, [r7, #12]
 801d978:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 801d97c:	2128      	movs	r1, #40	@ 0x28
 801d97e:	2001      	movs	r0, #1
 801d980:	f7f7 f896 	bl	8014ab0 <mg_calloc>
 801d984:	6178      	str	r0, [r7, #20]
  if (t != NULL) {
 801d986:	697b      	ldr	r3, [r7, #20]
 801d988:	2b00      	cmp	r3, #0
 801d98a:	d014      	beq.n	801d9b6 <mg_timer_add+0x46>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 801d98c:	68fb      	ldr	r3, [r7, #12]
 801d98e:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 801d992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d994:	9302      	str	r3, [sp, #8]
 801d996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d998:	9301      	str	r3, [sp, #4]
 801d99a:	6a3b      	ldr	r3, [r7, #32]
 801d99c:	9300      	str	r3, [sp, #0]
 801d99e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d9a2:	6979      	ldr	r1, [r7, #20]
 801d9a4:	f004 fba5 	bl	80220f2 <mg_timer_init>
    t->id = mgr->timerid++;
 801d9a8:	68fb      	ldr	r3, [r7, #12]
 801d9aa:	6a1b      	ldr	r3, [r3, #32]
 801d9ac:	1c59      	adds	r1, r3, #1
 801d9ae:	68fa      	ldr	r2, [r7, #12]
 801d9b0:	6211      	str	r1, [r2, #32]
 801d9b2:	697a      	ldr	r2, [r7, #20]
 801d9b4:	6013      	str	r3, [r2, #0]
  }
  return t;
 801d9b6:	697b      	ldr	r3, [r7, #20]
}
 801d9b8:	4618      	mov	r0, r3
 801d9ba:	3718      	adds	r7, #24
 801d9bc:	46bd      	mov	sp, r7
 801d9be:	bd80      	pop	{r7, pc}

0801d9c0 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 801d9c0:	b580      	push	{r7, lr}
 801d9c2:	b082      	sub	sp, #8
 801d9c4:	af00      	add	r7, sp, #0
 801d9c6:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 801d9c8:	2248      	movs	r2, #72	@ 0x48
 801d9ca:	2100      	movs	r1, #0
 801d9cc:	6878      	ldr	r0, [r7, #4]
 801d9ce:	f008 f83f 	bl	8025a50 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d9d8:	639a      	str	r2, [r3, #56]	@ 0x38
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d9e0:	645a      	str	r2, [r3, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801d9e8:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	4a05      	ldr	r2, [pc, #20]	@ (801da04 <mg_mgr_init+0x44>)
 801d9ee:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	4a05      	ldr	r2, [pc, #20]	@ (801da08 <mg_mgr_init+0x48>)
 801d9f4:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 801d9f6:	6878      	ldr	r0, [r7, #4]
 801d9f8:	f004 fcc3 	bl	8022382 <mg_tls_ctx_init>
}
 801d9fc:	bf00      	nop
 801d9fe:	3708      	adds	r7, #8
 801da00:	46bd      	mov	sp, r7
 801da02:	bd80      	pop	{r7, pc}
 801da04:	08032648 	.word	0x08032648
 801da08:	0803265c 	.word	0x0803265c

0801da0c <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 801da0c:	b580      	push	{r7, lr}
 801da0e:	b084      	sub	sp, #16
 801da10:	af00      	add	r7, sp, #0
 801da12:	60f8      	str	r0, [r7, #12]
 801da14:	60b9      	str	r1, [r7, #8]
 801da16:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	d005      	beq.n	801da2c <mg_tcpip_call+0x20>
 801da20:	68fb      	ldr	r3, [r7, #12]
 801da22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da24:	687a      	ldr	r2, [r7, #4]
 801da26:	68b9      	ldr	r1, [r7, #8]
 801da28:	68f8      	ldr	r0, [r7, #12]
 801da2a:	4798      	blx	r3
}
 801da2c:	bf00      	nop
 801da2e:	3710      	adds	r7, #16
 801da30:	46bd      	mov	sp, r7
 801da32:	bd80      	pop	{r7, pc}

0801da34 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 801da34:	b590      	push	{r4, r7, lr}
 801da36:	b085      	sub	sp, #20
 801da38:	af00      	add	r7, sp, #0
 801da3a:	60f8      	str	r0, [r7, #12]
 801da3c:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 801da3e:	68fb      	ldr	r3, [r7, #12]
 801da40:	681a      	ldr	r2, [r3, #0]
 801da42:	68fb      	ldr	r3, [r7, #12]
 801da44:	685b      	ldr	r3, [r3, #4]
 801da46:	441a      	add	r2, r3
 801da48:	68bb      	ldr	r3, [r7, #8]
 801da4a:	1ad3      	subs	r3, r2, r3
 801da4c:	461a      	mov	r2, r3
 801da4e:	68fc      	ldr	r4, [r7, #12]
 801da50:	463b      	mov	r3, r7
 801da52:	68b9      	ldr	r1, [r7, #8]
 801da54:	4618      	mov	r0, r3
 801da56:	f003 ff12 	bl	802187e <mg_str_n>
 801da5a:	f104 0308 	add.w	r3, r4, #8
 801da5e:	463a      	mov	r2, r7
 801da60:	e892 0003 	ldmia.w	r2, {r0, r1}
 801da64:	e883 0003 	stmia.w	r3, {r0, r1}
}
 801da68:	bf00      	nop
 801da6a:	3714      	adds	r7, #20
 801da6c:	46bd      	mov	sp, r7
 801da6e:	bd90      	pop	{r4, r7, pc}

0801da70 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 801da70:	b480      	push	{r7}
 801da72:	b087      	sub	sp, #28
 801da74:	af00      	add	r7, sp, #0
 801da76:	60f8      	str	r0, [r7, #12]
 801da78:	60b9      	str	r1, [r7, #8]
 801da7a:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 801da7c:	68bb      	ldr	r3, [r7, #8]
 801da7e:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 801da80:	2300      	movs	r3, #0
 801da82:	617b      	str	r3, [r7, #20]
 801da84:	e014      	b.n	801dab0 <csumup+0x40>
 801da86:	697b      	ldr	r3, [r7, #20]
 801da88:	f003 0301 	and.w	r3, r3, #1
 801da8c:	2b00      	cmp	r3, #0
 801da8e:	d004      	beq.n	801da9a <csumup+0x2a>
 801da90:	693a      	ldr	r2, [r7, #16]
 801da92:	697b      	ldr	r3, [r7, #20]
 801da94:	4413      	add	r3, r2
 801da96:	781b      	ldrb	r3, [r3, #0]
 801da98:	e004      	b.n	801daa4 <csumup+0x34>
 801da9a:	693a      	ldr	r2, [r7, #16]
 801da9c:	697b      	ldr	r3, [r7, #20]
 801da9e:	4413      	add	r3, r2
 801daa0:	781b      	ldrb	r3, [r3, #0]
 801daa2:	021b      	lsls	r3, r3, #8
 801daa4:	68fa      	ldr	r2, [r7, #12]
 801daa6:	4413      	add	r3, r2
 801daa8:	60fb      	str	r3, [r7, #12]
 801daaa:	697b      	ldr	r3, [r7, #20]
 801daac:	3301      	adds	r3, #1
 801daae:	617b      	str	r3, [r7, #20]
 801dab0:	697a      	ldr	r2, [r7, #20]
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	429a      	cmp	r2, r3
 801dab6:	d3e6      	bcc.n	801da86 <csumup+0x16>
  return sum;
 801dab8:	68fb      	ldr	r3, [r7, #12]
}
 801daba:	4618      	mov	r0, r3
 801dabc:	371c      	adds	r7, #28
 801dabe:	46bd      	mov	sp, r7
 801dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dac4:	4770      	bx	lr

0801dac6 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 801dac6:	b580      	push	{r7, lr}
 801dac8:	b082      	sub	sp, #8
 801daca:	af00      	add	r7, sp, #0
 801dacc:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 801dace:	e005      	b.n	801dadc <csumfin+0x16>
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	b29a      	uxth	r2, r3
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	0c1b      	lsrs	r3, r3, #16
 801dad8:	4413      	add	r3, r2
 801dada:	607b      	str	r3, [r7, #4]
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	0c1b      	lsrs	r3, r3, #16
 801dae0:	2b00      	cmp	r3, #0
 801dae2:	d1f5      	bne.n	801dad0 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	b29b      	uxth	r3, r3
 801dae8:	43db      	mvns	r3, r3
 801daea:	b29b      	uxth	r3, r3
 801daec:	4618      	mov	r0, r3
 801daee:	f004 fe4c 	bl	802278a <mg_ntohs>
 801daf2:	4603      	mov	r3, r0
}
 801daf4:	4618      	mov	r0, r3
 801daf6:	3708      	adds	r7, #8
 801daf8:	46bd      	mov	sp, r7
 801dafa:	bd80      	pop	{r7, pc}

0801dafc <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 801dafc:	b580      	push	{r7, lr}
 801dafe:	b084      	sub	sp, #16
 801db00:	af00      	add	r7, sp, #0
 801db02:	6078      	str	r0, [r7, #4]
 801db04:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 801db06:	683a      	ldr	r2, [r7, #0]
 801db08:	6879      	ldr	r1, [r7, #4]
 801db0a:	2000      	movs	r0, #0
 801db0c:	f7ff ffb0 	bl	801da70 <csumup>
 801db10:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 801db12:	68f8      	ldr	r0, [r7, #12]
 801db14:	f7ff ffd7 	bl	801dac6 <csumfin>
 801db18:	4603      	mov	r3, r0
}
 801db1a:	4618      	mov	r0, r3
 801db1c:	3710      	adds	r7, #16
 801db1e:	46bd      	mov	sp, r7
 801db20:	bd80      	pop	{r7, pc}
	...

0801db24 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 801db24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801db28:	b088      	sub	sp, #32
 801db2a:	af02      	add	r7, sp, #8
 801db2c:	6078      	str	r0, [r7, #4]
 801db2e:	460b      	mov	r3, r1
 801db30:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	685b      	ldr	r3, [r3, #4]
 801db36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801db38:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 801db3a:	687b      	ldr	r3, [r7, #4]
 801db3c:	33b0      	adds	r3, #176	@ 0xb0
 801db3e:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 801db40:	78fb      	ldrb	r3, [r7, #3]
 801db42:	2b01      	cmp	r3, #1
 801db44:	d013      	beq.n	801db6e <settmout+0x4a>
 801db46:	78fb      	ldrb	r3, [r7, #3]
 801db48:	2b02      	cmp	r3, #2
 801db4a:	d00e      	beq.n	801db6a <settmout+0x46>
 801db4c:	78fb      	ldrb	r3, [r7, #3]
 801db4e:	2b03      	cmp	r3, #3
 801db50:	d008      	beq.n	801db64 <settmout+0x40>
 801db52:	78fb      	ldrb	r3, [r7, #3]
 801db54:	2b04      	cmp	r3, #4
 801db56:	d102      	bne.n	801db5e <settmout+0x3a>
 801db58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801db5c:	e008      	b.n	801db70 <settmout+0x4c>
 801db5e:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 801db62:	e005      	b.n	801db70 <settmout+0x4c>
 801db64:	f643 2398 	movw	r3, #15000	@ 0x3a98
 801db68:	e002      	b.n	801db70 <settmout+0x4c>
 801db6a:	2364      	movs	r3, #100	@ 0x64
 801db6c:	e000      	b.n	801db70 <settmout+0x4c>
 801db6e:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 801db70:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 801db72:	697b      	ldr	r3, [r7, #20]
 801db74:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801db78:	68f9      	ldr	r1, [r7, #12]
 801db7a:	2000      	movs	r0, #0
 801db7c:	460c      	mov	r4, r1
 801db7e:	4605      	mov	r5, r0
 801db80:	eb12 0804 	adds.w	r8, r2, r4
 801db84:	eb43 0905 	adc.w	r9, r3, r5
 801db88:	693b      	ldr	r3, [r7, #16]
 801db8a:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 801db8e:	693b      	ldr	r3, [r7, #16]
 801db90:	78fa      	ldrb	r2, [r7, #3]
 801db92:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 801db94:	4b0d      	ldr	r3, [pc, #52]	@ (801dbcc <settmout+0xa8>)
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	2b03      	cmp	r3, #3
 801db9a:	dd12      	ble.n	801dbc2 <settmout+0x9e>
 801db9c:	4b0c      	ldr	r3, [pc, #48]	@ (801dbd0 <settmout+0xac>)
 801db9e:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 801dba2:	490c      	ldr	r1, [pc, #48]	@ (801dbd4 <settmout+0xb0>)
 801dba4:	2004      	movs	r0, #4
 801dba6:	f7fd f949 	bl	801ae3c <mg_log_prefix>
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801dbae:	78f8      	ldrb	r0, [r7, #3]
 801dbb0:	693b      	ldr	r3, [r7, #16]
 801dbb2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801dbb6:	e9cd 2300 	strd	r2, r3, [sp]
 801dbba:	4602      	mov	r2, r0
 801dbbc:	4806      	ldr	r0, [pc, #24]	@ (801dbd8 <settmout+0xb4>)
 801dbbe:	f7fd f98d 	bl	801aedc <mg_log>
}
 801dbc2:	bf00      	nop
 801dbc4:	3718      	adds	r7, #24
 801dbc6:	46bd      	mov	sp, r7
 801dbc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801dbcc:	20000298 	.word	0x20000298
 801dbd0:	08033eb4 	.word	0x08033eb4
 801dbd4:	080310c8 	.word	0x080310c8
 801dbd8:	0803267c 	.word	0x0803267c

0801dbdc <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 801dbdc:	b580      	push	{r7, lr}
 801dbde:	b084      	sub	sp, #16
 801dbe0:	af00      	add	r7, sp, #0
 801dbe2:	6078      	str	r0, [r7, #4]
 801dbe4:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dbea:	685b      	ldr	r3, [r3, #4]
 801dbec:	687a      	ldr	r2, [r7, #4]
 801dbee:	6950      	ldr	r0, [r2, #20]
 801dbf0:	687a      	ldr	r2, [r7, #4]
 801dbf2:	6839      	ldr	r1, [r7, #0]
 801dbf4:	4798      	blx	r3
 801dbf6:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 801dbf8:	68fa      	ldr	r2, [r7, #12]
 801dbfa:	683b      	ldr	r3, [r7, #0]
 801dbfc:	429a      	cmp	r2, r3
 801dbfe:	d104      	bne.n	801dc0a <ether_output+0x2e>
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc04:	1c5a      	adds	r2, r3, #1
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	675a      	str	r2, [r3, #116]	@ 0x74
  return n;
 801dc0a:	68fb      	ldr	r3, [r7, #12]
}
 801dc0c:	4618      	mov	r0, r3
 801dc0e:	3710      	adds	r7, #16
 801dc10:	46bd      	mov	sp, r7
 801dc12:	bd80      	pop	{r7, pc}

0801dc14 <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 801dc14:	b580      	push	{r7, lr}
 801dc16:	b084      	sub	sp, #16
 801dc18:	af00      	add	r7, sp, #0
 801dc1a:	6078      	str	r0, [r7, #4]
 801dc1c:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	695b      	ldr	r3, [r3, #20]
 801dc22:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 801dc24:	68fb      	ldr	r3, [r7, #12]
 801dc26:	330e      	adds	r3, #14
 801dc28:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 801dc2a:	68fb      	ldr	r3, [r7, #12]
 801dc2c:	2206      	movs	r2, #6
 801dc2e:	21ff      	movs	r1, #255	@ 0xff
 801dc30:	4618      	mov	r0, r3
 801dc32:	f007 ff0d 	bl	8025a50 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 801dc36:	68fb      	ldr	r3, [r7, #12]
 801dc38:	3306      	adds	r3, #6
 801dc3a:	6879      	ldr	r1, [r7, #4]
 801dc3c:	2206      	movs	r2, #6
 801dc3e:	4618      	mov	r0, r3
 801dc40:	f009 f942 	bl	8026ec8 <memcpy>
  eth->type = mg_htons(0x806);
 801dc44:	f640 0006 	movw	r0, #2054	@ 0x806
 801dc48:	f004 fd9f 	bl	802278a <mg_ntohs>
 801dc4c:	4603      	mov	r3, r0
 801dc4e:	461a      	mov	r2, r3
 801dc50:	68fb      	ldr	r3, [r7, #12]
 801dc52:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 801dc54:	221c      	movs	r2, #28
 801dc56:	2100      	movs	r1, #0
 801dc58:	68b8      	ldr	r0, [r7, #8]
 801dc5a:	f007 fef9 	bl	8025a50 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 801dc5e:	2001      	movs	r0, #1
 801dc60:	f004 fd93 	bl	802278a <mg_ntohs>
 801dc64:	4603      	mov	r3, r0
 801dc66:	461a      	mov	r2, r3
 801dc68:	68bb      	ldr	r3, [r7, #8]
 801dc6a:	801a      	strh	r2, [r3, #0]
 801dc6c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801dc70:	f004 fd8b 	bl	802278a <mg_ntohs>
 801dc74:	4603      	mov	r3, r0
 801dc76:	461a      	mov	r2, r3
 801dc78:	68bb      	ldr	r3, [r7, #8]
 801dc7a:	805a      	strh	r2, [r3, #2]
 801dc7c:	68bb      	ldr	r3, [r7, #8]
 801dc7e:	2206      	movs	r2, #6
 801dc80:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 801dc82:	68bb      	ldr	r3, [r7, #8]
 801dc84:	2204      	movs	r2, #4
 801dc86:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 801dc88:	2001      	movs	r0, #1
 801dc8a:	f004 fd7e 	bl	802278a <mg_ntohs>
 801dc8e:	4603      	mov	r3, r0
 801dc90:	461a      	mov	r2, r3
 801dc92:	68bb      	ldr	r3, [r7, #8]
 801dc94:	80da      	strh	r2, [r3, #6]
 801dc96:	68bb      	ldr	r3, [r7, #8]
 801dc98:	683a      	ldr	r2, [r7, #0]
 801dc9a:	619a      	str	r2, [r3, #24]
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	689a      	ldr	r2, [r3, #8]
 801dca0:	68bb      	ldr	r3, [r7, #8]
 801dca2:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 801dca6:	68bb      	ldr	r3, [r7, #8]
 801dca8:	3308      	adds	r3, #8
 801dcaa:	6879      	ldr	r1, [r7, #4]
 801dcac:	2206      	movs	r2, #6
 801dcae:	4618      	mov	r0, r3
 801dcb0:	f009 f90a 	bl	8026ec8 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 801dcb4:	68bb      	ldr	r3, [r7, #8]
 801dcb6:	f103 021c 	add.w	r2, r3, #28
 801dcba:	68fb      	ldr	r3, [r7, #12]
 801dcbc:	1ad3      	subs	r3, r2, r3
 801dcbe:	4619      	mov	r1, r3
 801dcc0:	6878      	ldr	r0, [r7, #4]
 801dcc2:	f7ff ff8b 	bl	801dbdc <ether_output>
}
 801dcc6:	bf00      	nop
 801dcc8:	3710      	adds	r7, #16
 801dcca:	46bd      	mov	sp, r7
 801dccc:	bd80      	pop	{r7, pc}
	...

0801dcd0 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 801dcd0:	b580      	push	{r7, lr}
 801dcd2:	b082      	sub	sp, #8
 801dcd4:	af00      	add	r7, sp, #0
 801dcd6:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801dcde:	2b03      	cmp	r3, #3
 801dce0:	d13b      	bne.n	801dd5a <onstatechange+0x8a>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 801dce2:	4b3b      	ldr	r3, [pc, #236]	@ (801ddd0 <onstatechange+0x100>)
 801dce4:	681b      	ldr	r3, [r3, #0]
 801dce6:	2b01      	cmp	r3, #1
 801dce8:	dd0d      	ble.n	801dd06 <onstatechange+0x36>
 801dcea:	4b3a      	ldr	r3, [pc, #232]	@ (801ddd4 <onstatechange+0x104>)
 801dcec:	f241 4201 	movw	r2, #5121	@ 0x1401
 801dcf0:	4939      	ldr	r1, [pc, #228]	@ (801ddd8 <onstatechange+0x108>)
 801dcf2:	2002      	movs	r0, #2
 801dcf4:	f7fd f8a2 	bl	801ae3c <mg_log_prefix>
 801dcf8:	687b      	ldr	r3, [r7, #4]
 801dcfa:	3308      	adds	r3, #8
 801dcfc:	461a      	mov	r2, r3
 801dcfe:	4937      	ldr	r1, [pc, #220]	@ (801dddc <onstatechange+0x10c>)
 801dd00:	4837      	ldr	r0, [pc, #220]	@ (801dde0 <onstatechange+0x110>)
 801dd02:	f7fd f8eb 	bl	801aedc <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 801dd06:	4b32      	ldr	r3, [pc, #200]	@ (801ddd0 <onstatechange+0x100>)
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	2b01      	cmp	r3, #1
 801dd0c:	dd0d      	ble.n	801dd2a <onstatechange+0x5a>
 801dd0e:	4b31      	ldr	r3, [pc, #196]	@ (801ddd4 <onstatechange+0x104>)
 801dd10:	f241 4202 	movw	r2, #5122	@ 0x1402
 801dd14:	4930      	ldr	r1, [pc, #192]	@ (801ddd8 <onstatechange+0x108>)
 801dd16:	2002      	movs	r0, #2
 801dd18:	f7fd f890 	bl	801ae3c <mg_log_prefix>
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	3310      	adds	r3, #16
 801dd20:	461a      	mov	r2, r3
 801dd22:	492e      	ldr	r1, [pc, #184]	@ (801dddc <onstatechange+0x10c>)
 801dd24:	482f      	ldr	r0, [pc, #188]	@ (801dde4 <onstatechange+0x114>)
 801dd26:	f7fd f8d9 	bl	801aedc <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 801dd2a:	4b29      	ldr	r3, [pc, #164]	@ (801ddd0 <onstatechange+0x100>)
 801dd2c:	681b      	ldr	r3, [r3, #0]
 801dd2e:	2b01      	cmp	r3, #1
 801dd30:	dd0c      	ble.n	801dd4c <onstatechange+0x7c>
 801dd32:	4b28      	ldr	r3, [pc, #160]	@ (801ddd4 <onstatechange+0x104>)
 801dd34:	f241 4203 	movw	r2, #5123	@ 0x1403
 801dd38:	4927      	ldr	r1, [pc, #156]	@ (801ddd8 <onstatechange+0x108>)
 801dd3a:	2002      	movs	r0, #2
 801dd3c:	f7fd f87e 	bl	801ae3c <mg_log_prefix>
 801dd40:	687b      	ldr	r3, [r7, #4]
 801dd42:	461a      	mov	r2, r3
 801dd44:	4928      	ldr	r1, [pc, #160]	@ (801dde8 <onstatechange+0x118>)
 801dd46:	4829      	ldr	r0, [pc, #164]	@ (801ddec <onstatechange+0x11c>)
 801dd48:	f7fd f8c8 	bl	801aedc <mg_log>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	691b      	ldr	r3, [r3, #16]
 801dd50:	4619      	mov	r1, r3
 801dd52:	6878      	ldr	r0, [r7, #4]
 801dd54:	f7ff ff5e 	bl	801dc14 <arp_ask>
 801dd58:	e02e      	b.n	801ddb8 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801dd60:	2b01      	cmp	r3, #1
 801dd62:	d116      	bne.n	801dd92 <onstatechange+0xc2>
    MG_ERROR(("Link up"));
 801dd64:	4b1a      	ldr	r3, [pc, #104]	@ (801ddd0 <onstatechange+0x100>)
 801dd66:	681b      	ldr	r3, [r3, #0]
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	dd09      	ble.n	801dd80 <onstatechange+0xb0>
 801dd6c:	4b19      	ldr	r3, [pc, #100]	@ (801ddd4 <onstatechange+0x104>)
 801dd6e:	f241 4206 	movw	r2, #5126	@ 0x1406
 801dd72:	4919      	ldr	r1, [pc, #100]	@ (801ddd8 <onstatechange+0x108>)
 801dd74:	2001      	movs	r0, #1
 801dd76:	f7fd f861 	bl	801ae3c <mg_log_prefix>
 801dd7a:	481d      	ldr	r0, [pc, #116]	@ (801ddf0 <onstatechange+0x120>)
 801dd7c:	f7fd f8ae 	bl	801aedc <mg_log>
    srand((unsigned int) mg_millis());
 801dd80:	f004 fd94 	bl	80228ac <mg_millis>
 801dd84:	4602      	mov	r2, r0
 801dd86:	460b      	mov	r3, r1
 801dd88:	4613      	mov	r3, r2
 801dd8a:	4618      	mov	r0, r3
 801dd8c:	f007 f910 	bl	8024fb0 <srand>
 801dd90:	e012      	b.n	801ddb8 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801dd98:	2b00      	cmp	r3, #0
 801dd9a:	d10d      	bne.n	801ddb8 <onstatechange+0xe8>
    MG_ERROR(("Link down"));
 801dd9c:	4b0c      	ldr	r3, [pc, #48]	@ (801ddd0 <onstatechange+0x100>)
 801dd9e:	681b      	ldr	r3, [r3, #0]
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	dd09      	ble.n	801ddb8 <onstatechange+0xe8>
 801dda4:	4b0b      	ldr	r3, [pc, #44]	@ (801ddd4 <onstatechange+0x104>)
 801dda6:	f241 4209 	movw	r2, #5129	@ 0x1409
 801ddaa:	490b      	ldr	r1, [pc, #44]	@ (801ddd8 <onstatechange+0x108>)
 801ddac:	2001      	movs	r0, #1
 801ddae:	f7fd f845 	bl	801ae3c <mg_log_prefix>
 801ddb2:	4810      	ldr	r0, [pc, #64]	@ (801ddf4 <onstatechange+0x124>)
 801ddb4:	f7fd f892 	bl	801aedc <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	337c      	adds	r3, #124	@ 0x7c
 801ddbc:	461a      	mov	r2, r3
 801ddbe:	2100      	movs	r1, #0
 801ddc0:	6878      	ldr	r0, [r7, #4]
 801ddc2:	f7ff fe23 	bl	801da0c <mg_tcpip_call>
}
 801ddc6:	bf00      	nop
 801ddc8:	3708      	adds	r7, #8
 801ddca:	46bd      	mov	sp, r7
 801ddcc:	bd80      	pop	{r7, pc}
 801ddce:	bf00      	nop
 801ddd0:	20000298 	.word	0x20000298
 801ddd4:	08033ec0 	.word	0x08033ec0
 801ddd8:	080310c8 	.word	0x080310c8
 801dddc:	0802102d 	.word	0x0802102d
 801dde0:	0803268c 	.word	0x0803268c
 801dde4:	0803269c 	.word	0x0803269c
 801dde8:	080210f1 	.word	0x080210f1
 801ddec:	080326ac 	.word	0x080326ac
 801ddf0:	080326bc 	.word	0x080326bc
 801ddf4:	080326c4 	.word	0x080326c4

0801ddf8 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 801ddf8:	b580      	push	{r7, lr}
 801ddfa:	b086      	sub	sp, #24
 801ddfc:	af00      	add	r7, sp, #0
 801ddfe:	60f8      	str	r0, [r7, #12]
 801de00:	60b9      	str	r1, [r7, #8]
 801de02:	603b      	str	r3, [r7, #0]
 801de04:	4613      	mov	r3, r2
 801de06:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	695b      	ldr	r3, [r3, #20]
 801de0c:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 801de0e:	697b      	ldr	r3, [r7, #20]
 801de10:	330e      	adds	r3, #14
 801de12:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 801de14:	697b      	ldr	r3, [r7, #20]
 801de16:	2206      	movs	r2, #6
 801de18:	68b9      	ldr	r1, [r7, #8]
 801de1a:	4618      	mov	r0, r3
 801de1c:	f009 f854 	bl	8026ec8 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 801de20:	697b      	ldr	r3, [r7, #20]
 801de22:	3306      	adds	r3, #6
 801de24:	68f9      	ldr	r1, [r7, #12]
 801de26:	2206      	movs	r2, #6
 801de28:	4618      	mov	r0, r3
 801de2a:	f009 f84d 	bl	8026ec8 <memcpy>
  eth->type = mg_htons(0x800);
 801de2e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801de32:	f004 fcaa 	bl	802278a <mg_ntohs>
 801de36:	4603      	mov	r3, r0
 801de38:	461a      	mov	r2, r3
 801de3a:	697b      	ldr	r3, [r7, #20]
 801de3c:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 801de3e:	2214      	movs	r2, #20
 801de40:	2100      	movs	r1, #0
 801de42:	6938      	ldr	r0, [r7, #16]
 801de44:	f007 fe04 	bl	8025a50 <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 801de48:	693b      	ldr	r3, [r7, #16]
 801de4a:	2245      	movs	r2, #69	@ 0x45
 801de4c:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 801de4e:	693b      	ldr	r3, [r7, #16]
 801de50:	2200      	movs	r2, #0
 801de52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801de56:	719a      	strb	r2, [r3, #6]
 801de58:	2200      	movs	r2, #0
 801de5a:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 801de5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801de5e:	b29b      	uxth	r3, r3
 801de60:	3314      	adds	r3, #20
 801de62:	b29b      	uxth	r3, r3
 801de64:	4618      	mov	r0, r3
 801de66:	f004 fc90 	bl	802278a <mg_ntohs>
 801de6a:	4603      	mov	r3, r0
 801de6c:	461a      	mov	r2, r3
 801de6e:	693b      	ldr	r3, [r7, #16]
 801de70:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 801de72:	693b      	ldr	r3, [r7, #16]
 801de74:	2240      	movs	r2, #64	@ 0x40
 801de76:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 801de78:	693b      	ldr	r3, [r7, #16]
 801de7a:	79fa      	ldrb	r2, [r7, #7]
 801de7c:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 801de7e:	693b      	ldr	r3, [r7, #16]
 801de80:	683a      	ldr	r2, [r7, #0]
 801de82:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 801de84:	693b      	ldr	r3, [r7, #16]
 801de86:	6a3a      	ldr	r2, [r7, #32]
 801de88:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 801de8a:	2114      	movs	r1, #20
 801de8c:	6938      	ldr	r0, [r7, #16]
 801de8e:	f7ff fe35 	bl	801dafc <ipcsum>
 801de92:	4603      	mov	r3, r0
 801de94:	461a      	mov	r2, r3
 801de96:	693b      	ldr	r3, [r7, #16]
 801de98:	815a      	strh	r2, [r3, #10]
  return ip;
 801de9a:	693b      	ldr	r3, [r7, #16]
}
 801de9c:	4618      	mov	r0, r3
 801de9e:	3718      	adds	r7, #24
 801dea0:	46bd      	mov	sp, r7
 801dea2:	bd80      	pop	{r7, pc}

0801dea4 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 801dea4:	b580      	push	{r7, lr}
 801dea6:	b08a      	sub	sp, #40	@ 0x28
 801dea8:	af02      	add	r7, sp, #8
 801deaa:	60f8      	str	r0, [r7, #12]
 801deac:	60b9      	str	r1, [r7, #8]
 801deae:	607a      	str	r2, [r7, #4]
 801deb0:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 801deb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801deb4:	3308      	adds	r3, #8
 801deb6:	9301      	str	r3, [sp, #4]
 801deb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801deba:	9300      	str	r3, [sp, #0]
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	2211      	movs	r2, #17
 801dec0:	68b9      	ldr	r1, [r7, #8]
 801dec2:	68f8      	ldr	r0, [r7, #12]
 801dec4:	f7ff ff98 	bl	801ddf8 <tx_ip>
 801dec8:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 801deca:	69fb      	ldr	r3, [r7, #28]
 801decc:	3314      	adds	r3, #20
 801dece:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 801ded0:	69bb      	ldr	r3, [r7, #24]
 801ded2:	887a      	ldrh	r2, [r7, #2]
 801ded4:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 801ded6:	69bb      	ldr	r3, [r7, #24]
 801ded8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801deda:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 801dedc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dede:	b29b      	uxth	r3, r3
 801dee0:	3308      	adds	r3, #8
 801dee2:	b29b      	uxth	r3, r3
 801dee4:	4618      	mov	r0, r3
 801dee6:	f004 fc50 	bl	802278a <mg_ntohs>
 801deea:	4603      	mov	r3, r0
 801deec:	461a      	mov	r2, r3
 801deee:	69bb      	ldr	r3, [r7, #24]
 801def0:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 801def2:	69bb      	ldr	r3, [r7, #24]
 801def4:	2200      	movs	r2, #0
 801def6:	719a      	strb	r2, [r3, #6]
 801def8:	2200      	movs	r2, #0
 801defa:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 801defc:	2208      	movs	r2, #8
 801defe:	69b9      	ldr	r1, [r7, #24]
 801df00:	2000      	movs	r0, #0
 801df02:	f7ff fdb5 	bl	801da70 <csumup>
 801df06:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 801df08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801df0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801df0c:	6978      	ldr	r0, [r7, #20]
 801df0e:	f7ff fdaf 	bl	801da70 <csumup>
 801df12:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 801df14:	69fb      	ldr	r3, [r7, #28]
 801df16:	330c      	adds	r3, #12
 801df18:	2204      	movs	r2, #4
 801df1a:	4619      	mov	r1, r3
 801df1c:	6978      	ldr	r0, [r7, #20]
 801df1e:	f7ff fda7 	bl	801da70 <csumup>
 801df22:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 801df24:	69fb      	ldr	r3, [r7, #28]
 801df26:	3310      	adds	r3, #16
 801df28:	2204      	movs	r2, #4
 801df2a:	4619      	mov	r1, r3
 801df2c:	6978      	ldr	r0, [r7, #20]
 801df2e:	f7ff fd9f 	bl	801da70 <csumup>
 801df32:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 801df34:	69fb      	ldr	r3, [r7, #28]
 801df36:	7a5b      	ldrb	r3, [r3, #9]
 801df38:	461a      	mov	r2, r3
 801df3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801df3c:	441a      	add	r2, r3
 801df3e:	697b      	ldr	r3, [r7, #20]
 801df40:	4413      	add	r3, r2
 801df42:	3308      	adds	r3, #8
 801df44:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 801df46:	6978      	ldr	r0, [r7, #20]
 801df48:	f7ff fdbd 	bl	801dac6 <csumfin>
 801df4c:	4603      	mov	r3, r0
 801df4e:	461a      	mov	r2, r3
 801df50:	69bb      	ldr	r3, [r7, #24]
 801df52:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 801df54:	69bb      	ldr	r3, [r7, #24]
 801df56:	3308      	adds	r3, #8
 801df58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801df5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801df5c:	4618      	mov	r0, r3
 801df5e:	f007 fd5d 	bl	8025a1c <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 801df62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801df64:	332a      	adds	r3, #42	@ 0x2a
 801df66:	4619      	mov	r1, r3
 801df68:	68f8      	ldr	r0, [r7, #12]
 801df6a:	f7ff fe37 	bl	801dbdc <ether_output>
}
 801df6e:	bf00      	nop
 801df70:	3720      	adds	r7, #32
 801df72:	46bd      	mov	sp, r7
 801df74:	bd80      	pop	{r7, pc}
	...

0801df78 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 801df78:	b5b0      	push	{r4, r5, r7, lr}
 801df7a:	b0cc      	sub	sp, #304	@ 0x130
 801df7c:	af04      	add	r7, sp, #16
 801df7e:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 801df82:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 801df86:	6020      	str	r0, [r4, #0]
 801df88:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801df8c:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 801df90:	6001      	str	r1, [r0, #0]
 801df92:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801df96:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 801df9a:	600a      	str	r2, [r1, #0]
 801df9c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801dfa0:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 801dfa4:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 801dfa6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801dfaa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801dfae:	4a38      	ldr	r2, [pc, #224]	@ (801e090 <tx_dhcp+0x118>)
 801dfb0:	4618      	mov	r0, r3
 801dfb2:	4611      	mov	r1, r2
 801dfb4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801dfb8:	461a      	mov	r2, r3
 801dfba:	f008 ff85 	bl	8026ec8 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 801dfbe:	4835      	ldr	r0, [pc, #212]	@ (801e094 <tx_dhcp+0x11c>)
 801dfc0:	f004 fbca 	bl	8022758 <mg_ntohl>
 801dfc4:	4602      	mov	r2, r0
 801dfc6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801dfca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801dfce:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 801dfd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801dfd6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801dfda:	6819      	ldr	r1, [r3, #0]
 801dfdc:	f107 0310 	add.w	r3, r7, #16
 801dfe0:	331c      	adds	r3, #28
 801dfe2:	2206      	movs	r2, #6
 801dfe4:	4618      	mov	r0, r3
 801dfe6:	f008 ff6f 	bl	8026ec8 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 801dfea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801dfee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	3302      	adds	r3, #2
 801dff6:	681b      	ldr	r3, [r3, #0]
 801dff8:	461a      	mov	r2, r3
 801dffa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801dffe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e002:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 801e004:	f107 0310 	add.w	r3, r7, #16
 801e008:	33f0      	adds	r3, #240	@ 0xf0
 801e00a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801e00e:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 801e012:	4618      	mov	r0, r3
 801e014:	f008 ff58 	bl	8026ec8 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 801e018:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 801e01c:	2b00      	cmp	r3, #0
 801e01e:	d009      	beq.n	801e034 <tx_dhcp+0xbc>
 801e020:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e024:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e028:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801e02c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 801e030:	6812      	ldr	r2, [r2, #0]
 801e032:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 801e034:	2044      	movs	r0, #68	@ 0x44
 801e036:	f004 fba8 	bl	802278a <mg_ntohs>
 801e03a:	4603      	mov	r3, r0
 801e03c:	461d      	mov	r5, r3
 801e03e:	2043      	movs	r0, #67	@ 0x43
 801e040:	f004 fba3 	bl	802278a <mg_ntohs>
 801e044:	4603      	mov	r3, r0
 801e046:	461c      	mov	r4, r3
 801e048:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e04c:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 801e050:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e054:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 801e058:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e05c:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 801e060:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801e064:	9303      	str	r3, [sp, #12]
 801e066:	f107 0310 	add.w	r3, r7, #16
 801e06a:	9302      	str	r3, [sp, #8]
 801e06c:	9401      	str	r4, [sp, #4]
 801e06e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e072:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	9300      	str	r3, [sp, #0]
 801e07a:	462b      	mov	r3, r5
 801e07c:	6812      	ldr	r2, [r2, #0]
 801e07e:	6809      	ldr	r1, [r1, #0]
 801e080:	6800      	ldr	r0, [r0, #0]
 801e082:	f7ff ff0f 	bl	801dea4 <tx_udp>
         sizeof(dhcp));
}
 801e086:	bf00      	nop
 801e088:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 801e08c:	46bd      	mov	sp, r7
 801e08e:	bdb0      	pop	{r4, r5, r7, pc}
 801e090:	080326d0 	.word	0x080326d0
 801e094:	63825363 	.word	0x63825363

0801e098 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 801e098:	b5b0      	push	{r4, r5, r7, lr}
 801e09a:	b090      	sub	sp, #64	@ 0x40
 801e09c:	af04      	add	r7, sp, #16
 801e09e:	60f8      	str	r0, [r7, #12]
 801e0a0:	60b9      	str	r1, [r7, #8]
 801e0a2:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 801e0a4:	4b31      	ldr	r3, [pc, #196]	@ (801e16c <tx_dhcp_request_sel+0xd4>)
 801e0a6:	f107 0414 	add.w	r4, r7, #20
 801e0aa:	461d      	mov	r5, r3
 801e0ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e0ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e0b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e0b4:	c403      	stmia	r4!, {r0, r1}
 801e0b6:	8022      	strh	r2, [r4, #0]
 801e0b8:	3402      	adds	r4, #2
 801e0ba:	0c13      	lsrs	r3, r2, #16
 801e0bc:	7023      	strb	r3, [r4, #0]
      54, 4, 0,   0,   0,   0,    // DHCP server ID
      50, 4, 0,   0,   0,   0,    // Requested IP
      55, 2, 1,   3,   255, 255,  // GW, mask [DNS] [SNTP]
      255                         // End of options
  };
  uint8_t addopts = 0;
 801e0be:	2300      	movs	r3, #0
 801e0c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 801e0c4:	f107 0314 	add.w	r3, r7, #20
 801e0c8:	330a      	adds	r3, #10
 801e0ca:	687a      	ldr	r2, [r7, #4]
 801e0cc:	601a      	str	r2, [r3, #0]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 801e0ce:	f107 0314 	add.w	r3, r7, #20
 801e0d2:	3310      	adds	r3, #16
 801e0d4:	68ba      	ldr	r2, [r7, #8]
 801e0d6:	601a      	str	r2, [r3, #0]
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	7fdb      	ldrb	r3, [r3, #31]
 801e0dc:	2b00      	cmp	r3, #0
 801e0de:	d00a      	beq.n	801e0f6 <tx_dhcp_request_sel+0x5e>
 801e0e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e0e4:	1c5a      	adds	r2, r3, #1
 801e0e6:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 801e0ea:	3318      	adds	r3, #24
 801e0ec:	3330      	adds	r3, #48	@ 0x30
 801e0ee:	443b      	add	r3, r7
 801e0f0:	2206      	movs	r2, #6
 801e0f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 801e0f6:	68fb      	ldr	r3, [r7, #12]
 801e0f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	d00a      	beq.n	801e116 <tx_dhcp_request_sel+0x7e>
 801e100:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e104:	1c5a      	adds	r2, r3, #1
 801e106:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 801e10a:	3318      	adds	r3, #24
 801e10c:	3330      	adds	r3, #48	@ 0x30
 801e10e:	443b      	add	r3, r7
 801e110:	222a      	movs	r2, #42	@ 0x2a
 801e112:	f803 2c1c 	strb.w	r2, [r3, #-28]
  opts[21] += addopts;
 801e116:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 801e11a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e11e:	4413      	add	r3, r2
 801e120:	b2db      	uxtb	r3, r3
 801e122:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 801e126:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e12a:	3319      	adds	r3, #25
 801e12c:	2200      	movs	r2, #0
 801e12e:	9202      	str	r2, [sp, #8]
 801e130:	9301      	str	r3, [sp, #4]
 801e132:	f107 0314 	add.w	r3, r7, #20
 801e136:	9300      	str	r3, [sp, #0]
 801e138:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e13c:	2200      	movs	r2, #0
 801e13e:	490c      	ldr	r1, [pc, #48]	@ (801e170 <tx_dhcp_request_sel+0xd8>)
 801e140:	68f8      	ldr	r0, [r7, #12]
 801e142:	f7ff ff19 	bl	801df78 <tx_dhcp>
          sizeof(opts) + addopts - 2, false);
  MG_DEBUG(("DHCP req sent"));
 801e146:	4b0b      	ldr	r3, [pc, #44]	@ (801e174 <tx_dhcp_request_sel+0xdc>)
 801e148:	681b      	ldr	r3, [r3, #0]
 801e14a:	2b02      	cmp	r3, #2
 801e14c:	dd09      	ble.n	801e162 <tx_dhcp_request_sel+0xca>
 801e14e:	4b0a      	ldr	r3, [pc, #40]	@ (801e178 <tx_dhcp_request_sel+0xe0>)
 801e150:	f241 425b 	movw	r2, #5211	@ 0x145b
 801e154:	4909      	ldr	r1, [pc, #36]	@ (801e17c <tx_dhcp_request_sel+0xe4>)
 801e156:	2003      	movs	r0, #3
 801e158:	f7fc fe70 	bl	801ae3c <mg_log_prefix>
 801e15c:	4808      	ldr	r0, [pc, #32]	@ (801e180 <tx_dhcp_request_sel+0xe8>)
 801e15e:	f7fc febd 	bl	801aedc <mg_log>
}
 801e162:	bf00      	nop
 801e164:	3730      	adds	r7, #48	@ 0x30
 801e166:	46bd      	mov	sp, r7
 801e168:	bdb0      	pop	{r4, r5, r7, pc}
 801e16a:	bf00      	nop
 801e16c:	080327f0 	.word	0x080327f0
 801e170:	08033df4 	.word	0x08033df4
 801e174:	20000298 	.word	0x20000298
 801e178:	08033ed0 	.word	0x08033ed0
 801e17c:	080310c8 	.word	0x080310c8
 801e180:	080327e0 	.word	0x080327e0

0801e184 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 801e184:	b580      	push	{r7, lr}
 801e186:	b08a      	sub	sp, #40	@ 0x28
 801e188:	af04      	add	r7, sp, #16
 801e18a:	60f8      	str	r0, [r7, #12]
 801e18c:	60b9      	str	r1, [r7, #8]
 801e18e:	607a      	str	r2, [r7, #4]
 801e190:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 801e192:	4b10      	ldr	r3, [pc, #64]	@ (801e1d4 <tx_dhcp_request_re+0x50>)
 801e194:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 801e196:	2301      	movs	r3, #1
 801e198:	9302      	str	r3, [sp, #8]
 801e19a:	2304      	movs	r3, #4
 801e19c:	9301      	str	r3, [sp, #4]
 801e19e:	f107 0314 	add.w	r3, r7, #20
 801e1a2:	9300      	str	r3, [sp, #0]
 801e1a4:	683b      	ldr	r3, [r7, #0]
 801e1a6:	687a      	ldr	r2, [r7, #4]
 801e1a8:	68b9      	ldr	r1, [r7, #8]
 801e1aa:	68f8      	ldr	r0, [r7, #12]
 801e1ac:	f7ff fee4 	bl	801df78 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 801e1b0:	4b09      	ldr	r3, [pc, #36]	@ (801e1d8 <tx_dhcp_request_re+0x54>)
 801e1b2:	681b      	ldr	r3, [r3, #0]
 801e1b4:	2b02      	cmp	r3, #2
 801e1b6:	dd09      	ble.n	801e1cc <tx_dhcp_request_re+0x48>
 801e1b8:	4b08      	ldr	r3, [pc, #32]	@ (801e1dc <tx_dhcp_request_re+0x58>)
 801e1ba:	f241 4266 	movw	r2, #5222	@ 0x1466
 801e1be:	4908      	ldr	r1, [pc, #32]	@ (801e1e0 <tx_dhcp_request_re+0x5c>)
 801e1c0:	2003      	movs	r0, #3
 801e1c2:	f7fc fe3b 	bl	801ae3c <mg_log_prefix>
 801e1c6:	4807      	ldr	r0, [pc, #28]	@ (801e1e4 <tx_dhcp_request_re+0x60>)
 801e1c8:	f7fc fe88 	bl	801aedc <mg_log>
}
 801e1cc:	bf00      	nop
 801e1ce:	3718      	adds	r7, #24
 801e1d0:	46bd      	mov	sp, r7
 801e1d2:	bd80      	pop	{r7, pc}
 801e1d4:	ff030135 	.word	0xff030135
 801e1d8:	20000298 	.word	0x20000298
 801e1dc:	08033ee4 	.word	0x08033ee4
 801e1e0:	080310c8 	.word	0x080310c8
 801e1e4:	080327e0 	.word	0x080327e0

0801e1e8 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 801e1e8:	b580      	push	{r7, lr}
 801e1ea:	b088      	sub	sp, #32
 801e1ec:	af04      	add	r7, sp, #16
 801e1ee:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 801e1f0:	4a14      	ldr	r2, [pc, #80]	@ (801e244 <tx_dhcp_discover+0x5c>)
 801e1f2:	f107 0308 	add.w	r3, r7, #8
 801e1f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e1fa:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 801e1fe:	2300      	movs	r3, #0
 801e200:	9302      	str	r3, [sp, #8]
 801e202:	2308      	movs	r3, #8
 801e204:	9301      	str	r3, [sp, #4]
 801e206:	f107 0308 	add.w	r3, r7, #8
 801e20a:	9300      	str	r3, [sp, #0]
 801e20c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e210:	2200      	movs	r2, #0
 801e212:	490d      	ldr	r1, [pc, #52]	@ (801e248 <tx_dhcp_discover+0x60>)
 801e214:	6878      	ldr	r0, [r7, #4]
 801e216:	f7ff feaf 	bl	801df78 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 801e21a:	4b0c      	ldr	r3, [pc, #48]	@ (801e24c <tx_dhcp_discover+0x64>)
 801e21c:	681b      	ldr	r3, [r3, #0]
 801e21e:	2b02      	cmp	r3, #2
 801e220:	dd0c      	ble.n	801e23c <tx_dhcp_discover+0x54>
 801e222:	4b0b      	ldr	r3, [pc, #44]	@ (801e250 <tx_dhcp_discover+0x68>)
 801e224:	f241 4270 	movw	r2, #5232	@ 0x1470
 801e228:	490a      	ldr	r1, [pc, #40]	@ (801e254 <tx_dhcp_discover+0x6c>)
 801e22a:	2003      	movs	r0, #3
 801e22c:	f7fc fe06 	bl	801ae3c <mg_log_prefix>
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	461a      	mov	r2, r3
 801e234:	4908      	ldr	r1, [pc, #32]	@ (801e258 <tx_dhcp_discover+0x70>)
 801e236:	4809      	ldr	r0, [pc, #36]	@ (801e25c <tx_dhcp_discover+0x74>)
 801e238:	f7fc fe50 	bl	801aedc <mg_log>
}
 801e23c:	bf00      	nop
 801e23e:	3710      	adds	r7, #16
 801e240:	46bd      	mov	sp, r7
 801e242:	bd80      	pop	{r7, pc}
 801e244:	0803282c 	.word	0x0803282c
 801e248:	08033df4 	.word	0x08033df4
 801e24c:	20000298 	.word	0x20000298
 801e250:	08033ef8 	.word	0x08033ef8
 801e254:	080310c8 	.word	0x080310c8
 801e258:	080210f1 	.word	0x080210f1
 801e25c:	0803280c 	.word	0x0803280c

0801e260 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 801e260:	b580      	push	{r7, lr}
 801e262:	b086      	sub	sp, #24
 801e264:	af00      	add	r7, sp, #0
 801e266:	60f8      	str	r0, [r7, #12]
 801e268:	60b9      	str	r1, [r7, #8]
 801e26a:	4613      	mov	r3, r2
 801e26c:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 801e26e:	2300      	movs	r3, #0
 801e270:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	681b      	ldr	r3, [r3, #0]
 801e276:	617b      	str	r3, [r7, #20]
 801e278:	e057      	b.n	801e32a <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 801e27a:	697b      	ldr	r3, [r7, #20]
 801e27c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e280:	f003 0310 	and.w	r3, r3, #16
 801e284:	b2db      	uxtb	r3, r3
 801e286:	2b00      	cmp	r3, #0
 801e288:	d010      	beq.n	801e2ac <getpeer+0x4c>
 801e28a:	68bb      	ldr	r3, [r7, #8]
 801e28c:	699b      	ldr	r3, [r3, #24]
 801e28e:	2b00      	cmp	r3, #0
 801e290:	d00c      	beq.n	801e2ac <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 801e292:	68bb      	ldr	r3, [r7, #8]
 801e294:	699b      	ldr	r3, [r3, #24]
 801e296:	f103 000e 	add.w	r0, r3, #14
 801e29a:	697b      	ldr	r3, [r7, #20]
 801e29c:	331c      	adds	r3, #28
 801e29e:	2204      	movs	r2, #4
 801e2a0:	4619      	mov	r1, r3
 801e2a2:	f007 fb41 	bl	8025928 <memcmp>
 801e2a6:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	d042      	beq.n	801e332 <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 801e2ac:	697b      	ldr	r3, [r7, #20]
 801e2ae:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801e2b2:	f003 0301 	and.w	r3, r3, #1
 801e2b6:	b2db      	uxtb	r3, r3
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d00b      	beq.n	801e2d4 <getpeer+0x74>
 801e2bc:	68bb      	ldr	r3, [r7, #8]
 801e2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d007      	beq.n	801e2d4 <getpeer+0x74>
 801e2c4:	697b      	ldr	r3, [r7, #20]
 801e2c6:	8b1a      	ldrh	r2, [r3, #24]
 801e2c8:	68bb      	ldr	r3, [r7, #8]
 801e2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e2cc:	885b      	ldrh	r3, [r3, #2]
 801e2ce:	b29b      	uxth	r3, r3
 801e2d0:	429a      	cmp	r2, r3
 801e2d2:	d030      	beq.n	801e336 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801e2d4:	697b      	ldr	r3, [r7, #20]
 801e2d6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801e2da:	f003 0301 	and.w	r3, r3, #1
 801e2de:	b2db      	uxtb	r3, r3
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d11f      	bne.n	801e324 <getpeer+0xc4>
 801e2e4:	68bb      	ldr	r3, [r7, #8]
 801e2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	d01b      	beq.n	801e324 <getpeer+0xc4>
 801e2ec:	697b      	ldr	r3, [r7, #20]
 801e2ee:	8b1a      	ldrh	r2, [r3, #24]
 801e2f0:	68bb      	ldr	r3, [r7, #8]
 801e2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e2f4:	885b      	ldrh	r3, [r3, #2]
 801e2f6:	b29b      	uxth	r3, r3
 801e2f8:	429a      	cmp	r2, r3
 801e2fa:	d113      	bne.n	801e324 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801e2fc:	697b      	ldr	r3, [r7, #20]
 801e2fe:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e302:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801e306:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801e308:	79fa      	ldrb	r2, [r7, #7]
 801e30a:	429a      	cmp	r2, r3
 801e30c:	d10a      	bne.n	801e324 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801e30e:	79fb      	ldrb	r3, [r7, #7]
 801e310:	2b00      	cmp	r3, #0
 801e312:	d111      	bne.n	801e338 <getpeer+0xd8>
 801e314:	697b      	ldr	r3, [r7, #20]
 801e316:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801e318:	68bb      	ldr	r3, [r7, #8]
 801e31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e31c:	881b      	ldrh	r3, [r3, #0]
 801e31e:	b29b      	uxth	r3, r3
 801e320:	429a      	cmp	r2, r3
 801e322:	d009      	beq.n	801e338 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 801e324:	697b      	ldr	r3, [r7, #20]
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	617b      	str	r3, [r7, #20]
 801e32a:	697b      	ldr	r3, [r7, #20]
 801e32c:	2b00      	cmp	r3, #0
 801e32e:	d1a4      	bne.n	801e27a <getpeer+0x1a>
 801e330:	e002      	b.n	801e338 <getpeer+0xd8>
      break;
 801e332:	bf00      	nop
 801e334:	e000      	b.n	801e338 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 801e336:	bf00      	nop
      break;
  }
  return c;
 801e338:	697b      	ldr	r3, [r7, #20]
}
 801e33a:	4618      	mov	r0, r3
 801e33c:	3718      	adds	r7, #24
 801e33e:	46bd      	mov	sp, r7
 801e340:	bd80      	pop	{r7, pc}
	...

0801e344 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e344:	b5b0      	push	{r4, r5, r7, lr}
 801e346:	b088      	sub	sp, #32
 801e348:	af02      	add	r7, sp, #8
 801e34a:	6078      	str	r0, [r7, #4]
 801e34c:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 801e34e:	683b      	ldr	r3, [r7, #0]
 801e350:	699b      	ldr	r3, [r3, #24]
 801e352:	88db      	ldrh	r3, [r3, #6]
 801e354:	b29c      	uxth	r4, r3
 801e356:	2001      	movs	r0, #1
 801e358:	f004 fa17 	bl	802278a <mg_ntohs>
 801e35c:	4603      	mov	r3, r0
 801e35e:	429c      	cmp	r4, r3
 801e360:	d176      	bne.n	801e450 <rx_arp+0x10c>
 801e362:	683b      	ldr	r3, [r7, #0]
 801e364:	699b      	ldr	r3, [r3, #24]
 801e366:	699a      	ldr	r2, [r3, #24]
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	689b      	ldr	r3, [r3, #8]
 801e36c:	429a      	cmp	r2, r3
 801e36e:	d16f      	bne.n	801e450 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	695b      	ldr	r3, [r3, #20]
 801e374:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 801e376:	697b      	ldr	r3, [r7, #20]
 801e378:	330e      	adds	r3, #14
 801e37a:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 801e37c:	6978      	ldr	r0, [r7, #20]
 801e37e:	683b      	ldr	r3, [r7, #0]
 801e380:	691b      	ldr	r3, [r3, #16]
 801e382:	3306      	adds	r3, #6
 801e384:	2206      	movs	r2, #6
 801e386:	4619      	mov	r1, r3
 801e388:	f008 fd9e 	bl	8026ec8 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 801e38c:	697b      	ldr	r3, [r7, #20]
 801e38e:	3306      	adds	r3, #6
 801e390:	6879      	ldr	r1, [r7, #4]
 801e392:	2206      	movs	r2, #6
 801e394:	4618      	mov	r0, r3
 801e396:	f008 fd97 	bl	8026ec8 <memcpy>
    eth->type = mg_htons(0x806);
 801e39a:	f640 0006 	movw	r0, #2054	@ 0x806
 801e39e:	f004 f9f4 	bl	802278a <mg_ntohs>
 801e3a2:	4603      	mov	r3, r0
 801e3a4:	461a      	mov	r2, r3
 801e3a6:	697b      	ldr	r3, [r7, #20]
 801e3a8:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 801e3aa:	683b      	ldr	r3, [r7, #0]
 801e3ac:	699a      	ldr	r2, [r3, #24]
 801e3ae:	693b      	ldr	r3, [r7, #16]
 801e3b0:	6814      	ldr	r4, [r2, #0]
 801e3b2:	6850      	ldr	r0, [r2, #4]
 801e3b4:	6891      	ldr	r1, [r2, #8]
 801e3b6:	68d5      	ldr	r5, [r2, #12]
 801e3b8:	601c      	str	r4, [r3, #0]
 801e3ba:	6058      	str	r0, [r3, #4]
 801e3bc:	6099      	str	r1, [r3, #8]
 801e3be:	60dd      	str	r5, [r3, #12]
 801e3c0:	6914      	ldr	r4, [r2, #16]
 801e3c2:	6950      	ldr	r0, [r2, #20]
 801e3c4:	6991      	ldr	r1, [r2, #24]
 801e3c6:	611c      	str	r4, [r3, #16]
 801e3c8:	6158      	str	r0, [r3, #20]
 801e3ca:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 801e3cc:	2002      	movs	r0, #2
 801e3ce:	f004 f9dc 	bl	802278a <mg_ntohs>
 801e3d2:	4603      	mov	r3, r0
 801e3d4:	461a      	mov	r2, r3
 801e3d6:	693b      	ldr	r3, [r7, #16]
 801e3d8:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 801e3da:	693b      	ldr	r3, [r7, #16]
 801e3dc:	f103 0012 	add.w	r0, r3, #18
 801e3e0:	683b      	ldr	r3, [r7, #0]
 801e3e2:	699b      	ldr	r3, [r3, #24]
 801e3e4:	3308      	adds	r3, #8
 801e3e6:	2206      	movs	r2, #6
 801e3e8:	4619      	mov	r1, r3
 801e3ea:	f008 fd6d 	bl	8026ec8 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 801e3ee:	693b      	ldr	r3, [r7, #16]
 801e3f0:	3308      	adds	r3, #8
 801e3f2:	6879      	ldr	r1, [r7, #4]
 801e3f4:	2206      	movs	r2, #6
 801e3f6:	4618      	mov	r0, r3
 801e3f8:	f008 fd66 	bl	8026ec8 <memcpy>
    arp->tpa = pkt->arp->spa;
 801e3fc:	683b      	ldr	r3, [r7, #0]
 801e3fe:	699b      	ldr	r3, [r3, #24]
 801e400:	f8d3 200e 	ldr.w	r2, [r3, #14]
 801e404:	693b      	ldr	r3, [r7, #16]
 801e406:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	689a      	ldr	r2, [r3, #8]
 801e40c:	693b      	ldr	r3, [r7, #16]
 801e40e:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 801e412:	4b4a      	ldr	r3, [pc, #296]	@ (801e53c <rx_arp+0x1f8>)
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	2b02      	cmp	r3, #2
 801e418:	dd10      	ble.n	801e43c <rx_arp+0xf8>
 801e41a:	4b49      	ldr	r3, [pc, #292]	@ (801e540 <rx_arp+0x1fc>)
 801e41c:	f241 4292 	movw	r2, #5266	@ 0x1492
 801e420:	4948      	ldr	r1, [pc, #288]	@ (801e544 <rx_arp+0x200>)
 801e422:	2003      	movs	r0, #3
 801e424:	f7fc fd0a 	bl	801ae3c <mg_log_prefix>
 801e428:	693b      	ldr	r3, [r7, #16]
 801e42a:	f103 0218 	add.w	r2, r3, #24
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	9300      	str	r3, [sp, #0]
 801e432:	4b45      	ldr	r3, [pc, #276]	@ (801e548 <rx_arp+0x204>)
 801e434:	4945      	ldr	r1, [pc, #276]	@ (801e54c <rx_arp+0x208>)
 801e436:	4846      	ldr	r0, [pc, #280]	@ (801e550 <rx_arp+0x20c>)
 801e438:	f7fc fd50 	bl	801aedc <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 801e43c:	693b      	ldr	r3, [r7, #16]
 801e43e:	f103 021c 	add.w	r2, r3, #28
 801e442:	697b      	ldr	r3, [r7, #20]
 801e444:	1ad3      	subs	r3, r2, r3
 801e446:	4619      	mov	r1, r3
 801e448:	6878      	ldr	r0, [r7, #4]
 801e44a:	f7ff fbc7 	bl	801dbdc <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 801e44e:	e071      	b.n	801e534 <rx_arp+0x1f0>
  } else if (pkt->arp->op == mg_htons(2)) {
 801e450:	683b      	ldr	r3, [r7, #0]
 801e452:	699b      	ldr	r3, [r3, #24]
 801e454:	88db      	ldrh	r3, [r3, #6]
 801e456:	b29c      	uxth	r4, r3
 801e458:	2002      	movs	r0, #2
 801e45a:	f004 f996 	bl	802278a <mg_ntohs>
 801e45e:	4603      	mov	r3, r0
 801e460:	429c      	cmp	r4, r3
 801e462:	d167      	bne.n	801e534 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 801e464:	683b      	ldr	r3, [r7, #0]
 801e466:	699b      	ldr	r3, [r3, #24]
 801e468:	3312      	adds	r3, #18
 801e46a:	6879      	ldr	r1, [r7, #4]
 801e46c:	2206      	movs	r2, #6
 801e46e:	4618      	mov	r0, r3
 801e470:	f007 fa5a 	bl	8025928 <memcmp>
 801e474:	4603      	mov	r3, r0
 801e476:	2b00      	cmp	r3, #0
 801e478:	d15b      	bne.n	801e532 <rx_arp+0x1ee>
    if (pkt->arp->spa == ifp->gw) {
 801e47a:	683b      	ldr	r3, [r7, #0]
 801e47c:	699b      	ldr	r3, [r3, #24]
 801e47e:	f8d3 200e 	ldr.w	r2, [r3, #14]
 801e482:	687b      	ldr	r3, [r7, #4]
 801e484:	691b      	ldr	r3, [r3, #16]
 801e486:	429a      	cmp	r2, r3
 801e488:	d10a      	bne.n	801e4a0 <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801e490:	683b      	ldr	r3, [r7, #0]
 801e492:	699b      	ldr	r3, [r3, #24]
 801e494:	3308      	adds	r3, #8
 801e496:	2206      	movs	r2, #6
 801e498:	4619      	mov	r1, r3
 801e49a:	f008 fd15 	bl	8026ec8 <memcpy>
 801e49e:	e049      	b.n	801e534 <rx_arp+0x1f0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e4a4:	2200      	movs	r2, #0
 801e4a6:	6839      	ldr	r1, [r7, #0]
 801e4a8:	4618      	mov	r0, r3
 801e4aa:	f7ff fed9 	bl	801e260 <getpeer>
 801e4ae:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 801e4b0:	68fb      	ldr	r3, [r7, #12]
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d03e      	beq.n	801e534 <rx_arp+0x1f0>
 801e4b6:	68fb      	ldr	r3, [r7, #12]
 801e4b8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e4bc:	f003 0310 	and.w	r3, r3, #16
 801e4c0:	b2db      	uxtb	r3, r3
 801e4c2:	2b00      	cmp	r3, #0
 801e4c4:	d036      	beq.n	801e534 <rx_arp+0x1f0>
        struct connstate *s = (struct connstate *) (c + 1);
 801e4c6:	68fb      	ldr	r3, [r7, #12]
 801e4c8:	33b0      	adds	r3, #176	@ 0xb0
 801e4ca:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 801e4cc:	68bb      	ldr	r3, [r7, #8]
 801e4ce:	f103 0018 	add.w	r0, r3, #24
 801e4d2:	683b      	ldr	r3, [r7, #0]
 801e4d4:	699b      	ldr	r3, [r3, #24]
 801e4d6:	3308      	adds	r3, #8
 801e4d8:	2206      	movs	r2, #6
 801e4da:	4619      	mov	r1, r3
 801e4dc:	f008 fcf4 	bl	8026ec8 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 801e4e0:	4b16      	ldr	r3, [pc, #88]	@ (801e53c <rx_arp+0x1f8>)
 801e4e2:	681b      	ldr	r3, [r3, #0]
 801e4e4:	2b02      	cmp	r3, #2
 801e4e6:	dd15      	ble.n	801e514 <rx_arp+0x1d0>
 801e4e8:	4b15      	ldr	r3, [pc, #84]	@ (801e540 <rx_arp+0x1fc>)
 801e4ea:	f241 429f 	movw	r2, #5279	@ 0x149f
 801e4ee:	4915      	ldr	r1, [pc, #84]	@ (801e544 <rx_arp+0x200>)
 801e4f0:	2003      	movs	r0, #3
 801e4f2:	f7fc fca3 	bl	801ae3c <mg_log_prefix>
 801e4f6:	68fb      	ldr	r3, [r7, #12]
 801e4f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801e4fa:	68fb      	ldr	r3, [r7, #12]
 801e4fc:	f103 021c 	add.w	r2, r3, #28
 801e500:	68bb      	ldr	r3, [r7, #8]
 801e502:	3318      	adds	r3, #24
 801e504:	9301      	str	r3, [sp, #4]
 801e506:	4b10      	ldr	r3, [pc, #64]	@ (801e548 <rx_arp+0x204>)
 801e508:	9300      	str	r3, [sp, #0]
 801e50a:	4613      	mov	r3, r2
 801e50c:	4a0f      	ldr	r2, [pc, #60]	@ (801e54c <rx_arp+0x208>)
 801e50e:	4811      	ldr	r0, [pc, #68]	@ (801e554 <rx_arp+0x210>)
 801e510:	f7fc fce4 	bl	801aedc <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 801e514:	68fa      	ldr	r2, [r7, #12]
 801e516:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801e51a:	f36f 1304 	bfc	r3, #4, #1
 801e51e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        send_syn(c);
 801e522:	68f8      	ldr	r0, [r7, #12]
 801e524:	f002 f8ac 	bl	8020680 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 801e528:	2103      	movs	r1, #3
 801e52a:	68f8      	ldr	r0, [r7, #12]
 801e52c:	f7ff fafa 	bl	801db24 <settmout>
 801e530:	e000      	b.n	801e534 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 801e532:	bf00      	nop
      }
    }
  }
}
 801e534:	3718      	adds	r7, #24
 801e536:	46bd      	mov	sp, r7
 801e538:	bdb0      	pop	{r4, r5, r7, pc}
 801e53a:	bf00      	nop
 801e53c:	20000298 	.word	0x20000298
 801e540:	08033f0c 	.word	0x08033f0c
 801e544:	080310c8 	.word	0x080310c8
 801e548:	080210f1 	.word	0x080210f1
 801e54c:	0802102d 	.word	0x0802102d
 801e550:	08032834 	.word	0x08032834
 801e554:	0803284c 	.word	0x0803284c

0801e558 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e558:	b580      	push	{r7, lr}
 801e55a:	b08a      	sub	sp, #40	@ 0x28
 801e55c:	af02      	add	r7, sp, #8
 801e55e:	6078      	str	r0, [r7, #4]
 801e560:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 801e562:	683b      	ldr	r3, [r7, #0]
 801e564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e566:	781b      	ldrb	r3, [r3, #0]
 801e568:	2b08      	cmp	r3, #8
 801e56a:	d14d      	bne.n	801e608 <rx_icmp+0xb0>
 801e56c:	683b      	ldr	r3, [r7, #0]
 801e56e:	69db      	ldr	r3, [r3, #28]
 801e570:	2b00      	cmp	r3, #0
 801e572:	d049      	beq.n	801e608 <rx_icmp+0xb0>
 801e574:	683b      	ldr	r3, [r7, #0]
 801e576:	69db      	ldr	r3, [r3, #28]
 801e578:	691a      	ldr	r2, [r3, #16]
 801e57a:	687b      	ldr	r3, [r7, #4]
 801e57c:	689b      	ldr	r3, [r3, #8]
 801e57e:	429a      	cmp	r2, r3
 801e580:	d142      	bne.n	801e608 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 801e582:	2326      	movs	r3, #38	@ 0x26
 801e584:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	699a      	ldr	r2, [r3, #24]
 801e58a:	69bb      	ldr	r3, [r7, #24]
 801e58c:	1ad3      	subs	r3, r2, r3
 801e58e:	617b      	str	r3, [r7, #20]
 801e590:	683b      	ldr	r3, [r7, #0]
 801e592:	68db      	ldr	r3, [r3, #12]
 801e594:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 801e596:	69fa      	ldr	r2, [r7, #28]
 801e598:	697b      	ldr	r3, [r7, #20]
 801e59a:	429a      	cmp	r2, r3
 801e59c:	d901      	bls.n	801e5a2 <rx_icmp+0x4a>
 801e59e:	697b      	ldr	r3, [r7, #20]
 801e5a0:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 801e5a2:	683b      	ldr	r3, [r7, #0]
 801e5a4:	691b      	ldr	r3, [r3, #16]
 801e5a6:	1d99      	adds	r1, r3, #6
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	6898      	ldr	r0, [r3, #8]
 801e5ac:	683b      	ldr	r3, [r7, #0]
 801e5ae:	69db      	ldr	r3, [r3, #28]
 801e5b0:	68db      	ldr	r3, [r3, #12]
 801e5b2:	69fa      	ldr	r2, [r7, #28]
 801e5b4:	3204      	adds	r2, #4
 801e5b6:	9201      	str	r2, [sp, #4]
 801e5b8:	9300      	str	r3, [sp, #0]
 801e5ba:	4603      	mov	r3, r0
 801e5bc:	2201      	movs	r2, #1
 801e5be:	6878      	ldr	r0, [r7, #4]
 801e5c0:	f7ff fc1a 	bl	801ddf8 <tx_ip>
 801e5c4:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 801e5c6:	693b      	ldr	r3, [r7, #16]
 801e5c8:	3314      	adds	r3, #20
 801e5ca:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 801e5cc:	2204      	movs	r2, #4
 801e5ce:	2100      	movs	r1, #0
 801e5d0:	68f8      	ldr	r0, [r7, #12]
 801e5d2:	f007 fa3d 	bl	8025a50 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 801e5d6:	68fb      	ldr	r3, [r7, #12]
 801e5d8:	1d18      	adds	r0, r3, #4
 801e5da:	683b      	ldr	r3, [r7, #0]
 801e5dc:	689b      	ldr	r3, [r3, #8]
 801e5de:	69fa      	ldr	r2, [r7, #28]
 801e5e0:	4619      	mov	r1, r3
 801e5e2:	f008 fc71 	bl	8026ec8 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 801e5e6:	69fb      	ldr	r3, [r7, #28]
 801e5e8:	3304      	adds	r3, #4
 801e5ea:	4619      	mov	r1, r3
 801e5ec:	68f8      	ldr	r0, [r7, #12]
 801e5ee:	f7ff fa85 	bl	801dafc <ipcsum>
 801e5f2:	4603      	mov	r3, r0
 801e5f4:	461a      	mov	r2, r3
 801e5f6:	68fb      	ldr	r3, [r7, #12]
 801e5f8:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 801e5fa:	69ba      	ldr	r2, [r7, #24]
 801e5fc:	69fb      	ldr	r3, [r7, #28]
 801e5fe:	4413      	add	r3, r2
 801e600:	4619      	mov	r1, r3
 801e602:	6878      	ldr	r0, [r7, #4]
 801e604:	f7ff faea 	bl	801dbdc <ether_output>
  }
}
 801e608:	bf00      	nop
 801e60a:	3720      	adds	r7, #32
 801e60c:	46bd      	mov	sp, r7
 801e60e:	bd80      	pop	{r7, pc}

0801e610 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e614:	b090      	sub	sp, #64	@ 0x40
 801e616:	af00      	add	r7, sp, #0
 801e618:	60f8      	str	r0, [r7, #12]
 801e61a:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 801e61c:	2300      	movs	r3, #0
 801e61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e620:	2300      	movs	r3, #0
 801e622:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e624:	2300      	movs	r3, #0
 801e626:	627b      	str	r3, [r7, #36]	@ 0x24
 801e628:	2300      	movs	r3, #0
 801e62a:	623b      	str	r3, [r7, #32]
 801e62c:	2300      	movs	r3, #0
 801e62e:	61fb      	str	r3, [r7, #28]
 801e630:	2300      	movs	r3, #0
 801e632:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 801e634:	2300      	movs	r3, #0
 801e636:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 801e63a:	68fb      	ldr	r3, [r7, #12]
 801e63c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e640:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 801e644:	68bb      	ldr	r3, [r7, #8]
 801e646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e648:	33f0      	adds	r3, #240	@ 0xf0
 801e64a:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 801e64c:	68bb      	ldr	r3, [r7, #8]
 801e64e:	681a      	ldr	r2, [r3, #0]
 801e650:	68bb      	ldr	r3, [r7, #8]
 801e652:	685b      	ldr	r3, [r3, #4]
 801e654:	4413      	add	r3, r2
 801e656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801e658:	68bb      	ldr	r3, [r7, #8]
 801e65a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e65c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801e660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e662:	429a      	cmp	r2, r3
 801e664:	f0c0 81ac 	bcc.w	801e9c0 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 801e668:	68bb      	ldr	r3, [r7, #8]
 801e66a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e66c:	1d18      	adds	r0, r3, #4
 801e66e:	68fb      	ldr	r3, [r7, #12]
 801e670:	3302      	adds	r3, #2
 801e672:	2204      	movs	r2, #4
 801e674:	4619      	mov	r1, r3
 801e676:	f007 f957 	bl	8025928 <memcmp>
 801e67a:	4603      	mov	r3, r0
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	f040 81a1 	bne.w	801e9c4 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 801e682:	e08a      	b.n	801e79a <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 801e684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e686:	781b      	ldrb	r3, [r3, #0]
 801e688:	2b01      	cmp	r3, #1
 801e68a:	d10e      	bne.n	801e6aa <rx_dhcp_client+0x9a>
 801e68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e68e:	3301      	adds	r3, #1
 801e690:	781b      	ldrb	r3, [r3, #0]
 801e692:	2b04      	cmp	r3, #4
 801e694:	d109      	bne.n	801e6aa <rx_dhcp_client+0x9a>
 801e696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e698:	3306      	adds	r3, #6
 801e69a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e69c:	429a      	cmp	r2, r3
 801e69e:	d904      	bls.n	801e6aa <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 801e6a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6a2:	3302      	adds	r3, #2
 801e6a4:	681b      	ldr	r3, [r3, #0]
 801e6a6:	627b      	str	r3, [r7, #36]	@ 0x24
 801e6a8:	e070      	b.n	801e78c <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 801e6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6ac:	781b      	ldrb	r3, [r3, #0]
 801e6ae:	2b03      	cmp	r3, #3
 801e6b0:	d112      	bne.n	801e6d8 <rx_dhcp_client+0xc8>
 801e6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6b4:	3301      	adds	r3, #1
 801e6b6:	781b      	ldrb	r3, [r3, #0]
 801e6b8:	2b04      	cmp	r3, #4
 801e6ba:	d10d      	bne.n	801e6d8 <rx_dhcp_client+0xc8>
 801e6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6be:	3306      	adds	r3, #6
 801e6c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e6c2:	429a      	cmp	r2, r3
 801e6c4:	d908      	bls.n	801e6d8 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 801e6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6c8:	3302      	adds	r3, #2
 801e6ca:	681b      	ldr	r3, [r3, #0]
 801e6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 801e6ce:	68bb      	ldr	r3, [r7, #8]
 801e6d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e6d2:	691b      	ldr	r3, [r3, #16]
 801e6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e6d6:	e059      	b.n	801e78c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 801e6d8:	68fb      	ldr	r3, [r7, #12]
 801e6da:	7fdb      	ldrb	r3, [r3, #31]
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d012      	beq.n	801e706 <rx_dhcp_client+0xf6>
 801e6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6e2:	781b      	ldrb	r3, [r3, #0]
 801e6e4:	2b06      	cmp	r3, #6
 801e6e6:	d10e      	bne.n	801e706 <rx_dhcp_client+0xf6>
 801e6e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6ea:	3301      	adds	r3, #1
 801e6ec:	781b      	ldrb	r3, [r3, #0]
 801e6ee:	2b04      	cmp	r3, #4
 801e6f0:	d109      	bne.n	801e706 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 801e6f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6f4:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 801e6f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e6f8:	429a      	cmp	r2, r3
 801e6fa:	d904      	bls.n	801e706 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 801e6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6fe:	3302      	adds	r3, #2
 801e700:	681b      	ldr	r3, [r3, #0]
 801e702:	61fb      	str	r3, [r7, #28]
 801e704:	e042      	b.n	801e78c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 801e706:	68fb      	ldr	r3, [r7, #12]
 801e708:	f893 3020 	ldrb.w	r3, [r3, #32]
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	d012      	beq.n	801e736 <rx_dhcp_client+0x126>
 801e710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e712:	781b      	ldrb	r3, [r3, #0]
 801e714:	2b2a      	cmp	r3, #42	@ 0x2a
 801e716:	d10e      	bne.n	801e736 <rx_dhcp_client+0x126>
 801e718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e71a:	3301      	adds	r3, #1
 801e71c:	781b      	ldrb	r3, [r3, #0]
 801e71e:	2b04      	cmp	r3, #4
 801e720:	d109      	bne.n	801e736 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 801e722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e724:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 801e726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e728:	429a      	cmp	r2, r3
 801e72a:	d904      	bls.n	801e736 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 801e72c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e72e:	3302      	adds	r3, #2
 801e730:	681b      	ldr	r3, [r3, #0]
 801e732:	61bb      	str	r3, [r7, #24]
 801e734:	e02a      	b.n	801e78c <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 801e736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e738:	781b      	ldrb	r3, [r3, #0]
 801e73a:	2b33      	cmp	r3, #51	@ 0x33
 801e73c:	d114      	bne.n	801e768 <rx_dhcp_client+0x158>
 801e73e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e740:	3301      	adds	r3, #1
 801e742:	781b      	ldrb	r3, [r3, #0]
 801e744:	2b04      	cmp	r3, #4
 801e746:	d10f      	bne.n	801e768 <rx_dhcp_client+0x158>
 801e748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e74a:	3306      	adds	r3, #6
 801e74c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e74e:	429a      	cmp	r2, r3
 801e750:	d90a      	bls.n	801e768 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 801e752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e754:	3302      	adds	r3, #2
 801e756:	681b      	ldr	r3, [r3, #0]
 801e758:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 801e75a:	6a3b      	ldr	r3, [r7, #32]
 801e75c:	4618      	mov	r0, r3
 801e75e:	f003 fffb 	bl	8022758 <mg_ntohl>
 801e762:	4603      	mov	r3, r0
 801e764:	623b      	str	r3, [r7, #32]
 801e766:	e011      	b.n	801e78c <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 801e768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e76a:	781b      	ldrb	r3, [r3, #0]
 801e76c:	2b35      	cmp	r3, #53	@ 0x35
 801e76e:	d10d      	bne.n	801e78c <rx_dhcp_client+0x17c>
 801e770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e772:	3301      	adds	r3, #1
 801e774:	781b      	ldrb	r3, [r3, #0]
 801e776:	2b01      	cmp	r3, #1
 801e778:	d108      	bne.n	801e78c <rx_dhcp_client+0x17c>
 801e77a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e77c:	3306      	adds	r3, #6
 801e77e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e780:	429a      	cmp	r2, r3
 801e782:	d903      	bls.n	801e78c <rx_dhcp_client+0x17c>
      msgtype = p[2];
 801e784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e786:	789b      	ldrb	r3, [r3, #2]
 801e788:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 801e78c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e78e:	3301      	adds	r3, #1
 801e790:	781b      	ldrb	r3, [r3, #0]
 801e792:	3302      	adds	r3, #2
 801e794:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e796:	4413      	add	r3, r2
 801e798:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 801e79a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e79c:	3301      	adds	r3, #1
 801e79e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e7a0:	429a      	cmp	r2, r3
 801e7a2:	d904      	bls.n	801e7ae <rx_dhcp_client+0x19e>
 801e7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e7a6:	781b      	ldrb	r3, [r3, #0]
 801e7a8:	2bff      	cmp	r3, #255	@ 0xff
 801e7aa:	f47f af6b 	bne.w	801e684 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 801e7ae:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801e7b2:	2b06      	cmp	r3, #6
 801e7b4:	d10c      	bne.n	801e7d0 <rx_dhcp_client+0x1c0>
 801e7b6:	68fb      	ldr	r3, [r7, #12]
 801e7b8:	689b      	ldr	r3, [r3, #8]
 801e7ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e7bc:	429a      	cmp	r2, r3
 801e7be:	d107      	bne.n	801e7d0 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 801e7c0:	68fb      	ldr	r3, [r7, #12]
 801e7c2:	2201      	movs	r2, #1
 801e7c4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 801e7c8:	68fb      	ldr	r3, [r7, #12]
 801e7ca:	2200      	movs	r2, #0
 801e7cc:	609a      	str	r2, [r3, #8]
 801e7ce:	e0ec      	b.n	801e9aa <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 801e7d0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801e7d4:	2b02      	cmp	r3, #2
 801e7d6:	d123      	bne.n	801e820 <rx_dhcp_client+0x210>
 801e7d8:	68fb      	ldr	r3, [r7, #12]
 801e7da:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e7de:	2b01      	cmp	r3, #1
 801e7e0:	d11e      	bne.n	801e820 <rx_dhcp_client+0x210>
 801e7e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e7e4:	2b00      	cmp	r3, #0
 801e7e6:	d01b      	beq.n	801e820 <rx_dhcp_client+0x210>
 801e7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e7ea:	2b00      	cmp	r3, #0
 801e7ec:	d018      	beq.n	801e820 <rx_dhcp_client+0x210>
 801e7ee:	6a3b      	ldr	r3, [r7, #32]
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	d015      	beq.n	801e820 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801e7f4:	68bb      	ldr	r3, [r7, #8]
 801e7f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e7f8:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	d003      	beq.n	801e806 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801e7fe:	68bb      	ldr	r3, [r7, #8]
 801e800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 801e802:	695b      	ldr	r3, [r3, #20]
 801e804:	e002      	b.n	801e80c <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801e806:	68bb      	ldr	r3, [r7, #8]
 801e808:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 801e80a:	68db      	ldr	r3, [r3, #12]
 801e80c:	461a      	mov	r2, r3
 801e80e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e810:	68f8      	ldr	r0, [r7, #12]
 801e812:	f7ff fc41 	bl	801e098 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	2202      	movs	r2, #2
 801e81a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 801e81e:	e0c4      	b.n	801e9aa <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 801e820:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801e824:	2b05      	cmp	r3, #5
 801e826:	f040 80c0 	bne.w	801e9aa <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801e82a:	68fb      	ldr	r3, [r7, #12]
 801e82c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e830:	2b02      	cmp	r3, #2
 801e832:	f040 8081 	bne.w	801e938 <rx_dhcp_client+0x328>
 801e836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e838:	2b00      	cmp	r3, #0
 801e83a:	d07d      	beq.n	801e938 <rx_dhcp_client+0x328>
 801e83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e83e:	2b00      	cmp	r3, #0
 801e840:	d07a      	beq.n	801e938 <rx_dhcp_client+0x328>
 801e842:	6a3b      	ldr	r3, [r7, #32]
 801e844:	2b00      	cmp	r3, #0
 801e846:	d077      	beq.n	801e938 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 801e848:	68fb      	ldr	r3, [r7, #12]
 801e84a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801e84e:	6a39      	ldr	r1, [r7, #32]
 801e850:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801e854:	fb00 f101 	mul.w	r1, r0, r1
 801e858:	2000      	movs	r0, #0
 801e85a:	4688      	mov	r8, r1
 801e85c:	4681      	mov	r9, r0
 801e85e:	eb12 0108 	adds.w	r1, r2, r8
 801e862:	6039      	str	r1, [r7, #0]
 801e864:	eb43 0309 	adc.w	r3, r3, r9
 801e868:	607b      	str	r3, [r7, #4]
 801e86a:	68fb      	ldr	r3, [r7, #12]
 801e86c:	e9d7 1200 	ldrd	r1, r2, [r7]
 801e870:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 801e874:	4b56      	ldr	r3, [pc, #344]	@ (801e9d0 <rx_dhcp_client+0x3c0>)
 801e876:	681b      	ldr	r3, [r3, #0]
 801e878:	2b01      	cmp	r3, #1
 801e87a:	dd16      	ble.n	801e8aa <rx_dhcp_client+0x29a>
 801e87c:	4b55      	ldr	r3, [pc, #340]	@ (801e9d4 <rx_dhcp_client+0x3c4>)
 801e87e:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 801e882:	4955      	ldr	r1, [pc, #340]	@ (801e9d8 <rx_dhcp_client+0x3c8>)
 801e884:	2002      	movs	r0, #2
 801e886:	f7fc fad9 	bl	801ae3c <mg_log_prefix>
 801e88a:	6a3c      	ldr	r4, [r7, #32]
 801e88c:	68fb      	ldr	r3, [r7, #12]
 801e88e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 801e892:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e896:	f04f 0300 	mov.w	r3, #0
 801e89a:	f7e2 fa5d 	bl	8000d58 <__aeabi_uldivmod>
 801e89e:	4602      	mov	r2, r0
 801e8a0:	460b      	mov	r3, r1
 801e8a2:	4621      	mov	r1, r4
 801e8a4:	484d      	ldr	r0, [pc, #308]	@ (801e9dc <rx_dhcp_client+0x3cc>)
 801e8a6:	f7fc fb19 	bl	801aedc <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 801e8aa:	68fb      	ldr	r3, [r7, #12]
 801e8ac:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801e8b0:	68bb      	ldr	r3, [r7, #8]
 801e8b2:	691b      	ldr	r3, [r3, #16]
 801e8b4:	3306      	adds	r3, #6
 801e8b6:	2206      	movs	r2, #6
 801e8b8:	4619      	mov	r1, r3
 801e8ba:	f008 fb05 	bl	8026ec8 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 801e8be:	68fb      	ldr	r3, [r7, #12]
 801e8c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e8c2:	609a      	str	r2, [r3, #8]
 801e8c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e8c6:	68fb      	ldr	r3, [r7, #12]
 801e8c8:	611a      	str	r2, [r3, #16]
 801e8ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e8cc:	68fb      	ldr	r3, [r7, #12]
 801e8ce:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 801e8d0:	68fb      	ldr	r3, [r7, #12]
 801e8d2:	2203      	movs	r2, #3
 801e8d4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 801e8d8:	f107 0310 	add.w	r3, r7, #16
 801e8dc:	2108      	movs	r1, #8
 801e8de:	4618      	mov	r0, r3
 801e8e0:	f003 fed3 	bl	802268a <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 801e8e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e8e8:	4614      	mov	r4, r2
 801e8ea:	f003 ffdf 	bl	80228ac <mg_millis>
 801e8ee:	4602      	mov	r2, r0
 801e8f0:	460b      	mov	r3, r1
 801e8f2:	4613      	mov	r3, r2
 801e8f4:	4423      	add	r3, r4
 801e8f6:	4618      	mov	r0, r3
 801e8f8:	f006 fb5a 	bl	8024fb0 <srand>
      if (ifp->enable_req_dns && dns != 0)
 801e8fc:	68fb      	ldr	r3, [r7, #12]
 801e8fe:	7fdb      	ldrb	r3, [r3, #31]
 801e900:	2b00      	cmp	r3, #0
 801e902:	d009      	beq.n	801e918 <rx_dhcp_client+0x308>
 801e904:	69fb      	ldr	r3, [r7, #28]
 801e906:	2b00      	cmp	r3, #0
 801e908:	d006      	beq.n	801e918 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 801e90a:	f107 031c 	add.w	r3, r7, #28
 801e90e:	461a      	mov	r2, r3
 801e910:	2101      	movs	r1, #1
 801e912:	68f8      	ldr	r0, [r7, #12]
 801e914:	f7ff f87a 	bl	801da0c <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 801e918:	68fb      	ldr	r3, [r7, #12]
 801e91a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801e91e:	2b00      	cmp	r3, #0
 801e920:	d042      	beq.n	801e9a8 <rx_dhcp_client+0x398>
 801e922:	69bb      	ldr	r3, [r7, #24]
 801e924:	2b00      	cmp	r3, #0
 801e926:	d03f      	beq.n	801e9a8 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 801e928:	f107 0318 	add.w	r3, r7, #24
 801e92c:	461a      	mov	r2, r3
 801e92e:	2102      	movs	r1, #2
 801e930:	68f8      	ldr	r0, [r7, #12]
 801e932:	f7ff f86b 	bl	801da0c <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801e936:	e037      	b.n	801e9a8 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 801e938:	68fb      	ldr	r3, [r7, #12]
 801e93a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e93e:	2b03      	cmp	r3, #3
 801e940:	d133      	bne.n	801e9aa <rx_dhcp_client+0x39a>
 801e942:	68fb      	ldr	r3, [r7, #12]
 801e944:	689b      	ldr	r3, [r3, #8]
 801e946:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e948:	429a      	cmp	r2, r3
 801e94a:	d12e      	bne.n	801e9aa <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 801e94c:	68fb      	ldr	r3, [r7, #12]
 801e94e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801e952:	6a39      	ldr	r1, [r7, #32]
 801e954:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801e958:	fb00 f101 	mul.w	r1, r0, r1
 801e95c:	2000      	movs	r0, #0
 801e95e:	460c      	mov	r4, r1
 801e960:	4605      	mov	r5, r0
 801e962:	eb12 0a04 	adds.w	sl, r2, r4
 801e966:	eb43 0b05 	adc.w	fp, r3, r5
 801e96a:	68fb      	ldr	r3, [r7, #12]
 801e96c:	e9c3 ab18 	strd	sl, fp, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 801e970:	4b17      	ldr	r3, [pc, #92]	@ (801e9d0 <rx_dhcp_client+0x3c0>)
 801e972:	681b      	ldr	r3, [r3, #0]
 801e974:	2b01      	cmp	r3, #1
 801e976:	dd18      	ble.n	801e9aa <rx_dhcp_client+0x39a>
 801e978:	4b16      	ldr	r3, [pc, #88]	@ (801e9d4 <rx_dhcp_client+0x3c4>)
 801e97a:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 801e97e:	4916      	ldr	r1, [pc, #88]	@ (801e9d8 <rx_dhcp_client+0x3c8>)
 801e980:	2002      	movs	r0, #2
 801e982:	f7fc fa5b 	bl	801ae3c <mg_log_prefix>
 801e986:	6a3c      	ldr	r4, [r7, #32]
 801e988:	68fb      	ldr	r3, [r7, #12]
 801e98a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 801e98e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e992:	f04f 0300 	mov.w	r3, #0
 801e996:	f7e2 f9df 	bl	8000d58 <__aeabi_uldivmod>
 801e99a:	4602      	mov	r2, r0
 801e99c:	460b      	mov	r3, r1
 801e99e:	4621      	mov	r1, r4
 801e9a0:	480e      	ldr	r0, [pc, #56]	@ (801e9dc <rx_dhcp_client+0x3cc>)
 801e9a2:	f7fc fa9b 	bl	801aedc <mg_log>
 801e9a6:	e000      	b.n	801e9aa <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801e9a8:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 801e9aa:	68fb      	ldr	r3, [r7, #12]
 801e9ac:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e9b0:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801e9b4:	429a      	cmp	r2, r3
 801e9b6:	d006      	beq.n	801e9c6 <rx_dhcp_client+0x3b6>
 801e9b8:	68f8      	ldr	r0, [r7, #12]
 801e9ba:	f7ff f989 	bl	801dcd0 <onstatechange>
 801e9be:	e002      	b.n	801e9c6 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801e9c0:	bf00      	nop
 801e9c2:	e000      	b.n	801e9c6 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 801e9c4:	bf00      	nop
}
 801e9c6:	3740      	adds	r7, #64	@ 0x40
 801e9c8:	46bd      	mov	sp, r7
 801e9ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e9ce:	bf00      	nop
 801e9d0:	20000298 	.word	0x20000298
 801e9d4:	08033f14 	.word	0x08033f14
 801e9d8:	080310c8 	.word	0x080310c8
 801e9dc:	08032868 	.word	0x08032868

0801e9e0 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9e4:	b0d6      	sub	sp, #344	@ 0x158
 801e9e6:	af04      	add	r7, sp, #16
 801e9e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e9ec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801e9f0:	6018      	str	r0, [r3, #0]
 801e9f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801e9f6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801e9fa:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 801e9fc:	2300      	movs	r3, #0
 801e9fe:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 801ea02:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ea06:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ea0a:	681b      	ldr	r3, [r3, #0]
 801ea0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ea0e:	33f0      	adds	r3, #240	@ 0xf0
 801ea10:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 801ea14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ea18:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ea1c:	681b      	ldr	r3, [r3, #0]
 801ea1e:	681a      	ldr	r2, [r3, #0]
 801ea20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ea24:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ea28:	681b      	ldr	r3, [r3, #0]
 801ea2a:	685b      	ldr	r3, [r3, #4]
 801ea2c:	4413      	add	r3, r2
 801ea2e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801ea32:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ea36:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ea3e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801ea42:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801ea46:	429a      	cmp	r2, r3
 801ea48:	f0c0 81b0 	bcc.w	801edac <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 801ea4c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ea50:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ea54:	4ad8      	ldr	r2, [pc, #864]	@ (801edb8 <rx_dhcp_server+0x3d8>)
 801ea56:	4618      	mov	r0, r3
 801ea58:	4611      	mov	r1, r2
 801ea5a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801ea5e:	461a      	mov	r2, r3
 801ea60:	f008 fa32 	bl	8026ec8 <memcpy>
  res.yiaddr = ifp->ip;
 801ea64:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ea68:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ea6c:	681b      	ldr	r3, [r3, #0]
 801ea6e:	689a      	ldr	r2, [r3, #8]
 801ea70:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ea74:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ea78:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 801ea7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ea7e:	3310      	adds	r3, #16
 801ea80:	3303      	adds	r3, #3
 801ea82:	781a      	ldrb	r2, [r3, #0]
 801ea84:	3201      	adds	r2, #1
 801ea86:	b2d2      	uxtb	r2, r2
 801ea88:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 801ea8a:	e020      	b.n	801eace <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 801ea8c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801ea90:	781b      	ldrb	r3, [r3, #0]
 801ea92:	2b35      	cmp	r3, #53	@ 0x35
 801ea94:	d111      	bne.n	801eaba <rx_dhcp_server+0xda>
 801ea96:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801ea9a:	3301      	adds	r3, #1
 801ea9c:	781b      	ldrb	r3, [r3, #0]
 801ea9e:	2b01      	cmp	r3, #1
 801eaa0:	d10b      	bne.n	801eaba <rx_dhcp_server+0xda>
 801eaa2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801eaa6:	3302      	adds	r3, #2
 801eaa8:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801eaac:	429a      	cmp	r2, r3
 801eaae:	d904      	bls.n	801eaba <rx_dhcp_server+0xda>
      op = p[2];
 801eab0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801eab4:	789b      	ldrb	r3, [r3, #2]
 801eab6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    }
    p += p[1] + 2;
 801eaba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801eabe:	3301      	adds	r3, #1
 801eac0:	781b      	ldrb	r3, [r3, #0]
 801eac2:	3302      	adds	r3, #2
 801eac4:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801eac8:	4413      	add	r3, r2
 801eaca:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 801eace:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801ead2:	3301      	adds	r3, #1
 801ead4:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801ead8:	429a      	cmp	r2, r3
 801eada:	d904      	bls.n	801eae6 <rx_dhcp_server+0x106>
 801eadc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801eae0:	781b      	ldrb	r3, [r3, #0]
 801eae2:	2bff      	cmp	r3, #255	@ 0xff
 801eae4:	d1d2      	bne.n	801ea8c <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 801eae6:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801eaea:	2b01      	cmp	r3, #1
 801eaec:	d004      	beq.n	801eaf8 <rx_dhcp_server+0x118>
 801eaee:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801eaf2:	2b03      	cmp	r3, #3
 801eaf4:	f040 815b 	bne.w	801edae <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 801eaf8:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801eafc:	2b01      	cmp	r3, #1
 801eafe:	d101      	bne.n	801eb04 <rx_dhcp_server+0x124>
 801eb00:	2302      	movs	r3, #2
 801eb02:	e000      	b.n	801eb06 <rx_dhcp_server+0x126>
 801eb04:	2305      	movs	r3, #5
 801eb06:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    uint8_t opts[] = {
 801eb0a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb0e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb12:	2235      	movs	r2, #53	@ 0x35
 801eb14:	701a      	strb	r2, [r3, #0]
 801eb16:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb1a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb1e:	2201      	movs	r2, #1
 801eb20:	705a      	strb	r2, [r3, #1]
 801eb22:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb26:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb2a:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 801eb2e:	709a      	strb	r2, [r3, #2]
 801eb30:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb34:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb38:	2201      	movs	r2, #1
 801eb3a:	70da      	strb	r2, [r3, #3]
 801eb3c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb44:	2204      	movs	r2, #4
 801eb46:	711a      	strb	r2, [r3, #4]
 801eb48:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb50:	2200      	movs	r2, #0
 801eb52:	715a      	strb	r2, [r3, #5]
 801eb54:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb58:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb5c:	2200      	movs	r2, #0
 801eb5e:	719a      	strb	r2, [r3, #6]
 801eb60:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb68:	2200      	movs	r2, #0
 801eb6a:	71da      	strb	r2, [r3, #7]
 801eb6c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb74:	2200      	movs	r2, #0
 801eb76:	721a      	strb	r2, [r3, #8]
 801eb78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb80:	2236      	movs	r2, #54	@ 0x36
 801eb82:	725a      	strb	r2, [r3, #9]
 801eb84:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb8c:	2204      	movs	r2, #4
 801eb8e:	729a      	strb	r2, [r3, #10]
 801eb90:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eb94:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eb98:	2200      	movs	r2, #0
 801eb9a:	72da      	strb	r2, [r3, #11]
 801eb9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eba0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eba4:	2200      	movs	r2, #0
 801eba6:	731a      	strb	r2, [r3, #12]
 801eba8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebb0:	2200      	movs	r2, #0
 801ebb2:	735a      	strb	r2, [r3, #13]
 801ebb4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebb8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebbc:	2200      	movs	r2, #0
 801ebbe:	739a      	strb	r2, [r3, #14]
 801ebc0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebc4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebc8:	220c      	movs	r2, #12
 801ebca:	73da      	strb	r2, [r3, #15]
 801ebcc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebd0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebd4:	2203      	movs	r2, #3
 801ebd6:	741a      	strb	r2, [r3, #16]
 801ebd8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebdc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebe0:	226d      	movs	r2, #109	@ 0x6d
 801ebe2:	745a      	strb	r2, [r3, #17]
 801ebe4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebe8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebec:	2269      	movs	r2, #105	@ 0x69
 801ebee:	749a      	strb	r2, [r3, #18]
 801ebf0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ebf4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ebf8:	2270      	movs	r2, #112	@ 0x70
 801ebfa:	74da      	strb	r2, [r3, #19]
 801ebfc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec00:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ec04:	2233      	movs	r2, #51	@ 0x33
 801ec06:	751a      	strb	r2, [r3, #20]
 801ec08:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec0c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ec10:	2204      	movs	r2, #4
 801ec12:	755a      	strb	r2, [r3, #21]
 801ec14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec18:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ec1c:	22ff      	movs	r2, #255	@ 0xff
 801ec1e:	759a      	strb	r2, [r3, #22]
 801ec20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ec28:	22ff      	movs	r2, #255	@ 0xff
 801ec2a:	75da      	strb	r2, [r3, #23]
 801ec2c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec30:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ec34:	22ff      	movs	r2, #255	@ 0xff
 801ec36:	761a      	strb	r2, [r3, #24]
 801ec38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ec40:	22ff      	movs	r2, #255	@ 0xff
 801ec42:	765a      	strb	r2, [r3, #25]
 801ec44:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ec4c:	22ff      	movs	r2, #255	@ 0xff
 801ec4e:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 801ec50:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec54:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ec58:	681b      	ldr	r3, [r3, #0]
 801ec5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ec5c:	f103 011c 	add.w	r1, r3, #28
 801ec60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ec64:	331c      	adds	r3, #28
 801ec66:	2206      	movs	r2, #6
 801ec68:	4618      	mov	r0, r3
 801ec6a:	f008 f92d 	bl	8026ec8 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 801ec6e:	f107 030c 	add.w	r3, r7, #12
 801ec72:	3305      	adds	r3, #5
 801ec74:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801ec78:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 801ec7c:	6812      	ldr	r2, [r2, #0]
 801ec7e:	320c      	adds	r2, #12
 801ec80:	6812      	ldr	r2, [r2, #0]
 801ec82:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 801ec84:	f107 030c 	add.w	r3, r7, #12
 801ec88:	330b      	adds	r3, #11
 801ec8a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801ec8e:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 801ec92:	6812      	ldr	r2, [r2, #0]
 801ec94:	3208      	adds	r2, #8
 801ec96:	6812      	ldr	r2, [r2, #0]
 801ec98:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 801ec9a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ec9e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801eca2:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801eca6:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 801ecaa:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 801ecae:	4615      	mov	r5, r2
 801ecb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ecb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ecb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ecb8:	c403      	stmia	r4!, {r0, r1}
 801ecba:	8022      	strh	r2, [r4, #0]
 801ecbc:	3402      	adds	r4, #2
 801ecbe:	0c13      	lsrs	r3, r2, #16
 801ecc0:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 801ecc2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ecc6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ecca:	681b      	ldr	r3, [r3, #0]
 801eccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ecce:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 801ecd2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ecd6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ecda:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 801ecde:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ece2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ece6:	681b      	ldr	r3, [r3, #0]
 801ece8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ecea:	685a      	ldr	r2, [r3, #4]
 801ecec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ecf0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ecf4:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 801ecf6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ecfa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ecfe:	681b      	ldr	r3, [r3, #0]
 801ed00:	7f9b      	ldrb	r3, [r3, #30]
 801ed02:	2b00      	cmp	r3, #0
 801ed04:	d01c      	beq.n	801ed40 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;
 801ed06:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed0a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ed0e:	691a      	ldr	r2, [r3, #16]
 801ed10:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed14:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ed18:	681b      	ldr	r3, [r3, #0]
 801ed1a:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 801ed1c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed20:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801ed2a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed2e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ed32:	681b      	ldr	r3, [r3, #0]
 801ed34:	691b      	ldr	r3, [r3, #16]
 801ed36:	3306      	adds	r3, #6
 801ed38:	2206      	movs	r2, #6
 801ed3a:	4619      	mov	r1, r3
 801ed3c:	f008 f8c4 	bl	8026ec8 <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 801ed40:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed44:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ed48:	681b      	ldr	r3, [r3, #0]
 801ed4a:	691b      	ldr	r3, [r3, #16]
 801ed4c:	1d9d      	adds	r5, r3, #6
 801ed4e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed52:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ed56:	681b      	ldr	r3, [r3, #0]
 801ed58:	689e      	ldr	r6, [r3, #8]
 801ed5a:	2043      	movs	r0, #67	@ 0x43
 801ed5c:	f003 fd15 	bl	802278a <mg_ntohs>
 801ed60:	4603      	mov	r3, r0
 801ed62:	4698      	mov	r8, r3
 801ed64:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801ed68:	2b01      	cmp	r3, #1
 801ed6a:	d005      	beq.n	801ed78 <rx_dhcp_server+0x398>
 801ed6c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed70:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ed74:	691c      	ldr	r4, [r3, #16]
 801ed76:	e001      	b.n	801ed7c <rx_dhcp_server+0x39c>
 801ed78:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801ed7c:	2044      	movs	r0, #68	@ 0x44
 801ed7e:	f003 fd04 	bl	802278a <mg_ntohs>
 801ed82:	4603      	mov	r3, r0
 801ed84:	461a      	mov	r2, r3
 801ed86:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed8a:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 801ed8e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801ed92:	9303      	str	r3, [sp, #12]
 801ed94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ed98:	9302      	str	r3, [sp, #8]
 801ed9a:	9201      	str	r2, [sp, #4]
 801ed9c:	9400      	str	r4, [sp, #0]
 801ed9e:	4643      	mov	r3, r8
 801eda0:	4632      	mov	r2, r6
 801eda2:	4629      	mov	r1, r5
 801eda4:	6800      	ldr	r0, [r0, #0]
 801eda6:	f7ff f87d 	bl	801dea4 <tx_udp>
 801edaa:	e000      	b.n	801edae <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801edac:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 801edae:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 801edb2:	46bd      	mov	sp, r7
 801edb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801edb8:	08032880 	.word	0x08032880

0801edbc <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801edbc:	b580      	push	{r7, lr}
 801edbe:	b084      	sub	sp, #16
 801edc0:	af00      	add	r7, sp, #0
 801edc2:	6078      	str	r0, [r7, #4]
 801edc4:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801edca:	2201      	movs	r2, #1
 801edcc:	6839      	ldr	r1, [r7, #0]
 801edce:	4618      	mov	r0, r3
 801edd0:	f7ff fa46 	bl	801e260 <getpeer>
 801edd4:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 801edd6:	68fb      	ldr	r3, [r7, #12]
 801edd8:	2b00      	cmp	r3, #0
 801edda:	d059      	beq.n	801ee90 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 801eddc:	683b      	ldr	r3, [r7, #0]
 801edde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ede0:	881b      	ldrh	r3, [r3, #0]
 801ede2:	b29a      	uxth	r2, r3
 801ede4:	68fb      	ldr	r3, [r7, #12]
 801ede6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 801ede8:	68fb      	ldr	r3, [r7, #12]
 801edea:	331c      	adds	r3, #28
 801edec:	683a      	ldr	r2, [r7, #0]
 801edee:	69d2      	ldr	r2, [r2, #28]
 801edf0:	320c      	adds	r2, #12
 801edf2:	6812      	ldr	r2, [r2, #0]
 801edf4:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 801edf6:	68fb      	ldr	r3, [r7, #12]
 801edf8:	33b0      	adds	r3, #176	@ 0xb0
 801edfa:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 801edfc:	68bb      	ldr	r3, [r7, #8]
 801edfe:	f103 0018 	add.w	r0, r3, #24
 801ee02:	683b      	ldr	r3, [r7, #0]
 801ee04:	691b      	ldr	r3, [r3, #16]
 801ee06:	3306      	adds	r3, #6
 801ee08:	2206      	movs	r2, #6
 801ee0a:	4619      	mov	r1, r3
 801ee0c:	f008 f85c 	bl	8026ec8 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 801ee10:	68fb      	ldr	r3, [r7, #12]
 801ee12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ee14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801ee18:	d304      	bcc.n	801ee24 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 801ee1a:	491f      	ldr	r1, [pc, #124]	@ (801ee98 <rx_udp+0xdc>)
 801ee1c:	68f8      	ldr	r0, [r7, #12]
 801ee1e:	f7f6 fc47 	bl	80156b0 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 801ee22:	e035      	b.n	801ee90 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 801ee24:	68fb      	ldr	r3, [r7, #12]
 801ee26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ee28:	68fb      	ldr	r3, [r7, #12]
 801ee2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ee2c:	1ad2      	subs	r2, r2, r3
 801ee2e:	683b      	ldr	r3, [r7, #0]
 801ee30:	68db      	ldr	r3, [r3, #12]
 801ee32:	429a      	cmp	r2, r3
 801ee34:	d212      	bcs.n	801ee5c <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 801ee36:	68fb      	ldr	r3, [r7, #12]
 801ee38:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801ee3c:	68fb      	ldr	r3, [r7, #12]
 801ee3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ee40:	683b      	ldr	r3, [r7, #0]
 801ee42:	68db      	ldr	r3, [r3, #12]
 801ee44:	4413      	add	r3, r2
 801ee46:	4619      	mov	r1, r3
 801ee48:	f7fb f808 	bl	8019e5c <mg_iobuf_resize>
 801ee4c:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	d104      	bne.n	801ee5c <rx_udp+0xa0>
      mg_error(c, "oom");
 801ee52:	4912      	ldr	r1, [pc, #72]	@ (801ee9c <rx_udp+0xe0>)
 801ee54:	68f8      	ldr	r0, [r7, #12]
 801ee56:	f7f6 fc2b 	bl	80156b0 <mg_error>
}
 801ee5a:	e019      	b.n	801ee90 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 801ee5c:	68fb      	ldr	r3, [r7, #12]
 801ee5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ee60:	68fb      	ldr	r3, [r7, #12]
 801ee62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ee64:	18d0      	adds	r0, r2, r3
 801ee66:	683b      	ldr	r3, [r7, #0]
 801ee68:	6899      	ldr	r1, [r3, #8]
 801ee6a:	683b      	ldr	r3, [r7, #0]
 801ee6c:	68db      	ldr	r3, [r3, #12]
 801ee6e:	461a      	mov	r2, r3
 801ee70:	f008 f82a 	bl	8026ec8 <memcpy>
      c->recv.len += pkt->pay.len;
 801ee74:	68fb      	ldr	r3, [r7, #12]
 801ee76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ee78:	683b      	ldr	r3, [r7, #0]
 801ee7a:	68db      	ldr	r3, [r3, #12]
 801ee7c:	441a      	add	r2, r3
 801ee7e:	68fb      	ldr	r3, [r7, #12]
 801ee80:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 801ee82:	683b      	ldr	r3, [r7, #0]
 801ee84:	330c      	adds	r3, #12
 801ee86:	461a      	mov	r2, r3
 801ee88:	2107      	movs	r1, #7
 801ee8a:	68f8      	ldr	r0, [r7, #12]
 801ee8c:	f7f6 fbf0 	bl	8015670 <mg_call>
}
 801ee90:	bf00      	nop
 801ee92:	3710      	adds	r7, #16
 801ee94:	46bd      	mov	sp, r7
 801ee96:	bd80      	pop	{r7, pc}
 801ee98:	08032990 	.word	0x08032990
 801ee9c:	080329ac 	.word	0x080329ac

0801eea0 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 801eea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eea2:	b091      	sub	sp, #68	@ 0x44
 801eea4:	af06      	add	r7, sp, #24
 801eea6:	60f8      	str	r0, [r7, #12]
 801eea8:	60b9      	str	r1, [r7, #8]
 801eeaa:	607a      	str	r2, [r7, #4]
 801eeac:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 801eeae:	68fb      	ldr	r3, [r7, #12]
 801eeb0:	689a      	ldr	r2, [r3, #8]
 801eeb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801eeb4:	3314      	adds	r3, #20
 801eeb6:	9301      	str	r3, [sp, #4]
 801eeb8:	687b      	ldr	r3, [r7, #4]
 801eeba:	9300      	str	r3, [sp, #0]
 801eebc:	4613      	mov	r3, r2
 801eebe:	2206      	movs	r2, #6
 801eec0:	68b9      	ldr	r1, [r7, #8]
 801eec2:	68f8      	ldr	r0, [r7, #12]
 801eec4:	f7fe ff98 	bl	801ddf8 <tx_ip>
 801eec8:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 801eeca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eecc:	3314      	adds	r3, #20
 801eece:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 801eed0:	2214      	movs	r2, #20
 801eed2:	2100      	movs	r1, #0
 801eed4:	6a38      	ldr	r0, [r7, #32]
 801eed6:	f006 fdbb 	bl	8025a50 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 801eeda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801eedc:	2b00      	cmp	r3, #0
 801eede:	d009      	beq.n	801eef4 <tx_tcp+0x54>
 801eee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801eee2:	2b00      	cmp	r3, #0
 801eee4:	d006      	beq.n	801eef4 <tx_tcp+0x54>
 801eee6:	6a3b      	ldr	r3, [r7, #32]
 801eee8:	3314      	adds	r3, #20
 801eeea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801eeec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801eeee:	4618      	mov	r0, r3
 801eef0:	f006 fd94 	bl	8025a1c <memmove>
  tcp->sport = sport;
 801eef4:	6a3b      	ldr	r3, [r7, #32]
 801eef6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801eefa:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 801eefc:	6a3b      	ldr	r3, [r7, #32]
 801eefe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801ef02:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 801ef04:	6a3b      	ldr	r3, [r7, #32]
 801ef06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ef08:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 801ef0a:	6a3b      	ldr	r3, [r7, #32]
 801ef0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ef0e:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 801ef10:	6a3b      	ldr	r3, [r7, #32]
 801ef12:	78fa      	ldrb	r2, [r7, #3]
 801ef14:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 801ef16:	f241 7070 	movw	r0, #6000	@ 0x1770
 801ef1a:	f003 fc36 	bl	802278a <mg_ntohs>
 801ef1e:	4603      	mov	r3, r0
 801ef20:	461a      	mov	r2, r3
 801ef22:	6a3b      	ldr	r3, [r7, #32]
 801ef24:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 801ef26:	6a3b      	ldr	r3, [r7, #32]
 801ef28:	2250      	movs	r2, #80	@ 0x50
 801ef2a:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 801ef2c:	2300      	movs	r3, #0
 801ef2e:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 801ef30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ef32:	b29b      	uxth	r3, r3
 801ef34:	3314      	adds	r3, #20
 801ef36:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 801ef38:	2300      	movs	r3, #0
 801ef3a:	753b      	strb	r3, [r7, #20]
 801ef3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef3e:	7a5b      	ldrb	r3, [r3, #9]
 801ef40:	757b      	strb	r3, [r7, #21]
 801ef42:	8b7b      	ldrh	r3, [r7, #26]
 801ef44:	0a1b      	lsrs	r3, r3, #8
 801ef46:	b29b      	uxth	r3, r3
 801ef48:	b2db      	uxtb	r3, r3
 801ef4a:	75bb      	strb	r3, [r7, #22]
 801ef4c:	8b7b      	ldrh	r3, [r7, #26]
 801ef4e:	b2db      	uxtb	r3, r3
 801ef50:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 801ef52:	8b7b      	ldrh	r3, [r7, #26]
 801ef54:	461a      	mov	r2, r3
 801ef56:	6a39      	ldr	r1, [r7, #32]
 801ef58:	69f8      	ldr	r0, [r7, #28]
 801ef5a:	f7fe fd89 	bl	801da70 <csumup>
 801ef5e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 801ef60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef62:	330c      	adds	r3, #12
 801ef64:	2204      	movs	r2, #4
 801ef66:	4619      	mov	r1, r3
 801ef68:	69f8      	ldr	r0, [r7, #28]
 801ef6a:	f7fe fd81 	bl	801da70 <csumup>
 801ef6e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 801ef70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef72:	3310      	adds	r3, #16
 801ef74:	2204      	movs	r2, #4
 801ef76:	4619      	mov	r1, r3
 801ef78:	69f8      	ldr	r0, [r7, #28]
 801ef7a:	f7fe fd79 	bl	801da70 <csumup>
 801ef7e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 801ef80:	f107 0314 	add.w	r3, r7, #20
 801ef84:	2204      	movs	r2, #4
 801ef86:	4619      	mov	r1, r3
 801ef88:	69f8      	ldr	r0, [r7, #28]
 801ef8a:	f7fe fd71 	bl	801da70 <csumup>
 801ef8e:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 801ef90:	69f8      	ldr	r0, [r7, #28]
 801ef92:	f7fe fd98 	bl	801dac6 <csumfin>
 801ef96:	4603      	mov	r3, r0
 801ef98:	461a      	mov	r2, r3
 801ef9a:	6a3b      	ldr	r3, [r7, #32]
 801ef9c:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 801ef9e:	4b21      	ldr	r3, [pc, #132]	@ (801f024 <tx_tcp+0x184>)
 801efa0:	681b      	ldr	r3, [r3, #0]
 801efa2:	2b03      	cmp	r3, #3
 801efa4:	dd2c      	ble.n	801f000 <tx_tcp+0x160>
 801efa6:	4b20      	ldr	r3, [pc, #128]	@ (801f028 <tx_tcp+0x188>)
 801efa8:	f241 5254 	movw	r2, #5460	@ 0x1554
 801efac:	491f      	ldr	r1, [pc, #124]	@ (801f02c <tx_tcp+0x18c>)
 801efae:	2004      	movs	r0, #4
 801efb0:	f7fb ff44 	bl	801ae3c <mg_log_prefix>
 801efb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efb6:	f103 050c 	add.w	r5, r3, #12
 801efba:	6a3b      	ldr	r3, [r7, #32]
 801efbc:	881b      	ldrh	r3, [r3, #0]
 801efbe:	b29b      	uxth	r3, r3
 801efc0:	4618      	mov	r0, r3
 801efc2:	f003 fbe2 	bl	802278a <mg_ntohs>
 801efc6:	4603      	mov	r3, r0
 801efc8:	461e      	mov	r6, r3
 801efca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efcc:	f103 0410 	add.w	r4, r3, #16
 801efd0:	6a3b      	ldr	r3, [r7, #32]
 801efd2:	885b      	ldrh	r3, [r3, #2]
 801efd4:	b29b      	uxth	r3, r3
 801efd6:	4618      	mov	r0, r3
 801efd8:	f003 fbd7 	bl	802278a <mg_ntohs>
 801efdc:	4603      	mov	r3, r0
 801efde:	461a      	mov	r2, r3
 801efe0:	6a3b      	ldr	r3, [r7, #32]
 801efe2:	7b5b      	ldrb	r3, [r3, #13]
 801efe4:	4619      	mov	r1, r3
 801efe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801efe8:	9304      	str	r3, [sp, #16]
 801efea:	9103      	str	r1, [sp, #12]
 801efec:	9202      	str	r2, [sp, #8]
 801efee:	9401      	str	r4, [sp, #4]
 801eff0:	4b0f      	ldr	r3, [pc, #60]	@ (801f030 <tx_tcp+0x190>)
 801eff2:	9300      	str	r3, [sp, #0]
 801eff4:	4633      	mov	r3, r6
 801eff6:	462a      	mov	r2, r5
 801eff8:	490d      	ldr	r1, [pc, #52]	@ (801f030 <tx_tcp+0x190>)
 801effa:	480e      	ldr	r0, [pc, #56]	@ (801f034 <tx_tcp+0x194>)
 801effc:	f7fb ff6e 	bl	801aedc <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 801f000:	6a3b      	ldr	r3, [r7, #32]
 801f002:	f103 0214 	add.w	r2, r3, #20
 801f006:	68fb      	ldr	r3, [r7, #12]
 801f008:	695b      	ldr	r3, [r3, #20]
 801f00a:	1ad3      	subs	r3, r2, r3
 801f00c:	461a      	mov	r2, r3
 801f00e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f010:	4413      	add	r3, r2
 801f012:	4619      	mov	r1, r3
 801f014:	68f8      	ldr	r0, [r7, #12]
 801f016:	f7fe fde1 	bl	801dbdc <ether_output>
 801f01a:	4603      	mov	r3, r0
}
 801f01c:	4618      	mov	r0, r3
 801f01e:	372c      	adds	r7, #44	@ 0x2c
 801f020:	46bd      	mov	sp, r7
 801f022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f024:	20000298 	.word	0x20000298
 801f028:	08033f24 	.word	0x08033f24
 801f02c:	080310c8 	.word	0x080310c8
 801f030:	0802102d 	.word	0x0802102d
 801f034:	080329b0 	.word	0x080329b0

0801f038 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 801f038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f03c:	b08c      	sub	sp, #48	@ 0x30
 801f03e:	af06      	add	r7, sp, #24
 801f040:	60f8      	str	r0, [r7, #12]
 801f042:	60b9      	str	r1, [r7, #8]
 801f044:	603b      	str	r3, [r7, #0]
 801f046:	4613      	mov	r3, r2
 801f048:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 801f04a:	68bb      	ldr	r3, [r7, #8]
 801f04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f04e:	7b5b      	ldrb	r3, [r3, #13]
 801f050:	f003 0303 	and.w	r3, r3, #3
 801f054:	2b00      	cmp	r3, #0
 801f056:	bf14      	ite	ne
 801f058:	2301      	movne	r3, #1
 801f05a:	2300      	moveq	r3, #0
 801f05c:	b2db      	uxtb	r3, r3
 801f05e:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801f060:	68bb      	ldr	r3, [r7, #8]
 801f062:	691b      	ldr	r3, [r3, #16]
 801f064:	1d9e      	adds	r6, r3, #6
 801f066:	68bb      	ldr	r3, [r7, #8]
 801f068:	69db      	ldr	r3, [r3, #28]
 801f06a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801f06e:	68bb      	ldr	r3, [r7, #8]
 801f070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f072:	885b      	ldrh	r3, [r3, #2]
 801f074:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 801f076:	68bb      	ldr	r3, [r7, #8]
 801f078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801f07a:	881b      	ldrh	r3, [r3, #0]
 801f07c:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 801f07e:	68bb      	ldr	r3, [r7, #8]
 801f080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f082:	685b      	ldr	r3, [r3, #4]
 801f084:	4618      	mov	r0, r3
 801f086:	f003 fb67 	bl	8022758 <mg_ntohl>
 801f08a:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801f08c:	697b      	ldr	r3, [r7, #20]
 801f08e:	4413      	add	r3, r2
 801f090:	4618      	mov	r0, r3
 801f092:	f003 fb61 	bl	8022758 <mg_ntohl>
 801f096:	4601      	mov	r1, r0
 801f098:	79fa      	ldrb	r2, [r7, #7]
 801f09a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f09c:	9305      	str	r3, [sp, #20]
 801f09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f0a0:	9304      	str	r3, [sp, #16]
 801f0a2:	9103      	str	r1, [sp, #12]
 801f0a4:	683b      	ldr	r3, [r7, #0]
 801f0a6:	9302      	str	r3, [sp, #8]
 801f0a8:	9501      	str	r5, [sp, #4]
 801f0aa:	9400      	str	r4, [sp, #0]
 801f0ac:	4613      	mov	r3, r2
 801f0ae:	4642      	mov	r2, r8
 801f0b0:	4631      	mov	r1, r6
 801f0b2:	68f8      	ldr	r0, [r7, #12]
 801f0b4:	f7ff fef4 	bl	801eea0 <tx_tcp>
 801f0b8:	4603      	mov	r3, r0
                buf, len);
}
 801f0ba:	4618      	mov	r0, r3
 801f0bc:	3718      	adds	r7, #24
 801f0be:	46bd      	mov	sp, r7
 801f0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f0c4 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 801f0c4:	b5b0      	push	{r4, r5, r7, lr}
 801f0c6:	b084      	sub	sp, #16
 801f0c8:	af00      	add	r7, sp, #0
 801f0ca:	6078      	str	r0, [r7, #4]
 801f0cc:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	685b      	ldr	r3, [r3, #4]
 801f0d2:	4618      	mov	r0, r3
 801f0d4:	f7fe fa87 	bl	801d5e6 <mg_alloc_conn>
 801f0d8:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 801f0da:	68fb      	ldr	r3, [r7, #12]
 801f0dc:	2b00      	cmp	r3, #0
 801f0de:	d10f      	bne.n	801f100 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 801f0e0:	4b4e      	ldr	r3, [pc, #312]	@ (801f21c <accept_conn+0x158>)
 801f0e2:	681b      	ldr	r3, [r3, #0]
 801f0e4:	2b00      	cmp	r3, #0
 801f0e6:	dd09      	ble.n	801f0fc <accept_conn+0x38>
 801f0e8:	4b4d      	ldr	r3, [pc, #308]	@ (801f220 <accept_conn+0x15c>)
 801f0ea:	f241 5268 	movw	r2, #5480	@ 0x1568
 801f0ee:	494d      	ldr	r1, [pc, #308]	@ (801f224 <accept_conn+0x160>)
 801f0f0:	2001      	movs	r0, #1
 801f0f2:	f7fb fea3 	bl	801ae3c <mg_log_prefix>
 801f0f6:	484c      	ldr	r0, [pc, #304]	@ (801f228 <accept_conn+0x164>)
 801f0f8:	f7fb fef0 	bl	801aedc <mg_log>
    return NULL;
 801f0fc:	2300      	movs	r3, #0
 801f0fe:	e088      	b.n	801f212 <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 801f100:	68fb      	ldr	r3, [r7, #12]
 801f102:	33b0      	adds	r3, #176	@ 0xb0
 801f104:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 801f106:	683b      	ldr	r3, [r7, #0]
 801f108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f10a:	689b      	ldr	r3, [r3, #8]
 801f10c:	4618      	mov	r0, r3
 801f10e:	f003 fb23 	bl	8022758 <mg_ntohl>
 801f112:	4602      	mov	r2, r0
 801f114:	68bb      	ldr	r3, [r7, #8]
 801f116:	601a      	str	r2, [r3, #0]
 801f118:	683b      	ldr	r3, [r7, #0]
 801f11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f11c:	685b      	ldr	r3, [r3, #4]
 801f11e:	4618      	mov	r0, r3
 801f120:	f003 fb1a 	bl	8022758 <mg_ntohl>
 801f124:	4602      	mov	r2, r0
 801f126:	68bb      	ldr	r3, [r7, #8]
 801f128:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 801f12a:	68bb      	ldr	r3, [r7, #8]
 801f12c:	f103 0018 	add.w	r0, r3, #24
 801f130:	683b      	ldr	r3, [r7, #0]
 801f132:	691b      	ldr	r3, [r3, #16]
 801f134:	3306      	adds	r3, #6
 801f136:	2206      	movs	r2, #6
 801f138:	4619      	mov	r1, r3
 801f13a:	f007 fec5 	bl	8026ec8 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 801f13e:	2100      	movs	r1, #0
 801f140:	68f8      	ldr	r0, [r7, #12]
 801f142:	f7fe fcef 	bl	801db24 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 801f146:	68fb      	ldr	r3, [r7, #12]
 801f148:	331c      	adds	r3, #28
 801f14a:	683a      	ldr	r2, [r7, #0]
 801f14c:	69d2      	ldr	r2, [r2, #28]
 801f14e:	320c      	adds	r2, #12
 801f150:	6812      	ldr	r2, [r2, #0]
 801f152:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 801f154:	683b      	ldr	r3, [r7, #0]
 801f156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f158:	881b      	ldrh	r3, [r3, #0]
 801f15a:	b29a      	uxth	r2, r3
 801f15c:	68fb      	ldr	r3, [r7, #12]
 801f15e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 801f160:	4b2e      	ldr	r3, [pc, #184]	@ (801f21c <accept_conn+0x158>)
 801f162:	681b      	ldr	r3, [r3, #0]
 801f164:	2b02      	cmp	r3, #2
 801f166:	dd0e      	ble.n	801f186 <accept_conn+0xc2>
 801f168:	4b2d      	ldr	r3, [pc, #180]	@ (801f220 <accept_conn+0x15c>)
 801f16a:	f241 5271 	movw	r2, #5489	@ 0x1571
 801f16e:	492d      	ldr	r1, [pc, #180]	@ (801f224 <accept_conn+0x160>)
 801f170:	2003      	movs	r0, #3
 801f172:	f7fb fe63 	bl	801ae3c <mg_log_prefix>
 801f176:	68fb      	ldr	r3, [r7, #12]
 801f178:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801f17a:	68fb      	ldr	r3, [r7, #12]
 801f17c:	331c      	adds	r3, #28
 801f17e:	4a2b      	ldr	r2, [pc, #172]	@ (801f22c <accept_conn+0x168>)
 801f180:	482b      	ldr	r0, [pc, #172]	@ (801f230 <accept_conn+0x16c>)
 801f182:	f7fb feab 	bl	801aedc <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	685b      	ldr	r3, [r3, #4]
 801f18a:	681a      	ldr	r2, [r3, #0]
 801f18c:	68fb      	ldr	r3, [r7, #12]
 801f18e:	601a      	str	r2, [r3, #0]
 801f190:	687b      	ldr	r3, [r7, #4]
 801f192:	685b      	ldr	r3, [r3, #4]
 801f194:	68fa      	ldr	r2, [r7, #12]
 801f196:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 801f198:	68fa      	ldr	r2, [r7, #12]
 801f19a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801f19e:	f043 0304 	orr.w	r3, r3, #4
 801f1a2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 801f1a6:	687b      	ldr	r3, [r7, #4]
 801f1a8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f1ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801f1b0:	b2d9      	uxtb	r1, r3
 801f1b2:	68fa      	ldr	r2, [r7, #12]
 801f1b4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801f1b8:	f361 03c3 	bfi	r3, r1, #3, #1
 801f1bc:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 801f1c6:	68fb      	ldr	r3, [r7, #12]
 801f1c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 801f1cc:	68fa      	ldr	r2, [r7, #12]
 801f1ce:	687b      	ldr	r3, [r7, #4]
 801f1d0:	f102 0408 	add.w	r4, r2, #8
 801f1d4:	f103 0508 	add.w	r5, r3, #8
 801f1d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801f1da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f1dc:	682b      	ldr	r3, [r5, #0]
 801f1de:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801f1e6:	68fb      	ldr	r3, [r7, #12]
 801f1e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801f1f0:	68fb      	ldr	r3, [r7, #12]
 801f1f2:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 801f1f8:	68fb      	ldr	r3, [r7, #12]
 801f1fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 801f1fc:	2200      	movs	r2, #0
 801f1fe:	2101      	movs	r1, #1
 801f200:	68f8      	ldr	r0, [r7, #12]
 801f202:	f7f6 fa35 	bl	8015670 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 801f206:	2200      	movs	r2, #0
 801f208:	2105      	movs	r1, #5
 801f20a:	68f8      	ldr	r0, [r7, #12]
 801f20c:	f7f6 fa30 	bl	8015670 <mg_call>
  return c;
 801f210:	68fb      	ldr	r3, [r7, #12]
}
 801f212:	4618      	mov	r0, r3
 801f214:	3710      	adds	r7, #16
 801f216:	46bd      	mov	sp, r7
 801f218:	bdb0      	pop	{r4, r5, r7, pc}
 801f21a:	bf00      	nop
 801f21c:	20000298 	.word	0x20000298
 801f220:	08033f2c 	.word	0x08033f2c
 801f224:	080310c8 	.word	0x080310c8
 801f228:	08032604 	.word	0x08032604
 801f22c:	080210a5 	.word	0x080210a5
 801f230:	080329d4 	.word	0x080329d4

0801f234 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 801f234:	b580      	push	{r7, lr}
 801f236:	b08a      	sub	sp, #40	@ 0x28
 801f238:	af00      	add	r7, sp, #0
 801f23a:	6078      	str	r0, [r7, #4]
 801f23c:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801f23e:	687b      	ldr	r3, [r7, #4]
 801f240:	685b      	ldr	r3, [r3, #4]
 801f242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f244:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 801f246:	230e      	movs	r3, #14
 801f248:	623b      	str	r3, [r7, #32]
 801f24a:	2318      	movs	r3, #24
 801f24c:	61fb      	str	r3, [r7, #28]
 801f24e:	233c      	movs	r3, #60	@ 0x3c
 801f250:	61bb      	str	r3, [r7, #24]
 801f252:	2308      	movs	r3, #8
 801f254:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 801f256:	6a3a      	ldr	r2, [r7, #32]
 801f258:	69fb      	ldr	r3, [r7, #28]
 801f25a:	441a      	add	r2, r3
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f262:	f003 0301 	and.w	r3, r3, #1
 801f266:	b2db      	uxtb	r3, r3
 801f268:	2b00      	cmp	r3, #0
 801f26a:	d001      	beq.n	801f270 <trim_len+0x3c>
 801f26c:	697b      	ldr	r3, [r7, #20]
 801f26e:	e000      	b.n	801f272 <trim_len+0x3e>
 801f270:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 801f272:	4413      	add	r3, r2
 801f274:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f27c:	f003 0301 	and.w	r3, r3, #1
 801f280:	b2db      	uxtb	r3, r3
 801f282:	2b00      	cmp	r3, #0
 801f284:	d103      	bne.n	801f28e <trim_len+0x5a>
 801f286:	693a      	ldr	r2, [r7, #16]
 801f288:	6a3b      	ldr	r3, [r7, #32]
 801f28a:	1ad3      	subs	r3, r2, r3
 801f28c:	e000      	b.n	801f290 <trim_len+0x5c>
 801f28e:	2344      	movs	r3, #68	@ 0x44
 801f290:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 801f292:	683a      	ldr	r2, [r7, #0]
 801f294:	693b      	ldr	r3, [r7, #16]
 801f296:	441a      	add	r2, r3
 801f298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f29a:	699b      	ldr	r3, [r3, #24]
 801f29c:	429a      	cmp	r2, r3
 801f29e:	d904      	bls.n	801f2aa <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 801f2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2a2:	699a      	ldr	r2, [r3, #24]
 801f2a4:	693b      	ldr	r3, [r7, #16]
 801f2a6:	1ad3      	subs	r3, r2, r3
 801f2a8:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 801f2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801f2b0:	461a      	mov	r2, r3
 801f2b2:	68fb      	ldr	r3, [r7, #12]
 801f2b4:	4293      	cmp	r3, r2
 801f2b6:	d913      	bls.n	801f2e0 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 801f2b8:	4b20      	ldr	r3, [pc, #128]	@ (801f33c <trim_len+0x108>)
 801f2ba:	681b      	ldr	r3, [r3, #0]
 801f2bc:	2b00      	cmp	r3, #0
 801f2be:	dd0a      	ble.n	801f2d6 <trim_len+0xa2>
 801f2c0:	4b1f      	ldr	r3, [pc, #124]	@ (801f340 <trim_len+0x10c>)
 801f2c2:	f241 528c 	movw	r2, #5516	@ 0x158c
 801f2c6:	491f      	ldr	r1, [pc, #124]	@ (801f344 <trim_len+0x110>)
 801f2c8:	2001      	movs	r0, #1
 801f2ca:	f7fb fdb7 	bl	801ae3c <mg_log_prefix>
 801f2ce:	68f9      	ldr	r1, [r7, #12]
 801f2d0:	481d      	ldr	r0, [pc, #116]	@ (801f348 <trim_len+0x114>)
 801f2d2:	f7fb fe03 	bl	801aedc <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 801f2d6:	68fb      	ldr	r3, [r7, #12]
 801f2d8:	b29a      	uxth	r2, r3
 801f2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 801f2e0:	683a      	ldr	r2, [r7, #0]
 801f2e2:	693b      	ldr	r3, [r7, #16]
 801f2e4:	441a      	add	r2, r3
 801f2e6:	6a3b      	ldr	r3, [r7, #32]
 801f2e8:	1ad3      	subs	r3, r2, r3
 801f2ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f2ec:	f8b2 2044 	ldrh.w	r2, [r2, #68]	@ 0x44
 801f2f0:	4293      	cmp	r3, r2
 801f2f2:	d91e      	bls.n	801f332 <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 801f2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801f2fa:	461a      	mov	r2, r3
 801f2fc:	693b      	ldr	r3, [r7, #16]
 801f2fe:	1ad3      	subs	r3, r2, r3
 801f300:	6a3a      	ldr	r2, [r7, #32]
 801f302:	4413      	add	r3, r2
 801f304:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 801f306:	687b      	ldr	r3, [r7, #4]
 801f308:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f30c:	f003 0301 	and.w	r3, r3, #1
 801f310:	b2db      	uxtb	r3, r3
 801f312:	2b00      	cmp	r3, #0
 801f314:	d00d      	beq.n	801f332 <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 801f316:	4b09      	ldr	r3, [pc, #36]	@ (801f33c <trim_len+0x108>)
 801f318:	681b      	ldr	r3, [r3, #0]
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	dd09      	ble.n	801f332 <trim_len+0xfe>
 801f31e:	4b08      	ldr	r3, [pc, #32]	@ (801f340 <trim_len+0x10c>)
 801f320:	f241 5293 	movw	r2, #5523	@ 0x1593
 801f324:	4907      	ldr	r1, [pc, #28]	@ (801f344 <trim_len+0x110>)
 801f326:	2001      	movs	r0, #1
 801f328:	f7fb fd88 	bl	801ae3c <mg_log_prefix>
 801f32c:	4807      	ldr	r0, [pc, #28]	@ (801f34c <trim_len+0x118>)
 801f32e:	f7fb fdd5 	bl	801aedc <mg_log>
    }
  }

  return len;
 801f332:	683b      	ldr	r3, [r7, #0]
}
 801f334:	4618      	mov	r0, r3
 801f336:	3728      	adds	r7, #40	@ 0x28
 801f338:	46bd      	mov	sp, r7
 801f33a:	bd80      	pop	{r7, pc}
 801f33c:	20000298 	.word	0x20000298
 801f340:	08033f38 	.word	0x08033f38
 801f344:	080310c8 	.word	0x080310c8
 801f348:	080329e4 	.word	0x080329e4
 801f34c:	08032a10 	.word	0x08032a10

0801f350 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 801f350:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f352:	b08f      	sub	sp, #60	@ 0x3c
 801f354:	af06      	add	r7, sp, #24
 801f356:	60f8      	str	r0, [r7, #12]
 801f358:	60b9      	str	r1, [r7, #8]
 801f35a:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801f35c:	68fb      	ldr	r3, [r7, #12]
 801f35e:	685b      	ldr	r3, [r3, #4]
 801f360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f362:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 801f364:	68fb      	ldr	r3, [r7, #12]
 801f366:	33b0      	adds	r3, #176	@ 0xb0
 801f368:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 801f36a:	68fb      	ldr	r3, [r7, #12]
 801f36c:	331c      	adds	r3, #28
 801f36e:	681b      	ldr	r3, [r3, #0]
 801f370:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 801f372:	6879      	ldr	r1, [r7, #4]
 801f374:	68f8      	ldr	r0, [r7, #12]
 801f376:	f7ff ff5d 	bl	801f234 <trim_len>
 801f37a:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 801f37c:	68fb      	ldr	r3, [r7, #12]
 801f37e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f382:	f003 0301 	and.w	r3, r3, #1
 801f386:	b2db      	uxtb	r3, r3
 801f388:	2b00      	cmp	r3, #0
 801f38a:	d015      	beq.n	801f3b8 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 801f38c:	69bb      	ldr	r3, [r7, #24]
 801f38e:	f103 0118 	add.w	r1, r3, #24
 801f392:	69fb      	ldr	r3, [r7, #28]
 801f394:	6898      	ldr	r0, [r3, #8]
 801f396:	68fb      	ldr	r3, [r7, #12]
 801f398:	8b1c      	ldrh	r4, [r3, #24]
 801f39a:	68fb      	ldr	r3, [r7, #12]
 801f39c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801f39e:	687a      	ldr	r2, [r7, #4]
 801f3a0:	9203      	str	r2, [sp, #12]
 801f3a2:	68ba      	ldr	r2, [r7, #8]
 801f3a4:	9202      	str	r2, [sp, #8]
 801f3a6:	9301      	str	r3, [sp, #4]
 801f3a8:	697b      	ldr	r3, [r7, #20]
 801f3aa:	9300      	str	r3, [sp, #0]
 801f3ac:	4623      	mov	r3, r4
 801f3ae:	4602      	mov	r2, r0
 801f3b0:	69f8      	ldr	r0, [r7, #28]
 801f3b2:	f7fe fd77 	bl	801dea4 <tx_udp>
 801f3b6:	e03d      	b.n	801f434 <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 801f3b8:	69bb      	ldr	r3, [r7, #24]
 801f3ba:	f103 0618 	add.w	r6, r3, #24
 801f3be:	68fb      	ldr	r3, [r7, #12]
 801f3c0:	8b1c      	ldrh	r4, [r3, #24]
 801f3c2:	68fb      	ldr	r3, [r7, #12]
 801f3c4:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801f3c6:	69bb      	ldr	r3, [r7, #24]
 801f3c8:	681b      	ldr	r3, [r3, #0]
 801f3ca:	4618      	mov	r0, r3
 801f3cc:	f003 f9c4 	bl	8022758 <mg_ntohl>
 801f3d0:	6038      	str	r0, [r7, #0]
 801f3d2:	69bb      	ldr	r3, [r7, #24]
 801f3d4:	685b      	ldr	r3, [r3, #4]
 801f3d6:	4618      	mov	r0, r3
 801f3d8:	f003 f9be 	bl	8022758 <mg_ntohl>
 801f3dc:	4602      	mov	r2, r0
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	9305      	str	r3, [sp, #20]
 801f3e2:	68bb      	ldr	r3, [r7, #8]
 801f3e4:	9304      	str	r3, [sp, #16]
 801f3e6:	9203      	str	r2, [sp, #12]
 801f3e8:	683b      	ldr	r3, [r7, #0]
 801f3ea:	9302      	str	r3, [sp, #8]
 801f3ec:	9501      	str	r5, [sp, #4]
 801f3ee:	9400      	str	r4, [sp, #0]
 801f3f0:	2318      	movs	r3, #24
 801f3f2:	697a      	ldr	r2, [r7, #20]
 801f3f4:	4631      	mov	r1, r6
 801f3f6:	69f8      	ldr	r0, [r7, #28]
 801f3f8:	f7ff fd52 	bl	801eea0 <tx_tcp>
 801f3fc:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 801f3fe:	693b      	ldr	r3, [r7, #16]
 801f400:	2b00      	cmp	r3, #0
 801f402:	d102      	bne.n	801f40a <mg_io_send+0xba>
      return MG_IO_WAIT;
 801f404:	f06f 0301 	mvn.w	r3, #1
 801f408:	e015      	b.n	801f436 <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 801f40a:	693b      	ldr	r3, [r7, #16]
 801f40c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f410:	d102      	bne.n	801f418 <mg_io_send+0xc8>
      return MG_IO_ERR;
 801f412:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f416:	e00e      	b.n	801f436 <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 801f418:	69bb      	ldr	r3, [r7, #24]
 801f41a:	681a      	ldr	r2, [r3, #0]
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	441a      	add	r2, r3
 801f420:	69bb      	ldr	r3, [r7, #24]
 801f422:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 801f424:	69bb      	ldr	r3, [r7, #24]
 801f426:	7f9b      	ldrb	r3, [r3, #30]
 801f428:	2b01      	cmp	r3, #1
 801f42a:	d103      	bne.n	801f434 <mg_io_send+0xe4>
 801f42c:	2100      	movs	r1, #0
 801f42e:	68f8      	ldr	r0, [r7, #12]
 801f430:	f7fe fb78 	bl	801db24 <settmout>
    }
  }
  return (long) len;
 801f434:	687b      	ldr	r3, [r7, #4]
}
 801f436:	4618      	mov	r0, r3
 801f438:	3724      	adds	r7, #36	@ 0x24
 801f43a:	46bd      	mov	sp, r7
 801f43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801f440 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 801f440:	b580      	push	{r7, lr}
 801f442:	b084      	sub	sp, #16
 801f444:	af00      	add	r7, sp, #0
 801f446:	6078      	str	r0, [r7, #4]
 801f448:	6039      	str	r1, [r7, #0]
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 801f44a:	683b      	ldr	r3, [r7, #0]
 801f44c:	681a      	ldr	r2, [r3, #0]
 801f44e:	683b      	ldr	r3, [r7, #0]
 801f450:	689b      	ldr	r3, [r3, #8]
 801f452:	18d1      	adds	r1, r2, r3
 801f454:	683b      	ldr	r3, [r7, #0]
 801f456:	685a      	ldr	r2, [r3, #4]
 801f458:	683b      	ldr	r3, [r7, #0]
 801f45a:	689b      	ldr	r3, [r3, #8]
 801f45c:	1ad3      	subs	r3, r2, r3
 801f45e:	461a      	mov	r2, r3
 801f460:	6878      	ldr	r0, [r7, #4]
 801f462:	f002 ff51 	bl	8022308 <mg_tls_recv>
 801f466:	4603      	mov	r3, r0
 801f468:	60fb      	str	r3, [r7, #12]
  if (n == MG_IO_ERR) {
 801f46a:	68fb      	ldr	r3, [r7, #12]
 801f46c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f470:	d104      	bne.n	801f47c <handle_tls_recv+0x3c>
    mg_error(c, "TLS recv error");
 801f472:	490c      	ldr	r1, [pc, #48]	@ (801f4a4 <handle_tls_recv+0x64>)
 801f474:	6878      	ldr	r0, [r7, #4]
 801f476:	f7f6 f91b 	bl	80156b0 <mg_error>
  } else if (n > 0) {
    // Decrypted successfully - trigger MG_EV_READ
    io->len += (size_t) n;
    mg_call(c, MG_EV_READ, &n);
  }
}
 801f47a:	e00f      	b.n	801f49c <handle_tls_recv+0x5c>
  } else if (n > 0) {
 801f47c:	68fb      	ldr	r3, [r7, #12]
 801f47e:	2b00      	cmp	r3, #0
 801f480:	dd0c      	ble.n	801f49c <handle_tls_recv+0x5c>
    io->len += (size_t) n;
 801f482:	683b      	ldr	r3, [r7, #0]
 801f484:	689b      	ldr	r3, [r3, #8]
 801f486:	68fa      	ldr	r2, [r7, #12]
 801f488:	441a      	add	r2, r3
 801f48a:	683b      	ldr	r3, [r7, #0]
 801f48c:	609a      	str	r2, [r3, #8]
    mg_call(c, MG_EV_READ, &n);
 801f48e:	f107 030c 	add.w	r3, r7, #12
 801f492:	461a      	mov	r2, r3
 801f494:	2107      	movs	r1, #7
 801f496:	6878      	ldr	r0, [r7, #4]
 801f498:	f7f6 f8ea 	bl	8015670 <mg_call>
}
 801f49c:	bf00      	nop
 801f49e:	3710      	adds	r7, #16
 801f4a0:	46bd      	mov	sp, r7
 801f4a2:	bd80      	pop	{r7, pc}
 801f4a4:	08032a3c 	.word	0x08032a3c

0801f4a8 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 801f4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f4ac:	b090      	sub	sp, #64	@ 0x40
 801f4ae:	af06      	add	r7, sp, #24
 801f4b0:	60f8      	str	r0, [r7, #12]
 801f4b2:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 801f4b4:	68fb      	ldr	r3, [r7, #12]
 801f4b6:	33b0      	adds	r3, #176	@ 0xb0
 801f4b8:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 801f4ba:	68fb      	ldr	r3, [r7, #12]
 801f4bc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f4c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f4c4:	b2db      	uxtb	r3, r3
 801f4c6:	2b00      	cmp	r3, #0
 801f4c8:	d002      	beq.n	801f4d0 <read_conn+0x28>
 801f4ca:	68fb      	ldr	r3, [r7, #12]
 801f4cc:	3368      	adds	r3, #104	@ 0x68
 801f4ce:	e001      	b.n	801f4d4 <read_conn+0x2c>
 801f4d0:	68fb      	ldr	r3, [r7, #12]
 801f4d2:	3338      	adds	r3, #56	@ 0x38
 801f4d4:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 801f4d6:	68bb      	ldr	r3, [r7, #8]
 801f4d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4da:	685b      	ldr	r3, [r3, #4]
 801f4dc:	4618      	mov	r0, r3
 801f4de:	f003 f93b 	bl	8022758 <mg_ntohl>
 801f4e2:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801f4e4:	68fb      	ldr	r3, [r7, #12]
 801f4e6:	331c      	adds	r3, #28
 801f4e8:	681b      	ldr	r3, [r3, #0]
 801f4ea:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 801f4ec:	68bb      	ldr	r3, [r7, #8]
 801f4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4f0:	7b5b      	ldrb	r3, [r3, #13]
 801f4f2:	f003 0301 	and.w	r3, r3, #1
 801f4f6:	2b00      	cmp	r3, #0
 801f4f8:	d070      	beq.n	801f5dc <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 801f4fa:	2310      	movs	r3, #16
 801f4fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 801f500:	68bb      	ldr	r3, [r7, #8]
 801f502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f504:	685b      	ldr	r3, [r3, #4]
 801f506:	4618      	mov	r0, r3
 801f508:	f003 f926 	bl	8022758 <mg_ntohl>
 801f50c:	4602      	mov	r2, r0
 801f50e:	68bb      	ldr	r3, [r7, #8]
 801f510:	68db      	ldr	r3, [r3, #12]
 801f512:	4413      	add	r3, r2
 801f514:	1c5a      	adds	r2, r3, #1
 801f516:	6a3b      	ldr	r3, [r7, #32]
 801f518:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 801f51a:	68fb      	ldr	r3, [r7, #12]
 801f51c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f520:	f003 0310 	and.w	r3, r3, #16
 801f524:	b2db      	uxtb	r3, r3
 801f526:	2b00      	cmp	r3, #0
 801f528:	d01e      	beq.n	801f568 <read_conn+0xc0>
 801f52a:	6a3b      	ldr	r3, [r7, #32]
 801f52c:	7f9b      	ldrb	r3, [r3, #30]
 801f52e:	2b04      	cmp	r3, #4
 801f530:	d11a      	bne.n	801f568 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801f532:	6a3b      	ldr	r3, [r7, #32]
 801f534:	681c      	ldr	r4, [r3, #0]
 801f536:	68bb      	ldr	r3, [r7, #8]
 801f538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f53a:	689b      	ldr	r3, [r3, #8]
 801f53c:	4618      	mov	r0, r3
 801f53e:	f003 f90b 	bl	8022758 <mg_ntohl>
 801f542:	4603      	mov	r3, r0
 801f544:	429c      	cmp	r4, r3
 801f546:	d105      	bne.n	801f554 <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 801f548:	6a3b      	ldr	r3, [r7, #32]
 801f54a:	681b      	ldr	r3, [r3, #0]
 801f54c:	1c5a      	adds	r2, r3, #1
 801f54e:	6a3b      	ldr	r3, [r7, #32]
 801f550:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801f552:	e01a      	b.n	801f58a <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 801f554:	68bb      	ldr	r3, [r7, #8]
 801f556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f558:	689b      	ldr	r3, [r3, #8]
 801f55a:	4618      	mov	r0, r3
 801f55c:	f003 f8fc 	bl	8022758 <mg_ntohl>
 801f560:	4602      	mov	r2, r0
 801f562:	6a3b      	ldr	r3, [r7, #32]
 801f564:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801f566:	e010      	b.n	801f58a <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 801f568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801f56c:	f043 0301 	orr.w	r3, r3, #1
 801f570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 801f574:	68fa      	ldr	r2, [r7, #12]
 801f576:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801f57a:	f043 0310 	orr.w	r3, r3, #16
 801f57e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 801f582:	2104      	movs	r1, #4
 801f584:	68f8      	ldr	r0, [r7, #12]
 801f586:	f7fe facd 	bl	801db24 <settmout>
    }
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 801f58a:	68fb      	ldr	r3, [r7, #12]
 801f58c:	685b      	ldr	r3, [r3, #4]
 801f58e:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801f590:	6a3b      	ldr	r3, [r7, #32]
 801f592:	f103 0818 	add.w	r8, r3, #24
 801f596:	693b      	ldr	r3, [r7, #16]
 801f598:	607b      	str	r3, [r7, #4]
 801f59a:	68fb      	ldr	r3, [r7, #12]
 801f59c:	8b1c      	ldrh	r4, [r3, #24]
 801f59e:	68fb      	ldr	r3, [r7, #12]
 801f5a0:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801f5a2:	6a3b      	ldr	r3, [r7, #32]
 801f5a4:	681b      	ldr	r3, [r3, #0]
 801f5a6:	4618      	mov	r0, r3
 801f5a8:	f003 f8d6 	bl	8022758 <mg_ntohl>
 801f5ac:	6038      	str	r0, [r7, #0]
 801f5ae:	6a3b      	ldr	r3, [r7, #32]
 801f5b0:	685b      	ldr	r3, [r3, #4]
 801f5b2:	4618      	mov	r0, r3
 801f5b4:	f003 f8d0 	bl	8022758 <mg_ntohl>
 801f5b8:	4602      	mov	r2, r0
 801f5ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801f5be:	2100      	movs	r1, #0
 801f5c0:	9105      	str	r1, [sp, #20]
 801f5c2:	4990      	ldr	r1, [pc, #576]	@ (801f804 <read_conn+0x35c>)
 801f5c4:	9104      	str	r1, [sp, #16]
 801f5c6:	9203      	str	r2, [sp, #12]
 801f5c8:	6839      	ldr	r1, [r7, #0]
 801f5ca:	9102      	str	r1, [sp, #8]
 801f5cc:	9501      	str	r5, [sp, #4]
 801f5ce:	9400      	str	r4, [sp, #0]
 801f5d0:	687a      	ldr	r2, [r7, #4]
 801f5d2:	4641      	mov	r1, r8
 801f5d4:	4630      	mov	r0, r6
 801f5d6:	f7ff fc63 	bl	801eea0 <tx_tcp>
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 801f5da:	e173      	b.n	801f8c4 <read_conn+0x41c>
  } else if (pkt->pay.len == 0) {
 801f5dc:	68bb      	ldr	r3, [r7, #8]
 801f5de:	68db      	ldr	r3, [r3, #12]
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	f000 816f 	beq.w	801f8c4 <read_conn+0x41c>
  } else if (seq != s->ack) {
 801f5e6:	6a3b      	ldr	r3, [r7, #32]
 801f5e8:	685b      	ldr	r3, [r3, #4]
 801f5ea:	69ba      	ldr	r2, [r7, #24]
 801f5ec:	429a      	cmp	r2, r3
 801f5ee:	d059      	beq.n	801f6a4 <read_conn+0x1fc>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 801f5f0:	68bb      	ldr	r3, [r7, #8]
 801f5f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f5f4:	685b      	ldr	r3, [r3, #4]
 801f5f6:	4618      	mov	r0, r3
 801f5f8:	f003 f8ae 	bl	8022758 <mg_ntohl>
 801f5fc:	4602      	mov	r2, r0
 801f5fe:	68bb      	ldr	r3, [r7, #8]
 801f600:	68db      	ldr	r3, [r3, #12]
 801f602:	4413      	add	r3, r2
 801f604:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 801f606:	6a3b      	ldr	r3, [r7, #32]
 801f608:	685b      	ldr	r3, [r3, #4]
 801f60a:	697a      	ldr	r2, [r7, #20]
 801f60c:	429a      	cmp	r2, r3
 801f60e:	d10f      	bne.n	801f630 <read_conn+0x188>
      MG_VERBOSE(("ignoring duplicate pkt"));
 801f610:	4b7d      	ldr	r3, [pc, #500]	@ (801f808 <read_conn+0x360>)
 801f612:	681b      	ldr	r3, [r3, #0]
 801f614:	2b03      	cmp	r3, #3
 801f616:	f340 8155 	ble.w	801f8c4 <read_conn+0x41c>
 801f61a:	4b7c      	ldr	r3, [pc, #496]	@ (801f80c <read_conn+0x364>)
 801f61c:	f241 52da 	movw	r2, #5594	@ 0x15da
 801f620:	497b      	ldr	r1, [pc, #492]	@ (801f810 <read_conn+0x368>)
 801f622:	2004      	movs	r0, #4
 801f624:	f7fb fc0a 	bl	801ae3c <mg_log_prefix>
 801f628:	487a      	ldr	r0, [pc, #488]	@ (801f814 <read_conn+0x36c>)
 801f62a:	f7fb fc57 	bl	801aedc <mg_log>
}
 801f62e:	e149      	b.n	801f8c4 <read_conn+0x41c>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 801f630:	4b75      	ldr	r3, [pc, #468]	@ (801f808 <read_conn+0x360>)
 801f632:	681b      	ldr	r3, [r3, #0]
 801f634:	2b03      	cmp	r3, #3
 801f636:	dd0d      	ble.n	801f654 <read_conn+0x1ac>
 801f638:	4b74      	ldr	r3, [pc, #464]	@ (801f80c <read_conn+0x364>)
 801f63a:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 801f63e:	4974      	ldr	r1, [pc, #464]	@ (801f810 <read_conn+0x368>)
 801f640:	2004      	movs	r0, #4
 801f642:	f7fb fbfb 	bl	801ae3c <mg_log_prefix>
 801f646:	6a3b      	ldr	r3, [r7, #32]
 801f648:	685a      	ldr	r2, [r3, #4]
 801f64a:	697b      	ldr	r3, [r7, #20]
 801f64c:	69b9      	ldr	r1, [r7, #24]
 801f64e:	4872      	ldr	r0, [pc, #456]	@ (801f818 <read_conn+0x370>)
 801f650:	f7fb fc44 	bl	801aedc <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 801f654:	68fb      	ldr	r3, [r7, #12]
 801f656:	685b      	ldr	r3, [r3, #4]
 801f658:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801f65a:	6a3b      	ldr	r3, [r7, #32]
 801f65c:	f103 0818 	add.w	r8, r3, #24
 801f660:	693b      	ldr	r3, [r7, #16]
 801f662:	607b      	str	r3, [r7, #4]
 801f664:	68fb      	ldr	r3, [r7, #12]
 801f666:	8b1c      	ldrh	r4, [r3, #24]
 801f668:	68fb      	ldr	r3, [r7, #12]
 801f66a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801f66c:	6a3b      	ldr	r3, [r7, #32]
 801f66e:	681b      	ldr	r3, [r3, #0]
 801f670:	4618      	mov	r0, r3
 801f672:	f003 f871 	bl	8022758 <mg_ntohl>
 801f676:	6038      	str	r0, [r7, #0]
 801f678:	6a3b      	ldr	r3, [r7, #32]
 801f67a:	685b      	ldr	r3, [r3, #4]
 801f67c:	4618      	mov	r0, r3
 801f67e:	f003 f86b 	bl	8022758 <mg_ntohl>
 801f682:	4603      	mov	r3, r0
 801f684:	2200      	movs	r2, #0
 801f686:	9205      	str	r2, [sp, #20]
 801f688:	4a5e      	ldr	r2, [pc, #376]	@ (801f804 <read_conn+0x35c>)
 801f68a:	9204      	str	r2, [sp, #16]
 801f68c:	9303      	str	r3, [sp, #12]
 801f68e:	6839      	ldr	r1, [r7, #0]
 801f690:	9102      	str	r1, [sp, #8]
 801f692:	9501      	str	r5, [sp, #4]
 801f694:	9400      	str	r4, [sp, #0]
 801f696:	2310      	movs	r3, #16
 801f698:	687a      	ldr	r2, [r7, #4]
 801f69a:	4641      	mov	r1, r8
 801f69c:	4630      	mov	r0, r6
 801f69e:	f7ff fbff 	bl	801eea0 <tx_tcp>
}
 801f6a2:	e10f      	b.n	801f8c4 <read_conn+0x41c>
  } else if (io->size - io->len < pkt->pay.len &&
 801f6a4:	69fb      	ldr	r3, [r7, #28]
 801f6a6:	685a      	ldr	r2, [r3, #4]
 801f6a8:	69fb      	ldr	r3, [r7, #28]
 801f6aa:	689b      	ldr	r3, [r3, #8]
 801f6ac:	1ad2      	subs	r2, r2, r3
 801f6ae:	68bb      	ldr	r3, [r7, #8]
 801f6b0:	68db      	ldr	r3, [r3, #12]
 801f6b2:	429a      	cmp	r2, r3
 801f6b4:	d210      	bcs.n	801f6d8 <read_conn+0x230>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 801f6b6:	69fb      	ldr	r3, [r7, #28]
 801f6b8:	689a      	ldr	r2, [r3, #8]
 801f6ba:	68bb      	ldr	r3, [r7, #8]
 801f6bc:	68db      	ldr	r3, [r3, #12]
 801f6be:	4413      	add	r3, r2
 801f6c0:	4619      	mov	r1, r3
 801f6c2:	69f8      	ldr	r0, [r7, #28]
 801f6c4:	f7fa fbca 	bl	8019e5c <mg_iobuf_resize>
 801f6c8:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	d104      	bne.n	801f6d8 <read_conn+0x230>
    mg_error(c, "oom");
 801f6ce:	4953      	ldr	r1, [pc, #332]	@ (801f81c <read_conn+0x374>)
 801f6d0:	68f8      	ldr	r0, [r7, #12]
 801f6d2:	f7f5 ffed 	bl	80156b0 <mg_error>
 801f6d6:	e0f5      	b.n	801f8c4 <read_conn+0x41c>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 801f6d8:	69fb      	ldr	r3, [r7, #28]
 801f6da:	681a      	ldr	r2, [r3, #0]
 801f6dc:	69fb      	ldr	r3, [r7, #28]
 801f6de:	689b      	ldr	r3, [r3, #8]
 801f6e0:	18d0      	adds	r0, r2, r3
 801f6e2:	68bb      	ldr	r3, [r7, #8]
 801f6e4:	6899      	ldr	r1, [r3, #8]
 801f6e6:	68bb      	ldr	r3, [r7, #8]
 801f6e8:	68db      	ldr	r3, [r3, #12]
 801f6ea:	461a      	mov	r2, r3
 801f6ec:	f007 fbec 	bl	8026ec8 <memcpy>
    io->len += pkt->pay.len;
 801f6f0:	69fb      	ldr	r3, [r7, #28]
 801f6f2:	689a      	ldr	r2, [r3, #8]
 801f6f4:	68bb      	ldr	r3, [r7, #8]
 801f6f6:	68db      	ldr	r3, [r3, #12]
 801f6f8:	441a      	add	r2, r3
 801f6fa:	69fb      	ldr	r3, [r7, #28]
 801f6fc:	609a      	str	r2, [r3, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 801f6fe:	4b42      	ldr	r3, [pc, #264]	@ (801f808 <read_conn+0x360>)
 801f700:	681b      	ldr	r3, [r3, #0]
 801f702:	2b03      	cmp	r3, #3
 801f704:	dd15      	ble.n	801f732 <read_conn+0x28a>
 801f706:	4b41      	ldr	r3, [pc, #260]	@ (801f80c <read_conn+0x364>)
 801f708:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 801f70c:	4940      	ldr	r1, [pc, #256]	@ (801f810 <read_conn+0x368>)
 801f70e:	2004      	movs	r0, #4
 801f710:	f7fb fb94 	bl	801ae3c <mg_log_prefix>
 801f714:	68fb      	ldr	r3, [r7, #12]
 801f716:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 801f718:	68bb      	ldr	r3, [r7, #8]
 801f71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f71c:	685b      	ldr	r3, [r3, #4]
 801f71e:	4618      	mov	r0, r3
 801f720:	f003 f81a 	bl	8022758 <mg_ntohl>
 801f724:	4602      	mov	r2, r0
 801f726:	6a3b      	ldr	r3, [r7, #32]
 801f728:	685b      	ldr	r3, [r3, #4]
 801f72a:	4621      	mov	r1, r4
 801f72c:	483c      	ldr	r0, [pc, #240]	@ (801f820 <read_conn+0x378>)
 801f72e:	f7fb fbd5 	bl	801aedc <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 801f732:	68bb      	ldr	r3, [r7, #8]
 801f734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f736:	685b      	ldr	r3, [r3, #4]
 801f738:	4618      	mov	r0, r3
 801f73a:	f003 f80d 	bl	8022758 <mg_ntohl>
 801f73e:	4602      	mov	r2, r0
 801f740:	68bb      	ldr	r3, [r7, #8]
 801f742:	68db      	ldr	r3, [r3, #12]
 801f744:	441a      	add	r2, r3
 801f746:	6a3b      	ldr	r3, [r7, #32]
 801f748:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 801f74a:	6a3b      	ldr	r3, [r7, #32]
 801f74c:	695a      	ldr	r2, [r3, #20]
 801f74e:	68bb      	ldr	r3, [r7, #8]
 801f750:	68db      	ldr	r3, [r3, #12]
 801f752:	441a      	add	r2, r3
 801f754:	6a3b      	ldr	r3, [r7, #32]
 801f756:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 801f758:	6a3b      	ldr	r3, [r7, #32]
 801f75a:	695b      	ldr	r3, [r3, #20]
 801f75c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801f760:	4293      	cmp	r3, r2
 801f762:	d961      	bls.n	801f828 <read_conn+0x380>
 801f764:	6a3b      	ldr	r3, [r7, #32]
 801f766:	691a      	ldr	r2, [r3, #16]
 801f768:	6a3b      	ldr	r3, [r7, #32]
 801f76a:	685b      	ldr	r3, [r3, #4]
 801f76c:	429a      	cmp	r2, r3
 801f76e:	d05b      	beq.n	801f828 <read_conn+0x380>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 801f770:	4b25      	ldr	r3, [pc, #148]	@ (801f808 <read_conn+0x360>)
 801f772:	681b      	ldr	r3, [r3, #0]
 801f774:	2b03      	cmp	r3, #3
 801f776:	dd0e      	ble.n	801f796 <read_conn+0x2ee>
 801f778:	4b24      	ldr	r3, [pc, #144]	@ (801f80c <read_conn+0x364>)
 801f77a:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 801f77e:	4924      	ldr	r1, [pc, #144]	@ (801f810 <read_conn+0x368>)
 801f780:	2004      	movs	r0, #4
 801f782:	f7fb fb5b 	bl	801ae3c <mg_log_prefix>
 801f786:	68fb      	ldr	r3, [r7, #12]
 801f788:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801f78a:	6a3b      	ldr	r3, [r7, #32]
 801f78c:	691b      	ldr	r3, [r3, #16]
 801f78e:	461a      	mov	r2, r3
 801f790:	4824      	ldr	r0, [pc, #144]	@ (801f824 <read_conn+0x37c>)
 801f792:	f7fb fba3 	bl	801aedc <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 801f796:	68fb      	ldr	r3, [r7, #12]
 801f798:	685b      	ldr	r3, [r3, #4]
 801f79a:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801f79c:	6a3b      	ldr	r3, [r7, #32]
 801f79e:	f103 0818 	add.w	r8, r3, #24
 801f7a2:	693b      	ldr	r3, [r7, #16]
 801f7a4:	607b      	str	r3, [r7, #4]
 801f7a6:	68fb      	ldr	r3, [r7, #12]
 801f7a8:	8b1c      	ldrh	r4, [r3, #24]
 801f7aa:	68fb      	ldr	r3, [r7, #12]
 801f7ac:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801f7ae:	6a3b      	ldr	r3, [r7, #32]
 801f7b0:	681b      	ldr	r3, [r3, #0]
 801f7b2:	4618      	mov	r0, r3
 801f7b4:	f002 ffd0 	bl	8022758 <mg_ntohl>
 801f7b8:	6038      	str	r0, [r7, #0]
 801f7ba:	6a3b      	ldr	r3, [r7, #32]
 801f7bc:	685b      	ldr	r3, [r3, #4]
 801f7be:	4618      	mov	r0, r3
 801f7c0:	f002 ffca 	bl	8022758 <mg_ntohl>
 801f7c4:	4603      	mov	r3, r0
 801f7c6:	2200      	movs	r2, #0
 801f7c8:	9205      	str	r2, [sp, #20]
 801f7ca:	2200      	movs	r2, #0
 801f7cc:	9204      	str	r2, [sp, #16]
 801f7ce:	9303      	str	r3, [sp, #12]
 801f7d0:	6839      	ldr	r1, [r7, #0]
 801f7d2:	9102      	str	r1, [sp, #8]
 801f7d4:	9501      	str	r5, [sp, #4]
 801f7d6:	9400      	str	r4, [sp, #0]
 801f7d8:	2310      	movs	r3, #16
 801f7da:	687a      	ldr	r2, [r7, #4]
 801f7dc:	4641      	mov	r1, r8
 801f7de:	4630      	mov	r0, r6
 801f7e0:	f7ff fb5e 	bl	801eea0 <tx_tcp>
      s->unacked = 0;
 801f7e4:	6a3b      	ldr	r3, [r7, #32]
 801f7e6:	2200      	movs	r2, #0
 801f7e8:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 801f7ea:	6a3b      	ldr	r3, [r7, #32]
 801f7ec:	685a      	ldr	r2, [r3, #4]
 801f7ee:	6a3b      	ldr	r3, [r7, #32]
 801f7f0:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 801f7f2:	6a3b      	ldr	r3, [r7, #32]
 801f7f4:	7f9b      	ldrb	r3, [r3, #30]
 801f7f6:	2b00      	cmp	r3, #0
 801f7f8:	d01e      	beq.n	801f838 <read_conn+0x390>
 801f7fa:	2100      	movs	r1, #0
 801f7fc:	68f8      	ldr	r0, [r7, #12]
 801f7fe:	f7fe f991 	bl	801db24 <settmout>
 801f802:	e019      	b.n	801f838 <read_conn+0x390>
 801f804:	080317a8 	.word	0x080317a8
 801f808:	20000298 	.word	0x20000298
 801f80c:	08033f44 	.word	0x08033f44
 801f810:	080310c8 	.word	0x080310c8
 801f814:	08032a4c 	.word	0x08032a4c
 801f818:	08032a64 	.word	0x08032a64
 801f81c:	080329ac 	.word	0x080329ac
 801f820:	08032a7c 	.word	0x08032a7c
 801f824:	08032a90 	.word	0x08032a90
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 801f828:	6a3b      	ldr	r3, [r7, #32]
 801f82a:	7f9b      	ldrb	r3, [r3, #30]
 801f82c:	2b01      	cmp	r3, #1
 801f82e:	d003      	beq.n	801f838 <read_conn+0x390>
 801f830:	2101      	movs	r1, #1
 801f832:	68f8      	ldr	r0, [r7, #12]
 801f834:	f7fe f976 	bl	801db24 <settmout>
    if (c->is_tls && c->is_tls_hs) {
 801f838:	68fb      	ldr	r3, [r7, #12]
 801f83a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f83e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f842:	b2db      	uxtb	r3, r3
 801f844:	2b00      	cmp	r3, #0
 801f846:	d00b      	beq.n	801f860 <read_conn+0x3b8>
 801f848:	68fb      	ldr	r3, [r7, #12]
 801f84a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f84e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801f852:	b2db      	uxtb	r3, r3
 801f854:	2b00      	cmp	r3, #0
 801f856:	d003      	beq.n	801f860 <read_conn+0x3b8>
      mg_tls_handshake(c);
 801f858:	68f8      	ldr	r0, [r7, #12]
 801f85a:	f002 fd41 	bl	80222e0 <mg_tls_handshake>
 801f85e:	e031      	b.n	801f8c4 <read_conn+0x41c>
    } else if (c->is_tls) {
 801f860:	68fb      	ldr	r3, [r7, #12]
 801f862:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f86a:	b2db      	uxtb	r3, r3
 801f86c:	2b00      	cmp	r3, #0
 801f86e:	d021      	beq.n	801f8b4 <read_conn+0x40c>
      io = &c->recv;
 801f870:	68fb      	ldr	r3, [r7, #12]
 801f872:	3338      	adds	r3, #56	@ 0x38
 801f874:	61fb      	str	r3, [r7, #28]
      if (io->size - io->len < pkt->pay.len &&
 801f876:	69fb      	ldr	r3, [r7, #28]
 801f878:	685a      	ldr	r2, [r3, #4]
 801f87a:	69fb      	ldr	r3, [r7, #28]
 801f87c:	689b      	ldr	r3, [r3, #8]
 801f87e:	1ad2      	subs	r2, r2, r3
 801f880:	68bb      	ldr	r3, [r7, #8]
 801f882:	68db      	ldr	r3, [r3, #12]
 801f884:	429a      	cmp	r2, r3
 801f886:	d210      	bcs.n	801f8aa <read_conn+0x402>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 801f888:	69fb      	ldr	r3, [r7, #28]
 801f88a:	689a      	ldr	r2, [r3, #8]
 801f88c:	68bb      	ldr	r3, [r7, #8]
 801f88e:	68db      	ldr	r3, [r3, #12]
 801f890:	4413      	add	r3, r2
 801f892:	4619      	mov	r1, r3
 801f894:	69f8      	ldr	r0, [r7, #28]
 801f896:	f7fa fae1 	bl	8019e5c <mg_iobuf_resize>
 801f89a:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 801f89c:	2b00      	cmp	r3, #0
 801f89e:	d104      	bne.n	801f8aa <read_conn+0x402>
        mg_error(c, "oom");
 801f8a0:	490b      	ldr	r1, [pc, #44]	@ (801f8d0 <read_conn+0x428>)
 801f8a2:	68f8      	ldr	r0, [r7, #12]
 801f8a4:	f7f5 ff04 	bl	80156b0 <mg_error>
 801f8a8:	e00c      	b.n	801f8c4 <read_conn+0x41c>
        handle_tls_recv(c, io);
 801f8aa:	69f9      	ldr	r1, [r7, #28]
 801f8ac:	68f8      	ldr	r0, [r7, #12]
 801f8ae:	f7ff fdc7 	bl	801f440 <handle_tls_recv>
}
 801f8b2:	e007      	b.n	801f8c4 <read_conn+0x41c>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 801f8b4:	68bb      	ldr	r3, [r7, #8]
 801f8b6:	330c      	adds	r3, #12
 801f8b8:	461a      	mov	r2, r3
 801f8ba:	2107      	movs	r1, #7
 801f8bc:	68f8      	ldr	r0, [r7, #12]
 801f8be:	f7f5 fed7 	bl	8015670 <mg_call>
}
 801f8c2:	e7ff      	b.n	801f8c4 <read_conn+0x41c>
 801f8c4:	bf00      	nop
 801f8c6:	3728      	adds	r7, #40	@ 0x28
 801f8c8:	46bd      	mov	sp, r7
 801f8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8ce:	bf00      	nop
 801f8d0:	080329ac 	.word	0x080329ac

0801f8d4 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801f8d4:	b590      	push	{r4, r7, lr}
 801f8d6:	b089      	sub	sp, #36	@ 0x24
 801f8d8:	af02      	add	r7, sp, #8
 801f8da:	6078      	str	r0, [r7, #4]
 801f8dc:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f8e2:	2200      	movs	r2, #0
 801f8e4:	6839      	ldr	r1, [r7, #0]
 801f8e6:	4618      	mov	r0, r3
 801f8e8:	f7fe fcba 	bl	801e260 <getpeer>
 801f8ec:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 801f8ee:	697b      	ldr	r3, [r7, #20]
 801f8f0:	2b00      	cmp	r3, #0
 801f8f2:	d002      	beq.n	801f8fa <rx_tcp+0x26>
 801f8f4:	697b      	ldr	r3, [r7, #20]
 801f8f6:	33b0      	adds	r3, #176	@ 0xb0
 801f8f8:	e000      	b.n	801f8fc <rx_tcp+0x28>
 801f8fa:	2300      	movs	r3, #0
 801f8fc:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 801f8fe:	697b      	ldr	r3, [r7, #20]
 801f900:	2b00      	cmp	r3, #0
 801f902:	d048      	beq.n	801f996 <rx_tcp+0xc2>
 801f904:	697b      	ldr	r3, [r7, #20]
 801f906:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f90a:	f003 0320 	and.w	r3, r3, #32
 801f90e:	b2db      	uxtb	r3, r3
 801f910:	2b00      	cmp	r3, #0
 801f912:	d040      	beq.n	801f996 <rx_tcp+0xc2>
 801f914:	683b      	ldr	r3, [r7, #0]
 801f916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f918:	7b5b      	ldrb	r3, [r3, #13]
 801f91a:	2b12      	cmp	r3, #18
 801f91c:	d13b      	bne.n	801f996 <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 801f91e:	683b      	ldr	r3, [r7, #0]
 801f920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f922:	689b      	ldr	r3, [r3, #8]
 801f924:	4618      	mov	r0, r3
 801f926:	f002 ff17 	bl	8022758 <mg_ntohl>
 801f92a:	4602      	mov	r2, r0
 801f92c:	693b      	ldr	r3, [r7, #16]
 801f92e:	601a      	str	r2, [r3, #0]
 801f930:	683b      	ldr	r3, [r7, #0]
 801f932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f934:	685b      	ldr	r3, [r3, #4]
 801f936:	4618      	mov	r0, r3
 801f938:	f002 ff0e 	bl	8022758 <mg_ntohl>
 801f93c:	4603      	mov	r3, r0
 801f93e:	1c5a      	adds	r2, r3, #1
 801f940:	693b      	ldr	r3, [r7, #16]
 801f942:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 801f944:	683b      	ldr	r3, [r7, #0]
 801f946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f948:	689b      	ldr	r3, [r3, #8]
 801f94a:	2200      	movs	r2, #0
 801f94c:	9201      	str	r2, [sp, #4]
 801f94e:	2200      	movs	r2, #0
 801f950:	9200      	str	r2, [sp, #0]
 801f952:	2210      	movs	r2, #16
 801f954:	6839      	ldr	r1, [r7, #0]
 801f956:	6878      	ldr	r0, [r7, #4]
 801f958:	f7ff fb6e 	bl	801f038 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 801f95c:	697a      	ldr	r2, [r7, #20]
 801f95e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801f962:	f36f 1345 	bfc	r3, #5, #1
 801f966:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 801f96a:	2100      	movs	r1, #0
 801f96c:	6978      	ldr	r0, [r7, #20]
 801f96e:	f7fe f8d9 	bl	801db24 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 801f972:	2200      	movs	r2, #0
 801f974:	2104      	movs	r1, #4
 801f976:	6978      	ldr	r0, [r7, #20]
 801f978:	f7f5 fe7a 	bl	8015670 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 801f97c:	697b      	ldr	r3, [r7, #20]
 801f97e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f982:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801f986:	b2db      	uxtb	r3, r3
 801f988:	2b00      	cmp	r3, #0
 801f98a:	f000 80cd 	beq.w	801fb28 <rx_tcp+0x254>
 801f98e:	6978      	ldr	r0, [r7, #20]
 801f990:	f002 fca6 	bl	80222e0 <mg_tls_handshake>
 801f994:	e0c8      	b.n	801fb28 <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 801f996:	697b      	ldr	r3, [r7, #20]
 801f998:	2b00      	cmp	r3, #0
 801f99a:	d019      	beq.n	801f9d0 <rx_tcp+0xfc>
 801f99c:	697b      	ldr	r3, [r7, #20]
 801f99e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f9a2:	f003 0320 	and.w	r3, r3, #32
 801f9a6:	b2db      	uxtb	r3, r3
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	d011      	beq.n	801f9d0 <rx_tcp+0xfc>
 801f9ac:	683b      	ldr	r3, [r7, #0]
 801f9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f9b0:	7b5b      	ldrb	r3, [r3, #13]
 801f9b2:	2b10      	cmp	r3, #16
 801f9b4:	d00c      	beq.n	801f9d0 <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801f9b6:	683b      	ldr	r3, [r7, #0]
 801f9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f9ba:	689b      	ldr	r3, [r3, #8]
 801f9bc:	2200      	movs	r2, #0
 801f9be:	9201      	str	r2, [sp, #4]
 801f9c0:	2200      	movs	r2, #0
 801f9c2:	9200      	str	r2, [sp, #0]
 801f9c4:	2214      	movs	r2, #20
 801f9c6:	6839      	ldr	r1, [r7, #0]
 801f9c8:	6878      	ldr	r0, [r7, #4]
 801f9ca:	f7ff fb35 	bl	801f038 <tx_tcp_pkt>
 801f9ce:	e0ab      	b.n	801fb28 <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 801f9d0:	697b      	ldr	r3, [r7, #20]
 801f9d2:	2b00      	cmp	r3, #0
 801f9d4:	d00b      	beq.n	801f9ee <rx_tcp+0x11a>
 801f9d6:	683b      	ldr	r3, [r7, #0]
 801f9d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f9da:	7b5b      	ldrb	r3, [r3, #13]
 801f9dc:	f003 0304 	and.w	r3, r3, #4
 801f9e0:	2b00      	cmp	r3, #0
 801f9e2:	d004      	beq.n	801f9ee <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 801f9e4:	4952      	ldr	r1, [pc, #328]	@ (801fb30 <rx_tcp+0x25c>)
 801f9e6:	6978      	ldr	r0, [r7, #20]
 801f9e8:	f7f5 fe62 	bl	80156b0 <mg_error>
 801f9ec:	e09c      	b.n	801fb28 <rx_tcp+0x254>
  } else if (c != NULL) {
 801f9ee:	697b      	ldr	r3, [r7, #20]
 801f9f0:	2b00      	cmp	r3, #0
 801f9f2:	d00f      	beq.n	801fa14 <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 801f9f4:	693b      	ldr	r3, [r7, #16]
 801f9f6:	2200      	movs	r2, #0
 801f9f8:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 801f9fa:	693b      	ldr	r3, [r7, #16]
 801f9fc:	7f9b      	ldrb	r3, [r3, #30]
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	d103      	bne.n	801fa0a <rx_tcp+0x136>
      settmout(c,
 801fa02:	2100      	movs	r1, #0
 801fa04:	6978      	ldr	r0, [r7, #20]
 801fa06:	f7fe f88d 	bl	801db24 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 801fa0a:	6839      	ldr	r1, [r7, #0]
 801fa0c:	6978      	ldr	r0, [r7, #20]
 801fa0e:	f7ff fd4b 	bl	801f4a8 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 801fa12:	e089      	b.n	801fb28 <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 801fa14:	687b      	ldr	r3, [r7, #4]
 801fa16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fa18:	2201      	movs	r2, #1
 801fa1a:	6839      	ldr	r1, [r7, #0]
 801fa1c:	4618      	mov	r0, r3
 801fa1e:	f7fe fc1f 	bl	801e260 <getpeer>
 801fa22:	6178      	str	r0, [r7, #20]
 801fa24:	697b      	ldr	r3, [r7, #20]
 801fa26:	2b00      	cmp	r3, #0
 801fa28:	d10c      	bne.n	801fa44 <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801fa2a:	683b      	ldr	r3, [r7, #0]
 801fa2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa2e:	689b      	ldr	r3, [r3, #8]
 801fa30:	2200      	movs	r2, #0
 801fa32:	9201      	str	r2, [sp, #4]
 801fa34:	2200      	movs	r2, #0
 801fa36:	9200      	str	r2, [sp, #0]
 801fa38:	2214      	movs	r2, #20
 801fa3a:	6839      	ldr	r1, [r7, #0]
 801fa3c:	6878      	ldr	r0, [r7, #4]
 801fa3e:	f7ff fafb 	bl	801f038 <tx_tcp_pkt>
}
 801fa42:	e071      	b.n	801fb28 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 801fa44:	683b      	ldr	r3, [r7, #0]
 801fa46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa48:	7b5b      	ldrb	r3, [r3, #13]
 801fa4a:	f003 0304 	and.w	r3, r3, #4
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	d00c      	beq.n	801fa6c <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 801fa52:	697b      	ldr	r3, [r7, #20]
 801fa54:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fa58:	f003 0304 	and.w	r3, r3, #4
 801fa5c:	b2db      	uxtb	r3, r3
 801fa5e:	2b00      	cmp	r3, #0
 801fa60:	d062      	beq.n	801fb28 <rx_tcp+0x254>
 801fa62:	4933      	ldr	r1, [pc, #204]	@ (801fb30 <rx_tcp+0x25c>)
 801fa64:	6978      	ldr	r0, [r7, #20]
 801fa66:	f7f5 fe23 	bl	80156b0 <mg_error>
}
 801fa6a:	e05d      	b.n	801fb28 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 801fa6c:	683b      	ldr	r3, [r7, #0]
 801fa6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa70:	7b5b      	ldrb	r3, [r3, #13]
 801fa72:	f003 0302 	and.w	r3, r3, #2
 801fa76:	2b00      	cmp	r3, #0
 801fa78:	d016      	beq.n	801faa8 <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 801fa7a:	683b      	ldr	r3, [r7, #0]
 801fa7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa7e:	881b      	ldrh	r3, [r3, #0]
 801fa80:	b29b      	uxth	r3, r3
 801fa82:	4618      	mov	r0, r3
 801fa84:	f002 fe81 	bl	802278a <mg_ntohs>
 801fa88:	4603      	mov	r3, r0
 801fa8a:	4618      	mov	r0, r3
 801fa8c:	f002 fe64 	bl	8022758 <mg_ntohl>
 801fa90:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 801fa92:	2300      	movs	r3, #0
 801fa94:	9301      	str	r3, [sp, #4]
 801fa96:	2300      	movs	r3, #0
 801fa98:	9300      	str	r3, [sp, #0]
 801fa9a:	68fb      	ldr	r3, [r7, #12]
 801fa9c:	2212      	movs	r2, #18
 801fa9e:	6839      	ldr	r1, [r7, #0]
 801faa0:	6878      	ldr	r0, [r7, #4]
 801faa2:	f7ff fac9 	bl	801f038 <tx_tcp_pkt>
}
 801faa6:	e03f      	b.n	801fb28 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 801faa8:	683b      	ldr	r3, [r7, #0]
 801faaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801faac:	7b5b      	ldrb	r3, [r3, #13]
 801faae:	f003 0301 	and.w	r3, r3, #1
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	d00c      	beq.n	801fad0 <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 801fab6:	683b      	ldr	r3, [r7, #0]
 801fab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801faba:	689b      	ldr	r3, [r3, #8]
 801fabc:	2200      	movs	r2, #0
 801fabe:	9201      	str	r2, [sp, #4]
 801fac0:	2200      	movs	r2, #0
 801fac2:	9200      	str	r2, [sp, #0]
 801fac4:	2211      	movs	r2, #17
 801fac6:	6839      	ldr	r1, [r7, #0]
 801fac8:	6878      	ldr	r0, [r7, #4]
 801faca:	f7ff fab5 	bl	801f038 <tx_tcp_pkt>
}
 801face:	e02b      	b.n	801fb28 <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 801fad0:	683b      	ldr	r3, [r7, #0]
 801fad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fad4:	689b      	ldr	r3, [r3, #8]
 801fad6:	4618      	mov	r0, r3
 801fad8:	f002 fe3e 	bl	8022758 <mg_ntohl>
 801fadc:	4604      	mov	r4, r0
 801fade:	683b      	ldr	r3, [r7, #0]
 801fae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fae2:	881b      	ldrh	r3, [r3, #0]
 801fae4:	b29b      	uxth	r3, r3
 801fae6:	4618      	mov	r0, r3
 801fae8:	f002 fe4f 	bl	802278a <mg_ntohs>
 801faec:	4603      	mov	r3, r0
 801faee:	3301      	adds	r3, #1
 801faf0:	429c      	cmp	r4, r3
 801faf2:	d104      	bne.n	801fafe <rx_tcp+0x22a>
    accept_conn(c, pkt);
 801faf4:	6839      	ldr	r1, [r7, #0]
 801faf6:	6978      	ldr	r0, [r7, #20]
 801faf8:	f7ff fae4 	bl	801f0c4 <accept_conn>
}
 801fafc:	e014      	b.n	801fb28 <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 801fafe:	697b      	ldr	r3, [r7, #20]
 801fb00:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fb04:	f003 0304 	and.w	r3, r3, #4
 801fb08:	b2db      	uxtb	r3, r3
 801fb0a:	2b00      	cmp	r3, #0
 801fb0c:	d10c      	bne.n	801fb28 <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801fb0e:	683b      	ldr	r3, [r7, #0]
 801fb10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fb12:	689b      	ldr	r3, [r3, #8]
 801fb14:	2200      	movs	r2, #0
 801fb16:	9201      	str	r2, [sp, #4]
 801fb18:	2200      	movs	r2, #0
 801fb1a:	9200      	str	r2, [sp, #0]
 801fb1c:	2214      	movs	r2, #20
 801fb1e:	6839      	ldr	r1, [r7, #0]
 801fb20:	6878      	ldr	r0, [r7, #4]
 801fb22:	f7ff fa89 	bl	801f038 <tx_tcp_pkt>
}
 801fb26:	e7ff      	b.n	801fb28 <rx_tcp+0x254>
 801fb28:	bf00      	nop
 801fb2a:	371c      	adds	r7, #28
 801fb2c:	46bd      	mov	sp, r7
 801fb2e:	bd90      	pop	{r4, r7, pc}
 801fb30:	08032aa0 	.word	0x08032aa0

0801fb34 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801fb34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fb36:	b089      	sub	sp, #36	@ 0x24
 801fb38:	af04      	add	r7, sp, #16
 801fb3a:	6078      	str	r0, [r7, #4]
 801fb3c:	6039      	str	r1, [r7, #0]
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801fb3e:	683b      	ldr	r3, [r7, #0]
 801fb40:	69db      	ldr	r3, [r3, #28]
 801fb42:	88db      	ldrh	r3, [r3, #6]
 801fb44:	b29b      	uxth	r3, r3
 801fb46:	f003 0320 	and.w	r3, r3, #32
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	d109      	bne.n	801fb62 <rx_ip+0x2e>
 801fb4e:	683b      	ldr	r3, [r7, #0]
 801fb50:	69db      	ldr	r3, [r3, #28]
 801fb52:	88db      	ldrh	r3, [r3, #6]
 801fb54:	b29b      	uxth	r3, r3
 801fb56:	461a      	mov	r2, r3
 801fb58:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 801fb5c:	4013      	ands	r3, r2
 801fb5e:	2b00      	cmp	r3, #0
 801fb60:	d026      	beq.n	801fbb0 <rx_ip+0x7c>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 801fb62:	683b      	ldr	r3, [r7, #0]
 801fb64:	69db      	ldr	r3, [r3, #28]
 801fb66:	7a5b      	ldrb	r3, [r3, #9]
 801fb68:	2b11      	cmp	r3, #17
 801fb6a:	d105      	bne.n	801fb78 <rx_ip+0x44>
 801fb6c:	683b      	ldr	r3, [r7, #0]
 801fb6e:	69db      	ldr	r3, [r3, #28]
 801fb70:	f103 0214 	add.w	r2, r3, #20
 801fb74:	683b      	ldr	r3, [r7, #0]
 801fb76:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 801fb78:	683b      	ldr	r3, [r7, #0]
 801fb7a:	69db      	ldr	r3, [r3, #28]
 801fb7c:	7a5b      	ldrb	r3, [r3, #9]
 801fb7e:	2b06      	cmp	r3, #6
 801fb80:	d105      	bne.n	801fb8e <rx_ip+0x5a>
 801fb82:	683b      	ldr	r3, [r7, #0]
 801fb84:	69db      	ldr	r3, [r3, #28]
 801fb86:	f103 0214 	add.w	r2, r3, #20
 801fb8a:	683b      	ldr	r3, [r7, #0]
 801fb8c:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801fb8e:	687b      	ldr	r3, [r7, #4]
 801fb90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fb92:	2200      	movs	r2, #0
 801fb94:	6839      	ldr	r1, [r7, #0]
 801fb96:	4618      	mov	r0, r3
 801fb98:	f7fe fb62 	bl	801e260 <getpeer>
 801fb9c:	60b8      	str	r0, [r7, #8]
    if (c) mg_error(c, "Received fragmented packet");
 801fb9e:	68bb      	ldr	r3, [r7, #8]
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	f000 811b 	beq.w	801fddc <rx_ip+0x2a8>
 801fba6:	4992      	ldr	r1, [pc, #584]	@ (801fdf0 <rx_ip+0x2bc>)
 801fba8:	68b8      	ldr	r0, [r7, #8]
 801fbaa:	f7f5 fd81 	bl	80156b0 <mg_error>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801fbae:	e115      	b.n	801fddc <rx_ip+0x2a8>
  } else if (pkt->ip->proto == 1) {
 801fbb0:	683b      	ldr	r3, [r7, #0]
 801fbb2:	69db      	ldr	r3, [r3, #28]
 801fbb4:	7a5b      	ldrb	r3, [r3, #9]
 801fbb6:	2b01      	cmp	r3, #1
 801fbb8:	d116      	bne.n	801fbe8 <rx_ip+0xb4>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 801fbba:	683b      	ldr	r3, [r7, #0]
 801fbbc:	69db      	ldr	r3, [r3, #28]
 801fbbe:	f103 0214 	add.w	r2, r3, #20
 801fbc2:	683b      	ldr	r3, [r7, #0]
 801fbc4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801fbc6:	683b      	ldr	r3, [r7, #0]
 801fbc8:	68db      	ldr	r3, [r3, #12]
 801fbca:	2b03      	cmp	r3, #3
 801fbcc:	f240 8108 	bls.w	801fde0 <rx_ip+0x2ac>
    mkpay(pkt, pkt->icmp + 1);
 801fbd0:	683b      	ldr	r3, [r7, #0]
 801fbd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fbd4:	3304      	adds	r3, #4
 801fbd6:	4619      	mov	r1, r3
 801fbd8:	6838      	ldr	r0, [r7, #0]
 801fbda:	f7fd ff2b 	bl	801da34 <mkpay>
    rx_icmp(ifp, pkt);
 801fbde:	6839      	ldr	r1, [r7, #0]
 801fbe0:	6878      	ldr	r0, [r7, #4]
 801fbe2:	f7fe fcb9 	bl	801e558 <rx_icmp>
 801fbe6:	e100      	b.n	801fdea <rx_ip+0x2b6>
  } else if (pkt->ip->proto == 17) {
 801fbe8:	683b      	ldr	r3, [r7, #0]
 801fbea:	69db      	ldr	r3, [r3, #28]
 801fbec:	7a5b      	ldrb	r3, [r3, #9]
 801fbee:	2b11      	cmp	r3, #17
 801fbf0:	f040 808b 	bne.w	801fd0a <rx_ip+0x1d6>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 801fbf4:	683b      	ldr	r3, [r7, #0]
 801fbf6:	69db      	ldr	r3, [r3, #28]
 801fbf8:	f103 0214 	add.w	r2, r3, #20
 801fbfc:	683b      	ldr	r3, [r7, #0]
 801fbfe:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801fc00:	683b      	ldr	r3, [r7, #0]
 801fc02:	68db      	ldr	r3, [r3, #12]
 801fc04:	2b07      	cmp	r3, #7
 801fc06:	f240 80ed 	bls.w	801fde4 <rx_ip+0x2b0>
    mkpay(pkt, pkt->udp + 1);
 801fc0a:	683b      	ldr	r3, [r7, #0]
 801fc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc0e:	3308      	adds	r3, #8
 801fc10:	4619      	mov	r1, r3
 801fc12:	6838      	ldr	r0, [r7, #0]
 801fc14:	f7fd ff0e 	bl	801da34 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 801fc18:	4b76      	ldr	r3, [pc, #472]	@ (801fdf4 <rx_ip+0x2c0>)
 801fc1a:	681b      	ldr	r3, [r3, #0]
 801fc1c:	2b03      	cmp	r3, #3
 801fc1e:	dd2d      	ble.n	801fc7c <rx_ip+0x148>
 801fc20:	4b75      	ldr	r3, [pc, #468]	@ (801fdf8 <rx_ip+0x2c4>)
 801fc22:	f241 6255 	movw	r2, #5717	@ 0x1655
 801fc26:	4975      	ldr	r1, [pc, #468]	@ (801fdfc <rx_ip+0x2c8>)
 801fc28:	2004      	movs	r0, #4
 801fc2a:	f7fb f907 	bl	801ae3c <mg_log_prefix>
 801fc2e:	683b      	ldr	r3, [r7, #0]
 801fc30:	69db      	ldr	r3, [r3, #28]
 801fc32:	f103 050c 	add.w	r5, r3, #12
 801fc36:	683b      	ldr	r3, [r7, #0]
 801fc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc3a:	881b      	ldrh	r3, [r3, #0]
 801fc3c:	b29b      	uxth	r3, r3
 801fc3e:	4618      	mov	r0, r3
 801fc40:	f002 fda3 	bl	802278a <mg_ntohs>
 801fc44:	4603      	mov	r3, r0
 801fc46:	461e      	mov	r6, r3
 801fc48:	683b      	ldr	r3, [r7, #0]
 801fc4a:	69db      	ldr	r3, [r3, #28]
 801fc4c:	f103 0410 	add.w	r4, r3, #16
 801fc50:	683b      	ldr	r3, [r7, #0]
 801fc52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc54:	885b      	ldrh	r3, [r3, #2]
 801fc56:	b29b      	uxth	r3, r3
 801fc58:	4618      	mov	r0, r3
 801fc5a:	f002 fd96 	bl	802278a <mg_ntohs>
 801fc5e:	4603      	mov	r3, r0
 801fc60:	461a      	mov	r2, r3
 801fc62:	683b      	ldr	r3, [r7, #0]
 801fc64:	68db      	ldr	r3, [r3, #12]
 801fc66:	9303      	str	r3, [sp, #12]
 801fc68:	9202      	str	r2, [sp, #8]
 801fc6a:	9401      	str	r4, [sp, #4]
 801fc6c:	4b64      	ldr	r3, [pc, #400]	@ (801fe00 <rx_ip+0x2cc>)
 801fc6e:	9300      	str	r3, [sp, #0]
 801fc70:	4633      	mov	r3, r6
 801fc72:	462a      	mov	r2, r5
 801fc74:	4962      	ldr	r1, [pc, #392]	@ (801fe00 <rx_ip+0x2cc>)
 801fc76:	4863      	ldr	r0, [pc, #396]	@ (801fe04 <rx_ip+0x2d0>)
 801fc78:	f7fb f930 	bl	801aedc <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 801fc7c:	687b      	ldr	r3, [r7, #4]
 801fc7e:	7f1b      	ldrb	r3, [r3, #28]
 801fc80:	2b00      	cmp	r3, #0
 801fc82:	d01c      	beq.n	801fcbe <rx_ip+0x18a>
 801fc84:	683b      	ldr	r3, [r7, #0]
 801fc86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc88:	885b      	ldrh	r3, [r3, #2]
 801fc8a:	b29c      	uxth	r4, r3
 801fc8c:	2044      	movs	r0, #68	@ 0x44
 801fc8e:	f002 fd7c 	bl	802278a <mg_ntohs>
 801fc92:	4603      	mov	r3, r0
 801fc94:	429c      	cmp	r4, r3
 801fc96:	d112      	bne.n	801fcbe <rx_ip+0x18a>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 801fc98:	683b      	ldr	r3, [r7, #0]
 801fc9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc9c:	f103 0208 	add.w	r2, r3, #8
 801fca0:	683b      	ldr	r3, [r7, #0]
 801fca2:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 801fca4:	683b      	ldr	r3, [r7, #0]
 801fca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fca8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801fcac:	4619      	mov	r1, r3
 801fcae:	6838      	ldr	r0, [r7, #0]
 801fcb0:	f7fd fec0 	bl	801da34 <mkpay>
      rx_dhcp_client(ifp, pkt);
 801fcb4:	6839      	ldr	r1, [r7, #0]
 801fcb6:	6878      	ldr	r0, [r7, #4]
 801fcb8:	f7fe fcaa 	bl	801e610 <rx_dhcp_client>
 801fcbc:	e095      	b.n	801fdea <rx_ip+0x2b6>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 801fcbe:	687b      	ldr	r3, [r7, #4]
 801fcc0:	7f5b      	ldrb	r3, [r3, #29]
 801fcc2:	2b00      	cmp	r3, #0
 801fcc4:	d01c      	beq.n	801fd00 <rx_ip+0x1cc>
 801fcc6:	683b      	ldr	r3, [r7, #0]
 801fcc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fcca:	885b      	ldrh	r3, [r3, #2]
 801fccc:	b29c      	uxth	r4, r3
 801fcce:	2043      	movs	r0, #67	@ 0x43
 801fcd0:	f002 fd5b 	bl	802278a <mg_ntohs>
 801fcd4:	4603      	mov	r3, r0
 801fcd6:	429c      	cmp	r4, r3
 801fcd8:	d112      	bne.n	801fd00 <rx_ip+0x1cc>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 801fcda:	683b      	ldr	r3, [r7, #0]
 801fcdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fcde:	f103 0208 	add.w	r2, r3, #8
 801fce2:	683b      	ldr	r3, [r7, #0]
 801fce4:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 801fce6:	683b      	ldr	r3, [r7, #0]
 801fce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fcea:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801fcee:	4619      	mov	r1, r3
 801fcf0:	6838      	ldr	r0, [r7, #0]
 801fcf2:	f7fd fe9f 	bl	801da34 <mkpay>
      rx_dhcp_server(ifp, pkt);
 801fcf6:	6839      	ldr	r1, [r7, #0]
 801fcf8:	6878      	ldr	r0, [r7, #4]
 801fcfa:	f7fe fe71 	bl	801e9e0 <rx_dhcp_server>
 801fcfe:	e074      	b.n	801fdea <rx_ip+0x2b6>
    } else {
      rx_udp(ifp, pkt);
 801fd00:	6839      	ldr	r1, [r7, #0]
 801fd02:	6878      	ldr	r0, [r7, #4]
 801fd04:	f7ff f85a 	bl	801edbc <rx_udp>
 801fd08:	e06f      	b.n	801fdea <rx_ip+0x2b6>
    }
  } else if (pkt->ip->proto == 6) {
 801fd0a:	683b      	ldr	r3, [r7, #0]
 801fd0c:	69db      	ldr	r3, [r3, #28]
 801fd0e:	7a5b      	ldrb	r3, [r3, #9]
 801fd10:	2b06      	cmp	r3, #6
 801fd12:	d16a      	bne.n	801fdea <rx_ip+0x2b6>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 801fd14:	683b      	ldr	r3, [r7, #0]
 801fd16:	69db      	ldr	r3, [r3, #28]
 801fd18:	f103 0214 	add.w	r2, r3, #20
 801fd1c:	683b      	ldr	r3, [r7, #0]
 801fd1e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 801fd20:	683b      	ldr	r3, [r7, #0]
 801fd22:	68db      	ldr	r3, [r3, #12]
 801fd24:	2b13      	cmp	r3, #19
 801fd26:	d95f      	bls.n	801fde8 <rx_ip+0x2b4>
    mkpay(pkt, pkt->tcp + 1);
 801fd28:	683b      	ldr	r3, [r7, #0]
 801fd2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd2c:	3314      	adds	r3, #20
 801fd2e:	4619      	mov	r1, r3
 801fd30:	6838      	ldr	r0, [r7, #0]
 801fd32:	f7fd fe7f 	bl	801da34 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 801fd36:	683b      	ldr	r3, [r7, #0]
 801fd38:	69db      	ldr	r3, [r3, #28]
 801fd3a:	885b      	ldrh	r3, [r3, #2]
 801fd3c:	b29b      	uxth	r3, r3
 801fd3e:	4618      	mov	r0, r3
 801fd40:	f002 fd23 	bl	802278a <mg_ntohs>
 801fd44:	4603      	mov	r3, r0
 801fd46:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 801fd48:	683b      	ldr	r3, [r7, #0]
 801fd4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd4c:	7b1b      	ldrb	r3, [r3, #12]
 801fd4e:	091b      	lsrs	r3, r3, #4
 801fd50:	b2db      	uxtb	r3, r3
 801fd52:	3305      	adds	r3, #5
 801fd54:	b29b      	uxth	r3, r3
 801fd56:	009b      	lsls	r3, r3, #2
 801fd58:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 801fd5a:	89fa      	ldrh	r2, [r7, #14]
 801fd5c:	89bb      	ldrh	r3, [r7, #12]
 801fd5e:	429a      	cmp	r2, r3
 801fd60:	d305      	bcc.n	801fd6e <rx_ip+0x23a>
 801fd62:	89fa      	ldrh	r2, [r7, #14]
 801fd64:	89bb      	ldrh	r3, [r7, #12]
 801fd66:	1ad3      	subs	r3, r2, r3
 801fd68:	461a      	mov	r2, r3
 801fd6a:	683b      	ldr	r3, [r7, #0]
 801fd6c:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 801fd6e:	4b21      	ldr	r3, [pc, #132]	@ (801fdf4 <rx_ip+0x2c0>)
 801fd70:	681b      	ldr	r3, [r3, #0]
 801fd72:	2b03      	cmp	r3, #3
 801fd74:	dd2d      	ble.n	801fdd2 <rx_ip+0x29e>
 801fd76:	4b20      	ldr	r3, [pc, #128]	@ (801fdf8 <rx_ip+0x2c4>)
 801fd78:	f241 626a 	movw	r2, #5738	@ 0x166a
 801fd7c:	491f      	ldr	r1, [pc, #124]	@ (801fdfc <rx_ip+0x2c8>)
 801fd7e:	2004      	movs	r0, #4
 801fd80:	f7fb f85c 	bl	801ae3c <mg_log_prefix>
 801fd84:	683b      	ldr	r3, [r7, #0]
 801fd86:	69db      	ldr	r3, [r3, #28]
 801fd88:	f103 050c 	add.w	r5, r3, #12
 801fd8c:	683b      	ldr	r3, [r7, #0]
 801fd8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd90:	881b      	ldrh	r3, [r3, #0]
 801fd92:	b29b      	uxth	r3, r3
 801fd94:	4618      	mov	r0, r3
 801fd96:	f002 fcf8 	bl	802278a <mg_ntohs>
 801fd9a:	4603      	mov	r3, r0
 801fd9c:	461e      	mov	r6, r3
 801fd9e:	683b      	ldr	r3, [r7, #0]
 801fda0:	69db      	ldr	r3, [r3, #28]
 801fda2:	f103 0410 	add.w	r4, r3, #16
 801fda6:	683b      	ldr	r3, [r7, #0]
 801fda8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fdaa:	885b      	ldrh	r3, [r3, #2]
 801fdac:	b29b      	uxth	r3, r3
 801fdae:	4618      	mov	r0, r3
 801fdb0:	f002 fceb 	bl	802278a <mg_ntohs>
 801fdb4:	4603      	mov	r3, r0
 801fdb6:	461a      	mov	r2, r3
 801fdb8:	683b      	ldr	r3, [r7, #0]
 801fdba:	68db      	ldr	r3, [r3, #12]
 801fdbc:	9303      	str	r3, [sp, #12]
 801fdbe:	9202      	str	r2, [sp, #8]
 801fdc0:	9401      	str	r4, [sp, #4]
 801fdc2:	4b0f      	ldr	r3, [pc, #60]	@ (801fe00 <rx_ip+0x2cc>)
 801fdc4:	9300      	str	r3, [sp, #0]
 801fdc6:	4633      	mov	r3, r6
 801fdc8:	462a      	mov	r2, r5
 801fdca:	490d      	ldr	r1, [pc, #52]	@ (801fe00 <rx_ip+0x2cc>)
 801fdcc:	480e      	ldr	r0, [pc, #56]	@ (801fe08 <rx_ip+0x2d4>)
 801fdce:	f7fb f885 	bl	801aedc <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 801fdd2:	6839      	ldr	r1, [r7, #0]
 801fdd4:	6878      	ldr	r0, [r7, #4]
 801fdd6:	f7ff fd7d 	bl	801f8d4 <rx_tcp>
 801fdda:	e006      	b.n	801fdea <rx_ip+0x2b6>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801fddc:	bf00      	nop
 801fdde:	e004      	b.n	801fdea <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801fde0:	bf00      	nop
 801fde2:	e002      	b.n	801fdea <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801fde4:	bf00      	nop
 801fde6:	e000      	b.n	801fdea <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 801fde8:	bf00      	nop
  }
}
 801fdea:	3714      	adds	r7, #20
 801fdec:	46bd      	mov	sp, r7
 801fdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fdf0:	08032aac 	.word	0x08032aac
 801fdf4:	20000298 	.word	0x20000298
 801fdf8:	08033f50 	.word	0x08033f50
 801fdfc:	080310c8 	.word	0x080310c8
 801fe00:	0802102d 	.word	0x0802102d
 801fe04:	08032ac8 	.word	0x08032ac8
 801fe08:	08032ae4 	.word	0x08032ae4

0801fe0c <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801fe0c:	b580      	push	{r7, lr}
 801fe0e:	b082      	sub	sp, #8
 801fe10:	af00      	add	r7, sp, #0
 801fe12:	6078      	str	r0, [r7, #4]
 801fe14:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 801fe16:	683b      	ldr	r3, [r7, #0]
 801fe18:	6a1b      	ldr	r3, [r3, #32]
 801fe1a:	799b      	ldrb	r3, [r3, #6]
 801fe1c:	2b01      	cmp	r3, #1
 801fe1e:	d004      	beq.n	801fe2a <rx_ip6+0x1e>
 801fe20:	683b      	ldr	r3, [r7, #0]
 801fe22:	6a1b      	ldr	r3, [r3, #32]
 801fe24:	799b      	ldrb	r3, [r3, #6]
 801fe26:	2b3a      	cmp	r3, #58	@ 0x3a
 801fe28:	d115      	bne.n	801fe56 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 801fe2a:	683b      	ldr	r3, [r7, #0]
 801fe2c:	6a1b      	ldr	r3, [r3, #32]
 801fe2e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801fe32:	683b      	ldr	r3, [r7, #0]
 801fe34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801fe36:	683b      	ldr	r3, [r7, #0]
 801fe38:	68db      	ldr	r3, [r3, #12]
 801fe3a:	2b03      	cmp	r3, #3
 801fe3c:	d922      	bls.n	801fe84 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 801fe3e:	683b      	ldr	r3, [r7, #0]
 801fe40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fe42:	3304      	adds	r3, #4
 801fe44:	4619      	mov	r1, r3
 801fe46:	6838      	ldr	r0, [r7, #0]
 801fe48:	f7fd fdf4 	bl	801da34 <mkpay>
    rx_icmp(ifp, pkt);
 801fe4c:	6839      	ldr	r1, [r7, #0]
 801fe4e:	6878      	ldr	r0, [r7, #4]
 801fe50:	f7fe fb82 	bl	801e558 <rx_icmp>
 801fe54:	e019      	b.n	801fe8a <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 801fe56:	683b      	ldr	r3, [r7, #0]
 801fe58:	6a1b      	ldr	r3, [r3, #32]
 801fe5a:	799b      	ldrb	r3, [r3, #6]
 801fe5c:	2b11      	cmp	r3, #17
 801fe5e:	d114      	bne.n	801fe8a <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 801fe60:	683b      	ldr	r3, [r7, #0]
 801fe62:	6a1b      	ldr	r3, [r3, #32]
 801fe64:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801fe68:	683b      	ldr	r3, [r7, #0]
 801fe6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801fe6c:	683b      	ldr	r3, [r7, #0]
 801fe6e:	68db      	ldr	r3, [r3, #12]
 801fe70:	2b07      	cmp	r3, #7
 801fe72:	d909      	bls.n	801fe88 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 801fe74:	683b      	ldr	r3, [r7, #0]
 801fe76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fe78:	3308      	adds	r3, #8
 801fe7a:	4619      	mov	r1, r3
 801fe7c:	6838      	ldr	r0, [r7, #0]
 801fe7e:	f7fd fdd9 	bl	801da34 <mkpay>
 801fe82:	e002      	b.n	801fe8a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801fe84:	bf00      	nop
 801fe86:	e000      	b.n	801fe8a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801fe88:	bf00      	nop
  }
}
 801fe8a:	3708      	adds	r7, #8
 801fe8c:	46bd      	mov	sp, r7
 801fe8e:	bd80      	pop	{r7, pc}

0801fe90 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 801fe90:	b590      	push	{r4, r7, lr}
 801fe92:	b093      	sub	sp, #76	@ 0x4c
 801fe94:	af00      	add	r7, sp, #0
 801fe96:	60f8      	str	r0, [r7, #12]
 801fe98:	60b9      	str	r1, [r7, #8]
 801fe9a:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 801fe9c:	f107 0314 	add.w	r3, r7, #20
 801fea0:	2234      	movs	r2, #52	@ 0x34
 801fea2:	2100      	movs	r1, #0
 801fea4:	4618      	mov	r0, r3
 801fea6:	f005 fdd3 	bl	8025a50 <memset>
  pkt.raw.buf = (char *) buf;
 801feaa:	68bb      	ldr	r3, [r7, #8]
 801feac:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 801feb2:	68bb      	ldr	r3, [r7, #8]
 801feb4:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 801feb6:	69bb      	ldr	r3, [r7, #24]
 801feb8:	2b0d      	cmp	r3, #13
 801feba:	f240 80d8 	bls.w	802006e <mg_tcpip_rx+0x1de>
  if (ifp->enable_mac_check &&
 801febe:	68fb      	ldr	r3, [r7, #12]
 801fec0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801fec4:	2b00      	cmp	r3, #0
 801fec6:	d013      	beq.n	801fef0 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 801fec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801feca:	4618      	mov	r0, r3
 801fecc:	68fb      	ldr	r3, [r7, #12]
 801fece:	2206      	movs	r2, #6
 801fed0:	4619      	mov	r1, r3
 801fed2:	f005 fd29 	bl	8025928 <memcmp>
 801fed6:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 801fed8:	2b00      	cmp	r3, #0
 801feda:	d009      	beq.n	801fef0 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 801fedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fede:	2206      	movs	r2, #6
 801fee0:	496d      	ldr	r1, [pc, #436]	@ (8020098 <mg_tcpip_rx+0x208>)
 801fee2:	4618      	mov	r0, r3
 801fee4:	f005 fd20 	bl	8025928 <memcmp>
 801fee8:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 801feea:	2b00      	cmp	r3, #0
 801feec:	f040 80c1 	bne.w	8020072 <mg_tcpip_rx+0x1e2>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 801fef0:	68fb      	ldr	r3, [r7, #12]
 801fef2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801fef6:	2b00      	cmp	r3, #0
 801fef8:	d01a      	beq.n	801ff30 <mg_tcpip_rx+0xa0>
 801fefa:	687b      	ldr	r3, [r7, #4]
 801fefc:	2b04      	cmp	r3, #4
 801fefe:	d917      	bls.n	801ff30 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 801ff00:	687b      	ldr	r3, [r7, #4]
 801ff02:	3b04      	subs	r3, #4
 801ff04:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 801ff06:	687a      	ldr	r2, [r7, #4]
 801ff08:	68b9      	ldr	r1, [r7, #8]
 801ff0a:	2000      	movs	r0, #0
 801ff0c:	f002 fc54 	bl	80227b8 <mg_crc32>
 801ff10:	4603      	mov	r3, r0
 801ff12:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 801ff14:	68ba      	ldr	r2, [r7, #8]
 801ff16:	687b      	ldr	r3, [r7, #4]
 801ff18:	4413      	add	r3, r2
 801ff1a:	4618      	mov	r0, r3
 801ff1c:	f107 0310 	add.w	r3, r7, #16
 801ff20:	2204      	movs	r2, #4
 801ff22:	4619      	mov	r1, r3
 801ff24:	f005 fd00 	bl	8025928 <memcmp>
 801ff28:	4603      	mov	r3, r0
 801ff2a:	2b00      	cmp	r3, #0
 801ff2c:	f040 80a3 	bne.w	8020076 <mg_tcpip_rx+0x1e6>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 801ff30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff32:	899b      	ldrh	r3, [r3, #12]
 801ff34:	b29c      	uxth	r4, r3
 801ff36:	f640 0006 	movw	r0, #2054	@ 0x806
 801ff3a:	f002 fc26 	bl	802278a <mg_ntohs>
 801ff3e:	4603      	mov	r3, r0
 801ff40:	429c      	cmp	r4, r3
 801ff42:	d10d      	bne.n	801ff60 <mg_tcpip_rx+0xd0>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 801ff44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff46:	330e      	adds	r3, #14
 801ff48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 801ff4a:	69bb      	ldr	r3, [r7, #24]
 801ff4c:	2b29      	cmp	r3, #41	@ 0x29
 801ff4e:	f240 8094 	bls.w	802007a <mg_tcpip_rx+0x1ea>
    rx_arp(ifp, &pkt);
 801ff52:	f107 0314 	add.w	r3, r7, #20
 801ff56:	4619      	mov	r1, r3
 801ff58:	68f8      	ldr	r0, [r7, #12]
 801ff5a:	f7fe f9f3 	bl	801e344 <rx_arp>
 801ff5e:	e097      	b.n	8020090 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 801ff60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff62:	899b      	ldrh	r3, [r3, #12]
 801ff64:	b29c      	uxth	r4, r3
 801ff66:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 801ff6a:	f002 fc0e 	bl	802278a <mg_ntohs>
 801ff6e:	4603      	mov	r3, r0
 801ff70:	429c      	cmp	r4, r3
 801ff72:	d11b      	bne.n	801ffac <mg_tcpip_rx+0x11c>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 801ff74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff76:	330e      	adds	r3, #14
 801ff78:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 801ff7a:	69bb      	ldr	r3, [r7, #24]
 801ff7c:	2b35      	cmp	r3, #53	@ 0x35
 801ff7e:	d97e      	bls.n	802007e <mg_tcpip_rx+0x1ee>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 801ff80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ff82:	781b      	ldrb	r3, [r3, #0]
 801ff84:	091b      	lsrs	r3, r3, #4
 801ff86:	b2db      	uxtb	r3, r3
 801ff88:	2b06      	cmp	r3, #6
 801ff8a:	d17a      	bne.n	8020082 <mg_tcpip_rx+0x1f2>
    mkpay(&pkt, pkt.ip6 + 1);
 801ff8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ff8e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801ff92:	f107 0314 	add.w	r3, r7, #20
 801ff96:	4611      	mov	r1, r2
 801ff98:	4618      	mov	r0, r3
 801ff9a:	f7fd fd4b 	bl	801da34 <mkpay>
    rx_ip6(ifp, &pkt);
 801ff9e:	f107 0314 	add.w	r3, r7, #20
 801ffa2:	4619      	mov	r1, r3
 801ffa4:	68f8      	ldr	r0, [r7, #12]
 801ffa6:	f7ff ff31 	bl	801fe0c <rx_ip6>
 801ffaa:	e071      	b.n	8020090 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 801ffac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffae:	899b      	ldrh	r3, [r3, #12]
 801ffb0:	b29c      	uxth	r4, r3
 801ffb2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801ffb6:	f002 fbe8 	bl	802278a <mg_ntohs>
 801ffba:	4603      	mov	r3, r0
 801ffbc:	429c      	cmp	r4, r3
 801ffbe:	d133      	bne.n	8020028 <mg_tcpip_rx+0x198>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 801ffc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffc2:	330e      	adds	r3, #14
 801ffc4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 801ffc6:	69bb      	ldr	r3, [r7, #24]
 801ffc8:	2b21      	cmp	r3, #33	@ 0x21
 801ffca:	d95c      	bls.n	8020086 <mg_tcpip_rx+0x1f6>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 801ffcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ffce:	885b      	ldrh	r3, [r3, #2]
 801ffd0:	b29b      	uxth	r3, r3
 801ffd2:	4618      	mov	r0, r3
 801ffd4:	f002 fbd9 	bl	802278a <mg_ntohs>
 801ffd8:	4603      	mov	r3, r0
 801ffda:	f103 020e 	add.w	r2, r3, #14
 801ffde:	69bb      	ldr	r3, [r7, #24]
 801ffe0:	429a      	cmp	r2, r3
 801ffe2:	d208      	bcs.n	801fff6 <mg_tcpip_rx+0x166>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 801ffe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ffe6:	885b      	ldrh	r3, [r3, #2]
 801ffe8:	b29b      	uxth	r3, r3
 801ffea:	4618      	mov	r0, r3
 801ffec:	f002 fbcd 	bl	802278a <mg_ntohs>
 801fff0:	4603      	mov	r3, r0
 801fff2:	330e      	adds	r3, #14
 801fff4:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 801fff6:	69bb      	ldr	r3, [r7, #24]
 801fff8:	2b21      	cmp	r3, #33	@ 0x21
 801fffa:	d946      	bls.n	802008a <mg_tcpip_rx+0x1fa>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 801fffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fffe:	781b      	ldrb	r3, [r3, #0]
 8020000:	091b      	lsrs	r3, r3, #4
 8020002:	b2db      	uxtb	r3, r3
 8020004:	2b04      	cmp	r3, #4
 8020006:	d142      	bne.n	802008e <mg_tcpip_rx+0x1fe>
    mkpay(&pkt, pkt.ip + 1);
 8020008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802000a:	f103 0214 	add.w	r2, r3, #20
 802000e:	f107 0314 	add.w	r3, r7, #20
 8020012:	4611      	mov	r1, r2
 8020014:	4618      	mov	r0, r3
 8020016:	f7fd fd0d 	bl	801da34 <mkpay>
    rx_ip(ifp, &pkt);
 802001a:	f107 0314 	add.w	r3, r7, #20
 802001e:	4619      	mov	r1, r3
 8020020:	68f8      	ldr	r0, [r7, #12]
 8020022:	f7ff fd87 	bl	801fb34 <rx_ip>
 8020026:	e033      	b.n	8020090 <mg_tcpip_rx+0x200>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8020028:	4b1c      	ldr	r3, [pc, #112]	@ (802009c <mg_tcpip_rx+0x20c>)
 802002a:	681b      	ldr	r3, [r3, #0]
 802002c:	2b02      	cmp	r3, #2
 802002e:	dd11      	ble.n	8020054 <mg_tcpip_rx+0x1c4>
 8020030:	4b1b      	ldr	r3, [pc, #108]	@ (80200a0 <mg_tcpip_rx+0x210>)
 8020032:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 8020036:	491b      	ldr	r1, [pc, #108]	@ (80200a4 <mg_tcpip_rx+0x214>)
 8020038:	2003      	movs	r0, #3
 802003a:	f7fa feff 	bl	801ae3c <mg_log_prefix>
 802003e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020040:	899b      	ldrh	r3, [r3, #12]
 8020042:	b29b      	uxth	r3, r3
 8020044:	4618      	mov	r0, r3
 8020046:	f002 fba0 	bl	802278a <mg_ntohs>
 802004a:	4603      	mov	r3, r0
 802004c:	4619      	mov	r1, r3
 802004e:	4816      	ldr	r0, [pc, #88]	@ (80200a8 <mg_tcpip_rx+0x218>)
 8020050:	f7fa ff44 	bl	801aedc <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8020054:	4b11      	ldr	r3, [pc, #68]	@ (802009c <mg_tcpip_rx+0x20c>)
 8020056:	681b      	ldr	r3, [r3, #0]
 8020058:	2b03      	cmp	r3, #3
 802005a:	dd19      	ble.n	8020090 <mg_tcpip_rx+0x200>
 802005c:	687b      	ldr	r3, [r7, #4]
 802005e:	2b20      	cmp	r3, #32
 8020060:	bf28      	it	cs
 8020062:	2320      	movcs	r3, #32
 8020064:	4619      	mov	r1, r3
 8020066:	68b8      	ldr	r0, [r7, #8]
 8020068:	f7fa ff6e 	bl	801af48 <mg_hexdump>
 802006c:	e010      	b.n	8020090 <mg_tcpip_rx+0x200>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 802006e:	bf00      	nop
 8020070:	e00e      	b.n	8020090 <mg_tcpip_rx+0x200>
    return;
 8020072:	bf00      	nop
 8020074:	e00c      	b.n	8020090 <mg_tcpip_rx+0x200>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8020076:	bf00      	nop
 8020078:	e00a      	b.n	8020090 <mg_tcpip_rx+0x200>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 802007a:	bf00      	nop
 802007c:	e008      	b.n	8020090 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 802007e:	bf00      	nop
 8020080:	e006      	b.n	8020090 <mg_tcpip_rx+0x200>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8020082:	bf00      	nop
 8020084:	e004      	b.n	8020090 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8020086:	bf00      	nop
 8020088:	e002      	b.n	8020090 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 802008a:	bf00      	nop
 802008c:	e000      	b.n	8020090 <mg_tcpip_rx+0x200>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 802008e:	bf00      	nop
  }
}
 8020090:	374c      	adds	r7, #76	@ 0x4c
 8020092:	46bd      	mov	sp, r7
 8020094:	bd90      	pop	{r4, r7, pc}
 8020096:	bf00      	nop
 8020098:	08033df4 	.word	0x08033df4
 802009c:	20000298 	.word	0x20000298
 80200a0:	08033f58 	.word	0x08033f58
 80200a4:	080310c8 	.word	0x080310c8
 80200a8:	08032b00 	.word	0x08032b00

080200ac <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 80200ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80200ae:	b095      	sub	sp, #84	@ 0x54
 80200b0:	af06      	add	r7, sp, #24
 80200b2:	6178      	str	r0, [r7, #20]
 80200b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 80200b8:	697b      	ldr	r3, [r7, #20]
 80200ba:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80200be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80200c2:	e9cd 2300 	strd	r2, r3, [sp]
 80200c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80200ca:	f04f 0300 	mov.w	r3, #0
 80200ce:	4608      	mov	r0, r1
 80200d0:	f002 f83b 	bl	802214a <mg_timer_expired>
 80200d4:	4603      	mov	r3, r0
 80200d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 80200da:	6979      	ldr	r1, [r7, #20]
 80200dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80200e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
  }
#endif
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 80200e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d052      	beq.n	8020192 <mg_tcpip_poll+0xe6>
 80200ec:	697b      	ldr	r3, [r7, #20]
 80200ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80200f0:	68db      	ldr	r3, [r3, #12]
 80200f2:	2b00      	cmp	r3, #0
 80200f4:	d04d      	beq.n	8020192 <mg_tcpip_poll+0xe6>
    bool up = ifp->driver->up(ifp);
 80200f6:	697b      	ldr	r3, [r7, #20]
 80200f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80200fa:	68db      	ldr	r3, [r3, #12]
 80200fc:	6978      	ldr	r0, [r7, #20]
 80200fe:	4798      	blx	r3
 8020100:	4603      	mov	r3, r0
 8020102:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 8020106:	697b      	ldr	r3, [r7, #20]
 8020108:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802010c:	2b00      	cmp	r3, #0
 802010e:	bf14      	ite	ne
 8020110:	2301      	movne	r3, #1
 8020112:	2300      	moveq	r3, #0
 8020114:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if (up != current) {
 8020118:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 802011c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8020120:	429a      	cmp	r2, r3
 8020122:	d023      	beq.n	802016c <mg_tcpip_poll+0xc0>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8020124:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8020128:	f083 0301 	eor.w	r3, r3, #1
 802012c:	b2db      	uxtb	r3, r3
 802012e:	2b00      	cmp	r3, #0
 8020130:	d001      	beq.n	8020136 <mg_tcpip_poll+0x8a>
 8020132:	2300      	movs	r3, #0
 8020134:	e006      	b.n	8020144 <mg_tcpip_poll+0x98>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 8020136:	697b      	ldr	r3, [r7, #20]
 8020138:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802013a:	2b00      	cmp	r3, #0
 802013c:	d001      	beq.n	8020142 <mg_tcpip_poll+0x96>
 802013e:	2301      	movs	r3, #1
 8020140:	e000      	b.n	8020144 <mg_tcpip_poll+0x98>
 8020142:	2303      	movs	r3, #3
 8020144:	697a      	ldr	r2, [r7, #20]
 8020146:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 802014a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 802014e:	f083 0301 	eor.w	r3, r3, #1
 8020152:	b2db      	uxtb	r3, r3
 8020154:	2b00      	cmp	r3, #0
 8020156:	d006      	beq.n	8020166 <mg_tcpip_poll+0xba>
 8020158:	697b      	ldr	r3, [r7, #20]
 802015a:	7f1b      	ldrb	r3, [r3, #28]
 802015c:	2b00      	cmp	r3, #0
 802015e:	d002      	beq.n	8020166 <mg_tcpip_poll+0xba>
 8020160:	697b      	ldr	r3, [r7, #20]
 8020162:	2200      	movs	r2, #0
 8020164:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 8020166:	6978      	ldr	r0, [r7, #20]
 8020168:	f7fd fdb2 	bl	801dcd0 <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802016c:	697b      	ldr	r3, [r7, #20]
 802016e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020172:	2b00      	cmp	r3, #0
 8020174:	d10d      	bne.n	8020192 <mg_tcpip_poll+0xe6>
 8020176:	4ba4      	ldr	r3, [pc, #656]	@ (8020408 <mg_tcpip_poll+0x35c>)
 8020178:	681b      	ldr	r3, [r3, #0]
 802017a:	2b00      	cmp	r3, #0
 802017c:	dd09      	ble.n	8020192 <mg_tcpip_poll+0xe6>
 802017e:	4ba3      	ldr	r3, [pc, #652]	@ (802040c <mg_tcpip_poll+0x360>)
 8020180:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 8020184:	49a2      	ldr	r1, [pc, #648]	@ (8020410 <mg_tcpip_poll+0x364>)
 8020186:	2001      	movs	r0, #1
 8020188:	f7fa fe58 	bl	801ae3c <mg_log_prefix>
 802018c:	48a1      	ldr	r0, [pc, #644]	@ (8020414 <mg_tcpip_poll+0x368>)
 802018e:	f7fa fea5 	bl	801aedc <mg_log>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8020192:	697b      	ldr	r3, [r7, #20]
 8020194:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020198:	2b00      	cmp	r3, #0
 802019a:	f000 818d 	beq.w	80204b8 <mg_tcpip_poll+0x40c>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 802019e:	697b      	ldr	r3, [r7, #20]
 80201a0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80201a4:	2b01      	cmp	r3, #1
 80201a6:	d107      	bne.n	80201b8 <mg_tcpip_poll+0x10c>
 80201a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	d003      	beq.n	80201b8 <mg_tcpip_poll+0x10c>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 80201b0:	6978      	ldr	r0, [r7, #20]
 80201b2:	f7fe f819 	bl	801e1e8 <tx_dhcp_discover>
 80201b6:	e04c      	b.n	8020252 <mg_tcpip_poll+0x1a6>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 80201b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80201bc:	2b00      	cmp	r3, #0
 80201be:	d048      	beq.n	8020252 <mg_tcpip_poll+0x1a6>
 80201c0:	697b      	ldr	r3, [r7, #20]
 80201c2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80201c6:	2b03      	cmp	r3, #3
 80201c8:	d143      	bne.n	8020252 <mg_tcpip_poll+0x1a6>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 80201ca:	697b      	ldr	r3, [r7, #20]
 80201cc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 80201d0:	4313      	orrs	r3, r2
 80201d2:	d03e      	beq.n	8020252 <mg_tcpip_poll+0x1a6>
    if (ifp->now >= ifp->lease_expire) {
 80201d4:	697b      	ldr	r3, [r7, #20]
 80201d6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80201da:	697b      	ldr	r3, [r7, #20]
 80201dc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80201e0:	4290      	cmp	r0, r2
 80201e2:	eb71 0303 	sbcs.w	r3, r1, r3
 80201e6:	d30a      	bcc.n	80201fe <mg_tcpip_poll+0x152>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 80201e8:	697b      	ldr	r3, [r7, #20]
 80201ea:	2201      	movs	r2, #1
 80201ec:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 80201f0:	697b      	ldr	r3, [r7, #20]
 80201f2:	2200      	movs	r2, #0
 80201f4:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 80201f6:	6978      	ldr	r0, [r7, #20]
 80201f8:	f7fd fd6a 	bl	801dcd0 <onstatechange>
 80201fc:	e029      	b.n	8020252 <mg_tcpip_poll+0x1a6>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80201fe:	697b      	ldr	r3, [r7, #20]
 8020200:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8020204:	4984      	ldr	r1, [pc, #528]	@ (8020418 <mg_tcpip_poll+0x36c>)
 8020206:	1854      	adds	r4, r2, r1
 8020208:	f143 0500 	adc.w	r5, r3, #0
 802020c:	697b      	ldr	r3, [r7, #20]
 802020e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8020212:	42a2      	cmp	r2, r4
 8020214:	41ab      	sbcs	r3, r5
 8020216:	d21c      	bcs.n	8020252 <mg_tcpip_poll+0x1a6>
               ((ifp->now / 1000) % 60) == 0) {
 8020218:	697b      	ldr	r3, [r7, #20]
 802021a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 802021e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8020222:	f04f 0300 	mov.w	r3, #0
 8020226:	f7e0 fd97 	bl	8000d58 <__aeabi_uldivmod>
 802022a:	4602      	mov	r2, r0
 802022c:	460b      	mov	r3, r1
 802022e:	4610      	mov	r0, r2
 8020230:	4619      	mov	r1, r3
 8020232:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 8020236:	f04f 0300 	mov.w	r3, #0
 802023a:	f7e0 fd8d 	bl	8000d58 <__aeabi_uldivmod>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 802023e:	4313      	orrs	r3, r2
 8020240:	d107      	bne.n	8020252 <mg_tcpip_poll+0x1a6>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 8020242:	697b      	ldr	r3, [r7, #20]
 8020244:	689a      	ldr	r2, [r3, #8]
 8020246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802024a:	4974      	ldr	r1, [pc, #464]	@ (802041c <mg_tcpip_poll+0x370>)
 802024c:	6978      	ldr	r0, [r7, #20]
 802024e:	f7fd ff99 	bl	801e184 <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 8020252:	697b      	ldr	r3, [r7, #20]
 8020254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020256:	689b      	ldr	r3, [r3, #8]
 8020258:	2b00      	cmp	r3, #0
 802025a:	d019      	beq.n	8020290 <mg_tcpip_poll+0x1e4>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 802025c:	697b      	ldr	r3, [r7, #20]
 802025e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020260:	689b      	ldr	r3, [r3, #8]
 8020262:	697a      	ldr	r2, [r7, #20]
 8020264:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8020266:	697a      	ldr	r2, [r7, #20]
 8020268:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 802026a:	697a      	ldr	r2, [r7, #20]
 802026c:	4798      	blx	r3
 802026e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 8020270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020272:	2b00      	cmp	r3, #0
 8020274:	d024      	beq.n	80202c0 <mg_tcpip_poll+0x214>
      ifp->nrecv++;
 8020276:	697b      	ldr	r3, [r7, #20]
 8020278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802027a:	1c5a      	adds	r2, r3, #1
 802027c:	697b      	ldr	r3, [r7, #20]
 802027e:	671a      	str	r2, [r3, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8020280:	697b      	ldr	r3, [r7, #20]
 8020282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020284:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8020286:	4619      	mov	r1, r3
 8020288:	6978      	ldr	r0, [r7, #20]
 802028a:	f7ff fe01 	bl	801fe90 <mg_tcpip_rx>
 802028e:	e017      	b.n	80202c0 <mg_tcpip_poll+0x214>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8020290:	697b      	ldr	r3, [r7, #20]
 8020292:	3334      	adds	r3, #52	@ 0x34
 8020294:	f107 0220 	add.w	r2, r7, #32
 8020298:	4611      	mov	r1, r2
 802029a:	4618      	mov	r0, r3
 802029c:	f000 ffb8 	bl	8021210 <mg_queue_next>
 80202a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 80202a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80202a4:	2b00      	cmp	r3, #0
 80202a6:	d00b      	beq.n	80202c0 <mg_tcpip_poll+0x214>
      mg_tcpip_rx(ifp, buf, len);
 80202a8:	6a3b      	ldr	r3, [r7, #32]
 80202aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80202ac:	4619      	mov	r1, r3
 80202ae:	6978      	ldr	r0, [r7, #20]
 80202b0:	f7ff fdee 	bl	801fe90 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 80202b4:	697b      	ldr	r3, [r7, #20]
 80202b6:	3334      	adds	r3, #52	@ 0x34
 80202b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80202ba:	4618      	mov	r0, r3
 80202bc:	f000 ffd9 	bl	8021272 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80202c0:	697b      	ldr	r3, [r7, #20]
 80202c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80202c4:	681b      	ldr	r3, [r3, #0]
 80202c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80202c8:	e0f1      	b.n	80204ae <mg_tcpip_poll+0x402>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 80202ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80202cc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80202d0:	f003 0301 	and.w	r3, r3, #1
 80202d4:	b2db      	uxtb	r3, r3
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	f040 80e5 	bne.w	80204a6 <mg_tcpip_poll+0x3fa>
 80202dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80202de:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80202e2:	f003 0301 	and.w	r3, r3, #1
 80202e6:	b2db      	uxtb	r3, r3
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	f040 80dc 	bne.w	80204a6 <mg_tcpip_poll+0x3fa>
 80202ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80202f0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80202f4:	f003 0308 	and.w	r3, r3, #8
 80202f8:	b2db      	uxtb	r3, r3
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	f040 80d3 	bne.w	80204a6 <mg_tcpip_poll+0x3fa>
    struct connstate *s = (struct connstate *) (c + 1);
 8020300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020302:	33b0      	adds	r3, #176	@ 0xb0
 8020304:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8020306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020308:	331c      	adds	r3, #28
 802030a:	681b      	ldr	r3, [r3, #0]
 802030c:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 802030e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020310:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8020314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020318:	4290      	cmp	r0, r2
 802031a:	eb71 0303 	sbcs.w	r3, r1, r3
 802031e:	f080 80c3 	bcs.w	80204a8 <mg_tcpip_poll+0x3fc>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8020322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020324:	7f9b      	ldrb	r3, [r3, #30]
 8020326:	2b01      	cmp	r3, #1
 8020328:	d142      	bne.n	80203b0 <mg_tcpip_poll+0x304>
 802032a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802032c:	691a      	ldr	r2, [r3, #16]
 802032e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020330:	685b      	ldr	r3, [r3, #4]
 8020332:	429a      	cmp	r2, r3
 8020334:	d03c      	beq.n	80203b0 <mg_tcpip_poll+0x304>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8020336:	4b34      	ldr	r3, [pc, #208]	@ (8020408 <mg_tcpip_poll+0x35c>)
 8020338:	681b      	ldr	r3, [r3, #0]
 802033a:	2b03      	cmp	r3, #3
 802033c:	dd0f      	ble.n	802035e <mg_tcpip_poll+0x2b2>
 802033e:	4b33      	ldr	r3, [pc, #204]	@ (802040c <mg_tcpip_poll+0x360>)
 8020340:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 8020344:	4932      	ldr	r1, [pc, #200]	@ (8020410 <mg_tcpip_poll+0x364>)
 8020346:	2004      	movs	r0, #4
 8020348:	f7fa fd78 	bl	801ae3c <mg_log_prefix>
 802034c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802034e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8020350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020352:	681a      	ldr	r2, [r3, #0]
 8020354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020356:	685b      	ldr	r3, [r3, #4]
 8020358:	4831      	ldr	r0, [pc, #196]	@ (8020420 <mg_tcpip_poll+0x374>)
 802035a:	f7fa fdbf 	bl	801aedc <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 802035e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020360:	f103 0618 	add.w	r6, r3, #24
 8020364:	69fb      	ldr	r3, [r7, #28]
 8020366:	613b      	str	r3, [r7, #16]
 8020368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802036a:	8b1c      	ldrh	r4, [r3, #24]
 802036c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802036e:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8020370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020372:	681b      	ldr	r3, [r3, #0]
 8020374:	4618      	mov	r0, r3
 8020376:	f002 f9ef 	bl	8022758 <mg_ntohl>
 802037a:	6078      	str	r0, [r7, #4]
 802037c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802037e:	685b      	ldr	r3, [r3, #4]
 8020380:	4618      	mov	r0, r3
 8020382:	f002 f9e9 	bl	8022758 <mg_ntohl>
 8020386:	4603      	mov	r3, r0
 8020388:	2200      	movs	r2, #0
 802038a:	9205      	str	r2, [sp, #20]
 802038c:	2200      	movs	r2, #0
 802038e:	9204      	str	r2, [sp, #16]
 8020390:	9303      	str	r3, [sp, #12]
 8020392:	6879      	ldr	r1, [r7, #4]
 8020394:	9102      	str	r1, [sp, #8]
 8020396:	9501      	str	r5, [sp, #4]
 8020398:	9400      	str	r4, [sp, #0]
 802039a:	2310      	movs	r3, #16
 802039c:	693a      	ldr	r2, [r7, #16]
 802039e:	4631      	mov	r1, r6
 80203a0:	6978      	ldr	r0, [r7, #20]
 80203a2:	f7fe fd7d 	bl	801eea0 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 80203a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203a8:	685a      	ldr	r2, [r3, #4]
 80203aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203ac:	611a      	str	r2, [r3, #16]
 80203ae:	e075      	b.n	802049c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 80203b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203b2:	7f9b      	ldrb	r3, [r3, #30]
 80203b4:	2b02      	cmp	r3, #2
 80203b6:	d104      	bne.n	80203c2 <mg_tcpip_poll+0x316>
        mg_error(c, "ARP timeout");
 80203b8:	491a      	ldr	r1, [pc, #104]	@ (8020424 <mg_tcpip_poll+0x378>)
 80203ba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80203bc:	f7f5 f978 	bl	80156b0 <mg_error>
 80203c0:	e06c      	b.n	802049c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 80203c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203c4:	7f9b      	ldrb	r3, [r3, #30]
 80203c6:	2b03      	cmp	r3, #3
 80203c8:	d104      	bne.n	80203d4 <mg_tcpip_poll+0x328>
        mg_error(c, "Connection timeout");
 80203ca:	4917      	ldr	r1, [pc, #92]	@ (8020428 <mg_tcpip_poll+0x37c>)
 80203cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80203ce:	f7f5 f96f 	bl	80156b0 <mg_error>
 80203d2:	e063      	b.n	802049c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 80203d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203d6:	7f9b      	ldrb	r3, [r3, #30]
 80203d8:	2b04      	cmp	r3, #4
 80203da:	d107      	bne.n	80203ec <mg_tcpip_poll+0x340>
        c->is_closing = 1;
 80203dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80203de:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80203e2:	f043 0320 	orr.w	r3, r3, #32
 80203e6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 80203ea:	e05d      	b.n	80204a8 <mg_tcpip_poll+0x3fc>
      } else {
        if (s->tmiss++ > 2) {
 80203ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203ee:	7fdb      	ldrb	r3, [r3, #31]
 80203f0:	1c5a      	adds	r2, r3, #1
 80203f2:	b2d1      	uxtb	r1, r2
 80203f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80203f6:	77d1      	strb	r1, [r2, #31]
 80203f8:	2b02      	cmp	r3, #2
 80203fa:	d919      	bls.n	8020430 <mg_tcpip_poll+0x384>
          mg_error(c, "keepalive");
 80203fc:	490b      	ldr	r1, [pc, #44]	@ (802042c <mg_tcpip_poll+0x380>)
 80203fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8020400:	f7f5 f956 	bl	80156b0 <mg_error>
 8020404:	e04a      	b.n	802049c <mg_tcpip_poll+0x3f0>
 8020406:	bf00      	nop
 8020408:	20000298 	.word	0x20000298
 802040c:	08033f64 	.word	0x08033f64
 8020410:	080310c8 	.word	0x080310c8
 8020414:	08032b14 	.word	0x08032b14
 8020418:	001b7740 	.word	0x001b7740
 802041c:	08033df4 	.word	0x08033df4
 8020420:	08032b24 	.word	0x08032b24
 8020424:	08032b34 	.word	0x08032b34
 8020428:	08032b40 	.word	0x08032b40
 802042c:	08032b54 	.word	0x08032b54
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 8020430:	4b23      	ldr	r3, [pc, #140]	@ (80204c0 <mg_tcpip_poll+0x414>)
 8020432:	681b      	ldr	r3, [r3, #0]
 8020434:	2b03      	cmp	r3, #3
 8020436:	dd0c      	ble.n	8020452 <mg_tcpip_poll+0x3a6>
 8020438:	4b22      	ldr	r3, [pc, #136]	@ (80204c4 <mg_tcpip_poll+0x418>)
 802043a:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 802043e:	4922      	ldr	r1, [pc, #136]	@ (80204c8 <mg_tcpip_poll+0x41c>)
 8020440:	2004      	movs	r0, #4
 8020442:	f7fa fcfb 	bl	801ae3c <mg_log_prefix>
 8020446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802044a:	4619      	mov	r1, r3
 802044c:	481f      	ldr	r0, [pc, #124]	@ (80204cc <mg_tcpip_poll+0x420>)
 802044e:	f7fa fd45 	bl	801aedc <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8020452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020454:	f103 0618 	add.w	r6, r3, #24
 8020458:	69fb      	ldr	r3, [r7, #28]
 802045a:	613b      	str	r3, [r7, #16]
 802045c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802045e:	8b1c      	ldrh	r4, [r3, #24]
 8020460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020462:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 8020464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020466:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8020468:	3b01      	subs	r3, #1
 802046a:	4618      	mov	r0, r3
 802046c:	f002 f974 	bl	8022758 <mg_ntohl>
 8020470:	6078      	str	r0, [r7, #4]
 8020472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020474:	685b      	ldr	r3, [r3, #4]
 8020476:	4618      	mov	r0, r3
 8020478:	f002 f96e 	bl	8022758 <mg_ntohl>
 802047c:	4603      	mov	r3, r0
 802047e:	2200      	movs	r2, #0
 8020480:	9205      	str	r2, [sp, #20]
 8020482:	2200      	movs	r2, #0
 8020484:	9204      	str	r2, [sp, #16]
 8020486:	9303      	str	r3, [sp, #12]
 8020488:	6879      	ldr	r1, [r7, #4]
 802048a:	9102      	str	r1, [sp, #8]
 802048c:	9501      	str	r5, [sp, #4]
 802048e:	9400      	str	r4, [sp, #0]
 8020490:	2310      	movs	r3, #16
 8020492:	693a      	ldr	r2, [r7, #16]
 8020494:	4631      	mov	r1, r6
 8020496:	6978      	ldr	r0, [r7, #20]
 8020498:	f7fe fd02 	bl	801eea0 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 802049c:	2100      	movs	r1, #0
 802049e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80204a0:	f7fd fb40 	bl	801db24 <settmout>
 80204a4:	e000      	b.n	80204a8 <mg_tcpip_poll+0x3fc>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 80204a6:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80204a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80204aa:	681b      	ldr	r3, [r3, #0]
 80204ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80204ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80204b0:	2b00      	cmp	r3, #0
 80204b2:	f47f af0a 	bne.w	80202ca <mg_tcpip_poll+0x21e>
 80204b6:	e000      	b.n	80204ba <mg_tcpip_poll+0x40e>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 80204b8:	bf00      	nop
    }
  }
}
 80204ba:	373c      	adds	r7, #60	@ 0x3c
 80204bc:	46bd      	mov	sp, r7
 80204be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204c0:	20000298 	.word	0x20000298
 80204c4:	08033f64 	.word	0x08033f64
 80204c8:	080310c8 	.word	0x080310c8
 80204cc:	08032b60 	.word	0x08032b60

080204d0 <mg_tcpip_init>:
  } else {
    ifp->ndrop++;
  }
}

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 80204d0:	b580      	push	{r7, lr}
 80204d2:	b084      	sub	sp, #16
 80204d4:	af00      	add	r7, sp, #0
 80204d6:	6078      	str	r0, [r7, #4]
 80204d8:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80204da:	683b      	ldr	r3, [r7, #0]
 80204dc:	781b      	ldrb	r3, [r3, #0]
 80204de:	2b00      	cmp	r3, #0
 80204e0:	d12d      	bne.n	802053e <mg_tcpip_init+0x6e>
 80204e2:	683b      	ldr	r3, [r7, #0]
 80204e4:	785b      	ldrb	r3, [r3, #1]
 80204e6:	2b00      	cmp	r3, #0
 80204e8:	d129      	bne.n	802053e <mg_tcpip_init+0x6e>
 80204ea:	683b      	ldr	r3, [r7, #0]
 80204ec:	789b      	ldrb	r3, [r3, #2]
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	d125      	bne.n	802053e <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80204f2:	683b      	ldr	r3, [r7, #0]
 80204f4:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80204f6:	2b00      	cmp	r3, #0
 80204f8:	d121      	bne.n	802053e <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80204fa:	683b      	ldr	r3, [r7, #0]
 80204fc:	791b      	ldrb	r3, [r3, #4]
 80204fe:	2b00      	cmp	r3, #0
 8020500:	d11d      	bne.n	802053e <mg_tcpip_init+0x6e>
 8020502:	683b      	ldr	r3, [r7, #0]
 8020504:	795b      	ldrb	r3, [r3, #5]
 8020506:	2b00      	cmp	r3, #0
 8020508:	d119      	bne.n	802053e <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 802050a:	683b      	ldr	r3, [r7, #0]
 802050c:	2202      	movs	r2, #2
 802050e:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8020510:	683b      	ldr	r3, [r7, #0]
 8020512:	3301      	adds	r3, #1
 8020514:	2105      	movs	r1, #5
 8020516:	4618      	mov	r0, r3
 8020518:	f002 f8b7 	bl	802268a <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 802051c:	4b51      	ldr	r3, [pc, #324]	@ (8020664 <mg_tcpip_init+0x194>)
 802051e:	681b      	ldr	r3, [r3, #0]
 8020520:	2b01      	cmp	r3, #1
 8020522:	dd0c      	ble.n	802053e <mg_tcpip_init+0x6e>
 8020524:	4b50      	ldr	r3, [pc, #320]	@ (8020668 <mg_tcpip_init+0x198>)
 8020526:	f241 721f 	movw	r2, #5919	@ 0x171f
 802052a:	4950      	ldr	r1, [pc, #320]	@ (802066c <mg_tcpip_init+0x19c>)
 802052c:	2002      	movs	r0, #2
 802052e:	f7fa fc85 	bl	801ae3c <mg_log_prefix>
 8020532:	683b      	ldr	r3, [r7, #0]
 8020534:	461a      	mov	r2, r3
 8020536:	494e      	ldr	r1, [pc, #312]	@ (8020670 <mg_tcpip_init+0x1a0>)
 8020538:	484e      	ldr	r0, [pc, #312]	@ (8020674 <mg_tcpip_init+0x1a4>)
 802053a:	f7fa fccf 	bl	801aedc <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 802053e:	683b      	ldr	r3, [r7, #0]
 8020540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020542:	681b      	ldr	r3, [r3, #0]
 8020544:	2b00      	cmp	r3, #0
 8020546:	d019      	beq.n	802057c <mg_tcpip_init+0xac>
 8020548:	683b      	ldr	r3, [r7, #0]
 802054a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802054c:	681b      	ldr	r3, [r3, #0]
 802054e:	6838      	ldr	r0, [r7, #0]
 8020550:	4798      	blx	r3
 8020552:	4603      	mov	r3, r0
 8020554:	f083 0301 	eor.w	r3, r3, #1
 8020558:	b2db      	uxtb	r3, r3
 802055a:	2b00      	cmp	r3, #0
 802055c:	d00e      	beq.n	802057c <mg_tcpip_init+0xac>
    MG_ERROR(("driver init failed"));
 802055e:	4b41      	ldr	r3, [pc, #260]	@ (8020664 <mg_tcpip_init+0x194>)
 8020560:	681b      	ldr	r3, [r3, #0]
 8020562:	2b00      	cmp	r3, #0
 8020564:	dd7a      	ble.n	802065c <mg_tcpip_init+0x18c>
 8020566:	4b40      	ldr	r3, [pc, #256]	@ (8020668 <mg_tcpip_init+0x198>)
 8020568:	f241 7223 	movw	r2, #5923	@ 0x1723
 802056c:	493f      	ldr	r1, [pc, #252]	@ (802066c <mg_tcpip_init+0x19c>)
 802056e:	2001      	movs	r0, #1
 8020570:	f7fa fc64 	bl	801ae3c <mg_log_prefix>
 8020574:	4840      	ldr	r0, [pc, #256]	@ (8020678 <mg_tcpip_init+0x1a8>)
 8020576:	f7fa fcb1 	bl	801aedc <mg_log>
 802057a:	e06f      	b.n	802065c <mg_tcpip_init+0x18c>
  } else {
    size_t framesize = 1540;
 802057c:	f240 6304 	movw	r3, #1540	@ 0x604
 8020580:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8020582:	68f9      	ldr	r1, [r7, #12]
 8020584:	2001      	movs	r0, #1
 8020586:	f7f4 fa93 	bl	8014ab0 <mg_calloc>
 802058a:	4602      	mov	r2, r0
 802058c:	683b      	ldr	r3, [r7, #0]
 802058e:	615a      	str	r2, [r3, #20]
 8020590:	683b      	ldr	r3, [r7, #0]
 8020592:	68fa      	ldr	r2, [r7, #12]
 8020594:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 8020596:	683b      	ldr	r3, [r7, #0]
 8020598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802059a:	2b00      	cmp	r3, #0
 802059c:	d10a      	bne.n	80205b4 <mg_tcpip_init+0xe4>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 802059e:	683b      	ldr	r3, [r7, #0]
 80205a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80205a2:	689b      	ldr	r3, [r3, #8]
 80205a4:	2b00      	cmp	r3, #0
 80205a6:	d001      	beq.n	80205ac <mg_tcpip_init+0xdc>
 80205a8:	68fb      	ldr	r3, [r7, #12]
 80205aa:	e001      	b.n	80205b0 <mg_tcpip_init+0xe0>
 80205ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80205b0:	683a      	ldr	r2, [r7, #0]
 80205b2:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 80205b4:	683b      	ldr	r3, [r7, #0]
 80205b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80205b8:	4619      	mov	r1, r3
 80205ba:	2001      	movs	r0, #1
 80205bc:	f7f4 fa78 	bl	8014ab0 <mg_calloc>
 80205c0:	4602      	mov	r2, r0
 80205c2:	683b      	ldr	r3, [r7, #0]
 80205c4:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 80205c6:	f002 f971 	bl	80228ac <mg_millis>
 80205ca:	4602      	mov	r2, r0
 80205cc:	460b      	mov	r3, r1
 80205ce:	6839      	ldr	r1, [r7, #0]
 80205d0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    mgr->priv = ifp;
 80205d4:	687b      	ldr	r3, [r7, #4]
 80205d6:	683a      	ldr	r2, [r7, #0]
 80205d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    ifp->mgr = mgr;
 80205da:	683b      	ldr	r3, [r7, #0]
 80205dc:	687a      	ldr	r2, [r7, #4]
 80205de:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 80205e0:	683b      	ldr	r3, [r7, #0]
 80205e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80205e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 80205ea:	687b      	ldr	r3, [r7, #4]
 80205ec:	2230      	movs	r2, #48	@ 0x30
 80205ee:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 80205f0:	683b      	ldr	r3, [r7, #0]
 80205f2:	689b      	ldr	r3, [r3, #8]
 80205f4:	2b00      	cmp	r3, #0
 80205f6:	d102      	bne.n	80205fe <mg_tcpip_init+0x12e>
 80205f8:	683b      	ldr	r3, [r7, #0]
 80205fa:	2201      	movs	r2, #1
 80205fc:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 80205fe:	683b      	ldr	r3, [r7, #0]
 8020600:	3346      	adds	r3, #70	@ 0x46
 8020602:	2206      	movs	r2, #6
 8020604:	21ff      	movs	r1, #255	@ 0xff
 8020606:	4618      	mov	r0, r3
 8020608:	f005 fa22 	bl	8025a50 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 802060c:	683b      	ldr	r3, [r7, #0]
 802060e:	3368      	adds	r3, #104	@ 0x68
 8020610:	2102      	movs	r1, #2
 8020612:	4618      	mov	r0, r3
 8020614:	f002 f839 	bl	802268a <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8020618:	683b      	ldr	r3, [r7, #0]
 802061a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 802061e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8020622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8020626:	b29a      	uxth	r2, r3
 8020628:	683b      	ldr	r3, [r7, #0]
 802062a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802062e:	683b      	ldr	r3, [r7, #0]
 8020630:	695b      	ldr	r3, [r3, #20]
 8020632:	2b00      	cmp	r3, #0
 8020634:	d003      	beq.n	802063e <mg_tcpip_init+0x16e>
 8020636:	683b      	ldr	r3, [r7, #0]
 8020638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802063a:	2b00      	cmp	r3, #0
 802063c:	d10e      	bne.n	802065c <mg_tcpip_init+0x18c>
 802063e:	4b09      	ldr	r3, [pc, #36]	@ (8020664 <mg_tcpip_init+0x194>)
 8020640:	681b      	ldr	r3, [r3, #0]
 8020642:	2b00      	cmp	r3, #0
 8020644:	dd0a      	ble.n	802065c <mg_tcpip_init+0x18c>
 8020646:	4b08      	ldr	r3, [pc, #32]	@ (8020668 <mg_tcpip_init+0x198>)
 8020648:	f241 7234 	movw	r2, #5940	@ 0x1734
 802064c:	4907      	ldr	r1, [pc, #28]	@ (802066c <mg_tcpip_init+0x19c>)
 802064e:	2001      	movs	r0, #1
 8020650:	f7fa fbf4 	bl	801ae3c <mg_log_prefix>
 8020654:	4809      	ldr	r0, [pc, #36]	@ (802067c <mg_tcpip_init+0x1ac>)
 8020656:	f7fa fc41 	bl	801aedc <mg_log>
  }
}
 802065a:	e7ff      	b.n	802065c <mg_tcpip_init+0x18c>
 802065c:	bf00      	nop
 802065e:	3710      	adds	r7, #16
 8020660:	46bd      	mov	sp, r7
 8020662:	bd80      	pop	{r7, pc}
 8020664:	20000298 	.word	0x20000298
 8020668:	08033f74 	.word	0x08033f74
 802066c:	080310c8 	.word	0x080310c8
 8020670:	080210f1 	.word	0x080210f1
 8020674:	08032b70 	.word	0x08032b70
 8020678:	08032b94 	.word	0x08032b94
 802067c:	08032604 	.word	0x08032604

08020680 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 8020680:	b590      	push	{r4, r7, lr}
 8020682:	b08d      	sub	sp, #52	@ 0x34
 8020684:	af06      	add	r7, sp, #24
 8020686:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8020688:	687b      	ldr	r3, [r7, #4]
 802068a:	33b0      	adds	r3, #176	@ 0xb0
 802068c:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	8b1b      	ldrh	r3, [r3, #24]
 8020692:	4618      	mov	r0, r3
 8020694:	f002 f879 	bl	802278a <mg_ntohs>
 8020698:	4603      	mov	r3, r0
 802069a:	4618      	mov	r0, r3
 802069c:	f002 f85c 	bl	8022758 <mg_ntohl>
 80206a0:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80206a2:	687b      	ldr	r3, [r7, #4]
 80206a4:	685b      	ldr	r3, [r3, #4]
 80206a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80206a8:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	331c      	adds	r3, #28
 80206ae:	681b      	ldr	r3, [r3, #0]
 80206b0:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 80206b2:	697b      	ldr	r3, [r7, #20]
 80206b4:	f103 0018 	add.w	r0, r3, #24
 80206b8:	68bc      	ldr	r4, [r7, #8]
 80206ba:	687b      	ldr	r3, [r7, #4]
 80206bc:	8b1b      	ldrh	r3, [r3, #24]
 80206be:	687a      	ldr	r2, [r7, #4]
 80206c0:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80206c2:	2100      	movs	r1, #0
 80206c4:	9105      	str	r1, [sp, #20]
 80206c6:	2100      	movs	r1, #0
 80206c8:	9104      	str	r1, [sp, #16]
 80206ca:	2100      	movs	r1, #0
 80206cc:	9103      	str	r1, [sp, #12]
 80206ce:	6939      	ldr	r1, [r7, #16]
 80206d0:	9102      	str	r1, [sp, #8]
 80206d2:	9201      	str	r2, [sp, #4]
 80206d4:	9300      	str	r3, [sp, #0]
 80206d6:	2302      	movs	r3, #2
 80206d8:	4622      	mov	r2, r4
 80206da:	4601      	mov	r1, r0
 80206dc:	68f8      	ldr	r0, [r7, #12]
 80206de:	f7fe fbdf 	bl	801eea0 <tx_tcp>
         0);
}
 80206e2:	bf00      	nop
 80206e4:	371c      	adds	r7, #28
 80206e6:	46bd      	mov	sp, r7
 80206e8:	bd90      	pop	{r4, r7, pc}
	...

080206ec <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 80206ec:	b580      	push	{r7, lr}
 80206ee:	b08a      	sub	sp, #40	@ 0x28
 80206f0:	af02      	add	r7, sp, #8
 80206f2:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80206f4:	687b      	ldr	r3, [r7, #4]
 80206f6:	685b      	ldr	r3, [r3, #4]
 80206f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80206fa:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80206fc:	687b      	ldr	r3, [r7, #4]
 80206fe:	331c      	adds	r3, #28
 8020700:	681b      	ldr	r3, [r3, #0]
 8020702:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 8020704:	687a      	ldr	r2, [r7, #4]
 8020706:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802070a:	f36f 03c3 	bfc	r3, #3, #1
 802070e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8020712:	69fb      	ldr	r3, [r7, #28]
 8020714:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8020718:	b21b      	sxth	r3, r3
 802071a:	2b00      	cmp	r3, #0
 802071c:	db04      	blt.n	8020728 <mg_connect_resolved+0x3c>
 802071e:	69fb      	ldr	r3, [r7, #28]
 8020720:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8020724:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8020728:	687b      	ldr	r3, [r7, #4]
 802072a:	3308      	adds	r3, #8
 802072c:	69fa      	ldr	r2, [r7, #28]
 802072e:	3208      	adds	r2, #8
 8020730:	6812      	ldr	r2, [r2, #0]
 8020732:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 8020734:	69fb      	ldr	r3, [r7, #28]
 8020736:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 802073a:	1c5a      	adds	r2, r3, #1
 802073c:	b291      	uxth	r1, r2
 802073e:	69fa      	ldr	r2, [r7, #28]
 8020740:	f8a2 1068 	strh.w	r1, [r2, #104]	@ 0x68
 8020744:	4618      	mov	r0, r3
 8020746:	f002 f820 	bl	802278a <mg_ntohs>
 802074a:	4603      	mov	r3, r0
 802074c:	461a      	mov	r2, r3
 802074e:	687b      	ldr	r3, [r7, #4]
 8020750:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8020752:	4b6a      	ldr	r3, [pc, #424]	@ (80208fc <mg_connect_resolved+0x210>)
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	2b02      	cmp	r3, #2
 8020758:	dd15      	ble.n	8020786 <mg_connect_resolved+0x9a>
 802075a:	4b69      	ldr	r3, [pc, #420]	@ (8020900 <mg_connect_resolved+0x214>)
 802075c:	f241 724f 	movw	r2, #5967	@ 0x174f
 8020760:	4968      	ldr	r1, [pc, #416]	@ (8020904 <mg_connect_resolved+0x218>)
 8020762:	2003      	movs	r0, #3
 8020764:	f7fa fb6a 	bl	801ae3c <mg_log_prefix>
 8020768:	687b      	ldr	r3, [r7, #4]
 802076a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802076c:	687b      	ldr	r3, [r7, #4]
 802076e:	f103 0208 	add.w	r2, r3, #8
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	331c      	adds	r3, #28
 8020776:	9301      	str	r3, [sp, #4]
 8020778:	4b63      	ldr	r3, [pc, #396]	@ (8020908 <mg_connect_resolved+0x21c>)
 802077a:	9300      	str	r3, [sp, #0]
 802077c:	4613      	mov	r3, r2
 802077e:	4a62      	ldr	r2, [pc, #392]	@ (8020908 <mg_connect_resolved+0x21c>)
 8020780:	4862      	ldr	r0, [pc, #392]	@ (802090c <mg_connect_resolved+0x220>)
 8020782:	f7fa fbab 	bl	801aedc <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 8020786:	2200      	movs	r2, #0
 8020788:	2103      	movs	r1, #3
 802078a:	6878      	ldr	r0, [r7, #4]
 802078c:	f7f4 ff70 	bl	8015670 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8020790:	687b      	ldr	r3, [r7, #4]
 8020792:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020796:	f003 0301 	and.w	r3, r3, #1
 802079a:	b2db      	uxtb	r3, r3
 802079c:	2b00      	cmp	r3, #0
 802079e:	d017      	beq.n	80207d0 <mg_connect_resolved+0xe4>
 80207a0:	68fb      	ldr	r3, [r7, #12]
 80207a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80207a6:	d008      	beq.n	80207ba <mg_connect_resolved+0xce>
 80207a8:	69fb      	ldr	r3, [r7, #28]
 80207aa:	689a      	ldr	r2, [r3, #8]
 80207ac:	69fb      	ldr	r3, [r7, #28]
 80207ae:	68db      	ldr	r3, [r3, #12]
 80207b0:	43db      	mvns	r3, r3
 80207b2:	431a      	orrs	r2, r3
 80207b4:	68fb      	ldr	r3, [r7, #12]
 80207b6:	429a      	cmp	r2, r3
 80207b8:	d10a      	bne.n	80207d0 <mg_connect_resolved+0xe4>
    struct connstate *s = (struct connstate *) (c + 1);
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	33b0      	adds	r3, #176	@ 0xb0
 80207be:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 80207c0:	69bb      	ldr	r3, [r7, #24]
 80207c2:	3318      	adds	r3, #24
 80207c4:	2206      	movs	r2, #6
 80207c6:	21ff      	movs	r1, #255	@ 0xff
 80207c8:	4618      	mov	r0, r3
 80207ca:	f005 f941 	bl	8025a50 <memset>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 80207ce:	e091      	b.n	80208f4 <mg_connect_resolved+0x208>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80207d0:	69fb      	ldr	r3, [r7, #28]
 80207d2:	689b      	ldr	r3, [r3, #8]
 80207d4:	2b00      	cmp	r3, #0
 80207d6:	d036      	beq.n	8020846 <mg_connect_resolved+0x15a>
 80207d8:	69fb      	ldr	r3, [r7, #28]
 80207da:	689a      	ldr	r2, [r3, #8]
 80207dc:	68fb      	ldr	r3, [r7, #12]
 80207de:	405a      	eors	r2, r3
 80207e0:	69fb      	ldr	r3, [r7, #28]
 80207e2:	68db      	ldr	r3, [r3, #12]
 80207e4:	4013      	ands	r3, r2
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	d12d      	bne.n	8020846 <mg_connect_resolved+0x15a>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 80207ea:	69fb      	ldr	r3, [r7, #28]
 80207ec:	691a      	ldr	r2, [r3, #16]
 80207ee:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80207f0:	429a      	cmp	r2, r3
 80207f2:	d028      	beq.n	8020846 <mg_connect_resolved+0x15a>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 80207f4:	4b41      	ldr	r3, [pc, #260]	@ (80208fc <mg_connect_resolved+0x210>)
 80207f6:	681b      	ldr	r3, [r3, #0]
 80207f8:	2b02      	cmp	r3, #2
 80207fa:	dd0c      	ble.n	8020816 <mg_connect_resolved+0x12a>
 80207fc:	4b40      	ldr	r3, [pc, #256]	@ (8020900 <mg_connect_resolved+0x214>)
 80207fe:	f241 7258 	movw	r2, #5976	@ 0x1758
 8020802:	4940      	ldr	r1, [pc, #256]	@ (8020904 <mg_connect_resolved+0x218>)
 8020804:	2003      	movs	r0, #3
 8020806:	f7fa fb19 	bl	801ae3c <mg_log_prefix>
 802080a:	687b      	ldr	r3, [r7, #4]
 802080c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802080e:	4619      	mov	r1, r3
 8020810:	483f      	ldr	r0, [pc, #252]	@ (8020910 <mg_connect_resolved+0x224>)
 8020812:	f7fa fb63 	bl	801aedc <mg_log>
    arp_ask(ifp, rem_ip);
 8020816:	68fb      	ldr	r3, [r7, #12]
 8020818:	4619      	mov	r1, r3
 802081a:	69f8      	ldr	r0, [r7, #28]
 802081c:	f7fd f9fa 	bl	801dc14 <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8020820:	2102      	movs	r1, #2
 8020822:	6878      	ldr	r0, [r7, #4]
 8020824:	f7fd f97e 	bl	801db24 <settmout>
    c->is_arplooking = 1;
 8020828:	687a      	ldr	r2, [r7, #4]
 802082a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802082e:	f043 0310 	orr.w	r3, r3, #16
 8020832:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_connecting = 1;
 8020836:	687a      	ldr	r2, [r7, #4]
 8020838:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802083c:	f043 0320 	orr.w	r3, r3, #32
 8020840:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8020844:	e056      	b.n	80208f4 <mg_connect_resolved+0x208>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8020846:	f107 030c 	add.w	r3, r7, #12
 802084a:	781b      	ldrb	r3, [r3, #0]
 802084c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8020850:	2be0      	cmp	r3, #224	@ 0xe0
 8020852:	d126      	bne.n	80208a2 <mg_connect_resolved+0x1b6>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 8020854:	687b      	ldr	r3, [r7, #4]
 8020856:	33b0      	adds	r3, #176	@ 0xb0
 8020858:	613b      	str	r3, [r7, #16]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 802085a:	4a2e      	ldr	r2, [pc, #184]	@ (8020914 <mg_connect_resolved+0x228>)
 802085c:	f107 0308 	add.w	r3, r7, #8
 8020860:	6812      	ldr	r2, [r2, #0]
 8020862:	4611      	mov	r1, r2
 8020864:	8019      	strh	r1, [r3, #0]
 8020866:	3302      	adds	r3, #2
 8020868:	0c12      	lsrs	r2, r2, #16
 802086a:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 802086c:	693b      	ldr	r3, [r7, #16]
 802086e:	3318      	adds	r3, #24
 8020870:	461a      	mov	r2, r3
 8020872:	f107 0308 	add.w	r3, r7, #8
 8020876:	8819      	ldrh	r1, [r3, #0]
 8020878:	789b      	ldrb	r3, [r3, #2]
 802087a:	8011      	strh	r1, [r2, #0]
 802087c:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 802087e:	693b      	ldr	r3, [r7, #16]
 8020880:	3318      	adds	r3, #24
 8020882:	1cd8      	adds	r0, r3, #3
 8020884:	f107 030c 	add.w	r3, r7, #12
 8020888:	3301      	adds	r3, #1
 802088a:	2203      	movs	r2, #3
 802088c:	4619      	mov	r1, r3
 802088e:	f006 fb1b 	bl	8026ec8 <memcpy>
    s->mac[3] &= 0x7F;
 8020892:	693b      	ldr	r3, [r7, #16]
 8020894:	7edb      	ldrb	r3, [r3, #27]
 8020896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802089a:	b2da      	uxtb	r2, r3
 802089c:	693b      	ldr	r3, [r7, #16]
 802089e:	76da      	strb	r2, [r3, #27]
      send_syn(c);
      settmout(c, MIP_TTYPE_SYN);
      c->is_connecting = 1;
    }
  }
}
 80208a0:	e028      	b.n	80208f4 <mg_connect_resolved+0x208>
    struct connstate *s = (struct connstate *) (c + 1);
 80208a2:	687b      	ldr	r3, [r7, #4]
 80208a4:	33b0      	adds	r3, #176	@ 0xb0
 80208a6:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 80208a8:	697b      	ldr	r3, [r7, #20]
 80208aa:	f103 0018 	add.w	r0, r3, #24
 80208ae:	69fb      	ldr	r3, [r7, #28]
 80208b0:	3346      	adds	r3, #70	@ 0x46
 80208b2:	2206      	movs	r2, #6
 80208b4:	4619      	mov	r1, r3
 80208b6:	f006 fb07 	bl	8026ec8 <memcpy>
    if (c->is_udp) {
 80208ba:	687b      	ldr	r3, [r7, #4]
 80208bc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80208c0:	f003 0301 	and.w	r3, r3, #1
 80208c4:	b2db      	uxtb	r3, r3
 80208c6:	2b00      	cmp	r3, #0
 80208c8:	d005      	beq.n	80208d6 <mg_connect_resolved+0x1ea>
      mg_call(c, MG_EV_CONNECT, NULL);
 80208ca:	2200      	movs	r2, #0
 80208cc:	2104      	movs	r1, #4
 80208ce:	6878      	ldr	r0, [r7, #4]
 80208d0:	f7f4 fece 	bl	8015670 <mg_call>
}
 80208d4:	e00e      	b.n	80208f4 <mg_connect_resolved+0x208>
      send_syn(c);
 80208d6:	6878      	ldr	r0, [r7, #4]
 80208d8:	f7ff fed2 	bl	8020680 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 80208dc:	2103      	movs	r1, #3
 80208de:	6878      	ldr	r0, [r7, #4]
 80208e0:	f7fd f920 	bl	801db24 <settmout>
      c->is_connecting = 1;
 80208e4:	687a      	ldr	r2, [r7, #4]
 80208e6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80208ea:	f043 0320 	orr.w	r3, r3, #32
 80208ee:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
}
 80208f2:	e7ff      	b.n	80208f4 <mg_connect_resolved+0x208>
 80208f4:	bf00      	nop
 80208f6:	3720      	adds	r7, #32
 80208f8:	46bd      	mov	sp, r7
 80208fa:	bd80      	pop	{r7, pc}
 80208fc:	20000298 	.word	0x20000298
 8020900:	08033f84 	.word	0x08033f84
 8020904:	080310c8 	.word	0x080310c8
 8020908:	080210a5 	.word	0x080210a5
 802090c:	08032ba8 	.word	0x08032ba8
 8020910:	08032bb8 	.word	0x08032bb8
 8020914:	08032bcc 	.word	0x08032bcc

08020918 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 8020918:	b580      	push	{r7, lr}
 802091a:	b082      	sub	sp, #8
 802091c:	af00      	add	r7, sp, #0
 802091e:	6078      	str	r0, [r7, #4]
 8020920:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 8020922:	6838      	ldr	r0, [r7, #0]
 8020924:	f001 fe34 	bl	8022590 <mg_url_port>
 8020928:	4603      	mov	r3, r0
 802092a:	4618      	mov	r0, r3
 802092c:	f001 ff2d 	bl	802278a <mg_ntohs>
 8020930:	4603      	mov	r3, r0
 8020932:	461a      	mov	r2, r3
 8020934:	687b      	ldr	r3, [r7, #4]
 8020936:	831a      	strh	r2, [r3, #24]
  return true;
 8020938:	2301      	movs	r3, #1
}
 802093a:	4618      	mov	r0, r3
 802093c:	3708      	adds	r7, #8
 802093e:	46bd      	mov	sp, r7
 8020940:	bd80      	pop	{r7, pc}
	...

08020944 <write_conn>:

static void write_conn(struct mg_connection *c) {
 8020944:	b580      	push	{r7, lr}
 8020946:	b084      	sub	sp, #16
 8020948:	af00      	add	r7, sp, #0
 802094a:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 802094c:	687b      	ldr	r3, [r7, #4]
 802094e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020956:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 8020958:	2b00      	cmp	r3, #0
 802095a:	d009      	beq.n	8020970 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 802095c:	687b      	ldr	r3, [r7, #4]
 802095e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8020960:	687b      	ldr	r3, [r7, #4]
 8020962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020964:	461a      	mov	r2, r3
 8020966:	6878      	ldr	r0, [r7, #4]
 8020968:	f001 fce7 	bl	802233a <mg_tls_send>
 802096c:	4603      	mov	r3, r0
 802096e:	e008      	b.n	8020982 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8020974:	687b      	ldr	r3, [r7, #4]
 8020976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020978:	461a      	mov	r2, r3
 802097a:	6878      	ldr	r0, [r7, #4]
 802097c:	f7fe fce8 	bl	801f350 <mg_io_send>
 8020980:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8020982:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 8020984:	68fb      	ldr	r3, [r7, #12]
 8020986:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802098a:	d104      	bne.n	8020996 <write_conn+0x52>
    mg_error(c, "tx err");
 802098c:	490c      	ldr	r1, [pc, #48]	@ (80209c0 <write_conn+0x7c>)
 802098e:	6878      	ldr	r0, [r7, #4]
 8020990:	f7f4 fe8e 	bl	80156b0 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 8020994:	e010      	b.n	80209b8 <write_conn+0x74>
  } else if (len > 0) {
 8020996:	68fb      	ldr	r3, [r7, #12]
 8020998:	2b00      	cmp	r3, #0
 802099a:	dd0d      	ble.n	80209b8 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 802099c:	687b      	ldr	r3, [r7, #4]
 802099e:	3348      	adds	r3, #72	@ 0x48
 80209a0:	68fa      	ldr	r2, [r7, #12]
 80209a2:	2100      	movs	r1, #0
 80209a4:	4618      	mov	r0, r3
 80209a6:	f7f9 fb37 	bl	801a018 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 80209aa:	f107 030c 	add.w	r3, r7, #12
 80209ae:	461a      	mov	r2, r3
 80209b0:	2108      	movs	r1, #8
 80209b2:	6878      	ldr	r0, [r7, #4]
 80209b4:	f7f4 fe5c 	bl	8015670 <mg_call>
}
 80209b8:	bf00      	nop
 80209ba:	3710      	adds	r7, #16
 80209bc:	46bd      	mov	sp, r7
 80209be:	bd80      	pop	{r7, pc}
 80209c0:	08032bd0 	.word	0x08032bd0

080209c4 <init_closure>:

static void init_closure(struct mg_connection *c) {
 80209c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80209c6:	b08f      	sub	sp, #60	@ 0x3c
 80209c8:	af06      	add	r7, sp, #24
 80209ca:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 80209cc:	68fb      	ldr	r3, [r7, #12]
 80209ce:	33b0      	adds	r3, #176	@ 0xb0
 80209d0:	61fb      	str	r3, [r7, #28]
  if (c->is_udp == false && c->is_listening == false &&
 80209d2:	68fb      	ldr	r3, [r7, #12]
 80209d4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80209d8:	f003 0301 	and.w	r3, r3, #1
 80209dc:	b2db      	uxtb	r3, r3
 80209de:	2b00      	cmp	r3, #0
 80209e0:	d13f      	bne.n	8020a62 <init_closure+0x9e>
 80209e2:	68fb      	ldr	r3, [r7, #12]
 80209e4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80209e8:	f003 0301 	and.w	r3, r3, #1
 80209ec:	b2db      	uxtb	r3, r3
 80209ee:	2b00      	cmp	r3, #0
 80209f0:	d137      	bne.n	8020a62 <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 80209f2:	68fb      	ldr	r3, [r7, #12]
 80209f4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80209f8:	f003 0320 	and.w	r3, r3, #32
 80209fc:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 80209fe:	2b00      	cmp	r3, #0
 8020a00:	d12f      	bne.n	8020a62 <init_closure+0x9e>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8020a02:	68fb      	ldr	r3, [r7, #12]
 8020a04:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 8020a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020a08:	61bb      	str	r3, [r7, #24]
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8020a0a:	68fb      	ldr	r3, [r7, #12]
 8020a0c:	331c      	adds	r3, #28
 8020a0e:	681b      	ldr	r3, [r3, #0]
 8020a10:	617b      	str	r3, [r7, #20]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 8020a12:	69fb      	ldr	r3, [r7, #28]
 8020a14:	f103 0618 	add.w	r6, r3, #24
 8020a18:	697b      	ldr	r3, [r7, #20]
 8020a1a:	60bb      	str	r3, [r7, #8]
 8020a1c:	68fb      	ldr	r3, [r7, #12]
 8020a1e:	8b1c      	ldrh	r4, [r3, #24]
 8020a20:	68fb      	ldr	r3, [r7, #12]
 8020a22:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8020a24:	69fb      	ldr	r3, [r7, #28]
 8020a26:	681b      	ldr	r3, [r3, #0]
 8020a28:	4618      	mov	r0, r3
 8020a2a:	f001 fe95 	bl	8022758 <mg_ntohl>
 8020a2e:	6078      	str	r0, [r7, #4]
 8020a30:	69fb      	ldr	r3, [r7, #28]
 8020a32:	685b      	ldr	r3, [r3, #4]
 8020a34:	4618      	mov	r0, r3
 8020a36:	f001 fe8f 	bl	8022758 <mg_ntohl>
 8020a3a:	4603      	mov	r3, r0
 8020a3c:	2200      	movs	r2, #0
 8020a3e:	9205      	str	r2, [sp, #20]
 8020a40:	2200      	movs	r2, #0
 8020a42:	9204      	str	r2, [sp, #16]
 8020a44:	9303      	str	r3, [sp, #12]
 8020a46:	6879      	ldr	r1, [r7, #4]
 8020a48:	9102      	str	r1, [sp, #8]
 8020a4a:	9501      	str	r5, [sp, #4]
 8020a4c:	9400      	str	r4, [sp, #0]
 8020a4e:	2311      	movs	r3, #17
 8020a50:	68ba      	ldr	r2, [r7, #8]
 8020a52:	4631      	mov	r1, r6
 8020a54:	69b8      	ldr	r0, [r7, #24]
 8020a56:	f7fe fa23 	bl	801eea0 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 8020a5a:	2104      	movs	r1, #4
 8020a5c:	68f8      	ldr	r0, [r7, #12]
 8020a5e:	f7fd f861 	bl	801db24 <settmout>
  }
}
 8020a62:	bf00      	nop
 8020a64:	3724      	adds	r7, #36	@ 0x24
 8020a66:	46bd      	mov	sp, r7
 8020a68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020a6a <close_conn>:

static void close_conn(struct mg_connection *c) {
 8020a6a:	b580      	push	{r7, lr}
 8020a6c:	b084      	sub	sp, #16
 8020a6e:	af00      	add	r7, sp, #0
 8020a70:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	33b0      	adds	r3, #176	@ 0xb0
 8020a76:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8020a78:	68fb      	ldr	r3, [r7, #12]
 8020a7a:	3320      	adds	r3, #32
 8020a7c:	4618      	mov	r0, r3
 8020a7e:	f7f9 fb16 	bl	801a0ae <mg_iobuf_free>
  mg_close_conn(c);
 8020a82:	6878      	ldr	r0, [r7, #4]
 8020a84:	f7fc fddc 	bl	801d640 <mg_close_conn>
}
 8020a88:	bf00      	nop
 8020a8a:	3710      	adds	r7, #16
 8020a8c:	46bd      	mov	sp, r7
 8020a8e:	bd80      	pop	{r7, pc}

08020a90 <can_write>:

static bool can_write(struct mg_connection *c) {
 8020a90:	b480      	push	{r7}
 8020a92:	b083      	sub	sp, #12
 8020a94:	af00      	add	r7, sp, #0
 8020a96:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8020a98:	687b      	ldr	r3, [r7, #4]
 8020a9a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020a9e:	f003 0320 	and.w	r3, r3, #32
 8020aa2:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8020aa4:	2b00      	cmp	r3, #0
 8020aa6:	d11d      	bne.n	8020ae4 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020aae:	f003 0308 	and.w	r3, r3, #8
 8020ab2:	b2db      	uxtb	r3, r3
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	d115      	bne.n	8020ae4 <can_write+0x54>
 8020ab8:	687b      	ldr	r3, [r7, #4]
 8020aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	d011      	beq.n	8020ae4 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8020ac0:	687b      	ldr	r3, [r7, #4]
 8020ac2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020ac6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8020aca:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8020acc:	2b00      	cmp	r3, #0
 8020ace:	d109      	bne.n	8020ae4 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020ad6:	f003 0310 	and.w	r3, r3, #16
 8020ada:	b2db      	uxtb	r3, r3
 8020adc:	2b00      	cmp	r3, #0
 8020ade:	d101      	bne.n	8020ae4 <can_write+0x54>
 8020ae0:	2301      	movs	r3, #1
 8020ae2:	e000      	b.n	8020ae6 <can_write+0x56>
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	f003 0301 	and.w	r3, r3, #1
 8020aea:	b2db      	uxtb	r3, r3
}
 8020aec:	4618      	mov	r0, r3
 8020aee:	370c      	adds	r7, #12
 8020af0:	46bd      	mov	sp, r7
 8020af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020af6:	4770      	bx	lr

08020af8 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8020af8:	b5b0      	push	{r4, r5, r7, lr}
 8020afa:	b08c      	sub	sp, #48	@ 0x30
 8020afc:	af04      	add	r7, sp, #16
 8020afe:	6078      	str	r0, [r7, #4]
 8020b00:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 8020b02:	687b      	ldr	r3, [r7, #4]
 8020b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020b06:	61bb      	str	r3, [r7, #24]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 8020b08:	f001 fed0 	bl	80228ac <mg_millis>
 8020b0c:	4602      	mov	r2, r0
 8020b0e:	460b      	mov	r3, r1
 8020b10:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 8020b14:	687b      	ldr	r3, [r7, #4]
 8020b16:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8020b1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020b1e:	4608      	mov	r0, r1
 8020b20:	f001 fb77 	bl	8022212 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8020b24:	69bb      	ldr	r3, [r7, #24]
 8020b26:	2b00      	cmp	r3, #0
 8020b28:	f000 80aa 	beq.w	8020c80 <mg_mgr_poll+0x188>
 8020b2c:	69bb      	ldr	r3, [r7, #24]
 8020b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020b30:	2b00      	cmp	r3, #0
 8020b32:	f000 80a5 	beq.w	8020c80 <mg_mgr_poll+0x188>
  mg_tcpip_poll(ifp, now);
 8020b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020b3a:	69b8      	ldr	r0, [r7, #24]
 8020b3c:	f7ff fab6 	bl	80200ac <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8020b40:	687b      	ldr	r3, [r7, #4]
 8020b42:	681b      	ldr	r3, [r3, #0]
 8020b44:	61fb      	str	r3, [r7, #28]
 8020b46:	e096      	b.n	8020c76 <mg_mgr_poll+0x17e>
    tmp = c->next;
 8020b48:	69fb      	ldr	r3, [r7, #28]
 8020b4a:	681b      	ldr	r3, [r3, #0]
 8020b4c:	617b      	str	r3, [r7, #20]
    struct connstate *s = (struct connstate *) (c + 1);
 8020b4e:	69fb      	ldr	r3, [r7, #28]
 8020b50:	33b0      	adds	r3, #176	@ 0xb0
 8020b52:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 8020b54:	f107 0308 	add.w	r3, r7, #8
 8020b58:	461a      	mov	r2, r3
 8020b5a:	2102      	movs	r1, #2
 8020b5c:	69f8      	ldr	r0, [r7, #28]
 8020b5e:	f7f4 fd87 	bl	8015670 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8020b62:	4b49      	ldr	r3, [pc, #292]	@ (8020c88 <mg_mgr_poll+0x190>)
 8020b64:	681b      	ldr	r3, [r3, #0]
 8020b66:	2b03      	cmp	r3, #3
 8020b68:	dd48      	ble.n	8020bfc <mg_mgr_poll+0x104>
 8020b6a:	4b48      	ldr	r3, [pc, #288]	@ (8020c8c <mg_mgr_poll+0x194>)
 8020b6c:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8020b70:	4947      	ldr	r1, [pc, #284]	@ (8020c90 <mg_mgr_poll+0x198>)
 8020b72:	2004      	movs	r0, #4
 8020b74:	f7fa f962 	bl	801ae3c <mg_log_prefix>
 8020b78:	69fb      	ldr	r3, [r7, #28]
 8020b7a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8020b7c:	69fb      	ldr	r3, [r7, #28]
 8020b7e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020b86:	b2db      	uxtb	r3, r3
 8020b88:	2b00      	cmp	r3, #0
 8020b8a:	d001      	beq.n	8020b90 <mg_mgr_poll+0x98>
 8020b8c:	2454      	movs	r4, #84	@ 0x54
 8020b8e:	e000      	b.n	8020b92 <mg_mgr_poll+0x9a>
 8020b90:	2474      	movs	r4, #116	@ 0x74
 8020b92:	69fb      	ldr	r3, [r7, #28]
 8020b94:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020b98:	f003 0320 	and.w	r3, r3, #32
 8020b9c:	b2db      	uxtb	r3, r3
 8020b9e:	2b00      	cmp	r3, #0
 8020ba0:	d001      	beq.n	8020ba6 <mg_mgr_poll+0xae>
 8020ba2:	2543      	movs	r5, #67	@ 0x43
 8020ba4:	e000      	b.n	8020ba8 <mg_mgr_poll+0xb0>
 8020ba6:	2563      	movs	r5, #99	@ 0x63
 8020ba8:	69fb      	ldr	r3, [r7, #28]
 8020baa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020bae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8020bb2:	b2db      	uxtb	r3, r3
 8020bb4:	2b00      	cmp	r3, #0
 8020bb6:	d001      	beq.n	8020bbc <mg_mgr_poll+0xc4>
 8020bb8:	2348      	movs	r3, #72	@ 0x48
 8020bba:	e000      	b.n	8020bbe <mg_mgr_poll+0xc6>
 8020bbc:	2368      	movs	r3, #104	@ 0x68
 8020bbe:	69fa      	ldr	r2, [r7, #28]
 8020bc0:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 8020bc4:	f002 0208 	and.w	r2, r2, #8
 8020bc8:	b2d2      	uxtb	r2, r2
 8020bca:	2a00      	cmp	r2, #0
 8020bcc:	d001      	beq.n	8020bd2 <mg_mgr_poll+0xda>
 8020bce:	2252      	movs	r2, #82	@ 0x52
 8020bd0:	e000      	b.n	8020bd4 <mg_mgr_poll+0xdc>
 8020bd2:	2272      	movs	r2, #114	@ 0x72
 8020bd4:	69f9      	ldr	r1, [r7, #28]
 8020bd6:	f891 10ad 	ldrb.w	r1, [r1, #173]	@ 0xad
 8020bda:	f001 0120 	and.w	r1, r1, #32
 8020bde:	b2c9      	uxtb	r1, r1
 8020be0:	2900      	cmp	r1, #0
 8020be2:	d001      	beq.n	8020be8 <mg_mgr_poll+0xf0>
 8020be4:	2143      	movs	r1, #67	@ 0x43
 8020be6:	e000      	b.n	8020bea <mg_mgr_poll+0xf2>
 8020be8:	2163      	movs	r1, #99	@ 0x63
 8020bea:	9102      	str	r1, [sp, #8]
 8020bec:	9201      	str	r2, [sp, #4]
 8020bee:	9300      	str	r3, [sp, #0]
 8020bf0:	462b      	mov	r3, r5
 8020bf2:	4622      	mov	r2, r4
 8020bf4:	4601      	mov	r1, r0
 8020bf6:	4827      	ldr	r0, [pc, #156]	@ (8020c94 <mg_mgr_poll+0x19c>)
 8020bf8:	f7fa f970 	bl	801aedc <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0)
 8020bfc:	69fb      	ldr	r3, [r7, #28]
 8020bfe:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020c06:	b2db      	uxtb	r3, r3
 8020c08:	2b00      	cmp	r3, #0
 8020c0a:	d00b      	beq.n	8020c24 <mg_mgr_poll+0x12c>
 8020c0c:	69f8      	ldr	r0, [r7, #28]
 8020c0e:	f001 fbad 	bl	802236c <mg_tls_pending>
 8020c12:	4603      	mov	r3, r0
 8020c14:	2b00      	cmp	r3, #0
 8020c16:	d005      	beq.n	8020c24 <mg_mgr_poll+0x12c>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 8020c18:	69fb      	ldr	r3, [r7, #28]
 8020c1a:	3368      	adds	r3, #104	@ 0x68
 8020c1c:	4619      	mov	r1, r3
 8020c1e:	69f8      	ldr	r0, [r7, #28]
 8020c20:	f7fe fc0e 	bl	801f440 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 8020c24:	69f8      	ldr	r0, [r7, #28]
 8020c26:	f7ff ff33 	bl	8020a90 <can_write>
 8020c2a:	4603      	mov	r3, r0
 8020c2c:	2b00      	cmp	r3, #0
 8020c2e:	d002      	beq.n	8020c36 <mg_mgr_poll+0x13e>
 8020c30:	69f8      	ldr	r0, [r7, #28]
 8020c32:	f7ff fe87 	bl	8020944 <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8020c36:	69fb      	ldr	r3, [r7, #28]
 8020c38:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020c3c:	f003 0310 	and.w	r3, r3, #16
 8020c40:	b2db      	uxtb	r3, r3
 8020c42:	2b00      	cmp	r3, #0
 8020c44:	d00a      	beq.n	8020c5c <mg_mgr_poll+0x164>
 8020c46:	69fb      	ldr	r3, [r7, #28]
 8020c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020c4a:	2b00      	cmp	r3, #0
 8020c4c:	d106      	bne.n	8020c5c <mg_mgr_poll+0x164>
 8020c4e:	693b      	ldr	r3, [r7, #16]
 8020c50:	7f9b      	ldrb	r3, [r3, #30]
 8020c52:	2b04      	cmp	r3, #4
 8020c54:	d002      	beq.n	8020c5c <mg_mgr_poll+0x164>
      init_closure(c);
 8020c56:	69f8      	ldr	r0, [r7, #28]
 8020c58:	f7ff feb4 	bl	80209c4 <init_closure>
    if (c->is_closing) close_conn(c);
 8020c5c:	69fb      	ldr	r3, [r7, #28]
 8020c5e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020c62:	f003 0320 	and.w	r3, r3, #32
 8020c66:	b2db      	uxtb	r3, r3
 8020c68:	2b00      	cmp	r3, #0
 8020c6a:	d002      	beq.n	8020c72 <mg_mgr_poll+0x17a>
 8020c6c:	69f8      	ldr	r0, [r7, #28]
 8020c6e:	f7ff fefc 	bl	8020a6a <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8020c72:	697b      	ldr	r3, [r7, #20]
 8020c74:	61fb      	str	r3, [r7, #28]
 8020c76:	69fb      	ldr	r3, [r7, #28]
 8020c78:	2b00      	cmp	r3, #0
 8020c7a:	f47f af65 	bne.w	8020b48 <mg_mgr_poll+0x50>
 8020c7e:	e000      	b.n	8020c82 <mg_mgr_poll+0x18a>
  if (ifp == NULL || ifp->driver == NULL) return;
 8020c80:	bf00      	nop
  }
  (void) ms;
}
 8020c82:	3720      	adds	r7, #32
 8020c84:	46bd      	mov	sp, r7
 8020c86:	bdb0      	pop	{r4, r5, r7, pc}
 8020c88:	20000298 	.word	0x20000298
 8020c8c:	08033f98 	.word	0x08033f98
 8020c90:	080310c8 	.word	0x080310c8
 8020c94:	08032bd8 	.word	0x08032bd8

08020c98 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8020c98:	b5b0      	push	{r4, r5, r7, lr}
 8020c9a:	b08c      	sub	sp, #48	@ 0x30
 8020c9c:	af04      	add	r7, sp, #16
 8020c9e:	60f8      	str	r0, [r7, #12]
 8020ca0:	60b9      	str	r1, [r7, #8]
 8020ca2:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8020ca4:	68fb      	ldr	r3, [r7, #12]
 8020ca6:	685b      	ldr	r3, [r3, #4]
 8020ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020caa:	61bb      	str	r3, [r7, #24]
  bool res = false;
 8020cac:	2300      	movs	r3, #0
 8020cae:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8020cb0:	68fb      	ldr	r3, [r7, #12]
 8020cb2:	331c      	adds	r3, #28
 8020cb4:	681b      	ldr	r3, [r3, #0]
 8020cb6:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8020cb8:	69bb      	ldr	r3, [r7, #24]
 8020cba:	689b      	ldr	r3, [r3, #8]
 8020cbc:	2b00      	cmp	r3, #0
 8020cbe:	d004      	beq.n	8020cca <mg_send+0x32>
 8020cc0:	69bb      	ldr	r3, [r7, #24]
 8020cc2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020cc6:	2b03      	cmp	r3, #3
 8020cc8:	d004      	beq.n	8020cd4 <mg_send+0x3c>
    mg_error(c, "net down");
 8020cca:	4921      	ldr	r1, [pc, #132]	@ (8020d50 <mg_send+0xb8>)
 8020ccc:	68f8      	ldr	r0, [r7, #12]
 8020cce:	f7f4 fcef 	bl	80156b0 <mg_error>
 8020cd2:	e037      	b.n	8020d44 <mg_send+0xac>
  } else if (c->is_udp) {
 8020cd4:	68fb      	ldr	r3, [r7, #12]
 8020cd6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020cda:	f003 0301 	and.w	r3, r3, #1
 8020cde:	b2db      	uxtb	r3, r3
 8020ce0:	2b00      	cmp	r3, #0
 8020ce2:	d020      	beq.n	8020d26 <mg_send+0x8e>
    struct connstate *s = (struct connstate *) (c + 1);
 8020ce4:	68fb      	ldr	r3, [r7, #12]
 8020ce6:	33b0      	adds	r3, #176	@ 0xb0
 8020ce8:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 8020cea:	6879      	ldr	r1, [r7, #4]
 8020cec:	68f8      	ldr	r0, [r7, #12]
 8020cee:	f7fe faa1 	bl	801f234 <trim_len>
 8020cf2:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8020cf4:	697b      	ldr	r3, [r7, #20]
 8020cf6:	f103 0018 	add.w	r0, r3, #24
 8020cfa:	69bb      	ldr	r3, [r7, #24]
 8020cfc:	689c      	ldr	r4, [r3, #8]
 8020cfe:	68fb      	ldr	r3, [r7, #12]
 8020d00:	8b1d      	ldrh	r5, [r3, #24]
 8020d02:	693b      	ldr	r3, [r7, #16]
 8020d04:	68fa      	ldr	r2, [r7, #12]
 8020d06:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8020d08:	6879      	ldr	r1, [r7, #4]
 8020d0a:	9103      	str	r1, [sp, #12]
 8020d0c:	68b9      	ldr	r1, [r7, #8]
 8020d0e:	9102      	str	r1, [sp, #8]
 8020d10:	9201      	str	r2, [sp, #4]
 8020d12:	9300      	str	r3, [sp, #0]
 8020d14:	462b      	mov	r3, r5
 8020d16:	4622      	mov	r2, r4
 8020d18:	4601      	mov	r1, r0
 8020d1a:	69b8      	ldr	r0, [r7, #24]
 8020d1c:	f7fd f8c2 	bl	801dea4 <tx_udp>
    res = true;
 8020d20:	2301      	movs	r3, #1
 8020d22:	77fb      	strb	r3, [r7, #31]
 8020d24:	e00e      	b.n	8020d44 <mg_send+0xac>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8020d26:	68fb      	ldr	r3, [r7, #12]
 8020d28:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8020d2c:	68fb      	ldr	r3, [r7, #12]
 8020d2e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8020d30:	687b      	ldr	r3, [r7, #4]
 8020d32:	68ba      	ldr	r2, [r7, #8]
 8020d34:	f7f9 f91e 	bl	8019f74 <mg_iobuf_add>
 8020d38:	4603      	mov	r3, r0
 8020d3a:	2b00      	cmp	r3, #0
 8020d3c:	bf14      	ite	ne
 8020d3e:	2301      	movne	r3, #1
 8020d40:	2300      	moveq	r3, #0
 8020d42:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 8020d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8020d46:	4618      	mov	r0, r3
 8020d48:	3720      	adds	r7, #32
 8020d4a:	46bd      	mov	sp, r7
 8020d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8020d4e:	bf00      	nop
 8020d50:	08032bec 	.word	0x08032bec

08020d54 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8020d54:	b580      	push	{r7, lr}
 8020d56:	b084      	sub	sp, #16
 8020d58:	af00      	add	r7, sp, #0
 8020d5a:	4603      	mov	r3, r0
 8020d5c:	6039      	str	r1, [r7, #0]
 8020d5e:	71fb      	strb	r3, [r7, #7]
 8020d60:	4613      	mov	r3, r2
 8020d62:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8020d64:	683b      	ldr	r3, [r7, #0]
 8020d66:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8020d68:	79bb      	ldrb	r3, [r7, #6]
 8020d6a:	2b00      	cmp	r3, #0
 8020d6c:	d00d      	beq.n	8020d8a <mg_pfn_iobuf_private+0x36>
 8020d6e:	68fb      	ldr	r3, [r7, #12]
 8020d70:	689b      	ldr	r3, [r3, #8]
 8020d72:	1c9a      	adds	r2, r3, #2
 8020d74:	68fb      	ldr	r3, [r7, #12]
 8020d76:	685b      	ldr	r3, [r3, #4]
 8020d78:	429a      	cmp	r2, r3
 8020d7a:	d906      	bls.n	8020d8a <mg_pfn_iobuf_private+0x36>
 8020d7c:	68fb      	ldr	r3, [r7, #12]
 8020d7e:	689b      	ldr	r3, [r3, #8]
 8020d80:	3302      	adds	r3, #2
 8020d82:	4619      	mov	r1, r3
 8020d84:	68f8      	ldr	r0, [r7, #12]
 8020d86:	f7f9 f869 	bl	8019e5c <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8020d8a:	68fb      	ldr	r3, [r7, #12]
 8020d8c:	689b      	ldr	r3, [r3, #8]
 8020d8e:	1c9a      	adds	r2, r3, #2
 8020d90:	68fb      	ldr	r3, [r7, #12]
 8020d92:	685b      	ldr	r3, [r3, #4]
 8020d94:	429a      	cmp	r2, r3
 8020d96:	d811      	bhi.n	8020dbc <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8020d98:	68fb      	ldr	r3, [r7, #12]
 8020d9a:	681a      	ldr	r2, [r3, #0]
 8020d9c:	68fb      	ldr	r3, [r7, #12]
 8020d9e:	689b      	ldr	r3, [r3, #8]
 8020da0:	1c58      	adds	r0, r3, #1
 8020da2:	68f9      	ldr	r1, [r7, #12]
 8020da4:	6088      	str	r0, [r1, #8]
 8020da6:	4413      	add	r3, r2
 8020da8:	79fa      	ldrb	r2, [r7, #7]
 8020daa:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8020dac:	68fb      	ldr	r3, [r7, #12]
 8020dae:	681a      	ldr	r2, [r3, #0]
 8020db0:	68fb      	ldr	r3, [r7, #12]
 8020db2:	689b      	ldr	r3, [r3, #8]
 8020db4:	4413      	add	r3, r2
 8020db6:	2200      	movs	r2, #0
 8020db8:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8020dba:	e00f      	b.n	8020ddc <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8020dbc:	68fb      	ldr	r3, [r7, #12]
 8020dbe:	689a      	ldr	r2, [r3, #8]
 8020dc0:	68fb      	ldr	r3, [r7, #12]
 8020dc2:	685b      	ldr	r3, [r3, #4]
 8020dc4:	429a      	cmp	r2, r3
 8020dc6:	d209      	bcs.n	8020ddc <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8020dc8:	68fb      	ldr	r3, [r7, #12]
 8020dca:	681a      	ldr	r2, [r3, #0]
 8020dcc:	68fb      	ldr	r3, [r7, #12]
 8020dce:	689b      	ldr	r3, [r3, #8]
 8020dd0:	1c58      	adds	r0, r3, #1
 8020dd2:	68f9      	ldr	r1, [r7, #12]
 8020dd4:	6088      	str	r0, [r1, #8]
 8020dd6:	4413      	add	r3, r2
 8020dd8:	2200      	movs	r2, #0
 8020dda:	701a      	strb	r2, [r3, #0]
}
 8020ddc:	bf00      	nop
 8020dde:	3710      	adds	r7, #16
 8020de0:	46bd      	mov	sp, r7
 8020de2:	bd80      	pop	{r7, pc}

08020de4 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8020de4:	b580      	push	{r7, lr}
 8020de6:	b082      	sub	sp, #8
 8020de8:	af00      	add	r7, sp, #0
 8020dea:	4603      	mov	r3, r0
 8020dec:	6039      	str	r1, [r7, #0]
 8020dee:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8020df0:	79fb      	ldrb	r3, [r7, #7]
 8020df2:	2200      	movs	r2, #0
 8020df4:	6839      	ldr	r1, [r7, #0]
 8020df6:	4618      	mov	r0, r3
 8020df8:	f7ff ffac 	bl	8020d54 <mg_pfn_iobuf_private>
}
 8020dfc:	bf00      	nop
 8020dfe:	3708      	adds	r7, #8
 8020e00:	46bd      	mov	sp, r7
 8020e02:	bd80      	pop	{r7, pc}

08020e04 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8020e04:	b580      	push	{r7, lr}
 8020e06:	b082      	sub	sp, #8
 8020e08:	af00      	add	r7, sp, #0
 8020e0a:	4603      	mov	r3, r0
 8020e0c:	6039      	str	r1, [r7, #0]
 8020e0e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8020e10:	79fb      	ldrb	r3, [r7, #7]
 8020e12:	2201      	movs	r2, #1
 8020e14:	6839      	ldr	r1, [r7, #0]
 8020e16:	4618      	mov	r0, r3
 8020e18:	f7ff ff9c 	bl	8020d54 <mg_pfn_iobuf_private>
}
 8020e1c:	bf00      	nop
 8020e1e:	3708      	adds	r7, #8
 8020e20:	46bd      	mov	sp, r7
 8020e22:	bd80      	pop	{r7, pc}

08020e24 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8020e24:	b580      	push	{r7, lr}
 8020e26:	b08a      	sub	sp, #40	@ 0x28
 8020e28:	af00      	add	r7, sp, #0
 8020e2a:	60f8      	str	r0, [r7, #12]
 8020e2c:	60b9      	str	r1, [r7, #8]
 8020e2e:	607a      	str	r2, [r7, #4]
 8020e30:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8020e32:	68fb      	ldr	r3, [r7, #12]
 8020e34:	617b      	str	r3, [r7, #20]
 8020e36:	68bb      	ldr	r3, [r7, #8]
 8020e38:	61bb      	str	r3, [r7, #24]
 8020e3a:	2300      	movs	r3, #0
 8020e3c:	61fb      	str	r3, [r7, #28]
 8020e3e:	2300      	movs	r3, #0
 8020e40:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8020e42:	f107 0114 	add.w	r1, r7, #20
 8020e46:	683b      	ldr	r3, [r7, #0]
 8020e48:	687a      	ldr	r2, [r7, #4]
 8020e4a:	4809      	ldr	r0, [pc, #36]	@ (8020e70 <mg_vsnprintf+0x4c>)
 8020e4c:	f7f5 f942 	bl	80160d4 <mg_vxprintf>
 8020e50:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 8020e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020e54:	68bb      	ldr	r3, [r7, #8]
 8020e56:	429a      	cmp	r2, r3
 8020e58:	d204      	bcs.n	8020e64 <mg_vsnprintf+0x40>
 8020e5a:	68fa      	ldr	r2, [r7, #12]
 8020e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e5e:	4413      	add	r3, r2
 8020e60:	2200      	movs	r2, #0
 8020e62:	701a      	strb	r2, [r3, #0]
  return n;
 8020e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8020e66:	4618      	mov	r0, r3
 8020e68:	3728      	adds	r7, #40	@ 0x28
 8020e6a:	46bd      	mov	sp, r7
 8020e6c:	bd80      	pop	{r7, pc}
 8020e6e:	bf00      	nop
 8020e70:	08020de5 	.word	0x08020de5

08020e74 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8020e74:	b40c      	push	{r2, r3}
 8020e76:	b580      	push	{r7, lr}
 8020e78:	b084      	sub	sp, #16
 8020e7a:	af00      	add	r7, sp, #0
 8020e7c:	6078      	str	r0, [r7, #4]
 8020e7e:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8020e80:	f107 031c 	add.w	r3, r7, #28
 8020e84:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8020e86:	f107 0308 	add.w	r3, r7, #8
 8020e8a:	69ba      	ldr	r2, [r7, #24]
 8020e8c:	6839      	ldr	r1, [r7, #0]
 8020e8e:	6878      	ldr	r0, [r7, #4]
 8020e90:	f7ff ffc8 	bl	8020e24 <mg_vsnprintf>
 8020e94:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8020e96:	68fb      	ldr	r3, [r7, #12]
}
 8020e98:	4618      	mov	r0, r3
 8020e9a:	3710      	adds	r7, #16
 8020e9c:	46bd      	mov	sp, r7
 8020e9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020ea2:	b002      	add	sp, #8
 8020ea4:	4770      	bx	lr
	...

08020ea8 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 8020ea8:	b580      	push	{r7, lr}
 8020eaa:	b086      	sub	sp, #24
 8020eac:	af00      	add	r7, sp, #0
 8020eae:	6078      	str	r0, [r7, #4]
 8020eb0:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 8020eb2:	2300      	movs	r3, #0
 8020eb4:	60bb      	str	r3, [r7, #8]
 8020eb6:	2300      	movs	r3, #0
 8020eb8:	60fb      	str	r3, [r7, #12]
 8020eba:	2300      	movs	r3, #0
 8020ebc:	613b      	str	r3, [r7, #16]
 8020ebe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020ec2:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 8020ec4:	f107 0108 	add.w	r1, r7, #8
 8020ec8:	683b      	ldr	r3, [r7, #0]
 8020eca:	687a      	ldr	r2, [r7, #4]
 8020ecc:	4803      	ldr	r0, [pc, #12]	@ (8020edc <mg_vmprintf+0x34>)
 8020ece:	f7f5 f901 	bl	80160d4 <mg_vxprintf>
  return (char *) io.buf;
 8020ed2:	68bb      	ldr	r3, [r7, #8]
}
 8020ed4:	4618      	mov	r0, r3
 8020ed6:	3718      	adds	r7, #24
 8020ed8:	46bd      	mov	sp, r7
 8020eda:	bd80      	pop	{r7, pc}
 8020edc:	08020e05 	.word	0x08020e05

08020ee0 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 8020ee0:	b40f      	push	{r0, r1, r2, r3}
 8020ee2:	b580      	push	{r7, lr}
 8020ee4:	b082      	sub	sp, #8
 8020ee6:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 8020ee8:	f107 0314 	add.w	r3, r7, #20
 8020eec:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 8020eee:	463b      	mov	r3, r7
 8020ef0:	4619      	mov	r1, r3
 8020ef2:	6938      	ldr	r0, [r7, #16]
 8020ef4:	f7ff ffd8 	bl	8020ea8 <mg_vmprintf>
 8020ef8:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 8020efa:	687b      	ldr	r3, [r7, #4]
}
 8020efc:	4618      	mov	r0, r3
 8020efe:	3708      	adds	r7, #8
 8020f00:	46bd      	mov	sp, r7
 8020f02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020f06:	b004      	add	sp, #16
 8020f08:	4770      	bx	lr

08020f0a <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 8020f0a:	b580      	push	{r7, lr}
 8020f0c:	b082      	sub	sp, #8
 8020f0e:	af00      	add	r7, sp, #0
 8020f10:	4603      	mov	r3, r0
 8020f12:	6039      	str	r1, [r7, #0]
 8020f14:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8020f16:	79fb      	ldrb	r3, [r7, #7]
 8020f18:	4618      	mov	r0, r3
 8020f1a:	f003 fff3 	bl	8024f04 <putchar>
  (void) param;
}
 8020f1e:	bf00      	nop
 8020f20:	3708      	adds	r7, #8
 8020f22:	46bd      	mov	sp, r7
 8020f24:	bd80      	pop	{r7, pc}
	...

08020f28 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8020f28:	b580      	push	{r7, lr}
 8020f2a:	b088      	sub	sp, #32
 8020f2c:	af04      	add	r7, sp, #16
 8020f2e:	60f8      	str	r0, [r7, #12]
 8020f30:	60b9      	str	r1, [r7, #8]
 8020f32:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8020f34:	687b      	ldr	r3, [r7, #4]
 8020f36:	781b      	ldrb	r3, [r3, #0]
 8020f38:	4618      	mov	r0, r3
 8020f3a:	687b      	ldr	r3, [r7, #4]
 8020f3c:	3301      	adds	r3, #1
 8020f3e:	781b      	ldrb	r3, [r3, #0]
 8020f40:	461a      	mov	r2, r3
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	3302      	adds	r3, #2
 8020f46:	781b      	ldrb	r3, [r3, #0]
 8020f48:	4619      	mov	r1, r3
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	3303      	adds	r3, #3
 8020f4e:	781b      	ldrb	r3, [r3, #0]
 8020f50:	9302      	str	r3, [sp, #8]
 8020f52:	9101      	str	r1, [sp, #4]
 8020f54:	9200      	str	r2, [sp, #0]
 8020f56:	4603      	mov	r3, r0
 8020f58:	4a04      	ldr	r2, [pc, #16]	@ (8020f6c <print_ip4+0x44>)
 8020f5a:	68b9      	ldr	r1, [r7, #8]
 8020f5c:	68f8      	ldr	r0, [r7, #12]
 8020f5e:	f7f5 f89e 	bl	801609e <mg_xprintf>
 8020f62:	4603      	mov	r3, r0
}
 8020f64:	4618      	mov	r0, r3
 8020f66:	3710      	adds	r7, #16
 8020f68:	46bd      	mov	sp, r7
 8020f6a:	bd80      	pop	{r7, pc}
 8020f6c:	08032bf8 	.word	0x08032bf8

08020f70 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8020f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f74:	b08e      	sub	sp, #56	@ 0x38
 8020f76:	af08      	add	r7, sp, #32
 8020f78:	6178      	str	r0, [r7, #20]
 8020f7a:	6139      	str	r1, [r7, #16]
 8020f7c:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020f7e:	68fb      	ldr	r3, [r7, #12]
 8020f80:	881b      	ldrh	r3, [r3, #0]
 8020f82:	4618      	mov	r0, r3
 8020f84:	f001 fc01 	bl	802278a <mg_ntohs>
 8020f88:	4603      	mov	r3, r0
 8020f8a:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8020f8c:	68fb      	ldr	r3, [r7, #12]
 8020f8e:	3302      	adds	r3, #2
 8020f90:	881b      	ldrh	r3, [r3, #0]
 8020f92:	4618      	mov	r0, r3
 8020f94:	f001 fbf9 	bl	802278a <mg_ntohs>
 8020f98:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020f9a:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8020f9c:	68fb      	ldr	r3, [r7, #12]
 8020f9e:	3304      	adds	r3, #4
 8020fa0:	881b      	ldrh	r3, [r3, #0]
 8020fa2:	4618      	mov	r0, r3
 8020fa4:	f001 fbf1 	bl	802278a <mg_ntohs>
 8020fa8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020faa:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8020fac:	68fb      	ldr	r3, [r7, #12]
 8020fae:	3306      	adds	r3, #6
 8020fb0:	881b      	ldrh	r3, [r3, #0]
 8020fb2:	4618      	mov	r0, r3
 8020fb4:	f001 fbe9 	bl	802278a <mg_ntohs>
 8020fb8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020fba:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8020fbc:	68fb      	ldr	r3, [r7, #12]
 8020fbe:	3308      	adds	r3, #8
 8020fc0:	881b      	ldrh	r3, [r3, #0]
 8020fc2:	4618      	mov	r0, r3
 8020fc4:	f001 fbe1 	bl	802278a <mg_ntohs>
 8020fc8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020fca:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8020fcc:	68fb      	ldr	r3, [r7, #12]
 8020fce:	330a      	adds	r3, #10
 8020fd0:	881b      	ldrh	r3, [r3, #0]
 8020fd2:	4618      	mov	r0, r3
 8020fd4:	f001 fbd9 	bl	802278a <mg_ntohs>
 8020fd8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020fda:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8020fdc:	68fb      	ldr	r3, [r7, #12]
 8020fde:	330c      	adds	r3, #12
 8020fe0:	881b      	ldrh	r3, [r3, #0]
 8020fe2:	4618      	mov	r0, r3
 8020fe4:	f001 fbd1 	bl	802278a <mg_ntohs>
 8020fe8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020fea:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8020fec:	68fb      	ldr	r3, [r7, #12]
 8020fee:	330e      	adds	r3, #14
 8020ff0:	881b      	ldrh	r3, [r3, #0]
 8020ff2:	4618      	mov	r0, r3
 8020ff4:	f001 fbc9 	bl	802278a <mg_ntohs>
 8020ff8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8020ffa:	9306      	str	r3, [sp, #24]
 8020ffc:	683a      	ldr	r2, [r7, #0]
 8020ffe:	9205      	str	r2, [sp, #20]
 8021000:	687a      	ldr	r2, [r7, #4]
 8021002:	9204      	str	r2, [sp, #16]
 8021004:	68bb      	ldr	r3, [r7, #8]
 8021006:	9303      	str	r3, [sp, #12]
 8021008:	9602      	str	r6, [sp, #8]
 802100a:	9501      	str	r5, [sp, #4]
 802100c:	9400      	str	r4, [sp, #0]
 802100e:	4643      	mov	r3, r8
 8021010:	4a05      	ldr	r2, [pc, #20]	@ (8021028 <print_ip6+0xb8>)
 8021012:	6939      	ldr	r1, [r7, #16]
 8021014:	6978      	ldr	r0, [r7, #20]
 8021016:	f7f5 f842 	bl	801609e <mg_xprintf>
 802101a:	4603      	mov	r3, r0
}
 802101c:	4618      	mov	r0, r3
 802101e:	3718      	adds	r7, #24
 8021020:	46bd      	mov	sp, r7
 8021022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021026:	bf00      	nop
 8021028:	08032c04 	.word	0x08032c04

0802102c <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 802102c:	b580      	push	{r7, lr}
 802102e:	b086      	sub	sp, #24
 8021030:	af00      	add	r7, sp, #0
 8021032:	60f8      	str	r0, [r7, #12]
 8021034:	60b9      	str	r1, [r7, #8]
 8021036:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8021038:	687b      	ldr	r3, [r7, #4]
 802103a:	681b      	ldr	r3, [r3, #0]
 802103c:	1d19      	adds	r1, r3, #4
 802103e:	687a      	ldr	r2, [r7, #4]
 8021040:	6011      	str	r1, [r2, #0]
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8021046:	697a      	ldr	r2, [r7, #20]
 8021048:	68b9      	ldr	r1, [r7, #8]
 802104a:	68f8      	ldr	r0, [r7, #12]
 802104c:	f7ff ff6c 	bl	8020f28 <print_ip4>
 8021050:	4603      	mov	r3, r0
}
 8021052:	4618      	mov	r0, r3
 8021054:	3718      	adds	r7, #24
 8021056:	46bd      	mov	sp, r7
 8021058:	bd80      	pop	{r7, pc}

0802105a <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 802105a:	b580      	push	{r7, lr}
 802105c:	b086      	sub	sp, #24
 802105e:	af00      	add	r7, sp, #0
 8021060:	60f8      	str	r0, [r7, #12]
 8021062:	60b9      	str	r1, [r7, #8]
 8021064:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	1d19      	adds	r1, r3, #4
 802106c:	687a      	ldr	r2, [r7, #4]
 802106e:	6011      	str	r1, [r2, #0]
 8021070:	681b      	ldr	r3, [r3, #0]
 8021072:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8021074:	697b      	ldr	r3, [r7, #20]
 8021076:	7cdb      	ldrb	r3, [r3, #19]
 8021078:	2b00      	cmp	r3, #0
 802107a:	d007      	beq.n	802108c <mg_print_ip+0x32>
 802107c:	697b      	ldr	r3, [r7, #20]
 802107e:	461a      	mov	r2, r3
 8021080:	68b9      	ldr	r1, [r7, #8]
 8021082:	68f8      	ldr	r0, [r7, #12]
 8021084:	f7ff ff74 	bl	8020f70 <print_ip6>
 8021088:	4603      	mov	r3, r0
 802108a:	e006      	b.n	802109a <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 802108c:	697b      	ldr	r3, [r7, #20]
 802108e:	461a      	mov	r2, r3
 8021090:	68b9      	ldr	r1, [r7, #8]
 8021092:	68f8      	ldr	r0, [r7, #12]
 8021094:	f7ff ff48 	bl	8020f28 <print_ip4>
 8021098:	4603      	mov	r3, r0
}
 802109a:	4618      	mov	r0, r3
 802109c:	3718      	adds	r7, #24
 802109e:	46bd      	mov	sp, r7
 80210a0:	bd80      	pop	{r7, pc}
	...

080210a4 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 80210a4:	b580      	push	{r7, lr}
 80210a6:	b088      	sub	sp, #32
 80210a8:	af02      	add	r7, sp, #8
 80210aa:	60f8      	str	r0, [r7, #12]
 80210ac:	60b9      	str	r1, [r7, #8]
 80210ae:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	681b      	ldr	r3, [r3, #0]
 80210b4:	1d19      	adds	r1, r3, #4
 80210b6:	687a      	ldr	r2, [r7, #4]
 80210b8:	6011      	str	r1, [r2, #0]
 80210ba:	681b      	ldr	r3, [r3, #0]
 80210bc:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 80210be:	697b      	ldr	r3, [r7, #20]
 80210c0:	8a1b      	ldrh	r3, [r3, #16]
 80210c2:	4618      	mov	r0, r3
 80210c4:	f001 fb61 	bl	802278a <mg_ntohs>
 80210c8:	4603      	mov	r3, r0
 80210ca:	9301      	str	r3, [sp, #4]
 80210cc:	697b      	ldr	r3, [r7, #20]
 80210ce:	9300      	str	r3, [sp, #0]
 80210d0:	4b05      	ldr	r3, [pc, #20]	@ (80210e8 <mg_print_ip_port+0x44>)
 80210d2:	4a06      	ldr	r2, [pc, #24]	@ (80210ec <mg_print_ip_port+0x48>)
 80210d4:	68b9      	ldr	r1, [r7, #8]
 80210d6:	68f8      	ldr	r0, [r7, #12]
 80210d8:	f7f4 ffe1 	bl	801609e <mg_xprintf>
 80210dc:	4603      	mov	r3, r0
}
 80210de:	4618      	mov	r0, r3
 80210e0:	3718      	adds	r7, #24
 80210e2:	46bd      	mov	sp, r7
 80210e4:	bd80      	pop	{r7, pc}
 80210e6:	bf00      	nop
 80210e8:	0802105b 	.word	0x0802105b
 80210ec:	08032c20 	.word	0x08032c20

080210f0 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 80210f0:	b5b0      	push	{r4, r5, r7, lr}
 80210f2:	b08c      	sub	sp, #48	@ 0x30
 80210f4:	af06      	add	r7, sp, #24
 80210f6:	60f8      	str	r0, [r7, #12]
 80210f8:	60b9      	str	r1, [r7, #8]
 80210fa:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80210fc:	687b      	ldr	r3, [r7, #4]
 80210fe:	681b      	ldr	r3, [r3, #0]
 8021100:	1d19      	adds	r1, r3, #4
 8021102:	687a      	ldr	r2, [r7, #4]
 8021104:	6011      	str	r1, [r2, #0]
 8021106:	681b      	ldr	r3, [r3, #0]
 8021108:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 802110a:	697b      	ldr	r3, [r7, #20]
 802110c:	781b      	ldrb	r3, [r3, #0]
 802110e:	461d      	mov	r5, r3
 8021110:	697b      	ldr	r3, [r7, #20]
 8021112:	3301      	adds	r3, #1
 8021114:	781b      	ldrb	r3, [r3, #0]
 8021116:	461a      	mov	r2, r3
 8021118:	697b      	ldr	r3, [r7, #20]
 802111a:	3302      	adds	r3, #2
 802111c:	781b      	ldrb	r3, [r3, #0]
 802111e:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8021120:	697b      	ldr	r3, [r7, #20]
 8021122:	3303      	adds	r3, #3
 8021124:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8021126:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8021128:	697b      	ldr	r3, [r7, #20]
 802112a:	3304      	adds	r3, #4
 802112c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 802112e:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8021130:	697b      	ldr	r3, [r7, #20]
 8021132:	3305      	adds	r3, #5
 8021134:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8021136:	9304      	str	r3, [sp, #16]
 8021138:	9403      	str	r4, [sp, #12]
 802113a:	9002      	str	r0, [sp, #8]
 802113c:	9101      	str	r1, [sp, #4]
 802113e:	9200      	str	r2, [sp, #0]
 8021140:	462b      	mov	r3, r5
 8021142:	4a05      	ldr	r2, [pc, #20]	@ (8021158 <mg_print_mac+0x68>)
 8021144:	68b9      	ldr	r1, [r7, #8]
 8021146:	68f8      	ldr	r0, [r7, #12]
 8021148:	f7f4 ffa9 	bl	801609e <mg_xprintf>
 802114c:	4603      	mov	r3, r0
}
 802114e:	4618      	mov	r0, r3
 8021150:	3718      	adds	r7, #24
 8021152:	46bd      	mov	sp, r7
 8021154:	bdb0      	pop	{r4, r5, r7, pc}
 8021156:	bf00      	nop
 8021158:	08032c28 	.word	0x08032c28

0802115c <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 802115c:	b580      	push	{r7, lr}
 802115e:	b088      	sub	sp, #32
 8021160:	af00      	add	r7, sp, #0
 8021162:	60f8      	str	r0, [r7, #12]
 8021164:	60b9      	str	r1, [r7, #8]
 8021166:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 8021168:	687b      	ldr	r3, [r7, #4]
 802116a:	681b      	ldr	r3, [r3, #0]
 802116c:	1d19      	adds	r1, r3, #4
 802116e:	687a      	ldr	r2, [r7, #4]
 8021170:	6011      	str	r1, [r2, #0]
 8021172:	681b      	ldr	r3, [r3, #0]
 8021174:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8021176:	687b      	ldr	r3, [r7, #4]
 8021178:	681b      	ldr	r3, [r3, #0]
 802117a:	1d19      	adds	r1, r3, #4
 802117c:	687a      	ldr	r2, [r7, #4]
 802117e:	6011      	str	r1, [r2, #0]
 8021180:	681b      	ldr	r3, [r3, #0]
 8021182:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 8021184:	4b16      	ldr	r3, [pc, #88]	@ (80211e0 <mg_print_hex+0x84>)
 8021186:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 8021188:	2300      	movs	r3, #0
 802118a:	61fb      	str	r3, [r7, #28]
 802118c:	e01e      	b.n	80211cc <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 802118e:	697a      	ldr	r2, [r7, #20]
 8021190:	69fb      	ldr	r3, [r7, #28]
 8021192:	4413      	add	r3, r2
 8021194:	781b      	ldrb	r3, [r3, #0]
 8021196:	091b      	lsrs	r3, r3, #4
 8021198:	b2db      	uxtb	r3, r3
 802119a:	f003 030f 	and.w	r3, r3, #15
 802119e:	693a      	ldr	r2, [r7, #16]
 80211a0:	4413      	add	r3, r2
 80211a2:	781a      	ldrb	r2, [r3, #0]
 80211a4:	68fb      	ldr	r3, [r7, #12]
 80211a6:	68b9      	ldr	r1, [r7, #8]
 80211a8:	4610      	mov	r0, r2
 80211aa:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 80211ac:	697a      	ldr	r2, [r7, #20]
 80211ae:	69fb      	ldr	r3, [r7, #28]
 80211b0:	4413      	add	r3, r2
 80211b2:	781b      	ldrb	r3, [r3, #0]
 80211b4:	f003 030f 	and.w	r3, r3, #15
 80211b8:	693a      	ldr	r2, [r7, #16]
 80211ba:	4413      	add	r3, r2
 80211bc:	781a      	ldrb	r2, [r3, #0]
 80211be:	68fb      	ldr	r3, [r7, #12]
 80211c0:	68b9      	ldr	r1, [r7, #8]
 80211c2:	4610      	mov	r0, r2
 80211c4:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 80211c6:	69fb      	ldr	r3, [r7, #28]
 80211c8:	3301      	adds	r3, #1
 80211ca:	61fb      	str	r3, [r7, #28]
 80211cc:	69fa      	ldr	r2, [r7, #28]
 80211ce:	69bb      	ldr	r3, [r7, #24]
 80211d0:	429a      	cmp	r2, r3
 80211d2:	d3dc      	bcc.n	802118e <mg_print_hex+0x32>
  }
  return 2 * bl;
 80211d4:	69bb      	ldr	r3, [r7, #24]
 80211d6:	005b      	lsls	r3, r3, #1
}
 80211d8:	4618      	mov	r0, r3
 80211da:	3720      	adds	r7, #32
 80211dc:	46bd      	mov	sp, r7
 80211de:	bd80      	pop	{r7, pc}
 80211e0:	08031250 	.word	0x08031250

080211e4 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 80211e4:	b480      	push	{r7}
 80211e6:	b085      	sub	sp, #20
 80211e8:	af00      	add	r7, sp, #0
 80211ea:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 80211ec:	2300      	movs	r3, #0
 80211ee:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 80211f0:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 80211f4:	687b      	ldr	r3, [r7, #4]
 80211f6:	681a      	ldr	r2, [r3, #0]
 80211f8:	687b      	ldr	r3, [r7, #4]
 80211fa:	689b      	ldr	r3, [r3, #8]
 80211fc:	4413      	add	r3, r2
 80211fe:	681b      	ldr	r3, [r3, #0]
 8021200:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
  return n;
 8021202:	68fb      	ldr	r3, [r7, #12]
}
 8021204:	4618      	mov	r0, r3
 8021206:	3714      	adds	r7, #20
 8021208:	46bd      	mov	sp, r7
 802120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802120e:	4770      	bx	lr

08021210 <mg_queue_next>:
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
  return space;
}

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8021210:	b580      	push	{r7, lr}
 8021212:	b084      	sub	sp, #16
 8021214:	af00      	add	r7, sp, #0
 8021216:	6078      	str	r0, [r7, #4]
 8021218:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 802121a:	2300      	movs	r3, #0
 802121c:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	689a      	ldr	r2, [r3, #8]
 8021222:	687b      	ldr	r3, [r7, #4]
 8021224:	68db      	ldr	r3, [r3, #12]
 8021226:	429a      	cmp	r2, r3
 8021228:	d013      	beq.n	8021252 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 802122a:	6878      	ldr	r0, [r7, #4]
 802122c:	f7ff ffda 	bl	80211e4 <mg_queue_read_len>
 8021230:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8021232:	68fb      	ldr	r3, [r7, #12]
 8021234:	2b00      	cmp	r3, #0
 8021236:	d10c      	bne.n	8021252 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8021238:	687b      	ldr	r3, [r7, #4]
 802123a:	2200      	movs	r2, #0
 802123c:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 802123e:	687b      	ldr	r3, [r7, #4]
 8021240:	68da      	ldr	r2, [r3, #12]
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	689b      	ldr	r3, [r3, #8]
 8021246:	429a      	cmp	r2, r3
 8021248:	d903      	bls.n	8021252 <mg_queue_next+0x42>
 802124a:	6878      	ldr	r0, [r7, #4]
 802124c:	f7ff ffca 	bl	80211e4 <mg_queue_read_len>
 8021250:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8021252:	683b      	ldr	r3, [r7, #0]
 8021254:	2b00      	cmp	r3, #0
 8021256:	d007      	beq.n	8021268 <mg_queue_next+0x58>
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	681a      	ldr	r2, [r3, #0]
 802125c:	687b      	ldr	r3, [r7, #4]
 802125e:	689b      	ldr	r3, [r3, #8]
 8021260:	3304      	adds	r3, #4
 8021262:	441a      	add	r2, r3
 8021264:	683b      	ldr	r3, [r7, #0]
 8021266:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
  return len;
 8021268:	68fb      	ldr	r3, [r7, #12]
}
 802126a:	4618      	mov	r0, r3
 802126c:	3710      	adds	r7, #16
 802126e:	46bd      	mov	sp, r7
 8021270:	bd80      	pop	{r7, pc}

08021272 <mg_queue_del>:
  mg_queue_write_len(q, len);
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
  q->head += len + sizeof(uint32_t);
}

void mg_queue_del(struct mg_queue *q, size_t len) {
 8021272:	b480      	push	{r7}
 8021274:	b083      	sub	sp, #12
 8021276:	af00      	add	r7, sp, #0
 8021278:	6078      	str	r0, [r7, #4]
 802127a:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	689a      	ldr	r2, [r3, #8]
 8021280:	683b      	ldr	r3, [r7, #0]
 8021282:	4413      	add	r3, r2
 8021284:	1d1a      	adds	r2, r3, #4
 8021286:	687b      	ldr	r3, [r7, #4]
 8021288:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
}
 802128a:	bf00      	nop
 802128c:	370c      	adds	r7, #12
 802128e:	46bd      	mov	sp, r7
 8021290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021294:	4770      	bx	lr
	...

08021298 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 8021298:	b5b0      	push	{r4, r5, r7, lr}
 802129a:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 802129c:	f001 fb06 	bl	80228ac <mg_millis>
 80212a0:	4b05      	ldr	r3, [pc, #20]	@ (80212b8 <mg_now+0x20>)
 80212a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212a6:	1884      	adds	r4, r0, r2
 80212a8:	eb41 0503 	adc.w	r5, r1, r3
 80212ac:	4622      	mov	r2, r4
 80212ae:	462b      	mov	r3, r5
}
 80212b0:	4610      	mov	r0, r2
 80212b2:	4619      	mov	r1, r3
 80212b4:	bdb0      	pop	{r4, r5, r7, pc}
 80212b6:	bf00      	nop
 80212b8:	20018158 	.word	0x20018158
 80212bc:	00000000 	.word	0x00000000

080212c0 <gettimestamp>:

static int64_t gettimestamp(const uint32_t *data) {
 80212c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80212c4:	b086      	sub	sp, #24
 80212c6:	af00      	add	r7, sp, #0
 80212c8:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 80212ca:	68fb      	ldr	r3, [r7, #12]
 80212cc:	681b      	ldr	r3, [r3, #0]
 80212ce:	4618      	mov	r0, r3
 80212d0:	f001 fa42 	bl	8022758 <mg_ntohl>
 80212d4:	6178      	str	r0, [r7, #20]
 80212d6:	68fb      	ldr	r3, [r7, #12]
 80212d8:	3304      	adds	r3, #4
 80212da:	681b      	ldr	r3, [r3, #0]
 80212dc:	4618      	mov	r0, r3
 80212de:	f001 fa3b 	bl	8022758 <mg_ntohl>
 80212e2:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 80212e4:	697b      	ldr	r3, [r7, #20]
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	d003      	beq.n	80212f2 <gettimestamp+0x32>
 80212ea:	697a      	ldr	r2, [r7, #20]
 80212ec:	4b2e      	ldr	r3, [pc, #184]	@ (80213a8 <gettimestamp+0xe8>)
 80212ee:	4413      	add	r3, r2
 80212f0:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 80212f2:	697b      	ldr	r3, [r7, #20]
 80212f4:	2200      	movs	r2, #0
 80212f6:	4698      	mov	r8, r3
 80212f8:	4691      	mov	r9, r2
 80212fa:	4642      	mov	r2, r8
 80212fc:	464b      	mov	r3, r9
 80212fe:	f04f 0000 	mov.w	r0, #0
 8021302:	f04f 0100 	mov.w	r1, #0
 8021306:	0159      	lsls	r1, r3, #5
 8021308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802130c:	0150      	lsls	r0, r2, #5
 802130e:	4602      	mov	r2, r0
 8021310:	460b      	mov	r3, r1
 8021312:	ebb2 0408 	subs.w	r4, r2, r8
 8021316:	eb63 0509 	sbc.w	r5, r3, r9
 802131a:	f04f 0200 	mov.w	r2, #0
 802131e:	f04f 0300 	mov.w	r3, #0
 8021322:	00ab      	lsls	r3, r5, #2
 8021324:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8021328:	00a2      	lsls	r2, r4, #2
 802132a:	4614      	mov	r4, r2
 802132c:	461d      	mov	r5, r3
 802132e:	eb14 0a08 	adds.w	sl, r4, r8
 8021332:	eb45 0b09 	adc.w	fp, r5, r9
 8021336:	f04f 0200 	mov.w	r2, #0
 802133a:	f04f 0300 	mov.w	r3, #0
 802133e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8021342:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8021346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802134a:	4692      	mov	sl, r2
 802134c:	469b      	mov	fp, r3
 802134e:	4654      	mov	r4, sl
 8021350:	465d      	mov	r5, fp
 8021352:	6938      	ldr	r0, [r7, #16]
 8021354:	f7df f8ee 	bl	8000534 <__aeabi_ui2d>
 8021358:	a311      	add	r3, pc, #68	@ (adr r3, 80213a0 <gettimestamp+0xe0>)
 802135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802135e:	f7df fa8d 	bl	800087c <__aeabi_ddiv>
 8021362:	4602      	mov	r2, r0
 8021364:	460b      	mov	r3, r1
 8021366:	4610      	mov	r0, r2
 8021368:	4619      	mov	r1, r3
 802136a:	f04f 0200 	mov.w	r2, #0
 802136e:	4b0f      	ldr	r3, [pc, #60]	@ (80213ac <gettimestamp+0xec>)
 8021370:	f7df f95a 	bl	8000628 <__aeabi_dmul>
 8021374:	4602      	mov	r2, r0
 8021376:	460b      	mov	r3, r1
 8021378:	4610      	mov	r0, r2
 802137a:	4619      	mov	r1, r3
 802137c:	f7df fd18 	bl	8000db0 <__aeabi_d2lz>
 8021380:	4602      	mov	r2, r0
 8021382:	460b      	mov	r3, r1
 8021384:	18a1      	adds	r1, r4, r2
 8021386:	6039      	str	r1, [r7, #0]
 8021388:	eb45 0303 	adc.w	r3, r5, r3
 802138c:	607b      	str	r3, [r7, #4]
 802138e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8021392:	4610      	mov	r0, r2
 8021394:	4619      	mov	r1, r3
 8021396:	3718      	adds	r7, #24
 8021398:	46bd      	mov	sp, r7
 802139a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802139e:	bf00      	nop
 80213a0:	ffe00000 	.word	0xffe00000
 80213a4:	41efffff 	.word	0x41efffff
 80213a8:	7c558180 	.word	0x7c558180
 80213ac:	408f4000 	.word	0x408f4000

080213b0 <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 80213b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80213b4:	b098      	sub	sp, #96	@ 0x60
 80213b6:	af00      	add	r7, sp, #0
 80213b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80213ba:	6239      	str	r1, [r7, #32]
  int64_t epoch_milliseconds = -1;
 80213bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80213c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80213c4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  int mode = len > 0 ? buf[0] & 7 : 0;
 80213c8:	6a3b      	ldr	r3, [r7, #32]
 80213ca:	2b00      	cmp	r3, #0
 80213cc:	d004      	beq.n	80213d8 <mg_sntp_parse+0x28>
 80213ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213d0:	781b      	ldrb	r3, [r3, #0]
 80213d2:	f003 0307 	and.w	r3, r3, #7
 80213d6:	e000      	b.n	80213da <mg_sntp_parse+0x2a>
 80213d8:	2300      	movs	r3, #0
 80213da:	657b      	str	r3, [r7, #84]	@ 0x54
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 80213dc:	6a3b      	ldr	r3, [r7, #32]
 80213de:	2b00      	cmp	r3, #0
 80213e0:	d006      	beq.n	80213f0 <mg_sntp_parse+0x40>
 80213e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80213e4:	781b      	ldrb	r3, [r3, #0]
 80213e6:	08db      	lsrs	r3, r3, #3
 80213e8:	b2db      	uxtb	r3, r3
 80213ea:	f003 0307 	and.w	r3, r3, #7
 80213ee:	e000      	b.n	80213f2 <mg_sntp_parse+0x42>
 80213f0:	2300      	movs	r3, #0
 80213f2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (len < 48) {
 80213f4:	6a3b      	ldr	r3, [r7, #32]
 80213f6:	2b2f      	cmp	r3, #47	@ 0x2f
 80213f8:	d810      	bhi.n	802141c <mg_sntp_parse+0x6c>
    MG_ERROR(("%s", "corrupt packet"));
 80213fa:	4b60      	ldr	r3, [pc, #384]	@ (802157c <mg_sntp_parse+0x1cc>)
 80213fc:	681b      	ldr	r3, [r3, #0]
 80213fe:	2b00      	cmp	r3, #0
 8021400:	f340 80b4 	ble.w	802156c <mg_sntp_parse+0x1bc>
 8021404:	4b5e      	ldr	r3, [pc, #376]	@ (8021580 <mg_sntp_parse+0x1d0>)
 8021406:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 802140a:	495e      	ldr	r1, [pc, #376]	@ (8021584 <mg_sntp_parse+0x1d4>)
 802140c:	2001      	movs	r0, #1
 802140e:	f7f9 fd15 	bl	801ae3c <mg_log_prefix>
 8021412:	495d      	ldr	r1, [pc, #372]	@ (8021588 <mg_sntp_parse+0x1d8>)
 8021414:	485d      	ldr	r0, [pc, #372]	@ (802158c <mg_sntp_parse+0x1dc>)
 8021416:	f7f9 fd61 	bl	801aedc <mg_log>
 802141a:	e0a7      	b.n	802156c <mg_sntp_parse+0x1bc>
  } else if (mode != 4 && mode != 5) {
 802141c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802141e:	2b04      	cmp	r3, #4
 8021420:	d013      	beq.n	802144a <mg_sntp_parse+0x9a>
 8021422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021424:	2b05      	cmp	r3, #5
 8021426:	d010      	beq.n	802144a <mg_sntp_parse+0x9a>
    MG_ERROR(("%s", "not a server reply"));
 8021428:	4b54      	ldr	r3, [pc, #336]	@ (802157c <mg_sntp_parse+0x1cc>)
 802142a:	681b      	ldr	r3, [r3, #0]
 802142c:	2b00      	cmp	r3, #0
 802142e:	f340 809d 	ble.w	802156c <mg_sntp_parse+0x1bc>
 8021432:	4b53      	ldr	r3, [pc, #332]	@ (8021580 <mg_sntp_parse+0x1d0>)
 8021434:	f641 4210 	movw	r2, #7184	@ 0x1c10
 8021438:	4952      	ldr	r1, [pc, #328]	@ (8021584 <mg_sntp_parse+0x1d4>)
 802143a:	2001      	movs	r0, #1
 802143c:	f7f9 fcfe 	bl	801ae3c <mg_log_prefix>
 8021440:	4953      	ldr	r1, [pc, #332]	@ (8021590 <mg_sntp_parse+0x1e0>)
 8021442:	4852      	ldr	r0, [pc, #328]	@ (802158c <mg_sntp_parse+0x1dc>)
 8021444:	f7f9 fd4a 	bl	801aedc <mg_log>
 8021448:	e090      	b.n	802156c <mg_sntp_parse+0x1bc>
  } else if (buf[1] == 0) {
 802144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802144c:	3301      	adds	r3, #1
 802144e:	781b      	ldrb	r3, [r3, #0]
 8021450:	2b00      	cmp	r3, #0
 8021452:	d110      	bne.n	8021476 <mg_sntp_parse+0xc6>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8021454:	4b49      	ldr	r3, [pc, #292]	@ (802157c <mg_sntp_parse+0x1cc>)
 8021456:	681b      	ldr	r3, [r3, #0]
 8021458:	2b00      	cmp	r3, #0
 802145a:	f340 8087 	ble.w	802156c <mg_sntp_parse+0x1bc>
 802145e:	4b48      	ldr	r3, [pc, #288]	@ (8021580 <mg_sntp_parse+0x1d0>)
 8021460:	f641 4212 	movw	r2, #7186	@ 0x1c12
 8021464:	4947      	ldr	r1, [pc, #284]	@ (8021584 <mg_sntp_parse+0x1d4>)
 8021466:	2001      	movs	r0, #1
 8021468:	f7f9 fce8 	bl	801ae3c <mg_log_prefix>
 802146c:	4949      	ldr	r1, [pc, #292]	@ (8021594 <mg_sntp_parse+0x1e4>)
 802146e:	4847      	ldr	r0, [pc, #284]	@ (802158c <mg_sntp_parse+0x1dc>)
 8021470:	f7f9 fd34 	bl	801aedc <mg_log>
 8021474:	e07a      	b.n	802156c <mg_sntp_parse+0x1bc>
  } else if (version == 4 || version == 3) {
 8021476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021478:	2b04      	cmp	r3, #4
 802147a:	d002      	beq.n	8021482 <mg_sntp_parse+0xd2>
 802147c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802147e:	2b03      	cmp	r3, #3
 8021480:	d165      	bne.n	802154e <mg_sntp_parse+0x19e>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8021482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021484:	3318      	adds	r3, #24
 8021486:	4618      	mov	r0, r3
 8021488:	f7ff ff1a 	bl	80212c0 <gettimestamp>
 802148c:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 8021490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021492:	3320      	adds	r3, #32
 8021494:	4618      	mov	r0, r3
 8021496:	f7ff ff13 	bl	80212c0 <gettimestamp>
 802149a:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 802149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80214a0:	3328      	adds	r3, #40	@ 0x28
 80214a2:	4618      	mov	r0, r3
 80214a4:	f7ff ff0c 	bl	80212c0 <gettimestamp>
 80214a8:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
    int64_t now = (int64_t) mg_millis();
 80214ac:	f001 f9fe 	bl	80228ac <mg_millis>
 80214b0:	4602      	mov	r2, r0
 80214b2:	460b      	mov	r3, r1
 80214b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 80214b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80214bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80214c0:	ebb0 0a02 	subs.w	sl, r0, r2
 80214c4:	eb61 0b03 	sbc.w	fp, r1, r3
 80214c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80214cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80214d0:	ebb0 0802 	subs.w	r8, r0, r2
 80214d4:	eb61 0903 	sbc.w	r9, r1, r3
 80214d8:	ebba 0308 	subs.w	r3, sl, r8
 80214dc:	613b      	str	r3, [r7, #16]
 80214de:	eb6b 0309 	sbc.w	r3, fp, r9
 80214e2:	617b      	str	r3, [r7, #20]
 80214e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80214e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    epoch_milliseconds = transmit_time + latency / 2;
 80214ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80214f0:	0fd9      	lsrs	r1, r3, #31
 80214f2:	2000      	movs	r0, #0
 80214f4:	60b9      	str	r1, [r7, #8]
 80214f6:	60f8      	str	r0, [r7, #12]
 80214f8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80214fc:	4641      	mov	r1, r8
 80214fe:	188c      	adds	r4, r1, r2
 8021500:	4649      	mov	r1, r9
 8021502:	eb43 0101 	adc.w	r1, r3, r1
 8021506:	460d      	mov	r5, r1
 8021508:	f04f 0200 	mov.w	r2, #0
 802150c:	f04f 0300 	mov.w	r3, #0
 8021510:	0862      	lsrs	r2, r4, #1
 8021512:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8021516:	106b      	asrs	r3, r5, #1
 8021518:	4610      	mov	r0, r2
 802151a:	4619      	mov	r1, r3
 802151c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8021520:	1814      	adds	r4, r2, r0
 8021522:	603c      	str	r4, [r7, #0]
 8021524:	414b      	adcs	r3, r1
 8021526:	607b      	str	r3, [r7, #4]
 8021528:	e9d7 3400 	ldrd	r3, r4, [r7]
 802152c:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 8021530:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8021534:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8021538:	1a84      	subs	r4, r0, r2
 802153a:	61bc      	str	r4, [r7, #24]
 802153c:	eb61 0303 	sbc.w	r3, r1, r3
 8021540:	61fb      	str	r3, [r7, #28]
 8021542:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021546:	4914      	ldr	r1, [pc, #80]	@ (8021598 <mg_sntp_parse+0x1e8>)
 8021548:	e9c1 2300 	strd	r2, r3, [r1]
  } else if (version == 4 || version == 3) {
 802154c:	e00e      	b.n	802156c <mg_sntp_parse+0x1bc>
  } else {
    MG_ERROR(("unexpected version: %d", version));
 802154e:	4b0b      	ldr	r3, [pc, #44]	@ (802157c <mg_sntp_parse+0x1cc>)
 8021550:	681b      	ldr	r3, [r3, #0]
 8021552:	2b00      	cmp	r3, #0
 8021554:	dd0a      	ble.n	802156c <mg_sntp_parse+0x1bc>
 8021556:	4b0a      	ldr	r3, [pc, #40]	@ (8021580 <mg_sntp_parse+0x1d0>)
 8021558:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 802155c:	4909      	ldr	r1, [pc, #36]	@ (8021584 <mg_sntp_parse+0x1d4>)
 802155e:	2001      	movs	r0, #1
 8021560:	f7f9 fc6c 	bl	801ae3c <mg_log_prefix>
 8021564:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8021566:	480d      	ldr	r0, [pc, #52]	@ (802159c <mg_sntp_parse+0x1ec>)
 8021568:	f7f9 fcb8 	bl	801aedc <mg_log>
  }
  return epoch_milliseconds;
 802156c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
}
 8021570:	4610      	mov	r0, r2
 8021572:	4619      	mov	r1, r3
 8021574:	3760      	adds	r7, #96	@ 0x60
 8021576:	46bd      	mov	sp, r7
 8021578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802157c:	20000298 	.word	0x20000298
 8021580:	08033fa4 	.word	0x08033fa4
 8021584:	080310c8 	.word	0x080310c8
 8021588:	08032d3c 	.word	0x08032d3c
 802158c:	08031234 	.word	0x08031234
 8021590:	08032d4c 	.word	0x08032d4c
 8021594:	08032d60 	.word	0x08032d60
 8021598:	20018158 	.word	0x20018158
 802159c:	08032d7c 	.word	0x08032d7c

080215a0 <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 80215a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80215a4:	b088      	sub	sp, #32
 80215a6:	af00      	add	r7, sp, #0
 80215a8:	60f8      	str	r0, [r7, #12]
 80215aa:	60b9      	str	r1, [r7, #8]
 80215ac:	607a      	str	r2, [r7, #4]
  uint64_t *expiration_time = (uint64_t *) c->data;
 80215ae:	68fb      	ldr	r3, [r7, #12]
 80215b0:	3388      	adds	r3, #136	@ 0x88
 80215b2:	61fb      	str	r3, [r7, #28]
  if (ev == MG_EV_OPEN) {
 80215b4:	68bb      	ldr	r3, [r7, #8]
 80215b6:	2b01      	cmp	r3, #1
 80215b8:	d10c      	bne.n	80215d4 <sntp_cb+0x34>
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 80215ba:	f001 f977 	bl	80228ac <mg_millis>
 80215be:	4602      	mov	r2, r0
 80215c0:	460b      	mov	r3, r1
 80215c2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80215c6:	1854      	adds	r4, r2, r1
 80215c8:	f143 0500 	adc.w	r5, r3, #0
 80215cc:	69fb      	ldr	r3, [r7, #28]
 80215ce:	e9c3 4500 	strd	r4, r5, [r3]
  } else if (ev == MG_EV_POLL) {
    if (mg_millis() > *expiration_time) c->is_closing = 1;
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) ev_data;
}
 80215d2:	e05d      	b.n	8021690 <sntp_cb+0xf0>
  } else if (ev == MG_EV_CONNECT) {
 80215d4:	68bb      	ldr	r3, [r7, #8]
 80215d6:	2b04      	cmp	r3, #4
 80215d8:	d103      	bne.n	80215e2 <sntp_cb+0x42>
    mg_sntp_request(c);
 80215da:	68f8      	ldr	r0, [r7, #12]
 80215dc:	f000 f868 	bl	80216b0 <mg_sntp_request>
}
 80215e0:	e056      	b.n	8021690 <sntp_cb+0xf0>
  } else if (ev == MG_EV_READ) {
 80215e2:	68bb      	ldr	r3, [r7, #8]
 80215e4:	2b07      	cmp	r3, #7
 80215e6:	d141      	bne.n	802166c <sntp_cb+0xcc>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 80215e8:	68fb      	ldr	r3, [r7, #12]
 80215ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80215ec:	68fb      	ldr	r3, [r7, #12]
 80215ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80215f0:	4619      	mov	r1, r3
 80215f2:	4610      	mov	r0, r2
 80215f4:	f7ff fedc 	bl	80213b0 <mg_sntp_parse>
 80215f8:	4602      	mov	r2, r0
 80215fa:	460b      	mov	r3, r1
 80215fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 8021600:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021604:	2a01      	cmp	r2, #1
 8021606:	f173 0300 	sbcs.w	r3, r3, #0
 802160a:	db27      	blt.n	802165c <sntp_cb+0xbc>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 802160c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021610:	4614      	mov	r4, r2
 8021612:	461d      	mov	r5, r3
 8021614:	f001 f94a 	bl	80228ac <mg_millis>
 8021618:	4602      	mov	r2, r0
 802161a:	460b      	mov	r3, r1
 802161c:	ebb4 0802 	subs.w	r8, r4, r2
 8021620:	eb65 0903 	sbc.w	r9, r5, r3
 8021624:	4b1d      	ldr	r3, [pc, #116]	@ (802169c <sntp_cb+0xfc>)
 8021626:	e9c3 8900 	strd	r8, r9, [r3]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 802162a:	f107 0310 	add.w	r3, r7, #16
 802162e:	461a      	mov	r2, r3
 8021630:	2112      	movs	r1, #18
 8021632:	68f8      	ldr	r0, [r7, #12]
 8021634:	f7f4 f81c 	bl	8015670 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8021638:	4b19      	ldr	r3, [pc, #100]	@ (80216a0 <sntp_cb+0x100>)
 802163a:	681b      	ldr	r3, [r3, #0]
 802163c:	2b02      	cmp	r3, #2
 802163e:	dd0d      	ble.n	802165c <sntp_cb+0xbc>
 8021640:	4b18      	ldr	r3, [pc, #96]	@ (80216a4 <sntp_cb+0x104>)
 8021642:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 8021646:	4918      	ldr	r1, [pc, #96]	@ (80216a8 <sntp_cb+0x108>)
 8021648:	2003      	movs	r0, #3
 802164a:	f7f9 fbf7 	bl	801ae3c <mg_log_prefix>
 802164e:	68fb      	ldr	r3, [r7, #12]
 8021650:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8021652:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021656:	4815      	ldr	r0, [pc, #84]	@ (80216ac <sntp_cb+0x10c>)
 8021658:	f7f9 fc40 	bl	801aedc <mg_log>
    c->is_closing = 1;
 802165c:	68fa      	ldr	r2, [r7, #12]
 802165e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021662:	f043 0320 	orr.w	r3, r3, #32
 8021666:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 802166a:	e011      	b.n	8021690 <sntp_cb+0xf0>
  } else if (ev == MG_EV_POLL) {
 802166c:	68bb      	ldr	r3, [r7, #8]
 802166e:	2b02      	cmp	r3, #2
 8021670:	d10e      	bne.n	8021690 <sntp_cb+0xf0>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8021672:	f001 f91b 	bl	80228ac <mg_millis>
 8021676:	69fb      	ldr	r3, [r7, #28]
 8021678:	e9d3 2300 	ldrd	r2, r3, [r3]
 802167c:	4282      	cmp	r2, r0
 802167e:	418b      	sbcs	r3, r1
 8021680:	d206      	bcs.n	8021690 <sntp_cb+0xf0>
 8021682:	68fa      	ldr	r2, [r7, #12]
 8021684:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021688:	f043 0320 	orr.w	r3, r3, #32
 802168c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8021690:	bf00      	nop
 8021692:	3720      	adds	r7, #32
 8021694:	46bd      	mov	sp, r7
 8021696:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 802169a:	bf00      	nop
 802169c:	20018158 	.word	0x20018158
 80216a0:	20000298 	.word	0x20000298
 80216a4:	08033fb4 	.word	0x08033fb4
 80216a8:	080310c8 	.word	0x080310c8
 80216ac:	08032d94 	.word	0x08032d94

080216b0 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 80216b0:	b590      	push	{r4, r7, lr}
 80216b2:	b095      	sub	sp, #84	@ 0x54
 80216b4:	af00      	add	r7, sp, #0
 80216b6:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 80216b8:	687b      	ldr	r3, [r7, #4]
 80216ba:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80216be:	f003 0308 	and.w	r3, r3, #8
 80216c2:	b2db      	uxtb	r3, r3
 80216c4:	2b00      	cmp	r3, #0
 80216c6:	d011      	beq.n	80216ec <mg_sntp_request+0x3c>
    MG_ERROR(("%lu wait until resolved", c->id));
 80216c8:	4b39      	ldr	r3, [pc, #228]	@ (80217b0 <mg_sntp_request+0x100>)
 80216ca:	681b      	ldr	r3, [r3, #0]
 80216cc:	2b00      	cmp	r3, #0
 80216ce:	dd65      	ble.n	802179c <mg_sntp_request+0xec>
 80216d0:	4b38      	ldr	r3, [pc, #224]	@ (80217b4 <mg_sntp_request+0x104>)
 80216d2:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 80216d6:	4938      	ldr	r1, [pc, #224]	@ (80217b8 <mg_sntp_request+0x108>)
 80216d8:	2001      	movs	r0, #1
 80216da:	f7f9 fbaf 	bl	801ae3c <mg_log_prefix>
 80216de:	687b      	ldr	r3, [r7, #4]
 80216e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80216e2:	4619      	mov	r1, r3
 80216e4:	4835      	ldr	r0, [pc, #212]	@ (80217bc <mg_sntp_request+0x10c>)
 80216e6:	f7f9 fbf9 	bl	801aedc <mg_log>
    buf[0] = (0 << 6) | (4 << 3) | 3;
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
    t[1] = mg_htonl((uint32_t) frac);
    mg_send(c, buf, sizeof(buf));
  }
}
 80216ea:	e057      	b.n	802179c <mg_sntp_request+0xec>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 80216ec:	f001 f8de 	bl	80228ac <mg_millis>
 80216f0:	4602      	mov	r2, r0
 80216f2:	460b      	mov	r3, r1
 80216f4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    uint8_t buf[48] = {0};
 80216f8:	2300      	movs	r3, #0
 80216fa:	60bb      	str	r3, [r7, #8]
 80216fc:	f107 030c 	add.w	r3, r7, #12
 8021700:	222c      	movs	r2, #44	@ 0x2c
 8021702:	2100      	movs	r1, #0
 8021704:	4618      	mov	r0, r3
 8021706:	f004 f9a3 	bl	8025a50 <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 802170a:	f107 0308 	add.w	r3, r7, #8
 802170e:	3328      	adds	r3, #40	@ 0x28
 8021710:	647b      	str	r3, [r7, #68]	@ 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8021712:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8021716:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802171a:	f04f 0300 	mov.w	r3, #0
 802171e:	f7df facb 	bl	8000cb8 <__aeabi_ldivmod>
 8021722:	4610      	mov	r0, r2
 8021724:	4619      	mov	r1, r3
 8021726:	f7de ff51 	bl	80005cc <__aeabi_l2d>
 802172a:	f04f 0200 	mov.w	r2, #0
 802172e:	4b24      	ldr	r3, [pc, #144]	@ (80217c0 <mg_sntp_request+0x110>)
 8021730:	f7df f8a4 	bl	800087c <__aeabi_ddiv>
 8021734:	4602      	mov	r2, r0
 8021736:	460b      	mov	r3, r1
 8021738:	4610      	mov	r0, r2
 802173a:	4619      	mov	r1, r3
 802173c:	a31a      	add	r3, pc, #104	@ (adr r3, 80217a8 <mg_sntp_request+0xf8>)
 802173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021742:	f7de ff71 	bl	8000628 <__aeabi_dmul>
 8021746:	4602      	mov	r2, r0
 8021748:	460b      	mov	r3, r1
 802174a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 802174e:	2323      	movs	r3, #35	@ 0x23
 8021750:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8021752:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8021756:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802175a:	f04f 0300 	mov.w	r3, #0
 802175e:	f7df faab 	bl	8000cb8 <__aeabi_ldivmod>
 8021762:	4602      	mov	r2, r0
 8021764:	460b      	mov	r3, r1
 8021766:	4b17      	ldr	r3, [pc, #92]	@ (80217c4 <mg_sntp_request+0x114>)
 8021768:	4413      	add	r3, r2
 802176a:	4618      	mov	r0, r3
 802176c:	f000 fff4 	bl	8022758 <mg_ntohl>
 8021770:	4602      	mov	r2, r0
 8021772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021774:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 8021776:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802177a:	f7df fa2d 	bl	8000bd8 <__aeabi_d2uiz>
 802177e:	4602      	mov	r2, r0
 8021780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021782:	1d1c      	adds	r4, r3, #4
 8021784:	4610      	mov	r0, r2
 8021786:	f000 ffe7 	bl	8022758 <mg_ntohl>
 802178a:	4603      	mov	r3, r0
 802178c:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 802178e:	f107 0308 	add.w	r3, r7, #8
 8021792:	2230      	movs	r2, #48	@ 0x30
 8021794:	4619      	mov	r1, r3
 8021796:	6878      	ldr	r0, [r7, #4]
 8021798:	f7ff fa7e 	bl	8020c98 <mg_send>
}
 802179c:	bf00      	nop
 802179e:	3754      	adds	r7, #84	@ 0x54
 80217a0:	46bd      	mov	sp, r7
 80217a2:	bd90      	pop	{r4, r7, pc}
 80217a4:	f3af 8000 	nop.w
 80217a8:	ffe00000 	.word	0xffe00000
 80217ac:	41efffff 	.word	0x41efffff
 80217b0:	20000298 	.word	0x20000298
 80217b4:	08033fbc 	.word	0x08033fbc
 80217b8:	080310c8 	.word	0x080310c8
 80217bc:	08032db8 	.word	0x08032db8
 80217c0:	408f4000 	.word	0x408f4000
 80217c4:	83aa7e80 	.word	0x83aa7e80

080217c8 <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 80217c8:	b580      	push	{r7, lr}
 80217ca:	b086      	sub	sp, #24
 80217cc:	af00      	add	r7, sp, #0
 80217ce:	60f8      	str	r0, [r7, #12]
 80217d0:	60b9      	str	r1, [r7, #8]
 80217d2:	607a      	str	r2, [r7, #4]
 80217d4:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 80217d6:	2300      	movs	r3, #0
 80217d8:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 80217da:	68bb      	ldr	r3, [r7, #8]
 80217dc:	2b00      	cmp	r3, #0
 80217de:	d101      	bne.n	80217e4 <mg_sntp_connect+0x1c>
 80217e0:	4b0c      	ldr	r3, [pc, #48]	@ (8021814 <mg_sntp_connect+0x4c>)
 80217e2:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 80217e4:	683b      	ldr	r3, [r7, #0]
 80217e6:	687a      	ldr	r2, [r7, #4]
 80217e8:	68b9      	ldr	r1, [r7, #8]
 80217ea:	68f8      	ldr	r0, [r7, #12]
 80217ec:	f7fb ff90 	bl	801d710 <mg_connect>
 80217f0:	6178      	str	r0, [r7, #20]
 80217f2:	697b      	ldr	r3, [r7, #20]
 80217f4:	2b00      	cmp	r3, #0
 80217f6:	d008      	beq.n	802180a <mg_sntp_connect+0x42>
    c->pfn = sntp_cb;
 80217f8:	697b      	ldr	r3, [r7, #20]
 80217fa:	4a07      	ldr	r2, [pc, #28]	@ (8021818 <mg_sntp_connect+0x50>)
 80217fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 8021800:	68ba      	ldr	r2, [r7, #8]
 8021802:	2101      	movs	r1, #1
 8021804:	6978      	ldr	r0, [r7, #20]
 8021806:	f7ff fecb 	bl	80215a0 <sntp_cb>
  }
  return c;
 802180a:	697b      	ldr	r3, [r7, #20]
}
 802180c:	4618      	mov	r0, r3
 802180e:	3718      	adds	r7, #24
 8021810:	46bd      	mov	sp, r7
 8021812:	bd80      	pop	{r7, pc}
 8021814:	08032dd0 	.word	0x08032dd0
 8021818:	080215a1 	.word	0x080215a1

0802181c <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 802181c:	b580      	push	{r7, lr}
 802181e:	b084      	sub	sp, #16
 8021820:	af00      	add	r7, sp, #0
 8021822:	60f8      	str	r0, [r7, #12]
 8021824:	60b9      	str	r1, [r7, #8]
 8021826:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8021828:	4b05      	ldr	r3, [pc, #20]	@ (8021840 <mg_http_serve_ssi+0x24>)
 802182a:	2200      	movs	r2, #0
 802182c:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8021830:	68f8      	ldr	r0, [r7, #12]
 8021832:	f7f6 fb5b 	bl	8017eec <mg_http_reply>
  (void) root, (void) fullpath;
}
 8021836:	bf00      	nop
 8021838:	3710      	adds	r7, #16
 802183a:	46bd      	mov	sp, r7
 802183c:	bd80      	pop	{r7, pc}
 802183e:	bf00      	nop
 8021840:	08032dec 	.word	0x08032dec

08021844 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8021844:	b580      	push	{r7, lr}
 8021846:	b084      	sub	sp, #16
 8021848:	af00      	add	r7, sp, #0
 802184a:	6078      	str	r0, [r7, #4]
 802184c:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 802184e:	683b      	ldr	r3, [r7, #0]
 8021850:	60bb      	str	r3, [r7, #8]
 8021852:	683b      	ldr	r3, [r7, #0]
 8021854:	2b00      	cmp	r3, #0
 8021856:	d004      	beq.n	8021862 <mg_str_s+0x1e>
 8021858:	6838      	ldr	r0, [r7, #0]
 802185a:	f7de fd21 	bl	80002a0 <strlen>
 802185e:	4603      	mov	r3, r0
 8021860:	e000      	b.n	8021864 <mg_str_s+0x20>
 8021862:	2300      	movs	r3, #0
 8021864:	60fb      	str	r3, [r7, #12]
  return str;
 8021866:	687b      	ldr	r3, [r7, #4]
 8021868:	461a      	mov	r2, r3
 802186a:	f107 0308 	add.w	r3, r7, #8
 802186e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021872:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8021876:	6878      	ldr	r0, [r7, #4]
 8021878:	3710      	adds	r7, #16
 802187a:	46bd      	mov	sp, r7
 802187c:	bd80      	pop	{r7, pc}

0802187e <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 802187e:	b480      	push	{r7}
 8021880:	b087      	sub	sp, #28
 8021882:	af00      	add	r7, sp, #0
 8021884:	60f8      	str	r0, [r7, #12]
 8021886:	60b9      	str	r1, [r7, #8]
 8021888:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 802188a:	68bb      	ldr	r3, [r7, #8]
 802188c:	613b      	str	r3, [r7, #16]
 802188e:	687b      	ldr	r3, [r7, #4]
 8021890:	617b      	str	r3, [r7, #20]
  return str;
 8021892:	68fb      	ldr	r3, [r7, #12]
 8021894:	461a      	mov	r2, r3
 8021896:	f107 0310 	add.w	r3, r7, #16
 802189a:	e893 0003 	ldmia.w	r3, {r0, r1}
 802189e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80218a2:	68f8      	ldr	r0, [r7, #12]
 80218a4:	371c      	adds	r7, #28
 80218a6:	46bd      	mov	sp, r7
 80218a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218ac:	4770      	bx	lr

080218ae <mg_tolc>:

static int mg_tolc(char c) {
 80218ae:	b480      	push	{r7}
 80218b0:	b083      	sub	sp, #12
 80218b2:	af00      	add	r7, sp, #0
 80218b4:	4603      	mov	r3, r0
 80218b6:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 80218b8:	79fb      	ldrb	r3, [r7, #7]
 80218ba:	2b40      	cmp	r3, #64	@ 0x40
 80218bc:	d905      	bls.n	80218ca <mg_tolc+0x1c>
 80218be:	79fb      	ldrb	r3, [r7, #7]
 80218c0:	2b5a      	cmp	r3, #90	@ 0x5a
 80218c2:	d802      	bhi.n	80218ca <mg_tolc+0x1c>
 80218c4:	79fb      	ldrb	r3, [r7, #7]
 80218c6:	3320      	adds	r3, #32
 80218c8:	e000      	b.n	80218cc <mg_tolc+0x1e>
 80218ca:	79fb      	ldrb	r3, [r7, #7]
}
 80218cc:	4618      	mov	r0, r3
 80218ce:	370c      	adds	r7, #12
 80218d0:	46bd      	mov	sp, r7
 80218d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218d6:	4770      	bx	lr

080218d8 <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 80218d8:	b490      	push	{r4, r7}
 80218da:	b088      	sub	sp, #32
 80218dc:	af00      	add	r7, sp, #0
 80218de:	f107 0408 	add.w	r4, r7, #8
 80218e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80218e6:	4639      	mov	r1, r7
 80218e8:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80218ec:	2300      	movs	r3, #0
 80218ee:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80218f0:	e019      	b.n	8021926 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 80218f2:	68ba      	ldr	r2, [r7, #8]
 80218f4:	69fb      	ldr	r3, [r7, #28]
 80218f6:	4413      	add	r3, r2
 80218f8:	781b      	ldrb	r3, [r3, #0]
 80218fa:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 80218fc:	683a      	ldr	r2, [r7, #0]
 80218fe:	69fb      	ldr	r3, [r7, #28]
 8021900:	4413      	add	r3, r2
 8021902:	781b      	ldrb	r3, [r3, #0]
 8021904:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8021906:	69ba      	ldr	r2, [r7, #24]
 8021908:	697b      	ldr	r3, [r7, #20]
 802190a:	429a      	cmp	r2, r3
 802190c:	da02      	bge.n	8021914 <mg_strcmp+0x3c>
 802190e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021912:	e01e      	b.n	8021952 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8021914:	69ba      	ldr	r2, [r7, #24]
 8021916:	697b      	ldr	r3, [r7, #20]
 8021918:	429a      	cmp	r2, r3
 802191a:	dd01      	ble.n	8021920 <mg_strcmp+0x48>
 802191c:	2301      	movs	r3, #1
 802191e:	e018      	b.n	8021952 <mg_strcmp+0x7a>
    i++;
 8021920:	69fb      	ldr	r3, [r7, #28]
 8021922:	3301      	adds	r3, #1
 8021924:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8021926:	68fb      	ldr	r3, [r7, #12]
 8021928:	69fa      	ldr	r2, [r7, #28]
 802192a:	429a      	cmp	r2, r3
 802192c:	d203      	bcs.n	8021936 <mg_strcmp+0x5e>
 802192e:	687b      	ldr	r3, [r7, #4]
 8021930:	69fa      	ldr	r2, [r7, #28]
 8021932:	429a      	cmp	r2, r3
 8021934:	d3dd      	bcc.n	80218f2 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8021936:	68fb      	ldr	r3, [r7, #12]
 8021938:	69fa      	ldr	r2, [r7, #28]
 802193a:	429a      	cmp	r2, r3
 802193c:	d201      	bcs.n	8021942 <mg_strcmp+0x6a>
 802193e:	2301      	movs	r3, #1
 8021940:	e007      	b.n	8021952 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8021942:	687b      	ldr	r3, [r7, #4]
 8021944:	69fa      	ldr	r2, [r7, #28]
 8021946:	429a      	cmp	r2, r3
 8021948:	d202      	bcs.n	8021950 <mg_strcmp+0x78>
 802194a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802194e:	e000      	b.n	8021952 <mg_strcmp+0x7a>
  return 0;
 8021950:	2300      	movs	r3, #0
}
 8021952:	4618      	mov	r0, r3
 8021954:	3720      	adds	r7, #32
 8021956:	46bd      	mov	sp, r7
 8021958:	bc90      	pop	{r4, r7}
 802195a:	4770      	bx	lr

0802195c <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 802195c:	b590      	push	{r4, r7, lr}
 802195e:	b089      	sub	sp, #36	@ 0x24
 8021960:	af00      	add	r7, sp, #0
 8021962:	f107 0408 	add.w	r4, r7, #8
 8021966:	e884 0003 	stmia.w	r4, {r0, r1}
 802196a:	4639      	mov	r1, r7
 802196c:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8021970:	2300      	movs	r3, #0
 8021972:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8021974:	e01f      	b.n	80219b6 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 8021976:	68ba      	ldr	r2, [r7, #8]
 8021978:	69fb      	ldr	r3, [r7, #28]
 802197a:	4413      	add	r3, r2
 802197c:	781b      	ldrb	r3, [r3, #0]
 802197e:	4618      	mov	r0, r3
 8021980:	f7ff ff95 	bl	80218ae <mg_tolc>
 8021984:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 8021986:	683a      	ldr	r2, [r7, #0]
 8021988:	69fb      	ldr	r3, [r7, #28]
 802198a:	4413      	add	r3, r2
 802198c:	781b      	ldrb	r3, [r3, #0]
 802198e:	4618      	mov	r0, r3
 8021990:	f7ff ff8d 	bl	80218ae <mg_tolc>
 8021994:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8021996:	69ba      	ldr	r2, [r7, #24]
 8021998:	697b      	ldr	r3, [r7, #20]
 802199a:	429a      	cmp	r2, r3
 802199c:	da02      	bge.n	80219a4 <mg_strcasecmp+0x48>
 802199e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80219a2:	e01e      	b.n	80219e2 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 80219a4:	69ba      	ldr	r2, [r7, #24]
 80219a6:	697b      	ldr	r3, [r7, #20]
 80219a8:	429a      	cmp	r2, r3
 80219aa:	dd01      	ble.n	80219b0 <mg_strcasecmp+0x54>
 80219ac:	2301      	movs	r3, #1
 80219ae:	e018      	b.n	80219e2 <mg_strcasecmp+0x86>
    i++;
 80219b0:	69fb      	ldr	r3, [r7, #28]
 80219b2:	3301      	adds	r3, #1
 80219b4:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80219b6:	68fb      	ldr	r3, [r7, #12]
 80219b8:	69fa      	ldr	r2, [r7, #28]
 80219ba:	429a      	cmp	r2, r3
 80219bc:	d203      	bcs.n	80219c6 <mg_strcasecmp+0x6a>
 80219be:	687b      	ldr	r3, [r7, #4]
 80219c0:	69fa      	ldr	r2, [r7, #28]
 80219c2:	429a      	cmp	r2, r3
 80219c4:	d3d7      	bcc.n	8021976 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 80219c6:	68fb      	ldr	r3, [r7, #12]
 80219c8:	69fa      	ldr	r2, [r7, #28]
 80219ca:	429a      	cmp	r2, r3
 80219cc:	d201      	bcs.n	80219d2 <mg_strcasecmp+0x76>
 80219ce:	2301      	movs	r3, #1
 80219d0:	e007      	b.n	80219e2 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 80219d2:	687b      	ldr	r3, [r7, #4]
 80219d4:	69fa      	ldr	r2, [r7, #28]
 80219d6:	429a      	cmp	r2, r3
 80219d8:	d202      	bcs.n	80219e0 <mg_strcasecmp+0x84>
 80219da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80219de:	e000      	b.n	80219e2 <mg_strcasecmp+0x86>
  return 0;
 80219e0:	2300      	movs	r3, #0
}
 80219e2:	4618      	mov	r0, r3
 80219e4:	3724      	adds	r7, #36	@ 0x24
 80219e6:	46bd      	mov	sp, r7
 80219e8:	bd90      	pop	{r4, r7, pc}

080219ea <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 80219ea:	b490      	push	{r4, r7}
 80219ec:	b088      	sub	sp, #32
 80219ee:	af00      	add	r7, sp, #0
 80219f0:	f107 0408 	add.w	r4, r7, #8
 80219f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80219f8:	4639      	mov	r1, r7
 80219fa:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 80219fe:	2300      	movs	r3, #0
 8021a00:	61fb      	str	r3, [r7, #28]
 8021a02:	2300      	movs	r3, #0
 8021a04:	61bb      	str	r3, [r7, #24]
 8021a06:	2300      	movs	r3, #0
 8021a08:	617b      	str	r3, [r7, #20]
 8021a0a:	2300      	movs	r3, #0
 8021a0c:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 8021a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a10:	2b00      	cmp	r3, #0
 8021a12:	f000 80ba 	beq.w	8021b8a <mg_match+0x1a0>
 8021a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a18:	2200      	movs	r2, #0
 8021a1a:	601a      	str	r2, [r3, #0]
 8021a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a1e:	2200      	movs	r2, #0
 8021a20:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8021a22:	e0b2      	b.n	8021b8a <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 8021a24:	687b      	ldr	r3, [r7, #4]
 8021a26:	69fa      	ldr	r2, [r7, #28]
 8021a28:	429a      	cmp	r2, r3
 8021a2a:	d25b      	bcs.n	8021ae4 <mg_match+0xfa>
 8021a2c:	68fb      	ldr	r3, [r7, #12]
 8021a2e:	69ba      	ldr	r2, [r7, #24]
 8021a30:	429a      	cmp	r2, r3
 8021a32:	d257      	bcs.n	8021ae4 <mg_match+0xfa>
        (p.buf[i] == '?' ||
 8021a34:	683a      	ldr	r2, [r7, #0]
 8021a36:	69fb      	ldr	r3, [r7, #28]
 8021a38:	4413      	add	r3, r2
 8021a3a:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 8021a3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8021a3e:	d015      	beq.n	8021a6c <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8021a40:	683a      	ldr	r2, [r7, #0]
 8021a42:	69fb      	ldr	r3, [r7, #28]
 8021a44:	4413      	add	r3, r2
 8021a46:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 8021a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8021a4a:	d04b      	beq.n	8021ae4 <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8021a4c:	683a      	ldr	r2, [r7, #0]
 8021a4e:	69fb      	ldr	r3, [r7, #28]
 8021a50:	4413      	add	r3, r2
 8021a52:	781b      	ldrb	r3, [r3, #0]
 8021a54:	2b23      	cmp	r3, #35	@ 0x23
 8021a56:	d045      	beq.n	8021ae4 <mg_match+0xfa>
 8021a58:	68ba      	ldr	r2, [r7, #8]
 8021a5a:	69bb      	ldr	r3, [r7, #24]
 8021a5c:	4413      	add	r3, r2
 8021a5e:	781a      	ldrb	r2, [r3, #0]
 8021a60:	6839      	ldr	r1, [r7, #0]
 8021a62:	69fb      	ldr	r3, [r7, #28]
 8021a64:	440b      	add	r3, r1
 8021a66:	781b      	ldrb	r3, [r3, #0]
 8021a68:	429a      	cmp	r2, r3
 8021a6a:	d13b      	bne.n	8021ae4 <mg_match+0xfa>
      if (caps == NULL) {
 8021a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a6e:	2b00      	cmp	r3, #0
 8021a70:	d031      	beq.n	8021ad6 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 8021a72:	683a      	ldr	r2, [r7, #0]
 8021a74:	69fb      	ldr	r3, [r7, #28]
 8021a76:	4413      	add	r3, r2
 8021a78:	781b      	ldrb	r3, [r3, #0]
 8021a7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8021a7c:	d111      	bne.n	8021aa2 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8021a7e:	68ba      	ldr	r2, [r7, #8]
 8021a80:	69bb      	ldr	r3, [r7, #24]
 8021a82:	441a      	add	r2, r3
 8021a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a86:	601a      	str	r2, [r3, #0]
 8021a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a8a:	2201      	movs	r2, #1
 8021a8c:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8021a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a90:	3308      	adds	r3, #8
 8021a92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a96:	2200      	movs	r2, #0
 8021a98:	601a      	str	r2, [r3, #0]
 8021a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a9c:	2200      	movs	r2, #0
 8021a9e:	605a      	str	r2, [r3, #4]
 8021aa0:	e019      	b.n	8021ad6 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8021aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021aa4:	681b      	ldr	r3, [r3, #0]
 8021aa6:	2b00      	cmp	r3, #0
 8021aa8:	d015      	beq.n	8021ad6 <mg_match+0xec>
 8021aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021aac:	685b      	ldr	r3, [r3, #4]
 8021aae:	2b00      	cmp	r3, #0
 8021ab0:	d111      	bne.n	8021ad6 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8021ab2:	68ba      	ldr	r2, [r7, #8]
 8021ab4:	69bb      	ldr	r3, [r7, #24]
 8021ab6:	441a      	add	r2, r3
 8021ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021aba:	681b      	ldr	r3, [r3, #0]
 8021abc:	1ad3      	subs	r3, r2, r3
 8021abe:	461a      	mov	r2, r3
 8021ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ac2:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8021ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ac6:	3308      	adds	r3, #8
 8021ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021acc:	2200      	movs	r2, #0
 8021ace:	605a      	str	r2, [r3, #4]
 8021ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ad2:	2200      	movs	r2, #0
 8021ad4:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8021ad6:	69fb      	ldr	r3, [r7, #28]
 8021ad8:	3301      	adds	r3, #1
 8021ada:	61fb      	str	r3, [r7, #28]
 8021adc:	69bb      	ldr	r3, [r7, #24]
 8021ade:	3301      	adds	r3, #1
 8021ae0:	61bb      	str	r3, [r7, #24]
 8021ae2:	e052      	b.n	8021b8a <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	69fa      	ldr	r2, [r7, #28]
 8021ae8:	429a      	cmp	r2, r3
 8021aea:	d222      	bcs.n	8021b32 <mg_match+0x148>
 8021aec:	683a      	ldr	r2, [r7, #0]
 8021aee:	69fb      	ldr	r3, [r7, #28]
 8021af0:	4413      	add	r3, r2
 8021af2:	781b      	ldrb	r3, [r3, #0]
 8021af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8021af6:	d005      	beq.n	8021b04 <mg_match+0x11a>
 8021af8:	683a      	ldr	r2, [r7, #0]
 8021afa:	69fb      	ldr	r3, [r7, #28]
 8021afc:	4413      	add	r3, r2
 8021afe:	781b      	ldrb	r3, [r3, #0]
 8021b00:	2b23      	cmp	r3, #35	@ 0x23
 8021b02:	d116      	bne.n	8021b32 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8021b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b06:	2b00      	cmp	r3, #0
 8021b08:	d00b      	beq.n	8021b22 <mg_match+0x138>
 8021b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b0c:	681b      	ldr	r3, [r3, #0]
 8021b0e:	2b00      	cmp	r3, #0
 8021b10:	d107      	bne.n	8021b22 <mg_match+0x138>
 8021b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b14:	2200      	movs	r2, #0
 8021b16:	605a      	str	r2, [r3, #4]
 8021b18:	68ba      	ldr	r2, [r7, #8]
 8021b1a:	69bb      	ldr	r3, [r7, #24]
 8021b1c:	441a      	add	r2, r3
 8021b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b20:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8021b22:	69fb      	ldr	r3, [r7, #28]
 8021b24:	1c5a      	adds	r2, r3, #1
 8021b26:	61fa      	str	r2, [r7, #28]
 8021b28:	617b      	str	r3, [r7, #20]
 8021b2a:	69bb      	ldr	r3, [r7, #24]
 8021b2c:	3301      	adds	r3, #1
 8021b2e:	613b      	str	r3, [r7, #16]
 8021b30:	e02b      	b.n	8021b8a <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8021b32:	693b      	ldr	r3, [r7, #16]
 8021b34:	2b00      	cmp	r3, #0
 8021b36:	d025      	beq.n	8021b84 <mg_match+0x19a>
 8021b38:	68fb      	ldr	r3, [r7, #12]
 8021b3a:	693a      	ldr	r2, [r7, #16]
 8021b3c:	429a      	cmp	r2, r3
 8021b3e:	d821      	bhi.n	8021b84 <mg_match+0x19a>
 8021b40:	683a      	ldr	r2, [r7, #0]
 8021b42:	697b      	ldr	r3, [r7, #20]
 8021b44:	4413      	add	r3, r2
 8021b46:	781b      	ldrb	r3, [r3, #0]
 8021b48:	2b23      	cmp	r3, #35	@ 0x23
 8021b4a:	d005      	beq.n	8021b58 <mg_match+0x16e>
 8021b4c:	68ba      	ldr	r2, [r7, #8]
 8021b4e:	69bb      	ldr	r3, [r7, #24]
 8021b50:	4413      	add	r3, r2
 8021b52:	781b      	ldrb	r3, [r3, #0]
 8021b54:	2b2f      	cmp	r3, #47	@ 0x2f
 8021b56:	d015      	beq.n	8021b84 <mg_match+0x19a>
      i = ni, j = nj;
 8021b58:	697b      	ldr	r3, [r7, #20]
 8021b5a:	61fb      	str	r3, [r7, #28]
 8021b5c:	693b      	ldr	r3, [r7, #16]
 8021b5e:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8021b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b62:	2b00      	cmp	r3, #0
 8021b64:	d010      	beq.n	8021b88 <mg_match+0x19e>
 8021b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b68:	681b      	ldr	r3, [r3, #0]
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	d10c      	bne.n	8021b88 <mg_match+0x19e>
 8021b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b70:	685b      	ldr	r3, [r3, #4]
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	d108      	bne.n	8021b88 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 8021b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b78:	3b08      	subs	r3, #8
 8021b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b7e:	2200      	movs	r2, #0
 8021b80:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8021b82:	e001      	b.n	8021b88 <mg_match+0x19e>
      }
    } else {
      return false;
 8021b84:	2300      	movs	r3, #0
 8021b86:	e01f      	b.n	8021bc8 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8021b88:	bf00      	nop
  while (i < p.len || j < s.len) {
 8021b8a:	687b      	ldr	r3, [r7, #4]
 8021b8c:	69fa      	ldr	r2, [r7, #28]
 8021b8e:	429a      	cmp	r2, r3
 8021b90:	f4ff af48 	bcc.w	8021a24 <mg_match+0x3a>
 8021b94:	68fb      	ldr	r3, [r7, #12]
 8021b96:	69ba      	ldr	r2, [r7, #24]
 8021b98:	429a      	cmp	r2, r3
 8021b9a:	f4ff af43 	bcc.w	8021a24 <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 8021b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ba0:	2b00      	cmp	r3, #0
 8021ba2:	d010      	beq.n	8021bc6 <mg_match+0x1dc>
 8021ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ba6:	681b      	ldr	r3, [r3, #0]
 8021ba8:	2b00      	cmp	r3, #0
 8021baa:	d00c      	beq.n	8021bc6 <mg_match+0x1dc>
 8021bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021bae:	685b      	ldr	r3, [r3, #4]
 8021bb0:	2b00      	cmp	r3, #0
 8021bb2:	d108      	bne.n	8021bc6 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8021bb4:	68ba      	ldr	r2, [r7, #8]
 8021bb6:	69bb      	ldr	r3, [r7, #24]
 8021bb8:	441a      	add	r2, r3
 8021bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021bbc:	681b      	ldr	r3, [r3, #0]
 8021bbe:	1ad3      	subs	r3, r2, r3
 8021bc0:	461a      	mov	r2, r3
 8021bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021bc4:	605a      	str	r2, [r3, #4]
  }
  return true;
 8021bc6:	2301      	movs	r3, #1
}
 8021bc8:	4618      	mov	r0, r3
 8021bca:	3720      	adds	r7, #32
 8021bcc:	46bd      	mov	sp, r7
 8021bce:	bc90      	pop	{r4, r7}
 8021bd0:	4770      	bx	lr

08021bd2 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8021bd2:	b590      	push	{r4, r7, lr}
 8021bd4:	b089      	sub	sp, #36	@ 0x24
 8021bd6:	af00      	add	r7, sp, #0
 8021bd8:	f107 0410 	add.w	r4, r7, #16
 8021bdc:	e884 0003 	stmia.w	r4, {r0, r1}
 8021be0:	60fa      	str	r2, [r7, #12]
 8021be2:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 8021be4:	697b      	ldr	r3, [r7, #20]
 8021be6:	2b00      	cmp	r3, #0
 8021be8:	d002      	beq.n	8021bf0 <mg_span+0x1e>
 8021bea:	693b      	ldr	r3, [r7, #16]
 8021bec:	2b00      	cmp	r3, #0
 8021bee:	d101      	bne.n	8021bf4 <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 8021bf0:	2300      	movs	r3, #0
 8021bf2:	e047      	b.n	8021c84 <mg_span+0xb2>
  } else {
    size_t len = 0;
 8021bf4:	2300      	movs	r3, #0
 8021bf6:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8021bf8:	e002      	b.n	8021c00 <mg_span+0x2e>
 8021bfa:	69fb      	ldr	r3, [r7, #28]
 8021bfc:	3301      	adds	r3, #1
 8021bfe:	61fb      	str	r3, [r7, #28]
 8021c00:	697b      	ldr	r3, [r7, #20]
 8021c02:	69fa      	ldr	r2, [r7, #28]
 8021c04:	429a      	cmp	r2, r3
 8021c06:	d207      	bcs.n	8021c18 <mg_span+0x46>
 8021c08:	693a      	ldr	r2, [r7, #16]
 8021c0a:	69fb      	ldr	r3, [r7, #28]
 8021c0c:	4413      	add	r3, r2
 8021c0e:	781b      	ldrb	r3, [r3, #0]
 8021c10:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8021c14:	429a      	cmp	r2, r3
 8021c16:	d1f0      	bne.n	8021bfa <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8021c18:	68fb      	ldr	r3, [r7, #12]
 8021c1a:	2b00      	cmp	r3, #0
 8021c1c:	d00c      	beq.n	8021c38 <mg_span+0x66>
 8021c1e:	6939      	ldr	r1, [r7, #16]
 8021c20:	68fc      	ldr	r4, [r7, #12]
 8021c22:	463b      	mov	r3, r7
 8021c24:	69fa      	ldr	r2, [r7, #28]
 8021c26:	4618      	mov	r0, r3
 8021c28:	f7ff fe29 	bl	802187e <mg_str_n>
 8021c2c:	4622      	mov	r2, r4
 8021c2e:	463b      	mov	r3, r7
 8021c30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021c34:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8021c38:	68bb      	ldr	r3, [r7, #8]
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	d010      	beq.n	8021c60 <mg_span+0x8e>
 8021c3e:	693a      	ldr	r2, [r7, #16]
 8021c40:	69fb      	ldr	r3, [r7, #28]
 8021c42:	18d1      	adds	r1, r2, r3
 8021c44:	697a      	ldr	r2, [r7, #20]
 8021c46:	69fb      	ldr	r3, [r7, #28]
 8021c48:	1ad2      	subs	r2, r2, r3
 8021c4a:	68bc      	ldr	r4, [r7, #8]
 8021c4c:	463b      	mov	r3, r7
 8021c4e:	4618      	mov	r0, r3
 8021c50:	f7ff fe15 	bl	802187e <mg_str_n>
 8021c54:	4622      	mov	r2, r4
 8021c56:	463b      	mov	r3, r7
 8021c58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021c5c:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8021c60:	68bb      	ldr	r3, [r7, #8]
 8021c62:	2b00      	cmp	r3, #0
 8021c64:	d00d      	beq.n	8021c82 <mg_span+0xb0>
 8021c66:	697b      	ldr	r3, [r7, #20]
 8021c68:	69fa      	ldr	r2, [r7, #28]
 8021c6a:	429a      	cmp	r2, r3
 8021c6c:	d209      	bcs.n	8021c82 <mg_span+0xb0>
 8021c6e:	68bb      	ldr	r3, [r7, #8]
 8021c70:	681b      	ldr	r3, [r3, #0]
 8021c72:	1c5a      	adds	r2, r3, #1
 8021c74:	68bb      	ldr	r3, [r7, #8]
 8021c76:	601a      	str	r2, [r3, #0]
 8021c78:	68bb      	ldr	r3, [r7, #8]
 8021c7a:	685b      	ldr	r3, [r3, #4]
 8021c7c:	1e5a      	subs	r2, r3, #1
 8021c7e:	68bb      	ldr	r3, [r7, #8]
 8021c80:	605a      	str	r2, [r3, #4]
    return true;
 8021c82:	2301      	movs	r3, #1
  }
}
 8021c84:	4618      	mov	r0, r3
 8021c86:	3724      	adds	r7, #36	@ 0x24
 8021c88:	46bd      	mov	sp, r7
 8021c8a:	bd90      	pop	{r4, r7, pc}

08021c8c <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8021c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c90:	b0a5      	sub	sp, #148	@ 0x94
 8021c92:	af00      	add	r7, sp, #0
 8021c94:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8021c98:	e884 0003 	stmia.w	r4, {r0, r1}
 8021c9c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8021c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 8021ca0:	2300      	movs	r3, #0
 8021ca2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8021ca6:	2300      	movs	r3, #0
 8021ca8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8021cac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021cb0:	2b01      	cmp	r3, #1
 8021cb2:	d016      	beq.n	8021ce2 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8021cb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021cb8:	2b02      	cmp	r3, #2
 8021cba:	d00d      	beq.n	8021cd8 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 8021cbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021cc0:	2b04      	cmp	r3, #4
 8021cc2:	d104      	bne.n	8021cce <mg_str_to_num+0x42>
 8021cc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021cc8:	f04f 0300 	mov.w	r3, #0
 8021ccc:	e00d      	b.n	8021cea <mg_str_to_num+0x5e>
 8021cce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021cd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021cd6:	e008      	b.n	8021cea <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8021cd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8021cdc:	f04f 0300 	mov.w	r3, #0
 8021ce0:	e003      	b.n	8021cea <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8021ce2:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8021ce6:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8021cea:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 8021cee:	f04f 0200 	mov.w	r2, #0
 8021cf2:	f04f 0300 	mov.w	r3, #0
 8021cf6:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 8021cfa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8021cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8021d02:	bf08      	it	eq
 8021d04:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8021d08:	d105      	bne.n	8021d16 <mg_str_to_num+0x8a>
 8021d0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021d0e:	2b08      	cmp	r3, #8
 8021d10:	d001      	beq.n	8021d16 <mg_str_to_num+0x8a>
 8021d12:	2300      	movs	r3, #0
 8021d14:	e1e8      	b.n	80220e8 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 8021d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d18:	2b00      	cmp	r3, #0
 8021d1a:	d12d      	bne.n	8021d78 <mg_str_to_num+0xec>
 8021d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021d1e:	2b01      	cmp	r3, #1
 8021d20:	d92a      	bls.n	8021d78 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 8021d22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021d24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021d28:	4413      	add	r3, r2
 8021d2a:	781b      	ldrb	r3, [r3, #0]
 8021d2c:	2b30      	cmp	r3, #48	@ 0x30
 8021d2e:	d121      	bne.n	8021d74 <mg_str_to_num+0xe8>
      i++;
 8021d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021d34:	3301      	adds	r3, #1
 8021d36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8021d3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021d40:	4413      	add	r3, r2
 8021d42:	781b      	ldrb	r3, [r3, #0]
 8021d44:	2b62      	cmp	r3, #98	@ 0x62
 8021d46:	d00a      	beq.n	8021d5e <mg_str_to_num+0xd2>
 8021d48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021d4e:	4413      	add	r3, r2
 8021d50:	781b      	ldrb	r3, [r3, #0]
 8021d52:	2b78      	cmp	r3, #120	@ 0x78
 8021d54:	d101      	bne.n	8021d5a <mg_str_to_num+0xce>
 8021d56:	2310      	movs	r3, #16
 8021d58:	e002      	b.n	8021d60 <mg_str_to_num+0xd4>
 8021d5a:	230a      	movs	r3, #10
 8021d5c:	e000      	b.n	8021d60 <mg_str_to_num+0xd4>
 8021d5e:	2302      	movs	r3, #2
 8021d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 8021d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d64:	2b0a      	cmp	r3, #10
 8021d66:	d007      	beq.n	8021d78 <mg_str_to_num+0xec>
 8021d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021d6c:	3301      	adds	r3, #1
 8021d6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8021d72:	e001      	b.n	8021d78 <mg_str_to_num+0xec>
    } else {
      base = 10;
 8021d74:	230a      	movs	r3, #10
 8021d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 8021d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d7a:	2b10      	cmp	r3, #16
 8021d7c:	f000 8178 	beq.w	8022070 <mg_str_to_num+0x3e4>
 8021d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d82:	2b10      	cmp	r3, #16
 8021d84:	f300 817d 	bgt.w	8022082 <mg_str_to_num+0x3f6>
 8021d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d8a:	2b02      	cmp	r3, #2
 8021d8c:	d052      	beq.n	8021e34 <mg_str_to_num+0x1a8>
 8021d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021d90:	2b0a      	cmp	r3, #10
 8021d92:	f000 80cd 	beq.w	8021f30 <mg_str_to_num+0x2a4>
 8021d96:	e174      	b.n	8022082 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8021d98:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021d9e:	4413      	add	r3, r2
 8021da0:	781b      	ldrb	r3, [r3, #0]
 8021da2:	3b30      	subs	r3, #48	@ 0x30
 8021da4:	17da      	asrs	r2, r3, #31
 8021da6:	633b      	str	r3, [r7, #48]	@ 0x30
 8021da8:	637a      	str	r2, [r7, #52]	@ 0x34
 8021daa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8021dae:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 8021db2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8021db6:	f04f 0200 	mov.w	r2, #0
 8021dba:	f04f 0300 	mov.w	r3, #0
 8021dbe:	0842      	lsrs	r2, r0, #1
 8021dc0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8021dc4:	084b      	lsrs	r3, r1, #1
 8021dc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8021dca:	4282      	cmp	r2, r0
 8021dcc:	418b      	sbcs	r3, r1
 8021dce:	d201      	bcs.n	8021dd4 <mg_str_to_num+0x148>
 8021dd0:	2300      	movs	r3, #0
 8021dd2:	e189      	b.n	80220e8 <mg_str_to_num+0x45c>
        result *= 2;
 8021dd4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8021dd8:	1891      	adds	r1, r2, r2
 8021dda:	62b9      	str	r1, [r7, #40]	@ 0x28
 8021ddc:	415b      	adcs	r3, r3
 8021dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021de0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8021de4:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8021de8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8021dec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8021df0:	1a85      	subs	r5, r0, r2
 8021df2:	eb61 0603 	sbc.w	r6, r1, r3
 8021df6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8021dfa:	4295      	cmp	r5, r2
 8021dfc:	eb76 0303 	sbcs.w	r3, r6, r3
 8021e00:	d201      	bcs.n	8021e06 <mg_str_to_num+0x17a>
 8021e02:	2300      	movs	r3, #0
 8021e04:	e170      	b.n	80220e8 <mg_str_to_num+0x45c>
        result += digit;
 8021e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8021e0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8021e0e:	1884      	adds	r4, r0, r2
 8021e10:	623c      	str	r4, [r7, #32]
 8021e12:	eb41 0303 	adc.w	r3, r1, r3
 8021e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8021e18:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8021e1c:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8021e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021e24:	3301      	adds	r3, #1
 8021e26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8021e2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8021e2e:	3301      	adds	r3, #1
 8021e30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8021e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021e36:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8021e3a:	429a      	cmp	r2, r3
 8021e3c:	f080 8123 	bcs.w	8022086 <mg_str_to_num+0x3fa>
 8021e40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021e46:	4413      	add	r3, r2
 8021e48:	781b      	ldrb	r3, [r3, #0]
 8021e4a:	2b30      	cmp	r3, #48	@ 0x30
 8021e4c:	d0a4      	beq.n	8021d98 <mg_str_to_num+0x10c>
 8021e4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021e54:	4413      	add	r3, r2
 8021e56:	781b      	ldrb	r3, [r3, #0]
 8021e58:	2b31      	cmp	r3, #49	@ 0x31
 8021e5a:	d09d      	beq.n	8021d98 <mg_str_to_num+0x10c>
      }
      break;
 8021e5c:	e113      	b.n	8022086 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8021e5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021e64:	4413      	add	r3, r2
 8021e66:	781b      	ldrb	r3, [r3, #0]
 8021e68:	3b30      	subs	r3, #48	@ 0x30
 8021e6a:	17da      	asrs	r2, r3, #31
 8021e6c:	61bb      	str	r3, [r7, #24]
 8021e6e:	61fa      	str	r2, [r7, #28]
 8021e70:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8021e74:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 8021e78:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8021e7c:	f04f 020a 	mov.w	r2, #10
 8021e80:	f04f 0300 	mov.w	r3, #0
 8021e84:	f7de ff68 	bl	8000d58 <__aeabi_uldivmod>
 8021e88:	4602      	mov	r2, r0
 8021e8a:	460b      	mov	r3, r1
 8021e8c:	4610      	mov	r0, r2
 8021e8e:	4619      	mov	r1, r3
 8021e90:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8021e94:	4290      	cmp	r0, r2
 8021e96:	eb71 0303 	sbcs.w	r3, r1, r3
 8021e9a:	d201      	bcs.n	8021ea0 <mg_str_to_num+0x214>
 8021e9c:	2300      	movs	r3, #0
 8021e9e:	e123      	b.n	80220e8 <mg_str_to_num+0x45c>
        result *= 10;
 8021ea0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8021ea4:	4622      	mov	r2, r4
 8021ea6:	462b      	mov	r3, r5
 8021ea8:	f04f 0000 	mov.w	r0, #0
 8021eac:	f04f 0100 	mov.w	r1, #0
 8021eb0:	0099      	lsls	r1, r3, #2
 8021eb2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8021eb6:	0090      	lsls	r0, r2, #2
 8021eb8:	4602      	mov	r2, r0
 8021eba:	460b      	mov	r3, r1
 8021ebc:	eb12 0804 	adds.w	r8, r2, r4
 8021ec0:	eb43 0905 	adc.w	r9, r3, r5
 8021ec4:	eb18 0308 	adds.w	r3, r8, r8
 8021ec8:	613b      	str	r3, [r7, #16]
 8021eca:	eb49 0309 	adc.w	r3, r9, r9
 8021ece:	617b      	str	r3, [r7, #20]
 8021ed0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8021ed4:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8021ed8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8021edc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8021ee0:	1a84      	subs	r4, r0, r2
 8021ee2:	63bc      	str	r4, [r7, #56]	@ 0x38
 8021ee4:	eb61 0303 	sbc.w	r3, r1, r3
 8021ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021eea:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8021eee:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8021ef2:	4621      	mov	r1, r4
 8021ef4:	4291      	cmp	r1, r2
 8021ef6:	4629      	mov	r1, r5
 8021ef8:	eb71 0303 	sbcs.w	r3, r1, r3
 8021efc:	d201      	bcs.n	8021f02 <mg_str_to_num+0x276>
 8021efe:	2300      	movs	r3, #0
 8021f00:	e0f2      	b.n	80220e8 <mg_str_to_num+0x45c>
        result += digit;
 8021f02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8021f06:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8021f0a:	1884      	adds	r4, r0, r2
 8021f0c:	60bc      	str	r4, [r7, #8]
 8021f0e:	eb41 0303 	adc.w	r3, r1, r3
 8021f12:	60fb      	str	r3, [r7, #12]
 8021f14:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8021f18:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8021f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021f20:	3301      	adds	r3, #1
 8021f22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8021f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8021f2a:	3301      	adds	r3, #1
 8021f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8021f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021f32:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8021f36:	429a      	cmp	r2, r3
 8021f38:	f080 80a7 	bcs.w	802208a <mg_str_to_num+0x3fe>
 8021f3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021f42:	4413      	add	r3, r2
 8021f44:	781b      	ldrb	r3, [r3, #0]
 8021f46:	2b2f      	cmp	r3, #47	@ 0x2f
 8021f48:	f240 809f 	bls.w	802208a <mg_str_to_num+0x3fe>
 8021f4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021f52:	4413      	add	r3, r2
 8021f54:	781b      	ldrb	r3, [r3, #0]
 8021f56:	2b39      	cmp	r3, #57	@ 0x39
 8021f58:	d981      	bls.n	8021e5e <mg_str_to_num+0x1d2>
      }
      break;
 8021f5a:	e096      	b.n	802208a <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 8021f5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8021f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021f62:	4413      	add	r3, r2
 8021f64:	781b      	ldrb	r3, [r3, #0]
 8021f66:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8021f6a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021f6e:	2b2f      	cmp	r3, #47	@ 0x2f
 8021f70:	d90a      	bls.n	8021f88 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8021f72:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021f76:	2b39      	cmp	r3, #57	@ 0x39
 8021f78:	d806      	bhi.n	8021f88 <mg_str_to_num+0x2fc>
 8021f7a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021f7e:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8021f80:	17da      	asrs	r2, r3, #31
 8021f82:	643b      	str	r3, [r7, #64]	@ 0x40
 8021f84:	647a      	str	r2, [r7, #68]	@ 0x44
 8021f86:	e023      	b.n	8021fd0 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8021f88:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021f8c:	2b40      	cmp	r3, #64	@ 0x40
 8021f8e:	d90a      	bls.n	8021fa6 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8021f90:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021f94:	2b46      	cmp	r3, #70	@ 0x46
 8021f96:	d806      	bhi.n	8021fa6 <mg_str_to_num+0x31a>
 8021f98:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021f9c:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8021f9e:	17da      	asrs	r2, r3, #31
 8021fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8021fa2:	647a      	str	r2, [r7, #68]	@ 0x44
 8021fa4:	e014      	b.n	8021fd0 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 8021fa6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021faa:	2b60      	cmp	r3, #96	@ 0x60
 8021fac:	d90a      	bls.n	8021fc4 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8021fae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021fb2:	2b66      	cmp	r3, #102	@ 0x66
 8021fb4:	d806      	bhi.n	8021fc4 <mg_str_to_num+0x338>
 8021fb6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8021fba:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 8021fbc:	17da      	asrs	r2, r3, #31
 8021fbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8021fc0:	647a      	str	r2, [r7, #68]	@ 0x44
 8021fc2:	e005      	b.n	8021fd0 <mg_str_to_num+0x344>
 8021fc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021fc8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8021fcc:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8021fd0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8021fd4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 8021fd8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8021fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8021fe0:	bf08      	it	eq
 8021fe2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8021fe6:	d04a      	beq.n	802207e <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 8021fe8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8021fec:	f04f 0200 	mov.w	r2, #0
 8021ff0:	f04f 0300 	mov.w	r3, #0
 8021ff4:	0902      	lsrs	r2, r0, #4
 8021ff6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8021ffa:	090b      	lsrs	r3, r1, #4
 8021ffc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8022000:	4282      	cmp	r2, r0
 8022002:	418b      	sbcs	r3, r1
 8022004:	d201      	bcs.n	802200a <mg_str_to_num+0x37e>
 8022006:	2300      	movs	r3, #0
 8022008:	e06e      	b.n	80220e8 <mg_str_to_num+0x45c>
        result *= 16;
 802200a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 802200e:	f04f 0200 	mov.w	r2, #0
 8022012:	f04f 0300 	mov.w	r3, #0
 8022016:	010b      	lsls	r3, r1, #4
 8022018:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 802201c:	0102      	lsls	r2, r0, #4
 802201e:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8022022:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8022026:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 802202a:	ebb0 0a02 	subs.w	sl, r0, r2
 802202e:	eb61 0b03 	sbc.w	fp, r1, r3
 8022032:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8022036:	4592      	cmp	sl, r2
 8022038:	eb7b 0303 	sbcs.w	r3, fp, r3
 802203c:	d201      	bcs.n	8022042 <mg_str_to_num+0x3b6>
 802203e:	2300      	movs	r3, #0
 8022040:	e052      	b.n	80220e8 <mg_str_to_num+0x45c>
        result += digit;
 8022042:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8022046:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 802204a:	1884      	adds	r4, r0, r2
 802204c:	603c      	str	r4, [r7, #0]
 802204e:	eb41 0303 	adc.w	r3, r1, r3
 8022052:	607b      	str	r3, [r7, #4]
 8022054:	e9d7 3400 	ldrd	r3, r4, [r7]
 8022058:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 802205c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022060:	3301      	adds	r3, #1
 8022062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8022066:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802206a:	3301      	adds	r3, #1
 802206c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 8022070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022072:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8022076:	429a      	cmp	r2, r3
 8022078:	f4ff af70 	bcc.w	8021f5c <mg_str_to_num+0x2d0>
      }
      break;
 802207c:	e006      	b.n	802208c <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 802207e:	bf00      	nop
      break;
 8022080:	e004      	b.n	802208c <mg_str_to_num+0x400>
    default:
      return false;
 8022082:	2300      	movs	r3, #0
 8022084:	e030      	b.n	80220e8 <mg_str_to_num+0x45c>
      break;
 8022086:	bf00      	nop
 8022088:	e000      	b.n	802208c <mg_str_to_num+0x400>
      break;
 802208a:	bf00      	nop
  }
  if (ndigits == 0) return false;
 802208c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8022090:	2b00      	cmp	r3, #0
 8022092:	d101      	bne.n	8022098 <mg_str_to_num+0x40c>
 8022094:	2300      	movs	r3, #0
 8022096:	e027      	b.n	80220e8 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 8022098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802209a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802209e:	429a      	cmp	r2, r3
 80220a0:	d001      	beq.n	80220a6 <mg_str_to_num+0x41a>
 80220a2:	2300      	movs	r3, #0
 80220a4:	e020      	b.n	80220e8 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 80220a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80220aa:	2b01      	cmp	r3, #1
 80220ac:	d104      	bne.n	80220b8 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 80220ae:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 80220b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80220b4:	701a      	strb	r2, [r3, #0]
 80220b6:	e016      	b.n	80220e6 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 80220b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80220bc:	2b02      	cmp	r3, #2
 80220be:	d104      	bne.n	80220ca <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 80220c0:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 80220c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80220c6:	801a      	strh	r2, [r3, #0]
 80220c8:	e00d      	b.n	80220e6 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 80220ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80220ce:	2b04      	cmp	r3, #4
 80220d0:	d104      	bne.n	80220dc <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 80220d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80220d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80220d8:	601a      	str	r2, [r3, #0]
 80220da:	e004      	b.n	80220e6 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 80220dc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80220de:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80220e2:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 80220e6:	2301      	movs	r3, #1
}
 80220e8:	4618      	mov	r0, r3
 80220ea:	3794      	adds	r7, #148	@ 0x94
 80220ec:	46bd      	mov	sp, r7
 80220ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080220f2 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 80220f2:	b480      	push	{r7}
 80220f4:	b085      	sub	sp, #20
 80220f6:	af00      	add	r7, sp, #0
 80220f8:	60f8      	str	r0, [r7, #12]
 80220fa:	60b9      	str	r1, [r7, #8]
 80220fc:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8022100:	68bb      	ldr	r3, [r7, #8]
 8022102:	2200      	movs	r2, #0
 8022104:	601a      	str	r2, [r3, #0]
 8022106:	68b9      	ldr	r1, [r7, #8]
 8022108:	e9d7 2300 	ldrd	r2, r3, [r7]
 802210c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8022110:	68b9      	ldr	r1, [r7, #8]
 8022112:	f04f 0200 	mov.w	r2, #0
 8022116:	f04f 0300 	mov.w	r3, #0
 802211a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 802211e:	68bb      	ldr	r3, [r7, #8]
 8022120:	69ba      	ldr	r2, [r7, #24]
 8022122:	619a      	str	r2, [r3, #24]
 8022124:	68bb      	ldr	r3, [r7, #8]
 8022126:	69fa      	ldr	r2, [r7, #28]
 8022128:	61da      	str	r2, [r3, #28]
 802212a:	68bb      	ldr	r3, [r7, #8]
 802212c:	6a3a      	ldr	r2, [r7, #32]
 802212e:	621a      	str	r2, [r3, #32]
 8022130:	68fb      	ldr	r3, [r7, #12]
 8022132:	681a      	ldr	r2, [r3, #0]
 8022134:	68bb      	ldr	r3, [r7, #8]
 8022136:	625a      	str	r2, [r3, #36]	@ 0x24
  *head = t;
 8022138:	68fb      	ldr	r3, [r7, #12]
 802213a:	68ba      	ldr	r2, [r7, #8]
 802213c:	601a      	str	r2, [r3, #0]
}
 802213e:	bf00      	nop
 8022140:	3714      	adds	r7, #20
 8022142:	46bd      	mov	sp, r7
 8022144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022148:	4770      	bx	lr

0802214a <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 802214a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802214e:	b086      	sub	sp, #24
 8022150:	af00      	add	r7, sp, #0
 8022152:	6178      	str	r0, [r7, #20]
 8022154:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8022158:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802215c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022160:	eb10 0a02 	adds.w	sl, r0, r2
 8022164:	eb41 0b03 	adc.w	fp, r1, r3
 8022168:	697b      	ldr	r3, [r7, #20]
 802216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802216e:	4592      	cmp	sl, r2
 8022170:	eb7b 0303 	sbcs.w	r3, fp, r3
 8022174:	d206      	bcs.n	8022184 <mg_timer_expired+0x3a>
 8022176:	6979      	ldr	r1, [r7, #20]
 8022178:	f04f 0200 	mov.w	r2, #0
 802217c:	f04f 0300 	mov.w	r3, #0
 8022180:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8022184:	697b      	ldr	r3, [r7, #20]
 8022186:	e9d3 2300 	ldrd	r2, r3, [r3]
 802218a:	4313      	orrs	r3, r2
 802218c:	d10d      	bne.n	80221aa <mg_timer_expired+0x60>
 802218e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8022192:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022196:	1886      	adds	r6, r0, r2
 8022198:	603e      	str	r6, [r7, #0]
 802219a:	eb41 0303 	adc.w	r3, r1, r3
 802219e:	607b      	str	r3, [r7, #4]
 80221a0:	697b      	ldr	r3, [r7, #20]
 80221a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80221a6:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 80221aa:	697b      	ldr	r3, [r7, #20]
 80221ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221b0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80221b4:	4290      	cmp	r0, r2
 80221b6:	eb71 0303 	sbcs.w	r3, r1, r3
 80221ba:	d201      	bcs.n	80221c0 <mg_timer_expired+0x76>
 80221bc:	2300      	movs	r3, #0
 80221be:	e022      	b.n	8022206 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80221c0:	697b      	ldr	r3, [r7, #20]
 80221c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80221ca:	ebb0 0802 	subs.w	r8, r0, r2
 80221ce:	eb61 0903 	sbc.w	r9, r1, r3
 80221d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80221d6:	4542      	cmp	r2, r8
 80221d8:	eb73 0309 	sbcs.w	r3, r3, r9
 80221dc:	d207      	bcs.n	80221ee <mg_timer_expired+0xa4>
 80221de:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80221e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80221e6:	1884      	adds	r4, r0, r2
 80221e8:	eb41 0503 	adc.w	r5, r1, r3
 80221ec:	e007      	b.n	80221fe <mg_timer_expired+0xb4>
 80221ee:	697b      	ldr	r3, [r7, #20]
 80221f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80221f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80221f8:	1884      	adds	r4, r0, r2
 80221fa:	eb41 0503 	adc.w	r5, r1, r3
 80221fe:	697b      	ldr	r3, [r7, #20]
 8022200:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8022204:	2301      	movs	r3, #1
}
 8022206:	4618      	mov	r0, r3
 8022208:	3718      	adds	r7, #24
 802220a:	46bd      	mov	sp, r7
 802220c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8022210:	4770      	bx	lr

08022212 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8022212:	b590      	push	{r4, r7, lr}
 8022214:	b08b      	sub	sp, #44	@ 0x2c
 8022216:	af02      	add	r7, sp, #8
 8022218:	60f8      	str	r0, [r7, #12]
 802221a:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 802221e:	68fb      	ldr	r3, [r7, #12]
 8022220:	681b      	ldr	r3, [r3, #0]
 8022222:	61fb      	str	r3, [r7, #28]
 8022224:	e054      	b.n	80222d0 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8022226:	69fb      	ldr	r3, [r7, #28]
 8022228:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 802222c:	4313      	orrs	r3, r2
 802222e:	d10d      	bne.n	802224c <mg_timer_poll+0x3a>
 8022230:	69fb      	ldr	r3, [r7, #28]
 8022232:	699b      	ldr	r3, [r3, #24]
 8022234:	f003 0302 	and.w	r3, r3, #2
 8022238:	2b00      	cmp	r3, #0
 802223a:	d007      	beq.n	802224c <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 802223c:	69fb      	ldr	r3, [r7, #28]
 802223e:	699b      	ldr	r3, [r3, #24]
 8022240:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8022244:	2b00      	cmp	r3, #0
 8022246:	d101      	bne.n	802224c <mg_timer_poll+0x3a>
 8022248:	2301      	movs	r3, #1
 802224a:	e000      	b.n	802224e <mg_timer_poll+0x3c>
 802224c:	2300      	movs	r3, #0
 802224e:	76fb      	strb	r3, [r7, #27]
 8022250:	7efb      	ldrb	r3, [r7, #27]
 8022252:	f003 0301 	and.w	r3, r3, #1
 8022256:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8022258:	69fb      	ldr	r3, [r7, #28]
 802225a:	f103 0410 	add.w	r4, r3, #16
 802225e:	69fb      	ldr	r3, [r7, #28]
 8022260:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8022264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022268:	e9cd 2300 	strd	r2, r3, [sp]
 802226c:	4602      	mov	r2, r0
 802226e:	460b      	mov	r3, r1
 8022270:	4620      	mov	r0, r4
 8022272:	f7ff ff6a 	bl	802214a <mg_timer_expired>
 8022276:	4603      	mov	r3, r0
 8022278:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 802227a:	69fb      	ldr	r3, [r7, #28]
 802227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802227e:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8022280:	7efb      	ldrb	r3, [r7, #27]
 8022282:	f083 0301 	eor.w	r3, r3, #1
 8022286:	b2db      	uxtb	r3, r3
 8022288:	2b00      	cmp	r3, #0
 802228a:	d005      	beq.n	8022298 <mg_timer_poll+0x86>
 802228c:	7ebb      	ldrb	r3, [r7, #26]
 802228e:	f083 0301 	eor.w	r3, r3, #1
 8022292:	b2db      	uxtb	r3, r3
 8022294:	2b00      	cmp	r3, #0
 8022296:	d118      	bne.n	80222ca <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8022298:	69fb      	ldr	r3, [r7, #28]
 802229a:	699b      	ldr	r3, [r3, #24]
 802229c:	f003 0301 	and.w	r3, r3, #1
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	d105      	bne.n	80222b0 <mg_timer_poll+0x9e>
 80222a4:	69fb      	ldr	r3, [r7, #28]
 80222a6:	699b      	ldr	r3, [r3, #24]
 80222a8:	f003 0304 	and.w	r3, r3, #4
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	d105      	bne.n	80222bc <mg_timer_poll+0xaa>
      t->fn(t->arg);
 80222b0:	69fb      	ldr	r3, [r7, #28]
 80222b2:	69db      	ldr	r3, [r3, #28]
 80222b4:	69fa      	ldr	r2, [r7, #28]
 80222b6:	6a12      	ldr	r2, [r2, #32]
 80222b8:	4610      	mov	r0, r2
 80222ba:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 80222bc:	69fb      	ldr	r3, [r7, #28]
 80222be:	699b      	ldr	r3, [r3, #24]
 80222c0:	f043 0204 	orr.w	r2, r3, #4
 80222c4:	69fb      	ldr	r3, [r7, #28]
 80222c6:	619a      	str	r2, [r3, #24]
 80222c8:	e000      	b.n	80222cc <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 80222ca:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 80222cc:	697b      	ldr	r3, [r7, #20]
 80222ce:	61fb      	str	r3, [r7, #28]
 80222d0:	69fb      	ldr	r3, [r7, #28]
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	d1a7      	bne.n	8022226 <mg_timer_poll+0x14>
  }
}
 80222d6:	bf00      	nop
 80222d8:	bf00      	nop
 80222da:	3724      	adds	r7, #36	@ 0x24
 80222dc:	46bd      	mov	sp, r7
 80222de:	bd90      	pop	{r4, r7, pc}

080222e0 <mg_tls_handshake>:
#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
  (void) opts;
  mg_error(c, "TLS is not enabled");
}
void mg_tls_handshake(struct mg_connection *c) {
 80222e0:	b480      	push	{r7}
 80222e2:	b083      	sub	sp, #12
 80222e4:	af00      	add	r7, sp, #0
 80222e6:	6078      	str	r0, [r7, #4]
  (void) c;
}
 80222e8:	bf00      	nop
 80222ea:	370c      	adds	r7, #12
 80222ec:	46bd      	mov	sp, r7
 80222ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222f2:	4770      	bx	lr

080222f4 <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 80222f4:	b480      	push	{r7}
 80222f6:	b083      	sub	sp, #12
 80222f8:	af00      	add	r7, sp, #0
 80222fa:	6078      	str	r0, [r7, #4]
  (void) c;
}
 80222fc:	bf00      	nop
 80222fe:	370c      	adds	r7, #12
 8022300:	46bd      	mov	sp, r7
 8022302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022306:	4770      	bx	lr

08022308 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8022308:	b480      	push	{r7}
 802230a:	b085      	sub	sp, #20
 802230c:	af00      	add	r7, sp, #0
 802230e:	60f8      	str	r0, [r7, #12]
 8022310:	60b9      	str	r1, [r7, #8]
 8022312:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8022314:	68fb      	ldr	r3, [r7, #12]
 8022316:	2b00      	cmp	r3, #0
 8022318:	d005      	beq.n	8022326 <mg_tls_recv+0x1e>
 802231a:	68bb      	ldr	r3, [r7, #8]
 802231c:	2b00      	cmp	r3, #0
 802231e:	d002      	beq.n	8022326 <mg_tls_recv+0x1e>
 8022320:	687b      	ldr	r3, [r7, #4]
 8022322:	2b00      	cmp	r3, #0
 8022324:	d101      	bne.n	802232a <mg_tls_recv+0x22>
 8022326:	2300      	movs	r3, #0
 8022328:	e001      	b.n	802232e <mg_tls_recv+0x26>
 802232a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 802232e:	4618      	mov	r0, r3
 8022330:	3714      	adds	r7, #20
 8022332:	46bd      	mov	sp, r7
 8022334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022338:	4770      	bx	lr

0802233a <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 802233a:	b480      	push	{r7}
 802233c:	b085      	sub	sp, #20
 802233e:	af00      	add	r7, sp, #0
 8022340:	60f8      	str	r0, [r7, #12]
 8022342:	60b9      	str	r1, [r7, #8]
 8022344:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8022346:	68fb      	ldr	r3, [r7, #12]
 8022348:	2b00      	cmp	r3, #0
 802234a:	d005      	beq.n	8022358 <mg_tls_send+0x1e>
 802234c:	68bb      	ldr	r3, [r7, #8]
 802234e:	2b00      	cmp	r3, #0
 8022350:	d002      	beq.n	8022358 <mg_tls_send+0x1e>
 8022352:	687b      	ldr	r3, [r7, #4]
 8022354:	2b00      	cmp	r3, #0
 8022356:	d101      	bne.n	802235c <mg_tls_send+0x22>
 8022358:	2300      	movs	r3, #0
 802235a:	e001      	b.n	8022360 <mg_tls_send+0x26>
 802235c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8022360:	4618      	mov	r0, r3
 8022362:	3714      	adds	r7, #20
 8022364:	46bd      	mov	sp, r7
 8022366:	f85d 7b04 	ldr.w	r7, [sp], #4
 802236a:	4770      	bx	lr

0802236c <mg_tls_pending>:
size_t mg_tls_pending(struct mg_connection *c) {
 802236c:	b480      	push	{r7}
 802236e:	b083      	sub	sp, #12
 8022370:	af00      	add	r7, sp, #0
 8022372:	6078      	str	r0, [r7, #4]
  (void) c;
  return 0;
 8022374:	2300      	movs	r3, #0
}
 8022376:	4618      	mov	r0, r3
 8022378:	370c      	adds	r7, #12
 802237a:	46bd      	mov	sp, r7
 802237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022380:	4770      	bx	lr

08022382 <mg_tls_ctx_init>:
void mg_tls_ctx_init(struct mg_mgr *mgr) {
 8022382:	b480      	push	{r7}
 8022384:	b083      	sub	sp, #12
 8022386:	af00      	add	r7, sp, #0
 8022388:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 802238a:	bf00      	nop
 802238c:	370c      	adds	r7, #12
 802238e:	46bd      	mov	sp, r7
 8022390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022394:	4770      	bx	lr
	...

08022398 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8022398:	b580      	push	{r7, lr}
 802239a:	b082      	sub	sp, #8
 802239c:	af00      	add	r7, sp, #0
 802239e:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80223a0:	2204      	movs	r2, #4
 80223a2:	491b      	ldr	r1, [pc, #108]	@ (8022410 <mg_url_is_ssl+0x78>)
 80223a4:	6878      	ldr	r0, [r7, #4]
 80223a6:	f003 fb88 	bl	8025aba <strncmp>
 80223aa:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80223ac:	2b00      	cmp	r3, #0
 80223ae:	d027      	beq.n	8022400 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80223b0:	2206      	movs	r2, #6
 80223b2:	4918      	ldr	r1, [pc, #96]	@ (8022414 <mg_url_is_ssl+0x7c>)
 80223b4:	6878      	ldr	r0, [r7, #4]
 80223b6:	f003 fb80 	bl	8025aba <strncmp>
 80223ba:	4603      	mov	r3, r0
 80223bc:	2b00      	cmp	r3, #0
 80223be:	d01f      	beq.n	8022400 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80223c0:	2206      	movs	r2, #6
 80223c2:	4915      	ldr	r1, [pc, #84]	@ (8022418 <mg_url_is_ssl+0x80>)
 80223c4:	6878      	ldr	r0, [r7, #4]
 80223c6:	f003 fb78 	bl	8025aba <strncmp>
 80223ca:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80223cc:	2b00      	cmp	r3, #0
 80223ce:	d017      	beq.n	8022400 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80223d0:	2204      	movs	r2, #4
 80223d2:	4912      	ldr	r1, [pc, #72]	@ (802241c <mg_url_is_ssl+0x84>)
 80223d4:	6878      	ldr	r0, [r7, #4]
 80223d6:	f003 fb70 	bl	8025aba <strncmp>
 80223da:	4603      	mov	r3, r0
 80223dc:	2b00      	cmp	r3, #0
 80223de:	d00f      	beq.n	8022400 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80223e0:	2204      	movs	r2, #4
 80223e2:	490f      	ldr	r1, [pc, #60]	@ (8022420 <mg_url_is_ssl+0x88>)
 80223e4:	6878      	ldr	r0, [r7, #4]
 80223e6:	f003 fb68 	bl	8025aba <strncmp>
 80223ea:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80223ec:	2b00      	cmp	r3, #0
 80223ee:	d007      	beq.n	8022400 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80223f0:	2205      	movs	r2, #5
 80223f2:	490c      	ldr	r1, [pc, #48]	@ (8022424 <mg_url_is_ssl+0x8c>)
 80223f4:	6878      	ldr	r0, [r7, #4]
 80223f6:	f003 fb60 	bl	8025aba <strncmp>
 80223fa:	4603      	mov	r3, r0
 80223fc:	2b00      	cmp	r3, #0
 80223fe:	d101      	bne.n	8022404 <mg_url_is_ssl+0x6c>
 8022400:	2301      	movs	r3, #1
 8022402:	e000      	b.n	8022406 <mg_url_is_ssl+0x6e>
 8022404:	2300      	movs	r3, #0
}
 8022406:	4618      	mov	r0, r3
 8022408:	3708      	adds	r7, #8
 802240a:	46bd      	mov	sp, r7
 802240c:	bd80      	pop	{r7, pc}
 802240e:	bf00      	nop
 8022410:	08032e10 	.word	0x08032e10
 8022414:	08032e18 	.word	0x08032e18
 8022418:	08032e20 	.word	0x08032e20
 802241c:	08032e28 	.word	0x08032e28
 8022420:	08032e30 	.word	0x08032e30
 8022424:	08032e38 	.word	0x08032e38

08022428 <urlparse>:

static struct url urlparse(const char *url) {
 8022428:	b5b0      	push	{r4, r5, r7, lr}
 802242a:	b08a      	sub	sp, #40	@ 0x28
 802242c:	af00      	add	r7, sp, #0
 802242e:	6078      	str	r0, [r7, #4]
 8022430:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8022432:	f107 0308 	add.w	r3, r7, #8
 8022436:	221c      	movs	r2, #28
 8022438:	2100      	movs	r1, #0
 802243a:	4618      	mov	r0, r3
 802243c:	f003 fb08 	bl	8025a50 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8022440:	2300      	movs	r3, #0
 8022442:	627b      	str	r3, [r7, #36]	@ 0x24
 8022444:	e05b      	b.n	80224fe <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8022446:	683a      	ldr	r2, [r7, #0]
 8022448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802244a:	4413      	add	r3, r2
 802244c:	781b      	ldrb	r3, [r3, #0]
 802244e:	2b2f      	cmp	r3, #47	@ 0x2f
 8022450:	d112      	bne.n	8022478 <urlparse+0x50>
 8022452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022454:	2b00      	cmp	r3, #0
 8022456:	d00f      	beq.n	8022478 <urlparse+0x50>
 8022458:	697b      	ldr	r3, [r7, #20]
 802245a:	2b00      	cmp	r3, #0
 802245c:	d10c      	bne.n	8022478 <urlparse+0x50>
 802245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022460:	3b01      	subs	r3, #1
 8022462:	683a      	ldr	r2, [r7, #0]
 8022464:	4413      	add	r3, r2
 8022466:	781b      	ldrb	r3, [r3, #0]
 8022468:	2b2f      	cmp	r3, #47	@ 0x2f
 802246a:	d105      	bne.n	8022478 <urlparse+0x50>
      u.host = i + 1;
 802246c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802246e:	3301      	adds	r3, #1
 8022470:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8022472:	2300      	movs	r3, #0
 8022474:	61bb      	str	r3, [r7, #24]
 8022476:	e03f      	b.n	80224f8 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8022478:	683a      	ldr	r2, [r7, #0]
 802247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802247c:	4413      	add	r3, r2
 802247e:	781b      	ldrb	r3, [r3, #0]
 8022480:	2b5d      	cmp	r3, #93	@ 0x5d
 8022482:	d102      	bne.n	802248a <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8022484:	2300      	movs	r3, #0
 8022486:	61bb      	str	r3, [r7, #24]
 8022488:	e036      	b.n	80224f8 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 802248a:	683a      	ldr	r2, [r7, #0]
 802248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802248e:	4413      	add	r3, r2
 8022490:	781b      	ldrb	r3, [r3, #0]
 8022492:	2b3a      	cmp	r3, #58	@ 0x3a
 8022494:	d109      	bne.n	80224aa <urlparse+0x82>
 8022496:	69bb      	ldr	r3, [r7, #24]
 8022498:	2b00      	cmp	r3, #0
 802249a:	d106      	bne.n	80224aa <urlparse+0x82>
 802249c:	69fb      	ldr	r3, [r7, #28]
 802249e:	2b00      	cmp	r3, #0
 80224a0:	d103      	bne.n	80224aa <urlparse+0x82>
      u.port = i + 1;
 80224a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224a4:	3301      	adds	r3, #1
 80224a6:	61bb      	str	r3, [r7, #24]
 80224a8:	e026      	b.n	80224f8 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 80224aa:	683a      	ldr	r2, [r7, #0]
 80224ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224ae:	4413      	add	r3, r2
 80224b0:	781b      	ldrb	r3, [r3, #0]
 80224b2:	2b40      	cmp	r3, #64	@ 0x40
 80224b4:	d112      	bne.n	80224dc <urlparse+0xb4>
 80224b6:	68fb      	ldr	r3, [r7, #12]
 80224b8:	2b00      	cmp	r3, #0
 80224ba:	d10f      	bne.n	80224dc <urlparse+0xb4>
 80224bc:	693b      	ldr	r3, [r7, #16]
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d10c      	bne.n	80224dc <urlparse+0xb4>
 80224c2:	69fb      	ldr	r3, [r7, #28]
 80224c4:	2b00      	cmp	r3, #0
 80224c6:	d109      	bne.n	80224dc <urlparse+0xb4>
      u.user = u.host;
 80224c8:	697b      	ldr	r3, [r7, #20]
 80224ca:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 80224cc:	69bb      	ldr	r3, [r7, #24]
 80224ce:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 80224d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224d2:	3301      	adds	r3, #1
 80224d4:	617b      	str	r3, [r7, #20]
      u.port = 0;
 80224d6:	2300      	movs	r3, #0
 80224d8:	61bb      	str	r3, [r7, #24]
 80224da:	e00d      	b.n	80224f8 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 80224dc:	683a      	ldr	r2, [r7, #0]
 80224de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224e0:	4413      	add	r3, r2
 80224e2:	781b      	ldrb	r3, [r3, #0]
 80224e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80224e6:	d107      	bne.n	80224f8 <urlparse+0xd0>
 80224e8:	697b      	ldr	r3, [r7, #20]
 80224ea:	2b00      	cmp	r3, #0
 80224ec:	d004      	beq.n	80224f8 <urlparse+0xd0>
 80224ee:	69fb      	ldr	r3, [r7, #28]
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	d101      	bne.n	80224f8 <urlparse+0xd0>
      u.uri = i;
 80224f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224f6:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 80224f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224fa:	3301      	adds	r3, #1
 80224fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80224fe:	683a      	ldr	r2, [r7, #0]
 8022500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022502:	4413      	add	r3, r2
 8022504:	781b      	ldrb	r3, [r3, #0]
 8022506:	2b00      	cmp	r3, #0
 8022508:	d19d      	bne.n	8022446 <urlparse+0x1e>
    }
  }
  u.end = i;
 802250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802250c:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 802250e:	687b      	ldr	r3, [r7, #4]
 8022510:	461d      	mov	r5, r3
 8022512:	f107 0408 	add.w	r4, r7, #8
 8022516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8022518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802251a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802251e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8022522:	6878      	ldr	r0, [r7, #4]
 8022524:	3728      	adds	r7, #40	@ 0x28
 8022526:	46bd      	mov	sp, r7
 8022528:	bdb0      	pop	{r4, r5, r7, pc}

0802252a <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 802252a:	b580      	push	{r7, lr}
 802252c:	b08c      	sub	sp, #48	@ 0x30
 802252e:	af00      	add	r7, sp, #0
 8022530:	6078      	str	r0, [r7, #4]
 8022532:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8022534:	f107 0310 	add.w	r3, r7, #16
 8022538:	6839      	ldr	r1, [r7, #0]
 802253a:	4618      	mov	r0, r3
 802253c:	f7ff ff74 	bl	8022428 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8022540:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 8022542:	2b00      	cmp	r3, #0
 8022544:	d004      	beq.n	8022550 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 8022546:	6a3a      	ldr	r2, [r7, #32]
 8022548:	69fb      	ldr	r3, [r7, #28]
 802254a:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 802254c:	3b01      	subs	r3, #1
 802254e:	e009      	b.n	8022564 <mg_url_host+0x3a>
 8022550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 8022552:	2b00      	cmp	r3, #0
 8022554:	d003      	beq.n	802255e <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 8022556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022558:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 802255a:	1ad3      	subs	r3, r2, r3
 802255c:	e002      	b.n	8022564 <mg_url_host+0x3a>
 802255e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022560:	69fb      	ldr	r3, [r7, #28]
 8022562:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8022564:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 8022566:	69fb      	ldr	r3, [r7, #28]
 8022568:	683a      	ldr	r2, [r7, #0]
 802256a:	18d1      	adds	r1, r2, r3
 802256c:	f107 0308 	add.w	r3, r7, #8
 8022570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022572:	4618      	mov	r0, r3
 8022574:	f7ff f983 	bl	802187e <mg_str_n>
  return s;
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	461a      	mov	r2, r3
 802257c:	f107 0308 	add.w	r3, r7, #8
 8022580:	e893 0003 	ldmia.w	r3, {r0, r1}
 8022584:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8022588:	6878      	ldr	r0, [r7, #4]
 802258a:	3730      	adds	r7, #48	@ 0x30
 802258c:	46bd      	mov	sp, r7
 802258e:	bd80      	pop	{r7, pc}

08022590 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8022590:	b580      	push	{r7, lr}
 8022592:	b08a      	sub	sp, #40	@ 0x28
 8022594:	af00      	add	r7, sp, #0
 8022596:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8022598:	f107 0308 	add.w	r3, r7, #8
 802259c:	6879      	ldr	r1, [r7, #4]
 802259e:	4618      	mov	r0, r3
 80225a0:	f7ff ff42 	bl	8022428 <urlparse>
  unsigned short port = 0;
 80225a4:	2300      	movs	r3, #0
 80225a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 80225a8:	2205      	movs	r2, #5
 80225aa:	4925      	ldr	r1, [pc, #148]	@ (8022640 <mg_url_port+0xb0>)
 80225ac:	6878      	ldr	r0, [r7, #4]
 80225ae:	f003 fa84 	bl	8025aba <strncmp>
 80225b2:	4603      	mov	r3, r0
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	d007      	beq.n	80225c8 <mg_url_port+0x38>
 80225b8:	2203      	movs	r2, #3
 80225ba:	4922      	ldr	r1, [pc, #136]	@ (8022644 <mg_url_port+0xb4>)
 80225bc:	6878      	ldr	r0, [r7, #4]
 80225be:	f003 fa7c 	bl	8025aba <strncmp>
 80225c2:	4603      	mov	r3, r0
 80225c4:	2b00      	cmp	r3, #0
 80225c6:	d101      	bne.n	80225cc <mg_url_port+0x3c>
 80225c8:	2350      	movs	r3, #80	@ 0x50
 80225ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 80225cc:	2204      	movs	r2, #4
 80225ce:	491e      	ldr	r1, [pc, #120]	@ (8022648 <mg_url_port+0xb8>)
 80225d0:	6878      	ldr	r0, [r7, #4]
 80225d2:	f003 fa72 	bl	8025aba <strncmp>
 80225d6:	4603      	mov	r3, r0
 80225d8:	2b00      	cmp	r3, #0
 80225da:	d007      	beq.n	80225ec <mg_url_port+0x5c>
 80225dc:	2206      	movs	r2, #6
 80225de:	491b      	ldr	r1, [pc, #108]	@ (802264c <mg_url_port+0xbc>)
 80225e0:	6878      	ldr	r0, [r7, #4]
 80225e2:	f003 fa6a 	bl	8025aba <strncmp>
 80225e6:	4603      	mov	r3, r0
 80225e8:	2b00      	cmp	r3, #0
 80225ea:	d102      	bne.n	80225f2 <mg_url_port+0x62>
    port = 443;
 80225ec:	f240 13bb 	movw	r3, #443	@ 0x1bb
 80225f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 80225f2:	2205      	movs	r2, #5
 80225f4:	4916      	ldr	r1, [pc, #88]	@ (8022650 <mg_url_port+0xc0>)
 80225f6:	6878      	ldr	r0, [r7, #4]
 80225f8:	f003 fa5f 	bl	8025aba <strncmp>
 80225fc:	4603      	mov	r3, r0
 80225fe:	2b00      	cmp	r3, #0
 8022600:	d102      	bne.n	8022608 <mg_url_port+0x78>
 8022602:	f240 735b 	movw	r3, #1883	@ 0x75b
 8022606:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8022608:	2206      	movs	r2, #6
 802260a:	4912      	ldr	r1, [pc, #72]	@ (8022654 <mg_url_port+0xc4>)
 802260c:	6878      	ldr	r0, [r7, #4]
 802260e:	f003 fa54 	bl	8025aba <strncmp>
 8022612:	4603      	mov	r3, r0
 8022614:	2b00      	cmp	r3, #0
 8022616:	d102      	bne.n	802261e <mg_url_port+0x8e>
 8022618:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 802261c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 802261e:	69bb      	ldr	r3, [r7, #24]
 8022620:	2b00      	cmp	r3, #0
 8022622:	d007      	beq.n	8022634 <mg_url_port+0xa4>
 8022624:	69bb      	ldr	r3, [r7, #24]
 8022626:	687a      	ldr	r2, [r7, #4]
 8022628:	4413      	add	r3, r2
 802262a:	4618      	mov	r0, r3
 802262c:	f000 fcda 	bl	8022fe4 <atoi>
 8022630:	4603      	mov	r3, r0
 8022632:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8022634:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8022636:	4618      	mov	r0, r3
 8022638:	3728      	adds	r7, #40	@ 0x28
 802263a:	46bd      	mov	sp, r7
 802263c:	bd80      	pop	{r7, pc}
 802263e:	bf00      	nop
 8022640:	08032e40 	.word	0x08032e40
 8022644:	08032e48 	.word	0x08032e48
 8022648:	08032e10 	.word	0x08032e10
 802264c:	08032e18 	.word	0x08032e18
 8022650:	08032e4c 	.word	0x08032e4c
 8022654:	08032e20 	.word	0x08032e20

08022658 <mg_bzero>:
#endif


// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8022658:	b480      	push	{r7}
 802265a:	b083      	sub	sp, #12
 802265c:	af00      	add	r7, sp, #0
 802265e:	6078      	str	r0, [r7, #4]
 8022660:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8022662:	687b      	ldr	r3, [r7, #4]
 8022664:	2b00      	cmp	r3, #0
 8022666:	d00a      	beq.n	802267e <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8022668:	e004      	b.n	8022674 <mg_bzero+0x1c>
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	1c5a      	adds	r2, r3, #1
 802266e:	607a      	str	r2, [r7, #4]
 8022670:	2200      	movs	r2, #0
 8022672:	701a      	strb	r2, [r3, #0]
 8022674:	683b      	ldr	r3, [r7, #0]
 8022676:	1e5a      	subs	r2, r3, #1
 8022678:	603a      	str	r2, [r7, #0]
 802267a:	2b00      	cmp	r3, #0
 802267c:	d1f5      	bne.n	802266a <mg_bzero+0x12>
  }
}
 802267e:	bf00      	nop
 8022680:	370c      	adds	r7, #12
 8022682:	46bd      	mov	sp, r7
 8022684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022688:	4770      	bx	lr

0802268a <mg_random>:

#if MG_ENABLE_CUSTOM_RANDOM
#else
void mg_random(void *buf, size_t len) {
 802268a:	b580      	push	{r7, lr}
 802268c:	b084      	sub	sp, #16
 802268e:	af00      	add	r7, sp, #0
 8022690:	6078      	str	r0, [r7, #4]
 8022692:	6039      	str	r1, [r7, #0]
  bool done = false;
 8022694:	2300      	movs	r3, #0
 8022696:	72fb      	strb	r3, [r7, #11]
  unsigned char *p = (unsigned char *) buf;
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	60fb      	str	r3, [r7, #12]
    if (fread(buf, 1, len, fp) == len) done = true;
    fclose(fp);
  }
#endif
  // If everything above did not work, fallback to a pseudo random generator
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 802269c:	e007      	b.n	80226ae <mg_random+0x24>
 802269e:	f002 fc91 	bl	8024fc4 <rand>
 80226a2:	4601      	mov	r1, r0
 80226a4:	68fb      	ldr	r3, [r7, #12]
 80226a6:	1c5a      	adds	r2, r3, #1
 80226a8:	60fa      	str	r2, [r7, #12]
 80226aa:	b2ca      	uxtb	r2, r1
 80226ac:	701a      	strb	r2, [r3, #0]
 80226ae:	7afb      	ldrb	r3, [r7, #11]
 80226b0:	f083 0301 	eor.w	r3, r3, #1
 80226b4:	b2db      	uxtb	r3, r3
 80226b6:	2b00      	cmp	r3, #0
 80226b8:	d004      	beq.n	80226c4 <mg_random+0x3a>
 80226ba:	683b      	ldr	r3, [r7, #0]
 80226bc:	1e5a      	subs	r2, r3, #1
 80226be:	603a      	str	r2, [r7, #0]
 80226c0:	2b00      	cmp	r3, #0
 80226c2:	d1ec      	bne.n	802269e <mg_random+0x14>
}
 80226c4:	bf00      	nop
 80226c6:	3710      	adds	r7, #16
 80226c8:	46bd      	mov	sp, r7
 80226ca:	bd80      	pop	{r7, pc}

080226cc <mg_random_str>:
#endif

char *mg_random_str(char *buf, size_t len) {
 80226cc:	b580      	push	{r7, lr}
 80226ce:	b084      	sub	sp, #16
 80226d0:	af00      	add	r7, sp, #0
 80226d2:	6078      	str	r0, [r7, #4]
 80226d4:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 80226d6:	6839      	ldr	r1, [r7, #0]
 80226d8:	6878      	ldr	r0, [r7, #4]
 80226da:	f7ff ffd6 	bl	802268a <mg_random>
  for (i = 0; i < len; i++) {
 80226de:	2300      	movs	r3, #0
 80226e0:	60fb      	str	r3, [r7, #12]
 80226e2:	e02d      	b.n	8022740 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 80226e4:	687a      	ldr	r2, [r7, #4]
 80226e6:	68fb      	ldr	r3, [r7, #12]
 80226e8:	4413      	add	r3, r2
 80226ea:	781a      	ldrb	r2, [r3, #0]
 80226ec:	0853      	lsrs	r3, r2, #1
 80226ee:	4919      	ldr	r1, [pc, #100]	@ (8022754 <mg_random_str+0x88>)
 80226f0:	fba1 1303 	umull	r1, r3, r1, r3
 80226f4:	0919      	lsrs	r1, r3, #4
 80226f6:	460b      	mov	r3, r1
 80226f8:	015b      	lsls	r3, r3, #5
 80226fa:	1a5b      	subs	r3, r3, r1
 80226fc:	005b      	lsls	r3, r3, #1
 80226fe:	1ad3      	subs	r3, r2, r3
 8022700:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8022702:	683b      	ldr	r3, [r7, #0]
 8022704:	3b01      	subs	r3, #1
 8022706:	68fa      	ldr	r2, [r7, #12]
 8022708:	429a      	cmp	r2, r3
 802270a:	d011      	beq.n	8022730 <mg_random_str+0x64>
 802270c:	7afb      	ldrb	r3, [r7, #11]
 802270e:	2b19      	cmp	r3, #25
 8022710:	d803      	bhi.n	802271a <mg_random_str+0x4e>
 8022712:	7afb      	ldrb	r3, [r7, #11]
 8022714:	3361      	adds	r3, #97	@ 0x61
 8022716:	b2db      	uxtb	r3, r3
 8022718:	e00b      	b.n	8022732 <mg_random_str+0x66>
 802271a:	7afb      	ldrb	r3, [r7, #11]
 802271c:	2b33      	cmp	r3, #51	@ 0x33
 802271e:	d803      	bhi.n	8022728 <mg_random_str+0x5c>
 8022720:	7afb      	ldrb	r3, [r7, #11]
 8022722:	3327      	adds	r3, #39	@ 0x27
 8022724:	b2db      	uxtb	r3, r3
 8022726:	e004      	b.n	8022732 <mg_random_str+0x66>
 8022728:	7afb      	ldrb	r3, [r7, #11]
 802272a:	3b04      	subs	r3, #4
 802272c:	b2db      	uxtb	r3, r3
 802272e:	e000      	b.n	8022732 <mg_random_str+0x66>
 8022730:	2300      	movs	r3, #0
 8022732:	6879      	ldr	r1, [r7, #4]
 8022734:	68fa      	ldr	r2, [r7, #12]
 8022736:	440a      	add	r2, r1
 8022738:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 802273a:	68fb      	ldr	r3, [r7, #12]
 802273c:	3301      	adds	r3, #1
 802273e:	60fb      	str	r3, [r7, #12]
 8022740:	68fa      	ldr	r2, [r7, #12]
 8022742:	683b      	ldr	r3, [r7, #0]
 8022744:	429a      	cmp	r2, r3
 8022746:	d3cd      	bcc.n	80226e4 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8022748:	687b      	ldr	r3, [r7, #4]
}
 802274a:	4618      	mov	r0, r3
 802274c:	3710      	adds	r7, #16
 802274e:	46bd      	mov	sp, r7
 8022750:	bd80      	pop	{r7, pc}
 8022752:	bf00      	nop
 8022754:	84210843 	.word	0x84210843

08022758 <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8022758:	b480      	push	{r7}
 802275a:	b085      	sub	sp, #20
 802275c:	af00      	add	r7, sp, #0
 802275e:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8022760:	2300      	movs	r3, #0
 8022762:	60fb      	str	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8022764:	687b      	ldr	r3, [r7, #4]
 8022766:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8022768:	7bfb      	ldrb	r3, [r7, #15]
 802276a:	461a      	mov	r2, r3
 802276c:	7bbb      	ldrb	r3, [r7, #14]
 802276e:	021b      	lsls	r3, r3, #8
 8022770:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8022772:	7b7b      	ldrb	r3, [r7, #13]
 8022774:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8022776:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8022778:	7b3b      	ldrb	r3, [r7, #12]
 802277a:	061b      	lsls	r3, r3, #24
 802277c:	4313      	orrs	r3, r2
}
 802277e:	4618      	mov	r0, r3
 8022780:	3714      	adds	r7, #20
 8022782:	46bd      	mov	sp, r7
 8022784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022788:	4770      	bx	lr

0802278a <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 802278a:	b480      	push	{r7}
 802278c:	b085      	sub	sp, #20
 802278e:	af00      	add	r7, sp, #0
 8022790:	4603      	mov	r3, r0
 8022792:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8022794:	2300      	movs	r3, #0
 8022796:	81bb      	strh	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8022798:	88fb      	ldrh	r3, [r7, #6]
 802279a:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 802279c:	7b7b      	ldrb	r3, [r7, #13]
 802279e:	b21a      	sxth	r2, r3
 80227a0:	7b3b      	ldrb	r3, [r7, #12]
 80227a2:	021b      	lsls	r3, r3, #8
 80227a4:	b21b      	sxth	r3, r3
 80227a6:	4313      	orrs	r3, r2
 80227a8:	b21b      	sxth	r3, r3
 80227aa:	b29b      	uxth	r3, r3
}
 80227ac:	4618      	mov	r0, r3
 80227ae:	3714      	adds	r7, #20
 80227b0:	46bd      	mov	sp, r7
 80227b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227b6:	4770      	bx	lr

080227b8 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 80227b8:	b480      	push	{r7}
 80227ba:	b087      	sub	sp, #28
 80227bc:	af00      	add	r7, sp, #0
 80227be:	60f8      	str	r0, [r7, #12]
 80227c0:	60b9      	str	r1, [r7, #8]
 80227c2:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 80227c4:	68fb      	ldr	r3, [r7, #12]
 80227c6:	43db      	mvns	r3, r3
 80227c8:	60fb      	str	r3, [r7, #12]
  while (len--) {
 80227ca:	e01f      	b.n	802280c <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 80227cc:	68bb      	ldr	r3, [r7, #8]
 80227ce:	1c5a      	adds	r2, r3, #1
 80227d0:	60ba      	str	r2, [r7, #8]
 80227d2:	781b      	ldrb	r3, [r3, #0]
 80227d4:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 80227d6:	7dfa      	ldrb	r2, [r7, #23]
 80227d8:	68fb      	ldr	r3, [r7, #12]
 80227da:	4053      	eors	r3, r2
 80227dc:	f003 030f 	and.w	r3, r3, #15
 80227e0:	4a11      	ldr	r2, [pc, #68]	@ (8022828 <mg_crc32+0x70>)
 80227e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80227e6:	68fb      	ldr	r3, [r7, #12]
 80227e8:	091b      	lsrs	r3, r3, #4
 80227ea:	4053      	eors	r3, r2
 80227ec:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 80227ee:	7dfb      	ldrb	r3, [r7, #23]
 80227f0:	091b      	lsrs	r3, r3, #4
 80227f2:	b2db      	uxtb	r3, r3
 80227f4:	461a      	mov	r2, r3
 80227f6:	68fb      	ldr	r3, [r7, #12]
 80227f8:	4053      	eors	r3, r2
 80227fa:	f003 030f 	and.w	r3, r3, #15
 80227fe:	4a0a      	ldr	r2, [pc, #40]	@ (8022828 <mg_crc32+0x70>)
 8022800:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8022804:	68fb      	ldr	r3, [r7, #12]
 8022806:	091b      	lsrs	r3, r3, #4
 8022808:	4053      	eors	r3, r2
 802280a:	60fb      	str	r3, [r7, #12]
  while (len--) {
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	1e5a      	subs	r2, r3, #1
 8022810:	607a      	str	r2, [r7, #4]
 8022812:	2b00      	cmp	r3, #0
 8022814:	d1da      	bne.n	80227cc <mg_crc32+0x14>
  }
  return ~crc;
 8022816:	68fb      	ldr	r3, [r7, #12]
 8022818:	43db      	mvns	r3, r3
}
 802281a:	4618      	mov	r0, r3
 802281c:	371c      	adds	r7, #28
 802281e:	46bd      	mov	sp, r7
 8022820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022824:	4770      	bx	lr
 8022826:	bf00      	nop
 8022828:	08033fcc 	.word	0x08033fcc

0802282c <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 802282c:	b480      	push	{r7}
 802282e:	b085      	sub	sp, #20
 8022830:	af00      	add	r7, sp, #0
 8022832:	463b      	mov	r3, r7
 8022834:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8022838:	683b      	ldr	r3, [r7, #0]
 802283a:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 802283c:	687b      	ldr	r3, [r7, #4]
 802283e:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8022840:	683b      	ldr	r3, [r7, #0]
 8022842:	781b      	ldrb	r3, [r3, #0]
 8022844:	2b2e      	cmp	r3, #46	@ 0x2e
 8022846:	d123      	bne.n	8022890 <mg_path_is_sane+0x64>
 8022848:	683b      	ldr	r3, [r7, #0]
 802284a:	3301      	adds	r3, #1
 802284c:	781b      	ldrb	r3, [r3, #0]
 802284e:	2b2e      	cmp	r3, #46	@ 0x2e
 8022850:	d11e      	bne.n	8022890 <mg_path_is_sane+0x64>
 8022852:	2300      	movs	r3, #0
 8022854:	e024      	b.n	80228a0 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8022856:	68fb      	ldr	r3, [r7, #12]
 8022858:	781b      	ldrb	r3, [r3, #0]
 802285a:	2b2f      	cmp	r3, #47	@ 0x2f
 802285c:	d003      	beq.n	8022866 <mg_path_is_sane+0x3a>
 802285e:	68fb      	ldr	r3, [r7, #12]
 8022860:	781b      	ldrb	r3, [r3, #0]
 8022862:	2b5c      	cmp	r3, #92	@ 0x5c
 8022864:	d10e      	bne.n	8022884 <mg_path_is_sane+0x58>
 8022866:	68bb      	ldr	r3, [r7, #8]
 8022868:	2b01      	cmp	r3, #1
 802286a:	d90b      	bls.n	8022884 <mg_path_is_sane+0x58>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 802286c:	68fb      	ldr	r3, [r7, #12]
 802286e:	3301      	adds	r3, #1
 8022870:	781b      	ldrb	r3, [r3, #0]
 8022872:	2b2e      	cmp	r3, #46	@ 0x2e
 8022874:	d106      	bne.n	8022884 <mg_path_is_sane+0x58>
 8022876:	68fb      	ldr	r3, [r7, #12]
 8022878:	3302      	adds	r3, #2
 802287a:	781b      	ldrb	r3, [r3, #0]
 802287c:	2b2e      	cmp	r3, #46	@ 0x2e
 802287e:	d101      	bne.n	8022884 <mg_path_is_sane+0x58>
 8022880:	2300      	movs	r3, #0
 8022882:	e00d      	b.n	80228a0 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8022884:	68fb      	ldr	r3, [r7, #12]
 8022886:	3301      	adds	r3, #1
 8022888:	60fb      	str	r3, [r7, #12]
 802288a:	68bb      	ldr	r3, [r7, #8]
 802288c:	3b01      	subs	r3, #1
 802288e:	60bb      	str	r3, [r7, #8]
 8022890:	68fb      	ldr	r3, [r7, #12]
 8022892:	781b      	ldrb	r3, [r3, #0]
 8022894:	2b00      	cmp	r3, #0
 8022896:	d002      	beq.n	802289e <mg_path_is_sane+0x72>
 8022898:	68bb      	ldr	r3, [r7, #8]
 802289a:	2b00      	cmp	r3, #0
 802289c:	d1db      	bne.n	8022856 <mg_path_is_sane+0x2a>
    }
  }
  return true;
 802289e:	2301      	movs	r3, #1
}
 80228a0:	4618      	mov	r0, r3
 80228a2:	3714      	adds	r7, #20
 80228a4:	46bd      	mov	sp, r7
 80228a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228aa:	4770      	bx	lr

080228ac <mg_millis>:

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 80228ac:	b5b0      	push	{r4, r5, r7, lr}
 80228ae:	af00      	add	r7, sp, #0
  return GetTickCount();
#elif MG_ARCH == MG_ARCH_RP2040
  return time_us_64() / 1000;
#elif MG_ARCH == MG_ARCH_ESP8266 || MG_ARCH == MG_ARCH_ESP32 || \
    MG_ARCH == MG_ARCH_FREERTOS
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 80228b0:	f7e8 f9d6 	bl	800ac60 <xTaskGetTickCount>
 80228b4:	4603      	mov	r3, r0
 80228b6:	2200      	movs	r2, #0
 80228b8:	461c      	mov	r4, r3
 80228ba:	4615      	mov	r5, r2
 80228bc:	4622      	mov	r2, r4
 80228be:	462b      	mov	r3, r5
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 80228c0:	4610      	mov	r0, r2
 80228c2:	4619      	mov	r1, r3
 80228c4:	bdb0      	pop	{r4, r5, r7, pc}

080228c6 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 80228c6:	b580      	push	{r7, lr}
 80228c8:	b086      	sub	sp, #24
 80228ca:	af00      	add	r7, sp, #0
 80228cc:	6078      	str	r0, [r7, #4]
 80228ce:	4608      	mov	r0, r1
 80228d0:	4611      	mov	r1, r2
 80228d2:	461a      	mov	r2, r3
 80228d4:	4603      	mov	r3, r0
 80228d6:	70fb      	strb	r3, [r7, #3]
 80228d8:	460b      	mov	r3, r1
 80228da:	803b      	strh	r3, [r7, #0]
 80228dc:	4613      	mov	r3, r2
 80228de:	70bb      	strb	r3, [r7, #2]
  size_t i;
  uint8_t *p = (uint8_t *) buf;
 80228e0:	6a3b      	ldr	r3, [r7, #32]
 80228e2:	613b      	str	r3, [r7, #16]
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 80228e4:	883b      	ldrh	r3, [r7, #0]
 80228e6:	0a1b      	lsrs	r3, r3, #8
 80228e8:	b29b      	uxth	r3, r3
 80228ea:	b2db      	uxtb	r3, r3
 80228ec:	733b      	strb	r3, [r7, #12]
 80228ee:	883b      	ldrh	r3, [r7, #0]
 80228f0:	b2db      	uxtb	r3, r3
 80228f2:	737b      	strb	r3, [r7, #13]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 80228f4:	78fb      	ldrb	r3, [r7, #3]
 80228f6:	00db      	lsls	r3, r3, #3
 80228f8:	b25b      	sxtb	r3, r3
 80228fa:	78ba      	ldrb	r2, [r7, #2]
 80228fc:	2a00      	cmp	r2, #0
 80228fe:	d001      	beq.n	8022904 <w5500_txn+0x3e>
 8022900:	2204      	movs	r2, #4
 8022902:	e000      	b.n	8022906 <w5500_txn+0x40>
 8022904:	2200      	movs	r2, #0
 8022906:	4313      	orrs	r3, r2
 8022908:	b25b      	sxtb	r3, r3
 802290a:	b2db      	uxtb	r3, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 802290c:	73bb      	strb	r3, [r7, #14]
  s->begin(s->spi);
 802290e:	687b      	ldr	r3, [r7, #4]
 8022910:	685b      	ldr	r3, [r3, #4]
 8022912:	687a      	ldr	r2, [r7, #4]
 8022914:	6812      	ldr	r2, [r2, #0]
 8022916:	4610      	mov	r0, r2
 8022918:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 802291a:	2300      	movs	r3, #0
 802291c:	617b      	str	r3, [r7, #20]
 802291e:	e00d      	b.n	802293c <w5500_txn+0x76>
 8022920:	687b      	ldr	r3, [r7, #4]
 8022922:	68db      	ldr	r3, [r3, #12]
 8022924:	687a      	ldr	r2, [r7, #4]
 8022926:	6810      	ldr	r0, [r2, #0]
 8022928:	f107 010c 	add.w	r1, r7, #12
 802292c:	697a      	ldr	r2, [r7, #20]
 802292e:	440a      	add	r2, r1
 8022930:	7812      	ldrb	r2, [r2, #0]
 8022932:	4611      	mov	r1, r2
 8022934:	4798      	blx	r3
 8022936:	697b      	ldr	r3, [r7, #20]
 8022938:	3301      	adds	r3, #1
 802293a:	617b      	str	r3, [r7, #20]
 802293c:	697b      	ldr	r3, [r7, #20]
 802293e:	2b02      	cmp	r3, #2
 8022940:	d9ee      	bls.n	8022920 <w5500_txn+0x5a>
  for (i = 0; i < len; i++) {
 8022942:	2300      	movs	r3, #0
 8022944:	617b      	str	r3, [r7, #20]
 8022946:	e019      	b.n	802297c <w5500_txn+0xb6>
    uint8_t r = s->txn(s->spi, p[i]);
 8022948:	687b      	ldr	r3, [r7, #4]
 802294a:	68db      	ldr	r3, [r3, #12]
 802294c:	687a      	ldr	r2, [r7, #4]
 802294e:	6810      	ldr	r0, [r2, #0]
 8022950:	6939      	ldr	r1, [r7, #16]
 8022952:	697a      	ldr	r2, [r7, #20]
 8022954:	440a      	add	r2, r1
 8022956:	7812      	ldrb	r2, [r2, #0]
 8022958:	4611      	mov	r1, r2
 802295a:	4798      	blx	r3
 802295c:	4603      	mov	r3, r0
 802295e:	73fb      	strb	r3, [r7, #15]
    if (!wr) p[i] = r;
 8022960:	78bb      	ldrb	r3, [r7, #2]
 8022962:	f083 0301 	eor.w	r3, r3, #1
 8022966:	b2db      	uxtb	r3, r3
 8022968:	2b00      	cmp	r3, #0
 802296a:	d004      	beq.n	8022976 <w5500_txn+0xb0>
 802296c:	693a      	ldr	r2, [r7, #16]
 802296e:	697b      	ldr	r3, [r7, #20]
 8022970:	4413      	add	r3, r2
 8022972:	7bfa      	ldrb	r2, [r7, #15]
 8022974:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++) {
 8022976:	697b      	ldr	r3, [r7, #20]
 8022978:	3301      	adds	r3, #1
 802297a:	617b      	str	r3, [r7, #20]
 802297c:	697a      	ldr	r2, [r7, #20]
 802297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022980:	429a      	cmp	r2, r3
 8022982:	d3e1      	bcc.n	8022948 <w5500_txn+0x82>
  }
  s->end(s->spi);
 8022984:	687b      	ldr	r3, [r7, #4]
 8022986:	689b      	ldr	r3, [r3, #8]
 8022988:	687a      	ldr	r2, [r7, #4]
 802298a:	6812      	ldr	r2, [r2, #0]
 802298c:	4610      	mov	r0, r2
 802298e:	4798      	blx	r3
}
 8022990:	bf00      	nop
 8022992:	3718      	adds	r7, #24
 8022994:	46bd      	mov	sp, r7
 8022996:	bd80      	pop	{r7, pc}

08022998 <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 8022998:	b580      	push	{r7, lr}
 802299a:	b086      	sub	sp, #24
 802299c:	af02      	add	r7, sp, #8
 802299e:	60f8      	str	r0, [r7, #12]
 80229a0:	607b      	str	r3, [r7, #4]
 80229a2:	460b      	mov	r3, r1
 80229a4:	72fb      	strb	r3, [r7, #11]
 80229a6:	4613      	mov	r3, r2
 80229a8:	813b      	strh	r3, [r7, #8]
 80229aa:	893a      	ldrh	r2, [r7, #8]
 80229ac:	7af9      	ldrb	r1, [r7, #11]
 80229ae:	69bb      	ldr	r3, [r7, #24]
 80229b0:	9301      	str	r3, [sp, #4]
 80229b2:	687b      	ldr	r3, [r7, #4]
 80229b4:	9300      	str	r3, [sp, #0]
 80229b6:	2301      	movs	r3, #1
 80229b8:	68f8      	ldr	r0, [r7, #12]
 80229ba:	f7ff ff84 	bl	80228c6 <w5500_txn>
 80229be:	bf00      	nop
 80229c0:	3710      	adds	r7, #16
 80229c2:	46bd      	mov	sp, r7
 80229c4:	bd80      	pop	{r7, pc}

080229c6 <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 80229c6:	b580      	push	{r7, lr}
 80229c8:	b084      	sub	sp, #16
 80229ca:	af02      	add	r7, sp, #8
 80229cc:	6078      	str	r0, [r7, #4]
 80229ce:	4608      	mov	r0, r1
 80229d0:	4611      	mov	r1, r2
 80229d2:	461a      	mov	r2, r3
 80229d4:	4603      	mov	r3, r0
 80229d6:	70fb      	strb	r3, [r7, #3]
 80229d8:	460b      	mov	r3, r1
 80229da:	803b      	strh	r3, [r7, #0]
 80229dc:	4613      	mov	r3, r2
 80229de:	70bb      	strb	r3, [r7, #2]
 80229e0:	1cbb      	adds	r3, r7, #2
 80229e2:	883a      	ldrh	r2, [r7, #0]
 80229e4:	78f9      	ldrb	r1, [r7, #3]
 80229e6:	2001      	movs	r0, #1
 80229e8:	9000      	str	r0, [sp, #0]
 80229ea:	6878      	ldr	r0, [r7, #4]
 80229ec:	f7ff ffd4 	bl	8022998 <w5500_wn>
 80229f0:	bf00      	nop
 80229f2:	3708      	adds	r7, #8
 80229f4:	46bd      	mov	sp, r7
 80229f6:	bd80      	pop	{r7, pc}

080229f8 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 80229f8:	b580      	push	{r7, lr}
 80229fa:	b088      	sub	sp, #32
 80229fc:	af02      	add	r7, sp, #8
 80229fe:	60f8      	str	r0, [r7, #12]
 8022a00:	4608      	mov	r0, r1
 8022a02:	4611      	mov	r1, r2
 8022a04:	461a      	mov	r2, r3
 8022a06:	4603      	mov	r3, r0
 8022a08:	72fb      	strb	r3, [r7, #11]
 8022a0a:	460b      	mov	r3, r1
 8022a0c:	813b      	strh	r3, [r7, #8]
 8022a0e:	4613      	mov	r3, r2
 8022a10:	80fb      	strh	r3, [r7, #6]
 8022a12:	88fb      	ldrh	r3, [r7, #6]
 8022a14:	0a1b      	lsrs	r3, r3, #8
 8022a16:	b29b      	uxth	r3, r3
 8022a18:	b2db      	uxtb	r3, r3
 8022a1a:	753b      	strb	r3, [r7, #20]
 8022a1c:	88fb      	ldrh	r3, [r7, #6]
 8022a1e:	b2db      	uxtb	r3, r3
 8022a20:	757b      	strb	r3, [r7, #21]
 8022a22:	f107 0314 	add.w	r3, r7, #20
 8022a26:	893a      	ldrh	r2, [r7, #8]
 8022a28:	7af9      	ldrb	r1, [r7, #11]
 8022a2a:	2002      	movs	r0, #2
 8022a2c:	9000      	str	r0, [sp, #0]
 8022a2e:	68f8      	ldr	r0, [r7, #12]
 8022a30:	f7ff ffb2 	bl	8022998 <w5500_wn>
 8022a34:	bf00      	nop
 8022a36:	3718      	adds	r7, #24
 8022a38:	46bd      	mov	sp, r7
 8022a3a:	bd80      	pop	{r7, pc}

08022a3c <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 8022a3c:	b580      	push	{r7, lr}
 8022a3e:	b086      	sub	sp, #24
 8022a40:	af02      	add	r7, sp, #8
 8022a42:	60f8      	str	r0, [r7, #12]
 8022a44:	607b      	str	r3, [r7, #4]
 8022a46:	460b      	mov	r3, r1
 8022a48:	72fb      	strb	r3, [r7, #11]
 8022a4a:	4613      	mov	r3, r2
 8022a4c:	813b      	strh	r3, [r7, #8]
 8022a4e:	893a      	ldrh	r2, [r7, #8]
 8022a50:	7af9      	ldrb	r1, [r7, #11]
 8022a52:	69bb      	ldr	r3, [r7, #24]
 8022a54:	9301      	str	r3, [sp, #4]
 8022a56:	687b      	ldr	r3, [r7, #4]
 8022a58:	9300      	str	r3, [sp, #0]
 8022a5a:	2300      	movs	r3, #0
 8022a5c:	68f8      	ldr	r0, [r7, #12]
 8022a5e:	f7ff ff32 	bl	80228c6 <w5500_txn>
 8022a62:	bf00      	nop
 8022a64:	3710      	adds	r7, #16
 8022a66:	46bd      	mov	sp, r7
 8022a68:	bd80      	pop	{r7, pc}

08022a6a <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 8022a6a:	b580      	push	{r7, lr}
 8022a6c:	b086      	sub	sp, #24
 8022a6e:	af02      	add	r7, sp, #8
 8022a70:	6078      	str	r0, [r7, #4]
 8022a72:	460b      	mov	r3, r1
 8022a74:	70fb      	strb	r3, [r7, #3]
 8022a76:	4613      	mov	r3, r2
 8022a78:	803b      	strh	r3, [r7, #0]
 8022a7a:	2300      	movs	r3, #0
 8022a7c:	73fb      	strb	r3, [r7, #15]
 8022a7e:	f107 030f 	add.w	r3, r7, #15
 8022a82:	883a      	ldrh	r2, [r7, #0]
 8022a84:	78f9      	ldrb	r1, [r7, #3]
 8022a86:	2001      	movs	r0, #1
 8022a88:	9000      	str	r0, [sp, #0]
 8022a8a:	6878      	ldr	r0, [r7, #4]
 8022a8c:	f7ff ffd6 	bl	8022a3c <w5500_rn>
 8022a90:	7bfb      	ldrb	r3, [r7, #15]
 8022a92:	4618      	mov	r0, r3
 8022a94:	3710      	adds	r7, #16
 8022a96:	46bd      	mov	sp, r7
 8022a98:	bd80      	pop	{r7, pc}

08022a9a <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 8022a9a:	b580      	push	{r7, lr}
 8022a9c:	b086      	sub	sp, #24
 8022a9e:	af02      	add	r7, sp, #8
 8022aa0:	6078      	str	r0, [r7, #4]
 8022aa2:	460b      	mov	r3, r1
 8022aa4:	70fb      	strb	r3, [r7, #3]
 8022aa6:	4613      	mov	r3, r2
 8022aa8:	803b      	strh	r3, [r7, #0]
 8022aaa:	2300      	movs	r3, #0
 8022aac:	81bb      	strh	r3, [r7, #12]
 8022aae:	f107 030c 	add.w	r3, r7, #12
 8022ab2:	883a      	ldrh	r2, [r7, #0]
 8022ab4:	78f9      	ldrb	r1, [r7, #3]
 8022ab6:	2002      	movs	r0, #2
 8022ab8:	9000      	str	r0, [sp, #0]
 8022aba:	6878      	ldr	r0, [r7, #4]
 8022abc:	f7ff ffbe 	bl	8022a3c <w5500_rn>
 8022ac0:	7b3b      	ldrb	r3, [r7, #12]
 8022ac2:	021b      	lsls	r3, r3, #8
 8022ac4:	b21a      	sxth	r2, r3
 8022ac6:	7b7b      	ldrb	r3, [r7, #13]
 8022ac8:	b21b      	sxth	r3, r3
 8022aca:	4313      	orrs	r3, r2
 8022acc:	b21b      	sxth	r3, r3
 8022ace:	b29b      	uxth	r3, r3
 8022ad0:	4618      	mov	r0, r3
 8022ad2:	3710      	adds	r7, #16
 8022ad4:	46bd      	mov	sp, r7
 8022ad6:	bd80      	pop	{r7, pc}

08022ad8 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8022ad8:	b580      	push	{r7, lr}
 8022ada:	b08a      	sub	sp, #40	@ 0x28
 8022adc:	af02      	add	r7, sp, #8
 8022ade:	60f8      	str	r0, [r7, #12]
 8022ae0:	60b9      	str	r1, [r7, #8]
 8022ae2:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022ae4:	687b      	ldr	r3, [r7, #4]
 8022ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022ae8:	61bb      	str	r3, [r7, #24]
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8022aea:	2300      	movs	r3, #0
 8022aec:	83fb      	strh	r3, [r7, #30]
 8022aee:	2300      	movs	r3, #0
 8022af0:	83bb      	strh	r3, [r7, #28]
 8022af2:	68bb      	ldr	r3, [r7, #8]
 8022af4:	82fb      	strh	r3, [r7, #22]
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8022af6:	e001      	b.n	8022afc <w5500_rx+0x24>
 8022af8:	8abb      	ldrh	r3, [r7, #20]
 8022afa:	83bb      	strh	r3, [r7, #28]
 8022afc:	2226      	movs	r2, #38	@ 0x26
 8022afe:	2101      	movs	r1, #1
 8022b00:	69b8      	ldr	r0, [r7, #24]
 8022b02:	f7ff ffca 	bl	8022a9a <w5500_r2>
 8022b06:	4603      	mov	r3, r0
 8022b08:	82bb      	strh	r3, [r7, #20]
 8022b0a:	8aba      	ldrh	r2, [r7, #20]
 8022b0c:	8bbb      	ldrh	r3, [r7, #28]
 8022b0e:	429a      	cmp	r2, r3
 8022b10:	d8f2      	bhi.n	8022af8 <w5500_rx+0x20>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 8022b12:	8bbb      	ldrh	r3, [r7, #28]
 8022b14:	2b00      	cmp	r3, #0
 8022b16:	d032      	beq.n	8022b7e <w5500_rx+0xa6>
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 8022b18:	2228      	movs	r2, #40	@ 0x28
 8022b1a:	2101      	movs	r1, #1
 8022b1c:	69b8      	ldr	r0, [r7, #24]
 8022b1e:	f7ff ffbc 	bl	8022a9a <w5500_r2>
 8022b22:	4603      	mov	r3, r0
 8022b24:	827b      	strh	r3, [r7, #18]
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 8022b26:	8a7b      	ldrh	r3, [r7, #18]
 8022b28:	461a      	mov	r2, r3
 8022b2a:	2103      	movs	r1, #3
 8022b2c:	69b8      	ldr	r0, [r7, #24]
 8022b2e:	f7ff ffb4 	bl	8022a9a <w5500_r2>
 8022b32:	4603      	mov	r3, r0
 8022b34:	83bb      	strh	r3, [r7, #28]
    if (n <= len + 2 && n > 1) {
 8022b36:	8bba      	ldrh	r2, [r7, #28]
 8022b38:	8afb      	ldrh	r3, [r7, #22]
 8022b3a:	3302      	adds	r3, #2
 8022b3c:	429a      	cmp	r2, r3
 8022b3e:	dc0f      	bgt.n	8022b60 <w5500_rx+0x88>
 8022b40:	8bbb      	ldrh	r3, [r7, #28]
 8022b42:	2b01      	cmp	r3, #1
 8022b44:	d90c      	bls.n	8022b60 <w5500_rx+0x88>
      r = (uint16_t) (n - 2);
 8022b46:	8bbb      	ldrh	r3, [r7, #28]
 8022b48:	3b02      	subs	r3, #2
 8022b4a:	83fb      	strh	r3, [r7, #30]
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 8022b4c:	8a7b      	ldrh	r3, [r7, #18]
 8022b4e:	3302      	adds	r3, #2
 8022b50:	b29a      	uxth	r2, r3
 8022b52:	8bfb      	ldrh	r3, [r7, #30]
 8022b54:	9300      	str	r3, [sp, #0]
 8022b56:	68fb      	ldr	r3, [r7, #12]
 8022b58:	2103      	movs	r1, #3
 8022b5a:	69b8      	ldr	r0, [r7, #24]
 8022b5c:	f7ff ff6e 	bl	8022a3c <w5500_rn>
    }
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 8022b60:	8a7a      	ldrh	r2, [r7, #18]
 8022b62:	8bbb      	ldrh	r3, [r7, #28]
 8022b64:	4413      	add	r3, r2
 8022b66:	b29b      	uxth	r3, r3
 8022b68:	2228      	movs	r2, #40	@ 0x28
 8022b6a:	2101      	movs	r1, #1
 8022b6c:	69b8      	ldr	r0, [r7, #24]
 8022b6e:	f7ff ff43 	bl	80229f8 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 8022b72:	2340      	movs	r3, #64	@ 0x40
 8022b74:	2201      	movs	r2, #1
 8022b76:	2101      	movs	r1, #1
 8022b78:	69b8      	ldr	r0, [r7, #24]
 8022b7a:	f7ff ff24 	bl	80229c6 <w5500_w1>
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
 8022b7e:	8bfb      	ldrh	r3, [r7, #30]
}
 8022b80:	4618      	mov	r0, r3
 8022b82:	3720      	adds	r7, #32
 8022b84:	46bd      	mov	sp, r7
 8022b86:	bd80      	pop	{r7, pc}

08022b88 <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 8022b88:	b580      	push	{r7, lr}
 8022b8a:	b08a      	sub	sp, #40	@ 0x28
 8022b8c:	af02      	add	r7, sp, #8
 8022b8e:	60f8      	str	r0, [r7, #12]
 8022b90:	60b9      	str	r1, [r7, #8]
 8022b92:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022b94:	687b      	ldr	r3, [r7, #4]
 8022b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022b98:	617b      	str	r3, [r7, #20]
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 8022b9a:	2300      	movs	r3, #0
 8022b9c:	83bb      	strh	r3, [r7, #28]
 8022b9e:	68bb      	ldr	r3, [r7, #8]
 8022ba0:	837b      	strh	r3, [r7, #26]
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 8022ba2:	e006      	b.n	8022bb2 <w5500_tx+0x2a>
 8022ba4:	2220      	movs	r2, #32
 8022ba6:	2101      	movs	r1, #1
 8022ba8:	6978      	ldr	r0, [r7, #20]
 8022baa:	f7ff ff76 	bl	8022a9a <w5500_r2>
 8022bae:	4603      	mov	r3, r0
 8022bb0:	83bb      	strh	r3, [r7, #28]
 8022bb2:	8bba      	ldrh	r2, [r7, #28]
 8022bb4:	8b7b      	ldrh	r3, [r7, #26]
 8022bb6:	429a      	cmp	r2, r3
 8022bb8:	d3f4      	bcc.n	8022ba4 <w5500_tx+0x1c>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 8022bba:	2224      	movs	r2, #36	@ 0x24
 8022bbc:	2101      	movs	r1, #1
 8022bbe:	6978      	ldr	r0, [r7, #20]
 8022bc0:	f7ff ff6b 	bl	8022a9a <w5500_r2>
 8022bc4:	4603      	mov	r3, r0
 8022bc6:	827b      	strh	r3, [r7, #18]
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 8022bc8:	8b7b      	ldrh	r3, [r7, #26]
 8022bca:	8a7a      	ldrh	r2, [r7, #18]
 8022bcc:	9300      	str	r3, [sp, #0]
 8022bce:	68fb      	ldr	r3, [r7, #12]
 8022bd0:	2102      	movs	r1, #2
 8022bd2:	6978      	ldr	r0, [r7, #20]
 8022bd4:	f7ff fee0 	bl	8022998 <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 8022bd8:	8a7a      	ldrh	r2, [r7, #18]
 8022bda:	8b7b      	ldrh	r3, [r7, #26]
 8022bdc:	4413      	add	r3, r2
 8022bde:	b29b      	uxth	r3, r3
 8022be0:	2224      	movs	r2, #36	@ 0x24
 8022be2:	2101      	movs	r1, #1
 8022be4:	6978      	ldr	r0, [r7, #20]
 8022be6:	f7ff ff07 	bl	80229f8 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8022bea:	2320      	movs	r3, #32
 8022bec:	2201      	movs	r2, #1
 8022bee:	2101      	movs	r1, #1
 8022bf0:	6978      	ldr	r0, [r7, #20]
 8022bf2:	f7ff fee8 	bl	80229c6 <w5500_w1>
  for (i = 0; i < 40; i++) {
 8022bf6:	2300      	movs	r3, #0
 8022bf8:	83fb      	strh	r3, [r7, #30]
 8022bfa:	e020      	b.n	8022c3e <w5500_tx+0xb6>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8022bfc:	2202      	movs	r2, #2
 8022bfe:	2101      	movs	r1, #1
 8022c00:	6978      	ldr	r0, [r7, #20]
 8022c02:	f7ff ff32 	bl	8022a6a <w5500_r1>
 8022c06:	4603      	mov	r3, r0
 8022c08:	747b      	strb	r3, [r7, #17]
    if (ir == 0) continue;
 8022c0a:	7c7b      	ldrb	r3, [r7, #17]
 8022c0c:	2b00      	cmp	r3, #0
 8022c0e:	d012      	beq.n	8022c36 <w5500_tx+0xae>
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8022c10:	7c7b      	ldrb	r3, [r7, #17]
 8022c12:	2202      	movs	r2, #2
 8022c14:	2101      	movs	r1, #1
 8022c16:	6978      	ldr	r0, [r7, #20]
 8022c18:	f7ff fed5 	bl	80229c6 <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 8022c1c:	7c7b      	ldrb	r3, [r7, #17]
 8022c1e:	f003 0308 	and.w	r3, r3, #8
 8022c22:	2b00      	cmp	r3, #0
 8022c24:	d001      	beq.n	8022c2a <w5500_tx+0xa2>
 8022c26:	2300      	movs	r3, #0
 8022c28:	837b      	strh	r3, [r7, #26]
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8022c2a:	7c7b      	ldrb	r3, [r7, #17]
 8022c2c:	f003 0318 	and.w	r3, r3, #24
 8022c30:	2b00      	cmp	r3, #0
 8022c32:	d108      	bne.n	8022c46 <w5500_tx+0xbe>
 8022c34:	e000      	b.n	8022c38 <w5500_tx+0xb0>
    if (ir == 0) continue;
 8022c36:	bf00      	nop
  for (i = 0; i < 40; i++) {
 8022c38:	8bfb      	ldrh	r3, [r7, #30]
 8022c3a:	3301      	adds	r3, #1
 8022c3c:	83fb      	strh	r3, [r7, #30]
 8022c3e:	8bfb      	ldrh	r3, [r7, #30]
 8022c40:	2b27      	cmp	r3, #39	@ 0x27
 8022c42:	d9db      	bls.n	8022bfc <w5500_tx+0x74>
 8022c44:	e000      	b.n	8022c48 <w5500_tx+0xc0>
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8022c46:	bf00      	nop
  }
  return len;
 8022c48:	8b7b      	ldrh	r3, [r7, #26]
}
 8022c4a:	4618      	mov	r0, r3
 8022c4c:	3720      	adds	r7, #32
 8022c4e:	46bd      	mov	sp, r7
 8022c50:	bd80      	pop	{r7, pc}

08022c52 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 8022c52:	b580      	push	{r7, lr}
 8022c54:	b084      	sub	sp, #16
 8022c56:	af00      	add	r7, sp, #0
 8022c58:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022c5e:	60fb      	str	r3, [r7, #12]
  s->end(s->spi);
 8022c60:	68fb      	ldr	r3, [r7, #12]
 8022c62:	689b      	ldr	r3, [r3, #8]
 8022c64:	68fa      	ldr	r2, [r7, #12]
 8022c66:	6812      	ldr	r2, [r2, #0]
 8022c68:	4610      	mov	r0, r2
 8022c6a:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 8022c6c:	2380      	movs	r3, #128	@ 0x80
 8022c6e:	2200      	movs	r2, #0
 8022c70:	2100      	movs	r1, #0
 8022c72:	68f8      	ldr	r0, [r7, #12]
 8022c74:	f7ff fea7 	bl	80229c6 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8022c78:	2300      	movs	r3, #0
 8022c7a:	222e      	movs	r2, #46	@ 0x2e
 8022c7c:	2100      	movs	r1, #0
 8022c7e:	68f8      	ldr	r0, [r7, #12]
 8022c80:	f7ff fea1 	bl	80229c6 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8022c84:	23f8      	movs	r3, #248	@ 0xf8
 8022c86:	222e      	movs	r2, #46	@ 0x2e
 8022c88:	2100      	movs	r1, #0
 8022c8a:	68f8      	ldr	r0, [r7, #12]
 8022c8c:	f7ff fe9b 	bl	80229c6 <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 8022c90:	2310      	movs	r3, #16
 8022c92:	221e      	movs	r2, #30
 8022c94:	2101      	movs	r1, #1
 8022c96:	68f8      	ldr	r0, [r7, #12]
 8022c98:	f7ff fe95 	bl	80229c6 <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 8022c9c:	2310      	movs	r3, #16
 8022c9e:	221f      	movs	r2, #31
 8022ca0:	2101      	movs	r1, #1
 8022ca2:	68f8      	ldr	r0, [r7, #12]
 8022ca4:	f7ff fe8f 	bl	80229c6 <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 8022ca8:	2304      	movs	r3, #4
 8022caa:	2200      	movs	r2, #0
 8022cac:	2101      	movs	r1, #1
 8022cae:	68f8      	ldr	r0, [r7, #12]
 8022cb0:	f7ff fe89 	bl	80229c6 <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8022cb4:	2301      	movs	r3, #1
 8022cb6:	2201      	movs	r2, #1
 8022cb8:	2101      	movs	r1, #1
 8022cba:	68f8      	ldr	r0, [r7, #12]
 8022cbc:	f7ff fe83 	bl	80229c6 <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 8022cc0:	2203      	movs	r2, #3
 8022cc2:	2101      	movs	r1, #1
 8022cc4:	68f8      	ldr	r0, [r7, #12]
 8022cc6:	f7ff fed0 	bl	8022a6a <w5500_r1>
 8022cca:	4603      	mov	r3, r0
 8022ccc:	2b42      	cmp	r3, #66	@ 0x42
 8022cce:	bf0c      	ite	eq
 8022cd0:	2301      	moveq	r3, #1
 8022cd2:	2300      	movne	r3, #0
 8022cd4:	b2db      	uxtb	r3, r3
}
 8022cd6:	4618      	mov	r0, r3
 8022cd8:	3710      	adds	r7, #16
 8022cda:	46bd      	mov	sp, r7
 8022cdc:	bd80      	pop	{r7, pc}

08022cde <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 8022cde:	b580      	push	{r7, lr}
 8022ce0:	b084      	sub	sp, #16
 8022ce2:	af00      	add	r7, sp, #0
 8022ce4:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
 8022ce6:	687b      	ldr	r3, [r7, #4]
 8022ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022cea:	60fb      	str	r3, [r7, #12]
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 8022cec:	222e      	movs	r2, #46	@ 0x2e
 8022cee:	2100      	movs	r1, #0
 8022cf0:	68f8      	ldr	r0, [r7, #12]
 8022cf2:	f7ff feba 	bl	8022a6a <w5500_r1>
 8022cf6:	4603      	mov	r3, r0
 8022cf8:	72fb      	strb	r3, [r7, #11]
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
 8022cfa:	7afb      	ldrb	r3, [r7, #11]
 8022cfc:	f003 0301 	and.w	r3, r3, #1
 8022d00:	2b00      	cmp	r3, #0
 8022d02:	bf14      	ite	ne
 8022d04:	2301      	movne	r3, #1
 8022d06:	2300      	moveq	r3, #0
 8022d08:	b2db      	uxtb	r3, r3
}
 8022d0a:	4618      	mov	r0, r3
 8022d0c:	3710      	adds	r7, #16
 8022d0e:	46bd      	mov	sp, r7
 8022d10:	bd80      	pop	{r7, pc}
	...

08022d14 <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 8022d14:	b580      	push	{r7, lr}
 8022d16:	b082      	sub	sp, #8
 8022d18:	af00      	add	r7, sp, #0
 8022d1a:	6078      	str	r0, [r7, #4]
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 8022d1c:	2207      	movs	r2, #7
 8022d1e:	4907      	ldr	r1, [pc, #28]	@ (8022d3c <has_mqtt_prefix+0x28>)
 8022d20:	6878      	ldr	r0, [r7, #4]
 8022d22:	f002 feca 	bl	8025aba <strncmp>
 8022d26:	4603      	mov	r3, r0
 8022d28:	2b00      	cmp	r3, #0
 8022d2a:	bf0c      	ite	eq
 8022d2c:	2301      	moveq	r3, #1
 8022d2e:	2300      	movne	r3, #0
 8022d30:	b2db      	uxtb	r3, r3
}
 8022d32:	4618      	mov	r0, r3
 8022d34:	3708      	adds	r7, #8
 8022d36:	46bd      	mov	sp, r7
 8022d38:	bd80      	pop	{r7, pc}
 8022d3a:	bf00      	nop
 8022d3c:	08033098 	.word	0x08033098

08022d40 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 8022d40:	b580      	push	{r7, lr}
 8022d42:	b08a      	sub	sp, #40	@ 0x28
 8022d44:	af00      	add	r7, sp, #0
 8022d46:	6078      	str	r0, [r7, #4]
    int dot_count = 0;
 8022d48:	2300      	movs	r3, #0
 8022d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_ip_format = 1;
 8022d4c:	2301      	movs	r3, #1
 8022d4e:	623b      	str	r3, [r7, #32]

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 8022d50:	2300      	movs	r3, #0
 8022d52:	61fb      	str	r3, [r7, #28]
 8022d54:	e01b      	b.n	8022d8e <is_valid_ip_or_domain+0x4e>
        if (host[i] == '.') {
 8022d56:	69fb      	ldr	r3, [r7, #28]
 8022d58:	687a      	ldr	r2, [r7, #4]
 8022d5a:	4413      	add	r3, r2
 8022d5c:	781b      	ldrb	r3, [r3, #0]
 8022d5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8022d60:	d103      	bne.n	8022d6a <is_valid_ip_or_domain+0x2a>
            dot_count++;
 8022d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022d64:	3301      	adds	r3, #1
 8022d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8022d68:	e00e      	b.n	8022d88 <is_valid_ip_or_domain+0x48>
        } else if (!isdigit(host[i])) {
 8022d6a:	69fb      	ldr	r3, [r7, #28]
 8022d6c:	687a      	ldr	r2, [r7, #4]
 8022d6e:	4413      	add	r3, r2
 8022d70:	781b      	ldrb	r3, [r3, #0]
 8022d72:	3301      	adds	r3, #1
 8022d74:	4a39      	ldr	r2, [pc, #228]	@ (8022e5c <is_valid_ip_or_domain+0x11c>)
 8022d76:	4413      	add	r3, r2
 8022d78:	781b      	ldrb	r3, [r3, #0]
 8022d7a:	f003 0304 	and.w	r3, r3, #4
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	d102      	bne.n	8022d88 <is_valid_ip_or_domain+0x48>
            is_ip_format = 0;
 8022d82:	2300      	movs	r3, #0
 8022d84:	623b      	str	r3, [r7, #32]
            break;
 8022d86:	e008      	b.n	8022d9a <is_valid_ip_or_domain+0x5a>
    for (int i = 0; host[i] != '\0'; i++) {
 8022d88:	69fb      	ldr	r3, [r7, #28]
 8022d8a:	3301      	adds	r3, #1
 8022d8c:	61fb      	str	r3, [r7, #28]
 8022d8e:	69fb      	ldr	r3, [r7, #28]
 8022d90:	687a      	ldr	r2, [r7, #4]
 8022d92:	4413      	add	r3, r2
 8022d94:	781b      	ldrb	r3, [r3, #0]
 8022d96:	2b00      	cmp	r3, #0
 8022d98:	d1dd      	bne.n	8022d56 <is_valid_ip_or_domain+0x16>
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 8022d9a:	6a3b      	ldr	r3, [r7, #32]
 8022d9c:	2b00      	cmp	r3, #0
 8022d9e:	d026      	beq.n	8022dee <is_valid_ip_or_domain+0xae>
 8022da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022da2:	2b03      	cmp	r3, #3
 8022da4:	d123      	bne.n	8022dee <is_valid_ip_or_domain+0xae>
        int octet;
        const char *ptr = host;
 8022da6:	687b      	ldr	r3, [r7, #4]
 8022da8:	61bb      	str	r3, [r7, #24]

        for (int i = 0; i < 4; i++) {
 8022daa:	2300      	movs	r3, #0
 8022dac:	617b      	str	r3, [r7, #20]
 8022dae:	e019      	b.n	8022de4 <is_valid_ip_or_domain+0xa4>
            octet = atoi(ptr);
 8022db0:	69b8      	ldr	r0, [r7, #24]
 8022db2:	f000 f917 	bl	8022fe4 <atoi>
 8022db6:	60f8      	str	r0, [r7, #12]
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8022db8:	68fb      	ldr	r3, [r7, #12]
 8022dba:	2b00      	cmp	r3, #0
 8022dbc:	db02      	blt.n	8022dc4 <is_valid_ip_or_domain+0x84>
 8022dbe:	68fb      	ldr	r3, [r7, #12]
 8022dc0:	2bff      	cmp	r3, #255	@ 0xff
 8022dc2:	dd01      	ble.n	8022dc8 <is_valid_ip_or_domain+0x88>
 8022dc4:	2300      	movs	r3, #0
 8022dc6:	e044      	b.n	8022e52 <is_valid_ip_or_domain+0x112>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 8022dc8:	212e      	movs	r1, #46	@ 0x2e
 8022dca:	69b8      	ldr	r0, [r7, #24]
 8022dcc:	f002 fe57 	bl	8025a7e <strchr>
 8022dd0:	61b8      	str	r0, [r7, #24]
            if (ptr != NULL) ptr++;
 8022dd2:	69bb      	ldr	r3, [r7, #24]
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	d002      	beq.n	8022dde <is_valid_ip_or_domain+0x9e>
 8022dd8:	69bb      	ldr	r3, [r7, #24]
 8022dda:	3301      	adds	r3, #1
 8022ddc:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < 4; i++) {
 8022dde:	697b      	ldr	r3, [r7, #20]
 8022de0:	3301      	adds	r3, #1
 8022de2:	617b      	str	r3, [r7, #20]
 8022de4:	697b      	ldr	r3, [r7, #20]
 8022de6:	2b03      	cmp	r3, #3
 8022de8:	dde2      	ble.n	8022db0 <is_valid_ip_or_domain+0x70>
        }
        return 1;  // Строка - корректный IP-адрес
 8022dea:	2301      	movs	r3, #1
 8022dec:	e031      	b.n	8022e52 <is_valid_ip_or_domain+0x112>
    }

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
 8022dee:	2300      	movs	r3, #0
 8022df0:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; host[i] != '\0'; i++) {
 8022df2:	2300      	movs	r3, #0
 8022df4:	613b      	str	r3, [r7, #16]
 8022df6:	e020      	b.n	8022e3a <is_valid_ip_or_domain+0xfa>
        if (host[i] == '.') {
 8022df8:	693b      	ldr	r3, [r7, #16]
 8022dfa:	687a      	ldr	r2, [r7, #4]
 8022dfc:	4413      	add	r3, r2
 8022dfe:	781b      	ldrb	r3, [r3, #0]
 8022e00:	2b2e      	cmp	r3, #46	@ 0x2e
 8022e02:	d103      	bne.n	8022e0c <is_valid_ip_or_domain+0xcc>
            dot_count++;
 8022e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022e06:	3301      	adds	r3, #1
 8022e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8022e0a:	e013      	b.n	8022e34 <is_valid_ip_or_domain+0xf4>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 8022e0c:	693b      	ldr	r3, [r7, #16]
 8022e0e:	687a      	ldr	r2, [r7, #4]
 8022e10:	4413      	add	r3, r2
 8022e12:	781b      	ldrb	r3, [r3, #0]
 8022e14:	3301      	adds	r3, #1
 8022e16:	4a11      	ldr	r2, [pc, #68]	@ (8022e5c <is_valid_ip_or_domain+0x11c>)
 8022e18:	4413      	add	r3, r2
 8022e1a:	781b      	ldrb	r3, [r3, #0]
 8022e1c:	f003 0307 	and.w	r3, r3, #7
 8022e20:	2b00      	cmp	r3, #0
 8022e22:	d107      	bne.n	8022e34 <is_valid_ip_or_domain+0xf4>
 8022e24:	693b      	ldr	r3, [r7, #16]
 8022e26:	687a      	ldr	r2, [r7, #4]
 8022e28:	4413      	add	r3, r2
 8022e2a:	781b      	ldrb	r3, [r3, #0]
 8022e2c:	2b2d      	cmp	r3, #45	@ 0x2d
 8022e2e:	d001      	beq.n	8022e34 <is_valid_ip_or_domain+0xf4>
            return 0;  // Некорректный символ для доменного имени
 8022e30:	2300      	movs	r3, #0
 8022e32:	e00e      	b.n	8022e52 <is_valid_ip_or_domain+0x112>
    for (int i = 0; host[i] != '\0'; i++) {
 8022e34:	693b      	ldr	r3, [r7, #16]
 8022e36:	3301      	adds	r3, #1
 8022e38:	613b      	str	r3, [r7, #16]
 8022e3a:	693b      	ldr	r3, [r7, #16]
 8022e3c:	687a      	ldr	r2, [r7, #4]
 8022e3e:	4413      	add	r3, r2
 8022e40:	781b      	ldrb	r3, [r3, #0]
 8022e42:	2b00      	cmp	r3, #0
 8022e44:	d1d8      	bne.n	8022df8 <is_valid_ip_or_domain+0xb8>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 8022e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022e48:	2b00      	cmp	r3, #0
 8022e4a:	bfcc      	ite	gt
 8022e4c:	2301      	movgt	r3, #1
 8022e4e:	2300      	movle	r3, #0
 8022e50:	b2db      	uxtb	r3, r3
}
 8022e52:	4618      	mov	r0, r3
 8022e54:	3728      	adds	r7, #40	@ 0x28
 8022e56:	46bd      	mov	sp, r7
 8022e58:	bd80      	pop	{r7, pc}
 8022e5a:	bf00      	nop
 8022e5c:	08034404 	.word	0x08034404

08022e60 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8022e60:	b580      	push	{r7, lr}
 8022e62:	b084      	sub	sp, #16
 8022e64:	af00      	add	r7, sp, #0
 8022e66:	6078      	str	r0, [r7, #4]
    int port = atoi(port_str);
 8022e68:	6878      	ldr	r0, [r7, #4]
 8022e6a:	f000 f8bb 	bl	8022fe4 <atoi>
 8022e6e:	60f8      	str	r0, [r7, #12]
    if (port < 1 || port > MAX_PORT) {
 8022e70:	68fb      	ldr	r3, [r7, #12]
 8022e72:	2b00      	cmp	r3, #0
 8022e74:	dd03      	ble.n	8022e7e <is_valid_port+0x1e>
 8022e76:	68fb      	ldr	r3, [r7, #12]
 8022e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8022e7c:	db10      	blt.n	8022ea0 <is_valid_port+0x40>
        return 0; // Порт вне диапазона
 8022e7e:	2300      	movs	r3, #0
 8022e80:	e013      	b.n	8022eaa <is_valid_port+0x4a>
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
        if (!isdigit(*port_str)) {
 8022e82:	687b      	ldr	r3, [r7, #4]
 8022e84:	781b      	ldrb	r3, [r3, #0]
 8022e86:	3301      	adds	r3, #1
 8022e88:	4a0a      	ldr	r2, [pc, #40]	@ (8022eb4 <is_valid_port+0x54>)
 8022e8a:	4413      	add	r3, r2
 8022e8c:	781b      	ldrb	r3, [r3, #0]
 8022e8e:	f003 0304 	and.w	r3, r3, #4
 8022e92:	2b00      	cmp	r3, #0
 8022e94:	d101      	bne.n	8022e9a <is_valid_port+0x3a>
            return 0;
 8022e96:	2300      	movs	r3, #0
 8022e98:	e007      	b.n	8022eaa <is_valid_port+0x4a>
        }
        port_str++;
 8022e9a:	687b      	ldr	r3, [r7, #4]
 8022e9c:	3301      	adds	r3, #1
 8022e9e:	607b      	str	r3, [r7, #4]
    while (*port_str) {
 8022ea0:	687b      	ldr	r3, [r7, #4]
 8022ea2:	781b      	ldrb	r3, [r3, #0]
 8022ea4:	2b00      	cmp	r3, #0
 8022ea6:	d1ec      	bne.n	8022e82 <is_valid_port+0x22>
    }
    return 1;
 8022ea8:	2301      	movs	r3, #1
}
 8022eaa:	4618      	mov	r0, r3
 8022eac:	3710      	adds	r7, #16
 8022eae:	46bd      	mov	sp, r7
 8022eb0:	bd80      	pop	{r7, pc}
 8022eb2:	bf00      	nop
 8022eb4:	08034404 	.word	0x08034404

08022eb8 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 8022eb8:	b580      	push	{r7, lr}
 8022eba:	b0c6      	sub	sp, #280	@ 0x118
 8022ebc:	af00      	add	r7, sp, #0
 8022ebe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8022ec2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8022ec6:	6018      	str	r0, [r3, #0]
    if (!has_mqtt_prefix(url)) {
 8022ec8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8022ecc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8022ed0:	6818      	ldr	r0, [r3, #0]
 8022ed2:	f7ff ff1f 	bl	8022d14 <has_mqtt_prefix>
 8022ed6:	4603      	mov	r3, r0
 8022ed8:	2b00      	cmp	r3, #0
 8022eda:	d105      	bne.n	8022ee8 <is_valid_mqtt_url+0x30>
        printf("Error: URL does not start with 'mqtt://'\n");
 8022edc:	482e      	ldr	r0, [pc, #184]	@ (8022f98 <is_valid_mqtt_url+0xe0>)
 8022ede:	f002 f85f 	bl	8024fa0 <puts>
        return -1;
 8022ee2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022ee6:	e051      	b.n	8022f8c <is_valid_mqtt_url+0xd4>
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 8022ee8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8022eec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8022ef0:	681b      	ldr	r3, [r3, #0]
 8022ef2:	3307      	adds	r3, #7
 8022ef4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    const char *colon = strchr(host_start, ':');
 8022ef8:	213a      	movs	r1, #58	@ 0x3a
 8022efa:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8022efe:	f002 fdbe 	bl	8025a7e <strchr>
 8022f02:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    if (!colon) {
 8022f06:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8022f0a:	2b00      	cmp	r3, #0
 8022f0c:	d105      	bne.n	8022f1a <is_valid_mqtt_url+0x62>
        printf("Error: URL does not contain a port separator ':'\n");
 8022f0e:	4823      	ldr	r0, [pc, #140]	@ (8022f9c <is_valid_mqtt_url+0xe4>)
 8022f10:	f002 f846 	bl	8024fa0 <puts>
        return -2;
 8022f14:	f06f 0301 	mvn.w	r3, #1
 8022f18:	e038      	b.n	8022f8c <is_valid_mqtt_url+0xd4>
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 8022f1a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8022f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8022f22:	1ad3      	subs	r3, r2, r3
 8022f24:	461a      	mov	r2, r3
 8022f26:	f107 030c 	add.w	r3, r7, #12
 8022f2a:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8022f2e:	4618      	mov	r0, r3
 8022f30:	f002 fdd5 	bl	8025ade <strncpy>
    host[colon - host_start] = '\0';
 8022f34:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8022f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8022f3c:	1ad3      	subs	r3, r2, r3
 8022f3e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8022f42:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8022f46:	2100      	movs	r1, #0
 8022f48:	54d1      	strb	r1, [r2, r3]

    if (!is_valid_ip_or_domain(host)) {
 8022f4a:	f107 030c 	add.w	r3, r7, #12
 8022f4e:	4618      	mov	r0, r3
 8022f50:	f7ff fef6 	bl	8022d40 <is_valid_ip_or_domain>
 8022f54:	4603      	mov	r3, r0
 8022f56:	2b00      	cmp	r3, #0
 8022f58:	d105      	bne.n	8022f66 <is_valid_mqtt_url+0xae>
        printf("Error: Invalid domain or IP address\n");
 8022f5a:	4811      	ldr	r0, [pc, #68]	@ (8022fa0 <is_valid_mqtt_url+0xe8>)
 8022f5c:	f002 f820 	bl	8024fa0 <puts>
        return -3;
 8022f60:	f06f 0302 	mvn.w	r3, #2
 8022f64:	e012      	b.n	8022f8c <is_valid_mqtt_url+0xd4>
    }

    // Проверить порт
    const char *port_str = colon + 1;
 8022f66:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8022f6a:	3301      	adds	r3, #1
 8022f6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (!is_valid_port(port_str)) {
 8022f70:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8022f74:	f7ff ff74 	bl	8022e60 <is_valid_port>
 8022f78:	4603      	mov	r3, r0
 8022f7a:	2b00      	cmp	r3, #0
 8022f7c:	d105      	bne.n	8022f8a <is_valid_mqtt_url+0xd2>
        printf("Error: Invalid port number\n");
 8022f7e:	4809      	ldr	r0, [pc, #36]	@ (8022fa4 <is_valid_mqtt_url+0xec>)
 8022f80:	f002 f80e 	bl	8024fa0 <puts>
        return -4;
 8022f84:	f06f 0303 	mvn.w	r3, #3
 8022f88:	e000      	b.n	8022f8c <is_valid_mqtt_url+0xd4>
    }

    return 0; // URL прошел все проверки
 8022f8a:	2300      	movs	r3, #0
}
 8022f8c:	4618      	mov	r0, r3
 8022f8e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8022f92:	46bd      	mov	sp, r7
 8022f94:	bd80      	pop	{r7, pc}
 8022f96:	bf00      	nop
 8022f98:	080330a0 	.word	0x080330a0
 8022f9c:	080330cc 	.word	0x080330cc
 8022fa0:	08033100 	.word	0x08033100
 8022fa4:	08033124 	.word	0x08033124

08022fa8 <__assert_func>:
 8022fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022faa:	4614      	mov	r4, r2
 8022fac:	461a      	mov	r2, r3
 8022fae:	4b09      	ldr	r3, [pc, #36]	@ (8022fd4 <__assert_func+0x2c>)
 8022fb0:	681b      	ldr	r3, [r3, #0]
 8022fb2:	4605      	mov	r5, r0
 8022fb4:	68d8      	ldr	r0, [r3, #12]
 8022fb6:	b954      	cbnz	r4, 8022fce <__assert_func+0x26>
 8022fb8:	4b07      	ldr	r3, [pc, #28]	@ (8022fd8 <__assert_func+0x30>)
 8022fba:	461c      	mov	r4, r3
 8022fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022fc0:	9100      	str	r1, [sp, #0]
 8022fc2:	462b      	mov	r3, r5
 8022fc4:	4905      	ldr	r1, [pc, #20]	@ (8022fdc <__assert_func+0x34>)
 8022fc6:	f000 f811 	bl	8022fec <fiprintf>
 8022fca:	f003 ffe1 	bl	8026f90 <abort>
 8022fce:	4b04      	ldr	r3, [pc, #16]	@ (8022fe0 <__assert_func+0x38>)
 8022fd0:	e7f4      	b.n	8022fbc <__assert_func+0x14>
 8022fd2:	bf00      	nop
 8022fd4:	20000430 	.word	0x20000430
 8022fd8:	08034047 	.word	0x08034047
 8022fdc:	08034019 	.word	0x08034019
 8022fe0:	0803400c 	.word	0x0803400c

08022fe4 <atoi>:
 8022fe4:	220a      	movs	r2, #10
 8022fe6:	2100      	movs	r1, #0
 8022fe8:	f002 b8b8 	b.w	802515c <strtol>

08022fec <fiprintf>:
 8022fec:	b40e      	push	{r1, r2, r3}
 8022fee:	b503      	push	{r0, r1, lr}
 8022ff0:	4601      	mov	r1, r0
 8022ff2:	ab03      	add	r3, sp, #12
 8022ff4:	4805      	ldr	r0, [pc, #20]	@ (802300c <fiprintf+0x20>)
 8022ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8022ffa:	6800      	ldr	r0, [r0, #0]
 8022ffc:	9301      	str	r3, [sp, #4]
 8022ffe:	f001 fab9 	bl	8024574 <_vfiprintf_r>
 8023002:	b002      	add	sp, #8
 8023004:	f85d eb04 	ldr.w	lr, [sp], #4
 8023008:	b003      	add	sp, #12
 802300a:	4770      	bx	lr
 802300c:	20000430 	.word	0x20000430

08023010 <printf>:
 8023010:	b40f      	push	{r0, r1, r2, r3}
 8023012:	b507      	push	{r0, r1, r2, lr}
 8023014:	4906      	ldr	r1, [pc, #24]	@ (8023030 <printf+0x20>)
 8023016:	ab04      	add	r3, sp, #16
 8023018:	6808      	ldr	r0, [r1, #0]
 802301a:	f853 2b04 	ldr.w	r2, [r3], #4
 802301e:	6881      	ldr	r1, [r0, #8]
 8023020:	9301      	str	r3, [sp, #4]
 8023022:	f000 f809 	bl	8023038 <_vfprintf_r>
 8023026:	b003      	add	sp, #12
 8023028:	f85d eb04 	ldr.w	lr, [sp], #4
 802302c:	b004      	add	sp, #16
 802302e:	4770      	bx	lr
 8023030:	20000430 	.word	0x20000430
 8023034:	00000000 	.word	0x00000000

08023038 <_vfprintf_r>:
 8023038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802303c:	b0d3      	sub	sp, #332	@ 0x14c
 802303e:	468b      	mov	fp, r1
 8023040:	4690      	mov	r8, r2
 8023042:	461c      	mov	r4, r3
 8023044:	461e      	mov	r6, r3
 8023046:	9003      	str	r0, [sp, #12]
 8023048:	f003 fe90 	bl	8026d6c <_localeconv_r>
 802304c:	6803      	ldr	r3, [r0, #0]
 802304e:	9316      	str	r3, [sp, #88]	@ 0x58
 8023050:	4618      	mov	r0, r3
 8023052:	f7dd f925 	bl	80002a0 <strlen>
 8023056:	9b03      	ldr	r3, [sp, #12]
 8023058:	900d      	str	r0, [sp, #52]	@ 0x34
 802305a:	b123      	cbz	r3, 8023066 <_vfprintf_r+0x2e>
 802305c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802305e:	b913      	cbnz	r3, 8023066 <_vfprintf_r+0x2e>
 8023060:	9803      	ldr	r0, [sp, #12]
 8023062:	f002 fa4f 	bl	8025504 <__sinit>
 8023066:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802306a:	07da      	lsls	r2, r3, #31
 802306c:	d407      	bmi.n	802307e <_vfprintf_r+0x46>
 802306e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8023072:	059b      	lsls	r3, r3, #22
 8023074:	d403      	bmi.n	802307e <_vfprintf_r+0x46>
 8023076:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802307a:	f003 ff22 	bl	8026ec2 <__retarget_lock_acquire_recursive>
 802307e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8023082:	049f      	lsls	r7, r3, #18
 8023084:	d409      	bmi.n	802309a <_vfprintf_r+0x62>
 8023086:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802308a:	f8ab 300c 	strh.w	r3, [fp, #12]
 802308e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8023092:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8023096:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 802309a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802309e:	071d      	lsls	r5, r3, #28
 80230a0:	d502      	bpl.n	80230a8 <_vfprintf_r+0x70>
 80230a2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80230a6:	b9c3      	cbnz	r3, 80230da <_vfprintf_r+0xa2>
 80230a8:	9803      	ldr	r0, [sp, #12]
 80230aa:	4659      	mov	r1, fp
 80230ac:	f002 fbe6 	bl	802587c <__swsetup_r>
 80230b0:	b198      	cbz	r0, 80230da <_vfprintf_r+0xa2>
 80230b2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80230b6:	07d8      	lsls	r0, r3, #31
 80230b8:	d506      	bpl.n	80230c8 <_vfprintf_r+0x90>
 80230ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80230be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80230c0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80230c2:	b053      	add	sp, #332	@ 0x14c
 80230c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230c8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80230cc:	0599      	lsls	r1, r3, #22
 80230ce:	d4f4      	bmi.n	80230ba <_vfprintf_r+0x82>
 80230d0:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80230d4:	f003 fef7 	bl	8026ec6 <__retarget_lock_release_recursive>
 80230d8:	e7ef      	b.n	80230ba <_vfprintf_r+0x82>
 80230da:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80230de:	f003 021a 	and.w	r2, r3, #26
 80230e2:	2a0a      	cmp	r2, #10
 80230e4:	d116      	bne.n	8023114 <_vfprintf_r+0xdc>
 80230e6:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 80230ea:	2a00      	cmp	r2, #0
 80230ec:	db12      	blt.n	8023114 <_vfprintf_r+0xdc>
 80230ee:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 80230f2:	07d2      	lsls	r2, r2, #31
 80230f4:	d405      	bmi.n	8023102 <_vfprintf_r+0xca>
 80230f6:	059b      	lsls	r3, r3, #22
 80230f8:	d403      	bmi.n	8023102 <_vfprintf_r+0xca>
 80230fa:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80230fe:	f003 fee2 	bl	8026ec6 <__retarget_lock_release_recursive>
 8023102:	9803      	ldr	r0, [sp, #12]
 8023104:	4623      	mov	r3, r4
 8023106:	4642      	mov	r2, r8
 8023108:	4659      	mov	r1, fp
 802310a:	b053      	add	sp, #332	@ 0x14c
 802310c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023110:	f001 b9be 	b.w	8024490 <__sbprintf>
 8023114:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 8023360 <_vfprintf_r+0x328>
 8023118:	2300      	movs	r3, #0
 802311a:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802311e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8023122:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8023126:	ac29      	add	r4, sp, #164	@ 0xa4
 8023128:	9426      	str	r4, [sp, #152]	@ 0x98
 802312a:	9304      	str	r3, [sp, #16]
 802312c:	9309      	str	r3, [sp, #36]	@ 0x24
 802312e:	9312      	str	r3, [sp, #72]	@ 0x48
 8023130:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023132:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023134:	4643      	mov	r3, r8
 8023136:	461d      	mov	r5, r3
 8023138:	f813 2b01 	ldrb.w	r2, [r3], #1
 802313c:	b10a      	cbz	r2, 8023142 <_vfprintf_r+0x10a>
 802313e:	2a25      	cmp	r2, #37	@ 0x25
 8023140:	d1f9      	bne.n	8023136 <_vfprintf_r+0xfe>
 8023142:	ebb5 0708 	subs.w	r7, r5, r8
 8023146:	d00d      	beq.n	8023164 <_vfprintf_r+0x12c>
 8023148:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802314a:	443b      	add	r3, r7
 802314c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802314e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023150:	3301      	adds	r3, #1
 8023152:	2b07      	cmp	r3, #7
 8023154:	e9c4 8700 	strd	r8, r7, [r4]
 8023158:	9327      	str	r3, [sp, #156]	@ 0x9c
 802315a:	dc75      	bgt.n	8023248 <_vfprintf_r+0x210>
 802315c:	3408      	adds	r4, #8
 802315e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023160:	443b      	add	r3, r7
 8023162:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023164:	782b      	ldrb	r3, [r5, #0]
 8023166:	2b00      	cmp	r3, #0
 8023168:	f001 814f 	beq.w	802440a <_vfprintf_r+0x13d2>
 802316c:	2200      	movs	r2, #0
 802316e:	1c6b      	adds	r3, r5, #1
 8023170:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8023174:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8023178:	920e      	str	r2, [sp, #56]	@ 0x38
 802317a:	4615      	mov	r5, r2
 802317c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023180:	9206      	str	r2, [sp, #24]
 8023182:	930c      	str	r3, [sp, #48]	@ 0x30
 8023184:	9b06      	ldr	r3, [sp, #24]
 8023186:	3b20      	subs	r3, #32
 8023188:	2b5a      	cmp	r3, #90	@ 0x5a
 802318a:	f200 85aa 	bhi.w	8023ce2 <_vfprintf_r+0xcaa>
 802318e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023192:	009d      	.short	0x009d
 8023194:	05a805a8 	.word	0x05a805a8
 8023198:	05a800a5 	.word	0x05a800a5
 802319c:	05a805a8 	.word	0x05a805a8
 80231a0:	05a80085 	.word	0x05a80085
 80231a4:	00a805a8 	.word	0x00a805a8
 80231a8:	05a800b2 	.word	0x05a800b2
 80231ac:	00b400af 	.word	0x00b400af
 80231b0:	00ce05a8 	.word	0x00ce05a8
 80231b4:	00d100d1 	.word	0x00d100d1
 80231b8:	00d100d1 	.word	0x00d100d1
 80231bc:	00d100d1 	.word	0x00d100d1
 80231c0:	00d100d1 	.word	0x00d100d1
 80231c4:	05a800d1 	.word	0x05a800d1
 80231c8:	05a805a8 	.word	0x05a805a8
 80231cc:	05a805a8 	.word	0x05a805a8
 80231d0:	05a805a8 	.word	0x05a805a8
 80231d4:	05a80146 	.word	0x05a80146
 80231d8:	011a0107 	.word	0x011a0107
 80231dc:	01460146 	.word	0x01460146
 80231e0:	05a80146 	.word	0x05a80146
 80231e4:	05a805a8 	.word	0x05a805a8
 80231e8:	00e205a8 	.word	0x00e205a8
 80231ec:	05a805a8 	.word	0x05a805a8
 80231f0:	05a804a3 	.word	0x05a804a3
 80231f4:	05a805a8 	.word	0x05a805a8
 80231f8:	05a804ed 	.word	0x05a804ed
 80231fc:	05a8050e 	.word	0x05a8050e
 8023200:	053005a8 	.word	0x053005a8
 8023204:	05a805a8 	.word	0x05a805a8
 8023208:	05a805a8 	.word	0x05a805a8
 802320c:	05a805a8 	.word	0x05a805a8
 8023210:	05a805a8 	.word	0x05a805a8
 8023214:	05a80146 	.word	0x05a80146
 8023218:	011c0107 	.word	0x011c0107
 802321c:	01460146 	.word	0x01460146
 8023220:	00ed0146 	.word	0x00ed0146
 8023224:	0101011c 	.word	0x0101011c
 8023228:	00fa05a8 	.word	0x00fa05a8
 802322c:	048705a8 	.word	0x048705a8
 8023230:	04dc04a5 	.word	0x04dc04a5
 8023234:	05a80101 	.word	0x05a80101
 8023238:	009b04ed 	.word	0x009b04ed
 802323c:	05a80510 	.word	0x05a80510
 8023240:	006505a8 	.word	0x006505a8
 8023244:	009b05a8 	.word	0x009b05a8
 8023248:	9803      	ldr	r0, [sp, #12]
 802324a:	aa26      	add	r2, sp, #152	@ 0x98
 802324c:	4659      	mov	r1, fp
 802324e:	f001 f95f 	bl	8024510 <__sprint_r>
 8023252:	2800      	cmp	r0, #0
 8023254:	f040 814d 	bne.w	80234f2 <_vfprintf_r+0x4ba>
 8023258:	ac29      	add	r4, sp, #164	@ 0xa4
 802325a:	e780      	b.n	802315e <_vfprintf_r+0x126>
 802325c:	4b42      	ldr	r3, [pc, #264]	@ (8023368 <_vfprintf_r+0x330>)
 802325e:	9319      	str	r3, [sp, #100]	@ 0x64
 8023260:	f015 0320 	ands.w	r3, r5, #32
 8023264:	f000 84c8 	beq.w	8023bf8 <_vfprintf_r+0xbc0>
 8023268:	3607      	adds	r6, #7
 802326a:	f026 0307 	bic.w	r3, r6, #7
 802326e:	461a      	mov	r2, r3
 8023270:	685f      	ldr	r7, [r3, #4]
 8023272:	f852 6b08 	ldr.w	r6, [r2], #8
 8023276:	9207      	str	r2, [sp, #28]
 8023278:	07eb      	lsls	r3, r5, #31
 802327a:	d50a      	bpl.n	8023292 <_vfprintf_r+0x25a>
 802327c:	ea56 0307 	orrs.w	r3, r6, r7
 8023280:	d007      	beq.n	8023292 <_vfprintf_r+0x25a>
 8023282:	2330      	movs	r3, #48	@ 0x30
 8023284:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8023288:	9b06      	ldr	r3, [sp, #24]
 802328a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802328e:	f045 0502 	orr.w	r5, r5, #2
 8023292:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8023296:	2302      	movs	r3, #2
 8023298:	f000 bc2e 	b.w	8023af8 <_vfprintf_r+0xac0>
 802329c:	9803      	ldr	r0, [sp, #12]
 802329e:	f003 fd65 	bl	8026d6c <_localeconv_r>
 80232a2:	6843      	ldr	r3, [r0, #4]
 80232a4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80232a6:	4618      	mov	r0, r3
 80232a8:	f7dc fffa 	bl	80002a0 <strlen>
 80232ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80232ae:	9803      	ldr	r0, [sp, #12]
 80232b0:	f003 fd5c 	bl	8026d6c <_localeconv_r>
 80232b4:	6883      	ldr	r3, [r0, #8]
 80232b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80232b8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80232ba:	b12b      	cbz	r3, 80232c8 <_vfprintf_r+0x290>
 80232bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80232be:	b11b      	cbz	r3, 80232c8 <_vfprintf_r+0x290>
 80232c0:	781b      	ldrb	r3, [r3, #0]
 80232c2:	b10b      	cbz	r3, 80232c8 <_vfprintf_r+0x290>
 80232c4:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 80232c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80232ca:	e757      	b.n	802317c <_vfprintf_r+0x144>
 80232cc:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80232d0:	2b00      	cmp	r3, #0
 80232d2:	d1f9      	bne.n	80232c8 <_vfprintf_r+0x290>
 80232d4:	2320      	movs	r3, #32
 80232d6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80232da:	e7f5      	b.n	80232c8 <_vfprintf_r+0x290>
 80232dc:	f045 0501 	orr.w	r5, r5, #1
 80232e0:	e7f2      	b.n	80232c8 <_vfprintf_r+0x290>
 80232e2:	f856 3b04 	ldr.w	r3, [r6], #4
 80232e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80232e8:	2b00      	cmp	r3, #0
 80232ea:	daed      	bge.n	80232c8 <_vfprintf_r+0x290>
 80232ec:	425b      	negs	r3, r3
 80232ee:	930e      	str	r3, [sp, #56]	@ 0x38
 80232f0:	f045 0504 	orr.w	r5, r5, #4
 80232f4:	e7e8      	b.n	80232c8 <_vfprintf_r+0x290>
 80232f6:	232b      	movs	r3, #43	@ 0x2b
 80232f8:	e7ed      	b.n	80232d6 <_vfprintf_r+0x29e>
 80232fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80232fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023300:	9206      	str	r2, [sp, #24]
 8023302:	2a2a      	cmp	r2, #42	@ 0x2a
 8023304:	d10f      	bne.n	8023326 <_vfprintf_r+0x2ee>
 8023306:	f856 2b04 	ldr.w	r2, [r6], #4
 802330a:	930c      	str	r3, [sp, #48]	@ 0x30
 802330c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 8023310:	e7da      	b.n	80232c8 <_vfprintf_r+0x290>
 8023312:	fb01 2909 	mla	r9, r1, r9, r2
 8023316:	f813 2b01 	ldrb.w	r2, [r3], #1
 802331a:	9206      	str	r2, [sp, #24]
 802331c:	9a06      	ldr	r2, [sp, #24]
 802331e:	3a30      	subs	r2, #48	@ 0x30
 8023320:	2a09      	cmp	r2, #9
 8023322:	d9f6      	bls.n	8023312 <_vfprintf_r+0x2da>
 8023324:	e72d      	b.n	8023182 <_vfprintf_r+0x14a>
 8023326:	f04f 0900 	mov.w	r9, #0
 802332a:	210a      	movs	r1, #10
 802332c:	e7f6      	b.n	802331c <_vfprintf_r+0x2e4>
 802332e:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8023332:	e7c9      	b.n	80232c8 <_vfprintf_r+0x290>
 8023334:	2200      	movs	r2, #0
 8023336:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023338:	920e      	str	r2, [sp, #56]	@ 0x38
 802333a:	210a      	movs	r1, #10
 802333c:	9a06      	ldr	r2, [sp, #24]
 802333e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8023340:	3a30      	subs	r2, #48	@ 0x30
 8023342:	fb01 2200 	mla	r2, r1, r0, r2
 8023346:	920e      	str	r2, [sp, #56]	@ 0x38
 8023348:	f813 2b01 	ldrb.w	r2, [r3], #1
 802334c:	9206      	str	r2, [sp, #24]
 802334e:	3a30      	subs	r2, #48	@ 0x30
 8023350:	2a09      	cmp	r2, #9
 8023352:	d9f3      	bls.n	802333c <_vfprintf_r+0x304>
 8023354:	e715      	b.n	8023182 <_vfprintf_r+0x14a>
 8023356:	f045 0508 	orr.w	r5, r5, #8
 802335a:	e7b5      	b.n	80232c8 <_vfprintf_r+0x290>
 802335c:	f3af 8000 	nop.w
	...
 8023368:	08034058 	.word	0x08034058
 802336c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802336e:	781b      	ldrb	r3, [r3, #0]
 8023370:	2b68      	cmp	r3, #104	@ 0x68
 8023372:	bf01      	itttt	eq
 8023374:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8023376:	3301      	addeq	r3, #1
 8023378:	930c      	streq	r3, [sp, #48]	@ 0x30
 802337a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802337e:	bf18      	it	ne
 8023380:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8023384:	e7a0      	b.n	80232c8 <_vfprintf_r+0x290>
 8023386:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023388:	781b      	ldrb	r3, [r3, #0]
 802338a:	2b6c      	cmp	r3, #108	@ 0x6c
 802338c:	d105      	bne.n	802339a <_vfprintf_r+0x362>
 802338e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023390:	3301      	adds	r3, #1
 8023392:	930c      	str	r3, [sp, #48]	@ 0x30
 8023394:	f045 0520 	orr.w	r5, r5, #32
 8023398:	e796      	b.n	80232c8 <_vfprintf_r+0x290>
 802339a:	f045 0510 	orr.w	r5, r5, #16
 802339e:	e793      	b.n	80232c8 <_vfprintf_r+0x290>
 80233a0:	4632      	mov	r2, r6
 80233a2:	f852 3b04 	ldr.w	r3, [r2], #4
 80233a6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80233aa:	2300      	movs	r3, #0
 80233ac:	9207      	str	r2, [sp, #28]
 80233ae:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80233b2:	469a      	mov	sl, r3
 80233b4:	f04f 0901 	mov.w	r9, #1
 80233b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80233ba:	461f      	mov	r7, r3
 80233bc:	9308      	str	r3, [sp, #32]
 80233be:	461e      	mov	r6, r3
 80233c0:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 80233c4:	e1da      	b.n	802377c <_vfprintf_r+0x744>
 80233c6:	f045 0510 	orr.w	r5, r5, #16
 80233ca:	06af      	lsls	r7, r5, #26
 80233cc:	d512      	bpl.n	80233f4 <_vfprintf_r+0x3bc>
 80233ce:	3607      	adds	r6, #7
 80233d0:	f026 0307 	bic.w	r3, r6, #7
 80233d4:	461a      	mov	r2, r3
 80233d6:	685f      	ldr	r7, [r3, #4]
 80233d8:	f852 6b08 	ldr.w	r6, [r2], #8
 80233dc:	9207      	str	r2, [sp, #28]
 80233de:	2f00      	cmp	r7, #0
 80233e0:	da06      	bge.n	80233f0 <_vfprintf_r+0x3b8>
 80233e2:	4276      	negs	r6, r6
 80233e4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80233e8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80233ec:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80233f0:	2301      	movs	r3, #1
 80233f2:	e384      	b.n	8023afe <_vfprintf_r+0xac6>
 80233f4:	4633      	mov	r3, r6
 80233f6:	06ee      	lsls	r6, r5, #27
 80233f8:	f853 7b04 	ldr.w	r7, [r3], #4
 80233fc:	9307      	str	r3, [sp, #28]
 80233fe:	d502      	bpl.n	8023406 <_vfprintf_r+0x3ce>
 8023400:	463e      	mov	r6, r7
 8023402:	17ff      	asrs	r7, r7, #31
 8023404:	e7eb      	b.n	80233de <_vfprintf_r+0x3a6>
 8023406:	0668      	lsls	r0, r5, #25
 8023408:	d503      	bpl.n	8023412 <_vfprintf_r+0x3da>
 802340a:	b23e      	sxth	r6, r7
 802340c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8023410:	e7e5      	b.n	80233de <_vfprintf_r+0x3a6>
 8023412:	05a9      	lsls	r1, r5, #22
 8023414:	d5f4      	bpl.n	8023400 <_vfprintf_r+0x3c8>
 8023416:	b27e      	sxtb	r6, r7
 8023418:	f347 17c0 	sbfx	r7, r7, #7, #1
 802341c:	e7df      	b.n	80233de <_vfprintf_r+0x3a6>
 802341e:	3607      	adds	r6, #7
 8023420:	f026 0307 	bic.w	r3, r6, #7
 8023424:	ecb3 7b02 	vldmia	r3!, {d7}
 8023428:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802342c:	9307      	str	r3, [sp, #28]
 802342e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023430:	931a      	str	r3, [sp, #104]	@ 0x68
 8023432:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023434:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8023438:	931b      	str	r3, [sp, #108]	@ 0x6c
 802343a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802343e:	4b85      	ldr	r3, [pc, #532]	@ (8023654 <_vfprintf_r+0x61c>)
 8023440:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8023444:	f7dd fb8a 	bl	8000b5c <__aeabi_dcmpun>
 8023448:	bb10      	cbnz	r0, 8023490 <_vfprintf_r+0x458>
 802344a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802344e:	4b81      	ldr	r3, [pc, #516]	@ (8023654 <_vfprintf_r+0x61c>)
 8023450:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8023454:	f7dd fb64 	bl	8000b20 <__aeabi_dcmple>
 8023458:	b9d0      	cbnz	r0, 8023490 <_vfprintf_r+0x458>
 802345a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802345e:	2200      	movs	r2, #0
 8023460:	2300      	movs	r3, #0
 8023462:	f7dd fb53 	bl	8000b0c <__aeabi_dcmplt>
 8023466:	b110      	cbz	r0, 802346e <_vfprintf_r+0x436>
 8023468:	232d      	movs	r3, #45	@ 0x2d
 802346a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802346e:	4a7a      	ldr	r2, [pc, #488]	@ (8023658 <_vfprintf_r+0x620>)
 8023470:	4b7a      	ldr	r3, [pc, #488]	@ (802365c <_vfprintf_r+0x624>)
 8023472:	9906      	ldr	r1, [sp, #24]
 8023474:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8023478:	2947      	cmp	r1, #71	@ 0x47
 802347a:	bfd4      	ite	le
 802347c:	4690      	movle	r8, r2
 802347e:	4698      	movgt	r8, r3
 8023480:	f04f 0a00 	mov.w	sl, #0
 8023484:	f04f 0903 	mov.w	r9, #3
 8023488:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802348c:	f000 bff8 	b.w	8024480 <_vfprintf_r+0x1448>
 8023490:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8023494:	4610      	mov	r0, r2
 8023496:	4619      	mov	r1, r3
 8023498:	f7dd fb60 	bl	8000b5c <__aeabi_dcmpun>
 802349c:	4682      	mov	sl, r0
 802349e:	b140      	cbz	r0, 80234b2 <_vfprintf_r+0x47a>
 80234a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80234a2:	4a6f      	ldr	r2, [pc, #444]	@ (8023660 <_vfprintf_r+0x628>)
 80234a4:	2b00      	cmp	r3, #0
 80234a6:	bfbc      	itt	lt
 80234a8:	232d      	movlt	r3, #45	@ 0x2d
 80234aa:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80234ae:	4b6d      	ldr	r3, [pc, #436]	@ (8023664 <_vfprintf_r+0x62c>)
 80234b0:	e7df      	b.n	8023472 <_vfprintf_r+0x43a>
 80234b2:	9b06      	ldr	r3, [sp, #24]
 80234b4:	2b61      	cmp	r3, #97	@ 0x61
 80234b6:	d02e      	beq.n	8023516 <_vfprintf_r+0x4de>
 80234b8:	2b41      	cmp	r3, #65	@ 0x41
 80234ba:	d12e      	bne.n	802351a <_vfprintf_r+0x4e2>
 80234bc:	2358      	movs	r3, #88	@ 0x58
 80234be:	2230      	movs	r2, #48	@ 0x30
 80234c0:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 80234c4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 80234c8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80234cc:	f045 0502 	orr.w	r5, r5, #2
 80234d0:	f340 80ae 	ble.w	8023630 <_vfprintf_r+0x5f8>
 80234d4:	9803      	ldr	r0, [sp, #12]
 80234d6:	f109 0101 	add.w	r1, r9, #1
 80234da:	f004 fd0f 	bl	8027efc <_malloc_r>
 80234de:	4680      	mov	r8, r0
 80234e0:	2800      	cmp	r0, #0
 80234e2:	f040 80aa 	bne.w	802363a <_vfprintf_r+0x602>
 80234e6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80234ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80234ee:	f8ab 300c 	strh.w	r3, [fp, #12]
 80234f2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80234f6:	07d9      	lsls	r1, r3, #31
 80234f8:	d407      	bmi.n	802350a <_vfprintf_r+0x4d2>
 80234fa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80234fe:	059a      	lsls	r2, r3, #22
 8023500:	d403      	bmi.n	802350a <_vfprintf_r+0x4d2>
 8023502:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8023506:	f003 fcde 	bl	8026ec6 <__retarget_lock_release_recursive>
 802350a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802350e:	065b      	lsls	r3, r3, #25
 8023510:	f57f add6 	bpl.w	80230c0 <_vfprintf_r+0x88>
 8023514:	e5d1      	b.n	80230ba <_vfprintf_r+0x82>
 8023516:	2378      	movs	r3, #120	@ 0x78
 8023518:	e7d1      	b.n	80234be <_vfprintf_r+0x486>
 802351a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802351e:	f000 808e 	beq.w	802363e <_vfprintf_r+0x606>
 8023522:	9b06      	ldr	r3, [sp, #24]
 8023524:	f023 0320 	bic.w	r3, r3, #32
 8023528:	2b47      	cmp	r3, #71	@ 0x47
 802352a:	d105      	bne.n	8023538 <_vfprintf_r+0x500>
 802352c:	f1b9 0f00 	cmp.w	r9, #0
 8023530:	d102      	bne.n	8023538 <_vfprintf_r+0x500>
 8023532:	46ca      	mov	sl, r9
 8023534:	f04f 0901 	mov.w	r9, #1
 8023538:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802353c:	9311      	str	r3, [sp, #68]	@ 0x44
 802353e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023540:	2b00      	cmp	r3, #0
 8023542:	da7f      	bge.n	8023644 <_vfprintf_r+0x60c>
 8023544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023546:	9314      	str	r3, [sp, #80]	@ 0x50
 8023548:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802354a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802354e:	9315      	str	r3, [sp, #84]	@ 0x54
 8023550:	232d      	movs	r3, #45	@ 0x2d
 8023552:	931c      	str	r3, [sp, #112]	@ 0x70
 8023554:	9b06      	ldr	r3, [sp, #24]
 8023556:	f023 0320 	bic.w	r3, r3, #32
 802355a:	2b41      	cmp	r3, #65	@ 0x41
 802355c:	9308      	str	r3, [sp, #32]
 802355e:	f040 81e7 	bne.w	8023930 <_vfprintf_r+0x8f8>
 8023562:	a820      	add	r0, sp, #128	@ 0x80
 8023564:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8023568:	f003 fcd2 	bl	8026f10 <frexp>
 802356c:	2200      	movs	r2, #0
 802356e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8023572:	ec51 0b10 	vmov	r0, r1, d0
 8023576:	f7dd f857 	bl	8000628 <__aeabi_dmul>
 802357a:	4602      	mov	r2, r0
 802357c:	460b      	mov	r3, r1
 802357e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023582:	2200      	movs	r2, #0
 8023584:	2300      	movs	r3, #0
 8023586:	f7dd fab7 	bl	8000af8 <__aeabi_dcmpeq>
 802358a:	b108      	cbz	r0, 8023590 <_vfprintf_r+0x558>
 802358c:	2301      	movs	r3, #1
 802358e:	9320      	str	r3, [sp, #128]	@ 0x80
 8023590:	4a35      	ldr	r2, [pc, #212]	@ (8023668 <_vfprintf_r+0x630>)
 8023592:	4b36      	ldr	r3, [pc, #216]	@ (802366c <_vfprintf_r+0x634>)
 8023594:	9906      	ldr	r1, [sp, #24]
 8023596:	2961      	cmp	r1, #97	@ 0x61
 8023598:	bf18      	it	ne
 802359a:	461a      	movne	r2, r3
 802359c:	9210      	str	r2, [sp, #64]	@ 0x40
 802359e:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 80235a2:	4646      	mov	r6, r8
 80235a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80235a8:	4b31      	ldr	r3, [pc, #196]	@ (8023670 <_vfprintf_r+0x638>)
 80235aa:	2200      	movs	r2, #0
 80235ac:	f7dd f83c 	bl	8000628 <__aeabi_dmul>
 80235b0:	4602      	mov	r2, r0
 80235b2:	460b      	mov	r3, r1
 80235b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80235b8:	f7dd fae6 	bl	8000b88 <__aeabi_d2iz>
 80235bc:	9013      	str	r0, [sp, #76]	@ 0x4c
 80235be:	f7dc ffc9 	bl	8000554 <__aeabi_i2d>
 80235c2:	4602      	mov	r2, r0
 80235c4:	460b      	mov	r3, r1
 80235c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80235ca:	f7dc fe75 	bl	80002b8 <__aeabi_dsub>
 80235ce:	4602      	mov	r2, r0
 80235d0:	460b      	mov	r3, r1
 80235d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80235d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80235d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80235da:	5c9b      	ldrb	r3, [r3, r2]
 80235dc:	f806 3b01 	strb.w	r3, [r6], #1
 80235e0:	1c7a      	adds	r2, r7, #1
 80235e2:	d006      	beq.n	80235f2 <_vfprintf_r+0x5ba>
 80235e4:	1e7b      	subs	r3, r7, #1
 80235e6:	931d      	str	r3, [sp, #116]	@ 0x74
 80235e8:	2200      	movs	r2, #0
 80235ea:	2300      	movs	r3, #0
 80235ec:	f7dd fa84 	bl	8000af8 <__aeabi_dcmpeq>
 80235f0:	b370      	cbz	r0, 8023650 <_vfprintf_r+0x618>
 80235f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80235f6:	4b1f      	ldr	r3, [pc, #124]	@ (8023674 <_vfprintf_r+0x63c>)
 80235f8:	2200      	movs	r2, #0
 80235fa:	f7dd faa5 	bl	8000b48 <__aeabi_dcmpgt>
 80235fe:	2800      	cmp	r0, #0
 8023600:	d13a      	bne.n	8023678 <_vfprintf_r+0x640>
 8023602:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023606:	4b1b      	ldr	r3, [pc, #108]	@ (8023674 <_vfprintf_r+0x63c>)
 8023608:	2200      	movs	r2, #0
 802360a:	f7dd fa75 	bl	8000af8 <__aeabi_dcmpeq>
 802360e:	b110      	cbz	r0, 8023616 <_vfprintf_r+0x5de>
 8023610:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023612:	07db      	lsls	r3, r3, #31
 8023614:	d430      	bmi.n	8023678 <_vfprintf_r+0x640>
 8023616:	4633      	mov	r3, r6
 8023618:	19f1      	adds	r1, r6, r7
 802361a:	2030      	movs	r0, #48	@ 0x30
 802361c:	1aca      	subs	r2, r1, r3
 802361e:	2a00      	cmp	r2, #0
 8023620:	f280 8183 	bge.w	802392a <_vfprintf_r+0x8f2>
 8023624:	1c7b      	adds	r3, r7, #1
 8023626:	3701      	adds	r7, #1
 8023628:	bfb8      	it	lt
 802362a:	2300      	movlt	r3, #0
 802362c:	441e      	add	r6, r3
 802362e:	e037      	b.n	80236a0 <_vfprintf_r+0x668>
 8023630:	f04f 0a00 	mov.w	sl, #0
 8023634:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8023638:	e77e      	b.n	8023538 <_vfprintf_r+0x500>
 802363a:	4682      	mov	sl, r0
 802363c:	e77c      	b.n	8023538 <_vfprintf_r+0x500>
 802363e:	f04f 0906 	mov.w	r9, #6
 8023642:	e779      	b.n	8023538 <_vfprintf_r+0x500>
 8023644:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8023648:	2300      	movs	r3, #0
 802364a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802364e:	e780      	b.n	8023552 <_vfprintf_r+0x51a>
 8023650:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8023652:	e7a7      	b.n	80235a4 <_vfprintf_r+0x56c>
 8023654:	7fefffff 	.word	0x7fefffff
 8023658:	08034048 	.word	0x08034048
 802365c:	0803404c 	.word	0x0803404c
 8023660:	08034050 	.word	0x08034050
 8023664:	08034054 	.word	0x08034054
 8023668:	08034058 	.word	0x08034058
 802366c:	08034069 	.word	0x08034069
 8023670:	40300000 	.word	0x40300000
 8023674:	3fe00000 	.word	0x3fe00000
 8023678:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802367a:	9624      	str	r6, [sp, #144]	@ 0x90
 802367c:	7bd9      	ldrb	r1, [r3, #15]
 802367e:	2030      	movs	r0, #48	@ 0x30
 8023680:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023682:	1e53      	subs	r3, r2, #1
 8023684:	9324      	str	r3, [sp, #144]	@ 0x90
 8023686:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802368a:	428b      	cmp	r3, r1
 802368c:	f000 814a 	beq.w	8023924 <_vfprintf_r+0x8ec>
 8023690:	2b39      	cmp	r3, #57	@ 0x39
 8023692:	bf0b      	itete	eq
 8023694:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8023696:	3301      	addne	r3, #1
 8023698:	7a9b      	ldrbeq	r3, [r3, #10]
 802369a:	b2db      	uxtbne	r3, r3
 802369c:	f802 3c01 	strb.w	r3, [r2, #-1]
 80236a0:	eba6 0308 	sub.w	r3, r6, r8
 80236a4:	9304      	str	r3, [sp, #16]
 80236a6:	9b08      	ldr	r3, [sp, #32]
 80236a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80236aa:	2b47      	cmp	r3, #71	@ 0x47
 80236ac:	f040 8189 	bne.w	80239c2 <_vfprintf_r+0x98a>
 80236b0:	1cf1      	adds	r1, r6, #3
 80236b2:	db02      	blt.n	80236ba <_vfprintf_r+0x682>
 80236b4:	45b1      	cmp	r9, r6
 80236b6:	f280 81a7 	bge.w	8023a08 <_vfprintf_r+0x9d0>
 80236ba:	9b06      	ldr	r3, [sp, #24]
 80236bc:	3b02      	subs	r3, #2
 80236be:	9306      	str	r3, [sp, #24]
 80236c0:	9906      	ldr	r1, [sp, #24]
 80236c2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80236c6:	f021 0120 	bic.w	r1, r1, #32
 80236ca:	2941      	cmp	r1, #65	@ 0x41
 80236cc:	bf08      	it	eq
 80236ce:	320f      	addeq	r2, #15
 80236d0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 80236d4:	bf06      	itte	eq
 80236d6:	b2d2      	uxtbeq	r2, r2
 80236d8:	2101      	moveq	r1, #1
 80236da:	2100      	movne	r1, #0
 80236dc:	2b00      	cmp	r3, #0
 80236de:	9320      	str	r3, [sp, #128]	@ 0x80
 80236e0:	bfb8      	it	lt
 80236e2:	f1c6 0301 	rsblt	r3, r6, #1
 80236e6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 80236ea:	bfb4      	ite	lt
 80236ec:	222d      	movlt	r2, #45	@ 0x2d
 80236ee:	222b      	movge	r2, #43	@ 0x2b
 80236f0:	2b09      	cmp	r3, #9
 80236f2:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 80236f6:	f340 817a 	ble.w	80239ee <_vfprintf_r+0x9b6>
 80236fa:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80236fe:	270a      	movs	r7, #10
 8023700:	4602      	mov	r2, r0
 8023702:	fbb3 f6f7 	udiv	r6, r3, r7
 8023706:	fb07 3116 	mls	r1, r7, r6, r3
 802370a:	3130      	adds	r1, #48	@ 0x30
 802370c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8023710:	4619      	mov	r1, r3
 8023712:	2963      	cmp	r1, #99	@ 0x63
 8023714:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8023718:	4633      	mov	r3, r6
 802371a:	dcf1      	bgt.n	8023700 <_vfprintf_r+0x6c8>
 802371c:	3330      	adds	r3, #48	@ 0x30
 802371e:	1e91      	subs	r1, r2, #2
 8023720:	f800 3c01 	strb.w	r3, [r0, #-1]
 8023724:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8023728:	460b      	mov	r3, r1
 802372a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802372e:	4283      	cmp	r3, r0
 8023730:	f0c0 8158 	bcc.w	80239e4 <_vfprintf_r+0x9ac>
 8023734:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8023738:	1a9b      	subs	r3, r3, r2
 802373a:	4281      	cmp	r1, r0
 802373c:	bf88      	it	hi
 802373e:	2300      	movhi	r3, #0
 8023740:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8023744:	441a      	add	r2, r3
 8023746:	ab22      	add	r3, sp, #136	@ 0x88
 8023748:	1ad3      	subs	r3, r2, r3
 802374a:	9a04      	ldr	r2, [sp, #16]
 802374c:	9318      	str	r3, [sp, #96]	@ 0x60
 802374e:	2a01      	cmp	r2, #1
 8023750:	eb03 0902 	add.w	r9, r3, r2
 8023754:	dc01      	bgt.n	802375a <_vfprintf_r+0x722>
 8023756:	07ea      	lsls	r2, r5, #31
 8023758:	d501      	bpl.n	802375e <_vfprintf_r+0x726>
 802375a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802375c:	4499      	add	r9, r3
 802375e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8023762:	2700      	movs	r7, #0
 8023764:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8023768:	9311      	str	r3, [sp, #68]	@ 0x44
 802376a:	9708      	str	r7, [sp, #32]
 802376c:	463e      	mov	r6, r7
 802376e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023770:	2b00      	cmp	r3, #0
 8023772:	f040 8191 	bne.w	8023a98 <_vfprintf_r+0xa60>
 8023776:	2300      	movs	r3, #0
 8023778:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802377a:	9310      	str	r3, [sp, #64]	@ 0x40
 802377c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802377e:	454b      	cmp	r3, r9
 8023780:	bfb8      	it	lt
 8023782:	464b      	movlt	r3, r9
 8023784:	9311      	str	r3, [sp, #68]	@ 0x44
 8023786:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802378a:	b113      	cbz	r3, 8023792 <_vfprintf_r+0x75a>
 802378c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802378e:	3301      	adds	r3, #1
 8023790:	9311      	str	r3, [sp, #68]	@ 0x44
 8023792:	f015 0302 	ands.w	r3, r5, #2
 8023796:	931c      	str	r3, [sp, #112]	@ 0x70
 8023798:	bf1e      	ittt	ne
 802379a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802379c:	3302      	addne	r3, #2
 802379e:	9311      	strne	r3, [sp, #68]	@ 0x44
 80237a0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80237a4:	931d      	str	r3, [sp, #116]	@ 0x74
 80237a6:	d122      	bne.n	80237ee <_vfprintf_r+0x7b6>
 80237a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80237aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80237ac:	1a9b      	subs	r3, r3, r2
 80237ae:	2b00      	cmp	r3, #0
 80237b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80237b2:	dd1c      	ble.n	80237ee <_vfprintf_r+0x7b6>
 80237b4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80237b6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80237ba:	2810      	cmp	r0, #16
 80237bc:	489f      	ldr	r0, [pc, #636]	@ (8023a3c <_vfprintf_r+0xa04>)
 80237be:	6020      	str	r0, [r4, #0]
 80237c0:	f102 0201 	add.w	r2, r2, #1
 80237c4:	f104 0108 	add.w	r1, r4, #8
 80237c8:	f300 8297 	bgt.w	8023cfa <_vfprintf_r+0xcc2>
 80237cc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80237ce:	6060      	str	r0, [r4, #4]
 80237d0:	4403      	add	r3, r0
 80237d2:	2a07      	cmp	r2, #7
 80237d4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80237d8:	f340 82a4 	ble.w	8023d24 <_vfprintf_r+0xcec>
 80237dc:	9803      	ldr	r0, [sp, #12]
 80237de:	aa26      	add	r2, sp, #152	@ 0x98
 80237e0:	4659      	mov	r1, fp
 80237e2:	f000 fe95 	bl	8024510 <__sprint_r>
 80237e6:	2800      	cmp	r0, #0
 80237e8:	f040 85ed 	bne.w	80243c6 <_vfprintf_r+0x138e>
 80237ec:	ac29      	add	r4, sp, #164	@ 0xa4
 80237ee:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 80237f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80237f4:	b16a      	cbz	r2, 8023812 <_vfprintf_r+0x7da>
 80237f6:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 80237fa:	6022      	str	r2, [r4, #0]
 80237fc:	2201      	movs	r2, #1
 80237fe:	4413      	add	r3, r2
 8023800:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023802:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023804:	6062      	str	r2, [r4, #4]
 8023806:	4413      	add	r3, r2
 8023808:	2b07      	cmp	r3, #7
 802380a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802380c:	f300 828c 	bgt.w	8023d28 <_vfprintf_r+0xcf0>
 8023810:	3408      	adds	r4, #8
 8023812:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8023814:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023816:	b162      	cbz	r2, 8023832 <_vfprintf_r+0x7fa>
 8023818:	aa1f      	add	r2, sp, #124	@ 0x7c
 802381a:	6022      	str	r2, [r4, #0]
 802381c:	2202      	movs	r2, #2
 802381e:	4413      	add	r3, r2
 8023820:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023822:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023824:	6062      	str	r2, [r4, #4]
 8023826:	3301      	adds	r3, #1
 8023828:	2b07      	cmp	r3, #7
 802382a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802382c:	f300 8286 	bgt.w	8023d3c <_vfprintf_r+0xd04>
 8023830:	3408      	adds	r4, #8
 8023832:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023834:	2b80      	cmp	r3, #128	@ 0x80
 8023836:	d122      	bne.n	802387e <_vfprintf_r+0x846>
 8023838:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802383a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802383c:	1a9b      	subs	r3, r3, r2
 802383e:	2b00      	cmp	r3, #0
 8023840:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023842:	dd1c      	ble.n	802387e <_vfprintf_r+0x846>
 8023844:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8023846:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802384a:	2810      	cmp	r0, #16
 802384c:	487c      	ldr	r0, [pc, #496]	@ (8023a40 <_vfprintf_r+0xa08>)
 802384e:	6020      	str	r0, [r4, #0]
 8023850:	f102 0201 	add.w	r2, r2, #1
 8023854:	f104 0108 	add.w	r1, r4, #8
 8023858:	f300 827a 	bgt.w	8023d50 <_vfprintf_r+0xd18>
 802385c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802385e:	6060      	str	r0, [r4, #4]
 8023860:	4403      	add	r3, r0
 8023862:	2a07      	cmp	r2, #7
 8023864:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8023868:	f340 8287 	ble.w	8023d7a <_vfprintf_r+0xd42>
 802386c:	9803      	ldr	r0, [sp, #12]
 802386e:	aa26      	add	r2, sp, #152	@ 0x98
 8023870:	4659      	mov	r1, fp
 8023872:	f000 fe4d 	bl	8024510 <__sprint_r>
 8023876:	2800      	cmp	r0, #0
 8023878:	f040 85a5 	bne.w	80243c6 <_vfprintf_r+0x138e>
 802387c:	ac29      	add	r4, sp, #164	@ 0xa4
 802387e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023880:	eba3 0309 	sub.w	r3, r3, r9
 8023884:	2b00      	cmp	r3, #0
 8023886:	9310      	str	r3, [sp, #64]	@ 0x40
 8023888:	dd1c      	ble.n	80238c4 <_vfprintf_r+0x88c>
 802388a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802388c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8023890:	2810      	cmp	r0, #16
 8023892:	486b      	ldr	r0, [pc, #428]	@ (8023a40 <_vfprintf_r+0xa08>)
 8023894:	6020      	str	r0, [r4, #0]
 8023896:	f102 0201 	add.w	r2, r2, #1
 802389a:	f104 0108 	add.w	r1, r4, #8
 802389e:	f300 826e 	bgt.w	8023d7e <_vfprintf_r+0xd46>
 80238a2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80238a4:	6060      	str	r0, [r4, #4]
 80238a6:	4403      	add	r3, r0
 80238a8:	2a07      	cmp	r2, #7
 80238aa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80238ae:	f340 827b 	ble.w	8023da8 <_vfprintf_r+0xd70>
 80238b2:	9803      	ldr	r0, [sp, #12]
 80238b4:	aa26      	add	r2, sp, #152	@ 0x98
 80238b6:	4659      	mov	r1, fp
 80238b8:	f000 fe2a 	bl	8024510 <__sprint_r>
 80238bc:	2800      	cmp	r0, #0
 80238be:	f040 8582 	bne.w	80243c6 <_vfprintf_r+0x138e>
 80238c2:	ac29      	add	r4, sp, #164	@ 0xa4
 80238c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80238c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80238c8:	05e8      	lsls	r0, r5, #23
 80238ca:	f100 8273 	bmi.w	8023db4 <_vfprintf_r+0xd7c>
 80238ce:	444b      	add	r3, r9
 80238d0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80238d2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80238d4:	3301      	adds	r3, #1
 80238d6:	2b07      	cmp	r3, #7
 80238d8:	e9c4 8900 	strd	r8, r9, [r4]
 80238dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80238de:	f300 82af 	bgt.w	8023e40 <_vfprintf_r+0xe08>
 80238e2:	3408      	adds	r4, #8
 80238e4:	0768      	lsls	r0, r5, #29
 80238e6:	f100 8550 	bmi.w	802438a <_vfprintf_r+0x1352>
 80238ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80238ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80238f0:	428a      	cmp	r2, r1
 80238f2:	bfac      	ite	ge
 80238f4:	189b      	addge	r3, r3, r2
 80238f6:	185b      	addlt	r3, r3, r1
 80238f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80238fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80238fc:	b13b      	cbz	r3, 802390e <_vfprintf_r+0x8d6>
 80238fe:	9803      	ldr	r0, [sp, #12]
 8023900:	aa26      	add	r2, sp, #152	@ 0x98
 8023902:	4659      	mov	r1, fp
 8023904:	f000 fe04 	bl	8024510 <__sprint_r>
 8023908:	2800      	cmp	r0, #0
 802390a:	f040 855c 	bne.w	80243c6 <_vfprintf_r+0x138e>
 802390e:	2300      	movs	r3, #0
 8023910:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023912:	f1ba 0f00 	cmp.w	sl, #0
 8023916:	f040 8572 	bne.w	80243fe <_vfprintf_r+0x13c6>
 802391a:	9e07      	ldr	r6, [sp, #28]
 802391c:	ac29      	add	r4, sp, #164	@ 0xa4
 802391e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8023922:	e407      	b.n	8023134 <_vfprintf_r+0xfc>
 8023924:	f802 0c01 	strb.w	r0, [r2, #-1]
 8023928:	e6aa      	b.n	8023680 <_vfprintf_r+0x648>
 802392a:	f803 0b01 	strb.w	r0, [r3], #1
 802392e:	e675      	b.n	802361c <_vfprintf_r+0x5e4>
 8023930:	9b08      	ldr	r3, [sp, #32]
 8023932:	2b46      	cmp	r3, #70	@ 0x46
 8023934:	d005      	beq.n	8023942 <_vfprintf_r+0x90a>
 8023936:	2b45      	cmp	r3, #69	@ 0x45
 8023938:	d11a      	bne.n	8023970 <_vfprintf_r+0x938>
 802393a:	f109 0601 	add.w	r6, r9, #1
 802393e:	2102      	movs	r1, #2
 8023940:	e001      	b.n	8023946 <_vfprintf_r+0x90e>
 8023942:	464e      	mov	r6, r9
 8023944:	2103      	movs	r1, #3
 8023946:	ab24      	add	r3, sp, #144	@ 0x90
 8023948:	9301      	str	r3, [sp, #4]
 802394a:	ab21      	add	r3, sp, #132	@ 0x84
 802394c:	9300      	str	r3, [sp, #0]
 802394e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8023952:	ab20      	add	r3, sp, #128	@ 0x80
 8023954:	9803      	ldr	r0, [sp, #12]
 8023956:	4632      	mov	r2, r6
 8023958:	f003 fbb6 	bl	80270c8 <_dtoa_r>
 802395c:	9b08      	ldr	r3, [sp, #32]
 802395e:	2b47      	cmp	r3, #71	@ 0x47
 8023960:	4680      	mov	r8, r0
 8023962:	d119      	bne.n	8023998 <_vfprintf_r+0x960>
 8023964:	07e8      	lsls	r0, r5, #31
 8023966:	d405      	bmi.n	8023974 <_vfprintf_r+0x93c>
 8023968:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802396a:	eba3 0308 	sub.w	r3, r3, r8
 802396e:	e699      	b.n	80236a4 <_vfprintf_r+0x66c>
 8023970:	464e      	mov	r6, r9
 8023972:	e7e4      	b.n	802393e <_vfprintf_r+0x906>
 8023974:	eb08 0706 	add.w	r7, r8, r6
 8023978:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802397c:	2200      	movs	r2, #0
 802397e:	2300      	movs	r3, #0
 8023980:	f7dd f8ba 	bl	8000af8 <__aeabi_dcmpeq>
 8023984:	b100      	cbz	r0, 8023988 <_vfprintf_r+0x950>
 8023986:	9724      	str	r7, [sp, #144]	@ 0x90
 8023988:	2230      	movs	r2, #48	@ 0x30
 802398a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802398c:	429f      	cmp	r7, r3
 802398e:	d9eb      	bls.n	8023968 <_vfprintf_r+0x930>
 8023990:	1c59      	adds	r1, r3, #1
 8023992:	9124      	str	r1, [sp, #144]	@ 0x90
 8023994:	701a      	strb	r2, [r3, #0]
 8023996:	e7f8      	b.n	802398a <_vfprintf_r+0x952>
 8023998:	9b08      	ldr	r3, [sp, #32]
 802399a:	2b46      	cmp	r3, #70	@ 0x46
 802399c:	eb00 0706 	add.w	r7, r0, r6
 80239a0:	d1ea      	bne.n	8023978 <_vfprintf_r+0x940>
 80239a2:	7803      	ldrb	r3, [r0, #0]
 80239a4:	2b30      	cmp	r3, #48	@ 0x30
 80239a6:	d109      	bne.n	80239bc <_vfprintf_r+0x984>
 80239a8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80239ac:	2200      	movs	r2, #0
 80239ae:	2300      	movs	r3, #0
 80239b0:	f7dd f8a2 	bl	8000af8 <__aeabi_dcmpeq>
 80239b4:	b910      	cbnz	r0, 80239bc <_vfprintf_r+0x984>
 80239b6:	f1c6 0601 	rsb	r6, r6, #1
 80239ba:	9620      	str	r6, [sp, #128]	@ 0x80
 80239bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80239be:	441f      	add	r7, r3
 80239c0:	e7da      	b.n	8023978 <_vfprintf_r+0x940>
 80239c2:	9b08      	ldr	r3, [sp, #32]
 80239c4:	2b46      	cmp	r3, #70	@ 0x46
 80239c6:	f47f ae7b 	bne.w	80236c0 <_vfprintf_r+0x688>
 80239ca:	f005 0301 	and.w	r3, r5, #1
 80239ce:	2e00      	cmp	r6, #0
 80239d0:	ea43 0309 	orr.w	r3, r3, r9
 80239d4:	dd25      	ble.n	8023a22 <_vfprintf_r+0x9ea>
 80239d6:	b37b      	cbz	r3, 8023a38 <_vfprintf_r+0xa00>
 80239d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80239da:	18f3      	adds	r3, r6, r3
 80239dc:	4499      	add	r9, r3
 80239de:	2366      	movs	r3, #102	@ 0x66
 80239e0:	9306      	str	r3, [sp, #24]
 80239e2:	e033      	b.n	8023a4c <_vfprintf_r+0xa14>
 80239e4:	f813 7b01 	ldrb.w	r7, [r3], #1
 80239e8:	f806 7f01 	strb.w	r7, [r6, #1]!
 80239ec:	e69f      	b.n	802372e <_vfprintf_r+0x6f6>
 80239ee:	b941      	cbnz	r1, 8023a02 <_vfprintf_r+0x9ca>
 80239f0:	2230      	movs	r2, #48	@ 0x30
 80239f2:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 80239f6:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 80239fa:	3330      	adds	r3, #48	@ 0x30
 80239fc:	f802 3b01 	strb.w	r3, [r2], #1
 8023a00:	e6a1      	b.n	8023746 <_vfprintf_r+0x70e>
 8023a02:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8023a06:	e7f8      	b.n	80239fa <_vfprintf_r+0x9c2>
 8023a08:	9b04      	ldr	r3, [sp, #16]
 8023a0a:	42b3      	cmp	r3, r6
 8023a0c:	dd0d      	ble.n	8023a2a <_vfprintf_r+0x9f2>
 8023a0e:	9b04      	ldr	r3, [sp, #16]
 8023a10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023a12:	2e00      	cmp	r6, #0
 8023a14:	eb03 0902 	add.w	r9, r3, r2
 8023a18:	dc0c      	bgt.n	8023a34 <_vfprintf_r+0x9fc>
 8023a1a:	f1c6 0301 	rsb	r3, r6, #1
 8023a1e:	4499      	add	r9, r3
 8023a20:	e008      	b.n	8023a34 <_vfprintf_r+0x9fc>
 8023a22:	b17b      	cbz	r3, 8023a44 <_vfprintf_r+0xa0c>
 8023a24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023a26:	3301      	adds	r3, #1
 8023a28:	e7d8      	b.n	80239dc <_vfprintf_r+0x9a4>
 8023a2a:	07eb      	lsls	r3, r5, #31
 8023a2c:	d521      	bpl.n	8023a72 <_vfprintf_r+0xa3a>
 8023a2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023a30:	eb06 0903 	add.w	r9, r6, r3
 8023a34:	2367      	movs	r3, #103	@ 0x67
 8023a36:	e7d3      	b.n	80239e0 <_vfprintf_r+0x9a8>
 8023a38:	46b1      	mov	r9, r6
 8023a3a:	e7d0      	b.n	80239de <_vfprintf_r+0x9a6>
 8023a3c:	0803408c 	.word	0x0803408c
 8023a40:	0803407c 	.word	0x0803407c
 8023a44:	2366      	movs	r3, #102	@ 0x66
 8023a46:	9306      	str	r3, [sp, #24]
 8023a48:	f04f 0901 	mov.w	r9, #1
 8023a4c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8023a50:	9308      	str	r3, [sp, #32]
 8023a52:	d01f      	beq.n	8023a94 <_vfprintf_r+0xa5c>
 8023a54:	2700      	movs	r7, #0
 8023a56:	2e00      	cmp	r6, #0
 8023a58:	9708      	str	r7, [sp, #32]
 8023a5a:	f77f ae88 	ble.w	802376e <_vfprintf_r+0x736>
 8023a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a60:	781b      	ldrb	r3, [r3, #0]
 8023a62:	2bff      	cmp	r3, #255	@ 0xff
 8023a64:	d107      	bne.n	8023a76 <_vfprintf_r+0xa3e>
 8023a66:	9b08      	ldr	r3, [sp, #32]
 8023a68:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023a6a:	443b      	add	r3, r7
 8023a6c:	fb02 9903 	mla	r9, r2, r3, r9
 8023a70:	e67d      	b.n	802376e <_vfprintf_r+0x736>
 8023a72:	46b1      	mov	r9, r6
 8023a74:	e7de      	b.n	8023a34 <_vfprintf_r+0x9fc>
 8023a76:	42b3      	cmp	r3, r6
 8023a78:	daf5      	bge.n	8023a66 <_vfprintf_r+0xa2e>
 8023a7a:	1af6      	subs	r6, r6, r3
 8023a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a7e:	785b      	ldrb	r3, [r3, #1]
 8023a80:	b133      	cbz	r3, 8023a90 <_vfprintf_r+0xa58>
 8023a82:	9b08      	ldr	r3, [sp, #32]
 8023a84:	3301      	adds	r3, #1
 8023a86:	9308      	str	r3, [sp, #32]
 8023a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a8a:	3301      	adds	r3, #1
 8023a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8023a8e:	e7e6      	b.n	8023a5e <_vfprintf_r+0xa26>
 8023a90:	3701      	adds	r7, #1
 8023a92:	e7e4      	b.n	8023a5e <_vfprintf_r+0xa26>
 8023a94:	9f08      	ldr	r7, [sp, #32]
 8023a96:	e66a      	b.n	802376e <_vfprintf_r+0x736>
 8023a98:	232d      	movs	r3, #45	@ 0x2d
 8023a9a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8023a9e:	e66a      	b.n	8023776 <_vfprintf_r+0x73e>
 8023aa0:	06af      	lsls	r7, r5, #26
 8023aa2:	d507      	bpl.n	8023ab4 <_vfprintf_r+0xa7c>
 8023aa4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023aa6:	6833      	ldr	r3, [r6, #0]
 8023aa8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8023aaa:	17d2      	asrs	r2, r2, #31
 8023aac:	e9c3 1200 	strd	r1, r2, [r3]
 8023ab0:	3604      	adds	r6, #4
 8023ab2:	e734      	b.n	802391e <_vfprintf_r+0x8e6>
 8023ab4:	06e8      	lsls	r0, r5, #27
 8023ab6:	d503      	bpl.n	8023ac0 <_vfprintf_r+0xa88>
 8023ab8:	6833      	ldr	r3, [r6, #0]
 8023aba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023abc:	601a      	str	r2, [r3, #0]
 8023abe:	e7f7      	b.n	8023ab0 <_vfprintf_r+0xa78>
 8023ac0:	0669      	lsls	r1, r5, #25
 8023ac2:	d503      	bpl.n	8023acc <_vfprintf_r+0xa94>
 8023ac4:	6833      	ldr	r3, [r6, #0]
 8023ac6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023ac8:	801a      	strh	r2, [r3, #0]
 8023aca:	e7f1      	b.n	8023ab0 <_vfprintf_r+0xa78>
 8023acc:	05aa      	lsls	r2, r5, #22
 8023ace:	d5f3      	bpl.n	8023ab8 <_vfprintf_r+0xa80>
 8023ad0:	6833      	ldr	r3, [r6, #0]
 8023ad2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023ad4:	701a      	strb	r2, [r3, #0]
 8023ad6:	e7eb      	b.n	8023ab0 <_vfprintf_r+0xa78>
 8023ad8:	f045 0510 	orr.w	r5, r5, #16
 8023adc:	f015 0320 	ands.w	r3, r5, #32
 8023ae0:	d020      	beq.n	8023b24 <_vfprintf_r+0xaec>
 8023ae2:	3607      	adds	r6, #7
 8023ae4:	f026 0307 	bic.w	r3, r6, #7
 8023ae8:	461a      	mov	r2, r3
 8023aea:	685f      	ldr	r7, [r3, #4]
 8023aec:	f852 6b08 	ldr.w	r6, [r2], #8
 8023af0:	9207      	str	r2, [sp, #28]
 8023af2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8023af6:	2300      	movs	r3, #0
 8023af8:	2200      	movs	r2, #0
 8023afa:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8023afe:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8023b02:	f000 8491 	beq.w	8024428 <_vfprintf_r+0x13f0>
 8023b06:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8023b0a:	9208      	str	r2, [sp, #32]
 8023b0c:	ea56 0207 	orrs.w	r2, r6, r7
 8023b10:	f040 848f 	bne.w	8024432 <_vfprintf_r+0x13fa>
 8023b14:	f1b9 0f00 	cmp.w	r9, #0
 8023b18:	f000 80db 	beq.w	8023cd2 <_vfprintf_r+0xc9a>
 8023b1c:	2b01      	cmp	r3, #1
 8023b1e:	f040 848b 	bne.w	8024438 <_vfprintf_r+0x1400>
 8023b22:	e083      	b.n	8023c2c <_vfprintf_r+0xbf4>
 8023b24:	4632      	mov	r2, r6
 8023b26:	f015 0710 	ands.w	r7, r5, #16
 8023b2a:	f852 6b04 	ldr.w	r6, [r2], #4
 8023b2e:	9207      	str	r2, [sp, #28]
 8023b30:	d001      	beq.n	8023b36 <_vfprintf_r+0xafe>
 8023b32:	461f      	mov	r7, r3
 8023b34:	e7dd      	b.n	8023af2 <_vfprintf_r+0xaba>
 8023b36:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8023b3a:	d001      	beq.n	8023b40 <_vfprintf_r+0xb08>
 8023b3c:	b2b6      	uxth	r6, r6
 8023b3e:	e7d8      	b.n	8023af2 <_vfprintf_r+0xaba>
 8023b40:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8023b44:	d0d5      	beq.n	8023af2 <_vfprintf_r+0xaba>
 8023b46:	b2f6      	uxtb	r6, r6
 8023b48:	e7f3      	b.n	8023b32 <_vfprintf_r+0xafa>
 8023b4a:	4633      	mov	r3, r6
 8023b4c:	2278      	movs	r2, #120	@ 0x78
 8023b4e:	f853 6b04 	ldr.w	r6, [r3], #4
 8023b52:	9307      	str	r3, [sp, #28]
 8023b54:	f647 0330 	movw	r3, #30768	@ 0x7830
 8023b58:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8023b5c:	4b93      	ldr	r3, [pc, #588]	@ (8023dac <_vfprintf_r+0xd74>)
 8023b5e:	9319      	str	r3, [sp, #100]	@ 0x64
 8023b60:	2700      	movs	r7, #0
 8023b62:	f045 0502 	orr.w	r5, r5, #2
 8023b66:	2302      	movs	r3, #2
 8023b68:	9206      	str	r2, [sp, #24]
 8023b6a:	e7c5      	b.n	8023af8 <_vfprintf_r+0xac0>
 8023b6c:	4633      	mov	r3, r6
 8023b6e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8023b72:	f853 8b04 	ldr.w	r8, [r3], #4
 8023b76:	9307      	str	r3, [sp, #28]
 8023b78:	f04f 0600 	mov.w	r6, #0
 8023b7c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8023b80:	d00f      	beq.n	8023ba2 <_vfprintf_r+0xb6a>
 8023b82:	464a      	mov	r2, r9
 8023b84:	4631      	mov	r1, r6
 8023b86:	4640      	mov	r0, r8
 8023b88:	f7dc fb3a 	bl	8000200 <memchr>
 8023b8c:	4682      	mov	sl, r0
 8023b8e:	2800      	cmp	r0, #0
 8023b90:	f43f ac7a 	beq.w	8023488 <_vfprintf_r+0x450>
 8023b94:	eba0 0908 	sub.w	r9, r0, r8
 8023b98:	46b2      	mov	sl, r6
 8023b9a:	9610      	str	r6, [sp, #64]	@ 0x40
 8023b9c:	4637      	mov	r7, r6
 8023b9e:	9608      	str	r6, [sp, #32]
 8023ba0:	e5ec      	b.n	802377c <_vfprintf_r+0x744>
 8023ba2:	4640      	mov	r0, r8
 8023ba4:	f7dc fb7c 	bl	80002a0 <strlen>
 8023ba8:	46b2      	mov	sl, r6
 8023baa:	4681      	mov	r9, r0
 8023bac:	e46c      	b.n	8023488 <_vfprintf_r+0x450>
 8023bae:	f045 0510 	orr.w	r5, r5, #16
 8023bb2:	f015 0320 	ands.w	r3, r5, #32
 8023bb6:	d009      	beq.n	8023bcc <_vfprintf_r+0xb94>
 8023bb8:	3607      	adds	r6, #7
 8023bba:	f026 0307 	bic.w	r3, r6, #7
 8023bbe:	461a      	mov	r2, r3
 8023bc0:	685f      	ldr	r7, [r3, #4]
 8023bc2:	f852 6b08 	ldr.w	r6, [r2], #8
 8023bc6:	9207      	str	r2, [sp, #28]
 8023bc8:	2301      	movs	r3, #1
 8023bca:	e795      	b.n	8023af8 <_vfprintf_r+0xac0>
 8023bcc:	4632      	mov	r2, r6
 8023bce:	f015 0710 	ands.w	r7, r5, #16
 8023bd2:	f852 6b04 	ldr.w	r6, [r2], #4
 8023bd6:	9207      	str	r2, [sp, #28]
 8023bd8:	d001      	beq.n	8023bde <_vfprintf_r+0xba6>
 8023bda:	461f      	mov	r7, r3
 8023bdc:	e7f4      	b.n	8023bc8 <_vfprintf_r+0xb90>
 8023bde:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8023be2:	d001      	beq.n	8023be8 <_vfprintf_r+0xbb0>
 8023be4:	b2b6      	uxth	r6, r6
 8023be6:	e7ef      	b.n	8023bc8 <_vfprintf_r+0xb90>
 8023be8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8023bec:	d0ec      	beq.n	8023bc8 <_vfprintf_r+0xb90>
 8023bee:	b2f6      	uxtb	r6, r6
 8023bf0:	e7f3      	b.n	8023bda <_vfprintf_r+0xba2>
 8023bf2:	4b6f      	ldr	r3, [pc, #444]	@ (8023db0 <_vfprintf_r+0xd78>)
 8023bf4:	f7ff bb33 	b.w	802325e <_vfprintf_r+0x226>
 8023bf8:	4632      	mov	r2, r6
 8023bfa:	f015 0710 	ands.w	r7, r5, #16
 8023bfe:	f852 6b04 	ldr.w	r6, [r2], #4
 8023c02:	9207      	str	r2, [sp, #28]
 8023c04:	d002      	beq.n	8023c0c <_vfprintf_r+0xbd4>
 8023c06:	461f      	mov	r7, r3
 8023c08:	f7ff bb36 	b.w	8023278 <_vfprintf_r+0x240>
 8023c0c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8023c10:	d002      	beq.n	8023c18 <_vfprintf_r+0xbe0>
 8023c12:	b2b6      	uxth	r6, r6
 8023c14:	f7ff bb30 	b.w	8023278 <_vfprintf_r+0x240>
 8023c18:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8023c1c:	f43f ab2c 	beq.w	8023278 <_vfprintf_r+0x240>
 8023c20:	b2f6      	uxtb	r6, r6
 8023c22:	e7f0      	b.n	8023c06 <_vfprintf_r+0xbce>
 8023c24:	2e0a      	cmp	r6, #10
 8023c26:	f177 0300 	sbcs.w	r3, r7, #0
 8023c2a:	d207      	bcs.n	8023c3c <_vfprintf_r+0xc04>
 8023c2c:	3630      	adds	r6, #48	@ 0x30
 8023c2e:	b2f6      	uxtb	r6, r6
 8023c30:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8023c34:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 8023c38:	f000 bc1a 	b.w	8024470 <_vfprintf_r+0x1438>
 8023c3c:	2300      	movs	r3, #0
 8023c3e:	9304      	str	r3, [sp, #16]
 8023c40:	9b08      	ldr	r3, [sp, #32]
 8023c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8023c46:	ad52      	add	r5, sp, #328	@ 0x148
 8023c48:	9310      	str	r3, [sp, #64]	@ 0x40
 8023c4a:	220a      	movs	r2, #10
 8023c4c:	2300      	movs	r3, #0
 8023c4e:	4630      	mov	r0, r6
 8023c50:	4639      	mov	r1, r7
 8023c52:	f7dd f881 	bl	8000d58 <__aeabi_uldivmod>
 8023c56:	9b04      	ldr	r3, [sp, #16]
 8023c58:	9011      	str	r0, [sp, #68]	@ 0x44
 8023c5a:	3301      	adds	r3, #1
 8023c5c:	9304      	str	r3, [sp, #16]
 8023c5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023c60:	3230      	adds	r2, #48	@ 0x30
 8023c62:	468a      	mov	sl, r1
 8023c64:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 8023c68:	f805 2c01 	strb.w	r2, [r5, #-1]
 8023c6c:	b1d3      	cbz	r3, 8023ca4 <_vfprintf_r+0xc6c>
 8023c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023c70:	9a04      	ldr	r2, [sp, #16]
 8023c72:	781b      	ldrb	r3, [r3, #0]
 8023c74:	429a      	cmp	r2, r3
 8023c76:	d115      	bne.n	8023ca4 <_vfprintf_r+0xc6c>
 8023c78:	2aff      	cmp	r2, #255	@ 0xff
 8023c7a:	d013      	beq.n	8023ca4 <_vfprintf_r+0xc6c>
 8023c7c:	2e0a      	cmp	r6, #10
 8023c7e:	f177 0300 	sbcs.w	r3, r7, #0
 8023c82:	d30f      	bcc.n	8023ca4 <_vfprintf_r+0xc6c>
 8023c84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023c86:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023c88:	eba8 0803 	sub.w	r8, r8, r3
 8023c8c:	461a      	mov	r2, r3
 8023c8e:	4640      	mov	r0, r8
 8023c90:	f001 ff25 	bl	8025ade <strncpy>
 8023c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023c96:	785b      	ldrb	r3, [r3, #1]
 8023c98:	b11b      	cbz	r3, 8023ca2 <_vfprintf_r+0xc6a>
 8023c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023c9c:	3301      	adds	r3, #1
 8023c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023ca0:	2300      	movs	r3, #0
 8023ca2:	9304      	str	r3, [sp, #16]
 8023ca4:	2e0a      	cmp	r6, #10
 8023ca6:	f177 0700 	sbcs.w	r7, r7, #0
 8023caa:	f0c0 83e1 	bcc.w	8024470 <_vfprintf_r+0x1438>
 8023cae:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8023cb0:	4657      	mov	r7, sl
 8023cb2:	4645      	mov	r5, r8
 8023cb4:	e7c9      	b.n	8023c4a <_vfprintf_r+0xc12>
 8023cb6:	f006 030f 	and.w	r3, r6, #15
 8023cba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023cbc:	0936      	lsrs	r6, r6, #4
 8023cbe:	5cd3      	ldrb	r3, [r2, r3]
 8023cc0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8023cc4:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8023cc8:	093f      	lsrs	r7, r7, #4
 8023cca:	ea56 0307 	orrs.w	r3, r6, r7
 8023cce:	d1f2      	bne.n	8023cb6 <_vfprintf_r+0xc7e>
 8023cd0:	e3ce      	b.n	8024470 <_vfprintf_r+0x1438>
 8023cd2:	b91b      	cbnz	r3, 8023cdc <_vfprintf_r+0xca4>
 8023cd4:	07ed      	lsls	r5, r5, #31
 8023cd6:	d501      	bpl.n	8023cdc <_vfprintf_r+0xca4>
 8023cd8:	2630      	movs	r6, #48	@ 0x30
 8023cda:	e7a9      	b.n	8023c30 <_vfprintf_r+0xbf8>
 8023cdc:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8023ce0:	e3c6      	b.n	8024470 <_vfprintf_r+0x1438>
 8023ce2:	9b06      	ldr	r3, [sp, #24]
 8023ce4:	2b00      	cmp	r3, #0
 8023ce6:	f000 8390 	beq.w	802440a <_vfprintf_r+0x13d2>
 8023cea:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8023cee:	2300      	movs	r3, #0
 8023cf0:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8023cf4:	9607      	str	r6, [sp, #28]
 8023cf6:	f7ff bb5c 	b.w	80233b2 <_vfprintf_r+0x37a>
 8023cfa:	2010      	movs	r0, #16
 8023cfc:	4403      	add	r3, r0
 8023cfe:	2a07      	cmp	r2, #7
 8023d00:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8023d04:	6060      	str	r0, [r4, #4]
 8023d06:	dd08      	ble.n	8023d1a <_vfprintf_r+0xce2>
 8023d08:	9803      	ldr	r0, [sp, #12]
 8023d0a:	aa26      	add	r2, sp, #152	@ 0x98
 8023d0c:	4659      	mov	r1, fp
 8023d0e:	f000 fbff 	bl	8024510 <__sprint_r>
 8023d12:	2800      	cmp	r0, #0
 8023d14:	f040 8357 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8023d18:	a929      	add	r1, sp, #164	@ 0xa4
 8023d1a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023d1c:	3b10      	subs	r3, #16
 8023d1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023d20:	460c      	mov	r4, r1
 8023d22:	e547      	b.n	80237b4 <_vfprintf_r+0x77c>
 8023d24:	460c      	mov	r4, r1
 8023d26:	e562      	b.n	80237ee <_vfprintf_r+0x7b6>
 8023d28:	9803      	ldr	r0, [sp, #12]
 8023d2a:	aa26      	add	r2, sp, #152	@ 0x98
 8023d2c:	4659      	mov	r1, fp
 8023d2e:	f000 fbef 	bl	8024510 <__sprint_r>
 8023d32:	2800      	cmp	r0, #0
 8023d34:	f040 8347 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8023d38:	ac29      	add	r4, sp, #164	@ 0xa4
 8023d3a:	e56a      	b.n	8023812 <_vfprintf_r+0x7da>
 8023d3c:	9803      	ldr	r0, [sp, #12]
 8023d3e:	aa26      	add	r2, sp, #152	@ 0x98
 8023d40:	4659      	mov	r1, fp
 8023d42:	f000 fbe5 	bl	8024510 <__sprint_r>
 8023d46:	2800      	cmp	r0, #0
 8023d48:	f040 833d 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8023d4c:	ac29      	add	r4, sp, #164	@ 0xa4
 8023d4e:	e570      	b.n	8023832 <_vfprintf_r+0x7fa>
 8023d50:	2010      	movs	r0, #16
 8023d52:	4403      	add	r3, r0
 8023d54:	2a07      	cmp	r2, #7
 8023d56:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8023d5a:	6060      	str	r0, [r4, #4]
 8023d5c:	dd08      	ble.n	8023d70 <_vfprintf_r+0xd38>
 8023d5e:	9803      	ldr	r0, [sp, #12]
 8023d60:	aa26      	add	r2, sp, #152	@ 0x98
 8023d62:	4659      	mov	r1, fp
 8023d64:	f000 fbd4 	bl	8024510 <__sprint_r>
 8023d68:	2800      	cmp	r0, #0
 8023d6a:	f040 832c 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8023d6e:	a929      	add	r1, sp, #164	@ 0xa4
 8023d70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023d72:	3b10      	subs	r3, #16
 8023d74:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023d76:	460c      	mov	r4, r1
 8023d78:	e564      	b.n	8023844 <_vfprintf_r+0x80c>
 8023d7a:	460c      	mov	r4, r1
 8023d7c:	e57f      	b.n	802387e <_vfprintf_r+0x846>
 8023d7e:	2010      	movs	r0, #16
 8023d80:	4403      	add	r3, r0
 8023d82:	2a07      	cmp	r2, #7
 8023d84:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8023d88:	6060      	str	r0, [r4, #4]
 8023d8a:	dd08      	ble.n	8023d9e <_vfprintf_r+0xd66>
 8023d8c:	9803      	ldr	r0, [sp, #12]
 8023d8e:	aa26      	add	r2, sp, #152	@ 0x98
 8023d90:	4659      	mov	r1, fp
 8023d92:	f000 fbbd 	bl	8024510 <__sprint_r>
 8023d96:	2800      	cmp	r0, #0
 8023d98:	f040 8315 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8023d9c:	a929      	add	r1, sp, #164	@ 0xa4
 8023d9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023da0:	3b10      	subs	r3, #16
 8023da2:	9310      	str	r3, [sp, #64]	@ 0x40
 8023da4:	460c      	mov	r4, r1
 8023da6:	e570      	b.n	802388a <_vfprintf_r+0x852>
 8023da8:	460c      	mov	r4, r1
 8023daa:	e58b      	b.n	80238c4 <_vfprintf_r+0x88c>
 8023dac:	08034058 	.word	0x08034058
 8023db0:	08034069 	.word	0x08034069
 8023db4:	9b06      	ldr	r3, [sp, #24]
 8023db6:	2b65      	cmp	r3, #101	@ 0x65
 8023db8:	f340 8245 	ble.w	8024246 <_vfprintf_r+0x120e>
 8023dbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8023dc0:	2200      	movs	r2, #0
 8023dc2:	2300      	movs	r3, #0
 8023dc4:	f7dc fe98 	bl	8000af8 <__aeabi_dcmpeq>
 8023dc8:	2800      	cmp	r0, #0
 8023dca:	d06a      	beq.n	8023ea2 <_vfprintf_r+0xe6a>
 8023dcc:	4b73      	ldr	r3, [pc, #460]	@ (8023f9c <_vfprintf_r+0xf64>)
 8023dce:	6023      	str	r3, [r4, #0]
 8023dd0:	2301      	movs	r3, #1
 8023dd2:	6063      	str	r3, [r4, #4]
 8023dd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023dd6:	3301      	adds	r3, #1
 8023dd8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023dda:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023ddc:	3301      	adds	r3, #1
 8023dde:	2b07      	cmp	r3, #7
 8023de0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023de2:	dc37      	bgt.n	8023e54 <_vfprintf_r+0xe1c>
 8023de4:	3408      	adds	r4, #8
 8023de6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023de8:	9a04      	ldr	r2, [sp, #16]
 8023dea:	4293      	cmp	r3, r2
 8023dec:	db02      	blt.n	8023df4 <_vfprintf_r+0xdbc>
 8023dee:	07e9      	lsls	r1, r5, #31
 8023df0:	f57f ad78 	bpl.w	80238e4 <_vfprintf_r+0x8ac>
 8023df4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023df6:	6023      	str	r3, [r4, #0]
 8023df8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023dfa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023dfc:	6063      	str	r3, [r4, #4]
 8023dfe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023e00:	4413      	add	r3, r2
 8023e02:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023e04:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023e06:	3301      	adds	r3, #1
 8023e08:	2b07      	cmp	r3, #7
 8023e0a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023e0c:	dc2c      	bgt.n	8023e68 <_vfprintf_r+0xe30>
 8023e0e:	3408      	adds	r4, #8
 8023e10:	9b04      	ldr	r3, [sp, #16]
 8023e12:	1e5e      	subs	r6, r3, #1
 8023e14:	2e00      	cmp	r6, #0
 8023e16:	f77f ad65 	ble.w	80238e4 <_vfprintf_r+0x8ac>
 8023e1a:	4f61      	ldr	r7, [pc, #388]	@ (8023fa0 <_vfprintf_r+0xf68>)
 8023e1c:	f04f 0810 	mov.w	r8, #16
 8023e20:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8023e24:	2e10      	cmp	r6, #16
 8023e26:	f103 0301 	add.w	r3, r3, #1
 8023e2a:	f104 0108 	add.w	r1, r4, #8
 8023e2e:	6027      	str	r7, [r4, #0]
 8023e30:	dc24      	bgt.n	8023e7c <_vfprintf_r+0xe44>
 8023e32:	6066      	str	r6, [r4, #4]
 8023e34:	2b07      	cmp	r3, #7
 8023e36:	4416      	add	r6, r2
 8023e38:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8023e3c:	f340 82a2 	ble.w	8024384 <_vfprintf_r+0x134c>
 8023e40:	9803      	ldr	r0, [sp, #12]
 8023e42:	aa26      	add	r2, sp, #152	@ 0x98
 8023e44:	4659      	mov	r1, fp
 8023e46:	f000 fb63 	bl	8024510 <__sprint_r>
 8023e4a:	2800      	cmp	r0, #0
 8023e4c:	f040 82bb 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8023e50:	ac29      	add	r4, sp, #164	@ 0xa4
 8023e52:	e547      	b.n	80238e4 <_vfprintf_r+0x8ac>
 8023e54:	9803      	ldr	r0, [sp, #12]
 8023e56:	aa26      	add	r2, sp, #152	@ 0x98
 8023e58:	4659      	mov	r1, fp
 8023e5a:	f000 fb59 	bl	8024510 <__sprint_r>
 8023e5e:	2800      	cmp	r0, #0
 8023e60:	f040 82b1 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8023e64:	ac29      	add	r4, sp, #164	@ 0xa4
 8023e66:	e7be      	b.n	8023de6 <_vfprintf_r+0xdae>
 8023e68:	9803      	ldr	r0, [sp, #12]
 8023e6a:	aa26      	add	r2, sp, #152	@ 0x98
 8023e6c:	4659      	mov	r1, fp
 8023e6e:	f000 fb4f 	bl	8024510 <__sprint_r>
 8023e72:	2800      	cmp	r0, #0
 8023e74:	f040 82a7 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8023e78:	ac29      	add	r4, sp, #164	@ 0xa4
 8023e7a:	e7c9      	b.n	8023e10 <_vfprintf_r+0xdd8>
 8023e7c:	3210      	adds	r2, #16
 8023e7e:	2b07      	cmp	r3, #7
 8023e80:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8023e84:	f8c4 8004 	str.w	r8, [r4, #4]
 8023e88:	dd08      	ble.n	8023e9c <_vfprintf_r+0xe64>
 8023e8a:	9803      	ldr	r0, [sp, #12]
 8023e8c:	aa26      	add	r2, sp, #152	@ 0x98
 8023e8e:	4659      	mov	r1, fp
 8023e90:	f000 fb3e 	bl	8024510 <__sprint_r>
 8023e94:	2800      	cmp	r0, #0
 8023e96:	f040 8296 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8023e9a:	a929      	add	r1, sp, #164	@ 0xa4
 8023e9c:	3e10      	subs	r6, #16
 8023e9e:	460c      	mov	r4, r1
 8023ea0:	e7be      	b.n	8023e20 <_vfprintf_r+0xde8>
 8023ea2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023ea4:	2b00      	cmp	r3, #0
 8023ea6:	dc7d      	bgt.n	8023fa4 <_vfprintf_r+0xf6c>
 8023ea8:	4b3c      	ldr	r3, [pc, #240]	@ (8023f9c <_vfprintf_r+0xf64>)
 8023eaa:	6023      	str	r3, [r4, #0]
 8023eac:	2301      	movs	r3, #1
 8023eae:	6063      	str	r3, [r4, #4]
 8023eb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023eb2:	3301      	adds	r3, #1
 8023eb4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023eb6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023eb8:	3301      	adds	r3, #1
 8023eba:	2b07      	cmp	r3, #7
 8023ebc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023ebe:	dc46      	bgt.n	8023f4e <_vfprintf_r+0xf16>
 8023ec0:	3408      	adds	r4, #8
 8023ec2:	9904      	ldr	r1, [sp, #16]
 8023ec4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023ec6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8023ec8:	430b      	orrs	r3, r1
 8023eca:	f005 0101 	and.w	r1, r5, #1
 8023ece:	430b      	orrs	r3, r1
 8023ed0:	f43f ad08 	beq.w	80238e4 <_vfprintf_r+0x8ac>
 8023ed4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023ed6:	6023      	str	r3, [r4, #0]
 8023ed8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023eda:	6063      	str	r3, [r4, #4]
 8023edc:	441a      	add	r2, r3
 8023ede:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023ee0:	9228      	str	r2, [sp, #160]	@ 0xa0
 8023ee2:	3301      	adds	r3, #1
 8023ee4:	2b07      	cmp	r3, #7
 8023ee6:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023ee8:	dc3b      	bgt.n	8023f62 <_vfprintf_r+0xf2a>
 8023eea:	f104 0308 	add.w	r3, r4, #8
 8023eee:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023ef0:	2e00      	cmp	r6, #0
 8023ef2:	da1b      	bge.n	8023f2c <_vfprintf_r+0xef4>
 8023ef4:	4f2a      	ldr	r7, [pc, #168]	@ (8023fa0 <_vfprintf_r+0xf68>)
 8023ef6:	4276      	negs	r6, r6
 8023ef8:	461a      	mov	r2, r3
 8023efa:	2410      	movs	r4, #16
 8023efc:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8023f00:	2e10      	cmp	r6, #16
 8023f02:	f101 0101 	add.w	r1, r1, #1
 8023f06:	f103 0308 	add.w	r3, r3, #8
 8023f0a:	6017      	str	r7, [r2, #0]
 8023f0c:	dc33      	bgt.n	8023f76 <_vfprintf_r+0xf3e>
 8023f0e:	6056      	str	r6, [r2, #4]
 8023f10:	2907      	cmp	r1, #7
 8023f12:	4406      	add	r6, r0
 8023f14:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8023f18:	dd08      	ble.n	8023f2c <_vfprintf_r+0xef4>
 8023f1a:	9803      	ldr	r0, [sp, #12]
 8023f1c:	aa26      	add	r2, sp, #152	@ 0x98
 8023f1e:	4659      	mov	r1, fp
 8023f20:	f000 faf6 	bl	8024510 <__sprint_r>
 8023f24:	2800      	cmp	r0, #0
 8023f26:	f040 824e 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8023f2a:	ab29      	add	r3, sp, #164	@ 0xa4
 8023f2c:	9a04      	ldr	r2, [sp, #16]
 8023f2e:	9904      	ldr	r1, [sp, #16]
 8023f30:	605a      	str	r2, [r3, #4]
 8023f32:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8023f34:	f8c3 8000 	str.w	r8, [r3]
 8023f38:	440a      	add	r2, r1
 8023f3a:	9228      	str	r2, [sp, #160]	@ 0xa0
 8023f3c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8023f3e:	3201      	adds	r2, #1
 8023f40:	2a07      	cmp	r2, #7
 8023f42:	9227      	str	r2, [sp, #156]	@ 0x9c
 8023f44:	f73f af7c 	bgt.w	8023e40 <_vfprintf_r+0xe08>
 8023f48:	f103 0408 	add.w	r4, r3, #8
 8023f4c:	e4ca      	b.n	80238e4 <_vfprintf_r+0x8ac>
 8023f4e:	9803      	ldr	r0, [sp, #12]
 8023f50:	aa26      	add	r2, sp, #152	@ 0x98
 8023f52:	4659      	mov	r1, fp
 8023f54:	f000 fadc 	bl	8024510 <__sprint_r>
 8023f58:	2800      	cmp	r0, #0
 8023f5a:	f040 8234 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8023f5e:	ac29      	add	r4, sp, #164	@ 0xa4
 8023f60:	e7af      	b.n	8023ec2 <_vfprintf_r+0xe8a>
 8023f62:	9803      	ldr	r0, [sp, #12]
 8023f64:	aa26      	add	r2, sp, #152	@ 0x98
 8023f66:	4659      	mov	r1, fp
 8023f68:	f000 fad2 	bl	8024510 <__sprint_r>
 8023f6c:	2800      	cmp	r0, #0
 8023f6e:	f040 822a 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8023f72:	ab29      	add	r3, sp, #164	@ 0xa4
 8023f74:	e7bb      	b.n	8023eee <_vfprintf_r+0xeb6>
 8023f76:	3010      	adds	r0, #16
 8023f78:	2907      	cmp	r1, #7
 8023f7a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8023f7e:	6054      	str	r4, [r2, #4]
 8023f80:	dd08      	ble.n	8023f94 <_vfprintf_r+0xf5c>
 8023f82:	9803      	ldr	r0, [sp, #12]
 8023f84:	aa26      	add	r2, sp, #152	@ 0x98
 8023f86:	4659      	mov	r1, fp
 8023f88:	f000 fac2 	bl	8024510 <__sprint_r>
 8023f8c:	2800      	cmp	r0, #0
 8023f8e:	f040 821a 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8023f92:	ab29      	add	r3, sp, #164	@ 0xa4
 8023f94:	3e10      	subs	r6, #16
 8023f96:	461a      	mov	r2, r3
 8023f98:	e7b0      	b.n	8023efc <_vfprintf_r+0xec4>
 8023f9a:	bf00      	nop
 8023f9c:	0803407a 	.word	0x0803407a
 8023fa0:	0803407c 	.word	0x0803407c
 8023fa4:	9b04      	ldr	r3, [sp, #16]
 8023fa6:	4443      	add	r3, r8
 8023fa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023faa:	9b04      	ldr	r3, [sp, #16]
 8023fac:	42b3      	cmp	r3, r6
 8023fae:	bfa8      	it	ge
 8023fb0:	4633      	movge	r3, r6
 8023fb2:	2b00      	cmp	r3, #0
 8023fb4:	4699      	mov	r9, r3
 8023fb6:	dd0b      	ble.n	8023fd0 <_vfprintf_r+0xf98>
 8023fb8:	e9c4 8300 	strd	r8, r3, [r4]
 8023fbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023fbe:	444b      	add	r3, r9
 8023fc0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023fc2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023fc4:	3301      	adds	r3, #1
 8023fc6:	2b07      	cmp	r3, #7
 8023fc8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023fca:	f300 8089 	bgt.w	80240e0 <_vfprintf_r+0x10a8>
 8023fce:	3408      	adds	r4, #8
 8023fd0:	f1b9 0f00 	cmp.w	r9, #0
 8023fd4:	bfac      	ite	ge
 8023fd6:	eba6 0309 	subge.w	r3, r6, r9
 8023fda:	4633      	movlt	r3, r6
 8023fdc:	2b00      	cmp	r3, #0
 8023fde:	9306      	str	r3, [sp, #24]
 8023fe0:	dd1c      	ble.n	802401c <_vfprintf_r+0xfe4>
 8023fe2:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 8024348 <_vfprintf_r+0x1310>
 8023fe6:	9806      	ldr	r0, [sp, #24]
 8023fe8:	f8c4 9000 	str.w	r9, [r4]
 8023fec:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8023ff0:	2810      	cmp	r0, #16
 8023ff2:	f102 0201 	add.w	r2, r2, #1
 8023ff6:	f104 0108 	add.w	r1, r4, #8
 8023ffa:	dc7b      	bgt.n	80240f4 <_vfprintf_r+0x10bc>
 8023ffc:	4403      	add	r3, r0
 8023ffe:	2a07      	cmp	r2, #7
 8024000:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8024004:	6060      	str	r0, [r4, #4]
 8024006:	f340 808a 	ble.w	802411e <_vfprintf_r+0x10e6>
 802400a:	9803      	ldr	r0, [sp, #12]
 802400c:	aa26      	add	r2, sp, #152	@ 0x98
 802400e:	4659      	mov	r1, fp
 8024010:	f000 fa7e 	bl	8024510 <__sprint_r>
 8024014:	2800      	cmp	r0, #0
 8024016:	f040 81d6 	bne.w	80243c6 <_vfprintf_r+0x138e>
 802401a:	ac29      	add	r4, sp, #164	@ 0xa4
 802401c:	056a      	lsls	r2, r5, #21
 802401e:	44b0      	add	r8, r6
 8024020:	d508      	bpl.n	8024034 <_vfprintf_r+0xffc>
 8024022:	9b08      	ldr	r3, [sp, #32]
 8024024:	2b00      	cmp	r3, #0
 8024026:	d17c      	bne.n	8024122 <_vfprintf_r+0x10ea>
 8024028:	2f00      	cmp	r7, #0
 802402a:	d17c      	bne.n	8024126 <_vfprintf_r+0x10ee>
 802402c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802402e:	4598      	cmp	r8, r3
 8024030:	bf28      	it	cs
 8024032:	4698      	movcs	r8, r3
 8024034:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024036:	9a04      	ldr	r2, [sp, #16]
 8024038:	4293      	cmp	r3, r2
 802403a:	db01      	blt.n	8024040 <_vfprintf_r+0x1008>
 802403c:	07eb      	lsls	r3, r5, #31
 802403e:	d50e      	bpl.n	802405e <_vfprintf_r+0x1026>
 8024040:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024042:	6023      	str	r3, [r4, #0]
 8024044:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024046:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024048:	6063      	str	r3, [r4, #4]
 802404a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802404c:	4413      	add	r3, r2
 802404e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024050:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024052:	3301      	adds	r3, #1
 8024054:	2b07      	cmp	r3, #7
 8024056:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024058:	f300 80e1 	bgt.w	802421e <_vfprintf_r+0x11e6>
 802405c:	3408      	adds	r4, #8
 802405e:	9b04      	ldr	r3, [sp, #16]
 8024060:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8024062:	1bdf      	subs	r7, r3, r7
 8024064:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024066:	eba3 0308 	sub.w	r3, r3, r8
 802406a:	429f      	cmp	r7, r3
 802406c:	bfa8      	it	ge
 802406e:	461f      	movge	r7, r3
 8024070:	2f00      	cmp	r7, #0
 8024072:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024074:	dd0a      	ble.n	802408c <_vfprintf_r+0x1054>
 8024076:	443b      	add	r3, r7
 8024078:	9328      	str	r3, [sp, #160]	@ 0xa0
 802407a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802407c:	3301      	adds	r3, #1
 802407e:	2b07      	cmp	r3, #7
 8024080:	e9c4 8700 	strd	r8, r7, [r4]
 8024084:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024086:	f300 80d4 	bgt.w	8024232 <_vfprintf_r+0x11fa>
 802408a:	3408      	adds	r4, #8
 802408c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802408e:	9b04      	ldr	r3, [sp, #16]
 8024090:	2f00      	cmp	r7, #0
 8024092:	eba3 0606 	sub.w	r6, r3, r6
 8024096:	bfa8      	it	ge
 8024098:	1bf6      	subge	r6, r6, r7
 802409a:	2e00      	cmp	r6, #0
 802409c:	f77f ac22 	ble.w	80238e4 <_vfprintf_r+0x8ac>
 80240a0:	4fa9      	ldr	r7, [pc, #676]	@ (8024348 <_vfprintf_r+0x1310>)
 80240a2:	f04f 0810 	mov.w	r8, #16
 80240a6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80240aa:	2e10      	cmp	r6, #16
 80240ac:	f103 0301 	add.w	r3, r3, #1
 80240b0:	f104 0108 	add.w	r1, r4, #8
 80240b4:	6027      	str	r7, [r4, #0]
 80240b6:	f77f aebc 	ble.w	8023e32 <_vfprintf_r+0xdfa>
 80240ba:	3210      	adds	r2, #16
 80240bc:	2b07      	cmp	r3, #7
 80240be:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80240c2:	f8c4 8004 	str.w	r8, [r4, #4]
 80240c6:	dd08      	ble.n	80240da <_vfprintf_r+0x10a2>
 80240c8:	9803      	ldr	r0, [sp, #12]
 80240ca:	aa26      	add	r2, sp, #152	@ 0x98
 80240cc:	4659      	mov	r1, fp
 80240ce:	f000 fa1f 	bl	8024510 <__sprint_r>
 80240d2:	2800      	cmp	r0, #0
 80240d4:	f040 8177 	bne.w	80243c6 <_vfprintf_r+0x138e>
 80240d8:	a929      	add	r1, sp, #164	@ 0xa4
 80240da:	3e10      	subs	r6, #16
 80240dc:	460c      	mov	r4, r1
 80240de:	e7e2      	b.n	80240a6 <_vfprintf_r+0x106e>
 80240e0:	9803      	ldr	r0, [sp, #12]
 80240e2:	aa26      	add	r2, sp, #152	@ 0x98
 80240e4:	4659      	mov	r1, fp
 80240e6:	f000 fa13 	bl	8024510 <__sprint_r>
 80240ea:	2800      	cmp	r0, #0
 80240ec:	f040 816b 	bne.w	80243c6 <_vfprintf_r+0x138e>
 80240f0:	ac29      	add	r4, sp, #164	@ 0xa4
 80240f2:	e76d      	b.n	8023fd0 <_vfprintf_r+0xf98>
 80240f4:	2010      	movs	r0, #16
 80240f6:	4403      	add	r3, r0
 80240f8:	2a07      	cmp	r2, #7
 80240fa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80240fe:	6060      	str	r0, [r4, #4]
 8024100:	dd08      	ble.n	8024114 <_vfprintf_r+0x10dc>
 8024102:	9803      	ldr	r0, [sp, #12]
 8024104:	aa26      	add	r2, sp, #152	@ 0x98
 8024106:	4659      	mov	r1, fp
 8024108:	f000 fa02 	bl	8024510 <__sprint_r>
 802410c:	2800      	cmp	r0, #0
 802410e:	f040 815a 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8024112:	a929      	add	r1, sp, #164	@ 0xa4
 8024114:	9b06      	ldr	r3, [sp, #24]
 8024116:	3b10      	subs	r3, #16
 8024118:	9306      	str	r3, [sp, #24]
 802411a:	460c      	mov	r4, r1
 802411c:	e763      	b.n	8023fe6 <_vfprintf_r+0xfae>
 802411e:	460c      	mov	r4, r1
 8024120:	e77c      	b.n	802401c <_vfprintf_r+0xfe4>
 8024122:	2f00      	cmp	r7, #0
 8024124:	d04b      	beq.n	80241be <_vfprintf_r+0x1186>
 8024126:	3f01      	subs	r7, #1
 8024128:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802412a:	6023      	str	r3, [r4, #0]
 802412c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802412e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024130:	6063      	str	r3, [r4, #4]
 8024132:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024134:	4413      	add	r3, r2
 8024136:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024138:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802413a:	3301      	adds	r3, #1
 802413c:	2b07      	cmp	r3, #7
 802413e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024140:	dc44      	bgt.n	80241cc <_vfprintf_r+0x1194>
 8024142:	3408      	adds	r4, #8
 8024144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024146:	f893 9000 	ldrb.w	r9, [r3]
 802414a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802414c:	eba3 0308 	sub.w	r3, r3, r8
 8024150:	4599      	cmp	r9, r3
 8024152:	bfa8      	it	ge
 8024154:	4699      	movge	r9, r3
 8024156:	f1b9 0f00 	cmp.w	r9, #0
 802415a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802415c:	dd09      	ble.n	8024172 <_vfprintf_r+0x113a>
 802415e:	444b      	add	r3, r9
 8024160:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024162:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024164:	3301      	adds	r3, #1
 8024166:	2b07      	cmp	r3, #7
 8024168:	e9c4 8900 	strd	r8, r9, [r4]
 802416c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802416e:	dc37      	bgt.n	80241e0 <_vfprintf_r+0x11a8>
 8024170:	3408      	adds	r4, #8
 8024172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024174:	781e      	ldrb	r6, [r3, #0]
 8024176:	f1b9 0f00 	cmp.w	r9, #0
 802417a:	bfa8      	it	ge
 802417c:	eba6 0609 	subge.w	r6, r6, r9
 8024180:	2e00      	cmp	r6, #0
 8024182:	dd18      	ble.n	80241b6 <_vfprintf_r+0x117e>
 8024184:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8024188:	486f      	ldr	r0, [pc, #444]	@ (8024348 <_vfprintf_r+0x1310>)
 802418a:	6020      	str	r0, [r4, #0]
 802418c:	2e10      	cmp	r6, #16
 802418e:	f103 0301 	add.w	r3, r3, #1
 8024192:	f104 0108 	add.w	r1, r4, #8
 8024196:	dc2d      	bgt.n	80241f4 <_vfprintf_r+0x11bc>
 8024198:	6066      	str	r6, [r4, #4]
 802419a:	2b07      	cmp	r3, #7
 802419c:	4416      	add	r6, r2
 802419e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80241a2:	dd3a      	ble.n	802421a <_vfprintf_r+0x11e2>
 80241a4:	9803      	ldr	r0, [sp, #12]
 80241a6:	aa26      	add	r2, sp, #152	@ 0x98
 80241a8:	4659      	mov	r1, fp
 80241aa:	f000 f9b1 	bl	8024510 <__sprint_r>
 80241ae:	2800      	cmp	r0, #0
 80241b0:	f040 8109 	bne.w	80243c6 <_vfprintf_r+0x138e>
 80241b4:	ac29      	add	r4, sp, #164	@ 0xa4
 80241b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241b8:	781b      	ldrb	r3, [r3, #0]
 80241ba:	4498      	add	r8, r3
 80241bc:	e731      	b.n	8024022 <_vfprintf_r+0xfea>
 80241be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241c0:	3b01      	subs	r3, #1
 80241c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80241c4:	9b08      	ldr	r3, [sp, #32]
 80241c6:	3b01      	subs	r3, #1
 80241c8:	9308      	str	r3, [sp, #32]
 80241ca:	e7ad      	b.n	8024128 <_vfprintf_r+0x10f0>
 80241cc:	9803      	ldr	r0, [sp, #12]
 80241ce:	aa26      	add	r2, sp, #152	@ 0x98
 80241d0:	4659      	mov	r1, fp
 80241d2:	f000 f99d 	bl	8024510 <__sprint_r>
 80241d6:	2800      	cmp	r0, #0
 80241d8:	f040 80f5 	bne.w	80243c6 <_vfprintf_r+0x138e>
 80241dc:	ac29      	add	r4, sp, #164	@ 0xa4
 80241de:	e7b1      	b.n	8024144 <_vfprintf_r+0x110c>
 80241e0:	9803      	ldr	r0, [sp, #12]
 80241e2:	aa26      	add	r2, sp, #152	@ 0x98
 80241e4:	4659      	mov	r1, fp
 80241e6:	f000 f993 	bl	8024510 <__sprint_r>
 80241ea:	2800      	cmp	r0, #0
 80241ec:	f040 80eb 	bne.w	80243c6 <_vfprintf_r+0x138e>
 80241f0:	ac29      	add	r4, sp, #164	@ 0xa4
 80241f2:	e7be      	b.n	8024172 <_vfprintf_r+0x113a>
 80241f4:	2010      	movs	r0, #16
 80241f6:	4402      	add	r2, r0
 80241f8:	2b07      	cmp	r3, #7
 80241fa:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80241fe:	6060      	str	r0, [r4, #4]
 8024200:	dd08      	ble.n	8024214 <_vfprintf_r+0x11dc>
 8024202:	9803      	ldr	r0, [sp, #12]
 8024204:	aa26      	add	r2, sp, #152	@ 0x98
 8024206:	4659      	mov	r1, fp
 8024208:	f000 f982 	bl	8024510 <__sprint_r>
 802420c:	2800      	cmp	r0, #0
 802420e:	f040 80da 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8024212:	a929      	add	r1, sp, #164	@ 0xa4
 8024214:	3e10      	subs	r6, #16
 8024216:	460c      	mov	r4, r1
 8024218:	e7b4      	b.n	8024184 <_vfprintf_r+0x114c>
 802421a:	460c      	mov	r4, r1
 802421c:	e7cb      	b.n	80241b6 <_vfprintf_r+0x117e>
 802421e:	9803      	ldr	r0, [sp, #12]
 8024220:	aa26      	add	r2, sp, #152	@ 0x98
 8024222:	4659      	mov	r1, fp
 8024224:	f000 f974 	bl	8024510 <__sprint_r>
 8024228:	2800      	cmp	r0, #0
 802422a:	f040 80cc 	bne.w	80243c6 <_vfprintf_r+0x138e>
 802422e:	ac29      	add	r4, sp, #164	@ 0xa4
 8024230:	e715      	b.n	802405e <_vfprintf_r+0x1026>
 8024232:	9803      	ldr	r0, [sp, #12]
 8024234:	aa26      	add	r2, sp, #152	@ 0x98
 8024236:	4659      	mov	r1, fp
 8024238:	f000 f96a 	bl	8024510 <__sprint_r>
 802423c:	2800      	cmp	r0, #0
 802423e:	f040 80c2 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8024242:	ac29      	add	r4, sp, #164	@ 0xa4
 8024244:	e722      	b.n	802408c <_vfprintf_r+0x1054>
 8024246:	9904      	ldr	r1, [sp, #16]
 8024248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802424a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802424c:	2901      	cmp	r1, #1
 802424e:	f103 0301 	add.w	r3, r3, #1
 8024252:	f102 0201 	add.w	r2, r2, #1
 8024256:	f104 0608 	add.w	r6, r4, #8
 802425a:	dc02      	bgt.n	8024262 <_vfprintf_r+0x122a>
 802425c:	07ef      	lsls	r7, r5, #31
 802425e:	f140 8086 	bpl.w	802436e <_vfprintf_r+0x1336>
 8024262:	2101      	movs	r1, #1
 8024264:	2a07      	cmp	r2, #7
 8024266:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802426a:	f8c4 8000 	str.w	r8, [r4]
 802426e:	6061      	str	r1, [r4, #4]
 8024270:	dd08      	ble.n	8024284 <_vfprintf_r+0x124c>
 8024272:	9803      	ldr	r0, [sp, #12]
 8024274:	aa26      	add	r2, sp, #152	@ 0x98
 8024276:	4659      	mov	r1, fp
 8024278:	f000 f94a 	bl	8024510 <__sprint_r>
 802427c:	2800      	cmp	r0, #0
 802427e:	f040 80a2 	bne.w	80243c6 <_vfprintf_r+0x138e>
 8024282:	ae29      	add	r6, sp, #164	@ 0xa4
 8024284:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024286:	6033      	str	r3, [r6, #0]
 8024288:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802428a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802428c:	6073      	str	r3, [r6, #4]
 802428e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024290:	4413      	add	r3, r2
 8024292:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024294:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024296:	3301      	adds	r3, #1
 8024298:	2b07      	cmp	r3, #7
 802429a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802429c:	dc33      	bgt.n	8024306 <_vfprintf_r+0x12ce>
 802429e:	3608      	adds	r6, #8
 80242a0:	9b04      	ldr	r3, [sp, #16]
 80242a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80242a6:	1e5c      	subs	r4, r3, #1
 80242a8:	2200      	movs	r2, #0
 80242aa:	2300      	movs	r3, #0
 80242ac:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 80242b0:	f7dc fc22 	bl	8000af8 <__aeabi_dcmpeq>
 80242b4:	2800      	cmp	r0, #0
 80242b6:	d12f      	bne.n	8024318 <_vfprintf_r+0x12e0>
 80242b8:	f108 0201 	add.w	r2, r8, #1
 80242bc:	e9c6 2400 	strd	r2, r4, [r6]
 80242c0:	9a04      	ldr	r2, [sp, #16]
 80242c2:	f109 0301 	add.w	r3, r9, #1
 80242c6:	3f01      	subs	r7, #1
 80242c8:	4417      	add	r7, r2
 80242ca:	2b07      	cmp	r3, #7
 80242cc:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 80242d0:	dd56      	ble.n	8024380 <_vfprintf_r+0x1348>
 80242d2:	9803      	ldr	r0, [sp, #12]
 80242d4:	aa26      	add	r2, sp, #152	@ 0x98
 80242d6:	4659      	mov	r1, fp
 80242d8:	f000 f91a 	bl	8024510 <__sprint_r>
 80242dc:	2800      	cmp	r0, #0
 80242de:	d172      	bne.n	80243c6 <_vfprintf_r+0x138e>
 80242e0:	ae29      	add	r6, sp, #164	@ 0xa4
 80242e2:	ab22      	add	r3, sp, #136	@ 0x88
 80242e4:	6033      	str	r3, [r6, #0]
 80242e6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80242e8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80242ea:	6073      	str	r3, [r6, #4]
 80242ec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80242ee:	4413      	add	r3, r2
 80242f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80242f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80242f4:	3301      	adds	r3, #1
 80242f6:	2b07      	cmp	r3, #7
 80242f8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80242fa:	f73f ada1 	bgt.w	8023e40 <_vfprintf_r+0xe08>
 80242fe:	f106 0408 	add.w	r4, r6, #8
 8024302:	f7ff baef 	b.w	80238e4 <_vfprintf_r+0x8ac>
 8024306:	9803      	ldr	r0, [sp, #12]
 8024308:	aa26      	add	r2, sp, #152	@ 0x98
 802430a:	4659      	mov	r1, fp
 802430c:	f000 f900 	bl	8024510 <__sprint_r>
 8024310:	2800      	cmp	r0, #0
 8024312:	d158      	bne.n	80243c6 <_vfprintf_r+0x138e>
 8024314:	ae29      	add	r6, sp, #164	@ 0xa4
 8024316:	e7c3      	b.n	80242a0 <_vfprintf_r+0x1268>
 8024318:	9b04      	ldr	r3, [sp, #16]
 802431a:	2b01      	cmp	r3, #1
 802431c:	dde1      	ble.n	80242e2 <_vfprintf_r+0x12aa>
 802431e:	4f0a      	ldr	r7, [pc, #40]	@ (8024348 <_vfprintf_r+0x1310>)
 8024320:	f04f 0810 	mov.w	r8, #16
 8024324:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8024328:	2c10      	cmp	r4, #16
 802432a:	f103 0301 	add.w	r3, r3, #1
 802432e:	f106 0108 	add.w	r1, r6, #8
 8024332:	6037      	str	r7, [r6, #0]
 8024334:	dc0a      	bgt.n	802434c <_vfprintf_r+0x1314>
 8024336:	6074      	str	r4, [r6, #4]
 8024338:	2b07      	cmp	r3, #7
 802433a:	4414      	add	r4, r2
 802433c:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8024340:	dcc7      	bgt.n	80242d2 <_vfprintf_r+0x129a>
 8024342:	460e      	mov	r6, r1
 8024344:	e7cd      	b.n	80242e2 <_vfprintf_r+0x12aa>
 8024346:	bf00      	nop
 8024348:	0803407c 	.word	0x0803407c
 802434c:	3210      	adds	r2, #16
 802434e:	2b07      	cmp	r3, #7
 8024350:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8024354:	f8c6 8004 	str.w	r8, [r6, #4]
 8024358:	dd06      	ble.n	8024368 <_vfprintf_r+0x1330>
 802435a:	9803      	ldr	r0, [sp, #12]
 802435c:	aa26      	add	r2, sp, #152	@ 0x98
 802435e:	4659      	mov	r1, fp
 8024360:	f000 f8d6 	bl	8024510 <__sprint_r>
 8024364:	bb78      	cbnz	r0, 80243c6 <_vfprintf_r+0x138e>
 8024366:	a929      	add	r1, sp, #164	@ 0xa4
 8024368:	3c10      	subs	r4, #16
 802436a:	460e      	mov	r6, r1
 802436c:	e7da      	b.n	8024324 <_vfprintf_r+0x12ec>
 802436e:	2101      	movs	r1, #1
 8024370:	2a07      	cmp	r2, #7
 8024372:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8024376:	f8c4 8000 	str.w	r8, [r4]
 802437a:	6061      	str	r1, [r4, #4]
 802437c:	ddb1      	ble.n	80242e2 <_vfprintf_r+0x12aa>
 802437e:	e7a8      	b.n	80242d2 <_vfprintf_r+0x129a>
 8024380:	3608      	adds	r6, #8
 8024382:	e7ae      	b.n	80242e2 <_vfprintf_r+0x12aa>
 8024384:	460c      	mov	r4, r1
 8024386:	f7ff baad 	b.w	80238e4 <_vfprintf_r+0x8ac>
 802438a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802438c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802438e:	1a9d      	subs	r5, r3, r2
 8024390:	2d00      	cmp	r5, #0
 8024392:	f77f aaaa 	ble.w	80238ea <_vfprintf_r+0x8b2>
 8024396:	4e3d      	ldr	r6, [pc, #244]	@ (802448c <_vfprintf_r+0x1454>)
 8024398:	2710      	movs	r7, #16
 802439a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802439e:	2d10      	cmp	r5, #16
 80243a0:	f103 0301 	add.w	r3, r3, #1
 80243a4:	6026      	str	r6, [r4, #0]
 80243a6:	dc18      	bgt.n	80243da <_vfprintf_r+0x13a2>
 80243a8:	6065      	str	r5, [r4, #4]
 80243aa:	2b07      	cmp	r3, #7
 80243ac:	4415      	add	r5, r2
 80243ae:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 80243b2:	f77f aa9a 	ble.w	80238ea <_vfprintf_r+0x8b2>
 80243b6:	9803      	ldr	r0, [sp, #12]
 80243b8:	aa26      	add	r2, sp, #152	@ 0x98
 80243ba:	4659      	mov	r1, fp
 80243bc:	f000 f8a8 	bl	8024510 <__sprint_r>
 80243c0:	2800      	cmp	r0, #0
 80243c2:	f43f aa92 	beq.w	80238ea <_vfprintf_r+0x8b2>
 80243c6:	f1ba 0f00 	cmp.w	sl, #0
 80243ca:	f43f a892 	beq.w	80234f2 <_vfprintf_r+0x4ba>
 80243ce:	9803      	ldr	r0, [sp, #12]
 80243d0:	4651      	mov	r1, sl
 80243d2:	f003 fc7b 	bl	8027ccc <_free_r>
 80243d6:	f7ff b88c 	b.w	80234f2 <_vfprintf_r+0x4ba>
 80243da:	3210      	adds	r2, #16
 80243dc:	2b07      	cmp	r3, #7
 80243de:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80243e2:	6067      	str	r7, [r4, #4]
 80243e4:	dc02      	bgt.n	80243ec <_vfprintf_r+0x13b4>
 80243e6:	3408      	adds	r4, #8
 80243e8:	3d10      	subs	r5, #16
 80243ea:	e7d6      	b.n	802439a <_vfprintf_r+0x1362>
 80243ec:	9803      	ldr	r0, [sp, #12]
 80243ee:	aa26      	add	r2, sp, #152	@ 0x98
 80243f0:	4659      	mov	r1, fp
 80243f2:	f000 f88d 	bl	8024510 <__sprint_r>
 80243f6:	2800      	cmp	r0, #0
 80243f8:	d1e5      	bne.n	80243c6 <_vfprintf_r+0x138e>
 80243fa:	ac29      	add	r4, sp, #164	@ 0xa4
 80243fc:	e7f4      	b.n	80243e8 <_vfprintf_r+0x13b0>
 80243fe:	9803      	ldr	r0, [sp, #12]
 8024400:	4651      	mov	r1, sl
 8024402:	f003 fc63 	bl	8027ccc <_free_r>
 8024406:	f7ff ba88 	b.w	802391a <_vfprintf_r+0x8e2>
 802440a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802440c:	b91b      	cbnz	r3, 8024416 <_vfprintf_r+0x13de>
 802440e:	2300      	movs	r3, #0
 8024410:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024412:	f7ff b86e 	b.w	80234f2 <_vfprintf_r+0x4ba>
 8024416:	9803      	ldr	r0, [sp, #12]
 8024418:	aa26      	add	r2, sp, #152	@ 0x98
 802441a:	4659      	mov	r1, fp
 802441c:	f000 f878 	bl	8024510 <__sprint_r>
 8024420:	2800      	cmp	r0, #0
 8024422:	d0f4      	beq.n	802440e <_vfprintf_r+0x13d6>
 8024424:	f7ff b865 	b.w	80234f2 <_vfprintf_r+0x4ba>
 8024428:	ea56 0207 	orrs.w	r2, r6, r7
 802442c:	9508      	str	r5, [sp, #32]
 802442e:	f43f ab75 	beq.w	8023b1c <_vfprintf_r+0xae4>
 8024432:	2b01      	cmp	r3, #1
 8024434:	f43f abf6 	beq.w	8023c24 <_vfprintf_r+0xbec>
 8024438:	2b02      	cmp	r3, #2
 802443a:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802443e:	f43f ac3a 	beq.w	8023cb6 <_vfprintf_r+0xc7e>
 8024442:	f006 0307 	and.w	r3, r6, #7
 8024446:	08f6      	lsrs	r6, r6, #3
 8024448:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802444c:	08ff      	lsrs	r7, r7, #3
 802444e:	3330      	adds	r3, #48	@ 0x30
 8024450:	ea56 0107 	orrs.w	r1, r6, r7
 8024454:	4642      	mov	r2, r8
 8024456:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802445a:	d1f2      	bne.n	8024442 <_vfprintf_r+0x140a>
 802445c:	9908      	ldr	r1, [sp, #32]
 802445e:	07ce      	lsls	r6, r1, #31
 8024460:	d506      	bpl.n	8024470 <_vfprintf_r+0x1438>
 8024462:	2b30      	cmp	r3, #48	@ 0x30
 8024464:	d004      	beq.n	8024470 <_vfprintf_r+0x1438>
 8024466:	2330      	movs	r3, #48	@ 0x30
 8024468:	f808 3c01 	strb.w	r3, [r8, #-1]
 802446c:	f1a2 0802 	sub.w	r8, r2, #2
 8024470:	ab52      	add	r3, sp, #328	@ 0x148
 8024472:	9d08      	ldr	r5, [sp, #32]
 8024474:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8024478:	f04f 0a00 	mov.w	sl, #0
 802447c:	eba3 0908 	sub.w	r9, r3, r8
 8024480:	4657      	mov	r7, sl
 8024482:	f8cd a020 	str.w	sl, [sp, #32]
 8024486:	4656      	mov	r6, sl
 8024488:	f7ff b978 	b.w	802377c <_vfprintf_r+0x744>
 802448c:	0803408c 	.word	0x0803408c

08024490 <__sbprintf>:
 8024490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024492:	461f      	mov	r7, r3
 8024494:	898b      	ldrh	r3, [r1, #12]
 8024496:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802449a:	f023 0302 	bic.w	r3, r3, #2
 802449e:	f8ad 300c 	strh.w	r3, [sp, #12]
 80244a2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80244a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80244a6:	89cb      	ldrh	r3, [r1, #14]
 80244a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80244ac:	69cb      	ldr	r3, [r1, #28]
 80244ae:	9307      	str	r3, [sp, #28]
 80244b0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80244b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80244b4:	ab1a      	add	r3, sp, #104	@ 0x68
 80244b6:	9300      	str	r3, [sp, #0]
 80244b8:	9304      	str	r3, [sp, #16]
 80244ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80244be:	4615      	mov	r5, r2
 80244c0:	4606      	mov	r6, r0
 80244c2:	9302      	str	r3, [sp, #8]
 80244c4:	9305      	str	r3, [sp, #20]
 80244c6:	a816      	add	r0, sp, #88	@ 0x58
 80244c8:	2300      	movs	r3, #0
 80244ca:	460c      	mov	r4, r1
 80244cc:	9306      	str	r3, [sp, #24]
 80244ce:	f002 fcf5 	bl	8026ebc <__retarget_lock_init_recursive>
 80244d2:	462a      	mov	r2, r5
 80244d4:	463b      	mov	r3, r7
 80244d6:	4669      	mov	r1, sp
 80244d8:	4630      	mov	r0, r6
 80244da:	f7fe fdad 	bl	8023038 <_vfprintf_r>
 80244de:	1e05      	subs	r5, r0, #0
 80244e0:	db07      	blt.n	80244f2 <__sbprintf+0x62>
 80244e2:	4669      	mov	r1, sp
 80244e4:	4630      	mov	r0, r6
 80244e6:	f000 fecb 	bl	8025280 <_fflush_r>
 80244ea:	2800      	cmp	r0, #0
 80244ec:	bf18      	it	ne
 80244ee:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 80244f2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80244f6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80244f8:	065b      	lsls	r3, r3, #25
 80244fa:	bf42      	ittt	mi
 80244fc:	89a3      	ldrhmi	r3, [r4, #12]
 80244fe:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8024502:	81a3      	strhmi	r3, [r4, #12]
 8024504:	f002 fcdb 	bl	8026ebe <__retarget_lock_close_recursive>
 8024508:	4628      	mov	r0, r5
 802450a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802450e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024510 <__sprint_r>:
 8024510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024514:	6893      	ldr	r3, [r2, #8]
 8024516:	4680      	mov	r8, r0
 8024518:	460e      	mov	r6, r1
 802451a:	4614      	mov	r4, r2
 802451c:	b343      	cbz	r3, 8024570 <__sprint_r+0x60>
 802451e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8024520:	049d      	lsls	r5, r3, #18
 8024522:	d522      	bpl.n	802456a <__sprint_r+0x5a>
 8024524:	6815      	ldr	r5, [r2, #0]
 8024526:	68a0      	ldr	r0, [r4, #8]
 8024528:	3508      	adds	r5, #8
 802452a:	b928      	cbnz	r0, 8024538 <__sprint_r+0x28>
 802452c:	2300      	movs	r3, #0
 802452e:	60a3      	str	r3, [r4, #8]
 8024530:	2300      	movs	r3, #0
 8024532:	6063      	str	r3, [r4, #4]
 8024534:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024538:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 802453c:	f04f 0900 	mov.w	r9, #0
 8024540:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8024544:	45ca      	cmp	sl, r9
 8024546:	dc05      	bgt.n	8024554 <__sprint_r+0x44>
 8024548:	68a3      	ldr	r3, [r4, #8]
 802454a:	f027 0703 	bic.w	r7, r7, #3
 802454e:	1bdb      	subs	r3, r3, r7
 8024550:	60a3      	str	r3, [r4, #8]
 8024552:	e7e8      	b.n	8024526 <__sprint_r+0x16>
 8024554:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8024558:	4632      	mov	r2, r6
 802455a:	4640      	mov	r0, r8
 802455c:	f001 fa35 	bl	80259ca <_fputwc_r>
 8024560:	1c43      	adds	r3, r0, #1
 8024562:	d0e3      	beq.n	802452c <__sprint_r+0x1c>
 8024564:	f109 0901 	add.w	r9, r9, #1
 8024568:	e7ec      	b.n	8024544 <__sprint_r+0x34>
 802456a:	f001 f81d 	bl	80255a8 <__sfvwrite_r>
 802456e:	e7dd      	b.n	802452c <__sprint_r+0x1c>
 8024570:	4618      	mov	r0, r3
 8024572:	e7dd      	b.n	8024530 <__sprint_r+0x20>

08024574 <_vfiprintf_r>:
 8024574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024578:	b0bb      	sub	sp, #236	@ 0xec
 802457a:	460f      	mov	r7, r1
 802457c:	4693      	mov	fp, r2
 802457e:	461c      	mov	r4, r3
 8024580:	461d      	mov	r5, r3
 8024582:	9000      	str	r0, [sp, #0]
 8024584:	b118      	cbz	r0, 802458e <_vfiprintf_r+0x1a>
 8024586:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8024588:	b90b      	cbnz	r3, 802458e <_vfiprintf_r+0x1a>
 802458a:	f000 ffbb 	bl	8025504 <__sinit>
 802458e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024590:	07db      	lsls	r3, r3, #31
 8024592:	d405      	bmi.n	80245a0 <_vfiprintf_r+0x2c>
 8024594:	89bb      	ldrh	r3, [r7, #12]
 8024596:	059e      	lsls	r6, r3, #22
 8024598:	d402      	bmi.n	80245a0 <_vfiprintf_r+0x2c>
 802459a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802459c:	f002 fc91 	bl	8026ec2 <__retarget_lock_acquire_recursive>
 80245a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80245a4:	0498      	lsls	r0, r3, #18
 80245a6:	d406      	bmi.n	80245b6 <_vfiprintf_r+0x42>
 80245a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80245ac:	81bb      	strh	r3, [r7, #12]
 80245ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80245b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80245b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80245b6:	89bb      	ldrh	r3, [r7, #12]
 80245b8:	0719      	lsls	r1, r3, #28
 80245ba:	d501      	bpl.n	80245c0 <_vfiprintf_r+0x4c>
 80245bc:	693b      	ldr	r3, [r7, #16]
 80245be:	b9ab      	cbnz	r3, 80245ec <_vfiprintf_r+0x78>
 80245c0:	9800      	ldr	r0, [sp, #0]
 80245c2:	4639      	mov	r1, r7
 80245c4:	f001 f95a 	bl	802587c <__swsetup_r>
 80245c8:	b180      	cbz	r0, 80245ec <_vfiprintf_r+0x78>
 80245ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80245cc:	07da      	lsls	r2, r3, #31
 80245ce:	d506      	bpl.n	80245de <_vfiprintf_r+0x6a>
 80245d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80245d4:	9303      	str	r3, [sp, #12]
 80245d6:	9803      	ldr	r0, [sp, #12]
 80245d8:	b03b      	add	sp, #236	@ 0xec
 80245da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245de:	89bb      	ldrh	r3, [r7, #12]
 80245e0:	059b      	lsls	r3, r3, #22
 80245e2:	d4f5      	bmi.n	80245d0 <_vfiprintf_r+0x5c>
 80245e4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80245e6:	f002 fc6e 	bl	8026ec6 <__retarget_lock_release_recursive>
 80245ea:	e7f1      	b.n	80245d0 <_vfiprintf_r+0x5c>
 80245ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80245f0:	f003 021a 	and.w	r2, r3, #26
 80245f4:	2a0a      	cmp	r2, #10
 80245f6:	d114      	bne.n	8024622 <_vfiprintf_r+0xae>
 80245f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80245fc:	2a00      	cmp	r2, #0
 80245fe:	db10      	blt.n	8024622 <_vfiprintf_r+0xae>
 8024600:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8024602:	07d6      	lsls	r6, r2, #31
 8024604:	d404      	bmi.n	8024610 <_vfiprintf_r+0x9c>
 8024606:	059d      	lsls	r5, r3, #22
 8024608:	d402      	bmi.n	8024610 <_vfiprintf_r+0x9c>
 802460a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802460c:	f002 fc5b 	bl	8026ec6 <__retarget_lock_release_recursive>
 8024610:	9800      	ldr	r0, [sp, #0]
 8024612:	4623      	mov	r3, r4
 8024614:	465a      	mov	r2, fp
 8024616:	4639      	mov	r1, r7
 8024618:	b03b      	add	sp, #236	@ 0xec
 802461a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802461e:	f000 bc31 	b.w	8024e84 <__sbprintf>
 8024622:	2300      	movs	r3, #0
 8024624:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8024628:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802462c:	ae11      	add	r6, sp, #68	@ 0x44
 802462e:	960e      	str	r6, [sp, #56]	@ 0x38
 8024630:	9307      	str	r3, [sp, #28]
 8024632:	9309      	str	r3, [sp, #36]	@ 0x24
 8024634:	9303      	str	r3, [sp, #12]
 8024636:	465b      	mov	r3, fp
 8024638:	461c      	mov	r4, r3
 802463a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802463e:	b10a      	cbz	r2, 8024644 <_vfiprintf_r+0xd0>
 8024640:	2a25      	cmp	r2, #37	@ 0x25
 8024642:	d1f9      	bne.n	8024638 <_vfiprintf_r+0xc4>
 8024644:	ebb4 080b 	subs.w	r8, r4, fp
 8024648:	d00d      	beq.n	8024666 <_vfiprintf_r+0xf2>
 802464a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802464c:	4443      	add	r3, r8
 802464e:	9310      	str	r3, [sp, #64]	@ 0x40
 8024650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024652:	3301      	adds	r3, #1
 8024654:	2b07      	cmp	r3, #7
 8024656:	e9c6 b800 	strd	fp, r8, [r6]
 802465a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802465c:	dc75      	bgt.n	802474a <_vfiprintf_r+0x1d6>
 802465e:	3608      	adds	r6, #8
 8024660:	9b03      	ldr	r3, [sp, #12]
 8024662:	4443      	add	r3, r8
 8024664:	9303      	str	r3, [sp, #12]
 8024666:	7823      	ldrb	r3, [r4, #0]
 8024668:	2b00      	cmp	r3, #0
 802466a:	f000 83cd 	beq.w	8024e08 <_vfiprintf_r+0x894>
 802466e:	2300      	movs	r3, #0
 8024670:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8024674:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8024678:	3401      	adds	r4, #1
 802467a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802467e:	469a      	mov	sl, r3
 8024680:	46a3      	mov	fp, r4
 8024682:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8024686:	f1a3 0220 	sub.w	r2, r3, #32
 802468a:	2a5a      	cmp	r2, #90	@ 0x5a
 802468c:	f200 8316 	bhi.w	8024cbc <_vfiprintf_r+0x748>
 8024690:	e8df f012 	tbh	[pc, r2, lsl #1]
 8024694:	0314009a 	.word	0x0314009a
 8024698:	00a20314 	.word	0x00a20314
 802469c:	03140314 	.word	0x03140314
 80246a0:	00820314 	.word	0x00820314
 80246a4:	03140314 	.word	0x03140314
 80246a8:	00af00a5 	.word	0x00af00a5
 80246ac:	00ac0314 	.word	0x00ac0314
 80246b0:	031400b1 	.word	0x031400b1
 80246b4:	00d000cd 	.word	0x00d000cd
 80246b8:	00d000d0 	.word	0x00d000d0
 80246bc:	00d000d0 	.word	0x00d000d0
 80246c0:	00d000d0 	.word	0x00d000d0
 80246c4:	00d000d0 	.word	0x00d000d0
 80246c8:	03140314 	.word	0x03140314
 80246cc:	03140314 	.word	0x03140314
 80246d0:	03140314 	.word	0x03140314
 80246d4:	03140314 	.word	0x03140314
 80246d8:	00f70314 	.word	0x00f70314
 80246dc:	03140104 	.word	0x03140104
 80246e0:	03140314 	.word	0x03140314
 80246e4:	03140314 	.word	0x03140314
 80246e8:	03140314 	.word	0x03140314
 80246ec:	03140314 	.word	0x03140314
 80246f0:	01520314 	.word	0x01520314
 80246f4:	03140314 	.word	0x03140314
 80246f8:	019a0314 	.word	0x019a0314
 80246fc:	027a0314 	.word	0x027a0314
 8024700:	03140314 	.word	0x03140314
 8024704:	0314029a 	.word	0x0314029a
 8024708:	03140314 	.word	0x03140314
 802470c:	03140314 	.word	0x03140314
 8024710:	03140314 	.word	0x03140314
 8024714:	03140314 	.word	0x03140314
 8024718:	00f70314 	.word	0x00f70314
 802471c:	03140106 	.word	0x03140106
 8024720:	03140314 	.word	0x03140314
 8024724:	010600e0 	.word	0x010600e0
 8024728:	031400f1 	.word	0x031400f1
 802472c:	031400eb 	.word	0x031400eb
 8024730:	01540132 	.word	0x01540132
 8024734:	00f10189 	.word	0x00f10189
 8024738:	019a0314 	.word	0x019a0314
 802473c:	027c0098 	.word	0x027c0098
 8024740:	03140314 	.word	0x03140314
 8024744:	03140065 	.word	0x03140065
 8024748:	0098      	.short	0x0098
 802474a:	9800      	ldr	r0, [sp, #0]
 802474c:	aa0e      	add	r2, sp, #56	@ 0x38
 802474e:	4639      	mov	r1, r7
 8024750:	f7ff fede 	bl	8024510 <__sprint_r>
 8024754:	2800      	cmp	r0, #0
 8024756:	f040 8336 	bne.w	8024dc6 <_vfiprintf_r+0x852>
 802475a:	ae11      	add	r6, sp, #68	@ 0x44
 802475c:	e780      	b.n	8024660 <_vfiprintf_r+0xec>
 802475e:	4a99      	ldr	r2, [pc, #612]	@ (80249c4 <_vfiprintf_r+0x450>)
 8024760:	9205      	str	r2, [sp, #20]
 8024762:	f01a 0220 	ands.w	r2, sl, #32
 8024766:	f000 8231 	beq.w	8024bcc <_vfiprintf_r+0x658>
 802476a:	3507      	adds	r5, #7
 802476c:	f025 0507 	bic.w	r5, r5, #7
 8024770:	46a8      	mov	r8, r5
 8024772:	686d      	ldr	r5, [r5, #4]
 8024774:	f858 4b08 	ldr.w	r4, [r8], #8
 8024778:	f01a 0f01 	tst.w	sl, #1
 802477c:	d009      	beq.n	8024792 <_vfiprintf_r+0x21e>
 802477e:	ea54 0205 	orrs.w	r2, r4, r5
 8024782:	bf1f      	itttt	ne
 8024784:	2230      	movne	r2, #48	@ 0x30
 8024786:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802478a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802478e:	f04a 0a02 	orrne.w	sl, sl, #2
 8024792:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8024796:	e112      	b.n	80249be <_vfiprintf_r+0x44a>
 8024798:	9800      	ldr	r0, [sp, #0]
 802479a:	f002 fae7 	bl	8026d6c <_localeconv_r>
 802479e:	6843      	ldr	r3, [r0, #4]
 80247a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80247a2:	4618      	mov	r0, r3
 80247a4:	f7db fd7c 	bl	80002a0 <strlen>
 80247a8:	9007      	str	r0, [sp, #28]
 80247aa:	9800      	ldr	r0, [sp, #0]
 80247ac:	f002 fade 	bl	8026d6c <_localeconv_r>
 80247b0:	6883      	ldr	r3, [r0, #8]
 80247b2:	9306      	str	r3, [sp, #24]
 80247b4:	9b07      	ldr	r3, [sp, #28]
 80247b6:	b12b      	cbz	r3, 80247c4 <_vfiprintf_r+0x250>
 80247b8:	9b06      	ldr	r3, [sp, #24]
 80247ba:	b11b      	cbz	r3, 80247c4 <_vfiprintf_r+0x250>
 80247bc:	781b      	ldrb	r3, [r3, #0]
 80247be:	b10b      	cbz	r3, 80247c4 <_vfiprintf_r+0x250>
 80247c0:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 80247c4:	465c      	mov	r4, fp
 80247c6:	e75b      	b.n	8024680 <_vfiprintf_r+0x10c>
 80247c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80247cc:	2b00      	cmp	r3, #0
 80247ce:	d1f9      	bne.n	80247c4 <_vfiprintf_r+0x250>
 80247d0:	2320      	movs	r3, #32
 80247d2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80247d6:	e7f5      	b.n	80247c4 <_vfiprintf_r+0x250>
 80247d8:	f04a 0a01 	orr.w	sl, sl, #1
 80247dc:	e7f2      	b.n	80247c4 <_vfiprintf_r+0x250>
 80247de:	f855 3b04 	ldr.w	r3, [r5], #4
 80247e2:	9302      	str	r3, [sp, #8]
 80247e4:	2b00      	cmp	r3, #0
 80247e6:	daed      	bge.n	80247c4 <_vfiprintf_r+0x250>
 80247e8:	425b      	negs	r3, r3
 80247ea:	9302      	str	r3, [sp, #8]
 80247ec:	f04a 0a04 	orr.w	sl, sl, #4
 80247f0:	e7e8      	b.n	80247c4 <_vfiprintf_r+0x250>
 80247f2:	232b      	movs	r3, #43	@ 0x2b
 80247f4:	e7ed      	b.n	80247d2 <_vfiprintf_r+0x25e>
 80247f6:	465a      	mov	r2, fp
 80247f8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80247fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80247fe:	d112      	bne.n	8024826 <_vfiprintf_r+0x2b2>
 8024800:	f855 3b04 	ldr.w	r3, [r5], #4
 8024804:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8024808:	9301      	str	r3, [sp, #4]
 802480a:	4693      	mov	fp, r2
 802480c:	e7da      	b.n	80247c4 <_vfiprintf_r+0x250>
 802480e:	9b01      	ldr	r3, [sp, #4]
 8024810:	fb00 1303 	mla	r3, r0, r3, r1
 8024814:	9301      	str	r3, [sp, #4]
 8024816:	f812 3b01 	ldrb.w	r3, [r2], #1
 802481a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802481e:	2909      	cmp	r1, #9
 8024820:	d9f5      	bls.n	802480e <_vfiprintf_r+0x29a>
 8024822:	4693      	mov	fp, r2
 8024824:	e72f      	b.n	8024686 <_vfiprintf_r+0x112>
 8024826:	2100      	movs	r1, #0
 8024828:	9101      	str	r1, [sp, #4]
 802482a:	200a      	movs	r0, #10
 802482c:	e7f5      	b.n	802481a <_vfiprintf_r+0x2a6>
 802482e:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8024832:	e7c7      	b.n	80247c4 <_vfiprintf_r+0x250>
 8024834:	2100      	movs	r1, #0
 8024836:	465a      	mov	r2, fp
 8024838:	9102      	str	r1, [sp, #8]
 802483a:	200a      	movs	r0, #10
 802483c:	9902      	ldr	r1, [sp, #8]
 802483e:	3b30      	subs	r3, #48	@ 0x30
 8024840:	fb00 3301 	mla	r3, r0, r1, r3
 8024844:	9302      	str	r3, [sp, #8]
 8024846:	f812 3b01 	ldrb.w	r3, [r2], #1
 802484a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802484e:	2909      	cmp	r1, #9
 8024850:	d9f4      	bls.n	802483c <_vfiprintf_r+0x2c8>
 8024852:	e7e6      	b.n	8024822 <_vfiprintf_r+0x2ae>
 8024854:	f89b 3000 	ldrb.w	r3, [fp]
 8024858:	2b68      	cmp	r3, #104	@ 0x68
 802485a:	bf06      	itte	eq
 802485c:	f10b 0b01 	addeq.w	fp, fp, #1
 8024860:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8024864:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8024868:	e7ac      	b.n	80247c4 <_vfiprintf_r+0x250>
 802486a:	f89b 3000 	ldrb.w	r3, [fp]
 802486e:	2b6c      	cmp	r3, #108	@ 0x6c
 8024870:	d104      	bne.n	802487c <_vfiprintf_r+0x308>
 8024872:	f10b 0b01 	add.w	fp, fp, #1
 8024876:	f04a 0a20 	orr.w	sl, sl, #32
 802487a:	e7a3      	b.n	80247c4 <_vfiprintf_r+0x250>
 802487c:	f04a 0a10 	orr.w	sl, sl, #16
 8024880:	e7a0      	b.n	80247c4 <_vfiprintf_r+0x250>
 8024882:	46a8      	mov	r8, r5
 8024884:	2400      	movs	r4, #0
 8024886:	f858 3b04 	ldr.w	r3, [r8], #4
 802488a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802488e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8024892:	2301      	movs	r3, #1
 8024894:	9301      	str	r3, [sp, #4]
 8024896:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 802489a:	e0ab      	b.n	80249f4 <_vfiprintf_r+0x480>
 802489c:	f04a 0a10 	orr.w	sl, sl, #16
 80248a0:	f01a 0f20 	tst.w	sl, #32
 80248a4:	d011      	beq.n	80248ca <_vfiprintf_r+0x356>
 80248a6:	3507      	adds	r5, #7
 80248a8:	f025 0507 	bic.w	r5, r5, #7
 80248ac:	46a8      	mov	r8, r5
 80248ae:	686d      	ldr	r5, [r5, #4]
 80248b0:	f858 4b08 	ldr.w	r4, [r8], #8
 80248b4:	2d00      	cmp	r5, #0
 80248b6:	da06      	bge.n	80248c6 <_vfiprintf_r+0x352>
 80248b8:	4264      	negs	r4, r4
 80248ba:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80248be:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80248c2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80248c6:	2301      	movs	r3, #1
 80248c8:	e048      	b.n	802495c <_vfiprintf_r+0x3e8>
 80248ca:	46a8      	mov	r8, r5
 80248cc:	f01a 0f10 	tst.w	sl, #16
 80248d0:	f858 5b04 	ldr.w	r5, [r8], #4
 80248d4:	d002      	beq.n	80248dc <_vfiprintf_r+0x368>
 80248d6:	462c      	mov	r4, r5
 80248d8:	17ed      	asrs	r5, r5, #31
 80248da:	e7eb      	b.n	80248b4 <_vfiprintf_r+0x340>
 80248dc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80248e0:	d003      	beq.n	80248ea <_vfiprintf_r+0x376>
 80248e2:	b22c      	sxth	r4, r5
 80248e4:	f345 35c0 	sbfx	r5, r5, #15, #1
 80248e8:	e7e4      	b.n	80248b4 <_vfiprintf_r+0x340>
 80248ea:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80248ee:	d0f2      	beq.n	80248d6 <_vfiprintf_r+0x362>
 80248f0:	b26c      	sxtb	r4, r5
 80248f2:	f345 15c0 	sbfx	r5, r5, #7, #1
 80248f6:	e7dd      	b.n	80248b4 <_vfiprintf_r+0x340>
 80248f8:	f01a 0f20 	tst.w	sl, #32
 80248fc:	d007      	beq.n	802490e <_vfiprintf_r+0x39a>
 80248fe:	9a03      	ldr	r2, [sp, #12]
 8024900:	682b      	ldr	r3, [r5, #0]
 8024902:	9903      	ldr	r1, [sp, #12]
 8024904:	17d2      	asrs	r2, r2, #31
 8024906:	e9c3 1200 	strd	r1, r2, [r3]
 802490a:	3504      	adds	r5, #4
 802490c:	e693      	b.n	8024636 <_vfiprintf_r+0xc2>
 802490e:	f01a 0f10 	tst.w	sl, #16
 8024912:	d003      	beq.n	802491c <_vfiprintf_r+0x3a8>
 8024914:	682b      	ldr	r3, [r5, #0]
 8024916:	9a03      	ldr	r2, [sp, #12]
 8024918:	601a      	str	r2, [r3, #0]
 802491a:	e7f6      	b.n	802490a <_vfiprintf_r+0x396>
 802491c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8024920:	d003      	beq.n	802492a <_vfiprintf_r+0x3b6>
 8024922:	682b      	ldr	r3, [r5, #0]
 8024924:	9a03      	ldr	r2, [sp, #12]
 8024926:	801a      	strh	r2, [r3, #0]
 8024928:	e7ef      	b.n	802490a <_vfiprintf_r+0x396>
 802492a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802492e:	d0f1      	beq.n	8024914 <_vfiprintf_r+0x3a0>
 8024930:	682b      	ldr	r3, [r5, #0]
 8024932:	9a03      	ldr	r2, [sp, #12]
 8024934:	701a      	strb	r2, [r3, #0]
 8024936:	e7e8      	b.n	802490a <_vfiprintf_r+0x396>
 8024938:	f04a 0a10 	orr.w	sl, sl, #16
 802493c:	f01a 0320 	ands.w	r3, sl, #32
 8024940:	d01f      	beq.n	8024982 <_vfiprintf_r+0x40e>
 8024942:	3507      	adds	r5, #7
 8024944:	f025 0507 	bic.w	r5, r5, #7
 8024948:	46a8      	mov	r8, r5
 802494a:	686d      	ldr	r5, [r5, #4]
 802494c:	f858 4b08 	ldr.w	r4, [r8], #8
 8024950:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8024954:	2300      	movs	r3, #0
 8024956:	2200      	movs	r2, #0
 8024958:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802495c:	9a01      	ldr	r2, [sp, #4]
 802495e:	3201      	adds	r2, #1
 8024960:	f000 825f 	beq.w	8024e22 <_vfiprintf_r+0x8ae>
 8024964:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8024968:	9204      	str	r2, [sp, #16]
 802496a:	ea54 0205 	orrs.w	r2, r4, r5
 802496e:	f040 825e 	bne.w	8024e2e <_vfiprintf_r+0x8ba>
 8024972:	9a01      	ldr	r2, [sp, #4]
 8024974:	2a00      	cmp	r2, #0
 8024976:	f000 8198 	beq.w	8024caa <_vfiprintf_r+0x736>
 802497a:	2b01      	cmp	r3, #1
 802497c:	f040 825a 	bne.w	8024e34 <_vfiprintf_r+0x8c0>
 8024980:	e13b      	b.n	8024bfa <_vfiprintf_r+0x686>
 8024982:	46a8      	mov	r8, r5
 8024984:	f01a 0510 	ands.w	r5, sl, #16
 8024988:	f858 4b04 	ldr.w	r4, [r8], #4
 802498c:	d001      	beq.n	8024992 <_vfiprintf_r+0x41e>
 802498e:	461d      	mov	r5, r3
 8024990:	e7de      	b.n	8024950 <_vfiprintf_r+0x3dc>
 8024992:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8024996:	d001      	beq.n	802499c <_vfiprintf_r+0x428>
 8024998:	b2a4      	uxth	r4, r4
 802499a:	e7d9      	b.n	8024950 <_vfiprintf_r+0x3dc>
 802499c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80249a0:	d0d6      	beq.n	8024950 <_vfiprintf_r+0x3dc>
 80249a2:	b2e4      	uxtb	r4, r4
 80249a4:	e7f3      	b.n	802498e <_vfiprintf_r+0x41a>
 80249a6:	46a8      	mov	r8, r5
 80249a8:	f647 0330 	movw	r3, #30768	@ 0x7830
 80249ac:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80249b0:	f858 4b04 	ldr.w	r4, [r8], #4
 80249b4:	4b03      	ldr	r3, [pc, #12]	@ (80249c4 <_vfiprintf_r+0x450>)
 80249b6:	9305      	str	r3, [sp, #20]
 80249b8:	2500      	movs	r5, #0
 80249ba:	f04a 0a02 	orr.w	sl, sl, #2
 80249be:	2302      	movs	r3, #2
 80249c0:	e7c9      	b.n	8024956 <_vfiprintf_r+0x3e2>
 80249c2:	bf00      	nop
 80249c4:	08034058 	.word	0x08034058
 80249c8:	9b01      	ldr	r3, [sp, #4]
 80249ca:	46a8      	mov	r8, r5
 80249cc:	1c5c      	adds	r4, r3, #1
 80249ce:	f04f 0500 	mov.w	r5, #0
 80249d2:	f858 9b04 	ldr.w	r9, [r8], #4
 80249d6:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 80249da:	f000 80d0 	beq.w	8024b7e <_vfiprintf_r+0x60a>
 80249de:	461a      	mov	r2, r3
 80249e0:	4629      	mov	r1, r5
 80249e2:	4648      	mov	r0, r9
 80249e4:	f7db fc0c 	bl	8000200 <memchr>
 80249e8:	4604      	mov	r4, r0
 80249ea:	b118      	cbz	r0, 80249f4 <_vfiprintf_r+0x480>
 80249ec:	eba0 0309 	sub.w	r3, r0, r9
 80249f0:	9301      	str	r3, [sp, #4]
 80249f2:	462c      	mov	r4, r5
 80249f4:	9b01      	ldr	r3, [sp, #4]
 80249f6:	42a3      	cmp	r3, r4
 80249f8:	bfb8      	it	lt
 80249fa:	4623      	movlt	r3, r4
 80249fc:	9304      	str	r3, [sp, #16]
 80249fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8024a02:	b113      	cbz	r3, 8024a0a <_vfiprintf_r+0x496>
 8024a04:	9b04      	ldr	r3, [sp, #16]
 8024a06:	3301      	adds	r3, #1
 8024a08:	9304      	str	r3, [sp, #16]
 8024a0a:	f01a 0302 	ands.w	r3, sl, #2
 8024a0e:	9308      	str	r3, [sp, #32]
 8024a10:	bf1e      	ittt	ne
 8024a12:	9b04      	ldrne	r3, [sp, #16]
 8024a14:	3302      	addne	r3, #2
 8024a16:	9304      	strne	r3, [sp, #16]
 8024a18:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8024a1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8024a1e:	d11f      	bne.n	8024a60 <_vfiprintf_r+0x4ec>
 8024a20:	9b02      	ldr	r3, [sp, #8]
 8024a22:	9a04      	ldr	r2, [sp, #16]
 8024a24:	1a9d      	subs	r5, r3, r2
 8024a26:	2d00      	cmp	r5, #0
 8024a28:	dd1a      	ble.n	8024a60 <_vfiprintf_r+0x4ec>
 8024a2a:	4ba9      	ldr	r3, [pc, #676]	@ (8024cd0 <_vfiprintf_r+0x75c>)
 8024a2c:	6033      	str	r3, [r6, #0]
 8024a2e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8024a32:	2d10      	cmp	r5, #16
 8024a34:	f102 0201 	add.w	r2, r2, #1
 8024a38:	f106 0008 	add.w	r0, r6, #8
 8024a3c:	f300 814e 	bgt.w	8024cdc <_vfiprintf_r+0x768>
 8024a40:	6075      	str	r5, [r6, #4]
 8024a42:	2a07      	cmp	r2, #7
 8024a44:	4465      	add	r5, ip
 8024a46:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8024a4a:	f340 815a 	ble.w	8024d02 <_vfiprintf_r+0x78e>
 8024a4e:	9800      	ldr	r0, [sp, #0]
 8024a50:	aa0e      	add	r2, sp, #56	@ 0x38
 8024a52:	4639      	mov	r1, r7
 8024a54:	f7ff fd5c 	bl	8024510 <__sprint_r>
 8024a58:	2800      	cmp	r0, #0
 8024a5a:	f040 81b4 	bne.w	8024dc6 <_vfiprintf_r+0x852>
 8024a5e:	ae11      	add	r6, sp, #68	@ 0x44
 8024a60:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8024a64:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8024a68:	b161      	cbz	r1, 8024a84 <_vfiprintf_r+0x510>
 8024a6a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8024a6e:	3301      	adds	r3, #1
 8024a70:	6031      	str	r1, [r6, #0]
 8024a72:	2101      	movs	r1, #1
 8024a74:	440a      	add	r2, r1
 8024a76:	2b07      	cmp	r3, #7
 8024a78:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8024a7c:	6071      	str	r1, [r6, #4]
 8024a7e:	f300 8142 	bgt.w	8024d06 <_vfiprintf_r+0x792>
 8024a82:	3608      	adds	r6, #8
 8024a84:	9908      	ldr	r1, [sp, #32]
 8024a86:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8024a8a:	b159      	cbz	r1, 8024aa4 <_vfiprintf_r+0x530>
 8024a8c:	a90d      	add	r1, sp, #52	@ 0x34
 8024a8e:	3301      	adds	r3, #1
 8024a90:	6031      	str	r1, [r6, #0]
 8024a92:	2102      	movs	r1, #2
 8024a94:	440a      	add	r2, r1
 8024a96:	2b07      	cmp	r3, #7
 8024a98:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8024a9c:	6071      	str	r1, [r6, #4]
 8024a9e:	f300 813b 	bgt.w	8024d18 <_vfiprintf_r+0x7a4>
 8024aa2:	3608      	adds	r6, #8
 8024aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024aa6:	2b80      	cmp	r3, #128	@ 0x80
 8024aa8:	d11f      	bne.n	8024aea <_vfiprintf_r+0x576>
 8024aaa:	9b02      	ldr	r3, [sp, #8]
 8024aac:	9a04      	ldr	r2, [sp, #16]
 8024aae:	1a9d      	subs	r5, r3, r2
 8024ab0:	2d00      	cmp	r5, #0
 8024ab2:	dd1a      	ble.n	8024aea <_vfiprintf_r+0x576>
 8024ab4:	4b87      	ldr	r3, [pc, #540]	@ (8024cd4 <_vfiprintf_r+0x760>)
 8024ab6:	6033      	str	r3, [r6, #0]
 8024ab8:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8024abc:	2d10      	cmp	r5, #16
 8024abe:	f102 0201 	add.w	r2, r2, #1
 8024ac2:	f106 0008 	add.w	r0, r6, #8
 8024ac6:	f300 8130 	bgt.w	8024d2a <_vfiprintf_r+0x7b6>
 8024aca:	6075      	str	r5, [r6, #4]
 8024acc:	2a07      	cmp	r2, #7
 8024ace:	4465      	add	r5, ip
 8024ad0:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8024ad4:	f340 813c 	ble.w	8024d50 <_vfiprintf_r+0x7dc>
 8024ad8:	9800      	ldr	r0, [sp, #0]
 8024ada:	aa0e      	add	r2, sp, #56	@ 0x38
 8024adc:	4639      	mov	r1, r7
 8024ade:	f7ff fd17 	bl	8024510 <__sprint_r>
 8024ae2:	2800      	cmp	r0, #0
 8024ae4:	f040 816f 	bne.w	8024dc6 <_vfiprintf_r+0x852>
 8024ae8:	ae11      	add	r6, sp, #68	@ 0x44
 8024aea:	9b01      	ldr	r3, [sp, #4]
 8024aec:	1ae4      	subs	r4, r4, r3
 8024aee:	2c00      	cmp	r4, #0
 8024af0:	dd1a      	ble.n	8024b28 <_vfiprintf_r+0x5b4>
 8024af2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8024af6:	4877      	ldr	r0, [pc, #476]	@ (8024cd4 <_vfiprintf_r+0x760>)
 8024af8:	6030      	str	r0, [r6, #0]
 8024afa:	2c10      	cmp	r4, #16
 8024afc:	f103 0301 	add.w	r3, r3, #1
 8024b00:	f106 0108 	add.w	r1, r6, #8
 8024b04:	f300 8126 	bgt.w	8024d54 <_vfiprintf_r+0x7e0>
 8024b08:	6074      	str	r4, [r6, #4]
 8024b0a:	2b07      	cmp	r3, #7
 8024b0c:	4414      	add	r4, r2
 8024b0e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8024b12:	f340 8130 	ble.w	8024d76 <_vfiprintf_r+0x802>
 8024b16:	9800      	ldr	r0, [sp, #0]
 8024b18:	aa0e      	add	r2, sp, #56	@ 0x38
 8024b1a:	4639      	mov	r1, r7
 8024b1c:	f7ff fcf8 	bl	8024510 <__sprint_r>
 8024b20:	2800      	cmp	r0, #0
 8024b22:	f040 8150 	bne.w	8024dc6 <_vfiprintf_r+0x852>
 8024b26:	ae11      	add	r6, sp, #68	@ 0x44
 8024b28:	9b01      	ldr	r3, [sp, #4]
 8024b2a:	9a01      	ldr	r2, [sp, #4]
 8024b2c:	6073      	str	r3, [r6, #4]
 8024b2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024b30:	f8c6 9000 	str.w	r9, [r6]
 8024b34:	4413      	add	r3, r2
 8024b36:	9310      	str	r3, [sp, #64]	@ 0x40
 8024b38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024b3a:	3301      	adds	r3, #1
 8024b3c:	2b07      	cmp	r3, #7
 8024b3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024b40:	f300 811b 	bgt.w	8024d7a <_vfiprintf_r+0x806>
 8024b44:	f106 0308 	add.w	r3, r6, #8
 8024b48:	f01a 0f04 	tst.w	sl, #4
 8024b4c:	f040 811d 	bne.w	8024d8a <_vfiprintf_r+0x816>
 8024b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024b54:	9904      	ldr	r1, [sp, #16]
 8024b56:	428a      	cmp	r2, r1
 8024b58:	bfac      	ite	ge
 8024b5a:	189b      	addge	r3, r3, r2
 8024b5c:	185b      	addlt	r3, r3, r1
 8024b5e:	9303      	str	r3, [sp, #12]
 8024b60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024b62:	b13b      	cbz	r3, 8024b74 <_vfiprintf_r+0x600>
 8024b64:	9800      	ldr	r0, [sp, #0]
 8024b66:	aa0e      	add	r2, sp, #56	@ 0x38
 8024b68:	4639      	mov	r1, r7
 8024b6a:	f7ff fcd1 	bl	8024510 <__sprint_r>
 8024b6e:	2800      	cmp	r0, #0
 8024b70:	f040 8129 	bne.w	8024dc6 <_vfiprintf_r+0x852>
 8024b74:	2300      	movs	r3, #0
 8024b76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024b78:	4645      	mov	r5, r8
 8024b7a:	ae11      	add	r6, sp, #68	@ 0x44
 8024b7c:	e55b      	b.n	8024636 <_vfiprintf_r+0xc2>
 8024b7e:	4648      	mov	r0, r9
 8024b80:	f7db fb8e 	bl	80002a0 <strlen>
 8024b84:	9001      	str	r0, [sp, #4]
 8024b86:	e734      	b.n	80249f2 <_vfiprintf_r+0x47e>
 8024b88:	f04a 0a10 	orr.w	sl, sl, #16
 8024b8c:	f01a 0320 	ands.w	r3, sl, #32
 8024b90:	d008      	beq.n	8024ba4 <_vfiprintf_r+0x630>
 8024b92:	3507      	adds	r5, #7
 8024b94:	f025 0507 	bic.w	r5, r5, #7
 8024b98:	46a8      	mov	r8, r5
 8024b9a:	686d      	ldr	r5, [r5, #4]
 8024b9c:	f858 4b08 	ldr.w	r4, [r8], #8
 8024ba0:	2301      	movs	r3, #1
 8024ba2:	e6d8      	b.n	8024956 <_vfiprintf_r+0x3e2>
 8024ba4:	46a8      	mov	r8, r5
 8024ba6:	f01a 0510 	ands.w	r5, sl, #16
 8024baa:	f858 4b04 	ldr.w	r4, [r8], #4
 8024bae:	d001      	beq.n	8024bb4 <_vfiprintf_r+0x640>
 8024bb0:	461d      	mov	r5, r3
 8024bb2:	e7f5      	b.n	8024ba0 <_vfiprintf_r+0x62c>
 8024bb4:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8024bb8:	d001      	beq.n	8024bbe <_vfiprintf_r+0x64a>
 8024bba:	b2a4      	uxth	r4, r4
 8024bbc:	e7f0      	b.n	8024ba0 <_vfiprintf_r+0x62c>
 8024bbe:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8024bc2:	d0ed      	beq.n	8024ba0 <_vfiprintf_r+0x62c>
 8024bc4:	b2e4      	uxtb	r4, r4
 8024bc6:	e7f3      	b.n	8024bb0 <_vfiprintf_r+0x63c>
 8024bc8:	4a43      	ldr	r2, [pc, #268]	@ (8024cd8 <_vfiprintf_r+0x764>)
 8024bca:	e5c9      	b.n	8024760 <_vfiprintf_r+0x1ec>
 8024bcc:	46a8      	mov	r8, r5
 8024bce:	f01a 0510 	ands.w	r5, sl, #16
 8024bd2:	f858 4b04 	ldr.w	r4, [r8], #4
 8024bd6:	d001      	beq.n	8024bdc <_vfiprintf_r+0x668>
 8024bd8:	4615      	mov	r5, r2
 8024bda:	e5cd      	b.n	8024778 <_vfiprintf_r+0x204>
 8024bdc:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8024be0:	d001      	beq.n	8024be6 <_vfiprintf_r+0x672>
 8024be2:	b2a4      	uxth	r4, r4
 8024be4:	e5c8      	b.n	8024778 <_vfiprintf_r+0x204>
 8024be6:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8024bea:	f43f adc5 	beq.w	8024778 <_vfiprintf_r+0x204>
 8024bee:	b2e4      	uxtb	r4, r4
 8024bf0:	e7f2      	b.n	8024bd8 <_vfiprintf_r+0x664>
 8024bf2:	2c0a      	cmp	r4, #10
 8024bf4:	f175 0300 	sbcs.w	r3, r5, #0
 8024bf8:	d206      	bcs.n	8024c08 <_vfiprintf_r+0x694>
 8024bfa:	3430      	adds	r4, #48	@ 0x30
 8024bfc:	b2e4      	uxtb	r4, r4
 8024bfe:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8024c02:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8024c06:	e131      	b.n	8024e6c <_vfiprintf_r+0x8f8>
 8024c08:	ab3a      	add	r3, sp, #232	@ 0xe8
 8024c0a:	9308      	str	r3, [sp, #32]
 8024c0c:	9b04      	ldr	r3, [sp, #16]
 8024c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8024c12:	f04f 0a00 	mov.w	sl, #0
 8024c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8024c18:	220a      	movs	r2, #10
 8024c1a:	2300      	movs	r3, #0
 8024c1c:	4620      	mov	r0, r4
 8024c1e:	4629      	mov	r1, r5
 8024c20:	f7dc f89a 	bl	8000d58 <__aeabi_uldivmod>
 8024c24:	460b      	mov	r3, r1
 8024c26:	9908      	ldr	r1, [sp, #32]
 8024c28:	900b      	str	r0, [sp, #44]	@ 0x2c
 8024c2a:	3230      	adds	r2, #48	@ 0x30
 8024c2c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8024c30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024c32:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8024c36:	f10a 0a01 	add.w	sl, sl, #1
 8024c3a:	b1e2      	cbz	r2, 8024c76 <_vfiprintf_r+0x702>
 8024c3c:	9a06      	ldr	r2, [sp, #24]
 8024c3e:	7812      	ldrb	r2, [r2, #0]
 8024c40:	4552      	cmp	r2, sl
 8024c42:	d118      	bne.n	8024c76 <_vfiprintf_r+0x702>
 8024c44:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8024c48:	d015      	beq.n	8024c76 <_vfiprintf_r+0x702>
 8024c4a:	2c0a      	cmp	r4, #10
 8024c4c:	f175 0200 	sbcs.w	r2, r5, #0
 8024c50:	d311      	bcc.n	8024c76 <_vfiprintf_r+0x702>
 8024c52:	9308      	str	r3, [sp, #32]
 8024c54:	9b07      	ldr	r3, [sp, #28]
 8024c56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024c58:	eba9 0903 	sub.w	r9, r9, r3
 8024c5c:	461a      	mov	r2, r3
 8024c5e:	4648      	mov	r0, r9
 8024c60:	f000 ff3d 	bl	8025ade <strncpy>
 8024c64:	9b06      	ldr	r3, [sp, #24]
 8024c66:	785a      	ldrb	r2, [r3, #1]
 8024c68:	9b08      	ldr	r3, [sp, #32]
 8024c6a:	b172      	cbz	r2, 8024c8a <_vfiprintf_r+0x716>
 8024c6c:	9a06      	ldr	r2, [sp, #24]
 8024c6e:	3201      	adds	r2, #1
 8024c70:	9206      	str	r2, [sp, #24]
 8024c72:	f04f 0a00 	mov.w	sl, #0
 8024c76:	2c0a      	cmp	r4, #10
 8024c78:	f175 0500 	sbcs.w	r5, r5, #0
 8024c7c:	f0c0 80f6 	bcc.w	8024e6c <_vfiprintf_r+0x8f8>
 8024c80:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024c82:	f8cd 9020 	str.w	r9, [sp, #32]
 8024c86:	461d      	mov	r5, r3
 8024c88:	e7c6      	b.n	8024c18 <_vfiprintf_r+0x6a4>
 8024c8a:	4692      	mov	sl, r2
 8024c8c:	e7f3      	b.n	8024c76 <_vfiprintf_r+0x702>
 8024c8e:	f004 030f 	and.w	r3, r4, #15
 8024c92:	9a05      	ldr	r2, [sp, #20]
 8024c94:	0924      	lsrs	r4, r4, #4
 8024c96:	5cd3      	ldrb	r3, [r2, r3]
 8024c98:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8024c9c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8024ca0:	092d      	lsrs	r5, r5, #4
 8024ca2:	ea54 0305 	orrs.w	r3, r4, r5
 8024ca6:	d1f2      	bne.n	8024c8e <_vfiprintf_r+0x71a>
 8024ca8:	e0e0      	b.n	8024e6c <_vfiprintf_r+0x8f8>
 8024caa:	b923      	cbnz	r3, 8024cb6 <_vfiprintf_r+0x742>
 8024cac:	f01a 0f01 	tst.w	sl, #1
 8024cb0:	d001      	beq.n	8024cb6 <_vfiprintf_r+0x742>
 8024cb2:	2430      	movs	r4, #48	@ 0x30
 8024cb4:	e7a3      	b.n	8024bfe <_vfiprintf_r+0x68a>
 8024cb6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8024cba:	e0d7      	b.n	8024e6c <_vfiprintf_r+0x8f8>
 8024cbc:	2b00      	cmp	r3, #0
 8024cbe:	f000 80a3 	beq.w	8024e08 <_vfiprintf_r+0x894>
 8024cc2:	2400      	movs	r4, #0
 8024cc4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8024cc8:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8024ccc:	46a8      	mov	r8, r5
 8024cce:	e5e0      	b.n	8024892 <_vfiprintf_r+0x31e>
 8024cd0:	080340ac 	.word	0x080340ac
 8024cd4:	0803409c 	.word	0x0803409c
 8024cd8:	08034069 	.word	0x08034069
 8024cdc:	2110      	movs	r1, #16
 8024cde:	6071      	str	r1, [r6, #4]
 8024ce0:	2a07      	cmp	r2, #7
 8024ce2:	4461      	add	r1, ip
 8024ce4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8024ce8:	dd08      	ble.n	8024cfc <_vfiprintf_r+0x788>
 8024cea:	9800      	ldr	r0, [sp, #0]
 8024cec:	aa0e      	add	r2, sp, #56	@ 0x38
 8024cee:	4639      	mov	r1, r7
 8024cf0:	f7ff fc0e 	bl	8024510 <__sprint_r>
 8024cf4:	2800      	cmp	r0, #0
 8024cf6:	d166      	bne.n	8024dc6 <_vfiprintf_r+0x852>
 8024cf8:	4b60      	ldr	r3, [pc, #384]	@ (8024e7c <_vfiprintf_r+0x908>)
 8024cfa:	a811      	add	r0, sp, #68	@ 0x44
 8024cfc:	3d10      	subs	r5, #16
 8024cfe:	4606      	mov	r6, r0
 8024d00:	e694      	b.n	8024a2c <_vfiprintf_r+0x4b8>
 8024d02:	4606      	mov	r6, r0
 8024d04:	e6ac      	b.n	8024a60 <_vfiprintf_r+0x4ec>
 8024d06:	9800      	ldr	r0, [sp, #0]
 8024d08:	aa0e      	add	r2, sp, #56	@ 0x38
 8024d0a:	4639      	mov	r1, r7
 8024d0c:	f7ff fc00 	bl	8024510 <__sprint_r>
 8024d10:	2800      	cmp	r0, #0
 8024d12:	d158      	bne.n	8024dc6 <_vfiprintf_r+0x852>
 8024d14:	ae11      	add	r6, sp, #68	@ 0x44
 8024d16:	e6b5      	b.n	8024a84 <_vfiprintf_r+0x510>
 8024d18:	9800      	ldr	r0, [sp, #0]
 8024d1a:	aa0e      	add	r2, sp, #56	@ 0x38
 8024d1c:	4639      	mov	r1, r7
 8024d1e:	f7ff fbf7 	bl	8024510 <__sprint_r>
 8024d22:	2800      	cmp	r0, #0
 8024d24:	d14f      	bne.n	8024dc6 <_vfiprintf_r+0x852>
 8024d26:	ae11      	add	r6, sp, #68	@ 0x44
 8024d28:	e6bc      	b.n	8024aa4 <_vfiprintf_r+0x530>
 8024d2a:	2110      	movs	r1, #16
 8024d2c:	6071      	str	r1, [r6, #4]
 8024d2e:	2a07      	cmp	r2, #7
 8024d30:	4461      	add	r1, ip
 8024d32:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8024d36:	dd08      	ble.n	8024d4a <_vfiprintf_r+0x7d6>
 8024d38:	9800      	ldr	r0, [sp, #0]
 8024d3a:	aa0e      	add	r2, sp, #56	@ 0x38
 8024d3c:	4639      	mov	r1, r7
 8024d3e:	f7ff fbe7 	bl	8024510 <__sprint_r>
 8024d42:	2800      	cmp	r0, #0
 8024d44:	d13f      	bne.n	8024dc6 <_vfiprintf_r+0x852>
 8024d46:	4b4e      	ldr	r3, [pc, #312]	@ (8024e80 <_vfiprintf_r+0x90c>)
 8024d48:	a811      	add	r0, sp, #68	@ 0x44
 8024d4a:	3d10      	subs	r5, #16
 8024d4c:	4606      	mov	r6, r0
 8024d4e:	e6b2      	b.n	8024ab6 <_vfiprintf_r+0x542>
 8024d50:	4606      	mov	r6, r0
 8024d52:	e6ca      	b.n	8024aea <_vfiprintf_r+0x576>
 8024d54:	2010      	movs	r0, #16
 8024d56:	4402      	add	r2, r0
 8024d58:	2b07      	cmp	r3, #7
 8024d5a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8024d5e:	6070      	str	r0, [r6, #4]
 8024d60:	dd06      	ble.n	8024d70 <_vfiprintf_r+0x7fc>
 8024d62:	9800      	ldr	r0, [sp, #0]
 8024d64:	aa0e      	add	r2, sp, #56	@ 0x38
 8024d66:	4639      	mov	r1, r7
 8024d68:	f7ff fbd2 	bl	8024510 <__sprint_r>
 8024d6c:	bb58      	cbnz	r0, 8024dc6 <_vfiprintf_r+0x852>
 8024d6e:	a911      	add	r1, sp, #68	@ 0x44
 8024d70:	3c10      	subs	r4, #16
 8024d72:	460e      	mov	r6, r1
 8024d74:	e6bd      	b.n	8024af2 <_vfiprintf_r+0x57e>
 8024d76:	460e      	mov	r6, r1
 8024d78:	e6d6      	b.n	8024b28 <_vfiprintf_r+0x5b4>
 8024d7a:	9800      	ldr	r0, [sp, #0]
 8024d7c:	aa0e      	add	r2, sp, #56	@ 0x38
 8024d7e:	4639      	mov	r1, r7
 8024d80:	f7ff fbc6 	bl	8024510 <__sprint_r>
 8024d84:	b9f8      	cbnz	r0, 8024dc6 <_vfiprintf_r+0x852>
 8024d86:	ab11      	add	r3, sp, #68	@ 0x44
 8024d88:	e6de      	b.n	8024b48 <_vfiprintf_r+0x5d4>
 8024d8a:	9a02      	ldr	r2, [sp, #8]
 8024d8c:	9904      	ldr	r1, [sp, #16]
 8024d8e:	1a54      	subs	r4, r2, r1
 8024d90:	2c00      	cmp	r4, #0
 8024d92:	f77f aedd 	ble.w	8024b50 <_vfiprintf_r+0x5dc>
 8024d96:	4d39      	ldr	r5, [pc, #228]	@ (8024e7c <_vfiprintf_r+0x908>)
 8024d98:	2610      	movs	r6, #16
 8024d9a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8024d9e:	2c10      	cmp	r4, #16
 8024da0:	f102 0201 	add.w	r2, r2, #1
 8024da4:	601d      	str	r5, [r3, #0]
 8024da6:	dc1d      	bgt.n	8024de4 <_vfiprintf_r+0x870>
 8024da8:	605c      	str	r4, [r3, #4]
 8024daa:	2a07      	cmp	r2, #7
 8024dac:	440c      	add	r4, r1
 8024dae:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8024db2:	f77f aecd 	ble.w	8024b50 <_vfiprintf_r+0x5dc>
 8024db6:	9800      	ldr	r0, [sp, #0]
 8024db8:	aa0e      	add	r2, sp, #56	@ 0x38
 8024dba:	4639      	mov	r1, r7
 8024dbc:	f7ff fba8 	bl	8024510 <__sprint_r>
 8024dc0:	2800      	cmp	r0, #0
 8024dc2:	f43f aec5 	beq.w	8024b50 <_vfiprintf_r+0x5dc>
 8024dc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024dc8:	07d9      	lsls	r1, r3, #31
 8024dca:	d405      	bmi.n	8024dd8 <_vfiprintf_r+0x864>
 8024dcc:	89bb      	ldrh	r3, [r7, #12]
 8024dce:	059a      	lsls	r2, r3, #22
 8024dd0:	d402      	bmi.n	8024dd8 <_vfiprintf_r+0x864>
 8024dd2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8024dd4:	f002 f877 	bl	8026ec6 <__retarget_lock_release_recursive>
 8024dd8:	89bb      	ldrh	r3, [r7, #12]
 8024dda:	065b      	lsls	r3, r3, #25
 8024ddc:	f57f abfb 	bpl.w	80245d6 <_vfiprintf_r+0x62>
 8024de0:	f7ff bbf6 	b.w	80245d0 <_vfiprintf_r+0x5c>
 8024de4:	3110      	adds	r1, #16
 8024de6:	2a07      	cmp	r2, #7
 8024de8:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8024dec:	605e      	str	r6, [r3, #4]
 8024dee:	dc02      	bgt.n	8024df6 <_vfiprintf_r+0x882>
 8024df0:	3308      	adds	r3, #8
 8024df2:	3c10      	subs	r4, #16
 8024df4:	e7d1      	b.n	8024d9a <_vfiprintf_r+0x826>
 8024df6:	9800      	ldr	r0, [sp, #0]
 8024df8:	aa0e      	add	r2, sp, #56	@ 0x38
 8024dfa:	4639      	mov	r1, r7
 8024dfc:	f7ff fb88 	bl	8024510 <__sprint_r>
 8024e00:	2800      	cmp	r0, #0
 8024e02:	d1e0      	bne.n	8024dc6 <_vfiprintf_r+0x852>
 8024e04:	ab11      	add	r3, sp, #68	@ 0x44
 8024e06:	e7f4      	b.n	8024df2 <_vfiprintf_r+0x87e>
 8024e08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024e0a:	b913      	cbnz	r3, 8024e12 <_vfiprintf_r+0x89e>
 8024e0c:	2300      	movs	r3, #0
 8024e0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024e10:	e7d9      	b.n	8024dc6 <_vfiprintf_r+0x852>
 8024e12:	9800      	ldr	r0, [sp, #0]
 8024e14:	aa0e      	add	r2, sp, #56	@ 0x38
 8024e16:	4639      	mov	r1, r7
 8024e18:	f7ff fb7a 	bl	8024510 <__sprint_r>
 8024e1c:	2800      	cmp	r0, #0
 8024e1e:	d0f5      	beq.n	8024e0c <_vfiprintf_r+0x898>
 8024e20:	e7d1      	b.n	8024dc6 <_vfiprintf_r+0x852>
 8024e22:	ea54 0205 	orrs.w	r2, r4, r5
 8024e26:	f8cd a010 	str.w	sl, [sp, #16]
 8024e2a:	f43f ada6 	beq.w	802497a <_vfiprintf_r+0x406>
 8024e2e:	2b01      	cmp	r3, #1
 8024e30:	f43f aedf 	beq.w	8024bf2 <_vfiprintf_r+0x67e>
 8024e34:	2b02      	cmp	r3, #2
 8024e36:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8024e3a:	f43f af28 	beq.w	8024c8e <_vfiprintf_r+0x71a>
 8024e3e:	f004 0307 	and.w	r3, r4, #7
 8024e42:	08e4      	lsrs	r4, r4, #3
 8024e44:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8024e48:	08ed      	lsrs	r5, r5, #3
 8024e4a:	3330      	adds	r3, #48	@ 0x30
 8024e4c:	ea54 0105 	orrs.w	r1, r4, r5
 8024e50:	464a      	mov	r2, r9
 8024e52:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8024e56:	d1f2      	bne.n	8024e3e <_vfiprintf_r+0x8ca>
 8024e58:	9904      	ldr	r1, [sp, #16]
 8024e5a:	07c8      	lsls	r0, r1, #31
 8024e5c:	d506      	bpl.n	8024e6c <_vfiprintf_r+0x8f8>
 8024e5e:	2b30      	cmp	r3, #48	@ 0x30
 8024e60:	d004      	beq.n	8024e6c <_vfiprintf_r+0x8f8>
 8024e62:	2330      	movs	r3, #48	@ 0x30
 8024e64:	f809 3c01 	strb.w	r3, [r9, #-1]
 8024e68:	f1a2 0902 	sub.w	r9, r2, #2
 8024e6c:	ab3a      	add	r3, sp, #232	@ 0xe8
 8024e6e:	eba3 0309 	sub.w	r3, r3, r9
 8024e72:	9c01      	ldr	r4, [sp, #4]
 8024e74:	f8dd a010 	ldr.w	sl, [sp, #16]
 8024e78:	9301      	str	r3, [sp, #4]
 8024e7a:	e5bb      	b.n	80249f4 <_vfiprintf_r+0x480>
 8024e7c:	080340ac 	.word	0x080340ac
 8024e80:	0803409c 	.word	0x0803409c

08024e84 <__sbprintf>:
 8024e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e86:	461f      	mov	r7, r3
 8024e88:	898b      	ldrh	r3, [r1, #12]
 8024e8a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8024e8e:	f023 0302 	bic.w	r3, r3, #2
 8024e92:	f8ad 300c 	strh.w	r3, [sp, #12]
 8024e96:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8024e98:	9319      	str	r3, [sp, #100]	@ 0x64
 8024e9a:	89cb      	ldrh	r3, [r1, #14]
 8024e9c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024ea0:	69cb      	ldr	r3, [r1, #28]
 8024ea2:	9307      	str	r3, [sp, #28]
 8024ea4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8024ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ea8:	ab1a      	add	r3, sp, #104	@ 0x68
 8024eaa:	9300      	str	r3, [sp, #0]
 8024eac:	9304      	str	r3, [sp, #16]
 8024eae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024eb2:	4615      	mov	r5, r2
 8024eb4:	4606      	mov	r6, r0
 8024eb6:	9302      	str	r3, [sp, #8]
 8024eb8:	9305      	str	r3, [sp, #20]
 8024eba:	a816      	add	r0, sp, #88	@ 0x58
 8024ebc:	2300      	movs	r3, #0
 8024ebe:	460c      	mov	r4, r1
 8024ec0:	9306      	str	r3, [sp, #24]
 8024ec2:	f001 fffb 	bl	8026ebc <__retarget_lock_init_recursive>
 8024ec6:	462a      	mov	r2, r5
 8024ec8:	463b      	mov	r3, r7
 8024eca:	4669      	mov	r1, sp
 8024ecc:	4630      	mov	r0, r6
 8024ece:	f7ff fb51 	bl	8024574 <_vfiprintf_r>
 8024ed2:	1e05      	subs	r5, r0, #0
 8024ed4:	db07      	blt.n	8024ee6 <__sbprintf+0x62>
 8024ed6:	4669      	mov	r1, sp
 8024ed8:	4630      	mov	r0, r6
 8024eda:	f000 f9d1 	bl	8025280 <_fflush_r>
 8024ede:	2800      	cmp	r0, #0
 8024ee0:	bf18      	it	ne
 8024ee2:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8024ee6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8024eea:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8024eec:	065b      	lsls	r3, r3, #25
 8024eee:	bf42      	ittt	mi
 8024ef0:	89a3      	ldrhmi	r3, [r4, #12]
 8024ef2:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8024ef6:	81a3      	strhmi	r3, [r4, #12]
 8024ef8:	f001 ffe1 	bl	8026ebe <__retarget_lock_close_recursive>
 8024efc:	4628      	mov	r0, r5
 8024efe:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8024f02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024f04 <putchar>:
 8024f04:	4b02      	ldr	r3, [pc, #8]	@ (8024f10 <putchar+0xc>)
 8024f06:	4601      	mov	r1, r0
 8024f08:	6818      	ldr	r0, [r3, #0]
 8024f0a:	6882      	ldr	r2, [r0, #8]
 8024f0c:	f007 bacc 	b.w	802c4a8 <_putc_r>
 8024f10:	20000430 	.word	0x20000430

08024f14 <_puts_r>:
 8024f14:	b530      	push	{r4, r5, lr}
 8024f16:	4605      	mov	r5, r0
 8024f18:	b089      	sub	sp, #36	@ 0x24
 8024f1a:	4608      	mov	r0, r1
 8024f1c:	460c      	mov	r4, r1
 8024f1e:	f7db f9bf 	bl	80002a0 <strlen>
 8024f22:	4b1e      	ldr	r3, [pc, #120]	@ (8024f9c <_puts_r+0x88>)
 8024f24:	9306      	str	r3, [sp, #24]
 8024f26:	2301      	movs	r3, #1
 8024f28:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8024f2c:	9307      	str	r3, [sp, #28]
 8024f2e:	4418      	add	r0, r3
 8024f30:	ab04      	add	r3, sp, #16
 8024f32:	9301      	str	r3, [sp, #4]
 8024f34:	2302      	movs	r3, #2
 8024f36:	9302      	str	r3, [sp, #8]
 8024f38:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8024f3a:	68ac      	ldr	r4, [r5, #8]
 8024f3c:	9003      	str	r0, [sp, #12]
 8024f3e:	b913      	cbnz	r3, 8024f46 <_puts_r+0x32>
 8024f40:	4628      	mov	r0, r5
 8024f42:	f000 fadf 	bl	8025504 <__sinit>
 8024f46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024f48:	07db      	lsls	r3, r3, #31
 8024f4a:	d405      	bmi.n	8024f58 <_puts_r+0x44>
 8024f4c:	89a3      	ldrh	r3, [r4, #12]
 8024f4e:	0598      	lsls	r0, r3, #22
 8024f50:	d402      	bmi.n	8024f58 <_puts_r+0x44>
 8024f52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024f54:	f001 ffb5 	bl	8026ec2 <__retarget_lock_acquire_recursive>
 8024f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024f5c:	0499      	lsls	r1, r3, #18
 8024f5e:	d406      	bmi.n	8024f6e <_puts_r+0x5a>
 8024f60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8024f64:	81a3      	strh	r3, [r4, #12]
 8024f66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024f68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8024f6c:	6663      	str	r3, [r4, #100]	@ 0x64
 8024f6e:	4628      	mov	r0, r5
 8024f70:	aa01      	add	r2, sp, #4
 8024f72:	4621      	mov	r1, r4
 8024f74:	f000 fb18 	bl	80255a8 <__sfvwrite_r>
 8024f78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024f7a:	2800      	cmp	r0, #0
 8024f7c:	bf0c      	ite	eq
 8024f7e:	250a      	moveq	r5, #10
 8024f80:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8024f84:	07da      	lsls	r2, r3, #31
 8024f86:	d405      	bmi.n	8024f94 <_puts_r+0x80>
 8024f88:	89a3      	ldrh	r3, [r4, #12]
 8024f8a:	059b      	lsls	r3, r3, #22
 8024f8c:	d402      	bmi.n	8024f94 <_puts_r+0x80>
 8024f8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024f90:	f001 ff99 	bl	8026ec6 <__retarget_lock_release_recursive>
 8024f94:	4628      	mov	r0, r5
 8024f96:	b009      	add	sp, #36	@ 0x24
 8024f98:	bd30      	pop	{r4, r5, pc}
 8024f9a:	bf00      	nop
 8024f9c:	08034046 	.word	0x08034046

08024fa0 <puts>:
 8024fa0:	4b02      	ldr	r3, [pc, #8]	@ (8024fac <puts+0xc>)
 8024fa2:	4601      	mov	r1, r0
 8024fa4:	6818      	ldr	r0, [r3, #0]
 8024fa6:	f7ff bfb5 	b.w	8024f14 <_puts_r>
 8024faa:	bf00      	nop
 8024fac:	20000430 	.word	0x20000430

08024fb0 <srand>:
 8024fb0:	4b03      	ldr	r3, [pc, #12]	@ (8024fc0 <srand+0x10>)
 8024fb2:	681b      	ldr	r3, [r3, #0]
 8024fb4:	2200      	movs	r2, #0
 8024fb6:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 8024fba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8024fbe:	4770      	bx	lr
 8024fc0:	20000430 	.word	0x20000430

08024fc4 <rand>:
 8024fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8024ff0 <rand+0x2c>)
 8024fc6:	480b      	ldr	r0, [pc, #44]	@ (8024ff4 <rand+0x30>)
 8024fc8:	6819      	ldr	r1, [r3, #0]
 8024fca:	4a0b      	ldr	r2, [pc, #44]	@ (8024ff8 <rand+0x34>)
 8024fcc:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 8024fd0:	b510      	push	{r4, lr}
 8024fd2:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 8024fd6:	4358      	muls	r0, r3
 8024fd8:	fb02 0004 	mla	r0, r2, r4, r0
 8024fdc:	fba3 3202 	umull	r3, r2, r3, r2
 8024fe0:	3301      	adds	r3, #1
 8024fe2:	eb40 0002 	adc.w	r0, r0, r2
 8024fe6:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 8024fea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8024fee:	bd10      	pop	{r4, pc}
 8024ff0:	20000430 	.word	0x20000430
 8024ff4:	5851f42d 	.word	0x5851f42d
 8024ff8:	4c957f2d 	.word	0x4c957f2d

08024ffc <snprintf>:
 8024ffc:	b40c      	push	{r2, r3}
 8024ffe:	b530      	push	{r4, r5, lr}
 8025000:	4b17      	ldr	r3, [pc, #92]	@ (8025060 <snprintf+0x64>)
 8025002:	1e0c      	subs	r4, r1, #0
 8025004:	681d      	ldr	r5, [r3, #0]
 8025006:	b09d      	sub	sp, #116	@ 0x74
 8025008:	da08      	bge.n	802501c <snprintf+0x20>
 802500a:	238b      	movs	r3, #139	@ 0x8b
 802500c:	602b      	str	r3, [r5, #0]
 802500e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025012:	b01d      	add	sp, #116	@ 0x74
 8025014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025018:	b002      	add	sp, #8
 802501a:	4770      	bx	lr
 802501c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8025020:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025024:	bf14      	ite	ne
 8025026:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802502a:	4623      	moveq	r3, r4
 802502c:	9304      	str	r3, [sp, #16]
 802502e:	9307      	str	r3, [sp, #28]
 8025030:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025034:	9002      	str	r0, [sp, #8]
 8025036:	9006      	str	r0, [sp, #24]
 8025038:	f8ad 3016 	strh.w	r3, [sp, #22]
 802503c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802503e:	ab21      	add	r3, sp, #132	@ 0x84
 8025040:	a902      	add	r1, sp, #8
 8025042:	4628      	mov	r0, r5
 8025044:	9301      	str	r3, [sp, #4]
 8025046:	f004 fe7b 	bl	8029d40 <_svfprintf_r>
 802504a:	1c43      	adds	r3, r0, #1
 802504c:	bfbc      	itt	lt
 802504e:	238b      	movlt	r3, #139	@ 0x8b
 8025050:	602b      	strlt	r3, [r5, #0]
 8025052:	2c00      	cmp	r4, #0
 8025054:	d0dd      	beq.n	8025012 <snprintf+0x16>
 8025056:	9b02      	ldr	r3, [sp, #8]
 8025058:	2200      	movs	r2, #0
 802505a:	701a      	strb	r2, [r3, #0]
 802505c:	e7d9      	b.n	8025012 <snprintf+0x16>
 802505e:	bf00      	nop
 8025060:	20000430 	.word	0x20000430

08025064 <_strtol_l.constprop.0>:
 8025064:	2b24      	cmp	r3, #36	@ 0x24
 8025066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802506a:	4686      	mov	lr, r0
 802506c:	4690      	mov	r8, r2
 802506e:	d801      	bhi.n	8025074 <_strtol_l.constprop.0+0x10>
 8025070:	2b01      	cmp	r3, #1
 8025072:	d106      	bne.n	8025082 <_strtol_l.constprop.0+0x1e>
 8025074:	f001 fef0 	bl	8026e58 <__errno>
 8025078:	2316      	movs	r3, #22
 802507a:	6003      	str	r3, [r0, #0]
 802507c:	2000      	movs	r0, #0
 802507e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025082:	4834      	ldr	r0, [pc, #208]	@ (8025154 <_strtol_l.constprop.0+0xf0>)
 8025084:	460d      	mov	r5, r1
 8025086:	462a      	mov	r2, r5
 8025088:	f815 4b01 	ldrb.w	r4, [r5], #1
 802508c:	5d06      	ldrb	r6, [r0, r4]
 802508e:	f016 0608 	ands.w	r6, r6, #8
 8025092:	d1f8      	bne.n	8025086 <_strtol_l.constprop.0+0x22>
 8025094:	2c2d      	cmp	r4, #45	@ 0x2d
 8025096:	d12d      	bne.n	80250f4 <_strtol_l.constprop.0+0x90>
 8025098:	782c      	ldrb	r4, [r5, #0]
 802509a:	2601      	movs	r6, #1
 802509c:	1c95      	adds	r5, r2, #2
 802509e:	f033 0210 	bics.w	r2, r3, #16
 80250a2:	d109      	bne.n	80250b8 <_strtol_l.constprop.0+0x54>
 80250a4:	2c30      	cmp	r4, #48	@ 0x30
 80250a6:	d12a      	bne.n	80250fe <_strtol_l.constprop.0+0x9a>
 80250a8:	782a      	ldrb	r2, [r5, #0]
 80250aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80250ae:	2a58      	cmp	r2, #88	@ 0x58
 80250b0:	d125      	bne.n	80250fe <_strtol_l.constprop.0+0x9a>
 80250b2:	786c      	ldrb	r4, [r5, #1]
 80250b4:	2310      	movs	r3, #16
 80250b6:	3502      	adds	r5, #2
 80250b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80250bc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80250c0:	2200      	movs	r2, #0
 80250c2:	fbbc f9f3 	udiv	r9, ip, r3
 80250c6:	4610      	mov	r0, r2
 80250c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80250cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80250d0:	2f09      	cmp	r7, #9
 80250d2:	d81b      	bhi.n	802510c <_strtol_l.constprop.0+0xa8>
 80250d4:	463c      	mov	r4, r7
 80250d6:	42a3      	cmp	r3, r4
 80250d8:	dd27      	ble.n	802512a <_strtol_l.constprop.0+0xc6>
 80250da:	1c57      	adds	r7, r2, #1
 80250dc:	d007      	beq.n	80250ee <_strtol_l.constprop.0+0x8a>
 80250de:	4581      	cmp	r9, r0
 80250e0:	d320      	bcc.n	8025124 <_strtol_l.constprop.0+0xc0>
 80250e2:	d101      	bne.n	80250e8 <_strtol_l.constprop.0+0x84>
 80250e4:	45a2      	cmp	sl, r4
 80250e6:	db1d      	blt.n	8025124 <_strtol_l.constprop.0+0xc0>
 80250e8:	fb00 4003 	mla	r0, r0, r3, r4
 80250ec:	2201      	movs	r2, #1
 80250ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80250f2:	e7eb      	b.n	80250cc <_strtol_l.constprop.0+0x68>
 80250f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80250f6:	bf04      	itt	eq
 80250f8:	782c      	ldrbeq	r4, [r5, #0]
 80250fa:	1c95      	addeq	r5, r2, #2
 80250fc:	e7cf      	b.n	802509e <_strtol_l.constprop.0+0x3a>
 80250fe:	2b00      	cmp	r3, #0
 8025100:	d1da      	bne.n	80250b8 <_strtol_l.constprop.0+0x54>
 8025102:	2c30      	cmp	r4, #48	@ 0x30
 8025104:	bf0c      	ite	eq
 8025106:	2308      	moveq	r3, #8
 8025108:	230a      	movne	r3, #10
 802510a:	e7d5      	b.n	80250b8 <_strtol_l.constprop.0+0x54>
 802510c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8025110:	2f19      	cmp	r7, #25
 8025112:	d801      	bhi.n	8025118 <_strtol_l.constprop.0+0xb4>
 8025114:	3c37      	subs	r4, #55	@ 0x37
 8025116:	e7de      	b.n	80250d6 <_strtol_l.constprop.0+0x72>
 8025118:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802511c:	2f19      	cmp	r7, #25
 802511e:	d804      	bhi.n	802512a <_strtol_l.constprop.0+0xc6>
 8025120:	3c57      	subs	r4, #87	@ 0x57
 8025122:	e7d8      	b.n	80250d6 <_strtol_l.constprop.0+0x72>
 8025124:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8025128:	e7e1      	b.n	80250ee <_strtol_l.constprop.0+0x8a>
 802512a:	1c53      	adds	r3, r2, #1
 802512c:	d108      	bne.n	8025140 <_strtol_l.constprop.0+0xdc>
 802512e:	2322      	movs	r3, #34	@ 0x22
 8025130:	f8ce 3000 	str.w	r3, [lr]
 8025134:	4660      	mov	r0, ip
 8025136:	f1b8 0f00 	cmp.w	r8, #0
 802513a:	d0a0      	beq.n	802507e <_strtol_l.constprop.0+0x1a>
 802513c:	1e69      	subs	r1, r5, #1
 802513e:	e006      	b.n	802514e <_strtol_l.constprop.0+0xea>
 8025140:	b106      	cbz	r6, 8025144 <_strtol_l.constprop.0+0xe0>
 8025142:	4240      	negs	r0, r0
 8025144:	f1b8 0f00 	cmp.w	r8, #0
 8025148:	d099      	beq.n	802507e <_strtol_l.constprop.0+0x1a>
 802514a:	2a00      	cmp	r2, #0
 802514c:	d1f6      	bne.n	802513c <_strtol_l.constprop.0+0xd8>
 802514e:	f8c8 1000 	str.w	r1, [r8]
 8025152:	e794      	b.n	802507e <_strtol_l.constprop.0+0x1a>
 8025154:	08034405 	.word	0x08034405

08025158 <_strtol_r>:
 8025158:	f7ff bf84 	b.w	8025064 <_strtol_l.constprop.0>

0802515c <strtol>:
 802515c:	4613      	mov	r3, r2
 802515e:	460a      	mov	r2, r1
 8025160:	4601      	mov	r1, r0
 8025162:	4802      	ldr	r0, [pc, #8]	@ (802516c <strtol+0x10>)
 8025164:	6800      	ldr	r0, [r0, #0]
 8025166:	f7ff bf7d 	b.w	8025064 <_strtol_l.constprop.0>
 802516a:	bf00      	nop
 802516c:	20000430 	.word	0x20000430

08025170 <__sflush_r>:
 8025170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025174:	4605      	mov	r5, r0
 8025176:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802517a:	0706      	lsls	r6, r0, #28
 802517c:	460c      	mov	r4, r1
 802517e:	d457      	bmi.n	8025230 <__sflush_r+0xc0>
 8025180:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8025184:	818b      	strh	r3, [r1, #12]
 8025186:	684b      	ldr	r3, [r1, #4]
 8025188:	2b00      	cmp	r3, #0
 802518a:	dc02      	bgt.n	8025192 <__sflush_r+0x22>
 802518c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802518e:	2b00      	cmp	r3, #0
 8025190:	dd4c      	ble.n	802522c <__sflush_r+0xbc>
 8025192:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8025194:	2e00      	cmp	r6, #0
 8025196:	d049      	beq.n	802522c <__sflush_r+0xbc>
 8025198:	2300      	movs	r3, #0
 802519a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802519e:	682f      	ldr	r7, [r5, #0]
 80251a0:	69e1      	ldr	r1, [r4, #28]
 80251a2:	602b      	str	r3, [r5, #0]
 80251a4:	d034      	beq.n	8025210 <__sflush_r+0xa0>
 80251a6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80251a8:	89a3      	ldrh	r3, [r4, #12]
 80251aa:	0759      	lsls	r1, r3, #29
 80251ac:	d505      	bpl.n	80251ba <__sflush_r+0x4a>
 80251ae:	6863      	ldr	r3, [r4, #4]
 80251b0:	1ad2      	subs	r2, r2, r3
 80251b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80251b4:	b10b      	cbz	r3, 80251ba <__sflush_r+0x4a>
 80251b6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80251b8:	1ad2      	subs	r2, r2, r3
 80251ba:	2300      	movs	r3, #0
 80251bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80251be:	69e1      	ldr	r1, [r4, #28]
 80251c0:	4628      	mov	r0, r5
 80251c2:	47b0      	blx	r6
 80251c4:	1c43      	adds	r3, r0, #1
 80251c6:	d106      	bne.n	80251d6 <__sflush_r+0x66>
 80251c8:	682a      	ldr	r2, [r5, #0]
 80251ca:	2a1d      	cmp	r2, #29
 80251cc:	d848      	bhi.n	8025260 <__sflush_r+0xf0>
 80251ce:	4b2b      	ldr	r3, [pc, #172]	@ (802527c <__sflush_r+0x10c>)
 80251d0:	4113      	asrs	r3, r2
 80251d2:	07de      	lsls	r6, r3, #31
 80251d4:	d444      	bmi.n	8025260 <__sflush_r+0xf0>
 80251d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80251da:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80251de:	81a2      	strh	r2, [r4, #12]
 80251e0:	2200      	movs	r2, #0
 80251e2:	6062      	str	r2, [r4, #4]
 80251e4:	04d9      	lsls	r1, r3, #19
 80251e6:	6922      	ldr	r2, [r4, #16]
 80251e8:	6022      	str	r2, [r4, #0]
 80251ea:	d504      	bpl.n	80251f6 <__sflush_r+0x86>
 80251ec:	1c42      	adds	r2, r0, #1
 80251ee:	d101      	bne.n	80251f4 <__sflush_r+0x84>
 80251f0:	682b      	ldr	r3, [r5, #0]
 80251f2:	b903      	cbnz	r3, 80251f6 <__sflush_r+0x86>
 80251f4:	6520      	str	r0, [r4, #80]	@ 0x50
 80251f6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80251f8:	602f      	str	r7, [r5, #0]
 80251fa:	b1b9      	cbz	r1, 802522c <__sflush_r+0xbc>
 80251fc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8025200:	4299      	cmp	r1, r3
 8025202:	d002      	beq.n	802520a <__sflush_r+0x9a>
 8025204:	4628      	mov	r0, r5
 8025206:	f002 fd61 	bl	8027ccc <_free_r>
 802520a:	2300      	movs	r3, #0
 802520c:	6323      	str	r3, [r4, #48]	@ 0x30
 802520e:	e00d      	b.n	802522c <__sflush_r+0xbc>
 8025210:	2301      	movs	r3, #1
 8025212:	4628      	mov	r0, r5
 8025214:	47b0      	blx	r6
 8025216:	4602      	mov	r2, r0
 8025218:	1c50      	adds	r0, r2, #1
 802521a:	d1c5      	bne.n	80251a8 <__sflush_r+0x38>
 802521c:	682b      	ldr	r3, [r5, #0]
 802521e:	2b00      	cmp	r3, #0
 8025220:	d0c2      	beq.n	80251a8 <__sflush_r+0x38>
 8025222:	2b1d      	cmp	r3, #29
 8025224:	d001      	beq.n	802522a <__sflush_r+0xba>
 8025226:	2b16      	cmp	r3, #22
 8025228:	d11a      	bne.n	8025260 <__sflush_r+0xf0>
 802522a:	602f      	str	r7, [r5, #0]
 802522c:	2000      	movs	r0, #0
 802522e:	e01e      	b.n	802526e <__sflush_r+0xfe>
 8025230:	690f      	ldr	r7, [r1, #16]
 8025232:	2f00      	cmp	r7, #0
 8025234:	d0fa      	beq.n	802522c <__sflush_r+0xbc>
 8025236:	0783      	lsls	r3, r0, #30
 8025238:	680e      	ldr	r6, [r1, #0]
 802523a:	bf08      	it	eq
 802523c:	694b      	ldreq	r3, [r1, #20]
 802523e:	600f      	str	r7, [r1, #0]
 8025240:	bf18      	it	ne
 8025242:	2300      	movne	r3, #0
 8025244:	eba6 0807 	sub.w	r8, r6, r7
 8025248:	608b      	str	r3, [r1, #8]
 802524a:	f1b8 0f00 	cmp.w	r8, #0
 802524e:	dded      	ble.n	802522c <__sflush_r+0xbc>
 8025250:	69e1      	ldr	r1, [r4, #28]
 8025252:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8025254:	4643      	mov	r3, r8
 8025256:	463a      	mov	r2, r7
 8025258:	4628      	mov	r0, r5
 802525a:	47b0      	blx	r6
 802525c:	2800      	cmp	r0, #0
 802525e:	dc08      	bgt.n	8025272 <__sflush_r+0x102>
 8025260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025268:	81a3      	strh	r3, [r4, #12]
 802526a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802526e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025272:	4407      	add	r7, r0
 8025274:	eba8 0800 	sub.w	r8, r8, r0
 8025278:	e7e7      	b.n	802524a <__sflush_r+0xda>
 802527a:	bf00      	nop
 802527c:	dfbffffe 	.word	0xdfbffffe

08025280 <_fflush_r>:
 8025280:	b538      	push	{r3, r4, r5, lr}
 8025282:	460c      	mov	r4, r1
 8025284:	4605      	mov	r5, r0
 8025286:	b118      	cbz	r0, 8025290 <_fflush_r+0x10>
 8025288:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802528a:	b90b      	cbnz	r3, 8025290 <_fflush_r+0x10>
 802528c:	f000 f93a 	bl	8025504 <__sinit>
 8025290:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8025294:	b1b8      	cbz	r0, 80252c6 <_fflush_r+0x46>
 8025296:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025298:	07db      	lsls	r3, r3, #31
 802529a:	d404      	bmi.n	80252a6 <_fflush_r+0x26>
 802529c:	0581      	lsls	r1, r0, #22
 802529e:	d402      	bmi.n	80252a6 <_fflush_r+0x26>
 80252a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80252a2:	f001 fe0e 	bl	8026ec2 <__retarget_lock_acquire_recursive>
 80252a6:	4628      	mov	r0, r5
 80252a8:	4621      	mov	r1, r4
 80252aa:	f7ff ff61 	bl	8025170 <__sflush_r>
 80252ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80252b0:	07da      	lsls	r2, r3, #31
 80252b2:	4605      	mov	r5, r0
 80252b4:	d405      	bmi.n	80252c2 <_fflush_r+0x42>
 80252b6:	89a3      	ldrh	r3, [r4, #12]
 80252b8:	059b      	lsls	r3, r3, #22
 80252ba:	d402      	bmi.n	80252c2 <_fflush_r+0x42>
 80252bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80252be:	f001 fe02 	bl	8026ec6 <__retarget_lock_release_recursive>
 80252c2:	4628      	mov	r0, r5
 80252c4:	bd38      	pop	{r3, r4, r5, pc}
 80252c6:	4605      	mov	r5, r0
 80252c8:	e7fb      	b.n	80252c2 <_fflush_r+0x42>
	...

080252cc <sprintf>:
 80252cc:	b40e      	push	{r1, r2, r3}
 80252ce:	b500      	push	{lr}
 80252d0:	b09c      	sub	sp, #112	@ 0x70
 80252d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80252d4:	9002      	str	r0, [sp, #8]
 80252d6:	9006      	str	r0, [sp, #24]
 80252d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80252dc:	4809      	ldr	r0, [pc, #36]	@ (8025304 <sprintf+0x38>)
 80252de:	9107      	str	r1, [sp, #28]
 80252e0:	9104      	str	r1, [sp, #16]
 80252e2:	4909      	ldr	r1, [pc, #36]	@ (8025308 <sprintf+0x3c>)
 80252e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80252e8:	9105      	str	r1, [sp, #20]
 80252ea:	6800      	ldr	r0, [r0, #0]
 80252ec:	9301      	str	r3, [sp, #4]
 80252ee:	a902      	add	r1, sp, #8
 80252f0:	f004 fd26 	bl	8029d40 <_svfprintf_r>
 80252f4:	9b02      	ldr	r3, [sp, #8]
 80252f6:	2200      	movs	r2, #0
 80252f8:	701a      	strb	r2, [r3, #0]
 80252fa:	b01c      	add	sp, #112	@ 0x70
 80252fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8025300:	b003      	add	sp, #12
 8025302:	4770      	bx	lr
 8025304:	20000430 	.word	0x20000430
 8025308:	ffff0208 	.word	0xffff0208

0802530c <sscanf>:
 802530c:	b40e      	push	{r1, r2, r3}
 802530e:	b530      	push	{r4, r5, lr}
 8025310:	b09c      	sub	sp, #112	@ 0x70
 8025312:	ac1f      	add	r4, sp, #124	@ 0x7c
 8025314:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8025318:	f854 5b04 	ldr.w	r5, [r4], #4
 802531c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8025320:	9002      	str	r0, [sp, #8]
 8025322:	9006      	str	r0, [sp, #24]
 8025324:	f7da ffbc 	bl	80002a0 <strlen>
 8025328:	4b0b      	ldr	r3, [pc, #44]	@ (8025358 <sscanf+0x4c>)
 802532a:	9003      	str	r0, [sp, #12]
 802532c:	9007      	str	r0, [sp, #28]
 802532e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025330:	480a      	ldr	r0, [pc, #40]	@ (802535c <sscanf+0x50>)
 8025332:	9401      	str	r4, [sp, #4]
 8025334:	2300      	movs	r3, #0
 8025336:	930e      	str	r3, [sp, #56]	@ 0x38
 8025338:	9313      	str	r3, [sp, #76]	@ 0x4c
 802533a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802533e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025342:	462a      	mov	r2, r5
 8025344:	4623      	mov	r3, r4
 8025346:	a902      	add	r1, sp, #8
 8025348:	6800      	ldr	r0, [r0, #0]
 802534a:	f005 ff3b 	bl	802b1c4 <__ssvfscanf_r>
 802534e:	b01c      	add	sp, #112	@ 0x70
 8025350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025354:	b003      	add	sp, #12
 8025356:	4770      	bx	lr
 8025358:	08025383 	.word	0x08025383
 802535c:	20000430 	.word	0x20000430

08025360 <__sread>:
 8025360:	b510      	push	{r4, lr}
 8025362:	460c      	mov	r4, r1
 8025364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025368:	f001 fd52 	bl	8026e10 <_read_r>
 802536c:	2800      	cmp	r0, #0
 802536e:	bfab      	itete	ge
 8025370:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8025372:	89a3      	ldrhlt	r3, [r4, #12]
 8025374:	181b      	addge	r3, r3, r0
 8025376:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802537a:	bfac      	ite	ge
 802537c:	6523      	strge	r3, [r4, #80]	@ 0x50
 802537e:	81a3      	strhlt	r3, [r4, #12]
 8025380:	bd10      	pop	{r4, pc}

08025382 <__seofread>:
 8025382:	2000      	movs	r0, #0
 8025384:	4770      	bx	lr

08025386 <__swrite>:
 8025386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802538a:	461f      	mov	r7, r3
 802538c:	898b      	ldrh	r3, [r1, #12]
 802538e:	05db      	lsls	r3, r3, #23
 8025390:	4605      	mov	r5, r0
 8025392:	460c      	mov	r4, r1
 8025394:	4616      	mov	r6, r2
 8025396:	d505      	bpl.n	80253a4 <__swrite+0x1e>
 8025398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802539c:	2302      	movs	r3, #2
 802539e:	2200      	movs	r2, #0
 80253a0:	f001 fd24 	bl	8026dec <_lseek_r>
 80253a4:	89a3      	ldrh	r3, [r4, #12]
 80253a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80253aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80253ae:	81a3      	strh	r3, [r4, #12]
 80253b0:	4632      	mov	r2, r6
 80253b2:	463b      	mov	r3, r7
 80253b4:	4628      	mov	r0, r5
 80253b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80253ba:	f001 bd3b 	b.w	8026e34 <_write_r>

080253be <__sseek>:
 80253be:	b510      	push	{r4, lr}
 80253c0:	460c      	mov	r4, r1
 80253c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80253c6:	f001 fd11 	bl	8026dec <_lseek_r>
 80253ca:	1c43      	adds	r3, r0, #1
 80253cc:	89a3      	ldrh	r3, [r4, #12]
 80253ce:	bf15      	itete	ne
 80253d0:	6520      	strne	r0, [r4, #80]	@ 0x50
 80253d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80253d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80253da:	81a3      	strheq	r3, [r4, #12]
 80253dc:	bf18      	it	ne
 80253de:	81a3      	strhne	r3, [r4, #12]
 80253e0:	bd10      	pop	{r4, pc}

080253e2 <__sclose>:
 80253e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80253e6:	f001 bcc5 	b.w	8026d74 <_close_r>
	...

080253ec <std>:
 80253ec:	2300      	movs	r3, #0
 80253ee:	b510      	push	{r4, lr}
 80253f0:	4604      	mov	r4, r0
 80253f2:	e9c0 3300 	strd	r3, r3, [r0]
 80253f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80253fa:	6083      	str	r3, [r0, #8]
 80253fc:	8181      	strh	r1, [r0, #12]
 80253fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8025400:	81c2      	strh	r2, [r0, #14]
 8025402:	6183      	str	r3, [r0, #24]
 8025404:	4619      	mov	r1, r3
 8025406:	2208      	movs	r2, #8
 8025408:	305c      	adds	r0, #92	@ 0x5c
 802540a:	f000 fb21 	bl	8025a50 <memset>
 802540e:	4b0d      	ldr	r3, [pc, #52]	@ (8025444 <std+0x58>)
 8025410:	6223      	str	r3, [r4, #32]
 8025412:	4b0d      	ldr	r3, [pc, #52]	@ (8025448 <std+0x5c>)
 8025414:	6263      	str	r3, [r4, #36]	@ 0x24
 8025416:	4b0d      	ldr	r3, [pc, #52]	@ (802544c <std+0x60>)
 8025418:	62a3      	str	r3, [r4, #40]	@ 0x28
 802541a:	4b0d      	ldr	r3, [pc, #52]	@ (8025450 <std+0x64>)
 802541c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802541e:	4b0d      	ldr	r3, [pc, #52]	@ (8025454 <std+0x68>)
 8025420:	61e4      	str	r4, [r4, #28]
 8025422:	429c      	cmp	r4, r3
 8025424:	d006      	beq.n	8025434 <std+0x48>
 8025426:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802542a:	4294      	cmp	r4, r2
 802542c:	d002      	beq.n	8025434 <std+0x48>
 802542e:	33d0      	adds	r3, #208	@ 0xd0
 8025430:	429c      	cmp	r4, r3
 8025432:	d105      	bne.n	8025440 <std+0x54>
 8025434:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8025438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802543c:	f001 bd3e 	b.w	8026ebc <__retarget_lock_init_recursive>
 8025440:	bd10      	pop	{r4, pc}
 8025442:	bf00      	nop
 8025444:	08025361 	.word	0x08025361
 8025448:	08025387 	.word	0x08025387
 802544c:	080253bf 	.word	0x080253bf
 8025450:	080253e3 	.word	0x080253e3
 8025454:	20018160 	.word	0x20018160

08025458 <stdio_exit_handler>:
 8025458:	4a02      	ldr	r2, [pc, #8]	@ (8025464 <stdio_exit_handler+0xc>)
 802545a:	4903      	ldr	r1, [pc, #12]	@ (8025468 <stdio_exit_handler+0x10>)
 802545c:	4803      	ldr	r0, [pc, #12]	@ (802546c <stdio_exit_handler+0x14>)
 802545e:	f000 b9ef 	b.w	8025840 <_fwalk_sglue>
 8025462:	bf00      	nop
 8025464:	200002b0 	.word	0x200002b0
 8025468:	0802ce01 	.word	0x0802ce01
 802546c:	20000438 	.word	0x20000438

08025470 <cleanup_stdio>:
 8025470:	6841      	ldr	r1, [r0, #4]
 8025472:	4b0c      	ldr	r3, [pc, #48]	@ (80254a4 <cleanup_stdio+0x34>)
 8025474:	4299      	cmp	r1, r3
 8025476:	b510      	push	{r4, lr}
 8025478:	4604      	mov	r4, r0
 802547a:	d001      	beq.n	8025480 <cleanup_stdio+0x10>
 802547c:	f007 fcc0 	bl	802ce00 <_fclose_r>
 8025480:	68a1      	ldr	r1, [r4, #8]
 8025482:	4b09      	ldr	r3, [pc, #36]	@ (80254a8 <cleanup_stdio+0x38>)
 8025484:	4299      	cmp	r1, r3
 8025486:	d002      	beq.n	802548e <cleanup_stdio+0x1e>
 8025488:	4620      	mov	r0, r4
 802548a:	f007 fcb9 	bl	802ce00 <_fclose_r>
 802548e:	68e1      	ldr	r1, [r4, #12]
 8025490:	4b06      	ldr	r3, [pc, #24]	@ (80254ac <cleanup_stdio+0x3c>)
 8025492:	4299      	cmp	r1, r3
 8025494:	d004      	beq.n	80254a0 <cleanup_stdio+0x30>
 8025496:	4620      	mov	r0, r4
 8025498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802549c:	f007 bcb0 	b.w	802ce00 <_fclose_r>
 80254a0:	bd10      	pop	{r4, pc}
 80254a2:	bf00      	nop
 80254a4:	20018160 	.word	0x20018160
 80254a8:	200181c8 	.word	0x200181c8
 80254ac:	20018230 	.word	0x20018230

080254b0 <global_stdio_init.part.0>:
 80254b0:	b510      	push	{r4, lr}
 80254b2:	4b0b      	ldr	r3, [pc, #44]	@ (80254e0 <global_stdio_init.part.0+0x30>)
 80254b4:	4c0b      	ldr	r4, [pc, #44]	@ (80254e4 <global_stdio_init.part.0+0x34>)
 80254b6:	4a0c      	ldr	r2, [pc, #48]	@ (80254e8 <global_stdio_init.part.0+0x38>)
 80254b8:	601a      	str	r2, [r3, #0]
 80254ba:	4620      	mov	r0, r4
 80254bc:	2200      	movs	r2, #0
 80254be:	2104      	movs	r1, #4
 80254c0:	f7ff ff94 	bl	80253ec <std>
 80254c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80254c8:	2201      	movs	r2, #1
 80254ca:	2109      	movs	r1, #9
 80254cc:	f7ff ff8e 	bl	80253ec <std>
 80254d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80254d4:	2202      	movs	r2, #2
 80254d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80254da:	2112      	movs	r1, #18
 80254dc:	f7ff bf86 	b.w	80253ec <std>
 80254e0:	20018298 	.word	0x20018298
 80254e4:	20018160 	.word	0x20018160
 80254e8:	08025459 	.word	0x08025459

080254ec <__sfp_lock_acquire>:
 80254ec:	4801      	ldr	r0, [pc, #4]	@ (80254f4 <__sfp_lock_acquire+0x8>)
 80254ee:	f001 bce8 	b.w	8026ec2 <__retarget_lock_acquire_recursive>
 80254f2:	bf00      	nop
 80254f4:	200182c8 	.word	0x200182c8

080254f8 <__sfp_lock_release>:
 80254f8:	4801      	ldr	r0, [pc, #4]	@ (8025500 <__sfp_lock_release+0x8>)
 80254fa:	f001 bce4 	b.w	8026ec6 <__retarget_lock_release_recursive>
 80254fe:	bf00      	nop
 8025500:	200182c8 	.word	0x200182c8

08025504 <__sinit>:
 8025504:	b510      	push	{r4, lr}
 8025506:	4604      	mov	r4, r0
 8025508:	f7ff fff0 	bl	80254ec <__sfp_lock_acquire>
 802550c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802550e:	b11b      	cbz	r3, 8025518 <__sinit+0x14>
 8025510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025514:	f7ff bff0 	b.w	80254f8 <__sfp_lock_release>
 8025518:	4b04      	ldr	r3, [pc, #16]	@ (802552c <__sinit+0x28>)
 802551a:	6363      	str	r3, [r4, #52]	@ 0x34
 802551c:	4b04      	ldr	r3, [pc, #16]	@ (8025530 <__sinit+0x2c>)
 802551e:	681b      	ldr	r3, [r3, #0]
 8025520:	2b00      	cmp	r3, #0
 8025522:	d1f5      	bne.n	8025510 <__sinit+0xc>
 8025524:	f7ff ffc4 	bl	80254b0 <global_stdio_init.part.0>
 8025528:	e7f2      	b.n	8025510 <__sinit+0xc>
 802552a:	bf00      	nop
 802552c:	08025471 	.word	0x08025471
 8025530:	20018298 	.word	0x20018298

08025534 <_vsnprintf_r>:
 8025534:	b530      	push	{r4, r5, lr}
 8025536:	4614      	mov	r4, r2
 8025538:	2c00      	cmp	r4, #0
 802553a:	b09b      	sub	sp, #108	@ 0x6c
 802553c:	4605      	mov	r5, r0
 802553e:	461a      	mov	r2, r3
 8025540:	da05      	bge.n	802554e <_vsnprintf_r+0x1a>
 8025542:	238b      	movs	r3, #139	@ 0x8b
 8025544:	6003      	str	r3, [r0, #0]
 8025546:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802554a:	b01b      	add	sp, #108	@ 0x6c
 802554c:	bd30      	pop	{r4, r5, pc}
 802554e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8025552:	f8ad 300c 	strh.w	r3, [sp, #12]
 8025556:	bf14      	ite	ne
 8025558:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802555c:	4623      	moveq	r3, r4
 802555e:	9302      	str	r3, [sp, #8]
 8025560:	9305      	str	r3, [sp, #20]
 8025562:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025566:	9100      	str	r1, [sp, #0]
 8025568:	9104      	str	r1, [sp, #16]
 802556a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802556e:	4669      	mov	r1, sp
 8025570:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025572:	f004 fbe5 	bl	8029d40 <_svfprintf_r>
 8025576:	1c43      	adds	r3, r0, #1
 8025578:	bfbc      	itt	lt
 802557a:	238b      	movlt	r3, #139	@ 0x8b
 802557c:	602b      	strlt	r3, [r5, #0]
 802557e:	2c00      	cmp	r4, #0
 8025580:	d0e3      	beq.n	802554a <_vsnprintf_r+0x16>
 8025582:	9b00      	ldr	r3, [sp, #0]
 8025584:	2200      	movs	r2, #0
 8025586:	701a      	strb	r2, [r3, #0]
 8025588:	e7df      	b.n	802554a <_vsnprintf_r+0x16>
	...

0802558c <vsnprintf>:
 802558c:	b507      	push	{r0, r1, r2, lr}
 802558e:	9300      	str	r3, [sp, #0]
 8025590:	4613      	mov	r3, r2
 8025592:	460a      	mov	r2, r1
 8025594:	4601      	mov	r1, r0
 8025596:	4803      	ldr	r0, [pc, #12]	@ (80255a4 <vsnprintf+0x18>)
 8025598:	6800      	ldr	r0, [r0, #0]
 802559a:	f7ff ffcb 	bl	8025534 <_vsnprintf_r>
 802559e:	b003      	add	sp, #12
 80255a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80255a4:	20000430 	.word	0x20000430

080255a8 <__sfvwrite_r>:
 80255a8:	6893      	ldr	r3, [r2, #8]
 80255aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255ae:	4606      	mov	r6, r0
 80255b0:	460c      	mov	r4, r1
 80255b2:	4691      	mov	r9, r2
 80255b4:	b91b      	cbnz	r3, 80255be <__sfvwrite_r+0x16>
 80255b6:	2000      	movs	r0, #0
 80255b8:	b003      	add	sp, #12
 80255ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255be:	898b      	ldrh	r3, [r1, #12]
 80255c0:	0718      	lsls	r0, r3, #28
 80255c2:	d550      	bpl.n	8025666 <__sfvwrite_r+0xbe>
 80255c4:	690b      	ldr	r3, [r1, #16]
 80255c6:	2b00      	cmp	r3, #0
 80255c8:	d04d      	beq.n	8025666 <__sfvwrite_r+0xbe>
 80255ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80255ce:	f8d9 8000 	ldr.w	r8, [r9]
 80255d2:	f013 0702 	ands.w	r7, r3, #2
 80255d6:	d16b      	bne.n	80256b0 <__sfvwrite_r+0x108>
 80255d8:	f013 0301 	ands.w	r3, r3, #1
 80255dc:	f000 809c 	beq.w	8025718 <__sfvwrite_r+0x170>
 80255e0:	4638      	mov	r0, r7
 80255e2:	46ba      	mov	sl, r7
 80255e4:	46bb      	mov	fp, r7
 80255e6:	f1bb 0f00 	cmp.w	fp, #0
 80255ea:	f000 8103 	beq.w	80257f4 <__sfvwrite_r+0x24c>
 80255ee:	b950      	cbnz	r0, 8025606 <__sfvwrite_r+0x5e>
 80255f0:	465a      	mov	r2, fp
 80255f2:	210a      	movs	r1, #10
 80255f4:	4650      	mov	r0, sl
 80255f6:	f7da fe03 	bl	8000200 <memchr>
 80255fa:	2800      	cmp	r0, #0
 80255fc:	f000 8100 	beq.w	8025800 <__sfvwrite_r+0x258>
 8025600:	3001      	adds	r0, #1
 8025602:	eba0 070a 	sub.w	r7, r0, sl
 8025606:	6820      	ldr	r0, [r4, #0]
 8025608:	6921      	ldr	r1, [r4, #16]
 802560a:	68a5      	ldr	r5, [r4, #8]
 802560c:	6963      	ldr	r3, [r4, #20]
 802560e:	455f      	cmp	r7, fp
 8025610:	463a      	mov	r2, r7
 8025612:	bf28      	it	cs
 8025614:	465a      	movcs	r2, fp
 8025616:	4288      	cmp	r0, r1
 8025618:	f240 80f5 	bls.w	8025806 <__sfvwrite_r+0x25e>
 802561c:	441d      	add	r5, r3
 802561e:	42aa      	cmp	r2, r5
 8025620:	f340 80f1 	ble.w	8025806 <__sfvwrite_r+0x25e>
 8025624:	4651      	mov	r1, sl
 8025626:	462a      	mov	r2, r5
 8025628:	f000 f9f8 	bl	8025a1c <memmove>
 802562c:	6823      	ldr	r3, [r4, #0]
 802562e:	442b      	add	r3, r5
 8025630:	6023      	str	r3, [r4, #0]
 8025632:	4621      	mov	r1, r4
 8025634:	4630      	mov	r0, r6
 8025636:	f7ff fe23 	bl	8025280 <_fflush_r>
 802563a:	2800      	cmp	r0, #0
 802563c:	d167      	bne.n	802570e <__sfvwrite_r+0x166>
 802563e:	1b7f      	subs	r7, r7, r5
 8025640:	f040 80f9 	bne.w	8025836 <__sfvwrite_r+0x28e>
 8025644:	4621      	mov	r1, r4
 8025646:	4630      	mov	r0, r6
 8025648:	f7ff fe1a 	bl	8025280 <_fflush_r>
 802564c:	2800      	cmp	r0, #0
 802564e:	d15e      	bne.n	802570e <__sfvwrite_r+0x166>
 8025650:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8025654:	1b5b      	subs	r3, r3, r5
 8025656:	44aa      	add	sl, r5
 8025658:	ebab 0b05 	sub.w	fp, fp, r5
 802565c:	f8c9 3008 	str.w	r3, [r9, #8]
 8025660:	2b00      	cmp	r3, #0
 8025662:	d1c0      	bne.n	80255e6 <__sfvwrite_r+0x3e>
 8025664:	e7a7      	b.n	80255b6 <__sfvwrite_r+0xe>
 8025666:	4621      	mov	r1, r4
 8025668:	4630      	mov	r0, r6
 802566a:	f000 f907 	bl	802587c <__swsetup_r>
 802566e:	2800      	cmp	r0, #0
 8025670:	d0ab      	beq.n	80255ca <__sfvwrite_r+0x22>
 8025672:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025676:	e79f      	b.n	80255b8 <__sfvwrite_r+0x10>
 8025678:	e9d8 a500 	ldrd	sl, r5, [r8]
 802567c:	f108 0808 	add.w	r8, r8, #8
 8025680:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8025684:	69e1      	ldr	r1, [r4, #28]
 8025686:	2d00      	cmp	r5, #0
 8025688:	d0f6      	beq.n	8025678 <__sfvwrite_r+0xd0>
 802568a:	42bd      	cmp	r5, r7
 802568c:	462b      	mov	r3, r5
 802568e:	4652      	mov	r2, sl
 8025690:	bf28      	it	cs
 8025692:	463b      	movcs	r3, r7
 8025694:	4630      	mov	r0, r6
 8025696:	47d8      	blx	fp
 8025698:	2800      	cmp	r0, #0
 802569a:	dd38      	ble.n	802570e <__sfvwrite_r+0x166>
 802569c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80256a0:	1a1b      	subs	r3, r3, r0
 80256a2:	4482      	add	sl, r0
 80256a4:	1a2d      	subs	r5, r5, r0
 80256a6:	f8c9 3008 	str.w	r3, [r9, #8]
 80256aa:	2b00      	cmp	r3, #0
 80256ac:	d1e8      	bne.n	8025680 <__sfvwrite_r+0xd8>
 80256ae:	e782      	b.n	80255b6 <__sfvwrite_r+0xe>
 80256b0:	f04f 0a00 	mov.w	sl, #0
 80256b4:	4f61      	ldr	r7, [pc, #388]	@ (802583c <__sfvwrite_r+0x294>)
 80256b6:	4655      	mov	r5, sl
 80256b8:	e7e2      	b.n	8025680 <__sfvwrite_r+0xd8>
 80256ba:	e9d8 7a00 	ldrd	r7, sl, [r8]
 80256be:	f108 0808 	add.w	r8, r8, #8
 80256c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80256c6:	6820      	ldr	r0, [r4, #0]
 80256c8:	68a2      	ldr	r2, [r4, #8]
 80256ca:	f1ba 0f00 	cmp.w	sl, #0
 80256ce:	d0f4      	beq.n	80256ba <__sfvwrite_r+0x112>
 80256d0:	0599      	lsls	r1, r3, #22
 80256d2:	d563      	bpl.n	802579c <__sfvwrite_r+0x1f4>
 80256d4:	4552      	cmp	r2, sl
 80256d6:	d836      	bhi.n	8025746 <__sfvwrite_r+0x19e>
 80256d8:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 80256dc:	d033      	beq.n	8025746 <__sfvwrite_r+0x19e>
 80256de:	6921      	ldr	r1, [r4, #16]
 80256e0:	6965      	ldr	r5, [r4, #20]
 80256e2:	eba0 0b01 	sub.w	fp, r0, r1
 80256e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80256ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80256ee:	f10b 0201 	add.w	r2, fp, #1
 80256f2:	106d      	asrs	r5, r5, #1
 80256f4:	4452      	add	r2, sl
 80256f6:	4295      	cmp	r5, r2
 80256f8:	bf38      	it	cc
 80256fa:	4615      	movcc	r5, r2
 80256fc:	055b      	lsls	r3, r3, #21
 80256fe:	d53d      	bpl.n	802577c <__sfvwrite_r+0x1d4>
 8025700:	4629      	mov	r1, r5
 8025702:	4630      	mov	r0, r6
 8025704:	f002 fbfa 	bl	8027efc <_malloc_r>
 8025708:	b948      	cbnz	r0, 802571e <__sfvwrite_r+0x176>
 802570a:	230c      	movs	r3, #12
 802570c:	6033      	str	r3, [r6, #0]
 802570e:	89a3      	ldrh	r3, [r4, #12]
 8025710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025714:	81a3      	strh	r3, [r4, #12]
 8025716:	e7ac      	b.n	8025672 <__sfvwrite_r+0xca>
 8025718:	461f      	mov	r7, r3
 802571a:	469a      	mov	sl, r3
 802571c:	e7d1      	b.n	80256c2 <__sfvwrite_r+0x11a>
 802571e:	465a      	mov	r2, fp
 8025720:	6921      	ldr	r1, [r4, #16]
 8025722:	9001      	str	r0, [sp, #4]
 8025724:	f001 fbd0 	bl	8026ec8 <memcpy>
 8025728:	89a2      	ldrh	r2, [r4, #12]
 802572a:	9b01      	ldr	r3, [sp, #4]
 802572c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8025730:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8025734:	81a2      	strh	r2, [r4, #12]
 8025736:	6123      	str	r3, [r4, #16]
 8025738:	6165      	str	r5, [r4, #20]
 802573a:	445b      	add	r3, fp
 802573c:	eba5 050b 	sub.w	r5, r5, fp
 8025740:	6023      	str	r3, [r4, #0]
 8025742:	4652      	mov	r2, sl
 8025744:	60a5      	str	r5, [r4, #8]
 8025746:	4552      	cmp	r2, sl
 8025748:	bf28      	it	cs
 802574a:	4652      	movcs	r2, sl
 802574c:	6820      	ldr	r0, [r4, #0]
 802574e:	9201      	str	r2, [sp, #4]
 8025750:	4639      	mov	r1, r7
 8025752:	f000 f963 	bl	8025a1c <memmove>
 8025756:	68a3      	ldr	r3, [r4, #8]
 8025758:	9a01      	ldr	r2, [sp, #4]
 802575a:	1a9b      	subs	r3, r3, r2
 802575c:	60a3      	str	r3, [r4, #8]
 802575e:	6823      	ldr	r3, [r4, #0]
 8025760:	4413      	add	r3, r2
 8025762:	4655      	mov	r5, sl
 8025764:	6023      	str	r3, [r4, #0]
 8025766:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802576a:	1b5b      	subs	r3, r3, r5
 802576c:	442f      	add	r7, r5
 802576e:	ebaa 0a05 	sub.w	sl, sl, r5
 8025772:	f8c9 3008 	str.w	r3, [r9, #8]
 8025776:	2b00      	cmp	r3, #0
 8025778:	d1a3      	bne.n	80256c2 <__sfvwrite_r+0x11a>
 802577a:	e71c      	b.n	80255b6 <__sfvwrite_r+0xe>
 802577c:	462a      	mov	r2, r5
 802577e:	4630      	mov	r0, r6
 8025780:	f007 fbcc 	bl	802cf1c <_realloc_r>
 8025784:	4603      	mov	r3, r0
 8025786:	2800      	cmp	r0, #0
 8025788:	d1d5      	bne.n	8025736 <__sfvwrite_r+0x18e>
 802578a:	6921      	ldr	r1, [r4, #16]
 802578c:	4630      	mov	r0, r6
 802578e:	f002 fa9d 	bl	8027ccc <_free_r>
 8025792:	89a3      	ldrh	r3, [r4, #12]
 8025794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8025798:	81a3      	strh	r3, [r4, #12]
 802579a:	e7b6      	b.n	802570a <__sfvwrite_r+0x162>
 802579c:	6923      	ldr	r3, [r4, #16]
 802579e:	4283      	cmp	r3, r0
 80257a0:	d302      	bcc.n	80257a8 <__sfvwrite_r+0x200>
 80257a2:	6961      	ldr	r1, [r4, #20]
 80257a4:	4551      	cmp	r1, sl
 80257a6:	d915      	bls.n	80257d4 <__sfvwrite_r+0x22c>
 80257a8:	4552      	cmp	r2, sl
 80257aa:	bf28      	it	cs
 80257ac:	4652      	movcs	r2, sl
 80257ae:	4639      	mov	r1, r7
 80257b0:	4615      	mov	r5, r2
 80257b2:	f000 f933 	bl	8025a1c <memmove>
 80257b6:	68a3      	ldr	r3, [r4, #8]
 80257b8:	6822      	ldr	r2, [r4, #0]
 80257ba:	1b5b      	subs	r3, r3, r5
 80257bc:	442a      	add	r2, r5
 80257be:	60a3      	str	r3, [r4, #8]
 80257c0:	6022      	str	r2, [r4, #0]
 80257c2:	2b00      	cmp	r3, #0
 80257c4:	d1cf      	bne.n	8025766 <__sfvwrite_r+0x1be>
 80257c6:	4621      	mov	r1, r4
 80257c8:	4630      	mov	r0, r6
 80257ca:	f7ff fd59 	bl	8025280 <_fflush_r>
 80257ce:	2800      	cmp	r0, #0
 80257d0:	d0c9      	beq.n	8025766 <__sfvwrite_r+0x1be>
 80257d2:	e79c      	b.n	802570e <__sfvwrite_r+0x166>
 80257d4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80257d8:	4553      	cmp	r3, sl
 80257da:	bf28      	it	cs
 80257dc:	4653      	movcs	r3, sl
 80257de:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80257e0:	fb93 f3f1 	sdiv	r3, r3, r1
 80257e4:	463a      	mov	r2, r7
 80257e6:	434b      	muls	r3, r1
 80257e8:	4630      	mov	r0, r6
 80257ea:	69e1      	ldr	r1, [r4, #28]
 80257ec:	47a8      	blx	r5
 80257ee:	1e05      	subs	r5, r0, #0
 80257f0:	dcb9      	bgt.n	8025766 <__sfvwrite_r+0x1be>
 80257f2:	e78c      	b.n	802570e <__sfvwrite_r+0x166>
 80257f4:	e9d8 ab00 	ldrd	sl, fp, [r8]
 80257f8:	2000      	movs	r0, #0
 80257fa:	f108 0808 	add.w	r8, r8, #8
 80257fe:	e6f2      	b.n	80255e6 <__sfvwrite_r+0x3e>
 8025800:	f10b 0701 	add.w	r7, fp, #1
 8025804:	e6ff      	b.n	8025606 <__sfvwrite_r+0x5e>
 8025806:	4293      	cmp	r3, r2
 8025808:	dc08      	bgt.n	802581c <__sfvwrite_r+0x274>
 802580a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802580c:	69e1      	ldr	r1, [r4, #28]
 802580e:	4652      	mov	r2, sl
 8025810:	4630      	mov	r0, r6
 8025812:	47a8      	blx	r5
 8025814:	1e05      	subs	r5, r0, #0
 8025816:	f73f af12 	bgt.w	802563e <__sfvwrite_r+0x96>
 802581a:	e778      	b.n	802570e <__sfvwrite_r+0x166>
 802581c:	4651      	mov	r1, sl
 802581e:	9201      	str	r2, [sp, #4]
 8025820:	f000 f8fc 	bl	8025a1c <memmove>
 8025824:	9a01      	ldr	r2, [sp, #4]
 8025826:	68a3      	ldr	r3, [r4, #8]
 8025828:	1a9b      	subs	r3, r3, r2
 802582a:	60a3      	str	r3, [r4, #8]
 802582c:	6823      	ldr	r3, [r4, #0]
 802582e:	4413      	add	r3, r2
 8025830:	6023      	str	r3, [r4, #0]
 8025832:	4615      	mov	r5, r2
 8025834:	e703      	b.n	802563e <__sfvwrite_r+0x96>
 8025836:	2001      	movs	r0, #1
 8025838:	e70a      	b.n	8025650 <__sfvwrite_r+0xa8>
 802583a:	bf00      	nop
 802583c:	7ffffc00 	.word	0x7ffffc00

08025840 <_fwalk_sglue>:
 8025840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025844:	4607      	mov	r7, r0
 8025846:	4688      	mov	r8, r1
 8025848:	4614      	mov	r4, r2
 802584a:	2600      	movs	r6, #0
 802584c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025850:	f1b9 0901 	subs.w	r9, r9, #1
 8025854:	d505      	bpl.n	8025862 <_fwalk_sglue+0x22>
 8025856:	6824      	ldr	r4, [r4, #0]
 8025858:	2c00      	cmp	r4, #0
 802585a:	d1f7      	bne.n	802584c <_fwalk_sglue+0xc>
 802585c:	4630      	mov	r0, r6
 802585e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025862:	89ab      	ldrh	r3, [r5, #12]
 8025864:	2b01      	cmp	r3, #1
 8025866:	d907      	bls.n	8025878 <_fwalk_sglue+0x38>
 8025868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802586c:	3301      	adds	r3, #1
 802586e:	d003      	beq.n	8025878 <_fwalk_sglue+0x38>
 8025870:	4629      	mov	r1, r5
 8025872:	4638      	mov	r0, r7
 8025874:	47c0      	blx	r8
 8025876:	4306      	orrs	r6, r0
 8025878:	3568      	adds	r5, #104	@ 0x68
 802587a:	e7e9      	b.n	8025850 <_fwalk_sglue+0x10>

0802587c <__swsetup_r>:
 802587c:	b538      	push	{r3, r4, r5, lr}
 802587e:	4b29      	ldr	r3, [pc, #164]	@ (8025924 <__swsetup_r+0xa8>)
 8025880:	4605      	mov	r5, r0
 8025882:	6818      	ldr	r0, [r3, #0]
 8025884:	460c      	mov	r4, r1
 8025886:	b118      	cbz	r0, 8025890 <__swsetup_r+0x14>
 8025888:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802588a:	b90b      	cbnz	r3, 8025890 <__swsetup_r+0x14>
 802588c:	f7ff fe3a 	bl	8025504 <__sinit>
 8025890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025894:	0719      	lsls	r1, r3, #28
 8025896:	d422      	bmi.n	80258de <__swsetup_r+0x62>
 8025898:	06da      	lsls	r2, r3, #27
 802589a:	d407      	bmi.n	80258ac <__swsetup_r+0x30>
 802589c:	2209      	movs	r2, #9
 802589e:	602a      	str	r2, [r5, #0]
 80258a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80258a4:	81a3      	strh	r3, [r4, #12]
 80258a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80258aa:	e033      	b.n	8025914 <__swsetup_r+0x98>
 80258ac:	0758      	lsls	r0, r3, #29
 80258ae:	d512      	bpl.n	80258d6 <__swsetup_r+0x5a>
 80258b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80258b2:	b141      	cbz	r1, 80258c6 <__swsetup_r+0x4a>
 80258b4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80258b8:	4299      	cmp	r1, r3
 80258ba:	d002      	beq.n	80258c2 <__swsetup_r+0x46>
 80258bc:	4628      	mov	r0, r5
 80258be:	f002 fa05 	bl	8027ccc <_free_r>
 80258c2:	2300      	movs	r3, #0
 80258c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80258c6:	89a3      	ldrh	r3, [r4, #12]
 80258c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80258cc:	81a3      	strh	r3, [r4, #12]
 80258ce:	2300      	movs	r3, #0
 80258d0:	6063      	str	r3, [r4, #4]
 80258d2:	6923      	ldr	r3, [r4, #16]
 80258d4:	6023      	str	r3, [r4, #0]
 80258d6:	89a3      	ldrh	r3, [r4, #12]
 80258d8:	f043 0308 	orr.w	r3, r3, #8
 80258dc:	81a3      	strh	r3, [r4, #12]
 80258de:	6923      	ldr	r3, [r4, #16]
 80258e0:	b94b      	cbnz	r3, 80258f6 <__swsetup_r+0x7a>
 80258e2:	89a3      	ldrh	r3, [r4, #12]
 80258e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80258e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80258ec:	d003      	beq.n	80258f6 <__swsetup_r+0x7a>
 80258ee:	4621      	mov	r1, r4
 80258f0:	4628      	mov	r0, r5
 80258f2:	f005 fc2b 	bl	802b14c <__smakebuf_r>
 80258f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80258fa:	f013 0201 	ands.w	r2, r3, #1
 80258fe:	d00a      	beq.n	8025916 <__swsetup_r+0x9a>
 8025900:	2200      	movs	r2, #0
 8025902:	60a2      	str	r2, [r4, #8]
 8025904:	6962      	ldr	r2, [r4, #20]
 8025906:	4252      	negs	r2, r2
 8025908:	61a2      	str	r2, [r4, #24]
 802590a:	6922      	ldr	r2, [r4, #16]
 802590c:	b942      	cbnz	r2, 8025920 <__swsetup_r+0xa4>
 802590e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8025912:	d1c5      	bne.n	80258a0 <__swsetup_r+0x24>
 8025914:	bd38      	pop	{r3, r4, r5, pc}
 8025916:	0799      	lsls	r1, r3, #30
 8025918:	bf58      	it	pl
 802591a:	6962      	ldrpl	r2, [r4, #20]
 802591c:	60a2      	str	r2, [r4, #8]
 802591e:	e7f4      	b.n	802590a <__swsetup_r+0x8e>
 8025920:	2000      	movs	r0, #0
 8025922:	e7f7      	b.n	8025914 <__swsetup_r+0x98>
 8025924:	20000430 	.word	0x20000430

08025928 <memcmp>:
 8025928:	b510      	push	{r4, lr}
 802592a:	3901      	subs	r1, #1
 802592c:	4402      	add	r2, r0
 802592e:	4290      	cmp	r0, r2
 8025930:	d101      	bne.n	8025936 <memcmp+0xe>
 8025932:	2000      	movs	r0, #0
 8025934:	e005      	b.n	8025942 <memcmp+0x1a>
 8025936:	7803      	ldrb	r3, [r0, #0]
 8025938:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802593c:	42a3      	cmp	r3, r4
 802593e:	d001      	beq.n	8025944 <memcmp+0x1c>
 8025940:	1b18      	subs	r0, r3, r4
 8025942:	bd10      	pop	{r4, pc}
 8025944:	3001      	adds	r0, #1
 8025946:	e7f2      	b.n	802592e <memcmp+0x6>

08025948 <__fputwc>:
 8025948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802594c:	4680      	mov	r8, r0
 802594e:	460f      	mov	r7, r1
 8025950:	4614      	mov	r4, r2
 8025952:	f001 fa05 	bl	8026d60 <__locale_mb_cur_max>
 8025956:	2801      	cmp	r0, #1
 8025958:	4605      	mov	r5, r0
 802595a:	d11b      	bne.n	8025994 <__fputwc+0x4c>
 802595c:	1e7b      	subs	r3, r7, #1
 802595e:	2bfe      	cmp	r3, #254	@ 0xfe
 8025960:	d818      	bhi.n	8025994 <__fputwc+0x4c>
 8025962:	f88d 7004 	strb.w	r7, [sp, #4]
 8025966:	2600      	movs	r6, #0
 8025968:	f10d 0904 	add.w	r9, sp, #4
 802596c:	42ae      	cmp	r6, r5
 802596e:	d021      	beq.n	80259b4 <__fputwc+0x6c>
 8025970:	68a3      	ldr	r3, [r4, #8]
 8025972:	f816 1009 	ldrb.w	r1, [r6, r9]
 8025976:	3b01      	subs	r3, #1
 8025978:	2b00      	cmp	r3, #0
 802597a:	60a3      	str	r3, [r4, #8]
 802597c:	da04      	bge.n	8025988 <__fputwc+0x40>
 802597e:	69a2      	ldr	r2, [r4, #24]
 8025980:	4293      	cmp	r3, r2
 8025982:	db1b      	blt.n	80259bc <__fputwc+0x74>
 8025984:	290a      	cmp	r1, #10
 8025986:	d019      	beq.n	80259bc <__fputwc+0x74>
 8025988:	6823      	ldr	r3, [r4, #0]
 802598a:	1c5a      	adds	r2, r3, #1
 802598c:	6022      	str	r2, [r4, #0]
 802598e:	7019      	strb	r1, [r3, #0]
 8025990:	3601      	adds	r6, #1
 8025992:	e7eb      	b.n	802596c <__fputwc+0x24>
 8025994:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8025998:	463a      	mov	r2, r7
 802599a:	a901      	add	r1, sp, #4
 802599c:	4640      	mov	r0, r8
 802599e:	f001 faa1 	bl	8026ee4 <_wcrtomb_r>
 80259a2:	1c43      	adds	r3, r0, #1
 80259a4:	4605      	mov	r5, r0
 80259a6:	d1de      	bne.n	8025966 <__fputwc+0x1e>
 80259a8:	89a3      	ldrh	r3, [r4, #12]
 80259aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80259ae:	81a3      	strh	r3, [r4, #12]
 80259b0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80259b4:	4638      	mov	r0, r7
 80259b6:	b003      	add	sp, #12
 80259b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80259bc:	4622      	mov	r2, r4
 80259be:	4640      	mov	r0, r8
 80259c0:	f008 fb1d 	bl	802dffe <__swbuf_r>
 80259c4:	3001      	adds	r0, #1
 80259c6:	d1e3      	bne.n	8025990 <__fputwc+0x48>
 80259c8:	e7f2      	b.n	80259b0 <__fputwc+0x68>

080259ca <_fputwc_r>:
 80259ca:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 80259cc:	07db      	lsls	r3, r3, #31
 80259ce:	b570      	push	{r4, r5, r6, lr}
 80259d0:	4605      	mov	r5, r0
 80259d2:	460e      	mov	r6, r1
 80259d4:	4614      	mov	r4, r2
 80259d6:	d405      	bmi.n	80259e4 <_fputwc_r+0x1a>
 80259d8:	8993      	ldrh	r3, [r2, #12]
 80259da:	0598      	lsls	r0, r3, #22
 80259dc:	d402      	bmi.n	80259e4 <_fputwc_r+0x1a>
 80259de:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 80259e0:	f001 fa6f 	bl	8026ec2 <__retarget_lock_acquire_recursive>
 80259e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80259e8:	0499      	lsls	r1, r3, #18
 80259ea:	d406      	bmi.n	80259fa <_fputwc_r+0x30>
 80259ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80259f0:	81a3      	strh	r3, [r4, #12]
 80259f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80259f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80259f8:	6663      	str	r3, [r4, #100]	@ 0x64
 80259fa:	4622      	mov	r2, r4
 80259fc:	4628      	mov	r0, r5
 80259fe:	4631      	mov	r1, r6
 8025a00:	f7ff ffa2 	bl	8025948 <__fputwc>
 8025a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025a06:	07da      	lsls	r2, r3, #31
 8025a08:	4605      	mov	r5, r0
 8025a0a:	d405      	bmi.n	8025a18 <_fputwc_r+0x4e>
 8025a0c:	89a3      	ldrh	r3, [r4, #12]
 8025a0e:	059b      	lsls	r3, r3, #22
 8025a10:	d402      	bmi.n	8025a18 <_fputwc_r+0x4e>
 8025a12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025a14:	f001 fa57 	bl	8026ec6 <__retarget_lock_release_recursive>
 8025a18:	4628      	mov	r0, r5
 8025a1a:	bd70      	pop	{r4, r5, r6, pc}

08025a1c <memmove>:
 8025a1c:	4288      	cmp	r0, r1
 8025a1e:	b510      	push	{r4, lr}
 8025a20:	eb01 0402 	add.w	r4, r1, r2
 8025a24:	d902      	bls.n	8025a2c <memmove+0x10>
 8025a26:	4284      	cmp	r4, r0
 8025a28:	4623      	mov	r3, r4
 8025a2a:	d807      	bhi.n	8025a3c <memmove+0x20>
 8025a2c:	1e43      	subs	r3, r0, #1
 8025a2e:	42a1      	cmp	r1, r4
 8025a30:	d008      	beq.n	8025a44 <memmove+0x28>
 8025a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025a36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025a3a:	e7f8      	b.n	8025a2e <memmove+0x12>
 8025a3c:	4402      	add	r2, r0
 8025a3e:	4601      	mov	r1, r0
 8025a40:	428a      	cmp	r2, r1
 8025a42:	d100      	bne.n	8025a46 <memmove+0x2a>
 8025a44:	bd10      	pop	{r4, pc}
 8025a46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025a4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025a4e:	e7f7      	b.n	8025a40 <memmove+0x24>

08025a50 <memset>:
 8025a50:	4402      	add	r2, r0
 8025a52:	4603      	mov	r3, r0
 8025a54:	4293      	cmp	r3, r2
 8025a56:	d100      	bne.n	8025a5a <memset+0xa>
 8025a58:	4770      	bx	lr
 8025a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8025a5e:	e7f9      	b.n	8025a54 <memset+0x4>

08025a60 <strcat>:
 8025a60:	b510      	push	{r4, lr}
 8025a62:	4602      	mov	r2, r0
 8025a64:	7814      	ldrb	r4, [r2, #0]
 8025a66:	4613      	mov	r3, r2
 8025a68:	3201      	adds	r2, #1
 8025a6a:	2c00      	cmp	r4, #0
 8025a6c:	d1fa      	bne.n	8025a64 <strcat+0x4>
 8025a6e:	3b01      	subs	r3, #1
 8025a70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025a74:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025a78:	2a00      	cmp	r2, #0
 8025a7a:	d1f9      	bne.n	8025a70 <strcat+0x10>
 8025a7c:	bd10      	pop	{r4, pc}

08025a7e <strchr>:
 8025a7e:	b2c9      	uxtb	r1, r1
 8025a80:	4603      	mov	r3, r0
 8025a82:	4618      	mov	r0, r3
 8025a84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025a88:	b112      	cbz	r2, 8025a90 <strchr+0x12>
 8025a8a:	428a      	cmp	r2, r1
 8025a8c:	d1f9      	bne.n	8025a82 <strchr+0x4>
 8025a8e:	4770      	bx	lr
 8025a90:	2900      	cmp	r1, #0
 8025a92:	bf18      	it	ne
 8025a94:	2000      	movne	r0, #0
 8025a96:	4770      	bx	lr

08025a98 <strcspn>:
 8025a98:	b570      	push	{r4, r5, r6, lr}
 8025a9a:	4603      	mov	r3, r0
 8025a9c:	461e      	mov	r6, r3
 8025a9e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8025aa2:	b144      	cbz	r4, 8025ab6 <strcspn+0x1e>
 8025aa4:	1e4a      	subs	r2, r1, #1
 8025aa6:	e001      	b.n	8025aac <strcspn+0x14>
 8025aa8:	42a5      	cmp	r5, r4
 8025aaa:	d004      	beq.n	8025ab6 <strcspn+0x1e>
 8025aac:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8025ab0:	2d00      	cmp	r5, #0
 8025ab2:	d1f9      	bne.n	8025aa8 <strcspn+0x10>
 8025ab4:	e7f2      	b.n	8025a9c <strcspn+0x4>
 8025ab6:	1a30      	subs	r0, r6, r0
 8025ab8:	bd70      	pop	{r4, r5, r6, pc}

08025aba <strncmp>:
 8025aba:	b510      	push	{r4, lr}
 8025abc:	b16a      	cbz	r2, 8025ada <strncmp+0x20>
 8025abe:	3901      	subs	r1, #1
 8025ac0:	1884      	adds	r4, r0, r2
 8025ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025ac6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8025aca:	429a      	cmp	r2, r3
 8025acc:	d103      	bne.n	8025ad6 <strncmp+0x1c>
 8025ace:	42a0      	cmp	r0, r4
 8025ad0:	d001      	beq.n	8025ad6 <strncmp+0x1c>
 8025ad2:	2a00      	cmp	r2, #0
 8025ad4:	d1f5      	bne.n	8025ac2 <strncmp+0x8>
 8025ad6:	1ad0      	subs	r0, r2, r3
 8025ad8:	bd10      	pop	{r4, pc}
 8025ada:	4610      	mov	r0, r2
 8025adc:	e7fc      	b.n	8025ad8 <strncmp+0x1e>

08025ade <strncpy>:
 8025ade:	b510      	push	{r4, lr}
 8025ae0:	3901      	subs	r1, #1
 8025ae2:	4603      	mov	r3, r0
 8025ae4:	b132      	cbz	r2, 8025af4 <strncpy+0x16>
 8025ae6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025aea:	f803 4b01 	strb.w	r4, [r3], #1
 8025aee:	3a01      	subs	r2, #1
 8025af0:	2c00      	cmp	r4, #0
 8025af2:	d1f7      	bne.n	8025ae4 <strncpy+0x6>
 8025af4:	441a      	add	r2, r3
 8025af6:	2100      	movs	r1, #0
 8025af8:	4293      	cmp	r3, r2
 8025afa:	d100      	bne.n	8025afe <strncpy+0x20>
 8025afc:	bd10      	pop	{r4, pc}
 8025afe:	f803 1b01 	strb.w	r1, [r3], #1
 8025b02:	e7f9      	b.n	8025af8 <strncpy+0x1a>

08025b04 <strrchr>:
 8025b04:	b538      	push	{r3, r4, r5, lr}
 8025b06:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8025b0a:	4603      	mov	r3, r0
 8025b0c:	d10e      	bne.n	8025b2c <strrchr+0x28>
 8025b0e:	4621      	mov	r1, r4
 8025b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025b14:	f7ff bfb3 	b.w	8025a7e <strchr>
 8025b18:	1c43      	adds	r3, r0, #1
 8025b1a:	4605      	mov	r5, r0
 8025b1c:	4621      	mov	r1, r4
 8025b1e:	4618      	mov	r0, r3
 8025b20:	f7ff ffad 	bl	8025a7e <strchr>
 8025b24:	2800      	cmp	r0, #0
 8025b26:	d1f7      	bne.n	8025b18 <strrchr+0x14>
 8025b28:	4628      	mov	r0, r5
 8025b2a:	bd38      	pop	{r3, r4, r5, pc}
 8025b2c:	2500      	movs	r5, #0
 8025b2e:	e7f5      	b.n	8025b1c <strrchr+0x18>

08025b30 <strspn>:
 8025b30:	b570      	push	{r4, r5, r6, lr}
 8025b32:	4603      	mov	r3, r0
 8025b34:	461e      	mov	r6, r3
 8025b36:	f813 4b01 	ldrb.w	r4, [r3], #1
 8025b3a:	b13c      	cbz	r4, 8025b4c <strspn+0x1c>
 8025b3c:	1e4a      	subs	r2, r1, #1
 8025b3e:	e001      	b.n	8025b44 <strspn+0x14>
 8025b40:	42a5      	cmp	r5, r4
 8025b42:	d0f7      	beq.n	8025b34 <strspn+0x4>
 8025b44:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8025b48:	2d00      	cmp	r5, #0
 8025b4a:	d1f9      	bne.n	8025b40 <strspn+0x10>
 8025b4c:	1a30      	subs	r0, r6, r0
 8025b4e:	bd70      	pop	{r4, r5, r6, pc}

08025b50 <strstr>:
 8025b50:	780a      	ldrb	r2, [r1, #0]
 8025b52:	b570      	push	{r4, r5, r6, lr}
 8025b54:	b96a      	cbnz	r2, 8025b72 <strstr+0x22>
 8025b56:	bd70      	pop	{r4, r5, r6, pc}
 8025b58:	429a      	cmp	r2, r3
 8025b5a:	d109      	bne.n	8025b70 <strstr+0x20>
 8025b5c:	460c      	mov	r4, r1
 8025b5e:	4605      	mov	r5, r0
 8025b60:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8025b64:	2b00      	cmp	r3, #0
 8025b66:	d0f6      	beq.n	8025b56 <strstr+0x6>
 8025b68:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8025b6c:	429e      	cmp	r6, r3
 8025b6e:	d0f7      	beq.n	8025b60 <strstr+0x10>
 8025b70:	3001      	adds	r0, #1
 8025b72:	7803      	ldrb	r3, [r0, #0]
 8025b74:	2b00      	cmp	r3, #0
 8025b76:	d1ef      	bne.n	8025b58 <strstr+0x8>
 8025b78:	4618      	mov	r0, r3
 8025b7a:	e7ec      	b.n	8025b56 <strstr+0x6>

08025b7c <localtime_r>:
 8025b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025b80:	460c      	mov	r4, r1
 8025b82:	4680      	mov	r8, r0
 8025b84:	f008 fab6 	bl	802e0f4 <__gettzinfo>
 8025b88:	4621      	mov	r1, r4
 8025b8a:	4605      	mov	r5, r0
 8025b8c:	4640      	mov	r0, r8
 8025b8e:	f008 fab5 	bl	802e0fc <gmtime_r>
 8025b92:	6943      	ldr	r3, [r0, #20]
 8025b94:	0799      	lsls	r1, r3, #30
 8025b96:	4604      	mov	r4, r0
 8025b98:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 8025b9c:	d106      	bne.n	8025bac <localtime_r+0x30>
 8025b9e:	2264      	movs	r2, #100	@ 0x64
 8025ba0:	fb97 f3f2 	sdiv	r3, r7, r2
 8025ba4:	fb02 7313 	mls	r3, r2, r3, r7
 8025ba8:	2b00      	cmp	r3, #0
 8025baa:	d170      	bne.n	8025c8e <localtime_r+0x112>
 8025bac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8025bb0:	fb97 f3f2 	sdiv	r3, r7, r2
 8025bb4:	fb02 7313 	mls	r3, r2, r3, r7
 8025bb8:	fab3 f383 	clz	r3, r3
 8025bbc:	095b      	lsrs	r3, r3, #5
 8025bbe:	4e64      	ldr	r6, [pc, #400]	@ (8025d50 <localtime_r+0x1d4>)
 8025bc0:	2230      	movs	r2, #48	@ 0x30
 8025bc2:	fb02 6603 	mla	r6, r2, r3, r6
 8025bc6:	f000 fe97 	bl	80268f8 <__tz_lock>
 8025bca:	f000 fea1 	bl	8026910 <_tzset_unlocked>
 8025bce:	4b61      	ldr	r3, [pc, #388]	@ (8025d54 <localtime_r+0x1d8>)
 8025bd0:	681b      	ldr	r3, [r3, #0]
 8025bd2:	2b00      	cmp	r3, #0
 8025bd4:	d06a      	beq.n	8025cac <localtime_r+0x130>
 8025bd6:	686b      	ldr	r3, [r5, #4]
 8025bd8:	42bb      	cmp	r3, r7
 8025bda:	d15a      	bne.n	8025c92 <localtime_r+0x116>
 8025bdc:	682f      	ldr	r7, [r5, #0]
 8025bde:	e9d8 2300 	ldrd	r2, r3, [r8]
 8025be2:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8025be6:	2f00      	cmp	r7, #0
 8025be8:	d15b      	bne.n	8025ca2 <localtime_r+0x126>
 8025bea:	4282      	cmp	r2, r0
 8025bec:	eb73 0101 	sbcs.w	r1, r3, r1
 8025bf0:	db5e      	blt.n	8025cb0 <localtime_r+0x134>
 8025bf2:	2301      	movs	r3, #1
 8025bf4:	6223      	str	r3, [r4, #32]
 8025bf6:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8025bf8:	6861      	ldr	r1, [r4, #4]
 8025bfa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8025bfe:	fb93 f0f2 	sdiv	r0, r3, r2
 8025c02:	fb02 3310 	mls	r3, r2, r0, r3
 8025c06:	223c      	movs	r2, #60	@ 0x3c
 8025c08:	fb93 f5f2 	sdiv	r5, r3, r2
 8025c0c:	fb02 3215 	mls	r2, r2, r5, r3
 8025c10:	6823      	ldr	r3, [r4, #0]
 8025c12:	1a9b      	subs	r3, r3, r2
 8025c14:	68a2      	ldr	r2, [r4, #8]
 8025c16:	6023      	str	r3, [r4, #0]
 8025c18:	1b49      	subs	r1, r1, r5
 8025c1a:	1a12      	subs	r2, r2, r0
 8025c1c:	2b3b      	cmp	r3, #59	@ 0x3b
 8025c1e:	6061      	str	r1, [r4, #4]
 8025c20:	60a2      	str	r2, [r4, #8]
 8025c22:	dd51      	ble.n	8025cc8 <localtime_r+0x14c>
 8025c24:	3101      	adds	r1, #1
 8025c26:	6061      	str	r1, [r4, #4]
 8025c28:	3b3c      	subs	r3, #60	@ 0x3c
 8025c2a:	6023      	str	r3, [r4, #0]
 8025c2c:	6863      	ldr	r3, [r4, #4]
 8025c2e:	2b3b      	cmp	r3, #59	@ 0x3b
 8025c30:	dd50      	ble.n	8025cd4 <localtime_r+0x158>
 8025c32:	3201      	adds	r2, #1
 8025c34:	60a2      	str	r2, [r4, #8]
 8025c36:	3b3c      	subs	r3, #60	@ 0x3c
 8025c38:	6063      	str	r3, [r4, #4]
 8025c3a:	68a3      	ldr	r3, [r4, #8]
 8025c3c:	2b17      	cmp	r3, #23
 8025c3e:	dd4f      	ble.n	8025ce0 <localtime_r+0x164>
 8025c40:	69e2      	ldr	r2, [r4, #28]
 8025c42:	3201      	adds	r2, #1
 8025c44:	61e2      	str	r2, [r4, #28]
 8025c46:	69a2      	ldr	r2, [r4, #24]
 8025c48:	3201      	adds	r2, #1
 8025c4a:	2a07      	cmp	r2, #7
 8025c4c:	bfa8      	it	ge
 8025c4e:	2200      	movge	r2, #0
 8025c50:	61a2      	str	r2, [r4, #24]
 8025c52:	68e2      	ldr	r2, [r4, #12]
 8025c54:	3b18      	subs	r3, #24
 8025c56:	3201      	adds	r2, #1
 8025c58:	60a3      	str	r3, [r4, #8]
 8025c5a:	6923      	ldr	r3, [r4, #16]
 8025c5c:	60e2      	str	r2, [r4, #12]
 8025c5e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8025c62:	428a      	cmp	r2, r1
 8025c64:	dd0e      	ble.n	8025c84 <localtime_r+0x108>
 8025c66:	2b0b      	cmp	r3, #11
 8025c68:	eba2 0201 	sub.w	r2, r2, r1
 8025c6c:	60e2      	str	r2, [r4, #12]
 8025c6e:	f103 0201 	add.w	r2, r3, #1
 8025c72:	bf09      	itett	eq
 8025c74:	6963      	ldreq	r3, [r4, #20]
 8025c76:	6122      	strne	r2, [r4, #16]
 8025c78:	2200      	moveq	r2, #0
 8025c7a:	3301      	addeq	r3, #1
 8025c7c:	bf02      	ittt	eq
 8025c7e:	6122      	streq	r2, [r4, #16]
 8025c80:	6163      	streq	r3, [r4, #20]
 8025c82:	61e2      	streq	r2, [r4, #28]
 8025c84:	f000 fe3e 	bl	8026904 <__tz_unlock>
 8025c88:	4620      	mov	r0, r4
 8025c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025c8e:	2301      	movs	r3, #1
 8025c90:	e795      	b.n	8025bbe <localtime_r+0x42>
 8025c92:	4638      	mov	r0, r7
 8025c94:	f000 fd86 	bl	80267a4 <__tzcalc_limits>
 8025c98:	2800      	cmp	r0, #0
 8025c9a:	d19f      	bne.n	8025bdc <localtime_r+0x60>
 8025c9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025ca0:	e004      	b.n	8025cac <localtime_r+0x130>
 8025ca2:	4282      	cmp	r2, r0
 8025ca4:	eb73 0101 	sbcs.w	r1, r3, r1
 8025ca8:	da02      	bge.n	8025cb0 <localtime_r+0x134>
 8025caa:	2300      	movs	r3, #0
 8025cac:	6223      	str	r3, [r4, #32]
 8025cae:	e009      	b.n	8025cc4 <localtime_r+0x148>
 8025cb0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8025cb4:	4282      	cmp	r2, r0
 8025cb6:	418b      	sbcs	r3, r1
 8025cb8:	bfb4      	ite	lt
 8025cba:	2301      	movlt	r3, #1
 8025cbc:	2300      	movge	r3, #0
 8025cbe:	6223      	str	r3, [r4, #32]
 8025cc0:	2b00      	cmp	r3, #0
 8025cc2:	d198      	bne.n	8025bf6 <localtime_r+0x7a>
 8025cc4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8025cc6:	e797      	b.n	8025bf8 <localtime_r+0x7c>
 8025cc8:	2b00      	cmp	r3, #0
 8025cca:	daaf      	bge.n	8025c2c <localtime_r+0xb0>
 8025ccc:	3901      	subs	r1, #1
 8025cce:	6061      	str	r1, [r4, #4]
 8025cd0:	333c      	adds	r3, #60	@ 0x3c
 8025cd2:	e7aa      	b.n	8025c2a <localtime_r+0xae>
 8025cd4:	2b00      	cmp	r3, #0
 8025cd6:	dab0      	bge.n	8025c3a <localtime_r+0xbe>
 8025cd8:	3a01      	subs	r2, #1
 8025cda:	60a2      	str	r2, [r4, #8]
 8025cdc:	333c      	adds	r3, #60	@ 0x3c
 8025cde:	e7ab      	b.n	8025c38 <localtime_r+0xbc>
 8025ce0:	2b00      	cmp	r3, #0
 8025ce2:	dacf      	bge.n	8025c84 <localtime_r+0x108>
 8025ce4:	69e2      	ldr	r2, [r4, #28]
 8025ce6:	3a01      	subs	r2, #1
 8025ce8:	61e2      	str	r2, [r4, #28]
 8025cea:	69a2      	ldr	r2, [r4, #24]
 8025cec:	3a01      	subs	r2, #1
 8025cee:	bf48      	it	mi
 8025cf0:	2206      	movmi	r2, #6
 8025cf2:	61a2      	str	r2, [r4, #24]
 8025cf4:	68e2      	ldr	r2, [r4, #12]
 8025cf6:	3318      	adds	r3, #24
 8025cf8:	3a01      	subs	r2, #1
 8025cfa:	60e2      	str	r2, [r4, #12]
 8025cfc:	60a3      	str	r3, [r4, #8]
 8025cfe:	2a00      	cmp	r2, #0
 8025d00:	d1c0      	bne.n	8025c84 <localtime_r+0x108>
 8025d02:	6923      	ldr	r3, [r4, #16]
 8025d04:	3b01      	subs	r3, #1
 8025d06:	d405      	bmi.n	8025d14 <localtime_r+0x198>
 8025d08:	6123      	str	r3, [r4, #16]
 8025d0a:	6923      	ldr	r3, [r4, #16]
 8025d0c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025d10:	60e3      	str	r3, [r4, #12]
 8025d12:	e7b7      	b.n	8025c84 <localtime_r+0x108>
 8025d14:	230b      	movs	r3, #11
 8025d16:	6123      	str	r3, [r4, #16]
 8025d18:	6963      	ldr	r3, [r4, #20]
 8025d1a:	1e5a      	subs	r2, r3, #1
 8025d1c:	6162      	str	r2, [r4, #20]
 8025d1e:	0792      	lsls	r2, r2, #30
 8025d20:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8025d24:	d105      	bne.n	8025d32 <localtime_r+0x1b6>
 8025d26:	2164      	movs	r1, #100	@ 0x64
 8025d28:	fb93 f2f1 	sdiv	r2, r3, r1
 8025d2c:	fb01 3212 	mls	r2, r1, r2, r3
 8025d30:	b962      	cbnz	r2, 8025d4c <localtime_r+0x1d0>
 8025d32:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8025d36:	fb93 f1f2 	sdiv	r1, r3, r2
 8025d3a:	fb02 3311 	mls	r3, r2, r1, r3
 8025d3e:	fab3 f383 	clz	r3, r3
 8025d42:	095b      	lsrs	r3, r3, #5
 8025d44:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8025d48:	61e3      	str	r3, [r4, #28]
 8025d4a:	e7de      	b.n	8025d0a <localtime_r+0x18e>
 8025d4c:	2301      	movs	r3, #1
 8025d4e:	e7f9      	b.n	8025d44 <localtime_r+0x1c8>
 8025d50:	080340bc 	.word	0x080340bc
 8025d54:	200182bc 	.word	0x200182bc

08025d58 <iso_year_adjust>:
 8025d58:	6942      	ldr	r2, [r0, #20]
 8025d5a:	2a00      	cmp	r2, #0
 8025d5c:	f240 736c 	movw	r3, #1900	@ 0x76c
 8025d60:	bfa8      	it	ge
 8025d62:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 8025d66:	4413      	add	r3, r2
 8025d68:	0792      	lsls	r2, r2, #30
 8025d6a:	d105      	bne.n	8025d78 <iso_year_adjust+0x20>
 8025d6c:	2164      	movs	r1, #100	@ 0x64
 8025d6e:	fb93 f2f1 	sdiv	r2, r3, r1
 8025d72:	fb01 3212 	mls	r2, r1, r2, r3
 8025d76:	b9ca      	cbnz	r2, 8025dac <iso_year_adjust+0x54>
 8025d78:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8025d7c:	fb93 f1f2 	sdiv	r1, r3, r2
 8025d80:	fb02 3311 	mls	r3, r2, r1, r3
 8025d84:	fab3 f383 	clz	r3, r3
 8025d88:	095b      	lsrs	r3, r3, #5
 8025d8a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8025d8e:	0040      	lsls	r0, r0, #1
 8025d90:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8025d94:	4418      	add	r0, r3
 8025d96:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 8025d9a:	4298      	cmp	r0, r3
 8025d9c:	d027      	beq.n	8025dee <iso_year_adjust+0x96>
 8025d9e:	dc11      	bgt.n	8025dc4 <iso_year_adjust+0x6c>
 8025da0:	2801      	cmp	r0, #1
 8025da2:	dc0a      	bgt.n	8025dba <iso_year_adjust+0x62>
 8025da4:	43c0      	mvns	r0, r0
 8025da6:	0fc0      	lsrs	r0, r0, #31
 8025da8:	4240      	negs	r0, r0
 8025daa:	4770      	bx	lr
 8025dac:	2301      	movs	r3, #1
 8025dae:	e7ec      	b.n	8025d8a <iso_year_adjust+0x32>
 8025db0:	4b10      	ldr	r3, [pc, #64]	@ (8025df4 <iso_year_adjust+0x9c>)
 8025db2:	40c3      	lsrs	r3, r0
 8025db4:	f343 0000 	sbfx	r0, r3, #0, #1
 8025db8:	4770      	bx	lr
 8025dba:	380a      	subs	r0, #10
 8025dbc:	2817      	cmp	r0, #23
 8025dbe:	d9f7      	bls.n	8025db0 <iso_year_adjust+0x58>
 8025dc0:	2000      	movs	r0, #0
 8025dc2:	4770      	bx	lr
 8025dc4:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 8025dc8:	4298      	cmp	r0, r3
 8025dca:	dc06      	bgt.n	8025dda <iso_year_adjust+0x82>
 8025dcc:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 8025dd0:	4298      	cmp	r0, r3
 8025dd2:	bfd4      	ite	le
 8025dd4:	2000      	movle	r0, #0
 8025dd6:	2001      	movgt	r0, #1
 8025dd8:	4770      	bx	lr
 8025dda:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 8025dde:	3802      	subs	r0, #2
 8025de0:	2815      	cmp	r0, #21
 8025de2:	d8ed      	bhi.n	8025dc0 <iso_year_adjust+0x68>
 8025de4:	4b04      	ldr	r3, [pc, #16]	@ (8025df8 <iso_year_adjust+0xa0>)
 8025de6:	40c3      	lsrs	r3, r0
 8025de8:	f003 0001 	and.w	r0, r3, #1
 8025dec:	4770      	bx	lr
 8025dee:	2001      	movs	r0, #1
 8025df0:	4770      	bx	lr
 8025df2:	bf00      	nop
 8025df4:	00cc00cf 	.word	0x00cc00cf
 8025df8:	002a001f 	.word	0x002a001f

08025dfc <__strftime.isra.0>:
 8025dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e00:	b08f      	sub	sp, #60	@ 0x3c
 8025e02:	461e      	mov	r6, r3
 8025e04:	2300      	movs	r3, #0
 8025e06:	4607      	mov	r7, r0
 8025e08:	460d      	mov	r5, r1
 8025e0a:	9302      	str	r3, [sp, #8]
 8025e0c:	461c      	mov	r4, r3
 8025e0e:	7813      	ldrb	r3, [r2, #0]
 8025e10:	2b00      	cmp	r3, #0
 8025e12:	f000 84ae 	beq.w	8026772 <__strftime.isra.0+0x976>
 8025e16:	2b25      	cmp	r3, #37	@ 0x25
 8025e18:	d11f      	bne.n	8025e5a <__strftime.isra.0+0x5e>
 8025e1a:	f892 9001 	ldrb.w	r9, [r2, #1]
 8025e1e:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 8025e22:	d024      	beq.n	8025e6e <__strftime.isra.0+0x72>
 8025e24:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8025e28:	d021      	beq.n	8025e6e <__strftime.isra.0+0x72>
 8025e2a:	f102 0801 	add.w	r8, r2, #1
 8025e2e:	f04f 0900 	mov.w	r9, #0
 8025e32:	f898 2000 	ldrb.w	r2, [r8]
 8025e36:	3a31      	subs	r2, #49	@ 0x31
 8025e38:	2a08      	cmp	r2, #8
 8025e3a:	d81b      	bhi.n	8025e74 <__strftime.isra.0+0x78>
 8025e3c:	220a      	movs	r2, #10
 8025e3e:	4640      	mov	r0, r8
 8025e40:	a906      	add	r1, sp, #24
 8025e42:	f008 f88b 	bl	802df5c <strtoul>
 8025e46:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8025e4a:	4602      	mov	r2, r0
 8025e4c:	f898 1000 	ldrb.w	r1, [r8]
 8025e50:	2945      	cmp	r1, #69	@ 0x45
 8025e52:	d111      	bne.n	8025e78 <__strftime.isra.0+0x7c>
 8025e54:	f108 0801 	add.w	r8, r8, #1
 8025e58:	e010      	b.n	8025e7c <__strftime.isra.0+0x80>
 8025e5a:	1e69      	subs	r1, r5, #1
 8025e5c:	42a1      	cmp	r1, r4
 8025e5e:	f240 815d 	bls.w	802611c <__strftime.isra.0+0x320>
 8025e62:	553b      	strb	r3, [r7, r4]
 8025e64:	3201      	adds	r2, #1
 8025e66:	f104 0a01 	add.w	sl, r4, #1
 8025e6a:	4654      	mov	r4, sl
 8025e6c:	e7cf      	b.n	8025e0e <__strftime.isra.0+0x12>
 8025e6e:	f102 0802 	add.w	r8, r2, #2
 8025e72:	e7de      	b.n	8025e32 <__strftime.isra.0+0x36>
 8025e74:	2200      	movs	r2, #0
 8025e76:	e7e9      	b.n	8025e4c <__strftime.isra.0+0x50>
 8025e78:	294f      	cmp	r1, #79	@ 0x4f
 8025e7a:	d0eb      	beq.n	8025e54 <__strftime.isra.0+0x58>
 8025e7c:	f898 0000 	ldrb.w	r0, [r8]
 8025e80:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 8025e84:	2955      	cmp	r1, #85	@ 0x55
 8025e86:	f200 8149 	bhi.w	802611c <__strftime.isra.0+0x320>
 8025e8a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8025e8e:	046a      	.short	0x046a
 8025e90:	01470147 	.word	0x01470147
 8025e94:	01470147 	.word	0x01470147
 8025e98:	01470147 	.word	0x01470147
 8025e9c:	01470147 	.word	0x01470147
 8025ea0:	01470147 	.word	0x01470147
 8025ea4:	01470147 	.word	0x01470147
 8025ea8:	01470147 	.word	0x01470147
 8025eac:	01470147 	.word	0x01470147
 8025eb0:	01470147 	.word	0x01470147
 8025eb4:	01470147 	.word	0x01470147
 8025eb8:	01470147 	.word	0x01470147
 8025ebc:	01470147 	.word	0x01470147
 8025ec0:	01470147 	.word	0x01470147
 8025ec4:	00750147 	.word	0x00750147
 8025ec8:	00dc00a3 	.word	0x00dc00a3
 8025ecc:	01470128 	.word	0x01470128
 8025ed0:	01cb0159 	.word	0x01cb0159
 8025ed4:	02590252 	.word	0x02590252
 8025ed8:	01470147 	.word	0x01470147
 8025edc:	02710147 	.word	0x02710147
 8025ee0:	01470147 	.word	0x01470147
 8025ee4:	0147027c 	.word	0x0147027c
 8025ee8:	033402ac 	.word	0x033402ac
 8025eec:	036a033e 	.word	0x036a033e
 8025ef0:	03d80372 	.word	0x03d80372
 8025ef4:	03ee00d8 	.word	0x03ee00d8
 8025ef8:	01470440 	.word	0x01470440
 8025efc:	01470147 	.word	0x01470147
 8025f00:	01470147 	.word	0x01470147
 8025f04:	00560147 	.word	0x00560147
 8025f08:	00ba008d 	.word	0x00ba008d
 8025f0c:	011d011d 	.word	0x011d011d
 8025f10:	017e0147 	.word	0x017e0147
 8025f14:	0147008d 	.word	0x0147008d
 8025f18:	0252026a 	.word	0x0252026a
 8025f1c:	026e0259 	.word	0x026e0259
 8025f20:	01470273 	.word	0x01470273
 8025f24:	02a5027c 	.word	0x02a5027c
 8025f28:	02b500d0 	.word	0x02b500d0
 8025f2c:	035d0336 	.word	0x035d0336
 8025f30:	03cf03a4 	.word	0x03cf03a4
 8025f34:	03e000d4 	.word	0x03e000d4
 8025f38:	0403      	.short	0x0403
 8025f3a:	69b3      	ldr	r3, [r6, #24]
 8025f3c:	4aad      	ldr	r2, [pc, #692]	@ (80261f4 <__strftime.isra.0+0x3f8>)
 8025f3e:	3318      	adds	r3, #24
 8025f40:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8025f44:	4658      	mov	r0, fp
 8025f46:	f7da f9ab 	bl	80002a0 <strlen>
 8025f4a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8025f4e:	eb04 0a00 	add.w	sl, r4, r0
 8025f52:	1e6b      	subs	r3, r5, #1
 8025f54:	45a2      	cmp	sl, r4
 8025f56:	d107      	bne.n	8025f68 <__strftime.isra.0+0x16c>
 8025f58:	f898 3000 	ldrb.w	r3, [r8]
 8025f5c:	2b00      	cmp	r3, #0
 8025f5e:	f000 8409 	beq.w	8026774 <__strftime.isra.0+0x978>
 8025f62:	f108 0201 	add.w	r2, r8, #1
 8025f66:	e780      	b.n	8025e6a <__strftime.isra.0+0x6e>
 8025f68:	42a3      	cmp	r3, r4
 8025f6a:	f240 80d7 	bls.w	802611c <__strftime.isra.0+0x320>
 8025f6e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8025f72:	553a      	strb	r2, [r7, r4]
 8025f74:	3401      	adds	r4, #1
 8025f76:	e7ed      	b.n	8025f54 <__strftime.isra.0+0x158>
 8025f78:	69b2      	ldr	r2, [r6, #24]
 8025f7a:	4b9e      	ldr	r3, [pc, #632]	@ (80261f4 <__strftime.isra.0+0x3f8>)
 8025f7c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025f80:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 8025f84:	4658      	mov	r0, fp
 8025f86:	f7da f98b 	bl	80002a0 <strlen>
 8025f8a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8025f8e:	eb04 0a00 	add.w	sl, r4, r0
 8025f92:	1e6b      	subs	r3, r5, #1
 8025f94:	4554      	cmp	r4, sl
 8025f96:	d0df      	beq.n	8025f58 <__strftime.isra.0+0x15c>
 8025f98:	42a3      	cmp	r3, r4
 8025f9a:	f240 80bf 	bls.w	802611c <__strftime.isra.0+0x320>
 8025f9e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8025fa2:	553a      	strb	r2, [r7, r4]
 8025fa4:	3401      	adds	r4, #1
 8025fa6:	e7f5      	b.n	8025f94 <__strftime.isra.0+0x198>
 8025fa8:	4b92      	ldr	r3, [pc, #584]	@ (80261f4 <__strftime.isra.0+0x3f8>)
 8025faa:	6932      	ldr	r2, [r6, #16]
 8025fac:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8025fb0:	4658      	mov	r0, fp
 8025fb2:	f7da f975 	bl	80002a0 <strlen>
 8025fb6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8025fba:	eb04 0a00 	add.w	sl, r4, r0
 8025fbe:	1e6b      	subs	r3, r5, #1
 8025fc0:	45a2      	cmp	sl, r4
 8025fc2:	d0c9      	beq.n	8025f58 <__strftime.isra.0+0x15c>
 8025fc4:	42a3      	cmp	r3, r4
 8025fc6:	f240 80a9 	bls.w	802611c <__strftime.isra.0+0x320>
 8025fca:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8025fce:	553a      	strb	r2, [r7, r4]
 8025fd0:	3401      	adds	r4, #1
 8025fd2:	e7f5      	b.n	8025fc0 <__strftime.isra.0+0x1c4>
 8025fd4:	6933      	ldr	r3, [r6, #16]
 8025fd6:	4a87      	ldr	r2, [pc, #540]	@ (80261f4 <__strftime.isra.0+0x3f8>)
 8025fd8:	330c      	adds	r3, #12
 8025fda:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8025fde:	4658      	mov	r0, fp
 8025fe0:	f7da f95e 	bl	80002a0 <strlen>
 8025fe4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8025fe8:	eb04 0a00 	add.w	sl, r4, r0
 8025fec:	1e6b      	subs	r3, r5, #1
 8025fee:	45a2      	cmp	sl, r4
 8025ff0:	d0b2      	beq.n	8025f58 <__strftime.isra.0+0x15c>
 8025ff2:	42a3      	cmp	r3, r4
 8025ff4:	f240 8092 	bls.w	802611c <__strftime.isra.0+0x320>
 8025ff8:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8025ffc:	553a      	strb	r2, [r7, r4]
 8025ffe:	3401      	adds	r4, #1
 8026000:	e7f5      	b.n	8025fee <__strftime.isra.0+0x1f2>
 8026002:	4b7c      	ldr	r3, [pc, #496]	@ (80261f4 <__strftime.isra.0+0x3f8>)
 8026004:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 8026008:	4650      	mov	r0, sl
 802600a:	f7da f949 	bl	80002a0 <strlen>
 802600e:	f89a 3000 	ldrb.w	r3, [sl]
 8026012:	2b00      	cmp	r3, #0
 8026014:	f000 8341 	beq.w	802669a <__strftime.isra.0+0x89e>
 8026018:	4633      	mov	r3, r6
 802601a:	4652      	mov	r2, sl
 802601c:	1b29      	subs	r1, r5, r4
 802601e:	1938      	adds	r0, r7, r4
 8026020:	f7ff feec 	bl	8025dfc <__strftime.isra.0>
 8026024:	2800      	cmp	r0, #0
 8026026:	dd79      	ble.n	802611c <__strftime.isra.0+0x320>
 8026028:	eb04 0a00 	add.w	sl, r4, r0
 802602c:	e794      	b.n	8025f58 <__strftime.isra.0+0x15c>
 802602e:	4b71      	ldr	r3, [pc, #452]	@ (80261f4 <__strftime.isra.0+0x3f8>)
 8026030:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 8026034:	e7e8      	b.n	8026008 <__strftime.isra.0+0x20c>
 8026036:	4b6f      	ldr	r3, [pc, #444]	@ (80261f4 <__strftime.isra.0+0x3f8>)
 8026038:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802603c:	e7e4      	b.n	8026008 <__strftime.isra.0+0x20c>
 802603e:	4b6d      	ldr	r3, [pc, #436]	@ (80261f4 <__strftime.isra.0+0x3f8>)
 8026040:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 8026044:	e7e0      	b.n	8026008 <__strftime.isra.0+0x20c>
 8026046:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802604a:	496b      	ldr	r1, [pc, #428]	@ (80261f8 <__strftime.isra.0+0x3fc>)
 802604c:	458a      	cmp	sl, r1
 802604e:	bfac      	ite	ge
 8026050:	f04f 0b00 	movge.w	fp, #0
 8026054:	f04f 0b01 	movlt.w	fp, #1
 8026058:	f1ba 0f00 	cmp.w	sl, #0
 802605c:	db12      	blt.n	8026084 <__strftime.isra.0+0x288>
 802605e:	2064      	movs	r0, #100	@ 0x64
 8026060:	fb9a f0f0 	sdiv	r0, sl, r0
 8026064:	3013      	adds	r0, #19
 8026066:	f1b9 0f00 	cmp.w	r9, #0
 802606a:	d015      	beq.n	8026098 <__strftime.isra.0+0x29c>
 802606c:	2863      	cmp	r0, #99	@ 0x63
 802606e:	dd28      	ble.n	80260c2 <__strftime.isra.0+0x2c6>
 8026070:	4b62      	ldr	r3, [pc, #392]	@ (80261fc <__strftime.isra.0+0x400>)
 8026072:	4963      	ldr	r1, [pc, #396]	@ (8026200 <__strftime.isra.0+0x404>)
 8026074:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8026078:	bf0c      	ite	eq
 802607a:	469c      	moveq	ip, r3
 802607c:	468c      	movne	ip, r1
 802607e:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802621c <__strftime.isra.0+0x420>
 8026082:	e00d      	b.n	80260a0 <__strftime.isra.0+0x2a4>
 8026084:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 8026088:	9203      	str	r2, [sp, #12]
 802608a:	f000 ff88 	bl	8026f9e <abs>
 802608e:	2164      	movs	r1, #100	@ 0x64
 8026090:	9a03      	ldr	r2, [sp, #12]
 8026092:	fb90 f0f1 	sdiv	r0, r0, r1
 8026096:	e7e6      	b.n	8026066 <__strftime.isra.0+0x26a>
 8026098:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8026200 <__strftime.isra.0+0x404>
 802609c:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8026220 <__strftime.isra.0+0x424>
 80260a0:	4b58      	ldr	r3, [pc, #352]	@ (8026204 <__strftime.isra.0+0x408>)
 80260a2:	9001      	str	r0, [sp, #4]
 80260a4:	2a02      	cmp	r2, #2
 80260a6:	bf2c      	ite	cs
 80260a8:	ebcb 0102 	rsbcs	r1, fp, r2
 80260ac:	f1cb 0102 	rsbcc	r1, fp, #2
 80260b0:	4a51      	ldr	r2, [pc, #324]	@ (80261f8 <__strftime.isra.0+0x3fc>)
 80260b2:	9100      	str	r1, [sp, #0]
 80260b4:	4592      	cmp	sl, r2
 80260b6:	bfa8      	it	ge
 80260b8:	4663      	movge	r3, ip
 80260ba:	4672      	mov	r2, lr
 80260bc:	1b29      	subs	r1, r5, r4
 80260be:	1938      	adds	r0, r7, r4
 80260c0:	e023      	b.n	802610a <__strftime.isra.0+0x30e>
 80260c2:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 8026200 <__strftime.isra.0+0x404>
 80260c6:	e7da      	b.n	802607e <__strftime.isra.0+0x282>
 80260c8:	494f      	ldr	r1, [pc, #316]	@ (8026208 <__strftime.isra.0+0x40c>)
 80260ca:	4a50      	ldr	r2, [pc, #320]	@ (802620c <__strftime.isra.0+0x410>)
 80260cc:	68f3      	ldr	r3, [r6, #12]
 80260ce:	2864      	cmp	r0, #100	@ 0x64
 80260d0:	bf18      	it	ne
 80260d2:	460a      	movne	r2, r1
 80260d4:	1b29      	subs	r1, r5, r4
 80260d6:	1938      	adds	r0, r7, r4
 80260d8:	f002 f986 	bl	80283e8 <sniprintf>
 80260dc:	e017      	b.n	802610e <__strftime.isra.0+0x312>
 80260de:	6970      	ldr	r0, [r6, #20]
 80260e0:	6933      	ldr	r3, [r6, #16]
 80260e2:	2800      	cmp	r0, #0
 80260e4:	f103 0a01 	add.w	sl, r3, #1
 80260e8:	eb07 0b04 	add.w	fp, r7, r4
 80260ec:	68f3      	ldr	r3, [r6, #12]
 80260ee:	eba5 0904 	sub.w	r9, r5, r4
 80260f2:	db19      	blt.n	8026128 <__strftime.isra.0+0x32c>
 80260f4:	2264      	movs	r2, #100	@ 0x64
 80260f6:	fb90 fcf2 	sdiv	ip, r0, r2
 80260fa:	fb02 001c 	mls	r0, r2, ip, r0
 80260fe:	4a44      	ldr	r2, [pc, #272]	@ (8026210 <__strftime.isra.0+0x414>)
 8026100:	e9cd 3000 	strd	r3, r0, [sp]
 8026104:	4649      	mov	r1, r9
 8026106:	4653      	mov	r3, sl
 8026108:	4658      	mov	r0, fp
 802610a:	f002 f96d 	bl	80283e8 <sniprintf>
 802610e:	2800      	cmp	r0, #0
 8026110:	db04      	blt.n	802611c <__strftime.isra.0+0x320>
 8026112:	eb00 0a04 	add.w	sl, r0, r4
 8026116:	4555      	cmp	r5, sl
 8026118:	f63f af1e 	bhi.w	8025f58 <__strftime.isra.0+0x15c>
 802611c:	f04f 0a00 	mov.w	sl, #0
 8026120:	4650      	mov	r0, sl
 8026122:	b00f      	add	sp, #60	@ 0x3c
 8026124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026128:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802612c:	9303      	str	r3, [sp, #12]
 802612e:	f000 ff36 	bl	8026f9e <abs>
 8026132:	2264      	movs	r2, #100	@ 0x64
 8026134:	9b03      	ldr	r3, [sp, #12]
 8026136:	fb90 fcf2 	sdiv	ip, r0, r2
 802613a:	fb0c 0012 	mls	r0, ip, r2, r0
 802613e:	e7de      	b.n	80260fe <__strftime.isra.0+0x302>
 8026140:	2125      	movs	r1, #37	@ 0x25
 8026142:	f88d 1018 	strb.w	r1, [sp, #24]
 8026146:	f1b9 0f00 	cmp.w	r9, #0
 802614a:	d00b      	beq.n	8026164 <__strftime.isra.0+0x368>
 802614c:	2a05      	cmp	r2, #5
 802614e:	f88d 9019 	strb.w	r9, [sp, #25]
 8026152:	d817      	bhi.n	8026184 <__strftime.isra.0+0x388>
 8026154:	f10d 001a 	add.w	r0, sp, #26
 8026158:	492e      	ldr	r1, [pc, #184]	@ (8026214 <__strftime.isra.0+0x418>)
 802615a:	f000 fe83 	bl	8026e64 <strcpy>
 802615e:	4633      	mov	r3, r6
 8026160:	aa06      	add	r2, sp, #24
 8026162:	e75b      	b.n	802601c <__strftime.isra.0+0x220>
 8026164:	232b      	movs	r3, #43	@ 0x2b
 8026166:	f88d 3019 	strb.w	r3, [sp, #25]
 802616a:	2304      	movs	r3, #4
 802616c:	4a2a      	ldr	r2, [pc, #168]	@ (8026218 <__strftime.isra.0+0x41c>)
 802616e:	211e      	movs	r1, #30
 8026170:	f10d 001a 	add.w	r0, sp, #26
 8026174:	f002 f938 	bl	80283e8 <sniprintf>
 8026178:	2800      	cmp	r0, #0
 802617a:	ddeb      	ble.n	8026154 <__strftime.isra.0+0x358>
 802617c:	f10d 031a 	add.w	r3, sp, #26
 8026180:	4418      	add	r0, r3
 8026182:	e7e9      	b.n	8026158 <__strftime.isra.0+0x35c>
 8026184:	1f93      	subs	r3, r2, #6
 8026186:	d0e5      	beq.n	8026154 <__strftime.isra.0+0x358>
 8026188:	e7f0      	b.n	802616c <__strftime.isra.0+0x370>
 802618a:	4630      	mov	r0, r6
 802618c:	f7ff fde4 	bl	8025d58 <iso_year_adjust>
 8026190:	4682      	mov	sl, r0
 8026192:	6970      	ldr	r0, [r6, #20]
 8026194:	2800      	cmp	r0, #0
 8026196:	db11      	blt.n	80261bc <__strftime.isra.0+0x3c0>
 8026198:	2364      	movs	r3, #100	@ 0x64
 802619a:	fb90 f2f3 	sdiv	r2, r0, r3
 802619e:	fb03 0012 	mls	r0, r3, r2, r0
 80261a2:	2364      	movs	r3, #100	@ 0x64
 80261a4:	4482      	add	sl, r0
 80261a6:	fb9a f2f3 	sdiv	r2, sl, r3
 80261aa:	fb03 aa12 	mls	sl, r3, r2, sl
 80261ae:	449a      	add	sl, r3
 80261b0:	fbba f2f3 	udiv	r2, sl, r3
 80261b4:	fb03 a312 	mls	r3, r3, r2, sl
 80261b8:	4a14      	ldr	r2, [pc, #80]	@ (802620c <__strftime.isra.0+0x410>)
 80261ba:	e78b      	b.n	80260d4 <__strftime.isra.0+0x2d8>
 80261bc:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80261c0:	f000 feed 	bl	8026f9e <abs>
 80261c4:	2364      	movs	r3, #100	@ 0x64
 80261c6:	f1ba 0f00 	cmp.w	sl, #0
 80261ca:	fb90 f2f3 	sdiv	r2, r0, r3
 80261ce:	fb02 0013 	mls	r0, r2, r3, r0
 80261d2:	da07      	bge.n	80261e4 <__strftime.isra.0+0x3e8>
 80261d4:	6972      	ldr	r2, [r6, #20]
 80261d6:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 80261da:	429a      	cmp	r2, r3
 80261dc:	bfb8      	it	lt
 80261de:	f04f 0a01 	movlt.w	sl, #1
 80261e2:	e7de      	b.n	80261a2 <__strftime.isra.0+0x3a6>
 80261e4:	d0dd      	beq.n	80261a2 <__strftime.isra.0+0x3a6>
 80261e6:	6972      	ldr	r2, [r6, #20]
 80261e8:	4b03      	ldr	r3, [pc, #12]	@ (80261f8 <__strftime.isra.0+0x3fc>)
 80261ea:	429a      	cmp	r2, r3
 80261ec:	bfb8      	it	lt
 80261ee:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 80261f2:	e7d6      	b.n	80261a2 <__strftime.isra.0+0x3a6>
 80261f4:	08034308 	.word	0x08034308
 80261f8:	fffff894 	.word	0xfffff894
 80261fc:	0803412b 	.word	0x0803412b
 8026200:	08034047 	.word	0x08034047
 8026204:	0803412d 	.word	0x0803412d
 8026208:	0803412f 	.word	0x0803412f
 802620c:	0803413d 	.word	0x0803413d
 8026210:	08034133 	.word	0x08034133
 8026214:	08034146 	.word	0x08034146
 8026218:	08034142 	.word	0x08034142
 802621c:	08034123 	.word	0x08034123
 8026220:	0803411c 	.word	0x0803411c
 8026224:	6971      	ldr	r1, [r6, #20]
 8026226:	48bc      	ldr	r0, [pc, #752]	@ (8026518 <__strftime.isra.0+0x71c>)
 8026228:	9205      	str	r2, [sp, #20]
 802622a:	4281      	cmp	r1, r0
 802622c:	bfac      	ite	ge
 802622e:	2300      	movge	r3, #0
 8026230:	2301      	movlt	r3, #1
 8026232:	4630      	mov	r0, r6
 8026234:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8026238:	f7ff fd8e 	bl	8025d58 <iso_year_adjust>
 802623c:	9904      	ldr	r1, [sp, #16]
 802623e:	9a05      	ldr	r2, [sp, #20]
 8026240:	2900      	cmp	r1, #0
 8026242:	4682      	mov	sl, r0
 8026244:	db3a      	blt.n	80262bc <__strftime.isra.0+0x4c0>
 8026246:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802624a:	fb91 fbfb 	sdiv	fp, r1, fp
 802624e:	f10b 0b13 	add.w	fp, fp, #19
 8026252:	6970      	ldr	r0, [r6, #20]
 8026254:	2800      	cmp	r0, #0
 8026256:	db3e      	blt.n	80262d6 <__strftime.isra.0+0x4da>
 8026258:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802625c:	f1ba 0f00 	cmp.w	sl, #0
 8026260:	fb90 fefc 	sdiv	lr, r0, ip
 8026264:	fb0c 001e 	mls	r0, ip, lr, r0
 8026268:	da4f      	bge.n	802630a <__strftime.isra.0+0x50e>
 802626a:	4482      	add	sl, r0
 802626c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8026270:	d157      	bne.n	8026322 <__strftime.isra.0+0x526>
 8026272:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8026276:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802627a:	9b03      	ldr	r3, [sp, #12]
 802627c:	2164      	movs	r1, #100	@ 0x64
 802627e:	fb01 aa0b 	mla	sl, r1, fp, sl
 8026282:	2b00      	cmp	r3, #0
 8026284:	f040 81f7 	bne.w	8026676 <__strftime.isra.0+0x87a>
 8026288:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802628c:	d104      	bne.n	8026298 <__strftime.isra.0+0x49c>
 802628e:	f242 710f 	movw	r1, #9999	@ 0x270f
 8026292:	458a      	cmp	sl, r1
 8026294:	f200 8275 	bhi.w	8026782 <__strftime.isra.0+0x986>
 8026298:	a906      	add	r1, sp, #24
 802629a:	2025      	movs	r0, #37	@ 0x25
 802629c:	7008      	strb	r0, [r1, #0]
 802629e:	f1b9 0f00 	cmp.w	r9, #0
 80262a2:	f040 81f3 	bne.w	802668c <__strftime.isra.0+0x890>
 80262a6:	1c48      	adds	r0, r1, #1
 80262a8:	499c      	ldr	r1, [pc, #624]	@ (802651c <__strftime.isra.0+0x720>)
 80262aa:	9203      	str	r2, [sp, #12]
 80262ac:	f000 fdda 	bl	8026e64 <strcpy>
 80262b0:	9a03      	ldr	r2, [sp, #12]
 80262b2:	f8cd a000 	str.w	sl, [sp]
 80262b6:	4613      	mov	r3, r2
 80262b8:	aa06      	add	r2, sp, #24
 80262ba:	e098      	b.n	80263ee <__strftime.isra.0+0x5f2>
 80262bc:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 80262c0:	9205      	str	r2, [sp, #20]
 80262c2:	9104      	str	r1, [sp, #16]
 80262c4:	f000 fe6b 	bl	8026f9e <abs>
 80262c8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80262cc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80262d0:	fb90 fbfc 	sdiv	fp, r0, ip
 80262d4:	e7bd      	b.n	8026252 <__strftime.isra.0+0x456>
 80262d6:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80262da:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80262de:	f000 fe5e 	bl	8026f9e <abs>
 80262e2:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80262e6:	f1ba 0f00 	cmp.w	sl, #0
 80262ea:	fb90 fefc 	sdiv	lr, r0, ip
 80262ee:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80262f2:	fb0e 001c 	mls	r0, lr, ip, r0
 80262f6:	da08      	bge.n	802630a <__strftime.isra.0+0x50e>
 80262f8:	6971      	ldr	r1, [r6, #20]
 80262fa:	4b89      	ldr	r3, [pc, #548]	@ (8026520 <__strftime.isra.0+0x724>)
 80262fc:	4299      	cmp	r1, r3
 80262fe:	dab4      	bge.n	802626a <__strftime.isra.0+0x46e>
 8026300:	f04f 0a01 	mov.w	sl, #1
 8026304:	f8cd a00c 	str.w	sl, [sp, #12]
 8026308:	e7af      	b.n	802626a <__strftime.isra.0+0x46e>
 802630a:	f1ba 0f00 	cmp.w	sl, #0
 802630e:	d0ac      	beq.n	802626a <__strftime.isra.0+0x46e>
 8026310:	4b81      	ldr	r3, [pc, #516]	@ (8026518 <__strftime.isra.0+0x71c>)
 8026312:	4299      	cmp	r1, r3
 8026314:	9b03      	ldr	r3, [sp, #12]
 8026316:	bfbc      	itt	lt
 8026318:	2301      	movlt	r3, #1
 802631a:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802631e:	9303      	str	r3, [sp, #12]
 8026320:	e7a3      	b.n	802626a <__strftime.isra.0+0x46e>
 8026322:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 8026326:	bf04      	itt	eq
 8026328:	f10b 0b01 	addeq.w	fp, fp, #1
 802632c:	f04f 0a00 	moveq.w	sl, #0
 8026330:	e7a3      	b.n	802627a <__strftime.isra.0+0x47e>
 8026332:	497c      	ldr	r1, [pc, #496]	@ (8026524 <__strftime.isra.0+0x728>)
 8026334:	4a7c      	ldr	r2, [pc, #496]	@ (8026528 <__strftime.isra.0+0x72c>)
 8026336:	68b3      	ldr	r3, [r6, #8]
 8026338:	286b      	cmp	r0, #107	@ 0x6b
 802633a:	bf18      	it	ne
 802633c:	460a      	movne	r2, r1
 802633e:	e6c9      	b.n	80260d4 <__strftime.isra.0+0x2d8>
 8026340:	68b3      	ldr	r3, [r6, #8]
 8026342:	b163      	cbz	r3, 802635e <__strftime.isra.0+0x562>
 8026344:	2b0c      	cmp	r3, #12
 8026346:	d004      	beq.n	8026352 <__strftime.isra.0+0x556>
 8026348:	210c      	movs	r1, #12
 802634a:	fb93 f2f1 	sdiv	r2, r3, r1
 802634e:	fb01 3312 	mls	r3, r1, r2, r3
 8026352:	4975      	ldr	r1, [pc, #468]	@ (8026528 <__strftime.isra.0+0x72c>)
 8026354:	4a73      	ldr	r2, [pc, #460]	@ (8026524 <__strftime.isra.0+0x728>)
 8026356:	2849      	cmp	r0, #73	@ 0x49
 8026358:	bf18      	it	ne
 802635a:	460a      	movne	r2, r1
 802635c:	e6ba      	b.n	80260d4 <__strftime.isra.0+0x2d8>
 802635e:	230c      	movs	r3, #12
 8026360:	e7f7      	b.n	8026352 <__strftime.isra.0+0x556>
 8026362:	69f3      	ldr	r3, [r6, #28]
 8026364:	4a71      	ldr	r2, [pc, #452]	@ (802652c <__strftime.isra.0+0x730>)
 8026366:	3301      	adds	r3, #1
 8026368:	e6b4      	b.n	80260d4 <__strftime.isra.0+0x2d8>
 802636a:	6933      	ldr	r3, [r6, #16]
 802636c:	3301      	adds	r3, #1
 802636e:	e723      	b.n	80261b8 <__strftime.isra.0+0x3bc>
 8026370:	6873      	ldr	r3, [r6, #4]
 8026372:	e721      	b.n	80261b8 <__strftime.isra.0+0x3bc>
 8026374:	1e6b      	subs	r3, r5, #1
 8026376:	429c      	cmp	r4, r3
 8026378:	f4bf aed0 	bcs.w	802611c <__strftime.isra.0+0x320>
 802637c:	f104 0a01 	add.w	sl, r4, #1
 8026380:	230a      	movs	r3, #10
 8026382:	553b      	strb	r3, [r7, r4]
 8026384:	e5e8      	b.n	8025f58 <__strftime.isra.0+0x15c>
 8026386:	68b3      	ldr	r3, [r6, #8]
 8026388:	2b0b      	cmp	r3, #11
 802638a:	4b69      	ldr	r3, [pc, #420]	@ (8026530 <__strftime.isra.0+0x734>)
 802638c:	bfd4      	ite	le
 802638e:	2200      	movle	r2, #0
 8026390:	2201      	movgt	r2, #1
 8026392:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026396:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802639a:	4658      	mov	r0, fp
 802639c:	f7d9 ff80 	bl	80002a0 <strlen>
 80263a0:	eb04 0a00 	add.w	sl, r4, r0
 80263a4:	4863      	ldr	r0, [pc, #396]	@ (8026534 <__strftime.isra.0+0x738>)
 80263a6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80263aa:	1e69      	subs	r1, r5, #1
 80263ac:	45a2      	cmp	sl, r4
 80263ae:	f43f add3 	beq.w	8025f58 <__strftime.isra.0+0x15c>
 80263b2:	42a1      	cmp	r1, r4
 80263b4:	f67f aeb2 	bls.w	802611c <__strftime.isra.0+0x320>
 80263b8:	f898 2000 	ldrb.w	r2, [r8]
 80263bc:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 80263c0:	2a50      	cmp	r2, #80	@ 0x50
 80263c2:	d106      	bne.n	80263d2 <__strftime.isra.0+0x5d6>
 80263c4:	5cc2      	ldrb	r2, [r0, r3]
 80263c6:	f002 0203 	and.w	r2, r2, #3
 80263ca:	2a01      	cmp	r2, #1
 80263cc:	bf08      	it	eq
 80263ce:	3320      	addeq	r3, #32
 80263d0:	b2db      	uxtb	r3, r3
 80263d2:	553b      	strb	r3, [r7, r4]
 80263d4:	3401      	adds	r4, #1
 80263d6:	e7e9      	b.n	80263ac <__strftime.isra.0+0x5b0>
 80263d8:	2203      	movs	r2, #3
 80263da:	6933      	ldr	r3, [r6, #16]
 80263dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80263e0:	4a55      	ldr	r2, [pc, #340]	@ (8026538 <__strftime.isra.0+0x73c>)
 80263e2:	3301      	adds	r3, #1
 80263e4:	e676      	b.n	80260d4 <__strftime.isra.0+0x2d8>
 80263e6:	6873      	ldr	r3, [r6, #4]
 80263e8:	9300      	str	r3, [sp, #0]
 80263ea:	68b3      	ldr	r3, [r6, #8]
 80263ec:	4a53      	ldr	r2, [pc, #332]	@ (802653c <__strftime.isra.0+0x740>)
 80263ee:	1b29      	subs	r1, r5, r4
 80263f0:	1938      	adds	r0, r7, r4
 80263f2:	f001 fff9 	bl	80283e8 <sniprintf>
 80263f6:	e68a      	b.n	802610e <__strftime.isra.0+0x312>
 80263f8:	6a33      	ldr	r3, [r6, #32]
 80263fa:	2b00      	cmp	r3, #0
 80263fc:	db78      	blt.n	80264f0 <__strftime.isra.0+0x6f4>
 80263fe:	f000 fa7b 	bl	80268f8 <__tz_lock>
 8026402:	9b02      	ldr	r3, [sp, #8]
 8026404:	b90b      	cbnz	r3, 802640a <__strftime.isra.0+0x60e>
 8026406:	f000 fa83 	bl	8026910 <_tzset_unlocked>
 802640a:	f007 fe73 	bl	802e0f4 <__gettzinfo>
 802640e:	6a33      	ldr	r3, [r6, #32]
 8026410:	2b00      	cmp	r3, #0
 8026412:	bfd4      	ite	le
 8026414:	2200      	movle	r2, #0
 8026416:	2201      	movgt	r2, #1
 8026418:	2328      	movs	r3, #40	@ 0x28
 802641a:	fb02 3303 	mla	r3, r2, r3, r3
 802641e:	58c3      	ldr	r3, [r0, r3]
 8026420:	f1c3 0a00 	rsb	sl, r3, #0
 8026424:	f000 fa6e 	bl	8026904 <__tz_unlock>
 8026428:	2301      	movs	r3, #1
 802642a:	9302      	str	r3, [sp, #8]
 802642c:	6972      	ldr	r2, [r6, #20]
 802642e:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 8026432:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8026436:	f16c 0c00 	sbc.w	ip, ip, #0
 802643a:	f1bc 0f00 	cmp.w	ip, #0
 802643e:	eba5 0104 	sub.w	r1, r5, r4
 8026442:	eb07 0004 	add.w	r0, r7, r4
 8026446:	da02      	bge.n	802644e <__strftime.isra.0+0x652>
 8026448:	3303      	adds	r3, #3
 802644a:	f14c 0c00 	adc.w	ip, ip, #0
 802644e:	089b      	lsrs	r3, r3, #2
 8026450:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8026454:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 8026458:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802645c:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8026460:	fb9e fefb 	sdiv	lr, lr, fp
 8026464:	ebb3 030e 	subs.w	r3, r3, lr
 8026468:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802646c:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 8026470:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 8026474:	fb9e fefb 	sdiv	lr, lr, fp
 8026478:	eb13 030e 	adds.w	r3, r3, lr
 802647c:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 8026480:	3a46      	subs	r2, #70	@ 0x46
 8026482:	f240 1e6d 	movw	lr, #365	@ 0x16d
 8026486:	fb0e f202 	mul.w	r2, lr, r2
 802648a:	189b      	adds	r3, r3, r2
 802648c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 8026490:	69f2      	ldr	r2, [r6, #28]
 8026492:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8026496:	189b      	adds	r3, r3, r2
 8026498:	f04f 0e18 	mov.w	lr, #24
 802649c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 80264a0:	fba3 230e 	umull	r2, r3, r3, lr
 80264a4:	fb0e 330c 	mla	r3, lr, ip, r3
 80264a8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80264ac:	eb12 020c 	adds.w	r2, r2, ip
 80264b0:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 80264b4:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 80264b8:	fba2 2e0c 	umull	r2, lr, r2, ip
 80264bc:	fb0c ee03 	mla	lr, ip, r3, lr
 80264c0:	eb12 030b 	adds.w	r3, r2, fp
 80264c4:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 80264c8:	fba3 e30c 	umull	lr, r3, r3, ip
 80264cc:	fb0c 3302 	mla	r3, ip, r2, r3
 80264d0:	f8d6 c000 	ldr.w	ip, [r6]
 80264d4:	eb1e 020c 	adds.w	r2, lr, ip
 80264d8:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 80264dc:	ebb2 020a 	subs.w	r2, r2, sl
 80264e0:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 80264e4:	e9cd 2300 	strd	r2, r3, [sp]
 80264e8:	4a15      	ldr	r2, [pc, #84]	@ (8026540 <__strftime.isra.0+0x744>)
 80264ea:	f001 ff7d 	bl	80283e8 <sniprintf>
 80264ee:	e60e      	b.n	802610e <__strftime.isra.0+0x312>
 80264f0:	f04f 0a00 	mov.w	sl, #0
 80264f4:	e79a      	b.n	802642c <__strftime.isra.0+0x630>
 80264f6:	6833      	ldr	r3, [r6, #0]
 80264f8:	e65e      	b.n	80261b8 <__strftime.isra.0+0x3bc>
 80264fa:	1e6b      	subs	r3, r5, #1
 80264fc:	429c      	cmp	r4, r3
 80264fe:	f4bf ae0d 	bcs.w	802611c <__strftime.isra.0+0x320>
 8026502:	f104 0a01 	add.w	sl, r4, #1
 8026506:	2309      	movs	r3, #9
 8026508:	e73b      	b.n	8026382 <__strftime.isra.0+0x586>
 802650a:	6833      	ldr	r3, [r6, #0]
 802650c:	9301      	str	r3, [sp, #4]
 802650e:	6873      	ldr	r3, [r6, #4]
 8026510:	9300      	str	r3, [sp, #0]
 8026512:	68b3      	ldr	r3, [r6, #8]
 8026514:	4a0b      	ldr	r2, [pc, #44]	@ (8026544 <__strftime.isra.0+0x748>)
 8026516:	e5d1      	b.n	80260bc <__strftime.isra.0+0x2c0>
 8026518:	fffff894 	.word	0xfffff894
 802651c:	0803414e 	.word	0x0803414e
 8026520:	fffff895 	.word	0xfffff895
 8026524:	0803413d 	.word	0x0803413d
 8026528:	0803412f 	.word	0x0803412f
 802652c:	08034152 	.word	0x08034152
 8026530:	08034308 	.word	0x08034308
 8026534:	08034405 	.word	0x08034405
 8026538:	08034157 	.word	0x08034157
 802653c:	08034166 	.word	0x08034166
 8026540:	0803415c 	.word	0x0803415c
 8026544:	08034161 	.word	0x08034161
 8026548:	1e6b      	subs	r3, r5, #1
 802654a:	429c      	cmp	r4, r3
 802654c:	f4bf ade6 	bcs.w	802611c <__strftime.isra.0+0x320>
 8026550:	69b3      	ldr	r3, [r6, #24]
 8026552:	b91b      	cbnz	r3, 802655c <__strftime.isra.0+0x760>
 8026554:	2337      	movs	r3, #55	@ 0x37
 8026556:	f104 0a01 	add.w	sl, r4, #1
 802655a:	e712      	b.n	8026382 <__strftime.isra.0+0x586>
 802655c:	3330      	adds	r3, #48	@ 0x30
 802655e:	b2db      	uxtb	r3, r3
 8026560:	e7f9      	b.n	8026556 <__strftime.isra.0+0x75a>
 8026562:	69f3      	ldr	r3, [r6, #28]
 8026564:	69b2      	ldr	r2, [r6, #24]
 8026566:	3307      	adds	r3, #7
 8026568:	1a9b      	subs	r3, r3, r2
 802656a:	2207      	movs	r2, #7
 802656c:	fb93 f3f2 	sdiv	r3, r3, r2
 8026570:	e622      	b.n	80261b8 <__strftime.isra.0+0x3bc>
 8026572:	4630      	mov	r0, r6
 8026574:	f7ff fbf0 	bl	8025d58 <iso_year_adjust>
 8026578:	69b2      	ldr	r2, [r6, #24]
 802657a:	b132      	cbz	r2, 802658a <__strftime.isra.0+0x78e>
 802657c:	3a01      	subs	r2, #1
 802657e:	2800      	cmp	r0, #0
 8026580:	69f3      	ldr	r3, [r6, #28]
 8026582:	dc26      	bgt.n	80265d2 <__strftime.isra.0+0x7d6>
 8026584:	d103      	bne.n	802658e <__strftime.isra.0+0x792>
 8026586:	330a      	adds	r3, #10
 8026588:	e7ee      	b.n	8026568 <__strftime.isra.0+0x76c>
 802658a:	2206      	movs	r2, #6
 802658c:	e7f7      	b.n	802657e <__strftime.isra.0+0x782>
 802658e:	1ad2      	subs	r2, r2, r3
 8026590:	6973      	ldr	r3, [r6, #20]
 8026592:	2b00      	cmp	r3, #0
 8026594:	f240 716b 	movw	r1, #1899	@ 0x76b
 8026598:	bfa8      	it	ge
 802659a:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802659e:	440b      	add	r3, r1
 80265a0:	0799      	lsls	r1, r3, #30
 80265a2:	d105      	bne.n	80265b0 <__strftime.isra.0+0x7b4>
 80265a4:	2064      	movs	r0, #100	@ 0x64
 80265a6:	fb93 f1f0 	sdiv	r1, r3, r0
 80265aa:	fb00 3111 	mls	r1, r0, r1, r3
 80265ae:	b971      	cbnz	r1, 80265ce <__strftime.isra.0+0x7d2>
 80265b0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80265b4:	fb93 f0f1 	sdiv	r0, r3, r1
 80265b8:	fb01 3310 	mls	r3, r1, r0, r3
 80265bc:	fab3 f383 	clz	r3, r3
 80265c0:	095b      	lsrs	r3, r3, #5
 80265c2:	1ad2      	subs	r2, r2, r3
 80265c4:	2a04      	cmp	r2, #4
 80265c6:	bfcc      	ite	gt
 80265c8:	2334      	movgt	r3, #52	@ 0x34
 80265ca:	2335      	movle	r3, #53	@ 0x35
 80265cc:	e5f4      	b.n	80261b8 <__strftime.isra.0+0x3bc>
 80265ce:	2301      	movs	r3, #1
 80265d0:	e7f7      	b.n	80265c2 <__strftime.isra.0+0x7c6>
 80265d2:	2301      	movs	r3, #1
 80265d4:	e5f0      	b.n	80261b8 <__strftime.isra.0+0x3bc>
 80265d6:	496c      	ldr	r1, [pc, #432]	@ (8026788 <__strftime.isra.0+0x98c>)
 80265d8:	9203      	str	r2, [sp, #12]
 80265da:	a806      	add	r0, sp, #24
 80265dc:	f000 fc42 	bl	8026e64 <strcpy>
 80265e0:	a806      	add	r0, sp, #24
 80265e2:	f7d9 fe5d 	bl	80002a0 <strlen>
 80265e6:	ab06      	add	r3, sp, #24
 80265e8:	eb03 0a00 	add.w	sl, r3, r0
 80265ec:	f10a 0a01 	add.w	sl, sl, #1
 80265f0:	46d3      	mov	fp, sl
 80265f2:	f1b9 0f00 	cmp.w	r9, #0
 80265f6:	d009      	beq.n	802660c <__strftime.isra.0+0x810>
 80265f8:	9a03      	ldr	r2, [sp, #12]
 80265fa:	f803 9000 	strb.w	r9, [r3, r0]
 80265fe:	2a05      	cmp	r2, #5
 8026600:	d901      	bls.n	8026606 <__strftime.isra.0+0x80a>
 8026602:	1f93      	subs	r3, r2, #6
 8026604:	d106      	bne.n	8026614 <__strftime.isra.0+0x818>
 8026606:	4961      	ldr	r1, [pc, #388]	@ (802678c <__strftime.isra.0+0x990>)
 8026608:	4658      	mov	r0, fp
 802660a:	e5a6      	b.n	802615a <__strftime.isra.0+0x35e>
 802660c:	aa06      	add	r2, sp, #24
 802660e:	232b      	movs	r3, #43	@ 0x2b
 8026610:	5413      	strb	r3, [r2, r0]
 8026612:	2304      	movs	r3, #4
 8026614:	a90e      	add	r1, sp, #56	@ 0x38
 8026616:	4a5e      	ldr	r2, [pc, #376]	@ (8026790 <__strftime.isra.0+0x994>)
 8026618:	eba1 010a 	sub.w	r1, r1, sl
 802661c:	4650      	mov	r0, sl
 802661e:	f001 fee3 	bl	80283e8 <sniprintf>
 8026622:	2800      	cmp	r0, #0
 8026624:	bfc8      	it	gt
 8026626:	eb0a 0b00 	addgt.w	fp, sl, r0
 802662a:	e7ec      	b.n	8026606 <__strftime.isra.0+0x80a>
 802662c:	1e6b      	subs	r3, r5, #1
 802662e:	429c      	cmp	r4, r3
 8026630:	f4bf ad74 	bcs.w	802611c <__strftime.isra.0+0x320>
 8026634:	69b3      	ldr	r3, [r6, #24]
 8026636:	f104 0a01 	add.w	sl, r4, #1
 802663a:	3330      	adds	r3, #48	@ 0x30
 802663c:	e6a1      	b.n	8026382 <__strftime.isra.0+0x586>
 802663e:	69b2      	ldr	r2, [r6, #24]
 8026640:	b11a      	cbz	r2, 802664a <__strftime.isra.0+0x84e>
 8026642:	3a01      	subs	r2, #1
 8026644:	69f3      	ldr	r3, [r6, #28]
 8026646:	3307      	adds	r3, #7
 8026648:	e78e      	b.n	8026568 <__strftime.isra.0+0x76c>
 802664a:	2206      	movs	r2, #6
 802664c:	e7fa      	b.n	8026644 <__strftime.isra.0+0x848>
 802664e:	6970      	ldr	r0, [r6, #20]
 8026650:	2800      	cmp	r0, #0
 8026652:	db05      	blt.n	8026660 <__strftime.isra.0+0x864>
 8026654:	2364      	movs	r3, #100	@ 0x64
 8026656:	fb90 f2f3 	sdiv	r2, r0, r3
 802665a:	fb02 0313 	mls	r3, r2, r3, r0
 802665e:	e5ab      	b.n	80261b8 <__strftime.isra.0+0x3bc>
 8026660:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8026664:	f000 fc9b 	bl	8026f9e <abs>
 8026668:	e7f4      	b.n	8026654 <__strftime.isra.0+0x858>
 802666a:	6971      	ldr	r1, [r6, #20]
 802666c:	4849      	ldr	r0, [pc, #292]	@ (8026794 <__strftime.isra.0+0x998>)
 802666e:	4281      	cmp	r1, r0
 8026670:	da09      	bge.n	8026686 <__strftime.isra.0+0x88a>
 8026672:	eba0 0a01 	sub.w	sl, r0, r1
 8026676:	212d      	movs	r1, #45	@ 0x2d
 8026678:	f88d 1018 	strb.w	r1, [sp, #24]
 802667c:	b102      	cbz	r2, 8026680 <__strftime.isra.0+0x884>
 802667e:	3a01      	subs	r2, #1
 8026680:	f10d 0119 	add.w	r1, sp, #25
 8026684:	e609      	b.n	802629a <__strftime.isra.0+0x49e>
 8026686:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802668a:	e5fd      	b.n	8026288 <__strftime.isra.0+0x48c>
 802668c:	2330      	movs	r3, #48	@ 0x30
 802668e:	1c88      	adds	r0, r1, #2
 8026690:	704b      	strb	r3, [r1, #1]
 8026692:	e609      	b.n	80262a8 <__strftime.isra.0+0x4ac>
 8026694:	6a33      	ldr	r3, [r6, #32]
 8026696:	2b00      	cmp	r3, #0
 8026698:	da01      	bge.n	802669e <__strftime.isra.0+0x8a2>
 802669a:	46a2      	mov	sl, r4
 802669c:	e45c      	b.n	8025f58 <__strftime.isra.0+0x15c>
 802669e:	f000 f92b 	bl	80268f8 <__tz_lock>
 80266a2:	9b02      	ldr	r3, [sp, #8]
 80266a4:	b90b      	cbnz	r3, 80266aa <__strftime.isra.0+0x8ae>
 80266a6:	f000 f933 	bl	8026910 <_tzset_unlocked>
 80266aa:	f007 fd23 	bl	802e0f4 <__gettzinfo>
 80266ae:	6a33      	ldr	r3, [r6, #32]
 80266b0:	2b00      	cmp	r3, #0
 80266b2:	bfd4      	ite	le
 80266b4:	2200      	movle	r2, #0
 80266b6:	2201      	movgt	r2, #1
 80266b8:	2328      	movs	r3, #40	@ 0x28
 80266ba:	fb02 3303 	mla	r3, r2, r3, r3
 80266be:	eb07 0a04 	add.w	sl, r7, r4
 80266c2:	58c3      	ldr	r3, [r0, r3]
 80266c4:	f1c3 0900 	rsb	r9, r3, #0
 80266c8:	f000 f91c 	bl	8026904 <__tz_unlock>
 80266cc:	233c      	movs	r3, #60	@ 0x3c
 80266ce:	fb99 f0f3 	sdiv	r0, r9, r3
 80266d2:	f001 fbfe 	bl	8027ed2 <labs>
 80266d6:	233c      	movs	r3, #60	@ 0x3c
 80266d8:	eba5 0b04 	sub.w	fp, r5, r4
 80266dc:	fb90 f2f3 	sdiv	r2, r0, r3
 80266e0:	fb02 0013 	mls	r0, r2, r3, r0
 80266e4:	9000      	str	r0, [sp, #0]
 80266e6:	4a2c      	ldr	r2, [pc, #176]	@ (8026798 <__strftime.isra.0+0x99c>)
 80266e8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80266ec:	4659      	mov	r1, fp
 80266ee:	4650      	mov	r0, sl
 80266f0:	fb99 f3f3 	sdiv	r3, r9, r3
 80266f4:	f001 fe78 	bl	80283e8 <sniprintf>
 80266f8:	2800      	cmp	r0, #0
 80266fa:	f6ff ad0f 	blt.w	802611c <__strftime.isra.0+0x320>
 80266fe:	eb00 0a04 	add.w	sl, r0, r4
 8026702:	4555      	cmp	r5, sl
 8026704:	f67f ad0a 	bls.w	802611c <__strftime.isra.0+0x320>
 8026708:	2301      	movs	r3, #1
 802670a:	9302      	str	r3, [sp, #8]
 802670c:	e424      	b.n	8025f58 <__strftime.isra.0+0x15c>
 802670e:	6a33      	ldr	r3, [r6, #32]
 8026710:	2b00      	cmp	r3, #0
 8026712:	dbc2      	blt.n	802669a <__strftime.isra.0+0x89e>
 8026714:	f000 f8f0 	bl	80268f8 <__tz_lock>
 8026718:	9b02      	ldr	r3, [sp, #8]
 802671a:	b90b      	cbnz	r3, 8026720 <__strftime.isra.0+0x924>
 802671c:	f000 f8f8 	bl	8026910 <_tzset_unlocked>
 8026720:	6a33      	ldr	r3, [r6, #32]
 8026722:	4a1e      	ldr	r2, [pc, #120]	@ (802679c <__strftime.isra.0+0x9a0>)
 8026724:	2b00      	cmp	r3, #0
 8026726:	bfd4      	ite	le
 8026728:	2300      	movle	r3, #0
 802672a:	2301      	movgt	r3, #1
 802672c:	46a2      	mov	sl, r4
 802672e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8026732:	4648      	mov	r0, r9
 8026734:	f7d9 fdb4 	bl	80002a0 <strlen>
 8026738:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802673c:	4420      	add	r0, r4
 802673e:	1e6b      	subs	r3, r5, #1
 8026740:	4550      	cmp	r0, sl
 8026742:	d102      	bne.n	802674a <__strftime.isra.0+0x94e>
 8026744:	f000 f8de 	bl	8026904 <__tz_unlock>
 8026748:	e7de      	b.n	8026708 <__strftime.isra.0+0x90c>
 802674a:	4553      	cmp	r3, sl
 802674c:	d906      	bls.n	802675c <__strftime.isra.0+0x960>
 802674e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026752:	f807 200a 	strb.w	r2, [r7, sl]
 8026756:	f10a 0a01 	add.w	sl, sl, #1
 802675a:	e7f1      	b.n	8026740 <__strftime.isra.0+0x944>
 802675c:	f000 f8d2 	bl	8026904 <__tz_unlock>
 8026760:	e4dc      	b.n	802611c <__strftime.isra.0+0x320>
 8026762:	1e6b      	subs	r3, r5, #1
 8026764:	429c      	cmp	r4, r3
 8026766:	f4bf acd9 	bcs.w	802611c <__strftime.isra.0+0x320>
 802676a:	f104 0a01 	add.w	sl, r4, #1
 802676e:	2325      	movs	r3, #37	@ 0x25
 8026770:	e607      	b.n	8026382 <__strftime.isra.0+0x586>
 8026772:	46a2      	mov	sl, r4
 8026774:	2d00      	cmp	r5, #0
 8026776:	f43f acd3 	beq.w	8026120 <__strftime.isra.0+0x324>
 802677a:	2300      	movs	r3, #0
 802677c:	f807 300a 	strb.w	r3, [r7, sl]
 8026780:	e4ce      	b.n	8026120 <__strftime.isra.0+0x324>
 8026782:	4649      	mov	r1, r9
 8026784:	e778      	b.n	8026678 <__strftime.isra.0+0x87c>
 8026786:	bf00      	nop
 8026788:	08034170 	.word	0x08034170
 802678c:	080342d8 	.word	0x080342d8
 8026790:	08034142 	.word	0x08034142
 8026794:	fffff894 	.word	0xfffff894
 8026798:	08034178 	.word	0x08034178
 802679c:	200002bc 	.word	0x200002bc

080267a0 <strftime>:
 80267a0:	f7ff bb2c 	b.w	8025dfc <__strftime.isra.0>

080267a4 <__tzcalc_limits>:
 80267a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80267a8:	4604      	mov	r4, r0
 80267aa:	f007 fca3 	bl	802e0f4 <__gettzinfo>
 80267ae:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 80267b2:	429c      	cmp	r4, r3
 80267b4:	f340 8099 	ble.w	80268ea <__tzcalc_limits+0x146>
 80267b8:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 80267bc:	19e5      	adds	r5, r4, r7
 80267be:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 80267c2:	f240 126d 	movw	r2, #365	@ 0x16d
 80267c6:	10ad      	asrs	r5, r5, #2
 80267c8:	fb02 5503 	mla	r5, r2, r3, r5
 80267cc:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 80267d0:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80267d4:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 80267d8:	4f45      	ldr	r7, [pc, #276]	@ (80268f0 <__tzcalc_limits+0x14c>)
 80267da:	fb93 f3f2 	sdiv	r3, r3, r2
 80267de:	441d      	add	r5, r3
 80267e0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80267e4:	eb04 030c 	add.w	r3, r4, ip
 80267e8:	6044      	str	r4, [r0, #4]
 80267ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80267ee:	4601      	mov	r1, r0
 80267f0:	441d      	add	r5, r3
 80267f2:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 80267f6:	7a0b      	ldrb	r3, [r1, #8]
 80267f8:	694a      	ldr	r2, [r1, #20]
 80267fa:	2b4a      	cmp	r3, #74	@ 0x4a
 80267fc:	d133      	bne.n	8026866 <__tzcalc_limits+0xc2>
 80267fe:	07a6      	lsls	r6, r4, #30
 8026800:	eb05 0302 	add.w	r3, r5, r2
 8026804:	d106      	bne.n	8026814 <__tzcalc_limits+0x70>
 8026806:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802680a:	fb94 f6fe 	sdiv	r6, r4, lr
 802680e:	fb0e 4616 	mls	r6, lr, r6, r4
 8026812:	b936      	cbnz	r6, 8026822 <__tzcalc_limits+0x7e>
 8026814:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8026818:	fb94 f6fe 	sdiv	r6, r4, lr
 802681c:	fb0e 4616 	mls	r6, lr, r6, r4
 8026820:	b9fe      	cbnz	r6, 8026862 <__tzcalc_limits+0xbe>
 8026822:	2a3b      	cmp	r2, #59	@ 0x3b
 8026824:	bfd4      	ite	le
 8026826:	2200      	movle	r2, #0
 8026828:	2201      	movgt	r2, #1
 802682a:	4413      	add	r3, r2
 802682c:	3b01      	subs	r3, #1
 802682e:	698a      	ldr	r2, [r1, #24]
 8026830:	17d6      	asrs	r6, r2, #31
 8026832:	fbc3 2607 	smlal	r2, r6, r3, r7
 8026836:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8026838:	18d2      	adds	r2, r2, r3
 802683a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802683e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8026842:	3128      	adds	r1, #40	@ 0x28
 8026844:	458c      	cmp	ip, r1
 8026846:	d1d6      	bne.n	80267f6 <__tzcalc_limits+0x52>
 8026848:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802684c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8026850:	428c      	cmp	r4, r1
 8026852:	4193      	sbcs	r3, r2
 8026854:	bfb4      	ite	lt
 8026856:	2301      	movlt	r3, #1
 8026858:	2300      	movge	r3, #0
 802685a:	6003      	str	r3, [r0, #0]
 802685c:	2001      	movs	r0, #1
 802685e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026862:	2200      	movs	r2, #0
 8026864:	e7e1      	b.n	802682a <__tzcalc_limits+0x86>
 8026866:	2b44      	cmp	r3, #68	@ 0x44
 8026868:	d101      	bne.n	802686e <__tzcalc_limits+0xca>
 802686a:	18ab      	adds	r3, r5, r2
 802686c:	e7df      	b.n	802682e <__tzcalc_limits+0x8a>
 802686e:	07a3      	lsls	r3, r4, #30
 8026870:	d105      	bne.n	802687e <__tzcalc_limits+0xda>
 8026872:	2664      	movs	r6, #100	@ 0x64
 8026874:	fb94 f3f6 	sdiv	r3, r4, r6
 8026878:	fb06 4313 	mls	r3, r6, r3, r4
 802687c:	bb7b      	cbnz	r3, 80268de <__tzcalc_limits+0x13a>
 802687e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8026882:	fb94 f6f3 	sdiv	r6, r4, r3
 8026886:	fb03 4616 	mls	r6, r3, r6, r4
 802688a:	fab6 f686 	clz	r6, r6
 802688e:	0976      	lsrs	r6, r6, #5
 8026890:	f8df e060 	ldr.w	lr, [pc, #96]	@ 80268f4 <__tzcalc_limits+0x150>
 8026894:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8026898:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802689c:	462b      	mov	r3, r5
 802689e:	f04f 0800 	mov.w	r8, #0
 80268a2:	fb0a e606 	mla	r6, sl, r6, lr
 80268a6:	f108 0801 	add.w	r8, r8, #1
 80268aa:	45c1      	cmp	r9, r8
 80268ac:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 80268b0:	dc17      	bgt.n	80268e2 <__tzcalc_limits+0x13e>
 80268b2:	f103 0804 	add.w	r8, r3, #4
 80268b6:	2607      	movs	r6, #7
 80268b8:	fb98 f6f6 	sdiv	r6, r8, r6
 80268bc:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80268c0:	eba8 0606 	sub.w	r6, r8, r6
 80268c4:	1b92      	subs	r2, r2, r6
 80268c6:	690e      	ldr	r6, [r1, #16]
 80268c8:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 80268cc:	bf48      	it	mi
 80268ce:	3207      	addmi	r2, #7
 80268d0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80268d4:	4432      	add	r2, r6
 80268d6:	4572      	cmp	r2, lr
 80268d8:	da05      	bge.n	80268e6 <__tzcalc_limits+0x142>
 80268da:	4413      	add	r3, r2
 80268dc:	e7a7      	b.n	802682e <__tzcalc_limits+0x8a>
 80268de:	2601      	movs	r6, #1
 80268e0:	e7d6      	b.n	8026890 <__tzcalc_limits+0xec>
 80268e2:	4473      	add	r3, lr
 80268e4:	e7df      	b.n	80268a6 <__tzcalc_limits+0x102>
 80268e6:	3a07      	subs	r2, #7
 80268e8:	e7f5      	b.n	80268d6 <__tzcalc_limits+0x132>
 80268ea:	2000      	movs	r0, #0
 80268ec:	e7b7      	b.n	802685e <__tzcalc_limits+0xba>
 80268ee:	bf00      	nop
 80268f0:	00015180 	.word	0x00015180
 80268f4:	080340b8 	.word	0x080340b8

080268f8 <__tz_lock>:
 80268f8:	4801      	ldr	r0, [pc, #4]	@ (8026900 <__tz_lock+0x8>)
 80268fa:	f000 bae1 	b.w	8026ec0 <__retarget_lock_acquire>
 80268fe:	bf00      	nop
 8026900:	200182c4 	.word	0x200182c4

08026904 <__tz_unlock>:
 8026904:	4801      	ldr	r0, [pc, #4]	@ (802690c <__tz_unlock+0x8>)
 8026906:	f000 badd 	b.w	8026ec4 <__retarget_lock_release>
 802690a:	bf00      	nop
 802690c:	200182c4 	.word	0x200182c4

08026910 <_tzset_unlocked>:
 8026910:	4b01      	ldr	r3, [pc, #4]	@ (8026918 <_tzset_unlocked+0x8>)
 8026912:	6818      	ldr	r0, [r3, #0]
 8026914:	f000 b802 	b.w	802691c <_tzset_unlocked_r>
 8026918:	20000430 	.word	0x20000430

0802691c <_tzset_unlocked_r>:
 802691c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026920:	b08d      	sub	sp, #52	@ 0x34
 8026922:	4607      	mov	r7, r0
 8026924:	f007 fbe6 	bl	802e0f4 <__gettzinfo>
 8026928:	49bc      	ldr	r1, [pc, #752]	@ (8026c1c <_tzset_unlocked_r+0x300>)
 802692a:	4dbd      	ldr	r5, [pc, #756]	@ (8026c20 <_tzset_unlocked_r+0x304>)
 802692c:	4604      	mov	r4, r0
 802692e:	4638      	mov	r0, r7
 8026930:	f001 fac8 	bl	8027ec4 <_getenv_r>
 8026934:	4606      	mov	r6, r0
 8026936:	bb10      	cbnz	r0, 802697e <_tzset_unlocked_r+0x62>
 8026938:	4bba      	ldr	r3, [pc, #744]	@ (8026c24 <_tzset_unlocked_r+0x308>)
 802693a:	4abb      	ldr	r2, [pc, #748]	@ (8026c28 <_tzset_unlocked_r+0x30c>)
 802693c:	6018      	str	r0, [r3, #0]
 802693e:	4bbb      	ldr	r3, [pc, #748]	@ (8026c2c <_tzset_unlocked_r+0x310>)
 8026940:	62a0      	str	r0, [r4, #40]	@ 0x28
 8026942:	6018      	str	r0, [r3, #0]
 8026944:	4bba      	ldr	r3, [pc, #744]	@ (8026c30 <_tzset_unlocked_r+0x314>)
 8026946:	6520      	str	r0, [r4, #80]	@ 0x50
 8026948:	e9c3 2200 	strd	r2, r2, [r3]
 802694c:	214a      	movs	r1, #74	@ 0x4a
 802694e:	2200      	movs	r2, #0
 8026950:	2300      	movs	r3, #0
 8026952:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8026956:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802695a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802695e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8026962:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8026966:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802696a:	6828      	ldr	r0, [r5, #0]
 802696c:	7221      	strb	r1, [r4, #8]
 802696e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8026972:	f001 fabb 	bl	8027eec <free>
 8026976:	602e      	str	r6, [r5, #0]
 8026978:	b00d      	add	sp, #52	@ 0x34
 802697a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802697e:	6829      	ldr	r1, [r5, #0]
 8026980:	2900      	cmp	r1, #0
 8026982:	f040 808e 	bne.w	8026aa2 <_tzset_unlocked_r+0x186>
 8026986:	6828      	ldr	r0, [r5, #0]
 8026988:	f001 fab0 	bl	8027eec <free>
 802698c:	4630      	mov	r0, r6
 802698e:	f7d9 fc87 	bl	80002a0 <strlen>
 8026992:	1c41      	adds	r1, r0, #1
 8026994:	4638      	mov	r0, r7
 8026996:	f001 fab1 	bl	8027efc <_malloc_r>
 802699a:	6028      	str	r0, [r5, #0]
 802699c:	2800      	cmp	r0, #0
 802699e:	f040 8086 	bne.w	8026aae <_tzset_unlocked_r+0x192>
 80269a2:	4aa2      	ldr	r2, [pc, #648]	@ (8026c2c <_tzset_unlocked_r+0x310>)
 80269a4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8026c30 <_tzset_unlocked_r+0x314>
 80269a8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8026c24 <_tzset_unlocked_r+0x308>
 80269ac:	2300      	movs	r3, #0
 80269ae:	6013      	str	r3, [r2, #0]
 80269b0:	4aa0      	ldr	r2, [pc, #640]	@ (8026c34 <_tzset_unlocked_r+0x318>)
 80269b2:	f8ca 3000 	str.w	r3, [sl]
 80269b6:	2000      	movs	r0, #0
 80269b8:	2100      	movs	r1, #0
 80269ba:	e9c8 2200 	strd	r2, r2, [r8]
 80269be:	e9c4 3303 	strd	r3, r3, [r4, #12]
 80269c2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 80269c6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80269ca:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80269ce:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 80269d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 80269d6:	224a      	movs	r2, #74	@ 0x4a
 80269d8:	7222      	strb	r2, [r4, #8]
 80269da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80269dc:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 80269e0:	6523      	str	r3, [r4, #80]	@ 0x50
 80269e2:	7833      	ldrb	r3, [r6, #0]
 80269e4:	2b3a      	cmp	r3, #58	@ 0x3a
 80269e6:	bf08      	it	eq
 80269e8:	3601      	addeq	r6, #1
 80269ea:	7833      	ldrb	r3, [r6, #0]
 80269ec:	2b3c      	cmp	r3, #60	@ 0x3c
 80269ee:	d162      	bne.n	8026ab6 <_tzset_unlocked_r+0x19a>
 80269f0:	1c75      	adds	r5, r6, #1
 80269f2:	4a91      	ldr	r2, [pc, #580]	@ (8026c38 <_tzset_unlocked_r+0x31c>)
 80269f4:	4991      	ldr	r1, [pc, #580]	@ (8026c3c <_tzset_unlocked_r+0x320>)
 80269f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80269f8:	4628      	mov	r0, r5
 80269fa:	f001 fccb 	bl	8028394 <siscanf>
 80269fe:	2800      	cmp	r0, #0
 8026a00:	ddba      	ble.n	8026978 <_tzset_unlocked_r+0x5c>
 8026a02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026a04:	1eda      	subs	r2, r3, #3
 8026a06:	2a07      	cmp	r2, #7
 8026a08:	d8b6      	bhi.n	8026978 <_tzset_unlocked_r+0x5c>
 8026a0a:	5ceb      	ldrb	r3, [r5, r3]
 8026a0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8026a0e:	d1b3      	bne.n	8026978 <_tzset_unlocked_r+0x5c>
 8026a10:	3602      	adds	r6, #2
 8026a12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026a14:	18f5      	adds	r5, r6, r3
 8026a16:	5cf3      	ldrb	r3, [r6, r3]
 8026a18:	2b2d      	cmp	r3, #45	@ 0x2d
 8026a1a:	d15a      	bne.n	8026ad2 <_tzset_unlocked_r+0x1b6>
 8026a1c:	3501      	adds	r5, #1
 8026a1e:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8026a22:	2300      	movs	r3, #0
 8026a24:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026a28:	f8ad 3020 	strh.w	r3, [sp, #32]
 8026a2c:	af08      	add	r7, sp, #32
 8026a2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8026a30:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8026a34:	9303      	str	r3, [sp, #12]
 8026a36:	f10d 031e 	add.w	r3, sp, #30
 8026a3a:	9300      	str	r3, [sp, #0]
 8026a3c:	4980      	ldr	r1, [pc, #512]	@ (8026c40 <_tzset_unlocked_r+0x324>)
 8026a3e:	ab0a      	add	r3, sp, #40	@ 0x28
 8026a40:	aa07      	add	r2, sp, #28
 8026a42:	4628      	mov	r0, r5
 8026a44:	f001 fca6 	bl	8028394 <siscanf>
 8026a48:	2800      	cmp	r0, #0
 8026a4a:	dd95      	ble.n	8026978 <_tzset_unlocked_r+0x5c>
 8026a4c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8026a50:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8026a54:	223c      	movs	r2, #60	@ 0x3c
 8026a56:	fb02 6603 	mla	r6, r2, r3, r6
 8026a5a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8026a5e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8026a62:	fb02 6603 	mla	r6, r2, r3, r6
 8026a66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026a68:	fb09 f606 	mul.w	r6, r9, r6
 8026a6c:	eb05 0903 	add.w	r9, r5, r3
 8026a70:	5ceb      	ldrb	r3, [r5, r3]
 8026a72:	2b3c      	cmp	r3, #60	@ 0x3c
 8026a74:	f040 80ee 	bne.w	8026c54 <_tzset_unlocked_r+0x338>
 8026a78:	f109 0501 	add.w	r5, r9, #1
 8026a7c:	4a71      	ldr	r2, [pc, #452]	@ (8026c44 <_tzset_unlocked_r+0x328>)
 8026a7e:	496f      	ldr	r1, [pc, #444]	@ (8026c3c <_tzset_unlocked_r+0x320>)
 8026a80:	ab0a      	add	r3, sp, #40	@ 0x28
 8026a82:	4628      	mov	r0, r5
 8026a84:	f001 fc86 	bl	8028394 <siscanf>
 8026a88:	2800      	cmp	r0, #0
 8026a8a:	dc28      	bgt.n	8026ade <_tzset_unlocked_r+0x1c2>
 8026a8c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8026a90:	2b3e      	cmp	r3, #62	@ 0x3e
 8026a92:	d124      	bne.n	8026ade <_tzset_unlocked_r+0x1c2>
 8026a94:	4b68      	ldr	r3, [pc, #416]	@ (8026c38 <_tzset_unlocked_r+0x31c>)
 8026a96:	62a6      	str	r6, [r4, #40]	@ 0x28
 8026a98:	e9c8 3300 	strd	r3, r3, [r8]
 8026a9c:	f8ca 6000 	str.w	r6, [sl]
 8026aa0:	e76a      	b.n	8026978 <_tzset_unlocked_r+0x5c>
 8026aa2:	f7d9 fb9d 	bl	80001e0 <strcmp>
 8026aa6:	2800      	cmp	r0, #0
 8026aa8:	f47f af6d 	bne.w	8026986 <_tzset_unlocked_r+0x6a>
 8026aac:	e764      	b.n	8026978 <_tzset_unlocked_r+0x5c>
 8026aae:	4631      	mov	r1, r6
 8026ab0:	f000 f9d8 	bl	8026e64 <strcpy>
 8026ab4:	e775      	b.n	80269a2 <_tzset_unlocked_r+0x86>
 8026ab6:	4a60      	ldr	r2, [pc, #384]	@ (8026c38 <_tzset_unlocked_r+0x31c>)
 8026ab8:	4963      	ldr	r1, [pc, #396]	@ (8026c48 <_tzset_unlocked_r+0x32c>)
 8026aba:	ab0a      	add	r3, sp, #40	@ 0x28
 8026abc:	4630      	mov	r0, r6
 8026abe:	f001 fc69 	bl	8028394 <siscanf>
 8026ac2:	2800      	cmp	r0, #0
 8026ac4:	f77f af58 	ble.w	8026978 <_tzset_unlocked_r+0x5c>
 8026ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026aca:	3b03      	subs	r3, #3
 8026acc:	2b07      	cmp	r3, #7
 8026ace:	d9a0      	bls.n	8026a12 <_tzset_unlocked_r+0xf6>
 8026ad0:	e752      	b.n	8026978 <_tzset_unlocked_r+0x5c>
 8026ad2:	2b2b      	cmp	r3, #43	@ 0x2b
 8026ad4:	bf08      	it	eq
 8026ad6:	3501      	addeq	r5, #1
 8026ad8:	f04f 0901 	mov.w	r9, #1
 8026adc:	e7a1      	b.n	8026a22 <_tzset_unlocked_r+0x106>
 8026ade:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026ae0:	1eda      	subs	r2, r3, #3
 8026ae2:	2a07      	cmp	r2, #7
 8026ae4:	f63f af48 	bhi.w	8026978 <_tzset_unlocked_r+0x5c>
 8026ae8:	5ceb      	ldrb	r3, [r5, r3]
 8026aea:	2b3e      	cmp	r3, #62	@ 0x3e
 8026aec:	f47f af44 	bne.w	8026978 <_tzset_unlocked_r+0x5c>
 8026af0:	f109 0902 	add.w	r9, r9, #2
 8026af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026af6:	eb09 0503 	add.w	r5, r9, r3
 8026afa:	f819 3003 	ldrb.w	r3, [r9, r3]
 8026afe:	2b2d      	cmp	r3, #45	@ 0x2d
 8026b00:	f040 80b7 	bne.w	8026c72 <_tzset_unlocked_r+0x356>
 8026b04:	3501      	adds	r5, #1
 8026b06:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8026b0a:	2300      	movs	r3, #0
 8026b0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8026b10:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026b14:	f8ad 3020 	strh.w	r3, [sp, #32]
 8026b18:	930a      	str	r3, [sp, #40]	@ 0x28
 8026b1a:	ab0a      	add	r3, sp, #40	@ 0x28
 8026b1c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8026b20:	9301      	str	r3, [sp, #4]
 8026b22:	f10d 031e 	add.w	r3, sp, #30
 8026b26:	9300      	str	r3, [sp, #0]
 8026b28:	4945      	ldr	r1, [pc, #276]	@ (8026c40 <_tzset_unlocked_r+0x324>)
 8026b2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8026b2c:	aa07      	add	r2, sp, #28
 8026b2e:	4628      	mov	r0, r5
 8026b30:	f001 fc30 	bl	8028394 <siscanf>
 8026b34:	2800      	cmp	r0, #0
 8026b36:	f300 80a2 	bgt.w	8026c7e <_tzset_unlocked_r+0x362>
 8026b3a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8026b3e:	9304      	str	r3, [sp, #16]
 8026b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026b42:	4627      	mov	r7, r4
 8026b44:	441d      	add	r5, r3
 8026b46:	f04f 0b00 	mov.w	fp, #0
 8026b4a:	782b      	ldrb	r3, [r5, #0]
 8026b4c:	2b2c      	cmp	r3, #44	@ 0x2c
 8026b4e:	bf08      	it	eq
 8026b50:	3501      	addeq	r5, #1
 8026b52:	f895 9000 	ldrb.w	r9, [r5]
 8026b56:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8026b5a:	f040 80a3 	bne.w	8026ca4 <_tzset_unlocked_r+0x388>
 8026b5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8026b60:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8026b64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8026b68:	aa09      	add	r2, sp, #36	@ 0x24
 8026b6a:	9200      	str	r2, [sp, #0]
 8026b6c:	4937      	ldr	r1, [pc, #220]	@ (8026c4c <_tzset_unlocked_r+0x330>)
 8026b6e:	9303      	str	r3, [sp, #12]
 8026b70:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8026b74:	4628      	mov	r0, r5
 8026b76:	f001 fc0d 	bl	8028394 <siscanf>
 8026b7a:	2803      	cmp	r0, #3
 8026b7c:	f47f aefc 	bne.w	8026978 <_tzset_unlocked_r+0x5c>
 8026b80:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8026b84:	1e4b      	subs	r3, r1, #1
 8026b86:	2b0b      	cmp	r3, #11
 8026b88:	f63f aef6 	bhi.w	8026978 <_tzset_unlocked_r+0x5c>
 8026b8c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8026b90:	1e53      	subs	r3, r2, #1
 8026b92:	2b04      	cmp	r3, #4
 8026b94:	f63f aef0 	bhi.w	8026978 <_tzset_unlocked_r+0x5c>
 8026b98:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8026b9c:	2b06      	cmp	r3, #6
 8026b9e:	f63f aeeb 	bhi.w	8026978 <_tzset_unlocked_r+0x5c>
 8026ba2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8026ba6:	f887 9008 	strb.w	r9, [r7, #8]
 8026baa:	617b      	str	r3, [r7, #20]
 8026bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026bae:	eb05 0903 	add.w	r9, r5, r3
 8026bb2:	2500      	movs	r5, #0
 8026bb4:	f04f 0302 	mov.w	r3, #2
 8026bb8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8026bbc:	f8ad 501e 	strh.w	r5, [sp, #30]
 8026bc0:	f8ad 5020 	strh.w	r5, [sp, #32]
 8026bc4:	950a      	str	r5, [sp, #40]	@ 0x28
 8026bc6:	f899 3000 	ldrb.w	r3, [r9]
 8026bca:	2b2f      	cmp	r3, #47	@ 0x2f
 8026bcc:	f040 8096 	bne.w	8026cfc <_tzset_unlocked_r+0x3e0>
 8026bd0:	ab0a      	add	r3, sp, #40	@ 0x28
 8026bd2:	aa08      	add	r2, sp, #32
 8026bd4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8026bd8:	f10d 021e 	add.w	r2, sp, #30
 8026bdc:	9200      	str	r2, [sp, #0]
 8026bde:	491c      	ldr	r1, [pc, #112]	@ (8026c50 <_tzset_unlocked_r+0x334>)
 8026be0:	9303      	str	r3, [sp, #12]
 8026be2:	aa07      	add	r2, sp, #28
 8026be4:	4648      	mov	r0, r9
 8026be6:	f001 fbd5 	bl	8028394 <siscanf>
 8026bea:	42a8      	cmp	r0, r5
 8026bec:	f300 8086 	bgt.w	8026cfc <_tzset_unlocked_r+0x3e0>
 8026bf0:	214a      	movs	r1, #74	@ 0x4a
 8026bf2:	2200      	movs	r2, #0
 8026bf4:	2300      	movs	r3, #0
 8026bf6:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8026bfa:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8026bfe:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8026c02:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8026c06:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8026c0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8026c0e:	7221      	strb	r1, [r4, #8]
 8026c10:	62a5      	str	r5, [r4, #40]	@ 0x28
 8026c12:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8026c16:	6525      	str	r5, [r4, #80]	@ 0x50
 8026c18:	e6ae      	b.n	8026978 <_tzset_unlocked_r+0x5c>
 8026c1a:	bf00      	nop
 8026c1c:	08034184 	.word	0x08034184
 8026c20:	2001829c 	.word	0x2001829c
 8026c24:	200182b8 	.word	0x200182b8
 8026c28:	08034187 	.word	0x08034187
 8026c2c:	200182bc 	.word	0x200182bc
 8026c30:	200002bc 	.word	0x200002bc
 8026c34:	08034047 	.word	0x08034047
 8026c38:	200182ac 	.word	0x200182ac
 8026c3c:	0803418b 	.word	0x0803418b
 8026c40:	080341c0 	.word	0x080341c0
 8026c44:	200182a0 	.word	0x200182a0
 8026c48:	0803419e 	.word	0x0803419e
 8026c4c:	080341ac 	.word	0x080341ac
 8026c50:	080341bf 	.word	0x080341bf
 8026c54:	4a3e      	ldr	r2, [pc, #248]	@ (8026d50 <_tzset_unlocked_r+0x434>)
 8026c56:	493f      	ldr	r1, [pc, #252]	@ (8026d54 <_tzset_unlocked_r+0x438>)
 8026c58:	ab0a      	add	r3, sp, #40	@ 0x28
 8026c5a:	4648      	mov	r0, r9
 8026c5c:	f001 fb9a 	bl	8028394 <siscanf>
 8026c60:	2800      	cmp	r0, #0
 8026c62:	f77f af17 	ble.w	8026a94 <_tzset_unlocked_r+0x178>
 8026c66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026c68:	3b03      	subs	r3, #3
 8026c6a:	2b07      	cmp	r3, #7
 8026c6c:	f67f af42 	bls.w	8026af4 <_tzset_unlocked_r+0x1d8>
 8026c70:	e682      	b.n	8026978 <_tzset_unlocked_r+0x5c>
 8026c72:	2b2b      	cmp	r3, #43	@ 0x2b
 8026c74:	bf08      	it	eq
 8026c76:	3501      	addeq	r5, #1
 8026c78:	f04f 0901 	mov.w	r9, #1
 8026c7c:	e745      	b.n	8026b0a <_tzset_unlocked_r+0x1ee>
 8026c7e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8026c82:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8026c86:	213c      	movs	r1, #60	@ 0x3c
 8026c88:	fb01 3302 	mla	r3, r1, r2, r3
 8026c8c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8026c90:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8026c94:	fb01 3302 	mla	r3, r1, r2, r3
 8026c98:	fb09 f303 	mul.w	r3, r9, r3
 8026c9c:	e74f      	b.n	8026b3e <_tzset_unlocked_r+0x222>
 8026c9e:	f04f 0b01 	mov.w	fp, #1
 8026ca2:	e752      	b.n	8026b4a <_tzset_unlocked_r+0x22e>
 8026ca4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8026ca8:	bf06      	itte	eq
 8026caa:	3501      	addeq	r5, #1
 8026cac:	464b      	moveq	r3, r9
 8026cae:	2344      	movne	r3, #68	@ 0x44
 8026cb0:	220a      	movs	r2, #10
 8026cb2:	a90b      	add	r1, sp, #44	@ 0x2c
 8026cb4:	4628      	mov	r0, r5
 8026cb6:	9305      	str	r3, [sp, #20]
 8026cb8:	f007 f950 	bl	802df5c <strtoul>
 8026cbc:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8026cc0:	9b05      	ldr	r3, [sp, #20]
 8026cc2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8026cc6:	45a9      	cmp	r9, r5
 8026cc8:	d114      	bne.n	8026cf4 <_tzset_unlocked_r+0x3d8>
 8026cca:	234d      	movs	r3, #77	@ 0x4d
 8026ccc:	f1bb 0f00 	cmp.w	fp, #0
 8026cd0:	d107      	bne.n	8026ce2 <_tzset_unlocked_r+0x3c6>
 8026cd2:	7223      	strb	r3, [r4, #8]
 8026cd4:	2103      	movs	r1, #3
 8026cd6:	2302      	movs	r3, #2
 8026cd8:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8026cdc:	f8c4 b014 	str.w	fp, [r4, #20]
 8026ce0:	e767      	b.n	8026bb2 <_tzset_unlocked_r+0x296>
 8026ce2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8026ce6:	220b      	movs	r2, #11
 8026ce8:	2301      	movs	r3, #1
 8026cea:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8026cee:	2300      	movs	r3, #0
 8026cf0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8026cf2:	e75e      	b.n	8026bb2 <_tzset_unlocked_r+0x296>
 8026cf4:	b280      	uxth	r0, r0
 8026cf6:	723b      	strb	r3, [r7, #8]
 8026cf8:	6178      	str	r0, [r7, #20]
 8026cfa:	e75a      	b.n	8026bb2 <_tzset_unlocked_r+0x296>
 8026cfc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8026d00:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8026d04:	213c      	movs	r1, #60	@ 0x3c
 8026d06:	fb01 3302 	mla	r3, r1, r2, r3
 8026d0a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8026d0e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8026d12:	fb01 3302 	mla	r3, r1, r2, r3
 8026d16:	61bb      	str	r3, [r7, #24]
 8026d18:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8026d1a:	3728      	adds	r7, #40	@ 0x28
 8026d1c:	444d      	add	r5, r9
 8026d1e:	f1bb 0f00 	cmp.w	fp, #0
 8026d22:	d0bc      	beq.n	8026c9e <_tzset_unlocked_r+0x382>
 8026d24:	9b04      	ldr	r3, [sp, #16]
 8026d26:	6523      	str	r3, [r4, #80]	@ 0x50
 8026d28:	4b0b      	ldr	r3, [pc, #44]	@ (8026d58 <_tzset_unlocked_r+0x43c>)
 8026d2a:	f8c8 3000 	str.w	r3, [r8]
 8026d2e:	6860      	ldr	r0, [r4, #4]
 8026d30:	4b07      	ldr	r3, [pc, #28]	@ (8026d50 <_tzset_unlocked_r+0x434>)
 8026d32:	62a6      	str	r6, [r4, #40]	@ 0x28
 8026d34:	f8c8 3004 	str.w	r3, [r8, #4]
 8026d38:	f7ff fd34 	bl	80267a4 <__tzcalc_limits>
 8026d3c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8026d3e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8026d40:	f8ca 2000 	str.w	r2, [sl]
 8026d44:	1a9b      	subs	r3, r3, r2
 8026d46:	4a05      	ldr	r2, [pc, #20]	@ (8026d5c <_tzset_unlocked_r+0x440>)
 8026d48:	bf18      	it	ne
 8026d4a:	2301      	movne	r3, #1
 8026d4c:	6013      	str	r3, [r2, #0]
 8026d4e:	e613      	b.n	8026978 <_tzset_unlocked_r+0x5c>
 8026d50:	200182a0 	.word	0x200182a0
 8026d54:	0803419e 	.word	0x0803419e
 8026d58:	200182ac 	.word	0x200182ac
 8026d5c:	200182bc 	.word	0x200182bc

08026d60 <__locale_mb_cur_max>:
 8026d60:	4b01      	ldr	r3, [pc, #4]	@ (8026d68 <__locale_mb_cur_max+0x8>)
 8026d62:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8026d66:	4770      	bx	lr
 8026d68:	200002c4 	.word	0x200002c4

08026d6c <_localeconv_r>:
 8026d6c:	4800      	ldr	r0, [pc, #0]	@ (8026d70 <_localeconv_r+0x4>)
 8026d6e:	4770      	bx	lr
 8026d70:	200003b4 	.word	0x200003b4

08026d74 <_close_r>:
 8026d74:	b538      	push	{r3, r4, r5, lr}
 8026d76:	4d06      	ldr	r5, [pc, #24]	@ (8026d90 <_close_r+0x1c>)
 8026d78:	2300      	movs	r3, #0
 8026d7a:	4604      	mov	r4, r0
 8026d7c:	4608      	mov	r0, r1
 8026d7e:	602b      	str	r3, [r5, #0]
 8026d80:	f7db fd24 	bl	80027cc <_close>
 8026d84:	1c43      	adds	r3, r0, #1
 8026d86:	d102      	bne.n	8026d8e <_close_r+0x1a>
 8026d88:	682b      	ldr	r3, [r5, #0]
 8026d8a:	b103      	cbz	r3, 8026d8e <_close_r+0x1a>
 8026d8c:	6023      	str	r3, [r4, #0]
 8026d8e:	bd38      	pop	{r3, r4, r5, pc}
 8026d90:	200182c0 	.word	0x200182c0

08026d94 <_reclaim_reent>:
 8026d94:	4b14      	ldr	r3, [pc, #80]	@ (8026de8 <_reclaim_reent+0x54>)
 8026d96:	681b      	ldr	r3, [r3, #0]
 8026d98:	4283      	cmp	r3, r0
 8026d9a:	b570      	push	{r4, r5, r6, lr}
 8026d9c:	4604      	mov	r4, r0
 8026d9e:	d022      	beq.n	8026de6 <_reclaim_reent+0x52>
 8026da0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8026da2:	b153      	cbz	r3, 8026dba <_reclaim_reent+0x26>
 8026da4:	2500      	movs	r5, #0
 8026da6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8026da8:	5959      	ldr	r1, [r3, r5]
 8026daa:	b9b1      	cbnz	r1, 8026dda <_reclaim_reent+0x46>
 8026dac:	3504      	adds	r5, #4
 8026dae:	2d80      	cmp	r5, #128	@ 0x80
 8026db0:	d1f9      	bne.n	8026da6 <_reclaim_reent+0x12>
 8026db2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8026db4:	4620      	mov	r0, r4
 8026db6:	f000 ff89 	bl	8027ccc <_free_r>
 8026dba:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8026dbc:	b111      	cbz	r1, 8026dc4 <_reclaim_reent+0x30>
 8026dbe:	4620      	mov	r0, r4
 8026dc0:	f000 ff84 	bl	8027ccc <_free_r>
 8026dc4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8026dc6:	b111      	cbz	r1, 8026dce <_reclaim_reent+0x3a>
 8026dc8:	4620      	mov	r0, r4
 8026dca:	f000 ff7f 	bl	8027ccc <_free_r>
 8026dce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8026dd0:	b14b      	cbz	r3, 8026de6 <_reclaim_reent+0x52>
 8026dd2:	4620      	mov	r0, r4
 8026dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026dd8:	4718      	bx	r3
 8026dda:	680e      	ldr	r6, [r1, #0]
 8026ddc:	4620      	mov	r0, r4
 8026dde:	f000 ff75 	bl	8027ccc <_free_r>
 8026de2:	4631      	mov	r1, r6
 8026de4:	e7e1      	b.n	8026daa <_reclaim_reent+0x16>
 8026de6:	bd70      	pop	{r4, r5, r6, pc}
 8026de8:	20000430 	.word	0x20000430

08026dec <_lseek_r>:
 8026dec:	b538      	push	{r3, r4, r5, lr}
 8026dee:	4d07      	ldr	r5, [pc, #28]	@ (8026e0c <_lseek_r+0x20>)
 8026df0:	4604      	mov	r4, r0
 8026df2:	4608      	mov	r0, r1
 8026df4:	4611      	mov	r1, r2
 8026df6:	2200      	movs	r2, #0
 8026df8:	602a      	str	r2, [r5, #0]
 8026dfa:	461a      	mov	r2, r3
 8026dfc:	f7db fd0d 	bl	800281a <_lseek>
 8026e00:	1c43      	adds	r3, r0, #1
 8026e02:	d102      	bne.n	8026e0a <_lseek_r+0x1e>
 8026e04:	682b      	ldr	r3, [r5, #0]
 8026e06:	b103      	cbz	r3, 8026e0a <_lseek_r+0x1e>
 8026e08:	6023      	str	r3, [r4, #0]
 8026e0a:	bd38      	pop	{r3, r4, r5, pc}
 8026e0c:	200182c0 	.word	0x200182c0

08026e10 <_read_r>:
 8026e10:	b538      	push	{r3, r4, r5, lr}
 8026e12:	4d07      	ldr	r5, [pc, #28]	@ (8026e30 <_read_r+0x20>)
 8026e14:	4604      	mov	r4, r0
 8026e16:	4608      	mov	r0, r1
 8026e18:	4611      	mov	r1, r2
 8026e1a:	2200      	movs	r2, #0
 8026e1c:	602a      	str	r2, [r5, #0]
 8026e1e:	461a      	mov	r2, r3
 8026e20:	f7db fc9b 	bl	800275a <_read>
 8026e24:	1c43      	adds	r3, r0, #1
 8026e26:	d102      	bne.n	8026e2e <_read_r+0x1e>
 8026e28:	682b      	ldr	r3, [r5, #0]
 8026e2a:	b103      	cbz	r3, 8026e2e <_read_r+0x1e>
 8026e2c:	6023      	str	r3, [r4, #0]
 8026e2e:	bd38      	pop	{r3, r4, r5, pc}
 8026e30:	200182c0 	.word	0x200182c0

08026e34 <_write_r>:
 8026e34:	b538      	push	{r3, r4, r5, lr}
 8026e36:	4d07      	ldr	r5, [pc, #28]	@ (8026e54 <_write_r+0x20>)
 8026e38:	4604      	mov	r4, r0
 8026e3a:	4608      	mov	r0, r1
 8026e3c:	4611      	mov	r1, r2
 8026e3e:	2200      	movs	r2, #0
 8026e40:	602a      	str	r2, [r5, #0]
 8026e42:	461a      	mov	r2, r3
 8026e44:	f7db fca6 	bl	8002794 <_write>
 8026e48:	1c43      	adds	r3, r0, #1
 8026e4a:	d102      	bne.n	8026e52 <_write_r+0x1e>
 8026e4c:	682b      	ldr	r3, [r5, #0]
 8026e4e:	b103      	cbz	r3, 8026e52 <_write_r+0x1e>
 8026e50:	6023      	str	r3, [r4, #0]
 8026e52:	bd38      	pop	{r3, r4, r5, pc}
 8026e54:	200182c0 	.word	0x200182c0

08026e58 <__errno>:
 8026e58:	4b01      	ldr	r3, [pc, #4]	@ (8026e60 <__errno+0x8>)
 8026e5a:	6818      	ldr	r0, [r3, #0]
 8026e5c:	4770      	bx	lr
 8026e5e:	bf00      	nop
 8026e60:	20000430 	.word	0x20000430

08026e64 <strcpy>:
 8026e64:	4603      	mov	r3, r0
 8026e66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026e6a:	f803 2b01 	strb.w	r2, [r3], #1
 8026e6e:	2a00      	cmp	r2, #0
 8026e70:	d1f9      	bne.n	8026e66 <strcpy+0x2>
 8026e72:	4770      	bx	lr

08026e74 <__libc_init_array>:
 8026e74:	b570      	push	{r4, r5, r6, lr}
 8026e76:	4d0d      	ldr	r5, [pc, #52]	@ (8026eac <__libc_init_array+0x38>)
 8026e78:	4c0d      	ldr	r4, [pc, #52]	@ (8026eb0 <__libc_init_array+0x3c>)
 8026e7a:	1b64      	subs	r4, r4, r5
 8026e7c:	10a4      	asrs	r4, r4, #2
 8026e7e:	2600      	movs	r6, #0
 8026e80:	42a6      	cmp	r6, r4
 8026e82:	d109      	bne.n	8026e98 <__libc_init_array+0x24>
 8026e84:	4d0b      	ldr	r5, [pc, #44]	@ (8026eb4 <__libc_init_array+0x40>)
 8026e86:	4c0c      	ldr	r4, [pc, #48]	@ (8026eb8 <__libc_init_array+0x44>)
 8026e88:	f007 ff60 	bl	802ed4c <_init>
 8026e8c:	1b64      	subs	r4, r4, r5
 8026e8e:	10a4      	asrs	r4, r4, #2
 8026e90:	2600      	movs	r6, #0
 8026e92:	42a6      	cmp	r6, r4
 8026e94:	d105      	bne.n	8026ea2 <__libc_init_array+0x2e>
 8026e96:	bd70      	pop	{r4, r5, r6, pc}
 8026e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8026e9c:	4798      	blx	r3
 8026e9e:	3601      	adds	r6, #1
 8026ea0:	e7ee      	b.n	8026e80 <__libc_init_array+0xc>
 8026ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8026ea6:	4798      	blx	r3
 8026ea8:	3601      	adds	r6, #1
 8026eaa:	e7f2      	b.n	8026e92 <__libc_init_array+0x1e>
 8026eac:	08034818 	.word	0x08034818
 8026eb0:	08034818 	.word	0x08034818
 8026eb4:	08034818 	.word	0x08034818
 8026eb8:	08034820 	.word	0x08034820

08026ebc <__retarget_lock_init_recursive>:
 8026ebc:	4770      	bx	lr

08026ebe <__retarget_lock_close_recursive>:
 8026ebe:	4770      	bx	lr

08026ec0 <__retarget_lock_acquire>:
 8026ec0:	4770      	bx	lr

08026ec2 <__retarget_lock_acquire_recursive>:
 8026ec2:	4770      	bx	lr

08026ec4 <__retarget_lock_release>:
 8026ec4:	4770      	bx	lr

08026ec6 <__retarget_lock_release_recursive>:
 8026ec6:	4770      	bx	lr

08026ec8 <memcpy>:
 8026ec8:	440a      	add	r2, r1
 8026eca:	4291      	cmp	r1, r2
 8026ecc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8026ed0:	d100      	bne.n	8026ed4 <memcpy+0xc>
 8026ed2:	4770      	bx	lr
 8026ed4:	b510      	push	{r4, lr}
 8026ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026ede:	4291      	cmp	r1, r2
 8026ee0:	d1f9      	bne.n	8026ed6 <memcpy+0xe>
 8026ee2:	bd10      	pop	{r4, pc}

08026ee4 <_wcrtomb_r>:
 8026ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026ee6:	4c09      	ldr	r4, [pc, #36]	@ (8026f0c <_wcrtomb_r+0x28>)
 8026ee8:	b085      	sub	sp, #20
 8026eea:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8026eee:	4605      	mov	r5, r0
 8026ef0:	461e      	mov	r6, r3
 8026ef2:	b909      	cbnz	r1, 8026ef8 <_wcrtomb_r+0x14>
 8026ef4:	460a      	mov	r2, r1
 8026ef6:	a901      	add	r1, sp, #4
 8026ef8:	47b8      	blx	r7
 8026efa:	1c43      	adds	r3, r0, #1
 8026efc:	bf01      	itttt	eq
 8026efe:	2300      	moveq	r3, #0
 8026f00:	6033      	streq	r3, [r6, #0]
 8026f02:	238a      	moveq	r3, #138	@ 0x8a
 8026f04:	602b      	streq	r3, [r5, #0]
 8026f06:	b005      	add	sp, #20
 8026f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026f0a:	bf00      	nop
 8026f0c:	200002c4 	.word	0x200002c4

08026f10 <frexp>:
 8026f10:	b570      	push	{r4, r5, r6, lr}
 8026f12:	2100      	movs	r1, #0
 8026f14:	ec55 4b10 	vmov	r4, r5, d0
 8026f18:	6001      	str	r1, [r0, #0]
 8026f1a:	4915      	ldr	r1, [pc, #84]	@ (8026f70 <frexp+0x60>)
 8026f1c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8026f20:	428a      	cmp	r2, r1
 8026f22:	4606      	mov	r6, r0
 8026f24:	462b      	mov	r3, r5
 8026f26:	d820      	bhi.n	8026f6a <frexp+0x5a>
 8026f28:	4621      	mov	r1, r4
 8026f2a:	4311      	orrs	r1, r2
 8026f2c:	d01d      	beq.n	8026f6a <frexp+0x5a>
 8026f2e:	4911      	ldr	r1, [pc, #68]	@ (8026f74 <frexp+0x64>)
 8026f30:	4029      	ands	r1, r5
 8026f32:	b961      	cbnz	r1, 8026f4e <frexp+0x3e>
 8026f34:	4b10      	ldr	r3, [pc, #64]	@ (8026f78 <frexp+0x68>)
 8026f36:	2200      	movs	r2, #0
 8026f38:	4620      	mov	r0, r4
 8026f3a:	4629      	mov	r1, r5
 8026f3c:	f7d9 fb74 	bl	8000628 <__aeabi_dmul>
 8026f40:	460b      	mov	r3, r1
 8026f42:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8026f46:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8026f4a:	4604      	mov	r4, r0
 8026f4c:	6031      	str	r1, [r6, #0]
 8026f4e:	6831      	ldr	r1, [r6, #0]
 8026f50:	1512      	asrs	r2, r2, #20
 8026f52:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8026f56:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8026f5a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8026f5e:	4411      	add	r1, r2
 8026f60:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8026f64:	6031      	str	r1, [r6, #0]
 8026f66:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8026f6a:	ec45 4b10 	vmov	d0, r4, r5
 8026f6e:	bd70      	pop	{r4, r5, r6, pc}
 8026f70:	7fefffff 	.word	0x7fefffff
 8026f74:	7ff00000 	.word	0x7ff00000
 8026f78:	43500000 	.word	0x43500000

08026f7c <register_fini>:
 8026f7c:	4b02      	ldr	r3, [pc, #8]	@ (8026f88 <register_fini+0xc>)
 8026f7e:	b113      	cbz	r3, 8026f86 <register_fini+0xa>
 8026f80:	4802      	ldr	r0, [pc, #8]	@ (8026f8c <register_fini+0x10>)
 8026f82:	f000 b810 	b.w	8026fa6 <atexit>
 8026f86:	4770      	bx	lr
 8026f88:	00000000 	.word	0x00000000
 8026f8c:	0802e40d 	.word	0x0802e40d

08026f90 <abort>:
 8026f90:	b508      	push	{r3, lr}
 8026f92:	2006      	movs	r0, #6
 8026f94:	f007 f8a6 	bl	802e0e4 <raise>
 8026f98:	2001      	movs	r0, #1
 8026f9a:	f7db fbd3 	bl	8002744 <_exit>

08026f9e <abs>:
 8026f9e:	2800      	cmp	r0, #0
 8026fa0:	bfb8      	it	lt
 8026fa2:	4240      	neglt	r0, r0
 8026fa4:	4770      	bx	lr

08026fa6 <atexit>:
 8026fa6:	2300      	movs	r3, #0
 8026fa8:	4601      	mov	r1, r0
 8026faa:	461a      	mov	r2, r3
 8026fac:	4618      	mov	r0, r3
 8026fae:	f007 bb01 	b.w	802e5b4 <__register_exitproc>

08026fb2 <quorem>:
 8026fb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fb6:	6903      	ldr	r3, [r0, #16]
 8026fb8:	690c      	ldr	r4, [r1, #16]
 8026fba:	42a3      	cmp	r3, r4
 8026fbc:	4607      	mov	r7, r0
 8026fbe:	db7e      	blt.n	80270be <quorem+0x10c>
 8026fc0:	3c01      	subs	r4, #1
 8026fc2:	f101 0814 	add.w	r8, r1, #20
 8026fc6:	00a3      	lsls	r3, r4, #2
 8026fc8:	f100 0514 	add.w	r5, r0, #20
 8026fcc:	9300      	str	r3, [sp, #0]
 8026fce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026fd2:	9301      	str	r3, [sp, #4]
 8026fd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8026fd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026fdc:	3301      	adds	r3, #1
 8026fde:	429a      	cmp	r2, r3
 8026fe0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8026fe4:	fbb2 f6f3 	udiv	r6, r2, r3
 8026fe8:	d32e      	bcc.n	8027048 <quorem+0x96>
 8026fea:	f04f 0a00 	mov.w	sl, #0
 8026fee:	46c4      	mov	ip, r8
 8026ff0:	46ae      	mov	lr, r5
 8026ff2:	46d3      	mov	fp, sl
 8026ff4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8026ff8:	b298      	uxth	r0, r3
 8026ffa:	fb06 a000 	mla	r0, r6, r0, sl
 8026ffe:	0c02      	lsrs	r2, r0, #16
 8027000:	0c1b      	lsrs	r3, r3, #16
 8027002:	fb06 2303 	mla	r3, r6, r3, r2
 8027006:	f8de 2000 	ldr.w	r2, [lr]
 802700a:	b280      	uxth	r0, r0
 802700c:	b292      	uxth	r2, r2
 802700e:	1a12      	subs	r2, r2, r0
 8027010:	445a      	add	r2, fp
 8027012:	f8de 0000 	ldr.w	r0, [lr]
 8027016:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802701a:	b29b      	uxth	r3, r3
 802701c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8027020:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8027024:	b292      	uxth	r2, r2
 8027026:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802702a:	45e1      	cmp	r9, ip
 802702c:	f84e 2b04 	str.w	r2, [lr], #4
 8027030:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8027034:	d2de      	bcs.n	8026ff4 <quorem+0x42>
 8027036:	9b00      	ldr	r3, [sp, #0]
 8027038:	58eb      	ldr	r3, [r5, r3]
 802703a:	b92b      	cbnz	r3, 8027048 <quorem+0x96>
 802703c:	9b01      	ldr	r3, [sp, #4]
 802703e:	3b04      	subs	r3, #4
 8027040:	429d      	cmp	r5, r3
 8027042:	461a      	mov	r2, r3
 8027044:	d32f      	bcc.n	80270a6 <quorem+0xf4>
 8027046:	613c      	str	r4, [r7, #16]
 8027048:	4638      	mov	r0, r7
 802704a:	f005 fce3 	bl	802ca14 <__mcmp>
 802704e:	2800      	cmp	r0, #0
 8027050:	db25      	blt.n	802709e <quorem+0xec>
 8027052:	4629      	mov	r1, r5
 8027054:	2000      	movs	r0, #0
 8027056:	f858 2b04 	ldr.w	r2, [r8], #4
 802705a:	f8d1 c000 	ldr.w	ip, [r1]
 802705e:	fa1f fe82 	uxth.w	lr, r2
 8027062:	fa1f f38c 	uxth.w	r3, ip
 8027066:	eba3 030e 	sub.w	r3, r3, lr
 802706a:	4403      	add	r3, r0
 802706c:	0c12      	lsrs	r2, r2, #16
 802706e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8027072:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8027076:	b29b      	uxth	r3, r3
 8027078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802707c:	45c1      	cmp	r9, r8
 802707e:	f841 3b04 	str.w	r3, [r1], #4
 8027082:	ea4f 4022 	mov.w	r0, r2, asr #16
 8027086:	d2e6      	bcs.n	8027056 <quorem+0xa4>
 8027088:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802708c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027090:	b922      	cbnz	r2, 802709c <quorem+0xea>
 8027092:	3b04      	subs	r3, #4
 8027094:	429d      	cmp	r5, r3
 8027096:	461a      	mov	r2, r3
 8027098:	d30b      	bcc.n	80270b2 <quorem+0x100>
 802709a:	613c      	str	r4, [r7, #16]
 802709c:	3601      	adds	r6, #1
 802709e:	4630      	mov	r0, r6
 80270a0:	b003      	add	sp, #12
 80270a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270a6:	6812      	ldr	r2, [r2, #0]
 80270a8:	3b04      	subs	r3, #4
 80270aa:	2a00      	cmp	r2, #0
 80270ac:	d1cb      	bne.n	8027046 <quorem+0x94>
 80270ae:	3c01      	subs	r4, #1
 80270b0:	e7c6      	b.n	8027040 <quorem+0x8e>
 80270b2:	6812      	ldr	r2, [r2, #0]
 80270b4:	3b04      	subs	r3, #4
 80270b6:	2a00      	cmp	r2, #0
 80270b8:	d1ef      	bne.n	802709a <quorem+0xe8>
 80270ba:	3c01      	subs	r4, #1
 80270bc:	e7ea      	b.n	8027094 <quorem+0xe2>
 80270be:	2000      	movs	r0, #0
 80270c0:	e7ee      	b.n	80270a0 <quorem+0xee>
 80270c2:	0000      	movs	r0, r0
 80270c4:	0000      	movs	r0, r0
	...

080270c8 <_dtoa_r>:
 80270c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80270cc:	b099      	sub	sp, #100	@ 0x64
 80270ce:	ed8d 0b02 	vstr	d0, [sp, #8]
 80270d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80270d4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80270d6:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80270d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80270da:	ec55 4b10 	vmov	r4, r5, d0
 80270de:	4683      	mov	fp, r0
 80270e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80270e2:	b149      	cbz	r1, 80270f8 <_dtoa_r+0x30>
 80270e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80270e6:	604a      	str	r2, [r1, #4]
 80270e8:	2301      	movs	r3, #1
 80270ea:	4093      	lsls	r3, r2
 80270ec:	608b      	str	r3, [r1, #8]
 80270ee:	f005 fa40 	bl	802c572 <_Bfree>
 80270f2:	2300      	movs	r3, #0
 80270f4:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 80270f8:	1e2b      	subs	r3, r5, #0
 80270fa:	bfb9      	ittee	lt
 80270fc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8027100:	9303      	strlt	r3, [sp, #12]
 8027102:	2300      	movge	r3, #0
 8027104:	6033      	strge	r3, [r6, #0]
 8027106:	9f03      	ldr	r7, [sp, #12]
 8027108:	4b97      	ldr	r3, [pc, #604]	@ (8027368 <_dtoa_r+0x2a0>)
 802710a:	bfbc      	itt	lt
 802710c:	2201      	movlt	r2, #1
 802710e:	6032      	strlt	r2, [r6, #0]
 8027110:	43bb      	bics	r3, r7
 8027112:	d114      	bne.n	802713e <_dtoa_r+0x76>
 8027114:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8027116:	f242 730f 	movw	r3, #9999	@ 0x270f
 802711a:	6013      	str	r3, [r2, #0]
 802711c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027120:	4323      	orrs	r3, r4
 8027122:	f000 854c 	beq.w	8027bbe <_dtoa_r+0xaf6>
 8027126:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027128:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8027380 <_dtoa_r+0x2b8>
 802712c:	b11b      	cbz	r3, 8027136 <_dtoa_r+0x6e>
 802712e:	f10a 0303 	add.w	r3, sl, #3
 8027132:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8027134:	6013      	str	r3, [r2, #0]
 8027136:	4650      	mov	r0, sl
 8027138:	b019      	add	sp, #100	@ 0x64
 802713a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802713e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027142:	2200      	movs	r2, #0
 8027144:	ec51 0b17 	vmov	r0, r1, d7
 8027148:	2300      	movs	r3, #0
 802714a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802714e:	f7d9 fcd3 	bl	8000af8 <__aeabi_dcmpeq>
 8027152:	4680      	mov	r8, r0
 8027154:	b150      	cbz	r0, 802716c <_dtoa_r+0xa4>
 8027156:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8027158:	2301      	movs	r3, #1
 802715a:	6013      	str	r3, [r2, #0]
 802715c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802715e:	b113      	cbz	r3, 8027166 <_dtoa_r+0x9e>
 8027160:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8027162:	4b82      	ldr	r3, [pc, #520]	@ (802736c <_dtoa_r+0x2a4>)
 8027164:	6013      	str	r3, [r2, #0]
 8027166:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8027384 <_dtoa_r+0x2bc>
 802716a:	e7e4      	b.n	8027136 <_dtoa_r+0x6e>
 802716c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8027170:	aa16      	add	r2, sp, #88	@ 0x58
 8027172:	a917      	add	r1, sp, #92	@ 0x5c
 8027174:	4658      	mov	r0, fp
 8027176:	f005 fd6d 	bl	802cc54 <__d2b>
 802717a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802717e:	4681      	mov	r9, r0
 8027180:	2e00      	cmp	r6, #0
 8027182:	d077      	beq.n	8027274 <_dtoa_r+0x1ac>
 8027184:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027186:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802718a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802718e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8027192:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8027196:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802719a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802719e:	4619      	mov	r1, r3
 80271a0:	2200      	movs	r2, #0
 80271a2:	4b73      	ldr	r3, [pc, #460]	@ (8027370 <_dtoa_r+0x2a8>)
 80271a4:	f7d9 f888 	bl	80002b8 <__aeabi_dsub>
 80271a8:	a369      	add	r3, pc, #420	@ (adr r3, 8027350 <_dtoa_r+0x288>)
 80271aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271ae:	f7d9 fa3b 	bl	8000628 <__aeabi_dmul>
 80271b2:	a369      	add	r3, pc, #420	@ (adr r3, 8027358 <_dtoa_r+0x290>)
 80271b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271b8:	f7d9 f880 	bl	80002bc <__adddf3>
 80271bc:	4604      	mov	r4, r0
 80271be:	4630      	mov	r0, r6
 80271c0:	460d      	mov	r5, r1
 80271c2:	f7d9 f9c7 	bl	8000554 <__aeabi_i2d>
 80271c6:	a366      	add	r3, pc, #408	@ (adr r3, 8027360 <_dtoa_r+0x298>)
 80271c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271cc:	f7d9 fa2c 	bl	8000628 <__aeabi_dmul>
 80271d0:	4602      	mov	r2, r0
 80271d2:	460b      	mov	r3, r1
 80271d4:	4620      	mov	r0, r4
 80271d6:	4629      	mov	r1, r5
 80271d8:	f7d9 f870 	bl	80002bc <__adddf3>
 80271dc:	4604      	mov	r4, r0
 80271de:	460d      	mov	r5, r1
 80271e0:	f7d9 fcd2 	bl	8000b88 <__aeabi_d2iz>
 80271e4:	2200      	movs	r2, #0
 80271e6:	4607      	mov	r7, r0
 80271e8:	2300      	movs	r3, #0
 80271ea:	4620      	mov	r0, r4
 80271ec:	4629      	mov	r1, r5
 80271ee:	f7d9 fc8d 	bl	8000b0c <__aeabi_dcmplt>
 80271f2:	b140      	cbz	r0, 8027206 <_dtoa_r+0x13e>
 80271f4:	4638      	mov	r0, r7
 80271f6:	f7d9 f9ad 	bl	8000554 <__aeabi_i2d>
 80271fa:	4622      	mov	r2, r4
 80271fc:	462b      	mov	r3, r5
 80271fe:	f7d9 fc7b 	bl	8000af8 <__aeabi_dcmpeq>
 8027202:	b900      	cbnz	r0, 8027206 <_dtoa_r+0x13e>
 8027204:	3f01      	subs	r7, #1
 8027206:	2f16      	cmp	r7, #22
 8027208:	d851      	bhi.n	80272ae <_dtoa_r+0x1e6>
 802720a:	4b5a      	ldr	r3, [pc, #360]	@ (8027374 <_dtoa_r+0x2ac>)
 802720c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8027210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8027218:	f7d9 fc78 	bl	8000b0c <__aeabi_dcmplt>
 802721c:	2800      	cmp	r0, #0
 802721e:	d048      	beq.n	80272b2 <_dtoa_r+0x1ea>
 8027220:	3f01      	subs	r7, #1
 8027222:	2300      	movs	r3, #0
 8027224:	9312      	str	r3, [sp, #72]	@ 0x48
 8027226:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027228:	1b9b      	subs	r3, r3, r6
 802722a:	1e5a      	subs	r2, r3, #1
 802722c:	bf44      	itt	mi
 802722e:	f1c3 0801 	rsbmi	r8, r3, #1
 8027232:	2300      	movmi	r3, #0
 8027234:	9208      	str	r2, [sp, #32]
 8027236:	bf54      	ite	pl
 8027238:	f04f 0800 	movpl.w	r8, #0
 802723c:	9308      	strmi	r3, [sp, #32]
 802723e:	2f00      	cmp	r7, #0
 8027240:	db39      	blt.n	80272b6 <_dtoa_r+0x1ee>
 8027242:	9b08      	ldr	r3, [sp, #32]
 8027244:	970f      	str	r7, [sp, #60]	@ 0x3c
 8027246:	443b      	add	r3, r7
 8027248:	9308      	str	r3, [sp, #32]
 802724a:	2300      	movs	r3, #0
 802724c:	930a      	str	r3, [sp, #40]	@ 0x28
 802724e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027250:	2b09      	cmp	r3, #9
 8027252:	d865      	bhi.n	8027320 <_dtoa_r+0x258>
 8027254:	2b05      	cmp	r3, #5
 8027256:	bfc4      	itt	gt
 8027258:	3b04      	subgt	r3, #4
 802725a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802725c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802725e:	f1a3 0302 	sub.w	r3, r3, #2
 8027262:	bfcc      	ite	gt
 8027264:	2400      	movgt	r4, #0
 8027266:	2401      	movle	r4, #1
 8027268:	2b03      	cmp	r3, #3
 802726a:	d864      	bhi.n	8027336 <_dtoa_r+0x26e>
 802726c:	e8df f003 	tbb	[pc, r3]
 8027270:	5635372a 	.word	0x5635372a
 8027274:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8027278:	441e      	add	r6, r3
 802727a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802727e:	2b20      	cmp	r3, #32
 8027280:	bfc1      	itttt	gt
 8027282:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8027286:	409f      	lslgt	r7, r3
 8027288:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802728c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8027290:	bfd6      	itet	le
 8027292:	f1c3 0320 	rsble	r3, r3, #32
 8027296:	ea47 0003 	orrgt.w	r0, r7, r3
 802729a:	fa04 f003 	lslle.w	r0, r4, r3
 802729e:	f7d9 f949 	bl	8000534 <__aeabi_ui2d>
 80272a2:	2201      	movs	r2, #1
 80272a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80272a8:	3e01      	subs	r6, #1
 80272aa:	9214      	str	r2, [sp, #80]	@ 0x50
 80272ac:	e777      	b.n	802719e <_dtoa_r+0xd6>
 80272ae:	2301      	movs	r3, #1
 80272b0:	e7b8      	b.n	8027224 <_dtoa_r+0x15c>
 80272b2:	9012      	str	r0, [sp, #72]	@ 0x48
 80272b4:	e7b7      	b.n	8027226 <_dtoa_r+0x15e>
 80272b6:	427b      	negs	r3, r7
 80272b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80272ba:	2300      	movs	r3, #0
 80272bc:	eba8 0807 	sub.w	r8, r8, r7
 80272c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80272c2:	e7c4      	b.n	802724e <_dtoa_r+0x186>
 80272c4:	2300      	movs	r3, #0
 80272c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80272c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80272ca:	2b00      	cmp	r3, #0
 80272cc:	dc36      	bgt.n	802733c <_dtoa_r+0x274>
 80272ce:	2301      	movs	r3, #1
 80272d0:	9300      	str	r3, [sp, #0]
 80272d2:	9307      	str	r3, [sp, #28]
 80272d4:	461a      	mov	r2, r3
 80272d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80272d8:	e00b      	b.n	80272f2 <_dtoa_r+0x22a>
 80272da:	2301      	movs	r3, #1
 80272dc:	e7f3      	b.n	80272c6 <_dtoa_r+0x1fe>
 80272de:	2300      	movs	r3, #0
 80272e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80272e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80272e4:	18fb      	adds	r3, r7, r3
 80272e6:	9300      	str	r3, [sp, #0]
 80272e8:	3301      	adds	r3, #1
 80272ea:	2b01      	cmp	r3, #1
 80272ec:	9307      	str	r3, [sp, #28]
 80272ee:	bfb8      	it	lt
 80272f0:	2301      	movlt	r3, #1
 80272f2:	2100      	movs	r1, #0
 80272f4:	2204      	movs	r2, #4
 80272f6:	f102 0014 	add.w	r0, r2, #20
 80272fa:	4298      	cmp	r0, r3
 80272fc:	d922      	bls.n	8027344 <_dtoa_r+0x27c>
 80272fe:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 8027302:	4658      	mov	r0, fp
 8027304:	f005 f910 	bl	802c528 <_Balloc>
 8027308:	4682      	mov	sl, r0
 802730a:	2800      	cmp	r0, #0
 802730c:	d13c      	bne.n	8027388 <_dtoa_r+0x2c0>
 802730e:	4b1a      	ldr	r3, [pc, #104]	@ (8027378 <_dtoa_r+0x2b0>)
 8027310:	4602      	mov	r2, r0
 8027312:	f240 11af 	movw	r1, #431	@ 0x1af
 8027316:	4819      	ldr	r0, [pc, #100]	@ (802737c <_dtoa_r+0x2b4>)
 8027318:	f7fb fe46 	bl	8022fa8 <__assert_func>
 802731c:	2301      	movs	r3, #1
 802731e:	e7df      	b.n	80272e0 <_dtoa_r+0x218>
 8027320:	2401      	movs	r4, #1
 8027322:	2300      	movs	r3, #0
 8027324:	9309      	str	r3, [sp, #36]	@ 0x24
 8027326:	940b      	str	r4, [sp, #44]	@ 0x2c
 8027328:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802732c:	9300      	str	r3, [sp, #0]
 802732e:	9307      	str	r3, [sp, #28]
 8027330:	2200      	movs	r2, #0
 8027332:	2312      	movs	r3, #18
 8027334:	e7cf      	b.n	80272d6 <_dtoa_r+0x20e>
 8027336:	2301      	movs	r3, #1
 8027338:	930b      	str	r3, [sp, #44]	@ 0x2c
 802733a:	e7f5      	b.n	8027328 <_dtoa_r+0x260>
 802733c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802733e:	9300      	str	r3, [sp, #0]
 8027340:	9307      	str	r3, [sp, #28]
 8027342:	e7d6      	b.n	80272f2 <_dtoa_r+0x22a>
 8027344:	3101      	adds	r1, #1
 8027346:	0052      	lsls	r2, r2, #1
 8027348:	e7d5      	b.n	80272f6 <_dtoa_r+0x22e>
 802734a:	bf00      	nop
 802734c:	f3af 8000 	nop.w
 8027350:	636f4361 	.word	0x636f4361
 8027354:	3fd287a7 	.word	0x3fd287a7
 8027358:	8b60c8b3 	.word	0x8b60c8b3
 802735c:	3fc68a28 	.word	0x3fc68a28
 8027360:	509f79fb 	.word	0x509f79fb
 8027364:	3fd34413 	.word	0x3fd34413
 8027368:	7ff00000 	.word	0x7ff00000
 802736c:	0803407b 	.word	0x0803407b
 8027370:	3ff80000 	.word	0x3ff80000
 8027374:	08034698 	.word	0x08034698
 8027378:	08034512 	.word	0x08034512
 802737c:	08034523 	.word	0x08034523
 8027380:	0803450e 	.word	0x0803450e
 8027384:	0803407a 	.word	0x0803407a
 8027388:	9b07      	ldr	r3, [sp, #28]
 802738a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802738e:	2b0e      	cmp	r3, #14
 8027390:	f200 80a4 	bhi.w	80274dc <_dtoa_r+0x414>
 8027394:	2c00      	cmp	r4, #0
 8027396:	f000 80a1 	beq.w	80274dc <_dtoa_r+0x414>
 802739a:	2f00      	cmp	r7, #0
 802739c:	dd33      	ble.n	8027406 <_dtoa_r+0x33e>
 802739e:	4bae      	ldr	r3, [pc, #696]	@ (8027658 <_dtoa_r+0x590>)
 80273a0:	f007 020f 	and.w	r2, r7, #15
 80273a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80273a8:	ed93 7b00 	vldr	d7, [r3]
 80273ac:	05f8      	lsls	r0, r7, #23
 80273ae:	ed8d 7b04 	vstr	d7, [sp, #16]
 80273b2:	ea4f 1427 	mov.w	r4, r7, asr #4
 80273b6:	d516      	bpl.n	80273e6 <_dtoa_r+0x31e>
 80273b8:	4ba8      	ldr	r3, [pc, #672]	@ (802765c <_dtoa_r+0x594>)
 80273ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80273be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80273c2:	f7d9 fa5b 	bl	800087c <__aeabi_ddiv>
 80273c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80273ca:	f004 040f 	and.w	r4, r4, #15
 80273ce:	2603      	movs	r6, #3
 80273d0:	4da2      	ldr	r5, [pc, #648]	@ (802765c <_dtoa_r+0x594>)
 80273d2:	b954      	cbnz	r4, 80273ea <_dtoa_r+0x322>
 80273d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80273d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80273dc:	f7d9 fa4e 	bl	800087c <__aeabi_ddiv>
 80273e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80273e4:	e028      	b.n	8027438 <_dtoa_r+0x370>
 80273e6:	2602      	movs	r6, #2
 80273e8:	e7f2      	b.n	80273d0 <_dtoa_r+0x308>
 80273ea:	07e1      	lsls	r1, r4, #31
 80273ec:	d508      	bpl.n	8027400 <_dtoa_r+0x338>
 80273ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80273f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80273f6:	f7d9 f917 	bl	8000628 <__aeabi_dmul>
 80273fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80273fe:	3601      	adds	r6, #1
 8027400:	1064      	asrs	r4, r4, #1
 8027402:	3508      	adds	r5, #8
 8027404:	e7e5      	b.n	80273d2 <_dtoa_r+0x30a>
 8027406:	f000 80d2 	beq.w	80275ae <_dtoa_r+0x4e6>
 802740a:	427c      	negs	r4, r7
 802740c:	4b92      	ldr	r3, [pc, #584]	@ (8027658 <_dtoa_r+0x590>)
 802740e:	4d93      	ldr	r5, [pc, #588]	@ (802765c <_dtoa_r+0x594>)
 8027410:	f004 020f 	and.w	r2, r4, #15
 8027414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8027418:	e9d3 2300 	ldrd	r2, r3, [r3]
 802741c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8027420:	f7d9 f902 	bl	8000628 <__aeabi_dmul>
 8027424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027428:	1124      	asrs	r4, r4, #4
 802742a:	2300      	movs	r3, #0
 802742c:	2602      	movs	r6, #2
 802742e:	2c00      	cmp	r4, #0
 8027430:	f040 80b2 	bne.w	8027598 <_dtoa_r+0x4d0>
 8027434:	2b00      	cmp	r3, #0
 8027436:	d1d3      	bne.n	80273e0 <_dtoa_r+0x318>
 8027438:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802743a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802743e:	2b00      	cmp	r3, #0
 8027440:	f000 80b7 	beq.w	80275b2 <_dtoa_r+0x4ea>
 8027444:	4b86      	ldr	r3, [pc, #536]	@ (8027660 <_dtoa_r+0x598>)
 8027446:	2200      	movs	r2, #0
 8027448:	4620      	mov	r0, r4
 802744a:	4629      	mov	r1, r5
 802744c:	f7d9 fb5e 	bl	8000b0c <__aeabi_dcmplt>
 8027450:	2800      	cmp	r0, #0
 8027452:	f000 80ae 	beq.w	80275b2 <_dtoa_r+0x4ea>
 8027456:	9b07      	ldr	r3, [sp, #28]
 8027458:	2b00      	cmp	r3, #0
 802745a:	f000 80aa 	beq.w	80275b2 <_dtoa_r+0x4ea>
 802745e:	9b00      	ldr	r3, [sp, #0]
 8027460:	2b00      	cmp	r3, #0
 8027462:	dd37      	ble.n	80274d4 <_dtoa_r+0x40c>
 8027464:	1e7b      	subs	r3, r7, #1
 8027466:	9304      	str	r3, [sp, #16]
 8027468:	4620      	mov	r0, r4
 802746a:	4b7e      	ldr	r3, [pc, #504]	@ (8027664 <_dtoa_r+0x59c>)
 802746c:	2200      	movs	r2, #0
 802746e:	4629      	mov	r1, r5
 8027470:	f7d9 f8da 	bl	8000628 <__aeabi_dmul>
 8027474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027478:	9c00      	ldr	r4, [sp, #0]
 802747a:	3601      	adds	r6, #1
 802747c:	4630      	mov	r0, r6
 802747e:	f7d9 f869 	bl	8000554 <__aeabi_i2d>
 8027482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027486:	f7d9 f8cf 	bl	8000628 <__aeabi_dmul>
 802748a:	4b77      	ldr	r3, [pc, #476]	@ (8027668 <_dtoa_r+0x5a0>)
 802748c:	2200      	movs	r2, #0
 802748e:	f7d8 ff15 	bl	80002bc <__adddf3>
 8027492:	4605      	mov	r5, r0
 8027494:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8027498:	2c00      	cmp	r4, #0
 802749a:	f040 808d 	bne.w	80275b8 <_dtoa_r+0x4f0>
 802749e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80274a2:	4b72      	ldr	r3, [pc, #456]	@ (802766c <_dtoa_r+0x5a4>)
 80274a4:	2200      	movs	r2, #0
 80274a6:	f7d8 ff07 	bl	80002b8 <__aeabi_dsub>
 80274aa:	4602      	mov	r2, r0
 80274ac:	460b      	mov	r3, r1
 80274ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80274b2:	462a      	mov	r2, r5
 80274b4:	4633      	mov	r3, r6
 80274b6:	f7d9 fb47 	bl	8000b48 <__aeabi_dcmpgt>
 80274ba:	2800      	cmp	r0, #0
 80274bc:	f040 828c 	bne.w	80279d8 <_dtoa_r+0x910>
 80274c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80274c4:	462a      	mov	r2, r5
 80274c6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80274ca:	f7d9 fb1f 	bl	8000b0c <__aeabi_dcmplt>
 80274ce:	2800      	cmp	r0, #0
 80274d0:	f040 8129 	bne.w	8027726 <_dtoa_r+0x65e>
 80274d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80274d8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80274dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80274de:	2b00      	cmp	r3, #0
 80274e0:	f2c0 815b 	blt.w	802779a <_dtoa_r+0x6d2>
 80274e4:	2f0e      	cmp	r7, #14
 80274e6:	f300 8158 	bgt.w	802779a <_dtoa_r+0x6d2>
 80274ea:	4b5b      	ldr	r3, [pc, #364]	@ (8027658 <_dtoa_r+0x590>)
 80274ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80274f0:	ed93 7b00 	vldr	d7, [r3]
 80274f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80274f6:	2b00      	cmp	r3, #0
 80274f8:	ed8d 7b00 	vstr	d7, [sp]
 80274fc:	da03      	bge.n	8027506 <_dtoa_r+0x43e>
 80274fe:	9b07      	ldr	r3, [sp, #28]
 8027500:	2b00      	cmp	r3, #0
 8027502:	f340 8102 	ble.w	802770a <_dtoa_r+0x642>
 8027506:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802750a:	4656      	mov	r6, sl
 802750c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027510:	4620      	mov	r0, r4
 8027512:	4629      	mov	r1, r5
 8027514:	f7d9 f9b2 	bl	800087c <__aeabi_ddiv>
 8027518:	f7d9 fb36 	bl	8000b88 <__aeabi_d2iz>
 802751c:	4680      	mov	r8, r0
 802751e:	f7d9 f819 	bl	8000554 <__aeabi_i2d>
 8027522:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027526:	f7d9 f87f 	bl	8000628 <__aeabi_dmul>
 802752a:	4602      	mov	r2, r0
 802752c:	460b      	mov	r3, r1
 802752e:	4620      	mov	r0, r4
 8027530:	4629      	mov	r1, r5
 8027532:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8027536:	f7d8 febf 	bl	80002b8 <__aeabi_dsub>
 802753a:	f806 4b01 	strb.w	r4, [r6], #1
 802753e:	9d07      	ldr	r5, [sp, #28]
 8027540:	eba6 040a 	sub.w	r4, r6, sl
 8027544:	42a5      	cmp	r5, r4
 8027546:	4602      	mov	r2, r0
 8027548:	460b      	mov	r3, r1
 802754a:	f040 8118 	bne.w	802777e <_dtoa_r+0x6b6>
 802754e:	f7d8 feb5 	bl	80002bc <__adddf3>
 8027552:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027556:	4604      	mov	r4, r0
 8027558:	460d      	mov	r5, r1
 802755a:	f7d9 faf5 	bl	8000b48 <__aeabi_dcmpgt>
 802755e:	2800      	cmp	r0, #0
 8027560:	f040 80fa 	bne.w	8027758 <_dtoa_r+0x690>
 8027564:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027568:	4620      	mov	r0, r4
 802756a:	4629      	mov	r1, r5
 802756c:	f7d9 fac4 	bl	8000af8 <__aeabi_dcmpeq>
 8027570:	b118      	cbz	r0, 802757a <_dtoa_r+0x4b2>
 8027572:	f018 0f01 	tst.w	r8, #1
 8027576:	f040 80ef 	bne.w	8027758 <_dtoa_r+0x690>
 802757a:	4649      	mov	r1, r9
 802757c:	4658      	mov	r0, fp
 802757e:	f004 fff8 	bl	802c572 <_Bfree>
 8027582:	2300      	movs	r3, #0
 8027584:	7033      	strb	r3, [r6, #0]
 8027586:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027588:	3701      	adds	r7, #1
 802758a:	601f      	str	r7, [r3, #0]
 802758c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802758e:	2b00      	cmp	r3, #0
 8027590:	f43f add1 	beq.w	8027136 <_dtoa_r+0x6e>
 8027594:	601e      	str	r6, [r3, #0]
 8027596:	e5ce      	b.n	8027136 <_dtoa_r+0x6e>
 8027598:	07e2      	lsls	r2, r4, #31
 802759a:	d505      	bpl.n	80275a8 <_dtoa_r+0x4e0>
 802759c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80275a0:	f7d9 f842 	bl	8000628 <__aeabi_dmul>
 80275a4:	3601      	adds	r6, #1
 80275a6:	2301      	movs	r3, #1
 80275a8:	1064      	asrs	r4, r4, #1
 80275aa:	3508      	adds	r5, #8
 80275ac:	e73f      	b.n	802742e <_dtoa_r+0x366>
 80275ae:	2602      	movs	r6, #2
 80275b0:	e742      	b.n	8027438 <_dtoa_r+0x370>
 80275b2:	9c07      	ldr	r4, [sp, #28]
 80275b4:	9704      	str	r7, [sp, #16]
 80275b6:	e761      	b.n	802747c <_dtoa_r+0x3b4>
 80275b8:	4b27      	ldr	r3, [pc, #156]	@ (8027658 <_dtoa_r+0x590>)
 80275ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80275bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80275c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80275c4:	4454      	add	r4, sl
 80275c6:	2900      	cmp	r1, #0
 80275c8:	d054      	beq.n	8027674 <_dtoa_r+0x5ac>
 80275ca:	4929      	ldr	r1, [pc, #164]	@ (8027670 <_dtoa_r+0x5a8>)
 80275cc:	2000      	movs	r0, #0
 80275ce:	f7d9 f955 	bl	800087c <__aeabi_ddiv>
 80275d2:	4633      	mov	r3, r6
 80275d4:	462a      	mov	r2, r5
 80275d6:	f7d8 fe6f 	bl	80002b8 <__aeabi_dsub>
 80275da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80275de:	4656      	mov	r6, sl
 80275e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80275e4:	f7d9 fad0 	bl	8000b88 <__aeabi_d2iz>
 80275e8:	4605      	mov	r5, r0
 80275ea:	f7d8 ffb3 	bl	8000554 <__aeabi_i2d>
 80275ee:	4602      	mov	r2, r0
 80275f0:	460b      	mov	r3, r1
 80275f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80275f6:	f7d8 fe5f 	bl	80002b8 <__aeabi_dsub>
 80275fa:	3530      	adds	r5, #48	@ 0x30
 80275fc:	4602      	mov	r2, r0
 80275fe:	460b      	mov	r3, r1
 8027600:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8027604:	f806 5b01 	strb.w	r5, [r6], #1
 8027608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802760c:	f7d9 fa7e 	bl	8000b0c <__aeabi_dcmplt>
 8027610:	2800      	cmp	r0, #0
 8027612:	d172      	bne.n	80276fa <_dtoa_r+0x632>
 8027614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027618:	4911      	ldr	r1, [pc, #68]	@ (8027660 <_dtoa_r+0x598>)
 802761a:	2000      	movs	r0, #0
 802761c:	f7d8 fe4c 	bl	80002b8 <__aeabi_dsub>
 8027620:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8027624:	f7d9 fa72 	bl	8000b0c <__aeabi_dcmplt>
 8027628:	2800      	cmp	r0, #0
 802762a:	f040 8096 	bne.w	802775a <_dtoa_r+0x692>
 802762e:	42a6      	cmp	r6, r4
 8027630:	f43f af50 	beq.w	80274d4 <_dtoa_r+0x40c>
 8027634:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8027638:	4b0a      	ldr	r3, [pc, #40]	@ (8027664 <_dtoa_r+0x59c>)
 802763a:	2200      	movs	r2, #0
 802763c:	f7d8 fff4 	bl	8000628 <__aeabi_dmul>
 8027640:	4b08      	ldr	r3, [pc, #32]	@ (8027664 <_dtoa_r+0x59c>)
 8027642:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8027646:	2200      	movs	r2, #0
 8027648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802764c:	f7d8 ffec 	bl	8000628 <__aeabi_dmul>
 8027650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027654:	e7c4      	b.n	80275e0 <_dtoa_r+0x518>
 8027656:	bf00      	nop
 8027658:	08034698 	.word	0x08034698
 802765c:	08034670 	.word	0x08034670
 8027660:	3ff00000 	.word	0x3ff00000
 8027664:	40240000 	.word	0x40240000
 8027668:	401c0000 	.word	0x401c0000
 802766c:	40140000 	.word	0x40140000
 8027670:	3fe00000 	.word	0x3fe00000
 8027674:	4631      	mov	r1, r6
 8027676:	4628      	mov	r0, r5
 8027678:	f7d8 ffd6 	bl	8000628 <__aeabi_dmul>
 802767c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8027680:	9415      	str	r4, [sp, #84]	@ 0x54
 8027682:	4656      	mov	r6, sl
 8027684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027688:	f7d9 fa7e 	bl	8000b88 <__aeabi_d2iz>
 802768c:	4605      	mov	r5, r0
 802768e:	f7d8 ff61 	bl	8000554 <__aeabi_i2d>
 8027692:	4602      	mov	r2, r0
 8027694:	460b      	mov	r3, r1
 8027696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802769a:	f7d8 fe0d 	bl	80002b8 <__aeabi_dsub>
 802769e:	3530      	adds	r5, #48	@ 0x30
 80276a0:	f806 5b01 	strb.w	r5, [r6], #1
 80276a4:	4602      	mov	r2, r0
 80276a6:	460b      	mov	r3, r1
 80276a8:	42a6      	cmp	r6, r4
 80276aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80276ae:	f04f 0200 	mov.w	r2, #0
 80276b2:	d124      	bne.n	80276fe <_dtoa_r+0x636>
 80276b4:	4bac      	ldr	r3, [pc, #688]	@ (8027968 <_dtoa_r+0x8a0>)
 80276b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80276ba:	f7d8 fdff 	bl	80002bc <__adddf3>
 80276be:	4602      	mov	r2, r0
 80276c0:	460b      	mov	r3, r1
 80276c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80276c6:	f7d9 fa3f 	bl	8000b48 <__aeabi_dcmpgt>
 80276ca:	2800      	cmp	r0, #0
 80276cc:	d145      	bne.n	802775a <_dtoa_r+0x692>
 80276ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80276d2:	49a5      	ldr	r1, [pc, #660]	@ (8027968 <_dtoa_r+0x8a0>)
 80276d4:	2000      	movs	r0, #0
 80276d6:	f7d8 fdef 	bl	80002b8 <__aeabi_dsub>
 80276da:	4602      	mov	r2, r0
 80276dc:	460b      	mov	r3, r1
 80276de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80276e2:	f7d9 fa13 	bl	8000b0c <__aeabi_dcmplt>
 80276e6:	2800      	cmp	r0, #0
 80276e8:	f43f aef4 	beq.w	80274d4 <_dtoa_r+0x40c>
 80276ec:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80276ee:	1e73      	subs	r3, r6, #1
 80276f0:	9315      	str	r3, [sp, #84]	@ 0x54
 80276f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80276f6:	2b30      	cmp	r3, #48	@ 0x30
 80276f8:	d0f8      	beq.n	80276ec <_dtoa_r+0x624>
 80276fa:	9f04      	ldr	r7, [sp, #16]
 80276fc:	e73d      	b.n	802757a <_dtoa_r+0x4b2>
 80276fe:	4b9b      	ldr	r3, [pc, #620]	@ (802796c <_dtoa_r+0x8a4>)
 8027700:	f7d8 ff92 	bl	8000628 <__aeabi_dmul>
 8027704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027708:	e7bc      	b.n	8027684 <_dtoa_r+0x5bc>
 802770a:	d10c      	bne.n	8027726 <_dtoa_r+0x65e>
 802770c:	4b98      	ldr	r3, [pc, #608]	@ (8027970 <_dtoa_r+0x8a8>)
 802770e:	2200      	movs	r2, #0
 8027710:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027714:	f7d8 ff88 	bl	8000628 <__aeabi_dmul>
 8027718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802771c:	f7d9 fa0a 	bl	8000b34 <__aeabi_dcmpge>
 8027720:	2800      	cmp	r0, #0
 8027722:	f000 8157 	beq.w	80279d4 <_dtoa_r+0x90c>
 8027726:	2400      	movs	r4, #0
 8027728:	4625      	mov	r5, r4
 802772a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802772c:	43db      	mvns	r3, r3
 802772e:	9304      	str	r3, [sp, #16]
 8027730:	4656      	mov	r6, sl
 8027732:	2700      	movs	r7, #0
 8027734:	4621      	mov	r1, r4
 8027736:	4658      	mov	r0, fp
 8027738:	f004 ff1b 	bl	802c572 <_Bfree>
 802773c:	2d00      	cmp	r5, #0
 802773e:	d0dc      	beq.n	80276fa <_dtoa_r+0x632>
 8027740:	b12f      	cbz	r7, 802774e <_dtoa_r+0x686>
 8027742:	42af      	cmp	r7, r5
 8027744:	d003      	beq.n	802774e <_dtoa_r+0x686>
 8027746:	4639      	mov	r1, r7
 8027748:	4658      	mov	r0, fp
 802774a:	f004 ff12 	bl	802c572 <_Bfree>
 802774e:	4629      	mov	r1, r5
 8027750:	4658      	mov	r0, fp
 8027752:	f004 ff0e 	bl	802c572 <_Bfree>
 8027756:	e7d0      	b.n	80276fa <_dtoa_r+0x632>
 8027758:	9704      	str	r7, [sp, #16]
 802775a:	4633      	mov	r3, r6
 802775c:	461e      	mov	r6, r3
 802775e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8027762:	2a39      	cmp	r2, #57	@ 0x39
 8027764:	d107      	bne.n	8027776 <_dtoa_r+0x6ae>
 8027766:	459a      	cmp	sl, r3
 8027768:	d1f8      	bne.n	802775c <_dtoa_r+0x694>
 802776a:	9a04      	ldr	r2, [sp, #16]
 802776c:	3201      	adds	r2, #1
 802776e:	9204      	str	r2, [sp, #16]
 8027770:	2230      	movs	r2, #48	@ 0x30
 8027772:	f88a 2000 	strb.w	r2, [sl]
 8027776:	781a      	ldrb	r2, [r3, #0]
 8027778:	3201      	adds	r2, #1
 802777a:	701a      	strb	r2, [r3, #0]
 802777c:	e7bd      	b.n	80276fa <_dtoa_r+0x632>
 802777e:	4b7b      	ldr	r3, [pc, #492]	@ (802796c <_dtoa_r+0x8a4>)
 8027780:	2200      	movs	r2, #0
 8027782:	f7d8 ff51 	bl	8000628 <__aeabi_dmul>
 8027786:	2200      	movs	r2, #0
 8027788:	2300      	movs	r3, #0
 802778a:	4604      	mov	r4, r0
 802778c:	460d      	mov	r5, r1
 802778e:	f7d9 f9b3 	bl	8000af8 <__aeabi_dcmpeq>
 8027792:	2800      	cmp	r0, #0
 8027794:	f43f aeba 	beq.w	802750c <_dtoa_r+0x444>
 8027798:	e6ef      	b.n	802757a <_dtoa_r+0x4b2>
 802779a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802779c:	2a00      	cmp	r2, #0
 802779e:	f000 80db 	beq.w	8027958 <_dtoa_r+0x890>
 80277a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80277a4:	2a01      	cmp	r2, #1
 80277a6:	f300 80bf 	bgt.w	8027928 <_dtoa_r+0x860>
 80277aa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80277ac:	2a00      	cmp	r2, #0
 80277ae:	f000 80b7 	beq.w	8027920 <_dtoa_r+0x858>
 80277b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80277b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80277b8:	4646      	mov	r6, r8
 80277ba:	9a08      	ldr	r2, [sp, #32]
 80277bc:	2101      	movs	r1, #1
 80277be:	441a      	add	r2, r3
 80277c0:	4658      	mov	r0, fp
 80277c2:	4498      	add	r8, r3
 80277c4:	9208      	str	r2, [sp, #32]
 80277c6:	f004 ffb9 	bl	802c73c <__i2b>
 80277ca:	4605      	mov	r5, r0
 80277cc:	b15e      	cbz	r6, 80277e6 <_dtoa_r+0x71e>
 80277ce:	9b08      	ldr	r3, [sp, #32]
 80277d0:	2b00      	cmp	r3, #0
 80277d2:	dd08      	ble.n	80277e6 <_dtoa_r+0x71e>
 80277d4:	42b3      	cmp	r3, r6
 80277d6:	9a08      	ldr	r2, [sp, #32]
 80277d8:	bfa8      	it	ge
 80277da:	4633      	movge	r3, r6
 80277dc:	eba8 0803 	sub.w	r8, r8, r3
 80277e0:	1af6      	subs	r6, r6, r3
 80277e2:	1ad3      	subs	r3, r2, r3
 80277e4:	9308      	str	r3, [sp, #32]
 80277e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80277e8:	b1f3      	cbz	r3, 8027828 <_dtoa_r+0x760>
 80277ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80277ec:	2b00      	cmp	r3, #0
 80277ee:	f000 80b7 	beq.w	8027960 <_dtoa_r+0x898>
 80277f2:	b18c      	cbz	r4, 8027818 <_dtoa_r+0x750>
 80277f4:	4629      	mov	r1, r5
 80277f6:	4622      	mov	r2, r4
 80277f8:	4658      	mov	r0, fp
 80277fa:	f005 f85f 	bl	802c8bc <__pow5mult>
 80277fe:	464a      	mov	r2, r9
 8027800:	4601      	mov	r1, r0
 8027802:	4605      	mov	r5, r0
 8027804:	4658      	mov	r0, fp
 8027806:	f004 ffaf 	bl	802c768 <__multiply>
 802780a:	4649      	mov	r1, r9
 802780c:	9004      	str	r0, [sp, #16]
 802780e:	4658      	mov	r0, fp
 8027810:	f004 feaf 	bl	802c572 <_Bfree>
 8027814:	9b04      	ldr	r3, [sp, #16]
 8027816:	4699      	mov	r9, r3
 8027818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802781a:	1b1a      	subs	r2, r3, r4
 802781c:	d004      	beq.n	8027828 <_dtoa_r+0x760>
 802781e:	4649      	mov	r1, r9
 8027820:	4658      	mov	r0, fp
 8027822:	f005 f84b 	bl	802c8bc <__pow5mult>
 8027826:	4681      	mov	r9, r0
 8027828:	2101      	movs	r1, #1
 802782a:	4658      	mov	r0, fp
 802782c:	f004 ff86 	bl	802c73c <__i2b>
 8027830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027832:	4604      	mov	r4, r0
 8027834:	2b00      	cmp	r3, #0
 8027836:	f000 81cc 	beq.w	8027bd2 <_dtoa_r+0xb0a>
 802783a:	461a      	mov	r2, r3
 802783c:	4601      	mov	r1, r0
 802783e:	4658      	mov	r0, fp
 8027840:	f005 f83c 	bl	802c8bc <__pow5mult>
 8027844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027846:	2b01      	cmp	r3, #1
 8027848:	4604      	mov	r4, r0
 802784a:	f300 8095 	bgt.w	8027978 <_dtoa_r+0x8b0>
 802784e:	9b02      	ldr	r3, [sp, #8]
 8027850:	2b00      	cmp	r3, #0
 8027852:	f040 8087 	bne.w	8027964 <_dtoa_r+0x89c>
 8027856:	9b03      	ldr	r3, [sp, #12]
 8027858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802785c:	2b00      	cmp	r3, #0
 802785e:	f040 8089 	bne.w	8027974 <_dtoa_r+0x8ac>
 8027862:	9b03      	ldr	r3, [sp, #12]
 8027864:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027868:	0d1b      	lsrs	r3, r3, #20
 802786a:	051b      	lsls	r3, r3, #20
 802786c:	b12b      	cbz	r3, 802787a <_dtoa_r+0x7b2>
 802786e:	9b08      	ldr	r3, [sp, #32]
 8027870:	3301      	adds	r3, #1
 8027872:	9308      	str	r3, [sp, #32]
 8027874:	f108 0801 	add.w	r8, r8, #1
 8027878:	2301      	movs	r3, #1
 802787a:	930a      	str	r3, [sp, #40]	@ 0x28
 802787c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802787e:	2b00      	cmp	r3, #0
 8027880:	f000 81ad 	beq.w	8027bde <_dtoa_r+0xb16>
 8027884:	6923      	ldr	r3, [r4, #16]
 8027886:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802788a:	6918      	ldr	r0, [r3, #16]
 802788c:	f004 ff0a 	bl	802c6a4 <__hi0bits>
 8027890:	f1c0 0020 	rsb	r0, r0, #32
 8027894:	9b08      	ldr	r3, [sp, #32]
 8027896:	4418      	add	r0, r3
 8027898:	f010 001f 	ands.w	r0, r0, #31
 802789c:	d077      	beq.n	802798e <_dtoa_r+0x8c6>
 802789e:	f1c0 0320 	rsb	r3, r0, #32
 80278a2:	2b04      	cmp	r3, #4
 80278a4:	dd6b      	ble.n	802797e <_dtoa_r+0x8b6>
 80278a6:	9b08      	ldr	r3, [sp, #32]
 80278a8:	f1c0 001c 	rsb	r0, r0, #28
 80278ac:	4403      	add	r3, r0
 80278ae:	4480      	add	r8, r0
 80278b0:	4406      	add	r6, r0
 80278b2:	9308      	str	r3, [sp, #32]
 80278b4:	f1b8 0f00 	cmp.w	r8, #0
 80278b8:	dd05      	ble.n	80278c6 <_dtoa_r+0x7fe>
 80278ba:	4649      	mov	r1, r9
 80278bc:	4642      	mov	r2, r8
 80278be:	4658      	mov	r0, fp
 80278c0:	f005 f83c 	bl	802c93c <__lshift>
 80278c4:	4681      	mov	r9, r0
 80278c6:	9b08      	ldr	r3, [sp, #32]
 80278c8:	2b00      	cmp	r3, #0
 80278ca:	dd05      	ble.n	80278d8 <_dtoa_r+0x810>
 80278cc:	4621      	mov	r1, r4
 80278ce:	461a      	mov	r2, r3
 80278d0:	4658      	mov	r0, fp
 80278d2:	f005 f833 	bl	802c93c <__lshift>
 80278d6:	4604      	mov	r4, r0
 80278d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80278da:	2b00      	cmp	r3, #0
 80278dc:	d059      	beq.n	8027992 <_dtoa_r+0x8ca>
 80278de:	4621      	mov	r1, r4
 80278e0:	4648      	mov	r0, r9
 80278e2:	f005 f897 	bl	802ca14 <__mcmp>
 80278e6:	2800      	cmp	r0, #0
 80278e8:	da53      	bge.n	8027992 <_dtoa_r+0x8ca>
 80278ea:	1e7b      	subs	r3, r7, #1
 80278ec:	9304      	str	r3, [sp, #16]
 80278ee:	4649      	mov	r1, r9
 80278f0:	2300      	movs	r3, #0
 80278f2:	220a      	movs	r2, #10
 80278f4:	4658      	mov	r0, fp
 80278f6:	f004 fe45 	bl	802c584 <__multadd>
 80278fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80278fc:	4681      	mov	r9, r0
 80278fe:	2b00      	cmp	r3, #0
 8027900:	f000 816f 	beq.w	8027be2 <_dtoa_r+0xb1a>
 8027904:	2300      	movs	r3, #0
 8027906:	4629      	mov	r1, r5
 8027908:	220a      	movs	r2, #10
 802790a:	4658      	mov	r0, fp
 802790c:	f004 fe3a 	bl	802c584 <__multadd>
 8027910:	9b00      	ldr	r3, [sp, #0]
 8027912:	2b00      	cmp	r3, #0
 8027914:	4605      	mov	r5, r0
 8027916:	dc67      	bgt.n	80279e8 <_dtoa_r+0x920>
 8027918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802791a:	2b02      	cmp	r3, #2
 802791c:	dc41      	bgt.n	80279a2 <_dtoa_r+0x8da>
 802791e:	e063      	b.n	80279e8 <_dtoa_r+0x920>
 8027920:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027922:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8027926:	e746      	b.n	80277b6 <_dtoa_r+0x6ee>
 8027928:	9b07      	ldr	r3, [sp, #28]
 802792a:	1e5c      	subs	r4, r3, #1
 802792c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802792e:	42a3      	cmp	r3, r4
 8027930:	bfbf      	itttt	lt
 8027932:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8027934:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8027936:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8027938:	1ae3      	sublt	r3, r4, r3
 802793a:	bfb4      	ite	lt
 802793c:	18d2      	addlt	r2, r2, r3
 802793e:	1b1c      	subge	r4, r3, r4
 8027940:	9b07      	ldr	r3, [sp, #28]
 8027942:	bfbc      	itt	lt
 8027944:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8027946:	2400      	movlt	r4, #0
 8027948:	2b00      	cmp	r3, #0
 802794a:	bfb5      	itete	lt
 802794c:	eba8 0603 	sublt.w	r6, r8, r3
 8027950:	9b07      	ldrge	r3, [sp, #28]
 8027952:	2300      	movlt	r3, #0
 8027954:	4646      	movge	r6, r8
 8027956:	e730      	b.n	80277ba <_dtoa_r+0x6f2>
 8027958:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802795a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802795c:	4646      	mov	r6, r8
 802795e:	e735      	b.n	80277cc <_dtoa_r+0x704>
 8027960:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027962:	e75c      	b.n	802781e <_dtoa_r+0x756>
 8027964:	2300      	movs	r3, #0
 8027966:	e788      	b.n	802787a <_dtoa_r+0x7b2>
 8027968:	3fe00000 	.word	0x3fe00000
 802796c:	40240000 	.word	0x40240000
 8027970:	40140000 	.word	0x40140000
 8027974:	9b02      	ldr	r3, [sp, #8]
 8027976:	e780      	b.n	802787a <_dtoa_r+0x7b2>
 8027978:	2300      	movs	r3, #0
 802797a:	930a      	str	r3, [sp, #40]	@ 0x28
 802797c:	e782      	b.n	8027884 <_dtoa_r+0x7bc>
 802797e:	d099      	beq.n	80278b4 <_dtoa_r+0x7ec>
 8027980:	9a08      	ldr	r2, [sp, #32]
 8027982:	331c      	adds	r3, #28
 8027984:	441a      	add	r2, r3
 8027986:	4498      	add	r8, r3
 8027988:	441e      	add	r6, r3
 802798a:	9208      	str	r2, [sp, #32]
 802798c:	e792      	b.n	80278b4 <_dtoa_r+0x7ec>
 802798e:	4603      	mov	r3, r0
 8027990:	e7f6      	b.n	8027980 <_dtoa_r+0x8b8>
 8027992:	9b07      	ldr	r3, [sp, #28]
 8027994:	9704      	str	r7, [sp, #16]
 8027996:	2b00      	cmp	r3, #0
 8027998:	dc20      	bgt.n	80279dc <_dtoa_r+0x914>
 802799a:	9300      	str	r3, [sp, #0]
 802799c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802799e:	2b02      	cmp	r3, #2
 80279a0:	dd1e      	ble.n	80279e0 <_dtoa_r+0x918>
 80279a2:	9b00      	ldr	r3, [sp, #0]
 80279a4:	2b00      	cmp	r3, #0
 80279a6:	f47f aec0 	bne.w	802772a <_dtoa_r+0x662>
 80279aa:	4621      	mov	r1, r4
 80279ac:	2205      	movs	r2, #5
 80279ae:	4658      	mov	r0, fp
 80279b0:	f004 fde8 	bl	802c584 <__multadd>
 80279b4:	4601      	mov	r1, r0
 80279b6:	4604      	mov	r4, r0
 80279b8:	4648      	mov	r0, r9
 80279ba:	f005 f82b 	bl	802ca14 <__mcmp>
 80279be:	2800      	cmp	r0, #0
 80279c0:	f77f aeb3 	ble.w	802772a <_dtoa_r+0x662>
 80279c4:	4656      	mov	r6, sl
 80279c6:	2331      	movs	r3, #49	@ 0x31
 80279c8:	f806 3b01 	strb.w	r3, [r6], #1
 80279cc:	9b04      	ldr	r3, [sp, #16]
 80279ce:	3301      	adds	r3, #1
 80279d0:	9304      	str	r3, [sp, #16]
 80279d2:	e6ae      	b.n	8027732 <_dtoa_r+0x66a>
 80279d4:	9c07      	ldr	r4, [sp, #28]
 80279d6:	9704      	str	r7, [sp, #16]
 80279d8:	4625      	mov	r5, r4
 80279da:	e7f3      	b.n	80279c4 <_dtoa_r+0x8fc>
 80279dc:	9b07      	ldr	r3, [sp, #28]
 80279de:	9300      	str	r3, [sp, #0]
 80279e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80279e2:	2b00      	cmp	r3, #0
 80279e4:	f000 8101 	beq.w	8027bea <_dtoa_r+0xb22>
 80279e8:	2e00      	cmp	r6, #0
 80279ea:	dd05      	ble.n	80279f8 <_dtoa_r+0x930>
 80279ec:	4629      	mov	r1, r5
 80279ee:	4632      	mov	r2, r6
 80279f0:	4658      	mov	r0, fp
 80279f2:	f004 ffa3 	bl	802c93c <__lshift>
 80279f6:	4605      	mov	r5, r0
 80279f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80279fa:	2b00      	cmp	r3, #0
 80279fc:	d059      	beq.n	8027ab2 <_dtoa_r+0x9ea>
 80279fe:	6869      	ldr	r1, [r5, #4]
 8027a00:	4658      	mov	r0, fp
 8027a02:	f004 fd91 	bl	802c528 <_Balloc>
 8027a06:	4606      	mov	r6, r0
 8027a08:	b920      	cbnz	r0, 8027a14 <_dtoa_r+0x94c>
 8027a0a:	4b83      	ldr	r3, [pc, #524]	@ (8027c18 <_dtoa_r+0xb50>)
 8027a0c:	4602      	mov	r2, r0
 8027a0e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8027a12:	e480      	b.n	8027316 <_dtoa_r+0x24e>
 8027a14:	692a      	ldr	r2, [r5, #16]
 8027a16:	3202      	adds	r2, #2
 8027a18:	0092      	lsls	r2, r2, #2
 8027a1a:	f105 010c 	add.w	r1, r5, #12
 8027a1e:	300c      	adds	r0, #12
 8027a20:	f7ff fa52 	bl	8026ec8 <memcpy>
 8027a24:	2201      	movs	r2, #1
 8027a26:	4631      	mov	r1, r6
 8027a28:	4658      	mov	r0, fp
 8027a2a:	f004 ff87 	bl	802c93c <__lshift>
 8027a2e:	f10a 0301 	add.w	r3, sl, #1
 8027a32:	9307      	str	r3, [sp, #28]
 8027a34:	9b00      	ldr	r3, [sp, #0]
 8027a36:	4453      	add	r3, sl
 8027a38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027a3a:	9b02      	ldr	r3, [sp, #8]
 8027a3c:	f003 0301 	and.w	r3, r3, #1
 8027a40:	462f      	mov	r7, r5
 8027a42:	930a      	str	r3, [sp, #40]	@ 0x28
 8027a44:	4605      	mov	r5, r0
 8027a46:	9b07      	ldr	r3, [sp, #28]
 8027a48:	4621      	mov	r1, r4
 8027a4a:	3b01      	subs	r3, #1
 8027a4c:	4648      	mov	r0, r9
 8027a4e:	9300      	str	r3, [sp, #0]
 8027a50:	f7ff faaf 	bl	8026fb2 <quorem>
 8027a54:	4639      	mov	r1, r7
 8027a56:	9002      	str	r0, [sp, #8]
 8027a58:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8027a5c:	4648      	mov	r0, r9
 8027a5e:	f004 ffd9 	bl	802ca14 <__mcmp>
 8027a62:	462a      	mov	r2, r5
 8027a64:	9008      	str	r0, [sp, #32]
 8027a66:	4621      	mov	r1, r4
 8027a68:	4658      	mov	r0, fp
 8027a6a:	f004 ffef 	bl	802ca4c <__mdiff>
 8027a6e:	68c2      	ldr	r2, [r0, #12]
 8027a70:	4606      	mov	r6, r0
 8027a72:	bb02      	cbnz	r2, 8027ab6 <_dtoa_r+0x9ee>
 8027a74:	4601      	mov	r1, r0
 8027a76:	4648      	mov	r0, r9
 8027a78:	f004 ffcc 	bl	802ca14 <__mcmp>
 8027a7c:	4602      	mov	r2, r0
 8027a7e:	4631      	mov	r1, r6
 8027a80:	4658      	mov	r0, fp
 8027a82:	920e      	str	r2, [sp, #56]	@ 0x38
 8027a84:	f004 fd75 	bl	802c572 <_Bfree>
 8027a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027a8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027a8c:	9e07      	ldr	r6, [sp, #28]
 8027a8e:	ea43 0102 	orr.w	r1, r3, r2
 8027a92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027a94:	4319      	orrs	r1, r3
 8027a96:	d110      	bne.n	8027aba <_dtoa_r+0x9f2>
 8027a98:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8027a9c:	d029      	beq.n	8027af2 <_dtoa_r+0xa2a>
 8027a9e:	9b08      	ldr	r3, [sp, #32]
 8027aa0:	2b00      	cmp	r3, #0
 8027aa2:	dd02      	ble.n	8027aaa <_dtoa_r+0x9e2>
 8027aa4:	9b02      	ldr	r3, [sp, #8]
 8027aa6:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8027aaa:	9b00      	ldr	r3, [sp, #0]
 8027aac:	f883 8000 	strb.w	r8, [r3]
 8027ab0:	e640      	b.n	8027734 <_dtoa_r+0x66c>
 8027ab2:	4628      	mov	r0, r5
 8027ab4:	e7bb      	b.n	8027a2e <_dtoa_r+0x966>
 8027ab6:	2201      	movs	r2, #1
 8027ab8:	e7e1      	b.n	8027a7e <_dtoa_r+0x9b6>
 8027aba:	9b08      	ldr	r3, [sp, #32]
 8027abc:	2b00      	cmp	r3, #0
 8027abe:	db04      	blt.n	8027aca <_dtoa_r+0xa02>
 8027ac0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027ac2:	430b      	orrs	r3, r1
 8027ac4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8027ac6:	430b      	orrs	r3, r1
 8027ac8:	d120      	bne.n	8027b0c <_dtoa_r+0xa44>
 8027aca:	2a00      	cmp	r2, #0
 8027acc:	dded      	ble.n	8027aaa <_dtoa_r+0x9e2>
 8027ace:	4649      	mov	r1, r9
 8027ad0:	2201      	movs	r2, #1
 8027ad2:	4658      	mov	r0, fp
 8027ad4:	f004 ff32 	bl	802c93c <__lshift>
 8027ad8:	4621      	mov	r1, r4
 8027ada:	4681      	mov	r9, r0
 8027adc:	f004 ff9a 	bl	802ca14 <__mcmp>
 8027ae0:	2800      	cmp	r0, #0
 8027ae2:	dc03      	bgt.n	8027aec <_dtoa_r+0xa24>
 8027ae4:	d1e1      	bne.n	8027aaa <_dtoa_r+0x9e2>
 8027ae6:	f018 0f01 	tst.w	r8, #1
 8027aea:	d0de      	beq.n	8027aaa <_dtoa_r+0x9e2>
 8027aec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8027af0:	d1d8      	bne.n	8027aa4 <_dtoa_r+0x9dc>
 8027af2:	9a00      	ldr	r2, [sp, #0]
 8027af4:	2339      	movs	r3, #57	@ 0x39
 8027af6:	7013      	strb	r3, [r2, #0]
 8027af8:	4633      	mov	r3, r6
 8027afa:	461e      	mov	r6, r3
 8027afc:	3b01      	subs	r3, #1
 8027afe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8027b02:	2a39      	cmp	r2, #57	@ 0x39
 8027b04:	d052      	beq.n	8027bac <_dtoa_r+0xae4>
 8027b06:	3201      	adds	r2, #1
 8027b08:	701a      	strb	r2, [r3, #0]
 8027b0a:	e613      	b.n	8027734 <_dtoa_r+0x66c>
 8027b0c:	2a00      	cmp	r2, #0
 8027b0e:	dd07      	ble.n	8027b20 <_dtoa_r+0xa58>
 8027b10:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8027b14:	d0ed      	beq.n	8027af2 <_dtoa_r+0xa2a>
 8027b16:	9a00      	ldr	r2, [sp, #0]
 8027b18:	f108 0301 	add.w	r3, r8, #1
 8027b1c:	7013      	strb	r3, [r2, #0]
 8027b1e:	e609      	b.n	8027734 <_dtoa_r+0x66c>
 8027b20:	9b07      	ldr	r3, [sp, #28]
 8027b22:	9a07      	ldr	r2, [sp, #28]
 8027b24:	f803 8c01 	strb.w	r8, [r3, #-1]
 8027b28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027b2a:	4293      	cmp	r3, r2
 8027b2c:	d028      	beq.n	8027b80 <_dtoa_r+0xab8>
 8027b2e:	4649      	mov	r1, r9
 8027b30:	2300      	movs	r3, #0
 8027b32:	220a      	movs	r2, #10
 8027b34:	4658      	mov	r0, fp
 8027b36:	f004 fd25 	bl	802c584 <__multadd>
 8027b3a:	42af      	cmp	r7, r5
 8027b3c:	4681      	mov	r9, r0
 8027b3e:	f04f 0300 	mov.w	r3, #0
 8027b42:	f04f 020a 	mov.w	r2, #10
 8027b46:	4639      	mov	r1, r7
 8027b48:	4658      	mov	r0, fp
 8027b4a:	d107      	bne.n	8027b5c <_dtoa_r+0xa94>
 8027b4c:	f004 fd1a 	bl	802c584 <__multadd>
 8027b50:	4607      	mov	r7, r0
 8027b52:	4605      	mov	r5, r0
 8027b54:	9b07      	ldr	r3, [sp, #28]
 8027b56:	3301      	adds	r3, #1
 8027b58:	9307      	str	r3, [sp, #28]
 8027b5a:	e774      	b.n	8027a46 <_dtoa_r+0x97e>
 8027b5c:	f004 fd12 	bl	802c584 <__multadd>
 8027b60:	4629      	mov	r1, r5
 8027b62:	4607      	mov	r7, r0
 8027b64:	2300      	movs	r3, #0
 8027b66:	220a      	movs	r2, #10
 8027b68:	4658      	mov	r0, fp
 8027b6a:	f004 fd0b 	bl	802c584 <__multadd>
 8027b6e:	4605      	mov	r5, r0
 8027b70:	e7f0      	b.n	8027b54 <_dtoa_r+0xa8c>
 8027b72:	9b00      	ldr	r3, [sp, #0]
 8027b74:	2b00      	cmp	r3, #0
 8027b76:	bfcc      	ite	gt
 8027b78:	461e      	movgt	r6, r3
 8027b7a:	2601      	movle	r6, #1
 8027b7c:	4456      	add	r6, sl
 8027b7e:	2700      	movs	r7, #0
 8027b80:	4649      	mov	r1, r9
 8027b82:	2201      	movs	r2, #1
 8027b84:	4658      	mov	r0, fp
 8027b86:	f004 fed9 	bl	802c93c <__lshift>
 8027b8a:	4621      	mov	r1, r4
 8027b8c:	4681      	mov	r9, r0
 8027b8e:	f004 ff41 	bl	802ca14 <__mcmp>
 8027b92:	2800      	cmp	r0, #0
 8027b94:	dcb0      	bgt.n	8027af8 <_dtoa_r+0xa30>
 8027b96:	d102      	bne.n	8027b9e <_dtoa_r+0xad6>
 8027b98:	f018 0f01 	tst.w	r8, #1
 8027b9c:	d1ac      	bne.n	8027af8 <_dtoa_r+0xa30>
 8027b9e:	4633      	mov	r3, r6
 8027ba0:	461e      	mov	r6, r3
 8027ba2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8027ba6:	2a30      	cmp	r2, #48	@ 0x30
 8027ba8:	d0fa      	beq.n	8027ba0 <_dtoa_r+0xad8>
 8027baa:	e5c3      	b.n	8027734 <_dtoa_r+0x66c>
 8027bac:	459a      	cmp	sl, r3
 8027bae:	d1a4      	bne.n	8027afa <_dtoa_r+0xa32>
 8027bb0:	9b04      	ldr	r3, [sp, #16]
 8027bb2:	3301      	adds	r3, #1
 8027bb4:	9304      	str	r3, [sp, #16]
 8027bb6:	2331      	movs	r3, #49	@ 0x31
 8027bb8:	f88a 3000 	strb.w	r3, [sl]
 8027bbc:	e5ba      	b.n	8027734 <_dtoa_r+0x66c>
 8027bbe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027bc0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8027c1c <_dtoa_r+0xb54>
 8027bc4:	2b00      	cmp	r3, #0
 8027bc6:	f43f aab6 	beq.w	8027136 <_dtoa_r+0x6e>
 8027bca:	f10a 0308 	add.w	r3, sl, #8
 8027bce:	f7ff bab0 	b.w	8027132 <_dtoa_r+0x6a>
 8027bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027bd4:	2b01      	cmp	r3, #1
 8027bd6:	f77f ae3a 	ble.w	802784e <_dtoa_r+0x786>
 8027bda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027bdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8027bde:	2001      	movs	r0, #1
 8027be0:	e658      	b.n	8027894 <_dtoa_r+0x7cc>
 8027be2:	9b00      	ldr	r3, [sp, #0]
 8027be4:	2b00      	cmp	r3, #0
 8027be6:	f77f aed9 	ble.w	802799c <_dtoa_r+0x8d4>
 8027bea:	4656      	mov	r6, sl
 8027bec:	4621      	mov	r1, r4
 8027bee:	4648      	mov	r0, r9
 8027bf0:	f7ff f9df 	bl	8026fb2 <quorem>
 8027bf4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8027bf8:	f806 8b01 	strb.w	r8, [r6], #1
 8027bfc:	9b00      	ldr	r3, [sp, #0]
 8027bfe:	eba6 020a 	sub.w	r2, r6, sl
 8027c02:	4293      	cmp	r3, r2
 8027c04:	ddb5      	ble.n	8027b72 <_dtoa_r+0xaaa>
 8027c06:	4649      	mov	r1, r9
 8027c08:	2300      	movs	r3, #0
 8027c0a:	220a      	movs	r2, #10
 8027c0c:	4658      	mov	r0, fp
 8027c0e:	f004 fcb9 	bl	802c584 <__multadd>
 8027c12:	4681      	mov	r9, r0
 8027c14:	e7ea      	b.n	8027bec <_dtoa_r+0xb24>
 8027c16:	bf00      	nop
 8027c18:	08034512 	.word	0x08034512
 8027c1c:	08034505 	.word	0x08034505

08027c20 <_malloc_trim_r>:
 8027c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027c24:	4606      	mov	r6, r0
 8027c26:	2008      	movs	r0, #8
 8027c28:	4689      	mov	r9, r1
 8027c2a:	f006 fb53 	bl	802e2d4 <sysconf>
 8027c2e:	4f24      	ldr	r7, [pc, #144]	@ (8027cc0 <_malloc_trim_r+0xa0>)
 8027c30:	4680      	mov	r8, r0
 8027c32:	4630      	mov	r0, r6
 8027c34:	f004 fc6c 	bl	802c510 <__malloc_lock>
 8027c38:	68bb      	ldr	r3, [r7, #8]
 8027c3a:	685d      	ldr	r5, [r3, #4]
 8027c3c:	f025 0503 	bic.w	r5, r5, #3
 8027c40:	f1a5 0411 	sub.w	r4, r5, #17
 8027c44:	eba4 0409 	sub.w	r4, r4, r9
 8027c48:	4444      	add	r4, r8
 8027c4a:	fbb4 f4f8 	udiv	r4, r4, r8
 8027c4e:	3c01      	subs	r4, #1
 8027c50:	fb08 f404 	mul.w	r4, r8, r4
 8027c54:	45a0      	cmp	r8, r4
 8027c56:	dd05      	ble.n	8027c64 <_malloc_trim_r+0x44>
 8027c58:	4630      	mov	r0, r6
 8027c5a:	f004 fc5f 	bl	802c51c <__malloc_unlock>
 8027c5e:	2000      	movs	r0, #0
 8027c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027c64:	2100      	movs	r1, #0
 8027c66:	4630      	mov	r0, r6
 8027c68:	f006 fb24 	bl	802e2b4 <_sbrk_r>
 8027c6c:	68bb      	ldr	r3, [r7, #8]
 8027c6e:	442b      	add	r3, r5
 8027c70:	4298      	cmp	r0, r3
 8027c72:	d1f1      	bne.n	8027c58 <_malloc_trim_r+0x38>
 8027c74:	4261      	negs	r1, r4
 8027c76:	4630      	mov	r0, r6
 8027c78:	f006 fb1c 	bl	802e2b4 <_sbrk_r>
 8027c7c:	3001      	adds	r0, #1
 8027c7e:	d110      	bne.n	8027ca2 <_malloc_trim_r+0x82>
 8027c80:	2100      	movs	r1, #0
 8027c82:	4630      	mov	r0, r6
 8027c84:	f006 fb16 	bl	802e2b4 <_sbrk_r>
 8027c88:	68ba      	ldr	r2, [r7, #8]
 8027c8a:	1a83      	subs	r3, r0, r2
 8027c8c:	2b0f      	cmp	r3, #15
 8027c8e:	dde3      	ble.n	8027c58 <_malloc_trim_r+0x38>
 8027c90:	490c      	ldr	r1, [pc, #48]	@ (8027cc4 <_malloc_trim_r+0xa4>)
 8027c92:	6809      	ldr	r1, [r1, #0]
 8027c94:	1a40      	subs	r0, r0, r1
 8027c96:	490c      	ldr	r1, [pc, #48]	@ (8027cc8 <_malloc_trim_r+0xa8>)
 8027c98:	f043 0301 	orr.w	r3, r3, #1
 8027c9c:	6008      	str	r0, [r1, #0]
 8027c9e:	6053      	str	r3, [r2, #4]
 8027ca0:	e7da      	b.n	8027c58 <_malloc_trim_r+0x38>
 8027ca2:	68bb      	ldr	r3, [r7, #8]
 8027ca4:	4a08      	ldr	r2, [pc, #32]	@ (8027cc8 <_malloc_trim_r+0xa8>)
 8027ca6:	1b2d      	subs	r5, r5, r4
 8027ca8:	f045 0501 	orr.w	r5, r5, #1
 8027cac:	605d      	str	r5, [r3, #4]
 8027cae:	6813      	ldr	r3, [r2, #0]
 8027cb0:	4630      	mov	r0, r6
 8027cb2:	1b1b      	subs	r3, r3, r4
 8027cb4:	6013      	str	r3, [r2, #0]
 8027cb6:	f004 fc31 	bl	802c51c <__malloc_unlock>
 8027cba:	2001      	movs	r0, #1
 8027cbc:	e7d0      	b.n	8027c60 <_malloc_trim_r+0x40>
 8027cbe:	bf00      	nop
 8027cc0:	20000564 	.word	0x20000564
 8027cc4:	2000055c 	.word	0x2000055c
 8027cc8:	200182d0 	.word	0x200182d0

08027ccc <_free_r>:
 8027ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027cce:	4604      	mov	r4, r0
 8027cd0:	460f      	mov	r7, r1
 8027cd2:	2900      	cmp	r1, #0
 8027cd4:	f000 80b1 	beq.w	8027e3a <_free_r+0x16e>
 8027cd8:	f004 fc1a 	bl	802c510 <__malloc_lock>
 8027cdc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8027ce0:	4d56      	ldr	r5, [pc, #344]	@ (8027e3c <_free_r+0x170>)
 8027ce2:	f022 0001 	bic.w	r0, r2, #1
 8027ce6:	f1a7 0308 	sub.w	r3, r7, #8
 8027cea:	eb03 0c00 	add.w	ip, r3, r0
 8027cee:	68a9      	ldr	r1, [r5, #8]
 8027cf0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8027cf4:	4561      	cmp	r1, ip
 8027cf6:	f026 0603 	bic.w	r6, r6, #3
 8027cfa:	f002 0201 	and.w	r2, r2, #1
 8027cfe:	d11b      	bne.n	8027d38 <_free_r+0x6c>
 8027d00:	4406      	add	r6, r0
 8027d02:	b93a      	cbnz	r2, 8027d14 <_free_r+0x48>
 8027d04:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8027d08:	1a9b      	subs	r3, r3, r2
 8027d0a:	4416      	add	r6, r2
 8027d0c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8027d10:	60ca      	str	r2, [r1, #12]
 8027d12:	6091      	str	r1, [r2, #8]
 8027d14:	f046 0201 	orr.w	r2, r6, #1
 8027d18:	605a      	str	r2, [r3, #4]
 8027d1a:	60ab      	str	r3, [r5, #8]
 8027d1c:	4b48      	ldr	r3, [pc, #288]	@ (8027e40 <_free_r+0x174>)
 8027d1e:	681b      	ldr	r3, [r3, #0]
 8027d20:	42b3      	cmp	r3, r6
 8027d22:	d804      	bhi.n	8027d2e <_free_r+0x62>
 8027d24:	4b47      	ldr	r3, [pc, #284]	@ (8027e44 <_free_r+0x178>)
 8027d26:	4620      	mov	r0, r4
 8027d28:	6819      	ldr	r1, [r3, #0]
 8027d2a:	f7ff ff79 	bl	8027c20 <_malloc_trim_r>
 8027d2e:	4620      	mov	r0, r4
 8027d30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8027d34:	f004 bbf2 	b.w	802c51c <__malloc_unlock>
 8027d38:	f8cc 6004 	str.w	r6, [ip, #4]
 8027d3c:	2a00      	cmp	r2, #0
 8027d3e:	d138      	bne.n	8027db2 <_free_r+0xe6>
 8027d40:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8027d44:	1a5b      	subs	r3, r3, r1
 8027d46:	4408      	add	r0, r1
 8027d48:	6899      	ldr	r1, [r3, #8]
 8027d4a:	f105 0708 	add.w	r7, r5, #8
 8027d4e:	42b9      	cmp	r1, r7
 8027d50:	d031      	beq.n	8027db6 <_free_r+0xea>
 8027d52:	68df      	ldr	r7, [r3, #12]
 8027d54:	60cf      	str	r7, [r1, #12]
 8027d56:	60b9      	str	r1, [r7, #8]
 8027d58:	eb0c 0106 	add.w	r1, ip, r6
 8027d5c:	6849      	ldr	r1, [r1, #4]
 8027d5e:	07c9      	lsls	r1, r1, #31
 8027d60:	d40b      	bmi.n	8027d7a <_free_r+0xae>
 8027d62:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8027d66:	4430      	add	r0, r6
 8027d68:	bb3a      	cbnz	r2, 8027dba <_free_r+0xee>
 8027d6a:	4e37      	ldr	r6, [pc, #220]	@ (8027e48 <_free_r+0x17c>)
 8027d6c:	42b1      	cmp	r1, r6
 8027d6e:	d124      	bne.n	8027dba <_free_r+0xee>
 8027d70:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8027d74:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8027d78:	2201      	movs	r2, #1
 8027d7a:	f040 0101 	orr.w	r1, r0, #1
 8027d7e:	6059      	str	r1, [r3, #4]
 8027d80:	5018      	str	r0, [r3, r0]
 8027d82:	2a00      	cmp	r2, #0
 8027d84:	d1d3      	bne.n	8027d2e <_free_r+0x62>
 8027d86:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8027d8a:	d21b      	bcs.n	8027dc4 <_free_r+0xf8>
 8027d8c:	08c2      	lsrs	r2, r0, #3
 8027d8e:	2101      	movs	r1, #1
 8027d90:	0940      	lsrs	r0, r0, #5
 8027d92:	4081      	lsls	r1, r0
 8027d94:	6868      	ldr	r0, [r5, #4]
 8027d96:	3201      	adds	r2, #1
 8027d98:	4301      	orrs	r1, r0
 8027d9a:	6069      	str	r1, [r5, #4]
 8027d9c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8027da0:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8027da4:	3908      	subs	r1, #8
 8027da6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8027daa:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8027dae:	60c3      	str	r3, [r0, #12]
 8027db0:	e7bd      	b.n	8027d2e <_free_r+0x62>
 8027db2:	2200      	movs	r2, #0
 8027db4:	e7d0      	b.n	8027d58 <_free_r+0x8c>
 8027db6:	2201      	movs	r2, #1
 8027db8:	e7ce      	b.n	8027d58 <_free_r+0x8c>
 8027dba:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8027dbe:	60ce      	str	r6, [r1, #12]
 8027dc0:	60b1      	str	r1, [r6, #8]
 8027dc2:	e7da      	b.n	8027d7a <_free_r+0xae>
 8027dc4:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8027dc8:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8027dcc:	d214      	bcs.n	8027df8 <_free_r+0x12c>
 8027dce:	0982      	lsrs	r2, r0, #6
 8027dd0:	3238      	adds	r2, #56	@ 0x38
 8027dd2:	1c51      	adds	r1, r2, #1
 8027dd4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8027dd8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8027ddc:	428e      	cmp	r6, r1
 8027dde:	d125      	bne.n	8027e2c <_free_r+0x160>
 8027de0:	2001      	movs	r0, #1
 8027de2:	1092      	asrs	r2, r2, #2
 8027de4:	fa00 f202 	lsl.w	r2, r0, r2
 8027de8:	6868      	ldr	r0, [r5, #4]
 8027dea:	4302      	orrs	r2, r0
 8027dec:	606a      	str	r2, [r5, #4]
 8027dee:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8027df2:	60b3      	str	r3, [r6, #8]
 8027df4:	60cb      	str	r3, [r1, #12]
 8027df6:	e79a      	b.n	8027d2e <_free_r+0x62>
 8027df8:	2a14      	cmp	r2, #20
 8027dfa:	d801      	bhi.n	8027e00 <_free_r+0x134>
 8027dfc:	325b      	adds	r2, #91	@ 0x5b
 8027dfe:	e7e8      	b.n	8027dd2 <_free_r+0x106>
 8027e00:	2a54      	cmp	r2, #84	@ 0x54
 8027e02:	d802      	bhi.n	8027e0a <_free_r+0x13e>
 8027e04:	0b02      	lsrs	r2, r0, #12
 8027e06:	326e      	adds	r2, #110	@ 0x6e
 8027e08:	e7e3      	b.n	8027dd2 <_free_r+0x106>
 8027e0a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8027e0e:	d802      	bhi.n	8027e16 <_free_r+0x14a>
 8027e10:	0bc2      	lsrs	r2, r0, #15
 8027e12:	3277      	adds	r2, #119	@ 0x77
 8027e14:	e7dd      	b.n	8027dd2 <_free_r+0x106>
 8027e16:	f240 5154 	movw	r1, #1364	@ 0x554
 8027e1a:	428a      	cmp	r2, r1
 8027e1c:	bf9a      	itte	ls
 8027e1e:	0c82      	lsrls	r2, r0, #18
 8027e20:	327c      	addls	r2, #124	@ 0x7c
 8027e22:	227e      	movhi	r2, #126	@ 0x7e
 8027e24:	e7d5      	b.n	8027dd2 <_free_r+0x106>
 8027e26:	6889      	ldr	r1, [r1, #8]
 8027e28:	428e      	cmp	r6, r1
 8027e2a:	d004      	beq.n	8027e36 <_free_r+0x16a>
 8027e2c:	684a      	ldr	r2, [r1, #4]
 8027e2e:	f022 0203 	bic.w	r2, r2, #3
 8027e32:	4282      	cmp	r2, r0
 8027e34:	d8f7      	bhi.n	8027e26 <_free_r+0x15a>
 8027e36:	68ce      	ldr	r6, [r1, #12]
 8027e38:	e7d9      	b.n	8027dee <_free_r+0x122>
 8027e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027e3c:	20000564 	.word	0x20000564
 8027e40:	20000560 	.word	0x20000560
 8027e44:	20018300 	.word	0x20018300
 8027e48:	2000056c 	.word	0x2000056c

08027e4c <_findenv_r>:
 8027e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e50:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8027ec0 <_findenv_r+0x74>
 8027e54:	4606      	mov	r6, r0
 8027e56:	4689      	mov	r9, r1
 8027e58:	4617      	mov	r7, r2
 8027e5a:	f006 fc31 	bl	802e6c0 <__env_lock>
 8027e5e:	f8da 4000 	ldr.w	r4, [sl]
 8027e62:	b134      	cbz	r4, 8027e72 <_findenv_r+0x26>
 8027e64:	464b      	mov	r3, r9
 8027e66:	4698      	mov	r8, r3
 8027e68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027e6c:	b13a      	cbz	r2, 8027e7e <_findenv_r+0x32>
 8027e6e:	2a3d      	cmp	r2, #61	@ 0x3d
 8027e70:	d1f9      	bne.n	8027e66 <_findenv_r+0x1a>
 8027e72:	4630      	mov	r0, r6
 8027e74:	f006 fc2a 	bl	802e6cc <__env_unlock>
 8027e78:	2000      	movs	r0, #0
 8027e7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027e7e:	eba8 0809 	sub.w	r8, r8, r9
 8027e82:	46a3      	mov	fp, r4
 8027e84:	f854 0b04 	ldr.w	r0, [r4], #4
 8027e88:	2800      	cmp	r0, #0
 8027e8a:	d0f2      	beq.n	8027e72 <_findenv_r+0x26>
 8027e8c:	4642      	mov	r2, r8
 8027e8e:	4649      	mov	r1, r9
 8027e90:	f7fd fe13 	bl	8025aba <strncmp>
 8027e94:	2800      	cmp	r0, #0
 8027e96:	d1f4      	bne.n	8027e82 <_findenv_r+0x36>
 8027e98:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8027e9c:	eb03 0508 	add.w	r5, r3, r8
 8027ea0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8027ea4:	2b3d      	cmp	r3, #61	@ 0x3d
 8027ea6:	d1ec      	bne.n	8027e82 <_findenv_r+0x36>
 8027ea8:	f8da 3000 	ldr.w	r3, [sl]
 8027eac:	ebab 0303 	sub.w	r3, fp, r3
 8027eb0:	109b      	asrs	r3, r3, #2
 8027eb2:	4630      	mov	r0, r6
 8027eb4:	603b      	str	r3, [r7, #0]
 8027eb6:	f006 fc09 	bl	802e6cc <__env_unlock>
 8027eba:	1c68      	adds	r0, r5, #1
 8027ebc:	e7dd      	b.n	8027e7a <_findenv_r+0x2e>
 8027ebe:	bf00      	nop
 8027ec0:	20000004 	.word	0x20000004

08027ec4 <_getenv_r>:
 8027ec4:	b507      	push	{r0, r1, r2, lr}
 8027ec6:	aa01      	add	r2, sp, #4
 8027ec8:	f7ff ffc0 	bl	8027e4c <_findenv_r>
 8027ecc:	b003      	add	sp, #12
 8027ece:	f85d fb04 	ldr.w	pc, [sp], #4

08027ed2 <labs>:
 8027ed2:	2800      	cmp	r0, #0
 8027ed4:	bfb8      	it	lt
 8027ed6:	4240      	neglt	r0, r0
 8027ed8:	4770      	bx	lr
	...

08027edc <malloc>:
 8027edc:	4b02      	ldr	r3, [pc, #8]	@ (8027ee8 <malloc+0xc>)
 8027ede:	4601      	mov	r1, r0
 8027ee0:	6818      	ldr	r0, [r3, #0]
 8027ee2:	f000 b80b 	b.w	8027efc <_malloc_r>
 8027ee6:	bf00      	nop
 8027ee8:	20000430 	.word	0x20000430

08027eec <free>:
 8027eec:	4b02      	ldr	r3, [pc, #8]	@ (8027ef8 <free+0xc>)
 8027eee:	4601      	mov	r1, r0
 8027ef0:	6818      	ldr	r0, [r3, #0]
 8027ef2:	f7ff beeb 	b.w	8027ccc <_free_r>
 8027ef6:	bf00      	nop
 8027ef8:	20000430 	.word	0x20000430

08027efc <_malloc_r>:
 8027efc:	f101 030b 	add.w	r3, r1, #11
 8027f00:	2b16      	cmp	r3, #22
 8027f02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f06:	4605      	mov	r5, r0
 8027f08:	d906      	bls.n	8027f18 <_malloc_r+0x1c>
 8027f0a:	f033 0707 	bics.w	r7, r3, #7
 8027f0e:	d504      	bpl.n	8027f1a <_malloc_r+0x1e>
 8027f10:	230c      	movs	r3, #12
 8027f12:	602b      	str	r3, [r5, #0]
 8027f14:	2400      	movs	r4, #0
 8027f16:	e1a3      	b.n	8028260 <_malloc_r+0x364>
 8027f18:	2710      	movs	r7, #16
 8027f1a:	42b9      	cmp	r1, r7
 8027f1c:	d8f8      	bhi.n	8027f10 <_malloc_r+0x14>
 8027f1e:	4628      	mov	r0, r5
 8027f20:	f004 faf6 	bl	802c510 <__malloc_lock>
 8027f24:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8027f28:	4eaf      	ldr	r6, [pc, #700]	@ (80281e8 <_malloc_r+0x2ec>)
 8027f2a:	d237      	bcs.n	8027f9c <_malloc_r+0xa0>
 8027f2c:	f107 0208 	add.w	r2, r7, #8
 8027f30:	4432      	add	r2, r6
 8027f32:	f1a2 0108 	sub.w	r1, r2, #8
 8027f36:	6854      	ldr	r4, [r2, #4]
 8027f38:	428c      	cmp	r4, r1
 8027f3a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8027f3e:	d102      	bne.n	8027f46 <_malloc_r+0x4a>
 8027f40:	68d4      	ldr	r4, [r2, #12]
 8027f42:	42a2      	cmp	r2, r4
 8027f44:	d010      	beq.n	8027f68 <_malloc_r+0x6c>
 8027f46:	6863      	ldr	r3, [r4, #4]
 8027f48:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8027f4c:	f023 0303 	bic.w	r3, r3, #3
 8027f50:	60ca      	str	r2, [r1, #12]
 8027f52:	4423      	add	r3, r4
 8027f54:	6091      	str	r1, [r2, #8]
 8027f56:	685a      	ldr	r2, [r3, #4]
 8027f58:	f042 0201 	orr.w	r2, r2, #1
 8027f5c:	605a      	str	r2, [r3, #4]
 8027f5e:	4628      	mov	r0, r5
 8027f60:	f004 fadc 	bl	802c51c <__malloc_unlock>
 8027f64:	3408      	adds	r4, #8
 8027f66:	e17b      	b.n	8028260 <_malloc_r+0x364>
 8027f68:	3302      	adds	r3, #2
 8027f6a:	6934      	ldr	r4, [r6, #16]
 8027f6c:	499f      	ldr	r1, [pc, #636]	@ (80281ec <_malloc_r+0x2f0>)
 8027f6e:	428c      	cmp	r4, r1
 8027f70:	d077      	beq.n	8028062 <_malloc_r+0x166>
 8027f72:	6862      	ldr	r2, [r4, #4]
 8027f74:	f022 0c03 	bic.w	ip, r2, #3
 8027f78:	ebac 0007 	sub.w	r0, ip, r7
 8027f7c:	280f      	cmp	r0, #15
 8027f7e:	dd48      	ble.n	8028012 <_malloc_r+0x116>
 8027f80:	19e2      	adds	r2, r4, r7
 8027f82:	f040 0301 	orr.w	r3, r0, #1
 8027f86:	f047 0701 	orr.w	r7, r7, #1
 8027f8a:	6067      	str	r7, [r4, #4]
 8027f8c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8027f90:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8027f94:	6053      	str	r3, [r2, #4]
 8027f96:	f844 000c 	str.w	r0, [r4, ip]
 8027f9a:	e7e0      	b.n	8027f5e <_malloc_r+0x62>
 8027f9c:	0a7b      	lsrs	r3, r7, #9
 8027f9e:	d02a      	beq.n	8027ff6 <_malloc_r+0xfa>
 8027fa0:	2b04      	cmp	r3, #4
 8027fa2:	d812      	bhi.n	8027fca <_malloc_r+0xce>
 8027fa4:	09bb      	lsrs	r3, r7, #6
 8027fa6:	3338      	adds	r3, #56	@ 0x38
 8027fa8:	1c5a      	adds	r2, r3, #1
 8027faa:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8027fae:	f1a2 0c08 	sub.w	ip, r2, #8
 8027fb2:	6854      	ldr	r4, [r2, #4]
 8027fb4:	4564      	cmp	r4, ip
 8027fb6:	d006      	beq.n	8027fc6 <_malloc_r+0xca>
 8027fb8:	6862      	ldr	r2, [r4, #4]
 8027fba:	f022 0203 	bic.w	r2, r2, #3
 8027fbe:	1bd0      	subs	r0, r2, r7
 8027fc0:	280f      	cmp	r0, #15
 8027fc2:	dd1c      	ble.n	8027ffe <_malloc_r+0x102>
 8027fc4:	3b01      	subs	r3, #1
 8027fc6:	3301      	adds	r3, #1
 8027fc8:	e7cf      	b.n	8027f6a <_malloc_r+0x6e>
 8027fca:	2b14      	cmp	r3, #20
 8027fcc:	d801      	bhi.n	8027fd2 <_malloc_r+0xd6>
 8027fce:	335b      	adds	r3, #91	@ 0x5b
 8027fd0:	e7ea      	b.n	8027fa8 <_malloc_r+0xac>
 8027fd2:	2b54      	cmp	r3, #84	@ 0x54
 8027fd4:	d802      	bhi.n	8027fdc <_malloc_r+0xe0>
 8027fd6:	0b3b      	lsrs	r3, r7, #12
 8027fd8:	336e      	adds	r3, #110	@ 0x6e
 8027fda:	e7e5      	b.n	8027fa8 <_malloc_r+0xac>
 8027fdc:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8027fe0:	d802      	bhi.n	8027fe8 <_malloc_r+0xec>
 8027fe2:	0bfb      	lsrs	r3, r7, #15
 8027fe4:	3377      	adds	r3, #119	@ 0x77
 8027fe6:	e7df      	b.n	8027fa8 <_malloc_r+0xac>
 8027fe8:	f240 5254 	movw	r2, #1364	@ 0x554
 8027fec:	4293      	cmp	r3, r2
 8027fee:	d804      	bhi.n	8027ffa <_malloc_r+0xfe>
 8027ff0:	0cbb      	lsrs	r3, r7, #18
 8027ff2:	337c      	adds	r3, #124	@ 0x7c
 8027ff4:	e7d8      	b.n	8027fa8 <_malloc_r+0xac>
 8027ff6:	233f      	movs	r3, #63	@ 0x3f
 8027ff8:	e7d6      	b.n	8027fa8 <_malloc_r+0xac>
 8027ffa:	237e      	movs	r3, #126	@ 0x7e
 8027ffc:	e7d4      	b.n	8027fa8 <_malloc_r+0xac>
 8027ffe:	2800      	cmp	r0, #0
 8028000:	68e1      	ldr	r1, [r4, #12]
 8028002:	db04      	blt.n	802800e <_malloc_r+0x112>
 8028004:	68a3      	ldr	r3, [r4, #8]
 8028006:	60d9      	str	r1, [r3, #12]
 8028008:	608b      	str	r3, [r1, #8]
 802800a:	18a3      	adds	r3, r4, r2
 802800c:	e7a3      	b.n	8027f56 <_malloc_r+0x5a>
 802800e:	460c      	mov	r4, r1
 8028010:	e7d0      	b.n	8027fb4 <_malloc_r+0xb8>
 8028012:	2800      	cmp	r0, #0
 8028014:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8028018:	db07      	blt.n	802802a <_malloc_r+0x12e>
 802801a:	44a4      	add	ip, r4
 802801c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028020:	f043 0301 	orr.w	r3, r3, #1
 8028024:	f8cc 3004 	str.w	r3, [ip, #4]
 8028028:	e799      	b.n	8027f5e <_malloc_r+0x62>
 802802a:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802802e:	6870      	ldr	r0, [r6, #4]
 8028030:	f080 8095 	bcs.w	802815e <_malloc_r+0x262>
 8028034:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8028038:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802803c:	f04f 0c01 	mov.w	ip, #1
 8028040:	3201      	adds	r2, #1
 8028042:	fa0c fc0e 	lsl.w	ip, ip, lr
 8028046:	ea4c 0000 	orr.w	r0, ip, r0
 802804a:	6070      	str	r0, [r6, #4]
 802804c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8028050:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8028054:	3808      	subs	r0, #8
 8028056:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802805a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802805e:	f8cc 400c 	str.w	r4, [ip, #12]
 8028062:	1098      	asrs	r0, r3, #2
 8028064:	2201      	movs	r2, #1
 8028066:	4082      	lsls	r2, r0
 8028068:	6870      	ldr	r0, [r6, #4]
 802806a:	4290      	cmp	r0, r2
 802806c:	d326      	bcc.n	80280bc <_malloc_r+0x1c0>
 802806e:	4210      	tst	r0, r2
 8028070:	d106      	bne.n	8028080 <_malloc_r+0x184>
 8028072:	f023 0303 	bic.w	r3, r3, #3
 8028076:	0052      	lsls	r2, r2, #1
 8028078:	4210      	tst	r0, r2
 802807a:	f103 0304 	add.w	r3, r3, #4
 802807e:	d0fa      	beq.n	8028076 <_malloc_r+0x17a>
 8028080:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8028084:	46c1      	mov	r9, r8
 8028086:	469e      	mov	lr, r3
 8028088:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802808c:	454c      	cmp	r4, r9
 802808e:	f040 80b9 	bne.w	8028204 <_malloc_r+0x308>
 8028092:	f10e 0e01 	add.w	lr, lr, #1
 8028096:	f01e 0f03 	tst.w	lr, #3
 802809a:	f109 0908 	add.w	r9, r9, #8
 802809e:	d1f3      	bne.n	8028088 <_malloc_r+0x18c>
 80280a0:	0798      	lsls	r0, r3, #30
 80280a2:	f040 80e3 	bne.w	802826c <_malloc_r+0x370>
 80280a6:	6873      	ldr	r3, [r6, #4]
 80280a8:	ea23 0302 	bic.w	r3, r3, r2
 80280ac:	6073      	str	r3, [r6, #4]
 80280ae:	6870      	ldr	r0, [r6, #4]
 80280b0:	0052      	lsls	r2, r2, #1
 80280b2:	4290      	cmp	r0, r2
 80280b4:	d302      	bcc.n	80280bc <_malloc_r+0x1c0>
 80280b6:	2a00      	cmp	r2, #0
 80280b8:	f040 80e5 	bne.w	8028286 <_malloc_r+0x38a>
 80280bc:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80280c0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80280c4:	f023 0903 	bic.w	r9, r3, #3
 80280c8:	45b9      	cmp	r9, r7
 80280ca:	d304      	bcc.n	80280d6 <_malloc_r+0x1da>
 80280cc:	eba9 0207 	sub.w	r2, r9, r7
 80280d0:	2a0f      	cmp	r2, #15
 80280d2:	f300 8141 	bgt.w	8028358 <_malloc_r+0x45c>
 80280d6:	4b46      	ldr	r3, [pc, #280]	@ (80281f0 <_malloc_r+0x2f4>)
 80280d8:	6819      	ldr	r1, [r3, #0]
 80280da:	3110      	adds	r1, #16
 80280dc:	4439      	add	r1, r7
 80280de:	2008      	movs	r0, #8
 80280e0:	9101      	str	r1, [sp, #4]
 80280e2:	f006 f8f7 	bl	802e2d4 <sysconf>
 80280e6:	4a43      	ldr	r2, [pc, #268]	@ (80281f4 <_malloc_r+0x2f8>)
 80280e8:	9901      	ldr	r1, [sp, #4]
 80280ea:	6813      	ldr	r3, [r2, #0]
 80280ec:	3301      	adds	r3, #1
 80280ee:	bf1f      	itttt	ne
 80280f0:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 80280f4:	1809      	addne	r1, r1, r0
 80280f6:	4243      	negne	r3, r0
 80280f8:	4019      	andne	r1, r3
 80280fa:	4680      	mov	r8, r0
 80280fc:	4628      	mov	r0, r5
 80280fe:	9101      	str	r1, [sp, #4]
 8028100:	f006 f8d8 	bl	802e2b4 <_sbrk_r>
 8028104:	1c42      	adds	r2, r0, #1
 8028106:	eb0a 0b09 	add.w	fp, sl, r9
 802810a:	4604      	mov	r4, r0
 802810c:	f000 80f7 	beq.w	80282fe <_malloc_r+0x402>
 8028110:	4583      	cmp	fp, r0
 8028112:	9901      	ldr	r1, [sp, #4]
 8028114:	4a37      	ldr	r2, [pc, #220]	@ (80281f4 <_malloc_r+0x2f8>)
 8028116:	d902      	bls.n	802811e <_malloc_r+0x222>
 8028118:	45b2      	cmp	sl, r6
 802811a:	f040 80f0 	bne.w	80282fe <_malloc_r+0x402>
 802811e:	4b36      	ldr	r3, [pc, #216]	@ (80281f8 <_malloc_r+0x2fc>)
 8028120:	6818      	ldr	r0, [r3, #0]
 8028122:	45a3      	cmp	fp, r4
 8028124:	eb00 0e01 	add.w	lr, r0, r1
 8028128:	f8c3 e000 	str.w	lr, [r3]
 802812c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8028130:	f040 80ab 	bne.w	802828a <_malloc_r+0x38e>
 8028134:	ea1b 0f0c 	tst.w	fp, ip
 8028138:	f040 80a7 	bne.w	802828a <_malloc_r+0x38e>
 802813c:	68b2      	ldr	r2, [r6, #8]
 802813e:	4449      	add	r1, r9
 8028140:	f041 0101 	orr.w	r1, r1, #1
 8028144:	6051      	str	r1, [r2, #4]
 8028146:	4a2d      	ldr	r2, [pc, #180]	@ (80281fc <_malloc_r+0x300>)
 8028148:	681b      	ldr	r3, [r3, #0]
 802814a:	6811      	ldr	r1, [r2, #0]
 802814c:	428b      	cmp	r3, r1
 802814e:	bf88      	it	hi
 8028150:	6013      	strhi	r3, [r2, #0]
 8028152:	4a2b      	ldr	r2, [pc, #172]	@ (8028200 <_malloc_r+0x304>)
 8028154:	6811      	ldr	r1, [r2, #0]
 8028156:	428b      	cmp	r3, r1
 8028158:	bf88      	it	hi
 802815a:	6013      	strhi	r3, [r2, #0]
 802815c:	e0cf      	b.n	80282fe <_malloc_r+0x402>
 802815e:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 8028162:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8028166:	d218      	bcs.n	802819a <_malloc_r+0x29e>
 8028168:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802816c:	3238      	adds	r2, #56	@ 0x38
 802816e:	f102 0e01 	add.w	lr, r2, #1
 8028172:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8028176:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802817a:	45f0      	cmp	r8, lr
 802817c:	d12b      	bne.n	80281d6 <_malloc_r+0x2da>
 802817e:	1092      	asrs	r2, r2, #2
 8028180:	f04f 0c01 	mov.w	ip, #1
 8028184:	fa0c f202 	lsl.w	r2, ip, r2
 8028188:	4302      	orrs	r2, r0
 802818a:	6072      	str	r2, [r6, #4]
 802818c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8028190:	f8c8 4008 	str.w	r4, [r8, #8]
 8028194:	f8ce 400c 	str.w	r4, [lr, #12]
 8028198:	e763      	b.n	8028062 <_malloc_r+0x166>
 802819a:	2a14      	cmp	r2, #20
 802819c:	d801      	bhi.n	80281a2 <_malloc_r+0x2a6>
 802819e:	325b      	adds	r2, #91	@ 0x5b
 80281a0:	e7e5      	b.n	802816e <_malloc_r+0x272>
 80281a2:	2a54      	cmp	r2, #84	@ 0x54
 80281a4:	d803      	bhi.n	80281ae <_malloc_r+0x2b2>
 80281a6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80281aa:	326e      	adds	r2, #110	@ 0x6e
 80281ac:	e7df      	b.n	802816e <_malloc_r+0x272>
 80281ae:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80281b2:	d803      	bhi.n	80281bc <_malloc_r+0x2c0>
 80281b4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80281b8:	3277      	adds	r2, #119	@ 0x77
 80281ba:	e7d8      	b.n	802816e <_malloc_r+0x272>
 80281bc:	f240 5e54 	movw	lr, #1364	@ 0x554
 80281c0:	4572      	cmp	r2, lr
 80281c2:	bf9a      	itte	ls
 80281c4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80281c8:	327c      	addls	r2, #124	@ 0x7c
 80281ca:	227e      	movhi	r2, #126	@ 0x7e
 80281cc:	e7cf      	b.n	802816e <_malloc_r+0x272>
 80281ce:	f8de e008 	ldr.w	lr, [lr, #8]
 80281d2:	45f0      	cmp	r8, lr
 80281d4:	d005      	beq.n	80281e2 <_malloc_r+0x2e6>
 80281d6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80281da:	f022 0203 	bic.w	r2, r2, #3
 80281de:	4562      	cmp	r2, ip
 80281e0:	d8f5      	bhi.n	80281ce <_malloc_r+0x2d2>
 80281e2:	f8de 800c 	ldr.w	r8, [lr, #12]
 80281e6:	e7d1      	b.n	802818c <_malloc_r+0x290>
 80281e8:	20000564 	.word	0x20000564
 80281ec:	2000056c 	.word	0x2000056c
 80281f0:	20018300 	.word	0x20018300
 80281f4:	2000055c 	.word	0x2000055c
 80281f8:	200182d0 	.word	0x200182d0
 80281fc:	200182fc 	.word	0x200182fc
 8028200:	200182f8 	.word	0x200182f8
 8028204:	6860      	ldr	r0, [r4, #4]
 8028206:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802820a:	f020 0003 	bic.w	r0, r0, #3
 802820e:	eba0 0a07 	sub.w	sl, r0, r7
 8028212:	f1ba 0f0f 	cmp.w	sl, #15
 8028216:	dd12      	ble.n	802823e <_malloc_r+0x342>
 8028218:	68a3      	ldr	r3, [r4, #8]
 802821a:	19e2      	adds	r2, r4, r7
 802821c:	f047 0701 	orr.w	r7, r7, #1
 8028220:	6067      	str	r7, [r4, #4]
 8028222:	f8c3 c00c 	str.w	ip, [r3, #12]
 8028226:	f8cc 3008 	str.w	r3, [ip, #8]
 802822a:	f04a 0301 	orr.w	r3, sl, #1
 802822e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8028232:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8028236:	6053      	str	r3, [r2, #4]
 8028238:	f844 a000 	str.w	sl, [r4, r0]
 802823c:	e68f      	b.n	8027f5e <_malloc_r+0x62>
 802823e:	f1ba 0f00 	cmp.w	sl, #0
 8028242:	db11      	blt.n	8028268 <_malloc_r+0x36c>
 8028244:	4420      	add	r0, r4
 8028246:	6843      	ldr	r3, [r0, #4]
 8028248:	f043 0301 	orr.w	r3, r3, #1
 802824c:	6043      	str	r3, [r0, #4]
 802824e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8028252:	4628      	mov	r0, r5
 8028254:	f8c3 c00c 	str.w	ip, [r3, #12]
 8028258:	f8cc 3008 	str.w	r3, [ip, #8]
 802825c:	f004 f95e 	bl	802c51c <__malloc_unlock>
 8028260:	4620      	mov	r0, r4
 8028262:	b003      	add	sp, #12
 8028264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028268:	4664      	mov	r4, ip
 802826a:	e70f      	b.n	802808c <_malloc_r+0x190>
 802826c:	f858 0908 	ldr.w	r0, [r8], #-8
 8028270:	4540      	cmp	r0, r8
 8028272:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8028276:	f43f af13 	beq.w	80280a0 <_malloc_r+0x1a4>
 802827a:	e718      	b.n	80280ae <_malloc_r+0x1b2>
 802827c:	3304      	adds	r3, #4
 802827e:	0052      	lsls	r2, r2, #1
 8028280:	4210      	tst	r0, r2
 8028282:	d0fb      	beq.n	802827c <_malloc_r+0x380>
 8028284:	e6fc      	b.n	8028080 <_malloc_r+0x184>
 8028286:	4673      	mov	r3, lr
 8028288:	e7fa      	b.n	8028280 <_malloc_r+0x384>
 802828a:	6810      	ldr	r0, [r2, #0]
 802828c:	3001      	adds	r0, #1
 802828e:	bf1b      	ittet	ne
 8028290:	eba4 0b0b 	subne.w	fp, r4, fp
 8028294:	eb0b 020e 	addne.w	r2, fp, lr
 8028298:	6014      	streq	r4, [r2, #0]
 802829a:	601a      	strne	r2, [r3, #0]
 802829c:	f014 0b07 	ands.w	fp, r4, #7
 80282a0:	bf1a      	itte	ne
 80282a2:	f1cb 0008 	rsbne	r0, fp, #8
 80282a6:	1824      	addne	r4, r4, r0
 80282a8:	4658      	moveq	r0, fp
 80282aa:	1862      	adds	r2, r4, r1
 80282ac:	ea02 010c 	and.w	r1, r2, ip
 80282b0:	4480      	add	r8, r0
 80282b2:	eba8 0801 	sub.w	r8, r8, r1
 80282b6:	ea08 080c 	and.w	r8, r8, ip
 80282ba:	4641      	mov	r1, r8
 80282bc:	4628      	mov	r0, r5
 80282be:	9201      	str	r2, [sp, #4]
 80282c0:	f005 fff8 	bl	802e2b4 <_sbrk_r>
 80282c4:	1c43      	adds	r3, r0, #1
 80282c6:	9a01      	ldr	r2, [sp, #4]
 80282c8:	4b28      	ldr	r3, [pc, #160]	@ (802836c <_malloc_r+0x470>)
 80282ca:	d107      	bne.n	80282dc <_malloc_r+0x3e0>
 80282cc:	f1bb 0f00 	cmp.w	fp, #0
 80282d0:	d023      	beq.n	802831a <_malloc_r+0x41e>
 80282d2:	f1ab 0008 	sub.w	r0, fp, #8
 80282d6:	4410      	add	r0, r2
 80282d8:	f04f 0800 	mov.w	r8, #0
 80282dc:	681a      	ldr	r2, [r3, #0]
 80282de:	60b4      	str	r4, [r6, #8]
 80282e0:	1b00      	subs	r0, r0, r4
 80282e2:	4440      	add	r0, r8
 80282e4:	4442      	add	r2, r8
 80282e6:	f040 0001 	orr.w	r0, r0, #1
 80282ea:	45b2      	cmp	sl, r6
 80282ec:	601a      	str	r2, [r3, #0]
 80282ee:	6060      	str	r0, [r4, #4]
 80282f0:	f43f af29 	beq.w	8028146 <_malloc_r+0x24a>
 80282f4:	f1b9 0f0f 	cmp.w	r9, #15
 80282f8:	d812      	bhi.n	8028320 <_malloc_r+0x424>
 80282fa:	2301      	movs	r3, #1
 80282fc:	6063      	str	r3, [r4, #4]
 80282fe:	68b3      	ldr	r3, [r6, #8]
 8028300:	685b      	ldr	r3, [r3, #4]
 8028302:	f023 0303 	bic.w	r3, r3, #3
 8028306:	42bb      	cmp	r3, r7
 8028308:	eba3 0207 	sub.w	r2, r3, r7
 802830c:	d301      	bcc.n	8028312 <_malloc_r+0x416>
 802830e:	2a0f      	cmp	r2, #15
 8028310:	dc22      	bgt.n	8028358 <_malloc_r+0x45c>
 8028312:	4628      	mov	r0, r5
 8028314:	f004 f902 	bl	802c51c <__malloc_unlock>
 8028318:	e5fc      	b.n	8027f14 <_malloc_r+0x18>
 802831a:	4610      	mov	r0, r2
 802831c:	46d8      	mov	r8, fp
 802831e:	e7dd      	b.n	80282dc <_malloc_r+0x3e0>
 8028320:	f8da 2004 	ldr.w	r2, [sl, #4]
 8028324:	f1a9 090c 	sub.w	r9, r9, #12
 8028328:	f029 0907 	bic.w	r9, r9, #7
 802832c:	f002 0201 	and.w	r2, r2, #1
 8028330:	ea42 0209 	orr.w	r2, r2, r9
 8028334:	f8ca 2004 	str.w	r2, [sl, #4]
 8028338:	2105      	movs	r1, #5
 802833a:	eb0a 0209 	add.w	r2, sl, r9
 802833e:	f1b9 0f0f 	cmp.w	r9, #15
 8028342:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8028346:	f67f aefe 	bls.w	8028146 <_malloc_r+0x24a>
 802834a:	f10a 0108 	add.w	r1, sl, #8
 802834e:	4628      	mov	r0, r5
 8028350:	f7ff fcbc 	bl	8027ccc <_free_r>
 8028354:	4b05      	ldr	r3, [pc, #20]	@ (802836c <_malloc_r+0x470>)
 8028356:	e6f6      	b.n	8028146 <_malloc_r+0x24a>
 8028358:	68b4      	ldr	r4, [r6, #8]
 802835a:	f047 0301 	orr.w	r3, r7, #1
 802835e:	4427      	add	r7, r4
 8028360:	f042 0201 	orr.w	r2, r2, #1
 8028364:	6063      	str	r3, [r4, #4]
 8028366:	60b7      	str	r7, [r6, #8]
 8028368:	607a      	str	r2, [r7, #4]
 802836a:	e5f8      	b.n	8027f5e <_malloc_r+0x62>
 802836c:	200182d0 	.word	0x200182d0

08028370 <__ascii_mbtowc>:
 8028370:	b082      	sub	sp, #8
 8028372:	b901      	cbnz	r1, 8028376 <__ascii_mbtowc+0x6>
 8028374:	a901      	add	r1, sp, #4
 8028376:	b142      	cbz	r2, 802838a <__ascii_mbtowc+0x1a>
 8028378:	b14b      	cbz	r3, 802838e <__ascii_mbtowc+0x1e>
 802837a:	7813      	ldrb	r3, [r2, #0]
 802837c:	600b      	str	r3, [r1, #0]
 802837e:	7812      	ldrb	r2, [r2, #0]
 8028380:	1e10      	subs	r0, r2, #0
 8028382:	bf18      	it	ne
 8028384:	2001      	movne	r0, #1
 8028386:	b002      	add	sp, #8
 8028388:	4770      	bx	lr
 802838a:	4610      	mov	r0, r2
 802838c:	e7fb      	b.n	8028386 <__ascii_mbtowc+0x16>
 802838e:	f06f 0001 	mvn.w	r0, #1
 8028392:	e7f8      	b.n	8028386 <__ascii_mbtowc+0x16>

08028394 <siscanf>:
 8028394:	b40e      	push	{r1, r2, r3}
 8028396:	b530      	push	{r4, r5, lr}
 8028398:	b09c      	sub	sp, #112	@ 0x70
 802839a:	ac1f      	add	r4, sp, #124	@ 0x7c
 802839c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80283a0:	f854 5b04 	ldr.w	r5, [r4], #4
 80283a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80283a8:	9002      	str	r0, [sp, #8]
 80283aa:	9006      	str	r0, [sp, #24]
 80283ac:	f7d7 ff78 	bl	80002a0 <strlen>
 80283b0:	4b0b      	ldr	r3, [pc, #44]	@ (80283e0 <siscanf+0x4c>)
 80283b2:	9003      	str	r0, [sp, #12]
 80283b4:	9007      	str	r0, [sp, #28]
 80283b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80283b8:	480a      	ldr	r0, [pc, #40]	@ (80283e4 <siscanf+0x50>)
 80283ba:	9401      	str	r4, [sp, #4]
 80283bc:	2300      	movs	r3, #0
 80283be:	930e      	str	r3, [sp, #56]	@ 0x38
 80283c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80283c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80283c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80283ca:	462a      	mov	r2, r5
 80283cc:	4623      	mov	r3, r4
 80283ce:	a902      	add	r1, sp, #8
 80283d0:	6800      	ldr	r0, [r0, #0]
 80283d2:	f000 fd99 	bl	8028f08 <__ssvfiscanf_r>
 80283d6:	b01c      	add	sp, #112	@ 0x70
 80283d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80283dc:	b003      	add	sp, #12
 80283de:	4770      	bx	lr
 80283e0:	08025383 	.word	0x08025383
 80283e4:	20000430 	.word	0x20000430

080283e8 <sniprintf>:
 80283e8:	b40c      	push	{r2, r3}
 80283ea:	b530      	push	{r4, r5, lr}
 80283ec:	4b17      	ldr	r3, [pc, #92]	@ (802844c <sniprintf+0x64>)
 80283ee:	1e0c      	subs	r4, r1, #0
 80283f0:	681d      	ldr	r5, [r3, #0]
 80283f2:	b09d      	sub	sp, #116	@ 0x74
 80283f4:	da08      	bge.n	8028408 <sniprintf+0x20>
 80283f6:	238b      	movs	r3, #139	@ 0x8b
 80283f8:	602b      	str	r3, [r5, #0]
 80283fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80283fe:	b01d      	add	sp, #116	@ 0x74
 8028400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8028404:	b002      	add	sp, #8
 8028406:	4770      	bx	lr
 8028408:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802840c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8028410:	bf14      	ite	ne
 8028412:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8028416:	4623      	moveq	r3, r4
 8028418:	9304      	str	r3, [sp, #16]
 802841a:	9307      	str	r3, [sp, #28]
 802841c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8028420:	9002      	str	r0, [sp, #8]
 8028422:	9006      	str	r0, [sp, #24]
 8028424:	f8ad 3016 	strh.w	r3, [sp, #22]
 8028428:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802842a:	ab21      	add	r3, sp, #132	@ 0x84
 802842c:	a902      	add	r1, sp, #8
 802842e:	4628      	mov	r0, r5
 8028430:	9301      	str	r3, [sp, #4]
 8028432:	f000 f88b 	bl	802854c <_svfiprintf_r>
 8028436:	1c43      	adds	r3, r0, #1
 8028438:	bfbc      	itt	lt
 802843a:	238b      	movlt	r3, #139	@ 0x8b
 802843c:	602b      	strlt	r3, [r5, #0]
 802843e:	2c00      	cmp	r4, #0
 8028440:	d0dd      	beq.n	80283fe <sniprintf+0x16>
 8028442:	9b02      	ldr	r3, [sp, #8]
 8028444:	2200      	movs	r2, #0
 8028446:	701a      	strb	r2, [r3, #0]
 8028448:	e7d9      	b.n	80283fe <sniprintf+0x16>
 802844a:	bf00      	nop
 802844c:	20000430 	.word	0x20000430

08028450 <__ssprint_r>:
 8028450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028454:	6893      	ldr	r3, [r2, #8]
 8028456:	f8d2 b000 	ldr.w	fp, [r2]
 802845a:	9001      	str	r0, [sp, #4]
 802845c:	460c      	mov	r4, r1
 802845e:	4617      	mov	r7, r2
 8028460:	2b00      	cmp	r3, #0
 8028462:	d157      	bne.n	8028514 <__ssprint_r+0xc4>
 8028464:	2000      	movs	r0, #0
 8028466:	2300      	movs	r3, #0
 8028468:	607b      	str	r3, [r7, #4]
 802846a:	b003      	add	sp, #12
 802846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028470:	e9db a800 	ldrd	sl, r8, [fp]
 8028474:	f10b 0b08 	add.w	fp, fp, #8
 8028478:	68a6      	ldr	r6, [r4, #8]
 802847a:	6820      	ldr	r0, [r4, #0]
 802847c:	f1b8 0f00 	cmp.w	r8, #0
 8028480:	d0f6      	beq.n	8028470 <__ssprint_r+0x20>
 8028482:	45b0      	cmp	r8, r6
 8028484:	d32e      	bcc.n	80284e4 <__ssprint_r+0x94>
 8028486:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802848a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802848e:	d029      	beq.n	80284e4 <__ssprint_r+0x94>
 8028490:	6921      	ldr	r1, [r4, #16]
 8028492:	6965      	ldr	r5, [r4, #20]
 8028494:	eba0 0901 	sub.w	r9, r0, r1
 8028498:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802849c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80284a0:	f109 0001 	add.w	r0, r9, #1
 80284a4:	106d      	asrs	r5, r5, #1
 80284a6:	4440      	add	r0, r8
 80284a8:	4285      	cmp	r5, r0
 80284aa:	bf38      	it	cc
 80284ac:	4605      	movcc	r5, r0
 80284ae:	0553      	lsls	r3, r2, #21
 80284b0:	d534      	bpl.n	802851c <__ssprint_r+0xcc>
 80284b2:	9801      	ldr	r0, [sp, #4]
 80284b4:	4629      	mov	r1, r5
 80284b6:	f7ff fd21 	bl	8027efc <_malloc_r>
 80284ba:	4606      	mov	r6, r0
 80284bc:	2800      	cmp	r0, #0
 80284be:	d038      	beq.n	8028532 <__ssprint_r+0xe2>
 80284c0:	464a      	mov	r2, r9
 80284c2:	6921      	ldr	r1, [r4, #16]
 80284c4:	f7fe fd00 	bl	8026ec8 <memcpy>
 80284c8:	89a2      	ldrh	r2, [r4, #12]
 80284ca:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80284ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80284d2:	81a2      	strh	r2, [r4, #12]
 80284d4:	6126      	str	r6, [r4, #16]
 80284d6:	6165      	str	r5, [r4, #20]
 80284d8:	444e      	add	r6, r9
 80284da:	eba5 0509 	sub.w	r5, r5, r9
 80284de:	6026      	str	r6, [r4, #0]
 80284e0:	60a5      	str	r5, [r4, #8]
 80284e2:	4646      	mov	r6, r8
 80284e4:	4546      	cmp	r6, r8
 80284e6:	bf28      	it	cs
 80284e8:	4646      	movcs	r6, r8
 80284ea:	4632      	mov	r2, r6
 80284ec:	4651      	mov	r1, sl
 80284ee:	6820      	ldr	r0, [r4, #0]
 80284f0:	f7fd fa94 	bl	8025a1c <memmove>
 80284f4:	68a2      	ldr	r2, [r4, #8]
 80284f6:	1b92      	subs	r2, r2, r6
 80284f8:	60a2      	str	r2, [r4, #8]
 80284fa:	6822      	ldr	r2, [r4, #0]
 80284fc:	4432      	add	r2, r6
 80284fe:	6022      	str	r2, [r4, #0]
 8028500:	68ba      	ldr	r2, [r7, #8]
 8028502:	eba2 0308 	sub.w	r3, r2, r8
 8028506:	44c2      	add	sl, r8
 8028508:	60bb      	str	r3, [r7, #8]
 802850a:	2b00      	cmp	r3, #0
 802850c:	d0aa      	beq.n	8028464 <__ssprint_r+0x14>
 802850e:	f04f 0800 	mov.w	r8, #0
 8028512:	e7b1      	b.n	8028478 <__ssprint_r+0x28>
 8028514:	f04f 0a00 	mov.w	sl, #0
 8028518:	46d0      	mov	r8, sl
 802851a:	e7ad      	b.n	8028478 <__ssprint_r+0x28>
 802851c:	9801      	ldr	r0, [sp, #4]
 802851e:	462a      	mov	r2, r5
 8028520:	f004 fcfc 	bl	802cf1c <_realloc_r>
 8028524:	4606      	mov	r6, r0
 8028526:	2800      	cmp	r0, #0
 8028528:	d1d4      	bne.n	80284d4 <__ssprint_r+0x84>
 802852a:	6921      	ldr	r1, [r4, #16]
 802852c:	9801      	ldr	r0, [sp, #4]
 802852e:	f7ff fbcd 	bl	8027ccc <_free_r>
 8028532:	9a01      	ldr	r2, [sp, #4]
 8028534:	230c      	movs	r3, #12
 8028536:	6013      	str	r3, [r2, #0]
 8028538:	89a3      	ldrh	r3, [r4, #12]
 802853a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802853e:	81a3      	strh	r3, [r4, #12]
 8028540:	2300      	movs	r3, #0
 8028542:	60bb      	str	r3, [r7, #8]
 8028544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028548:	e78d      	b.n	8028466 <__ssprint_r+0x16>
	...

0802854c <_svfiprintf_r>:
 802854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028550:	461d      	mov	r5, r3
 8028552:	898b      	ldrh	r3, [r1, #12]
 8028554:	b0bb      	sub	sp, #236	@ 0xec
 8028556:	468b      	mov	fp, r1
 8028558:	0619      	lsls	r1, r3, #24
 802855a:	9001      	str	r0, [sp, #4]
 802855c:	9202      	str	r2, [sp, #8]
 802855e:	d514      	bpl.n	802858a <_svfiprintf_r+0x3e>
 8028560:	f8db 3010 	ldr.w	r3, [fp, #16]
 8028564:	b98b      	cbnz	r3, 802858a <_svfiprintf_r+0x3e>
 8028566:	2140      	movs	r1, #64	@ 0x40
 8028568:	f7ff fcc8 	bl	8027efc <_malloc_r>
 802856c:	f8cb 0000 	str.w	r0, [fp]
 8028570:	f8cb 0010 	str.w	r0, [fp, #16]
 8028574:	b930      	cbnz	r0, 8028584 <_svfiprintf_r+0x38>
 8028576:	9a01      	ldr	r2, [sp, #4]
 8028578:	230c      	movs	r3, #12
 802857a:	6013      	str	r3, [r2, #0]
 802857c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028580:	9304      	str	r3, [sp, #16]
 8028582:	e3df      	b.n	8028d44 <_svfiprintf_r+0x7f8>
 8028584:	2340      	movs	r3, #64	@ 0x40
 8028586:	f8cb 3014 	str.w	r3, [fp, #20]
 802858a:	2300      	movs	r3, #0
 802858c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8028590:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8028594:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8028598:	ae11      	add	r6, sp, #68	@ 0x44
 802859a:	960e      	str	r6, [sp, #56]	@ 0x38
 802859c:	9304      	str	r3, [sp, #16]
 802859e:	9b02      	ldr	r3, [sp, #8]
 80285a0:	461c      	mov	r4, r3
 80285a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80285a6:	b10a      	cbz	r2, 80285ac <_svfiprintf_r+0x60>
 80285a8:	2a25      	cmp	r2, #37	@ 0x25
 80285aa:	d1f9      	bne.n	80285a0 <_svfiprintf_r+0x54>
 80285ac:	9a02      	ldr	r2, [sp, #8]
 80285ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80285b0:	1aa7      	subs	r7, r4, r2
 80285b2:	d00c      	beq.n	80285ce <_svfiprintf_r+0x82>
 80285b4:	443b      	add	r3, r7
 80285b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80285b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80285ba:	3301      	adds	r3, #1
 80285bc:	2b07      	cmp	r3, #7
 80285be:	e9c6 2700 	strd	r2, r7, [r6]
 80285c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80285c4:	dc76      	bgt.n	80286b4 <_svfiprintf_r+0x168>
 80285c6:	3608      	adds	r6, #8
 80285c8:	9b04      	ldr	r3, [sp, #16]
 80285ca:	443b      	add	r3, r7
 80285cc:	9304      	str	r3, [sp, #16]
 80285ce:	7823      	ldrb	r3, [r4, #0]
 80285d0:	2b00      	cmp	r3, #0
 80285d2:	f000 83ce 	beq.w	8028d72 <_svfiprintf_r+0x826>
 80285d6:	2300      	movs	r3, #0
 80285d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80285dc:	3401      	adds	r4, #1
 80285de:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80285e2:	9200      	str	r2, [sp, #0]
 80285e4:	9303      	str	r3, [sp, #12]
 80285e6:	4699      	mov	r9, r3
 80285e8:	4622      	mov	r2, r4
 80285ea:	f812 3b01 	ldrb.w	r3, [r2], #1
 80285ee:	9202      	str	r2, [sp, #8]
 80285f0:	f1a3 0220 	sub.w	r2, r3, #32
 80285f4:	2a5a      	cmp	r2, #90	@ 0x5a
 80285f6:	f200 8318 	bhi.w	8028c2a <_svfiprintf_r+0x6de>
 80285fa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80285fe:	009a      	.short	0x009a
 8028600:	03160316 	.word	0x03160316
 8028604:	031600a2 	.word	0x031600a2
 8028608:	03160316 	.word	0x03160316
 802860c:	03160082 	.word	0x03160082
 8028610:	00a50316 	.word	0x00a50316
 8028614:	031600af 	.word	0x031600af
 8028618:	00b100ac 	.word	0x00b100ac
 802861c:	00cc0316 	.word	0x00cc0316
 8028620:	00cf00cf 	.word	0x00cf00cf
 8028624:	00cf00cf 	.word	0x00cf00cf
 8028628:	00cf00cf 	.word	0x00cf00cf
 802862c:	00cf00cf 	.word	0x00cf00cf
 8028630:	031600cf 	.word	0x031600cf
 8028634:	03160316 	.word	0x03160316
 8028638:	03160316 	.word	0x03160316
 802863c:	03160316 	.word	0x03160316
 8028640:	03160316 	.word	0x03160316
 8028644:	010600f9 	.word	0x010600f9
 8028648:	03160316 	.word	0x03160316
 802864c:	03160316 	.word	0x03160316
 8028650:	03160316 	.word	0x03160316
 8028654:	03160316 	.word	0x03160316
 8028658:	03160316 	.word	0x03160316
 802865c:	03160154 	.word	0x03160154
 8028660:	03160316 	.word	0x03160316
 8028664:	0316019b 	.word	0x0316019b
 8028668:	0316027d 	.word	0x0316027d
 802866c:	029d0316 	.word	0x029d0316
 8028670:	03160316 	.word	0x03160316
 8028674:	03160316 	.word	0x03160316
 8028678:	03160316 	.word	0x03160316
 802867c:	03160316 	.word	0x03160316
 8028680:	03160316 	.word	0x03160316
 8028684:	010800f9 	.word	0x010800f9
 8028688:	03160316 	.word	0x03160316
 802868c:	00df0316 	.word	0x00df0316
 8028690:	00f30108 	.word	0x00f30108
 8028694:	00ec0316 	.word	0x00ec0316
 8028698:	01340316 	.word	0x01340316
 802869c:	018a0156 	.word	0x018a0156
 80286a0:	031600f3 	.word	0x031600f3
 80286a4:	0098019b 	.word	0x0098019b
 80286a8:	0316027f 	.word	0x0316027f
 80286ac:	00650316 	.word	0x00650316
 80286b0:	00980316 	.word	0x00980316
 80286b4:	9801      	ldr	r0, [sp, #4]
 80286b6:	aa0e      	add	r2, sp, #56	@ 0x38
 80286b8:	4659      	mov	r1, fp
 80286ba:	f7ff fec9 	bl	8028450 <__ssprint_r>
 80286be:	2800      	cmp	r0, #0
 80286c0:	f040 833b 	bne.w	8028d3a <_svfiprintf_r+0x7ee>
 80286c4:	ae11      	add	r6, sp, #68	@ 0x44
 80286c6:	e77f      	b.n	80285c8 <_svfiprintf_r+0x7c>
 80286c8:	4a99      	ldr	r2, [pc, #612]	@ (8028930 <_svfiprintf_r+0x3e4>)
 80286ca:	9205      	str	r2, [sp, #20]
 80286cc:	f019 0220 	ands.w	r2, r9, #32
 80286d0:	f000 8234 	beq.w	8028b3c <_svfiprintf_r+0x5f0>
 80286d4:	3507      	adds	r5, #7
 80286d6:	f025 0507 	bic.w	r5, r5, #7
 80286da:	462f      	mov	r7, r5
 80286dc:	686d      	ldr	r5, [r5, #4]
 80286de:	f857 4b08 	ldr.w	r4, [r7], #8
 80286e2:	f019 0f01 	tst.w	r9, #1
 80286e6:	d009      	beq.n	80286fc <_svfiprintf_r+0x1b0>
 80286e8:	ea54 0205 	orrs.w	r2, r4, r5
 80286ec:	bf1f      	itttt	ne
 80286ee:	2230      	movne	r2, #48	@ 0x30
 80286f0:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 80286f4:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 80286f8:	f049 0902 	orrne.w	r9, r9, #2
 80286fc:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 8028700:	e113      	b.n	802892a <_svfiprintf_r+0x3de>
 8028702:	9801      	ldr	r0, [sp, #4]
 8028704:	f7fe fb32 	bl	8026d6c <_localeconv_r>
 8028708:	6843      	ldr	r3, [r0, #4]
 802870a:	9308      	str	r3, [sp, #32]
 802870c:	4618      	mov	r0, r3
 802870e:	f7d7 fdc7 	bl	80002a0 <strlen>
 8028712:	9007      	str	r0, [sp, #28]
 8028714:	9801      	ldr	r0, [sp, #4]
 8028716:	f7fe fb29 	bl	8026d6c <_localeconv_r>
 802871a:	6883      	ldr	r3, [r0, #8]
 802871c:	9306      	str	r3, [sp, #24]
 802871e:	9b07      	ldr	r3, [sp, #28]
 8028720:	b12b      	cbz	r3, 802872e <_svfiprintf_r+0x1e2>
 8028722:	9b06      	ldr	r3, [sp, #24]
 8028724:	b11b      	cbz	r3, 802872e <_svfiprintf_r+0x1e2>
 8028726:	781b      	ldrb	r3, [r3, #0]
 8028728:	b10b      	cbz	r3, 802872e <_svfiprintf_r+0x1e2>
 802872a:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 802872e:	9c02      	ldr	r4, [sp, #8]
 8028730:	e75a      	b.n	80285e8 <_svfiprintf_r+0x9c>
 8028732:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8028736:	2b00      	cmp	r3, #0
 8028738:	d1f9      	bne.n	802872e <_svfiprintf_r+0x1e2>
 802873a:	2320      	movs	r3, #32
 802873c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8028740:	e7f5      	b.n	802872e <_svfiprintf_r+0x1e2>
 8028742:	f049 0901 	orr.w	r9, r9, #1
 8028746:	e7f2      	b.n	802872e <_svfiprintf_r+0x1e2>
 8028748:	f855 3b04 	ldr.w	r3, [r5], #4
 802874c:	9303      	str	r3, [sp, #12]
 802874e:	2b00      	cmp	r3, #0
 8028750:	daed      	bge.n	802872e <_svfiprintf_r+0x1e2>
 8028752:	425b      	negs	r3, r3
 8028754:	9303      	str	r3, [sp, #12]
 8028756:	f049 0904 	orr.w	r9, r9, #4
 802875a:	e7e8      	b.n	802872e <_svfiprintf_r+0x1e2>
 802875c:	232b      	movs	r3, #43	@ 0x2b
 802875e:	e7ed      	b.n	802873c <_svfiprintf_r+0x1f0>
 8028760:	9a02      	ldr	r2, [sp, #8]
 8028762:	f812 3b01 	ldrb.w	r3, [r2], #1
 8028766:	2b2a      	cmp	r3, #42	@ 0x2a
 8028768:	d111      	bne.n	802878e <_svfiprintf_r+0x242>
 802876a:	f855 3b04 	ldr.w	r3, [r5], #4
 802876e:	9202      	str	r2, [sp, #8]
 8028770:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8028774:	9300      	str	r3, [sp, #0]
 8028776:	e7da      	b.n	802872e <_svfiprintf_r+0x1e2>
 8028778:	9b00      	ldr	r3, [sp, #0]
 802877a:	fb00 1303 	mla	r3, r0, r3, r1
 802877e:	9300      	str	r3, [sp, #0]
 8028780:	f812 3b01 	ldrb.w	r3, [r2], #1
 8028784:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8028788:	2909      	cmp	r1, #9
 802878a:	d9f5      	bls.n	8028778 <_svfiprintf_r+0x22c>
 802878c:	e72f      	b.n	80285ee <_svfiprintf_r+0xa2>
 802878e:	2100      	movs	r1, #0
 8028790:	9100      	str	r1, [sp, #0]
 8028792:	200a      	movs	r0, #10
 8028794:	e7f6      	b.n	8028784 <_svfiprintf_r+0x238>
 8028796:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 802879a:	e7c8      	b.n	802872e <_svfiprintf_r+0x1e2>
 802879c:	2100      	movs	r1, #0
 802879e:	9a02      	ldr	r2, [sp, #8]
 80287a0:	9103      	str	r1, [sp, #12]
 80287a2:	200a      	movs	r0, #10
 80287a4:	9903      	ldr	r1, [sp, #12]
 80287a6:	3b30      	subs	r3, #48	@ 0x30
 80287a8:	fb00 3301 	mla	r3, r0, r1, r3
 80287ac:	9303      	str	r3, [sp, #12]
 80287ae:	f812 3b01 	ldrb.w	r3, [r2], #1
 80287b2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80287b6:	2909      	cmp	r1, #9
 80287b8:	d9f4      	bls.n	80287a4 <_svfiprintf_r+0x258>
 80287ba:	e718      	b.n	80285ee <_svfiprintf_r+0xa2>
 80287bc:	9b02      	ldr	r3, [sp, #8]
 80287be:	781b      	ldrb	r3, [r3, #0]
 80287c0:	2b68      	cmp	r3, #104	@ 0x68
 80287c2:	bf01      	itttt	eq
 80287c4:	9b02      	ldreq	r3, [sp, #8]
 80287c6:	3301      	addeq	r3, #1
 80287c8:	9302      	streq	r3, [sp, #8]
 80287ca:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 80287ce:	bf18      	it	ne
 80287d0:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 80287d4:	e7ab      	b.n	802872e <_svfiprintf_r+0x1e2>
 80287d6:	9b02      	ldr	r3, [sp, #8]
 80287d8:	781b      	ldrb	r3, [r3, #0]
 80287da:	2b6c      	cmp	r3, #108	@ 0x6c
 80287dc:	d105      	bne.n	80287ea <_svfiprintf_r+0x29e>
 80287de:	9b02      	ldr	r3, [sp, #8]
 80287e0:	3301      	adds	r3, #1
 80287e2:	9302      	str	r3, [sp, #8]
 80287e4:	f049 0920 	orr.w	r9, r9, #32
 80287e8:	e7a1      	b.n	802872e <_svfiprintf_r+0x1e2>
 80287ea:	f049 0910 	orr.w	r9, r9, #16
 80287ee:	e79e      	b.n	802872e <_svfiprintf_r+0x1e2>
 80287f0:	462f      	mov	r7, r5
 80287f2:	2400      	movs	r4, #0
 80287f4:	f857 3b04 	ldr.w	r3, [r7], #4
 80287f8:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80287fc:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8028800:	2301      	movs	r3, #1
 8028802:	9300      	str	r3, [sp, #0]
 8028804:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 8028808:	e0aa      	b.n	8028960 <_svfiprintf_r+0x414>
 802880a:	f049 0910 	orr.w	r9, r9, #16
 802880e:	f019 0f20 	tst.w	r9, #32
 8028812:	d011      	beq.n	8028838 <_svfiprintf_r+0x2ec>
 8028814:	3507      	adds	r5, #7
 8028816:	f025 0507 	bic.w	r5, r5, #7
 802881a:	462f      	mov	r7, r5
 802881c:	686d      	ldr	r5, [r5, #4]
 802881e:	f857 4b08 	ldr.w	r4, [r7], #8
 8028822:	2d00      	cmp	r5, #0
 8028824:	da06      	bge.n	8028834 <_svfiprintf_r+0x2e8>
 8028826:	4264      	negs	r4, r4
 8028828:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802882c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8028830:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8028834:	2301      	movs	r3, #1
 8028836:	e048      	b.n	80288ca <_svfiprintf_r+0x37e>
 8028838:	462f      	mov	r7, r5
 802883a:	f019 0f10 	tst.w	r9, #16
 802883e:	f857 5b04 	ldr.w	r5, [r7], #4
 8028842:	d002      	beq.n	802884a <_svfiprintf_r+0x2fe>
 8028844:	462c      	mov	r4, r5
 8028846:	17ed      	asrs	r5, r5, #31
 8028848:	e7eb      	b.n	8028822 <_svfiprintf_r+0x2d6>
 802884a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802884e:	d003      	beq.n	8028858 <_svfiprintf_r+0x30c>
 8028850:	b22c      	sxth	r4, r5
 8028852:	f345 35c0 	sbfx	r5, r5, #15, #1
 8028856:	e7e4      	b.n	8028822 <_svfiprintf_r+0x2d6>
 8028858:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802885c:	d0f2      	beq.n	8028844 <_svfiprintf_r+0x2f8>
 802885e:	b26c      	sxtb	r4, r5
 8028860:	f345 15c0 	sbfx	r5, r5, #7, #1
 8028864:	e7dd      	b.n	8028822 <_svfiprintf_r+0x2d6>
 8028866:	f019 0f20 	tst.w	r9, #32
 802886a:	d007      	beq.n	802887c <_svfiprintf_r+0x330>
 802886c:	9a04      	ldr	r2, [sp, #16]
 802886e:	682b      	ldr	r3, [r5, #0]
 8028870:	9904      	ldr	r1, [sp, #16]
 8028872:	17d2      	asrs	r2, r2, #31
 8028874:	e9c3 1200 	strd	r1, r2, [r3]
 8028878:	3504      	adds	r5, #4
 802887a:	e690      	b.n	802859e <_svfiprintf_r+0x52>
 802887c:	f019 0f10 	tst.w	r9, #16
 8028880:	d003      	beq.n	802888a <_svfiprintf_r+0x33e>
 8028882:	682b      	ldr	r3, [r5, #0]
 8028884:	9a04      	ldr	r2, [sp, #16]
 8028886:	601a      	str	r2, [r3, #0]
 8028888:	e7f6      	b.n	8028878 <_svfiprintf_r+0x32c>
 802888a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802888e:	d003      	beq.n	8028898 <_svfiprintf_r+0x34c>
 8028890:	682b      	ldr	r3, [r5, #0]
 8028892:	9a04      	ldr	r2, [sp, #16]
 8028894:	801a      	strh	r2, [r3, #0]
 8028896:	e7ef      	b.n	8028878 <_svfiprintf_r+0x32c>
 8028898:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802889c:	d0f1      	beq.n	8028882 <_svfiprintf_r+0x336>
 802889e:	682b      	ldr	r3, [r5, #0]
 80288a0:	9a04      	ldr	r2, [sp, #16]
 80288a2:	701a      	strb	r2, [r3, #0]
 80288a4:	e7e8      	b.n	8028878 <_svfiprintf_r+0x32c>
 80288a6:	f049 0910 	orr.w	r9, r9, #16
 80288aa:	f019 0320 	ands.w	r3, r9, #32
 80288ae:	d01e      	beq.n	80288ee <_svfiprintf_r+0x3a2>
 80288b0:	3507      	adds	r5, #7
 80288b2:	f025 0507 	bic.w	r5, r5, #7
 80288b6:	462f      	mov	r7, r5
 80288b8:	686d      	ldr	r5, [r5, #4]
 80288ba:	f857 4b08 	ldr.w	r4, [r7], #8
 80288be:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 80288c2:	2300      	movs	r3, #0
 80288c4:	2200      	movs	r2, #0
 80288c6:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 80288ca:	9a00      	ldr	r2, [sp, #0]
 80288cc:	3201      	adds	r2, #1
 80288ce:	f000 8259 	beq.w	8028d84 <_svfiprintf_r+0x838>
 80288d2:	ea54 0205 	orrs.w	r2, r4, r5
 80288d6:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 80288da:	f040 8258 	bne.w	8028d8e <_svfiprintf_r+0x842>
 80288de:	9a00      	ldr	r2, [sp, #0]
 80288e0:	2a00      	cmp	r2, #0
 80288e2:	f000 8199 	beq.w	8028c18 <_svfiprintf_r+0x6cc>
 80288e6:	2b01      	cmp	r3, #1
 80288e8:	f040 8254 	bne.w	8028d94 <_svfiprintf_r+0x848>
 80288ec:	e13d      	b.n	8028b6a <_svfiprintf_r+0x61e>
 80288ee:	462f      	mov	r7, r5
 80288f0:	f019 0510 	ands.w	r5, r9, #16
 80288f4:	f857 4b04 	ldr.w	r4, [r7], #4
 80288f8:	d001      	beq.n	80288fe <_svfiprintf_r+0x3b2>
 80288fa:	461d      	mov	r5, r3
 80288fc:	e7df      	b.n	80288be <_svfiprintf_r+0x372>
 80288fe:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8028902:	d001      	beq.n	8028908 <_svfiprintf_r+0x3bc>
 8028904:	b2a4      	uxth	r4, r4
 8028906:	e7da      	b.n	80288be <_svfiprintf_r+0x372>
 8028908:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802890c:	d0d7      	beq.n	80288be <_svfiprintf_r+0x372>
 802890e:	b2e4      	uxtb	r4, r4
 8028910:	e7f3      	b.n	80288fa <_svfiprintf_r+0x3ae>
 8028912:	462f      	mov	r7, r5
 8028914:	f647 0330 	movw	r3, #30768	@ 0x7830
 8028918:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802891c:	f857 4b04 	ldr.w	r4, [r7], #4
 8028920:	4b03      	ldr	r3, [pc, #12]	@ (8028930 <_svfiprintf_r+0x3e4>)
 8028922:	9305      	str	r3, [sp, #20]
 8028924:	2500      	movs	r5, #0
 8028926:	f049 0902 	orr.w	r9, r9, #2
 802892a:	2302      	movs	r3, #2
 802892c:	e7ca      	b.n	80288c4 <_svfiprintf_r+0x378>
 802892e:	bf00      	nop
 8028930:	08034058 	.word	0x08034058
 8028934:	9b00      	ldr	r3, [sp, #0]
 8028936:	462f      	mov	r7, r5
 8028938:	1c5a      	adds	r2, r3, #1
 802893a:	f04f 0500 	mov.w	r5, #0
 802893e:	f857 8b04 	ldr.w	r8, [r7], #4
 8028942:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8028946:	f000 80d2 	beq.w	8028aee <_svfiprintf_r+0x5a2>
 802894a:	461a      	mov	r2, r3
 802894c:	4629      	mov	r1, r5
 802894e:	4640      	mov	r0, r8
 8028950:	f7d7 fc56 	bl	8000200 <memchr>
 8028954:	4604      	mov	r4, r0
 8028956:	b118      	cbz	r0, 8028960 <_svfiprintf_r+0x414>
 8028958:	eba0 0308 	sub.w	r3, r0, r8
 802895c:	9300      	str	r3, [sp, #0]
 802895e:	462c      	mov	r4, r5
 8028960:	9d00      	ldr	r5, [sp, #0]
 8028962:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8028966:	42a5      	cmp	r5, r4
 8028968:	bfb8      	it	lt
 802896a:	4625      	movlt	r5, r4
 802896c:	b103      	cbz	r3, 8028970 <_svfiprintf_r+0x424>
 802896e:	3501      	adds	r5, #1
 8028970:	f019 0302 	ands.w	r3, r9, #2
 8028974:	9309      	str	r3, [sp, #36]	@ 0x24
 8028976:	bf18      	it	ne
 8028978:	3502      	addne	r5, #2
 802897a:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 802897e:	930a      	str	r3, [sp, #40]	@ 0x28
 8028980:	d123      	bne.n	80289ca <_svfiprintf_r+0x47e>
 8028982:	9b03      	ldr	r3, [sp, #12]
 8028984:	eba3 0a05 	sub.w	sl, r3, r5
 8028988:	f1ba 0f00 	cmp.w	sl, #0
 802898c:	dd1d      	ble.n	80289ca <_svfiprintf_r+0x47e>
 802898e:	4bac      	ldr	r3, [pc, #688]	@ (8028c40 <_svfiprintf_r+0x6f4>)
 8028990:	6033      	str	r3, [r6, #0]
 8028992:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8028996:	f1ba 0f10 	cmp.w	sl, #16
 802899a:	f102 0201 	add.w	r2, r2, #1
 802899e:	f106 0008 	add.w	r0, r6, #8
 80289a2:	f300 8153 	bgt.w	8028c4c <_svfiprintf_r+0x700>
 80289a6:	eb0c 010a 	add.w	r1, ip, sl
 80289aa:	2a07      	cmp	r2, #7
 80289ac:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80289b0:	f8c6 a004 	str.w	sl, [r6, #4]
 80289b4:	f340 815e 	ble.w	8028c74 <_svfiprintf_r+0x728>
 80289b8:	9801      	ldr	r0, [sp, #4]
 80289ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80289bc:	4659      	mov	r1, fp
 80289be:	f7ff fd47 	bl	8028450 <__ssprint_r>
 80289c2:	2800      	cmp	r0, #0
 80289c4:	f040 81b9 	bne.w	8028d3a <_svfiprintf_r+0x7ee>
 80289c8:	ae11      	add	r6, sp, #68	@ 0x44
 80289ca:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 80289ce:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80289d2:	b161      	cbz	r1, 80289ee <_svfiprintf_r+0x4a2>
 80289d4:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 80289d8:	3301      	adds	r3, #1
 80289da:	6031      	str	r1, [r6, #0]
 80289dc:	2101      	movs	r1, #1
 80289de:	440a      	add	r2, r1
 80289e0:	2b07      	cmp	r3, #7
 80289e2:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80289e6:	6071      	str	r1, [r6, #4]
 80289e8:	f300 8146 	bgt.w	8028c78 <_svfiprintf_r+0x72c>
 80289ec:	3608      	adds	r6, #8
 80289ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80289f0:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80289f4:	b159      	cbz	r1, 8028a0e <_svfiprintf_r+0x4c2>
 80289f6:	a90d      	add	r1, sp, #52	@ 0x34
 80289f8:	3301      	adds	r3, #1
 80289fa:	6031      	str	r1, [r6, #0]
 80289fc:	2102      	movs	r1, #2
 80289fe:	440a      	add	r2, r1
 8028a00:	2b07      	cmp	r3, #7
 8028a02:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028a06:	6071      	str	r1, [r6, #4]
 8028a08:	f300 813f 	bgt.w	8028c8a <_svfiprintf_r+0x73e>
 8028a0c:	3608      	adds	r6, #8
 8028a0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028a10:	2b80      	cmp	r3, #128	@ 0x80
 8028a12:	d123      	bne.n	8028a5c <_svfiprintf_r+0x510>
 8028a14:	9b03      	ldr	r3, [sp, #12]
 8028a16:	eba3 0a05 	sub.w	sl, r3, r5
 8028a1a:	f1ba 0f00 	cmp.w	sl, #0
 8028a1e:	dd1d      	ble.n	8028a5c <_svfiprintf_r+0x510>
 8028a20:	4b88      	ldr	r3, [pc, #544]	@ (8028c44 <_svfiprintf_r+0x6f8>)
 8028a22:	6033      	str	r3, [r6, #0]
 8028a24:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8028a28:	f1ba 0f10 	cmp.w	sl, #16
 8028a2c:	f102 0201 	add.w	r2, r2, #1
 8028a30:	f106 0008 	add.w	r0, r6, #8
 8028a34:	f300 8132 	bgt.w	8028c9c <_svfiprintf_r+0x750>
 8028a38:	eb0c 010a 	add.w	r1, ip, sl
 8028a3c:	2a07      	cmp	r2, #7
 8028a3e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028a42:	f8c6 a004 	str.w	sl, [r6, #4]
 8028a46:	f340 813d 	ble.w	8028cc4 <_svfiprintf_r+0x778>
 8028a4a:	9801      	ldr	r0, [sp, #4]
 8028a4c:	aa0e      	add	r2, sp, #56	@ 0x38
 8028a4e:	4659      	mov	r1, fp
 8028a50:	f7ff fcfe 	bl	8028450 <__ssprint_r>
 8028a54:	2800      	cmp	r0, #0
 8028a56:	f040 8170 	bne.w	8028d3a <_svfiprintf_r+0x7ee>
 8028a5a:	ae11      	add	r6, sp, #68	@ 0x44
 8028a5c:	9b00      	ldr	r3, [sp, #0]
 8028a5e:	1ae4      	subs	r4, r4, r3
 8028a60:	2c00      	cmp	r4, #0
 8028a62:	dd1a      	ble.n	8028a9a <_svfiprintf_r+0x54e>
 8028a64:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8028a68:	4876      	ldr	r0, [pc, #472]	@ (8028c44 <_svfiprintf_r+0x6f8>)
 8028a6a:	6030      	str	r0, [r6, #0]
 8028a6c:	2c10      	cmp	r4, #16
 8028a6e:	f103 0301 	add.w	r3, r3, #1
 8028a72:	f106 0108 	add.w	r1, r6, #8
 8028a76:	f300 8127 	bgt.w	8028cc8 <_svfiprintf_r+0x77c>
 8028a7a:	6074      	str	r4, [r6, #4]
 8028a7c:	2b07      	cmp	r3, #7
 8028a7e:	4414      	add	r4, r2
 8028a80:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8028a84:	f340 8131 	ble.w	8028cea <_svfiprintf_r+0x79e>
 8028a88:	9801      	ldr	r0, [sp, #4]
 8028a8a:	aa0e      	add	r2, sp, #56	@ 0x38
 8028a8c:	4659      	mov	r1, fp
 8028a8e:	f7ff fcdf 	bl	8028450 <__ssprint_r>
 8028a92:	2800      	cmp	r0, #0
 8028a94:	f040 8151 	bne.w	8028d3a <_svfiprintf_r+0x7ee>
 8028a98:	ae11      	add	r6, sp, #68	@ 0x44
 8028a9a:	9b00      	ldr	r3, [sp, #0]
 8028a9c:	9a00      	ldr	r2, [sp, #0]
 8028a9e:	6073      	str	r3, [r6, #4]
 8028aa0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028aa2:	f8c6 8000 	str.w	r8, [r6]
 8028aa6:	4413      	add	r3, r2
 8028aa8:	9310      	str	r3, [sp, #64]	@ 0x40
 8028aaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028aac:	3301      	adds	r3, #1
 8028aae:	2b07      	cmp	r3, #7
 8028ab0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028ab2:	f300 811c 	bgt.w	8028cee <_svfiprintf_r+0x7a2>
 8028ab6:	f106 0308 	add.w	r3, r6, #8
 8028aba:	f019 0f04 	tst.w	r9, #4
 8028abe:	f040 811e 	bne.w	8028cfe <_svfiprintf_r+0x7b2>
 8028ac2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8028ac6:	42aa      	cmp	r2, r5
 8028ac8:	bfac      	ite	ge
 8028aca:	189b      	addge	r3, r3, r2
 8028acc:	195b      	addlt	r3, r3, r5
 8028ace:	9304      	str	r3, [sp, #16]
 8028ad0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028ad2:	b13b      	cbz	r3, 8028ae4 <_svfiprintf_r+0x598>
 8028ad4:	9801      	ldr	r0, [sp, #4]
 8028ad6:	aa0e      	add	r2, sp, #56	@ 0x38
 8028ad8:	4659      	mov	r1, fp
 8028ada:	f7ff fcb9 	bl	8028450 <__ssprint_r>
 8028ade:	2800      	cmp	r0, #0
 8028ae0:	f040 812b 	bne.w	8028d3a <_svfiprintf_r+0x7ee>
 8028ae4:	2300      	movs	r3, #0
 8028ae6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028ae8:	463d      	mov	r5, r7
 8028aea:	ae11      	add	r6, sp, #68	@ 0x44
 8028aec:	e557      	b.n	802859e <_svfiprintf_r+0x52>
 8028aee:	4640      	mov	r0, r8
 8028af0:	f7d7 fbd6 	bl	80002a0 <strlen>
 8028af4:	9000      	str	r0, [sp, #0]
 8028af6:	e732      	b.n	802895e <_svfiprintf_r+0x412>
 8028af8:	f049 0910 	orr.w	r9, r9, #16
 8028afc:	f019 0320 	ands.w	r3, r9, #32
 8028b00:	d008      	beq.n	8028b14 <_svfiprintf_r+0x5c8>
 8028b02:	3507      	adds	r5, #7
 8028b04:	f025 0507 	bic.w	r5, r5, #7
 8028b08:	462f      	mov	r7, r5
 8028b0a:	686d      	ldr	r5, [r5, #4]
 8028b0c:	f857 4b08 	ldr.w	r4, [r7], #8
 8028b10:	2301      	movs	r3, #1
 8028b12:	e6d7      	b.n	80288c4 <_svfiprintf_r+0x378>
 8028b14:	462f      	mov	r7, r5
 8028b16:	f019 0510 	ands.w	r5, r9, #16
 8028b1a:	f857 4b04 	ldr.w	r4, [r7], #4
 8028b1e:	d001      	beq.n	8028b24 <_svfiprintf_r+0x5d8>
 8028b20:	461d      	mov	r5, r3
 8028b22:	e7f5      	b.n	8028b10 <_svfiprintf_r+0x5c4>
 8028b24:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8028b28:	d001      	beq.n	8028b2e <_svfiprintf_r+0x5e2>
 8028b2a:	b2a4      	uxth	r4, r4
 8028b2c:	e7f0      	b.n	8028b10 <_svfiprintf_r+0x5c4>
 8028b2e:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8028b32:	d0ed      	beq.n	8028b10 <_svfiprintf_r+0x5c4>
 8028b34:	b2e4      	uxtb	r4, r4
 8028b36:	e7f3      	b.n	8028b20 <_svfiprintf_r+0x5d4>
 8028b38:	4a43      	ldr	r2, [pc, #268]	@ (8028c48 <_svfiprintf_r+0x6fc>)
 8028b3a:	e5c6      	b.n	80286ca <_svfiprintf_r+0x17e>
 8028b3c:	462f      	mov	r7, r5
 8028b3e:	f019 0510 	ands.w	r5, r9, #16
 8028b42:	f857 4b04 	ldr.w	r4, [r7], #4
 8028b46:	d001      	beq.n	8028b4c <_svfiprintf_r+0x600>
 8028b48:	4615      	mov	r5, r2
 8028b4a:	e5ca      	b.n	80286e2 <_svfiprintf_r+0x196>
 8028b4c:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 8028b50:	d001      	beq.n	8028b56 <_svfiprintf_r+0x60a>
 8028b52:	b2a4      	uxth	r4, r4
 8028b54:	e5c5      	b.n	80286e2 <_svfiprintf_r+0x196>
 8028b56:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8028b5a:	f43f adc2 	beq.w	80286e2 <_svfiprintf_r+0x196>
 8028b5e:	b2e4      	uxtb	r4, r4
 8028b60:	e7f2      	b.n	8028b48 <_svfiprintf_r+0x5fc>
 8028b62:	2c0a      	cmp	r4, #10
 8028b64:	f175 0300 	sbcs.w	r3, r5, #0
 8028b68:	d206      	bcs.n	8028b78 <_svfiprintf_r+0x62c>
 8028b6a:	3430      	adds	r4, #48	@ 0x30
 8028b6c:	b2e4      	uxtb	r4, r4
 8028b6e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8028b72:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 8028b76:	e129      	b.n	8028dcc <_svfiprintf_r+0x880>
 8028b78:	ab3a      	add	r3, sp, #232	@ 0xe8
 8028b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8028b7c:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 8028b80:	f04f 0900 	mov.w	r9, #0
 8028b84:	930a      	str	r3, [sp, #40]	@ 0x28
 8028b86:	220a      	movs	r2, #10
 8028b88:	2300      	movs	r3, #0
 8028b8a:	4620      	mov	r0, r4
 8028b8c:	4629      	mov	r1, r5
 8028b8e:	f7d8 f8e3 	bl	8000d58 <__aeabi_uldivmod>
 8028b92:	460b      	mov	r3, r1
 8028b94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028b96:	900b      	str	r0, [sp, #44]	@ 0x2c
 8028b98:	3230      	adds	r2, #48	@ 0x30
 8028b9a:	f801 2c01 	strb.w	r2, [r1, #-1]
 8028b9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028ba0:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8028ba4:	f109 0901 	add.w	r9, r9, #1
 8028ba8:	b1e2      	cbz	r2, 8028be4 <_svfiprintf_r+0x698>
 8028baa:	9a06      	ldr	r2, [sp, #24]
 8028bac:	7812      	ldrb	r2, [r2, #0]
 8028bae:	454a      	cmp	r2, r9
 8028bb0:	d118      	bne.n	8028be4 <_svfiprintf_r+0x698>
 8028bb2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8028bb6:	d015      	beq.n	8028be4 <_svfiprintf_r+0x698>
 8028bb8:	2c0a      	cmp	r4, #10
 8028bba:	f175 0200 	sbcs.w	r2, r5, #0
 8028bbe:	d311      	bcc.n	8028be4 <_svfiprintf_r+0x698>
 8028bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8028bc2:	9b07      	ldr	r3, [sp, #28]
 8028bc4:	9908      	ldr	r1, [sp, #32]
 8028bc6:	eba8 0803 	sub.w	r8, r8, r3
 8028bca:	461a      	mov	r2, r3
 8028bcc:	4640      	mov	r0, r8
 8028bce:	f7fc ff86 	bl	8025ade <strncpy>
 8028bd2:	9b06      	ldr	r3, [sp, #24]
 8028bd4:	785a      	ldrb	r2, [r3, #1]
 8028bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028bd8:	b172      	cbz	r2, 8028bf8 <_svfiprintf_r+0x6ac>
 8028bda:	9a06      	ldr	r2, [sp, #24]
 8028bdc:	3201      	adds	r2, #1
 8028bde:	9206      	str	r2, [sp, #24]
 8028be0:	f04f 0900 	mov.w	r9, #0
 8028be4:	2c0a      	cmp	r4, #10
 8028be6:	f175 0500 	sbcs.w	r5, r5, #0
 8028bea:	f0c0 80ef 	bcc.w	8028dcc <_svfiprintf_r+0x880>
 8028bee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8028bf0:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8028bf4:	461d      	mov	r5, r3
 8028bf6:	e7c6      	b.n	8028b86 <_svfiprintf_r+0x63a>
 8028bf8:	4691      	mov	r9, r2
 8028bfa:	e7f3      	b.n	8028be4 <_svfiprintf_r+0x698>
 8028bfc:	f004 030f 	and.w	r3, r4, #15
 8028c00:	9a05      	ldr	r2, [sp, #20]
 8028c02:	0924      	lsrs	r4, r4, #4
 8028c04:	5cd3      	ldrb	r3, [r2, r3]
 8028c06:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8028c0a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8028c0e:	092d      	lsrs	r5, r5, #4
 8028c10:	ea54 0305 	orrs.w	r3, r4, r5
 8028c14:	d1f2      	bne.n	8028bfc <_svfiprintf_r+0x6b0>
 8028c16:	e0d9      	b.n	8028dcc <_svfiprintf_r+0x880>
 8028c18:	b923      	cbnz	r3, 8028c24 <_svfiprintf_r+0x6d8>
 8028c1a:	f019 0f01 	tst.w	r9, #1
 8028c1e:	d001      	beq.n	8028c24 <_svfiprintf_r+0x6d8>
 8028c20:	2430      	movs	r4, #48	@ 0x30
 8028c22:	e7a4      	b.n	8028b6e <_svfiprintf_r+0x622>
 8028c24:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 8028c28:	e0d0      	b.n	8028dcc <_svfiprintf_r+0x880>
 8028c2a:	2b00      	cmp	r3, #0
 8028c2c:	f000 80a1 	beq.w	8028d72 <_svfiprintf_r+0x826>
 8028c30:	2400      	movs	r4, #0
 8028c32:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8028c36:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8028c3a:	462f      	mov	r7, r5
 8028c3c:	e5e0      	b.n	8028800 <_svfiprintf_r+0x2b4>
 8028c3e:	bf00      	nop
 8028c40:	0803458b 	.word	0x0803458b
 8028c44:	0803457b 	.word	0x0803457b
 8028c48:	08034069 	.word	0x08034069
 8028c4c:	2110      	movs	r1, #16
 8028c4e:	6071      	str	r1, [r6, #4]
 8028c50:	2a07      	cmp	r2, #7
 8028c52:	4461      	add	r1, ip
 8028c54:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028c58:	dd08      	ble.n	8028c6c <_svfiprintf_r+0x720>
 8028c5a:	9801      	ldr	r0, [sp, #4]
 8028c5c:	aa0e      	add	r2, sp, #56	@ 0x38
 8028c5e:	4659      	mov	r1, fp
 8028c60:	f7ff fbf6 	bl	8028450 <__ssprint_r>
 8028c64:	2800      	cmp	r0, #0
 8028c66:	d168      	bne.n	8028d3a <_svfiprintf_r+0x7ee>
 8028c68:	4b5c      	ldr	r3, [pc, #368]	@ (8028ddc <_svfiprintf_r+0x890>)
 8028c6a:	a811      	add	r0, sp, #68	@ 0x44
 8028c6c:	f1aa 0a10 	sub.w	sl, sl, #16
 8028c70:	4606      	mov	r6, r0
 8028c72:	e68d      	b.n	8028990 <_svfiprintf_r+0x444>
 8028c74:	4606      	mov	r6, r0
 8028c76:	e6a8      	b.n	80289ca <_svfiprintf_r+0x47e>
 8028c78:	9801      	ldr	r0, [sp, #4]
 8028c7a:	aa0e      	add	r2, sp, #56	@ 0x38
 8028c7c:	4659      	mov	r1, fp
 8028c7e:	f7ff fbe7 	bl	8028450 <__ssprint_r>
 8028c82:	2800      	cmp	r0, #0
 8028c84:	d159      	bne.n	8028d3a <_svfiprintf_r+0x7ee>
 8028c86:	ae11      	add	r6, sp, #68	@ 0x44
 8028c88:	e6b1      	b.n	80289ee <_svfiprintf_r+0x4a2>
 8028c8a:	9801      	ldr	r0, [sp, #4]
 8028c8c:	aa0e      	add	r2, sp, #56	@ 0x38
 8028c8e:	4659      	mov	r1, fp
 8028c90:	f7ff fbde 	bl	8028450 <__ssprint_r>
 8028c94:	2800      	cmp	r0, #0
 8028c96:	d150      	bne.n	8028d3a <_svfiprintf_r+0x7ee>
 8028c98:	ae11      	add	r6, sp, #68	@ 0x44
 8028c9a:	e6b8      	b.n	8028a0e <_svfiprintf_r+0x4c2>
 8028c9c:	2110      	movs	r1, #16
 8028c9e:	6071      	str	r1, [r6, #4]
 8028ca0:	2a07      	cmp	r2, #7
 8028ca2:	4461      	add	r1, ip
 8028ca4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028ca8:	dd08      	ble.n	8028cbc <_svfiprintf_r+0x770>
 8028caa:	9801      	ldr	r0, [sp, #4]
 8028cac:	aa0e      	add	r2, sp, #56	@ 0x38
 8028cae:	4659      	mov	r1, fp
 8028cb0:	f7ff fbce 	bl	8028450 <__ssprint_r>
 8028cb4:	2800      	cmp	r0, #0
 8028cb6:	d140      	bne.n	8028d3a <_svfiprintf_r+0x7ee>
 8028cb8:	4b49      	ldr	r3, [pc, #292]	@ (8028de0 <_svfiprintf_r+0x894>)
 8028cba:	a811      	add	r0, sp, #68	@ 0x44
 8028cbc:	f1aa 0a10 	sub.w	sl, sl, #16
 8028cc0:	4606      	mov	r6, r0
 8028cc2:	e6ae      	b.n	8028a22 <_svfiprintf_r+0x4d6>
 8028cc4:	4606      	mov	r6, r0
 8028cc6:	e6c9      	b.n	8028a5c <_svfiprintf_r+0x510>
 8028cc8:	2010      	movs	r0, #16
 8028cca:	4402      	add	r2, r0
 8028ccc:	2b07      	cmp	r3, #7
 8028cce:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028cd2:	6070      	str	r0, [r6, #4]
 8028cd4:	dd06      	ble.n	8028ce4 <_svfiprintf_r+0x798>
 8028cd6:	9801      	ldr	r0, [sp, #4]
 8028cd8:	aa0e      	add	r2, sp, #56	@ 0x38
 8028cda:	4659      	mov	r1, fp
 8028cdc:	f7ff fbb8 	bl	8028450 <__ssprint_r>
 8028ce0:	bb58      	cbnz	r0, 8028d3a <_svfiprintf_r+0x7ee>
 8028ce2:	a911      	add	r1, sp, #68	@ 0x44
 8028ce4:	3c10      	subs	r4, #16
 8028ce6:	460e      	mov	r6, r1
 8028ce8:	e6bc      	b.n	8028a64 <_svfiprintf_r+0x518>
 8028cea:	460e      	mov	r6, r1
 8028cec:	e6d5      	b.n	8028a9a <_svfiprintf_r+0x54e>
 8028cee:	9801      	ldr	r0, [sp, #4]
 8028cf0:	aa0e      	add	r2, sp, #56	@ 0x38
 8028cf2:	4659      	mov	r1, fp
 8028cf4:	f7ff fbac 	bl	8028450 <__ssprint_r>
 8028cf8:	b9f8      	cbnz	r0, 8028d3a <_svfiprintf_r+0x7ee>
 8028cfa:	ab11      	add	r3, sp, #68	@ 0x44
 8028cfc:	e6dd      	b.n	8028aba <_svfiprintf_r+0x56e>
 8028cfe:	9a03      	ldr	r2, [sp, #12]
 8028d00:	1b54      	subs	r4, r2, r5
 8028d02:	2c00      	cmp	r4, #0
 8028d04:	f77f aedd 	ble.w	8028ac2 <_svfiprintf_r+0x576>
 8028d08:	4e34      	ldr	r6, [pc, #208]	@ (8028ddc <_svfiprintf_r+0x890>)
 8028d0a:	f04f 0810 	mov.w	r8, #16
 8028d0e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8028d12:	2c10      	cmp	r4, #16
 8028d14:	f102 0201 	add.w	r2, r2, #1
 8028d18:	601e      	str	r6, [r3, #0]
 8028d1a:	dc17      	bgt.n	8028d4c <_svfiprintf_r+0x800>
 8028d1c:	605c      	str	r4, [r3, #4]
 8028d1e:	2a07      	cmp	r2, #7
 8028d20:	440c      	add	r4, r1
 8028d22:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8028d26:	f77f aecc 	ble.w	8028ac2 <_svfiprintf_r+0x576>
 8028d2a:	9801      	ldr	r0, [sp, #4]
 8028d2c:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d2e:	4659      	mov	r1, fp
 8028d30:	f7ff fb8e 	bl	8028450 <__ssprint_r>
 8028d34:	2800      	cmp	r0, #0
 8028d36:	f43f aec4 	beq.w	8028ac2 <_svfiprintf_r+0x576>
 8028d3a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8028d3e:	065b      	lsls	r3, r3, #25
 8028d40:	f53f ac1c 	bmi.w	802857c <_svfiprintf_r+0x30>
 8028d44:	9804      	ldr	r0, [sp, #16]
 8028d46:	b03b      	add	sp, #236	@ 0xec
 8028d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d4c:	3110      	adds	r1, #16
 8028d4e:	2a07      	cmp	r2, #7
 8028d50:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028d54:	f8c3 8004 	str.w	r8, [r3, #4]
 8028d58:	dc02      	bgt.n	8028d60 <_svfiprintf_r+0x814>
 8028d5a:	3308      	adds	r3, #8
 8028d5c:	3c10      	subs	r4, #16
 8028d5e:	e7d6      	b.n	8028d0e <_svfiprintf_r+0x7c2>
 8028d60:	9801      	ldr	r0, [sp, #4]
 8028d62:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d64:	4659      	mov	r1, fp
 8028d66:	f7ff fb73 	bl	8028450 <__ssprint_r>
 8028d6a:	2800      	cmp	r0, #0
 8028d6c:	d1e5      	bne.n	8028d3a <_svfiprintf_r+0x7ee>
 8028d6e:	ab11      	add	r3, sp, #68	@ 0x44
 8028d70:	e7f4      	b.n	8028d5c <_svfiprintf_r+0x810>
 8028d72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028d74:	2b00      	cmp	r3, #0
 8028d76:	d0e0      	beq.n	8028d3a <_svfiprintf_r+0x7ee>
 8028d78:	9801      	ldr	r0, [sp, #4]
 8028d7a:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d7c:	4659      	mov	r1, fp
 8028d7e:	f7ff fb67 	bl	8028450 <__ssprint_r>
 8028d82:	e7da      	b.n	8028d3a <_svfiprintf_r+0x7ee>
 8028d84:	ea54 0205 	orrs.w	r2, r4, r5
 8028d88:	46ca      	mov	sl, r9
 8028d8a:	f43f adac 	beq.w	80288e6 <_svfiprintf_r+0x39a>
 8028d8e:	2b01      	cmp	r3, #1
 8028d90:	f43f aee7 	beq.w	8028b62 <_svfiprintf_r+0x616>
 8028d94:	2b02      	cmp	r3, #2
 8028d96:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 8028d9a:	f43f af2f 	beq.w	8028bfc <_svfiprintf_r+0x6b0>
 8028d9e:	f004 0307 	and.w	r3, r4, #7
 8028da2:	08e4      	lsrs	r4, r4, #3
 8028da4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8028da8:	08ed      	lsrs	r5, r5, #3
 8028daa:	3330      	adds	r3, #48	@ 0x30
 8028dac:	ea54 0105 	orrs.w	r1, r4, r5
 8028db0:	4642      	mov	r2, r8
 8028db2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8028db6:	d1f2      	bne.n	8028d9e <_svfiprintf_r+0x852>
 8028db8:	f01a 0f01 	tst.w	sl, #1
 8028dbc:	d006      	beq.n	8028dcc <_svfiprintf_r+0x880>
 8028dbe:	2b30      	cmp	r3, #48	@ 0x30
 8028dc0:	d004      	beq.n	8028dcc <_svfiprintf_r+0x880>
 8028dc2:	2330      	movs	r3, #48	@ 0x30
 8028dc4:	f808 3c01 	strb.w	r3, [r8, #-1]
 8028dc8:	f1a2 0802 	sub.w	r8, r2, #2
 8028dcc:	ab3a      	add	r3, sp, #232	@ 0xe8
 8028dce:	eba3 0308 	sub.w	r3, r3, r8
 8028dd2:	9c00      	ldr	r4, [sp, #0]
 8028dd4:	9300      	str	r3, [sp, #0]
 8028dd6:	46d1      	mov	r9, sl
 8028dd8:	e5c2      	b.n	8028960 <_svfiprintf_r+0x414>
 8028dda:	bf00      	nop
 8028ddc:	0803458b 	.word	0x0803458b
 8028de0:	0803457b 	.word	0x0803457b

08028de4 <_sungetc_r>:
 8028de4:	b538      	push	{r3, r4, r5, lr}
 8028de6:	1c4b      	adds	r3, r1, #1
 8028de8:	4614      	mov	r4, r2
 8028dea:	d103      	bne.n	8028df4 <_sungetc_r+0x10>
 8028dec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8028df0:	4628      	mov	r0, r5
 8028df2:	bd38      	pop	{r3, r4, r5, pc}
 8028df4:	8993      	ldrh	r3, [r2, #12]
 8028df6:	f023 0320 	bic.w	r3, r3, #32
 8028dfa:	8193      	strh	r3, [r2, #12]
 8028dfc:	6853      	ldr	r3, [r2, #4]
 8028dfe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8028e00:	b2cd      	uxtb	r5, r1
 8028e02:	b18a      	cbz	r2, 8028e28 <_sungetc_r+0x44>
 8028e04:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8028e06:	429a      	cmp	r2, r3
 8028e08:	dd08      	ble.n	8028e1c <_sungetc_r+0x38>
 8028e0a:	6823      	ldr	r3, [r4, #0]
 8028e0c:	1e5a      	subs	r2, r3, #1
 8028e0e:	6022      	str	r2, [r4, #0]
 8028e10:	f803 5c01 	strb.w	r5, [r3, #-1]
 8028e14:	6863      	ldr	r3, [r4, #4]
 8028e16:	3301      	adds	r3, #1
 8028e18:	6063      	str	r3, [r4, #4]
 8028e1a:	e7e9      	b.n	8028df0 <_sungetc_r+0xc>
 8028e1c:	4621      	mov	r1, r4
 8028e1e:	f005 f8a7 	bl	802df70 <__submore>
 8028e22:	2800      	cmp	r0, #0
 8028e24:	d0f1      	beq.n	8028e0a <_sungetc_r+0x26>
 8028e26:	e7e1      	b.n	8028dec <_sungetc_r+0x8>
 8028e28:	6921      	ldr	r1, [r4, #16]
 8028e2a:	6822      	ldr	r2, [r4, #0]
 8028e2c:	b141      	cbz	r1, 8028e40 <_sungetc_r+0x5c>
 8028e2e:	4291      	cmp	r1, r2
 8028e30:	d206      	bcs.n	8028e40 <_sungetc_r+0x5c>
 8028e32:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8028e36:	42a9      	cmp	r1, r5
 8028e38:	d102      	bne.n	8028e40 <_sungetc_r+0x5c>
 8028e3a:	3a01      	subs	r2, #1
 8028e3c:	6022      	str	r2, [r4, #0]
 8028e3e:	e7ea      	b.n	8028e16 <_sungetc_r+0x32>
 8028e40:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 8028e44:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8028e48:	6323      	str	r3, [r4, #48]	@ 0x30
 8028e4a:	2303      	movs	r3, #3
 8028e4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8028e4e:	4623      	mov	r3, r4
 8028e50:	f803 5f42 	strb.w	r5, [r3, #66]!
 8028e54:	6023      	str	r3, [r4, #0]
 8028e56:	2301      	movs	r3, #1
 8028e58:	e7de      	b.n	8028e18 <_sungetc_r+0x34>

08028e5a <__ssrefill_r>:
 8028e5a:	b510      	push	{r4, lr}
 8028e5c:	460c      	mov	r4, r1
 8028e5e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8028e60:	b169      	cbz	r1, 8028e7e <__ssrefill_r+0x24>
 8028e62:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8028e66:	4299      	cmp	r1, r3
 8028e68:	d001      	beq.n	8028e6e <__ssrefill_r+0x14>
 8028e6a:	f7fe ff2f 	bl	8027ccc <_free_r>
 8028e6e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8028e70:	6063      	str	r3, [r4, #4]
 8028e72:	2000      	movs	r0, #0
 8028e74:	6320      	str	r0, [r4, #48]	@ 0x30
 8028e76:	b113      	cbz	r3, 8028e7e <__ssrefill_r+0x24>
 8028e78:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8028e7a:	6023      	str	r3, [r4, #0]
 8028e7c:	bd10      	pop	{r4, pc}
 8028e7e:	6923      	ldr	r3, [r4, #16]
 8028e80:	6023      	str	r3, [r4, #0]
 8028e82:	2300      	movs	r3, #0
 8028e84:	6063      	str	r3, [r4, #4]
 8028e86:	89a3      	ldrh	r3, [r4, #12]
 8028e88:	f043 0320 	orr.w	r3, r3, #32
 8028e8c:	81a3      	strh	r3, [r4, #12]
 8028e8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028e92:	e7f3      	b.n	8028e7c <__ssrefill_r+0x22>

08028e94 <_sfread_r>:
 8028e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e98:	461f      	mov	r7, r3
 8028e9a:	4613      	mov	r3, r2
 8028e9c:	437b      	muls	r3, r7
 8028e9e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028ea0:	9000      	str	r0, [sp, #0]
 8028ea2:	4688      	mov	r8, r1
 8028ea4:	4691      	mov	r9, r2
 8028ea6:	d028      	beq.n	8028efa <_sfread_r+0x66>
 8028ea8:	461e      	mov	r6, r3
 8028eaa:	f04f 0b00 	mov.w	fp, #0
 8028eae:	e9d4 1500 	ldrd	r1, r5, [r4]
 8028eb2:	42b5      	cmp	r5, r6
 8028eb4:	d30b      	bcc.n	8028ece <_sfread_r+0x3a>
 8028eb6:	4632      	mov	r2, r6
 8028eb8:	4640      	mov	r0, r8
 8028eba:	f7fe f805 	bl	8026ec8 <memcpy>
 8028ebe:	6862      	ldr	r2, [r4, #4]
 8028ec0:	6821      	ldr	r1, [r4, #0]
 8028ec2:	1b92      	subs	r2, r2, r6
 8028ec4:	4431      	add	r1, r6
 8028ec6:	6062      	str	r2, [r4, #4]
 8028ec8:	6021      	str	r1, [r4, #0]
 8028eca:	463b      	mov	r3, r7
 8028ecc:	e015      	b.n	8028efa <_sfread_r+0x66>
 8028ece:	462a      	mov	r2, r5
 8028ed0:	4640      	mov	r0, r8
 8028ed2:	9301      	str	r3, [sp, #4]
 8028ed4:	f7fd fff8 	bl	8026ec8 <memcpy>
 8028ed8:	6822      	ldr	r2, [r4, #0]
 8028eda:	9800      	ldr	r0, [sp, #0]
 8028edc:	442a      	add	r2, r5
 8028ede:	e9c4 2b00 	strd	r2, fp, [r4]
 8028ee2:	4621      	mov	r1, r4
 8028ee4:	f7ff ffb9 	bl	8028e5a <__ssrefill_r>
 8028ee8:	44a8      	add	r8, r5
 8028eea:	9b01      	ldr	r3, [sp, #4]
 8028eec:	eba6 0a05 	sub.w	sl, r6, r5
 8028ef0:	b138      	cbz	r0, 8028f02 <_sfread_r+0x6e>
 8028ef2:	441d      	add	r5, r3
 8028ef4:	1bad      	subs	r5, r5, r6
 8028ef6:	fbb5 f3f9 	udiv	r3, r5, r9
 8028efa:	4618      	mov	r0, r3
 8028efc:	b003      	add	sp, #12
 8028efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f02:	4656      	mov	r6, sl
 8028f04:	e7d3      	b.n	8028eae <_sfread_r+0x1a>
	...

08028f08 <__ssvfiscanf_r>:
 8028f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f0c:	b0df      	sub	sp, #380	@ 0x17c
 8028f0e:	af02      	add	r7, sp, #8
 8028f10:	460c      	mov	r4, r1
 8028f12:	623b      	str	r3, [r7, #32]
 8028f14:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8028f18:	6278      	str	r0, [r7, #36]	@ 0x24
 8028f1a:	049d      	lsls	r5, r3, #18
 8028f1c:	60ba      	str	r2, [r7, #8]
 8028f1e:	d406      	bmi.n	8028f2e <__ssvfiscanf_r+0x26>
 8028f20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8028f24:	818b      	strh	r3, [r1, #12]
 8028f26:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8028f28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8028f2c:	664b      	str	r3, [r1, #100]	@ 0x64
 8028f2e:	2300      	movs	r3, #0
 8028f30:	e9c7 3305 	strd	r3, r3, [r7, #20]
 8028f34:	60fb      	str	r3, [r7, #12]
 8028f36:	469b      	mov	fp, r3
 8028f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8028f3a:	61fb      	str	r3, [r7, #28]
 8028f3c:	e005      	b.n	8028f4a <__ssvfiscanf_r+0x42>
 8028f3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8028f40:	4621      	mov	r1, r4
 8028f42:	f7ff ff8a 	bl	8028e5a <__ssrefill_r>
 8028f46:	b168      	cbz	r0, 8028f64 <__ssvfiscanf_r+0x5c>
 8028f48:	60bd      	str	r5, [r7, #8]
 8028f4a:	68bd      	ldr	r5, [r7, #8]
 8028f4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8028f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8028f52:	b333      	cbz	r3, 8028fa2 <__ssvfiscanf_r+0x9a>
 8028f54:	4a75      	ldr	r2, [pc, #468]	@ (802912c <__ssvfiscanf_r+0x224>)
 8028f56:	5cd6      	ldrb	r6, [r2, r3]
 8028f58:	f016 0608 	ands.w	r6, r6, #8
 8028f5c:	d011      	beq.n	8028f82 <__ssvfiscanf_r+0x7a>
 8028f5e:	6863      	ldr	r3, [r4, #4]
 8028f60:	2b00      	cmp	r3, #0
 8028f62:	ddec      	ble.n	8028f3e <__ssvfiscanf_r+0x36>
 8028f64:	6823      	ldr	r3, [r4, #0]
 8028f66:	4971      	ldr	r1, [pc, #452]	@ (802912c <__ssvfiscanf_r+0x224>)
 8028f68:	781a      	ldrb	r2, [r3, #0]
 8028f6a:	5c8a      	ldrb	r2, [r1, r2]
 8028f6c:	0710      	lsls	r0, r2, #28
 8028f6e:	d5eb      	bpl.n	8028f48 <__ssvfiscanf_r+0x40>
 8028f70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8028f72:	3201      	adds	r2, #1
 8028f74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8028f76:	6862      	ldr	r2, [r4, #4]
 8028f78:	3301      	adds	r3, #1
 8028f7a:	3a01      	subs	r2, #1
 8028f7c:	6062      	str	r2, [r4, #4]
 8028f7e:	6023      	str	r3, [r4, #0]
 8028f80:	e7ed      	b.n	8028f5e <__ssvfiscanf_r+0x56>
 8028f82:	2b25      	cmp	r3, #37	@ 0x25
 8028f84:	d15f      	bne.n	8029046 <__ssvfiscanf_r+0x13e>
 8028f86:	62be      	str	r6, [r7, #40]	@ 0x28
 8028f88:	462a      	mov	r2, r5
 8028f8a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8028f8e:	60ba      	str	r2, [r7, #8]
 8028f90:	2b7a      	cmp	r3, #122	@ 0x7a
 8028f92:	d806      	bhi.n	8028fa2 <__ssvfiscanf_r+0x9a>
 8028f94:	2b42      	cmp	r3, #66	@ 0x42
 8028f96:	d809      	bhi.n	8028fac <__ssvfiscanf_r+0xa4>
 8028f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8028f9a:	d079      	beq.n	8029090 <__ssvfiscanf_r+0x188>
 8028f9c:	d844      	bhi.n	8029028 <__ssvfiscanf_r+0x120>
 8028f9e:	2b25      	cmp	r3, #37	@ 0x25
 8028fa0:	d050      	beq.n	8029044 <__ssvfiscanf_r+0x13c>
 8028fa2:	f1bb 0f00 	cmp.w	fp, #0
 8028fa6:	f000 810e 	beq.w	80291c6 <__ssvfiscanf_r+0x2be>
 8028faa:	e107      	b.n	80291bc <__ssvfiscanf_r+0x2b4>
 8028fac:	3b43      	subs	r3, #67	@ 0x43
 8028fae:	2b37      	cmp	r3, #55	@ 0x37
 8028fb0:	f200 80fd 	bhi.w	80291ae <__ssvfiscanf_r+0x2a6>
 8028fb4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8028fb8:	00a40117 	.word	0x00a40117
 8028fbc:	00fb00fb 	.word	0x00fb00fb
 8028fc0:	00fb00fb 	.word	0x00fb00fb
 8028fc4:	00fb00fb 	.word	0x00fb00fb
 8028fc8:	008e00fb 	.word	0x008e00fb
 8028fcc:	00fb00fb 	.word	0x00fb00fb
 8028fd0:	00fb00a8 	.word	0x00fb00a8
 8028fd4:	00fb00fb 	.word	0x00fb00fb
 8028fd8:	00fb00c0 	.word	0x00fb00c0
 8028fdc:	00fb00fb 	.word	0x00fb00fb
 8028fe0:	00b400fb 	.word	0x00b400fb
 8028fe4:	00fb00fb 	.word	0x00fb00fb
 8028fe8:	00fb010d 	.word	0x00fb010d
 8028fec:	00fb00fb 	.word	0x00fb00fb
 8028ff0:	00fb00fb 	.word	0x00fb00fb
 8028ff4:	00fb00fb 	.word	0x00fb00fb
 8028ff8:	00a60119 	.word	0x00a60119
 8028ffc:	00fb00fb 	.word	0x00fb00fb
 8029000:	008100fb 	.word	0x008100fb
 8029004:	008e013e 	.word	0x008e013e
 8029008:	007300fb 	.word	0x007300fb
 802900c:	01200095 	.word	0x01200095
 8029010:	011d00aa 	.word	0x011d00aa
 8029014:	00fb00fb 	.word	0x00fb00fb
 8029018:	009200c2 	.word	0x009200c2
 802901c:	00fb00b0 	.word	0x00fb00b0
 8029020:	00b400fb 	.word	0x00b400fb
 8029024:	009200fb 	.word	0x009200fb
 8029028:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 802902c:	2a09      	cmp	r2, #9
 802902e:	d8b8      	bhi.n	8028fa2 <__ssvfiscanf_r+0x9a>
 8029030:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 8029034:	d1b5      	bne.n	8028fa2 <__ssvfiscanf_r+0x9a>
 8029036:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8029038:	220a      	movs	r2, #10
 802903a:	fb02 3301 	mla	r3, r2, r1, r3
 802903e:	3b30      	subs	r3, #48	@ 0x30
 8029040:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029042:	e02a      	b.n	802909a <__ssvfiscanf_r+0x192>
 8029044:	68bd      	ldr	r5, [r7, #8]
 8029046:	6863      	ldr	r3, [r4, #4]
 8029048:	2b00      	cmp	r3, #0
 802904a:	dd0e      	ble.n	802906a <__ssvfiscanf_r+0x162>
 802904c:	6823      	ldr	r3, [r4, #0]
 802904e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8029052:	7819      	ldrb	r1, [r3, #0]
 8029054:	4291      	cmp	r1, r2
 8029056:	d1a4      	bne.n	8028fa2 <__ssvfiscanf_r+0x9a>
 8029058:	3301      	adds	r3, #1
 802905a:	6862      	ldr	r2, [r4, #4]
 802905c:	6023      	str	r3, [r4, #0]
 802905e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029060:	3a01      	subs	r2, #1
 8029062:	3301      	adds	r3, #1
 8029064:	6062      	str	r2, [r4, #4]
 8029066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029068:	e76e      	b.n	8028f48 <__ssvfiscanf_r+0x40>
 802906a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802906c:	4621      	mov	r1, r4
 802906e:	f7ff fef4 	bl	8028e5a <__ssrefill_r>
 8029072:	2800      	cmp	r0, #0
 8029074:	d0ea      	beq.n	802904c <__ssvfiscanf_r+0x144>
 8029076:	69fb      	ldr	r3, [r7, #28]
 8029078:	b113      	cbz	r3, 8029080 <__ssvfiscanf_r+0x178>
 802907a:	89a3      	ldrh	r3, [r4, #12]
 802907c:	065b      	lsls	r3, r3, #25
 802907e:	d590      	bpl.n	8028fa2 <__ssvfiscanf_r+0x9a>
 8029080:	f1bb 0f00 	cmp.w	fp, #0
 8029084:	f040 8654 	bne.w	8029d30 <__ssvfiscanf_r+0xe28>
 8029088:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802908c:	61fb      	str	r3, [r7, #28]
 802908e:	e09a      	b.n	80291c6 <__ssvfiscanf_r+0x2be>
 8029090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029092:	4333      	orrs	r3, r6
 8029094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029096:	d184      	bne.n	8028fa2 <__ssvfiscanf_r+0x9a>
 8029098:	2610      	movs	r6, #16
 802909a:	68bd      	ldr	r5, [r7, #8]
 802909c:	e774      	b.n	8028f88 <__ssvfiscanf_r+0x80>
 802909e:	0731      	lsls	r1, r6, #28
 80290a0:	f47f af7f 	bne.w	8028fa2 <__ssvfiscanf_r+0x9a>
 80290a4:	786b      	ldrb	r3, [r5, #1]
 80290a6:	2b6c      	cmp	r3, #108	@ 0x6c
 80290a8:	d104      	bne.n	80290b4 <__ssvfiscanf_r+0x1ac>
 80290aa:	1cab      	adds	r3, r5, #2
 80290ac:	60bb      	str	r3, [r7, #8]
 80290ae:	f046 0602 	orr.w	r6, r6, #2
 80290b2:	e7f2      	b.n	802909a <__ssvfiscanf_r+0x192>
 80290b4:	f046 0601 	orr.w	r6, r6, #1
 80290b8:	e7ef      	b.n	802909a <__ssvfiscanf_r+0x192>
 80290ba:	0732      	lsls	r2, r6, #28
 80290bc:	f47f af71 	bne.w	8028fa2 <__ssvfiscanf_r+0x9a>
 80290c0:	786b      	ldrb	r3, [r5, #1]
 80290c2:	2b68      	cmp	r3, #104	@ 0x68
 80290c4:	bf03      	ittte	eq
 80290c6:	1cab      	addeq	r3, r5, #2
 80290c8:	60bb      	streq	r3, [r7, #8]
 80290ca:	f046 0608 	orreq.w	r6, r6, #8
 80290ce:	f046 0604 	orrne.w	r6, r6, #4
 80290d2:	e7e2      	b.n	802909a <__ssvfiscanf_r+0x192>
 80290d4:	0733      	lsls	r3, r6, #28
 80290d6:	f47f af64 	bne.w	8028fa2 <__ssvfiscanf_r+0x9a>
 80290da:	e7e8      	b.n	80290ae <__ssvfiscanf_r+0x1a6>
 80290dc:	0735      	lsls	r5, r6, #28
 80290de:	d0dc      	beq.n	802909a <__ssvfiscanf_r+0x192>
 80290e0:	e75f      	b.n	8028fa2 <__ssvfiscanf_r+0x9a>
 80290e2:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 80290e6:	f47f af5c 	bne.w	8028fa2 <__ssvfiscanf_r+0x9a>
 80290ea:	f1bb 0f00 	cmp.w	fp, #0
 80290ee:	d104      	bne.n	80290fa <__ssvfiscanf_r+0x1f2>
 80290f0:	b082      	sub	sp, #8
 80290f2:	f10d 0b08 	add.w	fp, sp, #8
 80290f6:	e9cb 3300 	strd	r3, r3, [fp]
 80290fa:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 80290fe:	e7cc      	b.n	802909a <__ssvfiscanf_r+0x192>
 8029100:	f046 0601 	orr.w	r6, r6, #1
 8029104:	4b0a      	ldr	r3, [pc, #40]	@ (8029130 <__ssvfiscanf_r+0x228>)
 8029106:	e008      	b.n	802911a <__ssvfiscanf_r+0x212>
 8029108:	f046 0601 	orr.w	r6, r6, #1
 802910c:	4b09      	ldr	r3, [pc, #36]	@ (8029134 <__ssvfiscanf_r+0x22c>)
 802910e:	60fb      	str	r3, [r7, #12]
 8029110:	2308      	movs	r3, #8
 8029112:	617b      	str	r3, [r7, #20]
 8029114:	2503      	movs	r5, #3
 8029116:	e012      	b.n	802913e <__ssvfiscanf_r+0x236>
 8029118:	4b06      	ldr	r3, [pc, #24]	@ (8029134 <__ssvfiscanf_r+0x22c>)
 802911a:	60fb      	str	r3, [r7, #12]
 802911c:	230a      	movs	r3, #10
 802911e:	e7f8      	b.n	8029112 <__ssvfiscanf_r+0x20a>
 8029120:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8029124:	4b03      	ldr	r3, [pc, #12]	@ (8029134 <__ssvfiscanf_r+0x22c>)
 8029126:	60fb      	str	r3, [r7, #12]
 8029128:	2310      	movs	r3, #16
 802912a:	e7f2      	b.n	8029112 <__ssvfiscanf_r+0x20a>
 802912c:	08034405 	.word	0x08034405
 8029130:	08025159 	.word	0x08025159
 8029134:	0802df59 	.word	0x0802df59
 8029138:	f046 0601 	orr.w	r6, r6, #1
 802913c:	2502      	movs	r5, #2
 802913e:	6863      	ldr	r3, [r4, #4]
 8029140:	2b00      	cmp	r3, #0
 8029142:	dd7b      	ble.n	802923c <__ssvfiscanf_r+0x334>
 8029144:	0671      	lsls	r1, r6, #25
 8029146:	d407      	bmi.n	8029158 <__ssvfiscanf_r+0x250>
 8029148:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 80294d4 <__ssvfiscanf_r+0x5cc>
 802914c:	6823      	ldr	r3, [r4, #0]
 802914e:	781a      	ldrb	r2, [r3, #0]
 8029150:	f818 2002 	ldrb.w	r2, [r8, r2]
 8029154:	0712      	lsls	r2, r2, #28
 8029156:	d479      	bmi.n	802924c <__ssvfiscanf_r+0x344>
 8029158:	2d02      	cmp	r5, #2
 802915a:	f000 836f 	beq.w	802983c <__ssvfiscanf_r+0x934>
 802915e:	2d03      	cmp	r5, #3
 8029160:	f000 84f6 	beq.w	8029b50 <__ssvfiscanf_r+0xc48>
 8029164:	f006 0310 	and.w	r3, r6, #16
 8029168:	2d01      	cmp	r5, #1
 802916a:	613b      	str	r3, [r7, #16]
 802916c:	f006 0501 	and.w	r5, r6, #1
 8029170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029172:	f000 81b1 	beq.w	80294d8 <__ssvfiscanf_r+0x5d0>
 8029176:	2b01      	cmp	r3, #1
 8029178:	bf38      	it	cc
 802917a:	2301      	movcc	r3, #1
 802917c:	4698      	mov	r8, r3
 802917e:	693b      	ldr	r3, [r7, #16]
 8029180:	2d00      	cmp	r5, #0
 8029182:	f000 813b 	beq.w	80293fc <__ssvfiscanf_r+0x4f4>
 8029186:	2b00      	cmp	r3, #0
 8029188:	f040 80d8 	bne.w	802933c <__ssvfiscanf_r+0x434>
 802918c:	6a3b      	ldr	r3, [r7, #32]
 802918e:	0636      	lsls	r6, r6, #24
 8029190:	f853 5b04 	ldr.w	r5, [r3], #4
 8029194:	623b      	str	r3, [r7, #32]
 8029196:	f140 80d7 	bpl.w	8029348 <__ssvfiscanf_r+0x440>
 802919a:	b145      	cbz	r5, 80291ae <__ssvfiscanf_r+0x2a6>
 802919c:	2080      	movs	r0, #128	@ 0x80
 802919e:	f7fe fe9d 	bl	8027edc <malloc>
 80291a2:	4606      	mov	r6, r0
 80291a4:	2800      	cmp	r0, #0
 80291a6:	d164      	bne.n	8029272 <__ssvfiscanf_r+0x36a>
 80291a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80291ac:	61fb      	str	r3, [r7, #28]
 80291ae:	f1bb 0f00 	cmp.w	fp, #0
 80291b2:	d008      	beq.n	80291c6 <__ssvfiscanf_r+0x2be>
 80291b4:	69fb      	ldr	r3, [r7, #28]
 80291b6:	3301      	adds	r3, #1
 80291b8:	f000 85ba 	beq.w	8029d30 <__ssvfiscanf_r+0xe28>
 80291bc:	f8db 0000 	ldr.w	r0, [fp]
 80291c0:	b108      	cbz	r0, 80291c6 <__ssvfiscanf_r+0x2be>
 80291c2:	f7fe fe93 	bl	8027eec <free>
 80291c6:	69f8      	ldr	r0, [r7, #28]
 80291c8:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 80291cc:	46bd      	mov	sp, r7
 80291ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80291d2:	68b9      	ldr	r1, [r7, #8]
 80291d4:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80291d8:	f003 fe67 	bl	802ceaa <__sccl>
 80291dc:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 80291e0:	60b8      	str	r0, [r7, #8]
 80291e2:	2501      	movs	r5, #1
 80291e4:	e7ab      	b.n	802913e <__ssvfiscanf_r+0x236>
 80291e6:	f046 0601 	orr.w	r6, r6, #1
 80291ea:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 80291ee:	2500      	movs	r5, #0
 80291f0:	e7a5      	b.n	802913e <__ssvfiscanf_r+0x236>
 80291f2:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 80291f6:	e795      	b.n	8029124 <__ssvfiscanf_r+0x21c>
 80291f8:	06f0      	lsls	r0, r6, #27
 80291fa:	f53f aea6 	bmi.w	8028f4a <__ssvfiscanf_r+0x42>
 80291fe:	6a3a      	ldr	r2, [r7, #32]
 8029200:	0731      	lsls	r1, r6, #28
 8029202:	f852 3b04 	ldr.w	r3, [r2], #4
 8029206:	623a      	str	r2, [r7, #32]
 8029208:	d502      	bpl.n	8029210 <__ssvfiscanf_r+0x308>
 802920a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802920c:	701a      	strb	r2, [r3, #0]
 802920e:	e69c      	b.n	8028f4a <__ssvfiscanf_r+0x42>
 8029210:	0772      	lsls	r2, r6, #29
 8029212:	d502      	bpl.n	802921a <__ssvfiscanf_r+0x312>
 8029214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8029216:	801a      	strh	r2, [r3, #0]
 8029218:	e697      	b.n	8028f4a <__ssvfiscanf_r+0x42>
 802921a:	07f5      	lsls	r5, r6, #31
 802921c:	d502      	bpl.n	8029224 <__ssvfiscanf_r+0x31c>
 802921e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8029220:	601a      	str	r2, [r3, #0]
 8029222:	e692      	b.n	8028f4a <__ssvfiscanf_r+0x42>
 8029224:	07b0      	lsls	r0, r6, #30
 8029226:	d5fa      	bpl.n	802921e <__ssvfiscanf_r+0x316>
 8029228:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802922a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802922c:	17d2      	asrs	r2, r2, #31
 802922e:	e9c3 1200 	strd	r1, r2, [r3]
 8029232:	e68a      	b.n	8028f4a <__ssvfiscanf_r+0x42>
 8029234:	4ba6      	ldr	r3, [pc, #664]	@ (80294d0 <__ssvfiscanf_r+0x5c8>)
 8029236:	60fb      	str	r3, [r7, #12]
 8029238:	2300      	movs	r3, #0
 802923a:	e76a      	b.n	8029112 <__ssvfiscanf_r+0x20a>
 802923c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802923e:	4621      	mov	r1, r4
 8029240:	f7ff fe0b 	bl	8028e5a <__ssrefill_r>
 8029244:	2800      	cmp	r0, #0
 8029246:	f43f af7d 	beq.w	8029144 <__ssvfiscanf_r+0x23c>
 802924a:	e714      	b.n	8029076 <__ssvfiscanf_r+0x16e>
 802924c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802924e:	3201      	adds	r2, #1
 8029250:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8029252:	6862      	ldr	r2, [r4, #4]
 8029254:	3a01      	subs	r2, #1
 8029256:	2a00      	cmp	r2, #0
 8029258:	6062      	str	r2, [r4, #4]
 802925a:	dd02      	ble.n	8029262 <__ssvfiscanf_r+0x35a>
 802925c:	3301      	adds	r3, #1
 802925e:	6023      	str	r3, [r4, #0]
 8029260:	e774      	b.n	802914c <__ssvfiscanf_r+0x244>
 8029262:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029264:	4621      	mov	r1, r4
 8029266:	f7ff fdf8 	bl	8028e5a <__ssrefill_r>
 802926a:	2800      	cmp	r0, #0
 802926c:	f43f af6e 	beq.w	802914c <__ssvfiscanf_r+0x244>
 8029270:	e701      	b.n	8029076 <__ssvfiscanf_r+0x16e>
 8029272:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8029276:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802927a:	6028      	str	r0, [r5, #0]
 802927c:	4599      	cmp	r9, r3
 802927e:	d314      	bcc.n	80292aa <__ssvfiscanf_r+0x3a2>
 8029280:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8029284:	4293      	cmp	r3, r2
 8029286:	f200 8553 	bhi.w	8029d30 <__ssvfiscanf_r+0xe28>
 802928a:	3308      	adds	r3, #8
 802928c:	fa1f fa83 	uxth.w	sl, r3
 8029290:	f8db 0000 	ldr.w	r0, [fp]
 8029294:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8029298:	f003 fdaa 	bl	802cdf0 <realloc>
 802929c:	2800      	cmp	r0, #0
 802929e:	f000 8547 	beq.w	8029d30 <__ssvfiscanf_r+0xe28>
 80292a2:	f8cb 0000 	str.w	r0, [fp]
 80292a6:	f8ab a004 	strh.w	sl, [fp, #4]
 80292aa:	f8db 3000 	ldr.w	r3, [fp]
 80292ae:	f109 0201 	add.w	r2, r9, #1
 80292b2:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80292b6:	46aa      	mov	sl, r5
 80292b8:	f8ab 2006 	strh.w	r2, [fp, #6]
 80292bc:	4635      	mov	r5, r6
 80292be:	f04f 0920 	mov.w	r9, #32
 80292c2:	2200      	movs	r2, #0
 80292c4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80292c6:	f7fd fd4b 	bl	8026d60 <__locale_mb_cur_max>
 80292ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80292cc:	4290      	cmp	r0, r2
 80292ce:	f43f aed2 	beq.w	8029076 <__ssvfiscanf_r+0x16e>
 80292d2:	6821      	ldr	r1, [r4, #0]
 80292d4:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 80292d8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80292dc:	f80c 0002 	strb.w	r0, [ip, r2]
 80292e0:	1c53      	adds	r3, r2, #1
 80292e2:	6862      	ldr	r2, [r4, #4]
 80292e4:	3a01      	subs	r2, #1
 80292e6:	e9c4 1200 	strd	r1, r2, [r4]
 80292ea:	69ba      	ldr	r2, [r7, #24]
 80292ec:	2a03      	cmp	r2, #3
 80292ee:	d102      	bne.n	80292f6 <__ssvfiscanf_r+0x3ee>
 80292f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80292f2:	2a04      	cmp	r2, #4
 80292f4:	d007      	beq.n	8029306 <__ssvfiscanf_r+0x3fe>
 80292f6:	2208      	movs	r2, #8
 80292f8:	2100      	movs	r1, #0
 80292fa:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80292fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029300:	f7fc fba6 	bl	8025a50 <memset>
 8029304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029306:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 802930a:	9200      	str	r2, [sp, #0]
 802930c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802930e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029310:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8029314:	4629      	mov	r1, r5
 8029316:	f005 f925 	bl	802e564 <_mbrtowc_r>
 802931a:	4603      	mov	r3, r0
 802931c:	61b8      	str	r0, [r7, #24]
 802931e:	1c58      	adds	r0, r3, #1
 8029320:	f43f aea9 	beq.w	8029076 <__ssvfiscanf_r+0x16e>
 8029324:	461a      	mov	r2, r3
 8029326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029328:	b9b2      	cbnz	r2, 8029358 <__ssvfiscanf_r+0x450>
 802932a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802932c:	441a      	add	r2, r3
 802932e:	4613      	mov	r3, r2
 8029330:	693a      	ldr	r2, [r7, #16]
 8029332:	b172      	cbz	r2, 8029352 <__ssvfiscanf_r+0x44a>
 8029334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029336:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802933a:	e019      	b.n	8029370 <__ssvfiscanf_r+0x468>
 802933c:	f04f 0900 	mov.w	r9, #0
 8029340:	464e      	mov	r6, r9
 8029342:	46ca      	mov	sl, r9
 8029344:	464d      	mov	r5, r9
 8029346:	e7bc      	b.n	80292c2 <__ssvfiscanf_r+0x3ba>
 8029348:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802934c:	464e      	mov	r6, r9
 802934e:	46ca      	mov	sl, r9
 8029350:	e7b7      	b.n	80292c2 <__ssvfiscanf_r+0x3ba>
 8029352:	693a      	ldr	r2, [r7, #16]
 8029354:	602a      	str	r2, [r5, #0]
 8029356:	e7ed      	b.n	8029334 <__ssvfiscanf_r+0x42c>
 8029358:	69ba      	ldr	r2, [r7, #24]
 802935a:	3202      	adds	r2, #2
 802935c:	d024      	beq.n	80293a8 <__ssvfiscanf_r+0x4a0>
 802935e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8029360:	441a      	add	r2, r3
 8029362:	69bb      	ldr	r3, [r7, #24]
 8029364:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8029366:	2b03      	cmp	r3, #3
 8029368:	d1e5      	bne.n	8029336 <__ssvfiscanf_r+0x42e>
 802936a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802936c:	2b04      	cmp	r3, #4
 802936e:	d1e2      	bne.n	8029336 <__ssvfiscanf_r+0x42e>
 8029370:	693b      	ldr	r3, [r7, #16]
 8029372:	b9bb      	cbnz	r3, 80293a4 <__ssvfiscanf_r+0x49c>
 8029374:	f1ba 0f00 	cmp.w	sl, #0
 8029378:	d013      	beq.n	80293a2 <__ssvfiscanf_r+0x49a>
 802937a:	1bab      	subs	r3, r5, r6
 802937c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8029380:	d80f      	bhi.n	80293a2 <__ssvfiscanf_r+0x49a>
 8029382:	4630      	mov	r0, r6
 8029384:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8029388:	62bb      	str	r3, [r7, #40]	@ 0x28
 802938a:	f003 fd31 	bl	802cdf0 <realloc>
 802938e:	4606      	mov	r6, r0
 8029390:	2800      	cmp	r0, #0
 8029392:	f43f af09 	beq.w	80291a8 <__ssvfiscanf_r+0x2a0>
 8029396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029398:	f8ca 0000 	str.w	r0, [sl]
 802939c:	18c5      	adds	r5, r0, r3
 802939e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80293a2:	3504      	adds	r5, #4
 80293a4:	2200      	movs	r2, #0
 80293a6:	e000      	b.n	80293aa <__ssvfiscanf_r+0x4a2>
 80293a8:	461a      	mov	r2, r3
 80293aa:	6863      	ldr	r3, [r4, #4]
 80293ac:	2b00      	cmp	r3, #0
 80293ae:	dc13      	bgt.n	80293d8 <__ssvfiscanf_r+0x4d0>
 80293b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80293b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80293b4:	4621      	mov	r1, r4
 80293b6:	f7ff fd50 	bl	8028e5a <__ssrefill_r>
 80293ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80293bc:	b160      	cbz	r0, 80293d8 <__ssvfiscanf_r+0x4d0>
 80293be:	2a00      	cmp	r2, #0
 80293c0:	f47f ae59 	bne.w	8029076 <__ssvfiscanf_r+0x16e>
 80293c4:	f1ba 0f00 	cmp.w	sl, #0
 80293c8:	d10b      	bne.n	80293e2 <__ssvfiscanf_r+0x4da>
 80293ca:	693b      	ldr	r3, [r7, #16]
 80293cc:	2b00      	cmp	r3, #0
 80293ce:	f47f adbc 	bne.w	8028f4a <__ssvfiscanf_r+0x42>
 80293d2:	69fb      	ldr	r3, [r7, #28]
 80293d4:	3301      	adds	r3, #1
 80293d6:	e5b0      	b.n	8028f3a <__ssvfiscanf_r+0x32>
 80293d8:	f1b8 0f00 	cmp.w	r8, #0
 80293dc:	f47f af72 	bne.w	80292c4 <__ssvfiscanf_r+0x3bc>
 80293e0:	e7f0      	b.n	80293c4 <__ssvfiscanf_r+0x4bc>
 80293e2:	1ba9      	subs	r1, r5, r6
 80293e4:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80293e8:	d9ef      	bls.n	80293ca <__ssvfiscanf_r+0x4c2>
 80293ea:	f8da 0000 	ldr.w	r0, [sl]
 80293ee:	f003 fcff 	bl	802cdf0 <realloc>
 80293f2:	2800      	cmp	r0, #0
 80293f4:	d0e9      	beq.n	80293ca <__ssvfiscanf_r+0x4c2>
 80293f6:	f8ca 0000 	str.w	r0, [sl]
 80293fa:	e7e6      	b.n	80293ca <__ssvfiscanf_r+0x4c2>
 80293fc:	b1db      	cbz	r3, 8029436 <__ssvfiscanf_r+0x52e>
 80293fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8029402:	4598      	cmp	r8, r3
 8029404:	dd10      	ble.n	8029428 <__ssvfiscanf_r+0x520>
 8029406:	441a      	add	r2, r3
 8029408:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802940a:	6022      	str	r2, [r4, #0]
 802940c:	4621      	mov	r1, r4
 802940e:	441d      	add	r5, r3
 8029410:	eba8 0803 	sub.w	r8, r8, r3
 8029414:	f7ff fd21 	bl	8028e5a <__ssrefill_r>
 8029418:	2800      	cmp	r0, #0
 802941a:	d0f0      	beq.n	80293fe <__ssvfiscanf_r+0x4f6>
 802941c:	2d00      	cmp	r5, #0
 802941e:	f43f ae2a 	beq.w	8029076 <__ssvfiscanf_r+0x16e>
 8029422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029424:	442b      	add	r3, r5
 8029426:	e201      	b.n	802982c <__ssvfiscanf_r+0x924>
 8029428:	eba3 0308 	sub.w	r3, r3, r8
 802942c:	4442      	add	r2, r8
 802942e:	4445      	add	r5, r8
 8029430:	6063      	str	r3, [r4, #4]
 8029432:	6022      	str	r2, [r4, #0]
 8029434:	e7f5      	b.n	8029422 <__ssvfiscanf_r+0x51a>
 8029436:	6a3b      	ldr	r3, [r7, #32]
 8029438:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802943c:	f853 5b04 	ldr.w	r5, [r3], #4
 8029440:	623b      	str	r3, [r7, #32]
 8029442:	d02d      	beq.n	80294a0 <__ssvfiscanf_r+0x598>
 8029444:	2d00      	cmp	r5, #0
 8029446:	f43f adac 	beq.w	8028fa2 <__ssvfiscanf_r+0x9a>
 802944a:	4640      	mov	r0, r8
 802944c:	f7fe fd46 	bl	8027edc <malloc>
 8029450:	4681      	mov	r9, r0
 8029452:	2800      	cmp	r0, #0
 8029454:	f43f ae14 	beq.w	8029080 <__ssvfiscanf_r+0x178>
 8029458:	f8bb a006 	ldrh.w	sl, [fp, #6]
 802945c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8029460:	6028      	str	r0, [r5, #0]
 8029462:	45b2      	cmp	sl, r6
 8029464:	d312      	bcc.n	802948c <__ssvfiscanf_r+0x584>
 8029466:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802946a:	429e      	cmp	r6, r3
 802946c:	f200 8460 	bhi.w	8029d30 <__ssvfiscanf_r+0xe28>
 8029470:	3608      	adds	r6, #8
 8029472:	b2b6      	uxth	r6, r6
 8029474:	f8db 0000 	ldr.w	r0, [fp]
 8029478:	00b1      	lsls	r1, r6, #2
 802947a:	f003 fcb9 	bl	802cdf0 <realloc>
 802947e:	2800      	cmp	r0, #0
 8029480:	f000 8456 	beq.w	8029d30 <__ssvfiscanf_r+0xe28>
 8029484:	f8cb 0000 	str.w	r0, [fp]
 8029488:	f8ab 6004 	strh.w	r6, [fp, #4]
 802948c:	f8db 3000 	ldr.w	r3, [fp]
 8029490:	f10a 0201 	add.w	r2, sl, #1
 8029494:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8029498:	462e      	mov	r6, r5
 802949a:	f8ab 2006 	strh.w	r2, [fp, #6]
 802949e:	464d      	mov	r5, r9
 80294a0:	9400      	str	r4, [sp, #0]
 80294a2:	4629      	mov	r1, r5
 80294a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80294a6:	4643      	mov	r3, r8
 80294a8:	2201      	movs	r2, #1
 80294aa:	f7ff fcf3 	bl	8028e94 <_sfread_r>
 80294ae:	4605      	mov	r5, r0
 80294b0:	2800      	cmp	r0, #0
 80294b2:	f43f ade0 	beq.w	8029076 <__ssvfiscanf_r+0x16e>
 80294b6:	b13e      	cbz	r6, 80294c8 <__ssvfiscanf_r+0x5c0>
 80294b8:	4580      	cmp	r8, r0
 80294ba:	d905      	bls.n	80294c8 <__ssvfiscanf_r+0x5c0>
 80294bc:	4601      	mov	r1, r0
 80294be:	6830      	ldr	r0, [r6, #0]
 80294c0:	f003 fc96 	bl	802cdf0 <realloc>
 80294c4:	b100      	cbz	r0, 80294c8 <__ssvfiscanf_r+0x5c0>
 80294c6:	6030      	str	r0, [r6, #0]
 80294c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80294ca:	442b      	add	r3, r5
 80294cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80294ce:	e780      	b.n	80293d2 <__ssvfiscanf_r+0x4ca>
 80294d0:	08025159 	.word	0x08025159
 80294d4:	08034405 	.word	0x08034405
 80294d8:	2b00      	cmp	r3, #0
 80294da:	bf08      	it	eq
 80294dc:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 80294e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80294e2:	693b      	ldr	r3, [r7, #16]
 80294e4:	2d00      	cmp	r5, #0
 80294e6:	f000 8100 	beq.w	80296ea <__ssvfiscanf_r+0x7e2>
 80294ea:	2b00      	cmp	r3, #0
 80294ec:	f040 80a5 	bne.w	802963a <__ssvfiscanf_r+0x732>
 80294f0:	6a3b      	ldr	r3, [r7, #32]
 80294f2:	0631      	lsls	r1, r6, #24
 80294f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80294f8:	623b      	str	r3, [r7, #32]
 80294fa:	f140 80a5 	bpl.w	8029648 <__ssvfiscanf_r+0x740>
 80294fe:	2d00      	cmp	r5, #0
 8029500:	f43f ae55 	beq.w	80291ae <__ssvfiscanf_r+0x2a6>
 8029504:	2080      	movs	r0, #128	@ 0x80
 8029506:	f7fe fce9 	bl	8027edc <malloc>
 802950a:	4680      	mov	r8, r0
 802950c:	2800      	cmp	r0, #0
 802950e:	f43f ae4b 	beq.w	80291a8 <__ssvfiscanf_r+0x2a0>
 8029512:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 8029516:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802951a:	6028      	str	r0, [r5, #0]
 802951c:	429e      	cmp	r6, r3
 802951e:	d314      	bcc.n	802954a <__ssvfiscanf_r+0x642>
 8029520:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8029524:	4293      	cmp	r3, r2
 8029526:	f200 8403 	bhi.w	8029d30 <__ssvfiscanf_r+0xe28>
 802952a:	3308      	adds	r3, #8
 802952c:	fa1f f983 	uxth.w	r9, r3
 8029530:	f8db 0000 	ldr.w	r0, [fp]
 8029534:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8029538:	f003 fc5a 	bl	802cdf0 <realloc>
 802953c:	2800      	cmp	r0, #0
 802953e:	f000 83f7 	beq.w	8029d30 <__ssvfiscanf_r+0xe28>
 8029542:	f8cb 0000 	str.w	r0, [fp]
 8029546:	f8ab 9004 	strh.w	r9, [fp, #4]
 802954a:	f8db 3000 	ldr.w	r3, [fp]
 802954e:	1c72      	adds	r2, r6, #1
 8029550:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8029554:	46aa      	mov	sl, r5
 8029556:	f8ab 2006 	strh.w	r2, [fp, #6]
 802955a:	4645      	mov	r5, r8
 802955c:	f04f 0920 	mov.w	r9, #32
 8029560:	2600      	movs	r6, #0
 8029562:	f7fd fbfd 	bl	8026d60 <__locale_mb_cur_max>
 8029566:	4286      	cmp	r6, r0
 8029568:	f43f ad85 	beq.w	8029076 <__ssvfiscanf_r+0x16e>
 802956c:	1c73      	adds	r3, r6, #1
 802956e:	607b      	str	r3, [r7, #4]
 8029570:	6823      	ldr	r3, [r4, #0]
 8029572:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8029576:	f813 2b01 	ldrb.w	r2, [r3], #1
 802957a:	558a      	strb	r2, [r1, r6]
 802957c:	6862      	ldr	r2, [r4, #4]
 802957e:	3a01      	subs	r2, #1
 8029580:	e9c4 3200 	strd	r3, r2, [r4]
 8029584:	69bb      	ldr	r3, [r7, #24]
 8029586:	2b03      	cmp	r3, #3
 8029588:	d102      	bne.n	8029590 <__ssvfiscanf_r+0x688>
 802958a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802958c:	2b04      	cmp	r3, #4
 802958e:	d005      	beq.n	802959c <__ssvfiscanf_r+0x694>
 8029590:	2208      	movs	r2, #8
 8029592:	2100      	movs	r1, #0
 8029594:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8029598:	f7fc fa5a 	bl	8025a50 <memset>
 802959c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80295a0:	9300      	str	r3, [sp, #0]
 80295a2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80295a6:	687b      	ldr	r3, [r7, #4]
 80295a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80295aa:	4629      	mov	r1, r5
 80295ac:	f004 ffda 	bl	802e564 <_mbrtowc_r>
 80295b0:	1c42      	adds	r2, r0, #1
 80295b2:	61b8      	str	r0, [r7, #24]
 80295b4:	f43f ad5f 	beq.w	8029076 <__ssvfiscanf_r+0x16e>
 80295b8:	2800      	cmp	r0, #0
 80295ba:	d14a      	bne.n	8029652 <__ssvfiscanf_r+0x74a>
 80295bc:	6028      	str	r0, [r5, #0]
 80295be:	682e      	ldr	r6, [r5, #0]
 80295c0:	1c73      	adds	r3, r6, #1
 80295c2:	d056      	beq.n	8029672 <__ssvfiscanf_r+0x76a>
 80295c4:	2208      	movs	r2, #8
 80295c6:	2100      	movs	r1, #0
 80295c8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80295cc:	f7fc fa40 	bl	8025a50 <memset>
 80295d0:	4b99      	ldr	r3, [pc, #612]	@ (8029838 <__ssvfiscanf_r+0x930>)
 80295d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80295d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80295d8:	603b      	str	r3, [r7, #0]
 80295da:	4632      	mov	r2, r6
 80295dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80295e0:	683e      	ldr	r6, [r7, #0]
 80295e2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80295e6:	47b0      	blx	r6
 80295e8:	2801      	cmp	r0, #1
 80295ea:	d144      	bne.n	8029676 <__ssvfiscanf_r+0x76e>
 80295ec:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80295f0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80295f4:	5c9b      	ldrb	r3, [r3, r2]
 80295f6:	2b00      	cmp	r3, #0
 80295f8:	d148      	bne.n	802968c <__ssvfiscanf_r+0x784>
 80295fa:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 80295fe:	687b      	ldr	r3, [r7, #4]
 8029600:	2b00      	cmp	r3, #0
 8029602:	d13a      	bne.n	802967a <__ssvfiscanf_r+0x772>
 8029604:	693b      	ldr	r3, [r7, #16]
 8029606:	2b00      	cmp	r3, #0
 8029608:	f47f ac9f 	bne.w	8028f4a <__ssvfiscanf_r+0x42>
 802960c:	602b      	str	r3, [r5, #0]
 802960e:	f1ba 0f00 	cmp.w	sl, #0
 8029612:	f43f aede 	beq.w	80293d2 <__ssvfiscanf_r+0x4ca>
 8029616:	eba5 0108 	sub.w	r1, r5, r8
 802961a:	108b      	asrs	r3, r1, #2
 802961c:	3301      	adds	r3, #1
 802961e:	4599      	cmp	r9, r3
 8029620:	f67f aed7 	bls.w	80293d2 <__ssvfiscanf_r+0x4ca>
 8029624:	f8da 0000 	ldr.w	r0, [sl]
 8029628:	3104      	adds	r1, #4
 802962a:	f003 fbe1 	bl	802cdf0 <realloc>
 802962e:	2800      	cmp	r0, #0
 8029630:	f43f aecf 	beq.w	80293d2 <__ssvfiscanf_r+0x4ca>
 8029634:	f8ca 0000 	str.w	r0, [sl]
 8029638:	e6cb      	b.n	80293d2 <__ssvfiscanf_r+0x4ca>
 802963a:	f04f 0900 	mov.w	r9, #0
 802963e:	46c8      	mov	r8, r9
 8029640:	46ca      	mov	sl, r9
 8029642:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8029646:	e78b      	b.n	8029560 <__ssvfiscanf_r+0x658>
 8029648:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802964c:	46c8      	mov	r8, r9
 802964e:	46ca      	mov	sl, r9
 8029650:	e786      	b.n	8029560 <__ssvfiscanf_r+0x658>
 8029652:	69bb      	ldr	r3, [r7, #24]
 8029654:	3302      	adds	r3, #2
 8029656:	d1b2      	bne.n	80295be <__ssvfiscanf_r+0x6b6>
 8029658:	687e      	ldr	r6, [r7, #4]
 802965a:	6863      	ldr	r3, [r4, #4]
 802965c:	2b00      	cmp	r3, #0
 802965e:	dc3f      	bgt.n	80296e0 <__ssvfiscanf_r+0x7d8>
 8029660:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029662:	4621      	mov	r1, r4
 8029664:	f7ff fbf9 	bl	8028e5a <__ssrefill_r>
 8029668:	2800      	cmp	r0, #0
 802966a:	d039      	beq.n	80296e0 <__ssvfiscanf_r+0x7d8>
 802966c:	2e00      	cmp	r6, #0
 802966e:	d0c9      	beq.n	8029604 <__ssvfiscanf_r+0x6fc>
 8029670:	e501      	b.n	8029076 <__ssvfiscanf_r+0x16e>
 8029672:	4632      	mov	r2, r6
 8029674:	e7bc      	b.n	80295f0 <__ssvfiscanf_r+0x6e8>
 8029676:	2200      	movs	r2, #0
 8029678:	e7ba      	b.n	80295f0 <__ssvfiscanf_r+0x6e8>
 802967a:	687b      	ldr	r3, [r7, #4]
 802967c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802967e:	3b01      	subs	r3, #1
 8029680:	4622      	mov	r2, r4
 8029682:	5cf1      	ldrb	r1, [r6, r3]
 8029684:	607b      	str	r3, [r7, #4]
 8029686:	f7ff fbad 	bl	8028de4 <_sungetc_r>
 802968a:	e7b8      	b.n	80295fe <__ssvfiscanf_r+0x6f6>
 802968c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802968e:	687a      	ldr	r2, [r7, #4]
 8029690:	4413      	add	r3, r2
 8029692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029694:	69bb      	ldr	r3, [r7, #24]
 8029696:	2b03      	cmp	r3, #3
 8029698:	d102      	bne.n	80296a0 <__ssvfiscanf_r+0x798>
 802969a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802969c:	2b04      	cmp	r3, #4
 802969e:	d002      	beq.n	80296a6 <__ssvfiscanf_r+0x79e>
 80296a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80296a2:	3b01      	subs	r3, #1
 80296a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80296a6:	693b      	ldr	r3, [r7, #16]
 80296a8:	b9c3      	cbnz	r3, 80296dc <__ssvfiscanf_r+0x7d4>
 80296aa:	3504      	adds	r5, #4
 80296ac:	f1ba 0f00 	cmp.w	sl, #0
 80296b0:	d014      	beq.n	80296dc <__ssvfiscanf_r+0x7d4>
 80296b2:	eba5 0608 	sub.w	r6, r5, r8
 80296b6:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 80296ba:	d80d      	bhi.n	80296d8 <__ssvfiscanf_r+0x7d0>
 80296bc:	4640      	mov	r0, r8
 80296be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80296c2:	f003 fb95 	bl	802cdf0 <realloc>
 80296c6:	4680      	mov	r8, r0
 80296c8:	2800      	cmp	r0, #0
 80296ca:	f43f ad6d 	beq.w	80291a8 <__ssvfiscanf_r+0x2a0>
 80296ce:	1985      	adds	r5, r0, r6
 80296d0:	f8ca 0000 	str.w	r0, [sl]
 80296d4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80296d8:	693e      	ldr	r6, [r7, #16]
 80296da:	e7be      	b.n	802965a <__ssvfiscanf_r+0x752>
 80296dc:	2600      	movs	r6, #0
 80296de:	e7bc      	b.n	802965a <__ssvfiscanf_r+0x752>
 80296e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80296e2:	2b00      	cmp	r3, #0
 80296e4:	f47f af3d 	bne.w	8029562 <__ssvfiscanf_r+0x65a>
 80296e8:	e78c      	b.n	8029604 <__ssvfiscanf_r+0x6fc>
 80296ea:	b1e3      	cbz	r3, 8029726 <__ssvfiscanf_r+0x81e>
 80296ec:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 80296f0:	6823      	ldr	r3, [r4, #0]
 80296f2:	781a      	ldrb	r2, [r3, #0]
 80296f4:	5cb2      	ldrb	r2, [r6, r2]
 80296f6:	b91a      	cbnz	r2, 8029700 <__ssvfiscanf_r+0x7f8>
 80296f8:	2d00      	cmp	r5, #0
 80296fa:	f47f ae92 	bne.w	8029422 <__ssvfiscanf_r+0x51a>
 80296fe:	e450      	b.n	8028fa2 <__ssvfiscanf_r+0x9a>
 8029700:	3301      	adds	r3, #1
 8029702:	6862      	ldr	r2, [r4, #4]
 8029704:	6023      	str	r3, [r4, #0]
 8029706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029708:	3501      	adds	r5, #1
 802970a:	3a01      	subs	r2, #1
 802970c:	42ab      	cmp	r3, r5
 802970e:	6062      	str	r2, [r4, #4]
 8029710:	f43f ae87 	beq.w	8029422 <__ssvfiscanf_r+0x51a>
 8029714:	2a00      	cmp	r2, #0
 8029716:	dceb      	bgt.n	80296f0 <__ssvfiscanf_r+0x7e8>
 8029718:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802971a:	4621      	mov	r1, r4
 802971c:	f7ff fb9d 	bl	8028e5a <__ssrefill_r>
 8029720:	2800      	cmp	r0, #0
 8029722:	d0e5      	beq.n	80296f0 <__ssvfiscanf_r+0x7e8>
 8029724:	e67d      	b.n	8029422 <__ssvfiscanf_r+0x51a>
 8029726:	6a3b      	ldr	r3, [r7, #32]
 8029728:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 802972c:	f853 5b04 	ldr.w	r5, [r3], #4
 8029730:	623b      	str	r3, [r7, #32]
 8029732:	d07e      	beq.n	8029832 <__ssvfiscanf_r+0x92a>
 8029734:	2d00      	cmp	r5, #0
 8029736:	f43f ac34 	beq.w	8028fa2 <__ssvfiscanf_r+0x9a>
 802973a:	2020      	movs	r0, #32
 802973c:	f7fe fbce 	bl	8027edc <malloc>
 8029740:	4680      	mov	r8, r0
 8029742:	2800      	cmp	r0, #0
 8029744:	f43f ac9c 	beq.w	8029080 <__ssvfiscanf_r+0x178>
 8029748:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802974c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8029750:	6028      	str	r0, [r5, #0]
 8029752:	45b1      	cmp	r9, r6
 8029754:	d312      	bcc.n	802977c <__ssvfiscanf_r+0x874>
 8029756:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802975a:	429e      	cmp	r6, r3
 802975c:	f200 82e8 	bhi.w	8029d30 <__ssvfiscanf_r+0xe28>
 8029760:	3608      	adds	r6, #8
 8029762:	b2b6      	uxth	r6, r6
 8029764:	f8db 0000 	ldr.w	r0, [fp]
 8029768:	00b1      	lsls	r1, r6, #2
 802976a:	f003 fb41 	bl	802cdf0 <realloc>
 802976e:	2800      	cmp	r0, #0
 8029770:	f000 82de 	beq.w	8029d30 <__ssvfiscanf_r+0xe28>
 8029774:	f8cb 0000 	str.w	r0, [fp]
 8029778:	f8ab 6004 	strh.w	r6, [fp, #4]
 802977c:	f8db 3000 	ldr.w	r3, [fp]
 8029780:	f109 0201 	add.w	r2, r9, #1
 8029784:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8029788:	46aa      	mov	sl, r5
 802978a:	f8ab 2006 	strh.w	r2, [fp, #6]
 802978e:	4645      	mov	r5, r8
 8029790:	f04f 0920 	mov.w	r9, #32
 8029794:	462e      	mov	r6, r5
 8029796:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 802979a:	6823      	ldr	r3, [r4, #0]
 802979c:	781a      	ldrb	r2, [r3, #0]
 802979e:	f818 2002 	ldrb.w	r2, [r8, r2]
 80297a2:	b362      	cbz	r2, 80297fe <__ssvfiscanf_r+0x8f6>
 80297a4:	6862      	ldr	r2, [r4, #4]
 80297a6:	3a01      	subs	r2, #1
 80297a8:	6062      	str	r2, [r4, #4]
 80297aa:	1c5a      	adds	r2, r3, #1
 80297ac:	6022      	str	r2, [r4, #0]
 80297ae:	781b      	ldrb	r3, [r3, #0]
 80297b0:	f805 3b01 	strb.w	r3, [r5], #1
 80297b4:	f1ba 0f00 	cmp.w	sl, #0
 80297b8:	d011      	beq.n	80297de <__ssvfiscanf_r+0x8d6>
 80297ba:	1bab      	subs	r3, r5, r6
 80297bc:	454b      	cmp	r3, r9
 80297be:	d30e      	bcc.n	80297de <__ssvfiscanf_r+0x8d6>
 80297c0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80297c4:	4630      	mov	r0, r6
 80297c6:	4649      	mov	r1, r9
 80297c8:	613b      	str	r3, [r7, #16]
 80297ca:	f003 fb11 	bl	802cdf0 <realloc>
 80297ce:	4606      	mov	r6, r0
 80297d0:	2800      	cmp	r0, #0
 80297d2:	f43f ac55 	beq.w	8029080 <__ssvfiscanf_r+0x178>
 80297d6:	693b      	ldr	r3, [r7, #16]
 80297d8:	f8ca 0000 	str.w	r0, [sl]
 80297dc:	18c5      	adds	r5, r0, r3
 80297de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80297e0:	3b01      	subs	r3, #1
 80297e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80297e4:	d00b      	beq.n	80297fe <__ssvfiscanf_r+0x8f6>
 80297e6:	6863      	ldr	r3, [r4, #4]
 80297e8:	2b00      	cmp	r3, #0
 80297ea:	dcd6      	bgt.n	802979a <__ssvfiscanf_r+0x892>
 80297ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80297ee:	4621      	mov	r1, r4
 80297f0:	f7ff fb33 	bl	8028e5a <__ssrefill_r>
 80297f4:	2800      	cmp	r0, #0
 80297f6:	d0d0      	beq.n	802979a <__ssvfiscanf_r+0x892>
 80297f8:	42b5      	cmp	r5, r6
 80297fa:	f43f ac3c 	beq.w	8029076 <__ssvfiscanf_r+0x16e>
 80297fe:	1bae      	subs	r6, r5, r6
 8029800:	f43f abcf 	beq.w	8028fa2 <__ssvfiscanf_r+0x9a>
 8029804:	2300      	movs	r3, #0
 8029806:	702b      	strb	r3, [r5, #0]
 8029808:	f1ba 0f00 	cmp.w	sl, #0
 802980c:	d009      	beq.n	8029822 <__ssvfiscanf_r+0x91a>
 802980e:	1c71      	adds	r1, r6, #1
 8029810:	4589      	cmp	r9, r1
 8029812:	d906      	bls.n	8029822 <__ssvfiscanf_r+0x91a>
 8029814:	f8da 0000 	ldr.w	r0, [sl]
 8029818:	f003 faea 	bl	802cdf0 <realloc>
 802981c:	b108      	cbz	r0, 8029822 <__ssvfiscanf_r+0x91a>
 802981e:	f8ca 0000 	str.w	r0, [sl]
 8029822:	69fb      	ldr	r3, [r7, #28]
 8029824:	3301      	adds	r3, #1
 8029826:	61fb      	str	r3, [r7, #28]
 8029828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802982a:	4433      	add	r3, r6
 802982c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802982e:	f7ff bb8c 	b.w	8028f4a <__ssvfiscanf_r+0x42>
 8029832:	46ca      	mov	sl, r9
 8029834:	e7ae      	b.n	8029794 <__ssvfiscanf_r+0x88c>
 8029836:	bf00      	nop
 8029838:	200002c4 	.word	0x200002c4
 802983c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802983e:	2b00      	cmp	r3, #0
 8029840:	bf08      	it	eq
 8029842:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8029846:	f016 0501 	ands.w	r5, r6, #1
 802984a:	62bb      	str	r3, [r7, #40]	@ 0x28
 802984c:	f006 0810 	and.w	r8, r6, #16
 8029850:	f000 80e1 	beq.w	8029a16 <__ssvfiscanf_r+0xb0e>
 8029854:	f1b8 0f00 	cmp.w	r8, #0
 8029858:	f040 8089 	bne.w	802996e <__ssvfiscanf_r+0xa66>
 802985c:	6a3b      	ldr	r3, [r7, #32]
 802985e:	0636      	lsls	r6, r6, #24
 8029860:	f853 5b04 	ldr.w	r5, [r3], #4
 8029864:	623b      	str	r3, [r7, #32]
 8029866:	f140 8089 	bpl.w	802997c <__ssvfiscanf_r+0xa74>
 802986a:	2d00      	cmp	r5, #0
 802986c:	f43f ac9f 	beq.w	80291ae <__ssvfiscanf_r+0x2a6>
 8029870:	2080      	movs	r0, #128	@ 0x80
 8029872:	f7fe fb33 	bl	8027edc <malloc>
 8029876:	4606      	mov	r6, r0
 8029878:	2800      	cmp	r0, #0
 802987a:	f43f ac95 	beq.w	80291a8 <__ssvfiscanf_r+0x2a0>
 802987e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8029882:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8029886:	6028      	str	r0, [r5, #0]
 8029888:	4599      	cmp	r9, r3
 802988a:	d314      	bcc.n	80298b6 <__ssvfiscanf_r+0x9ae>
 802988c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8029890:	4293      	cmp	r3, r2
 8029892:	f200 824d 	bhi.w	8029d30 <__ssvfiscanf_r+0xe28>
 8029896:	3308      	adds	r3, #8
 8029898:	fa1f fa83 	uxth.w	sl, r3
 802989c:	f8db 0000 	ldr.w	r0, [fp]
 80298a0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80298a4:	f003 faa4 	bl	802cdf0 <realloc>
 80298a8:	2800      	cmp	r0, #0
 80298aa:	f000 8241 	beq.w	8029d30 <__ssvfiscanf_r+0xe28>
 80298ae:	f8cb 0000 	str.w	r0, [fp]
 80298b2:	f8ab a004 	strh.w	sl, [fp, #4]
 80298b6:	f8db 3000 	ldr.w	r3, [fp]
 80298ba:	f109 0201 	add.w	r2, r9, #1
 80298be:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80298c2:	46aa      	mov	sl, r5
 80298c4:	f8ab 2006 	strh.w	r2, [fp, #6]
 80298c8:	4635      	mov	r5, r6
 80298ca:	f04f 0920 	mov.w	r9, #32
 80298ce:	2300      	movs	r3, #0
 80298d0:	6822      	ldr	r2, [r4, #0]
 80298d2:	499e      	ldr	r1, [pc, #632]	@ (8029b4c <__ssvfiscanf_r+0xc44>)
 80298d4:	7812      	ldrb	r2, [r2, #0]
 80298d6:	5c8a      	ldrb	r2, [r1, r2]
 80298d8:	0711      	lsls	r1, r2, #28
 80298da:	d43c      	bmi.n	8029956 <__ssvfiscanf_r+0xa4e>
 80298dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80298de:	2a00      	cmp	r2, #0
 80298e0:	d039      	beq.n	8029956 <__ssvfiscanf_r+0xa4e>
 80298e2:	613b      	str	r3, [r7, #16]
 80298e4:	f7fd fa3c 	bl	8026d60 <__locale_mb_cur_max>
 80298e8:	693b      	ldr	r3, [r7, #16]
 80298ea:	4298      	cmp	r0, r3
 80298ec:	f43f abc3 	beq.w	8029076 <__ssvfiscanf_r+0x16e>
 80298f0:	1c5a      	adds	r2, r3, #1
 80298f2:	613a      	str	r2, [r7, #16]
 80298f4:	6822      	ldr	r2, [r4, #0]
 80298f6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80298fa:	f812 0b01 	ldrb.w	r0, [r2], #1
 80298fe:	54c8      	strb	r0, [r1, r3]
 8029900:	6863      	ldr	r3, [r4, #4]
 8029902:	3b01      	subs	r3, #1
 8029904:	e9c4 2300 	strd	r2, r3, [r4]
 8029908:	69bb      	ldr	r3, [r7, #24]
 802990a:	2b03      	cmp	r3, #3
 802990c:	d102      	bne.n	8029914 <__ssvfiscanf_r+0xa0c>
 802990e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8029910:	2b04      	cmp	r3, #4
 8029912:	d005      	beq.n	8029920 <__ssvfiscanf_r+0xa18>
 8029914:	2208      	movs	r2, #8
 8029916:	2100      	movs	r1, #0
 8029918:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802991c:	f7fc f898 	bl	8025a50 <memset>
 8029920:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8029924:	9300      	str	r3, [sp, #0]
 8029926:	693b      	ldr	r3, [r7, #16]
 8029928:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802992a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802992e:	4629      	mov	r1, r5
 8029930:	f004 fe18 	bl	802e564 <_mbrtowc_r>
 8029934:	4603      	mov	r3, r0
 8029936:	61b8      	str	r0, [r7, #24]
 8029938:	1c58      	adds	r0, r3, #1
 802993a:	f43f ab9c 	beq.w	8029076 <__ssvfiscanf_r+0x16e>
 802993e:	bb0b      	cbnz	r3, 8029984 <__ssvfiscanf_r+0xa7c>
 8029940:	602b      	str	r3, [r5, #0]
 8029942:	6828      	ldr	r0, [r5, #0]
 8029944:	f004 fe28 	bl	802e598 <iswspace>
 8029948:	4603      	mov	r3, r0
 802994a:	2800      	cmp	r0, #0
 802994c:	d037      	beq.n	80299be <__ssvfiscanf_r+0xab6>
 802994e:	693a      	ldr	r2, [r7, #16]
 8029950:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8029954:	bb4a      	cbnz	r2, 80299aa <__ssvfiscanf_r+0xaa2>
 8029956:	f1b8 0f00 	cmp.w	r8, #0
 802995a:	f47f aaf6 	bne.w	8028f4a <__ssvfiscanf_r+0x42>
 802995e:	f8c5 8000 	str.w	r8, [r5]
 8029962:	f1ba 0f00 	cmp.w	sl, #0
 8029966:	f43f ad34 	beq.w	80293d2 <__ssvfiscanf_r+0x4ca>
 802996a:	1ba9      	subs	r1, r5, r6
 802996c:	e655      	b.n	802961a <__ssvfiscanf_r+0x712>
 802996e:	f04f 0900 	mov.w	r9, #0
 8029972:	464e      	mov	r6, r9
 8029974:	46ca      	mov	sl, r9
 8029976:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 802997a:	e7a8      	b.n	80298ce <__ssvfiscanf_r+0x9c6>
 802997c:	46c1      	mov	r9, r8
 802997e:	4646      	mov	r6, r8
 8029980:	46c2      	mov	sl, r8
 8029982:	e7a4      	b.n	80298ce <__ssvfiscanf_r+0x9c6>
 8029984:	69bb      	ldr	r3, [r7, #24]
 8029986:	3302      	adds	r3, #2
 8029988:	d1db      	bne.n	8029942 <__ssvfiscanf_r+0xa3a>
 802998a:	693b      	ldr	r3, [r7, #16]
 802998c:	6862      	ldr	r2, [r4, #4]
 802998e:	2a00      	cmp	r2, #0
 8029990:	dc9e      	bgt.n	80298d0 <__ssvfiscanf_r+0x9c8>
 8029992:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029994:	613b      	str	r3, [r7, #16]
 8029996:	4621      	mov	r1, r4
 8029998:	f7ff fa5f 	bl	8028e5a <__ssrefill_r>
 802999c:	693b      	ldr	r3, [r7, #16]
 802999e:	2800      	cmp	r0, #0
 80299a0:	d096      	beq.n	80298d0 <__ssvfiscanf_r+0x9c8>
 80299a2:	2b00      	cmp	r3, #0
 80299a4:	f47f ab67 	bne.w	8029076 <__ssvfiscanf_r+0x16e>
 80299a8:	e7d5      	b.n	8029956 <__ssvfiscanf_r+0xa4e>
 80299aa:	693a      	ldr	r2, [r7, #16]
 80299ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80299ae:	3a01      	subs	r2, #1
 80299b0:	613a      	str	r2, [r7, #16]
 80299b2:	6939      	ldr	r1, [r7, #16]
 80299b4:	4622      	mov	r2, r4
 80299b6:	5c59      	ldrb	r1, [r3, r1]
 80299b8:	f7ff fa14 	bl	8028de4 <_sungetc_r>
 80299bc:	e7c7      	b.n	802994e <__ssvfiscanf_r+0xa46>
 80299be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80299c0:	6939      	ldr	r1, [r7, #16]
 80299c2:	440a      	add	r2, r1
 80299c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80299c6:	69ba      	ldr	r2, [r7, #24]
 80299c8:	2a03      	cmp	r2, #3
 80299ca:	d102      	bne.n	80299d2 <__ssvfiscanf_r+0xaca>
 80299cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80299ce:	2a04      	cmp	r2, #4
 80299d0:	d002      	beq.n	80299d8 <__ssvfiscanf_r+0xad0>
 80299d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80299d4:	3a01      	subs	r2, #1
 80299d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80299d8:	f1b8 0f00 	cmp.w	r8, #0
 80299dc:	d1d6      	bne.n	802998c <__ssvfiscanf_r+0xa84>
 80299de:	3504      	adds	r5, #4
 80299e0:	f1ba 0f00 	cmp.w	sl, #0
 80299e4:	d015      	beq.n	8029a12 <__ssvfiscanf_r+0xb0a>
 80299e6:	1bab      	subs	r3, r5, r6
 80299e8:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 80299ec:	d80f      	bhi.n	8029a0e <__ssvfiscanf_r+0xb06>
 80299ee:	4630      	mov	r0, r6
 80299f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80299f4:	613b      	str	r3, [r7, #16]
 80299f6:	f003 f9fb 	bl	802cdf0 <realloc>
 80299fa:	4606      	mov	r6, r0
 80299fc:	2800      	cmp	r0, #0
 80299fe:	f43f abd3 	beq.w	80291a8 <__ssvfiscanf_r+0x2a0>
 8029a02:	693b      	ldr	r3, [r7, #16]
 8029a04:	f8ca 0000 	str.w	r0, [sl]
 8029a08:	18c5      	adds	r5, r0, r3
 8029a0a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8029a0e:	4643      	mov	r3, r8
 8029a10:	e7bc      	b.n	802998c <__ssvfiscanf_r+0xa84>
 8029a12:	4653      	mov	r3, sl
 8029a14:	e7ba      	b.n	802998c <__ssvfiscanf_r+0xa84>
 8029a16:	f1b8 0f00 	cmp.w	r8, #0
 8029a1a:	d019      	beq.n	8029a50 <__ssvfiscanf_r+0xb48>
 8029a1c:	4e4b      	ldr	r6, [pc, #300]	@ (8029b4c <__ssvfiscanf_r+0xc44>)
 8029a1e:	6823      	ldr	r3, [r4, #0]
 8029a20:	781a      	ldrb	r2, [r3, #0]
 8029a22:	5cb2      	ldrb	r2, [r6, r2]
 8029a24:	0712      	lsls	r2, r2, #28
 8029a26:	f53f acfc 	bmi.w	8029422 <__ssvfiscanf_r+0x51a>
 8029a2a:	3301      	adds	r3, #1
 8029a2c:	6862      	ldr	r2, [r4, #4]
 8029a2e:	6023      	str	r3, [r4, #0]
 8029a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029a32:	3501      	adds	r5, #1
 8029a34:	3a01      	subs	r2, #1
 8029a36:	429d      	cmp	r5, r3
 8029a38:	6062      	str	r2, [r4, #4]
 8029a3a:	f43f acf2 	beq.w	8029422 <__ssvfiscanf_r+0x51a>
 8029a3e:	2a00      	cmp	r2, #0
 8029a40:	dced      	bgt.n	8029a1e <__ssvfiscanf_r+0xb16>
 8029a42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029a44:	4621      	mov	r1, r4
 8029a46:	f7ff fa08 	bl	8028e5a <__ssrefill_r>
 8029a4a:	2800      	cmp	r0, #0
 8029a4c:	d0e7      	beq.n	8029a1e <__ssvfiscanf_r+0xb16>
 8029a4e:	e4e8      	b.n	8029422 <__ssvfiscanf_r+0x51a>
 8029a50:	6a3b      	ldr	r3, [r7, #32]
 8029a52:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8029a56:	f853 5b04 	ldr.w	r5, [r3], #4
 8029a5a:	623b      	str	r3, [r7, #32]
 8029a5c:	d074      	beq.n	8029b48 <__ssvfiscanf_r+0xc40>
 8029a5e:	2d00      	cmp	r5, #0
 8029a60:	f43f aa9f 	beq.w	8028fa2 <__ssvfiscanf_r+0x9a>
 8029a64:	2020      	movs	r0, #32
 8029a66:	f7fe fa39 	bl	8027edc <malloc>
 8029a6a:	4680      	mov	r8, r0
 8029a6c:	2800      	cmp	r0, #0
 8029a6e:	f43f ab07 	beq.w	8029080 <__ssvfiscanf_r+0x178>
 8029a72:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8029a76:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8029a7a:	6028      	str	r0, [r5, #0]
 8029a7c:	45b1      	cmp	r9, r6
 8029a7e:	d312      	bcc.n	8029aa6 <__ssvfiscanf_r+0xb9e>
 8029a80:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8029a84:	429e      	cmp	r6, r3
 8029a86:	f200 8153 	bhi.w	8029d30 <__ssvfiscanf_r+0xe28>
 8029a8a:	3608      	adds	r6, #8
 8029a8c:	b2b6      	uxth	r6, r6
 8029a8e:	f8db 0000 	ldr.w	r0, [fp]
 8029a92:	00b1      	lsls	r1, r6, #2
 8029a94:	f003 f9ac 	bl	802cdf0 <realloc>
 8029a98:	2800      	cmp	r0, #0
 8029a9a:	f000 8149 	beq.w	8029d30 <__ssvfiscanf_r+0xe28>
 8029a9e:	f8cb 0000 	str.w	r0, [fp]
 8029aa2:	f8ab 6004 	strh.w	r6, [fp, #4]
 8029aa6:	f8db 3000 	ldr.w	r3, [fp]
 8029aaa:	f109 0201 	add.w	r2, r9, #1
 8029aae:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8029ab2:	46aa      	mov	sl, r5
 8029ab4:	f8ab 2006 	strh.w	r2, [fp, #6]
 8029ab8:	4645      	mov	r5, r8
 8029aba:	2620      	movs	r6, #32
 8029abc:	46a9      	mov	r9, r5
 8029abe:	6823      	ldr	r3, [r4, #0]
 8029ac0:	4922      	ldr	r1, [pc, #136]	@ (8029b4c <__ssvfiscanf_r+0xc44>)
 8029ac2:	781a      	ldrb	r2, [r3, #0]
 8029ac4:	5c8a      	ldrb	r2, [r1, r2]
 8029ac6:	0710      	lsls	r0, r2, #28
 8029ac8:	d428      	bmi.n	8029b1c <__ssvfiscanf_r+0xc14>
 8029aca:	6862      	ldr	r2, [r4, #4]
 8029acc:	3a01      	subs	r2, #1
 8029ace:	6062      	str	r2, [r4, #4]
 8029ad0:	1c5a      	adds	r2, r3, #1
 8029ad2:	6022      	str	r2, [r4, #0]
 8029ad4:	781b      	ldrb	r3, [r3, #0]
 8029ad6:	f805 3b01 	strb.w	r3, [r5], #1
 8029ada:	f1ba 0f00 	cmp.w	sl, #0
 8029ade:	d010      	beq.n	8029b02 <__ssvfiscanf_r+0xbfa>
 8029ae0:	eba5 0809 	sub.w	r8, r5, r9
 8029ae4:	45b0      	cmp	r8, r6
 8029ae6:	d30c      	bcc.n	8029b02 <__ssvfiscanf_r+0xbfa>
 8029ae8:	0076      	lsls	r6, r6, #1
 8029aea:	4648      	mov	r0, r9
 8029aec:	4631      	mov	r1, r6
 8029aee:	f003 f97f 	bl	802cdf0 <realloc>
 8029af2:	4681      	mov	r9, r0
 8029af4:	2800      	cmp	r0, #0
 8029af6:	f43f aac3 	beq.w	8029080 <__ssvfiscanf_r+0x178>
 8029afa:	eb00 0508 	add.w	r5, r0, r8
 8029afe:	f8ca 0000 	str.w	r0, [sl]
 8029b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029b04:	3b01      	subs	r3, #1
 8029b06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029b08:	d008      	beq.n	8029b1c <__ssvfiscanf_r+0xc14>
 8029b0a:	6863      	ldr	r3, [r4, #4]
 8029b0c:	2b00      	cmp	r3, #0
 8029b0e:	dcd6      	bgt.n	8029abe <__ssvfiscanf_r+0xbb6>
 8029b10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029b12:	4621      	mov	r1, r4
 8029b14:	f7ff f9a1 	bl	8028e5a <__ssrefill_r>
 8029b18:	2800      	cmp	r0, #0
 8029b1a:	d0d0      	beq.n	8029abe <__ssvfiscanf_r+0xbb6>
 8029b1c:	2300      	movs	r3, #0
 8029b1e:	702b      	strb	r3, [r5, #0]
 8029b20:	eba5 0509 	sub.w	r5, r5, r9
 8029b24:	f1ba 0f00 	cmp.w	sl, #0
 8029b28:	f43f acce 	beq.w	80294c8 <__ssvfiscanf_r+0x5c0>
 8029b2c:	1c69      	adds	r1, r5, #1
 8029b2e:	428e      	cmp	r6, r1
 8029b30:	f67f acca 	bls.w	80294c8 <__ssvfiscanf_r+0x5c0>
 8029b34:	f8da 0000 	ldr.w	r0, [sl]
 8029b38:	f003 f95a 	bl	802cdf0 <realloc>
 8029b3c:	2800      	cmp	r0, #0
 8029b3e:	f43f acc3 	beq.w	80294c8 <__ssvfiscanf_r+0x5c0>
 8029b42:	f8ca 0000 	str.w	r0, [sl]
 8029b46:	e4bf      	b.n	80294c8 <__ssvfiscanf_r+0x5c0>
 8029b48:	46b2      	mov	sl, r6
 8029b4a:	e7b7      	b.n	8029abc <__ssvfiscanf_r+0xbb4>
 8029b4c:	08034405 	.word	0x08034405
 8029b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029b52:	3b01      	subs	r3, #1
 8029b54:	2b26      	cmp	r3, #38	@ 0x26
 8029b56:	bf81      	itttt	hi
 8029b58:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 8029b5a:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 8029b5e:	2327      	movhi	r3, #39	@ 0x27
 8029b60:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8029b62:	bf98      	it	ls
 8029b64:	f04f 0800 	movls.w	r8, #0
 8029b68:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 8029b6c:	f04f 0900 	mov.w	r9, #0
 8029b70:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 8029b74:	6822      	ldr	r2, [r4, #0]
 8029b76:	7813      	ldrb	r3, [r2, #0]
 8029b78:	2b39      	cmp	r3, #57	@ 0x39
 8029b7a:	d80f      	bhi.n	8029b9c <__ssvfiscanf_r+0xc94>
 8029b7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8029b7e:	d91a      	bls.n	8029bb6 <__ssvfiscanf_r+0xcae>
 8029b80:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8029b84:	290e      	cmp	r1, #14
 8029b86:	d816      	bhi.n	8029bb6 <__ssvfiscanf_r+0xcae>
 8029b88:	e8df f001 	tbb	[pc, r1]
 8029b8c:	15771577 	.word	0x15771577
 8029b90:	67673e15 	.word	0x67673e15
 8029b94:	67676767 	.word	0x67676767
 8029b98:	6f67      	.short	0x6f67
 8029b9a:	6f          	.byte	0x6f
 8029b9b:	00          	.byte	0x00
 8029b9c:	2b66      	cmp	r3, #102	@ 0x66
 8029b9e:	d831      	bhi.n	8029c04 <__ssvfiscanf_r+0xcfc>
 8029ba0:	2b60      	cmp	r3, #96	@ 0x60
 8029ba2:	d803      	bhi.n	8029bac <__ssvfiscanf_r+0xca4>
 8029ba4:	2b46      	cmp	r3, #70	@ 0x46
 8029ba6:	d804      	bhi.n	8029bb2 <__ssvfiscanf_r+0xcaa>
 8029ba8:	2b40      	cmp	r3, #64	@ 0x40
 8029baa:	d904      	bls.n	8029bb6 <__ssvfiscanf_r+0xcae>
 8029bac:	6979      	ldr	r1, [r7, #20]
 8029bae:	290a      	cmp	r1, #10
 8029bb0:	e061      	b.n	8029c76 <__ssvfiscanf_r+0xd6e>
 8029bb2:	2b58      	cmp	r3, #88	@ 0x58
 8029bb4:	d066      	beq.n	8029c84 <__ssvfiscanf_r+0xd7c>
 8029bb6:	05f1      	lsls	r1, r6, #23
 8029bb8:	d511      	bpl.n	8029bde <__ssvfiscanf_r+0xcd6>
 8029bba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8029bbe:	459a      	cmp	sl, r3
 8029bc0:	d908      	bls.n	8029bd4 <__ssvfiscanf_r+0xccc>
 8029bc2:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 8029bc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029bc8:	4622      	mov	r2, r4
 8029bca:	f7ff f90b 	bl	8028de4 <_sungetc_r>
 8029bce:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 8029bd2:	46c2      	mov	sl, r8
 8029bd4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8029bd8:	459a      	cmp	sl, r3
 8029bda:	f43f a9e2 	beq.w	8028fa2 <__ssvfiscanf_r+0x9a>
 8029bde:	f016 0210 	ands.w	r2, r6, #16
 8029be2:	d16b      	bne.n	8029cbc <__ssvfiscanf_r+0xdb4>
 8029be4:	697b      	ldr	r3, [r7, #20]
 8029be6:	f88a 2000 	strb.w	r2, [sl]
 8029bea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029bec:	68fd      	ldr	r5, [r7, #12]
 8029bee:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8029bf2:	47a8      	blx	r5
 8029bf4:	6a3b      	ldr	r3, [r7, #32]
 8029bf6:	06b2      	lsls	r2, r6, #26
 8029bf8:	f103 0804 	add.w	r8, r3, #4
 8029bfc:	d555      	bpl.n	8029caa <__ssvfiscanf_r+0xda2>
 8029bfe:	681b      	ldr	r3, [r3, #0]
 8029c00:	6018      	str	r0, [r3, #0]
 8029c02:	e057      	b.n	8029cb4 <__ssvfiscanf_r+0xdac>
 8029c04:	2b78      	cmp	r3, #120	@ 0x78
 8029c06:	e7d5      	b.n	8029bb4 <__ssvfiscanf_r+0xcac>
 8029c08:	0531      	lsls	r1, r6, #20
 8029c0a:	d509      	bpl.n	8029c20 <__ssvfiscanf_r+0xd18>
 8029c0c:	6979      	ldr	r1, [r7, #20]
 8029c0e:	b919      	cbnz	r1, 8029c18 <__ssvfiscanf_r+0xd10>
 8029c10:	2108      	movs	r1, #8
 8029c12:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8029c16:	6179      	str	r1, [r7, #20]
 8029c18:	0575      	lsls	r5, r6, #21
 8029c1a:	d506      	bpl.n	8029c2a <__ssvfiscanf_r+0xd22>
 8029c1c:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 8029c20:	4655      	mov	r5, sl
 8029c22:	f805 3b01 	strb.w	r3, [r5], #1
 8029c26:	46aa      	mov	sl, r5
 8029c28:	e00b      	b.n	8029c42 <__ssvfiscanf_r+0xd3a>
 8029c2a:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 8029c2e:	f1b8 0f00 	cmp.w	r8, #0
 8029c32:	d004      	beq.n	8029c3e <__ssvfiscanf_r+0xd36>
 8029c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029c36:	3301      	adds	r3, #1
 8029c38:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8029c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029c3e:	f109 0901 	add.w	r9, r9, #1
 8029c42:	6863      	ldr	r3, [r4, #4]
 8029c44:	3b01      	subs	r3, #1
 8029c46:	2b00      	cmp	r3, #0
 8029c48:	6063      	str	r3, [r4, #4]
 8029c4a:	dd27      	ble.n	8029c9c <__ssvfiscanf_r+0xd94>
 8029c4c:	3201      	adds	r2, #1
 8029c4e:	6022      	str	r2, [r4, #0]
 8029c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029c52:	3b01      	subs	r3, #1
 8029c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029c56:	d18d      	bne.n	8029b74 <__ssvfiscanf_r+0xc6c>
 8029c58:	e7ad      	b.n	8029bb6 <__ssvfiscanf_r+0xcae>
 8029c5a:	6978      	ldr	r0, [r7, #20]
 8029c5c:	4936      	ldr	r1, [pc, #216]	@ (8029d38 <__ssvfiscanf_r+0xe30>)
 8029c5e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8029c62:	6179      	str	r1, [r7, #20]
 8029c64:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 8029c68:	e7da      	b.n	8029c20 <__ssvfiscanf_r+0xd18>
 8029c6a:	6978      	ldr	r0, [r7, #20]
 8029c6c:	4932      	ldr	r1, [pc, #200]	@ (8029d38 <__ssvfiscanf_r+0xe30>)
 8029c6e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8029c72:	6179      	str	r1, [r7, #20]
 8029c74:	2908      	cmp	r1, #8
 8029c76:	dcf5      	bgt.n	8029c64 <__ssvfiscanf_r+0xd5c>
 8029c78:	e79d      	b.n	8029bb6 <__ssvfiscanf_r+0xcae>
 8029c7a:	0630      	lsls	r0, r6, #24
 8029c7c:	d59b      	bpl.n	8029bb6 <__ssvfiscanf_r+0xcae>
 8029c7e:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8029c82:	e7cd      	b.n	8029c20 <__ssvfiscanf_r+0xd18>
 8029c84:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 8029c88:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8029c8c:	d193      	bne.n	8029bb6 <__ssvfiscanf_r+0xcae>
 8029c8e:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 8029c92:	2110      	movs	r1, #16
 8029c94:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 8029c98:	6179      	str	r1, [r7, #20]
 8029c9a:	e7c1      	b.n	8029c20 <__ssvfiscanf_r+0xd18>
 8029c9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029c9e:	4621      	mov	r1, r4
 8029ca0:	f7ff f8db 	bl	8028e5a <__ssrefill_r>
 8029ca4:	2800      	cmp	r0, #0
 8029ca6:	d0d3      	beq.n	8029c50 <__ssvfiscanf_r+0xd48>
 8029ca8:	e785      	b.n	8029bb6 <__ssvfiscanf_r+0xcae>
 8029caa:	0733      	lsls	r3, r6, #28
 8029cac:	d50d      	bpl.n	8029cca <__ssvfiscanf_r+0xdc2>
 8029cae:	6a3b      	ldr	r3, [r7, #32]
 8029cb0:	681b      	ldr	r3, [r3, #0]
 8029cb2:	7018      	strb	r0, [r3, #0]
 8029cb4:	69fb      	ldr	r3, [r7, #28]
 8029cb6:	3301      	adds	r3, #1
 8029cb8:	e9c7 3807 	strd	r3, r8, [r7, #28]
 8029cbc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8029cc0:	ebaa 0503 	sub.w	r5, sl, r3
 8029cc4:	444d      	add	r5, r9
 8029cc6:	f7ff bbac 	b.w	8029422 <__ssvfiscanf_r+0x51a>
 8029cca:	0775      	lsls	r5, r6, #29
 8029ccc:	d503      	bpl.n	8029cd6 <__ssvfiscanf_r+0xdce>
 8029cce:	6a3b      	ldr	r3, [r7, #32]
 8029cd0:	681b      	ldr	r3, [r3, #0]
 8029cd2:	8018      	strh	r0, [r3, #0]
 8029cd4:	e7ee      	b.n	8029cb4 <__ssvfiscanf_r+0xdac>
 8029cd6:	f016 0201 	ands.w	r2, r6, #1
 8029cda:	d001      	beq.n	8029ce0 <__ssvfiscanf_r+0xdd8>
 8029cdc:	6a3b      	ldr	r3, [r7, #32]
 8029cde:	e78e      	b.n	8029bfe <__ssvfiscanf_r+0xcf6>
 8029ce0:	07b1      	lsls	r1, r6, #30
 8029ce2:	d5fb      	bpl.n	8029cdc <__ssvfiscanf_r+0xdd4>
 8029ce4:	4b15      	ldr	r3, [pc, #84]	@ (8029d3c <__ssvfiscanf_r+0xe34>)
 8029ce6:	68f9      	ldr	r1, [r7, #12]
 8029ce8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029cea:	4299      	cmp	r1, r3
 8029cec:	697b      	ldr	r3, [r7, #20]
 8029cee:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8029cf2:	d106      	bne.n	8029d02 <__ssvfiscanf_r+0xdfa>
 8029cf4:	f004 fc34 	bl	802e560 <_strtoull_r>
 8029cf8:	6a3b      	ldr	r3, [r7, #32]
 8029cfa:	681b      	ldr	r3, [r3, #0]
 8029cfc:	e9c3 0100 	strd	r0, r1, [r3]
 8029d00:	e7d8      	b.n	8029cb4 <__ssvfiscanf_r+0xdac>
 8029d02:	f004 fb81 	bl	802e408 <_strtoll_r>
 8029d06:	e7f7      	b.n	8029cf8 <__ssvfiscanf_r+0xdf0>
 8029d08:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8029d0c:	6818      	ldr	r0, [r3, #0]
 8029d0e:	f7fe f8ed 	bl	8027eec <free>
 8029d12:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8029d16:	3401      	adds	r4, #1
 8029d18:	601e      	str	r6, [r3, #0]
 8029d1a:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8029d1e:	f8db 5000 	ldr.w	r5, [fp]
 8029d22:	42a3      	cmp	r3, r4
 8029d24:	dcf0      	bgt.n	8029d08 <__ssvfiscanf_r+0xe00>
 8029d26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029d2a:	61fb      	str	r3, [r7, #28]
 8029d2c:	f7ff ba46 	b.w	80291bc <__ssvfiscanf_r+0x2b4>
 8029d30:	2400      	movs	r4, #0
 8029d32:	4626      	mov	r6, r4
 8029d34:	e7f1      	b.n	8029d1a <__ssvfiscanf_r+0xe12>
 8029d36:	bf00      	nop
 8029d38:	0803459c 	.word	0x0803459c
 8029d3c:	0802df59 	.word	0x0802df59

08029d40 <_svfprintf_r>:
 8029d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d44:	b0d3      	sub	sp, #332	@ 0x14c
 8029d46:	468b      	mov	fp, r1
 8029d48:	4691      	mov	r9, r2
 8029d4a:	461e      	mov	r6, r3
 8029d4c:	9003      	str	r0, [sp, #12]
 8029d4e:	f7fd f80d 	bl	8026d6c <_localeconv_r>
 8029d52:	6803      	ldr	r3, [r0, #0]
 8029d54:	9316      	str	r3, [sp, #88]	@ 0x58
 8029d56:	4618      	mov	r0, r3
 8029d58:	f7d6 faa2 	bl	80002a0 <strlen>
 8029d5c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029d60:	900d      	str	r0, [sp, #52]	@ 0x34
 8029d62:	061b      	lsls	r3, r3, #24
 8029d64:	d515      	bpl.n	8029d92 <_svfprintf_r+0x52>
 8029d66:	f8db 3010 	ldr.w	r3, [fp, #16]
 8029d6a:	b993      	cbnz	r3, 8029d92 <_svfprintf_r+0x52>
 8029d6c:	9803      	ldr	r0, [sp, #12]
 8029d6e:	2140      	movs	r1, #64	@ 0x40
 8029d70:	f7fe f8c4 	bl	8027efc <_malloc_r>
 8029d74:	f8cb 0000 	str.w	r0, [fp]
 8029d78:	f8cb 0010 	str.w	r0, [fp, #16]
 8029d7c:	b930      	cbnz	r0, 8029d8c <_svfprintf_r+0x4c>
 8029d7e:	9a03      	ldr	r2, [sp, #12]
 8029d80:	230c      	movs	r3, #12
 8029d82:	6013      	str	r3, [r2, #0]
 8029d84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029d88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029d8a:	e1f7      	b.n	802a17c <_svfprintf_r+0x43c>
 8029d8c:	2340      	movs	r3, #64	@ 0x40
 8029d8e:	f8cb 3014 	str.w	r3, [fp, #20]
 8029d92:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8029fe0 <_svfprintf_r+0x2a0>
 8029d96:	2300      	movs	r3, #0
 8029d98:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8029d9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8029da0:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8029da4:	ac29      	add	r4, sp, #164	@ 0xa4
 8029da6:	9426      	str	r4, [sp, #152]	@ 0x98
 8029da8:	9304      	str	r3, [sp, #16]
 8029daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8029dac:	9312      	str	r3, [sp, #72]	@ 0x48
 8029dae:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029db0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029db2:	464b      	mov	r3, r9
 8029db4:	461d      	mov	r5, r3
 8029db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029dba:	b10a      	cbz	r2, 8029dc0 <_svfprintf_r+0x80>
 8029dbc:	2a25      	cmp	r2, #37	@ 0x25
 8029dbe:	d1f9      	bne.n	8029db4 <_svfprintf_r+0x74>
 8029dc0:	ebb5 0709 	subs.w	r7, r5, r9
 8029dc4:	d00d      	beq.n	8029de2 <_svfprintf_r+0xa2>
 8029dc6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029dc8:	443b      	add	r3, r7
 8029dca:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029dcc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029dce:	3301      	adds	r3, #1
 8029dd0:	2b07      	cmp	r3, #7
 8029dd2:	e9c4 9700 	strd	r9, r7, [r4]
 8029dd6:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029dd8:	dc75      	bgt.n	8029ec6 <_svfprintf_r+0x186>
 8029dda:	3408      	adds	r4, #8
 8029ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029dde:	443b      	add	r3, r7
 8029de0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029de2:	782b      	ldrb	r3, [r5, #0]
 8029de4:	2b00      	cmp	r3, #0
 8029de6:	f001 8148 	beq.w	802b07a <_svfprintf_r+0x133a>
 8029dea:	2200      	movs	r2, #0
 8029dec:	1c6b      	adds	r3, r5, #1
 8029dee:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8029df2:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8029df6:	920e      	str	r2, [sp, #56]	@ 0x38
 8029df8:	4615      	mov	r5, r2
 8029dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029dfe:	9206      	str	r2, [sp, #24]
 8029e00:	930c      	str	r3, [sp, #48]	@ 0x30
 8029e02:	9b06      	ldr	r3, [sp, #24]
 8029e04:	3b20      	subs	r3, #32
 8029e06:	2b5a      	cmp	r3, #90	@ 0x5a
 8029e08:	f200 85a4 	bhi.w	802a954 <_svfprintf_r+0xc14>
 8029e0c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8029e10:	05a2009d 	.word	0x05a2009d
 8029e14:	00a505a2 	.word	0x00a505a2
 8029e18:	05a205a2 	.word	0x05a205a2
 8029e1c:	008505a2 	.word	0x008505a2
 8029e20:	05a205a2 	.word	0x05a205a2
 8029e24:	00b200a8 	.word	0x00b200a8
 8029e28:	00af05a2 	.word	0x00af05a2
 8029e2c:	05a200b4 	.word	0x05a200b4
 8029e30:	00d100ce 	.word	0x00d100ce
 8029e34:	00d100d1 	.word	0x00d100d1
 8029e38:	00d100d1 	.word	0x00d100d1
 8029e3c:	00d100d1 	.word	0x00d100d1
 8029e40:	00d100d1 	.word	0x00d100d1
 8029e44:	05a205a2 	.word	0x05a205a2
 8029e48:	05a205a2 	.word	0x05a205a2
 8029e4c:	05a205a2 	.word	0x05a205a2
 8029e50:	014705a2 	.word	0x014705a2
 8029e54:	010805a2 	.word	0x010805a2
 8029e58:	0147011b 	.word	0x0147011b
 8029e5c:	01470147 	.word	0x01470147
 8029e60:	05a205a2 	.word	0x05a205a2
 8029e64:	05a205a2 	.word	0x05a205a2
 8029e68:	05a200e2 	.word	0x05a200e2
 8029e6c:	049d05a2 	.word	0x049d05a2
 8029e70:	05a205a2 	.word	0x05a205a2
 8029e74:	04e705a2 	.word	0x04e705a2
 8029e78:	050805a2 	.word	0x050805a2
 8029e7c:	05a205a2 	.word	0x05a205a2
 8029e80:	05a2052a 	.word	0x05a2052a
 8029e84:	05a205a2 	.word	0x05a205a2
 8029e88:	05a205a2 	.word	0x05a205a2
 8029e8c:	05a205a2 	.word	0x05a205a2
 8029e90:	014705a2 	.word	0x014705a2
 8029e94:	010805a2 	.word	0x010805a2
 8029e98:	0147011d 	.word	0x0147011d
 8029e9c:	01470147 	.word	0x01470147
 8029ea0:	011d00ee 	.word	0x011d00ee
 8029ea4:	05a20102 	.word	0x05a20102
 8029ea8:	05a200fb 	.word	0x05a200fb
 8029eac:	049f047e 	.word	0x049f047e
 8029eb0:	010204d6 	.word	0x010204d6
 8029eb4:	04e705a2 	.word	0x04e705a2
 8029eb8:	050a009b 	.word	0x050a009b
 8029ebc:	05a205a2 	.word	0x05a205a2
 8029ec0:	05a20065 	.word	0x05a20065
 8029ec4:	009b      	.short	0x009b
 8029ec6:	9803      	ldr	r0, [sp, #12]
 8029ec8:	aa26      	add	r2, sp, #152	@ 0x98
 8029eca:	4659      	mov	r1, fp
 8029ecc:	f7fe fac0 	bl	8028450 <__ssprint_r>
 8029ed0:	2800      	cmp	r0, #0
 8029ed2:	f040 814e 	bne.w	802a172 <_svfprintf_r+0x432>
 8029ed6:	ac29      	add	r4, sp, #164	@ 0xa4
 8029ed8:	e780      	b.n	8029ddc <_svfprintf_r+0x9c>
 8029eda:	4b43      	ldr	r3, [pc, #268]	@ (8029fe8 <_svfprintf_r+0x2a8>)
 8029edc:	9319      	str	r3, [sp, #100]	@ 0x64
 8029ede:	f015 0320 	ands.w	r3, r5, #32
 8029ee2:	f000 84c2 	beq.w	802a86a <_svfprintf_r+0xb2a>
 8029ee6:	3607      	adds	r6, #7
 8029ee8:	f026 0307 	bic.w	r3, r6, #7
 8029eec:	461a      	mov	r2, r3
 8029eee:	685f      	ldr	r7, [r3, #4]
 8029ef0:	f852 6b08 	ldr.w	r6, [r2], #8
 8029ef4:	9207      	str	r2, [sp, #28]
 8029ef6:	07eb      	lsls	r3, r5, #31
 8029ef8:	d50a      	bpl.n	8029f10 <_svfprintf_r+0x1d0>
 8029efa:	ea56 0307 	orrs.w	r3, r6, r7
 8029efe:	d007      	beq.n	8029f10 <_svfprintf_r+0x1d0>
 8029f00:	2330      	movs	r3, #48	@ 0x30
 8029f02:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8029f06:	9b06      	ldr	r3, [sp, #24]
 8029f08:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8029f0c:	f045 0502 	orr.w	r5, r5, #2
 8029f10:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8029f14:	2302      	movs	r3, #2
 8029f16:	f000 bc28 	b.w	802a76a <_svfprintf_r+0xa2a>
 8029f1a:	9803      	ldr	r0, [sp, #12]
 8029f1c:	f7fc ff26 	bl	8026d6c <_localeconv_r>
 8029f20:	6843      	ldr	r3, [r0, #4]
 8029f22:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029f24:	4618      	mov	r0, r3
 8029f26:	f7d6 f9bb 	bl	80002a0 <strlen>
 8029f2a:	9012      	str	r0, [sp, #72]	@ 0x48
 8029f2c:	9803      	ldr	r0, [sp, #12]
 8029f2e:	f7fc ff1d 	bl	8026d6c <_localeconv_r>
 8029f32:	6883      	ldr	r3, [r0, #8]
 8029f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8029f36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029f38:	b12b      	cbz	r3, 8029f46 <_svfprintf_r+0x206>
 8029f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f3c:	b11b      	cbz	r3, 8029f46 <_svfprintf_r+0x206>
 8029f3e:	781b      	ldrb	r3, [r3, #0]
 8029f40:	b10b      	cbz	r3, 8029f46 <_svfprintf_r+0x206>
 8029f42:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8029f46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029f48:	e757      	b.n	8029dfa <_svfprintf_r+0xba>
 8029f4a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8029f4e:	2b00      	cmp	r3, #0
 8029f50:	d1f9      	bne.n	8029f46 <_svfprintf_r+0x206>
 8029f52:	2320      	movs	r3, #32
 8029f54:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8029f58:	e7f5      	b.n	8029f46 <_svfprintf_r+0x206>
 8029f5a:	f045 0501 	orr.w	r5, r5, #1
 8029f5e:	e7f2      	b.n	8029f46 <_svfprintf_r+0x206>
 8029f60:	f856 3b04 	ldr.w	r3, [r6], #4
 8029f64:	930e      	str	r3, [sp, #56]	@ 0x38
 8029f66:	2b00      	cmp	r3, #0
 8029f68:	daed      	bge.n	8029f46 <_svfprintf_r+0x206>
 8029f6a:	425b      	negs	r3, r3
 8029f6c:	930e      	str	r3, [sp, #56]	@ 0x38
 8029f6e:	f045 0504 	orr.w	r5, r5, #4
 8029f72:	e7e8      	b.n	8029f46 <_svfprintf_r+0x206>
 8029f74:	232b      	movs	r3, #43	@ 0x2b
 8029f76:	e7ed      	b.n	8029f54 <_svfprintf_r+0x214>
 8029f78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029f7e:	9206      	str	r2, [sp, #24]
 8029f80:	2a2a      	cmp	r2, #42	@ 0x2a
 8029f82:	d10f      	bne.n	8029fa4 <_svfprintf_r+0x264>
 8029f84:	f856 2b04 	ldr.w	r2, [r6], #4
 8029f88:	930c      	str	r3, [sp, #48]	@ 0x30
 8029f8a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8029f8e:	e7da      	b.n	8029f46 <_svfprintf_r+0x206>
 8029f90:	fb01 2808 	mla	r8, r1, r8, r2
 8029f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029f98:	9206      	str	r2, [sp, #24]
 8029f9a:	9a06      	ldr	r2, [sp, #24]
 8029f9c:	3a30      	subs	r2, #48	@ 0x30
 8029f9e:	2a09      	cmp	r2, #9
 8029fa0:	d9f6      	bls.n	8029f90 <_svfprintf_r+0x250>
 8029fa2:	e72d      	b.n	8029e00 <_svfprintf_r+0xc0>
 8029fa4:	f04f 0800 	mov.w	r8, #0
 8029fa8:	210a      	movs	r1, #10
 8029faa:	e7f6      	b.n	8029f9a <_svfprintf_r+0x25a>
 8029fac:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8029fb0:	e7c9      	b.n	8029f46 <_svfprintf_r+0x206>
 8029fb2:	2200      	movs	r2, #0
 8029fb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029fb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8029fb8:	210a      	movs	r1, #10
 8029fba:	9a06      	ldr	r2, [sp, #24]
 8029fbc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029fbe:	3a30      	subs	r2, #48	@ 0x30
 8029fc0:	fb01 2200 	mla	r2, r1, r0, r2
 8029fc4:	920e      	str	r2, [sp, #56]	@ 0x38
 8029fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029fca:	9206      	str	r2, [sp, #24]
 8029fcc:	3a30      	subs	r2, #48	@ 0x30
 8029fce:	2a09      	cmp	r2, #9
 8029fd0:	d9f3      	bls.n	8029fba <_svfprintf_r+0x27a>
 8029fd2:	e715      	b.n	8029e00 <_svfprintf_r+0xc0>
 8029fd4:	f045 0508 	orr.w	r5, r5, #8
 8029fd8:	e7b5      	b.n	8029f46 <_svfprintf_r+0x206>
 8029fda:	bf00      	nop
 8029fdc:	f3af 8000 	nop.w
	...
 8029fe8:	08034058 	.word	0x08034058
 8029fec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029fee:	781b      	ldrb	r3, [r3, #0]
 8029ff0:	2b68      	cmp	r3, #104	@ 0x68
 8029ff2:	bf01      	itttt	eq
 8029ff4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8029ff6:	3301      	addeq	r3, #1
 8029ff8:	930c      	streq	r3, [sp, #48]	@ 0x30
 8029ffa:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8029ffe:	bf18      	it	ne
 802a000:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 802a004:	e79f      	b.n	8029f46 <_svfprintf_r+0x206>
 802a006:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a008:	781b      	ldrb	r3, [r3, #0]
 802a00a:	2b6c      	cmp	r3, #108	@ 0x6c
 802a00c:	d105      	bne.n	802a01a <_svfprintf_r+0x2da>
 802a00e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a010:	3301      	adds	r3, #1
 802a012:	930c      	str	r3, [sp, #48]	@ 0x30
 802a014:	f045 0520 	orr.w	r5, r5, #32
 802a018:	e795      	b.n	8029f46 <_svfprintf_r+0x206>
 802a01a:	f045 0510 	orr.w	r5, r5, #16
 802a01e:	e792      	b.n	8029f46 <_svfprintf_r+0x206>
 802a020:	4632      	mov	r2, r6
 802a022:	f852 3b04 	ldr.w	r3, [r2], #4
 802a026:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802a02a:	2300      	movs	r3, #0
 802a02c:	9207      	str	r2, [sp, #28]
 802a02e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a032:	469a      	mov	sl, r3
 802a034:	f04f 0801 	mov.w	r8, #1
 802a038:	9310      	str	r3, [sp, #64]	@ 0x40
 802a03a:	461f      	mov	r7, r3
 802a03c:	9308      	str	r3, [sp, #32]
 802a03e:	461e      	mov	r6, r3
 802a040:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 802a044:	e1d2      	b.n	802a3ec <_svfprintf_r+0x6ac>
 802a046:	f045 0510 	orr.w	r5, r5, #16
 802a04a:	06af      	lsls	r7, r5, #26
 802a04c:	d512      	bpl.n	802a074 <_svfprintf_r+0x334>
 802a04e:	3607      	adds	r6, #7
 802a050:	f026 0307 	bic.w	r3, r6, #7
 802a054:	461a      	mov	r2, r3
 802a056:	685f      	ldr	r7, [r3, #4]
 802a058:	f852 6b08 	ldr.w	r6, [r2], #8
 802a05c:	9207      	str	r2, [sp, #28]
 802a05e:	2f00      	cmp	r7, #0
 802a060:	da06      	bge.n	802a070 <_svfprintf_r+0x330>
 802a062:	4276      	negs	r6, r6
 802a064:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802a068:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802a06c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a070:	2301      	movs	r3, #1
 802a072:	e37d      	b.n	802a770 <_svfprintf_r+0xa30>
 802a074:	4633      	mov	r3, r6
 802a076:	06ee      	lsls	r6, r5, #27
 802a078:	f853 7b04 	ldr.w	r7, [r3], #4
 802a07c:	9307      	str	r3, [sp, #28]
 802a07e:	d502      	bpl.n	802a086 <_svfprintf_r+0x346>
 802a080:	463e      	mov	r6, r7
 802a082:	17ff      	asrs	r7, r7, #31
 802a084:	e7eb      	b.n	802a05e <_svfprintf_r+0x31e>
 802a086:	0668      	lsls	r0, r5, #25
 802a088:	d503      	bpl.n	802a092 <_svfprintf_r+0x352>
 802a08a:	b23e      	sxth	r6, r7
 802a08c:	f347 37c0 	sbfx	r7, r7, #15, #1
 802a090:	e7e5      	b.n	802a05e <_svfprintf_r+0x31e>
 802a092:	05a9      	lsls	r1, r5, #22
 802a094:	d5f4      	bpl.n	802a080 <_svfprintf_r+0x340>
 802a096:	b27e      	sxtb	r6, r7
 802a098:	f347 17c0 	sbfx	r7, r7, #7, #1
 802a09c:	e7df      	b.n	802a05e <_svfprintf_r+0x31e>
 802a09e:	3607      	adds	r6, #7
 802a0a0:	f026 0307 	bic.w	r3, r6, #7
 802a0a4:	ecb3 7b02 	vldmia	r3!, {d7}
 802a0a8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802a0ac:	9307      	str	r3, [sp, #28]
 802a0ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a0b0:	931a      	str	r3, [sp, #104]	@ 0x68
 802a0b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a0b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a0b8:	931b      	str	r3, [sp, #108]	@ 0x6c
 802a0ba:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a0be:	4b81      	ldr	r3, [pc, #516]	@ (802a2c4 <_svfprintf_r+0x584>)
 802a0c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a0c4:	f7d6 fd4a 	bl	8000b5c <__aeabi_dcmpun>
 802a0c8:	bb10      	cbnz	r0, 802a110 <_svfprintf_r+0x3d0>
 802a0ca:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a0ce:	4b7d      	ldr	r3, [pc, #500]	@ (802a2c4 <_svfprintf_r+0x584>)
 802a0d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a0d4:	f7d6 fd24 	bl	8000b20 <__aeabi_dcmple>
 802a0d8:	b9d0      	cbnz	r0, 802a110 <_svfprintf_r+0x3d0>
 802a0da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802a0de:	2200      	movs	r2, #0
 802a0e0:	2300      	movs	r3, #0
 802a0e2:	f7d6 fd13 	bl	8000b0c <__aeabi_dcmplt>
 802a0e6:	b110      	cbz	r0, 802a0ee <_svfprintf_r+0x3ae>
 802a0e8:	232d      	movs	r3, #45	@ 0x2d
 802a0ea:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a0ee:	4a76      	ldr	r2, [pc, #472]	@ (802a2c8 <_svfprintf_r+0x588>)
 802a0f0:	4b76      	ldr	r3, [pc, #472]	@ (802a2cc <_svfprintf_r+0x58c>)
 802a0f2:	9906      	ldr	r1, [sp, #24]
 802a0f4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 802a0f8:	2947      	cmp	r1, #71	@ 0x47
 802a0fa:	bfd4      	ite	le
 802a0fc:	4691      	movle	r9, r2
 802a0fe:	4699      	movgt	r9, r3
 802a100:	f04f 0a00 	mov.w	sl, #0
 802a104:	f04f 0803 	mov.w	r8, #3
 802a108:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802a10c:	f000 bfec 	b.w	802b0e8 <_svfprintf_r+0x13a8>
 802a110:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 802a114:	4610      	mov	r0, r2
 802a116:	4619      	mov	r1, r3
 802a118:	f7d6 fd20 	bl	8000b5c <__aeabi_dcmpun>
 802a11c:	4682      	mov	sl, r0
 802a11e:	b140      	cbz	r0, 802a132 <_svfprintf_r+0x3f2>
 802a120:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a122:	4a6b      	ldr	r2, [pc, #428]	@ (802a2d0 <_svfprintf_r+0x590>)
 802a124:	2b00      	cmp	r3, #0
 802a126:	bfbc      	itt	lt
 802a128:	232d      	movlt	r3, #45	@ 0x2d
 802a12a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802a12e:	4b69      	ldr	r3, [pc, #420]	@ (802a2d4 <_svfprintf_r+0x594>)
 802a130:	e7df      	b.n	802a0f2 <_svfprintf_r+0x3b2>
 802a132:	9b06      	ldr	r3, [sp, #24]
 802a134:	2b61      	cmp	r3, #97	@ 0x61
 802a136:	d025      	beq.n	802a184 <_svfprintf_r+0x444>
 802a138:	2b41      	cmp	r3, #65	@ 0x41
 802a13a:	d125      	bne.n	802a188 <_svfprintf_r+0x448>
 802a13c:	2358      	movs	r3, #88	@ 0x58
 802a13e:	2230      	movs	r2, #48	@ 0x30
 802a140:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 802a144:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 802a148:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a14c:	f045 0502 	orr.w	r5, r5, #2
 802a150:	f340 80a5 	ble.w	802a29e <_svfprintf_r+0x55e>
 802a154:	9803      	ldr	r0, [sp, #12]
 802a156:	f108 0101 	add.w	r1, r8, #1
 802a15a:	f7fd fecf 	bl	8027efc <_malloc_r>
 802a15e:	4681      	mov	r9, r0
 802a160:	2800      	cmp	r0, #0
 802a162:	f040 80a1 	bne.w	802a2a8 <_svfprintf_r+0x568>
 802a166:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a16e:	f8ab 300c 	strh.w	r3, [fp, #12]
 802a172:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a176:	065b      	lsls	r3, r3, #25
 802a178:	f53f ae04 	bmi.w	8029d84 <_svfprintf_r+0x44>
 802a17c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802a17e:	b053      	add	sp, #332	@ 0x14c
 802a180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a184:	2378      	movs	r3, #120	@ 0x78
 802a186:	e7da      	b.n	802a13e <_svfprintf_r+0x3fe>
 802a188:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802a18c:	f000 808e 	beq.w	802a2ac <_svfprintf_r+0x56c>
 802a190:	9b06      	ldr	r3, [sp, #24]
 802a192:	f023 0320 	bic.w	r3, r3, #32
 802a196:	2b47      	cmp	r3, #71	@ 0x47
 802a198:	d105      	bne.n	802a1a6 <_svfprintf_r+0x466>
 802a19a:	f1b8 0f00 	cmp.w	r8, #0
 802a19e:	d102      	bne.n	802a1a6 <_svfprintf_r+0x466>
 802a1a0:	46c2      	mov	sl, r8
 802a1a2:	f04f 0801 	mov.w	r8, #1
 802a1a6:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a1aa:	9311      	str	r3, [sp, #68]	@ 0x44
 802a1ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a1ae:	2b00      	cmp	r3, #0
 802a1b0:	da7f      	bge.n	802a2b2 <_svfprintf_r+0x572>
 802a1b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a1b4:	9314      	str	r3, [sp, #80]	@ 0x50
 802a1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a1b8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802a1bc:	9315      	str	r3, [sp, #84]	@ 0x54
 802a1be:	232d      	movs	r3, #45	@ 0x2d
 802a1c0:	931c      	str	r3, [sp, #112]	@ 0x70
 802a1c2:	9b06      	ldr	r3, [sp, #24]
 802a1c4:	f023 0320 	bic.w	r3, r3, #32
 802a1c8:	2b41      	cmp	r3, #65	@ 0x41
 802a1ca:	9308      	str	r3, [sp, #32]
 802a1cc:	f040 81e6 	bne.w	802a59c <_svfprintf_r+0x85c>
 802a1d0:	a820      	add	r0, sp, #128	@ 0x80
 802a1d2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a1d6:	f7fc fe9b 	bl	8026f10 <frexp>
 802a1da:	2200      	movs	r2, #0
 802a1dc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802a1e0:	ec51 0b10 	vmov	r0, r1, d0
 802a1e4:	f7d6 fa20 	bl	8000628 <__aeabi_dmul>
 802a1e8:	4602      	mov	r2, r0
 802a1ea:	460b      	mov	r3, r1
 802a1ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a1f0:	2200      	movs	r2, #0
 802a1f2:	2300      	movs	r3, #0
 802a1f4:	f7d6 fc80 	bl	8000af8 <__aeabi_dcmpeq>
 802a1f8:	b108      	cbz	r0, 802a1fe <_svfprintf_r+0x4be>
 802a1fa:	2301      	movs	r3, #1
 802a1fc:	9320      	str	r3, [sp, #128]	@ 0x80
 802a1fe:	4a36      	ldr	r2, [pc, #216]	@ (802a2d8 <_svfprintf_r+0x598>)
 802a200:	4b36      	ldr	r3, [pc, #216]	@ (802a2dc <_svfprintf_r+0x59c>)
 802a202:	9906      	ldr	r1, [sp, #24]
 802a204:	2961      	cmp	r1, #97	@ 0x61
 802a206:	bf18      	it	ne
 802a208:	461a      	movne	r2, r3
 802a20a:	9210      	str	r2, [sp, #64]	@ 0x40
 802a20c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 802a210:	464e      	mov	r6, r9
 802a212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a216:	4b32      	ldr	r3, [pc, #200]	@ (802a2e0 <_svfprintf_r+0x5a0>)
 802a218:	2200      	movs	r2, #0
 802a21a:	f7d6 fa05 	bl	8000628 <__aeabi_dmul>
 802a21e:	4602      	mov	r2, r0
 802a220:	460b      	mov	r3, r1
 802a222:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a226:	f7d6 fcaf 	bl	8000b88 <__aeabi_d2iz>
 802a22a:	9013      	str	r0, [sp, #76]	@ 0x4c
 802a22c:	f7d6 f992 	bl	8000554 <__aeabi_i2d>
 802a230:	4602      	mov	r2, r0
 802a232:	460b      	mov	r3, r1
 802a234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a238:	f7d6 f83e 	bl	80002b8 <__aeabi_dsub>
 802a23c:	4602      	mov	r2, r0
 802a23e:	460b      	mov	r3, r1
 802a240:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a244:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a246:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a248:	5c9b      	ldrb	r3, [r3, r2]
 802a24a:	f806 3b01 	strb.w	r3, [r6], #1
 802a24e:	1c7a      	adds	r2, r7, #1
 802a250:	d006      	beq.n	802a260 <_svfprintf_r+0x520>
 802a252:	1e7b      	subs	r3, r7, #1
 802a254:	931d      	str	r3, [sp, #116]	@ 0x74
 802a256:	2200      	movs	r2, #0
 802a258:	2300      	movs	r3, #0
 802a25a:	f7d6 fc4d 	bl	8000af8 <__aeabi_dcmpeq>
 802a25e:	b370      	cbz	r0, 802a2be <_svfprintf_r+0x57e>
 802a260:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a264:	4b1f      	ldr	r3, [pc, #124]	@ (802a2e4 <_svfprintf_r+0x5a4>)
 802a266:	2200      	movs	r2, #0
 802a268:	f7d6 fc6e 	bl	8000b48 <__aeabi_dcmpgt>
 802a26c:	2800      	cmp	r0, #0
 802a26e:	d13b      	bne.n	802a2e8 <_svfprintf_r+0x5a8>
 802a270:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a274:	4b1b      	ldr	r3, [pc, #108]	@ (802a2e4 <_svfprintf_r+0x5a4>)
 802a276:	2200      	movs	r2, #0
 802a278:	f7d6 fc3e 	bl	8000af8 <__aeabi_dcmpeq>
 802a27c:	b110      	cbz	r0, 802a284 <_svfprintf_r+0x544>
 802a27e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a280:	07db      	lsls	r3, r3, #31
 802a282:	d431      	bmi.n	802a2e8 <_svfprintf_r+0x5a8>
 802a284:	4633      	mov	r3, r6
 802a286:	19f1      	adds	r1, r6, r7
 802a288:	2030      	movs	r0, #48	@ 0x30
 802a28a:	1aca      	subs	r2, r1, r3
 802a28c:	2a00      	cmp	r2, #0
 802a28e:	f280 8182 	bge.w	802a596 <_svfprintf_r+0x856>
 802a292:	1c7b      	adds	r3, r7, #1
 802a294:	3701      	adds	r7, #1
 802a296:	bfb8      	it	lt
 802a298:	2300      	movlt	r3, #0
 802a29a:	441e      	add	r6, r3
 802a29c:	e038      	b.n	802a310 <_svfprintf_r+0x5d0>
 802a29e:	f04f 0a00 	mov.w	sl, #0
 802a2a2:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 802a2a6:	e77e      	b.n	802a1a6 <_svfprintf_r+0x466>
 802a2a8:	4682      	mov	sl, r0
 802a2aa:	e77c      	b.n	802a1a6 <_svfprintf_r+0x466>
 802a2ac:	f04f 0806 	mov.w	r8, #6
 802a2b0:	e779      	b.n	802a1a6 <_svfprintf_r+0x466>
 802a2b2:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 802a2b6:	2300      	movs	r3, #0
 802a2b8:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802a2bc:	e780      	b.n	802a1c0 <_svfprintf_r+0x480>
 802a2be:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802a2c0:	e7a7      	b.n	802a212 <_svfprintf_r+0x4d2>
 802a2c2:	bf00      	nop
 802a2c4:	7fefffff 	.word	0x7fefffff
 802a2c8:	08034048 	.word	0x08034048
 802a2cc:	0803404c 	.word	0x0803404c
 802a2d0:	08034050 	.word	0x08034050
 802a2d4:	08034054 	.word	0x08034054
 802a2d8:	08034058 	.word	0x08034058
 802a2dc:	08034069 	.word	0x08034069
 802a2e0:	40300000 	.word	0x40300000
 802a2e4:	3fe00000 	.word	0x3fe00000
 802a2e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a2ea:	9624      	str	r6, [sp, #144]	@ 0x90
 802a2ec:	7bd9      	ldrb	r1, [r3, #15]
 802a2ee:	2030      	movs	r0, #48	@ 0x30
 802a2f0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802a2f2:	1e53      	subs	r3, r2, #1
 802a2f4:	9324      	str	r3, [sp, #144]	@ 0x90
 802a2f6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802a2fa:	428b      	cmp	r3, r1
 802a2fc:	f000 8148 	beq.w	802a590 <_svfprintf_r+0x850>
 802a300:	2b39      	cmp	r3, #57	@ 0x39
 802a302:	bf0b      	itete	eq
 802a304:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 802a306:	3301      	addne	r3, #1
 802a308:	7a9b      	ldrbeq	r3, [r3, #10]
 802a30a:	b2db      	uxtbne	r3, r3
 802a30c:	f802 3c01 	strb.w	r3, [r2, #-1]
 802a310:	eba6 0309 	sub.w	r3, r6, r9
 802a314:	9304      	str	r3, [sp, #16]
 802a316:	9b08      	ldr	r3, [sp, #32]
 802a318:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802a31a:	2b47      	cmp	r3, #71	@ 0x47
 802a31c:	f040 8187 	bne.w	802a62e <_svfprintf_r+0x8ee>
 802a320:	1cf1      	adds	r1, r6, #3
 802a322:	db02      	blt.n	802a32a <_svfprintf_r+0x5ea>
 802a324:	4546      	cmp	r6, r8
 802a326:	f340 81a5 	ble.w	802a674 <_svfprintf_r+0x934>
 802a32a:	9b06      	ldr	r3, [sp, #24]
 802a32c:	3b02      	subs	r3, #2
 802a32e:	9306      	str	r3, [sp, #24]
 802a330:	9906      	ldr	r1, [sp, #24]
 802a332:	f89d 2018 	ldrb.w	r2, [sp, #24]
 802a336:	f021 0120 	bic.w	r1, r1, #32
 802a33a:	2941      	cmp	r1, #65	@ 0x41
 802a33c:	bf08      	it	eq
 802a33e:	320f      	addeq	r2, #15
 802a340:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 802a344:	bf06      	itte	eq
 802a346:	b2d2      	uxtbeq	r2, r2
 802a348:	2101      	moveq	r1, #1
 802a34a:	2100      	movne	r1, #0
 802a34c:	2b00      	cmp	r3, #0
 802a34e:	9320      	str	r3, [sp, #128]	@ 0x80
 802a350:	bfb8      	it	lt
 802a352:	f1c6 0301 	rsblt	r3, r6, #1
 802a356:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802a35a:	bfb4      	ite	lt
 802a35c:	222d      	movlt	r2, #45	@ 0x2d
 802a35e:	222b      	movge	r2, #43	@ 0x2b
 802a360:	2b09      	cmp	r3, #9
 802a362:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 802a366:	f340 8178 	ble.w	802a65a <_svfprintf_r+0x91a>
 802a36a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a36e:	270a      	movs	r7, #10
 802a370:	4602      	mov	r2, r0
 802a372:	fbb3 f6f7 	udiv	r6, r3, r7
 802a376:	fb07 3116 	mls	r1, r7, r6, r3
 802a37a:	3130      	adds	r1, #48	@ 0x30
 802a37c:	f802 1c01 	strb.w	r1, [r2, #-1]
 802a380:	4619      	mov	r1, r3
 802a382:	2963      	cmp	r1, #99	@ 0x63
 802a384:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 802a388:	4633      	mov	r3, r6
 802a38a:	dcf1      	bgt.n	802a370 <_svfprintf_r+0x630>
 802a38c:	3330      	adds	r3, #48	@ 0x30
 802a38e:	1e91      	subs	r1, r2, #2
 802a390:	f800 3c01 	strb.w	r3, [r0, #-1]
 802a394:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 802a398:	460b      	mov	r3, r1
 802a39a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a39e:	4283      	cmp	r3, r0
 802a3a0:	f0c0 8156 	bcc.w	802a650 <_svfprintf_r+0x910>
 802a3a4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 802a3a8:	1a9b      	subs	r3, r3, r2
 802a3aa:	4281      	cmp	r1, r0
 802a3ac:	bf88      	it	hi
 802a3ae:	2300      	movhi	r3, #0
 802a3b0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a3b4:	441a      	add	r2, r3
 802a3b6:	ab22      	add	r3, sp, #136	@ 0x88
 802a3b8:	1ad3      	subs	r3, r2, r3
 802a3ba:	9a04      	ldr	r2, [sp, #16]
 802a3bc:	9318      	str	r3, [sp, #96]	@ 0x60
 802a3be:	2a01      	cmp	r2, #1
 802a3c0:	eb03 0802 	add.w	r8, r3, r2
 802a3c4:	dc01      	bgt.n	802a3ca <_svfprintf_r+0x68a>
 802a3c6:	07ea      	lsls	r2, r5, #31
 802a3c8:	d501      	bpl.n	802a3ce <_svfprintf_r+0x68e>
 802a3ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a3cc:	4498      	add	r8, r3
 802a3ce:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a3d2:	2700      	movs	r7, #0
 802a3d4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a3d8:	9311      	str	r3, [sp, #68]	@ 0x44
 802a3da:	9708      	str	r7, [sp, #32]
 802a3dc:	463e      	mov	r6, r7
 802a3de:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a3e0:	2b00      	cmp	r3, #0
 802a3e2:	f040 818f 	bne.w	802a704 <_svfprintf_r+0x9c4>
 802a3e6:	2300      	movs	r3, #0
 802a3e8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a3ea:	9310      	str	r3, [sp, #64]	@ 0x40
 802a3ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a3ee:	4543      	cmp	r3, r8
 802a3f0:	bfb8      	it	lt
 802a3f2:	4643      	movlt	r3, r8
 802a3f4:	9311      	str	r3, [sp, #68]	@ 0x44
 802a3f6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a3fa:	b113      	cbz	r3, 802a402 <_svfprintf_r+0x6c2>
 802a3fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802a3fe:	3301      	adds	r3, #1
 802a400:	9311      	str	r3, [sp, #68]	@ 0x44
 802a402:	f015 0302 	ands.w	r3, r5, #2
 802a406:	931c      	str	r3, [sp, #112]	@ 0x70
 802a408:	bf1e      	ittt	ne
 802a40a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802a40c:	3302      	addne	r3, #2
 802a40e:	9311      	strne	r3, [sp, #68]	@ 0x44
 802a410:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 802a414:	931d      	str	r3, [sp, #116]	@ 0x74
 802a416:	d122      	bne.n	802a45e <_svfprintf_r+0x71e>
 802a418:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a41a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a41c:	1a9b      	subs	r3, r3, r2
 802a41e:	2b00      	cmp	r3, #0
 802a420:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a422:	dd1c      	ble.n	802a45e <_svfprintf_r+0x71e>
 802a424:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a426:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a42a:	2810      	cmp	r0, #16
 802a42c:	489e      	ldr	r0, [pc, #632]	@ (802a6a8 <_svfprintf_r+0x968>)
 802a42e:	6020      	str	r0, [r4, #0]
 802a430:	f102 0201 	add.w	r2, r2, #1
 802a434:	f104 0108 	add.w	r1, r4, #8
 802a438:	f300 8298 	bgt.w	802a96c <_svfprintf_r+0xc2c>
 802a43c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a43e:	6060      	str	r0, [r4, #4]
 802a440:	4403      	add	r3, r0
 802a442:	2a07      	cmp	r2, #7
 802a444:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a448:	f340 82a5 	ble.w	802a996 <_svfprintf_r+0xc56>
 802a44c:	9803      	ldr	r0, [sp, #12]
 802a44e:	aa26      	add	r2, sp, #152	@ 0x98
 802a450:	4659      	mov	r1, fp
 802a452:	f7fd fffd 	bl	8028450 <__ssprint_r>
 802a456:	2800      	cmp	r0, #0
 802a458:	f040 85ed 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802a45c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a45e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802a462:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a464:	b16a      	cbz	r2, 802a482 <_svfprintf_r+0x742>
 802a466:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802a46a:	6022      	str	r2, [r4, #0]
 802a46c:	2201      	movs	r2, #1
 802a46e:	4413      	add	r3, r2
 802a470:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a472:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a474:	6062      	str	r2, [r4, #4]
 802a476:	4413      	add	r3, r2
 802a478:	2b07      	cmp	r3, #7
 802a47a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a47c:	f300 828d 	bgt.w	802a99a <_svfprintf_r+0xc5a>
 802a480:	3408      	adds	r4, #8
 802a482:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802a484:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a486:	b162      	cbz	r2, 802a4a2 <_svfprintf_r+0x762>
 802a488:	aa1f      	add	r2, sp, #124	@ 0x7c
 802a48a:	6022      	str	r2, [r4, #0]
 802a48c:	2202      	movs	r2, #2
 802a48e:	4413      	add	r3, r2
 802a490:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a492:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a494:	6062      	str	r2, [r4, #4]
 802a496:	3301      	adds	r3, #1
 802a498:	2b07      	cmp	r3, #7
 802a49a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a49c:	f300 8287 	bgt.w	802a9ae <_svfprintf_r+0xc6e>
 802a4a0:	3408      	adds	r4, #8
 802a4a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802a4a4:	2b80      	cmp	r3, #128	@ 0x80
 802a4a6:	d122      	bne.n	802a4ee <_svfprintf_r+0x7ae>
 802a4a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a4aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a4ac:	1a9b      	subs	r3, r3, r2
 802a4ae:	2b00      	cmp	r3, #0
 802a4b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a4b2:	dd1c      	ble.n	802a4ee <_svfprintf_r+0x7ae>
 802a4b4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a4b6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a4ba:	2810      	cmp	r0, #16
 802a4bc:	487b      	ldr	r0, [pc, #492]	@ (802a6ac <_svfprintf_r+0x96c>)
 802a4be:	6020      	str	r0, [r4, #0]
 802a4c0:	f102 0201 	add.w	r2, r2, #1
 802a4c4:	f104 0108 	add.w	r1, r4, #8
 802a4c8:	f300 827b 	bgt.w	802a9c2 <_svfprintf_r+0xc82>
 802a4cc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a4ce:	6060      	str	r0, [r4, #4]
 802a4d0:	4403      	add	r3, r0
 802a4d2:	2a07      	cmp	r2, #7
 802a4d4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a4d8:	f340 8288 	ble.w	802a9ec <_svfprintf_r+0xcac>
 802a4dc:	9803      	ldr	r0, [sp, #12]
 802a4de:	aa26      	add	r2, sp, #152	@ 0x98
 802a4e0:	4659      	mov	r1, fp
 802a4e2:	f7fd ffb5 	bl	8028450 <__ssprint_r>
 802a4e6:	2800      	cmp	r0, #0
 802a4e8:	f040 85a5 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802a4ec:	ac29      	add	r4, sp, #164	@ 0xa4
 802a4ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a4f0:	eba3 0308 	sub.w	r3, r3, r8
 802a4f4:	2b00      	cmp	r3, #0
 802a4f6:	9310      	str	r3, [sp, #64]	@ 0x40
 802a4f8:	dd1c      	ble.n	802a534 <_svfprintf_r+0x7f4>
 802a4fa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a4fc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a500:	2810      	cmp	r0, #16
 802a502:	486a      	ldr	r0, [pc, #424]	@ (802a6ac <_svfprintf_r+0x96c>)
 802a504:	6020      	str	r0, [r4, #0]
 802a506:	f102 0201 	add.w	r2, r2, #1
 802a50a:	f104 0108 	add.w	r1, r4, #8
 802a50e:	f300 826f 	bgt.w	802a9f0 <_svfprintf_r+0xcb0>
 802a512:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a514:	6060      	str	r0, [r4, #4]
 802a516:	4403      	add	r3, r0
 802a518:	2a07      	cmp	r2, #7
 802a51a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a51e:	f340 827c 	ble.w	802aa1a <_svfprintf_r+0xcda>
 802a522:	9803      	ldr	r0, [sp, #12]
 802a524:	aa26      	add	r2, sp, #152	@ 0x98
 802a526:	4659      	mov	r1, fp
 802a528:	f7fd ff92 	bl	8028450 <__ssprint_r>
 802a52c:	2800      	cmp	r0, #0
 802a52e:	f040 8582 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802a532:	ac29      	add	r4, sp, #164	@ 0xa4
 802a534:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a536:	9310      	str	r3, [sp, #64]	@ 0x40
 802a538:	05ea      	lsls	r2, r5, #23
 802a53a:	f100 8275 	bmi.w	802aa28 <_svfprintf_r+0xce8>
 802a53e:	4443      	add	r3, r8
 802a540:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a542:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a544:	3301      	adds	r3, #1
 802a546:	2b07      	cmp	r3, #7
 802a548:	e9c4 9800 	strd	r9, r8, [r4]
 802a54c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a54e:	f300 82b1 	bgt.w	802aab4 <_svfprintf_r+0xd74>
 802a552:	3408      	adds	r4, #8
 802a554:	076a      	lsls	r2, r5, #29
 802a556:	f100 8550 	bmi.w	802affa <_svfprintf_r+0x12ba>
 802a55a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802a55e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802a560:	428a      	cmp	r2, r1
 802a562:	bfac      	ite	ge
 802a564:	189b      	addge	r3, r3, r2
 802a566:	185b      	addlt	r3, r3, r1
 802a568:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a56a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a56c:	b13b      	cbz	r3, 802a57e <_svfprintf_r+0x83e>
 802a56e:	9803      	ldr	r0, [sp, #12]
 802a570:	aa26      	add	r2, sp, #152	@ 0x98
 802a572:	4659      	mov	r1, fp
 802a574:	f7fd ff6c 	bl	8028450 <__ssprint_r>
 802a578:	2800      	cmp	r0, #0
 802a57a:	f040 855c 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802a57e:	2300      	movs	r3, #0
 802a580:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a582:	f1ba 0f00 	cmp.w	sl, #0
 802a586:	f040 8572 	bne.w	802b06e <_svfprintf_r+0x132e>
 802a58a:	9e07      	ldr	r6, [sp, #28]
 802a58c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a58e:	e0c6      	b.n	802a71e <_svfprintf_r+0x9de>
 802a590:	f802 0c01 	strb.w	r0, [r2, #-1]
 802a594:	e6ac      	b.n	802a2f0 <_svfprintf_r+0x5b0>
 802a596:	f803 0b01 	strb.w	r0, [r3], #1
 802a59a:	e676      	b.n	802a28a <_svfprintf_r+0x54a>
 802a59c:	9b08      	ldr	r3, [sp, #32]
 802a59e:	2b46      	cmp	r3, #70	@ 0x46
 802a5a0:	d005      	beq.n	802a5ae <_svfprintf_r+0x86e>
 802a5a2:	2b45      	cmp	r3, #69	@ 0x45
 802a5a4:	d11a      	bne.n	802a5dc <_svfprintf_r+0x89c>
 802a5a6:	f108 0601 	add.w	r6, r8, #1
 802a5aa:	2102      	movs	r1, #2
 802a5ac:	e001      	b.n	802a5b2 <_svfprintf_r+0x872>
 802a5ae:	4646      	mov	r6, r8
 802a5b0:	2103      	movs	r1, #3
 802a5b2:	ab24      	add	r3, sp, #144	@ 0x90
 802a5b4:	9301      	str	r3, [sp, #4]
 802a5b6:	ab21      	add	r3, sp, #132	@ 0x84
 802a5b8:	9300      	str	r3, [sp, #0]
 802a5ba:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a5be:	ab20      	add	r3, sp, #128	@ 0x80
 802a5c0:	9803      	ldr	r0, [sp, #12]
 802a5c2:	4632      	mov	r2, r6
 802a5c4:	f7fc fd80 	bl	80270c8 <_dtoa_r>
 802a5c8:	9b08      	ldr	r3, [sp, #32]
 802a5ca:	2b47      	cmp	r3, #71	@ 0x47
 802a5cc:	4681      	mov	r9, r0
 802a5ce:	d119      	bne.n	802a604 <_svfprintf_r+0x8c4>
 802a5d0:	07e8      	lsls	r0, r5, #31
 802a5d2:	d405      	bmi.n	802a5e0 <_svfprintf_r+0x8a0>
 802a5d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a5d6:	eba3 0309 	sub.w	r3, r3, r9
 802a5da:	e69b      	b.n	802a314 <_svfprintf_r+0x5d4>
 802a5dc:	4646      	mov	r6, r8
 802a5de:	e7e4      	b.n	802a5aa <_svfprintf_r+0x86a>
 802a5e0:	eb09 0706 	add.w	r7, r9, r6
 802a5e4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a5e8:	2200      	movs	r2, #0
 802a5ea:	2300      	movs	r3, #0
 802a5ec:	f7d6 fa84 	bl	8000af8 <__aeabi_dcmpeq>
 802a5f0:	b100      	cbz	r0, 802a5f4 <_svfprintf_r+0x8b4>
 802a5f2:	9724      	str	r7, [sp, #144]	@ 0x90
 802a5f4:	2230      	movs	r2, #48	@ 0x30
 802a5f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a5f8:	429f      	cmp	r7, r3
 802a5fa:	d9eb      	bls.n	802a5d4 <_svfprintf_r+0x894>
 802a5fc:	1c59      	adds	r1, r3, #1
 802a5fe:	9124      	str	r1, [sp, #144]	@ 0x90
 802a600:	701a      	strb	r2, [r3, #0]
 802a602:	e7f8      	b.n	802a5f6 <_svfprintf_r+0x8b6>
 802a604:	9b08      	ldr	r3, [sp, #32]
 802a606:	2b46      	cmp	r3, #70	@ 0x46
 802a608:	eb00 0706 	add.w	r7, r0, r6
 802a60c:	d1ea      	bne.n	802a5e4 <_svfprintf_r+0x8a4>
 802a60e:	7803      	ldrb	r3, [r0, #0]
 802a610:	2b30      	cmp	r3, #48	@ 0x30
 802a612:	d109      	bne.n	802a628 <_svfprintf_r+0x8e8>
 802a614:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a618:	2200      	movs	r2, #0
 802a61a:	2300      	movs	r3, #0
 802a61c:	f7d6 fa6c 	bl	8000af8 <__aeabi_dcmpeq>
 802a620:	b910      	cbnz	r0, 802a628 <_svfprintf_r+0x8e8>
 802a622:	f1c6 0601 	rsb	r6, r6, #1
 802a626:	9620      	str	r6, [sp, #128]	@ 0x80
 802a628:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a62a:	441f      	add	r7, r3
 802a62c:	e7da      	b.n	802a5e4 <_svfprintf_r+0x8a4>
 802a62e:	9b08      	ldr	r3, [sp, #32]
 802a630:	2b46      	cmp	r3, #70	@ 0x46
 802a632:	f47f ae7d 	bne.w	802a330 <_svfprintf_r+0x5f0>
 802a636:	f005 0301 	and.w	r3, r5, #1
 802a63a:	2e00      	cmp	r6, #0
 802a63c:	ea43 0308 	orr.w	r3, r3, r8
 802a640:	dd25      	ble.n	802a68e <_svfprintf_r+0x94e>
 802a642:	b37b      	cbz	r3, 802a6a4 <_svfprintf_r+0x964>
 802a644:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a646:	18f3      	adds	r3, r6, r3
 802a648:	4498      	add	r8, r3
 802a64a:	2366      	movs	r3, #102	@ 0x66
 802a64c:	9306      	str	r3, [sp, #24]
 802a64e:	e033      	b.n	802a6b8 <_svfprintf_r+0x978>
 802a650:	f813 7b01 	ldrb.w	r7, [r3], #1
 802a654:	f806 7f01 	strb.w	r7, [r6, #1]!
 802a658:	e6a1      	b.n	802a39e <_svfprintf_r+0x65e>
 802a65a:	b941      	cbnz	r1, 802a66e <_svfprintf_r+0x92e>
 802a65c:	2230      	movs	r2, #48	@ 0x30
 802a65e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 802a662:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 802a666:	3330      	adds	r3, #48	@ 0x30
 802a668:	f802 3b01 	strb.w	r3, [r2], #1
 802a66c:	e6a3      	b.n	802a3b6 <_svfprintf_r+0x676>
 802a66e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a672:	e7f8      	b.n	802a666 <_svfprintf_r+0x926>
 802a674:	9b04      	ldr	r3, [sp, #16]
 802a676:	429e      	cmp	r6, r3
 802a678:	da0d      	bge.n	802a696 <_svfprintf_r+0x956>
 802a67a:	9b04      	ldr	r3, [sp, #16]
 802a67c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a67e:	2e00      	cmp	r6, #0
 802a680:	eb03 0802 	add.w	r8, r3, r2
 802a684:	dc0c      	bgt.n	802a6a0 <_svfprintf_r+0x960>
 802a686:	f1c6 0301 	rsb	r3, r6, #1
 802a68a:	4498      	add	r8, r3
 802a68c:	e008      	b.n	802a6a0 <_svfprintf_r+0x960>
 802a68e:	b17b      	cbz	r3, 802a6b0 <_svfprintf_r+0x970>
 802a690:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a692:	3301      	adds	r3, #1
 802a694:	e7d8      	b.n	802a648 <_svfprintf_r+0x908>
 802a696:	07eb      	lsls	r3, r5, #31
 802a698:	d521      	bpl.n	802a6de <_svfprintf_r+0x99e>
 802a69a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a69c:	eb06 0803 	add.w	r8, r6, r3
 802a6a0:	2367      	movs	r3, #103	@ 0x67
 802a6a2:	e7d3      	b.n	802a64c <_svfprintf_r+0x90c>
 802a6a4:	46b0      	mov	r8, r6
 802a6a6:	e7d0      	b.n	802a64a <_svfprintf_r+0x90a>
 802a6a8:	080345ce 	.word	0x080345ce
 802a6ac:	080345be 	.word	0x080345be
 802a6b0:	2366      	movs	r3, #102	@ 0x66
 802a6b2:	9306      	str	r3, [sp, #24]
 802a6b4:	f04f 0801 	mov.w	r8, #1
 802a6b8:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 802a6bc:	9308      	str	r3, [sp, #32]
 802a6be:	d01f      	beq.n	802a700 <_svfprintf_r+0x9c0>
 802a6c0:	2700      	movs	r7, #0
 802a6c2:	2e00      	cmp	r6, #0
 802a6c4:	9708      	str	r7, [sp, #32]
 802a6c6:	f77f ae8a 	ble.w	802a3de <_svfprintf_r+0x69e>
 802a6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a6cc:	781b      	ldrb	r3, [r3, #0]
 802a6ce:	2bff      	cmp	r3, #255	@ 0xff
 802a6d0:	d107      	bne.n	802a6e2 <_svfprintf_r+0x9a2>
 802a6d2:	9b08      	ldr	r3, [sp, #32]
 802a6d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a6d6:	443b      	add	r3, r7
 802a6d8:	fb02 8803 	mla	r8, r2, r3, r8
 802a6dc:	e67f      	b.n	802a3de <_svfprintf_r+0x69e>
 802a6de:	46b0      	mov	r8, r6
 802a6e0:	e7de      	b.n	802a6a0 <_svfprintf_r+0x960>
 802a6e2:	42b3      	cmp	r3, r6
 802a6e4:	daf5      	bge.n	802a6d2 <_svfprintf_r+0x992>
 802a6e6:	1af6      	subs	r6, r6, r3
 802a6e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a6ea:	785b      	ldrb	r3, [r3, #1]
 802a6ec:	b133      	cbz	r3, 802a6fc <_svfprintf_r+0x9bc>
 802a6ee:	9b08      	ldr	r3, [sp, #32]
 802a6f0:	3301      	adds	r3, #1
 802a6f2:	9308      	str	r3, [sp, #32]
 802a6f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a6f6:	3301      	adds	r3, #1
 802a6f8:	9309      	str	r3, [sp, #36]	@ 0x24
 802a6fa:	e7e6      	b.n	802a6ca <_svfprintf_r+0x98a>
 802a6fc:	3701      	adds	r7, #1
 802a6fe:	e7e4      	b.n	802a6ca <_svfprintf_r+0x98a>
 802a700:	9f08      	ldr	r7, [sp, #32]
 802a702:	e66c      	b.n	802a3de <_svfprintf_r+0x69e>
 802a704:	232d      	movs	r3, #45	@ 0x2d
 802a706:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a70a:	e66c      	b.n	802a3e6 <_svfprintf_r+0x6a6>
 802a70c:	06af      	lsls	r7, r5, #26
 802a70e:	d50a      	bpl.n	802a726 <_svfprintf_r+0x9e6>
 802a710:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a712:	6833      	ldr	r3, [r6, #0]
 802a714:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a716:	17d2      	asrs	r2, r2, #31
 802a718:	e9c3 1200 	strd	r1, r2, [r3]
 802a71c:	3604      	adds	r6, #4
 802a71e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 802a722:	f7ff bb46 	b.w	8029db2 <_svfprintf_r+0x72>
 802a726:	06e8      	lsls	r0, r5, #27
 802a728:	d503      	bpl.n	802a732 <_svfprintf_r+0x9f2>
 802a72a:	6833      	ldr	r3, [r6, #0]
 802a72c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a72e:	601a      	str	r2, [r3, #0]
 802a730:	e7f4      	b.n	802a71c <_svfprintf_r+0x9dc>
 802a732:	0669      	lsls	r1, r5, #25
 802a734:	d503      	bpl.n	802a73e <_svfprintf_r+0x9fe>
 802a736:	6833      	ldr	r3, [r6, #0]
 802a738:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a73a:	801a      	strh	r2, [r3, #0]
 802a73c:	e7ee      	b.n	802a71c <_svfprintf_r+0x9dc>
 802a73e:	05aa      	lsls	r2, r5, #22
 802a740:	d5f3      	bpl.n	802a72a <_svfprintf_r+0x9ea>
 802a742:	6833      	ldr	r3, [r6, #0]
 802a744:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a746:	701a      	strb	r2, [r3, #0]
 802a748:	e7e8      	b.n	802a71c <_svfprintf_r+0x9dc>
 802a74a:	f045 0510 	orr.w	r5, r5, #16
 802a74e:	f015 0320 	ands.w	r3, r5, #32
 802a752:	d020      	beq.n	802a796 <_svfprintf_r+0xa56>
 802a754:	3607      	adds	r6, #7
 802a756:	f026 0307 	bic.w	r3, r6, #7
 802a75a:	461a      	mov	r2, r3
 802a75c:	685f      	ldr	r7, [r3, #4]
 802a75e:	f852 6b08 	ldr.w	r6, [r2], #8
 802a762:	9207      	str	r2, [sp, #28]
 802a764:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a768:	2300      	movs	r3, #0
 802a76a:	2200      	movs	r2, #0
 802a76c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802a770:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802a774:	f000 848c 	beq.w	802b090 <_svfprintf_r+0x1350>
 802a778:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802a77c:	9208      	str	r2, [sp, #32]
 802a77e:	ea56 0207 	orrs.w	r2, r6, r7
 802a782:	f040 848a 	bne.w	802b09a <_svfprintf_r+0x135a>
 802a786:	f1b8 0f00 	cmp.w	r8, #0
 802a78a:	f000 80db 	beq.w	802a944 <_svfprintf_r+0xc04>
 802a78e:	2b01      	cmp	r3, #1
 802a790:	f040 8486 	bne.w	802b0a0 <_svfprintf_r+0x1360>
 802a794:	e083      	b.n	802a89e <_svfprintf_r+0xb5e>
 802a796:	4632      	mov	r2, r6
 802a798:	f015 0710 	ands.w	r7, r5, #16
 802a79c:	f852 6b04 	ldr.w	r6, [r2], #4
 802a7a0:	9207      	str	r2, [sp, #28]
 802a7a2:	d001      	beq.n	802a7a8 <_svfprintf_r+0xa68>
 802a7a4:	461f      	mov	r7, r3
 802a7a6:	e7dd      	b.n	802a764 <_svfprintf_r+0xa24>
 802a7a8:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802a7ac:	d001      	beq.n	802a7b2 <_svfprintf_r+0xa72>
 802a7ae:	b2b6      	uxth	r6, r6
 802a7b0:	e7d8      	b.n	802a764 <_svfprintf_r+0xa24>
 802a7b2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802a7b6:	d0d5      	beq.n	802a764 <_svfprintf_r+0xa24>
 802a7b8:	b2f6      	uxtb	r6, r6
 802a7ba:	e7f3      	b.n	802a7a4 <_svfprintf_r+0xa64>
 802a7bc:	4633      	mov	r3, r6
 802a7be:	2278      	movs	r2, #120	@ 0x78
 802a7c0:	f853 6b04 	ldr.w	r6, [r3], #4
 802a7c4:	9307      	str	r3, [sp, #28]
 802a7c6:	f647 0330 	movw	r3, #30768	@ 0x7830
 802a7ca:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802a7ce:	4b94      	ldr	r3, [pc, #592]	@ (802aa20 <_svfprintf_r+0xce0>)
 802a7d0:	9319      	str	r3, [sp, #100]	@ 0x64
 802a7d2:	2700      	movs	r7, #0
 802a7d4:	f045 0502 	orr.w	r5, r5, #2
 802a7d8:	2302      	movs	r3, #2
 802a7da:	9206      	str	r2, [sp, #24]
 802a7dc:	e7c5      	b.n	802a76a <_svfprintf_r+0xa2a>
 802a7de:	4633      	mov	r3, r6
 802a7e0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802a7e4:	f853 9b04 	ldr.w	r9, [r3], #4
 802a7e8:	9307      	str	r3, [sp, #28]
 802a7ea:	f04f 0600 	mov.w	r6, #0
 802a7ee:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802a7f2:	d00f      	beq.n	802a814 <_svfprintf_r+0xad4>
 802a7f4:	4642      	mov	r2, r8
 802a7f6:	4631      	mov	r1, r6
 802a7f8:	4648      	mov	r0, r9
 802a7fa:	f7d5 fd01 	bl	8000200 <memchr>
 802a7fe:	4682      	mov	sl, r0
 802a800:	2800      	cmp	r0, #0
 802a802:	f43f ac81 	beq.w	802a108 <_svfprintf_r+0x3c8>
 802a806:	eba0 0809 	sub.w	r8, r0, r9
 802a80a:	46b2      	mov	sl, r6
 802a80c:	9610      	str	r6, [sp, #64]	@ 0x40
 802a80e:	4637      	mov	r7, r6
 802a810:	9608      	str	r6, [sp, #32]
 802a812:	e5eb      	b.n	802a3ec <_svfprintf_r+0x6ac>
 802a814:	4648      	mov	r0, r9
 802a816:	f7d5 fd43 	bl	80002a0 <strlen>
 802a81a:	46b2      	mov	sl, r6
 802a81c:	4680      	mov	r8, r0
 802a81e:	e473      	b.n	802a108 <_svfprintf_r+0x3c8>
 802a820:	f045 0510 	orr.w	r5, r5, #16
 802a824:	f015 0320 	ands.w	r3, r5, #32
 802a828:	d009      	beq.n	802a83e <_svfprintf_r+0xafe>
 802a82a:	3607      	adds	r6, #7
 802a82c:	f026 0307 	bic.w	r3, r6, #7
 802a830:	461a      	mov	r2, r3
 802a832:	685f      	ldr	r7, [r3, #4]
 802a834:	f852 6b08 	ldr.w	r6, [r2], #8
 802a838:	9207      	str	r2, [sp, #28]
 802a83a:	2301      	movs	r3, #1
 802a83c:	e795      	b.n	802a76a <_svfprintf_r+0xa2a>
 802a83e:	4632      	mov	r2, r6
 802a840:	f015 0710 	ands.w	r7, r5, #16
 802a844:	f852 6b04 	ldr.w	r6, [r2], #4
 802a848:	9207      	str	r2, [sp, #28]
 802a84a:	d001      	beq.n	802a850 <_svfprintf_r+0xb10>
 802a84c:	461f      	mov	r7, r3
 802a84e:	e7f4      	b.n	802a83a <_svfprintf_r+0xafa>
 802a850:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802a854:	d001      	beq.n	802a85a <_svfprintf_r+0xb1a>
 802a856:	b2b6      	uxth	r6, r6
 802a858:	e7ef      	b.n	802a83a <_svfprintf_r+0xafa>
 802a85a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802a85e:	d0ec      	beq.n	802a83a <_svfprintf_r+0xafa>
 802a860:	b2f6      	uxtb	r6, r6
 802a862:	e7f3      	b.n	802a84c <_svfprintf_r+0xb0c>
 802a864:	4b6f      	ldr	r3, [pc, #444]	@ (802aa24 <_svfprintf_r+0xce4>)
 802a866:	f7ff bb39 	b.w	8029edc <_svfprintf_r+0x19c>
 802a86a:	4632      	mov	r2, r6
 802a86c:	f015 0710 	ands.w	r7, r5, #16
 802a870:	f852 6b04 	ldr.w	r6, [r2], #4
 802a874:	9207      	str	r2, [sp, #28]
 802a876:	d002      	beq.n	802a87e <_svfprintf_r+0xb3e>
 802a878:	461f      	mov	r7, r3
 802a87a:	f7ff bb3c 	b.w	8029ef6 <_svfprintf_r+0x1b6>
 802a87e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802a882:	d002      	beq.n	802a88a <_svfprintf_r+0xb4a>
 802a884:	b2b6      	uxth	r6, r6
 802a886:	f7ff bb36 	b.w	8029ef6 <_svfprintf_r+0x1b6>
 802a88a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802a88e:	f43f ab32 	beq.w	8029ef6 <_svfprintf_r+0x1b6>
 802a892:	b2f6      	uxtb	r6, r6
 802a894:	e7f0      	b.n	802a878 <_svfprintf_r+0xb38>
 802a896:	2e0a      	cmp	r6, #10
 802a898:	f177 0300 	sbcs.w	r3, r7, #0
 802a89c:	d207      	bcs.n	802a8ae <_svfprintf_r+0xb6e>
 802a89e:	3630      	adds	r6, #48	@ 0x30
 802a8a0:	b2f6      	uxtb	r6, r6
 802a8a2:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802a8a6:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 802a8aa:	f000 bc15 	b.w	802b0d8 <_svfprintf_r+0x1398>
 802a8ae:	2300      	movs	r3, #0
 802a8b0:	9304      	str	r3, [sp, #16]
 802a8b2:	9b08      	ldr	r3, [sp, #32]
 802a8b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802a8b8:	ad52      	add	r5, sp, #328	@ 0x148
 802a8ba:	9310      	str	r3, [sp, #64]	@ 0x40
 802a8bc:	220a      	movs	r2, #10
 802a8be:	2300      	movs	r3, #0
 802a8c0:	4630      	mov	r0, r6
 802a8c2:	4639      	mov	r1, r7
 802a8c4:	f7d6 fa48 	bl	8000d58 <__aeabi_uldivmod>
 802a8c8:	9b04      	ldr	r3, [sp, #16]
 802a8ca:	9011      	str	r0, [sp, #68]	@ 0x44
 802a8cc:	3301      	adds	r3, #1
 802a8ce:	9304      	str	r3, [sp, #16]
 802a8d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a8d2:	3230      	adds	r2, #48	@ 0x30
 802a8d4:	468a      	mov	sl, r1
 802a8d6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 802a8da:	f805 2c01 	strb.w	r2, [r5, #-1]
 802a8de:	b1d3      	cbz	r3, 802a916 <_svfprintf_r+0xbd6>
 802a8e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a8e2:	9a04      	ldr	r2, [sp, #16]
 802a8e4:	781b      	ldrb	r3, [r3, #0]
 802a8e6:	429a      	cmp	r2, r3
 802a8e8:	d115      	bne.n	802a916 <_svfprintf_r+0xbd6>
 802a8ea:	2aff      	cmp	r2, #255	@ 0xff
 802a8ec:	d013      	beq.n	802a916 <_svfprintf_r+0xbd6>
 802a8ee:	2e0a      	cmp	r6, #10
 802a8f0:	f177 0300 	sbcs.w	r3, r7, #0
 802a8f4:	d30f      	bcc.n	802a916 <_svfprintf_r+0xbd6>
 802a8f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a8f8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802a8fa:	eba9 0903 	sub.w	r9, r9, r3
 802a8fe:	461a      	mov	r2, r3
 802a900:	4648      	mov	r0, r9
 802a902:	f7fb f8ec 	bl	8025ade <strncpy>
 802a906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a908:	785b      	ldrb	r3, [r3, #1]
 802a90a:	b11b      	cbz	r3, 802a914 <_svfprintf_r+0xbd4>
 802a90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a90e:	3301      	adds	r3, #1
 802a910:	9309      	str	r3, [sp, #36]	@ 0x24
 802a912:	2300      	movs	r3, #0
 802a914:	9304      	str	r3, [sp, #16]
 802a916:	2e0a      	cmp	r6, #10
 802a918:	f177 0700 	sbcs.w	r7, r7, #0
 802a91c:	f0c0 83dc 	bcc.w	802b0d8 <_svfprintf_r+0x1398>
 802a920:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802a922:	4657      	mov	r7, sl
 802a924:	464d      	mov	r5, r9
 802a926:	e7c9      	b.n	802a8bc <_svfprintf_r+0xb7c>
 802a928:	f006 030f 	and.w	r3, r6, #15
 802a92c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802a92e:	0936      	lsrs	r6, r6, #4
 802a930:	5cd3      	ldrb	r3, [r2, r3]
 802a932:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802a936:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802a93a:	093f      	lsrs	r7, r7, #4
 802a93c:	ea56 0307 	orrs.w	r3, r6, r7
 802a940:	d1f2      	bne.n	802a928 <_svfprintf_r+0xbe8>
 802a942:	e3c9      	b.n	802b0d8 <_svfprintf_r+0x1398>
 802a944:	b91b      	cbnz	r3, 802a94e <_svfprintf_r+0xc0e>
 802a946:	07e9      	lsls	r1, r5, #31
 802a948:	d501      	bpl.n	802a94e <_svfprintf_r+0xc0e>
 802a94a:	2630      	movs	r6, #48	@ 0x30
 802a94c:	e7a9      	b.n	802a8a2 <_svfprintf_r+0xb62>
 802a94e:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 802a952:	e3c1      	b.n	802b0d8 <_svfprintf_r+0x1398>
 802a954:	9b06      	ldr	r3, [sp, #24]
 802a956:	2b00      	cmp	r3, #0
 802a958:	f000 838f 	beq.w	802b07a <_svfprintf_r+0x133a>
 802a95c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802a960:	2300      	movs	r3, #0
 802a962:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a966:	9607      	str	r6, [sp, #28]
 802a968:	f7ff bb63 	b.w	802a032 <_svfprintf_r+0x2f2>
 802a96c:	2010      	movs	r0, #16
 802a96e:	4403      	add	r3, r0
 802a970:	2a07      	cmp	r2, #7
 802a972:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a976:	6060      	str	r0, [r4, #4]
 802a978:	dd08      	ble.n	802a98c <_svfprintf_r+0xc4c>
 802a97a:	9803      	ldr	r0, [sp, #12]
 802a97c:	aa26      	add	r2, sp, #152	@ 0x98
 802a97e:	4659      	mov	r1, fp
 802a980:	f7fd fd66 	bl	8028450 <__ssprint_r>
 802a984:	2800      	cmp	r0, #0
 802a986:	f040 8356 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802a98a:	a929      	add	r1, sp, #164	@ 0xa4
 802a98c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a98e:	3b10      	subs	r3, #16
 802a990:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a992:	460c      	mov	r4, r1
 802a994:	e546      	b.n	802a424 <_svfprintf_r+0x6e4>
 802a996:	460c      	mov	r4, r1
 802a998:	e561      	b.n	802a45e <_svfprintf_r+0x71e>
 802a99a:	9803      	ldr	r0, [sp, #12]
 802a99c:	aa26      	add	r2, sp, #152	@ 0x98
 802a99e:	4659      	mov	r1, fp
 802a9a0:	f7fd fd56 	bl	8028450 <__ssprint_r>
 802a9a4:	2800      	cmp	r0, #0
 802a9a6:	f040 8346 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802a9aa:	ac29      	add	r4, sp, #164	@ 0xa4
 802a9ac:	e569      	b.n	802a482 <_svfprintf_r+0x742>
 802a9ae:	9803      	ldr	r0, [sp, #12]
 802a9b0:	aa26      	add	r2, sp, #152	@ 0x98
 802a9b2:	4659      	mov	r1, fp
 802a9b4:	f7fd fd4c 	bl	8028450 <__ssprint_r>
 802a9b8:	2800      	cmp	r0, #0
 802a9ba:	f040 833c 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802a9be:	ac29      	add	r4, sp, #164	@ 0xa4
 802a9c0:	e56f      	b.n	802a4a2 <_svfprintf_r+0x762>
 802a9c2:	2010      	movs	r0, #16
 802a9c4:	4403      	add	r3, r0
 802a9c6:	2a07      	cmp	r2, #7
 802a9c8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a9cc:	6060      	str	r0, [r4, #4]
 802a9ce:	dd08      	ble.n	802a9e2 <_svfprintf_r+0xca2>
 802a9d0:	9803      	ldr	r0, [sp, #12]
 802a9d2:	aa26      	add	r2, sp, #152	@ 0x98
 802a9d4:	4659      	mov	r1, fp
 802a9d6:	f7fd fd3b 	bl	8028450 <__ssprint_r>
 802a9da:	2800      	cmp	r0, #0
 802a9dc:	f040 832b 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802a9e0:	a929      	add	r1, sp, #164	@ 0xa4
 802a9e2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a9e4:	3b10      	subs	r3, #16
 802a9e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a9e8:	460c      	mov	r4, r1
 802a9ea:	e563      	b.n	802a4b4 <_svfprintf_r+0x774>
 802a9ec:	460c      	mov	r4, r1
 802a9ee:	e57e      	b.n	802a4ee <_svfprintf_r+0x7ae>
 802a9f0:	2010      	movs	r0, #16
 802a9f2:	4403      	add	r3, r0
 802a9f4:	2a07      	cmp	r2, #7
 802a9f6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a9fa:	6060      	str	r0, [r4, #4]
 802a9fc:	dd08      	ble.n	802aa10 <_svfprintf_r+0xcd0>
 802a9fe:	9803      	ldr	r0, [sp, #12]
 802aa00:	aa26      	add	r2, sp, #152	@ 0x98
 802aa02:	4659      	mov	r1, fp
 802aa04:	f7fd fd24 	bl	8028450 <__ssprint_r>
 802aa08:	2800      	cmp	r0, #0
 802aa0a:	f040 8314 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802aa0e:	a929      	add	r1, sp, #164	@ 0xa4
 802aa10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802aa12:	3b10      	subs	r3, #16
 802aa14:	9310      	str	r3, [sp, #64]	@ 0x40
 802aa16:	460c      	mov	r4, r1
 802aa18:	e56f      	b.n	802a4fa <_svfprintf_r+0x7ba>
 802aa1a:	460c      	mov	r4, r1
 802aa1c:	e58a      	b.n	802a534 <_svfprintf_r+0x7f4>
 802aa1e:	bf00      	nop
 802aa20:	08034058 	.word	0x08034058
 802aa24:	08034069 	.word	0x08034069
 802aa28:	9b06      	ldr	r3, [sp, #24]
 802aa2a:	2b65      	cmp	r3, #101	@ 0x65
 802aa2c:	f340 8246 	ble.w	802aebc <_svfprintf_r+0x117c>
 802aa30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802aa34:	2200      	movs	r2, #0
 802aa36:	2300      	movs	r3, #0
 802aa38:	f7d6 f85e 	bl	8000af8 <__aeabi_dcmpeq>
 802aa3c:	2800      	cmp	r0, #0
 802aa3e:	d06a      	beq.n	802ab16 <_svfprintf_r+0xdd6>
 802aa40:	4b73      	ldr	r3, [pc, #460]	@ (802ac10 <_svfprintf_r+0xed0>)
 802aa42:	6023      	str	r3, [r4, #0]
 802aa44:	2301      	movs	r3, #1
 802aa46:	6063      	str	r3, [r4, #4]
 802aa48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802aa4a:	3301      	adds	r3, #1
 802aa4c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802aa4e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802aa50:	3301      	adds	r3, #1
 802aa52:	2b07      	cmp	r3, #7
 802aa54:	9327      	str	r3, [sp, #156]	@ 0x9c
 802aa56:	dc37      	bgt.n	802aac8 <_svfprintf_r+0xd88>
 802aa58:	3408      	adds	r4, #8
 802aa5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802aa5c:	9a04      	ldr	r2, [sp, #16]
 802aa5e:	4293      	cmp	r3, r2
 802aa60:	db02      	blt.n	802aa68 <_svfprintf_r+0xd28>
 802aa62:	07ef      	lsls	r7, r5, #31
 802aa64:	f57f ad76 	bpl.w	802a554 <_svfprintf_r+0x814>
 802aa68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802aa6a:	6023      	str	r3, [r4, #0]
 802aa6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802aa6e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802aa70:	6063      	str	r3, [r4, #4]
 802aa72:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802aa74:	4413      	add	r3, r2
 802aa76:	9328      	str	r3, [sp, #160]	@ 0xa0
 802aa78:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802aa7a:	3301      	adds	r3, #1
 802aa7c:	2b07      	cmp	r3, #7
 802aa7e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802aa80:	dc2c      	bgt.n	802aadc <_svfprintf_r+0xd9c>
 802aa82:	3408      	adds	r4, #8
 802aa84:	9b04      	ldr	r3, [sp, #16]
 802aa86:	1e5e      	subs	r6, r3, #1
 802aa88:	2e00      	cmp	r6, #0
 802aa8a:	f77f ad63 	ble.w	802a554 <_svfprintf_r+0x814>
 802aa8e:	4f61      	ldr	r7, [pc, #388]	@ (802ac14 <_svfprintf_r+0xed4>)
 802aa90:	f04f 0810 	mov.w	r8, #16
 802aa94:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802aa98:	2e10      	cmp	r6, #16
 802aa9a:	f103 0301 	add.w	r3, r3, #1
 802aa9e:	f104 0108 	add.w	r1, r4, #8
 802aaa2:	6027      	str	r7, [r4, #0]
 802aaa4:	dc24      	bgt.n	802aaf0 <_svfprintf_r+0xdb0>
 802aaa6:	6066      	str	r6, [r4, #4]
 802aaa8:	2b07      	cmp	r3, #7
 802aaaa:	4416      	add	r6, r2
 802aaac:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802aab0:	f340 82a0 	ble.w	802aff4 <_svfprintf_r+0x12b4>
 802aab4:	9803      	ldr	r0, [sp, #12]
 802aab6:	aa26      	add	r2, sp, #152	@ 0x98
 802aab8:	4659      	mov	r1, fp
 802aaba:	f7fd fcc9 	bl	8028450 <__ssprint_r>
 802aabe:	2800      	cmp	r0, #0
 802aac0:	f040 82b9 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802aac4:	ac29      	add	r4, sp, #164	@ 0xa4
 802aac6:	e545      	b.n	802a554 <_svfprintf_r+0x814>
 802aac8:	9803      	ldr	r0, [sp, #12]
 802aaca:	aa26      	add	r2, sp, #152	@ 0x98
 802aacc:	4659      	mov	r1, fp
 802aace:	f7fd fcbf 	bl	8028450 <__ssprint_r>
 802aad2:	2800      	cmp	r0, #0
 802aad4:	f040 82af 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802aad8:	ac29      	add	r4, sp, #164	@ 0xa4
 802aada:	e7be      	b.n	802aa5a <_svfprintf_r+0xd1a>
 802aadc:	9803      	ldr	r0, [sp, #12]
 802aade:	aa26      	add	r2, sp, #152	@ 0x98
 802aae0:	4659      	mov	r1, fp
 802aae2:	f7fd fcb5 	bl	8028450 <__ssprint_r>
 802aae6:	2800      	cmp	r0, #0
 802aae8:	f040 82a5 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802aaec:	ac29      	add	r4, sp, #164	@ 0xa4
 802aaee:	e7c9      	b.n	802aa84 <_svfprintf_r+0xd44>
 802aaf0:	3210      	adds	r2, #16
 802aaf2:	2b07      	cmp	r3, #7
 802aaf4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802aaf8:	f8c4 8004 	str.w	r8, [r4, #4]
 802aafc:	dd08      	ble.n	802ab10 <_svfprintf_r+0xdd0>
 802aafe:	9803      	ldr	r0, [sp, #12]
 802ab00:	aa26      	add	r2, sp, #152	@ 0x98
 802ab02:	4659      	mov	r1, fp
 802ab04:	f7fd fca4 	bl	8028450 <__ssprint_r>
 802ab08:	2800      	cmp	r0, #0
 802ab0a:	f040 8294 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802ab0e:	a929      	add	r1, sp, #164	@ 0xa4
 802ab10:	3e10      	subs	r6, #16
 802ab12:	460c      	mov	r4, r1
 802ab14:	e7be      	b.n	802aa94 <_svfprintf_r+0xd54>
 802ab16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ab18:	2b00      	cmp	r3, #0
 802ab1a:	dc7d      	bgt.n	802ac18 <_svfprintf_r+0xed8>
 802ab1c:	4b3c      	ldr	r3, [pc, #240]	@ (802ac10 <_svfprintf_r+0xed0>)
 802ab1e:	6023      	str	r3, [r4, #0]
 802ab20:	2301      	movs	r3, #1
 802ab22:	6063      	str	r3, [r4, #4]
 802ab24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ab26:	3301      	adds	r3, #1
 802ab28:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ab2a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ab2c:	3301      	adds	r3, #1
 802ab2e:	2b07      	cmp	r3, #7
 802ab30:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ab32:	dc46      	bgt.n	802abc2 <_svfprintf_r+0xe82>
 802ab34:	3408      	adds	r4, #8
 802ab36:	9904      	ldr	r1, [sp, #16]
 802ab38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ab3a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802ab3c:	430b      	orrs	r3, r1
 802ab3e:	f005 0101 	and.w	r1, r5, #1
 802ab42:	430b      	orrs	r3, r1
 802ab44:	f43f ad06 	beq.w	802a554 <_svfprintf_r+0x814>
 802ab48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ab4a:	6023      	str	r3, [r4, #0]
 802ab4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ab4e:	6063      	str	r3, [r4, #4]
 802ab50:	441a      	add	r2, r3
 802ab52:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ab54:	9228      	str	r2, [sp, #160]	@ 0xa0
 802ab56:	3301      	adds	r3, #1
 802ab58:	2b07      	cmp	r3, #7
 802ab5a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ab5c:	dc3b      	bgt.n	802abd6 <_svfprintf_r+0xe96>
 802ab5e:	f104 0308 	add.w	r3, r4, #8
 802ab62:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802ab64:	2e00      	cmp	r6, #0
 802ab66:	da1b      	bge.n	802aba0 <_svfprintf_r+0xe60>
 802ab68:	4f2a      	ldr	r7, [pc, #168]	@ (802ac14 <_svfprintf_r+0xed4>)
 802ab6a:	4276      	negs	r6, r6
 802ab6c:	461a      	mov	r2, r3
 802ab6e:	2410      	movs	r4, #16
 802ab70:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802ab74:	2e10      	cmp	r6, #16
 802ab76:	f101 0101 	add.w	r1, r1, #1
 802ab7a:	f103 0308 	add.w	r3, r3, #8
 802ab7e:	6017      	str	r7, [r2, #0]
 802ab80:	dc33      	bgt.n	802abea <_svfprintf_r+0xeaa>
 802ab82:	6056      	str	r6, [r2, #4]
 802ab84:	2907      	cmp	r1, #7
 802ab86:	4406      	add	r6, r0
 802ab88:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802ab8c:	dd08      	ble.n	802aba0 <_svfprintf_r+0xe60>
 802ab8e:	9803      	ldr	r0, [sp, #12]
 802ab90:	aa26      	add	r2, sp, #152	@ 0x98
 802ab92:	4659      	mov	r1, fp
 802ab94:	f7fd fc5c 	bl	8028450 <__ssprint_r>
 802ab98:	2800      	cmp	r0, #0
 802ab9a:	f040 824c 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802ab9e:	ab29      	add	r3, sp, #164	@ 0xa4
 802aba0:	9a04      	ldr	r2, [sp, #16]
 802aba2:	9904      	ldr	r1, [sp, #16]
 802aba4:	605a      	str	r2, [r3, #4]
 802aba6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802aba8:	f8c3 9000 	str.w	r9, [r3]
 802abac:	440a      	add	r2, r1
 802abae:	9228      	str	r2, [sp, #160]	@ 0xa0
 802abb0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802abb2:	3201      	adds	r2, #1
 802abb4:	2a07      	cmp	r2, #7
 802abb6:	9227      	str	r2, [sp, #156]	@ 0x9c
 802abb8:	f73f af7c 	bgt.w	802aab4 <_svfprintf_r+0xd74>
 802abbc:	f103 0408 	add.w	r4, r3, #8
 802abc0:	e4c8      	b.n	802a554 <_svfprintf_r+0x814>
 802abc2:	9803      	ldr	r0, [sp, #12]
 802abc4:	aa26      	add	r2, sp, #152	@ 0x98
 802abc6:	4659      	mov	r1, fp
 802abc8:	f7fd fc42 	bl	8028450 <__ssprint_r>
 802abcc:	2800      	cmp	r0, #0
 802abce:	f040 8232 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802abd2:	ac29      	add	r4, sp, #164	@ 0xa4
 802abd4:	e7af      	b.n	802ab36 <_svfprintf_r+0xdf6>
 802abd6:	9803      	ldr	r0, [sp, #12]
 802abd8:	aa26      	add	r2, sp, #152	@ 0x98
 802abda:	4659      	mov	r1, fp
 802abdc:	f7fd fc38 	bl	8028450 <__ssprint_r>
 802abe0:	2800      	cmp	r0, #0
 802abe2:	f040 8228 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802abe6:	ab29      	add	r3, sp, #164	@ 0xa4
 802abe8:	e7bb      	b.n	802ab62 <_svfprintf_r+0xe22>
 802abea:	3010      	adds	r0, #16
 802abec:	2907      	cmp	r1, #7
 802abee:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802abf2:	6054      	str	r4, [r2, #4]
 802abf4:	dd08      	ble.n	802ac08 <_svfprintf_r+0xec8>
 802abf6:	9803      	ldr	r0, [sp, #12]
 802abf8:	aa26      	add	r2, sp, #152	@ 0x98
 802abfa:	4659      	mov	r1, fp
 802abfc:	f7fd fc28 	bl	8028450 <__ssprint_r>
 802ac00:	2800      	cmp	r0, #0
 802ac02:	f040 8218 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802ac06:	ab29      	add	r3, sp, #164	@ 0xa4
 802ac08:	3e10      	subs	r6, #16
 802ac0a:	461a      	mov	r2, r3
 802ac0c:	e7b0      	b.n	802ab70 <_svfprintf_r+0xe30>
 802ac0e:	bf00      	nop
 802ac10:	0803407a 	.word	0x0803407a
 802ac14:	080345be 	.word	0x080345be
 802ac18:	9b04      	ldr	r3, [sp, #16]
 802ac1a:	444b      	add	r3, r9
 802ac1c:	9306      	str	r3, [sp, #24]
 802ac1e:	9b04      	ldr	r3, [sp, #16]
 802ac20:	42b3      	cmp	r3, r6
 802ac22:	bfa8      	it	ge
 802ac24:	4633      	movge	r3, r6
 802ac26:	2b00      	cmp	r3, #0
 802ac28:	4698      	mov	r8, r3
 802ac2a:	dd0b      	ble.n	802ac44 <_svfprintf_r+0xf04>
 802ac2c:	e9c4 9300 	strd	r9, r3, [r4]
 802ac30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ac32:	4443      	add	r3, r8
 802ac34:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ac36:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ac38:	3301      	adds	r3, #1
 802ac3a:	2b07      	cmp	r3, #7
 802ac3c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ac3e:	f300 8089 	bgt.w	802ad54 <_svfprintf_r+0x1014>
 802ac42:	3408      	adds	r4, #8
 802ac44:	4643      	mov	r3, r8
 802ac46:	2b00      	cmp	r3, #0
 802ac48:	bfac      	ite	ge
 802ac4a:	eba6 0808 	subge.w	r8, r6, r8
 802ac4e:	46b0      	movlt	r8, r6
 802ac50:	f1b8 0f00 	cmp.w	r8, #0
 802ac54:	dd1b      	ble.n	802ac8e <_svfprintf_r+0xf4e>
 802ac56:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802ac5a:	4897      	ldr	r0, [pc, #604]	@ (802aeb8 <_svfprintf_r+0x1178>)
 802ac5c:	6020      	str	r0, [r4, #0]
 802ac5e:	f1b8 0f10 	cmp.w	r8, #16
 802ac62:	f102 0201 	add.w	r2, r2, #1
 802ac66:	f104 0108 	add.w	r1, r4, #8
 802ac6a:	dc7d      	bgt.n	802ad68 <_svfprintf_r+0x1028>
 802ac6c:	4443      	add	r3, r8
 802ac6e:	2a07      	cmp	r2, #7
 802ac70:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ac74:	f8c4 8004 	str.w	r8, [r4, #4]
 802ac78:	f340 808a 	ble.w	802ad90 <_svfprintf_r+0x1050>
 802ac7c:	9803      	ldr	r0, [sp, #12]
 802ac7e:	aa26      	add	r2, sp, #152	@ 0x98
 802ac80:	4659      	mov	r1, fp
 802ac82:	f7fd fbe5 	bl	8028450 <__ssprint_r>
 802ac86:	2800      	cmp	r0, #0
 802ac88:	f040 81d5 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802ac8c:	ac29      	add	r4, sp, #164	@ 0xa4
 802ac8e:	eb09 0806 	add.w	r8, r9, r6
 802ac92:	056e      	lsls	r6, r5, #21
 802ac94:	d508      	bpl.n	802aca8 <_svfprintf_r+0xf68>
 802ac96:	9b08      	ldr	r3, [sp, #32]
 802ac98:	2b00      	cmp	r3, #0
 802ac9a:	d17b      	bne.n	802ad94 <_svfprintf_r+0x1054>
 802ac9c:	2f00      	cmp	r7, #0
 802ac9e:	d17b      	bne.n	802ad98 <_svfprintf_r+0x1058>
 802aca0:	9b06      	ldr	r3, [sp, #24]
 802aca2:	4598      	cmp	r8, r3
 802aca4:	bf28      	it	cs
 802aca6:	4698      	movcs	r8, r3
 802aca8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802acaa:	9a04      	ldr	r2, [sp, #16]
 802acac:	4293      	cmp	r3, r2
 802acae:	db01      	blt.n	802acb4 <_svfprintf_r+0xf74>
 802acb0:	07e8      	lsls	r0, r5, #31
 802acb2:	d50e      	bpl.n	802acd2 <_svfprintf_r+0xf92>
 802acb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802acb6:	6023      	str	r3, [r4, #0]
 802acb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802acba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802acbc:	6063      	str	r3, [r4, #4]
 802acbe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802acc0:	4413      	add	r3, r2
 802acc2:	9328      	str	r3, [sp, #160]	@ 0xa0
 802acc4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802acc6:	3301      	adds	r3, #1
 802acc8:	2b07      	cmp	r3, #7
 802acca:	9327      	str	r3, [sp, #156]	@ 0x9c
 802accc:	f300 80df 	bgt.w	802ae8e <_svfprintf_r+0x114e>
 802acd0:	3408      	adds	r4, #8
 802acd2:	9b04      	ldr	r3, [sp, #16]
 802acd4:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802acd6:	1bdf      	subs	r7, r3, r7
 802acd8:	9b06      	ldr	r3, [sp, #24]
 802acda:	eba3 0308 	sub.w	r3, r3, r8
 802acde:	429f      	cmp	r7, r3
 802ace0:	bfa8      	it	ge
 802ace2:	461f      	movge	r7, r3
 802ace4:	2f00      	cmp	r7, #0
 802ace6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ace8:	dd0a      	ble.n	802ad00 <_svfprintf_r+0xfc0>
 802acea:	443b      	add	r3, r7
 802acec:	9328      	str	r3, [sp, #160]	@ 0xa0
 802acee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802acf0:	3301      	adds	r3, #1
 802acf2:	2b07      	cmp	r3, #7
 802acf4:	e9c4 8700 	strd	r8, r7, [r4]
 802acf8:	9327      	str	r3, [sp, #156]	@ 0x9c
 802acfa:	f300 80d2 	bgt.w	802aea2 <_svfprintf_r+0x1162>
 802acfe:	3408      	adds	r4, #8
 802ad00:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802ad02:	9b04      	ldr	r3, [sp, #16]
 802ad04:	2f00      	cmp	r7, #0
 802ad06:	eba3 0606 	sub.w	r6, r3, r6
 802ad0a:	bfa8      	it	ge
 802ad0c:	1bf6      	subge	r6, r6, r7
 802ad0e:	2e00      	cmp	r6, #0
 802ad10:	f77f ac20 	ble.w	802a554 <_svfprintf_r+0x814>
 802ad14:	4f68      	ldr	r7, [pc, #416]	@ (802aeb8 <_svfprintf_r+0x1178>)
 802ad16:	f04f 0810 	mov.w	r8, #16
 802ad1a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802ad1e:	2e10      	cmp	r6, #16
 802ad20:	f103 0301 	add.w	r3, r3, #1
 802ad24:	f104 0108 	add.w	r1, r4, #8
 802ad28:	6027      	str	r7, [r4, #0]
 802ad2a:	f77f aebc 	ble.w	802aaa6 <_svfprintf_r+0xd66>
 802ad2e:	3210      	adds	r2, #16
 802ad30:	2b07      	cmp	r3, #7
 802ad32:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802ad36:	f8c4 8004 	str.w	r8, [r4, #4]
 802ad3a:	dd08      	ble.n	802ad4e <_svfprintf_r+0x100e>
 802ad3c:	9803      	ldr	r0, [sp, #12]
 802ad3e:	aa26      	add	r2, sp, #152	@ 0x98
 802ad40:	4659      	mov	r1, fp
 802ad42:	f7fd fb85 	bl	8028450 <__ssprint_r>
 802ad46:	2800      	cmp	r0, #0
 802ad48:	f040 8175 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802ad4c:	a929      	add	r1, sp, #164	@ 0xa4
 802ad4e:	3e10      	subs	r6, #16
 802ad50:	460c      	mov	r4, r1
 802ad52:	e7e2      	b.n	802ad1a <_svfprintf_r+0xfda>
 802ad54:	9803      	ldr	r0, [sp, #12]
 802ad56:	aa26      	add	r2, sp, #152	@ 0x98
 802ad58:	4659      	mov	r1, fp
 802ad5a:	f7fd fb79 	bl	8028450 <__ssprint_r>
 802ad5e:	2800      	cmp	r0, #0
 802ad60:	f040 8169 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802ad64:	ac29      	add	r4, sp, #164	@ 0xa4
 802ad66:	e76d      	b.n	802ac44 <_svfprintf_r+0xf04>
 802ad68:	2010      	movs	r0, #16
 802ad6a:	4403      	add	r3, r0
 802ad6c:	2a07      	cmp	r2, #7
 802ad6e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ad72:	6060      	str	r0, [r4, #4]
 802ad74:	dd08      	ble.n	802ad88 <_svfprintf_r+0x1048>
 802ad76:	9803      	ldr	r0, [sp, #12]
 802ad78:	aa26      	add	r2, sp, #152	@ 0x98
 802ad7a:	4659      	mov	r1, fp
 802ad7c:	f7fd fb68 	bl	8028450 <__ssprint_r>
 802ad80:	2800      	cmp	r0, #0
 802ad82:	f040 8158 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802ad86:	a929      	add	r1, sp, #164	@ 0xa4
 802ad88:	f1a8 0810 	sub.w	r8, r8, #16
 802ad8c:	460c      	mov	r4, r1
 802ad8e:	e762      	b.n	802ac56 <_svfprintf_r+0xf16>
 802ad90:	460c      	mov	r4, r1
 802ad92:	e77c      	b.n	802ac8e <_svfprintf_r+0xf4e>
 802ad94:	2f00      	cmp	r7, #0
 802ad96:	d04a      	beq.n	802ae2e <_svfprintf_r+0x10ee>
 802ad98:	3f01      	subs	r7, #1
 802ad9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802ad9c:	6023      	str	r3, [r4, #0]
 802ad9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802ada0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802ada2:	6063      	str	r3, [r4, #4]
 802ada4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ada6:	4413      	add	r3, r2
 802ada8:	9328      	str	r3, [sp, #160]	@ 0xa0
 802adaa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802adac:	3301      	adds	r3, #1
 802adae:	2b07      	cmp	r3, #7
 802adb0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802adb2:	dc43      	bgt.n	802ae3c <_svfprintf_r+0x10fc>
 802adb4:	3408      	adds	r4, #8
 802adb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802adb8:	781a      	ldrb	r2, [r3, #0]
 802adba:	9b06      	ldr	r3, [sp, #24]
 802adbc:	eba3 0308 	sub.w	r3, r3, r8
 802adc0:	429a      	cmp	r2, r3
 802adc2:	bfa8      	it	ge
 802adc4:	461a      	movge	r2, r3
 802adc6:	2a00      	cmp	r2, #0
 802adc8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802adca:	4691      	mov	r9, r2
 802adcc:	dd09      	ble.n	802ade2 <_svfprintf_r+0x10a2>
 802adce:	4413      	add	r3, r2
 802add0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802add2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802add4:	3301      	adds	r3, #1
 802add6:	2b07      	cmp	r3, #7
 802add8:	e9c4 8200 	strd	r8, r2, [r4]
 802addc:	9327      	str	r3, [sp, #156]	@ 0x9c
 802adde:	dc37      	bgt.n	802ae50 <_svfprintf_r+0x1110>
 802ade0:	3408      	adds	r4, #8
 802ade2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ade4:	781e      	ldrb	r6, [r3, #0]
 802ade6:	f1b9 0f00 	cmp.w	r9, #0
 802adea:	bfa8      	it	ge
 802adec:	eba6 0609 	subge.w	r6, r6, r9
 802adf0:	2e00      	cmp	r6, #0
 802adf2:	dd18      	ble.n	802ae26 <_svfprintf_r+0x10e6>
 802adf4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802adf8:	482f      	ldr	r0, [pc, #188]	@ (802aeb8 <_svfprintf_r+0x1178>)
 802adfa:	6020      	str	r0, [r4, #0]
 802adfc:	2e10      	cmp	r6, #16
 802adfe:	f103 0301 	add.w	r3, r3, #1
 802ae02:	f104 0108 	add.w	r1, r4, #8
 802ae06:	dc2d      	bgt.n	802ae64 <_svfprintf_r+0x1124>
 802ae08:	6066      	str	r6, [r4, #4]
 802ae0a:	2b07      	cmp	r3, #7
 802ae0c:	4416      	add	r6, r2
 802ae0e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802ae12:	dd3a      	ble.n	802ae8a <_svfprintf_r+0x114a>
 802ae14:	9803      	ldr	r0, [sp, #12]
 802ae16:	aa26      	add	r2, sp, #152	@ 0x98
 802ae18:	4659      	mov	r1, fp
 802ae1a:	f7fd fb19 	bl	8028450 <__ssprint_r>
 802ae1e:	2800      	cmp	r0, #0
 802ae20:	f040 8109 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802ae24:	ac29      	add	r4, sp, #164	@ 0xa4
 802ae26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ae28:	781b      	ldrb	r3, [r3, #0]
 802ae2a:	4498      	add	r8, r3
 802ae2c:	e733      	b.n	802ac96 <_svfprintf_r+0xf56>
 802ae2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ae30:	3b01      	subs	r3, #1
 802ae32:	9309      	str	r3, [sp, #36]	@ 0x24
 802ae34:	9b08      	ldr	r3, [sp, #32]
 802ae36:	3b01      	subs	r3, #1
 802ae38:	9308      	str	r3, [sp, #32]
 802ae3a:	e7ae      	b.n	802ad9a <_svfprintf_r+0x105a>
 802ae3c:	9803      	ldr	r0, [sp, #12]
 802ae3e:	aa26      	add	r2, sp, #152	@ 0x98
 802ae40:	4659      	mov	r1, fp
 802ae42:	f7fd fb05 	bl	8028450 <__ssprint_r>
 802ae46:	2800      	cmp	r0, #0
 802ae48:	f040 80f5 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802ae4c:	ac29      	add	r4, sp, #164	@ 0xa4
 802ae4e:	e7b2      	b.n	802adb6 <_svfprintf_r+0x1076>
 802ae50:	9803      	ldr	r0, [sp, #12]
 802ae52:	aa26      	add	r2, sp, #152	@ 0x98
 802ae54:	4659      	mov	r1, fp
 802ae56:	f7fd fafb 	bl	8028450 <__ssprint_r>
 802ae5a:	2800      	cmp	r0, #0
 802ae5c:	f040 80eb 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802ae60:	ac29      	add	r4, sp, #164	@ 0xa4
 802ae62:	e7be      	b.n	802ade2 <_svfprintf_r+0x10a2>
 802ae64:	2010      	movs	r0, #16
 802ae66:	4402      	add	r2, r0
 802ae68:	2b07      	cmp	r3, #7
 802ae6a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802ae6e:	6060      	str	r0, [r4, #4]
 802ae70:	dd08      	ble.n	802ae84 <_svfprintf_r+0x1144>
 802ae72:	9803      	ldr	r0, [sp, #12]
 802ae74:	aa26      	add	r2, sp, #152	@ 0x98
 802ae76:	4659      	mov	r1, fp
 802ae78:	f7fd faea 	bl	8028450 <__ssprint_r>
 802ae7c:	2800      	cmp	r0, #0
 802ae7e:	f040 80da 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802ae82:	a929      	add	r1, sp, #164	@ 0xa4
 802ae84:	3e10      	subs	r6, #16
 802ae86:	460c      	mov	r4, r1
 802ae88:	e7b4      	b.n	802adf4 <_svfprintf_r+0x10b4>
 802ae8a:	460c      	mov	r4, r1
 802ae8c:	e7cb      	b.n	802ae26 <_svfprintf_r+0x10e6>
 802ae8e:	9803      	ldr	r0, [sp, #12]
 802ae90:	aa26      	add	r2, sp, #152	@ 0x98
 802ae92:	4659      	mov	r1, fp
 802ae94:	f7fd fadc 	bl	8028450 <__ssprint_r>
 802ae98:	2800      	cmp	r0, #0
 802ae9a:	f040 80cc 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802ae9e:	ac29      	add	r4, sp, #164	@ 0xa4
 802aea0:	e717      	b.n	802acd2 <_svfprintf_r+0xf92>
 802aea2:	9803      	ldr	r0, [sp, #12]
 802aea4:	aa26      	add	r2, sp, #152	@ 0x98
 802aea6:	4659      	mov	r1, fp
 802aea8:	f7fd fad2 	bl	8028450 <__ssprint_r>
 802aeac:	2800      	cmp	r0, #0
 802aeae:	f040 80c2 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802aeb2:	ac29      	add	r4, sp, #164	@ 0xa4
 802aeb4:	e724      	b.n	802ad00 <_svfprintf_r+0xfc0>
 802aeb6:	bf00      	nop
 802aeb8:	080345be 	.word	0x080345be
 802aebc:	9904      	ldr	r1, [sp, #16]
 802aebe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802aec0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802aec2:	2901      	cmp	r1, #1
 802aec4:	f103 0301 	add.w	r3, r3, #1
 802aec8:	f102 0201 	add.w	r2, r2, #1
 802aecc:	f104 0608 	add.w	r6, r4, #8
 802aed0:	dc02      	bgt.n	802aed8 <_svfprintf_r+0x1198>
 802aed2:	07e9      	lsls	r1, r5, #31
 802aed4:	f140 8083 	bpl.w	802afde <_svfprintf_r+0x129e>
 802aed8:	2101      	movs	r1, #1
 802aeda:	2a07      	cmp	r2, #7
 802aedc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802aee0:	f8c4 9000 	str.w	r9, [r4]
 802aee4:	6061      	str	r1, [r4, #4]
 802aee6:	dd08      	ble.n	802aefa <_svfprintf_r+0x11ba>
 802aee8:	9803      	ldr	r0, [sp, #12]
 802aeea:	aa26      	add	r2, sp, #152	@ 0x98
 802aeec:	4659      	mov	r1, fp
 802aeee:	f7fd faaf 	bl	8028450 <__ssprint_r>
 802aef2:	2800      	cmp	r0, #0
 802aef4:	f040 809f 	bne.w	802b036 <_svfprintf_r+0x12f6>
 802aef8:	ae29      	add	r6, sp, #164	@ 0xa4
 802aefa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802aefc:	6033      	str	r3, [r6, #0]
 802aefe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802af00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802af02:	6073      	str	r3, [r6, #4]
 802af04:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802af06:	4413      	add	r3, r2
 802af08:	9328      	str	r3, [sp, #160]	@ 0xa0
 802af0a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802af0c:	3301      	adds	r3, #1
 802af0e:	2b07      	cmp	r3, #7
 802af10:	9327      	str	r3, [sp, #156]	@ 0x9c
 802af12:	dc33      	bgt.n	802af7c <_svfprintf_r+0x123c>
 802af14:	3608      	adds	r6, #8
 802af16:	9b04      	ldr	r3, [sp, #16]
 802af18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802af1c:	1e5c      	subs	r4, r3, #1
 802af1e:	2200      	movs	r2, #0
 802af20:	2300      	movs	r3, #0
 802af22:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 802af26:	f7d5 fde7 	bl	8000af8 <__aeabi_dcmpeq>
 802af2a:	2800      	cmp	r0, #0
 802af2c:	d12f      	bne.n	802af8e <_svfprintf_r+0x124e>
 802af2e:	f109 0201 	add.w	r2, r9, #1
 802af32:	e9c6 2400 	strd	r2, r4, [r6]
 802af36:	9a04      	ldr	r2, [sp, #16]
 802af38:	f108 0301 	add.w	r3, r8, #1
 802af3c:	3f01      	subs	r7, #1
 802af3e:	4417      	add	r7, r2
 802af40:	2b07      	cmp	r3, #7
 802af42:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802af46:	dd53      	ble.n	802aff0 <_svfprintf_r+0x12b0>
 802af48:	9803      	ldr	r0, [sp, #12]
 802af4a:	aa26      	add	r2, sp, #152	@ 0x98
 802af4c:	4659      	mov	r1, fp
 802af4e:	f7fd fa7f 	bl	8028450 <__ssprint_r>
 802af52:	2800      	cmp	r0, #0
 802af54:	d16f      	bne.n	802b036 <_svfprintf_r+0x12f6>
 802af56:	ae29      	add	r6, sp, #164	@ 0xa4
 802af58:	ab22      	add	r3, sp, #136	@ 0x88
 802af5a:	6033      	str	r3, [r6, #0]
 802af5c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802af5e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802af60:	6073      	str	r3, [r6, #4]
 802af62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802af64:	4413      	add	r3, r2
 802af66:	9328      	str	r3, [sp, #160]	@ 0xa0
 802af68:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802af6a:	3301      	adds	r3, #1
 802af6c:	2b07      	cmp	r3, #7
 802af6e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802af70:	f73f ada0 	bgt.w	802aab4 <_svfprintf_r+0xd74>
 802af74:	f106 0408 	add.w	r4, r6, #8
 802af78:	f7ff baec 	b.w	802a554 <_svfprintf_r+0x814>
 802af7c:	9803      	ldr	r0, [sp, #12]
 802af7e:	aa26      	add	r2, sp, #152	@ 0x98
 802af80:	4659      	mov	r1, fp
 802af82:	f7fd fa65 	bl	8028450 <__ssprint_r>
 802af86:	2800      	cmp	r0, #0
 802af88:	d155      	bne.n	802b036 <_svfprintf_r+0x12f6>
 802af8a:	ae29      	add	r6, sp, #164	@ 0xa4
 802af8c:	e7c3      	b.n	802af16 <_svfprintf_r+0x11d6>
 802af8e:	9b04      	ldr	r3, [sp, #16]
 802af90:	2b01      	cmp	r3, #1
 802af92:	dde1      	ble.n	802af58 <_svfprintf_r+0x1218>
 802af94:	4f57      	ldr	r7, [pc, #348]	@ (802b0f4 <_svfprintf_r+0x13b4>)
 802af96:	f04f 0810 	mov.w	r8, #16
 802af9a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802af9e:	2c10      	cmp	r4, #16
 802afa0:	f103 0301 	add.w	r3, r3, #1
 802afa4:	f106 0108 	add.w	r1, r6, #8
 802afa8:	6037      	str	r7, [r6, #0]
 802afaa:	dc07      	bgt.n	802afbc <_svfprintf_r+0x127c>
 802afac:	6074      	str	r4, [r6, #4]
 802afae:	2b07      	cmp	r3, #7
 802afb0:	4414      	add	r4, r2
 802afb2:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802afb6:	dcc7      	bgt.n	802af48 <_svfprintf_r+0x1208>
 802afb8:	460e      	mov	r6, r1
 802afba:	e7cd      	b.n	802af58 <_svfprintf_r+0x1218>
 802afbc:	3210      	adds	r2, #16
 802afbe:	2b07      	cmp	r3, #7
 802afc0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802afc4:	f8c6 8004 	str.w	r8, [r6, #4]
 802afc8:	dd06      	ble.n	802afd8 <_svfprintf_r+0x1298>
 802afca:	9803      	ldr	r0, [sp, #12]
 802afcc:	aa26      	add	r2, sp, #152	@ 0x98
 802afce:	4659      	mov	r1, fp
 802afd0:	f7fd fa3e 	bl	8028450 <__ssprint_r>
 802afd4:	bb78      	cbnz	r0, 802b036 <_svfprintf_r+0x12f6>
 802afd6:	a929      	add	r1, sp, #164	@ 0xa4
 802afd8:	3c10      	subs	r4, #16
 802afda:	460e      	mov	r6, r1
 802afdc:	e7dd      	b.n	802af9a <_svfprintf_r+0x125a>
 802afde:	2101      	movs	r1, #1
 802afe0:	2a07      	cmp	r2, #7
 802afe2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802afe6:	f8c4 9000 	str.w	r9, [r4]
 802afea:	6061      	str	r1, [r4, #4]
 802afec:	ddb4      	ble.n	802af58 <_svfprintf_r+0x1218>
 802afee:	e7ab      	b.n	802af48 <_svfprintf_r+0x1208>
 802aff0:	3608      	adds	r6, #8
 802aff2:	e7b1      	b.n	802af58 <_svfprintf_r+0x1218>
 802aff4:	460c      	mov	r4, r1
 802aff6:	f7ff baad 	b.w	802a554 <_svfprintf_r+0x814>
 802affa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802affc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802affe:	1a9d      	subs	r5, r3, r2
 802b000:	2d00      	cmp	r5, #0
 802b002:	f77f aaaa 	ble.w	802a55a <_svfprintf_r+0x81a>
 802b006:	4e3c      	ldr	r6, [pc, #240]	@ (802b0f8 <_svfprintf_r+0x13b8>)
 802b008:	2710      	movs	r7, #16
 802b00a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b00e:	2d10      	cmp	r5, #16
 802b010:	f103 0301 	add.w	r3, r3, #1
 802b014:	6026      	str	r6, [r4, #0]
 802b016:	dc18      	bgt.n	802b04a <_svfprintf_r+0x130a>
 802b018:	442a      	add	r2, r5
 802b01a:	2b07      	cmp	r3, #7
 802b01c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b020:	6065      	str	r5, [r4, #4]
 802b022:	f77f aa9a 	ble.w	802a55a <_svfprintf_r+0x81a>
 802b026:	9803      	ldr	r0, [sp, #12]
 802b028:	aa26      	add	r2, sp, #152	@ 0x98
 802b02a:	4659      	mov	r1, fp
 802b02c:	f7fd fa10 	bl	8028450 <__ssprint_r>
 802b030:	2800      	cmp	r0, #0
 802b032:	f43f aa92 	beq.w	802a55a <_svfprintf_r+0x81a>
 802b036:	f1ba 0f00 	cmp.w	sl, #0
 802b03a:	f43f a89a 	beq.w	802a172 <_svfprintf_r+0x432>
 802b03e:	9803      	ldr	r0, [sp, #12]
 802b040:	4651      	mov	r1, sl
 802b042:	f7fc fe43 	bl	8027ccc <_free_r>
 802b046:	f7ff b894 	b.w	802a172 <_svfprintf_r+0x432>
 802b04a:	3210      	adds	r2, #16
 802b04c:	2b07      	cmp	r3, #7
 802b04e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b052:	6067      	str	r7, [r4, #4]
 802b054:	dc02      	bgt.n	802b05c <_svfprintf_r+0x131c>
 802b056:	3408      	adds	r4, #8
 802b058:	3d10      	subs	r5, #16
 802b05a:	e7d6      	b.n	802b00a <_svfprintf_r+0x12ca>
 802b05c:	9803      	ldr	r0, [sp, #12]
 802b05e:	aa26      	add	r2, sp, #152	@ 0x98
 802b060:	4659      	mov	r1, fp
 802b062:	f7fd f9f5 	bl	8028450 <__ssprint_r>
 802b066:	2800      	cmp	r0, #0
 802b068:	d1e5      	bne.n	802b036 <_svfprintf_r+0x12f6>
 802b06a:	ac29      	add	r4, sp, #164	@ 0xa4
 802b06c:	e7f4      	b.n	802b058 <_svfprintf_r+0x1318>
 802b06e:	9803      	ldr	r0, [sp, #12]
 802b070:	4651      	mov	r1, sl
 802b072:	f7fc fe2b 	bl	8027ccc <_free_r>
 802b076:	f7ff ba88 	b.w	802a58a <_svfprintf_r+0x84a>
 802b07a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b07c:	2b00      	cmp	r3, #0
 802b07e:	f43f a878 	beq.w	802a172 <_svfprintf_r+0x432>
 802b082:	9803      	ldr	r0, [sp, #12]
 802b084:	aa26      	add	r2, sp, #152	@ 0x98
 802b086:	4659      	mov	r1, fp
 802b088:	f7fd f9e2 	bl	8028450 <__ssprint_r>
 802b08c:	f7ff b871 	b.w	802a172 <_svfprintf_r+0x432>
 802b090:	ea56 0207 	orrs.w	r2, r6, r7
 802b094:	9508      	str	r5, [sp, #32]
 802b096:	f43f ab7a 	beq.w	802a78e <_svfprintf_r+0xa4e>
 802b09a:	2b01      	cmp	r3, #1
 802b09c:	f43f abfb 	beq.w	802a896 <_svfprintf_r+0xb56>
 802b0a0:	2b02      	cmp	r3, #2
 802b0a2:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 802b0a6:	f43f ac3f 	beq.w	802a928 <_svfprintf_r+0xbe8>
 802b0aa:	f006 0307 	and.w	r3, r6, #7
 802b0ae:	08f6      	lsrs	r6, r6, #3
 802b0b0:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802b0b4:	08ff      	lsrs	r7, r7, #3
 802b0b6:	3330      	adds	r3, #48	@ 0x30
 802b0b8:	ea56 0107 	orrs.w	r1, r6, r7
 802b0bc:	464a      	mov	r2, r9
 802b0be:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802b0c2:	d1f2      	bne.n	802b0aa <_svfprintf_r+0x136a>
 802b0c4:	9908      	ldr	r1, [sp, #32]
 802b0c6:	07c8      	lsls	r0, r1, #31
 802b0c8:	d506      	bpl.n	802b0d8 <_svfprintf_r+0x1398>
 802b0ca:	2b30      	cmp	r3, #48	@ 0x30
 802b0cc:	d004      	beq.n	802b0d8 <_svfprintf_r+0x1398>
 802b0ce:	2330      	movs	r3, #48	@ 0x30
 802b0d0:	f809 3c01 	strb.w	r3, [r9, #-1]
 802b0d4:	f1a2 0902 	sub.w	r9, r2, #2
 802b0d8:	ab52      	add	r3, sp, #328	@ 0x148
 802b0da:	9d08      	ldr	r5, [sp, #32]
 802b0dc:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 802b0e0:	f04f 0a00 	mov.w	sl, #0
 802b0e4:	eba3 0809 	sub.w	r8, r3, r9
 802b0e8:	4657      	mov	r7, sl
 802b0ea:	f8cd a020 	str.w	sl, [sp, #32]
 802b0ee:	4656      	mov	r6, sl
 802b0f0:	f7ff b97c 	b.w	802a3ec <_svfprintf_r+0x6ac>
 802b0f4:	080345be 	.word	0x080345be
 802b0f8:	080345ce 	.word	0x080345ce

0802b0fc <__swhatbuf_r>:
 802b0fc:	b570      	push	{r4, r5, r6, lr}
 802b0fe:	460c      	mov	r4, r1
 802b100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b104:	2900      	cmp	r1, #0
 802b106:	b096      	sub	sp, #88	@ 0x58
 802b108:	4615      	mov	r5, r2
 802b10a:	461e      	mov	r6, r3
 802b10c:	da07      	bge.n	802b11e <__swhatbuf_r+0x22>
 802b10e:	89a1      	ldrh	r1, [r4, #12]
 802b110:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 802b114:	d117      	bne.n	802b146 <__swhatbuf_r+0x4a>
 802b116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b11a:	4608      	mov	r0, r1
 802b11c:	e00f      	b.n	802b13e <__swhatbuf_r+0x42>
 802b11e:	466a      	mov	r2, sp
 802b120:	f003 f892 	bl	802e248 <_fstat_r>
 802b124:	2800      	cmp	r0, #0
 802b126:	dbf2      	blt.n	802b10e <__swhatbuf_r+0x12>
 802b128:	9901      	ldr	r1, [sp, #4]
 802b12a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802b12e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802b132:	4259      	negs	r1, r3
 802b134:	4159      	adcs	r1, r3
 802b136:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802b13a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b13e:	6031      	str	r1, [r6, #0]
 802b140:	602b      	str	r3, [r5, #0]
 802b142:	b016      	add	sp, #88	@ 0x58
 802b144:	bd70      	pop	{r4, r5, r6, pc}
 802b146:	2100      	movs	r1, #0
 802b148:	2340      	movs	r3, #64	@ 0x40
 802b14a:	e7e6      	b.n	802b11a <__swhatbuf_r+0x1e>

0802b14c <__smakebuf_r>:
 802b14c:	898b      	ldrh	r3, [r1, #12]
 802b14e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b150:	079d      	lsls	r5, r3, #30
 802b152:	4606      	mov	r6, r0
 802b154:	460c      	mov	r4, r1
 802b156:	d507      	bpl.n	802b168 <__smakebuf_r+0x1c>
 802b158:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 802b15c:	6023      	str	r3, [r4, #0]
 802b15e:	6123      	str	r3, [r4, #16]
 802b160:	2301      	movs	r3, #1
 802b162:	6163      	str	r3, [r4, #20]
 802b164:	b003      	add	sp, #12
 802b166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b168:	ab01      	add	r3, sp, #4
 802b16a:	466a      	mov	r2, sp
 802b16c:	f7ff ffc6 	bl	802b0fc <__swhatbuf_r>
 802b170:	9f00      	ldr	r7, [sp, #0]
 802b172:	4605      	mov	r5, r0
 802b174:	4639      	mov	r1, r7
 802b176:	4630      	mov	r0, r6
 802b178:	f7fc fec0 	bl	8027efc <_malloc_r>
 802b17c:	b948      	cbnz	r0, 802b192 <__smakebuf_r+0x46>
 802b17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b182:	059a      	lsls	r2, r3, #22
 802b184:	d4ee      	bmi.n	802b164 <__smakebuf_r+0x18>
 802b186:	f023 0303 	bic.w	r3, r3, #3
 802b18a:	f043 0302 	orr.w	r3, r3, #2
 802b18e:	81a3      	strh	r3, [r4, #12]
 802b190:	e7e2      	b.n	802b158 <__smakebuf_r+0xc>
 802b192:	89a3      	ldrh	r3, [r4, #12]
 802b194:	6020      	str	r0, [r4, #0]
 802b196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b19a:	81a3      	strh	r3, [r4, #12]
 802b19c:	9b01      	ldr	r3, [sp, #4]
 802b19e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802b1a2:	b15b      	cbz	r3, 802b1bc <__smakebuf_r+0x70>
 802b1a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b1a8:	4630      	mov	r0, r6
 802b1aa:	f003 f85f 	bl	802e26c <_isatty_r>
 802b1ae:	b128      	cbz	r0, 802b1bc <__smakebuf_r+0x70>
 802b1b0:	89a3      	ldrh	r3, [r4, #12]
 802b1b2:	f023 0303 	bic.w	r3, r3, #3
 802b1b6:	f043 0301 	orr.w	r3, r3, #1
 802b1ba:	81a3      	strh	r3, [r4, #12]
 802b1bc:	89a3      	ldrh	r3, [r4, #12]
 802b1be:	431d      	orrs	r5, r3
 802b1c0:	81a5      	strh	r5, [r4, #12]
 802b1c2:	e7cf      	b.n	802b164 <__smakebuf_r+0x18>

0802b1c4 <__ssvfscanf_r>:
 802b1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b1c8:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 802b1cc:	461d      	mov	r5, r3
 802b1ce:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802b1d2:	af02      	add	r7, sp, #8
 802b1d4:	049e      	lsls	r6, r3, #18
 802b1d6:	62b8      	str	r0, [r7, #40]	@ 0x28
 802b1d8:	460c      	mov	r4, r1
 802b1da:	617a      	str	r2, [r7, #20]
 802b1dc:	d406      	bmi.n	802b1ec <__ssvfscanf_r+0x28>
 802b1de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802b1e2:	818b      	strh	r3, [r1, #12]
 802b1e4:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802b1e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802b1ea:	664b      	str	r3, [r1, #100]	@ 0x64
 802b1ec:	2300      	movs	r3, #0
 802b1ee:	e9c7 3307 	strd	r3, r3, [r7, #28]
 802b1f2:	61bb      	str	r3, [r7, #24]
 802b1f4:	637b      	str	r3, [r7, #52]	@ 0x34
 802b1f6:	633b      	str	r3, [r7, #48]	@ 0x30
 802b1f8:	627b      	str	r3, [r7, #36]	@ 0x24
 802b1fa:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802b1fe:	f818 3b01 	ldrb.w	r3, [r8], #1
 802b202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802b204:	2b00      	cmp	r3, #0
 802b206:	f000 80d3 	beq.w	802b3b0 <__ssvfscanf_r+0x1ec>
 802b20a:	4a84      	ldr	r2, [pc, #528]	@ (802b41c <__ssvfscanf_r+0x258>)
 802b20c:	5cd6      	ldrb	r6, [r2, r3]
 802b20e:	f016 0608 	ands.w	r6, r6, #8
 802b212:	d01b      	beq.n	802b24c <__ssvfscanf_r+0x88>
 802b214:	6863      	ldr	r3, [r4, #4]
 802b216:	2b00      	cmp	r3, #0
 802b218:	dd08      	ble.n	802b22c <__ssvfscanf_r+0x68>
 802b21a:	6823      	ldr	r3, [r4, #0]
 802b21c:	497f      	ldr	r1, [pc, #508]	@ (802b41c <__ssvfscanf_r+0x258>)
 802b21e:	781a      	ldrb	r2, [r3, #0]
 802b220:	5c8a      	ldrb	r2, [r1, r2]
 802b222:	0710      	lsls	r0, r2, #28
 802b224:	d409      	bmi.n	802b23a <__ssvfscanf_r+0x76>
 802b226:	f8c7 8014 	str.w	r8, [r7, #20]
 802b22a:	e7e6      	b.n	802b1fa <__ssvfscanf_r+0x36>
 802b22c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b22e:	4621      	mov	r1, r4
 802b230:	f7fd fe13 	bl	8028e5a <__ssrefill_r>
 802b234:	2800      	cmp	r0, #0
 802b236:	d0f0      	beq.n	802b21a <__ssvfscanf_r+0x56>
 802b238:	e7f5      	b.n	802b226 <__ssvfscanf_r+0x62>
 802b23a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b23c:	3201      	adds	r2, #1
 802b23e:	633a      	str	r2, [r7, #48]	@ 0x30
 802b240:	6862      	ldr	r2, [r4, #4]
 802b242:	3301      	adds	r3, #1
 802b244:	3a01      	subs	r2, #1
 802b246:	6062      	str	r2, [r4, #4]
 802b248:	6023      	str	r3, [r4, #0]
 802b24a:	e7e3      	b.n	802b214 <__ssvfscanf_r+0x50>
 802b24c:	2b25      	cmp	r3, #37	@ 0x25
 802b24e:	d163      	bne.n	802b318 <__ssvfscanf_r+0x154>
 802b250:	62fe      	str	r6, [r7, #44]	@ 0x2c
 802b252:	4642      	mov	r2, r8
 802b254:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b258:	617a      	str	r2, [r7, #20]
 802b25a:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 802b25e:	2a55      	cmp	r2, #85	@ 0x55
 802b260:	f200 816e 	bhi.w	802b540 <__ssvfscanf_r+0x37c>
 802b264:	e8df f012 	tbh	[pc, r2, lsl #1]
 802b268:	016c0056 	.word	0x016c0056
 802b26c:	016c016c 	.word	0x016c016c
 802b270:	007d016c 	.word	0x007d016c
 802b274:	016c016c 	.word	0x016c016c
 802b278:	016c016c 	.word	0x016c016c
 802b27c:	00b9016c 	.word	0x00b9016c
 802b280:	00b900b9 	.word	0x00b900b9
 802b284:	00b900b9 	.word	0x00b900b9
 802b288:	00b900b9 	.word	0x00b900b9
 802b28c:	00b900b9 	.word	0x00b900b9
 802b290:	016c00b9 	.word	0x016c00b9
 802b294:	016c016c 	.word	0x016c016c
 802b298:	016c016c 	.word	0x016c016c
 802b29c:	016c016c 	.word	0x016c016c
 802b2a0:	016c00e0 	.word	0x016c00e0
 802b2a4:	00c3010a 	.word	0x00c3010a
 802b2a8:	00e000e0 	.word	0x00e000e0
 802b2ac:	016c00e0 	.word	0x016c00e0
 802b2b0:	016c016c 	.word	0x016c016c
 802b2b4:	00a2016c 	.word	0x00a2016c
 802b2b8:	016c016c 	.word	0x016c016c
 802b2bc:	016c00c7 	.word	0x016c00c7
 802b2c0:	016c016c 	.word	0x016c016c
 802b2c4:	016c00fa 	.word	0x016c00fa
 802b2c8:	016c016c 	.word	0x016c016c
 802b2cc:	00d4016c 	.word	0x00d4016c
 802b2d0:	016c016c 	.word	0x016c016c
 802b2d4:	016c00ff 	.word	0x016c00ff
 802b2d8:	016c016c 	.word	0x016c016c
 802b2dc:	016c016c 	.word	0x016c016c
 802b2e0:	016c00e0 	.word	0x016c00e0
 802b2e4:	00c5010c 	.word	0x00c5010c
 802b2e8:	00e000e0 	.word	0x00e000e0
 802b2ec:	009400e0 	.word	0x009400e0
 802b2f0:	00a20130 	.word	0x00a20130
 802b2f4:	0085016c 	.word	0x0085016c
 802b2f8:	011400ac 	.word	0x011400ac
 802b2fc:	011100c9 	.word	0x011100c9
 802b300:	016c016c 	.word	0x016c016c
 802b304:	00a900fc 	.word	0x00a900fc
 802b308:	016c00d0 	.word	0x016c00d0
 802b30c:	00d4016c 	.word	0x00d4016c
 802b310:	00a9016c 	.word	0x00a9016c
 802b314:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802b318:	6863      	ldr	r3, [r4, #4]
 802b31a:	2b00      	cmp	r3, #0
 802b31c:	dd0e      	ble.n	802b33c <__ssvfscanf_r+0x178>
 802b31e:	6823      	ldr	r3, [r4, #0]
 802b320:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 802b324:	7819      	ldrb	r1, [r3, #0]
 802b326:	4291      	cmp	r1, r2
 802b328:	d142      	bne.n	802b3b0 <__ssvfscanf_r+0x1ec>
 802b32a:	3301      	adds	r3, #1
 802b32c:	6862      	ldr	r2, [r4, #4]
 802b32e:	6023      	str	r3, [r4, #0]
 802b330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b332:	3a01      	subs	r2, #1
 802b334:	3301      	adds	r3, #1
 802b336:	6062      	str	r2, [r4, #4]
 802b338:	633b      	str	r3, [r7, #48]	@ 0x30
 802b33a:	e774      	b.n	802b226 <__ssvfscanf_r+0x62>
 802b33c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b33e:	4621      	mov	r1, r4
 802b340:	f7fd fd8b 	bl	8028e5a <__ssrefill_r>
 802b344:	2800      	cmp	r0, #0
 802b346:	d0ea      	beq.n	802b31e <__ssvfscanf_r+0x15a>
 802b348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b34a:	b113      	cbz	r3, 802b352 <__ssvfscanf_r+0x18e>
 802b34c:	89a3      	ldrh	r3, [r4, #12]
 802b34e:	065b      	lsls	r3, r3, #25
 802b350:	d52e      	bpl.n	802b3b0 <__ssvfscanf_r+0x1ec>
 802b352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b354:	2b00      	cmp	r3, #0
 802b356:	f041 809d 	bne.w	802c494 <__ssvfscanf_r+0x12d0>
 802b35a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b35e:	627b      	str	r3, [r7, #36]	@ 0x24
 802b360:	e0f9      	b.n	802b556 <__ssvfscanf_r+0x392>
 802b362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802b364:	4333      	orrs	r3, r6
 802b366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802b368:	d122      	bne.n	802b3b0 <__ssvfscanf_r+0x1ec>
 802b36a:	2610      	movs	r6, #16
 802b36c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802b370:	e76f      	b.n	802b252 <__ssvfscanf_r+0x8e>
 802b372:	0731      	lsls	r1, r6, #28
 802b374:	d11c      	bne.n	802b3b0 <__ssvfscanf_r+0x1ec>
 802b376:	f898 3001 	ldrb.w	r3, [r8, #1]
 802b37a:	2b6c      	cmp	r3, #108	@ 0x6c
 802b37c:	d105      	bne.n	802b38a <__ssvfscanf_r+0x1c6>
 802b37e:	f108 0302 	add.w	r3, r8, #2
 802b382:	617b      	str	r3, [r7, #20]
 802b384:	f046 0602 	orr.w	r6, r6, #2
 802b388:	e7f0      	b.n	802b36c <__ssvfscanf_r+0x1a8>
 802b38a:	f046 0601 	orr.w	r6, r6, #1
 802b38e:	e7ed      	b.n	802b36c <__ssvfscanf_r+0x1a8>
 802b390:	0732      	lsls	r2, r6, #28
 802b392:	d10d      	bne.n	802b3b0 <__ssvfscanf_r+0x1ec>
 802b394:	f898 3001 	ldrb.w	r3, [r8, #1]
 802b398:	2b68      	cmp	r3, #104	@ 0x68
 802b39a:	bf03      	ittte	eq
 802b39c:	f108 0302 	addeq.w	r3, r8, #2
 802b3a0:	617b      	streq	r3, [r7, #20]
 802b3a2:	f046 0608 	orreq.w	r6, r6, #8
 802b3a6:	f046 0604 	orrne.w	r6, r6, #4
 802b3aa:	e7df      	b.n	802b36c <__ssvfscanf_r+0x1a8>
 802b3ac:	0733      	lsls	r3, r6, #28
 802b3ae:	d0e9      	beq.n	802b384 <__ssvfscanf_r+0x1c0>
 802b3b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b3b2:	2b00      	cmp	r3, #0
 802b3b4:	f000 80cf 	beq.w	802b556 <__ssvfscanf_r+0x392>
 802b3b8:	e0c8      	b.n	802b54c <__ssvfscanf_r+0x388>
 802b3ba:	0730      	lsls	r0, r6, #28
 802b3bc:	d0d6      	beq.n	802b36c <__ssvfscanf_r+0x1a8>
 802b3be:	e7f7      	b.n	802b3b0 <__ssvfscanf_r+0x1ec>
 802b3c0:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 802b3c4:	d1f4      	bne.n	802b3b0 <__ssvfscanf_r+0x1ec>
 802b3c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802b3c8:	b922      	cbnz	r2, 802b3d4 <__ssvfscanf_r+0x210>
 802b3ca:	b082      	sub	sp, #8
 802b3cc:	aa02      	add	r2, sp, #8
 802b3ce:	e9c2 3300 	strd	r3, r3, [r2]
 802b3d2:	637a      	str	r2, [r7, #52]	@ 0x34
 802b3d4:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 802b3d8:	e7c8      	b.n	802b36c <__ssvfscanf_r+0x1a8>
 802b3da:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802b3de:	d1e7      	bne.n	802b3b0 <__ssvfscanf_r+0x1ec>
 802b3e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802b3e2:	220a      	movs	r2, #10
 802b3e4:	fb02 3301 	mla	r3, r2, r1, r3
 802b3e8:	3b30      	subs	r3, #48	@ 0x30
 802b3ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802b3ec:	e7be      	b.n	802b36c <__ssvfscanf_r+0x1a8>
 802b3ee:	f046 0601 	orr.w	r6, r6, #1
 802b3f2:	4b0b      	ldr	r3, [pc, #44]	@ (802b420 <__ssvfscanf_r+0x25c>)
 802b3f4:	e009      	b.n	802b40a <__ssvfscanf_r+0x246>
 802b3f6:	f046 0601 	orr.w	r6, r6, #1
 802b3fa:	4b0a      	ldr	r3, [pc, #40]	@ (802b424 <__ssvfscanf_r+0x260>)
 802b3fc:	61bb      	str	r3, [r7, #24]
 802b3fe:	2308      	movs	r3, #8
 802b400:	61fb      	str	r3, [r7, #28]
 802b402:	f04f 0803 	mov.w	r8, #3
 802b406:	e011      	b.n	802b42c <__ssvfscanf_r+0x268>
 802b408:	4b06      	ldr	r3, [pc, #24]	@ (802b424 <__ssvfscanf_r+0x260>)
 802b40a:	61bb      	str	r3, [r7, #24]
 802b40c:	230a      	movs	r3, #10
 802b40e:	e7f7      	b.n	802b400 <__ssvfscanf_r+0x23c>
 802b410:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802b414:	4b03      	ldr	r3, [pc, #12]	@ (802b424 <__ssvfscanf_r+0x260>)
 802b416:	61bb      	str	r3, [r7, #24]
 802b418:	2310      	movs	r3, #16
 802b41a:	e7f1      	b.n	802b400 <__ssvfscanf_r+0x23c>
 802b41c:	08034405 	.word	0x08034405
 802b420:	08025159 	.word	0x08025159
 802b424:	0802df59 	.word	0x0802df59
 802b428:	f04f 0804 	mov.w	r8, #4
 802b42c:	6863      	ldr	r3, [r4, #4]
 802b42e:	2b00      	cmp	r3, #0
 802b430:	dd4e      	ble.n	802b4d0 <__ssvfscanf_r+0x30c>
 802b432:	0673      	lsls	r3, r6, #25
 802b434:	d407      	bmi.n	802b446 <__ssvfscanf_r+0x282>
 802b436:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 802b734 <__ssvfscanf_r+0x570>
 802b43a:	6823      	ldr	r3, [r4, #0]
 802b43c:	781a      	ldrb	r2, [r3, #0]
 802b43e:	f819 2002 	ldrb.w	r2, [r9, r2]
 802b442:	0710      	lsls	r0, r2, #28
 802b444:	d44b      	bmi.n	802b4de <__ssvfscanf_r+0x31a>
 802b446:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802b44a:	f1b8 0f03 	cmp.w	r8, #3
 802b44e:	d858      	bhi.n	802b502 <__ssvfscanf_r+0x33e>
 802b450:	e8df f018 	tbh	[pc, r8, lsl #1]
 802b454:	037801c1 	.word	0x037801c1
 802b458:	05f30514 	.word	0x05f30514
 802b45c:	f046 0601 	orr.w	r6, r6, #1
 802b460:	f04f 0802 	mov.w	r8, #2
 802b464:	e7e2      	b.n	802b42c <__ssvfscanf_r+0x268>
 802b466:	6979      	ldr	r1, [r7, #20]
 802b468:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 802b46c:	f001 fd1d 	bl	802ceaa <__sccl>
 802b470:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802b474:	6178      	str	r0, [r7, #20]
 802b476:	f04f 0801 	mov.w	r8, #1
 802b47a:	e7d7      	b.n	802b42c <__ssvfscanf_r+0x268>
 802b47c:	f046 0601 	orr.w	r6, r6, #1
 802b480:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802b484:	f04f 0800 	mov.w	r8, #0
 802b488:	e7d0      	b.n	802b42c <__ssvfscanf_r+0x268>
 802b48a:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 802b48e:	e7c1      	b.n	802b414 <__ssvfscanf_r+0x250>
 802b490:	06f1      	lsls	r1, r6, #27
 802b492:	f53f aeb2 	bmi.w	802b1fa <__ssvfscanf_r+0x36>
 802b496:	0732      	lsls	r2, r6, #28
 802b498:	f855 3b04 	ldr.w	r3, [r5], #4
 802b49c:	d502      	bpl.n	802b4a4 <__ssvfscanf_r+0x2e0>
 802b49e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b4a0:	701a      	strb	r2, [r3, #0]
 802b4a2:	e6aa      	b.n	802b1fa <__ssvfscanf_r+0x36>
 802b4a4:	0770      	lsls	r0, r6, #29
 802b4a6:	d502      	bpl.n	802b4ae <__ssvfscanf_r+0x2ea>
 802b4a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b4aa:	801a      	strh	r2, [r3, #0]
 802b4ac:	e6a5      	b.n	802b1fa <__ssvfscanf_r+0x36>
 802b4ae:	07f1      	lsls	r1, r6, #31
 802b4b0:	d502      	bpl.n	802b4b8 <__ssvfscanf_r+0x2f4>
 802b4b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b4b4:	601a      	str	r2, [r3, #0]
 802b4b6:	e6a0      	b.n	802b1fa <__ssvfscanf_r+0x36>
 802b4b8:	07b2      	lsls	r2, r6, #30
 802b4ba:	d5fa      	bpl.n	802b4b2 <__ssvfscanf_r+0x2ee>
 802b4bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b4be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802b4c0:	17d2      	asrs	r2, r2, #31
 802b4c2:	e9c3 1200 	strd	r1, r2, [r3]
 802b4c6:	e698      	b.n	802b1fa <__ssvfscanf_r+0x36>
 802b4c8:	4b99      	ldr	r3, [pc, #612]	@ (802b730 <__ssvfscanf_r+0x56c>)
 802b4ca:	61bb      	str	r3, [r7, #24]
 802b4cc:	2300      	movs	r3, #0
 802b4ce:	e797      	b.n	802b400 <__ssvfscanf_r+0x23c>
 802b4d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b4d2:	4621      	mov	r1, r4
 802b4d4:	f7fd fcc1 	bl	8028e5a <__ssrefill_r>
 802b4d8:	2800      	cmp	r0, #0
 802b4da:	d0aa      	beq.n	802b432 <__ssvfscanf_r+0x26e>
 802b4dc:	e734      	b.n	802b348 <__ssvfscanf_r+0x184>
 802b4de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b4e0:	3201      	adds	r2, #1
 802b4e2:	633a      	str	r2, [r7, #48]	@ 0x30
 802b4e4:	6862      	ldr	r2, [r4, #4]
 802b4e6:	3a01      	subs	r2, #1
 802b4e8:	2a00      	cmp	r2, #0
 802b4ea:	6062      	str	r2, [r4, #4]
 802b4ec:	dd02      	ble.n	802b4f4 <__ssvfscanf_r+0x330>
 802b4ee:	3301      	adds	r3, #1
 802b4f0:	6023      	str	r3, [r4, #0]
 802b4f2:	e7a2      	b.n	802b43a <__ssvfscanf_r+0x276>
 802b4f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b4f6:	4621      	mov	r1, r4
 802b4f8:	f7fd fcaf 	bl	8028e5a <__ssrefill_r>
 802b4fc:	2800      	cmp	r0, #0
 802b4fe:	d09c      	beq.n	802b43a <__ssvfscanf_r+0x276>
 802b500:	e722      	b.n	802b348 <__ssvfscanf_r+0x184>
 802b502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802b504:	2b01      	cmp	r3, #1
 802b506:	bf38      	it	cc
 802b508:	2301      	movcc	r3, #1
 802b50a:	4698      	mov	r8, r3
 802b50c:	f016 0301 	ands.w	r3, r6, #1
 802b510:	f006 0b10 	and.w	fp, r6, #16
 802b514:	f000 80eb 	beq.w	802b6ee <__ssvfscanf_r+0x52a>
 802b518:	f1bb 0f00 	cmp.w	fp, #0
 802b51c:	f040 8085 	bne.w	802b62a <__ssvfscanf_r+0x466>
 802b520:	462b      	mov	r3, r5
 802b522:	0631      	lsls	r1, r6, #24
 802b524:	f853 5b04 	ldr.w	r5, [r3], #4
 802b528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802b52a:	f140 8085 	bpl.w	802b638 <__ssvfscanf_r+0x474>
 802b52e:	b13d      	cbz	r5, 802b540 <__ssvfscanf_r+0x37c>
 802b530:	2080      	movs	r0, #128	@ 0x80
 802b532:	f7fc fcd3 	bl	8027edc <malloc>
 802b536:	4606      	mov	r6, r0
 802b538:	b998      	cbnz	r0, 802b562 <__ssvfscanf_r+0x39e>
 802b53a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b53e:	627b      	str	r3, [r7, #36]	@ 0x24
 802b540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b542:	b143      	cbz	r3, 802b556 <__ssvfscanf_r+0x392>
 802b544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b546:	3301      	adds	r3, #1
 802b548:	f000 87a4 	beq.w	802c494 <__ssvfscanf_r+0x12d0>
 802b54c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b54e:	6818      	ldr	r0, [r3, #0]
 802b550:	b108      	cbz	r0, 802b556 <__ssvfscanf_r+0x392>
 802b552:	f7fc fccb 	bl	8027eec <free>
 802b556:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802b558:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 802b55c:	46bd      	mov	sp, r7
 802b55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b564:	6028      	str	r0, [r5, #0]
 802b566:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 802b56a:	889b      	ldrh	r3, [r3, #4]
 802b56c:	4599      	cmp	r9, r3
 802b56e:	d314      	bcc.n	802b59a <__ssvfscanf_r+0x3d6>
 802b570:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802b574:	4293      	cmp	r3, r2
 802b576:	f200 878d 	bhi.w	802c494 <__ssvfscanf_r+0x12d0>
 802b57a:	3308      	adds	r3, #8
 802b57c:	fa1f fa83 	uxth.w	sl, r3
 802b580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b582:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802b586:	6818      	ldr	r0, [r3, #0]
 802b588:	f001 fc32 	bl	802cdf0 <realloc>
 802b58c:	2800      	cmp	r0, #0
 802b58e:	f000 8781 	beq.w	802c494 <__ssvfscanf_r+0x12d0>
 802b592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b594:	6018      	str	r0, [r3, #0]
 802b596:	f8a3 a004 	strh.w	sl, [r3, #4]
 802b59a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b59c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802b59e:	681b      	ldr	r3, [r3, #0]
 802b5a0:	f109 0201 	add.w	r2, r9, #1
 802b5a4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802b5a8:	46aa      	mov	sl, r5
 802b5aa:	80ca      	strh	r2, [r1, #6]
 802b5ac:	4635      	mov	r5, r6
 802b5ae:	f04f 0920 	mov.w	r9, #32
 802b5b2:	2200      	movs	r2, #0
 802b5b4:	613a      	str	r2, [r7, #16]
 802b5b6:	f7fb fbd3 	bl	8026d60 <__locale_mb_cur_max>
 802b5ba:	693a      	ldr	r2, [r7, #16]
 802b5bc:	4290      	cmp	r0, r2
 802b5be:	f43f aec3 	beq.w	802b348 <__ssvfscanf_r+0x184>
 802b5c2:	6821      	ldr	r1, [r4, #0]
 802b5c4:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 802b5c8:	f811 0b01 	ldrb.w	r0, [r1], #1
 802b5cc:	f80c 0002 	strb.w	r0, [ip, r2]
 802b5d0:	1c53      	adds	r3, r2, #1
 802b5d2:	6862      	ldr	r2, [r4, #4]
 802b5d4:	3a01      	subs	r2, #1
 802b5d6:	e9c4 1200 	strd	r1, r2, [r4]
 802b5da:	6a3a      	ldr	r2, [r7, #32]
 802b5dc:	2a03      	cmp	r2, #3
 802b5de:	d102      	bne.n	802b5e6 <__ssvfscanf_r+0x422>
 802b5e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802b5e2:	2a04      	cmp	r2, #4
 802b5e4:	d007      	beq.n	802b5f6 <__ssvfscanf_r+0x432>
 802b5e6:	2208      	movs	r2, #8
 802b5e8:	2100      	movs	r1, #0
 802b5ea:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802b5ee:	623b      	str	r3, [r7, #32]
 802b5f0:	f7fa fa2e 	bl	8025a50 <memset>
 802b5f4:	6a3b      	ldr	r3, [r7, #32]
 802b5f6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802b5fa:	9200      	str	r2, [sp, #0]
 802b5fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b5fe:	613b      	str	r3, [r7, #16]
 802b600:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802b604:	4629      	mov	r1, r5
 802b606:	f002 ffad 	bl	802e564 <_mbrtowc_r>
 802b60a:	1c42      	adds	r2, r0, #1
 802b60c:	6238      	str	r0, [r7, #32]
 802b60e:	f43f ae9b 	beq.w	802b348 <__ssvfscanf_r+0x184>
 802b612:	693b      	ldr	r3, [r7, #16]
 802b614:	b9b8      	cbnz	r0, 802b646 <__ssvfscanf_r+0x482>
 802b616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b618:	441a      	add	r2, r3
 802b61a:	4613      	mov	r3, r2
 802b61c:	f1bb 0f00 	cmp.w	fp, #0
 802b620:	d00e      	beq.n	802b640 <__ssvfscanf_r+0x47c>
 802b622:	633b      	str	r3, [r7, #48]	@ 0x30
 802b624:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802b628:	e019      	b.n	802b65e <__ssvfscanf_r+0x49a>
 802b62a:	f04f 0900 	mov.w	r9, #0
 802b62e:	62fd      	str	r5, [r7, #44]	@ 0x2c
 802b630:	464e      	mov	r6, r9
 802b632:	46ca      	mov	sl, r9
 802b634:	464d      	mov	r5, r9
 802b636:	e7bc      	b.n	802b5b2 <__ssvfscanf_r+0x3ee>
 802b638:	46d9      	mov	r9, fp
 802b63a:	465e      	mov	r6, fp
 802b63c:	46da      	mov	sl, fp
 802b63e:	e7b8      	b.n	802b5b2 <__ssvfscanf_r+0x3ee>
 802b640:	f8c5 b000 	str.w	fp, [r5]
 802b644:	e7ed      	b.n	802b622 <__ssvfscanf_r+0x45e>
 802b646:	6a3a      	ldr	r2, [r7, #32]
 802b648:	3202      	adds	r2, #2
 802b64a:	d025      	beq.n	802b698 <__ssvfscanf_r+0x4d4>
 802b64c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b64e:	441a      	add	r2, r3
 802b650:	6a3b      	ldr	r3, [r7, #32]
 802b652:	633a      	str	r2, [r7, #48]	@ 0x30
 802b654:	2b03      	cmp	r3, #3
 802b656:	d1e5      	bne.n	802b624 <__ssvfscanf_r+0x460>
 802b658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802b65a:	2b04      	cmp	r3, #4
 802b65c:	d1e2      	bne.n	802b624 <__ssvfscanf_r+0x460>
 802b65e:	f1bb 0f00 	cmp.w	fp, #0
 802b662:	d117      	bne.n	802b694 <__ssvfscanf_r+0x4d0>
 802b664:	f1ba 0f00 	cmp.w	sl, #0
 802b668:	d013      	beq.n	802b692 <__ssvfscanf_r+0x4ce>
 802b66a:	1bab      	subs	r3, r5, r6
 802b66c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802b670:	d80f      	bhi.n	802b692 <__ssvfscanf_r+0x4ce>
 802b672:	4630      	mov	r0, r6
 802b674:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802b678:	613b      	str	r3, [r7, #16]
 802b67a:	f001 fbb9 	bl	802cdf0 <realloc>
 802b67e:	4606      	mov	r6, r0
 802b680:	2800      	cmp	r0, #0
 802b682:	f43f af5a 	beq.w	802b53a <__ssvfscanf_r+0x376>
 802b686:	693b      	ldr	r3, [r7, #16]
 802b688:	f8ca 0000 	str.w	r0, [sl]
 802b68c:	18c5      	adds	r5, r0, r3
 802b68e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802b692:	3504      	adds	r5, #4
 802b694:	2200      	movs	r2, #0
 802b696:	e000      	b.n	802b69a <__ssvfscanf_r+0x4d6>
 802b698:	461a      	mov	r2, r3
 802b69a:	6863      	ldr	r3, [r4, #4]
 802b69c:	2b00      	cmp	r3, #0
 802b69e:	dc14      	bgt.n	802b6ca <__ssvfscanf_r+0x506>
 802b6a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b6a2:	613a      	str	r2, [r7, #16]
 802b6a4:	4621      	mov	r1, r4
 802b6a6:	f7fd fbd8 	bl	8028e5a <__ssrefill_r>
 802b6aa:	693a      	ldr	r2, [r7, #16]
 802b6ac:	b168      	cbz	r0, 802b6ca <__ssvfscanf_r+0x506>
 802b6ae:	2a00      	cmp	r2, #0
 802b6b0:	f47f ae4a 	bne.w	802b348 <__ssvfscanf_r+0x184>
 802b6b4:	f1ba 0f00 	cmp.w	sl, #0
 802b6b8:	d10c      	bne.n	802b6d4 <__ssvfscanf_r+0x510>
 802b6ba:	f1bb 0f00 	cmp.w	fp, #0
 802b6be:	d102      	bne.n	802b6c6 <__ssvfscanf_r+0x502>
 802b6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b6c2:	3301      	adds	r3, #1
 802b6c4:	627b      	str	r3, [r7, #36]	@ 0x24
 802b6c6:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 802b6c8:	e597      	b.n	802b1fa <__ssvfscanf_r+0x36>
 802b6ca:	f1b8 0f00 	cmp.w	r8, #0
 802b6ce:	f47f af71 	bne.w	802b5b4 <__ssvfscanf_r+0x3f0>
 802b6d2:	e7ef      	b.n	802b6b4 <__ssvfscanf_r+0x4f0>
 802b6d4:	1ba9      	subs	r1, r5, r6
 802b6d6:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 802b6da:	d9ee      	bls.n	802b6ba <__ssvfscanf_r+0x4f6>
 802b6dc:	f8da 0000 	ldr.w	r0, [sl]
 802b6e0:	f001 fb86 	bl	802cdf0 <realloc>
 802b6e4:	2800      	cmp	r0, #0
 802b6e6:	d0e8      	beq.n	802b6ba <__ssvfscanf_r+0x4f6>
 802b6e8:	f8ca 0000 	str.w	r0, [sl]
 802b6ec:	e7e5      	b.n	802b6ba <__ssvfscanf_r+0x4f6>
 802b6ee:	f1bb 0f00 	cmp.w	fp, #0
 802b6f2:	d021      	beq.n	802b738 <__ssvfscanf_r+0x574>
 802b6f4:	461e      	mov	r6, r3
 802b6f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 802b6fa:	4598      	cmp	r8, r3
 802b6fc:	dd11      	ble.n	802b722 <__ssvfscanf_r+0x55e>
 802b6fe:	441a      	add	r2, r3
 802b700:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b702:	6022      	str	r2, [r4, #0]
 802b704:	4621      	mov	r1, r4
 802b706:	441e      	add	r6, r3
 802b708:	eba8 0803 	sub.w	r8, r8, r3
 802b70c:	f7fd fba5 	bl	8028e5a <__ssrefill_r>
 802b710:	2800      	cmp	r0, #0
 802b712:	d0f0      	beq.n	802b6f6 <__ssvfscanf_r+0x532>
 802b714:	2e00      	cmp	r6, #0
 802b716:	f43f ae17 	beq.w	802b348 <__ssvfscanf_r+0x184>
 802b71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b71c:	4433      	add	r3, r6
 802b71e:	633b      	str	r3, [r7, #48]	@ 0x30
 802b720:	e56b      	b.n	802b1fa <__ssvfscanf_r+0x36>
 802b722:	eba3 0308 	sub.w	r3, r3, r8
 802b726:	4442      	add	r2, r8
 802b728:	4446      	add	r6, r8
 802b72a:	6063      	str	r3, [r4, #4]
 802b72c:	6022      	str	r2, [r4, #0]
 802b72e:	e7f4      	b.n	802b71a <__ssvfscanf_r+0x556>
 802b730:	08025159 	.word	0x08025159
 802b734:	08034405 	.word	0x08034405
 802b738:	46a9      	mov	r9, r5
 802b73a:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802b73e:	f859 5b04 	ldr.w	r5, [r9], #4
 802b742:	d02c      	beq.n	802b79e <__ssvfscanf_r+0x5da>
 802b744:	2d00      	cmp	r5, #0
 802b746:	f43f ae33 	beq.w	802b3b0 <__ssvfscanf_r+0x1ec>
 802b74a:	4640      	mov	r0, r8
 802b74c:	f7fc fbc6 	bl	8027edc <malloc>
 802b750:	4682      	mov	sl, r0
 802b752:	2800      	cmp	r0, #0
 802b754:	f43f adfd 	beq.w	802b352 <__ssvfscanf_r+0x18e>
 802b758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b75a:	6028      	str	r0, [r5, #0]
 802b75c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 802b760:	889e      	ldrh	r6, [r3, #4]
 802b762:	45b3      	cmp	fp, r6
 802b764:	d311      	bcc.n	802b78a <__ssvfscanf_r+0x5c6>
 802b766:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802b76a:	429e      	cmp	r6, r3
 802b76c:	f200 8692 	bhi.w	802c494 <__ssvfscanf_r+0x12d0>
 802b770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b772:	3608      	adds	r6, #8
 802b774:	b2b6      	uxth	r6, r6
 802b776:	6818      	ldr	r0, [r3, #0]
 802b778:	00b1      	lsls	r1, r6, #2
 802b77a:	f001 fb39 	bl	802cdf0 <realloc>
 802b77e:	2800      	cmp	r0, #0
 802b780:	f000 8688 	beq.w	802c494 <__ssvfscanf_r+0x12d0>
 802b784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b786:	6018      	str	r0, [r3, #0]
 802b788:	809e      	strh	r6, [r3, #4]
 802b78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b78c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802b78e:	681b      	ldr	r3, [r3, #0]
 802b790:	f10b 0201 	add.w	r2, fp, #1
 802b794:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 802b798:	462e      	mov	r6, r5
 802b79a:	80ca      	strh	r2, [r1, #6]
 802b79c:	4655      	mov	r5, sl
 802b79e:	9400      	str	r4, [sp, #0]
 802b7a0:	4629      	mov	r1, r5
 802b7a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b7a4:	4643      	mov	r3, r8
 802b7a6:	2201      	movs	r2, #1
 802b7a8:	f7fd fb74 	bl	8028e94 <_sfread_r>
 802b7ac:	4605      	mov	r5, r0
 802b7ae:	2800      	cmp	r0, #0
 802b7b0:	f43f adca 	beq.w	802b348 <__ssvfscanf_r+0x184>
 802b7b4:	b13e      	cbz	r6, 802b7c6 <__ssvfscanf_r+0x602>
 802b7b6:	4580      	cmp	r8, r0
 802b7b8:	d905      	bls.n	802b7c6 <__ssvfscanf_r+0x602>
 802b7ba:	4601      	mov	r1, r0
 802b7bc:	6830      	ldr	r0, [r6, #0]
 802b7be:	f001 fb17 	bl	802cdf0 <realloc>
 802b7c2:	b100      	cbz	r0, 802b7c6 <__ssvfscanf_r+0x602>
 802b7c4:	6030      	str	r0, [r6, #0]
 802b7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b7c8:	442b      	add	r3, r5
 802b7ca:	633b      	str	r3, [r7, #48]	@ 0x30
 802b7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b7ce:	3301      	adds	r3, #1
 802b7d0:	627b      	str	r3, [r7, #36]	@ 0x24
 802b7d2:	464d      	mov	r5, r9
 802b7d4:	e511      	b.n	802b1fa <__ssvfscanf_r+0x36>
 802b7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802b7d8:	2b00      	cmp	r3, #0
 802b7da:	bf08      	it	eq
 802b7dc:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802b7e0:	f016 0801 	ands.w	r8, r6, #1
 802b7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802b7e6:	f006 0a10 	and.w	sl, r6, #16
 802b7ea:	f000 8101 	beq.w	802b9f0 <__ssvfscanf_r+0x82c>
 802b7ee:	f1ba 0f00 	cmp.w	sl, #0
 802b7f2:	f040 80a4 	bne.w	802b93e <__ssvfscanf_r+0x77a>
 802b7f6:	462b      	mov	r3, r5
 802b7f8:	f853 5b04 	ldr.w	r5, [r3], #4
 802b7fc:	60fb      	str	r3, [r7, #12]
 802b7fe:	0633      	lsls	r3, r6, #24
 802b800:	f140 80a5 	bpl.w	802b94e <__ssvfscanf_r+0x78a>
 802b804:	2d00      	cmp	r5, #0
 802b806:	f43f ae9b 	beq.w	802b540 <__ssvfscanf_r+0x37c>
 802b80a:	2080      	movs	r0, #128	@ 0x80
 802b80c:	f7fc fb66 	bl	8027edc <malloc>
 802b810:	4680      	mov	r8, r0
 802b812:	2800      	cmp	r0, #0
 802b814:	f43f ae91 	beq.w	802b53a <__ssvfscanf_r+0x376>
 802b818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b81a:	6028      	str	r0, [r5, #0]
 802b81c:	88de      	ldrh	r6, [r3, #6]
 802b81e:	889b      	ldrh	r3, [r3, #4]
 802b820:	429e      	cmp	r6, r3
 802b822:	d314      	bcc.n	802b84e <__ssvfscanf_r+0x68a>
 802b824:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802b828:	4293      	cmp	r3, r2
 802b82a:	f200 8633 	bhi.w	802c494 <__ssvfscanf_r+0x12d0>
 802b82e:	3308      	adds	r3, #8
 802b830:	fa1f f983 	uxth.w	r9, r3
 802b834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b836:	ea4f 0189 	mov.w	r1, r9, lsl #2
 802b83a:	6818      	ldr	r0, [r3, #0]
 802b83c:	f001 fad8 	bl	802cdf0 <realloc>
 802b840:	2800      	cmp	r0, #0
 802b842:	f000 8627 	beq.w	802c494 <__ssvfscanf_r+0x12d0>
 802b846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b848:	6018      	str	r0, [r3, #0]
 802b84a:	f8a3 9004 	strh.w	r9, [r3, #4]
 802b84e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b850:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802b852:	681b      	ldr	r3, [r3, #0]
 802b854:	1c72      	adds	r2, r6, #1
 802b856:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 802b85a:	46ab      	mov	fp, r5
 802b85c:	80ca      	strh	r2, [r1, #6]
 802b85e:	4645      	mov	r5, r8
 802b860:	f04f 0920 	mov.w	r9, #32
 802b864:	2600      	movs	r6, #0
 802b866:	f7fb fa7b 	bl	8026d60 <__locale_mb_cur_max>
 802b86a:	42b0      	cmp	r0, r6
 802b86c:	f43f ad6c 	beq.w	802b348 <__ssvfscanf_r+0x184>
 802b870:	1c73      	adds	r3, r6, #1
 802b872:	613b      	str	r3, [r7, #16]
 802b874:	6823      	ldr	r3, [r4, #0]
 802b876:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802b87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b87e:	558a      	strb	r2, [r1, r6]
 802b880:	6862      	ldr	r2, [r4, #4]
 802b882:	3a01      	subs	r2, #1
 802b884:	e9c4 3200 	strd	r3, r2, [r4]
 802b888:	6a3b      	ldr	r3, [r7, #32]
 802b88a:	2b03      	cmp	r3, #3
 802b88c:	d102      	bne.n	802b894 <__ssvfscanf_r+0x6d0>
 802b88e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802b890:	2b04      	cmp	r3, #4
 802b892:	d005      	beq.n	802b8a0 <__ssvfscanf_r+0x6dc>
 802b894:	2208      	movs	r2, #8
 802b896:	2100      	movs	r1, #0
 802b898:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802b89c:	f7fa f8d8 	bl	8025a50 <memset>
 802b8a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802b8a4:	9300      	str	r3, [sp, #0]
 802b8a6:	693b      	ldr	r3, [r7, #16]
 802b8a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b8aa:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802b8ae:	4629      	mov	r1, r5
 802b8b0:	f002 fe58 	bl	802e564 <_mbrtowc_r>
 802b8b4:	1c46      	adds	r6, r0, #1
 802b8b6:	6238      	str	r0, [r7, #32]
 802b8b8:	f43f ad46 	beq.w	802b348 <__ssvfscanf_r+0x184>
 802b8bc:	2800      	cmp	r0, #0
 802b8be:	d14a      	bne.n	802b956 <__ssvfscanf_r+0x792>
 802b8c0:	6028      	str	r0, [r5, #0]
 802b8c2:	682e      	ldr	r6, [r5, #0]
 802b8c4:	1c70      	adds	r0, r6, #1
 802b8c6:	d056      	beq.n	802b976 <__ssvfscanf_r+0x7b2>
 802b8c8:	2208      	movs	r2, #8
 802b8ca:	2100      	movs	r1, #0
 802b8cc:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802b8d0:	f7fa f8be 	bl	8025a50 <memset>
 802b8d4:	4b9a      	ldr	r3, [pc, #616]	@ (802bb40 <__ssvfscanf_r+0x97c>)
 802b8d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b8d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 802b8dc:	60bb      	str	r3, [r7, #8]
 802b8de:	4632      	mov	r2, r6
 802b8e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802b8e4:	68be      	ldr	r6, [r7, #8]
 802b8e6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 802b8ea:	47b0      	blx	r6
 802b8ec:	2801      	cmp	r0, #1
 802b8ee:	d144      	bne.n	802b97a <__ssvfscanf_r+0x7b6>
 802b8f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 802b8f4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802b8f8:	5c9b      	ldrb	r3, [r3, r2]
 802b8fa:	2b00      	cmp	r3, #0
 802b8fc:	d148      	bne.n	802b990 <__ssvfscanf_r+0x7cc>
 802b8fe:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 802b902:	693b      	ldr	r3, [r7, #16]
 802b904:	2b00      	cmp	r3, #0
 802b906:	d13a      	bne.n	802b97e <__ssvfscanf_r+0x7ba>
 802b908:	f1ba 0f00 	cmp.w	sl, #0
 802b90c:	d115      	bne.n	802b93a <__ssvfscanf_r+0x776>
 802b90e:	f8c5 a000 	str.w	sl, [r5]
 802b912:	f1bb 0f00 	cmp.w	fp, #0
 802b916:	d00d      	beq.n	802b934 <__ssvfscanf_r+0x770>
 802b918:	eba5 0108 	sub.w	r1, r5, r8
 802b91c:	108b      	asrs	r3, r1, #2
 802b91e:	3301      	adds	r3, #1
 802b920:	4599      	cmp	r9, r3
 802b922:	d907      	bls.n	802b934 <__ssvfscanf_r+0x770>
 802b924:	f8db 0000 	ldr.w	r0, [fp]
 802b928:	3104      	adds	r1, #4
 802b92a:	f001 fa61 	bl	802cdf0 <realloc>
 802b92e:	b108      	cbz	r0, 802b934 <__ssvfscanf_r+0x770>
 802b930:	f8cb 0000 	str.w	r0, [fp]
 802b934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b936:	3301      	adds	r3, #1
 802b938:	627b      	str	r3, [r7, #36]	@ 0x24
 802b93a:	68fd      	ldr	r5, [r7, #12]
 802b93c:	e45d      	b.n	802b1fa <__ssvfscanf_r+0x36>
 802b93e:	f04f 0900 	mov.w	r9, #0
 802b942:	60fd      	str	r5, [r7, #12]
 802b944:	46c8      	mov	r8, r9
 802b946:	46cb      	mov	fp, r9
 802b948:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 802b94c:	e78a      	b.n	802b864 <__ssvfscanf_r+0x6a0>
 802b94e:	46d1      	mov	r9, sl
 802b950:	46d0      	mov	r8, sl
 802b952:	46d3      	mov	fp, sl
 802b954:	e786      	b.n	802b864 <__ssvfscanf_r+0x6a0>
 802b956:	6a3b      	ldr	r3, [r7, #32]
 802b958:	3302      	adds	r3, #2
 802b95a:	d1b2      	bne.n	802b8c2 <__ssvfscanf_r+0x6fe>
 802b95c:	693e      	ldr	r6, [r7, #16]
 802b95e:	6863      	ldr	r3, [r4, #4]
 802b960:	2b00      	cmp	r3, #0
 802b962:	dc40      	bgt.n	802b9e6 <__ssvfscanf_r+0x822>
 802b964:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b966:	4621      	mov	r1, r4
 802b968:	f7fd fa77 	bl	8028e5a <__ssrefill_r>
 802b96c:	2800      	cmp	r0, #0
 802b96e:	d03a      	beq.n	802b9e6 <__ssvfscanf_r+0x822>
 802b970:	2e00      	cmp	r6, #0
 802b972:	d0c9      	beq.n	802b908 <__ssvfscanf_r+0x744>
 802b974:	e4e8      	b.n	802b348 <__ssvfscanf_r+0x184>
 802b976:	4632      	mov	r2, r6
 802b978:	e7bc      	b.n	802b8f4 <__ssvfscanf_r+0x730>
 802b97a:	2200      	movs	r2, #0
 802b97c:	e7ba      	b.n	802b8f4 <__ssvfscanf_r+0x730>
 802b97e:	693b      	ldr	r3, [r7, #16]
 802b980:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b982:	3b01      	subs	r3, #1
 802b984:	4622      	mov	r2, r4
 802b986:	5cf1      	ldrb	r1, [r6, r3]
 802b988:	613b      	str	r3, [r7, #16]
 802b98a:	f7fd fa2b 	bl	8028de4 <_sungetc_r>
 802b98e:	e7b8      	b.n	802b902 <__ssvfscanf_r+0x73e>
 802b990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b992:	693a      	ldr	r2, [r7, #16]
 802b994:	4413      	add	r3, r2
 802b996:	633b      	str	r3, [r7, #48]	@ 0x30
 802b998:	6a3b      	ldr	r3, [r7, #32]
 802b99a:	2b03      	cmp	r3, #3
 802b99c:	d102      	bne.n	802b9a4 <__ssvfscanf_r+0x7e0>
 802b99e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802b9a0:	2b04      	cmp	r3, #4
 802b9a2:	d002      	beq.n	802b9aa <__ssvfscanf_r+0x7e6>
 802b9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802b9a6:	3b01      	subs	r3, #1
 802b9a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802b9aa:	f1ba 0f00 	cmp.w	sl, #0
 802b9ae:	d118      	bne.n	802b9e2 <__ssvfscanf_r+0x81e>
 802b9b0:	3504      	adds	r5, #4
 802b9b2:	f1bb 0f00 	cmp.w	fp, #0
 802b9b6:	d014      	beq.n	802b9e2 <__ssvfscanf_r+0x81e>
 802b9b8:	eba5 0608 	sub.w	r6, r5, r8
 802b9bc:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 802b9c0:	d80d      	bhi.n	802b9de <__ssvfscanf_r+0x81a>
 802b9c2:	4640      	mov	r0, r8
 802b9c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802b9c8:	f001 fa12 	bl	802cdf0 <realloc>
 802b9cc:	4680      	mov	r8, r0
 802b9ce:	2800      	cmp	r0, #0
 802b9d0:	f43f adb3 	beq.w	802b53a <__ssvfscanf_r+0x376>
 802b9d4:	1985      	adds	r5, r0, r6
 802b9d6:	f8cb 0000 	str.w	r0, [fp]
 802b9da:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802b9de:	4656      	mov	r6, sl
 802b9e0:	e7bd      	b.n	802b95e <__ssvfscanf_r+0x79a>
 802b9e2:	2600      	movs	r6, #0
 802b9e4:	e7bb      	b.n	802b95e <__ssvfscanf_r+0x79a>
 802b9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802b9e8:	2b00      	cmp	r3, #0
 802b9ea:	f47f af3c 	bne.w	802b866 <__ssvfscanf_r+0x6a2>
 802b9ee:	e78b      	b.n	802b908 <__ssvfscanf_r+0x744>
 802b9f0:	f1ba 0f00 	cmp.w	sl, #0
 802b9f4:	d01e      	beq.n	802ba34 <__ssvfscanf_r+0x870>
 802b9f6:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 802b9fa:	6823      	ldr	r3, [r4, #0]
 802b9fc:	781a      	ldrb	r2, [r3, #0]
 802b9fe:	5cb2      	ldrb	r2, [r6, r2]
 802ba00:	b91a      	cbnz	r2, 802ba0a <__ssvfscanf_r+0x846>
 802ba02:	f1b8 0f00 	cmp.w	r8, #0
 802ba06:	d112      	bne.n	802ba2e <__ssvfscanf_r+0x86a>
 802ba08:	e4d2      	b.n	802b3b0 <__ssvfscanf_r+0x1ec>
 802ba0a:	3301      	adds	r3, #1
 802ba0c:	6862      	ldr	r2, [r4, #4]
 802ba0e:	6023      	str	r3, [r4, #0]
 802ba10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802ba12:	f108 0801 	add.w	r8, r8, #1
 802ba16:	3a01      	subs	r2, #1
 802ba18:	4543      	cmp	r3, r8
 802ba1a:	6062      	str	r2, [r4, #4]
 802ba1c:	d007      	beq.n	802ba2e <__ssvfscanf_r+0x86a>
 802ba1e:	2a00      	cmp	r2, #0
 802ba20:	dceb      	bgt.n	802b9fa <__ssvfscanf_r+0x836>
 802ba22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802ba24:	4621      	mov	r1, r4
 802ba26:	f7fd fa18 	bl	8028e5a <__ssrefill_r>
 802ba2a:	2800      	cmp	r0, #0
 802ba2c:	d0e5      	beq.n	802b9fa <__ssvfscanf_r+0x836>
 802ba2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802ba30:	4443      	add	r3, r8
 802ba32:	e674      	b.n	802b71e <__ssvfscanf_r+0x55a>
 802ba34:	46a9      	mov	r9, r5
 802ba36:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802ba3a:	f859 8b04 	ldr.w	r8, [r9], #4
 802ba3e:	d07d      	beq.n	802bb3c <__ssvfscanf_r+0x978>
 802ba40:	f1b8 0f00 	cmp.w	r8, #0
 802ba44:	f43f acb4 	beq.w	802b3b0 <__ssvfscanf_r+0x1ec>
 802ba48:	2020      	movs	r0, #32
 802ba4a:	f7fc fa47 	bl	8027edc <malloc>
 802ba4e:	4606      	mov	r6, r0
 802ba50:	2800      	cmp	r0, #0
 802ba52:	f43f ac7e 	beq.w	802b352 <__ssvfscanf_r+0x18e>
 802ba56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ba58:	f8c8 0000 	str.w	r0, [r8]
 802ba5c:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 802ba60:	889d      	ldrh	r5, [r3, #4]
 802ba62:	45aa      	cmp	sl, r5
 802ba64:	d311      	bcc.n	802ba8a <__ssvfscanf_r+0x8c6>
 802ba66:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802ba6a:	429d      	cmp	r5, r3
 802ba6c:	f200 8512 	bhi.w	802c494 <__ssvfscanf_r+0x12d0>
 802ba70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ba72:	3508      	adds	r5, #8
 802ba74:	b2ad      	uxth	r5, r5
 802ba76:	6818      	ldr	r0, [r3, #0]
 802ba78:	00a9      	lsls	r1, r5, #2
 802ba7a:	f001 f9b9 	bl	802cdf0 <realloc>
 802ba7e:	2800      	cmp	r0, #0
 802ba80:	f000 8508 	beq.w	802c494 <__ssvfscanf_r+0x12d0>
 802ba84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ba86:	6018      	str	r0, [r3, #0]
 802ba88:	809d      	strh	r5, [r3, #4]
 802ba8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ba8c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802ba8e:	681b      	ldr	r3, [r3, #0]
 802ba90:	f10a 0201 	add.w	r2, sl, #1
 802ba94:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 802ba98:	80ca      	strh	r2, [r1, #6]
 802ba9a:	46c2      	mov	sl, r8
 802ba9c:	46b0      	mov	r8, r6
 802ba9e:	2620      	movs	r6, #32
 802baa0:	4645      	mov	r5, r8
 802baa2:	6823      	ldr	r3, [r4, #0]
 802baa4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 802baa8:	781a      	ldrb	r2, [r3, #0]
 802baaa:	5c8a      	ldrb	r2, [r1, r2]
 802baac:	b35a      	cbz	r2, 802bb06 <__ssvfscanf_r+0x942>
 802baae:	6862      	ldr	r2, [r4, #4]
 802bab0:	3a01      	subs	r2, #1
 802bab2:	6062      	str	r2, [r4, #4]
 802bab4:	1c5a      	adds	r2, r3, #1
 802bab6:	6022      	str	r2, [r4, #0]
 802bab8:	781b      	ldrb	r3, [r3, #0]
 802baba:	f808 3b01 	strb.w	r3, [r8], #1
 802babe:	f1ba 0f00 	cmp.w	sl, #0
 802bac2:	d010      	beq.n	802bae6 <__ssvfscanf_r+0x922>
 802bac4:	eba8 0b05 	sub.w	fp, r8, r5
 802bac8:	45b3      	cmp	fp, r6
 802baca:	d30c      	bcc.n	802bae6 <__ssvfscanf_r+0x922>
 802bacc:	0076      	lsls	r6, r6, #1
 802bace:	4628      	mov	r0, r5
 802bad0:	4631      	mov	r1, r6
 802bad2:	f001 f98d 	bl	802cdf0 <realloc>
 802bad6:	4605      	mov	r5, r0
 802bad8:	2800      	cmp	r0, #0
 802bada:	f43f ac3a 	beq.w	802b352 <__ssvfscanf_r+0x18e>
 802bade:	eb00 080b 	add.w	r8, r0, fp
 802bae2:	f8ca 0000 	str.w	r0, [sl]
 802bae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bae8:	3b01      	subs	r3, #1
 802baea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802baec:	d00b      	beq.n	802bb06 <__ssvfscanf_r+0x942>
 802baee:	6863      	ldr	r3, [r4, #4]
 802baf0:	2b00      	cmp	r3, #0
 802baf2:	dcd6      	bgt.n	802baa2 <__ssvfscanf_r+0x8de>
 802baf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802baf6:	4621      	mov	r1, r4
 802baf8:	f7fd f9af 	bl	8028e5a <__ssrefill_r>
 802bafc:	2800      	cmp	r0, #0
 802bafe:	d0d0      	beq.n	802baa2 <__ssvfscanf_r+0x8de>
 802bb00:	45a8      	cmp	r8, r5
 802bb02:	f43f ac21 	beq.w	802b348 <__ssvfscanf_r+0x184>
 802bb06:	ebb8 0505 	subs.w	r5, r8, r5
 802bb0a:	f43f ac51 	beq.w	802b3b0 <__ssvfscanf_r+0x1ec>
 802bb0e:	2300      	movs	r3, #0
 802bb10:	f888 3000 	strb.w	r3, [r8]
 802bb14:	f1ba 0f00 	cmp.w	sl, #0
 802bb18:	d009      	beq.n	802bb2e <__ssvfscanf_r+0x96a>
 802bb1a:	1c69      	adds	r1, r5, #1
 802bb1c:	428e      	cmp	r6, r1
 802bb1e:	d906      	bls.n	802bb2e <__ssvfscanf_r+0x96a>
 802bb20:	f8da 0000 	ldr.w	r0, [sl]
 802bb24:	f001 f964 	bl	802cdf0 <realloc>
 802bb28:	b108      	cbz	r0, 802bb2e <__ssvfscanf_r+0x96a>
 802bb2a:	f8ca 0000 	str.w	r0, [sl]
 802bb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802bb30:	3301      	adds	r3, #1
 802bb32:	627b      	str	r3, [r7, #36]	@ 0x24
 802bb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802bb36:	442b      	add	r3, r5
 802bb38:	633b      	str	r3, [r7, #48]	@ 0x30
 802bb3a:	e64a      	b.n	802b7d2 <__ssvfscanf_r+0x60e>
 802bb3c:	46b2      	mov	sl, r6
 802bb3e:	e7af      	b.n	802baa0 <__ssvfscanf_r+0x8dc>
 802bb40:	200002c4 	.word	0x200002c4
 802bb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bb46:	2b00      	cmp	r3, #0
 802bb48:	bf08      	it	eq
 802bb4a:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802bb4e:	f016 0901 	ands.w	r9, r6, #1
 802bb52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802bb54:	f006 0810 	and.w	r8, r6, #16
 802bb58:	f000 80ef 	beq.w	802bd3a <__ssvfscanf_r+0xb76>
 802bb5c:	f1b8 0f00 	cmp.w	r8, #0
 802bb60:	f040 8098 	bne.w	802bc94 <__ssvfscanf_r+0xad0>
 802bb64:	462b      	mov	r3, r5
 802bb66:	0631      	lsls	r1, r6, #24
 802bb68:	f853 5b04 	ldr.w	r5, [r3], #4
 802bb6c:	613b      	str	r3, [r7, #16]
 802bb6e:	f140 8099 	bpl.w	802bca4 <__ssvfscanf_r+0xae0>
 802bb72:	2d00      	cmp	r5, #0
 802bb74:	f43f ace4 	beq.w	802b540 <__ssvfscanf_r+0x37c>
 802bb78:	2080      	movs	r0, #128	@ 0x80
 802bb7a:	f7fc f9af 	bl	8027edc <malloc>
 802bb7e:	4606      	mov	r6, r0
 802bb80:	2800      	cmp	r0, #0
 802bb82:	f43f acda 	beq.w	802b53a <__ssvfscanf_r+0x376>
 802bb86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bb88:	6028      	str	r0, [r5, #0]
 802bb8a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 802bb8e:	889b      	ldrh	r3, [r3, #4]
 802bb90:	4599      	cmp	r9, r3
 802bb92:	d314      	bcc.n	802bbbe <__ssvfscanf_r+0x9fa>
 802bb94:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802bb98:	4293      	cmp	r3, r2
 802bb9a:	f200 847b 	bhi.w	802c494 <__ssvfscanf_r+0x12d0>
 802bb9e:	3308      	adds	r3, #8
 802bba0:	fa1f fa83 	uxth.w	sl, r3
 802bba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bba6:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802bbaa:	6818      	ldr	r0, [r3, #0]
 802bbac:	f001 f920 	bl	802cdf0 <realloc>
 802bbb0:	2800      	cmp	r0, #0
 802bbb2:	f000 846f 	beq.w	802c494 <__ssvfscanf_r+0x12d0>
 802bbb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bbb8:	6018      	str	r0, [r3, #0]
 802bbba:	f8a3 a004 	strh.w	sl, [r3, #4]
 802bbbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bbc0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802bbc2:	681b      	ldr	r3, [r3, #0]
 802bbc4:	f109 0201 	add.w	r2, r9, #1
 802bbc8:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802bbcc:	46aa      	mov	sl, r5
 802bbce:	80ca      	strh	r2, [r1, #6]
 802bbd0:	4635      	mov	r5, r6
 802bbd2:	f04f 0920 	mov.w	r9, #32
 802bbd6:	2300      	movs	r3, #0
 802bbd8:	6822      	ldr	r2, [r4, #0]
 802bbda:	49a7      	ldr	r1, [pc, #668]	@ (802be78 <__ssvfscanf_r+0xcb4>)
 802bbdc:	7812      	ldrb	r2, [r2, #0]
 802bbde:	5c8a      	ldrb	r2, [r1, r2]
 802bbe0:	0710      	lsls	r0, r2, #28
 802bbe2:	d43c      	bmi.n	802bc5e <__ssvfscanf_r+0xa9a>
 802bbe4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802bbe6:	2a00      	cmp	r2, #0
 802bbe8:	d039      	beq.n	802bc5e <__ssvfscanf_r+0xa9a>
 802bbea:	60fb      	str	r3, [r7, #12]
 802bbec:	f7fb f8b8 	bl	8026d60 <__locale_mb_cur_max>
 802bbf0:	68fb      	ldr	r3, [r7, #12]
 802bbf2:	4298      	cmp	r0, r3
 802bbf4:	f43f aba8 	beq.w	802b348 <__ssvfscanf_r+0x184>
 802bbf8:	6822      	ldr	r2, [r4, #0]
 802bbfa:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802bbfe:	f812 0b01 	ldrb.w	r0, [r2], #1
 802bc02:	54c8      	strb	r0, [r1, r3]
 802bc04:	f103 0b01 	add.w	fp, r3, #1
 802bc08:	6863      	ldr	r3, [r4, #4]
 802bc0a:	3b01      	subs	r3, #1
 802bc0c:	e9c4 2300 	strd	r2, r3, [r4]
 802bc10:	6a3b      	ldr	r3, [r7, #32]
 802bc12:	2b03      	cmp	r3, #3
 802bc14:	d102      	bne.n	802bc1c <__ssvfscanf_r+0xa58>
 802bc16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bc18:	2b04      	cmp	r3, #4
 802bc1a:	d005      	beq.n	802bc28 <__ssvfscanf_r+0xa64>
 802bc1c:	2208      	movs	r2, #8
 802bc1e:	2100      	movs	r1, #0
 802bc20:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802bc24:	f7f9 ff14 	bl	8025a50 <memset>
 802bc28:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802bc2c:	9300      	str	r3, [sp, #0]
 802bc2e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802bc32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bc34:	465b      	mov	r3, fp
 802bc36:	4629      	mov	r1, r5
 802bc38:	f002 fc94 	bl	802e564 <_mbrtowc_r>
 802bc3c:	1c42      	adds	r2, r0, #1
 802bc3e:	6238      	str	r0, [r7, #32]
 802bc40:	f43f ab82 	beq.w	802b348 <__ssvfscanf_r+0x184>
 802bc44:	bb90      	cbnz	r0, 802bcac <__ssvfscanf_r+0xae8>
 802bc46:	6028      	str	r0, [r5, #0]
 802bc48:	6828      	ldr	r0, [r5, #0]
 802bc4a:	f002 fca5 	bl	802e598 <iswspace>
 802bc4e:	4603      	mov	r3, r0
 802bc50:	2800      	cmp	r0, #0
 802bc52:	d047      	beq.n	802bce4 <__ssvfscanf_r+0xb20>
 802bc54:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802bc58:	f1bb 0f00 	cmp.w	fp, #0
 802bc5c:	d139      	bne.n	802bcd2 <__ssvfscanf_r+0xb0e>
 802bc5e:	f1b8 0f00 	cmp.w	r8, #0
 802bc62:	d114      	bne.n	802bc8e <__ssvfscanf_r+0xaca>
 802bc64:	f8c5 8000 	str.w	r8, [r5]
 802bc68:	f1ba 0f00 	cmp.w	sl, #0
 802bc6c:	d00c      	beq.n	802bc88 <__ssvfscanf_r+0xac4>
 802bc6e:	1ba9      	subs	r1, r5, r6
 802bc70:	108b      	asrs	r3, r1, #2
 802bc72:	3301      	adds	r3, #1
 802bc74:	4599      	cmp	r9, r3
 802bc76:	d907      	bls.n	802bc88 <__ssvfscanf_r+0xac4>
 802bc78:	f8da 0000 	ldr.w	r0, [sl]
 802bc7c:	3104      	adds	r1, #4
 802bc7e:	f001 f8b7 	bl	802cdf0 <realloc>
 802bc82:	b108      	cbz	r0, 802bc88 <__ssvfscanf_r+0xac4>
 802bc84:	f8ca 0000 	str.w	r0, [sl]
 802bc88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802bc8a:	3301      	adds	r3, #1
 802bc8c:	627b      	str	r3, [r7, #36]	@ 0x24
 802bc8e:	693d      	ldr	r5, [r7, #16]
 802bc90:	f7ff bab3 	b.w	802b1fa <__ssvfscanf_r+0x36>
 802bc94:	f04f 0900 	mov.w	r9, #0
 802bc98:	613d      	str	r5, [r7, #16]
 802bc9a:	464e      	mov	r6, r9
 802bc9c:	46ca      	mov	sl, r9
 802bc9e:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 802bca2:	e798      	b.n	802bbd6 <__ssvfscanf_r+0xa12>
 802bca4:	46c1      	mov	r9, r8
 802bca6:	4646      	mov	r6, r8
 802bca8:	46c2      	mov	sl, r8
 802bcaa:	e794      	b.n	802bbd6 <__ssvfscanf_r+0xa12>
 802bcac:	6a3b      	ldr	r3, [r7, #32]
 802bcae:	3302      	adds	r3, #2
 802bcb0:	d1ca      	bne.n	802bc48 <__ssvfscanf_r+0xa84>
 802bcb2:	465b      	mov	r3, fp
 802bcb4:	6862      	ldr	r2, [r4, #4]
 802bcb6:	2a00      	cmp	r2, #0
 802bcb8:	dc8e      	bgt.n	802bbd8 <__ssvfscanf_r+0xa14>
 802bcba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bcbc:	60fb      	str	r3, [r7, #12]
 802bcbe:	4621      	mov	r1, r4
 802bcc0:	f7fd f8cb 	bl	8028e5a <__ssrefill_r>
 802bcc4:	68fb      	ldr	r3, [r7, #12]
 802bcc6:	2800      	cmp	r0, #0
 802bcc8:	d086      	beq.n	802bbd8 <__ssvfscanf_r+0xa14>
 802bcca:	2b00      	cmp	r3, #0
 802bccc:	f47f ab3c 	bne.w	802b348 <__ssvfscanf_r+0x184>
 802bcd0:	e7c5      	b.n	802bc5e <__ssvfscanf_r+0xa9a>
 802bcd2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802bcd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bcd8:	f813 100b 	ldrb.w	r1, [r3, fp]
 802bcdc:	4622      	mov	r2, r4
 802bcde:	f7fd f881 	bl	8028de4 <_sungetc_r>
 802bce2:	e7b7      	b.n	802bc54 <__ssvfscanf_r+0xa90>
 802bce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802bce6:	445a      	add	r2, fp
 802bce8:	633a      	str	r2, [r7, #48]	@ 0x30
 802bcea:	6a3a      	ldr	r2, [r7, #32]
 802bcec:	2a03      	cmp	r2, #3
 802bcee:	d102      	bne.n	802bcf6 <__ssvfscanf_r+0xb32>
 802bcf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bcf2:	2a04      	cmp	r2, #4
 802bcf4:	d002      	beq.n	802bcfc <__ssvfscanf_r+0xb38>
 802bcf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802bcf8:	3a01      	subs	r2, #1
 802bcfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802bcfc:	f1b8 0f00 	cmp.w	r8, #0
 802bd00:	d1d8      	bne.n	802bcb4 <__ssvfscanf_r+0xaf0>
 802bd02:	3504      	adds	r5, #4
 802bd04:	f1ba 0f00 	cmp.w	sl, #0
 802bd08:	d015      	beq.n	802bd36 <__ssvfscanf_r+0xb72>
 802bd0a:	eba5 0b06 	sub.w	fp, r5, r6
 802bd0e:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 802bd12:	d80e      	bhi.n	802bd32 <__ssvfscanf_r+0xb6e>
 802bd14:	4630      	mov	r0, r6
 802bd16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802bd1a:	f001 f869 	bl	802cdf0 <realloc>
 802bd1e:	4606      	mov	r6, r0
 802bd20:	2800      	cmp	r0, #0
 802bd22:	f43f ac0a 	beq.w	802b53a <__ssvfscanf_r+0x376>
 802bd26:	eb00 050b 	add.w	r5, r0, fp
 802bd2a:	f8ca 0000 	str.w	r0, [sl]
 802bd2e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802bd32:	4643      	mov	r3, r8
 802bd34:	e7be      	b.n	802bcb4 <__ssvfscanf_r+0xaf0>
 802bd36:	4653      	mov	r3, sl
 802bd38:	e7bc      	b.n	802bcb4 <__ssvfscanf_r+0xaf0>
 802bd3a:	f1b8 0f00 	cmp.w	r8, #0
 802bd3e:	d01a      	beq.n	802bd76 <__ssvfscanf_r+0xbb2>
 802bd40:	4e4d      	ldr	r6, [pc, #308]	@ (802be78 <__ssvfscanf_r+0xcb4>)
 802bd42:	6823      	ldr	r3, [r4, #0]
 802bd44:	781a      	ldrb	r2, [r3, #0]
 802bd46:	5cb2      	ldrb	r2, [r6, r2]
 802bd48:	0711      	lsls	r1, r2, #28
 802bd4a:	d411      	bmi.n	802bd70 <__ssvfscanf_r+0xbac>
 802bd4c:	3301      	adds	r3, #1
 802bd4e:	6862      	ldr	r2, [r4, #4]
 802bd50:	6023      	str	r3, [r4, #0]
 802bd52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bd54:	f109 0901 	add.w	r9, r9, #1
 802bd58:	3a01      	subs	r2, #1
 802bd5a:	454b      	cmp	r3, r9
 802bd5c:	6062      	str	r2, [r4, #4]
 802bd5e:	d007      	beq.n	802bd70 <__ssvfscanf_r+0xbac>
 802bd60:	2a00      	cmp	r2, #0
 802bd62:	dcee      	bgt.n	802bd42 <__ssvfscanf_r+0xb7e>
 802bd64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bd66:	4621      	mov	r1, r4
 802bd68:	f7fd f877 	bl	8028e5a <__ssrefill_r>
 802bd6c:	2800      	cmp	r0, #0
 802bd6e:	d0e8      	beq.n	802bd42 <__ssvfscanf_r+0xb7e>
 802bd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802bd72:	444b      	add	r3, r9
 802bd74:	e4d3      	b.n	802b71e <__ssvfscanf_r+0x55a>
 802bd76:	46a8      	mov	r8, r5
 802bd78:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802bd7c:	f858 5b04 	ldr.w	r5, [r8], #4
 802bd80:	d077      	beq.n	802be72 <__ssvfscanf_r+0xcae>
 802bd82:	2d00      	cmp	r5, #0
 802bd84:	f43f ab14 	beq.w	802b3b0 <__ssvfscanf_r+0x1ec>
 802bd88:	2020      	movs	r0, #32
 802bd8a:	f7fc f8a7 	bl	8027edc <malloc>
 802bd8e:	4681      	mov	r9, r0
 802bd90:	2800      	cmp	r0, #0
 802bd92:	f43f aade 	beq.w	802b352 <__ssvfscanf_r+0x18e>
 802bd96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bd98:	6028      	str	r0, [r5, #0]
 802bd9a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 802bd9e:	889e      	ldrh	r6, [r3, #4]
 802bda0:	45b2      	cmp	sl, r6
 802bda2:	d311      	bcc.n	802bdc8 <__ssvfscanf_r+0xc04>
 802bda4:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802bda8:	429e      	cmp	r6, r3
 802bdaa:	f200 8373 	bhi.w	802c494 <__ssvfscanf_r+0x12d0>
 802bdae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bdb0:	3608      	adds	r6, #8
 802bdb2:	b2b6      	uxth	r6, r6
 802bdb4:	6818      	ldr	r0, [r3, #0]
 802bdb6:	00b1      	lsls	r1, r6, #2
 802bdb8:	f001 f81a 	bl	802cdf0 <realloc>
 802bdbc:	2800      	cmp	r0, #0
 802bdbe:	f000 8369 	beq.w	802c494 <__ssvfscanf_r+0x12d0>
 802bdc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bdc4:	6018      	str	r0, [r3, #0]
 802bdc6:	809e      	strh	r6, [r3, #4]
 802bdc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bdca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802bdcc:	681b      	ldr	r3, [r3, #0]
 802bdce:	f10a 0201 	add.w	r2, sl, #1
 802bdd2:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802bdd6:	80ca      	strh	r2, [r1, #6]
 802bdd8:	46aa      	mov	sl, r5
 802bdda:	2620      	movs	r6, #32
 802bddc:	464d      	mov	r5, r9
 802bdde:	46a9      	mov	r9, r5
 802bde0:	6823      	ldr	r3, [r4, #0]
 802bde2:	4925      	ldr	r1, [pc, #148]	@ (802be78 <__ssvfscanf_r+0xcb4>)
 802bde4:	781a      	ldrb	r2, [r3, #0]
 802bde6:	5c8a      	ldrb	r2, [r1, r2]
 802bde8:	0712      	lsls	r2, r2, #28
 802bdea:	d428      	bmi.n	802be3e <__ssvfscanf_r+0xc7a>
 802bdec:	6862      	ldr	r2, [r4, #4]
 802bdee:	3a01      	subs	r2, #1
 802bdf0:	6062      	str	r2, [r4, #4]
 802bdf2:	1c5a      	adds	r2, r3, #1
 802bdf4:	6022      	str	r2, [r4, #0]
 802bdf6:	781b      	ldrb	r3, [r3, #0]
 802bdf8:	f805 3b01 	strb.w	r3, [r5], #1
 802bdfc:	f1ba 0f00 	cmp.w	sl, #0
 802be00:	d010      	beq.n	802be24 <__ssvfscanf_r+0xc60>
 802be02:	eba5 0b09 	sub.w	fp, r5, r9
 802be06:	45b3      	cmp	fp, r6
 802be08:	d30c      	bcc.n	802be24 <__ssvfscanf_r+0xc60>
 802be0a:	0076      	lsls	r6, r6, #1
 802be0c:	4648      	mov	r0, r9
 802be0e:	4631      	mov	r1, r6
 802be10:	f000 ffee 	bl	802cdf0 <realloc>
 802be14:	4681      	mov	r9, r0
 802be16:	2800      	cmp	r0, #0
 802be18:	f43f aa9b 	beq.w	802b352 <__ssvfscanf_r+0x18e>
 802be1c:	eb00 050b 	add.w	r5, r0, fp
 802be20:	f8ca 0000 	str.w	r0, [sl]
 802be24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802be26:	3b01      	subs	r3, #1
 802be28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802be2a:	d008      	beq.n	802be3e <__ssvfscanf_r+0xc7a>
 802be2c:	6863      	ldr	r3, [r4, #4]
 802be2e:	2b00      	cmp	r3, #0
 802be30:	dcd6      	bgt.n	802bde0 <__ssvfscanf_r+0xc1c>
 802be32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802be34:	4621      	mov	r1, r4
 802be36:	f7fd f810 	bl	8028e5a <__ssrefill_r>
 802be3a:	2800      	cmp	r0, #0
 802be3c:	d0d0      	beq.n	802bde0 <__ssvfscanf_r+0xc1c>
 802be3e:	2300      	movs	r3, #0
 802be40:	702b      	strb	r3, [r5, #0]
 802be42:	eba5 0509 	sub.w	r5, r5, r9
 802be46:	f1ba 0f00 	cmp.w	sl, #0
 802be4a:	d009      	beq.n	802be60 <__ssvfscanf_r+0xc9c>
 802be4c:	1c69      	adds	r1, r5, #1
 802be4e:	428e      	cmp	r6, r1
 802be50:	d906      	bls.n	802be60 <__ssvfscanf_r+0xc9c>
 802be52:	f8da 0000 	ldr.w	r0, [sl]
 802be56:	f000 ffcb 	bl	802cdf0 <realloc>
 802be5a:	b108      	cbz	r0, 802be60 <__ssvfscanf_r+0xc9c>
 802be5c:	f8ca 0000 	str.w	r0, [sl]
 802be60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802be62:	442b      	add	r3, r5
 802be64:	633b      	str	r3, [r7, #48]	@ 0x30
 802be66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802be68:	3301      	adds	r3, #1
 802be6a:	627b      	str	r3, [r7, #36]	@ 0x24
 802be6c:	4645      	mov	r5, r8
 802be6e:	f7ff b9c4 	b.w	802b1fa <__ssvfscanf_r+0x36>
 802be72:	46b2      	mov	sl, r6
 802be74:	e7b3      	b.n	802bdde <__ssvfscanf_r+0xc1a>
 802be76:	bf00      	nop
 802be78:	08034405 	.word	0x08034405
 802be7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802be7e:	3b01      	subs	r3, #1
 802be80:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 802be84:	bf81      	itttt	hi
 802be86:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 802be88:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 802be8c:	eb03 090c 	addhi.w	r9, r3, ip
 802be90:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802be94:	bf8c      	ite	hi
 802be96:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 802be98:	f04f 0900 	movls.w	r9, #0
 802be9c:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 802bea0:	f04f 0a00 	mov.w	sl, #0
 802bea4:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 802bea8:	6822      	ldr	r2, [r4, #0]
 802beaa:	7813      	ldrb	r3, [r2, #0]
 802beac:	2b39      	cmp	r3, #57	@ 0x39
 802beae:	d80f      	bhi.n	802bed0 <__ssvfscanf_r+0xd0c>
 802beb0:	2b2a      	cmp	r3, #42	@ 0x2a
 802beb2:	d91a      	bls.n	802beea <__ssvfscanf_r+0xd26>
 802beb4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 802beb8:	290e      	cmp	r1, #14
 802beba:	d816      	bhi.n	802beea <__ssvfscanf_r+0xd26>
 802bebc:	e8df f001 	tbb	[pc, r1]
 802bec0:	15781578 	.word	0x15781578
 802bec4:	68683f15 	.word	0x68683f15
 802bec8:	68686868 	.word	0x68686868
 802becc:	7068      	.short	0x7068
 802bece:	70          	.byte	0x70
 802becf:	00          	.byte	0x00
 802bed0:	2b66      	cmp	r3, #102	@ 0x66
 802bed2:	d832      	bhi.n	802bf3a <__ssvfscanf_r+0xd76>
 802bed4:	2b60      	cmp	r3, #96	@ 0x60
 802bed6:	d803      	bhi.n	802bee0 <__ssvfscanf_r+0xd1c>
 802bed8:	2b46      	cmp	r3, #70	@ 0x46
 802beda:	d804      	bhi.n	802bee6 <__ssvfscanf_r+0xd22>
 802bedc:	2b40      	cmp	r3, #64	@ 0x40
 802bede:	d904      	bls.n	802beea <__ssvfscanf_r+0xd26>
 802bee0:	69f9      	ldr	r1, [r7, #28]
 802bee2:	290a      	cmp	r1, #10
 802bee4:	e062      	b.n	802bfac <__ssvfscanf_r+0xde8>
 802bee6:	2b58      	cmp	r3, #88	@ 0x58
 802bee8:	d068      	beq.n	802bfbc <__ssvfscanf_r+0xdf8>
 802beea:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 802beee:	d011      	beq.n	802bf14 <__ssvfscanf_r+0xd50>
 802bef0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802bef4:	4598      	cmp	r8, r3
 802bef6:	d908      	bls.n	802bf0a <__ssvfscanf_r+0xd46>
 802bef8:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 802befc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802befe:	4622      	mov	r2, r4
 802bf00:	f7fc ff70 	bl	8028de4 <_sungetc_r>
 802bf04:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 802bf08:	46c8      	mov	r8, r9
 802bf0a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802bf0e:	4598      	cmp	r8, r3
 802bf10:	f43f aa4e 	beq.w	802b3b0 <__ssvfscanf_r+0x1ec>
 802bf14:	f01b 0210 	ands.w	r2, fp, #16
 802bf18:	d16c      	bne.n	802bff4 <__ssvfscanf_r+0xe30>
 802bf1a:	69fb      	ldr	r3, [r7, #28]
 802bf1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bf1e:	69be      	ldr	r6, [r7, #24]
 802bf20:	f888 2000 	strb.w	r2, [r8]
 802bf24:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802bf28:	47b0      	blx	r6
 802bf2a:	f01b 0f20 	tst.w	fp, #32
 802bf2e:	f105 0904 	add.w	r9, r5, #4
 802bf32:	d056      	beq.n	802bfe2 <__ssvfscanf_r+0xe1e>
 802bf34:	682b      	ldr	r3, [r5, #0]
 802bf36:	6018      	str	r0, [r3, #0]
 802bf38:	e058      	b.n	802bfec <__ssvfscanf_r+0xe28>
 802bf3a:	2b78      	cmp	r3, #120	@ 0x78
 802bf3c:	e7d4      	b.n	802bee8 <__ssvfscanf_r+0xd24>
 802bf3e:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 802bf42:	d00a      	beq.n	802bf5a <__ssvfscanf_r+0xd96>
 802bf44:	69f9      	ldr	r1, [r7, #28]
 802bf46:	b919      	cbnz	r1, 802bf50 <__ssvfscanf_r+0xd8c>
 802bf48:	2108      	movs	r1, #8
 802bf4a:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 802bf4e:	61f9      	str	r1, [r7, #28]
 802bf50:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 802bf54:	d004      	beq.n	802bf60 <__ssvfscanf_r+0xd9c>
 802bf56:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 802bf5a:	f808 3b01 	strb.w	r3, [r8], #1
 802bf5e:	e00b      	b.n	802bf78 <__ssvfscanf_r+0xdb4>
 802bf60:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 802bf64:	f1b9 0f00 	cmp.w	r9, #0
 802bf68:	d004      	beq.n	802bf74 <__ssvfscanf_r+0xdb0>
 802bf6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bf6c:	3301      	adds	r3, #1
 802bf6e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802bf72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802bf74:	f10a 0a01 	add.w	sl, sl, #1
 802bf78:	6863      	ldr	r3, [r4, #4]
 802bf7a:	3b01      	subs	r3, #1
 802bf7c:	2b00      	cmp	r3, #0
 802bf7e:	6063      	str	r3, [r4, #4]
 802bf80:	dd28      	ble.n	802bfd4 <__ssvfscanf_r+0xe10>
 802bf82:	3201      	adds	r2, #1
 802bf84:	6022      	str	r2, [r4, #0]
 802bf86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bf88:	3b01      	subs	r3, #1
 802bf8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802bf8c:	d18c      	bne.n	802bea8 <__ssvfscanf_r+0xce4>
 802bf8e:	e7ac      	b.n	802beea <__ssvfscanf_r+0xd26>
 802bf90:	69f8      	ldr	r0, [r7, #28]
 802bf92:	499b      	ldr	r1, [pc, #620]	@ (802c200 <__ssvfscanf_r+0x103c>)
 802bf94:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802bf98:	61f9      	str	r1, [r7, #28]
 802bf9a:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 802bf9e:	e7dc      	b.n	802bf5a <__ssvfscanf_r+0xd96>
 802bfa0:	69f8      	ldr	r0, [r7, #28]
 802bfa2:	4997      	ldr	r1, [pc, #604]	@ (802c200 <__ssvfscanf_r+0x103c>)
 802bfa4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802bfa8:	61f9      	str	r1, [r7, #28]
 802bfaa:	2908      	cmp	r1, #8
 802bfac:	dcf5      	bgt.n	802bf9a <__ssvfscanf_r+0xdd6>
 802bfae:	e79c      	b.n	802beea <__ssvfscanf_r+0xd26>
 802bfb0:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 802bfb4:	d099      	beq.n	802beea <__ssvfscanf_r+0xd26>
 802bfb6:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 802bfba:	e7ce      	b.n	802bf5a <__ssvfscanf_r+0xd96>
 802bfbc:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 802bfc0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802bfc4:	d191      	bne.n	802beea <__ssvfscanf_r+0xd26>
 802bfc6:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 802bfca:	2110      	movs	r1, #16
 802bfcc:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 802bfd0:	61f9      	str	r1, [r7, #28]
 802bfd2:	e7c2      	b.n	802bf5a <__ssvfscanf_r+0xd96>
 802bfd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bfd6:	4621      	mov	r1, r4
 802bfd8:	f7fc ff3f 	bl	8028e5a <__ssrefill_r>
 802bfdc:	2800      	cmp	r0, #0
 802bfde:	d0d2      	beq.n	802bf86 <__ssvfscanf_r+0xdc2>
 802bfe0:	e783      	b.n	802beea <__ssvfscanf_r+0xd26>
 802bfe2:	f01b 0f08 	tst.w	fp, #8
 802bfe6:	d00b      	beq.n	802c000 <__ssvfscanf_r+0xe3c>
 802bfe8:	682b      	ldr	r3, [r5, #0]
 802bfea:	7018      	strb	r0, [r3, #0]
 802bfec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802bfee:	3301      	adds	r3, #1
 802bff0:	627b      	str	r3, [r7, #36]	@ 0x24
 802bff2:	464d      	mov	r5, r9
 802bff4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802bff8:	eba8 0803 	sub.w	r8, r8, r3
 802bffc:	44d0      	add	r8, sl
 802bffe:	e516      	b.n	802ba2e <__ssvfscanf_r+0x86a>
 802c000:	f01b 0f04 	tst.w	fp, #4
 802c004:	d002      	beq.n	802c00c <__ssvfscanf_r+0xe48>
 802c006:	682b      	ldr	r3, [r5, #0]
 802c008:	8018      	strh	r0, [r3, #0]
 802c00a:	e7ef      	b.n	802bfec <__ssvfscanf_r+0xe28>
 802c00c:	f01b 0201 	ands.w	r2, fp, #1
 802c010:	d190      	bne.n	802bf34 <__ssvfscanf_r+0xd70>
 802c012:	f01b 0f02 	tst.w	fp, #2
 802c016:	d08d      	beq.n	802bf34 <__ssvfscanf_r+0xd70>
 802c018:	4b7a      	ldr	r3, [pc, #488]	@ (802c204 <__ssvfscanf_r+0x1040>)
 802c01a:	69b9      	ldr	r1, [r7, #24]
 802c01c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c01e:	4299      	cmp	r1, r3
 802c020:	69fb      	ldr	r3, [r7, #28]
 802c022:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802c026:	d105      	bne.n	802c034 <__ssvfscanf_r+0xe70>
 802c028:	f002 fa9a 	bl	802e560 <_strtoull_r>
 802c02c:	682b      	ldr	r3, [r5, #0]
 802c02e:	e9c3 0100 	strd	r0, r1, [r3]
 802c032:	e7db      	b.n	802bfec <__ssvfscanf_r+0xe28>
 802c034:	f002 f9e8 	bl	802e408 <_strtoll_r>
 802c038:	e7f8      	b.n	802c02c <__ssvfscanf_r+0xe68>
 802c03a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c03c:	f7fa fe96 	bl	8026d6c <_localeconv_r>
 802c040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c042:	6802      	ldr	r2, [r0, #0]
 802c044:	3b01      	subs	r3, #1
 802c046:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 802c04a:	f04f 0800 	mov.w	r8, #0
 802c04e:	bf88      	it	hi
 802c050:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 802c052:	f8c7 8010 	str.w	r8, [r7, #16]
 802c056:	e9c7 8802 	strd	r8, r8, [r7, #8]
 802c05a:	bf81      	itttt	hi
 802c05c:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 802c060:	f240 115d 	movwhi	r1, #349	@ 0x15d
 802c064:	181b      	addhi	r3, r3, r0
 802c066:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 802c068:	bf98      	it	ls
 802c06a:	2300      	movls	r3, #0
 802c06c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 802c070:	46c3      	mov	fp, r8
 802c072:	46c2      	mov	sl, r8
 802c074:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 802c078:	6821      	ldr	r1, [r4, #0]
 802c07a:	6079      	str	r1, [r7, #4]
 802c07c:	7808      	ldrb	r0, [r1, #0]
 802c07e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 802c082:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 802c086:	f200 8123 	bhi.w	802c2d0 <__ssvfscanf_r+0x110c>
 802c08a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 802c08e:	0089      	.short	0x0089
 802c090:	00890121 	.word	0x00890121
 802c094:	01210121 	.word	0x01210121
 802c098:	006f004f 	.word	0x006f004f
 802c09c:	006f006f 	.word	0x006f006f
 802c0a0:	006f006f 	.word	0x006f006f
 802c0a4:	006f006f 	.word	0x006f006f
 802c0a8:	006f006f 	.word	0x006f006f
 802c0ac:	01210121 	.word	0x01210121
 802c0b0:	01210121 	.word	0x01210121
 802c0b4:	01210121 	.word	0x01210121
 802c0b8:	00af0121 	.word	0x00af0121
 802c0bc:	006d006d 	.word	0x006d006d
 802c0c0:	011e006d 	.word	0x011e006d
 802c0c4:	012100ed 	.word	0x012100ed
 802c0c8:	00d60121 	.word	0x00d60121
 802c0cc:	01210121 	.word	0x01210121
 802c0d0:	01210121 	.word	0x01210121
 802c0d4:	01210090 	.word	0x01210090
 802c0d8:	01210104 	.word	0x01210104
 802c0dc:	01210121 	.word	0x01210121
 802c0e0:	012100f8 	.word	0x012100f8
 802c0e4:	01210121 	.word	0x01210121
 802c0e8:	00fe0073 	.word	0x00fe0073
 802c0ec:	01210121 	.word	0x01210121
 802c0f0:	01210121 	.word	0x01210121
 802c0f4:	01210121 	.word	0x01210121
 802c0f8:	00af0121 	.word	0x00af0121
 802c0fc:	006d006d 	.word	0x006d006d
 802c100:	011e006d 	.word	0x011e006d
 802c104:	012100ed 	.word	0x012100ed
 802c108:	00d60121 	.word	0x00d60121
 802c10c:	01210121 	.word	0x01210121
 802c110:	01210121 	.word	0x01210121
 802c114:	01210090 	.word	0x01210090
 802c118:	01210104 	.word	0x01210104
 802c11c:	01210121 	.word	0x01210121
 802c120:	012100f8 	.word	0x012100f8
 802c124:	01210121 	.word	0x01210121
 802c128:	00fe0073 	.word	0x00fe0073
 802c12c:	05f1      	lsls	r1, r6, #23
 802c12e:	d51d      	bpl.n	802c16c <__ssvfscanf_r+0xfa8>
 802c130:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 802c134:	f10a 0a01 	add.w	sl, sl, #1
 802c138:	b11b      	cbz	r3, 802c142 <__ssvfscanf_r+0xf7e>
 802c13a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 802c13c:	3001      	adds	r0, #1
 802c13e:	3b01      	subs	r3, #1
 802c140:	62f8      	str	r0, [r7, #44]	@ 0x2c
 802c142:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802c144:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802c146:	3001      	adds	r0, #1
 802c148:	6338      	str	r0, [r7, #48]	@ 0x30
 802c14a:	6860      	ldr	r0, [r4, #4]
 802c14c:	3801      	subs	r0, #1
 802c14e:	3901      	subs	r1, #1
 802c150:	2800      	cmp	r0, #0
 802c152:	62f9      	str	r1, [r7, #44]	@ 0x2c
 802c154:	6060      	str	r0, [r4, #4]
 802c156:	f340 80cc 	ble.w	802c2f2 <__ssvfscanf_r+0x112e>
 802c15a:	6879      	ldr	r1, [r7, #4]
 802c15c:	3101      	adds	r1, #1
 802c15e:	6021      	str	r1, [r4, #0]
 802c160:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802c162:	2900      	cmp	r1, #0
 802c164:	d188      	bne.n	802c078 <__ssvfscanf_r+0xeb4>
 802c166:	e052      	b.n	802c20e <__ssvfscanf_r+0x104a>
 802c168:	0531      	lsls	r1, r6, #20
 802c16a:	d550      	bpl.n	802c20e <__ssvfscanf_r+0x104a>
 802c16c:	eb1b 0c08 	adds.w	ip, fp, r8
 802c170:	d041      	beq.n	802c1f6 <__ssvfscanf_r+0x1032>
 802c172:	e04c      	b.n	802c20e <__ssvfscanf_r+0x104a>
 802c174:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 802c178:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 802c17c:	d147      	bne.n	802c20e <__ssvfscanf_r+0x104a>
 802c17e:	f1ba 0f01 	cmp.w	sl, #1
 802c182:	d144      	bne.n	802c20e <__ssvfscanf_r+0x104a>
 802c184:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802c186:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 802c18a:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 802c18e:	3901      	subs	r1, #1
 802c190:	f809 cb01 	strb.w	ip, [r9], #1
 802c194:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 802c198:	62f9      	str	r1, [r7, #44]	@ 0x2c
 802c19a:	f04f 0a00 	mov.w	sl, #0
 802c19e:	e003      	b.n	802c1a8 <__ssvfscanf_r+0xfe4>
 802c1a0:	0631      	lsls	r1, r6, #24
 802c1a2:	d534      	bpl.n	802c20e <__ssvfscanf_r+0x104a>
 802c1a4:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 802c1a8:	f809 0b01 	strb.w	r0, [r9], #1
 802c1ac:	e7c9      	b.n	802c142 <__ssvfscanf_r+0xf7e>
 802c1ae:	f1bb 0f00 	cmp.w	fp, #0
 802c1b2:	d10c      	bne.n	802c1ce <__ssvfscanf_r+0x100a>
 802c1b4:	f1ba 0f00 	cmp.w	sl, #0
 802c1b8:	d10d      	bne.n	802c1d6 <__ssvfscanf_r+0x1012>
 802c1ba:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 802c1be:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 802c1c2:	d108      	bne.n	802c1d6 <__ssvfscanf_r+0x1012>
 802c1c4:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 802c1c8:	f04f 0b01 	mov.w	fp, #1
 802c1cc:	e7ec      	b.n	802c1a8 <__ssvfscanf_r+0xfe4>
 802c1ce:	f1bb 0f02 	cmp.w	fp, #2
 802c1d2:	f000 8088 	beq.w	802c2e6 <__ssvfscanf_r+0x1122>
 802c1d6:	f1b8 0f01 	cmp.w	r8, #1
 802c1da:	d002      	beq.n	802c1e2 <__ssvfscanf_r+0x101e>
 802c1dc:	f1b8 0f04 	cmp.w	r8, #4
 802c1e0:	d115      	bne.n	802c20e <__ssvfscanf_r+0x104a>
 802c1e2:	f108 0801 	add.w	r8, r8, #1
 802c1e6:	fa5f f888 	uxtb.w	r8, r8
 802c1ea:	e7dd      	b.n	802c1a8 <__ssvfscanf_r+0xfe4>
 802c1ec:	0531      	lsls	r1, r6, #20
 802c1ee:	d50b      	bpl.n	802c208 <__ssvfscanf_r+0x1044>
 802c1f0:	eb1b 0c08 	adds.w	ip, fp, r8
 802c1f4:	d108      	bne.n	802c208 <__ssvfscanf_r+0x1044>
 802c1f6:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 802c1fa:	46e0      	mov	r8, ip
 802c1fc:	46e3      	mov	fp, ip
 802c1fe:	e7d3      	b.n	802c1a8 <__ssvfscanf_r+0xfe4>
 802c200:	080345e4 	.word	0x080345e4
 802c204:	0802df59 	.word	0x0802df59
 802c208:	f1bb 0f01 	cmp.w	fp, #1
 802c20c:	d06e      	beq.n	802c2ec <__ssvfscanf_r+0x1128>
 802c20e:	f1ba 0f00 	cmp.w	sl, #0
 802c212:	d001      	beq.n	802c218 <__ssvfscanf_r+0x1054>
 802c214:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 802c218:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c21c:	f1bb 0f01 	cmp.w	fp, #1
 802c220:	d873      	bhi.n	802c30a <__ssvfscanf_r+0x1146>
 802c222:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 802c226:	45a9      	cmp	r9, r5
 802c228:	f67f a8c2 	bls.w	802b3b0 <__ssvfscanf_r+0x1ec>
 802c22c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 802c230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c232:	4622      	mov	r2, r4
 802c234:	f7fc fdd6 	bl	8028de4 <_sungetc_r>
 802c238:	e7f5      	b.n	802c226 <__ssvfscanf_r+0x1062>
 802c23a:	f1b8 0f00 	cmp.w	r8, #0
 802c23e:	d10d      	bne.n	802c25c <__ssvfscanf_r+0x1098>
 802c240:	f1ba 0f00 	cmp.w	sl, #0
 802c244:	d1e6      	bne.n	802c214 <__ssvfscanf_r+0x1050>
 802c246:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 802c24a:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 802c24e:	f040 8124 	bne.w	802c49a <__ssvfscanf_r+0x12d6>
 802c252:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 802c256:	f04f 0801 	mov.w	r8, #1
 802c25a:	e7a5      	b.n	802c1a8 <__ssvfscanf_r+0xfe4>
 802c25c:	f1b8 0f03 	cmp.w	r8, #3
 802c260:	d0bf      	beq.n	802c1e2 <__ssvfscanf_r+0x101e>
 802c262:	f1b8 0f05 	cmp.w	r8, #5
 802c266:	e7bb      	b.n	802c1e0 <__ssvfscanf_r+0x101c>
 802c268:	0531      	lsls	r1, r6, #20
 802c26a:	d502      	bpl.n	802c272 <__ssvfscanf_r+0x10ae>
 802c26c:	eb1b 0c08 	adds.w	ip, fp, r8
 802c270:	d0c1      	beq.n	802c1f6 <__ssvfscanf_r+0x1032>
 802c272:	f1b8 0f02 	cmp.w	r8, #2
 802c276:	d1ca      	bne.n	802c20e <__ssvfscanf_r+0x104a>
 802c278:	f04f 0803 	mov.w	r8, #3
 802c27c:	e794      	b.n	802c1a8 <__ssvfscanf_r+0xfe4>
 802c27e:	f1b8 0f06 	cmp.w	r8, #6
 802c282:	d1c4      	bne.n	802c20e <__ssvfscanf_r+0x104a>
 802c284:	f04f 0807 	mov.w	r8, #7
 802c288:	e78e      	b.n	802c1a8 <__ssvfscanf_r+0xfe4>
 802c28a:	f1b8 0f07 	cmp.w	r8, #7
 802c28e:	d1be      	bne.n	802c20e <__ssvfscanf_r+0x104a>
 802c290:	f04f 0808 	mov.w	r8, #8
 802c294:	e788      	b.n	802c1a8 <__ssvfscanf_r+0xfe4>
 802c296:	0531      	lsls	r1, r6, #20
 802c298:	d5b9      	bpl.n	802c20e <__ssvfscanf_r+0x104a>
 802c29a:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 802c29e:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 802c2a2:	d005      	beq.n	802c2b0 <__ssvfscanf_r+0x10ec>
 802c2a4:	0571      	lsls	r1, r6, #21
 802c2a6:	d5b2      	bpl.n	802c20e <__ssvfscanf_r+0x104a>
 802c2a8:	f1ba 0f00 	cmp.w	sl, #0
 802c2ac:	f000 80f5 	beq.w	802c49a <__ssvfscanf_r+0x12d6>
 802c2b0:	05b1      	lsls	r1, r6, #22
 802c2b2:	bf58      	it	pl
 802c2b4:	6939      	ldrpl	r1, [r7, #16]
 802c2b6:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 802c2ba:	bf5c      	itt	pl
 802c2bc:	ebaa 0101 	subpl.w	r1, sl, r1
 802c2c0:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 802c2c4:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 802c2c8:	e767      	b.n	802c19a <__ssvfscanf_r+0xfd6>
 802c2ca:	0531      	lsls	r1, r6, #20
 802c2cc:	d5e5      	bpl.n	802c29a <__ssvfscanf_r+0x10d6>
 802c2ce:	e74d      	b.n	802c16c <__ssvfscanf_r+0xfa8>
 802c2d0:	f892 c000 	ldrb.w	ip, [r2]
 802c2d4:	4584      	cmp	ip, r0
 802c2d6:	d19a      	bne.n	802c20e <__ssvfscanf_r+0x104a>
 802c2d8:	05b1      	lsls	r1, r6, #22
 802c2da:	d598      	bpl.n	802c20e <__ssvfscanf_r+0x104a>
 802c2dc:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 802c2e0:	f8c7 a010 	str.w	sl, [r7, #16]
 802c2e4:	e760      	b.n	802c1a8 <__ssvfscanf_r+0xfe4>
 802c2e6:	f04f 0b03 	mov.w	fp, #3
 802c2ea:	e75d      	b.n	802c1a8 <__ssvfscanf_r+0xfe4>
 802c2ec:	f04f 0b02 	mov.w	fp, #2
 802c2f0:	e75a      	b.n	802c1a8 <__ssvfscanf_r+0xfe4>
 802c2f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c2f4:	4621      	mov	r1, r4
 802c2f6:	e9c7 2300 	strd	r2, r3, [r7]
 802c2fa:	f7fc fdae 	bl	8028e5a <__ssrefill_r>
 802c2fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 802c302:	2800      	cmp	r0, #0
 802c304:	f43f af2c 	beq.w	802c160 <__ssvfscanf_r+0xf9c>
 802c308:	e781      	b.n	802c20e <__ssvfscanf_r+0x104a>
 802c30a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 802c30e:	2b06      	cmp	r3, #6
 802c310:	d827      	bhi.n	802c362 <__ssvfscanf_r+0x119e>
 802c312:	f1b8 0f02 	cmp.w	r8, #2
 802c316:	d834      	bhi.n	802c382 <__ssvfscanf_r+0x11be>
 802c318:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 802c31c:	45a9      	cmp	r9, r5
 802c31e:	f67f a847 	bls.w	802b3b0 <__ssvfscanf_r+0x1ec>
 802c322:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 802c326:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c328:	4622      	mov	r2, r4
 802c32a:	f7fc fd5b 	bl	8028de4 <_sungetc_r>
 802c32e:	e7f5      	b.n	802c31c <__ssvfscanf_r+0x1158>
 802c330:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 802c334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c336:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802c338:	4622      	mov	r2, r4
 802c33a:	f7fc fd53 	bl	8028de4 <_sungetc_r>
 802c33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c340:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c344:	fa5f fb8b 	uxtb.w	fp, fp
 802c348:	f1bb 0f02 	cmp.w	fp, #2
 802c34c:	d1f0      	bne.n	802c330 <__ssvfscanf_r+0x116c>
 802c34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c350:	f1a8 0803 	sub.w	r8, r8, #3
 802c354:	fa5f f888 	uxtb.w	r8, r8
 802c358:	eba3 0308 	sub.w	r3, r3, r8
 802c35c:	eba9 0908 	sub.w	r9, r9, r8
 802c360:	633b      	str	r3, [r7, #48]	@ 0x30
 802c362:	05f3      	lsls	r3, r6, #23
 802c364:	d52d      	bpl.n	802c3c2 <__ssvfscanf_r+0x11fe>
 802c366:	0570      	lsls	r0, r6, #21
 802c368:	d50e      	bpl.n	802c388 <__ssvfscanf_r+0x11c4>
 802c36a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 802c36e:	45a9      	cmp	r9, r5
 802c370:	f67f a81e 	bls.w	802b3b0 <__ssvfscanf_r+0x1ec>
 802c374:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 802c378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c37a:	4622      	mov	r2, r4
 802c37c:	f7fc fd32 	bl	8028de4 <_sungetc_r>
 802c380:	e7f5      	b.n	802c36e <__ssvfscanf_r+0x11aa>
 802c382:	46c3      	mov	fp, r8
 802c384:	464b      	mov	r3, r9
 802c386:	e7db      	b.n	802c340 <__ssvfscanf_r+0x117c>
 802c388:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 802c38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c38e:	2965      	cmp	r1, #101	@ 0x65
 802c390:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 802c394:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 802c398:	d00c      	beq.n	802c3b4 <__ssvfscanf_r+0x11f0>
 802c39a:	2945      	cmp	r1, #69	@ 0x45
 802c39c:	d00a      	beq.n	802c3b4 <__ssvfscanf_r+0x11f0>
 802c39e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c3a0:	4622      	mov	r2, r4
 802c3a2:	f7fc fd1f 	bl	8028de4 <_sungetc_r>
 802c3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c3a8:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 802c3ac:	f1a9 0802 	sub.w	r8, r9, #2
 802c3b0:	f1a3 0b02 	sub.w	fp, r3, #2
 802c3b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c3b6:	4622      	mov	r2, r4
 802c3b8:	f7fc fd14 	bl	8028de4 <_sungetc_r>
 802c3bc:	46c1      	mov	r9, r8
 802c3be:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 802c3c2:	f016 0210 	ands.w	r2, r6, #16
 802c3c6:	f47e af18 	bne.w	802b1fa <__ssvfscanf_r+0x36>
 802c3ca:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 802c3ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802c3d2:	f889 2000 	strb.w	r2, [r9]
 802c3d6:	d119      	bne.n	802c40c <__ssvfscanf_r+0x1248>
 802c3d8:	693b      	ldr	r3, [r7, #16]
 802c3da:	4553      	cmp	r3, sl
 802c3dc:	eba3 020a 	sub.w	r2, r3, sl
 802c3e0:	d121      	bne.n	802c426 <__ssvfscanf_r+0x1262>
 802c3e2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802c3e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c3e8:	2200      	movs	r2, #0
 802c3ea:	f001 fd41 	bl	802de70 <_strtod_r>
 802c3ee:	07f1      	lsls	r1, r6, #31
 802c3f0:	ec59 8b10 	vmov	r8, r9, d0
 802c3f4:	f105 0a04 	add.w	sl, r5, #4
 802c3f8:	d520      	bpl.n	802c43c <__ssvfscanf_r+0x1278>
 802c3fa:	682b      	ldr	r3, [r5, #0]
 802c3fc:	ed83 0b00 	vstr	d0, [r3]
 802c400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c402:	3301      	adds	r3, #1
 802c404:	627b      	str	r3, [r7, #36]	@ 0x24
 802c406:	4655      	mov	r5, sl
 802c408:	f7fe bef7 	b.w	802b1fa <__ssvfscanf_r+0x36>
 802c40c:	68fb      	ldr	r3, [r7, #12]
 802c40e:	2b00      	cmp	r3, #0
 802c410:	d0e7      	beq.n	802c3e2 <__ssvfscanf_r+0x121e>
 802c412:	68b9      	ldr	r1, [r7, #8]
 802c414:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c416:	230a      	movs	r3, #10
 802c418:	3101      	adds	r1, #1
 802c41a:	f7f8 fe9d 	bl	8025158 <_strtol_r>
 802c41e:	68fb      	ldr	r3, [r7, #12]
 802c420:	f8d7 9008 	ldr.w	r9, [r7, #8]
 802c424:	1ac2      	subs	r2, r0, r3
 802c426:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 802c42a:	4599      	cmp	r9, r3
 802c42c:	bf28      	it	cs
 802c42e:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 802c432:	491b      	ldr	r1, [pc, #108]	@ (802c4a0 <__ssvfscanf_r+0x12dc>)
 802c434:	4648      	mov	r0, r9
 802c436:	f7f8 ff49 	bl	80252cc <sprintf>
 802c43a:	e7d2      	b.n	802c3e2 <__ssvfscanf_r+0x121e>
 802c43c:	07b2      	lsls	r2, r6, #30
 802c43e:	682d      	ldr	r5, [r5, #0]
 802c440:	d502      	bpl.n	802c448 <__ssvfscanf_r+0x1284>
 802c442:	ed85 0b00 	vstr	d0, [r5]
 802c446:	e7db      	b.n	802c400 <__ssvfscanf_r+0x123c>
 802c448:	4642      	mov	r2, r8
 802c44a:	464b      	mov	r3, r9
 802c44c:	4640      	mov	r0, r8
 802c44e:	4649      	mov	r1, r9
 802c450:	f7d4 fb84 	bl	8000b5c <__aeabi_dcmpun>
 802c454:	b128      	cbz	r0, 802c462 <__ssvfscanf_r+0x129e>
 802c456:	4813      	ldr	r0, [pc, #76]	@ (802c4a4 <__ssvfscanf_r+0x12e0>)
 802c458:	f002 f8f6 	bl	802e648 <nanf>
 802c45c:	ed85 0a00 	vstr	s0, [r5]
 802c460:	e7ce      	b.n	802c400 <__ssvfscanf_r+0x123c>
 802c462:	4640      	mov	r0, r8
 802c464:	4649      	mov	r1, r9
 802c466:	f7d4 fbd7 	bl	8000c18 <__aeabi_d2f>
 802c46a:	6028      	str	r0, [r5, #0]
 802c46c:	e7c8      	b.n	802c400 <__ssvfscanf_r+0x123c>
 802c46e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802c472:	6818      	ldr	r0, [r3, #0]
 802c474:	f7fb fd3a 	bl	8027eec <free>
 802c478:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802c47c:	3401      	adds	r4, #1
 802c47e:	601e      	str	r6, [r3, #0]
 802c480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802c482:	681d      	ldr	r5, [r3, #0]
 802c484:	88db      	ldrh	r3, [r3, #6]
 802c486:	42a3      	cmp	r3, r4
 802c488:	dcf1      	bgt.n	802c46e <__ssvfscanf_r+0x12aa>
 802c48a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802c48e:	627b      	str	r3, [r7, #36]	@ 0x24
 802c490:	f7ff b85c 	b.w	802b54c <__ssvfscanf_r+0x388>
 802c494:	2400      	movs	r4, #0
 802c496:	4626      	mov	r6, r4
 802c498:	e7f2      	b.n	802c480 <__ssvfscanf_r+0x12bc>
 802c49a:	f04f 0a00 	mov.w	sl, #0
 802c49e:	e6bb      	b.n	802c218 <__ssvfscanf_r+0x1054>
 802c4a0:	080345de 	.word	0x080345de
 802c4a4:	08034047 	.word	0x08034047

0802c4a8 <_putc_r>:
 802c4a8:	b570      	push	{r4, r5, r6, lr}
 802c4aa:	460d      	mov	r5, r1
 802c4ac:	4614      	mov	r4, r2
 802c4ae:	4606      	mov	r6, r0
 802c4b0:	b118      	cbz	r0, 802c4ba <_putc_r+0x12>
 802c4b2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c4b4:	b90b      	cbnz	r3, 802c4ba <_putc_r+0x12>
 802c4b6:	f7f9 f825 	bl	8025504 <__sinit>
 802c4ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c4bc:	07d8      	lsls	r0, r3, #31
 802c4be:	d405      	bmi.n	802c4cc <_putc_r+0x24>
 802c4c0:	89a3      	ldrh	r3, [r4, #12]
 802c4c2:	0599      	lsls	r1, r3, #22
 802c4c4:	d402      	bmi.n	802c4cc <_putc_r+0x24>
 802c4c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c4c8:	f7fa fcfb 	bl	8026ec2 <__retarget_lock_acquire_recursive>
 802c4cc:	68a3      	ldr	r3, [r4, #8]
 802c4ce:	3b01      	subs	r3, #1
 802c4d0:	2b00      	cmp	r3, #0
 802c4d2:	60a3      	str	r3, [r4, #8]
 802c4d4:	da05      	bge.n	802c4e2 <_putc_r+0x3a>
 802c4d6:	69a2      	ldr	r2, [r4, #24]
 802c4d8:	4293      	cmp	r3, r2
 802c4da:	db12      	blt.n	802c502 <_putc_r+0x5a>
 802c4dc:	b2eb      	uxtb	r3, r5
 802c4de:	2b0a      	cmp	r3, #10
 802c4e0:	d00f      	beq.n	802c502 <_putc_r+0x5a>
 802c4e2:	6823      	ldr	r3, [r4, #0]
 802c4e4:	1c5a      	adds	r2, r3, #1
 802c4e6:	6022      	str	r2, [r4, #0]
 802c4e8:	701d      	strb	r5, [r3, #0]
 802c4ea:	b2ed      	uxtb	r5, r5
 802c4ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c4ee:	07da      	lsls	r2, r3, #31
 802c4f0:	d405      	bmi.n	802c4fe <_putc_r+0x56>
 802c4f2:	89a3      	ldrh	r3, [r4, #12]
 802c4f4:	059b      	lsls	r3, r3, #22
 802c4f6:	d402      	bmi.n	802c4fe <_putc_r+0x56>
 802c4f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c4fa:	f7fa fce4 	bl	8026ec6 <__retarget_lock_release_recursive>
 802c4fe:	4628      	mov	r0, r5
 802c500:	bd70      	pop	{r4, r5, r6, pc}
 802c502:	4629      	mov	r1, r5
 802c504:	4622      	mov	r2, r4
 802c506:	4630      	mov	r0, r6
 802c508:	f001 fd79 	bl	802dffe <__swbuf_r>
 802c50c:	4605      	mov	r5, r0
 802c50e:	e7ed      	b.n	802c4ec <_putc_r+0x44>

0802c510 <__malloc_lock>:
 802c510:	4801      	ldr	r0, [pc, #4]	@ (802c518 <__malloc_lock+0x8>)
 802c512:	f7fa bcd6 	b.w	8026ec2 <__retarget_lock_acquire_recursive>
 802c516:	bf00      	nop
 802c518:	200182c6 	.word	0x200182c6

0802c51c <__malloc_unlock>:
 802c51c:	4801      	ldr	r0, [pc, #4]	@ (802c524 <__malloc_unlock+0x8>)
 802c51e:	f7fa bcd2 	b.w	8026ec6 <__retarget_lock_release_recursive>
 802c522:	bf00      	nop
 802c524:	200182c6 	.word	0x200182c6

0802c528 <_Balloc>:
 802c528:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802c52a:	b570      	push	{r4, r5, r6, lr}
 802c52c:	4605      	mov	r5, r0
 802c52e:	460c      	mov	r4, r1
 802c530:	b17b      	cbz	r3, 802c552 <_Balloc+0x2a>
 802c532:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 802c534:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802c538:	b9a0      	cbnz	r0, 802c564 <_Balloc+0x3c>
 802c53a:	2101      	movs	r1, #1
 802c53c:	fa01 f604 	lsl.w	r6, r1, r4
 802c540:	1d72      	adds	r2, r6, #5
 802c542:	0092      	lsls	r2, r2, #2
 802c544:	4628      	mov	r0, r5
 802c546:	f002 f885 	bl	802e654 <_calloc_r>
 802c54a:	b148      	cbz	r0, 802c560 <_Balloc+0x38>
 802c54c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 802c550:	e00b      	b.n	802c56a <_Balloc+0x42>
 802c552:	2221      	movs	r2, #33	@ 0x21
 802c554:	2104      	movs	r1, #4
 802c556:	f002 f87d 	bl	802e654 <_calloc_r>
 802c55a:	6468      	str	r0, [r5, #68]	@ 0x44
 802c55c:	2800      	cmp	r0, #0
 802c55e:	d1e8      	bne.n	802c532 <_Balloc+0xa>
 802c560:	2000      	movs	r0, #0
 802c562:	bd70      	pop	{r4, r5, r6, pc}
 802c564:	6802      	ldr	r2, [r0, #0]
 802c566:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 802c56a:	2300      	movs	r3, #0
 802c56c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c570:	e7f7      	b.n	802c562 <_Balloc+0x3a>

0802c572 <_Bfree>:
 802c572:	b131      	cbz	r1, 802c582 <_Bfree+0x10>
 802c574:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802c576:	684a      	ldr	r2, [r1, #4]
 802c578:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802c57c:	6008      	str	r0, [r1, #0]
 802c57e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802c582:	4770      	bx	lr

0802c584 <__multadd>:
 802c584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c588:	690d      	ldr	r5, [r1, #16]
 802c58a:	4607      	mov	r7, r0
 802c58c:	460c      	mov	r4, r1
 802c58e:	461e      	mov	r6, r3
 802c590:	f101 0c14 	add.w	ip, r1, #20
 802c594:	2000      	movs	r0, #0
 802c596:	f8dc 3000 	ldr.w	r3, [ip]
 802c59a:	b299      	uxth	r1, r3
 802c59c:	fb02 6101 	mla	r1, r2, r1, r6
 802c5a0:	0c1e      	lsrs	r6, r3, #16
 802c5a2:	0c0b      	lsrs	r3, r1, #16
 802c5a4:	fb02 3306 	mla	r3, r2, r6, r3
 802c5a8:	b289      	uxth	r1, r1
 802c5aa:	3001      	adds	r0, #1
 802c5ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c5b0:	4285      	cmp	r5, r0
 802c5b2:	f84c 1b04 	str.w	r1, [ip], #4
 802c5b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802c5ba:	dcec      	bgt.n	802c596 <__multadd+0x12>
 802c5bc:	b30e      	cbz	r6, 802c602 <__multadd+0x7e>
 802c5be:	68a3      	ldr	r3, [r4, #8]
 802c5c0:	42ab      	cmp	r3, r5
 802c5c2:	dc19      	bgt.n	802c5f8 <__multadd+0x74>
 802c5c4:	6861      	ldr	r1, [r4, #4]
 802c5c6:	4638      	mov	r0, r7
 802c5c8:	3101      	adds	r1, #1
 802c5ca:	f7ff ffad 	bl	802c528 <_Balloc>
 802c5ce:	4680      	mov	r8, r0
 802c5d0:	b928      	cbnz	r0, 802c5de <__multadd+0x5a>
 802c5d2:	4602      	mov	r2, r0
 802c5d4:	4b0c      	ldr	r3, [pc, #48]	@ (802c608 <__multadd+0x84>)
 802c5d6:	480d      	ldr	r0, [pc, #52]	@ (802c60c <__multadd+0x88>)
 802c5d8:	21ba      	movs	r1, #186	@ 0xba
 802c5da:	f7f6 fce5 	bl	8022fa8 <__assert_func>
 802c5de:	6922      	ldr	r2, [r4, #16]
 802c5e0:	3202      	adds	r2, #2
 802c5e2:	f104 010c 	add.w	r1, r4, #12
 802c5e6:	0092      	lsls	r2, r2, #2
 802c5e8:	300c      	adds	r0, #12
 802c5ea:	f7fa fc6d 	bl	8026ec8 <memcpy>
 802c5ee:	4621      	mov	r1, r4
 802c5f0:	4638      	mov	r0, r7
 802c5f2:	f7ff ffbe 	bl	802c572 <_Bfree>
 802c5f6:	4644      	mov	r4, r8
 802c5f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802c5fc:	3501      	adds	r5, #1
 802c5fe:	615e      	str	r6, [r3, #20]
 802c600:	6125      	str	r5, [r4, #16]
 802c602:	4620      	mov	r0, r4
 802c604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c608:	08034512 	.word	0x08034512
 802c60c:	08034606 	.word	0x08034606

0802c610 <__s2b>:
 802c610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c614:	460c      	mov	r4, r1
 802c616:	4615      	mov	r5, r2
 802c618:	461f      	mov	r7, r3
 802c61a:	2209      	movs	r2, #9
 802c61c:	3308      	adds	r3, #8
 802c61e:	4606      	mov	r6, r0
 802c620:	fb93 f3f2 	sdiv	r3, r3, r2
 802c624:	2100      	movs	r1, #0
 802c626:	2201      	movs	r2, #1
 802c628:	429a      	cmp	r2, r3
 802c62a:	db09      	blt.n	802c640 <__s2b+0x30>
 802c62c:	4630      	mov	r0, r6
 802c62e:	f7ff ff7b 	bl	802c528 <_Balloc>
 802c632:	b940      	cbnz	r0, 802c646 <__s2b+0x36>
 802c634:	4602      	mov	r2, r0
 802c636:	4b19      	ldr	r3, [pc, #100]	@ (802c69c <__s2b+0x8c>)
 802c638:	4819      	ldr	r0, [pc, #100]	@ (802c6a0 <__s2b+0x90>)
 802c63a:	21d3      	movs	r1, #211	@ 0xd3
 802c63c:	f7f6 fcb4 	bl	8022fa8 <__assert_func>
 802c640:	0052      	lsls	r2, r2, #1
 802c642:	3101      	adds	r1, #1
 802c644:	e7f0      	b.n	802c628 <__s2b+0x18>
 802c646:	9b08      	ldr	r3, [sp, #32]
 802c648:	6143      	str	r3, [r0, #20]
 802c64a:	2d09      	cmp	r5, #9
 802c64c:	f04f 0301 	mov.w	r3, #1
 802c650:	6103      	str	r3, [r0, #16]
 802c652:	dd16      	ble.n	802c682 <__s2b+0x72>
 802c654:	f104 0909 	add.w	r9, r4, #9
 802c658:	46c8      	mov	r8, r9
 802c65a:	442c      	add	r4, r5
 802c65c:	f818 3b01 	ldrb.w	r3, [r8], #1
 802c660:	4601      	mov	r1, r0
 802c662:	3b30      	subs	r3, #48	@ 0x30
 802c664:	220a      	movs	r2, #10
 802c666:	4630      	mov	r0, r6
 802c668:	f7ff ff8c 	bl	802c584 <__multadd>
 802c66c:	45a0      	cmp	r8, r4
 802c66e:	d1f5      	bne.n	802c65c <__s2b+0x4c>
 802c670:	f1a5 0408 	sub.w	r4, r5, #8
 802c674:	444c      	add	r4, r9
 802c676:	1b2d      	subs	r5, r5, r4
 802c678:	1963      	adds	r3, r4, r5
 802c67a:	42bb      	cmp	r3, r7
 802c67c:	db04      	blt.n	802c688 <__s2b+0x78>
 802c67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c682:	340a      	adds	r4, #10
 802c684:	2509      	movs	r5, #9
 802c686:	e7f6      	b.n	802c676 <__s2b+0x66>
 802c688:	f814 3b01 	ldrb.w	r3, [r4], #1
 802c68c:	4601      	mov	r1, r0
 802c68e:	3b30      	subs	r3, #48	@ 0x30
 802c690:	220a      	movs	r2, #10
 802c692:	4630      	mov	r0, r6
 802c694:	f7ff ff76 	bl	802c584 <__multadd>
 802c698:	e7ee      	b.n	802c678 <__s2b+0x68>
 802c69a:	bf00      	nop
 802c69c:	08034512 	.word	0x08034512
 802c6a0:	08034606 	.word	0x08034606

0802c6a4 <__hi0bits>:
 802c6a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802c6a8:	4603      	mov	r3, r0
 802c6aa:	bf36      	itet	cc
 802c6ac:	0403      	lslcc	r3, r0, #16
 802c6ae:	2000      	movcs	r0, #0
 802c6b0:	2010      	movcc	r0, #16
 802c6b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802c6b6:	bf3c      	itt	cc
 802c6b8:	021b      	lslcc	r3, r3, #8
 802c6ba:	3008      	addcc	r0, #8
 802c6bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802c6c0:	bf3c      	itt	cc
 802c6c2:	011b      	lslcc	r3, r3, #4
 802c6c4:	3004      	addcc	r0, #4
 802c6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802c6ca:	bf3c      	itt	cc
 802c6cc:	009b      	lslcc	r3, r3, #2
 802c6ce:	3002      	addcc	r0, #2
 802c6d0:	2b00      	cmp	r3, #0
 802c6d2:	db05      	blt.n	802c6e0 <__hi0bits+0x3c>
 802c6d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802c6d8:	f100 0001 	add.w	r0, r0, #1
 802c6dc:	bf08      	it	eq
 802c6de:	2020      	moveq	r0, #32
 802c6e0:	4770      	bx	lr

0802c6e2 <__lo0bits>:
 802c6e2:	6803      	ldr	r3, [r0, #0]
 802c6e4:	4602      	mov	r2, r0
 802c6e6:	f013 0007 	ands.w	r0, r3, #7
 802c6ea:	d00b      	beq.n	802c704 <__lo0bits+0x22>
 802c6ec:	07d9      	lsls	r1, r3, #31
 802c6ee:	d421      	bmi.n	802c734 <__lo0bits+0x52>
 802c6f0:	0798      	lsls	r0, r3, #30
 802c6f2:	bf49      	itett	mi
 802c6f4:	085b      	lsrmi	r3, r3, #1
 802c6f6:	089b      	lsrpl	r3, r3, #2
 802c6f8:	2001      	movmi	r0, #1
 802c6fa:	6013      	strmi	r3, [r2, #0]
 802c6fc:	bf5c      	itt	pl
 802c6fe:	6013      	strpl	r3, [r2, #0]
 802c700:	2002      	movpl	r0, #2
 802c702:	4770      	bx	lr
 802c704:	b299      	uxth	r1, r3
 802c706:	b909      	cbnz	r1, 802c70c <__lo0bits+0x2a>
 802c708:	0c1b      	lsrs	r3, r3, #16
 802c70a:	2010      	movs	r0, #16
 802c70c:	b2d9      	uxtb	r1, r3
 802c70e:	b909      	cbnz	r1, 802c714 <__lo0bits+0x32>
 802c710:	3008      	adds	r0, #8
 802c712:	0a1b      	lsrs	r3, r3, #8
 802c714:	0719      	lsls	r1, r3, #28
 802c716:	bf04      	itt	eq
 802c718:	091b      	lsreq	r3, r3, #4
 802c71a:	3004      	addeq	r0, #4
 802c71c:	0799      	lsls	r1, r3, #30
 802c71e:	bf04      	itt	eq
 802c720:	089b      	lsreq	r3, r3, #2
 802c722:	3002      	addeq	r0, #2
 802c724:	07d9      	lsls	r1, r3, #31
 802c726:	d403      	bmi.n	802c730 <__lo0bits+0x4e>
 802c728:	085b      	lsrs	r3, r3, #1
 802c72a:	f100 0001 	add.w	r0, r0, #1
 802c72e:	d003      	beq.n	802c738 <__lo0bits+0x56>
 802c730:	6013      	str	r3, [r2, #0]
 802c732:	4770      	bx	lr
 802c734:	2000      	movs	r0, #0
 802c736:	4770      	bx	lr
 802c738:	2020      	movs	r0, #32
 802c73a:	4770      	bx	lr

0802c73c <__i2b>:
 802c73c:	b510      	push	{r4, lr}
 802c73e:	460c      	mov	r4, r1
 802c740:	2101      	movs	r1, #1
 802c742:	f7ff fef1 	bl	802c528 <_Balloc>
 802c746:	4602      	mov	r2, r0
 802c748:	b928      	cbnz	r0, 802c756 <__i2b+0x1a>
 802c74a:	4b05      	ldr	r3, [pc, #20]	@ (802c760 <__i2b+0x24>)
 802c74c:	4805      	ldr	r0, [pc, #20]	@ (802c764 <__i2b+0x28>)
 802c74e:	f240 1145 	movw	r1, #325	@ 0x145
 802c752:	f7f6 fc29 	bl	8022fa8 <__assert_func>
 802c756:	2301      	movs	r3, #1
 802c758:	6144      	str	r4, [r0, #20]
 802c75a:	6103      	str	r3, [r0, #16]
 802c75c:	bd10      	pop	{r4, pc}
 802c75e:	bf00      	nop
 802c760:	08034512 	.word	0x08034512
 802c764:	08034606 	.word	0x08034606

0802c768 <__multiply>:
 802c768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c76c:	4614      	mov	r4, r2
 802c76e:	690a      	ldr	r2, [r1, #16]
 802c770:	6923      	ldr	r3, [r4, #16]
 802c772:	429a      	cmp	r2, r3
 802c774:	bfa8      	it	ge
 802c776:	4623      	movge	r3, r4
 802c778:	460f      	mov	r7, r1
 802c77a:	bfa4      	itt	ge
 802c77c:	460c      	movge	r4, r1
 802c77e:	461f      	movge	r7, r3
 802c780:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802c784:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802c788:	68a3      	ldr	r3, [r4, #8]
 802c78a:	6861      	ldr	r1, [r4, #4]
 802c78c:	eb0a 0609 	add.w	r6, sl, r9
 802c790:	42b3      	cmp	r3, r6
 802c792:	b085      	sub	sp, #20
 802c794:	bfb8      	it	lt
 802c796:	3101      	addlt	r1, #1
 802c798:	f7ff fec6 	bl	802c528 <_Balloc>
 802c79c:	b930      	cbnz	r0, 802c7ac <__multiply+0x44>
 802c79e:	4602      	mov	r2, r0
 802c7a0:	4b44      	ldr	r3, [pc, #272]	@ (802c8b4 <__multiply+0x14c>)
 802c7a2:	4845      	ldr	r0, [pc, #276]	@ (802c8b8 <__multiply+0x150>)
 802c7a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802c7a8:	f7f6 fbfe 	bl	8022fa8 <__assert_func>
 802c7ac:	f100 0514 	add.w	r5, r0, #20
 802c7b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802c7b4:	462b      	mov	r3, r5
 802c7b6:	2200      	movs	r2, #0
 802c7b8:	4543      	cmp	r3, r8
 802c7ba:	d321      	bcc.n	802c800 <__multiply+0x98>
 802c7bc:	f107 0114 	add.w	r1, r7, #20
 802c7c0:	f104 0214 	add.w	r2, r4, #20
 802c7c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802c7c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802c7cc:	9302      	str	r3, [sp, #8]
 802c7ce:	1b13      	subs	r3, r2, r4
 802c7d0:	3b15      	subs	r3, #21
 802c7d2:	f023 0303 	bic.w	r3, r3, #3
 802c7d6:	3304      	adds	r3, #4
 802c7d8:	f104 0715 	add.w	r7, r4, #21
 802c7dc:	42ba      	cmp	r2, r7
 802c7de:	bf38      	it	cc
 802c7e0:	2304      	movcc	r3, #4
 802c7e2:	9301      	str	r3, [sp, #4]
 802c7e4:	9b02      	ldr	r3, [sp, #8]
 802c7e6:	9103      	str	r1, [sp, #12]
 802c7e8:	428b      	cmp	r3, r1
 802c7ea:	d80c      	bhi.n	802c806 <__multiply+0x9e>
 802c7ec:	2e00      	cmp	r6, #0
 802c7ee:	dd03      	ble.n	802c7f8 <__multiply+0x90>
 802c7f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802c7f4:	2b00      	cmp	r3, #0
 802c7f6:	d05b      	beq.n	802c8b0 <__multiply+0x148>
 802c7f8:	6106      	str	r6, [r0, #16]
 802c7fa:	b005      	add	sp, #20
 802c7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c800:	f843 2b04 	str.w	r2, [r3], #4
 802c804:	e7d8      	b.n	802c7b8 <__multiply+0x50>
 802c806:	f8b1 a000 	ldrh.w	sl, [r1]
 802c80a:	f1ba 0f00 	cmp.w	sl, #0
 802c80e:	d024      	beq.n	802c85a <__multiply+0xf2>
 802c810:	f104 0e14 	add.w	lr, r4, #20
 802c814:	46a9      	mov	r9, r5
 802c816:	f04f 0c00 	mov.w	ip, #0
 802c81a:	f85e 7b04 	ldr.w	r7, [lr], #4
 802c81e:	f8d9 3000 	ldr.w	r3, [r9]
 802c822:	fa1f fb87 	uxth.w	fp, r7
 802c826:	b29b      	uxth	r3, r3
 802c828:	fb0a 330b 	mla	r3, sl, fp, r3
 802c82c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802c830:	f8d9 7000 	ldr.w	r7, [r9]
 802c834:	4463      	add	r3, ip
 802c836:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802c83a:	fb0a c70b 	mla	r7, sl, fp, ip
 802c83e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802c842:	b29b      	uxth	r3, r3
 802c844:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802c848:	4572      	cmp	r2, lr
 802c84a:	f849 3b04 	str.w	r3, [r9], #4
 802c84e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802c852:	d8e2      	bhi.n	802c81a <__multiply+0xb2>
 802c854:	9b01      	ldr	r3, [sp, #4]
 802c856:	f845 c003 	str.w	ip, [r5, r3]
 802c85a:	9b03      	ldr	r3, [sp, #12]
 802c85c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802c860:	3104      	adds	r1, #4
 802c862:	f1b9 0f00 	cmp.w	r9, #0
 802c866:	d021      	beq.n	802c8ac <__multiply+0x144>
 802c868:	682b      	ldr	r3, [r5, #0]
 802c86a:	f104 0c14 	add.w	ip, r4, #20
 802c86e:	46ae      	mov	lr, r5
 802c870:	f04f 0a00 	mov.w	sl, #0
 802c874:	f8bc b000 	ldrh.w	fp, [ip]
 802c878:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802c87c:	fb09 770b 	mla	r7, r9, fp, r7
 802c880:	4457      	add	r7, sl
 802c882:	b29b      	uxth	r3, r3
 802c884:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802c888:	f84e 3b04 	str.w	r3, [lr], #4
 802c88c:	f85c 3b04 	ldr.w	r3, [ip], #4
 802c890:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802c894:	f8be 3000 	ldrh.w	r3, [lr]
 802c898:	fb09 330a 	mla	r3, r9, sl, r3
 802c89c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802c8a0:	4562      	cmp	r2, ip
 802c8a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802c8a6:	d8e5      	bhi.n	802c874 <__multiply+0x10c>
 802c8a8:	9f01      	ldr	r7, [sp, #4]
 802c8aa:	51eb      	str	r3, [r5, r7]
 802c8ac:	3504      	adds	r5, #4
 802c8ae:	e799      	b.n	802c7e4 <__multiply+0x7c>
 802c8b0:	3e01      	subs	r6, #1
 802c8b2:	e79b      	b.n	802c7ec <__multiply+0x84>
 802c8b4:	08034512 	.word	0x08034512
 802c8b8:	08034606 	.word	0x08034606

0802c8bc <__pow5mult>:
 802c8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c8c0:	4615      	mov	r5, r2
 802c8c2:	f012 0203 	ands.w	r2, r2, #3
 802c8c6:	4607      	mov	r7, r0
 802c8c8:	460e      	mov	r6, r1
 802c8ca:	d007      	beq.n	802c8dc <__pow5mult+0x20>
 802c8cc:	4c1a      	ldr	r4, [pc, #104]	@ (802c938 <__pow5mult+0x7c>)
 802c8ce:	3a01      	subs	r2, #1
 802c8d0:	2300      	movs	r3, #0
 802c8d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802c8d6:	f7ff fe55 	bl	802c584 <__multadd>
 802c8da:	4606      	mov	r6, r0
 802c8dc:	10ad      	asrs	r5, r5, #2
 802c8de:	d027      	beq.n	802c930 <__pow5mult+0x74>
 802c8e0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 802c8e2:	b944      	cbnz	r4, 802c8f6 <__pow5mult+0x3a>
 802c8e4:	f240 2171 	movw	r1, #625	@ 0x271
 802c8e8:	4638      	mov	r0, r7
 802c8ea:	f7ff ff27 	bl	802c73c <__i2b>
 802c8ee:	2300      	movs	r3, #0
 802c8f0:	6438      	str	r0, [r7, #64]	@ 0x40
 802c8f2:	4604      	mov	r4, r0
 802c8f4:	6003      	str	r3, [r0, #0]
 802c8f6:	f04f 0900 	mov.w	r9, #0
 802c8fa:	07eb      	lsls	r3, r5, #31
 802c8fc:	d50a      	bpl.n	802c914 <__pow5mult+0x58>
 802c8fe:	4631      	mov	r1, r6
 802c900:	4622      	mov	r2, r4
 802c902:	4638      	mov	r0, r7
 802c904:	f7ff ff30 	bl	802c768 <__multiply>
 802c908:	4631      	mov	r1, r6
 802c90a:	4680      	mov	r8, r0
 802c90c:	4638      	mov	r0, r7
 802c90e:	f7ff fe30 	bl	802c572 <_Bfree>
 802c912:	4646      	mov	r6, r8
 802c914:	106d      	asrs	r5, r5, #1
 802c916:	d00b      	beq.n	802c930 <__pow5mult+0x74>
 802c918:	6820      	ldr	r0, [r4, #0]
 802c91a:	b938      	cbnz	r0, 802c92c <__pow5mult+0x70>
 802c91c:	4622      	mov	r2, r4
 802c91e:	4621      	mov	r1, r4
 802c920:	4638      	mov	r0, r7
 802c922:	f7ff ff21 	bl	802c768 <__multiply>
 802c926:	6020      	str	r0, [r4, #0]
 802c928:	f8c0 9000 	str.w	r9, [r0]
 802c92c:	4604      	mov	r4, r0
 802c92e:	e7e4      	b.n	802c8fa <__pow5mult+0x3e>
 802c930:	4630      	mov	r0, r6
 802c932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c936:	bf00      	nop
 802c938:	08034660 	.word	0x08034660

0802c93c <__lshift>:
 802c93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c940:	460c      	mov	r4, r1
 802c942:	6849      	ldr	r1, [r1, #4]
 802c944:	6923      	ldr	r3, [r4, #16]
 802c946:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802c94a:	68a3      	ldr	r3, [r4, #8]
 802c94c:	4607      	mov	r7, r0
 802c94e:	4691      	mov	r9, r2
 802c950:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802c954:	f108 0601 	add.w	r6, r8, #1
 802c958:	42b3      	cmp	r3, r6
 802c95a:	db0b      	blt.n	802c974 <__lshift+0x38>
 802c95c:	4638      	mov	r0, r7
 802c95e:	f7ff fde3 	bl	802c528 <_Balloc>
 802c962:	4605      	mov	r5, r0
 802c964:	b948      	cbnz	r0, 802c97a <__lshift+0x3e>
 802c966:	4602      	mov	r2, r0
 802c968:	4b28      	ldr	r3, [pc, #160]	@ (802ca0c <__lshift+0xd0>)
 802c96a:	4829      	ldr	r0, [pc, #164]	@ (802ca10 <__lshift+0xd4>)
 802c96c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802c970:	f7f6 fb1a 	bl	8022fa8 <__assert_func>
 802c974:	3101      	adds	r1, #1
 802c976:	005b      	lsls	r3, r3, #1
 802c978:	e7ee      	b.n	802c958 <__lshift+0x1c>
 802c97a:	2300      	movs	r3, #0
 802c97c:	f100 0114 	add.w	r1, r0, #20
 802c980:	f100 0210 	add.w	r2, r0, #16
 802c984:	4618      	mov	r0, r3
 802c986:	4553      	cmp	r3, sl
 802c988:	db33      	blt.n	802c9f2 <__lshift+0xb6>
 802c98a:	6920      	ldr	r0, [r4, #16]
 802c98c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802c990:	f104 0314 	add.w	r3, r4, #20
 802c994:	f019 091f 	ands.w	r9, r9, #31
 802c998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802c99c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802c9a0:	d02b      	beq.n	802c9fa <__lshift+0xbe>
 802c9a2:	f1c9 0e20 	rsb	lr, r9, #32
 802c9a6:	468a      	mov	sl, r1
 802c9a8:	2200      	movs	r2, #0
 802c9aa:	6818      	ldr	r0, [r3, #0]
 802c9ac:	fa00 f009 	lsl.w	r0, r0, r9
 802c9b0:	4310      	orrs	r0, r2
 802c9b2:	f84a 0b04 	str.w	r0, [sl], #4
 802c9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 802c9ba:	459c      	cmp	ip, r3
 802c9bc:	fa22 f20e 	lsr.w	r2, r2, lr
 802c9c0:	d8f3      	bhi.n	802c9aa <__lshift+0x6e>
 802c9c2:	ebac 0304 	sub.w	r3, ip, r4
 802c9c6:	3b15      	subs	r3, #21
 802c9c8:	f023 0303 	bic.w	r3, r3, #3
 802c9cc:	3304      	adds	r3, #4
 802c9ce:	f104 0015 	add.w	r0, r4, #21
 802c9d2:	4584      	cmp	ip, r0
 802c9d4:	bf38      	it	cc
 802c9d6:	2304      	movcc	r3, #4
 802c9d8:	50ca      	str	r2, [r1, r3]
 802c9da:	b10a      	cbz	r2, 802c9e0 <__lshift+0xa4>
 802c9dc:	f108 0602 	add.w	r6, r8, #2
 802c9e0:	3e01      	subs	r6, #1
 802c9e2:	4638      	mov	r0, r7
 802c9e4:	612e      	str	r6, [r5, #16]
 802c9e6:	4621      	mov	r1, r4
 802c9e8:	f7ff fdc3 	bl	802c572 <_Bfree>
 802c9ec:	4628      	mov	r0, r5
 802c9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c9f2:	f842 0f04 	str.w	r0, [r2, #4]!
 802c9f6:	3301      	adds	r3, #1
 802c9f8:	e7c5      	b.n	802c986 <__lshift+0x4a>
 802c9fa:	3904      	subs	r1, #4
 802c9fc:	f853 2b04 	ldr.w	r2, [r3], #4
 802ca00:	f841 2f04 	str.w	r2, [r1, #4]!
 802ca04:	459c      	cmp	ip, r3
 802ca06:	d8f9      	bhi.n	802c9fc <__lshift+0xc0>
 802ca08:	e7ea      	b.n	802c9e0 <__lshift+0xa4>
 802ca0a:	bf00      	nop
 802ca0c:	08034512 	.word	0x08034512
 802ca10:	08034606 	.word	0x08034606

0802ca14 <__mcmp>:
 802ca14:	690a      	ldr	r2, [r1, #16]
 802ca16:	4603      	mov	r3, r0
 802ca18:	6900      	ldr	r0, [r0, #16]
 802ca1a:	1a80      	subs	r0, r0, r2
 802ca1c:	b530      	push	{r4, r5, lr}
 802ca1e:	d10e      	bne.n	802ca3e <__mcmp+0x2a>
 802ca20:	3314      	adds	r3, #20
 802ca22:	3114      	adds	r1, #20
 802ca24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802ca28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802ca2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802ca30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802ca34:	4295      	cmp	r5, r2
 802ca36:	d003      	beq.n	802ca40 <__mcmp+0x2c>
 802ca38:	d205      	bcs.n	802ca46 <__mcmp+0x32>
 802ca3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802ca3e:	bd30      	pop	{r4, r5, pc}
 802ca40:	42a3      	cmp	r3, r4
 802ca42:	d3f3      	bcc.n	802ca2c <__mcmp+0x18>
 802ca44:	e7fb      	b.n	802ca3e <__mcmp+0x2a>
 802ca46:	2001      	movs	r0, #1
 802ca48:	e7f9      	b.n	802ca3e <__mcmp+0x2a>
	...

0802ca4c <__mdiff>:
 802ca4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ca50:	4689      	mov	r9, r1
 802ca52:	4606      	mov	r6, r0
 802ca54:	4611      	mov	r1, r2
 802ca56:	4648      	mov	r0, r9
 802ca58:	4614      	mov	r4, r2
 802ca5a:	f7ff ffdb 	bl	802ca14 <__mcmp>
 802ca5e:	1e05      	subs	r5, r0, #0
 802ca60:	d112      	bne.n	802ca88 <__mdiff+0x3c>
 802ca62:	4629      	mov	r1, r5
 802ca64:	4630      	mov	r0, r6
 802ca66:	f7ff fd5f 	bl	802c528 <_Balloc>
 802ca6a:	4602      	mov	r2, r0
 802ca6c:	b928      	cbnz	r0, 802ca7a <__mdiff+0x2e>
 802ca6e:	4b3f      	ldr	r3, [pc, #252]	@ (802cb6c <__mdiff+0x120>)
 802ca70:	f240 2137 	movw	r1, #567	@ 0x237
 802ca74:	483e      	ldr	r0, [pc, #248]	@ (802cb70 <__mdiff+0x124>)
 802ca76:	f7f6 fa97 	bl	8022fa8 <__assert_func>
 802ca7a:	2301      	movs	r3, #1
 802ca7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802ca80:	4610      	mov	r0, r2
 802ca82:	b003      	add	sp, #12
 802ca84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ca88:	bfbc      	itt	lt
 802ca8a:	464b      	movlt	r3, r9
 802ca8c:	46a1      	movlt	r9, r4
 802ca8e:	4630      	mov	r0, r6
 802ca90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802ca94:	bfba      	itte	lt
 802ca96:	461c      	movlt	r4, r3
 802ca98:	2501      	movlt	r5, #1
 802ca9a:	2500      	movge	r5, #0
 802ca9c:	f7ff fd44 	bl	802c528 <_Balloc>
 802caa0:	4602      	mov	r2, r0
 802caa2:	b918      	cbnz	r0, 802caac <__mdiff+0x60>
 802caa4:	4b31      	ldr	r3, [pc, #196]	@ (802cb6c <__mdiff+0x120>)
 802caa6:	f240 2145 	movw	r1, #581	@ 0x245
 802caaa:	e7e3      	b.n	802ca74 <__mdiff+0x28>
 802caac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802cab0:	6926      	ldr	r6, [r4, #16]
 802cab2:	60c5      	str	r5, [r0, #12]
 802cab4:	f109 0310 	add.w	r3, r9, #16
 802cab8:	f109 0514 	add.w	r5, r9, #20
 802cabc:	f104 0e14 	add.w	lr, r4, #20
 802cac0:	f100 0b14 	add.w	fp, r0, #20
 802cac4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802cac8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802cacc:	9301      	str	r3, [sp, #4]
 802cace:	46d9      	mov	r9, fp
 802cad0:	f04f 0c00 	mov.w	ip, #0
 802cad4:	9b01      	ldr	r3, [sp, #4]
 802cad6:	f85e 0b04 	ldr.w	r0, [lr], #4
 802cada:	f853 af04 	ldr.w	sl, [r3, #4]!
 802cade:	9301      	str	r3, [sp, #4]
 802cae0:	fa1f f38a 	uxth.w	r3, sl
 802cae4:	4619      	mov	r1, r3
 802cae6:	b283      	uxth	r3, r0
 802cae8:	1acb      	subs	r3, r1, r3
 802caea:	0c00      	lsrs	r0, r0, #16
 802caec:	4463      	add	r3, ip
 802caee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802caf2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802caf6:	b29b      	uxth	r3, r3
 802caf8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802cafc:	4576      	cmp	r6, lr
 802cafe:	f849 3b04 	str.w	r3, [r9], #4
 802cb02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802cb06:	d8e5      	bhi.n	802cad4 <__mdiff+0x88>
 802cb08:	1b33      	subs	r3, r6, r4
 802cb0a:	3b15      	subs	r3, #21
 802cb0c:	f023 0303 	bic.w	r3, r3, #3
 802cb10:	3415      	adds	r4, #21
 802cb12:	3304      	adds	r3, #4
 802cb14:	42a6      	cmp	r6, r4
 802cb16:	bf38      	it	cc
 802cb18:	2304      	movcc	r3, #4
 802cb1a:	441d      	add	r5, r3
 802cb1c:	445b      	add	r3, fp
 802cb1e:	461e      	mov	r6, r3
 802cb20:	462c      	mov	r4, r5
 802cb22:	4544      	cmp	r4, r8
 802cb24:	d30e      	bcc.n	802cb44 <__mdiff+0xf8>
 802cb26:	f108 0103 	add.w	r1, r8, #3
 802cb2a:	1b49      	subs	r1, r1, r5
 802cb2c:	f021 0103 	bic.w	r1, r1, #3
 802cb30:	3d03      	subs	r5, #3
 802cb32:	45a8      	cmp	r8, r5
 802cb34:	bf38      	it	cc
 802cb36:	2100      	movcc	r1, #0
 802cb38:	440b      	add	r3, r1
 802cb3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802cb3e:	b191      	cbz	r1, 802cb66 <__mdiff+0x11a>
 802cb40:	6117      	str	r7, [r2, #16]
 802cb42:	e79d      	b.n	802ca80 <__mdiff+0x34>
 802cb44:	f854 1b04 	ldr.w	r1, [r4], #4
 802cb48:	46e6      	mov	lr, ip
 802cb4a:	0c08      	lsrs	r0, r1, #16
 802cb4c:	fa1c fc81 	uxtah	ip, ip, r1
 802cb50:	4471      	add	r1, lr
 802cb52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802cb56:	b289      	uxth	r1, r1
 802cb58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802cb5c:	f846 1b04 	str.w	r1, [r6], #4
 802cb60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802cb64:	e7dd      	b.n	802cb22 <__mdiff+0xd6>
 802cb66:	3f01      	subs	r7, #1
 802cb68:	e7e7      	b.n	802cb3a <__mdiff+0xee>
 802cb6a:	bf00      	nop
 802cb6c:	08034512 	.word	0x08034512
 802cb70:	08034606 	.word	0x08034606

0802cb74 <__ulp>:
 802cb74:	b082      	sub	sp, #8
 802cb76:	ed8d 0b00 	vstr	d0, [sp]
 802cb7a:	9a01      	ldr	r2, [sp, #4]
 802cb7c:	4b0f      	ldr	r3, [pc, #60]	@ (802cbbc <__ulp+0x48>)
 802cb7e:	4013      	ands	r3, r2
 802cb80:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 802cb84:	2b00      	cmp	r3, #0
 802cb86:	dc08      	bgt.n	802cb9a <__ulp+0x26>
 802cb88:	425b      	negs	r3, r3
 802cb8a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802cb8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 802cb92:	da04      	bge.n	802cb9e <__ulp+0x2a>
 802cb94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802cb98:	4113      	asrs	r3, r2
 802cb9a:	2200      	movs	r2, #0
 802cb9c:	e008      	b.n	802cbb0 <__ulp+0x3c>
 802cb9e:	f1a2 0314 	sub.w	r3, r2, #20
 802cba2:	2b1e      	cmp	r3, #30
 802cba4:	bfda      	itte	le
 802cba6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 802cbaa:	40da      	lsrle	r2, r3
 802cbac:	2201      	movgt	r2, #1
 802cbae:	2300      	movs	r3, #0
 802cbb0:	4619      	mov	r1, r3
 802cbb2:	4610      	mov	r0, r2
 802cbb4:	ec41 0b10 	vmov	d0, r0, r1
 802cbb8:	b002      	add	sp, #8
 802cbba:	4770      	bx	lr
 802cbbc:	7ff00000 	.word	0x7ff00000

0802cbc0 <__b2d>:
 802cbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cbc4:	6906      	ldr	r6, [r0, #16]
 802cbc6:	f100 0814 	add.w	r8, r0, #20
 802cbca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802cbce:	1f37      	subs	r7, r6, #4
 802cbd0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802cbd4:	4610      	mov	r0, r2
 802cbd6:	f7ff fd65 	bl	802c6a4 <__hi0bits>
 802cbda:	f1c0 0320 	rsb	r3, r0, #32
 802cbde:	280a      	cmp	r0, #10
 802cbe0:	600b      	str	r3, [r1, #0]
 802cbe2:	491b      	ldr	r1, [pc, #108]	@ (802cc50 <__b2d+0x90>)
 802cbe4:	dc15      	bgt.n	802cc12 <__b2d+0x52>
 802cbe6:	f1c0 0c0b 	rsb	ip, r0, #11
 802cbea:	fa22 f30c 	lsr.w	r3, r2, ip
 802cbee:	45b8      	cmp	r8, r7
 802cbf0:	ea43 0501 	orr.w	r5, r3, r1
 802cbf4:	bf34      	ite	cc
 802cbf6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802cbfa:	2300      	movcs	r3, #0
 802cbfc:	3015      	adds	r0, #21
 802cbfe:	fa02 f000 	lsl.w	r0, r2, r0
 802cc02:	fa23 f30c 	lsr.w	r3, r3, ip
 802cc06:	4303      	orrs	r3, r0
 802cc08:	461c      	mov	r4, r3
 802cc0a:	ec45 4b10 	vmov	d0, r4, r5
 802cc0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cc12:	45b8      	cmp	r8, r7
 802cc14:	bf3a      	itte	cc
 802cc16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802cc1a:	f1a6 0708 	subcc.w	r7, r6, #8
 802cc1e:	2300      	movcs	r3, #0
 802cc20:	380b      	subs	r0, #11
 802cc22:	d012      	beq.n	802cc4a <__b2d+0x8a>
 802cc24:	f1c0 0120 	rsb	r1, r0, #32
 802cc28:	fa23 f401 	lsr.w	r4, r3, r1
 802cc2c:	4082      	lsls	r2, r0
 802cc2e:	4322      	orrs	r2, r4
 802cc30:	4547      	cmp	r7, r8
 802cc32:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 802cc36:	bf8c      	ite	hi
 802cc38:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802cc3c:	2200      	movls	r2, #0
 802cc3e:	4083      	lsls	r3, r0
 802cc40:	40ca      	lsrs	r2, r1
 802cc42:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802cc46:	4313      	orrs	r3, r2
 802cc48:	e7de      	b.n	802cc08 <__b2d+0x48>
 802cc4a:	ea42 0501 	orr.w	r5, r2, r1
 802cc4e:	e7db      	b.n	802cc08 <__b2d+0x48>
 802cc50:	3ff00000 	.word	0x3ff00000

0802cc54 <__d2b>:
 802cc54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802cc58:	460f      	mov	r7, r1
 802cc5a:	2101      	movs	r1, #1
 802cc5c:	ec59 8b10 	vmov	r8, r9, d0
 802cc60:	4616      	mov	r6, r2
 802cc62:	f7ff fc61 	bl	802c528 <_Balloc>
 802cc66:	4604      	mov	r4, r0
 802cc68:	b930      	cbnz	r0, 802cc78 <__d2b+0x24>
 802cc6a:	4602      	mov	r2, r0
 802cc6c:	4b23      	ldr	r3, [pc, #140]	@ (802ccfc <__d2b+0xa8>)
 802cc6e:	4824      	ldr	r0, [pc, #144]	@ (802cd00 <__d2b+0xac>)
 802cc70:	f240 310f 	movw	r1, #783	@ 0x30f
 802cc74:	f7f6 f998 	bl	8022fa8 <__assert_func>
 802cc78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802cc7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802cc80:	b10d      	cbz	r5, 802cc86 <__d2b+0x32>
 802cc82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802cc86:	9301      	str	r3, [sp, #4]
 802cc88:	f1b8 0300 	subs.w	r3, r8, #0
 802cc8c:	d023      	beq.n	802ccd6 <__d2b+0x82>
 802cc8e:	4668      	mov	r0, sp
 802cc90:	9300      	str	r3, [sp, #0]
 802cc92:	f7ff fd26 	bl	802c6e2 <__lo0bits>
 802cc96:	e9dd 1200 	ldrd	r1, r2, [sp]
 802cc9a:	b1d0      	cbz	r0, 802ccd2 <__d2b+0x7e>
 802cc9c:	f1c0 0320 	rsb	r3, r0, #32
 802cca0:	fa02 f303 	lsl.w	r3, r2, r3
 802cca4:	430b      	orrs	r3, r1
 802cca6:	40c2      	lsrs	r2, r0
 802cca8:	6163      	str	r3, [r4, #20]
 802ccaa:	9201      	str	r2, [sp, #4]
 802ccac:	9b01      	ldr	r3, [sp, #4]
 802ccae:	61a3      	str	r3, [r4, #24]
 802ccb0:	2b00      	cmp	r3, #0
 802ccb2:	bf0c      	ite	eq
 802ccb4:	2201      	moveq	r2, #1
 802ccb6:	2202      	movne	r2, #2
 802ccb8:	6122      	str	r2, [r4, #16]
 802ccba:	b1a5      	cbz	r5, 802cce6 <__d2b+0x92>
 802ccbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802ccc0:	4405      	add	r5, r0
 802ccc2:	603d      	str	r5, [r7, #0]
 802ccc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802ccc8:	6030      	str	r0, [r6, #0]
 802ccca:	4620      	mov	r0, r4
 802cccc:	b003      	add	sp, #12
 802ccce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ccd2:	6161      	str	r1, [r4, #20]
 802ccd4:	e7ea      	b.n	802ccac <__d2b+0x58>
 802ccd6:	a801      	add	r0, sp, #4
 802ccd8:	f7ff fd03 	bl	802c6e2 <__lo0bits>
 802ccdc:	9b01      	ldr	r3, [sp, #4]
 802ccde:	6163      	str	r3, [r4, #20]
 802cce0:	3020      	adds	r0, #32
 802cce2:	2201      	movs	r2, #1
 802cce4:	e7e8      	b.n	802ccb8 <__d2b+0x64>
 802cce6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802ccea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802ccee:	6038      	str	r0, [r7, #0]
 802ccf0:	6918      	ldr	r0, [r3, #16]
 802ccf2:	f7ff fcd7 	bl	802c6a4 <__hi0bits>
 802ccf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802ccfa:	e7e5      	b.n	802ccc8 <__d2b+0x74>
 802ccfc:	08034512 	.word	0x08034512
 802cd00:	08034606 	.word	0x08034606

0802cd04 <__ratio>:
 802cd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cd08:	b085      	sub	sp, #20
 802cd0a:	e9cd 1000 	strd	r1, r0, [sp]
 802cd0e:	a902      	add	r1, sp, #8
 802cd10:	f7ff ff56 	bl	802cbc0 <__b2d>
 802cd14:	9800      	ldr	r0, [sp, #0]
 802cd16:	a903      	add	r1, sp, #12
 802cd18:	ec55 4b10 	vmov	r4, r5, d0
 802cd1c:	f7ff ff50 	bl	802cbc0 <__b2d>
 802cd20:	9b01      	ldr	r3, [sp, #4]
 802cd22:	6919      	ldr	r1, [r3, #16]
 802cd24:	9b00      	ldr	r3, [sp, #0]
 802cd26:	691b      	ldr	r3, [r3, #16]
 802cd28:	1ac9      	subs	r1, r1, r3
 802cd2a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 802cd2e:	1a9b      	subs	r3, r3, r2
 802cd30:	ec5b ab10 	vmov	sl, fp, d0
 802cd34:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 802cd38:	2b00      	cmp	r3, #0
 802cd3a:	bfce      	itee	gt
 802cd3c:	462a      	movgt	r2, r5
 802cd3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802cd42:	465a      	movle	r2, fp
 802cd44:	462f      	mov	r7, r5
 802cd46:	46d9      	mov	r9, fp
 802cd48:	bfcc      	ite	gt
 802cd4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802cd4e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 802cd52:	464b      	mov	r3, r9
 802cd54:	4652      	mov	r2, sl
 802cd56:	4620      	mov	r0, r4
 802cd58:	4639      	mov	r1, r7
 802cd5a:	f7d3 fd8f 	bl	800087c <__aeabi_ddiv>
 802cd5e:	ec41 0b10 	vmov	d0, r0, r1
 802cd62:	b005      	add	sp, #20
 802cd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802cd68 <__copybits>:
 802cd68:	3901      	subs	r1, #1
 802cd6a:	b570      	push	{r4, r5, r6, lr}
 802cd6c:	1149      	asrs	r1, r1, #5
 802cd6e:	6914      	ldr	r4, [r2, #16]
 802cd70:	3101      	adds	r1, #1
 802cd72:	f102 0314 	add.w	r3, r2, #20
 802cd76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802cd7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802cd7e:	1f05      	subs	r5, r0, #4
 802cd80:	42a3      	cmp	r3, r4
 802cd82:	d30c      	bcc.n	802cd9e <__copybits+0x36>
 802cd84:	1aa3      	subs	r3, r4, r2
 802cd86:	3b11      	subs	r3, #17
 802cd88:	f023 0303 	bic.w	r3, r3, #3
 802cd8c:	3211      	adds	r2, #17
 802cd8e:	42a2      	cmp	r2, r4
 802cd90:	bf88      	it	hi
 802cd92:	2300      	movhi	r3, #0
 802cd94:	4418      	add	r0, r3
 802cd96:	2300      	movs	r3, #0
 802cd98:	4288      	cmp	r0, r1
 802cd9a:	d305      	bcc.n	802cda8 <__copybits+0x40>
 802cd9c:	bd70      	pop	{r4, r5, r6, pc}
 802cd9e:	f853 6b04 	ldr.w	r6, [r3], #4
 802cda2:	f845 6f04 	str.w	r6, [r5, #4]!
 802cda6:	e7eb      	b.n	802cd80 <__copybits+0x18>
 802cda8:	f840 3b04 	str.w	r3, [r0], #4
 802cdac:	e7f4      	b.n	802cd98 <__copybits+0x30>

0802cdae <__any_on>:
 802cdae:	f100 0214 	add.w	r2, r0, #20
 802cdb2:	6900      	ldr	r0, [r0, #16]
 802cdb4:	114b      	asrs	r3, r1, #5
 802cdb6:	4298      	cmp	r0, r3
 802cdb8:	b510      	push	{r4, lr}
 802cdba:	db11      	blt.n	802cde0 <__any_on+0x32>
 802cdbc:	dd0a      	ble.n	802cdd4 <__any_on+0x26>
 802cdbe:	f011 011f 	ands.w	r1, r1, #31
 802cdc2:	d007      	beq.n	802cdd4 <__any_on+0x26>
 802cdc4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802cdc8:	fa24 f001 	lsr.w	r0, r4, r1
 802cdcc:	fa00 f101 	lsl.w	r1, r0, r1
 802cdd0:	428c      	cmp	r4, r1
 802cdd2:	d10b      	bne.n	802cdec <__any_on+0x3e>
 802cdd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802cdd8:	4293      	cmp	r3, r2
 802cdda:	d803      	bhi.n	802cde4 <__any_on+0x36>
 802cddc:	2000      	movs	r0, #0
 802cdde:	bd10      	pop	{r4, pc}
 802cde0:	4603      	mov	r3, r0
 802cde2:	e7f7      	b.n	802cdd4 <__any_on+0x26>
 802cde4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802cde8:	2900      	cmp	r1, #0
 802cdea:	d0f5      	beq.n	802cdd8 <__any_on+0x2a>
 802cdec:	2001      	movs	r0, #1
 802cdee:	e7f6      	b.n	802cdde <__any_on+0x30>

0802cdf0 <realloc>:
 802cdf0:	4b02      	ldr	r3, [pc, #8]	@ (802cdfc <realloc+0xc>)
 802cdf2:	460a      	mov	r2, r1
 802cdf4:	4601      	mov	r1, r0
 802cdf6:	6818      	ldr	r0, [r3, #0]
 802cdf8:	f000 b890 	b.w	802cf1c <_realloc_r>
 802cdfc:	20000430 	.word	0x20000430

0802ce00 <_fclose_r>:
 802ce00:	b570      	push	{r4, r5, r6, lr}
 802ce02:	4605      	mov	r5, r0
 802ce04:	460c      	mov	r4, r1
 802ce06:	b1b1      	cbz	r1, 802ce36 <_fclose_r+0x36>
 802ce08:	b118      	cbz	r0, 802ce12 <_fclose_r+0x12>
 802ce0a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802ce0c:	b90b      	cbnz	r3, 802ce12 <_fclose_r+0x12>
 802ce0e:	f7f8 fb79 	bl	8025504 <__sinit>
 802ce12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802ce14:	07de      	lsls	r6, r3, #31
 802ce16:	d405      	bmi.n	802ce24 <_fclose_r+0x24>
 802ce18:	89a3      	ldrh	r3, [r4, #12]
 802ce1a:	0598      	lsls	r0, r3, #22
 802ce1c:	d402      	bmi.n	802ce24 <_fclose_r+0x24>
 802ce1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802ce20:	f7fa f84f 	bl	8026ec2 <__retarget_lock_acquire_recursive>
 802ce24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ce28:	b943      	cbnz	r3, 802ce3c <_fclose_r+0x3c>
 802ce2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802ce2c:	07d9      	lsls	r1, r3, #31
 802ce2e:	d402      	bmi.n	802ce36 <_fclose_r+0x36>
 802ce30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802ce32:	f7fa f848 	bl	8026ec6 <__retarget_lock_release_recursive>
 802ce36:	2600      	movs	r6, #0
 802ce38:	4630      	mov	r0, r6
 802ce3a:	bd70      	pop	{r4, r5, r6, pc}
 802ce3c:	4621      	mov	r1, r4
 802ce3e:	4628      	mov	r0, r5
 802ce40:	f7f8 f996 	bl	8025170 <__sflush_r>
 802ce44:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802ce46:	4606      	mov	r6, r0
 802ce48:	b133      	cbz	r3, 802ce58 <_fclose_r+0x58>
 802ce4a:	69e1      	ldr	r1, [r4, #28]
 802ce4c:	4628      	mov	r0, r5
 802ce4e:	4798      	blx	r3
 802ce50:	2800      	cmp	r0, #0
 802ce52:	bfb8      	it	lt
 802ce54:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 802ce58:	89a3      	ldrh	r3, [r4, #12]
 802ce5a:	061a      	lsls	r2, r3, #24
 802ce5c:	d503      	bpl.n	802ce66 <_fclose_r+0x66>
 802ce5e:	6921      	ldr	r1, [r4, #16]
 802ce60:	4628      	mov	r0, r5
 802ce62:	f7fa ff33 	bl	8027ccc <_free_r>
 802ce66:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802ce68:	b141      	cbz	r1, 802ce7c <_fclose_r+0x7c>
 802ce6a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802ce6e:	4299      	cmp	r1, r3
 802ce70:	d002      	beq.n	802ce78 <_fclose_r+0x78>
 802ce72:	4628      	mov	r0, r5
 802ce74:	f7fa ff2a 	bl	8027ccc <_free_r>
 802ce78:	2300      	movs	r3, #0
 802ce7a:	6323      	str	r3, [r4, #48]	@ 0x30
 802ce7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802ce7e:	b121      	cbz	r1, 802ce8a <_fclose_r+0x8a>
 802ce80:	4628      	mov	r0, r5
 802ce82:	f7fa ff23 	bl	8027ccc <_free_r>
 802ce86:	2300      	movs	r3, #0
 802ce88:	6463      	str	r3, [r4, #68]	@ 0x44
 802ce8a:	f7f8 fb2f 	bl	80254ec <__sfp_lock_acquire>
 802ce8e:	2300      	movs	r3, #0
 802ce90:	81a3      	strh	r3, [r4, #12]
 802ce92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802ce94:	07db      	lsls	r3, r3, #31
 802ce96:	d402      	bmi.n	802ce9e <_fclose_r+0x9e>
 802ce98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802ce9a:	f7fa f814 	bl	8026ec6 <__retarget_lock_release_recursive>
 802ce9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802cea0:	f7fa f80d 	bl	8026ebe <__retarget_lock_close_recursive>
 802cea4:	f7f8 fb28 	bl	80254f8 <__sfp_lock_release>
 802cea8:	e7c6      	b.n	802ce38 <_fclose_r+0x38>

0802ceaa <__sccl>:
 802ceaa:	b570      	push	{r4, r5, r6, lr}
 802ceac:	780b      	ldrb	r3, [r1, #0]
 802ceae:	4604      	mov	r4, r0
 802ceb0:	2b5e      	cmp	r3, #94	@ 0x5e
 802ceb2:	bf0b      	itete	eq
 802ceb4:	784b      	ldrbeq	r3, [r1, #1]
 802ceb6:	1c4a      	addne	r2, r1, #1
 802ceb8:	1c8a      	addeq	r2, r1, #2
 802ceba:	2100      	movne	r1, #0
 802cebc:	bf08      	it	eq
 802cebe:	2101      	moveq	r1, #1
 802cec0:	3801      	subs	r0, #1
 802cec2:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 802cec6:	f800 1f01 	strb.w	r1, [r0, #1]!
 802ceca:	42a8      	cmp	r0, r5
 802cecc:	d1fb      	bne.n	802cec6 <__sccl+0x1c>
 802cece:	b90b      	cbnz	r3, 802ced4 <__sccl+0x2a>
 802ced0:	1e50      	subs	r0, r2, #1
 802ced2:	bd70      	pop	{r4, r5, r6, pc}
 802ced4:	f081 0101 	eor.w	r1, r1, #1
 802ced8:	54e1      	strb	r1, [r4, r3]
 802ceda:	4610      	mov	r0, r2
 802cedc:	4602      	mov	r2, r0
 802cede:	f812 5b01 	ldrb.w	r5, [r2], #1
 802cee2:	2d2d      	cmp	r5, #45	@ 0x2d
 802cee4:	d005      	beq.n	802cef2 <__sccl+0x48>
 802cee6:	2d5d      	cmp	r5, #93	@ 0x5d
 802cee8:	d016      	beq.n	802cf18 <__sccl+0x6e>
 802ceea:	2d00      	cmp	r5, #0
 802ceec:	d0f1      	beq.n	802ced2 <__sccl+0x28>
 802ceee:	462b      	mov	r3, r5
 802cef0:	e7f2      	b.n	802ced8 <__sccl+0x2e>
 802cef2:	7846      	ldrb	r6, [r0, #1]
 802cef4:	2e5d      	cmp	r6, #93	@ 0x5d
 802cef6:	d0fa      	beq.n	802ceee <__sccl+0x44>
 802cef8:	42b3      	cmp	r3, r6
 802cefa:	dcf8      	bgt.n	802ceee <__sccl+0x44>
 802cefc:	3002      	adds	r0, #2
 802cefe:	461a      	mov	r2, r3
 802cf00:	3201      	adds	r2, #1
 802cf02:	4296      	cmp	r6, r2
 802cf04:	54a1      	strb	r1, [r4, r2]
 802cf06:	dcfb      	bgt.n	802cf00 <__sccl+0x56>
 802cf08:	1af2      	subs	r2, r6, r3
 802cf0a:	3a01      	subs	r2, #1
 802cf0c:	1c5d      	adds	r5, r3, #1
 802cf0e:	42b3      	cmp	r3, r6
 802cf10:	bfa8      	it	ge
 802cf12:	2200      	movge	r2, #0
 802cf14:	18ab      	adds	r3, r5, r2
 802cf16:	e7e1      	b.n	802cedc <__sccl+0x32>
 802cf18:	4610      	mov	r0, r2
 802cf1a:	e7da      	b.n	802ced2 <__sccl+0x28>

0802cf1c <_realloc_r>:
 802cf1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cf20:	4682      	mov	sl, r0
 802cf22:	4693      	mov	fp, r2
 802cf24:	460c      	mov	r4, r1
 802cf26:	b929      	cbnz	r1, 802cf34 <_realloc_r+0x18>
 802cf28:	4611      	mov	r1, r2
 802cf2a:	b003      	add	sp, #12
 802cf2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cf30:	f7fa bfe4 	b.w	8027efc <_malloc_r>
 802cf34:	f7ff faec 	bl	802c510 <__malloc_lock>
 802cf38:	f10b 080b 	add.w	r8, fp, #11
 802cf3c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 802cf40:	f1b8 0f16 	cmp.w	r8, #22
 802cf44:	f1a4 0908 	sub.w	r9, r4, #8
 802cf48:	f025 0603 	bic.w	r6, r5, #3
 802cf4c:	d908      	bls.n	802cf60 <_realloc_r+0x44>
 802cf4e:	f038 0807 	bics.w	r8, r8, #7
 802cf52:	d507      	bpl.n	802cf64 <_realloc_r+0x48>
 802cf54:	230c      	movs	r3, #12
 802cf56:	f8ca 3000 	str.w	r3, [sl]
 802cf5a:	f04f 0b00 	mov.w	fp, #0
 802cf5e:	e032      	b.n	802cfc6 <_realloc_r+0xaa>
 802cf60:	f04f 0810 	mov.w	r8, #16
 802cf64:	45c3      	cmp	fp, r8
 802cf66:	d8f5      	bhi.n	802cf54 <_realloc_r+0x38>
 802cf68:	4546      	cmp	r6, r8
 802cf6a:	f280 8174 	bge.w	802d256 <_realloc_r+0x33a>
 802cf6e:	4b9e      	ldr	r3, [pc, #632]	@ (802d1e8 <_realloc_r+0x2cc>)
 802cf70:	f8d3 c008 	ldr.w	ip, [r3, #8]
 802cf74:	eb09 0106 	add.w	r1, r9, r6
 802cf78:	458c      	cmp	ip, r1
 802cf7a:	6848      	ldr	r0, [r1, #4]
 802cf7c:	d005      	beq.n	802cf8a <_realloc_r+0x6e>
 802cf7e:	f020 0201 	bic.w	r2, r0, #1
 802cf82:	440a      	add	r2, r1
 802cf84:	6852      	ldr	r2, [r2, #4]
 802cf86:	07d7      	lsls	r7, r2, #31
 802cf88:	d449      	bmi.n	802d01e <_realloc_r+0x102>
 802cf8a:	f020 0003 	bic.w	r0, r0, #3
 802cf8e:	458c      	cmp	ip, r1
 802cf90:	eb06 0700 	add.w	r7, r6, r0
 802cf94:	d11b      	bne.n	802cfce <_realloc_r+0xb2>
 802cf96:	f108 0210 	add.w	r2, r8, #16
 802cf9a:	42ba      	cmp	r2, r7
 802cf9c:	dc41      	bgt.n	802d022 <_realloc_r+0x106>
 802cf9e:	eb09 0208 	add.w	r2, r9, r8
 802cfa2:	eba7 0708 	sub.w	r7, r7, r8
 802cfa6:	f047 0701 	orr.w	r7, r7, #1
 802cfaa:	609a      	str	r2, [r3, #8]
 802cfac:	6057      	str	r7, [r2, #4]
 802cfae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802cfb2:	f003 0301 	and.w	r3, r3, #1
 802cfb6:	ea43 0308 	orr.w	r3, r3, r8
 802cfba:	f844 3c04 	str.w	r3, [r4, #-4]
 802cfbe:	4650      	mov	r0, sl
 802cfc0:	f7ff faac 	bl	802c51c <__malloc_unlock>
 802cfc4:	46a3      	mov	fp, r4
 802cfc6:	4658      	mov	r0, fp
 802cfc8:	b003      	add	sp, #12
 802cfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cfce:	45b8      	cmp	r8, r7
 802cfd0:	dc27      	bgt.n	802d022 <_realloc_r+0x106>
 802cfd2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 802cfd6:	60d3      	str	r3, [r2, #12]
 802cfd8:	609a      	str	r2, [r3, #8]
 802cfda:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802cfde:	eba7 0008 	sub.w	r0, r7, r8
 802cfe2:	280f      	cmp	r0, #15
 802cfe4:	f003 0301 	and.w	r3, r3, #1
 802cfe8:	eb09 0207 	add.w	r2, r9, r7
 802cfec:	f240 8135 	bls.w	802d25a <_realloc_r+0x33e>
 802cff0:	eb09 0108 	add.w	r1, r9, r8
 802cff4:	ea48 0303 	orr.w	r3, r8, r3
 802cff8:	f040 0001 	orr.w	r0, r0, #1
 802cffc:	f8c9 3004 	str.w	r3, [r9, #4]
 802d000:	6048      	str	r0, [r1, #4]
 802d002:	6853      	ldr	r3, [r2, #4]
 802d004:	f043 0301 	orr.w	r3, r3, #1
 802d008:	6053      	str	r3, [r2, #4]
 802d00a:	3108      	adds	r1, #8
 802d00c:	4650      	mov	r0, sl
 802d00e:	f7fa fe5d 	bl	8027ccc <_free_r>
 802d012:	4650      	mov	r0, sl
 802d014:	f7ff fa82 	bl	802c51c <__malloc_unlock>
 802d018:	f109 0b08 	add.w	fp, r9, #8
 802d01c:	e7d3      	b.n	802cfc6 <_realloc_r+0xaa>
 802d01e:	2000      	movs	r0, #0
 802d020:	4601      	mov	r1, r0
 802d022:	07ea      	lsls	r2, r5, #31
 802d024:	f100 80c7 	bmi.w	802d1b6 <_realloc_r+0x29a>
 802d028:	f854 5c08 	ldr.w	r5, [r4, #-8]
 802d02c:	eba9 0505 	sub.w	r5, r9, r5
 802d030:	686a      	ldr	r2, [r5, #4]
 802d032:	f022 0203 	bic.w	r2, r2, #3
 802d036:	4432      	add	r2, r6
 802d038:	9201      	str	r2, [sp, #4]
 802d03a:	2900      	cmp	r1, #0
 802d03c:	f000 8086 	beq.w	802d14c <_realloc_r+0x230>
 802d040:	458c      	cmp	ip, r1
 802d042:	eb00 0702 	add.w	r7, r0, r2
 802d046:	d149      	bne.n	802d0dc <_realloc_r+0x1c0>
 802d048:	f108 0210 	add.w	r2, r8, #16
 802d04c:	42ba      	cmp	r2, r7
 802d04e:	dc7d      	bgt.n	802d14c <_realloc_r+0x230>
 802d050:	46ab      	mov	fp, r5
 802d052:	68ea      	ldr	r2, [r5, #12]
 802d054:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 802d058:	60ca      	str	r2, [r1, #12]
 802d05a:	6091      	str	r1, [r2, #8]
 802d05c:	1f32      	subs	r2, r6, #4
 802d05e:	2a24      	cmp	r2, #36	@ 0x24
 802d060:	d836      	bhi.n	802d0d0 <_realloc_r+0x1b4>
 802d062:	2a13      	cmp	r2, #19
 802d064:	d932      	bls.n	802d0cc <_realloc_r+0x1b0>
 802d066:	6821      	ldr	r1, [r4, #0]
 802d068:	60a9      	str	r1, [r5, #8]
 802d06a:	6861      	ldr	r1, [r4, #4]
 802d06c:	60e9      	str	r1, [r5, #12]
 802d06e:	2a1b      	cmp	r2, #27
 802d070:	d81a      	bhi.n	802d0a8 <_realloc_r+0x18c>
 802d072:	3408      	adds	r4, #8
 802d074:	f105 0210 	add.w	r2, r5, #16
 802d078:	6821      	ldr	r1, [r4, #0]
 802d07a:	6011      	str	r1, [r2, #0]
 802d07c:	6861      	ldr	r1, [r4, #4]
 802d07e:	6051      	str	r1, [r2, #4]
 802d080:	68a1      	ldr	r1, [r4, #8]
 802d082:	6091      	str	r1, [r2, #8]
 802d084:	eb05 0208 	add.w	r2, r5, r8
 802d088:	eba7 0708 	sub.w	r7, r7, r8
 802d08c:	f047 0701 	orr.w	r7, r7, #1
 802d090:	609a      	str	r2, [r3, #8]
 802d092:	6057      	str	r7, [r2, #4]
 802d094:	686b      	ldr	r3, [r5, #4]
 802d096:	f003 0301 	and.w	r3, r3, #1
 802d09a:	ea43 0308 	orr.w	r3, r3, r8
 802d09e:	606b      	str	r3, [r5, #4]
 802d0a0:	4650      	mov	r0, sl
 802d0a2:	f7ff fa3b 	bl	802c51c <__malloc_unlock>
 802d0a6:	e78e      	b.n	802cfc6 <_realloc_r+0xaa>
 802d0a8:	68a1      	ldr	r1, [r4, #8]
 802d0aa:	6129      	str	r1, [r5, #16]
 802d0ac:	68e1      	ldr	r1, [r4, #12]
 802d0ae:	6169      	str	r1, [r5, #20]
 802d0b0:	2a24      	cmp	r2, #36	@ 0x24
 802d0b2:	bf01      	itttt	eq
 802d0b4:	6922      	ldreq	r2, [r4, #16]
 802d0b6:	61aa      	streq	r2, [r5, #24]
 802d0b8:	6961      	ldreq	r1, [r4, #20]
 802d0ba:	61e9      	streq	r1, [r5, #28]
 802d0bc:	bf19      	ittee	ne
 802d0be:	3410      	addne	r4, #16
 802d0c0:	f105 0218 	addne.w	r2, r5, #24
 802d0c4:	f105 0220 	addeq.w	r2, r5, #32
 802d0c8:	3418      	addeq	r4, #24
 802d0ca:	e7d5      	b.n	802d078 <_realloc_r+0x15c>
 802d0cc:	465a      	mov	r2, fp
 802d0ce:	e7d3      	b.n	802d078 <_realloc_r+0x15c>
 802d0d0:	4621      	mov	r1, r4
 802d0d2:	4658      	mov	r0, fp
 802d0d4:	f7f8 fca2 	bl	8025a1c <memmove>
 802d0d8:	4b43      	ldr	r3, [pc, #268]	@ (802d1e8 <_realloc_r+0x2cc>)
 802d0da:	e7d3      	b.n	802d084 <_realloc_r+0x168>
 802d0dc:	45b8      	cmp	r8, r7
 802d0de:	dc35      	bgt.n	802d14c <_realloc_r+0x230>
 802d0e0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 802d0e4:	4628      	mov	r0, r5
 802d0e6:	60d3      	str	r3, [r2, #12]
 802d0e8:	609a      	str	r2, [r3, #8]
 802d0ea:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802d0ee:	68eb      	ldr	r3, [r5, #12]
 802d0f0:	60d3      	str	r3, [r2, #12]
 802d0f2:	609a      	str	r2, [r3, #8]
 802d0f4:	1f32      	subs	r2, r6, #4
 802d0f6:	2a24      	cmp	r2, #36	@ 0x24
 802d0f8:	d824      	bhi.n	802d144 <_realloc_r+0x228>
 802d0fa:	2a13      	cmp	r2, #19
 802d0fc:	d908      	bls.n	802d110 <_realloc_r+0x1f4>
 802d0fe:	6823      	ldr	r3, [r4, #0]
 802d100:	60ab      	str	r3, [r5, #8]
 802d102:	6863      	ldr	r3, [r4, #4]
 802d104:	60eb      	str	r3, [r5, #12]
 802d106:	2a1b      	cmp	r2, #27
 802d108:	d80a      	bhi.n	802d120 <_realloc_r+0x204>
 802d10a:	3408      	adds	r4, #8
 802d10c:	f105 0010 	add.w	r0, r5, #16
 802d110:	6823      	ldr	r3, [r4, #0]
 802d112:	6003      	str	r3, [r0, #0]
 802d114:	6863      	ldr	r3, [r4, #4]
 802d116:	6043      	str	r3, [r0, #4]
 802d118:	68a3      	ldr	r3, [r4, #8]
 802d11a:	6083      	str	r3, [r0, #8]
 802d11c:	46a9      	mov	r9, r5
 802d11e:	e75c      	b.n	802cfda <_realloc_r+0xbe>
 802d120:	68a3      	ldr	r3, [r4, #8]
 802d122:	612b      	str	r3, [r5, #16]
 802d124:	68e3      	ldr	r3, [r4, #12]
 802d126:	616b      	str	r3, [r5, #20]
 802d128:	2a24      	cmp	r2, #36	@ 0x24
 802d12a:	bf01      	itttt	eq
 802d12c:	6923      	ldreq	r3, [r4, #16]
 802d12e:	61ab      	streq	r3, [r5, #24]
 802d130:	6963      	ldreq	r3, [r4, #20]
 802d132:	61eb      	streq	r3, [r5, #28]
 802d134:	bf19      	ittee	ne
 802d136:	3410      	addne	r4, #16
 802d138:	f105 0018 	addne.w	r0, r5, #24
 802d13c:	f105 0020 	addeq.w	r0, r5, #32
 802d140:	3418      	addeq	r4, #24
 802d142:	e7e5      	b.n	802d110 <_realloc_r+0x1f4>
 802d144:	4621      	mov	r1, r4
 802d146:	f7f8 fc69 	bl	8025a1c <memmove>
 802d14a:	e7e7      	b.n	802d11c <_realloc_r+0x200>
 802d14c:	9b01      	ldr	r3, [sp, #4]
 802d14e:	4598      	cmp	r8, r3
 802d150:	dc31      	bgt.n	802d1b6 <_realloc_r+0x29a>
 802d152:	4628      	mov	r0, r5
 802d154:	68eb      	ldr	r3, [r5, #12]
 802d156:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802d15a:	60d3      	str	r3, [r2, #12]
 802d15c:	609a      	str	r2, [r3, #8]
 802d15e:	1f32      	subs	r2, r6, #4
 802d160:	2a24      	cmp	r2, #36	@ 0x24
 802d162:	d824      	bhi.n	802d1ae <_realloc_r+0x292>
 802d164:	2a13      	cmp	r2, #19
 802d166:	d908      	bls.n	802d17a <_realloc_r+0x25e>
 802d168:	6823      	ldr	r3, [r4, #0]
 802d16a:	60ab      	str	r3, [r5, #8]
 802d16c:	6863      	ldr	r3, [r4, #4]
 802d16e:	60eb      	str	r3, [r5, #12]
 802d170:	2a1b      	cmp	r2, #27
 802d172:	d80a      	bhi.n	802d18a <_realloc_r+0x26e>
 802d174:	3408      	adds	r4, #8
 802d176:	f105 0010 	add.w	r0, r5, #16
 802d17a:	6823      	ldr	r3, [r4, #0]
 802d17c:	6003      	str	r3, [r0, #0]
 802d17e:	6863      	ldr	r3, [r4, #4]
 802d180:	6043      	str	r3, [r0, #4]
 802d182:	68a3      	ldr	r3, [r4, #8]
 802d184:	6083      	str	r3, [r0, #8]
 802d186:	9f01      	ldr	r7, [sp, #4]
 802d188:	e7c8      	b.n	802d11c <_realloc_r+0x200>
 802d18a:	68a3      	ldr	r3, [r4, #8]
 802d18c:	612b      	str	r3, [r5, #16]
 802d18e:	68e3      	ldr	r3, [r4, #12]
 802d190:	616b      	str	r3, [r5, #20]
 802d192:	2a24      	cmp	r2, #36	@ 0x24
 802d194:	bf01      	itttt	eq
 802d196:	6923      	ldreq	r3, [r4, #16]
 802d198:	61ab      	streq	r3, [r5, #24]
 802d19a:	6963      	ldreq	r3, [r4, #20]
 802d19c:	61eb      	streq	r3, [r5, #28]
 802d19e:	bf19      	ittee	ne
 802d1a0:	3410      	addne	r4, #16
 802d1a2:	f105 0018 	addne.w	r0, r5, #24
 802d1a6:	f105 0020 	addeq.w	r0, r5, #32
 802d1aa:	3418      	addeq	r4, #24
 802d1ac:	e7e5      	b.n	802d17a <_realloc_r+0x25e>
 802d1ae:	4621      	mov	r1, r4
 802d1b0:	f7f8 fc34 	bl	8025a1c <memmove>
 802d1b4:	e7e7      	b.n	802d186 <_realloc_r+0x26a>
 802d1b6:	4659      	mov	r1, fp
 802d1b8:	4650      	mov	r0, sl
 802d1ba:	f7fa fe9f 	bl	8027efc <_malloc_r>
 802d1be:	4683      	mov	fp, r0
 802d1c0:	b918      	cbnz	r0, 802d1ca <_realloc_r+0x2ae>
 802d1c2:	4650      	mov	r0, sl
 802d1c4:	f7ff f9aa 	bl	802c51c <__malloc_unlock>
 802d1c8:	e6c7      	b.n	802cf5a <_realloc_r+0x3e>
 802d1ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802d1ce:	f023 0301 	bic.w	r3, r3, #1
 802d1d2:	444b      	add	r3, r9
 802d1d4:	f1a0 0208 	sub.w	r2, r0, #8
 802d1d8:	4293      	cmp	r3, r2
 802d1da:	d107      	bne.n	802d1ec <_realloc_r+0x2d0>
 802d1dc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 802d1e0:	f027 0703 	bic.w	r7, r7, #3
 802d1e4:	4437      	add	r7, r6
 802d1e6:	e6f8      	b.n	802cfda <_realloc_r+0xbe>
 802d1e8:	20000564 	.word	0x20000564
 802d1ec:	1f32      	subs	r2, r6, #4
 802d1ee:	2a24      	cmp	r2, #36	@ 0x24
 802d1f0:	d82d      	bhi.n	802d24e <_realloc_r+0x332>
 802d1f2:	2a13      	cmp	r2, #19
 802d1f4:	d928      	bls.n	802d248 <_realloc_r+0x32c>
 802d1f6:	6823      	ldr	r3, [r4, #0]
 802d1f8:	6003      	str	r3, [r0, #0]
 802d1fa:	6863      	ldr	r3, [r4, #4]
 802d1fc:	6043      	str	r3, [r0, #4]
 802d1fe:	2a1b      	cmp	r2, #27
 802d200:	d80e      	bhi.n	802d220 <_realloc_r+0x304>
 802d202:	f104 0208 	add.w	r2, r4, #8
 802d206:	f100 0308 	add.w	r3, r0, #8
 802d20a:	6811      	ldr	r1, [r2, #0]
 802d20c:	6019      	str	r1, [r3, #0]
 802d20e:	6851      	ldr	r1, [r2, #4]
 802d210:	6059      	str	r1, [r3, #4]
 802d212:	6892      	ldr	r2, [r2, #8]
 802d214:	609a      	str	r2, [r3, #8]
 802d216:	4621      	mov	r1, r4
 802d218:	4650      	mov	r0, sl
 802d21a:	f7fa fd57 	bl	8027ccc <_free_r>
 802d21e:	e73f      	b.n	802d0a0 <_realloc_r+0x184>
 802d220:	68a3      	ldr	r3, [r4, #8]
 802d222:	6083      	str	r3, [r0, #8]
 802d224:	68e3      	ldr	r3, [r4, #12]
 802d226:	60c3      	str	r3, [r0, #12]
 802d228:	2a24      	cmp	r2, #36	@ 0x24
 802d22a:	bf01      	itttt	eq
 802d22c:	6923      	ldreq	r3, [r4, #16]
 802d22e:	6103      	streq	r3, [r0, #16]
 802d230:	6961      	ldreq	r1, [r4, #20]
 802d232:	6141      	streq	r1, [r0, #20]
 802d234:	bf19      	ittee	ne
 802d236:	f104 0210 	addne.w	r2, r4, #16
 802d23a:	f100 0310 	addne.w	r3, r0, #16
 802d23e:	f104 0218 	addeq.w	r2, r4, #24
 802d242:	f100 0318 	addeq.w	r3, r0, #24
 802d246:	e7e0      	b.n	802d20a <_realloc_r+0x2ee>
 802d248:	4603      	mov	r3, r0
 802d24a:	4622      	mov	r2, r4
 802d24c:	e7dd      	b.n	802d20a <_realloc_r+0x2ee>
 802d24e:	4621      	mov	r1, r4
 802d250:	f7f8 fbe4 	bl	8025a1c <memmove>
 802d254:	e7df      	b.n	802d216 <_realloc_r+0x2fa>
 802d256:	4637      	mov	r7, r6
 802d258:	e6bf      	b.n	802cfda <_realloc_r+0xbe>
 802d25a:	431f      	orrs	r7, r3
 802d25c:	f8c9 7004 	str.w	r7, [r9, #4]
 802d260:	6853      	ldr	r3, [r2, #4]
 802d262:	f043 0301 	orr.w	r3, r3, #1
 802d266:	6053      	str	r3, [r2, #4]
 802d268:	e6d3      	b.n	802d012 <_realloc_r+0xf6>
 802d26a:	bf00      	nop

0802d26c <sulp>:
 802d26c:	b570      	push	{r4, r5, r6, lr}
 802d26e:	4604      	mov	r4, r0
 802d270:	460d      	mov	r5, r1
 802d272:	ec45 4b10 	vmov	d0, r4, r5
 802d276:	4616      	mov	r6, r2
 802d278:	f7ff fc7c 	bl	802cb74 <__ulp>
 802d27c:	ec51 0b10 	vmov	r0, r1, d0
 802d280:	b17e      	cbz	r6, 802d2a2 <sulp+0x36>
 802d282:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802d286:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802d28a:	2b00      	cmp	r3, #0
 802d28c:	dd09      	ble.n	802d2a2 <sulp+0x36>
 802d28e:	051b      	lsls	r3, r3, #20
 802d290:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 802d294:	2400      	movs	r4, #0
 802d296:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 802d29a:	4622      	mov	r2, r4
 802d29c:	462b      	mov	r3, r5
 802d29e:	f7d3 f9c3 	bl	8000628 <__aeabi_dmul>
 802d2a2:	ec41 0b10 	vmov	d0, r0, r1
 802d2a6:	bd70      	pop	{r4, r5, r6, pc}

0802d2a8 <_strtod_l>:
 802d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d2ac:	b09f      	sub	sp, #124	@ 0x7c
 802d2ae:	460c      	mov	r4, r1
 802d2b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 802d2b2:	2200      	movs	r2, #0
 802d2b4:	921a      	str	r2, [sp, #104]	@ 0x68
 802d2b6:	9005      	str	r0, [sp, #20]
 802d2b8:	f04f 0a00 	mov.w	sl, #0
 802d2bc:	f04f 0b00 	mov.w	fp, #0
 802d2c0:	460a      	mov	r2, r1
 802d2c2:	9219      	str	r2, [sp, #100]	@ 0x64
 802d2c4:	7811      	ldrb	r1, [r2, #0]
 802d2c6:	292b      	cmp	r1, #43	@ 0x2b
 802d2c8:	d04a      	beq.n	802d360 <_strtod_l+0xb8>
 802d2ca:	d838      	bhi.n	802d33e <_strtod_l+0x96>
 802d2cc:	290d      	cmp	r1, #13
 802d2ce:	d832      	bhi.n	802d336 <_strtod_l+0x8e>
 802d2d0:	2908      	cmp	r1, #8
 802d2d2:	d832      	bhi.n	802d33a <_strtod_l+0x92>
 802d2d4:	2900      	cmp	r1, #0
 802d2d6:	d03b      	beq.n	802d350 <_strtod_l+0xa8>
 802d2d8:	2200      	movs	r2, #0
 802d2da:	920b      	str	r2, [sp, #44]	@ 0x2c
 802d2dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 802d2de:	782a      	ldrb	r2, [r5, #0]
 802d2e0:	2a30      	cmp	r2, #48	@ 0x30
 802d2e2:	f040 80b3 	bne.w	802d44c <_strtod_l+0x1a4>
 802d2e6:	786a      	ldrb	r2, [r5, #1]
 802d2e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802d2ec:	2a58      	cmp	r2, #88	@ 0x58
 802d2ee:	d16e      	bne.n	802d3ce <_strtod_l+0x126>
 802d2f0:	9302      	str	r3, [sp, #8]
 802d2f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d2f4:	9301      	str	r3, [sp, #4]
 802d2f6:	ab1a      	add	r3, sp, #104	@ 0x68
 802d2f8:	9300      	str	r3, [sp, #0]
 802d2fa:	4a8e      	ldr	r2, [pc, #568]	@ (802d534 <_strtod_l+0x28c>)
 802d2fc:	9805      	ldr	r0, [sp, #20]
 802d2fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 802d300:	a919      	add	r1, sp, #100	@ 0x64
 802d302:	f001 fa51 	bl	802e7a8 <__gethex>
 802d306:	f010 060f 	ands.w	r6, r0, #15
 802d30a:	4604      	mov	r4, r0
 802d30c:	d005      	beq.n	802d31a <_strtod_l+0x72>
 802d30e:	2e06      	cmp	r6, #6
 802d310:	d128      	bne.n	802d364 <_strtod_l+0xbc>
 802d312:	3501      	adds	r5, #1
 802d314:	2300      	movs	r3, #0
 802d316:	9519      	str	r5, [sp, #100]	@ 0x64
 802d318:	930b      	str	r3, [sp, #44]	@ 0x2c
 802d31a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802d31c:	2b00      	cmp	r3, #0
 802d31e:	f040 858e 	bne.w	802de3e <_strtod_l+0xb96>
 802d322:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d324:	b1cb      	cbz	r3, 802d35a <_strtod_l+0xb2>
 802d326:	4652      	mov	r2, sl
 802d328:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 802d32c:	ec43 2b10 	vmov	d0, r2, r3
 802d330:	b01f      	add	sp, #124	@ 0x7c
 802d332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d336:	2920      	cmp	r1, #32
 802d338:	d1ce      	bne.n	802d2d8 <_strtod_l+0x30>
 802d33a:	3201      	adds	r2, #1
 802d33c:	e7c1      	b.n	802d2c2 <_strtod_l+0x1a>
 802d33e:	292d      	cmp	r1, #45	@ 0x2d
 802d340:	d1ca      	bne.n	802d2d8 <_strtod_l+0x30>
 802d342:	2101      	movs	r1, #1
 802d344:	910b      	str	r1, [sp, #44]	@ 0x2c
 802d346:	1c51      	adds	r1, r2, #1
 802d348:	9119      	str	r1, [sp, #100]	@ 0x64
 802d34a:	7852      	ldrb	r2, [r2, #1]
 802d34c:	2a00      	cmp	r2, #0
 802d34e:	d1c5      	bne.n	802d2dc <_strtod_l+0x34>
 802d350:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802d352:	9419      	str	r4, [sp, #100]	@ 0x64
 802d354:	2b00      	cmp	r3, #0
 802d356:	f040 8570 	bne.w	802de3a <_strtod_l+0xb92>
 802d35a:	4652      	mov	r2, sl
 802d35c:	465b      	mov	r3, fp
 802d35e:	e7e5      	b.n	802d32c <_strtod_l+0x84>
 802d360:	2100      	movs	r1, #0
 802d362:	e7ef      	b.n	802d344 <_strtod_l+0x9c>
 802d364:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802d366:	b13a      	cbz	r2, 802d378 <_strtod_l+0xd0>
 802d368:	2135      	movs	r1, #53	@ 0x35
 802d36a:	a81c      	add	r0, sp, #112	@ 0x70
 802d36c:	f7ff fcfc 	bl	802cd68 <__copybits>
 802d370:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802d372:	9805      	ldr	r0, [sp, #20]
 802d374:	f7ff f8fd 	bl	802c572 <_Bfree>
 802d378:	3e01      	subs	r6, #1
 802d37a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802d37c:	2e04      	cmp	r6, #4
 802d37e:	d806      	bhi.n	802d38e <_strtod_l+0xe6>
 802d380:	e8df f006 	tbb	[pc, r6]
 802d384:	201d0314 	.word	0x201d0314
 802d388:	14          	.byte	0x14
 802d389:	00          	.byte	0x00
 802d38a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 802d38e:	05e1      	lsls	r1, r4, #23
 802d390:	bf48      	it	mi
 802d392:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 802d396:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802d39a:	0d1b      	lsrs	r3, r3, #20
 802d39c:	051b      	lsls	r3, r3, #20
 802d39e:	2b00      	cmp	r3, #0
 802d3a0:	d1bb      	bne.n	802d31a <_strtod_l+0x72>
 802d3a2:	f7f9 fd59 	bl	8026e58 <__errno>
 802d3a6:	2322      	movs	r3, #34	@ 0x22
 802d3a8:	6003      	str	r3, [r0, #0]
 802d3aa:	e7b6      	b.n	802d31a <_strtod_l+0x72>
 802d3ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 802d3b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802d3b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 802d3b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802d3bc:	e7e7      	b.n	802d38e <_strtod_l+0xe6>
 802d3be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 802d53c <_strtod_l+0x294>
 802d3c2:	e7e4      	b.n	802d38e <_strtod_l+0xe6>
 802d3c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 802d3c8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802d3cc:	e7df      	b.n	802d38e <_strtod_l+0xe6>
 802d3ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d3d0:	1c5a      	adds	r2, r3, #1
 802d3d2:	9219      	str	r2, [sp, #100]	@ 0x64
 802d3d4:	785b      	ldrb	r3, [r3, #1]
 802d3d6:	2b30      	cmp	r3, #48	@ 0x30
 802d3d8:	d0f9      	beq.n	802d3ce <_strtod_l+0x126>
 802d3da:	2b00      	cmp	r3, #0
 802d3dc:	d09d      	beq.n	802d31a <_strtod_l+0x72>
 802d3de:	2301      	movs	r3, #1
 802d3e0:	9309      	str	r3, [sp, #36]	@ 0x24
 802d3e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d3e4:	930c      	str	r3, [sp, #48]	@ 0x30
 802d3e6:	2300      	movs	r3, #0
 802d3e8:	9308      	str	r3, [sp, #32]
 802d3ea:	930a      	str	r3, [sp, #40]	@ 0x28
 802d3ec:	461f      	mov	r7, r3
 802d3ee:	220a      	movs	r2, #10
 802d3f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802d3f2:	7805      	ldrb	r5, [r0, #0]
 802d3f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 802d3f8:	b2d9      	uxtb	r1, r3
 802d3fa:	2909      	cmp	r1, #9
 802d3fc:	d928      	bls.n	802d450 <_strtod_l+0x1a8>
 802d3fe:	494e      	ldr	r1, [pc, #312]	@ (802d538 <_strtod_l+0x290>)
 802d400:	2201      	movs	r2, #1
 802d402:	f7f8 fb5a 	bl	8025aba <strncmp>
 802d406:	2800      	cmp	r0, #0
 802d408:	d032      	beq.n	802d470 <_strtod_l+0x1c8>
 802d40a:	2000      	movs	r0, #0
 802d40c:	462a      	mov	r2, r5
 802d40e:	4681      	mov	r9, r0
 802d410:	463d      	mov	r5, r7
 802d412:	4603      	mov	r3, r0
 802d414:	2a65      	cmp	r2, #101	@ 0x65
 802d416:	d001      	beq.n	802d41c <_strtod_l+0x174>
 802d418:	2a45      	cmp	r2, #69	@ 0x45
 802d41a:	d114      	bne.n	802d446 <_strtod_l+0x19e>
 802d41c:	b91d      	cbnz	r5, 802d426 <_strtod_l+0x17e>
 802d41e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d420:	4302      	orrs	r2, r0
 802d422:	d095      	beq.n	802d350 <_strtod_l+0xa8>
 802d424:	2500      	movs	r5, #0
 802d426:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 802d428:	1c62      	adds	r2, r4, #1
 802d42a:	9219      	str	r2, [sp, #100]	@ 0x64
 802d42c:	7862      	ldrb	r2, [r4, #1]
 802d42e:	2a2b      	cmp	r2, #43	@ 0x2b
 802d430:	d077      	beq.n	802d522 <_strtod_l+0x27a>
 802d432:	2a2d      	cmp	r2, #45	@ 0x2d
 802d434:	d07b      	beq.n	802d52e <_strtod_l+0x286>
 802d436:	f04f 0c00 	mov.w	ip, #0
 802d43a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 802d43e:	2909      	cmp	r1, #9
 802d440:	f240 8082 	bls.w	802d548 <_strtod_l+0x2a0>
 802d444:	9419      	str	r4, [sp, #100]	@ 0x64
 802d446:	f04f 0800 	mov.w	r8, #0
 802d44a:	e0a2      	b.n	802d592 <_strtod_l+0x2ea>
 802d44c:	2300      	movs	r3, #0
 802d44e:	e7c7      	b.n	802d3e0 <_strtod_l+0x138>
 802d450:	2f08      	cmp	r7, #8
 802d452:	bfd5      	itete	le
 802d454:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 802d456:	9908      	ldrgt	r1, [sp, #32]
 802d458:	fb02 3301 	mlale	r3, r2, r1, r3
 802d45c:	fb02 3301 	mlagt	r3, r2, r1, r3
 802d460:	f100 0001 	add.w	r0, r0, #1
 802d464:	bfd4      	ite	le
 802d466:	930a      	strle	r3, [sp, #40]	@ 0x28
 802d468:	9308      	strgt	r3, [sp, #32]
 802d46a:	3701      	adds	r7, #1
 802d46c:	9019      	str	r0, [sp, #100]	@ 0x64
 802d46e:	e7bf      	b.n	802d3f0 <_strtod_l+0x148>
 802d470:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d472:	1c5a      	adds	r2, r3, #1
 802d474:	9219      	str	r2, [sp, #100]	@ 0x64
 802d476:	785a      	ldrb	r2, [r3, #1]
 802d478:	b37f      	cbz	r7, 802d4da <_strtod_l+0x232>
 802d47a:	4681      	mov	r9, r0
 802d47c:	463d      	mov	r5, r7
 802d47e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 802d482:	2b09      	cmp	r3, #9
 802d484:	d912      	bls.n	802d4ac <_strtod_l+0x204>
 802d486:	2301      	movs	r3, #1
 802d488:	e7c4      	b.n	802d414 <_strtod_l+0x16c>
 802d48a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d48c:	1c5a      	adds	r2, r3, #1
 802d48e:	9219      	str	r2, [sp, #100]	@ 0x64
 802d490:	785a      	ldrb	r2, [r3, #1]
 802d492:	3001      	adds	r0, #1
 802d494:	2a30      	cmp	r2, #48	@ 0x30
 802d496:	d0f8      	beq.n	802d48a <_strtod_l+0x1e2>
 802d498:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 802d49c:	2b08      	cmp	r3, #8
 802d49e:	f200 84d3 	bhi.w	802de48 <_strtod_l+0xba0>
 802d4a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d4a4:	930c      	str	r3, [sp, #48]	@ 0x30
 802d4a6:	4681      	mov	r9, r0
 802d4a8:	2000      	movs	r0, #0
 802d4aa:	4605      	mov	r5, r0
 802d4ac:	3a30      	subs	r2, #48	@ 0x30
 802d4ae:	f100 0301 	add.w	r3, r0, #1
 802d4b2:	d02a      	beq.n	802d50a <_strtod_l+0x262>
 802d4b4:	4499      	add	r9, r3
 802d4b6:	eb00 0c05 	add.w	ip, r0, r5
 802d4ba:	462b      	mov	r3, r5
 802d4bc:	210a      	movs	r1, #10
 802d4be:	4563      	cmp	r3, ip
 802d4c0:	d10d      	bne.n	802d4de <_strtod_l+0x236>
 802d4c2:	1c69      	adds	r1, r5, #1
 802d4c4:	4401      	add	r1, r0
 802d4c6:	4428      	add	r0, r5
 802d4c8:	2808      	cmp	r0, #8
 802d4ca:	dc16      	bgt.n	802d4fa <_strtod_l+0x252>
 802d4cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802d4ce:	230a      	movs	r3, #10
 802d4d0:	fb03 2300 	mla	r3, r3, r0, r2
 802d4d4:	930a      	str	r3, [sp, #40]	@ 0x28
 802d4d6:	2300      	movs	r3, #0
 802d4d8:	e018      	b.n	802d50c <_strtod_l+0x264>
 802d4da:	4638      	mov	r0, r7
 802d4dc:	e7da      	b.n	802d494 <_strtod_l+0x1ec>
 802d4de:	2b08      	cmp	r3, #8
 802d4e0:	f103 0301 	add.w	r3, r3, #1
 802d4e4:	dc03      	bgt.n	802d4ee <_strtod_l+0x246>
 802d4e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802d4e8:	434e      	muls	r6, r1
 802d4ea:	960a      	str	r6, [sp, #40]	@ 0x28
 802d4ec:	e7e7      	b.n	802d4be <_strtod_l+0x216>
 802d4ee:	2b10      	cmp	r3, #16
 802d4f0:	bfde      	ittt	le
 802d4f2:	9e08      	ldrle	r6, [sp, #32]
 802d4f4:	434e      	mulle	r6, r1
 802d4f6:	9608      	strle	r6, [sp, #32]
 802d4f8:	e7e1      	b.n	802d4be <_strtod_l+0x216>
 802d4fa:	280f      	cmp	r0, #15
 802d4fc:	dceb      	bgt.n	802d4d6 <_strtod_l+0x22e>
 802d4fe:	9808      	ldr	r0, [sp, #32]
 802d500:	230a      	movs	r3, #10
 802d502:	fb03 2300 	mla	r3, r3, r0, r2
 802d506:	9308      	str	r3, [sp, #32]
 802d508:	e7e5      	b.n	802d4d6 <_strtod_l+0x22e>
 802d50a:	4629      	mov	r1, r5
 802d50c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d50e:	1c50      	adds	r0, r2, #1
 802d510:	9019      	str	r0, [sp, #100]	@ 0x64
 802d512:	7852      	ldrb	r2, [r2, #1]
 802d514:	4618      	mov	r0, r3
 802d516:	460d      	mov	r5, r1
 802d518:	e7b1      	b.n	802d47e <_strtod_l+0x1d6>
 802d51a:	f04f 0900 	mov.w	r9, #0
 802d51e:	2301      	movs	r3, #1
 802d520:	e77d      	b.n	802d41e <_strtod_l+0x176>
 802d522:	f04f 0c00 	mov.w	ip, #0
 802d526:	1ca2      	adds	r2, r4, #2
 802d528:	9219      	str	r2, [sp, #100]	@ 0x64
 802d52a:	78a2      	ldrb	r2, [r4, #2]
 802d52c:	e785      	b.n	802d43a <_strtod_l+0x192>
 802d52e:	f04f 0c01 	mov.w	ip, #1
 802d532:	e7f8      	b.n	802d526 <_strtod_l+0x27e>
 802d534:	08034774 	.word	0x08034774
 802d538:	080341da 	.word	0x080341da
 802d53c:	7ff00000 	.word	0x7ff00000
 802d540:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d542:	1c51      	adds	r1, r2, #1
 802d544:	9119      	str	r1, [sp, #100]	@ 0x64
 802d546:	7852      	ldrb	r2, [r2, #1]
 802d548:	2a30      	cmp	r2, #48	@ 0x30
 802d54a:	d0f9      	beq.n	802d540 <_strtod_l+0x298>
 802d54c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 802d550:	2908      	cmp	r1, #8
 802d552:	f63f af78 	bhi.w	802d446 <_strtod_l+0x19e>
 802d556:	3a30      	subs	r2, #48	@ 0x30
 802d558:	920e      	str	r2, [sp, #56]	@ 0x38
 802d55a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d55c:	920f      	str	r2, [sp, #60]	@ 0x3c
 802d55e:	f04f 080a 	mov.w	r8, #10
 802d562:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d564:	1c56      	adds	r6, r2, #1
 802d566:	9619      	str	r6, [sp, #100]	@ 0x64
 802d568:	7852      	ldrb	r2, [r2, #1]
 802d56a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 802d56e:	f1be 0f09 	cmp.w	lr, #9
 802d572:	d939      	bls.n	802d5e8 <_strtod_l+0x340>
 802d574:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802d576:	1a76      	subs	r6, r6, r1
 802d578:	2e08      	cmp	r6, #8
 802d57a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 802d57e:	dc03      	bgt.n	802d588 <_strtod_l+0x2e0>
 802d580:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802d582:	4588      	cmp	r8, r1
 802d584:	bfa8      	it	ge
 802d586:	4688      	movge	r8, r1
 802d588:	f1bc 0f00 	cmp.w	ip, #0
 802d58c:	d001      	beq.n	802d592 <_strtod_l+0x2ea>
 802d58e:	f1c8 0800 	rsb	r8, r8, #0
 802d592:	2d00      	cmp	r5, #0
 802d594:	d14e      	bne.n	802d634 <_strtod_l+0x38c>
 802d596:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802d598:	4308      	orrs	r0, r1
 802d59a:	f47f aebe 	bne.w	802d31a <_strtod_l+0x72>
 802d59e:	2b00      	cmp	r3, #0
 802d5a0:	f47f aed6 	bne.w	802d350 <_strtod_l+0xa8>
 802d5a4:	2a69      	cmp	r2, #105	@ 0x69
 802d5a6:	d028      	beq.n	802d5fa <_strtod_l+0x352>
 802d5a8:	dc25      	bgt.n	802d5f6 <_strtod_l+0x34e>
 802d5aa:	2a49      	cmp	r2, #73	@ 0x49
 802d5ac:	d025      	beq.n	802d5fa <_strtod_l+0x352>
 802d5ae:	2a4e      	cmp	r2, #78	@ 0x4e
 802d5b0:	f47f aece 	bne.w	802d350 <_strtod_l+0xa8>
 802d5b4:	499b      	ldr	r1, [pc, #620]	@ (802d824 <_strtod_l+0x57c>)
 802d5b6:	a819      	add	r0, sp, #100	@ 0x64
 802d5b8:	f001 fb18 	bl	802ebec <__match>
 802d5bc:	2800      	cmp	r0, #0
 802d5be:	f43f aec7 	beq.w	802d350 <_strtod_l+0xa8>
 802d5c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d5c4:	781b      	ldrb	r3, [r3, #0]
 802d5c6:	2b28      	cmp	r3, #40	@ 0x28
 802d5c8:	d12e      	bne.n	802d628 <_strtod_l+0x380>
 802d5ca:	4997      	ldr	r1, [pc, #604]	@ (802d828 <_strtod_l+0x580>)
 802d5cc:	aa1c      	add	r2, sp, #112	@ 0x70
 802d5ce:	a819      	add	r0, sp, #100	@ 0x64
 802d5d0:	f001 fb20 	bl	802ec14 <__hexnan>
 802d5d4:	2805      	cmp	r0, #5
 802d5d6:	d127      	bne.n	802d628 <_strtod_l+0x380>
 802d5d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802d5da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 802d5de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 802d5e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 802d5e6:	e698      	b.n	802d31a <_strtod_l+0x72>
 802d5e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802d5ea:	fb08 2101 	mla	r1, r8, r1, r2
 802d5ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 802d5f2:	920e      	str	r2, [sp, #56]	@ 0x38
 802d5f4:	e7b5      	b.n	802d562 <_strtod_l+0x2ba>
 802d5f6:	2a6e      	cmp	r2, #110	@ 0x6e
 802d5f8:	e7da      	b.n	802d5b0 <_strtod_l+0x308>
 802d5fa:	498c      	ldr	r1, [pc, #560]	@ (802d82c <_strtod_l+0x584>)
 802d5fc:	a819      	add	r0, sp, #100	@ 0x64
 802d5fe:	f001 faf5 	bl	802ebec <__match>
 802d602:	2800      	cmp	r0, #0
 802d604:	f43f aea4 	beq.w	802d350 <_strtod_l+0xa8>
 802d608:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d60a:	4989      	ldr	r1, [pc, #548]	@ (802d830 <_strtod_l+0x588>)
 802d60c:	3b01      	subs	r3, #1
 802d60e:	a819      	add	r0, sp, #100	@ 0x64
 802d610:	9319      	str	r3, [sp, #100]	@ 0x64
 802d612:	f001 faeb 	bl	802ebec <__match>
 802d616:	b910      	cbnz	r0, 802d61e <_strtod_l+0x376>
 802d618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d61a:	3301      	adds	r3, #1
 802d61c:	9319      	str	r3, [sp, #100]	@ 0x64
 802d61e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 802d840 <_strtod_l+0x598>
 802d622:	f04f 0a00 	mov.w	sl, #0
 802d626:	e678      	b.n	802d31a <_strtod_l+0x72>
 802d628:	4882      	ldr	r0, [pc, #520]	@ (802d834 <_strtod_l+0x58c>)
 802d62a:	f001 f805 	bl	802e638 <nan>
 802d62e:	ec5b ab10 	vmov	sl, fp, d0
 802d632:	e672      	b.n	802d31a <_strtod_l+0x72>
 802d634:	eba8 0309 	sub.w	r3, r8, r9
 802d638:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802d63a:	9309      	str	r3, [sp, #36]	@ 0x24
 802d63c:	2f00      	cmp	r7, #0
 802d63e:	bf08      	it	eq
 802d640:	462f      	moveq	r7, r5
 802d642:	2d10      	cmp	r5, #16
 802d644:	462c      	mov	r4, r5
 802d646:	bfa8      	it	ge
 802d648:	2410      	movge	r4, #16
 802d64a:	f7d2 ff73 	bl	8000534 <__aeabi_ui2d>
 802d64e:	2d09      	cmp	r5, #9
 802d650:	4682      	mov	sl, r0
 802d652:	468b      	mov	fp, r1
 802d654:	dc13      	bgt.n	802d67e <_strtod_l+0x3d6>
 802d656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d658:	2b00      	cmp	r3, #0
 802d65a:	f43f ae5e 	beq.w	802d31a <_strtod_l+0x72>
 802d65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d660:	dd78      	ble.n	802d754 <_strtod_l+0x4ac>
 802d662:	2b16      	cmp	r3, #22
 802d664:	dc5f      	bgt.n	802d726 <_strtod_l+0x47e>
 802d666:	4974      	ldr	r1, [pc, #464]	@ (802d838 <_strtod_l+0x590>)
 802d668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802d66c:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d670:	4652      	mov	r2, sl
 802d672:	465b      	mov	r3, fp
 802d674:	f7d2 ffd8 	bl	8000628 <__aeabi_dmul>
 802d678:	4682      	mov	sl, r0
 802d67a:	468b      	mov	fp, r1
 802d67c:	e64d      	b.n	802d31a <_strtod_l+0x72>
 802d67e:	4b6e      	ldr	r3, [pc, #440]	@ (802d838 <_strtod_l+0x590>)
 802d680:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802d684:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 802d688:	f7d2 ffce 	bl	8000628 <__aeabi_dmul>
 802d68c:	4682      	mov	sl, r0
 802d68e:	9808      	ldr	r0, [sp, #32]
 802d690:	468b      	mov	fp, r1
 802d692:	f7d2 ff4f 	bl	8000534 <__aeabi_ui2d>
 802d696:	4602      	mov	r2, r0
 802d698:	460b      	mov	r3, r1
 802d69a:	4650      	mov	r0, sl
 802d69c:	4659      	mov	r1, fp
 802d69e:	f7d2 fe0d 	bl	80002bc <__adddf3>
 802d6a2:	2d0f      	cmp	r5, #15
 802d6a4:	4682      	mov	sl, r0
 802d6a6:	468b      	mov	fp, r1
 802d6a8:	ddd5      	ble.n	802d656 <_strtod_l+0x3ae>
 802d6aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d6ac:	1b2c      	subs	r4, r5, r4
 802d6ae:	441c      	add	r4, r3
 802d6b0:	2c00      	cmp	r4, #0
 802d6b2:	f340 8096 	ble.w	802d7e2 <_strtod_l+0x53a>
 802d6b6:	f014 030f 	ands.w	r3, r4, #15
 802d6ba:	d00a      	beq.n	802d6d2 <_strtod_l+0x42a>
 802d6bc:	495e      	ldr	r1, [pc, #376]	@ (802d838 <_strtod_l+0x590>)
 802d6be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802d6c2:	4652      	mov	r2, sl
 802d6c4:	465b      	mov	r3, fp
 802d6c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d6ca:	f7d2 ffad 	bl	8000628 <__aeabi_dmul>
 802d6ce:	4682      	mov	sl, r0
 802d6d0:	468b      	mov	fp, r1
 802d6d2:	f034 040f 	bics.w	r4, r4, #15
 802d6d6:	d073      	beq.n	802d7c0 <_strtod_l+0x518>
 802d6d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 802d6dc:	dd48      	ble.n	802d770 <_strtod_l+0x4c8>
 802d6de:	2400      	movs	r4, #0
 802d6e0:	46a0      	mov	r8, r4
 802d6e2:	940a      	str	r4, [sp, #40]	@ 0x28
 802d6e4:	46a1      	mov	r9, r4
 802d6e6:	9a05      	ldr	r2, [sp, #20]
 802d6e8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 802d840 <_strtod_l+0x598>
 802d6ec:	2322      	movs	r3, #34	@ 0x22
 802d6ee:	6013      	str	r3, [r2, #0]
 802d6f0:	f04f 0a00 	mov.w	sl, #0
 802d6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d6f6:	2b00      	cmp	r3, #0
 802d6f8:	f43f ae0f 	beq.w	802d31a <_strtod_l+0x72>
 802d6fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802d6fe:	9805      	ldr	r0, [sp, #20]
 802d700:	f7fe ff37 	bl	802c572 <_Bfree>
 802d704:	9805      	ldr	r0, [sp, #20]
 802d706:	4649      	mov	r1, r9
 802d708:	f7fe ff33 	bl	802c572 <_Bfree>
 802d70c:	9805      	ldr	r0, [sp, #20]
 802d70e:	4641      	mov	r1, r8
 802d710:	f7fe ff2f 	bl	802c572 <_Bfree>
 802d714:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802d716:	9805      	ldr	r0, [sp, #20]
 802d718:	f7fe ff2b 	bl	802c572 <_Bfree>
 802d71c:	9805      	ldr	r0, [sp, #20]
 802d71e:	4621      	mov	r1, r4
 802d720:	f7fe ff27 	bl	802c572 <_Bfree>
 802d724:	e5f9      	b.n	802d31a <_strtod_l+0x72>
 802d726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d728:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 802d72c:	4293      	cmp	r3, r2
 802d72e:	dbbc      	blt.n	802d6aa <_strtod_l+0x402>
 802d730:	4c41      	ldr	r4, [pc, #260]	@ (802d838 <_strtod_l+0x590>)
 802d732:	f1c5 050f 	rsb	r5, r5, #15
 802d736:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 802d73a:	4652      	mov	r2, sl
 802d73c:	465b      	mov	r3, fp
 802d73e:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d742:	f7d2 ff71 	bl	8000628 <__aeabi_dmul>
 802d746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d748:	1b5d      	subs	r5, r3, r5
 802d74a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802d74e:	e9d4 2300 	ldrd	r2, r3, [r4]
 802d752:	e78f      	b.n	802d674 <_strtod_l+0x3cc>
 802d754:	3316      	adds	r3, #22
 802d756:	dba8      	blt.n	802d6aa <_strtod_l+0x402>
 802d758:	4b37      	ldr	r3, [pc, #220]	@ (802d838 <_strtod_l+0x590>)
 802d75a:	eba9 0808 	sub.w	r8, r9, r8
 802d75e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 802d762:	e9d8 2300 	ldrd	r2, r3, [r8]
 802d766:	4650      	mov	r0, sl
 802d768:	4659      	mov	r1, fp
 802d76a:	f7d3 f887 	bl	800087c <__aeabi_ddiv>
 802d76e:	e783      	b.n	802d678 <_strtod_l+0x3d0>
 802d770:	4b32      	ldr	r3, [pc, #200]	@ (802d83c <_strtod_l+0x594>)
 802d772:	9308      	str	r3, [sp, #32]
 802d774:	2300      	movs	r3, #0
 802d776:	1124      	asrs	r4, r4, #4
 802d778:	4650      	mov	r0, sl
 802d77a:	4659      	mov	r1, fp
 802d77c:	461e      	mov	r6, r3
 802d77e:	2c01      	cmp	r4, #1
 802d780:	dc21      	bgt.n	802d7c6 <_strtod_l+0x51e>
 802d782:	b10b      	cbz	r3, 802d788 <_strtod_l+0x4e0>
 802d784:	4682      	mov	sl, r0
 802d786:	468b      	mov	fp, r1
 802d788:	492c      	ldr	r1, [pc, #176]	@ (802d83c <_strtod_l+0x594>)
 802d78a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802d78e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 802d792:	4652      	mov	r2, sl
 802d794:	465b      	mov	r3, fp
 802d796:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d79a:	f7d2 ff45 	bl	8000628 <__aeabi_dmul>
 802d79e:	4b28      	ldr	r3, [pc, #160]	@ (802d840 <_strtod_l+0x598>)
 802d7a0:	460a      	mov	r2, r1
 802d7a2:	400b      	ands	r3, r1
 802d7a4:	4927      	ldr	r1, [pc, #156]	@ (802d844 <_strtod_l+0x59c>)
 802d7a6:	428b      	cmp	r3, r1
 802d7a8:	4682      	mov	sl, r0
 802d7aa:	d898      	bhi.n	802d6de <_strtod_l+0x436>
 802d7ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 802d7b0:	428b      	cmp	r3, r1
 802d7b2:	bf86      	itte	hi
 802d7b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 802d848 <_strtod_l+0x5a0>
 802d7b8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 802d7bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 802d7c0:	2300      	movs	r3, #0
 802d7c2:	9308      	str	r3, [sp, #32]
 802d7c4:	e07a      	b.n	802d8bc <_strtod_l+0x614>
 802d7c6:	07e2      	lsls	r2, r4, #31
 802d7c8:	d505      	bpl.n	802d7d6 <_strtod_l+0x52e>
 802d7ca:	9b08      	ldr	r3, [sp, #32]
 802d7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d7d0:	f7d2 ff2a 	bl	8000628 <__aeabi_dmul>
 802d7d4:	2301      	movs	r3, #1
 802d7d6:	9a08      	ldr	r2, [sp, #32]
 802d7d8:	3208      	adds	r2, #8
 802d7da:	3601      	adds	r6, #1
 802d7dc:	1064      	asrs	r4, r4, #1
 802d7de:	9208      	str	r2, [sp, #32]
 802d7e0:	e7cd      	b.n	802d77e <_strtod_l+0x4d6>
 802d7e2:	d0ed      	beq.n	802d7c0 <_strtod_l+0x518>
 802d7e4:	4264      	negs	r4, r4
 802d7e6:	f014 020f 	ands.w	r2, r4, #15
 802d7ea:	d00a      	beq.n	802d802 <_strtod_l+0x55a>
 802d7ec:	4b12      	ldr	r3, [pc, #72]	@ (802d838 <_strtod_l+0x590>)
 802d7ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802d7f2:	4650      	mov	r0, sl
 802d7f4:	4659      	mov	r1, fp
 802d7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d7fa:	f7d3 f83f 	bl	800087c <__aeabi_ddiv>
 802d7fe:	4682      	mov	sl, r0
 802d800:	468b      	mov	fp, r1
 802d802:	1124      	asrs	r4, r4, #4
 802d804:	d0dc      	beq.n	802d7c0 <_strtod_l+0x518>
 802d806:	2c1f      	cmp	r4, #31
 802d808:	dd20      	ble.n	802d84c <_strtod_l+0x5a4>
 802d80a:	2400      	movs	r4, #0
 802d80c:	46a0      	mov	r8, r4
 802d80e:	940a      	str	r4, [sp, #40]	@ 0x28
 802d810:	46a1      	mov	r9, r4
 802d812:	9a05      	ldr	r2, [sp, #20]
 802d814:	2322      	movs	r3, #34	@ 0x22
 802d816:	f04f 0a00 	mov.w	sl, #0
 802d81a:	f04f 0b00 	mov.w	fp, #0
 802d81e:	6013      	str	r3, [r2, #0]
 802d820:	e768      	b.n	802d6f4 <_strtod_l+0x44c>
 802d822:	bf00      	nop
 802d824:	080341dd 	.word	0x080341dd
 802d828:	08034760 	.word	0x08034760
 802d82c:	0803404d 	.word	0x0803404d
 802d830:	08034508 	.word	0x08034508
 802d834:	08034047 	.word	0x08034047
 802d838:	08034698 	.word	0x08034698
 802d83c:	08034670 	.word	0x08034670
 802d840:	7ff00000 	.word	0x7ff00000
 802d844:	7ca00000 	.word	0x7ca00000
 802d848:	7fefffff 	.word	0x7fefffff
 802d84c:	f014 0310 	ands.w	r3, r4, #16
 802d850:	bf18      	it	ne
 802d852:	236a      	movne	r3, #106	@ 0x6a
 802d854:	4ea9      	ldr	r6, [pc, #676]	@ (802dafc <_strtod_l+0x854>)
 802d856:	9308      	str	r3, [sp, #32]
 802d858:	4650      	mov	r0, sl
 802d85a:	4659      	mov	r1, fp
 802d85c:	2300      	movs	r3, #0
 802d85e:	07e2      	lsls	r2, r4, #31
 802d860:	d504      	bpl.n	802d86c <_strtod_l+0x5c4>
 802d862:	e9d6 2300 	ldrd	r2, r3, [r6]
 802d866:	f7d2 fedf 	bl	8000628 <__aeabi_dmul>
 802d86a:	2301      	movs	r3, #1
 802d86c:	1064      	asrs	r4, r4, #1
 802d86e:	f106 0608 	add.w	r6, r6, #8
 802d872:	d1f4      	bne.n	802d85e <_strtod_l+0x5b6>
 802d874:	b10b      	cbz	r3, 802d87a <_strtod_l+0x5d2>
 802d876:	4682      	mov	sl, r0
 802d878:	468b      	mov	fp, r1
 802d87a:	9b08      	ldr	r3, [sp, #32]
 802d87c:	b1b3      	cbz	r3, 802d8ac <_strtod_l+0x604>
 802d87e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 802d882:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 802d886:	2b00      	cmp	r3, #0
 802d888:	4659      	mov	r1, fp
 802d88a:	dd0f      	ble.n	802d8ac <_strtod_l+0x604>
 802d88c:	2b1f      	cmp	r3, #31
 802d88e:	dd55      	ble.n	802d93c <_strtod_l+0x694>
 802d890:	2b34      	cmp	r3, #52	@ 0x34
 802d892:	bfde      	ittt	le
 802d894:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 802d898:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 802d89c:	4093      	lslle	r3, r2
 802d89e:	f04f 0a00 	mov.w	sl, #0
 802d8a2:	bfcc      	ite	gt
 802d8a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 802d8a8:	ea03 0b01 	andle.w	fp, r3, r1
 802d8ac:	2200      	movs	r2, #0
 802d8ae:	2300      	movs	r3, #0
 802d8b0:	4650      	mov	r0, sl
 802d8b2:	4659      	mov	r1, fp
 802d8b4:	f7d3 f920 	bl	8000af8 <__aeabi_dcmpeq>
 802d8b8:	2800      	cmp	r0, #0
 802d8ba:	d1a6      	bne.n	802d80a <_strtod_l+0x562>
 802d8bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d8be:	9300      	str	r3, [sp, #0]
 802d8c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802d8c2:	9805      	ldr	r0, [sp, #20]
 802d8c4:	462b      	mov	r3, r5
 802d8c6:	463a      	mov	r2, r7
 802d8c8:	f7fe fea2 	bl	802c610 <__s2b>
 802d8cc:	900a      	str	r0, [sp, #40]	@ 0x28
 802d8ce:	2800      	cmp	r0, #0
 802d8d0:	f43f af05 	beq.w	802d6de <_strtod_l+0x436>
 802d8d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d8d6:	2a00      	cmp	r2, #0
 802d8d8:	eba9 0308 	sub.w	r3, r9, r8
 802d8dc:	bfa8      	it	ge
 802d8de:	2300      	movge	r3, #0
 802d8e0:	9312      	str	r3, [sp, #72]	@ 0x48
 802d8e2:	2400      	movs	r4, #0
 802d8e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802d8e8:	9316      	str	r3, [sp, #88]	@ 0x58
 802d8ea:	46a0      	mov	r8, r4
 802d8ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d8ee:	9805      	ldr	r0, [sp, #20]
 802d8f0:	6859      	ldr	r1, [r3, #4]
 802d8f2:	f7fe fe19 	bl	802c528 <_Balloc>
 802d8f6:	4681      	mov	r9, r0
 802d8f8:	2800      	cmp	r0, #0
 802d8fa:	f43f aef4 	beq.w	802d6e6 <_strtod_l+0x43e>
 802d8fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d900:	691a      	ldr	r2, [r3, #16]
 802d902:	3202      	adds	r2, #2
 802d904:	f103 010c 	add.w	r1, r3, #12
 802d908:	0092      	lsls	r2, r2, #2
 802d90a:	300c      	adds	r0, #12
 802d90c:	f7f9 fadc 	bl	8026ec8 <memcpy>
 802d910:	ec4b ab10 	vmov	d0, sl, fp
 802d914:	9805      	ldr	r0, [sp, #20]
 802d916:	aa1c      	add	r2, sp, #112	@ 0x70
 802d918:	a91b      	add	r1, sp, #108	@ 0x6c
 802d91a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 802d91e:	f7ff f999 	bl	802cc54 <__d2b>
 802d922:	901a      	str	r0, [sp, #104]	@ 0x68
 802d924:	2800      	cmp	r0, #0
 802d926:	f43f aede 	beq.w	802d6e6 <_strtod_l+0x43e>
 802d92a:	9805      	ldr	r0, [sp, #20]
 802d92c:	2101      	movs	r1, #1
 802d92e:	f7fe ff05 	bl	802c73c <__i2b>
 802d932:	4680      	mov	r8, r0
 802d934:	b948      	cbnz	r0, 802d94a <_strtod_l+0x6a2>
 802d936:	f04f 0800 	mov.w	r8, #0
 802d93a:	e6d4      	b.n	802d6e6 <_strtod_l+0x43e>
 802d93c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802d940:	fa02 f303 	lsl.w	r3, r2, r3
 802d944:	ea03 0a0a 	and.w	sl, r3, sl
 802d948:	e7b0      	b.n	802d8ac <_strtod_l+0x604>
 802d94a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 802d94c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802d94e:	2d00      	cmp	r5, #0
 802d950:	bfab      	itete	ge
 802d952:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 802d954:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 802d956:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 802d958:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 802d95a:	bfac      	ite	ge
 802d95c:	18ef      	addge	r7, r5, r3
 802d95e:	1b5e      	sublt	r6, r3, r5
 802d960:	9b08      	ldr	r3, [sp, #32]
 802d962:	1aed      	subs	r5, r5, r3
 802d964:	4415      	add	r5, r2
 802d966:	4b66      	ldr	r3, [pc, #408]	@ (802db00 <_strtod_l+0x858>)
 802d968:	3d01      	subs	r5, #1
 802d96a:	429d      	cmp	r5, r3
 802d96c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 802d970:	da50      	bge.n	802da14 <_strtod_l+0x76c>
 802d972:	1b5b      	subs	r3, r3, r5
 802d974:	2b1f      	cmp	r3, #31
 802d976:	eba2 0203 	sub.w	r2, r2, r3
 802d97a:	f04f 0101 	mov.w	r1, #1
 802d97e:	dc3d      	bgt.n	802d9fc <_strtod_l+0x754>
 802d980:	fa01 f303 	lsl.w	r3, r1, r3
 802d984:	9313      	str	r3, [sp, #76]	@ 0x4c
 802d986:	2300      	movs	r3, #0
 802d988:	9310      	str	r3, [sp, #64]	@ 0x40
 802d98a:	18bd      	adds	r5, r7, r2
 802d98c:	9b08      	ldr	r3, [sp, #32]
 802d98e:	42af      	cmp	r7, r5
 802d990:	4416      	add	r6, r2
 802d992:	441e      	add	r6, r3
 802d994:	463b      	mov	r3, r7
 802d996:	bfa8      	it	ge
 802d998:	462b      	movge	r3, r5
 802d99a:	42b3      	cmp	r3, r6
 802d99c:	bfa8      	it	ge
 802d99e:	4633      	movge	r3, r6
 802d9a0:	2b00      	cmp	r3, #0
 802d9a2:	bfc2      	ittt	gt
 802d9a4:	1aed      	subgt	r5, r5, r3
 802d9a6:	1af6      	subgt	r6, r6, r3
 802d9a8:	1aff      	subgt	r7, r7, r3
 802d9aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802d9ac:	2b00      	cmp	r3, #0
 802d9ae:	dd16      	ble.n	802d9de <_strtod_l+0x736>
 802d9b0:	4641      	mov	r1, r8
 802d9b2:	9805      	ldr	r0, [sp, #20]
 802d9b4:	461a      	mov	r2, r3
 802d9b6:	f7fe ff81 	bl	802c8bc <__pow5mult>
 802d9ba:	4680      	mov	r8, r0
 802d9bc:	2800      	cmp	r0, #0
 802d9be:	d0ba      	beq.n	802d936 <_strtod_l+0x68e>
 802d9c0:	4601      	mov	r1, r0
 802d9c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802d9c4:	9805      	ldr	r0, [sp, #20]
 802d9c6:	f7fe fecf 	bl	802c768 <__multiply>
 802d9ca:	900e      	str	r0, [sp, #56]	@ 0x38
 802d9cc:	2800      	cmp	r0, #0
 802d9ce:	f43f ae8a 	beq.w	802d6e6 <_strtod_l+0x43e>
 802d9d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802d9d4:	9805      	ldr	r0, [sp, #20]
 802d9d6:	f7fe fdcc 	bl	802c572 <_Bfree>
 802d9da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802d9dc:	931a      	str	r3, [sp, #104]	@ 0x68
 802d9de:	2d00      	cmp	r5, #0
 802d9e0:	dc1d      	bgt.n	802da1e <_strtod_l+0x776>
 802d9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d9e4:	2b00      	cmp	r3, #0
 802d9e6:	dd23      	ble.n	802da30 <_strtod_l+0x788>
 802d9e8:	4649      	mov	r1, r9
 802d9ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802d9ec:	9805      	ldr	r0, [sp, #20]
 802d9ee:	f7fe ff65 	bl	802c8bc <__pow5mult>
 802d9f2:	4681      	mov	r9, r0
 802d9f4:	b9e0      	cbnz	r0, 802da30 <_strtod_l+0x788>
 802d9f6:	f04f 0900 	mov.w	r9, #0
 802d9fa:	e674      	b.n	802d6e6 <_strtod_l+0x43e>
 802d9fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 802da00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 802da04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 802da08:	35e2      	adds	r5, #226	@ 0xe2
 802da0a:	fa01 f305 	lsl.w	r3, r1, r5
 802da0e:	9310      	str	r3, [sp, #64]	@ 0x40
 802da10:	9113      	str	r1, [sp, #76]	@ 0x4c
 802da12:	e7ba      	b.n	802d98a <_strtod_l+0x6e2>
 802da14:	2300      	movs	r3, #0
 802da16:	9310      	str	r3, [sp, #64]	@ 0x40
 802da18:	2301      	movs	r3, #1
 802da1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802da1c:	e7b5      	b.n	802d98a <_strtod_l+0x6e2>
 802da1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802da20:	9805      	ldr	r0, [sp, #20]
 802da22:	462a      	mov	r2, r5
 802da24:	f7fe ff8a 	bl	802c93c <__lshift>
 802da28:	901a      	str	r0, [sp, #104]	@ 0x68
 802da2a:	2800      	cmp	r0, #0
 802da2c:	d1d9      	bne.n	802d9e2 <_strtod_l+0x73a>
 802da2e:	e65a      	b.n	802d6e6 <_strtod_l+0x43e>
 802da30:	2e00      	cmp	r6, #0
 802da32:	dd07      	ble.n	802da44 <_strtod_l+0x79c>
 802da34:	4649      	mov	r1, r9
 802da36:	9805      	ldr	r0, [sp, #20]
 802da38:	4632      	mov	r2, r6
 802da3a:	f7fe ff7f 	bl	802c93c <__lshift>
 802da3e:	4681      	mov	r9, r0
 802da40:	2800      	cmp	r0, #0
 802da42:	d0d8      	beq.n	802d9f6 <_strtod_l+0x74e>
 802da44:	2f00      	cmp	r7, #0
 802da46:	dd08      	ble.n	802da5a <_strtod_l+0x7b2>
 802da48:	4641      	mov	r1, r8
 802da4a:	9805      	ldr	r0, [sp, #20]
 802da4c:	463a      	mov	r2, r7
 802da4e:	f7fe ff75 	bl	802c93c <__lshift>
 802da52:	4680      	mov	r8, r0
 802da54:	2800      	cmp	r0, #0
 802da56:	f43f ae46 	beq.w	802d6e6 <_strtod_l+0x43e>
 802da5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802da5c:	9805      	ldr	r0, [sp, #20]
 802da5e:	464a      	mov	r2, r9
 802da60:	f7fe fff4 	bl	802ca4c <__mdiff>
 802da64:	4604      	mov	r4, r0
 802da66:	2800      	cmp	r0, #0
 802da68:	f43f ae3d 	beq.w	802d6e6 <_strtod_l+0x43e>
 802da6c:	68c3      	ldr	r3, [r0, #12]
 802da6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802da70:	2300      	movs	r3, #0
 802da72:	60c3      	str	r3, [r0, #12]
 802da74:	4641      	mov	r1, r8
 802da76:	f7fe ffcd 	bl	802ca14 <__mcmp>
 802da7a:	2800      	cmp	r0, #0
 802da7c:	da46      	bge.n	802db0c <_strtod_l+0x864>
 802da7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802da80:	ea53 030a 	orrs.w	r3, r3, sl
 802da84:	d16c      	bne.n	802db60 <_strtod_l+0x8b8>
 802da86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802da8a:	2b00      	cmp	r3, #0
 802da8c:	d168      	bne.n	802db60 <_strtod_l+0x8b8>
 802da8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802da92:	0d1b      	lsrs	r3, r3, #20
 802da94:	051b      	lsls	r3, r3, #20
 802da96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802da9a:	d961      	bls.n	802db60 <_strtod_l+0x8b8>
 802da9c:	6963      	ldr	r3, [r4, #20]
 802da9e:	b913      	cbnz	r3, 802daa6 <_strtod_l+0x7fe>
 802daa0:	6923      	ldr	r3, [r4, #16]
 802daa2:	2b01      	cmp	r3, #1
 802daa4:	dd5c      	ble.n	802db60 <_strtod_l+0x8b8>
 802daa6:	4621      	mov	r1, r4
 802daa8:	2201      	movs	r2, #1
 802daaa:	9805      	ldr	r0, [sp, #20]
 802daac:	f7fe ff46 	bl	802c93c <__lshift>
 802dab0:	4641      	mov	r1, r8
 802dab2:	4604      	mov	r4, r0
 802dab4:	f7fe ffae 	bl	802ca14 <__mcmp>
 802dab8:	2800      	cmp	r0, #0
 802daba:	dd51      	ble.n	802db60 <_strtod_l+0x8b8>
 802dabc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802dac0:	9a08      	ldr	r2, [sp, #32]
 802dac2:	0d1b      	lsrs	r3, r3, #20
 802dac4:	051b      	lsls	r3, r3, #20
 802dac6:	2a00      	cmp	r2, #0
 802dac8:	d06b      	beq.n	802dba2 <_strtod_l+0x8fa>
 802daca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802dace:	d868      	bhi.n	802dba2 <_strtod_l+0x8fa>
 802dad0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 802dad4:	f67f ae9d 	bls.w	802d812 <_strtod_l+0x56a>
 802dad8:	4b0a      	ldr	r3, [pc, #40]	@ (802db04 <_strtod_l+0x85c>)
 802dada:	4650      	mov	r0, sl
 802dadc:	4659      	mov	r1, fp
 802dade:	2200      	movs	r2, #0
 802dae0:	f7d2 fda2 	bl	8000628 <__aeabi_dmul>
 802dae4:	4b08      	ldr	r3, [pc, #32]	@ (802db08 <_strtod_l+0x860>)
 802dae6:	400b      	ands	r3, r1
 802dae8:	4682      	mov	sl, r0
 802daea:	468b      	mov	fp, r1
 802daec:	2b00      	cmp	r3, #0
 802daee:	f47f ae05 	bne.w	802d6fc <_strtod_l+0x454>
 802daf2:	9a05      	ldr	r2, [sp, #20]
 802daf4:	2322      	movs	r3, #34	@ 0x22
 802daf6:	6013      	str	r3, [r2, #0]
 802daf8:	e600      	b.n	802d6fc <_strtod_l+0x454>
 802dafa:	bf00      	nop
 802dafc:	08034788 	.word	0x08034788
 802db00:	fffffc02 	.word	0xfffffc02
 802db04:	39500000 	.word	0x39500000
 802db08:	7ff00000 	.word	0x7ff00000
 802db0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 802db10:	d165      	bne.n	802dbde <_strtod_l+0x936>
 802db12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802db14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802db18:	b35a      	cbz	r2, 802db72 <_strtod_l+0x8ca>
 802db1a:	4a9f      	ldr	r2, [pc, #636]	@ (802dd98 <_strtod_l+0xaf0>)
 802db1c:	4293      	cmp	r3, r2
 802db1e:	d12b      	bne.n	802db78 <_strtod_l+0x8d0>
 802db20:	9b08      	ldr	r3, [sp, #32]
 802db22:	4651      	mov	r1, sl
 802db24:	b303      	cbz	r3, 802db68 <_strtod_l+0x8c0>
 802db26:	4b9d      	ldr	r3, [pc, #628]	@ (802dd9c <_strtod_l+0xaf4>)
 802db28:	465a      	mov	r2, fp
 802db2a:	4013      	ands	r3, r2
 802db2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 802db30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802db34:	d81b      	bhi.n	802db6e <_strtod_l+0x8c6>
 802db36:	0d1b      	lsrs	r3, r3, #20
 802db38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802db3c:	fa02 f303 	lsl.w	r3, r2, r3
 802db40:	4299      	cmp	r1, r3
 802db42:	d119      	bne.n	802db78 <_strtod_l+0x8d0>
 802db44:	4b96      	ldr	r3, [pc, #600]	@ (802dda0 <_strtod_l+0xaf8>)
 802db46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802db48:	429a      	cmp	r2, r3
 802db4a:	d102      	bne.n	802db52 <_strtod_l+0x8aa>
 802db4c:	3101      	adds	r1, #1
 802db4e:	f43f adca 	beq.w	802d6e6 <_strtod_l+0x43e>
 802db52:	4b92      	ldr	r3, [pc, #584]	@ (802dd9c <_strtod_l+0xaf4>)
 802db54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802db56:	401a      	ands	r2, r3
 802db58:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 802db5c:	f04f 0a00 	mov.w	sl, #0
 802db60:	9b08      	ldr	r3, [sp, #32]
 802db62:	2b00      	cmp	r3, #0
 802db64:	d1b8      	bne.n	802dad8 <_strtod_l+0x830>
 802db66:	e5c9      	b.n	802d6fc <_strtod_l+0x454>
 802db68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802db6c:	e7e8      	b.n	802db40 <_strtod_l+0x898>
 802db6e:	4613      	mov	r3, r2
 802db70:	e7e6      	b.n	802db40 <_strtod_l+0x898>
 802db72:	ea53 030a 	orrs.w	r3, r3, sl
 802db76:	d0a1      	beq.n	802dabc <_strtod_l+0x814>
 802db78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802db7a:	b1db      	cbz	r3, 802dbb4 <_strtod_l+0x90c>
 802db7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802db7e:	4213      	tst	r3, r2
 802db80:	d0ee      	beq.n	802db60 <_strtod_l+0x8b8>
 802db82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802db84:	9a08      	ldr	r2, [sp, #32]
 802db86:	4650      	mov	r0, sl
 802db88:	4659      	mov	r1, fp
 802db8a:	b1bb      	cbz	r3, 802dbbc <_strtod_l+0x914>
 802db8c:	f7ff fb6e 	bl	802d26c <sulp>
 802db90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802db94:	ec53 2b10 	vmov	r2, r3, d0
 802db98:	f7d2 fb90 	bl	80002bc <__adddf3>
 802db9c:	4682      	mov	sl, r0
 802db9e:	468b      	mov	fp, r1
 802dba0:	e7de      	b.n	802db60 <_strtod_l+0x8b8>
 802dba2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802dba6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802dbaa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802dbae:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802dbb2:	e7d5      	b.n	802db60 <_strtod_l+0x8b8>
 802dbb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802dbb6:	ea13 0f0a 	tst.w	r3, sl
 802dbba:	e7e1      	b.n	802db80 <_strtod_l+0x8d8>
 802dbbc:	f7ff fb56 	bl	802d26c <sulp>
 802dbc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802dbc4:	ec53 2b10 	vmov	r2, r3, d0
 802dbc8:	f7d2 fb76 	bl	80002b8 <__aeabi_dsub>
 802dbcc:	2200      	movs	r2, #0
 802dbce:	2300      	movs	r3, #0
 802dbd0:	4682      	mov	sl, r0
 802dbd2:	468b      	mov	fp, r1
 802dbd4:	f7d2 ff90 	bl	8000af8 <__aeabi_dcmpeq>
 802dbd8:	2800      	cmp	r0, #0
 802dbda:	d0c1      	beq.n	802db60 <_strtod_l+0x8b8>
 802dbdc:	e619      	b.n	802d812 <_strtod_l+0x56a>
 802dbde:	4641      	mov	r1, r8
 802dbe0:	4620      	mov	r0, r4
 802dbe2:	f7ff f88f 	bl	802cd04 <__ratio>
 802dbe6:	ec57 6b10 	vmov	r6, r7, d0
 802dbea:	2200      	movs	r2, #0
 802dbec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802dbf0:	4630      	mov	r0, r6
 802dbf2:	4639      	mov	r1, r7
 802dbf4:	f7d2 ff94 	bl	8000b20 <__aeabi_dcmple>
 802dbf8:	2800      	cmp	r0, #0
 802dbfa:	d06f      	beq.n	802dcdc <_strtod_l+0xa34>
 802dbfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802dbfe:	2b00      	cmp	r3, #0
 802dc00:	d17a      	bne.n	802dcf8 <_strtod_l+0xa50>
 802dc02:	f1ba 0f00 	cmp.w	sl, #0
 802dc06:	d158      	bne.n	802dcba <_strtod_l+0xa12>
 802dc08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dc0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802dc0e:	2b00      	cmp	r3, #0
 802dc10:	d15a      	bne.n	802dcc8 <_strtod_l+0xa20>
 802dc12:	4b64      	ldr	r3, [pc, #400]	@ (802dda4 <_strtod_l+0xafc>)
 802dc14:	2200      	movs	r2, #0
 802dc16:	4630      	mov	r0, r6
 802dc18:	4639      	mov	r1, r7
 802dc1a:	f7d2 ff77 	bl	8000b0c <__aeabi_dcmplt>
 802dc1e:	2800      	cmp	r0, #0
 802dc20:	d159      	bne.n	802dcd6 <_strtod_l+0xa2e>
 802dc22:	4630      	mov	r0, r6
 802dc24:	4639      	mov	r1, r7
 802dc26:	4b60      	ldr	r3, [pc, #384]	@ (802dda8 <_strtod_l+0xb00>)
 802dc28:	2200      	movs	r2, #0
 802dc2a:	f7d2 fcfd 	bl	8000628 <__aeabi_dmul>
 802dc2e:	4606      	mov	r6, r0
 802dc30:	460f      	mov	r7, r1
 802dc32:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 802dc36:	9606      	str	r6, [sp, #24]
 802dc38:	9307      	str	r3, [sp, #28]
 802dc3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802dc3e:	4d57      	ldr	r5, [pc, #348]	@ (802dd9c <_strtod_l+0xaf4>)
 802dc40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 802dc44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dc46:	401d      	ands	r5, r3
 802dc48:	4b58      	ldr	r3, [pc, #352]	@ (802ddac <_strtod_l+0xb04>)
 802dc4a:	429d      	cmp	r5, r3
 802dc4c:	f040 80b2 	bne.w	802ddb4 <_strtod_l+0xb0c>
 802dc50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dc52:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 802dc56:	ec4b ab10 	vmov	d0, sl, fp
 802dc5a:	f7fe ff8b 	bl	802cb74 <__ulp>
 802dc5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802dc62:	ec51 0b10 	vmov	r0, r1, d0
 802dc66:	f7d2 fcdf 	bl	8000628 <__aeabi_dmul>
 802dc6a:	4652      	mov	r2, sl
 802dc6c:	465b      	mov	r3, fp
 802dc6e:	f7d2 fb25 	bl	80002bc <__adddf3>
 802dc72:	460b      	mov	r3, r1
 802dc74:	4949      	ldr	r1, [pc, #292]	@ (802dd9c <_strtod_l+0xaf4>)
 802dc76:	4a4e      	ldr	r2, [pc, #312]	@ (802ddb0 <_strtod_l+0xb08>)
 802dc78:	4019      	ands	r1, r3
 802dc7a:	4291      	cmp	r1, r2
 802dc7c:	4682      	mov	sl, r0
 802dc7e:	d942      	bls.n	802dd06 <_strtod_l+0xa5e>
 802dc80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802dc82:	4b47      	ldr	r3, [pc, #284]	@ (802dda0 <_strtod_l+0xaf8>)
 802dc84:	429a      	cmp	r2, r3
 802dc86:	d103      	bne.n	802dc90 <_strtod_l+0x9e8>
 802dc88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802dc8a:	3301      	adds	r3, #1
 802dc8c:	f43f ad2b 	beq.w	802d6e6 <_strtod_l+0x43e>
 802dc90:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 802dda0 <_strtod_l+0xaf8>
 802dc94:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802dc98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802dc9a:	9805      	ldr	r0, [sp, #20]
 802dc9c:	f7fe fc69 	bl	802c572 <_Bfree>
 802dca0:	9805      	ldr	r0, [sp, #20]
 802dca2:	4649      	mov	r1, r9
 802dca4:	f7fe fc65 	bl	802c572 <_Bfree>
 802dca8:	9805      	ldr	r0, [sp, #20]
 802dcaa:	4641      	mov	r1, r8
 802dcac:	f7fe fc61 	bl	802c572 <_Bfree>
 802dcb0:	9805      	ldr	r0, [sp, #20]
 802dcb2:	4621      	mov	r1, r4
 802dcb4:	f7fe fc5d 	bl	802c572 <_Bfree>
 802dcb8:	e618      	b.n	802d8ec <_strtod_l+0x644>
 802dcba:	f1ba 0f01 	cmp.w	sl, #1
 802dcbe:	d103      	bne.n	802dcc8 <_strtod_l+0xa20>
 802dcc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dcc2:	2b00      	cmp	r3, #0
 802dcc4:	f43f ada5 	beq.w	802d812 <_strtod_l+0x56a>
 802dcc8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 802dd78 <_strtod_l+0xad0>
 802dccc:	4f35      	ldr	r7, [pc, #212]	@ (802dda4 <_strtod_l+0xafc>)
 802dcce:	ed8d 7b06 	vstr	d7, [sp, #24]
 802dcd2:	2600      	movs	r6, #0
 802dcd4:	e7b1      	b.n	802dc3a <_strtod_l+0x992>
 802dcd6:	4f34      	ldr	r7, [pc, #208]	@ (802dda8 <_strtod_l+0xb00>)
 802dcd8:	2600      	movs	r6, #0
 802dcda:	e7aa      	b.n	802dc32 <_strtod_l+0x98a>
 802dcdc:	4b32      	ldr	r3, [pc, #200]	@ (802dda8 <_strtod_l+0xb00>)
 802dcde:	4630      	mov	r0, r6
 802dce0:	4639      	mov	r1, r7
 802dce2:	2200      	movs	r2, #0
 802dce4:	f7d2 fca0 	bl	8000628 <__aeabi_dmul>
 802dce8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802dcea:	4606      	mov	r6, r0
 802dcec:	460f      	mov	r7, r1
 802dcee:	2b00      	cmp	r3, #0
 802dcf0:	d09f      	beq.n	802dc32 <_strtod_l+0x98a>
 802dcf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802dcf6:	e7a0      	b.n	802dc3a <_strtod_l+0x992>
 802dcf8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 802dd80 <_strtod_l+0xad8>
 802dcfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 802dd00:	ec57 6b17 	vmov	r6, r7, d7
 802dd04:	e799      	b.n	802dc3a <_strtod_l+0x992>
 802dd06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802dd0a:	9b08      	ldr	r3, [sp, #32]
 802dd0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 802dd10:	2b00      	cmp	r3, #0
 802dd12:	d1c1      	bne.n	802dc98 <_strtod_l+0x9f0>
 802dd14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802dd18:	0d1b      	lsrs	r3, r3, #20
 802dd1a:	051b      	lsls	r3, r3, #20
 802dd1c:	429d      	cmp	r5, r3
 802dd1e:	d1bb      	bne.n	802dc98 <_strtod_l+0x9f0>
 802dd20:	4630      	mov	r0, r6
 802dd22:	4639      	mov	r1, r7
 802dd24:	f7d3 f844 	bl	8000db0 <__aeabi_d2lz>
 802dd28:	f7d2 fc50 	bl	80005cc <__aeabi_l2d>
 802dd2c:	4602      	mov	r2, r0
 802dd2e:	460b      	mov	r3, r1
 802dd30:	4630      	mov	r0, r6
 802dd32:	4639      	mov	r1, r7
 802dd34:	f7d2 fac0 	bl	80002b8 <__aeabi_dsub>
 802dd38:	460b      	mov	r3, r1
 802dd3a:	4602      	mov	r2, r0
 802dd3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 802dd40:	f3cb 0613 	ubfx	r6, fp, #0, #20
 802dd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802dd46:	ea46 060a 	orr.w	r6, r6, sl
 802dd4a:	431e      	orrs	r6, r3
 802dd4c:	d06f      	beq.n	802de2e <_strtod_l+0xb86>
 802dd4e:	a30e      	add	r3, pc, #56	@ (adr r3, 802dd88 <_strtod_l+0xae0>)
 802dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd54:	f7d2 feda 	bl	8000b0c <__aeabi_dcmplt>
 802dd58:	2800      	cmp	r0, #0
 802dd5a:	f47f accf 	bne.w	802d6fc <_strtod_l+0x454>
 802dd5e:	a30c      	add	r3, pc, #48	@ (adr r3, 802dd90 <_strtod_l+0xae8>)
 802dd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802dd68:	f7d2 feee 	bl	8000b48 <__aeabi_dcmpgt>
 802dd6c:	2800      	cmp	r0, #0
 802dd6e:	d093      	beq.n	802dc98 <_strtod_l+0x9f0>
 802dd70:	e4c4      	b.n	802d6fc <_strtod_l+0x454>
 802dd72:	bf00      	nop
 802dd74:	f3af 8000 	nop.w
 802dd78:	00000000 	.word	0x00000000
 802dd7c:	bff00000 	.word	0xbff00000
 802dd80:	00000000 	.word	0x00000000
 802dd84:	3ff00000 	.word	0x3ff00000
 802dd88:	94a03595 	.word	0x94a03595
 802dd8c:	3fdfffff 	.word	0x3fdfffff
 802dd90:	35afe535 	.word	0x35afe535
 802dd94:	3fe00000 	.word	0x3fe00000
 802dd98:	000fffff 	.word	0x000fffff
 802dd9c:	7ff00000 	.word	0x7ff00000
 802dda0:	7fefffff 	.word	0x7fefffff
 802dda4:	3ff00000 	.word	0x3ff00000
 802dda8:	3fe00000 	.word	0x3fe00000
 802ddac:	7fe00000 	.word	0x7fe00000
 802ddb0:	7c9fffff 	.word	0x7c9fffff
 802ddb4:	9b08      	ldr	r3, [sp, #32]
 802ddb6:	b323      	cbz	r3, 802de02 <_strtod_l+0xb5a>
 802ddb8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 802ddbc:	d821      	bhi.n	802de02 <_strtod_l+0xb5a>
 802ddbe:	a328      	add	r3, pc, #160	@ (adr r3, 802de60 <_strtod_l+0xbb8>)
 802ddc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ddc4:	4630      	mov	r0, r6
 802ddc6:	4639      	mov	r1, r7
 802ddc8:	f7d2 feaa 	bl	8000b20 <__aeabi_dcmple>
 802ddcc:	b1a0      	cbz	r0, 802ddf8 <_strtod_l+0xb50>
 802ddce:	4639      	mov	r1, r7
 802ddd0:	4630      	mov	r0, r6
 802ddd2:	f7d2 ff01 	bl	8000bd8 <__aeabi_d2uiz>
 802ddd6:	2801      	cmp	r0, #1
 802ddd8:	bf38      	it	cc
 802ddda:	2001      	movcc	r0, #1
 802dddc:	f7d2 fbaa 	bl	8000534 <__aeabi_ui2d>
 802dde0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802dde2:	4606      	mov	r6, r0
 802dde4:	460f      	mov	r7, r1
 802dde6:	b9fb      	cbnz	r3, 802de28 <_strtod_l+0xb80>
 802dde8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802ddec:	9014      	str	r0, [sp, #80]	@ 0x50
 802ddee:	9315      	str	r3, [sp, #84]	@ 0x54
 802ddf0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 802ddf4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 802ddf8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802ddfa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 802ddfe:	1b5b      	subs	r3, r3, r5
 802de00:	9311      	str	r3, [sp, #68]	@ 0x44
 802de02:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802de06:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 802de0a:	f7fe feb3 	bl	802cb74 <__ulp>
 802de0e:	4650      	mov	r0, sl
 802de10:	ec53 2b10 	vmov	r2, r3, d0
 802de14:	4659      	mov	r1, fp
 802de16:	f7d2 fc07 	bl	8000628 <__aeabi_dmul>
 802de1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802de1e:	f7d2 fa4d 	bl	80002bc <__adddf3>
 802de22:	4682      	mov	sl, r0
 802de24:	468b      	mov	fp, r1
 802de26:	e770      	b.n	802dd0a <_strtod_l+0xa62>
 802de28:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 802de2c:	e7e0      	b.n	802ddf0 <_strtod_l+0xb48>
 802de2e:	a30e      	add	r3, pc, #56	@ (adr r3, 802de68 <_strtod_l+0xbc0>)
 802de30:	e9d3 2300 	ldrd	r2, r3, [r3]
 802de34:	f7d2 fe6a 	bl	8000b0c <__aeabi_dcmplt>
 802de38:	e798      	b.n	802dd6c <_strtod_l+0xac4>
 802de3a:	2300      	movs	r3, #0
 802de3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802de3e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802de40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802de42:	6013      	str	r3, [r2, #0]
 802de44:	f7ff ba6d 	b.w	802d322 <_strtod_l+0x7a>
 802de48:	2a65      	cmp	r2, #101	@ 0x65
 802de4a:	f43f ab66 	beq.w	802d51a <_strtod_l+0x272>
 802de4e:	2a45      	cmp	r2, #69	@ 0x45
 802de50:	f43f ab63 	beq.w	802d51a <_strtod_l+0x272>
 802de54:	2301      	movs	r3, #1
 802de56:	f7ff bb9e 	b.w	802d596 <_strtod_l+0x2ee>
 802de5a:	bf00      	nop
 802de5c:	f3af 8000 	nop.w
 802de60:	ffc00000 	.word	0xffc00000
 802de64:	41dfffff 	.word	0x41dfffff
 802de68:	94a03595 	.word	0x94a03595
 802de6c:	3fcfffff 	.word	0x3fcfffff

0802de70 <_strtod_r>:
 802de70:	4b01      	ldr	r3, [pc, #4]	@ (802de78 <_strtod_r+0x8>)
 802de72:	f7ff ba19 	b.w	802d2a8 <_strtod_l>
 802de76:	bf00      	nop
 802de78:	200002c4 	.word	0x200002c4

0802de7c <_strtoul_l.constprop.0>:
 802de7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802de80:	4e34      	ldr	r6, [pc, #208]	@ (802df54 <_strtoul_l.constprop.0+0xd8>)
 802de82:	4686      	mov	lr, r0
 802de84:	460d      	mov	r5, r1
 802de86:	4628      	mov	r0, r5
 802de88:	f815 4b01 	ldrb.w	r4, [r5], #1
 802de8c:	5d37      	ldrb	r7, [r6, r4]
 802de8e:	f017 0708 	ands.w	r7, r7, #8
 802de92:	d1f8      	bne.n	802de86 <_strtoul_l.constprop.0+0xa>
 802de94:	2c2d      	cmp	r4, #45	@ 0x2d
 802de96:	d12f      	bne.n	802def8 <_strtoul_l.constprop.0+0x7c>
 802de98:	782c      	ldrb	r4, [r5, #0]
 802de9a:	2701      	movs	r7, #1
 802de9c:	1c85      	adds	r5, r0, #2
 802de9e:	f033 0010 	bics.w	r0, r3, #16
 802dea2:	d109      	bne.n	802deb8 <_strtoul_l.constprop.0+0x3c>
 802dea4:	2c30      	cmp	r4, #48	@ 0x30
 802dea6:	d12c      	bne.n	802df02 <_strtoul_l.constprop.0+0x86>
 802dea8:	7828      	ldrb	r0, [r5, #0]
 802deaa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 802deae:	2858      	cmp	r0, #88	@ 0x58
 802deb0:	d127      	bne.n	802df02 <_strtoul_l.constprop.0+0x86>
 802deb2:	786c      	ldrb	r4, [r5, #1]
 802deb4:	2310      	movs	r3, #16
 802deb6:	3502      	adds	r5, #2
 802deb8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 802debc:	2600      	movs	r6, #0
 802debe:	fbb8 f8f3 	udiv	r8, r8, r3
 802dec2:	fb03 f908 	mul.w	r9, r3, r8
 802dec6:	ea6f 0909 	mvn.w	r9, r9
 802deca:	4630      	mov	r0, r6
 802decc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802ded0:	f1bc 0f09 	cmp.w	ip, #9
 802ded4:	d81c      	bhi.n	802df10 <_strtoul_l.constprop.0+0x94>
 802ded6:	4664      	mov	r4, ip
 802ded8:	42a3      	cmp	r3, r4
 802deda:	dd2a      	ble.n	802df32 <_strtoul_l.constprop.0+0xb6>
 802dedc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 802dee0:	d007      	beq.n	802def2 <_strtoul_l.constprop.0+0x76>
 802dee2:	4580      	cmp	r8, r0
 802dee4:	d322      	bcc.n	802df2c <_strtoul_l.constprop.0+0xb0>
 802dee6:	d101      	bne.n	802deec <_strtoul_l.constprop.0+0x70>
 802dee8:	45a1      	cmp	r9, r4
 802deea:	db1f      	blt.n	802df2c <_strtoul_l.constprop.0+0xb0>
 802deec:	fb00 4003 	mla	r0, r0, r3, r4
 802def0:	2601      	movs	r6, #1
 802def2:	f815 4b01 	ldrb.w	r4, [r5], #1
 802def6:	e7e9      	b.n	802decc <_strtoul_l.constprop.0+0x50>
 802def8:	2c2b      	cmp	r4, #43	@ 0x2b
 802defa:	bf04      	itt	eq
 802defc:	782c      	ldrbeq	r4, [r5, #0]
 802defe:	1c85      	addeq	r5, r0, #2
 802df00:	e7cd      	b.n	802de9e <_strtoul_l.constprop.0+0x22>
 802df02:	2b00      	cmp	r3, #0
 802df04:	d1d8      	bne.n	802deb8 <_strtoul_l.constprop.0+0x3c>
 802df06:	2c30      	cmp	r4, #48	@ 0x30
 802df08:	bf0c      	ite	eq
 802df0a:	2308      	moveq	r3, #8
 802df0c:	230a      	movne	r3, #10
 802df0e:	e7d3      	b.n	802deb8 <_strtoul_l.constprop.0+0x3c>
 802df10:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 802df14:	f1bc 0f19 	cmp.w	ip, #25
 802df18:	d801      	bhi.n	802df1e <_strtoul_l.constprop.0+0xa2>
 802df1a:	3c37      	subs	r4, #55	@ 0x37
 802df1c:	e7dc      	b.n	802ded8 <_strtoul_l.constprop.0+0x5c>
 802df1e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802df22:	f1bc 0f19 	cmp.w	ip, #25
 802df26:	d804      	bhi.n	802df32 <_strtoul_l.constprop.0+0xb6>
 802df28:	3c57      	subs	r4, #87	@ 0x57
 802df2a:	e7d5      	b.n	802ded8 <_strtoul_l.constprop.0+0x5c>
 802df2c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 802df30:	e7df      	b.n	802def2 <_strtoul_l.constprop.0+0x76>
 802df32:	1c73      	adds	r3, r6, #1
 802df34:	d106      	bne.n	802df44 <_strtoul_l.constprop.0+0xc8>
 802df36:	2322      	movs	r3, #34	@ 0x22
 802df38:	f8ce 3000 	str.w	r3, [lr]
 802df3c:	4630      	mov	r0, r6
 802df3e:	b932      	cbnz	r2, 802df4e <_strtoul_l.constprop.0+0xd2>
 802df40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802df44:	b107      	cbz	r7, 802df48 <_strtoul_l.constprop.0+0xcc>
 802df46:	4240      	negs	r0, r0
 802df48:	2a00      	cmp	r2, #0
 802df4a:	d0f9      	beq.n	802df40 <_strtoul_l.constprop.0+0xc4>
 802df4c:	b106      	cbz	r6, 802df50 <_strtoul_l.constprop.0+0xd4>
 802df4e:	1e69      	subs	r1, r5, #1
 802df50:	6011      	str	r1, [r2, #0]
 802df52:	e7f5      	b.n	802df40 <_strtoul_l.constprop.0+0xc4>
 802df54:	08034405 	.word	0x08034405

0802df58 <_strtoul_r>:
 802df58:	f7ff bf90 	b.w	802de7c <_strtoul_l.constprop.0>

0802df5c <strtoul>:
 802df5c:	4613      	mov	r3, r2
 802df5e:	460a      	mov	r2, r1
 802df60:	4601      	mov	r1, r0
 802df62:	4802      	ldr	r0, [pc, #8]	@ (802df6c <strtoul+0x10>)
 802df64:	6800      	ldr	r0, [r0, #0]
 802df66:	f7ff bf89 	b.w	802de7c <_strtoul_l.constprop.0>
 802df6a:	bf00      	nop
 802df6c:	20000430 	.word	0x20000430

0802df70 <__submore>:
 802df70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802df74:	460c      	mov	r4, r1
 802df76:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 802df78:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802df7c:	4299      	cmp	r1, r3
 802df7e:	d11d      	bne.n	802dfbc <__submore+0x4c>
 802df80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 802df84:	f7f9 ffba 	bl	8027efc <_malloc_r>
 802df88:	b918      	cbnz	r0, 802df92 <__submore+0x22>
 802df8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802df8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802df92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802df96:	6363      	str	r3, [r4, #52]	@ 0x34
 802df98:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 802df9c:	6320      	str	r0, [r4, #48]	@ 0x30
 802df9e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 802dfa2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 802dfa6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 802dfaa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 802dfae:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 802dfb2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 802dfb6:	6020      	str	r0, [r4, #0]
 802dfb8:	2000      	movs	r0, #0
 802dfba:	e7e8      	b.n	802df8e <__submore+0x1e>
 802dfbc:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 802dfbe:	0077      	lsls	r7, r6, #1
 802dfc0:	463a      	mov	r2, r7
 802dfc2:	f7fe ffab 	bl	802cf1c <_realloc_r>
 802dfc6:	4605      	mov	r5, r0
 802dfc8:	2800      	cmp	r0, #0
 802dfca:	d0de      	beq.n	802df8a <__submore+0x1a>
 802dfcc:	eb00 0806 	add.w	r8, r0, r6
 802dfd0:	4601      	mov	r1, r0
 802dfd2:	4632      	mov	r2, r6
 802dfd4:	4640      	mov	r0, r8
 802dfd6:	f7f8 ff77 	bl	8026ec8 <memcpy>
 802dfda:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 802dfde:	f8c4 8000 	str.w	r8, [r4]
 802dfe2:	e7e9      	b.n	802dfb8 <__submore+0x48>

0802dfe4 <__ascii_wctomb>:
 802dfe4:	4603      	mov	r3, r0
 802dfe6:	4608      	mov	r0, r1
 802dfe8:	b141      	cbz	r1, 802dffc <__ascii_wctomb+0x18>
 802dfea:	2aff      	cmp	r2, #255	@ 0xff
 802dfec:	d904      	bls.n	802dff8 <__ascii_wctomb+0x14>
 802dfee:	228a      	movs	r2, #138	@ 0x8a
 802dff0:	601a      	str	r2, [r3, #0]
 802dff2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802dff6:	4770      	bx	lr
 802dff8:	700a      	strb	r2, [r1, #0]
 802dffa:	2001      	movs	r0, #1
 802dffc:	4770      	bx	lr

0802dffe <__swbuf_r>:
 802dffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e000:	460e      	mov	r6, r1
 802e002:	4614      	mov	r4, r2
 802e004:	4605      	mov	r5, r0
 802e006:	b118      	cbz	r0, 802e010 <__swbuf_r+0x12>
 802e008:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802e00a:	b90b      	cbnz	r3, 802e010 <__swbuf_r+0x12>
 802e00c:	f7f7 fa7a 	bl	8025504 <__sinit>
 802e010:	69a3      	ldr	r3, [r4, #24]
 802e012:	60a3      	str	r3, [r4, #8]
 802e014:	89a3      	ldrh	r3, [r4, #12]
 802e016:	0719      	lsls	r1, r3, #28
 802e018:	d501      	bpl.n	802e01e <__swbuf_r+0x20>
 802e01a:	6923      	ldr	r3, [r4, #16]
 802e01c:	b943      	cbnz	r3, 802e030 <__swbuf_r+0x32>
 802e01e:	4621      	mov	r1, r4
 802e020:	4628      	mov	r0, r5
 802e022:	f7f7 fc2b 	bl	802587c <__swsetup_r>
 802e026:	b118      	cbz	r0, 802e030 <__swbuf_r+0x32>
 802e028:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802e02c:	4638      	mov	r0, r7
 802e02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e034:	b2f6      	uxtb	r6, r6
 802e036:	049a      	lsls	r2, r3, #18
 802e038:	4637      	mov	r7, r6
 802e03a:	d406      	bmi.n	802e04a <__swbuf_r+0x4c>
 802e03c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802e040:	81a3      	strh	r3, [r4, #12]
 802e042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802e044:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802e048:	6663      	str	r3, [r4, #100]	@ 0x64
 802e04a:	6823      	ldr	r3, [r4, #0]
 802e04c:	6922      	ldr	r2, [r4, #16]
 802e04e:	1a98      	subs	r0, r3, r2
 802e050:	6963      	ldr	r3, [r4, #20]
 802e052:	4283      	cmp	r3, r0
 802e054:	dc05      	bgt.n	802e062 <__swbuf_r+0x64>
 802e056:	4621      	mov	r1, r4
 802e058:	4628      	mov	r0, r5
 802e05a:	f7f7 f911 	bl	8025280 <_fflush_r>
 802e05e:	2800      	cmp	r0, #0
 802e060:	d1e2      	bne.n	802e028 <__swbuf_r+0x2a>
 802e062:	68a3      	ldr	r3, [r4, #8]
 802e064:	3b01      	subs	r3, #1
 802e066:	60a3      	str	r3, [r4, #8]
 802e068:	6823      	ldr	r3, [r4, #0]
 802e06a:	1c5a      	adds	r2, r3, #1
 802e06c:	6022      	str	r2, [r4, #0]
 802e06e:	701e      	strb	r6, [r3, #0]
 802e070:	6962      	ldr	r2, [r4, #20]
 802e072:	1c43      	adds	r3, r0, #1
 802e074:	429a      	cmp	r2, r3
 802e076:	d004      	beq.n	802e082 <__swbuf_r+0x84>
 802e078:	89a3      	ldrh	r3, [r4, #12]
 802e07a:	07db      	lsls	r3, r3, #31
 802e07c:	d5d6      	bpl.n	802e02c <__swbuf_r+0x2e>
 802e07e:	2e0a      	cmp	r6, #10
 802e080:	d1d4      	bne.n	802e02c <__swbuf_r+0x2e>
 802e082:	4621      	mov	r1, r4
 802e084:	4628      	mov	r0, r5
 802e086:	f7f7 f8fb 	bl	8025280 <_fflush_r>
 802e08a:	2800      	cmp	r0, #0
 802e08c:	d0ce      	beq.n	802e02c <__swbuf_r+0x2e>
 802e08e:	e7cb      	b.n	802e028 <__swbuf_r+0x2a>

0802e090 <_raise_r>:
 802e090:	291f      	cmp	r1, #31
 802e092:	b538      	push	{r3, r4, r5, lr}
 802e094:	4605      	mov	r5, r0
 802e096:	460c      	mov	r4, r1
 802e098:	d904      	bls.n	802e0a4 <_raise_r+0x14>
 802e09a:	2316      	movs	r3, #22
 802e09c:	6003      	str	r3, [r0, #0]
 802e09e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e0a2:	bd38      	pop	{r3, r4, r5, pc}
 802e0a4:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 802e0a8:	b112      	cbz	r2, 802e0b0 <_raise_r+0x20>
 802e0aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802e0ae:	b94b      	cbnz	r3, 802e0c4 <_raise_r+0x34>
 802e0b0:	4628      	mov	r0, r5
 802e0b2:	f000 f8fd 	bl	802e2b0 <_getpid_r>
 802e0b6:	4622      	mov	r2, r4
 802e0b8:	4601      	mov	r1, r0
 802e0ba:	4628      	mov	r0, r5
 802e0bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e0c0:	f000 b8e4 	b.w	802e28c <_kill_r>
 802e0c4:	2b01      	cmp	r3, #1
 802e0c6:	d00a      	beq.n	802e0de <_raise_r+0x4e>
 802e0c8:	1c59      	adds	r1, r3, #1
 802e0ca:	d103      	bne.n	802e0d4 <_raise_r+0x44>
 802e0cc:	2316      	movs	r3, #22
 802e0ce:	6003      	str	r3, [r0, #0]
 802e0d0:	2001      	movs	r0, #1
 802e0d2:	e7e6      	b.n	802e0a2 <_raise_r+0x12>
 802e0d4:	2100      	movs	r1, #0
 802e0d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802e0da:	4620      	mov	r0, r4
 802e0dc:	4798      	blx	r3
 802e0de:	2000      	movs	r0, #0
 802e0e0:	e7df      	b.n	802e0a2 <_raise_r+0x12>
	...

0802e0e4 <raise>:
 802e0e4:	4b02      	ldr	r3, [pc, #8]	@ (802e0f0 <raise+0xc>)
 802e0e6:	4601      	mov	r1, r0
 802e0e8:	6818      	ldr	r0, [r3, #0]
 802e0ea:	f7ff bfd1 	b.w	802e090 <_raise_r>
 802e0ee:	bf00      	nop
 802e0f0:	20000430 	.word	0x20000430

0802e0f4 <__gettzinfo>:
 802e0f4:	4800      	ldr	r0, [pc, #0]	@ (802e0f8 <__gettzinfo+0x4>)
 802e0f6:	4770      	bx	lr
 802e0f8:	20000970 	.word	0x20000970

0802e0fc <gmtime_r>:
 802e0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e100:	4a4d      	ldr	r2, [pc, #308]	@ (802e238 <gmtime_r+0x13c>)
 802e102:	460c      	mov	r4, r1
 802e104:	2300      	movs	r3, #0
 802e106:	e9d0 0100 	ldrd	r0, r1, [r0]
 802e10a:	f7d2 fdd5 	bl	8000cb8 <__aeabi_ldivmod>
 802e10e:	2a00      	cmp	r2, #0
 802e110:	bfbc      	itt	lt
 802e112:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 802e116:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 802e11a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802e11e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 802e122:	fbb2 f3f1 	udiv	r3, r2, r1
 802e126:	fb01 2213 	mls	r2, r1, r3, r2
 802e12a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 802e12e:	bfac      	ite	ge
 802e130:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 802e134:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 802e138:	60a3      	str	r3, [r4, #8]
 802e13a:	fbb2 f3f1 	udiv	r3, r2, r1
 802e13e:	fb01 2213 	mls	r2, r1, r3, r2
 802e142:	6063      	str	r3, [r4, #4]
 802e144:	6022      	str	r2, [r4, #0]
 802e146:	1cc3      	adds	r3, r0, #3
 802e148:	2207      	movs	r2, #7
 802e14a:	fb93 f2f2 	sdiv	r2, r3, r2
 802e14e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802e152:	1a9b      	subs	r3, r3, r2
 802e154:	bf48      	it	mi
 802e156:	3307      	addmi	r3, #7
 802e158:	2800      	cmp	r0, #0
 802e15a:	61a3      	str	r3, [r4, #24]
 802e15c:	bfb8      	it	lt
 802e15e:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 802e162:	4936      	ldr	r1, [pc, #216]	@ (802e23c <gmtime_r+0x140>)
 802e164:	bfae      	itee	ge
 802e166:	fb90 f1f1 	sdivge	r1, r0, r1
 802e16a:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 802e16e:	fb93 f1f1 	sdivlt	r1, r3, r1
 802e172:	4b33      	ldr	r3, [pc, #204]	@ (802e240 <gmtime_r+0x144>)
 802e174:	fb03 0001 	mla	r0, r3, r1, r0
 802e178:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 802e17c:	fbb0 f3f3 	udiv	r3, r0, r3
 802e180:	4403      	add	r3, r0
 802e182:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 802e186:	fbb0 f2fc 	udiv	r2, r0, ip
 802e18a:	1a9b      	subs	r3, r3, r2
 802e18c:	f240 176d 	movw	r7, #365	@ 0x16d
 802e190:	4a2c      	ldr	r2, [pc, #176]	@ (802e244 <gmtime_r+0x148>)
 802e192:	fbb0 f2f2 	udiv	r2, r0, r2
 802e196:	2664      	movs	r6, #100	@ 0x64
 802e198:	1a9b      	subs	r3, r3, r2
 802e19a:	fbb3 f2f7 	udiv	r2, r3, r7
 802e19e:	fbb3 f3fc 	udiv	r3, r3, ip
 802e1a2:	fbb2 f5f6 	udiv	r5, r2, r6
 802e1a6:	1aeb      	subs	r3, r5, r3
 802e1a8:	4403      	add	r3, r0
 802e1aa:	fb07 3312 	mls	r3, r7, r2, r3
 802e1ae:	2099      	movs	r0, #153	@ 0x99
 802e1b0:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 802e1b4:	3702      	adds	r7, #2
 802e1b6:	f103 0e01 	add.w	lr, r3, #1
 802e1ba:	fbb7 fcf0 	udiv	ip, r7, r0
 802e1be:	fb00 f00c 	mul.w	r0, r0, ip
 802e1c2:	3002      	adds	r0, #2
 802e1c4:	f04f 0805 	mov.w	r8, #5
 802e1c8:	fbb0 f0f8 	udiv	r0, r0, r8
 802e1cc:	ebae 0000 	sub.w	r0, lr, r0
 802e1d0:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 802e1d4:	4577      	cmp	r7, lr
 802e1d6:	bf8c      	ite	hi
 802e1d8:	f06f 0709 	mvnhi.w	r7, #9
 802e1dc:	2702      	movls	r7, #2
 802e1de:	4467      	add	r7, ip
 802e1e0:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 802e1e4:	fb0c 2101 	mla	r1, ip, r1, r2
 802e1e8:	2f01      	cmp	r7, #1
 802e1ea:	bf98      	it	ls
 802e1ec:	3101      	addls	r1, #1
 802e1ee:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 802e1f2:	d30c      	bcc.n	802e20e <gmtime_r+0x112>
 802e1f4:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 802e1f8:	61e3      	str	r3, [r4, #28]
 802e1fa:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 802e1fe:	2300      	movs	r3, #0
 802e200:	60e0      	str	r0, [r4, #12]
 802e202:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802e206:	6223      	str	r3, [r4, #32]
 802e208:	4620      	mov	r0, r4
 802e20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e20e:	f012 0f03 	tst.w	r2, #3
 802e212:	d102      	bne.n	802e21a <gmtime_r+0x11e>
 802e214:	fb06 2515 	mls	r5, r6, r5, r2
 802e218:	b95d      	cbnz	r5, 802e232 <gmtime_r+0x136>
 802e21a:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 802e21e:	fbb2 f6f5 	udiv	r6, r2, r5
 802e222:	fb05 2216 	mls	r2, r5, r6, r2
 802e226:	fab2 f282 	clz	r2, r2
 802e22a:	0952      	lsrs	r2, r2, #5
 802e22c:	333b      	adds	r3, #59	@ 0x3b
 802e22e:	4413      	add	r3, r2
 802e230:	e7e2      	b.n	802e1f8 <gmtime_r+0xfc>
 802e232:	2201      	movs	r2, #1
 802e234:	e7fa      	b.n	802e22c <gmtime_r+0x130>
 802e236:	bf00      	nop
 802e238:	00015180 	.word	0x00015180
 802e23c:	00023ab1 	.word	0x00023ab1
 802e240:	fffdc54f 	.word	0xfffdc54f
 802e244:	00023ab0 	.word	0x00023ab0

0802e248 <_fstat_r>:
 802e248:	b538      	push	{r3, r4, r5, lr}
 802e24a:	4d07      	ldr	r5, [pc, #28]	@ (802e268 <_fstat_r+0x20>)
 802e24c:	2300      	movs	r3, #0
 802e24e:	4604      	mov	r4, r0
 802e250:	4608      	mov	r0, r1
 802e252:	4611      	mov	r1, r2
 802e254:	602b      	str	r3, [r5, #0]
 802e256:	f7d4 fac5 	bl	80027e4 <_fstat>
 802e25a:	1c43      	adds	r3, r0, #1
 802e25c:	d102      	bne.n	802e264 <_fstat_r+0x1c>
 802e25e:	682b      	ldr	r3, [r5, #0]
 802e260:	b103      	cbz	r3, 802e264 <_fstat_r+0x1c>
 802e262:	6023      	str	r3, [r4, #0]
 802e264:	bd38      	pop	{r3, r4, r5, pc}
 802e266:	bf00      	nop
 802e268:	200182c0 	.word	0x200182c0

0802e26c <_isatty_r>:
 802e26c:	b538      	push	{r3, r4, r5, lr}
 802e26e:	4d06      	ldr	r5, [pc, #24]	@ (802e288 <_isatty_r+0x1c>)
 802e270:	2300      	movs	r3, #0
 802e272:	4604      	mov	r4, r0
 802e274:	4608      	mov	r0, r1
 802e276:	602b      	str	r3, [r5, #0]
 802e278:	f7d4 fac4 	bl	8002804 <_isatty>
 802e27c:	1c43      	adds	r3, r0, #1
 802e27e:	d102      	bne.n	802e286 <_isatty_r+0x1a>
 802e280:	682b      	ldr	r3, [r5, #0]
 802e282:	b103      	cbz	r3, 802e286 <_isatty_r+0x1a>
 802e284:	6023      	str	r3, [r4, #0]
 802e286:	bd38      	pop	{r3, r4, r5, pc}
 802e288:	200182c0 	.word	0x200182c0

0802e28c <_kill_r>:
 802e28c:	b538      	push	{r3, r4, r5, lr}
 802e28e:	4d07      	ldr	r5, [pc, #28]	@ (802e2ac <_kill_r+0x20>)
 802e290:	2300      	movs	r3, #0
 802e292:	4604      	mov	r4, r0
 802e294:	4608      	mov	r0, r1
 802e296:	4611      	mov	r1, r2
 802e298:	602b      	str	r3, [r5, #0]
 802e29a:	f7d4 fa43 	bl	8002724 <_kill>
 802e29e:	1c43      	adds	r3, r0, #1
 802e2a0:	d102      	bne.n	802e2a8 <_kill_r+0x1c>
 802e2a2:	682b      	ldr	r3, [r5, #0]
 802e2a4:	b103      	cbz	r3, 802e2a8 <_kill_r+0x1c>
 802e2a6:	6023      	str	r3, [r4, #0]
 802e2a8:	bd38      	pop	{r3, r4, r5, pc}
 802e2aa:	bf00      	nop
 802e2ac:	200182c0 	.word	0x200182c0

0802e2b0 <_getpid_r>:
 802e2b0:	f7d4 ba30 	b.w	8002714 <_getpid>

0802e2b4 <_sbrk_r>:
 802e2b4:	b538      	push	{r3, r4, r5, lr}
 802e2b6:	4d06      	ldr	r5, [pc, #24]	@ (802e2d0 <_sbrk_r+0x1c>)
 802e2b8:	2300      	movs	r3, #0
 802e2ba:	4604      	mov	r4, r0
 802e2bc:	4608      	mov	r0, r1
 802e2be:	602b      	str	r3, [r5, #0]
 802e2c0:	f7d4 fab8 	bl	8002834 <_sbrk>
 802e2c4:	1c43      	adds	r3, r0, #1
 802e2c6:	d102      	bne.n	802e2ce <_sbrk_r+0x1a>
 802e2c8:	682b      	ldr	r3, [r5, #0]
 802e2ca:	b103      	cbz	r3, 802e2ce <_sbrk_r+0x1a>
 802e2cc:	6023      	str	r3, [r4, #0]
 802e2ce:	bd38      	pop	{r3, r4, r5, pc}
 802e2d0:	200182c0 	.word	0x200182c0

0802e2d4 <sysconf>:
 802e2d4:	2808      	cmp	r0, #8
 802e2d6:	b508      	push	{r3, lr}
 802e2d8:	d006      	beq.n	802e2e8 <sysconf+0x14>
 802e2da:	f7f8 fdbd 	bl	8026e58 <__errno>
 802e2de:	2316      	movs	r3, #22
 802e2e0:	6003      	str	r3, [r0, #0]
 802e2e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e2e6:	bd08      	pop	{r3, pc}
 802e2e8:	2080      	movs	r0, #128	@ 0x80
 802e2ea:	e7fc      	b.n	802e2e6 <sysconf+0x12>

0802e2ec <_strtoll_l.constprop.0>:
 802e2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e2f0:	b085      	sub	sp, #20
 802e2f2:	4690      	mov	r8, r2
 802e2f4:	4a43      	ldr	r2, [pc, #268]	@ (802e404 <_strtoll_l.constprop.0+0x118>)
 802e2f6:	9002      	str	r0, [sp, #8]
 802e2f8:	4689      	mov	r9, r1
 802e2fa:	461e      	mov	r6, r3
 802e2fc:	460d      	mov	r5, r1
 802e2fe:	462b      	mov	r3, r5
 802e300:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e304:	5d17      	ldrb	r7, [r2, r4]
 802e306:	f017 0708 	ands.w	r7, r7, #8
 802e30a:	d1f8      	bne.n	802e2fe <_strtoll_l.constprop.0+0x12>
 802e30c:	2c2d      	cmp	r4, #45	@ 0x2d
 802e30e:	d149      	bne.n	802e3a4 <_strtoll_l.constprop.0+0xb8>
 802e310:	782c      	ldrb	r4, [r5, #0]
 802e312:	2701      	movs	r7, #1
 802e314:	1c9d      	adds	r5, r3, #2
 802e316:	f036 0310 	bics.w	r3, r6, #16
 802e31a:	d109      	bne.n	802e330 <_strtoll_l.constprop.0+0x44>
 802e31c:	2c30      	cmp	r4, #48	@ 0x30
 802e31e:	d146      	bne.n	802e3ae <_strtoll_l.constprop.0+0xc2>
 802e320:	782b      	ldrb	r3, [r5, #0]
 802e322:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802e326:	2b58      	cmp	r3, #88	@ 0x58
 802e328:	d141      	bne.n	802e3ae <_strtoll_l.constprop.0+0xc2>
 802e32a:	786c      	ldrb	r4, [r5, #1]
 802e32c:	2610      	movs	r6, #16
 802e32e:	3502      	adds	r5, #2
 802e330:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 802e334:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 802e338:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 802e33c:	17f3      	asrs	r3, r6, #31
 802e33e:	4632      	mov	r2, r6
 802e340:	4658      	mov	r0, fp
 802e342:	4651      	mov	r1, sl
 802e344:	9303      	str	r3, [sp, #12]
 802e346:	f7d2 fd07 	bl	8000d58 <__aeabi_uldivmod>
 802e34a:	9201      	str	r2, [sp, #4]
 802e34c:	2200      	movs	r2, #0
 802e34e:	468e      	mov	lr, r1
 802e350:	4684      	mov	ip, r0
 802e352:	4611      	mov	r1, r2
 802e354:	4610      	mov	r0, r2
 802e356:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 802e35a:	2b09      	cmp	r3, #9
 802e35c:	d905      	bls.n	802e36a <_strtoll_l.constprop.0+0x7e>
 802e35e:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 802e362:	2b19      	cmp	r3, #25
 802e364:	d82a      	bhi.n	802e3bc <_strtoll_l.constprop.0+0xd0>
 802e366:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 802e36a:	429e      	cmp	r6, r3
 802e36c:	dd30      	ble.n	802e3d0 <_strtoll_l.constprop.0+0xe4>
 802e36e:	1c54      	adds	r4, r2, #1
 802e370:	d015      	beq.n	802e39e <_strtoll_l.constprop.0+0xb2>
 802e372:	4584      	cmp	ip, r0
 802e374:	eb7e 0201 	sbcs.w	r2, lr, r1
 802e378:	d327      	bcc.n	802e3ca <_strtoll_l.constprop.0+0xde>
 802e37a:	458e      	cmp	lr, r1
 802e37c:	bf08      	it	eq
 802e37e:	4584      	cmpeq	ip, r0
 802e380:	d102      	bne.n	802e388 <_strtoll_l.constprop.0+0x9c>
 802e382:	9a01      	ldr	r2, [sp, #4]
 802e384:	429a      	cmp	r2, r3
 802e386:	db20      	blt.n	802e3ca <_strtoll_l.constprop.0+0xde>
 802e388:	9a03      	ldr	r2, [sp, #12]
 802e38a:	4371      	muls	r1, r6
 802e38c:	fb00 1102 	mla	r1, r0, r2, r1
 802e390:	fba6 0200 	umull	r0, r2, r6, r0
 802e394:	440a      	add	r2, r1
 802e396:	1818      	adds	r0, r3, r0
 802e398:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 802e39c:	2201      	movs	r2, #1
 802e39e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e3a2:	e7d8      	b.n	802e356 <_strtoll_l.constprop.0+0x6a>
 802e3a4:	2c2b      	cmp	r4, #43	@ 0x2b
 802e3a6:	bf04      	itt	eq
 802e3a8:	782c      	ldrbeq	r4, [r5, #0]
 802e3aa:	1c9d      	addeq	r5, r3, #2
 802e3ac:	e7b3      	b.n	802e316 <_strtoll_l.constprop.0+0x2a>
 802e3ae:	2e00      	cmp	r6, #0
 802e3b0:	d1be      	bne.n	802e330 <_strtoll_l.constprop.0+0x44>
 802e3b2:	2c30      	cmp	r4, #48	@ 0x30
 802e3b4:	bf0c      	ite	eq
 802e3b6:	2608      	moveq	r6, #8
 802e3b8:	260a      	movne	r6, #10
 802e3ba:	e7b9      	b.n	802e330 <_strtoll_l.constprop.0+0x44>
 802e3bc:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 802e3c0:	2b19      	cmp	r3, #25
 802e3c2:	d805      	bhi.n	802e3d0 <_strtoll_l.constprop.0+0xe4>
 802e3c4:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 802e3c8:	e7cf      	b.n	802e36a <_strtoll_l.constprop.0+0x7e>
 802e3ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802e3ce:	e7e6      	b.n	802e39e <_strtoll_l.constprop.0+0xb2>
 802e3d0:	1c53      	adds	r3, r2, #1
 802e3d2:	d10a      	bne.n	802e3ea <_strtoll_l.constprop.0+0xfe>
 802e3d4:	9a02      	ldr	r2, [sp, #8]
 802e3d6:	2322      	movs	r3, #34	@ 0x22
 802e3d8:	6013      	str	r3, [r2, #0]
 802e3da:	4658      	mov	r0, fp
 802e3dc:	4651      	mov	r1, sl
 802e3de:	f1b8 0f00 	cmp.w	r8, #0
 802e3e2:	d10a      	bne.n	802e3fa <_strtoll_l.constprop.0+0x10e>
 802e3e4:	b005      	add	sp, #20
 802e3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e3ea:	b117      	cbz	r7, 802e3f2 <_strtoll_l.constprop.0+0x106>
 802e3ec:	4240      	negs	r0, r0
 802e3ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802e3f2:	f1b8 0f00 	cmp.w	r8, #0
 802e3f6:	d0f5      	beq.n	802e3e4 <_strtoll_l.constprop.0+0xf8>
 802e3f8:	b10a      	cbz	r2, 802e3fe <_strtoll_l.constprop.0+0x112>
 802e3fa:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 802e3fe:	f8c8 9000 	str.w	r9, [r8]
 802e402:	e7ef      	b.n	802e3e4 <_strtoll_l.constprop.0+0xf8>
 802e404:	08034405 	.word	0x08034405

0802e408 <_strtoll_r>:
 802e408:	f7ff bf70 	b.w	802e2ec <_strtoll_l.constprop.0>

0802e40c <__libc_fini_array>:
 802e40c:	b538      	push	{r3, r4, r5, lr}
 802e40e:	4d07      	ldr	r5, [pc, #28]	@ (802e42c <__libc_fini_array+0x20>)
 802e410:	4c07      	ldr	r4, [pc, #28]	@ (802e430 <__libc_fini_array+0x24>)
 802e412:	1b64      	subs	r4, r4, r5
 802e414:	10a4      	asrs	r4, r4, #2
 802e416:	b91c      	cbnz	r4, 802e420 <__libc_fini_array+0x14>
 802e418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e41c:	f000 bc9c 	b.w	802ed58 <_fini>
 802e420:	3c01      	subs	r4, #1
 802e422:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802e426:	4798      	blx	r3
 802e428:	e7f5      	b.n	802e416 <__libc_fini_array+0xa>
 802e42a:	bf00      	nop
 802e42c:	08034820 	.word	0x08034820
 802e430:	08034824 	.word	0x08034824

0802e434 <_strtoull_l.constprop.0>:
 802e434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e438:	4691      	mov	r9, r2
 802e43a:	4a48      	ldr	r2, [pc, #288]	@ (802e55c <_strtoull_l.constprop.0+0x128>)
 802e43c:	9001      	str	r0, [sp, #4]
 802e43e:	468a      	mov	sl, r1
 802e440:	461e      	mov	r6, r3
 802e442:	460d      	mov	r5, r1
 802e444:	462b      	mov	r3, r5
 802e446:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e44a:	5d17      	ldrb	r7, [r2, r4]
 802e44c:	f017 0708 	ands.w	r7, r7, #8
 802e450:	d1f8      	bne.n	802e444 <_strtoull_l.constprop.0+0x10>
 802e452:	2c2d      	cmp	r4, #45	@ 0x2d
 802e454:	d14a      	bne.n	802e4ec <_strtoull_l.constprop.0+0xb8>
 802e456:	782c      	ldrb	r4, [r5, #0]
 802e458:	2701      	movs	r7, #1
 802e45a:	1c9d      	adds	r5, r3, #2
 802e45c:	f036 0310 	bics.w	r3, r6, #16
 802e460:	d109      	bne.n	802e476 <_strtoull_l.constprop.0+0x42>
 802e462:	2c30      	cmp	r4, #48	@ 0x30
 802e464:	d147      	bne.n	802e4f6 <_strtoull_l.constprop.0+0xc2>
 802e466:	782b      	ldrb	r3, [r5, #0]
 802e468:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802e46c:	2b58      	cmp	r3, #88	@ 0x58
 802e46e:	d142      	bne.n	802e4f6 <_strtoull_l.constprop.0+0xc2>
 802e470:	786c      	ldrb	r4, [r5, #1]
 802e472:	2610      	movs	r6, #16
 802e474:	3502      	adds	r5, #2
 802e476:	ea4f 7be6 	mov.w	fp, r6, asr #31
 802e47a:	4632      	mov	r2, r6
 802e47c:	465b      	mov	r3, fp
 802e47e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e482:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802e486:	f7d2 fc67 	bl	8000d58 <__aeabi_uldivmod>
 802e48a:	4632      	mov	r2, r6
 802e48c:	9000      	str	r0, [sp, #0]
 802e48e:	4688      	mov	r8, r1
 802e490:	465b      	mov	r3, fp
 802e492:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e496:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802e49a:	f7d2 fc5d 	bl	8000d58 <__aeabi_uldivmod>
 802e49e:	2300      	movs	r3, #0
 802e4a0:	4618      	mov	r0, r3
 802e4a2:	4619      	mov	r1, r3
 802e4a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802e4a8:	f1bc 0f09 	cmp.w	ip, #9
 802e4ac:	d82a      	bhi.n	802e504 <_strtoull_l.constprop.0+0xd0>
 802e4ae:	4664      	mov	r4, ip
 802e4b0:	42a6      	cmp	r6, r4
 802e4b2:	dd38      	ble.n	802e526 <_strtoull_l.constprop.0+0xf2>
 802e4b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802e4b8:	d015      	beq.n	802e4e6 <_strtoull_l.constprop.0+0xb2>
 802e4ba:	9b00      	ldr	r3, [sp, #0]
 802e4bc:	4283      	cmp	r3, r0
 802e4be:	eb78 0301 	sbcs.w	r3, r8, r1
 802e4c2:	d32d      	bcc.n	802e520 <_strtoull_l.constprop.0+0xec>
 802e4c4:	9b00      	ldr	r3, [sp, #0]
 802e4c6:	4588      	cmp	r8, r1
 802e4c8:	bf08      	it	eq
 802e4ca:	4283      	cmpeq	r3, r0
 802e4cc:	d101      	bne.n	802e4d2 <_strtoull_l.constprop.0+0x9e>
 802e4ce:	42a2      	cmp	r2, r4
 802e4d0:	db26      	blt.n	802e520 <_strtoull_l.constprop.0+0xec>
 802e4d2:	4371      	muls	r1, r6
 802e4d4:	fb00 110b 	mla	r1, r0, fp, r1
 802e4d8:	fba6 0300 	umull	r0, r3, r6, r0
 802e4dc:	4419      	add	r1, r3
 802e4de:	1820      	adds	r0, r4, r0
 802e4e0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 802e4e4:	2301      	movs	r3, #1
 802e4e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e4ea:	e7db      	b.n	802e4a4 <_strtoull_l.constprop.0+0x70>
 802e4ec:	2c2b      	cmp	r4, #43	@ 0x2b
 802e4ee:	bf04      	itt	eq
 802e4f0:	782c      	ldrbeq	r4, [r5, #0]
 802e4f2:	1c9d      	addeq	r5, r3, #2
 802e4f4:	e7b2      	b.n	802e45c <_strtoull_l.constprop.0+0x28>
 802e4f6:	2e00      	cmp	r6, #0
 802e4f8:	d1bd      	bne.n	802e476 <_strtoull_l.constprop.0+0x42>
 802e4fa:	2c30      	cmp	r4, #48	@ 0x30
 802e4fc:	bf0c      	ite	eq
 802e4fe:	2608      	moveq	r6, #8
 802e500:	260a      	movne	r6, #10
 802e502:	e7b8      	b.n	802e476 <_strtoull_l.constprop.0+0x42>
 802e504:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 802e508:	f1bc 0f19 	cmp.w	ip, #25
 802e50c:	d801      	bhi.n	802e512 <_strtoull_l.constprop.0+0xde>
 802e50e:	3c37      	subs	r4, #55	@ 0x37
 802e510:	e7ce      	b.n	802e4b0 <_strtoull_l.constprop.0+0x7c>
 802e512:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802e516:	f1bc 0f19 	cmp.w	ip, #25
 802e51a:	d804      	bhi.n	802e526 <_strtoull_l.constprop.0+0xf2>
 802e51c:	3c57      	subs	r4, #87	@ 0x57
 802e51e:	e7c7      	b.n	802e4b0 <_strtoull_l.constprop.0+0x7c>
 802e520:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e524:	e7df      	b.n	802e4e6 <_strtoull_l.constprop.0+0xb2>
 802e526:	1c5a      	adds	r2, r3, #1
 802e528:	d10a      	bne.n	802e540 <_strtoull_l.constprop.0+0x10c>
 802e52a:	9901      	ldr	r1, [sp, #4]
 802e52c:	2222      	movs	r2, #34	@ 0x22
 802e52e:	600a      	str	r2, [r1, #0]
 802e530:	4618      	mov	r0, r3
 802e532:	4619      	mov	r1, r3
 802e534:	f1b9 0f00 	cmp.w	r9, #0
 802e538:	d10a      	bne.n	802e550 <_strtoull_l.constprop.0+0x11c>
 802e53a:	b003      	add	sp, #12
 802e53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e540:	b117      	cbz	r7, 802e548 <_strtoull_l.constprop.0+0x114>
 802e542:	4240      	negs	r0, r0
 802e544:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802e548:	f1b9 0f00 	cmp.w	r9, #0
 802e54c:	d0f5      	beq.n	802e53a <_strtoull_l.constprop.0+0x106>
 802e54e:	b10b      	cbz	r3, 802e554 <_strtoull_l.constprop.0+0x120>
 802e550:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 802e554:	f8c9 a000 	str.w	sl, [r9]
 802e558:	e7ef      	b.n	802e53a <_strtoull_l.constprop.0+0x106>
 802e55a:	bf00      	nop
 802e55c:	08034405 	.word	0x08034405

0802e560 <_strtoull_r>:
 802e560:	f7ff bf68 	b.w	802e434 <_strtoull_l.constprop.0>

0802e564 <_mbrtowc_r>:
 802e564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802e566:	4c0a      	ldr	r4, [pc, #40]	@ (802e590 <_mbrtowc_r+0x2c>)
 802e568:	9e08      	ldr	r6, [sp, #32]
 802e56a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 802e56e:	9600      	str	r6, [sp, #0]
 802e570:	4605      	mov	r5, r0
 802e572:	4614      	mov	r4, r2
 802e574:	b912      	cbnz	r2, 802e57c <_mbrtowc_r+0x18>
 802e576:	4a07      	ldr	r2, [pc, #28]	@ (802e594 <_mbrtowc_r+0x30>)
 802e578:	2301      	movs	r3, #1
 802e57a:	4621      	mov	r1, r4
 802e57c:	47b8      	blx	r7
 802e57e:	1c43      	adds	r3, r0, #1
 802e580:	bf01      	itttt	eq
 802e582:	2300      	moveq	r3, #0
 802e584:	6033      	streq	r3, [r6, #0]
 802e586:	238a      	moveq	r3, #138	@ 0x8a
 802e588:	602b      	streq	r3, [r5, #0]
 802e58a:	b003      	add	sp, #12
 802e58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e58e:	bf00      	nop
 802e590:	200002c4 	.word	0x200002c4
 802e594:	08034047 	.word	0x08034047

0802e598 <iswspace>:
 802e598:	2100      	movs	r1, #0
 802e59a:	f000 b801 	b.w	802e5a0 <iswspace_l>
	...

0802e5a0 <iswspace_l>:
 802e5a0:	28ff      	cmp	r0, #255	@ 0xff
 802e5a2:	bf9d      	ittte	ls
 802e5a4:	4b02      	ldrls	r3, [pc, #8]	@ (802e5b0 <iswspace_l+0x10>)
 802e5a6:	5c18      	ldrbls	r0, [r3, r0]
 802e5a8:	f000 0008 	andls.w	r0, r0, #8
 802e5ac:	2000      	movhi	r0, #0
 802e5ae:	4770      	bx	lr
 802e5b0:	08034405 	.word	0x08034405

0802e5b4 <__register_exitproc>:
 802e5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e5b8:	f8df a074 	ldr.w	sl, [pc, #116]	@ 802e630 <__register_exitproc+0x7c>
 802e5bc:	4606      	mov	r6, r0
 802e5be:	f8da 0000 	ldr.w	r0, [sl]
 802e5c2:	4698      	mov	r8, r3
 802e5c4:	460f      	mov	r7, r1
 802e5c6:	4691      	mov	r9, r2
 802e5c8:	f7f8 fc7b 	bl	8026ec2 <__retarget_lock_acquire_recursive>
 802e5cc:	4b16      	ldr	r3, [pc, #88]	@ (802e628 <__register_exitproc+0x74>)
 802e5ce:	681c      	ldr	r4, [r3, #0]
 802e5d0:	b90c      	cbnz	r4, 802e5d6 <__register_exitproc+0x22>
 802e5d2:	4c16      	ldr	r4, [pc, #88]	@ (802e62c <__register_exitproc+0x78>)
 802e5d4:	601c      	str	r4, [r3, #0]
 802e5d6:	6865      	ldr	r5, [r4, #4]
 802e5d8:	f8da 0000 	ldr.w	r0, [sl]
 802e5dc:	2d1f      	cmp	r5, #31
 802e5de:	dd05      	ble.n	802e5ec <__register_exitproc+0x38>
 802e5e0:	f7f8 fc71 	bl	8026ec6 <__retarget_lock_release_recursive>
 802e5e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e5ec:	b19e      	cbz	r6, 802e616 <__register_exitproc+0x62>
 802e5ee:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 802e5f2:	2201      	movs	r2, #1
 802e5f4:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 802e5f8:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 802e5fc:	40aa      	lsls	r2, r5
 802e5fe:	4313      	orrs	r3, r2
 802e600:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 802e604:	2e02      	cmp	r6, #2
 802e606:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 802e60a:	bf02      	ittt	eq
 802e60c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 802e610:	4313      	orreq	r3, r2
 802e612:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 802e616:	1c6b      	adds	r3, r5, #1
 802e618:	3502      	adds	r5, #2
 802e61a:	6063      	str	r3, [r4, #4]
 802e61c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 802e620:	f7f8 fc51 	bl	8026ec6 <__retarget_lock_release_recursive>
 802e624:	2000      	movs	r0, #0
 802e626:	e7df      	b.n	802e5e8 <__register_exitproc+0x34>
 802e628:	200182cc 	.word	0x200182cc
 802e62c:	20018304 	.word	0x20018304
 802e630:	20000558 	.word	0x20000558
 802e634:	00000000 	.word	0x00000000

0802e638 <nan>:
 802e638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 802e640 <nan+0x8>
 802e63c:	4770      	bx	lr
 802e63e:	bf00      	nop
 802e640:	00000000 	.word	0x00000000
 802e644:	7ff80000 	.word	0x7ff80000

0802e648 <nanf>:
 802e648:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 802e650 <nanf+0x8>
 802e64c:	4770      	bx	lr
 802e64e:	bf00      	nop
 802e650:	7fc00000 	.word	0x7fc00000

0802e654 <_calloc_r>:
 802e654:	b538      	push	{r3, r4, r5, lr}
 802e656:	fba1 1502 	umull	r1, r5, r1, r2
 802e65a:	b935      	cbnz	r5, 802e66a <_calloc_r+0x16>
 802e65c:	f7f9 fc4e 	bl	8027efc <_malloc_r>
 802e660:	4604      	mov	r4, r0
 802e662:	b938      	cbnz	r0, 802e674 <_calloc_r+0x20>
 802e664:	2400      	movs	r4, #0
 802e666:	4620      	mov	r0, r4
 802e668:	bd38      	pop	{r3, r4, r5, pc}
 802e66a:	f7f8 fbf5 	bl	8026e58 <__errno>
 802e66e:	230c      	movs	r3, #12
 802e670:	6003      	str	r3, [r0, #0]
 802e672:	e7f7      	b.n	802e664 <_calloc_r+0x10>
 802e674:	f850 2c04 	ldr.w	r2, [r0, #-4]
 802e678:	f022 0203 	bic.w	r2, r2, #3
 802e67c:	3a04      	subs	r2, #4
 802e67e:	2a24      	cmp	r2, #36	@ 0x24
 802e680:	d819      	bhi.n	802e6b6 <_calloc_r+0x62>
 802e682:	2a13      	cmp	r2, #19
 802e684:	d915      	bls.n	802e6b2 <_calloc_r+0x5e>
 802e686:	2a1b      	cmp	r2, #27
 802e688:	e9c0 5500 	strd	r5, r5, [r0]
 802e68c:	d806      	bhi.n	802e69c <_calloc_r+0x48>
 802e68e:	f100 0308 	add.w	r3, r0, #8
 802e692:	2200      	movs	r2, #0
 802e694:	e9c3 2200 	strd	r2, r2, [r3]
 802e698:	609a      	str	r2, [r3, #8]
 802e69a:	e7e4      	b.n	802e666 <_calloc_r+0x12>
 802e69c:	2a24      	cmp	r2, #36	@ 0x24
 802e69e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 802e6a2:	bf11      	iteee	ne
 802e6a4:	f100 0310 	addne.w	r3, r0, #16
 802e6a8:	6105      	streq	r5, [r0, #16]
 802e6aa:	f100 0318 	addeq.w	r3, r0, #24
 802e6ae:	6145      	streq	r5, [r0, #20]
 802e6b0:	e7ef      	b.n	802e692 <_calloc_r+0x3e>
 802e6b2:	4603      	mov	r3, r0
 802e6b4:	e7ed      	b.n	802e692 <_calloc_r+0x3e>
 802e6b6:	4629      	mov	r1, r5
 802e6b8:	f7f7 f9ca 	bl	8025a50 <memset>
 802e6bc:	e7d3      	b.n	802e666 <_calloc_r+0x12>
	...

0802e6c0 <__env_lock>:
 802e6c0:	4801      	ldr	r0, [pc, #4]	@ (802e6c8 <__env_lock+0x8>)
 802e6c2:	f7f8 bbfe 	b.w	8026ec2 <__retarget_lock_acquire_recursive>
 802e6c6:	bf00      	nop
 802e6c8:	200182c5 	.word	0x200182c5

0802e6cc <__env_unlock>:
 802e6cc:	4801      	ldr	r0, [pc, #4]	@ (802e6d4 <__env_unlock+0x8>)
 802e6ce:	f7f8 bbfa 	b.w	8026ec6 <__retarget_lock_release_recursive>
 802e6d2:	bf00      	nop
 802e6d4:	200182c5 	.word	0x200182c5

0802e6d8 <rshift>:
 802e6d8:	6903      	ldr	r3, [r0, #16]
 802e6da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802e6de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802e6e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 802e6e6:	f100 0414 	add.w	r4, r0, #20
 802e6ea:	dd45      	ble.n	802e778 <rshift+0xa0>
 802e6ec:	f011 011f 	ands.w	r1, r1, #31
 802e6f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802e6f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802e6f8:	d10c      	bne.n	802e714 <rshift+0x3c>
 802e6fa:	f100 0710 	add.w	r7, r0, #16
 802e6fe:	4629      	mov	r1, r5
 802e700:	42b1      	cmp	r1, r6
 802e702:	d334      	bcc.n	802e76e <rshift+0x96>
 802e704:	1a9b      	subs	r3, r3, r2
 802e706:	009b      	lsls	r3, r3, #2
 802e708:	1eea      	subs	r2, r5, #3
 802e70a:	4296      	cmp	r6, r2
 802e70c:	bf38      	it	cc
 802e70e:	2300      	movcc	r3, #0
 802e710:	4423      	add	r3, r4
 802e712:	e015      	b.n	802e740 <rshift+0x68>
 802e714:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802e718:	f1c1 0820 	rsb	r8, r1, #32
 802e71c:	40cf      	lsrs	r7, r1
 802e71e:	f105 0e04 	add.w	lr, r5, #4
 802e722:	46a1      	mov	r9, r4
 802e724:	4576      	cmp	r6, lr
 802e726:	46f4      	mov	ip, lr
 802e728:	d815      	bhi.n	802e756 <rshift+0x7e>
 802e72a:	1a9a      	subs	r2, r3, r2
 802e72c:	0092      	lsls	r2, r2, #2
 802e72e:	3a04      	subs	r2, #4
 802e730:	3501      	adds	r5, #1
 802e732:	42ae      	cmp	r6, r5
 802e734:	bf38      	it	cc
 802e736:	2200      	movcc	r2, #0
 802e738:	18a3      	adds	r3, r4, r2
 802e73a:	50a7      	str	r7, [r4, r2]
 802e73c:	b107      	cbz	r7, 802e740 <rshift+0x68>
 802e73e:	3304      	adds	r3, #4
 802e740:	1b1a      	subs	r2, r3, r4
 802e742:	42a3      	cmp	r3, r4
 802e744:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802e748:	bf08      	it	eq
 802e74a:	2300      	moveq	r3, #0
 802e74c:	6102      	str	r2, [r0, #16]
 802e74e:	bf08      	it	eq
 802e750:	6143      	streq	r3, [r0, #20]
 802e752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802e756:	f8dc c000 	ldr.w	ip, [ip]
 802e75a:	fa0c fc08 	lsl.w	ip, ip, r8
 802e75e:	ea4c 0707 	orr.w	r7, ip, r7
 802e762:	f849 7b04 	str.w	r7, [r9], #4
 802e766:	f85e 7b04 	ldr.w	r7, [lr], #4
 802e76a:	40cf      	lsrs	r7, r1
 802e76c:	e7da      	b.n	802e724 <rshift+0x4c>
 802e76e:	f851 cb04 	ldr.w	ip, [r1], #4
 802e772:	f847 cf04 	str.w	ip, [r7, #4]!
 802e776:	e7c3      	b.n	802e700 <rshift+0x28>
 802e778:	4623      	mov	r3, r4
 802e77a:	e7e1      	b.n	802e740 <rshift+0x68>

0802e77c <__hexdig_fun>:
 802e77c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802e780:	2b09      	cmp	r3, #9
 802e782:	d802      	bhi.n	802e78a <__hexdig_fun+0xe>
 802e784:	3820      	subs	r0, #32
 802e786:	b2c0      	uxtb	r0, r0
 802e788:	4770      	bx	lr
 802e78a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802e78e:	2b05      	cmp	r3, #5
 802e790:	d801      	bhi.n	802e796 <__hexdig_fun+0x1a>
 802e792:	3847      	subs	r0, #71	@ 0x47
 802e794:	e7f7      	b.n	802e786 <__hexdig_fun+0xa>
 802e796:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 802e79a:	2b05      	cmp	r3, #5
 802e79c:	d801      	bhi.n	802e7a2 <__hexdig_fun+0x26>
 802e79e:	3827      	subs	r0, #39	@ 0x27
 802e7a0:	e7f1      	b.n	802e786 <__hexdig_fun+0xa>
 802e7a2:	2000      	movs	r0, #0
 802e7a4:	4770      	bx	lr
	...

0802e7a8 <__gethex>:
 802e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e7ac:	b085      	sub	sp, #20
 802e7ae:	468a      	mov	sl, r1
 802e7b0:	9302      	str	r3, [sp, #8]
 802e7b2:	680b      	ldr	r3, [r1, #0]
 802e7b4:	9001      	str	r0, [sp, #4]
 802e7b6:	4690      	mov	r8, r2
 802e7b8:	1c9c      	adds	r4, r3, #2
 802e7ba:	46a1      	mov	r9, r4
 802e7bc:	f814 0b01 	ldrb.w	r0, [r4], #1
 802e7c0:	2830      	cmp	r0, #48	@ 0x30
 802e7c2:	d0fa      	beq.n	802e7ba <__gethex+0x12>
 802e7c4:	eba9 0303 	sub.w	r3, r9, r3
 802e7c8:	f1a3 0b02 	sub.w	fp, r3, #2
 802e7cc:	f7ff ffd6 	bl	802e77c <__hexdig_fun>
 802e7d0:	4605      	mov	r5, r0
 802e7d2:	2800      	cmp	r0, #0
 802e7d4:	d168      	bne.n	802e8a8 <__gethex+0x100>
 802e7d6:	49a0      	ldr	r1, [pc, #640]	@ (802ea58 <__gethex+0x2b0>)
 802e7d8:	2201      	movs	r2, #1
 802e7da:	4648      	mov	r0, r9
 802e7dc:	f7f7 f96d 	bl	8025aba <strncmp>
 802e7e0:	4607      	mov	r7, r0
 802e7e2:	2800      	cmp	r0, #0
 802e7e4:	d167      	bne.n	802e8b6 <__gethex+0x10e>
 802e7e6:	f899 0001 	ldrb.w	r0, [r9, #1]
 802e7ea:	4626      	mov	r6, r4
 802e7ec:	f7ff ffc6 	bl	802e77c <__hexdig_fun>
 802e7f0:	2800      	cmp	r0, #0
 802e7f2:	d062      	beq.n	802e8ba <__gethex+0x112>
 802e7f4:	4623      	mov	r3, r4
 802e7f6:	7818      	ldrb	r0, [r3, #0]
 802e7f8:	2830      	cmp	r0, #48	@ 0x30
 802e7fa:	4699      	mov	r9, r3
 802e7fc:	f103 0301 	add.w	r3, r3, #1
 802e800:	d0f9      	beq.n	802e7f6 <__gethex+0x4e>
 802e802:	f7ff ffbb 	bl	802e77c <__hexdig_fun>
 802e806:	fab0 f580 	clz	r5, r0
 802e80a:	096d      	lsrs	r5, r5, #5
 802e80c:	f04f 0b01 	mov.w	fp, #1
 802e810:	464a      	mov	r2, r9
 802e812:	4616      	mov	r6, r2
 802e814:	3201      	adds	r2, #1
 802e816:	7830      	ldrb	r0, [r6, #0]
 802e818:	f7ff ffb0 	bl	802e77c <__hexdig_fun>
 802e81c:	2800      	cmp	r0, #0
 802e81e:	d1f8      	bne.n	802e812 <__gethex+0x6a>
 802e820:	498d      	ldr	r1, [pc, #564]	@ (802ea58 <__gethex+0x2b0>)
 802e822:	2201      	movs	r2, #1
 802e824:	4630      	mov	r0, r6
 802e826:	f7f7 f948 	bl	8025aba <strncmp>
 802e82a:	2800      	cmp	r0, #0
 802e82c:	d13f      	bne.n	802e8ae <__gethex+0x106>
 802e82e:	b944      	cbnz	r4, 802e842 <__gethex+0x9a>
 802e830:	1c74      	adds	r4, r6, #1
 802e832:	4622      	mov	r2, r4
 802e834:	4616      	mov	r6, r2
 802e836:	3201      	adds	r2, #1
 802e838:	7830      	ldrb	r0, [r6, #0]
 802e83a:	f7ff ff9f 	bl	802e77c <__hexdig_fun>
 802e83e:	2800      	cmp	r0, #0
 802e840:	d1f8      	bne.n	802e834 <__gethex+0x8c>
 802e842:	1ba4      	subs	r4, r4, r6
 802e844:	00a7      	lsls	r7, r4, #2
 802e846:	7833      	ldrb	r3, [r6, #0]
 802e848:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802e84c:	2b50      	cmp	r3, #80	@ 0x50
 802e84e:	d13e      	bne.n	802e8ce <__gethex+0x126>
 802e850:	7873      	ldrb	r3, [r6, #1]
 802e852:	2b2b      	cmp	r3, #43	@ 0x2b
 802e854:	d033      	beq.n	802e8be <__gethex+0x116>
 802e856:	2b2d      	cmp	r3, #45	@ 0x2d
 802e858:	d034      	beq.n	802e8c4 <__gethex+0x11c>
 802e85a:	1c71      	adds	r1, r6, #1
 802e85c:	2400      	movs	r4, #0
 802e85e:	7808      	ldrb	r0, [r1, #0]
 802e860:	f7ff ff8c 	bl	802e77c <__hexdig_fun>
 802e864:	1e43      	subs	r3, r0, #1
 802e866:	b2db      	uxtb	r3, r3
 802e868:	2b18      	cmp	r3, #24
 802e86a:	d830      	bhi.n	802e8ce <__gethex+0x126>
 802e86c:	f1a0 0210 	sub.w	r2, r0, #16
 802e870:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802e874:	f7ff ff82 	bl	802e77c <__hexdig_fun>
 802e878:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 802e87c:	fa5f fc8c 	uxtb.w	ip, ip
 802e880:	f1bc 0f18 	cmp.w	ip, #24
 802e884:	f04f 030a 	mov.w	r3, #10
 802e888:	d91e      	bls.n	802e8c8 <__gethex+0x120>
 802e88a:	b104      	cbz	r4, 802e88e <__gethex+0xe6>
 802e88c:	4252      	negs	r2, r2
 802e88e:	4417      	add	r7, r2
 802e890:	f8ca 1000 	str.w	r1, [sl]
 802e894:	b1ed      	cbz	r5, 802e8d2 <__gethex+0x12a>
 802e896:	f1bb 0f00 	cmp.w	fp, #0
 802e89a:	bf0c      	ite	eq
 802e89c:	2506      	moveq	r5, #6
 802e89e:	2500      	movne	r5, #0
 802e8a0:	4628      	mov	r0, r5
 802e8a2:	b005      	add	sp, #20
 802e8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e8a8:	2500      	movs	r5, #0
 802e8aa:	462c      	mov	r4, r5
 802e8ac:	e7b0      	b.n	802e810 <__gethex+0x68>
 802e8ae:	2c00      	cmp	r4, #0
 802e8b0:	d1c7      	bne.n	802e842 <__gethex+0x9a>
 802e8b2:	4627      	mov	r7, r4
 802e8b4:	e7c7      	b.n	802e846 <__gethex+0x9e>
 802e8b6:	464e      	mov	r6, r9
 802e8b8:	462f      	mov	r7, r5
 802e8ba:	2501      	movs	r5, #1
 802e8bc:	e7c3      	b.n	802e846 <__gethex+0x9e>
 802e8be:	2400      	movs	r4, #0
 802e8c0:	1cb1      	adds	r1, r6, #2
 802e8c2:	e7cc      	b.n	802e85e <__gethex+0xb6>
 802e8c4:	2401      	movs	r4, #1
 802e8c6:	e7fb      	b.n	802e8c0 <__gethex+0x118>
 802e8c8:	fb03 0002 	mla	r0, r3, r2, r0
 802e8cc:	e7ce      	b.n	802e86c <__gethex+0xc4>
 802e8ce:	4631      	mov	r1, r6
 802e8d0:	e7de      	b.n	802e890 <__gethex+0xe8>
 802e8d2:	eba6 0309 	sub.w	r3, r6, r9
 802e8d6:	3b01      	subs	r3, #1
 802e8d8:	4629      	mov	r1, r5
 802e8da:	2b07      	cmp	r3, #7
 802e8dc:	dc0a      	bgt.n	802e8f4 <__gethex+0x14c>
 802e8de:	9801      	ldr	r0, [sp, #4]
 802e8e0:	f7fd fe22 	bl	802c528 <_Balloc>
 802e8e4:	4604      	mov	r4, r0
 802e8e6:	b940      	cbnz	r0, 802e8fa <__gethex+0x152>
 802e8e8:	4b5c      	ldr	r3, [pc, #368]	@ (802ea5c <__gethex+0x2b4>)
 802e8ea:	4602      	mov	r2, r0
 802e8ec:	21e4      	movs	r1, #228	@ 0xe4
 802e8ee:	485c      	ldr	r0, [pc, #368]	@ (802ea60 <__gethex+0x2b8>)
 802e8f0:	f7f4 fb5a 	bl	8022fa8 <__assert_func>
 802e8f4:	3101      	adds	r1, #1
 802e8f6:	105b      	asrs	r3, r3, #1
 802e8f8:	e7ef      	b.n	802e8da <__gethex+0x132>
 802e8fa:	f100 0a14 	add.w	sl, r0, #20
 802e8fe:	2300      	movs	r3, #0
 802e900:	4655      	mov	r5, sl
 802e902:	469b      	mov	fp, r3
 802e904:	45b1      	cmp	r9, r6
 802e906:	d337      	bcc.n	802e978 <__gethex+0x1d0>
 802e908:	f845 bb04 	str.w	fp, [r5], #4
 802e90c:	eba5 050a 	sub.w	r5, r5, sl
 802e910:	10ad      	asrs	r5, r5, #2
 802e912:	6125      	str	r5, [r4, #16]
 802e914:	4658      	mov	r0, fp
 802e916:	f7fd fec5 	bl	802c6a4 <__hi0bits>
 802e91a:	016d      	lsls	r5, r5, #5
 802e91c:	f8d8 6000 	ldr.w	r6, [r8]
 802e920:	1a2d      	subs	r5, r5, r0
 802e922:	42b5      	cmp	r5, r6
 802e924:	dd54      	ble.n	802e9d0 <__gethex+0x228>
 802e926:	1bad      	subs	r5, r5, r6
 802e928:	4629      	mov	r1, r5
 802e92a:	4620      	mov	r0, r4
 802e92c:	f7fe fa3f 	bl	802cdae <__any_on>
 802e930:	4681      	mov	r9, r0
 802e932:	b178      	cbz	r0, 802e954 <__gethex+0x1ac>
 802e934:	1e6b      	subs	r3, r5, #1
 802e936:	1159      	asrs	r1, r3, #5
 802e938:	f003 021f 	and.w	r2, r3, #31
 802e93c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 802e940:	f04f 0901 	mov.w	r9, #1
 802e944:	fa09 f202 	lsl.w	r2, r9, r2
 802e948:	420a      	tst	r2, r1
 802e94a:	d003      	beq.n	802e954 <__gethex+0x1ac>
 802e94c:	454b      	cmp	r3, r9
 802e94e:	dc36      	bgt.n	802e9be <__gethex+0x216>
 802e950:	f04f 0902 	mov.w	r9, #2
 802e954:	4629      	mov	r1, r5
 802e956:	4620      	mov	r0, r4
 802e958:	f7ff febe 	bl	802e6d8 <rshift>
 802e95c:	442f      	add	r7, r5
 802e95e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802e962:	42bb      	cmp	r3, r7
 802e964:	da42      	bge.n	802e9ec <__gethex+0x244>
 802e966:	9801      	ldr	r0, [sp, #4]
 802e968:	4621      	mov	r1, r4
 802e96a:	f7fd fe02 	bl	802c572 <_Bfree>
 802e96e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802e970:	2300      	movs	r3, #0
 802e972:	6013      	str	r3, [r2, #0]
 802e974:	25a3      	movs	r5, #163	@ 0xa3
 802e976:	e793      	b.n	802e8a0 <__gethex+0xf8>
 802e978:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 802e97c:	2a2e      	cmp	r2, #46	@ 0x2e
 802e97e:	d012      	beq.n	802e9a6 <__gethex+0x1fe>
 802e980:	2b20      	cmp	r3, #32
 802e982:	d104      	bne.n	802e98e <__gethex+0x1e6>
 802e984:	f845 bb04 	str.w	fp, [r5], #4
 802e988:	f04f 0b00 	mov.w	fp, #0
 802e98c:	465b      	mov	r3, fp
 802e98e:	7830      	ldrb	r0, [r6, #0]
 802e990:	9303      	str	r3, [sp, #12]
 802e992:	f7ff fef3 	bl	802e77c <__hexdig_fun>
 802e996:	9b03      	ldr	r3, [sp, #12]
 802e998:	f000 000f 	and.w	r0, r0, #15
 802e99c:	4098      	lsls	r0, r3
 802e99e:	ea4b 0b00 	orr.w	fp, fp, r0
 802e9a2:	3304      	adds	r3, #4
 802e9a4:	e7ae      	b.n	802e904 <__gethex+0x15c>
 802e9a6:	45b1      	cmp	r9, r6
 802e9a8:	d8ea      	bhi.n	802e980 <__gethex+0x1d8>
 802e9aa:	492b      	ldr	r1, [pc, #172]	@ (802ea58 <__gethex+0x2b0>)
 802e9ac:	9303      	str	r3, [sp, #12]
 802e9ae:	2201      	movs	r2, #1
 802e9b0:	4630      	mov	r0, r6
 802e9b2:	f7f7 f882 	bl	8025aba <strncmp>
 802e9b6:	9b03      	ldr	r3, [sp, #12]
 802e9b8:	2800      	cmp	r0, #0
 802e9ba:	d1e1      	bne.n	802e980 <__gethex+0x1d8>
 802e9bc:	e7a2      	b.n	802e904 <__gethex+0x15c>
 802e9be:	1ea9      	subs	r1, r5, #2
 802e9c0:	4620      	mov	r0, r4
 802e9c2:	f7fe f9f4 	bl	802cdae <__any_on>
 802e9c6:	2800      	cmp	r0, #0
 802e9c8:	d0c2      	beq.n	802e950 <__gethex+0x1a8>
 802e9ca:	f04f 0903 	mov.w	r9, #3
 802e9ce:	e7c1      	b.n	802e954 <__gethex+0x1ac>
 802e9d0:	da09      	bge.n	802e9e6 <__gethex+0x23e>
 802e9d2:	1b75      	subs	r5, r6, r5
 802e9d4:	4621      	mov	r1, r4
 802e9d6:	9801      	ldr	r0, [sp, #4]
 802e9d8:	462a      	mov	r2, r5
 802e9da:	f7fd ffaf 	bl	802c93c <__lshift>
 802e9de:	1b7f      	subs	r7, r7, r5
 802e9e0:	4604      	mov	r4, r0
 802e9e2:	f100 0a14 	add.w	sl, r0, #20
 802e9e6:	f04f 0900 	mov.w	r9, #0
 802e9ea:	e7b8      	b.n	802e95e <__gethex+0x1b6>
 802e9ec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802e9f0:	42bd      	cmp	r5, r7
 802e9f2:	dd6f      	ble.n	802ead4 <__gethex+0x32c>
 802e9f4:	1bed      	subs	r5, r5, r7
 802e9f6:	42ae      	cmp	r6, r5
 802e9f8:	dc34      	bgt.n	802ea64 <__gethex+0x2bc>
 802e9fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802e9fe:	2b02      	cmp	r3, #2
 802ea00:	d022      	beq.n	802ea48 <__gethex+0x2a0>
 802ea02:	2b03      	cmp	r3, #3
 802ea04:	d024      	beq.n	802ea50 <__gethex+0x2a8>
 802ea06:	2b01      	cmp	r3, #1
 802ea08:	d115      	bne.n	802ea36 <__gethex+0x28e>
 802ea0a:	42ae      	cmp	r6, r5
 802ea0c:	d113      	bne.n	802ea36 <__gethex+0x28e>
 802ea0e:	2e01      	cmp	r6, #1
 802ea10:	d10b      	bne.n	802ea2a <__gethex+0x282>
 802ea12:	9a02      	ldr	r2, [sp, #8]
 802ea14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802ea18:	6013      	str	r3, [r2, #0]
 802ea1a:	2301      	movs	r3, #1
 802ea1c:	6123      	str	r3, [r4, #16]
 802ea1e:	f8ca 3000 	str.w	r3, [sl]
 802ea22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ea24:	2562      	movs	r5, #98	@ 0x62
 802ea26:	601c      	str	r4, [r3, #0]
 802ea28:	e73a      	b.n	802e8a0 <__gethex+0xf8>
 802ea2a:	1e71      	subs	r1, r6, #1
 802ea2c:	4620      	mov	r0, r4
 802ea2e:	f7fe f9be 	bl	802cdae <__any_on>
 802ea32:	2800      	cmp	r0, #0
 802ea34:	d1ed      	bne.n	802ea12 <__gethex+0x26a>
 802ea36:	9801      	ldr	r0, [sp, #4]
 802ea38:	4621      	mov	r1, r4
 802ea3a:	f7fd fd9a 	bl	802c572 <_Bfree>
 802ea3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802ea40:	2300      	movs	r3, #0
 802ea42:	6013      	str	r3, [r2, #0]
 802ea44:	2550      	movs	r5, #80	@ 0x50
 802ea46:	e72b      	b.n	802e8a0 <__gethex+0xf8>
 802ea48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ea4a:	2b00      	cmp	r3, #0
 802ea4c:	d1f3      	bne.n	802ea36 <__gethex+0x28e>
 802ea4e:	e7e0      	b.n	802ea12 <__gethex+0x26a>
 802ea50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ea52:	2b00      	cmp	r3, #0
 802ea54:	d1dd      	bne.n	802ea12 <__gethex+0x26a>
 802ea56:	e7ee      	b.n	802ea36 <__gethex+0x28e>
 802ea58:	080341da 	.word	0x080341da
 802ea5c:	08034512 	.word	0x08034512
 802ea60:	080347b0 	.word	0x080347b0
 802ea64:	1e6f      	subs	r7, r5, #1
 802ea66:	f1b9 0f00 	cmp.w	r9, #0
 802ea6a:	d130      	bne.n	802eace <__gethex+0x326>
 802ea6c:	b127      	cbz	r7, 802ea78 <__gethex+0x2d0>
 802ea6e:	4639      	mov	r1, r7
 802ea70:	4620      	mov	r0, r4
 802ea72:	f7fe f99c 	bl	802cdae <__any_on>
 802ea76:	4681      	mov	r9, r0
 802ea78:	117a      	asrs	r2, r7, #5
 802ea7a:	2301      	movs	r3, #1
 802ea7c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802ea80:	f007 071f 	and.w	r7, r7, #31
 802ea84:	40bb      	lsls	r3, r7
 802ea86:	4213      	tst	r3, r2
 802ea88:	4629      	mov	r1, r5
 802ea8a:	4620      	mov	r0, r4
 802ea8c:	bf18      	it	ne
 802ea8e:	f049 0902 	orrne.w	r9, r9, #2
 802ea92:	f7ff fe21 	bl	802e6d8 <rshift>
 802ea96:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802ea9a:	1b76      	subs	r6, r6, r5
 802ea9c:	2502      	movs	r5, #2
 802ea9e:	f1b9 0f00 	cmp.w	r9, #0
 802eaa2:	d047      	beq.n	802eb34 <__gethex+0x38c>
 802eaa4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802eaa8:	2b02      	cmp	r3, #2
 802eaaa:	d015      	beq.n	802ead8 <__gethex+0x330>
 802eaac:	2b03      	cmp	r3, #3
 802eaae:	d017      	beq.n	802eae0 <__gethex+0x338>
 802eab0:	2b01      	cmp	r3, #1
 802eab2:	d109      	bne.n	802eac8 <__gethex+0x320>
 802eab4:	f019 0f02 	tst.w	r9, #2
 802eab8:	d006      	beq.n	802eac8 <__gethex+0x320>
 802eaba:	f8da 3000 	ldr.w	r3, [sl]
 802eabe:	ea49 0903 	orr.w	r9, r9, r3
 802eac2:	f019 0f01 	tst.w	r9, #1
 802eac6:	d10e      	bne.n	802eae6 <__gethex+0x33e>
 802eac8:	f045 0510 	orr.w	r5, r5, #16
 802eacc:	e032      	b.n	802eb34 <__gethex+0x38c>
 802eace:	f04f 0901 	mov.w	r9, #1
 802ead2:	e7d1      	b.n	802ea78 <__gethex+0x2d0>
 802ead4:	2501      	movs	r5, #1
 802ead6:	e7e2      	b.n	802ea9e <__gethex+0x2f6>
 802ead8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802eada:	f1c3 0301 	rsb	r3, r3, #1
 802eade:	930f      	str	r3, [sp, #60]	@ 0x3c
 802eae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802eae2:	2b00      	cmp	r3, #0
 802eae4:	d0f0      	beq.n	802eac8 <__gethex+0x320>
 802eae6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802eaea:	f104 0314 	add.w	r3, r4, #20
 802eaee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802eaf2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802eaf6:	f04f 0c00 	mov.w	ip, #0
 802eafa:	4618      	mov	r0, r3
 802eafc:	f853 2b04 	ldr.w	r2, [r3], #4
 802eb00:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 802eb04:	d01b      	beq.n	802eb3e <__gethex+0x396>
 802eb06:	3201      	adds	r2, #1
 802eb08:	6002      	str	r2, [r0, #0]
 802eb0a:	2d02      	cmp	r5, #2
 802eb0c:	f104 0314 	add.w	r3, r4, #20
 802eb10:	d13c      	bne.n	802eb8c <__gethex+0x3e4>
 802eb12:	f8d8 2000 	ldr.w	r2, [r8]
 802eb16:	3a01      	subs	r2, #1
 802eb18:	42b2      	cmp	r2, r6
 802eb1a:	d109      	bne.n	802eb30 <__gethex+0x388>
 802eb1c:	1171      	asrs	r1, r6, #5
 802eb1e:	2201      	movs	r2, #1
 802eb20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802eb24:	f006 061f 	and.w	r6, r6, #31
 802eb28:	fa02 f606 	lsl.w	r6, r2, r6
 802eb2c:	421e      	tst	r6, r3
 802eb2e:	d13a      	bne.n	802eba6 <__gethex+0x3fe>
 802eb30:	f045 0520 	orr.w	r5, r5, #32
 802eb34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802eb36:	601c      	str	r4, [r3, #0]
 802eb38:	9b02      	ldr	r3, [sp, #8]
 802eb3a:	601f      	str	r7, [r3, #0]
 802eb3c:	e6b0      	b.n	802e8a0 <__gethex+0xf8>
 802eb3e:	4299      	cmp	r1, r3
 802eb40:	f843 cc04 	str.w	ip, [r3, #-4]
 802eb44:	d8d9      	bhi.n	802eafa <__gethex+0x352>
 802eb46:	68a3      	ldr	r3, [r4, #8]
 802eb48:	459b      	cmp	fp, r3
 802eb4a:	db17      	blt.n	802eb7c <__gethex+0x3d4>
 802eb4c:	6861      	ldr	r1, [r4, #4]
 802eb4e:	9801      	ldr	r0, [sp, #4]
 802eb50:	3101      	adds	r1, #1
 802eb52:	f7fd fce9 	bl	802c528 <_Balloc>
 802eb56:	4681      	mov	r9, r0
 802eb58:	b918      	cbnz	r0, 802eb62 <__gethex+0x3ba>
 802eb5a:	4b1a      	ldr	r3, [pc, #104]	@ (802ebc4 <__gethex+0x41c>)
 802eb5c:	4602      	mov	r2, r0
 802eb5e:	2184      	movs	r1, #132	@ 0x84
 802eb60:	e6c5      	b.n	802e8ee <__gethex+0x146>
 802eb62:	6922      	ldr	r2, [r4, #16]
 802eb64:	3202      	adds	r2, #2
 802eb66:	f104 010c 	add.w	r1, r4, #12
 802eb6a:	0092      	lsls	r2, r2, #2
 802eb6c:	300c      	adds	r0, #12
 802eb6e:	f7f8 f9ab 	bl	8026ec8 <memcpy>
 802eb72:	4621      	mov	r1, r4
 802eb74:	9801      	ldr	r0, [sp, #4]
 802eb76:	f7fd fcfc 	bl	802c572 <_Bfree>
 802eb7a:	464c      	mov	r4, r9
 802eb7c:	6923      	ldr	r3, [r4, #16]
 802eb7e:	1c5a      	adds	r2, r3, #1
 802eb80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802eb84:	6122      	str	r2, [r4, #16]
 802eb86:	2201      	movs	r2, #1
 802eb88:	615a      	str	r2, [r3, #20]
 802eb8a:	e7be      	b.n	802eb0a <__gethex+0x362>
 802eb8c:	6922      	ldr	r2, [r4, #16]
 802eb8e:	455a      	cmp	r2, fp
 802eb90:	dd0b      	ble.n	802ebaa <__gethex+0x402>
 802eb92:	2101      	movs	r1, #1
 802eb94:	4620      	mov	r0, r4
 802eb96:	f7ff fd9f 	bl	802e6d8 <rshift>
 802eb9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802eb9e:	3701      	adds	r7, #1
 802eba0:	42bb      	cmp	r3, r7
 802eba2:	f6ff aee0 	blt.w	802e966 <__gethex+0x1be>
 802eba6:	2501      	movs	r5, #1
 802eba8:	e7c2      	b.n	802eb30 <__gethex+0x388>
 802ebaa:	f016 061f 	ands.w	r6, r6, #31
 802ebae:	d0fa      	beq.n	802eba6 <__gethex+0x3fe>
 802ebb0:	4453      	add	r3, sl
 802ebb2:	f1c6 0620 	rsb	r6, r6, #32
 802ebb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802ebba:	f7fd fd73 	bl	802c6a4 <__hi0bits>
 802ebbe:	42b0      	cmp	r0, r6
 802ebc0:	dbe7      	blt.n	802eb92 <__gethex+0x3ea>
 802ebc2:	e7f0      	b.n	802eba6 <__gethex+0x3fe>
 802ebc4:	08034512 	.word	0x08034512

0802ebc8 <L_shift>:
 802ebc8:	f1c2 0208 	rsb	r2, r2, #8
 802ebcc:	0092      	lsls	r2, r2, #2
 802ebce:	b570      	push	{r4, r5, r6, lr}
 802ebd0:	f1c2 0620 	rsb	r6, r2, #32
 802ebd4:	6843      	ldr	r3, [r0, #4]
 802ebd6:	6804      	ldr	r4, [r0, #0]
 802ebd8:	fa03 f506 	lsl.w	r5, r3, r6
 802ebdc:	432c      	orrs	r4, r5
 802ebde:	40d3      	lsrs	r3, r2
 802ebe0:	6004      	str	r4, [r0, #0]
 802ebe2:	f840 3f04 	str.w	r3, [r0, #4]!
 802ebe6:	4288      	cmp	r0, r1
 802ebe8:	d3f4      	bcc.n	802ebd4 <L_shift+0xc>
 802ebea:	bd70      	pop	{r4, r5, r6, pc}

0802ebec <__match>:
 802ebec:	b530      	push	{r4, r5, lr}
 802ebee:	6803      	ldr	r3, [r0, #0]
 802ebf0:	3301      	adds	r3, #1
 802ebf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ebf6:	b914      	cbnz	r4, 802ebfe <__match+0x12>
 802ebf8:	6003      	str	r3, [r0, #0]
 802ebfa:	2001      	movs	r0, #1
 802ebfc:	bd30      	pop	{r4, r5, pc}
 802ebfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ec02:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 802ec06:	2d19      	cmp	r5, #25
 802ec08:	bf98      	it	ls
 802ec0a:	3220      	addls	r2, #32
 802ec0c:	42a2      	cmp	r2, r4
 802ec0e:	d0f0      	beq.n	802ebf2 <__match+0x6>
 802ec10:	2000      	movs	r0, #0
 802ec12:	e7f3      	b.n	802ebfc <__match+0x10>

0802ec14 <__hexnan>:
 802ec14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ec18:	680b      	ldr	r3, [r1, #0]
 802ec1a:	6801      	ldr	r1, [r0, #0]
 802ec1c:	115e      	asrs	r6, r3, #5
 802ec1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802ec22:	f013 031f 	ands.w	r3, r3, #31
 802ec26:	b087      	sub	sp, #28
 802ec28:	bf18      	it	ne
 802ec2a:	3604      	addne	r6, #4
 802ec2c:	2500      	movs	r5, #0
 802ec2e:	1f37      	subs	r7, r6, #4
 802ec30:	4682      	mov	sl, r0
 802ec32:	4690      	mov	r8, r2
 802ec34:	9301      	str	r3, [sp, #4]
 802ec36:	f846 5c04 	str.w	r5, [r6, #-4]
 802ec3a:	46b9      	mov	r9, r7
 802ec3c:	463c      	mov	r4, r7
 802ec3e:	9502      	str	r5, [sp, #8]
 802ec40:	46ab      	mov	fp, r5
 802ec42:	784a      	ldrb	r2, [r1, #1]
 802ec44:	1c4b      	adds	r3, r1, #1
 802ec46:	9303      	str	r3, [sp, #12]
 802ec48:	b342      	cbz	r2, 802ec9c <__hexnan+0x88>
 802ec4a:	4610      	mov	r0, r2
 802ec4c:	9105      	str	r1, [sp, #20]
 802ec4e:	9204      	str	r2, [sp, #16]
 802ec50:	f7ff fd94 	bl	802e77c <__hexdig_fun>
 802ec54:	2800      	cmp	r0, #0
 802ec56:	d151      	bne.n	802ecfc <__hexnan+0xe8>
 802ec58:	9a04      	ldr	r2, [sp, #16]
 802ec5a:	9905      	ldr	r1, [sp, #20]
 802ec5c:	2a20      	cmp	r2, #32
 802ec5e:	d818      	bhi.n	802ec92 <__hexnan+0x7e>
 802ec60:	9b02      	ldr	r3, [sp, #8]
 802ec62:	459b      	cmp	fp, r3
 802ec64:	dd13      	ble.n	802ec8e <__hexnan+0x7a>
 802ec66:	454c      	cmp	r4, r9
 802ec68:	d206      	bcs.n	802ec78 <__hexnan+0x64>
 802ec6a:	2d07      	cmp	r5, #7
 802ec6c:	dc04      	bgt.n	802ec78 <__hexnan+0x64>
 802ec6e:	462a      	mov	r2, r5
 802ec70:	4649      	mov	r1, r9
 802ec72:	4620      	mov	r0, r4
 802ec74:	f7ff ffa8 	bl	802ebc8 <L_shift>
 802ec78:	4544      	cmp	r4, r8
 802ec7a:	d952      	bls.n	802ed22 <__hexnan+0x10e>
 802ec7c:	2300      	movs	r3, #0
 802ec7e:	f1a4 0904 	sub.w	r9, r4, #4
 802ec82:	f844 3c04 	str.w	r3, [r4, #-4]
 802ec86:	f8cd b008 	str.w	fp, [sp, #8]
 802ec8a:	464c      	mov	r4, r9
 802ec8c:	461d      	mov	r5, r3
 802ec8e:	9903      	ldr	r1, [sp, #12]
 802ec90:	e7d7      	b.n	802ec42 <__hexnan+0x2e>
 802ec92:	2a29      	cmp	r2, #41	@ 0x29
 802ec94:	d157      	bne.n	802ed46 <__hexnan+0x132>
 802ec96:	3102      	adds	r1, #2
 802ec98:	f8ca 1000 	str.w	r1, [sl]
 802ec9c:	f1bb 0f00 	cmp.w	fp, #0
 802eca0:	d051      	beq.n	802ed46 <__hexnan+0x132>
 802eca2:	454c      	cmp	r4, r9
 802eca4:	d206      	bcs.n	802ecb4 <__hexnan+0xa0>
 802eca6:	2d07      	cmp	r5, #7
 802eca8:	dc04      	bgt.n	802ecb4 <__hexnan+0xa0>
 802ecaa:	462a      	mov	r2, r5
 802ecac:	4649      	mov	r1, r9
 802ecae:	4620      	mov	r0, r4
 802ecb0:	f7ff ff8a 	bl	802ebc8 <L_shift>
 802ecb4:	4544      	cmp	r4, r8
 802ecb6:	d936      	bls.n	802ed26 <__hexnan+0x112>
 802ecb8:	f1a8 0204 	sub.w	r2, r8, #4
 802ecbc:	4623      	mov	r3, r4
 802ecbe:	f853 1b04 	ldr.w	r1, [r3], #4
 802ecc2:	f842 1f04 	str.w	r1, [r2, #4]!
 802ecc6:	429f      	cmp	r7, r3
 802ecc8:	d2f9      	bcs.n	802ecbe <__hexnan+0xaa>
 802ecca:	1b3b      	subs	r3, r7, r4
 802eccc:	f023 0303 	bic.w	r3, r3, #3
 802ecd0:	3304      	adds	r3, #4
 802ecd2:	3401      	adds	r4, #1
 802ecd4:	3e03      	subs	r6, #3
 802ecd6:	42b4      	cmp	r4, r6
 802ecd8:	bf88      	it	hi
 802ecda:	2304      	movhi	r3, #4
 802ecdc:	4443      	add	r3, r8
 802ecde:	2200      	movs	r2, #0
 802ece0:	f843 2b04 	str.w	r2, [r3], #4
 802ece4:	429f      	cmp	r7, r3
 802ece6:	d2fb      	bcs.n	802ece0 <__hexnan+0xcc>
 802ece8:	683b      	ldr	r3, [r7, #0]
 802ecea:	b91b      	cbnz	r3, 802ecf4 <__hexnan+0xe0>
 802ecec:	4547      	cmp	r7, r8
 802ecee:	d128      	bne.n	802ed42 <__hexnan+0x12e>
 802ecf0:	2301      	movs	r3, #1
 802ecf2:	603b      	str	r3, [r7, #0]
 802ecf4:	2005      	movs	r0, #5
 802ecf6:	b007      	add	sp, #28
 802ecf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ecfc:	3501      	adds	r5, #1
 802ecfe:	2d08      	cmp	r5, #8
 802ed00:	f10b 0b01 	add.w	fp, fp, #1
 802ed04:	dd06      	ble.n	802ed14 <__hexnan+0x100>
 802ed06:	4544      	cmp	r4, r8
 802ed08:	d9c1      	bls.n	802ec8e <__hexnan+0x7a>
 802ed0a:	2300      	movs	r3, #0
 802ed0c:	f844 3c04 	str.w	r3, [r4, #-4]
 802ed10:	2501      	movs	r5, #1
 802ed12:	3c04      	subs	r4, #4
 802ed14:	6822      	ldr	r2, [r4, #0]
 802ed16:	f000 000f 	and.w	r0, r0, #15
 802ed1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802ed1e:	6020      	str	r0, [r4, #0]
 802ed20:	e7b5      	b.n	802ec8e <__hexnan+0x7a>
 802ed22:	2508      	movs	r5, #8
 802ed24:	e7b3      	b.n	802ec8e <__hexnan+0x7a>
 802ed26:	9b01      	ldr	r3, [sp, #4]
 802ed28:	2b00      	cmp	r3, #0
 802ed2a:	d0dd      	beq.n	802ece8 <__hexnan+0xd4>
 802ed2c:	f1c3 0320 	rsb	r3, r3, #32
 802ed30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802ed34:	40da      	lsrs	r2, r3
 802ed36:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802ed3a:	4013      	ands	r3, r2
 802ed3c:	f846 3c04 	str.w	r3, [r6, #-4]
 802ed40:	e7d2      	b.n	802ece8 <__hexnan+0xd4>
 802ed42:	3f04      	subs	r7, #4
 802ed44:	e7d0      	b.n	802ece8 <__hexnan+0xd4>
 802ed46:	2004      	movs	r0, #4
 802ed48:	e7d5      	b.n	802ecf6 <__hexnan+0xe2>
	...

0802ed4c <_init>:
 802ed4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ed4e:	bf00      	nop
 802ed50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ed52:	bc08      	pop	{r3}
 802ed54:	469e      	mov	lr, r3
 802ed56:	4770      	bx	lr

0802ed58 <_fini>:
 802ed58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ed5a:	bf00      	nop
 802ed5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ed5e:	bc08      	pop	{r3}
 802ed60:	469e      	mov	lr, r3
 802ed62:	4770      	bx	lr
