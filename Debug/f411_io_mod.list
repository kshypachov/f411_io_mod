
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002f254  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006038  0803f3f8  0803f3f8  000303f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08045430  08045430  000379d8  2**0
                  CONTENTS
  4 .ARM          00000008  08045430  08045430  00036430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08045438  08045438  000379d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08045438  08045438  00036438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08045440  08045440  00036440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009d8  20000000  08045444  00037000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017b3c  200009d8  08045e1c  000379d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20018514  08045e1c  00038514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000379d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035493  00000000  00000000  00037a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006235  00000000  00000000  0006ce9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f00  00000000  00000000  000730d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000027db  00000000  00000000  00075fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f767  00000000  00000000  000787ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003393c  00000000  00000000  00097f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a85fe  00000000  00000000  000cb84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00173e4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f17c  00000000  00000000  00173e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0018300c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200009d8 	.word	0x200009d8
 80101bc:	00000000 	.word	0x00000000
 80101c0:	0803f3dc 	.word	0x0803f3dc

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200009dc 	.word	0x200009dc
 80101dc:	0803f3dc 	.word	0x0803f3dc

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80110dc:	b580      	push	{r7, lr}
 80110de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of SPI2Mutex */
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 80110e0:	482f      	ldr	r0, [pc, #188]	@ (80111a0 <MX_FREERTOS_Init+0xc4>)
 80110e2:	f008 f9a5 	bl	8019430 <osMutexNew>
 80110e6:	4603      	mov	r3, r0
 80110e8:	4a2e      	ldr	r2, [pc, #184]	@ (80111a4 <MX_FREERTOS_Init+0xc8>)
 80110ea:	6013      	str	r3, [r2, #0]

  /* creation of FSMutex */
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 80110ec:	482e      	ldr	r0, [pc, #184]	@ (80111a8 <MX_FREERTOS_Init+0xcc>)
 80110ee:	f008 f99f 	bl	8019430 <osMutexNew>
 80110f2:	4603      	mov	r3, r0
 80110f4:	4a2d      	ldr	r2, [pc, #180]	@ (80111ac <MX_FREERTOS_Init+0xd0>)
 80110f6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inputReadQ */
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 80110f8:	4a2d      	ldr	r2, [pc, #180]	@ (80111b0 <MX_FREERTOS_Init+0xd4>)
 80110fa:	2103      	movs	r1, #3
 80110fc:	2001      	movs	r0, #1
 80110fe:	f008 faa5 	bl	801964c <osMessageQueueNew>
 8011102:	4603      	mov	r3, r0
 8011104:	4a2b      	ldr	r2, [pc, #172]	@ (80111b4 <MX_FREERTOS_Init+0xd8>)
 8011106:	6013      	str	r3, [r2, #0]

  /* creation of outputReadQ */
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8011108:	4a2b      	ldr	r2, [pc, #172]	@ (80111b8 <MX_FREERTOS_Init+0xdc>)
 801110a:	2103      	movs	r1, #3
 801110c:	2001      	movs	r0, #1
 801110e:	f008 fa9d 	bl	801964c <osMessageQueueNew>
 8011112:	4603      	mov	r3, r0
 8011114:	4a29      	ldr	r2, [pc, #164]	@ (80111bc <MX_FREERTOS_Init+0xe0>)
 8011116:	6013      	str	r3, [r2, #0]

  /* creation of outputWriteQ */
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 8011118:	4a29      	ldr	r2, [pc, #164]	@ (80111c0 <MX_FREERTOS_Init+0xe4>)
 801111a:	2103      	movs	r1, #3
 801111c:	2001      	movs	r0, #1
 801111e:	f008 fa95 	bl	801964c <osMessageQueueNew>
 8011122:	4603      	mov	r3, r0
 8011124:	4a27      	ldr	r2, [pc, #156]	@ (80111c4 <MX_FREERTOS_Init+0xe8>)
 8011126:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011128:	4a27      	ldr	r2, [pc, #156]	@ (80111c8 <MX_FREERTOS_Init+0xec>)
 801112a:	21c6      	movs	r1, #198	@ 0xc6
 801112c:	2001      	movs	r0, #1
 801112e:	f008 fa8d 	bl	801964c <osMessageQueueNew>
 8011132:	4603      	mov	r3, r0
 8011134:	4a25      	ldr	r2, [pc, #148]	@ (80111cc <MX_FREERTOS_Init+0xf0>)
 8011136:	6013      	str	r3, [r2, #0]

  /* creation of loggingQ */
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 8011138:	4a25      	ldr	r2, [pc, #148]	@ (80111d0 <MX_FREERTOS_Init+0xf4>)
 801113a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 801113e:	200f      	movs	r0, #15
 8011140:	f008 fa84 	bl	801964c <osMessageQueueNew>
 8011144:	4603      	mov	r3, r0
 8011146:	4a23      	ldr	r2, [pc, #140]	@ (80111d4 <MX_FREERTOS_Init+0xf8>)
 8011148:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethTask */
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 801114a:	4a23      	ldr	r2, [pc, #140]	@ (80111d8 <MX_FREERTOS_Init+0xfc>)
 801114c:	2100      	movs	r1, #0
 801114e:	4823      	ldr	r0, [pc, #140]	@ (80111dc <MX_FREERTOS_Init+0x100>)
 8011150:	f008 f8c0 	bl	80192d4 <osThreadNew>
 8011154:	4603      	mov	r3, r0
 8011156:	4a22      	ldr	r2, [pc, #136]	@ (80111e0 <MX_FREERTOS_Init+0x104>)
 8011158:	6013      	str	r3, [r2, #0]

  /* creation of IOTask */
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 801115a:	4a22      	ldr	r2, [pc, #136]	@ (80111e4 <MX_FREERTOS_Init+0x108>)
 801115c:	2100      	movs	r1, #0
 801115e:	4822      	ldr	r0, [pc, #136]	@ (80111e8 <MX_FREERTOS_Init+0x10c>)
 8011160:	f008 f8b8 	bl	80192d4 <osThreadNew>
 8011164:	4603      	mov	r3, r0
 8011166:	4a21      	ldr	r2, [pc, #132]	@ (80111ec <MX_FREERTOS_Init+0x110>)
 8011168:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 801116a:	4a21      	ldr	r2, [pc, #132]	@ (80111f0 <MX_FREERTOS_Init+0x114>)
 801116c:	2100      	movs	r1, #0
 801116e:	4821      	ldr	r0, [pc, #132]	@ (80111f4 <MX_FREERTOS_Init+0x118>)
 8011170:	f008 f8b0 	bl	80192d4 <osThreadNew>
 8011174:	4603      	mov	r3, r0
 8011176:	4a20      	ldr	r2, [pc, #128]	@ (80111f8 <MX_FREERTOS_Init+0x11c>)
 8011178:	6013      	str	r3, [r2, #0]

  /* creation of settingsTask */
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 801117a:	4a20      	ldr	r2, [pc, #128]	@ (80111fc <MX_FREERTOS_Init+0x120>)
 801117c:	2100      	movs	r1, #0
 801117e:	4820      	ldr	r0, [pc, #128]	@ (8011200 <MX_FREERTOS_Init+0x124>)
 8011180:	f008 f8a8 	bl	80192d4 <osThreadNew>
 8011184:	4603      	mov	r3, r0
 8011186:	4a1f      	ldr	r2, [pc, #124]	@ (8011204 <MX_FREERTOS_Init+0x128>)
 8011188:	6013      	str	r3, [r2, #0]

  /* creation of loggingTask */
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 801118a:	4a1f      	ldr	r2, [pc, #124]	@ (8011208 <MX_FREERTOS_Init+0x12c>)
 801118c:	2100      	movs	r1, #0
 801118e:	481f      	ldr	r0, [pc, #124]	@ (801120c <MX_FREERTOS_Init+0x130>)
 8011190:	f008 f8a0 	bl	80192d4 <osThreadNew>
 8011194:	4603      	mov	r3, r0
 8011196:	4a1e      	ldr	r2, [pc, #120]	@ (8011210 <MX_FREERTOS_Init+0x134>)
 8011198:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 801119a:	bf00      	nop
 801119c:	bd80      	pop	{r7, pc}
 801119e:	bf00      	nop
 80111a0:	08043bd4 	.word	0x08043bd4
 80111a4:	20000a24 	.word	0x20000a24
 80111a8:	08043be4 	.word	0x08043be4
 80111ac:	20000a28 	.word	0x20000a28
 80111b0:	08043b5c 	.word	0x08043b5c
 80111b4:	20000a10 	.word	0x20000a10
 80111b8:	08043b74 	.word	0x08043b74
 80111bc:	20000a14 	.word	0x20000a14
 80111c0:	08043b8c 	.word	0x08043b8c
 80111c4:	20000a18 	.word	0x20000a18
 80111c8:	08043ba4 	.word	0x08043ba4
 80111cc:	20000a1c 	.word	0x20000a1c
 80111d0:	08043bbc 	.word	0x08043bbc
 80111d4:	20000a20 	.word	0x20000a20
 80111d8:	08043aa8 	.word	0x08043aa8
 80111dc:	08011215 	.word	0x08011215
 80111e0:	200009fc 	.word	0x200009fc
 80111e4:	08043acc 	.word	0x08043acc
 80111e8:	080114e5 	.word	0x080114e5
 80111ec:	20000a00 	.word	0x20000a00
 80111f0:	08043af0 	.word	0x08043af0
 80111f4:	080116ad 	.word	0x080116ad
 80111f8:	20000a04 	.word	0x20000a04
 80111fc:	08043b14 	.word	0x08043b14
 8011200:	080118e1 	.word	0x080118e1
 8011204:	20000a08 	.word	0x20000a08
 8011208:	08043b38 	.word	0x08043b38
 801120c:	08011a49 	.word	0x08011a49
 8011210:	20000a0c 	.word	0x20000a0c

08011214 <StartEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEthTask */
void StartEthTask(void *argument)
{
 8011214:	b590      	push	{r4, r7, lr}
 8011216:	b0f1      	sub	sp, #452	@ 0x1c4
 8011218:	af02      	add	r7, sp, #8
 801121a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801121e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8011222:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEthTask */
  void 		           *web_handler;
  struct 			   mg_mgr mgr; // Initialise
  MQTT_cred_struct	   mqtt_conf;
  struct mg_connection *mqtt_conn;
  struct               mg_tcpip_spi spi = {
 8011224:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8011228:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801122c:	4aa0      	ldr	r2, [pc, #640]	@ (80114b0 <StartEthTask+0x29c>)
 801122e:	461c      	mov	r4, r3
 8011230:	4613      	mov	r3, r2
 8011232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
											  .begin = EthBegin,
											  .end = EthEnd,
											  .txn = EthTxn,
											  .spi = &hspi2,
										  };
  struct              mg_tcpip_if   mif = {
 8011238:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801123c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8011240:	4618      	mov	r0, r3
 8011242:	2380      	movs	r3, #128	@ 0x80
 8011244:	461a      	mov	r2, r3
 8011246:	2100      	movs	r1, #0
 8011248:	f024 ff4a 	bl	80360e0 <memset>
 801124c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8011250:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8011254:	2240      	movs	r2, #64	@ 0x40
 8011256:	701a      	strb	r2, [r3, #0]
 8011258:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801125c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8011260:	2222      	movs	r2, #34	@ 0x22
 8011262:	705a      	strb	r2, [r3, #1]
											  .mac = {
													  0x40,
													  0x22,
													  *(uint8_t*)(UID_BASE),
 8011264:	4b93      	ldr	r3, [pc, #588]	@ (80114b4 <StartEthTask+0x2a0>)
 8011266:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8011268:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801126c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8011270:	709a      	strb	r2, [r3, #2]
													  *(uint8_t*)(UID_BASE + 0x02),
 8011272:	4b91      	ldr	r3, [pc, #580]	@ (80114b8 <StartEthTask+0x2a4>)
 8011274:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8011276:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801127a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801127e:	70da      	strb	r2, [r3, #3]
													  *(uint8_t*)(UID_BASE + 0x04),
 8011280:	4b8e      	ldr	r3, [pc, #568]	@ (80114bc <StartEthTask+0x2a8>)
 8011282:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8011284:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8011288:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801128c:	711a      	strb	r2, [r3, #4]
													  *(uint8_t*)(UID_BASE + 0x08)
 801128e:	4b8c      	ldr	r3, [pc, #560]	@ (80114c0 <StartEthTask+0x2ac>)
 8011290:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8011292:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8011296:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801129a:	715a      	strb	r2, [r3, #5]
 801129c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80112a0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80112a4:	2201      	movs	r2, #1
 80112a6:	77da      	strb	r2, [r3, #31]
 80112a8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80112ac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80112b0:	2201      	movs	r2, #1
 80112b2:	f883 2020 	strb.w	r2, [r3, #32]
 80112b6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80112ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80112be:	4a81      	ldr	r2, [pc, #516]	@ (80114c4 <StartEthTask+0x2b0>)
 80112c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80112c2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80112c6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80112ca:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80112ce:	629a      	str	r2, [r3, #40]	@ 0x28
											  .enable_req_sntp = true,
											  .driver = &mg_tcpip_driver_w5500,
											  .driver_data = &spi
										  };

  mg_full_info.mgr =  &mgr;
 80112d0:	4a7d      	ldr	r2, [pc, #500]	@ (80114c8 <StartEthTask+0x2b4>)
 80112d2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80112d6:	6013      	str	r3, [r2, #0]
  mg_full_info.mgr_if =  &mif;
 80112d8:	4a7b      	ldr	r2, [pc, #492]	@ (80114c8 <StartEthTask+0x2b4>)
 80112da:	f107 0308 	add.w	r3, r7, #8
 80112de:	6053      	str	r3, [r2, #4]



  mg_mgr_init(&mgr);        // Mongoose event manager
 80112e0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80112e4:	4618      	mov	r0, r3
 80112e6:	f01c feb3 	bl	802e050 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 80112ea:	4b78      	ldr	r3, [pc, #480]	@ (80114cc <StartEthTask+0x2b8>)
 80112ec:	2203      	movs	r2, #3
 80112ee:	601a      	str	r2, [r3, #0]

  web_handler = dash_hdl(); // Get dashboard handler
 80112f0:	f002 fdb6 	bl	8013e60 <dash_hdl>
 80112f4:	f8c7 01b0 	str.w	r0, [r7, #432]	@ 0x1b0

  while(mif.mtu == 0){
 80112f8:	e013      	b.n	8011322 <StartEthTask+0x10e>
	  EthResetBegin();
 80112fa:	f000 fc83 	bl	8011c04 <EthResetBegin>
	  osDelay(500);
 80112fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011302:	f008 f87a 	bl	80193fa <osDelay>
	  EthResetEnd();
 8011306:	f000 fc89 	bl	8011c1c <EthResetEnd>
	  osDelay(2000);
 801130a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 801130e:	f008 f874 	bl	80193fa <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011312:	f107 0208 	add.w	r2, r7, #8
 8011316:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801131a:	4611      	mov	r1, r2
 801131c:	4618      	mov	r0, r3
 801131e:	f01f fc1f 	bl	8030b60 <mg_tcpip_init>
  while(mif.mtu == 0){
 8011322:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8011326:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801132a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801132e:	2b00      	cmp	r3, #0
 8011330:	d0e3      	beq.n	80112fa <StartEthTask+0xe6>
  }
  set_device_id(mif.mac, sizeof(mif.mac));
 8011332:	f107 0308 	add.w	r3, r7, #8
 8011336:	2106      	movs	r1, #6
 8011338:	4618      	mov	r0, r3
 801133a:	f003 facb 	bl	80148d4 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 801133e:	4864      	ldr	r0, [pc, #400]	@ (80114d0 <StartEthTask+0x2bc>)
 8011340:	f002 fd98 	bl	8013e74 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011344:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8011348:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 801134c:	4b5e      	ldr	r3, [pc, #376]	@ (80114c8 <StartEthTask+0x2b4>)
 801134e:	4961      	ldr	r1, [pc, #388]	@ (80114d4 <StartEthTask+0x2c0>)
 8011350:	f019 f896 	bl	802a480 <mg_http_listen>

  while (mif.state != MG_TCPIP_STATE_READY) {
 8011354:	e008      	b.n	8011368 <StartEthTask+0x154>
    mg_mgr_poll(&mgr, 1);
 8011356:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801135a:	2101      	movs	r1, #1
 801135c:	4618      	mov	r0, r3
 801135e:	f01f ff13 	bl	8031188 <mg_mgr_poll>
    osDelay(1);
 8011362:	2001      	movs	r0, #1
 8011364:	f008 f849 	bl	80193fa <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011368:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801136c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8011370:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011374:	2b03      	cmp	r3, #3
 8011376:	d1ee      	bne.n	8011356 <StartEthTask+0x142>
  }

  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011378:	4b53      	ldr	r3, [pc, #332]	@ (80114c8 <StartEthTask+0x2b4>)
 801137a:	685b      	ldr	r3, [r3, #4]
 801137c:	689b      	ldr	r3, [r3, #8]
 801137e:	b2d9      	uxtb	r1, r3
 8011380:	4b51      	ldr	r3, [pc, #324]	@ (80114c8 <StartEthTask+0x2b4>)
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	689b      	ldr	r3, [r3, #8]
 8011386:	0a1b      	lsrs	r3, r3, #8
 8011388:	b2d8      	uxtb	r0, r3
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 801138a:	4b4f      	ldr	r3, [pc, #316]	@ (80114c8 <StartEthTask+0x2b4>)
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	689b      	ldr	r3, [r3, #8]
 8011390:	0c1b      	lsrs	r3, r3, #16
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011392:	b2db      	uxtb	r3, r3
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011394:	4a4c      	ldr	r2, [pc, #304]	@ (80114c8 <StartEthTask+0x2b4>)
 8011396:	6852      	ldr	r2, [r2, #4]
 8011398:	6892      	ldr	r2, [r2, #8]
 801139a:	0e12      	lsrs	r2, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 801139c:	9201      	str	r2, [sp, #4]
 801139e:	9300      	str	r3, [sp, #0]
 80113a0:	4603      	mov	r3, r0
 80113a2:	460a      	mov	r2, r1
 80113a4:	494c      	ldr	r1, [pc, #304]	@ (80114d8 <StartEthTask+0x2c4>)
 80113a6:	2001      	movs	r0, #1
 80113a8:	f000 fee2 	bl	8012170 <logging>

  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 80113ac:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80113b0:	2200      	movs	r2, #0
 80113b2:	2100      	movs	r1, #0
 80113b4:	4618      	mov	r0, r3
 80113b6:	f000 fcd5 	bl	8011d64 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 80113ba:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80113be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80113c2:	785b      	ldrb	r3, [r3, #1]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d018      	beq.n	80113fa <StartEthTask+0x1e6>
	  logging(L_INFO, "MQTT function enabled.");
 80113c8:	4944      	ldr	r1, [pc, #272]	@ (80114dc <StartEthTask+0x2c8>)
 80113ca:	2001      	movs	r0, #1
 80113cc:	f000 fed0 	bl	8012170 <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 80113d0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80113d4:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 80113d8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80113dc:	1c9a      	adds	r2, r3, #2
 80113de:	f107 0108 	add.w	r1, r7, #8
 80113e2:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 80113e6:	4b3a      	ldr	r3, [pc, #232]	@ (80114d0 <StartEthTask+0x2bc>)
 80113e8:	9301      	str	r3, [sp, #4]
 80113ea:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80113ee:	33a5      	adds	r3, #165	@ 0xa5
 80113f0:	9300      	str	r3, [sp, #0]
 80113f2:	4623      	mov	r3, r4
 80113f4:	f003 f978 	bl	80146e8 <mqtt_init>
 80113f8:	e003      	b.n	8011402 <StartEthTask+0x1ee>
  }else{
	  logging(L_INFO, "MQTT function disabled");
 80113fa:	4939      	ldr	r1, [pc, #228]	@ (80114e0 <StartEthTask+0x2cc>)
 80113fc:	2001      	movs	r0, #1
 80113fe:	f000 feb7 	bl	8012170 <logging>
  }
  start_sntp(&mgr);
 8011402:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8011406:	4618      	mov	r0, r3
 8011408:	f003 ff5e 	bl	80152c8 <start_sntp>
  ssdp_start_server(&mgr, &mif);
 801140c:	f107 0208 	add.w	r2, r7, #8
 8011410:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8011414:	4611      	mov	r1, r2
 8011416:	4618      	mov	r0, r3
 8011418:	f004 f9b2 	bl	8015780 <ssdp_start_server>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 801141c:	f009 ff66 	bl	801b2ec <xTaskGetTickCount>
 8011420:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4

  /* Infinite loop */
  for(;;)
  {
	  TickType_t current_tick = xTaskGetTickCount();
 8011424:	f009 ff62 	bl	801b2ec <xTaskGetTickCount>
 8011428:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
	  uint32_t elapsed_ms = (current_tick - last_tick) * portTICK_PERIOD_MS; // количество миллисекунд, прошедших с последнего вызова
 801142c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8011430:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8011434:	1ad3      	subs	r3, r2, r3
 8011436:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	  last_tick = current_tick; // обновляем значение тиков
 801143a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801143e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8011442:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8011446:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801144a:	4611      	mov	r1, r2
 801144c:	4618      	mov	r0, r3
 801144e:	f01f fe9b 	bl	8031188 <mg_mgr_poll>

      while (mif.driver->up(&mif) == false){
 8011452:	e018      	b.n	8011486 <StartEthTask+0x272>
    	  EthResetBegin(); //enable reset state w5500
 8011454:	f000 fbd6 	bl	8011c04 <EthResetBegin>
    	  osDelay(100);
 8011458:	2064      	movs	r0, #100	@ 0x64
 801145a:	f007 ffce 	bl	80193fa <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 801145e:	f000 fbdd 	bl	8011c1c <EthResetEnd>
    	  osDelay(3000);
 8011462:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011466:	f007 ffc8 	bl	80193fa <osDelay>
    	  mif.driver->init(&mif);
 801146a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801146e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8011472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f107 0208 	add.w	r2, r7, #8
 801147a:	4610      	mov	r0, r2
 801147c:	4798      	blx	r3
    	  osDelay(7000);
 801147e:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011482:	f007 ffba 	bl	80193fa <osDelay>
      while (mif.driver->up(&mif) == false){
 8011486:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801148a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011490:	68db      	ldr	r3, [r3, #12]
 8011492:	f107 0208 	add.w	r2, r7, #8
 8011496:	4610      	mov	r0, r2
 8011498:	4798      	blx	r3
 801149a:	4603      	mov	r3, r0
 801149c:	f083 0301 	eor.w	r3, r3, #1
 80114a0:	b2db      	uxtb	r3, r3
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d1d6      	bne.n	8011454 <StartEthTask+0x240>
      }
      osDelay(1);
 80114a6:	2001      	movs	r0, #1
 80114a8:	f007 ffa7 	bl	80193fa <osDelay>
  {
 80114ac:	e7ba      	b.n	8011424 <StartEthTask+0x210>
 80114ae:	bf00      	nop
 80114b0:	0803f4e0 	.word	0x0803f4e0
 80114b4:	1fff7a10 	.word	0x1fff7a10
 80114b8:	1fff7a12 	.word	0x1fff7a12
 80114bc:	1fff7a14 	.word	0x1fff7a14
 80114c0:	1fff7a18 	.word	0x1fff7a18
 80114c4:	200002b0 	.word	0x200002b0
 80114c8:	200009f4 	.word	0x200009f4
 80114cc:	200002a8 	.word	0x200002a8
 80114d0:	08011d65 	.word	0x08011d65
 80114d4:	0803f480 	.word	0x0803f480
 80114d8:	0803f494 	.word	0x0803f494
 80114dc:	0803f4b0 	.word	0x0803f4b0
 80114e0:	0803f4c8 	.word	0x0803f4c8

080114e4 <StartIOTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIOTask */
void StartIOTask(void *argument)
{
 80114e4:	b590      	push	{r4, r7, lr}
 80114e6:	b091      	sub	sp, #68	@ 0x44
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIOTask */
	uint16_t pinCoils[] = {coil1_Pin, coil2_Pin, coil3_Pin};
 80114ec:	4a69      	ldr	r2, [pc, #420]	@ (8011694 <StartIOTask+0x1b0>)
 80114ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80114f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114f6:	6018      	str	r0, [r3, #0]
 80114f8:	3304      	adds	r3, #4
 80114fa:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portCoils[] = {coil1_GPIO_Port, coil2_GPIO_Port, coil3_GPIO_Port};
 80114fc:	4a66      	ldr	r2, [pc, #408]	@ (8011698 <StartIOTask+0x1b4>)
 80114fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011502:	ca07      	ldmia	r2, {r0, r1, r2}
 8011504:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t pinInputs[] = {input1_Pin, input2_Pin, input3_Pin};
 8011508:	4a64      	ldr	r2, [pc, #400]	@ (801169c <StartIOTask+0x1b8>)
 801150a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801150e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011512:	6018      	str	r0, [r3, #0]
 8011514:	3304      	adds	r3, #4
 8011516:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portInputs[] = {input1_GPIO_Port, input2_GPIO_Port, input3_GPIO_Port};
 8011518:	4a5f      	ldr	r2, [pc, #380]	@ (8011698 <StartIOTask+0x1b4>)
 801151a:	f107 0318 	add.w	r3, r7, #24
 801151e:	ca07      	ldmia	r2, {r0, r1, r2}
 8011520:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
  /* Infinite loop */
  for(;;)
  {
	 // write outputs
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8011524:	4b5e      	ldr	r3, [pc, #376]	@ (80116a0 <StartIOTask+0x1bc>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	4618      	mov	r0, r3
 801152a:	f008 f9c1 	bl	80198b0 <osMessageQueueGetCount>
 801152e:	4603      	mov	r3, r0
 8011530:	2b00      	cmp	r3, #0
 8011532:	d041      	beq.n	80115b8 <StartIOTask+0xd4>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011534:	4b5a      	ldr	r3, [pc, #360]	@ (80116a0 <StartIOTask+0x1bc>)
 8011536:	6818      	ldr	r0, [r3, #0]
 8011538:	f107 010c 	add.w	r1, r7, #12
 801153c:	2300      	movs	r3, #0
 801153e:	2200      	movs	r2, #0
 8011540:	f008 f958 	bl	80197f4 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011544:	2300      	movs	r3, #0
 8011546:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801154a:	e031      	b.n	80115b0 <StartIOTask+0xcc>
		     if (pinOutputs_w[i]) {
 801154c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011550:	3340      	adds	r3, #64	@ 0x40
 8011552:	443b      	add	r3, r7
 8011554:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d012      	beq.n	8011582 <StartIOTask+0x9e>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 801155c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011560:	009b      	lsls	r3, r3, #2
 8011562:	3340      	adds	r3, #64	@ 0x40
 8011564:	443b      	add	r3, r7
 8011566:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801156a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801156e:	005b      	lsls	r3, r3, #1
 8011570:	3340      	adds	r3, #64	@ 0x40
 8011572:	443b      	add	r3, r7
 8011574:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8011578:	2201      	movs	r2, #1
 801157a:	4619      	mov	r1, r3
 801157c:	f005 f842 	bl	8016604 <HAL_GPIO_WritePin>
 8011580:	e011      	b.n	80115a6 <StartIOTask+0xc2>
		     } else {
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011582:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011586:	009b      	lsls	r3, r3, #2
 8011588:	3340      	adds	r3, #64	@ 0x40
 801158a:	443b      	add	r3, r7
 801158c:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8011590:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011594:	005b      	lsls	r3, r3, #1
 8011596:	3340      	adds	r3, #64	@ 0x40
 8011598:	443b      	add	r3, r7
 801159a:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 801159e:	2200      	movs	r2, #0
 80115a0:	4619      	mov	r1, r3
 80115a2:	f005 f82f 	bl	8016604 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 80115a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115aa:	3301      	adds	r3, #1
 80115ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80115b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115b4:	2b02      	cmp	r3, #2
 80115b6:	d9c9      	bls.n	801154c <StartIOTask+0x68>
		     }
		 }
	 }

	 // read outputs status
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80115b8:	2300      	movs	r3, #0
 80115ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80115be:	e01f      	b.n	8011600 <StartIOTask+0x11c>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80115c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115c4:	009b      	lsls	r3, r3, #2
 80115c6:	3340      	adds	r3, #64	@ 0x40
 80115c8:	443b      	add	r3, r7
 80115ca:	f853 2c14 	ldr.w	r2, [r3, #-20]
 80115ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115d2:	005b      	lsls	r3, r3, #1
 80115d4:	3340      	adds	r3, #64	@ 0x40
 80115d6:	443b      	add	r3, r7
 80115d8:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80115dc:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 80115e0:	4619      	mov	r1, r3
 80115e2:	4610      	mov	r0, r2
 80115e4:	f004 fff6 	bl	80165d4 <HAL_GPIO_ReadPin>
 80115e8:	4603      	mov	r3, r0
 80115ea:	461a      	mov	r2, r3
 80115ec:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80115f0:	443b      	add	r3, r7
 80115f2:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80115f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115fa:	3301      	adds	r3, #1
 80115fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011600:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011604:	2b02      	cmp	r3, #2
 8011606:	d9db      	bls.n	80115c0 <StartIOTask+0xdc>
	}
	//xQueueOverwrite(outputReadQHandle, &pinOutputs_r);
	osMessageQueueReset(outputReadQHandle);
 8011608:	4b26      	ldr	r3, [pc, #152]	@ (80116a4 <StartIOTask+0x1c0>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	4618      	mov	r0, r3
 801160e:	f008 f96f 	bl	80198f0 <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 8011612:	4b24      	ldr	r3, [pc, #144]	@ (80116a4 <StartIOTask+0x1c0>)
 8011614:	6818      	ldr	r0, [r3, #0]
 8011616:	f107 0110 	add.w	r1, r7, #16
 801161a:	2300      	movs	r3, #0
 801161c:	2200      	movs	r2, #0
 801161e:	f008 f889 	bl	8019734 <osMessageQueuePut>

	// read inputs status
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011622:	2300      	movs	r3, #0
 8011624:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011628:	e01f      	b.n	801166a <StartIOTask+0x186>
		pinInputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]);
 801162a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801162e:	009b      	lsls	r3, r3, #2
 8011630:	3340      	adds	r3, #64	@ 0x40
 8011632:	443b      	add	r3, r7
 8011634:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8011638:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801163c:	005b      	lsls	r3, r3, #1
 801163e:	3340      	adds	r3, #64	@ 0x40
 8011640:	443b      	add	r3, r7
 8011642:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8011646:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 801164a:	4619      	mov	r1, r3
 801164c:	4610      	mov	r0, r2
 801164e:	f004 ffc1 	bl	80165d4 <HAL_GPIO_ReadPin>
 8011652:	4603      	mov	r3, r0
 8011654:	461a      	mov	r2, r3
 8011656:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801165a:	443b      	add	r3, r7
 801165c:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011660:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011664:	3301      	adds	r3, #1
 8011666:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801166a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801166e:	2b02      	cmp	r3, #2
 8011670:	d9db      	bls.n	801162a <StartIOTask+0x146>
	}
	//xQueueOverwrite(inputReadQHandle, &pinInputs_r);
	osMessageQueueReset(inputReadQHandle);
 8011672:	4b0d      	ldr	r3, [pc, #52]	@ (80116a8 <StartIOTask+0x1c4>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	4618      	mov	r0, r3
 8011678:	f008 f93a 	bl	80198f0 <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 801167c:	4b0a      	ldr	r3, [pc, #40]	@ (80116a8 <StartIOTask+0x1c4>)
 801167e:	6818      	ldr	r0, [r3, #0]
 8011680:	f107 0114 	add.w	r1, r7, #20
 8011684:	2300      	movs	r3, #0
 8011686:	2200      	movs	r2, #0
 8011688:	f008 f854 	bl	8019734 <osMessageQueuePut>

    osDelay(1);
 801168c:	2001      	movs	r0, #1
 801168e:	f007 feb4 	bl	80193fa <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8011692:	e747      	b.n	8011524 <StartIOTask+0x40>
 8011694:	0803f4f0 	.word	0x0803f4f0
 8011698:	0803f4f8 	.word	0x0803f4f8
 801169c:	0803f504 	.word	0x0803f504
 80116a0:	20000a18 	.word	0x20000a18
 80116a4:	20000a14 	.word	0x20000a14
 80116a8:	20000a10 	.word	0x20000a10

080116ac <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80116ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116ae:	b08f      	sub	sp, #60	@ 0x3c
 80116b0:	af04      	add	r7, sp, #16
 80116b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	uint8_t x,y;
	char buf[20];
	osDelay(1000);//
 80116b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80116b8:	f007 fe9f 	bl	80193fa <osDelay>

	SSD1306_Init (); // initialise the display
 80116bc:	f007 fac8 	bl	8018c50 <SSD1306_Init>
	osDelay(100);//
 80116c0:	2064      	movs	r0, #100	@ 0x64
 80116c2:	f007 fe9a 	bl	80193fa <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80116c6:	2301      	movs	r3, #1
 80116c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80116cc:	2300      	movs	r3, #0
 80116ce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80116d2:	2100      	movs	r1, #0
 80116d4:	2001      	movs	r0, #1
 80116d6:	f007 fc1b 	bl	8018f10 <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80116da:	2000      	movs	r0, #0
 80116dc:	f007 fba0 	bl	8018e20 <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80116e0:	2201      	movs	r2, #1
 80116e2:	4973      	ldr	r1, [pc, #460]	@ (80118b0 <StartDisplayTask+0x204>)
 80116e4:	4873      	ldr	r0, [pc, #460]	@ (80118b4 <StartDisplayTask+0x208>)
 80116e6:	f007 fca7 	bl	8019038 <SSD1306_Puts>
    //SSD1306_GotoXY(x=1,y=y+11);
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80116ea:	2201      	movs	r2, #1
 80116ec:	4970      	ldr	r1, [pc, #448]	@ (80118b0 <StartDisplayTask+0x204>)
 80116ee:	4872      	ldr	r0, [pc, #456]	@ (80118b8 <StartDisplayTask+0x20c>)
 80116f0:	f007 fca2 	bl	8019038 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80116f4:	2301      	movs	r3, #1
 80116f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80116fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80116fe:	330b      	adds	r3, #11
 8011700:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011704:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011708:	b29b      	uxth	r3, r3
 801170a:	4619      	mov	r1, r3
 801170c:	2001      	movs	r0, #1
 801170e:	f007 fbff 	bl	8018f10 <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 8011712:	2201      	movs	r2, #1
 8011714:	4966      	ldr	r1, [pc, #408]	@ (80118b0 <StartDisplayTask+0x204>)
 8011716:	4869      	ldr	r0, [pc, #420]	@ (80118bc <StartDisplayTask+0x210>)
 8011718:	f007 fc8e 	bl	8019038 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 801171c:	2301      	movs	r3, #1
 801171e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011722:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011726:	330b      	adds	r3, #11
 8011728:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801172c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011730:	b29b      	uxth	r3, r3
 8011732:	4619      	mov	r1, r3
 8011734:	2001      	movs	r0, #1
 8011736:	f007 fbeb 	bl	8018f10 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 801173a:	2201      	movs	r2, #1
 801173c:	495c      	ldr	r1, [pc, #368]	@ (80118b0 <StartDisplayTask+0x204>)
 801173e:	4860      	ldr	r0, [pc, #384]	@ (80118c0 <StartDisplayTask+0x214>)
 8011740:	f007 fc7a 	bl	8019038 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 8011744:	2301      	movs	r3, #1
 8011746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801174a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801174e:	330b      	adds	r3, #11
 8011750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011754:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011758:	b29b      	uxth	r3, r3
 801175a:	4619      	mov	r1, r3
 801175c:	2001      	movs	r0, #1
 801175e:	f007 fbd7 	bl	8018f10 <SSD1306_GotoXY>
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011762:	4b58      	ldr	r3, [pc, #352]	@ (80118c4 <StartDisplayTask+0x218>)
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	781b      	ldrb	r3, [r3, #0]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011768:	461d      	mov	r5, r3
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 801176a:	4b56      	ldr	r3, [pc, #344]	@ (80118c4 <StartDisplayTask+0x218>)
 801176c:	685b      	ldr	r3, [r3, #4]
 801176e:	785b      	ldrb	r3, [r3, #1]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011770:	461e      	mov	r6, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011772:	4b54      	ldr	r3, [pc, #336]	@ (80118c4 <StartDisplayTask+0x218>)
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	789b      	ldrb	r3, [r3, #2]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011778:	461a      	mov	r2, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 801177a:	4b52      	ldr	r3, [pc, #328]	@ (80118c4 <StartDisplayTask+0x218>)
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	78db      	ldrb	r3, [r3, #3]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011780:	4619      	mov	r1, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011782:	4b50      	ldr	r3, [pc, #320]	@ (80118c4 <StartDisplayTask+0x218>)
 8011784:	685b      	ldr	r3, [r3, #4]
 8011786:	791b      	ldrb	r3, [r3, #4]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011788:	461c      	mov	r4, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 801178a:	4b4e      	ldr	r3, [pc, #312]	@ (80118c4 <StartDisplayTask+0x218>)
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	795b      	ldrb	r3, [r3, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011790:	f107 000c 	add.w	r0, r7, #12
 8011794:	9303      	str	r3, [sp, #12]
 8011796:	9402      	str	r4, [sp, #8]
 8011798:	9101      	str	r1, [sp, #4]
 801179a:	9200      	str	r2, [sp, #0]
 801179c:	4633      	mov	r3, r6
 801179e:	462a      	mov	r2, r5
 80117a0:	4949      	ldr	r1, [pc, #292]	@ (80118c8 <StartDisplayTask+0x21c>)
 80117a2:	f024 f8db 	bl	803595c <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80117a6:	f107 030c 	add.w	r3, r7, #12
 80117aa:	2201      	movs	r2, #1
 80117ac:	4940      	ldr	r1, [pc, #256]	@ (80118b0 <StartDisplayTask+0x204>)
 80117ae:	4618      	mov	r0, r3
 80117b0:	f007 fc42 	bl	8019038 <SSD1306_Puts>

    SSD1306_UpdateScreen();
 80117b4:	f007 fb06 	bl	8018dc4 <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 80117b8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80117bc:	f009 fc44 	bl	801b048 <vTaskDelay>
    int i=0;
 80117c0:	2300      	movs	r3, #0
 80117c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Infinite loop */
  for(;;)
  {
		SSD1306_GotoXY(x=1,y=0);
 80117c4:	2301      	movs	r3, #1
 80117c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80117ca:	2300      	movs	r3, #0
 80117cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80117d0:	2100      	movs	r1, #0
 80117d2:	2001      	movs	r0, #1
 80117d4:	f007 fb9c 	bl	8018f10 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80117d8:	2000      	movs	r0, #0
 80117da:	f007 fb21 	bl	8018e20 <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 80117de:	2201      	movs	r2, #1
 80117e0:	4933      	ldr	r1, [pc, #204]	@ (80118b0 <StartDisplayTask+0x204>)
 80117e2:	483a      	ldr	r0, [pc, #232]	@ (80118cc <StartDisplayTask+0x220>)
 80117e4:	f007 fc28 	bl	8019038 <SSD1306_Puts>
	    sprintf(buf,"%lu.%lu.%lu.%lu",
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80117e8:	4b36      	ldr	r3, [pc, #216]	@ (80118c4 <StartDisplayTask+0x218>)
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	689b      	ldr	r3, [r3, #8]
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80117ee:	b2d9      	uxtb	r1, r3
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80117f0:	4b34      	ldr	r3, [pc, #208]	@ (80118c4 <StartDisplayTask+0x218>)
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	689b      	ldr	r3, [r3, #8]
 80117f6:	0a1b      	lsrs	r3, r3, #8
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80117f8:	b2dc      	uxtb	r4, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80117fa:	4b32      	ldr	r3, [pc, #200]	@ (80118c4 <StartDisplayTask+0x218>)
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	689b      	ldr	r3, [r3, #8]
 8011800:	0c1b      	lsrs	r3, r3, #16
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 8011802:	b2db      	uxtb	r3, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011804:	4a2f      	ldr	r2, [pc, #188]	@ (80118c4 <StartDisplayTask+0x218>)
 8011806:	6852      	ldr	r2, [r2, #4]
 8011808:	6892      	ldr	r2, [r2, #8]
 801180a:	0e12      	lsrs	r2, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 801180c:	f107 000c 	add.w	r0, r7, #12
 8011810:	9201      	str	r2, [sp, #4]
 8011812:	9300      	str	r3, [sp, #0]
 8011814:	4623      	mov	r3, r4
 8011816:	460a      	mov	r2, r1
 8011818:	492d      	ldr	r1, [pc, #180]	@ (80118d0 <StartDisplayTask+0x224>)
 801181a:	f024 f89f 	bl	803595c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801181e:	f107 030c 	add.w	r3, r7, #12
 8011822:	2201      	movs	r2, #1
 8011824:	4922      	ldr	r1, [pc, #136]	@ (80118b0 <StartDisplayTask+0x204>)
 8011826:	4618      	mov	r0, r3
 8011828:	f007 fc06 	bl	8019038 <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 801182c:	2301      	movs	r3, #1
 801182e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011832:	230a      	movs	r3, #10
 8011834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011838:	210a      	movs	r1, #10
 801183a:	2001      	movs	r0, #1
 801183c:	f007 fb68 	bl	8018f10 <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 8011840:	2201      	movs	r2, #1
 8011842:	491b      	ldr	r1, [pc, #108]	@ (80118b0 <StartDisplayTask+0x204>)
 8011844:	4823      	ldr	r0, [pc, #140]	@ (80118d4 <StartDisplayTask+0x228>)
 8011846:	f007 fbf7 	bl	8019038 <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 801184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801184c:	3301      	adds	r3, #1
 801184e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011850:	f107 030c 	add.w	r3, r7, #12
 8011854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011856:	4920      	ldr	r1, [pc, #128]	@ (80118d8 <StartDisplayTask+0x22c>)
 8011858:	4618      	mov	r0, r3
 801185a:	f024 f87f 	bl	803595c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801185e:	f107 030c 	add.w	r3, r7, #12
 8011862:	2201      	movs	r2, #1
 8011864:	4912      	ldr	r1, [pc, #72]	@ (80118b0 <StartDisplayTask+0x204>)
 8011866:	4618      	mov	r0, r3
 8011868:	f007 fbe6 	bl	8019038 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 801186c:	f007 faaa 	bl	8018dc4 <SSD1306_UpdateScreen>

		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 8011870:	e00e      	b.n	8011890 <StartDisplayTask+0x1e4>
			HAL_I2C_DeInit(&hi2c1);
 8011872:	481a      	ldr	r0, [pc, #104]	@ (80118dc <StartDisplayTask+0x230>)
 8011874:	f005 f824 	bl	80168c0 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 8011878:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801187c:	f009 fbe4 	bl	801b048 <vTaskDelay>
			MX_I2C1_Init();
 8011880:	f000 fb90 	bl	8011fa4 <MX_I2C1_Init>
			vTaskDelay(1000);
 8011884:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011888:	f009 fbde 	bl	801b048 <vTaskDelay>
			SSD1306_Init ();
 801188c:	f007 f9e0 	bl	8018c50 <SSD1306_Init>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 8011890:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011894:	2201      	movs	r2, #1
 8011896:	2178      	movs	r1, #120	@ 0x78
 8011898:	4810      	ldr	r0, [pc, #64]	@ (80118dc <StartDisplayTask+0x230>)
 801189a:	f005 f93f 	bl	8016b1c <HAL_I2C_IsDeviceReady>
 801189e:	4603      	mov	r3, r0
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d1e6      	bne.n	8011872 <StartDisplayTask+0x1c6>
		}
		osDelay(1000);
 80118a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80118a8:	f007 fda7 	bl	80193fa <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 80118ac:	e78a      	b.n	80117c4 <StartDisplayTask+0x118>
 80118ae:	bf00      	nop
 80118b0:	2000008c 	.word	0x2000008c
 80118b4:	0803f50c 	.word	0x0803f50c
 80118b8:	0803f518 	.word	0x0803f518
 80118bc:	0803f524 	.word	0x0803f524
 80118c0:	0803f530 	.word	0x0803f530
 80118c4:	200009f4 	.word	0x200009f4
 80118c8:	0803f538 	.word	0x0803f538
 80118cc:	0803f558 	.word	0x0803f558
 80118d0:	0803f55c 	.word	0x0803f55c
 80118d4:	0803f56c 	.word	0x0803f56c
 80118d8:	0803f570 	.word	0x0803f570
 80118dc:	20000a2c 	.word	0x20000a2c

080118e0 <StartSettingsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSettingsTask */
void StartSettingsTask(void *argument)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b0b6      	sub	sp, #216	@ 0xd8
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSettingsTask */
	size_t  f_size = 0;
 80118e8:	2300      	movs	r3, #0
 80118ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	void *  f_pointer = NULL;
 80118ee:	2300      	movs	r3, #0
 80118f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	MQTT_cred_struct mqtt_config;

  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 80118f4:	4b46      	ldr	r3, [pc, #280]	@ (8011a10 <StartSettingsTask+0x130>)
 80118f6:	4a47      	ldr	r2, [pc, #284]	@ (8011a14 <StartSettingsTask+0x134>)
 80118f8:	4947      	ldr	r1, [pc, #284]	@ (8011a18 <StartSettingsTask+0x138>)
 80118fa:	4848      	ldr	r0, [pc, #288]	@ (8011a1c <StartSettingsTask+0x13c>)
 80118fc:	f003 ff9e 	bl	801583c <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 8011900:	4947      	ldr	r1, [pc, #284]	@ (8011a20 <StartSettingsTask+0x140>)
 8011902:	4848      	ldr	r0, [pc, #288]	@ (8011a24 <StartSettingsTask+0x144>)
 8011904:	f00b fbc8 	bl	801d098 <lfs_fs_ll_init>
 8011908:	4603      	mov	r3, r0
 801190a:	2b00      	cmp	r3, #0
 801190c:	da01      	bge.n	8011912 <StartSettingsTask+0x32>
//	  while (1){
//		  osDelay(1000);
//	  }

	  HAL_NVIC_SystemReset();
 801190e:	f004 fbf4 	bl	80160fa <HAL_NVIC_SystemReset>
  }

  mg_fs_lfs_mkdir("/web");
 8011912:	4845      	ldr	r0, [pc, #276]	@ (8011a28 <StartSettingsTask+0x148>)
 8011914:	f00b fbac 	bl	801d070 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 8011918:	4844      	ldr	r0, [pc, #272]	@ (8011a2c <StartSettingsTask+0x14c>)
 801191a:	f00b fb95 	bl	801d048 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 801191e:	4844      	ldr	r0, [pc, #272]	@ (8011a30 <StartSettingsTask+0x150>)
 8011920:	f00b fb92 	bl	801d048 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8011924:	4841      	ldr	r0, [pc, #260]	@ (8011a2c <StartSettingsTask+0x14c>)
 8011926:	f00b fba3 	bl	801d070 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 801192a:	4842      	ldr	r0, [pc, #264]	@ (8011a34 <StartSettingsTask+0x154>)
 801192c:	f00b fba0 	bl	801d070 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 8011930:	4841      	ldr	r0, [pc, #260]	@ (8011a38 <StartSettingsTask+0x158>)
 8011932:	f00b fb9d 	bl	801d070 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 8011936:	4841      	ldr	r0, [pc, #260]	@ (8011a3c <StartSettingsTask+0x15c>)
 8011938:	f00b fb9a 	bl	801d070 <mg_fs_lfs_mkdir>



  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 801193c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8011940:	2200      	movs	r2, #0
 8011942:	4619      	mov	r1, r3
 8011944:	483e      	ldr	r0, [pc, #248]	@ (8011a40 <StartSettingsTask+0x160>)
 8011946:	f00b fa27 	bl	801cd98 <mg_fs_lfs_status>
 801194a:	4603      	mov	r3, r0
 801194c:	2b00      	cmp	r3, #0
 801194e:	d01c      	beq.n	801198a <StartSettingsTask+0xaa>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 8011950:	2101      	movs	r1, #1
 8011952:	483b      	ldr	r0, [pc, #236]	@ (8011a40 <StartSettingsTask+0x160>)
 8011954:	f00b fabe 	bl	801ced4 <mg_fs_lfs_open>
 8011958:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801195c:	f107 0308 	add.w	r3, r7, #8
 8011960:	22c6      	movs	r2, #198	@ 0xc6
 8011962:	4619      	mov	r1, r3
 8011964:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8011968:	f00b fb02 	bl	801cf70 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 801196c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8011970:	f00b faea 	bl	801cf48 <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 8011974:	2300      	movs	r3, #0
 8011976:	723b      	strb	r3, [r7, #8]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011978:	4b32      	ldr	r3, [pc, #200]	@ (8011a44 <StartSettingsTask+0x164>)
 801197a:	6818      	ldr	r0, [r3, #0]
 801197c:	f107 0108 	add.w	r1, r7, #8
 8011980:	2302      	movs	r3, #2
 8011982:	2200      	movs	r2, #0
 8011984:	f008 fabc 	bl	8019f00 <xQueueGenericSend>
 8011988:	e00e      	b.n	80119a8 <StartSettingsTask+0xc8>
  }else{
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 801198a:	f107 0308 	add.w	r3, r7, #8
 801198e:	22c6      	movs	r2, #198	@ 0xc6
 8011990:	2100      	movs	r1, #0
 8011992:	4618      	mov	r0, r3
 8011994:	f024 fba4 	bl	80360e0 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011998:	4b2a      	ldr	r3, [pc, #168]	@ (8011a44 <StartSettingsTask+0x164>)
 801199a:	6818      	ldr	r0, [r3, #0]
 801199c:	f107 0108 	add.w	r1, r7, #8
 80119a0:	2302      	movs	r3, #2
 80119a2:	2200      	movs	r2, #0
 80119a4:	f008 faac 	bl	8019f00 <xQueueGenericSend>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80119a8:	4b26      	ldr	r3, [pc, #152]	@ (8011a44 <StartSettingsTask+0x164>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	f107 0108 	add.w	r1, r7, #8
 80119b0:	2200      	movs	r2, #0
 80119b2:	4618      	mov	r0, r3
 80119b4:	f008 fe36 	bl	801a624 <xQueuePeek>
	  if(mqtt_config.save){
 80119b8:	7a3b      	ldrb	r3, [r7, #8]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d022      	beq.n	8011a04 <StartSettingsTask+0x124>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 80119be:	4820      	ldr	r0, [pc, #128]	@ (8011a40 <StartSettingsTask+0x160>)
 80119c0:	f00b fb42 	bl	801d048 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 80119c4:	2102      	movs	r1, #2
 80119c6:	481e      	ldr	r0, [pc, #120]	@ (8011a40 <StartSettingsTask+0x160>)
 80119c8:	f00b fa84 	bl	801ced4 <mg_fs_lfs_open>
 80119cc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 80119d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d015      	beq.n	8011a04 <StartSettingsTask+0x124>
			  //mg_fs_lfs_seek(f_pointer, 0);
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 80119d8:	f107 0308 	add.w	r3, r7, #8
 80119dc:	22c6      	movs	r2, #198	@ 0xc6
 80119de:	4619      	mov	r1, r3
 80119e0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80119e4:	f00b fadc 	bl	801cfa0 <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 80119e8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80119ec:	f00b faac 	bl	801cf48 <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 80119f0:	2300      	movs	r3, #0
 80119f2:	723b      	strb	r3, [r7, #8]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80119f4:	4b13      	ldr	r3, [pc, #76]	@ (8011a44 <StartSettingsTask+0x164>)
 80119f6:	6818      	ldr	r0, [r3, #0]
 80119f8:	f107 0108 	add.w	r1, r7, #8
 80119fc:	2302      	movs	r3, #2
 80119fe:	2200      	movs	r2, #0
 8011a00:	f008 fa7e 	bl	8019f00 <xQueueGenericSend>
		  }
	  }

	  osDelay(1000);
 8011a04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011a08:	f007 fcf7 	bl	80193fa <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 8011a0c:	e7cc      	b.n	80119a8 <StartSettingsTask+0xc8>
 8011a0e:	bf00      	nop
 8011a10:	08011cd5 	.word	0x08011cd5
 8011a14:	08011cf9 	.word	0x08011cf9
 8011a18:	08011cbd 	.word	0x08011cbd
 8011a1c:	08011ca5 	.word	0x08011ca5
 8011a20:	08011d45 	.word	0x08011d45
 8011a24:	08011d21 	.word	0x08011d21
 8011a28:	0803f574 	.word	0x0803f574
 8011a2c:	0803f57c 	.word	0x0803f57c
 8011a30:	0803f588 	.word	0x0803f588
 8011a34:	0803f598 	.word	0x0803f598
 8011a38:	0803f5a4 	.word	0x0803f5a4
 8011a3c:	0803f5ac 	.word	0x0803f5ac
 8011a40:	0803f5b4 	.word	0x0803f5b4
 8011a44:	20000a1c 	.word	0x20000a1c

08011a48 <StartLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggingTask */
void StartLoggingTask(void *argument)
{
 8011a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a4a:	b0d5      	sub	sp, #340	@ 0x154
 8011a4c:	af06      	add	r7, sp, #24
 8011a4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a52:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8011a56:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartLoggingTask */

	uint32_t count = 2000;
 8011a58:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8011a5c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	void *  f_pointer = NULL;
 8011a60:	2300      	movs	r3, #0
 8011a62:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	size_t fs_size;
	HeapStats_t heap_status;

	osDelay(2000);
 8011a66:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011a6a:	f007 fcc6 	bl	80193fa <osDelay>
	reg_logging_fn(add_log_mess_to_q);
 8011a6e:	485b      	ldr	r0, [pc, #364]	@ (8011bdc <StartLoggingTask+0x194>)
 8011a70:	f000 fb5c 	bl	801212c <reg_logging_fn>

	logger_set_level(L_INFO);
 8011a74:	2001      	movs	r0, #1
 8011a76:	f000 fb6b 	bl	8012150 <logger_set_level>
	logging(L_INFO, "Device started...");
 8011a7a:	4959      	ldr	r1, [pc, #356]	@ (8011be0 <StartLoggingTask+0x198>)
 8011a7c:	2001      	movs	r0, #1
 8011a7e:	f000 fb77 	bl	8012170 <logging>
  /* Infinite loop */
  for(;;)
  {
	  //--------logging
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011a82:	4b58      	ldr	r3, [pc, #352]	@ (8011be4 <StartLoggingTask+0x19c>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	4618      	mov	r0, r3
 8011a88:	f007 ff12 	bl	80198b0 <osMessageQueueGetCount>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d020      	beq.n	8011ad4 <StartLoggingTask+0x8c>
		  log_message_t log;
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 8011a92:	4b54      	ldr	r3, [pc, #336]	@ (8011be4 <StartLoggingTask+0x19c>)
 8011a94:	6818      	ldr	r0, [r3, #0]
 8011a96:	f107 010c 	add.w	r1, r7, #12
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	f007 fea9 	bl	80197f4 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 8011aa2:	2102      	movs	r1, #2
 8011aa4:	4850      	ldr	r0, [pc, #320]	@ (8011be8 <StartLoggingTask+0x1a0>)
 8011aa6:	f00b fa15 	bl	801ced4 <mg_fs_lfs_open>
 8011aaa:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 8011aae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011ab2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ab6:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8011aba:	461a      	mov	r2, r3
 8011abc:	f107 030c 	add.w	r3, r7, #12
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	4619      	mov	r1, r3
 8011ac4:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8011ac8:	f00b fa6a 	bl	801cfa0 <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011acc:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8011ad0:	f00b fa3a 	bl	801cf48 <mg_fs_lfs_close>
	  }
	  //--------logging
    osDelay(500);
 8011ad4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011ad8:	f007 fc8f 	bl	80193fa <osDelay>


    if (count == 2000){
 8011adc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011ae0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8011ae4:	d173      	bne.n	8011bce <StartLoggingTask+0x186>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 8011ae6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8011aea:	2200      	movs	r2, #0
 8011aec:	4619      	mov	r1, r3
 8011aee:	483e      	ldr	r0, [pc, #248]	@ (8011be8 <StartLoggingTask+0x1a0>)
 8011af0:	f00b f952 	bl	801cd98 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8011af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011af8:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011afc:	4293      	cmp	r3, r2
 8011afe:	d90a      	bls.n	8011b16 <StartLoggingTask+0xce>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 8011b00:	483a      	ldr	r0, [pc, #232]	@ (8011bec <StartLoggingTask+0x1a4>)
 8011b02:	f00b faa1 	bl	801d048 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 8011b06:	4939      	ldr	r1, [pc, #228]	@ (8011bec <StartLoggingTask+0x1a4>)
 8011b08:	4837      	ldr	r0, [pc, #220]	@ (8011be8 <StartLoggingTask+0x1a0>)
 8011b0a:	f00b fa87 	bl	801d01c <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 8011b0e:	4938      	ldr	r1, [pc, #224]	@ (8011bf0 <StartLoggingTask+0x1a8>)
 8011b10:	2001      	movs	r0, #1
 8011b12:	f000 fb2d 	bl	8012170 <logging>
    	}

    	count = 0;
 8011b16:	2300      	movs	r3, #0
 8011b18:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    	vPortGetHeapStats(&heap_status);
 8011b1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011b20:	4618      	mov	r0, r3
 8011b22:	f00b f8bb 	bl	801cc9c <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
                (unsigned int)heap_status.xAvailableHeapSpaceInBytes,
 8011b26:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
                (unsigned int)heap_status.xSizeOfLargestFreeBlockInBytes,
 8011b2a:	f8d7 6114 	ldr.w	r6, [r7, #276]	@ 0x114
                (unsigned int)heap_status.xSizeOfSmallestFreeBlockInBytes,
 8011b2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
                (unsigned int)heap_status.xNumberOfFreeBlocks,
 8011b32:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
                (unsigned int)heap_status.xMinimumEverFreeBytesRemaining,
 8011b36:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
                (unsigned int)heap_status.xNumberOfSuccessfulAllocations,
 8011b3a:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
                (unsigned int)heap_status.xNumberOfSuccessfulFrees);
 8011b3e:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8011b42:	9404      	str	r4, [sp, #16]
 8011b44:	9003      	str	r0, [sp, #12]
 8011b46:	9102      	str	r1, [sp, #8]
 8011b48:	9201      	str	r2, [sp, #4]
 8011b4a:	9300      	str	r3, [sp, #0]
 8011b4c:	4633      	mov	r3, r6
 8011b4e:	462a      	mov	r2, r5
 8011b50:	4928      	ldr	r1, [pc, #160]	@ (8011bf4 <StartLoggingTask+0x1ac>)
 8011b52:	2001      	movs	r0, #1
 8011b54:	f000 fb0c 	bl	8012170 <logging>

    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011b58:	4b27      	ldr	r3, [pc, #156]	@ (8011bf8 <StartLoggingTask+0x1b0>)
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	689b      	ldr	r3, [r3, #8]
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8011b5e:	b2d9      	uxtb	r1, r3
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011b60:	4b25      	ldr	r3, [pc, #148]	@ (8011bf8 <StartLoggingTask+0x1b0>)
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	689b      	ldr	r3, [r3, #8]
 8011b66:	0a1b      	lsrs	r3, r3, #8
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8011b68:	b2d8      	uxtb	r0, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011b6a:	4b23      	ldr	r3, [pc, #140]	@ (8011bf8 <StartLoggingTask+0x1b0>)
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	689b      	ldr	r3, [r3, #8]
 8011b70:	0c1b      	lsrs	r3, r3, #16
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8011b72:	b2db      	uxtb	r3, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011b74:	4a20      	ldr	r2, [pc, #128]	@ (8011bf8 <StartLoggingTask+0x1b0>)
 8011b76:	6852      	ldr	r2, [r2, #4]
 8011b78:	6892      	ldr	r2, [r2, #8]
 8011b7a:	0e12      	lsrs	r2, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8011b7c:	9201      	str	r2, [sp, #4]
 8011b7e:	9300      	str	r3, [sp, #0]
 8011b80:	4603      	mov	r3, r0
 8011b82:	460a      	mov	r2, r1
 8011b84:	491d      	ldr	r1, [pc, #116]	@ (8011bfc <StartLoggingTask+0x1b4>)
 8011b86:	2001      	movs	r0, #1
 8011b88:	f000 faf2 	bl	8012170 <logging>

    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8011bf8 <StartLoggingTask+0x1b0>)
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	781b      	ldrb	r3, [r3, #0]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011b92:	461c      	mov	r4, r3
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011b94:	4b18      	ldr	r3, [pc, #96]	@ (8011bf8 <StartLoggingTask+0x1b0>)
 8011b96:	685b      	ldr	r3, [r3, #4]
 8011b98:	785b      	ldrb	r3, [r3, #1]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011b9a:	461d      	mov	r5, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011b9c:	4b16      	ldr	r3, [pc, #88]	@ (8011bf8 <StartLoggingTask+0x1b0>)
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	789b      	ldrb	r3, [r3, #2]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011ba2:	461a      	mov	r2, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011ba4:	4b14      	ldr	r3, [pc, #80]	@ (8011bf8 <StartLoggingTask+0x1b0>)
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	78db      	ldrb	r3, [r3, #3]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011baa:	4619      	mov	r1, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011bac:	4b12      	ldr	r3, [pc, #72]	@ (8011bf8 <StartLoggingTask+0x1b0>)
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	791b      	ldrb	r3, [r3, #4]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011bb2:	4618      	mov	r0, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8011bb4:	4b10      	ldr	r3, [pc, #64]	@ (8011bf8 <StartLoggingTask+0x1b0>)
 8011bb6:	685b      	ldr	r3, [r3, #4]
 8011bb8:	795b      	ldrb	r3, [r3, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011bba:	9303      	str	r3, [sp, #12]
 8011bbc:	9002      	str	r0, [sp, #8]
 8011bbe:	9101      	str	r1, [sp, #4]
 8011bc0:	9200      	str	r2, [sp, #0]
 8011bc2:	462b      	mov	r3, r5
 8011bc4:	4622      	mov	r2, r4
 8011bc6:	490e      	ldr	r1, [pc, #56]	@ (8011c00 <StartLoggingTask+0x1b8>)
 8011bc8:	2001      	movs	r0, #1
 8011bca:	f000 fad1 	bl	8012170 <logging>

    }
    count ++;
 8011bce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011bd8:	e753      	b.n	8011a82 <StartLoggingTask+0x3a>
 8011bda:	bf00      	nop
 8011bdc:	08011e21 	.word	0x08011e21
 8011be0:	0803f5c8 	.word	0x0803f5c8
 8011be4:	20000a20 	.word	0x20000a20
 8011be8:	0803f5dc 	.word	0x0803f5dc
 8011bec:	0803f5ec 	.word	0x0803f5ec
 8011bf0:	0803f5fc 	.word	0x0803f5fc
 8011bf4:	0803f610 	.word	0x0803f610
 8011bf8:	200009f4 	.word	0x200009f4
 8011bfc:	0803f494 	.word	0x0803f494
 8011c00:	0803f6a4 	.word	0x0803f6a4

08011c04 <EthResetBegin>:
  /* USER CODE END StartLoggingTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void EthResetBegin(void){
 8011c04:	b580      	push	{r7, lr}
 8011c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 8011c08:	2200      	movs	r2, #0
 8011c0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c0e:	4802      	ldr	r0, [pc, #8]	@ (8011c18 <EthResetBegin+0x14>)
 8011c10:	f004 fcf8 	bl	8016604 <HAL_GPIO_WritePin>
}
 8011c14:	bf00      	nop
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	40020000 	.word	0x40020000

08011c1c <EthResetEnd>:

void EthResetEnd(void){
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 8011c20:	2201      	movs	r2, #1
 8011c22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c26:	4802      	ldr	r0, [pc, #8]	@ (8011c30 <EthResetEnd+0x14>)
 8011c28:	f004 fcec 	bl	8016604 <HAL_GPIO_WritePin>
}
 8011c2c:	bf00      	nop
 8011c2e:	bd80      	pop	{r7, pc}
 8011c30:	40020000 	.word	0x40020000

08011c34 <EthBegin>:

void EthBegin(void * param){
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011c42:	4803      	ldr	r0, [pc, #12]	@ (8011c50 <EthBegin+0x1c>)
 8011c44:	f004 fcde 	bl	8016604 <HAL_GPIO_WritePin>
}
 8011c48:	bf00      	nop
 8011c4a:	3708      	adds	r7, #8
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	40020400 	.word	0x40020400

08011c54 <EthEnd>:

void EthEnd(void * param){
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011c5c:	2201      	movs	r2, #1
 8011c5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011c62:	4803      	ldr	r0, [pc, #12]	@ (8011c70 <EthEnd+0x1c>)
 8011c64:	f004 fcce 	bl	8016604 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 8011c68:	bf00      	nop
 8011c6a:	3708      	adds	r7, #8
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	40020400 	.word	0x40020400

08011c74 <EthTxn>:

uint8_t EthTxn(void *spi, uint8_t data) {
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b086      	sub	sp, #24
 8011c78:	af02      	add	r7, sp, #8
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	70fb      	strb	r3, [r7, #3]
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8011c80:	f107 020f 	add.w	r2, r7, #15
 8011c84:	1cf9      	adds	r1, r7, #3
 8011c86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011c8a:	9300      	str	r3, [sp, #0]
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	4804      	ldr	r0, [pc, #16]	@ (8011ca0 <EthTxn+0x2c>)
 8011c90:	f006 fa7e 	bl	8018190 <HAL_SPI_TransmitReceive>
  return rx_data;
 8011c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	3710      	adds	r7, #16
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}
 8011c9e:	bf00      	nop
 8011ca0:	20000adc 	.word	0x20000adc

08011ca4 <FlashBegin>:

void FlashBegin(void){
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	af00      	add	r7, sp, #0
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8011ca8:	2200      	movs	r2, #0
 8011caa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011cae:	4802      	ldr	r0, [pc, #8]	@ (8011cb8 <FlashBegin+0x14>)
 8011cb0:	f004 fca8 	bl	8016604 <HAL_GPIO_WritePin>
}
 8011cb4:	bf00      	nop
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	40020000 	.word	0x40020000

08011cbc <FlashEnd>:

void FlashEnd(void){
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011cc6:	4802      	ldr	r0, [pc, #8]	@ (8011cd0 <FlashEnd+0x14>)
 8011cc8:	f004 fc9c 	bl	8016604 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 8011ccc:	bf00      	nop
 8011cce:	bd80      	pop	{r7, pc}
 8011cd0:	40020000 	.word	0x40020000

08011cd4 <FlashSPIsendByte>:

void FlashSPIsendByte(uint8_t byte){
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	4603      	mov	r3, r0
 8011cdc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011cde:	1df9      	adds	r1, r7, #7
 8011ce0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ce4:	2201      	movs	r2, #1
 8011ce6:	4803      	ldr	r0, [pc, #12]	@ (8011cf4 <FlashSPIsendByte+0x20>)
 8011ce8:	f005 fff5 	bl	8017cd6 <HAL_SPI_Transmit>
}
 8011cec:	bf00      	nop
 8011cee:	3708      	adds	r7, #8
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}
 8011cf4:	20000a84 	.word	0x20000a84

08011cf8 <FlashSPIrecvBuff>:

int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b082      	sub	sp, #8
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	460b      	mov	r3, r1
 8011d02:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011d04:	887a      	ldrh	r2, [r7, #2]
 8011d06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d0a:	6879      	ldr	r1, [r7, #4]
 8011d0c:	4803      	ldr	r0, [pc, #12]	@ (8011d1c <FlashSPIrecvBuff+0x24>)
 8011d0e:	f006 f926 	bl	8017f5e <HAL_SPI_Receive>
 8011d12:	4603      	mov	r3, r0
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3708      	adds	r7, #8
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	20000a84 	.word	0x20000a84

08011d20 <FS_Lock>:
//
//int RecvBuffSPI2(uint8_t * buffer, uint16_t size){
//	return HAL_SPI_Receive(&hspi2, buffer, size, HAL_MAX_DELAY);
//}

void FS_Lock(void * param){
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8011d28:	4b05      	ldr	r3, [pc, #20]	@ (8011d40 <FS_Lock+0x20>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011d30:	4618      	mov	r0, r3
 8011d32:	f007 fc03 	bl	801953c <osMutexAcquire>
}
 8011d36:	bf00      	nop
 8011d38:	3708      	adds	r7, #8
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}
 8011d3e:	bf00      	nop
 8011d40:	20000a28 	.word	0x20000a28

08011d44 <FS_Unlock>:

void FS_Unlock(void * param){
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
	osMutexRelease(FSMutexHandle);
 8011d4c:	4b04      	ldr	r3, [pc, #16]	@ (8011d60 <FS_Unlock+0x1c>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	4618      	mov	r0, r3
 8011d52:	f007 fc3e 	bl	80195d2 <osMutexRelease>
}
 8011d56:	bf00      	nop
 8011d58:	3708      	adds	r7, #8
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	20000a28 	.word	0x20000a28

08011d64 <RW_parameters_from_queue>:

    // �?спользуем функцию отправки и приема байта
    return EthSPIsendReceiveByte(hspi, data);
}

void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b086      	sub	sp, #24
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	70fb      	strb	r3, [r7, #3]
 8011d70:	4613      	mov	r3, r2
 8011d72:	70bb      	strb	r3, [r7, #2]
	switch (param_type) {
 8011d74:	78fb      	ldrb	r3, [r7, #3]
 8011d76:	2b02      	cmp	r3, #2
 8011d78:	d02b      	beq.n	8011dd2 <RW_parameters_from_queue+0x6e>
 8011d7a:	2b02      	cmp	r3, #2
 8011d7c:	dc44      	bgt.n	8011e08 <RW_parameters_from_queue+0xa4>
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d002      	beq.n	8011d88 <RW_parameters_from_queue+0x24>
 8011d82:	2b01      	cmp	r3, #1
 8011d84:	d018      	beq.n	8011db8 <RW_parameters_from_queue+0x54>
				xQueuePeek(outputReadQHandle, output, 0);
			}else if(direction == S_WRITE){
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}
 8011d86:	e03f      	b.n	8011e08 <RW_parameters_from_queue+0xa4>
			MQTT_cred_struct * pr = (MQTT_cred_struct *) param;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	60fb      	str	r3, [r7, #12]
			if (direction == S_READ){
 8011d8c:	78bb      	ldrb	r3, [r7, #2]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d107      	bne.n	8011da2 <RW_parameters_from_queue+0x3e>
				xQueuePeek(mqttQHandle, pr, 0);
 8011d92:	4b1f      	ldr	r3, [pc, #124]	@ (8011e10 <RW_parameters_from_queue+0xac>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2200      	movs	r2, #0
 8011d98:	68f9      	ldr	r1, [r7, #12]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f008 fc42 	bl	801a624 <xQueuePeek>
			break;
 8011da0:	e02f      	b.n	8011e02 <RW_parameters_from_queue+0x9e>
			}else if (direction == S_WRITE){
 8011da2:	78bb      	ldrb	r3, [r7, #2]
 8011da4:	2b01      	cmp	r3, #1
 8011da6:	d12c      	bne.n	8011e02 <RW_parameters_from_queue+0x9e>
				xQueueOverwrite(mqttQHandle, pr);
 8011da8:	4b19      	ldr	r3, [pc, #100]	@ (8011e10 <RW_parameters_from_queue+0xac>)
 8011daa:	6818      	ldr	r0, [r3, #0]
 8011dac:	2302      	movs	r3, #2
 8011dae:	2200      	movs	r2, #0
 8011db0:	68f9      	ldr	r1, [r7, #12]
 8011db2:	f008 f8a5 	bl	8019f00 <xQueueGenericSend>
			break;
 8011db6:	e024      	b.n	8011e02 <RW_parameters_from_queue+0x9e>
			inputs_state_t * input = (inputs_state_t *) param;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	613b      	str	r3, [r7, #16]
			if (direction == S_READ){
 8011dbc:	78bb      	ldrb	r3, [r7, #2]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d121      	bne.n	8011e06 <RW_parameters_from_queue+0xa2>
				xQueuePeek(inputReadQHandle, input, 0);
 8011dc2:	4b14      	ldr	r3, [pc, #80]	@ (8011e14 <RW_parameters_from_queue+0xb0>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	6939      	ldr	r1, [r7, #16]
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f008 fc2a 	bl	801a624 <xQueuePeek>
			break;
 8011dd0:	e019      	b.n	8011e06 <RW_parameters_from_queue+0xa2>
			inputs_state_t * output = (inputs_state_t *) param;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	617b      	str	r3, [r7, #20]
			if (direction == S_READ){
 8011dd6:	78bb      	ldrb	r3, [r7, #2]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d107      	bne.n	8011dec <RW_parameters_from_queue+0x88>
				xQueuePeek(outputReadQHandle, output, 0);
 8011ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8011e18 <RW_parameters_from_queue+0xb4>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	2200      	movs	r2, #0
 8011de2:	6979      	ldr	r1, [r7, #20]
 8011de4:	4618      	mov	r0, r3
 8011de6:	f008 fc1d 	bl	801a624 <xQueuePeek>
}
 8011dea:	e00d      	b.n	8011e08 <RW_parameters_from_queue+0xa4>
			}else if(direction == S_WRITE){
 8011dec:	78bb      	ldrb	r3, [r7, #2]
 8011dee:	2b01      	cmp	r3, #1
 8011df0:	d10a      	bne.n	8011e08 <RW_parameters_from_queue+0xa4>
				xQueueOverwrite(outputWriteQHandle, output);
 8011df2:	4b0a      	ldr	r3, [pc, #40]	@ (8011e1c <RW_parameters_from_queue+0xb8>)
 8011df4:	6818      	ldr	r0, [r3, #0]
 8011df6:	2302      	movs	r3, #2
 8011df8:	2200      	movs	r2, #0
 8011dfa:	6979      	ldr	r1, [r7, #20]
 8011dfc:	f008 f880 	bl	8019f00 <xQueueGenericSend>
}
 8011e00:	e002      	b.n	8011e08 <RW_parameters_from_queue+0xa4>
			break;
 8011e02:	bf00      	nop
 8011e04:	e000      	b.n	8011e08 <RW_parameters_from_queue+0xa4>
			break;
 8011e06:	bf00      	nop
}
 8011e08:	bf00      	nop
 8011e0a:	3718      	adds	r7, #24
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}
 8011e10:	20000a1c 	.word	0x20000a1c
 8011e14:	20000a10 	.word	0x20000a10
 8011e18:	20000a14 	.word	0x20000a14
 8011e1c:	20000a18 	.word	0x20000a18

08011e20 <add_log_mess_to_q>:

void add_log_mess_to_q(struct log_message mess){
 8011e20:	b084      	sub	sp, #16
 8011e22:	b580      	push	{r7, lr}
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	f107 0c08 	add.w	ip, r7, #8
 8011e2a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011e2e:	4b07      	ldr	r3, [pc, #28]	@ (8011e4c <add_log_mess_to_q+0x2c>)
 8011e30:	6818      	ldr	r0, [r3, #0]
 8011e32:	2300      	movs	r3, #0
 8011e34:	2200      	movs	r2, #0
 8011e36:	f107 0108 	add.w	r1, r7, #8
 8011e3a:	f007 fc7b 	bl	8019734 <osMessageQueuePut>

}
 8011e3e:	bf00      	nop
 8011e40:	46bd      	mov	sp, r7
 8011e42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011e46:	b004      	add	sp, #16
 8011e48:	4770      	bx	lr
 8011e4a:	bf00      	nop
 8011e4c:	20000a20 	.word	0x20000a20

08011e50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b088      	sub	sp, #32
 8011e54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e56:	f107 030c 	add.w	r3, r7, #12
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	601a      	str	r2, [r3, #0]
 8011e5e:	605a      	str	r2, [r3, #4]
 8011e60:	609a      	str	r2, [r3, #8]
 8011e62:	60da      	str	r2, [r3, #12]
 8011e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011e66:	2300      	movs	r3, #0
 8011e68:	60bb      	str	r3, [r7, #8]
 8011e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8011f98 <MX_GPIO_Init+0x148>)
 8011e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8011f98 <MX_GPIO_Init+0x148>)
 8011e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8011e76:	4b48      	ldr	r3, [pc, #288]	@ (8011f98 <MX_GPIO_Init+0x148>)
 8011e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e7e:	60bb      	str	r3, [r7, #8]
 8011e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011e82:	2300      	movs	r3, #0
 8011e84:	607b      	str	r3, [r7, #4]
 8011e86:	4b44      	ldr	r3, [pc, #272]	@ (8011f98 <MX_GPIO_Init+0x148>)
 8011e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e8a:	4a43      	ldr	r2, [pc, #268]	@ (8011f98 <MX_GPIO_Init+0x148>)
 8011e8c:	f043 0301 	orr.w	r3, r3, #1
 8011e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8011e92:	4b41      	ldr	r3, [pc, #260]	@ (8011f98 <MX_GPIO_Init+0x148>)
 8011e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e96:	f003 0301 	and.w	r3, r3, #1
 8011e9a:	607b      	str	r3, [r7, #4]
 8011e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	603b      	str	r3, [r7, #0]
 8011ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8011f98 <MX_GPIO_Init+0x148>)
 8011ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ea6:	4a3c      	ldr	r2, [pc, #240]	@ (8011f98 <MX_GPIO_Init+0x148>)
 8011ea8:	f043 0302 	orr.w	r3, r3, #2
 8011eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8011eae:	4b3a      	ldr	r3, [pc, #232]	@ (8011f98 <MX_GPIO_Init+0x148>)
 8011eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eb2:	f003 0302 	and.w	r3, r3, #2
 8011eb6:	603b      	str	r3, [r7, #0]
 8011eb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8011eba:	2200      	movs	r2, #0
 8011ebc:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011ec0:	4836      	ldr	r0, [pc, #216]	@ (8011f9c <MX_GPIO_Init+0x14c>)
 8011ec2:	f004 fb9f 	bl	8016604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	2107      	movs	r1, #7
 8011eca:	4835      	ldr	r0, [pc, #212]	@ (8011fa0 <MX_GPIO_Init+0x150>)
 8011ecc:	f004 fb9a 	bl	8016604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011ed0:	2201      	movs	r2, #1
 8011ed2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011ed6:	4832      	ldr	r0, [pc, #200]	@ (8011fa0 <MX_GPIO_Init+0x150>)
 8011ed8:	f004 fb94 	bl	8016604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011edc:	2201      	movs	r2, #1
 8011ede:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011ee2:	482e      	ldr	r0, [pc, #184]	@ (8011f9c <MX_GPIO_Init+0x14c>)
 8011ee4:	f004 fb8e 	bl	8016604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8011ee8:	2307      	movs	r3, #7
 8011eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011eec:	2300      	movs	r3, #0
 8011eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011ef0:	2302      	movs	r3, #2
 8011ef2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ef4:	f107 030c 	add.w	r3, r7, #12
 8011ef8:	4619      	mov	r1, r3
 8011efa:	4828      	ldr	r0, [pc, #160]	@ (8011f9c <MX_GPIO_Init+0x14c>)
 8011efc:	f004 f902 	bl	8016104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8011f00:	23e0      	movs	r3, #224	@ 0xe0
 8011f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f04:	2301      	movs	r3, #1
 8011f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f10:	f107 030c 	add.w	r3, r7, #12
 8011f14:	4619      	mov	r1, r3
 8011f16:	4821      	ldr	r0, [pc, #132]	@ (8011f9c <MX_GPIO_Init+0x14c>)
 8011f18:	f004 f8f4 	bl	8016104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8011f1c:	2307      	movs	r3, #7
 8011f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f20:	2301      	movs	r3, #1
 8011f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f24:	2300      	movs	r3, #0
 8011f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011f2c:	f107 030c 	add.w	r3, r7, #12
 8011f30:	4619      	mov	r1, r3
 8011f32:	481b      	ldr	r0, [pc, #108]	@ (8011fa0 <MX_GPIO_Init+0x150>)
 8011f34:	f004 f8e6 	bl	8016104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8011f38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011f3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f3e:	2301      	movs	r3, #1
 8011f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f42:	2300      	movs	r3, #0
 8011f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011f46:	2302      	movs	r3, #2
 8011f48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8011f4a:	f107 030c 	add.w	r3, r7, #12
 8011f4e:	4619      	mov	r1, r3
 8011f50:	4813      	ldr	r0, [pc, #76]	@ (8011fa0 <MX_GPIO_Init+0x150>)
 8011f52:	f004 f8d7 	bl	8016104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8011f56:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8011f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f60:	2300      	movs	r3, #0
 8011f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011f64:	2302      	movs	r3, #2
 8011f66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f68:	f107 030c 	add.w	r3, r7, #12
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	480b      	ldr	r0, [pc, #44]	@ (8011f9c <MX_GPIO_Init+0x14c>)
 8011f70:	f004 f8c8 	bl	8016104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8011f74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011f78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8011f82:	f107 030c 	add.w	r3, r7, #12
 8011f86:	4619      	mov	r1, r3
 8011f88:	4805      	ldr	r0, [pc, #20]	@ (8011fa0 <MX_GPIO_Init+0x150>)
 8011f8a:	f004 f8bb 	bl	8016104 <HAL_GPIO_Init>

}
 8011f8e:	bf00      	nop
 8011f90:	3720      	adds	r7, #32
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}
 8011f96:	bf00      	nop
 8011f98:	40023800 	.word	0x40023800
 8011f9c:	40020000 	.word	0x40020000
 8011fa0:	40020400 	.word	0x40020400

08011fa4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011fa8:	4b12      	ldr	r3, [pc, #72]	@ (8011ff4 <MX_I2C1_Init+0x50>)
 8011faa:	4a13      	ldr	r2, [pc, #76]	@ (8011ff8 <MX_I2C1_Init+0x54>)
 8011fac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8011fae:	4b11      	ldr	r3, [pc, #68]	@ (8011ff4 <MX_I2C1_Init+0x50>)
 8011fb0:	4a12      	ldr	r2, [pc, #72]	@ (8011ffc <MX_I2C1_Init+0x58>)
 8011fb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8011ff4 <MX_I2C1_Init+0x50>)
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011fba:	4b0e      	ldr	r3, [pc, #56]	@ (8011ff4 <MX_I2C1_Init+0x50>)
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8011ff4 <MX_I2C1_Init+0x50>)
 8011fc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011fc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8011ff4 <MX_I2C1_Init+0x50>)
 8011fca:	2200      	movs	r2, #0
 8011fcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011fce:	4b09      	ldr	r3, [pc, #36]	@ (8011ff4 <MX_I2C1_Init+0x50>)
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011fd4:	4b07      	ldr	r3, [pc, #28]	@ (8011ff4 <MX_I2C1_Init+0x50>)
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011fda:	4b06      	ldr	r3, [pc, #24]	@ (8011ff4 <MX_I2C1_Init+0x50>)
 8011fdc:	2200      	movs	r2, #0
 8011fde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011fe0:	4804      	ldr	r0, [pc, #16]	@ (8011ff4 <MX_I2C1_Init+0x50>)
 8011fe2:	f004 fb29 	bl	8016638 <HAL_I2C_Init>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d001      	beq.n	8011ff0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8011fec:	f000 fa96 	bl	801251c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011ff0:	bf00      	nop
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	20000a2c 	.word	0x20000a2c
 8011ff8:	40005400 	.word	0x40005400
 8011ffc:	00030d40 	.word	0x00030d40

08012000 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b08a      	sub	sp, #40	@ 0x28
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012008:	f107 0314 	add.w	r3, r7, #20
 801200c:	2200      	movs	r2, #0
 801200e:	601a      	str	r2, [r3, #0]
 8012010:	605a      	str	r2, [r3, #4]
 8012012:	609a      	str	r2, [r3, #8]
 8012014:	60da      	str	r2, [r3, #12]
 8012016:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	4a19      	ldr	r2, [pc, #100]	@ (8012084 <HAL_I2C_MspInit+0x84>)
 801201e:	4293      	cmp	r3, r2
 8012020:	d12b      	bne.n	801207a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012022:	2300      	movs	r3, #0
 8012024:	613b      	str	r3, [r7, #16]
 8012026:	4b18      	ldr	r3, [pc, #96]	@ (8012088 <HAL_I2C_MspInit+0x88>)
 8012028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801202a:	4a17      	ldr	r2, [pc, #92]	@ (8012088 <HAL_I2C_MspInit+0x88>)
 801202c:	f043 0302 	orr.w	r3, r3, #2
 8012030:	6313      	str	r3, [r2, #48]	@ 0x30
 8012032:	4b15      	ldr	r3, [pc, #84]	@ (8012088 <HAL_I2C_MspInit+0x88>)
 8012034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012036:	f003 0302 	and.w	r3, r3, #2
 801203a:	613b      	str	r3, [r7, #16]
 801203c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801203e:	23c0      	movs	r3, #192	@ 0xc0
 8012040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012042:	2312      	movs	r3, #18
 8012044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012046:	2301      	movs	r3, #1
 8012048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801204a:	2303      	movs	r3, #3
 801204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801204e:	2304      	movs	r3, #4
 8012050:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012052:	f107 0314 	add.w	r3, r7, #20
 8012056:	4619      	mov	r1, r3
 8012058:	480c      	ldr	r0, [pc, #48]	@ (801208c <HAL_I2C_MspInit+0x8c>)
 801205a:	f004 f853 	bl	8016104 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801205e:	2300      	movs	r3, #0
 8012060:	60fb      	str	r3, [r7, #12]
 8012062:	4b09      	ldr	r3, [pc, #36]	@ (8012088 <HAL_I2C_MspInit+0x88>)
 8012064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012066:	4a08      	ldr	r2, [pc, #32]	@ (8012088 <HAL_I2C_MspInit+0x88>)
 8012068:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801206c:	6413      	str	r3, [r2, #64]	@ 0x40
 801206e:	4b06      	ldr	r3, [pc, #24]	@ (8012088 <HAL_I2C_MspInit+0x88>)
 8012070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012072:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012076:	60fb      	str	r3, [r7, #12]
 8012078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 801207a:	bf00      	nop
 801207c:	3728      	adds	r7, #40	@ 0x28
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
 8012082:	bf00      	nop
 8012084:	40005400 	.word	0x40005400
 8012088:	40023800 	.word	0x40023800
 801208c:	40020400 	.word	0x40020400

08012090 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	4a0a      	ldr	r2, [pc, #40]	@ (80120c8 <HAL_I2C_MspDeInit+0x38>)
 801209e:	4293      	cmp	r3, r2
 80120a0:	d10d      	bne.n	80120be <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80120a2:	4b0a      	ldr	r3, [pc, #40]	@ (80120cc <HAL_I2C_MspDeInit+0x3c>)
 80120a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120a6:	4a09      	ldr	r2, [pc, #36]	@ (80120cc <HAL_I2C_MspDeInit+0x3c>)
 80120a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80120ac:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80120ae:	2140      	movs	r1, #64	@ 0x40
 80120b0:	4807      	ldr	r0, [pc, #28]	@ (80120d0 <HAL_I2C_MspDeInit+0x40>)
 80120b2:	f004 f9ab 	bl	801640c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80120b6:	2180      	movs	r1, #128	@ 0x80
 80120b8:	4805      	ldr	r0, [pc, #20]	@ (80120d0 <HAL_I2C_MspDeInit+0x40>)
 80120ba:	f004 f9a7 	bl	801640c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80120be:	bf00      	nop
 80120c0:	3708      	adds	r7, #8
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop
 80120c8:	40005400 	.word	0x40005400
 80120cc:	40023800 	.word	0x40023800
 80120d0:	40020400 	.word	0x40020400

080120d4 <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b084      	sub	sp, #16
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	683a      	ldr	r2, [r7, #0]
 80120e2:	fb02 f303 	mul.w	r3, r2, r3
 80120e6:	4618      	mov	r0, r3
 80120e8:	f00a fbe8 	bl	801c8bc <pvPortMalloc>
 80120ec:	4603      	mov	r3, r0
 80120ee:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d008      	beq.n	8012108 <mg_calloc+0x34>
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	687a      	ldr	r2, [r7, #4]
 80120fa:	fb02 f303 	mul.w	r3, r2, r3
 80120fe:	461a      	mov	r2, r3
 8012100:	2100      	movs	r1, #0
 8012102:	68f8      	ldr	r0, [r7, #12]
 8012104:	f023 ffec 	bl	80360e0 <memset>
  return p;
 8012108:	68fb      	ldr	r3, [r7, #12]
}
 801210a:	4618      	mov	r0, r3
 801210c:	3710      	adds	r7, #16
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <proto>:
#define time_ms_now() mg_now()

logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 8012112:	b084      	sub	sp, #16
 8012114:	b490      	push	{r4, r7}
 8012116:	af00      	add	r7, sp, #0
 8012118:	f107 0408 	add.w	r4, r7, #8
 801211c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012120:	bf00      	nop
 8012122:	46bd      	mov	sp, r7
 8012124:	bc90      	pop	{r4, r7}
 8012126:	b004      	add	sp, #16
 8012128:	4770      	bx	lr
	...

0801212c <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
 801212c:	b480      	push	{r7}
 801212e:	b083      	sub	sp, #12
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
	if (fn != NULL){
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d002      	beq.n	8012140 <reg_logging_fn+0x14>
		_send_log_mess = fn;
 801213a:	4a04      	ldr	r2, [pc, #16]	@ (801214c <reg_logging_fn+0x20>)
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6013      	str	r3, [r2, #0]
	}
}
 8012140:	bf00      	nop
 8012142:	370c      	adds	r7, #12
 8012144:	46bd      	mov	sp, r7
 8012146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214a:	4770      	bx	lr
 801214c:	20000010 	.word	0x20000010

08012150 <logger_set_level>:

void logger_set_level(logging_level_t l){
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
 8012156:	4603      	mov	r3, r0
 8012158:	71fb      	strb	r3, [r7, #7]
	_level_ = l;
 801215a:	4a04      	ldr	r2, [pc, #16]	@ (801216c <logger_set_level+0x1c>)
 801215c:	79fb      	ldrb	r3, [r7, #7]
 801215e:	7013      	strb	r3, [r2, #0]
}
 8012160:	bf00      	nop
 8012162:	370c      	adds	r7, #12
 8012164:	46bd      	mov	sp, r7
 8012166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216a:	4770      	bx	lr
 801216c:	20000a80 	.word	0x20000a80

08012170 <logging>:

void logging(logging_level_t level, const char *format, ...){
 8012170:	b40e      	push	{r1, r2, r3}
 8012172:	b5b0      	push	{r4, r5, r7, lr}
 8012174:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8012178:	af3e      	add	r7, sp, #248	@ 0xf8
 801217a:	4602      	mov	r2, r0
 801217c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8012180:	f2a3 1399 	subw	r3, r3, #409	@ 0x199
 8012184:	701a      	strb	r2, [r3, #0]
    va_list args;

    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;
 8012186:	2300      	movs	r3, #0
 8012188:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

    if (level < _level_) return;
 801218c:	4b87      	ldr	r3, [pc, #540]	@ (80123ac <logging+0x23c>)
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8012194:	f2a2 1299 	subw	r2, r2, #409	@ 0x199
 8012198:	7812      	ldrb	r2, [r2, #0]
 801219a:	429a      	cmp	r2, r3
 801219c:	f0c0 80fc 	bcc.w	8012398 <logging+0x228>

    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 80121a0:	2101      	movs	r1, #1
 80121a2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80121a6:	f7ff ff95 	bl	80120d4 <mg_calloc>
 80121aa:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

    if (!tmp_buf){
 80121ae:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	f000 80f2 	beq.w	801239c <logging+0x22c>
    	return;
    }

    // Инициализация структуры нулями
    memset(&mess, 0, sizeof(log_message_t));
 80121b8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80121bc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80121c0:	2100      	movs	r1, #0
 80121c2:	4618      	mov	r0, r3
 80121c4:	f023 ff8c 	bl	80360e0 <memset>

    // Установка уровня логирования
    mess.log_level = level;
 80121c8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80121cc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80121d0:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80121d4:	f2a2 1299 	subw	r2, r2, #409	@ 0x199
 80121d8:	7812      	ldrb	r2, [r2, #0]
 80121da:	701a      	strb	r2, [r3, #0]


    // Получение текущего времени в миллисекундах
    double ms_now = time_ms_now();
 80121dc:	f01f fba4 	bl	8031928 <mg_now>
 80121e0:	4602      	mov	r2, r0
 80121e2:	460b      	mov	r3, r1
 80121e4:	4610      	mov	r0, r2
 80121e6:	4619      	mov	r1, r3
 80121e8:	f7fe f9e8 	bl	80105bc <__aeabi_ul2d>
 80121ec:	4602      	mov	r2, r0
 80121ee:	460b      	mov	r3, r1
 80121f0:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190

    // Преобразование миллисекунд в секунды для time_t
    time_t now = (time_t)(ms_now / 1000.0);
 80121f4:	f04f 0200 	mov.w	r2, #0
 80121f8:	4b6d      	ldr	r3, [pc, #436]	@ (80123b0 <logging+0x240>)
 80121fa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80121fe:	f7fe fb3d 	bl	801087c <__aeabi_ddiv>
 8012202:	4602      	mov	r2, r0
 8012204:	460b      	mov	r3, r1
 8012206:	4610      	mov	r0, r2
 8012208:	4619      	mov	r1, r3
 801220a:	f7fe fdd1 	bl	8010db0 <__aeabi_d2lz>
 801220e:	4602      	mov	r2, r0
 8012210:	460b      	mov	r3, r1
 8012212:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    // Получение локального времени
    struct tm tm_info;
    localtime_r(&now, &tm_info);
 8012216:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801221a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801221e:	4611      	mov	r1, r2
 8012220:	4618      	mov	r0, r3
 8012222:	f023 fff3 	bl	803620c <localtime_r>

    // Форматирование времени
    char time_str[64];
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 8012226:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801222a:	f107 000c 	add.w	r0, r7, #12
 801222e:	4a61      	ldr	r2, [pc, #388]	@ (80123b4 <logging+0x244>)
 8012230:	2140      	movs	r1, #64	@ 0x40
 8012232:	f024 fdfd 	bl	8036e30 <strftime>
 8012236:	4603      	mov	r3, r0
 8012238:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Вычисление миллисекунд
    int millis = (int)(ms_now) % 1000;
 801223c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8012240:	f7fe fca2 	bl	8010b88 <__aeabi_d2iz>
 8012244:	4603      	mov	r3, r0
 8012246:	4a5c      	ldr	r2, [pc, #368]	@ (80123b8 <logging+0x248>)
 8012248:	fb82 1203 	smull	r1, r2, r2, r3
 801224c:	1191      	asrs	r1, r2, #6
 801224e:	17da      	asrs	r2, r3, #31
 8012250:	1a8a      	subs	r2, r1, r2
 8012252:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012256:	fb01 f202 	mul.w	r2, r1, r2
 801225a:	1a9b      	subs	r3, r3, r2
 801225c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

    // Добавление миллисекунд к строке времени
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8012260:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8012264:	f107 020c 	add.w	r2, r7, #12
 8012268:	18d0      	adds	r0, r2, r3
 801226a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801226e:	f1c3 0140 	rsb	r1, r3, #64	@ 0x40
 8012272:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8012276:	4a51      	ldr	r2, [pc, #324]	@ (80123bc <logging+0x24c>)
 8012278:	f023 fa08 	bl	803568c <snprintf>
 801227c:	4602      	mov	r2, r0
 801227e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8012282:	4413      	add	r3, r2
 8012284:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Добавление разделителя, например, пробела
    time_str[time_len++] = ' ';
 8012288:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801228c:	1c5a      	adds	r2, r3, #1
 801228e:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8012292:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8012296:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 801229a:	2120      	movs	r1, #32
 801229c:	54d1      	strb	r1, [r2, r3]
    time_str[time_len++] = '\0';
 801229e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80122a2:	1c5a      	adds	r2, r3, #1
 80122a4:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 80122a8:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80122ac:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 80122b0:	2100      	movs	r1, #0
 80122b2:	54d1      	strb	r1, [r2, r3]
    time_len += 1;
 80122b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80122b8:	3301      	adds	r3, #1
 80122ba:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Инициализация списка аргументов
    va_start(args, format);
 80122be:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80122c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80122c6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80122ca:	601a      	str	r2, [r3, #0]

    // Форматирование строки с ограничением на размер log_text
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 80122cc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80122d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80122d4:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80122d8:	1c50      	adds	r0, r2, #1
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80122e0:	21fd      	movs	r1, #253	@ 0xfd
 80122e2:	f023 fc9b 	bl	8035c1c <vsnprintf>
 80122e6:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    //formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN  - 3, format, args);

    // Завершение работы со списком аргументов
    va_end(args);

    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 80122ea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80122ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	461a      	mov	r2, r3
 80122f6:	4b32      	ldr	r3, [pc, #200]	@ (80123c0 <logging+0x250>)
 80122f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122fc:	f107 010c 	add.w	r1, r7, #12
 8012300:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8012304:	3201      	adds	r2, #1
 8012306:	9201      	str	r2, [sp, #4]
 8012308:	9300      	str	r3, [sp, #0]
 801230a:	460b      	mov	r3, r1
 801230c:	4a2d      	ldr	r2, [pc, #180]	@ (80123c4 <logging+0x254>)
 801230e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012312:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8012316:	f023 f9b9 	bl	803568c <snprintf>
    // Проверка длины отформатированной строки
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 801231a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801231e:	2b00      	cmp	r3, #0
 8012320:	db10      	blt.n	8012344 <logging+0x1d4>
 8012322:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8012326:	2bf5      	cmp	r3, #245	@ 0xf5
 8012328:	dc0c      	bgt.n	8012344 <logging+0x1d4>
         mess.log_len = strlen(tmp_buf);
 801232a:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 801232e:	f7fd ffb7 	bl	80102a0 <strlen>
 8012332:	4603      	mov	r3, r0
 8012334:	b2da      	uxtb	r2, r3
 8012336:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 801233a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801233e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
 8012342:	e006      	b.n	8012352 <logging+0x1e2>
     } else {
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 8012344:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8012348:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801234c:	22f6      	movs	r2, #246	@ 0xf6
 801234e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
     }

     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 8012352:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8012356:	3301      	adds	r3, #1
 8012358:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801235c:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8012360:	4618      	mov	r0, r3
 8012362:	f023 ff04 	bl	803616e <strncpy>

    // Проверка на существование функции перед вызовом
    if (_send_log_mess) {
 8012366:	4b18      	ldr	r3, [pc, #96]	@ (80123c8 <logging+0x258>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d00f      	beq.n	801238e <logging+0x21e>
        _send_log_mess(mess);
 801236e:	4b16      	ldr	r3, [pc, #88]	@ (80123c8 <logging+0x258>)
 8012370:	681d      	ldr	r5, [r3, #0]
 8012372:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8012376:	f5a3 7490 	sub.w	r4, r3, #288	@ 0x120
 801237a:	4668      	mov	r0, sp
 801237c:	f104 0310 	add.w	r3, r4, #16
 8012380:	22f2      	movs	r2, #242	@ 0xf2
 8012382:	4619      	mov	r1, r3
 8012384:	f025 f8e8 	bl	8037558 <memcpy>
 8012388:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801238c:	47a8      	blx	r5
    }

    free(tmp_buf);
 801238e:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8012392:	f00a fb61 	bl	801ca58 <vPortFree>
 8012396:	e002      	b.n	801239e <logging+0x22e>
    if (level < _level_) return;
 8012398:	bf00      	nop
 801239a:	e000      	b.n	801239e <logging+0x22e>
    	return;
 801239c:	bf00      	nop
}
 801239e:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 80123a2:	46bd      	mov	sp, r7
 80123a4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80123a8:	b003      	add	sp, #12
 80123aa:	4770      	bx	lr
 80123ac:	20000a80 	.word	0x20000a80
 80123b0:	408f4000 	.word	0x408f4000
 80123b4:	0803f6ec 	.word	0x0803f6ec
 80123b8:	10624dd3 	.word	0x10624dd3
 80123bc:	0803f700 	.word	0x0803f700
 80123c0:	20000000 	.word	0x20000000
 80123c4:	0803f708 	.word	0x0803f708
 80123c8:	20000010 	.word	0x20000010

080123cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80123d2:	b672      	cpsid	i
}
 80123d4:	bf00      	nop

  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80123d6:	4b11      	ldr	r3, [pc, #68]	@ (801241c <main+0x50>)
 80123d8:	4a11      	ldr	r2, [pc, #68]	@ (8012420 <main+0x54>)
 80123da:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80123dc:	b662      	cpsie	i
}
 80123de:	bf00      	nop
	 //NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x08010000);
	__enable_irq();

	volatile int i = 1000000;
 80123e0:	4b10      	ldr	r3, [pc, #64]	@ (8012424 <main+0x58>)
 80123e2:	607b      	str	r3, [r7, #4]
	while (i > 0){ //delay for startup
 80123e4:	e002      	b.n	80123ec <main+0x20>
		i--;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	3b01      	subs	r3, #1
 80123ea:	607b      	str	r3, [r7, #4]
	while (i > 0){ //delay for startup
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	dcf9      	bgt.n	80123e6 <main+0x1a>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80123f2:	f003 fd23 	bl	8015e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80123f6:	f000 f817 	bl	8012428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80123fa:	f7ff fd29 	bl	8011e50 <MX_GPIO_Init>
  MX_SPI2_Init();
 80123fe:	f000 f8c9 	bl	8012594 <MX_SPI2_Init>
  MX_I2C1_Init();
 8012402:	f7ff fdcf 	bl	8011fa4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8012406:	f000 f88f 	bl	8012528 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 801240a:	f006 ff19 	bl	8019240 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 801240e:	f7fe fe65 	bl	80110dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8012412:	f006 ff39 	bl	8019288 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8012416:	bf00      	nop
 8012418:	e7fd      	b.n	8012416 <main+0x4a>
 801241a:	bf00      	nop
 801241c:	e000ed00 	.word	0xe000ed00
 8012420:	08010000 	.word	0x08010000
 8012424:	000f4240 	.word	0x000f4240

08012428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b094      	sub	sp, #80	@ 0x50
 801242c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801242e:	f107 0320 	add.w	r3, r7, #32
 8012432:	2230      	movs	r2, #48	@ 0x30
 8012434:	2100      	movs	r1, #0
 8012436:	4618      	mov	r0, r3
 8012438:	f023 fe52 	bl	80360e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801243c:	f107 030c 	add.w	r3, r7, #12
 8012440:	2200      	movs	r2, #0
 8012442:	601a      	str	r2, [r3, #0]
 8012444:	605a      	str	r2, [r3, #4]
 8012446:	609a      	str	r2, [r3, #8]
 8012448:	60da      	str	r2, [r3, #12]
 801244a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801244c:	2300      	movs	r3, #0
 801244e:	60bb      	str	r3, [r7, #8]
 8012450:	4b27      	ldr	r3, [pc, #156]	@ (80124f0 <SystemClock_Config+0xc8>)
 8012452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012454:	4a26      	ldr	r2, [pc, #152]	@ (80124f0 <SystemClock_Config+0xc8>)
 8012456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801245a:	6413      	str	r3, [r2, #64]	@ 0x40
 801245c:	4b24      	ldr	r3, [pc, #144]	@ (80124f0 <SystemClock_Config+0xc8>)
 801245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012464:	60bb      	str	r3, [r7, #8]
 8012466:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012468:	2300      	movs	r3, #0
 801246a:	607b      	str	r3, [r7, #4]
 801246c:	4b21      	ldr	r3, [pc, #132]	@ (80124f4 <SystemClock_Config+0xcc>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	4a20      	ldr	r2, [pc, #128]	@ (80124f4 <SystemClock_Config+0xcc>)
 8012472:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012476:	6013      	str	r3, [r2, #0]
 8012478:	4b1e      	ldr	r3, [pc, #120]	@ (80124f4 <SystemClock_Config+0xcc>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8012480:	607b      	str	r3, [r7, #4]
 8012482:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8012484:	2301      	movs	r3, #1
 8012486:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8012488:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801248c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801248e:	2302      	movs	r3, #2
 8012490:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8012492:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8012496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8012498:	2304      	movs	r3, #4
 801249a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 801249c:	2364      	movs	r3, #100	@ 0x64
 801249e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80124a0:	2302      	movs	r3, #2
 80124a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80124a4:	2304      	movs	r3, #4
 80124a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80124a8:	f107 0320 	add.w	r3, r7, #32
 80124ac:	4618      	mov	r0, r3
 80124ae:	f004 febf 	bl	8017230 <HAL_RCC_OscConfig>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d001      	beq.n	80124bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80124b8:	f000 f830 	bl	801251c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80124bc:	230f      	movs	r3, #15
 80124be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80124c0:	2302      	movs	r3, #2
 80124c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80124c4:	2300      	movs	r3, #0
 80124c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80124c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80124cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80124ce:	2300      	movs	r3, #0
 80124d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80124d2:	f107 030c 	add.w	r3, r7, #12
 80124d6:	2103      	movs	r1, #3
 80124d8:	4618      	mov	r0, r3
 80124da:	f005 f921 	bl	8017720 <HAL_RCC_ClockConfig>
 80124de:	4603      	mov	r3, r0
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d001      	beq.n	80124e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80124e4:	f000 f81a 	bl	801251c <Error_Handler>
  }
}
 80124e8:	bf00      	nop
 80124ea:	3750      	adds	r7, #80	@ 0x50
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}
 80124f0:	40023800 	.word	0x40023800
 80124f4:	40007000 	.word	0x40007000

080124f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b082      	sub	sp, #8
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	4a04      	ldr	r2, [pc, #16]	@ (8012518 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8012506:	4293      	cmp	r3, r2
 8012508:	d101      	bne.n	801250e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801250a:	f003 fcb9 	bl	8015e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801250e:	bf00      	nop
 8012510:	3708      	adds	r7, #8
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	40014000 	.word	0x40014000

0801251c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801251c:	b480      	push	{r7}
 801251e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8012520:	b672      	cpsid	i
}
 8012522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8012524:	bf00      	nop
 8012526:	e7fd      	b.n	8012524 <Error_Handler+0x8>

08012528 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 801252c:	4b17      	ldr	r3, [pc, #92]	@ (801258c <MX_SPI1_Init+0x64>)
 801252e:	4a18      	ldr	r2, [pc, #96]	@ (8012590 <MX_SPI1_Init+0x68>)
 8012530:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8012532:	4b16      	ldr	r3, [pc, #88]	@ (801258c <MX_SPI1_Init+0x64>)
 8012534:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8012538:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801253a:	4b14      	ldr	r3, [pc, #80]	@ (801258c <MX_SPI1_Init+0x64>)
 801253c:	2200      	movs	r2, #0
 801253e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012540:	4b12      	ldr	r3, [pc, #72]	@ (801258c <MX_SPI1_Init+0x64>)
 8012542:	2200      	movs	r2, #0
 8012544:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012546:	4b11      	ldr	r3, [pc, #68]	@ (801258c <MX_SPI1_Init+0x64>)
 8012548:	2200      	movs	r2, #0
 801254a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801254c:	4b0f      	ldr	r3, [pc, #60]	@ (801258c <MX_SPI1_Init+0x64>)
 801254e:	2200      	movs	r2, #0
 8012550:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8012552:	4b0e      	ldr	r3, [pc, #56]	@ (801258c <MX_SPI1_Init+0x64>)
 8012554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012558:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 801255a:	4b0c      	ldr	r3, [pc, #48]	@ (801258c <MX_SPI1_Init+0x64>)
 801255c:	2208      	movs	r2, #8
 801255e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012560:	4b0a      	ldr	r3, [pc, #40]	@ (801258c <MX_SPI1_Init+0x64>)
 8012562:	2200      	movs	r2, #0
 8012564:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012566:	4b09      	ldr	r3, [pc, #36]	@ (801258c <MX_SPI1_Init+0x64>)
 8012568:	2200      	movs	r2, #0
 801256a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801256c:	4b07      	ldr	r3, [pc, #28]	@ (801258c <MX_SPI1_Init+0x64>)
 801256e:	2200      	movs	r2, #0
 8012570:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8012572:	4b06      	ldr	r3, [pc, #24]	@ (801258c <MX_SPI1_Init+0x64>)
 8012574:	220a      	movs	r2, #10
 8012576:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8012578:	4804      	ldr	r0, [pc, #16]	@ (801258c <MX_SPI1_Init+0x64>)
 801257a:	f005 fb23 	bl	8017bc4 <HAL_SPI_Init>
 801257e:	4603      	mov	r3, r0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d001      	beq.n	8012588 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8012584:	f7ff ffca 	bl	801251c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8012588:	bf00      	nop
 801258a:	bd80      	pop	{r7, pc}
 801258c:	20000a84 	.word	0x20000a84
 8012590:	40013000 	.word	0x40013000

08012594 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8012598:	4b17      	ldr	r3, [pc, #92]	@ (80125f8 <MX_SPI2_Init+0x64>)
 801259a:	4a18      	ldr	r2, [pc, #96]	@ (80125fc <MX_SPI2_Init+0x68>)
 801259c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801259e:	4b16      	ldr	r3, [pc, #88]	@ (80125f8 <MX_SPI2_Init+0x64>)
 80125a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80125a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80125a6:	4b14      	ldr	r3, [pc, #80]	@ (80125f8 <MX_SPI2_Init+0x64>)
 80125a8:	2200      	movs	r2, #0
 80125aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80125ac:	4b12      	ldr	r3, [pc, #72]	@ (80125f8 <MX_SPI2_Init+0x64>)
 80125ae:	2200      	movs	r2, #0
 80125b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80125b2:	4b11      	ldr	r3, [pc, #68]	@ (80125f8 <MX_SPI2_Init+0x64>)
 80125b4:	2200      	movs	r2, #0
 80125b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80125b8:	4b0f      	ldr	r3, [pc, #60]	@ (80125f8 <MX_SPI2_Init+0x64>)
 80125ba:	2200      	movs	r2, #0
 80125bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80125be:	4b0e      	ldr	r3, [pc, #56]	@ (80125f8 <MX_SPI2_Init+0x64>)
 80125c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80125c6:	4b0c      	ldr	r3, [pc, #48]	@ (80125f8 <MX_SPI2_Init+0x64>)
 80125c8:	2210      	movs	r2, #16
 80125ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80125cc:	4b0a      	ldr	r3, [pc, #40]	@ (80125f8 <MX_SPI2_Init+0x64>)
 80125ce:	2200      	movs	r2, #0
 80125d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80125d2:	4b09      	ldr	r3, [pc, #36]	@ (80125f8 <MX_SPI2_Init+0x64>)
 80125d4:	2200      	movs	r2, #0
 80125d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80125d8:	4b07      	ldr	r3, [pc, #28]	@ (80125f8 <MX_SPI2_Init+0x64>)
 80125da:	2200      	movs	r2, #0
 80125dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80125de:	4b06      	ldr	r3, [pc, #24]	@ (80125f8 <MX_SPI2_Init+0x64>)
 80125e0:	220a      	movs	r2, #10
 80125e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80125e4:	4804      	ldr	r0, [pc, #16]	@ (80125f8 <MX_SPI2_Init+0x64>)
 80125e6:	f005 faed 	bl	8017bc4 <HAL_SPI_Init>
 80125ea:	4603      	mov	r3, r0
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d001      	beq.n	80125f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80125f0:	f7ff ff94 	bl	801251c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80125f4:	bf00      	nop
 80125f6:	bd80      	pop	{r7, pc}
 80125f8:	20000adc 	.word	0x20000adc
 80125fc:	40003800 	.word	0x40003800

08012600 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b08c      	sub	sp, #48	@ 0x30
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012608:	f107 031c 	add.w	r3, r7, #28
 801260c:	2200      	movs	r2, #0
 801260e:	601a      	str	r2, [r3, #0]
 8012610:	605a      	str	r2, [r3, #4]
 8012612:	609a      	str	r2, [r3, #8]
 8012614:	60da      	str	r2, [r3, #12]
 8012616:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	4a32      	ldr	r2, [pc, #200]	@ (80126e8 <HAL_SPI_MspInit+0xe8>)
 801261e:	4293      	cmp	r3, r2
 8012620:	d12c      	bne.n	801267c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012622:	2300      	movs	r3, #0
 8012624:	61bb      	str	r3, [r7, #24]
 8012626:	4b31      	ldr	r3, [pc, #196]	@ (80126ec <HAL_SPI_MspInit+0xec>)
 8012628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801262a:	4a30      	ldr	r2, [pc, #192]	@ (80126ec <HAL_SPI_MspInit+0xec>)
 801262c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8012630:	6453      	str	r3, [r2, #68]	@ 0x44
 8012632:	4b2e      	ldr	r3, [pc, #184]	@ (80126ec <HAL_SPI_MspInit+0xec>)
 8012634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801263a:	61bb      	str	r3, [r7, #24]
 801263c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801263e:	2300      	movs	r3, #0
 8012640:	617b      	str	r3, [r7, #20]
 8012642:	4b2a      	ldr	r3, [pc, #168]	@ (80126ec <HAL_SPI_MspInit+0xec>)
 8012644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012646:	4a29      	ldr	r2, [pc, #164]	@ (80126ec <HAL_SPI_MspInit+0xec>)
 8012648:	f043 0302 	orr.w	r3, r3, #2
 801264c:	6313      	str	r3, [r2, #48]	@ 0x30
 801264e:	4b27      	ldr	r3, [pc, #156]	@ (80126ec <HAL_SPI_MspInit+0xec>)
 8012650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012652:	f003 0302 	and.w	r3, r3, #2
 8012656:	617b      	str	r3, [r7, #20]
 8012658:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 801265a:	2338      	movs	r3, #56	@ 0x38
 801265c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801265e:	2302      	movs	r3, #2
 8012660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012662:	2300      	movs	r3, #0
 8012664:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012666:	2303      	movs	r3, #3
 8012668:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801266a:	2305      	movs	r3, #5
 801266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801266e:	f107 031c 	add.w	r3, r7, #28
 8012672:	4619      	mov	r1, r3
 8012674:	481e      	ldr	r0, [pc, #120]	@ (80126f0 <HAL_SPI_MspInit+0xf0>)
 8012676:	f003 fd45 	bl	8016104 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 801267a:	e031      	b.n	80126e0 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	4a1c      	ldr	r2, [pc, #112]	@ (80126f4 <HAL_SPI_MspInit+0xf4>)
 8012682:	4293      	cmp	r3, r2
 8012684:	d12c      	bne.n	80126e0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8012686:	2300      	movs	r3, #0
 8012688:	613b      	str	r3, [r7, #16]
 801268a:	4b18      	ldr	r3, [pc, #96]	@ (80126ec <HAL_SPI_MspInit+0xec>)
 801268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801268e:	4a17      	ldr	r2, [pc, #92]	@ (80126ec <HAL_SPI_MspInit+0xec>)
 8012690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8012694:	6413      	str	r3, [r2, #64]	@ 0x40
 8012696:	4b15      	ldr	r3, [pc, #84]	@ (80126ec <HAL_SPI_MspInit+0xec>)
 8012698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801269a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801269e:	613b      	str	r3, [r7, #16]
 80126a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80126a2:	2300      	movs	r3, #0
 80126a4:	60fb      	str	r3, [r7, #12]
 80126a6:	4b11      	ldr	r3, [pc, #68]	@ (80126ec <HAL_SPI_MspInit+0xec>)
 80126a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126aa:	4a10      	ldr	r2, [pc, #64]	@ (80126ec <HAL_SPI_MspInit+0xec>)
 80126ac:	f043 0302 	orr.w	r3, r3, #2
 80126b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80126b2:	4b0e      	ldr	r3, [pc, #56]	@ (80126ec <HAL_SPI_MspInit+0xec>)
 80126b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126b6:	f003 0302 	and.w	r3, r3, #2
 80126ba:	60fb      	str	r3, [r7, #12]
 80126bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80126be:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80126c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80126c4:	2302      	movs	r3, #2
 80126c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80126c8:	2300      	movs	r3, #0
 80126ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80126cc:	2302      	movs	r3, #2
 80126ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80126d0:	2305      	movs	r3, #5
 80126d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80126d4:	f107 031c 	add.w	r3, r7, #28
 80126d8:	4619      	mov	r1, r3
 80126da:	4805      	ldr	r0, [pc, #20]	@ (80126f0 <HAL_SPI_MspInit+0xf0>)
 80126dc:	f003 fd12 	bl	8016104 <HAL_GPIO_Init>
}
 80126e0:	bf00      	nop
 80126e2:	3730      	adds	r7, #48	@ 0x30
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	40013000 	.word	0x40013000
 80126ec:	40023800 	.word	0x40023800
 80126f0:	40020400 	.word	0x40020400
 80126f4:	40003800 	.word	0x40003800

080126f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b082      	sub	sp, #8
 80126fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80126fe:	2300      	movs	r3, #0
 8012700:	607b      	str	r3, [r7, #4]
 8012702:	4b12      	ldr	r3, [pc, #72]	@ (801274c <HAL_MspInit+0x54>)
 8012704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012706:	4a11      	ldr	r2, [pc, #68]	@ (801274c <HAL_MspInit+0x54>)
 8012708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801270c:	6453      	str	r3, [r2, #68]	@ 0x44
 801270e:	4b0f      	ldr	r3, [pc, #60]	@ (801274c <HAL_MspInit+0x54>)
 8012710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012716:	607b      	str	r3, [r7, #4]
 8012718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801271a:	2300      	movs	r3, #0
 801271c:	603b      	str	r3, [r7, #0]
 801271e:	4b0b      	ldr	r3, [pc, #44]	@ (801274c <HAL_MspInit+0x54>)
 8012720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012722:	4a0a      	ldr	r2, [pc, #40]	@ (801274c <HAL_MspInit+0x54>)
 8012724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012728:	6413      	str	r3, [r2, #64]	@ 0x40
 801272a:	4b08      	ldr	r3, [pc, #32]	@ (801274c <HAL_MspInit+0x54>)
 801272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801272e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012732:	603b      	str	r3, [r7, #0]
 8012734:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8012736:	2200      	movs	r2, #0
 8012738:	210f      	movs	r1, #15
 801273a:	f06f 0001 	mvn.w	r0, #1
 801273e:	f003 fcb2 	bl	80160a6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012742:	bf00      	nop
 8012744:	3708      	adds	r7, #8
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	40023800 	.word	0x40023800

08012750 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b08c      	sub	sp, #48	@ 0x30
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8012758:	2300      	movs	r3, #0
 801275a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 801275c:	2300      	movs	r3, #0
 801275e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8012760:	2300      	movs	r3, #0
 8012762:	60bb      	str	r3, [r7, #8]
 8012764:	4b2e      	ldr	r3, [pc, #184]	@ (8012820 <HAL_InitTick+0xd0>)
 8012766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012768:	4a2d      	ldr	r2, [pc, #180]	@ (8012820 <HAL_InitTick+0xd0>)
 801276a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801276e:	6453      	str	r3, [r2, #68]	@ 0x44
 8012770:	4b2b      	ldr	r3, [pc, #172]	@ (8012820 <HAL_InitTick+0xd0>)
 8012772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012778:	60bb      	str	r3, [r7, #8]
 801277a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801277c:	f107 020c 	add.w	r2, r7, #12
 8012780:	f107 0310 	add.w	r3, r7, #16
 8012784:	4611      	mov	r1, r2
 8012786:	4618      	mov	r0, r3
 8012788:	f005 f9ea 	bl	8017b60 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 801278c:	f005 f9d4 	bl	8017b38 <HAL_RCC_GetPCLK2Freq>
 8012790:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012794:	4a23      	ldr	r2, [pc, #140]	@ (8012824 <HAL_InitTick+0xd4>)
 8012796:	fba2 2303 	umull	r2, r3, r2, r3
 801279a:	0c9b      	lsrs	r3, r3, #18
 801279c:	3b01      	subs	r3, #1
 801279e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80127a0:	4b21      	ldr	r3, [pc, #132]	@ (8012828 <HAL_InitTick+0xd8>)
 80127a2:	4a22      	ldr	r2, [pc, #136]	@ (801282c <HAL_InitTick+0xdc>)
 80127a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80127a6:	4b20      	ldr	r3, [pc, #128]	@ (8012828 <HAL_InitTick+0xd8>)
 80127a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80127ac:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80127ae:	4a1e      	ldr	r2, [pc, #120]	@ (8012828 <HAL_InitTick+0xd8>)
 80127b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127b2:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 80127b4:	4b1c      	ldr	r3, [pc, #112]	@ (8012828 <HAL_InitTick+0xd8>)
 80127b6:	2200      	movs	r2, #0
 80127b8:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80127ba:	4b1b      	ldr	r3, [pc, #108]	@ (8012828 <HAL_InitTick+0xd8>)
 80127bc:	2200      	movs	r2, #0
 80127be:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80127c0:	4b19      	ldr	r3, [pc, #100]	@ (8012828 <HAL_InitTick+0xd8>)
 80127c2:	2200      	movs	r2, #0
 80127c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80127c6:	4818      	ldr	r0, [pc, #96]	@ (8012828 <HAL_InitTick+0xd8>)
 80127c8:	f005 ffce 	bl	8018768 <HAL_TIM_Base_Init>
 80127cc:	4603      	mov	r3, r0
 80127ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80127d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d11b      	bne.n	8012812 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 80127da:	4813      	ldr	r0, [pc, #76]	@ (8012828 <HAL_InitTick+0xd8>)
 80127dc:	f006 f81e 	bl	801881c <HAL_TIM_Base_Start_IT>
 80127e0:	4603      	mov	r3, r0
 80127e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80127e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d111      	bne.n	8012812 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80127ee:	2018      	movs	r0, #24
 80127f0:	f003 fc75 	bl	80160de <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2b0f      	cmp	r3, #15
 80127f8:	d808      	bhi.n	801280c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80127fa:	2200      	movs	r2, #0
 80127fc:	6879      	ldr	r1, [r7, #4]
 80127fe:	2018      	movs	r0, #24
 8012800:	f003 fc51 	bl	80160a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012804:	4a0a      	ldr	r2, [pc, #40]	@ (8012830 <HAL_InitTick+0xe0>)
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6013      	str	r3, [r2, #0]
 801280a:	e002      	b.n	8012812 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 801280c:	2301      	movs	r3, #1
 801280e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8012812:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012816:	4618      	mov	r0, r3
 8012818:	3730      	adds	r7, #48	@ 0x30
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}
 801281e:	bf00      	nop
 8012820:	40023800 	.word	0x40023800
 8012824:	431bde83 	.word	0x431bde83
 8012828:	20000b34 	.word	0x20000b34
 801282c:	40014000 	.word	0x40014000
 8012830:	20000084 	.word	0x20000084

08012834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012834:	b480      	push	{r7}
 8012836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012838:	bf00      	nop
 801283a:	e7fd      	b.n	8012838 <NMI_Handler+0x4>

0801283c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801283c:	b480      	push	{r7}
 801283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012840:	bf00      	nop
 8012842:	e7fd      	b.n	8012840 <HardFault_Handler+0x4>

08012844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012844:	b480      	push	{r7}
 8012846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012848:	bf00      	nop
 801284a:	e7fd      	b.n	8012848 <MemManage_Handler+0x4>

0801284c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801284c:	b480      	push	{r7}
 801284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012850:	bf00      	nop
 8012852:	e7fd      	b.n	8012850 <BusFault_Handler+0x4>

08012854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012854:	b480      	push	{r7}
 8012856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012858:	bf00      	nop
 801285a:	e7fd      	b.n	8012858 <UsageFault_Handler+0x4>

0801285c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801285c:	b480      	push	{r7}
 801285e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012860:	bf00      	nop
 8012862:	46bd      	mov	sp, r7
 8012864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012868:	4770      	bx	lr
	...

0801286c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8012870:	4802      	ldr	r0, [pc, #8]	@ (801287c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8012872:	f006 f835 	bl	80188e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8012876:	bf00      	nop
 8012878:	bd80      	pop	{r7, pc}
 801287a:	bf00      	nop
 801287c:	20000b34 	.word	0x20000b34

08012880 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012880:	b480      	push	{r7}
 8012882:	af00      	add	r7, sp, #0
  return 1;
 8012884:	2301      	movs	r3, #1
}
 8012886:	4618      	mov	r0, r3
 8012888:	46bd      	mov	sp, r7
 801288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288e:	4770      	bx	lr

08012890 <_kill>:

int _kill(int pid, int sig)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801289a:	f024 fe25 	bl	80374e8 <__errno>
 801289e:	4603      	mov	r3, r0
 80128a0:	2216      	movs	r2, #22
 80128a2:	601a      	str	r2, [r3, #0]
  return -1;
 80128a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3708      	adds	r7, #8
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}

080128b0 <_exit>:

void _exit (int status)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b082      	sub	sp, #8
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80128b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f7ff ffe7 	bl	8012890 <_kill>
  while (1) {}    /* Make sure we hang here */
 80128c2:	bf00      	nop
 80128c4:	e7fd      	b.n	80128c2 <_exit+0x12>

080128c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80128c6:	b580      	push	{r7, lr}
 80128c8:	b086      	sub	sp, #24
 80128ca:	af00      	add	r7, sp, #0
 80128cc:	60f8      	str	r0, [r7, #12]
 80128ce:	60b9      	str	r1, [r7, #8]
 80128d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80128d2:	2300      	movs	r3, #0
 80128d4:	617b      	str	r3, [r7, #20]
 80128d6:	e00a      	b.n	80128ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80128d8:	f3af 8000 	nop.w
 80128dc:	4601      	mov	r1, r0
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	1c5a      	adds	r2, r3, #1
 80128e2:	60ba      	str	r2, [r7, #8]
 80128e4:	b2ca      	uxtb	r2, r1
 80128e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	3301      	adds	r3, #1
 80128ec:	617b      	str	r3, [r7, #20]
 80128ee:	697a      	ldr	r2, [r7, #20]
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	429a      	cmp	r2, r3
 80128f4:	dbf0      	blt.n	80128d8 <_read+0x12>
  }

  return len;
 80128f6:	687b      	ldr	r3, [r7, #4]
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3718      	adds	r7, #24
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b086      	sub	sp, #24
 8012904:	af00      	add	r7, sp, #0
 8012906:	60f8      	str	r0, [r7, #12]
 8012908:	60b9      	str	r1, [r7, #8]
 801290a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801290c:	2300      	movs	r3, #0
 801290e:	617b      	str	r3, [r7, #20]
 8012910:	e009      	b.n	8012926 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	1c5a      	adds	r2, r3, #1
 8012916:	60ba      	str	r2, [r7, #8]
 8012918:	781b      	ldrb	r3, [r3, #0]
 801291a:	4618      	mov	r0, r3
 801291c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012920:	697b      	ldr	r3, [r7, #20]
 8012922:	3301      	adds	r3, #1
 8012924:	617b      	str	r3, [r7, #20]
 8012926:	697a      	ldr	r2, [r7, #20]
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	429a      	cmp	r2, r3
 801292c:	dbf1      	blt.n	8012912 <_write+0x12>
  }
  return len;
 801292e:	687b      	ldr	r3, [r7, #4]
}
 8012930:	4618      	mov	r0, r3
 8012932:	3718      	adds	r7, #24
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <_close>:

int _close(int file)
{
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8012944:	4618      	mov	r0, r3
 8012946:	370c      	adds	r7, #12
 8012948:	46bd      	mov	sp, r7
 801294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294e:	4770      	bx	lr

08012950 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012950:	b480      	push	{r7}
 8012952:	b083      	sub	sp, #12
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8012960:	605a      	str	r2, [r3, #4]
  return 0;
 8012962:	2300      	movs	r3, #0
}
 8012964:	4618      	mov	r0, r3
 8012966:	370c      	adds	r7, #12
 8012968:	46bd      	mov	sp, r7
 801296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296e:	4770      	bx	lr

08012970 <_isatty>:

int _isatty(int file)
{
 8012970:	b480      	push	{r7}
 8012972:	b083      	sub	sp, #12
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012978:	2301      	movs	r3, #1
}
 801297a:	4618      	mov	r0, r3
 801297c:	370c      	adds	r7, #12
 801297e:	46bd      	mov	sp, r7
 8012980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012984:	4770      	bx	lr

08012986 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012986:	b480      	push	{r7}
 8012988:	b085      	sub	sp, #20
 801298a:	af00      	add	r7, sp, #0
 801298c:	60f8      	str	r0, [r7, #12]
 801298e:	60b9      	str	r1, [r7, #8]
 8012990:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012992:	2300      	movs	r3, #0
}
 8012994:	4618      	mov	r0, r3
 8012996:	3714      	adds	r7, #20
 8012998:	46bd      	mov	sp, r7
 801299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299e:	4770      	bx	lr

080129a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b086      	sub	sp, #24
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80129a8:	4a14      	ldr	r2, [pc, #80]	@ (80129fc <_sbrk+0x5c>)
 80129aa:	4b15      	ldr	r3, [pc, #84]	@ (8012a00 <_sbrk+0x60>)
 80129ac:	1ad3      	subs	r3, r2, r3
 80129ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80129b4:	4b13      	ldr	r3, [pc, #76]	@ (8012a04 <_sbrk+0x64>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d102      	bne.n	80129c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80129bc:	4b11      	ldr	r3, [pc, #68]	@ (8012a04 <_sbrk+0x64>)
 80129be:	4a12      	ldr	r2, [pc, #72]	@ (8012a08 <_sbrk+0x68>)
 80129c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80129c2:	4b10      	ldr	r3, [pc, #64]	@ (8012a04 <_sbrk+0x64>)
 80129c4:	681a      	ldr	r2, [r3, #0]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	4413      	add	r3, r2
 80129ca:	693a      	ldr	r2, [r7, #16]
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d207      	bcs.n	80129e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80129d0:	f024 fd8a 	bl	80374e8 <__errno>
 80129d4:	4603      	mov	r3, r0
 80129d6:	220c      	movs	r2, #12
 80129d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80129da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80129de:	e009      	b.n	80129f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80129e0:	4b08      	ldr	r3, [pc, #32]	@ (8012a04 <_sbrk+0x64>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80129e6:	4b07      	ldr	r3, [pc, #28]	@ (8012a04 <_sbrk+0x64>)
 80129e8:	681a      	ldr	r2, [r3, #0]
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	4413      	add	r3, r2
 80129ee:	4a05      	ldr	r2, [pc, #20]	@ (8012a04 <_sbrk+0x64>)
 80129f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80129f2:	68fb      	ldr	r3, [r7, #12]
}
 80129f4:	4618      	mov	r0, r3
 80129f6:	3718      	adds	r7, #24
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	20020000 	.word	0x20020000
 8012a00:	00000800 	.word	0x00000800
 8012a04:	20000b80 	.word	0x20000b80
 8012a08:	20018518 	.word	0x20018518

08012a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012a10:	4b06      	ldr	r3, [pc, #24]	@ (8012a2c <SystemInit+0x20>)
 8012a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012a16:	4a05      	ldr	r2, [pc, #20]	@ (8012a2c <SystemInit+0x20>)
 8012a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012a20:	bf00      	nop
 8012a22:	46bd      	mov	sp, r7
 8012a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a28:	4770      	bx	lr
 8012a2a:	bf00      	nop
 8012a2c:	e000ed00 	.word	0xe000ed00

08012a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8012a30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012a68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8012a34:	f7ff ffea 	bl	8012a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012a38:	480c      	ldr	r0, [pc, #48]	@ (8012a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012a3a:	490d      	ldr	r1, [pc, #52]	@ (8012a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8012a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012a40:	e002      	b.n	8012a48 <LoopCopyDataInit>

08012a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012a46:	3304      	adds	r3, #4

08012a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012a4c:	d3f9      	bcc.n	8012a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8012a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012a50:	4c0a      	ldr	r4, [pc, #40]	@ (8012a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8012a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012a54:	e001      	b.n	8012a5a <LoopFillZerobss>

08012a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012a58:	3204      	adds	r2, #4

08012a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012a5c:	d3fb      	bcc.n	8012a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012a5e:	f024 fd51 	bl	8037504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012a62:	f7ff fcb3 	bl	80123cc <main>
  bx  lr    
 8012a66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8012a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8012a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012a70:	200009d8 	.word	0x200009d8
  ldr r2, =_sidata
 8012a74:	08045444 	.word	0x08045444
  ldr r2, =_sbss
 8012a78:	200009d8 	.word	0x200009d8
  ldr r4, =_ebss
 8012a7c:	20018514 	.word	0x20018514

08012a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012a80:	e7fe      	b.n	8012a80 <ADC_IRQHandler>

08012a82 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8012a82:	b580      	push	{r7, lr}
 8012a84:	b084      	sub	sp, #16
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	6078      	str	r0, [r7, #4]
 8012a8a:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	683a      	ldr	r2, [r7, #0]
 8012a90:	fb02 f303 	mul.w	r3, r2, r3
 8012a94:	4618      	mov	r0, r3
 8012a96:	f009 ff11 	bl	801c8bc <pvPortMalloc>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d008      	beq.n	8012ab6 <mg_calloc+0x34>
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	687a      	ldr	r2, [r7, #4]
 8012aa8:	fb02 f303 	mul.w	r3, r2, r3
 8012aac:	461a      	mov	r2, r3
 8012aae:	2100      	movs	r1, #0
 8012ab0:	68f8      	ldr	r0, [r7, #12]
 8012ab2:	f023 fb15 	bl	80360e0 <memset>
  return p;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3710      	adds	r7, #16
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <handle_ram_status_get>:

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;



static void handle_ram_status_get(struct mg_connection *c){
 8012ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ac2:	b093      	sub	sp, #76	@ 0x4c
 8012ac4:	af08      	add	r7, sp, #32
 8012ac6:	6078      	str	r0, [r7, #4]
	HeapStats_t heap_status;
	vPortGetHeapStats(&heap_status);
 8012ac8:	f107 030c 	add.w	r3, r7, #12
 8012acc:	4618      	mov	r0, r3
 8012ace:	f00a f8e5 	bl	801cc9c <vPortGetHeapStats>

	logging(1, "Start execute API RAM status");
 8012ad2:	490e      	ldr	r1, [pc, #56]	@ (8012b0c <handle_ram_status_get+0x4c>)
 8012ad4:	2001      	movs	r0, #1
 8012ad6:	f7ff fb4b 	bl	8012170 <logging>
                  "\"xNumberOfFreeBlocks\": \"%u\","
                  "\"xMinimumEverFreeBytesRemaining\": \"%u\","
                  "\"xNumberOfSuccessfulAllocations\": \"%u\","
                  "\"xNumberOfSuccessfulFrees\": \"%u\""
                  "}\r\n",
                  (unsigned int)heap_status.xAvailableHeapSpaceInBytes,
 8012ada:	68fb      	ldr	r3, [r7, #12]
                  (unsigned int)heap_status.xSizeOfLargestFreeBlockInBytes,
 8012adc:	693a      	ldr	r2, [r7, #16]
                  (unsigned int)heap_status.xSizeOfSmallestFreeBlockInBytes,
 8012ade:	6979      	ldr	r1, [r7, #20]
                  (unsigned int)heap_status.xNumberOfFreeBlocks,
 8012ae0:	69b8      	ldr	r0, [r7, #24]
                  (unsigned int)heap_status.xMinimumEverFreeBytesRemaining,
 8012ae2:	69fc      	ldr	r4, [r7, #28]
                  (unsigned int)heap_status.xNumberOfSuccessfulAllocations,
 8012ae4:	6a3d      	ldr	r5, [r7, #32]
                  (unsigned int)heap_status.xNumberOfSuccessfulFrees);
 8012ae6:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 8012ae8:	9606      	str	r6, [sp, #24]
 8012aea:	9505      	str	r5, [sp, #20]
 8012aec:	9404      	str	r4, [sp, #16]
 8012aee:	9003      	str	r0, [sp, #12]
 8012af0:	9102      	str	r1, [sp, #8]
 8012af2:	9201      	str	r2, [sp, #4]
 8012af4:	9300      	str	r3, [sp, #0]
 8012af6:	4b06      	ldr	r3, [pc, #24]	@ (8012b10 <handle_ram_status_get+0x50>)
 8012af8:	4a06      	ldr	r2, [pc, #24]	@ (8012b14 <handle_ram_status_get+0x54>)
 8012afa:	21c8      	movs	r1, #200	@ 0xc8
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f015 fd3d 	bl	802857c <mg_http_reply>
}
 8012b02:	bf00      	nop
 8012b04:	372c      	adds	r7, #44	@ 0x2c
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	0803f714 	.word	0x0803f714
 8012b10:	0803f734 	.word	0x0803f734
 8012b14:	0803f838 	.word	0x0803f838

08012b18 <calc_file_md5sum>:

static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b0a0      	sub	sp, #128	@ 0x80
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	6039      	str	r1, [r7, #0]
	uint32_t md5_str_size = 33; // 32 символа для MD5 + 1 символ для '\0'
 8012b22:	2321      	movs	r3, #33	@ 0x21
 8012b24:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint16_t  buff_len = 1024;
 8012b26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012b2a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	uint8_t	  digest_len = 16;
 8012b2e:	2310      	movs	r3, #16
 8012b30:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	char * buff = calloc(buff_len, 1);
 8012b34:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8012b38:	2101      	movs	r1, #1
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7ff ffa1 	bl	8012a82 <mg_calloc>
 8012b40:	6738      	str	r0, [r7, #112]	@ 0x70
	if (buff == NULL){
 8012b42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d105      	bne.n	8012b54 <calc_file_md5sum+0x3c>
		free(buff);
 8012b48:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8012b4a:	f009 ff85 	bl	801ca58 <vPortFree>
		return -1;
 8012b4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012b52:	e067      	b.n	8012c24 <calc_file_md5sum+0x10c>
	}


	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8012b54:	2201      	movs	r2, #1
 8012b56:	6879      	ldr	r1, [r7, #4]
 8012b58:	4834      	ldr	r0, [pc, #208]	@ (8012c2c <calc_file_md5sum+0x114>)
 8012b5a:	f014 f9a7 	bl	8026eac <mg_fs_open>
 8012b5e:	66f8      	str	r0, [r7, #108]	@ 0x6c
	if (fd==NULL){
 8012b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d108      	bne.n	8012b78 <calc_file_md5sum+0x60>
		mg_fs_close(fd);
 8012b66:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012b68:	f014 f9c7 	bl	8026efa <mg_fs_close>
		free(buff);
 8012b6c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8012b6e:	f009 ff73 	bl	801ca58 <vPortFree>
		return -2;
 8012b72:	f06f 0301 	mvn.w	r3, #1
 8012b76:	e055      	b.n	8012c24 <calc_file_md5sum+0x10c>
		}


	mg_md5_ctx md5_ctx;
	mg_md5_init(&md5_ctx);
 8012b78:	f107 030c 	add.w	r3, r7, #12
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f018 fe0f 	bl	802b7a0 <mg_md5_init>
	size_t bytes_read;
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8012b82:	e006      	b.n	8012b92 <calc_file_md5sum+0x7a>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8012b84:	f107 030c 	add.w	r3, r7, #12
 8012b88:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012b8a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f019 fcb3 	bl	802c4f8 <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8012b92:	4b26      	ldr	r3, [pc, #152]	@ (8012c2c <calc_file_md5sum+0x114>)
 8012b94:	691b      	ldr	r3, [r3, #16]
 8012b96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012b98:	6810      	ldr	r0, [r2, #0]
 8012b9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012b9e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8012ba0:	4798      	blx	r3
 8012ba2:	66b8      	str	r0, [r7, #104]	@ 0x68
 8012ba4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d1ec      	bne.n	8012b84 <calc_file_md5sum+0x6c>
	}

	mg_fs_close(fd);
 8012baa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012bac:	f014 f9a5 	bl	8026efa <mg_fs_close>

	uint8_t * digest = calloc(digest_len, 1);
 8012bb0:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8012bb4:	2101      	movs	r1, #1
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7ff ff63 	bl	8012a82 <mg_calloc>
 8012bbc:	6678      	str	r0, [r7, #100]	@ 0x64
	if (digest == NULL){
 8012bbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d108      	bne.n	8012bd6 <calc_file_md5sum+0xbe>
		free(buff);
 8012bc4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8012bc6:	f009 ff47 	bl	801ca58 <vPortFree>
		free(digest);
 8012bca:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8012bcc:	f009 ff44 	bl	801ca58 <vPortFree>
		return -1;
 8012bd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012bd4:	e026      	b.n	8012c24 <calc_file_md5sum+0x10c>
	}

	mg_md5_final(&md5_ctx, digest);
 8012bd6:	f107 030c 	add.w	r3, r7, #12
 8012bda:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f019 fd09 	bl	802c5f4 <mg_md5_final>
	// Преобразование контрольной суммы в строку
	for (int i = 0; i < 16; ++i) {
 8012be2:	2300      	movs	r3, #0
 8012be4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012be6:	e013      	b.n	8012c10 <calc_file_md5sum+0xf8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 8012be8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012bea:	005b      	lsls	r3, r3, #1
 8012bec:	461a      	mov	r2, r3
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	1898      	adds	r0, r3, r2
 8012bf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012bf4:	005b      	lsls	r3, r3, #1
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012bfa:	1a99      	subs	r1, r3, r2
 8012bfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012bfe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012c00:	4413      	add	r3, r2
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	4a0a      	ldr	r2, [pc, #40]	@ (8012c30 <calc_file_md5sum+0x118>)
 8012c06:	f022 fd41 	bl	803568c <snprintf>
	for (int i = 0; i < 16; ++i) {
 8012c0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012c10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012c12:	2b0f      	cmp	r3, #15
 8012c14:	dde8      	ble.n	8012be8 <calc_file_md5sum+0xd0>
	}

	free(buff);
 8012c16:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8012c18:	f009 ff1e 	bl	801ca58 <vPortFree>
	free(digest);
 8012c1c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8012c1e:	f009 ff1b 	bl	801ca58 <vPortFree>

	return 0;
 8012c22:	2300      	movs	r3, #0
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3780      	adds	r7, #128	@ 0x80
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}
 8012c2c:	2000001c 	.word	0x2000001c
 8012c30:	0803f87c 	.word	0x0803f87c

08012c34 <handle_io_status_get>:

static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8012c34:	b5b0      	push	{r4, r5, r7, lr}
 8012c36:	b094      	sub	sp, #80	@ 0x50
 8012c38:	af06      	add	r7, sp, #24
 8012c3a:	6078      	str	r0, [r7, #4]
 8012c3c:	6039      	str	r1, [r7, #0]


	//Processing GET request
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012c42:	4960      	ldr	r1, [pc, #384]	@ (8012dc4 <handle_io_status_get+0x190>)
 8012c44:	4618      	mov	r0, r3
 8012c46:	f01f f945 	bl	8031ed4 <mg_str_s>
 8012c4a:	6839      	ldr	r1, [r7, #0]
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	9300      	str	r3, [sp, #0]
 8012c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012c54:	cb0c      	ldmia	r3, {r2, r3}
 8012c56:	c903      	ldmia	r1, {r0, r1}
 8012c58:	f01f fa0f 	bl	803207a <mg_match>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d023      	beq.n	8012caa <handle_io_status_get+0x76>
		struct DeviceStatus status;

		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 8012c62:	4b59      	ldr	r3, [pc, #356]	@ (8012dc8 <handle_io_status_get+0x194>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f107 001c 	add.w	r0, r7, #28
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	2101      	movs	r1, #1
 8012c6e:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 8012c70:	4b55      	ldr	r3, [pc, #340]	@ (8012dc8 <handle_io_status_get+0x194>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	f107 021c 	add.w	r2, r7, #28
 8012c78:	1cd0      	adds	r0, r2, #3
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	2102      	movs	r1, #2
 8012c7e:	4798      	blx	r3
		mg_http_reply(c, 200, headers, //TODO delete for release,
						"{"
						"\"inputs\": [%d, %d, %d], \"outputs\": [%d, %d, %d]"
						"}\r\n",
						status.inputs[0], status.inputs[1], status.inputs[2],
 8012c80:	7f3b      	ldrb	r3, [r7, #28]
 8012c82:	7f7a      	ldrb	r2, [r7, #29]
 8012c84:	7fb9      	ldrb	r1, [r7, #30]
						status.outputs[0], status.outputs[1], status.outputs[2]
 8012c86:	7ff8      	ldrb	r0, [r7, #31]
 8012c88:	f897 4020 	ldrb.w	r4, [r7, #32]
 8012c8c:	f897 5021 	ldrb.w	r5, [r7, #33]	@ 0x21
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8012c90:	9505      	str	r5, [sp, #20]
 8012c92:	9404      	str	r4, [sp, #16]
 8012c94:	9003      	str	r0, [sp, #12]
 8012c96:	9102      	str	r1, [sp, #8]
 8012c98:	9201      	str	r2, [sp, #4]
 8012c9a:	9300      	str	r3, [sp, #0]
 8012c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8012dcc <handle_io_status_get+0x198>)
 8012c9e:	4a4c      	ldr	r2, [pc, #304]	@ (8012dd0 <handle_io_status_get+0x19c>)
 8012ca0:	21c8      	movs	r1, #200	@ 0xc8
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f015 fc6a 	bl	802857c <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");

	}
}
 8012ca8:	e087      	b.n	8012dba <handle_io_status_get+0x186>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8012caa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012cae:	4949      	ldr	r1, [pc, #292]	@ (8012dd4 <handle_io_status_get+0x1a0>)
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f01f f90f 	bl	8031ed4 <mg_str_s>
 8012cb6:	6839      	ldr	r1, [r7, #0]
 8012cb8:	2300      	movs	r3, #0
 8012cba:	9300      	str	r3, [sp, #0]
 8012cbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012cc0:	cb0c      	ldmia	r3, {r2, r3}
 8012cc2:	c903      	ldmia	r1, {r0, r1}
 8012cc4:	f01f f9d9 	bl	803207a <mg_match>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d06d      	beq.n	8012daa <handle_io_status_get+0x176>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8012cce:	f107 0310 	add.w	r3, r7, #16
 8012cd2:	6839      	ldr	r1, [r7, #0]
 8012cd4:	4a40      	ldr	r2, [pc, #256]	@ (8012dd8 <handle_io_status_get+0x1a4>)
 8012cd6:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8012cda:	c903      	ldmia	r1, {r0, r1}
 8012cdc:	f018 fa68 	bl	802b1b0 <mg_json_get_num>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d059      	beq.n	8012d9a <handle_io_status_get+0x166>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 8012ce6:	f107 0308 	add.w	r3, r7, #8
 8012cea:	6839      	ldr	r1, [r7, #0]
 8012cec:	4a3b      	ldr	r2, [pc, #236]	@ (8012ddc <handle_io_status_get+0x1a8>)
 8012cee:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8012cf2:	c903      	ldmia	r1, {r0, r1}
 8012cf4:	f018 fa5c 	bl	802b1b0 <mg_json_get_num>
 8012cf8:	4603      	mov	r3, r0
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d04d      	beq.n	8012d9a <handle_io_status_get+0x166>
			relay_id = (uint8_t) tmp1;
 8012cfe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012d02:	4610      	mov	r0, r2
 8012d04:	4619      	mov	r1, r3
 8012d06:	f7fd ff67 	bl	8010bd8 <__aeabi_d2uiz>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			state = (uint8_t) tmp2;
 8012d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012d14:	4610      	mov	r0, r2
 8012d16:	4619      	mov	r1, r3
 8012d18:	f7fd ff5e 	bl	8010bd8 <__aeabi_d2uiz>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8012d22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d02f      	beq.n	8012d8a <handle_io_status_get+0x156>
 8012d2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012d2e:	2b03      	cmp	r3, #3
 8012d30:	d82b      	bhi.n	8012d8a <handle_io_status_get+0x156>
 8012d32:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d003      	beq.n	8012d42 <handle_io_status_get+0x10e>
 8012d3a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8012d3e:	2b01      	cmp	r3, #1
 8012d40:	d123      	bne.n	8012d8a <handle_io_status_get+0x156>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 8012d42:	4b21      	ldr	r3, [pc, #132]	@ (8012dc8 <handle_io_status_get+0x194>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f107 0018 	add.w	r0, r7, #24
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	2102      	movs	r1, #2
 8012d4e:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 8012d50:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012d54:	3b01      	subs	r3, #1
 8012d56:	3338      	adds	r3, #56	@ 0x38
 8012d58:	443b      	add	r3, r7
 8012d5a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8012d5e:	f803 2c20 	strb.w	r2, [r3, #-32]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 8012d62:	4b19      	ldr	r3, [pc, #100]	@ (8012dc8 <handle_io_status_get+0x194>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	f107 0018 	add.w	r0, r7, #24
 8012d6a:	2201      	movs	r2, #1
 8012d6c:	2102      	movs	r1, #2
 8012d6e:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 8012d70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012d74:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8012d78:	9201      	str	r2, [sp, #4]
 8012d7a:	9300      	str	r3, [sp, #0]
 8012d7c:	4b18      	ldr	r3, [pc, #96]	@ (8012de0 <handle_io_status_get+0x1ac>)
 8012d7e:	4a14      	ldr	r2, [pc, #80]	@ (8012dd0 <handle_io_status_get+0x19c>)
 8012d80:	21c8      	movs	r1, #200	@ 0xc8
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f015 fbfa 	bl	802857c <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8012d88:	e017      	b.n	8012dba <handle_io_status_get+0x186>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 8012d8a:	4b16      	ldr	r3, [pc, #88]	@ (8012de4 <handle_io_status_get+0x1b0>)
 8012d8c:	4a10      	ldr	r2, [pc, #64]	@ (8012dd0 <handle_io_status_get+0x19c>)
 8012d8e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f015 fbf2 	bl	802857c <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8012d98:	e00f      	b.n	8012dba <handle_io_status_get+0x186>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 8012d9a:	4b13      	ldr	r3, [pc, #76]	@ (8012de8 <handle_io_status_get+0x1b4>)
 8012d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8012dd0 <handle_io_status_get+0x19c>)
 8012d9e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f015 fbea 	bl	802857c <mg_http_reply>
}
 8012da8:	e007      	b.n	8012dba <handle_io_status_get+0x186>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012daa:	4b10      	ldr	r3, [pc, #64]	@ (8012dec <handle_io_status_get+0x1b8>)
 8012dac:	4a08      	ldr	r2, [pc, #32]	@ (8012dd0 <handle_io_status_get+0x19c>)
 8012dae:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f015 fbe2 	bl	802857c <mg_http_reply>
}
 8012db8:	e7ff      	b.n	8012dba <handle_io_status_get+0x186>
 8012dba:	bf00      	nop
 8012dbc:	3738      	adds	r7, #56	@ 0x38
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	0803f884 	.word	0x0803f884
 8012dc8:	20000b84 	.word	0x20000b84
 8012dcc:	0803f888 	.word	0x0803f888
 8012dd0:	0803f8bc 	.word	0x0803f8bc
 8012dd4:	0803f92c 	.word	0x0803f92c
 8012dd8:	0803f934 	.word	0x0803f934
 8012ddc:	0803f940 	.word	0x0803f940
 8012de0:	0803f948 	.word	0x0803f948
 8012de4:	0803f980 	.word	0x0803f980
 8012de8:	0803f9bc 	.word	0x0803f9bc
 8012dec:	0803f9f8 	.word	0x0803f9f8

08012df0 <handle_mqtt_conf>:

static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b092      	sub	sp, #72	@ 0x48
 8012df4:	af04      	add	r7, sp, #16
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012dfa:	f107 030c 	add.w	r3, r7, #12
 8012dfe:	49a7      	ldr	r1, [pc, #668]	@ (801309c <handle_mqtt_conf+0x2ac>)
 8012e00:	4618      	mov	r0, r3
 8012e02:	f01f f867 	bl	8031ed4 <mg_str_s>
 8012e06:	6839      	ldr	r1, [r7, #0]
 8012e08:	2300      	movs	r3, #0
 8012e0a:	9300      	str	r3, [sp, #0]
 8012e0c:	f107 030c 	add.w	r3, r7, #12
 8012e10:	cb0c      	ldmia	r3, {r2, r3}
 8012e12:	c903      	ldmia	r1, {r0, r1}
 8012e14:	f01f f931 	bl	803207a <mg_match>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d04d      	beq.n	8012eba <handle_mqtt_conf+0xca>

		uint8_t pass_len = 0;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8012e24:	21c6      	movs	r1, #198	@ 0xc6
 8012e26:	2001      	movs	r0, #1
 8012e28:	f7ff fe2b 	bl	8012a82 <mg_calloc>
 8012e2c:	61f8      	str	r0, [r7, #28]
		if (mqtt_config == NULL) {
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d10a      	bne.n	8012e4a <handle_mqtt_conf+0x5a>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8012e34:	4b9a      	ldr	r3, [pc, #616]	@ (80130a0 <handle_mqtt_conf+0x2b0>)
 8012e36:	4a9b      	ldr	r2, [pc, #620]	@ (80130a4 <handle_mqtt_conf+0x2b4>)
 8012e38:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f015 fb9d 	bl	802857c <mg_http_reply>
			free(mqtt_config);
 8012e42:	69f8      	ldr	r0, [r7, #28]
 8012e44:	f009 fe08 	bl	801ca58 <vPortFree>
			return;
 8012e48:	e124      	b.n	8013094 <handle_mqtt_conf+0x2a4>
		}

		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 8012e4a:	4b97      	ldr	r3, [pc, #604]	@ (80130a8 <handle_mqtt_conf+0x2b8>)
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	2100      	movs	r1, #0
 8012e52:	69f8      	ldr	r0, [r7, #28]
 8012e54:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8012e56:	69fb      	ldr	r3, [r7, #28]
 8012e58:	33a5      	adds	r3, #165	@ 0xa5
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7fd fa20 	bl	80102a0 <strlen>
 8012e60:	4603      	mov	r3, r0
 8012e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 8012e66:	69fb      	ldr	r3, [r7, #28]
 8012e68:	33a5      	adds	r3, #165	@ 0xa5
 8012e6a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8012e6e:	212a      	movs	r1, #42	@ 0x2a
 8012e70:	4618      	mov	r0, r3
 8012e72:	f023 f935 	bl	80360e0 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 8012e76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012e7a:	69fa      	ldr	r2, [r7, #28]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	2200      	movs	r2, #0
 8012e80:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5


		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8012e84:	69fb      	ldr	r3, [r7, #28]
 8012e86:	785b      	ldrb	r3, [r3, #1]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d001      	beq.n	8012e90 <handle_mqtt_conf+0xa0>
 8012e8c:	4b87      	ldr	r3, [pc, #540]	@ (80130ac <handle_mqtt_conf+0x2bc>)
 8012e8e:	e000      	b.n	8012e92 <handle_mqtt_conf+0xa2>
 8012e90:	4b87      	ldr	r3, [pc, #540]	@ (80130b0 <handle_mqtt_conf+0x2c0>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 8012e92:	69fa      	ldr	r2, [r7, #28]
 8012e94:	3202      	adds	r2, #2
 8012e96:	69f9      	ldr	r1, [r7, #28]
 8012e98:	3184      	adds	r1, #132	@ 0x84
 8012e9a:	69f8      	ldr	r0, [r7, #28]
 8012e9c:	30a5      	adds	r0, #165	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8012e9e:	9003      	str	r0, [sp, #12]
 8012ea0:	9102      	str	r1, [sp, #8]
 8012ea2:	9201      	str	r2, [sp, #4]
 8012ea4:	9300      	str	r3, [sp, #0]
 8012ea6:	4b83      	ldr	r3, [pc, #524]	@ (80130b4 <handle_mqtt_conf+0x2c4>)
 8012ea8:	4a7e      	ldr	r2, [pc, #504]	@ (80130a4 <handle_mqtt_conf+0x2b4>)
 8012eaa:	21c8      	movs	r1, #200	@ 0xc8
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f015 fb65 	bl	802857c <mg_http_reply>

		free(mqtt_config);
 8012eb2:	69f8      	ldr	r0, [r7, #28]
 8012eb4:	f009 fdd0 	bl	801ca58 <vPortFree>
 8012eb8:	e0ec      	b.n	8013094 <handle_mqtt_conf+0x2a4>

	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8012eba:	f107 0314 	add.w	r3, r7, #20
 8012ebe:	497e      	ldr	r1, [pc, #504]	@ (80130b8 <handle_mqtt_conf+0x2c8>)
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f01f f807 	bl	8031ed4 <mg_str_s>
 8012ec6:	6839      	ldr	r1, [r7, #0]
 8012ec8:	2300      	movs	r3, #0
 8012eca:	9300      	str	r3, [sp, #0]
 8012ecc:	f107 0314 	add.w	r3, r7, #20
 8012ed0:	cb0c      	ldmia	r3, {r2, r3}
 8012ed2:	c903      	ldmia	r1, {r0, r1}
 8012ed4:	f01f f8d1 	bl	803207a <mg_match>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	f000 80d3 	beq.w	8013086 <handle_mqtt_conf+0x296>

		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8012ee0:	21c6      	movs	r1, #198	@ 0xc6
 8012ee2:	2001      	movs	r0, #1
 8012ee4:	f7ff fdcd 	bl	8012a82 <mg_calloc>
 8012ee8:	6378      	str	r0, [r7, #52]	@ 0x34
		if (mqtt_config == NULL) {
 8012eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d10a      	bne.n	8012f06 <handle_mqtt_conf+0x116>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8012ef0:	4b6b      	ldr	r3, [pc, #428]	@ (80130a0 <handle_mqtt_conf+0x2b0>)
 8012ef2:	4a6c      	ldr	r2, [pc, #432]	@ (80130a4 <handle_mqtt_conf+0x2b4>)
 8012ef4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f015 fb3f 	bl	802857c <mg_http_reply>
			free(mqtt_config);
 8012efe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012f00:	f009 fdaa 	bl	801ca58 <vPortFree>
			return;
 8012f04:	e0c6      	b.n	8013094 <handle_mqtt_conf+0x2a4>
		}
		int length;
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8012f06:	f107 0308 	add.w	r3, r7, #8
 8012f0a:	6839      	ldr	r1, [r7, #0]
 8012f0c:	4a6b      	ldr	r2, [pc, #428]	@ (80130bc <handle_mqtt_conf+0x2cc>)
 8012f0e:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8012f12:	c903      	ldmia	r1, {r0, r1}
 8012f14:	f017 fe12 	bl	802ab3c <mg_json_get>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	da07      	bge.n	8012f2e <handle_mqtt_conf+0x13e>

			mg_http_reply(c, 400, headers, //TODO delete for release,
 8012f1e:	4b68      	ldr	r3, [pc, #416]	@ (80130c0 <handle_mqtt_conf+0x2d0>)
 8012f20:	4a60      	ldr	r2, [pc, #384]	@ (80130a4 <handle_mqtt_conf+0x2b4>)
 8012f22:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f015 fb28 	bl	802857c <mg_http_reply>
 8012f2c:	e0a7      	b.n	801307e <handle_mqtt_conf+0x28e>
					"{\"status\":\"error\",\"message\":\"Incorrect JSON\"}\r\n");

		}else{//JSON validation success
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8012f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f30:	3301      	adds	r3, #1
 8012f32:	6839      	ldr	r1, [r7, #0]
 8012f34:	4a63      	ldr	r2, [pc, #396]	@ (80130c4 <handle_mqtt_conf+0x2d4>)
 8012f36:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8012f3a:	c903      	ldmia	r1, {r0, r1}
 8012f3c:	f018 f97f 	bl	802b23e <mg_json_get_bool>

			char * broker = NULL;
 8012f40:	2300      	movs	r3, #0
 8012f42:	633b      	str	r3, [r7, #48]	@ 0x30
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	4a60      	ldr	r2, [pc, #384]	@ (80130c8 <handle_mqtt_conf+0x2d8>)
 8012f48:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012f4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012f50:	f018 fa3f 	bl	802b3d2 <mg_json_get_str>
 8012f54:	6338      	str	r0, [r7, #48]	@ 0x30
 8012f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d04e      	beq.n	8012ffa <handle_mqtt_conf+0x20a>
				int err = 0;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8012f60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012f62:	f020 faf1 	bl	8033548 <is_valid_mqtt_url>
 8012f66:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8012f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d107      	bne.n	8012f7e <handle_mqtt_conf+0x18e>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8012f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f70:	3302      	adds	r3, #2
 8012f72:	227f      	movs	r2, #127	@ 0x7f
 8012f74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012f76:	4618      	mov	r0, r3
 8012f78:	f023 f8f9 	bl	803616e <strncpy>
 8012f7c:	e03d      	b.n	8012ffa <handle_mqtt_conf+0x20a>
				}else{
					switch (err) {
 8012f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f80:	3304      	adds	r3, #4
 8012f82:	2b03      	cmp	r3, #3
 8012f84:	d82a      	bhi.n	8012fdc <handle_mqtt_conf+0x1ec>
 8012f86:	a201      	add	r2, pc, #4	@ (adr r2, 8012f8c <handle_mqtt_conf+0x19c>)
 8012f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f8c:	08012fcd 	.word	0x08012fcd
 8012f90:	08012fbd 	.word	0x08012fbd
 8012f94:	08012fad 	.word	0x08012fad
 8012f98:	08012f9d 	.word	0x08012f9d
						case -1:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012f9c:	4b4b      	ldr	r3, [pc, #300]	@ (80130cc <handle_mqtt_conf+0x2dc>)
 8012f9e:	4a41      	ldr	r2, [pc, #260]	@ (80130a4 <handle_mqtt_conf+0x2b4>)
 8012fa0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f015 fae9 	bl	802857c <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not start with 'mqtt://'\"}\r\n");
							break;
 8012faa:	e01f      	b.n	8012fec <handle_mqtt_conf+0x1fc>
						case -2:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012fac:	4b48      	ldr	r3, [pc, #288]	@ (80130d0 <handle_mqtt_conf+0x2e0>)
 8012fae:	4a3d      	ldr	r2, [pc, #244]	@ (80130a4 <handle_mqtt_conf+0x2b4>)
 8012fb0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	f015 fae1 	bl	802857c <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not contain a port separator ':'\"}\r\n");
							break;
 8012fba:	e017      	b.n	8012fec <handle_mqtt_conf+0x1fc>
						case -3:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012fbc:	4b45      	ldr	r3, [pc, #276]	@ (80130d4 <handle_mqtt_conf+0x2e4>)
 8012fbe:	4a39      	ldr	r2, [pc, #228]	@ (80130a4 <handle_mqtt_conf+0x2b4>)
 8012fc0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f015 fad9 	bl	802857c <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid domain or IP address\"}\r\n");
							break;
 8012fca:	e00f      	b.n	8012fec <handle_mqtt_conf+0x1fc>
						case -4:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012fcc:	4b42      	ldr	r3, [pc, #264]	@ (80130d8 <handle_mqtt_conf+0x2e8>)
 8012fce:	4a35      	ldr	r2, [pc, #212]	@ (80130a4 <handle_mqtt_conf+0x2b4>)
 8012fd0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f015 fad1 	bl	802857c <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid port number\"}\r\n");
							break;
 8012fda:	e007      	b.n	8012fec <handle_mqtt_conf+0x1fc>
						default:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8012fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80130dc <handle_mqtt_conf+0x2ec>)
 8012fde:	4a31      	ldr	r2, [pc, #196]	@ (80130a4 <handle_mqtt_conf+0x2b4>)
 8012fe0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f015 fac9 	bl	802857c <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid MQTT_URI\"}\r\n");

							break;
 8012fea:	bf00      	nop
					}
					free(broker);
 8012fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012fee:	f009 fd33 	bl	801ca58 <vPortFree>
					free(mqtt_config);
 8012ff2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012ff4:	f009 fd30 	bl	801ca58 <vPortFree>
					return;
 8012ff8:	e04c      	b.n	8013094 <handle_mqtt_conf+0x2a4>
				}

			}
			free(broker);
 8012ffa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012ffc:	f009 fd2c 	bl	801ca58 <vPortFree>

			char * username = NULL;
 8013000:	2300      	movs	r3, #0
 8013002:	62bb      	str	r3, [r7, #40]	@ 0x28
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	4a36      	ldr	r2, [pc, #216]	@ (80130e0 <handle_mqtt_conf+0x2f0>)
 8013008:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801300c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013010:	f018 f9df 	bl	802b3d2 <mg_json_get_str>
 8013014:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013018:	2b00      	cmp	r3, #0
 801301a:	d006      	beq.n	801302a <handle_mqtt_conf+0x23a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 801301c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801301e:	3384      	adds	r3, #132	@ 0x84
 8013020:	2220      	movs	r2, #32
 8013022:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013024:	4618      	mov	r0, r3
 8013026:	f023 f8a2 	bl	803616e <strncpy>
			}
			free(username);
 801302a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801302c:	f009 fd14 	bl	801ca58 <vPortFree>

			char * password = NULL;
 8013030:	2300      	movs	r3, #0
 8013032:	627b      	str	r3, [r7, #36]	@ 0x24
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	4a2b      	ldr	r2, [pc, #172]	@ (80130e4 <handle_mqtt_conf+0x2f4>)
 8013038:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801303c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013040:	f018 f9c7 	bl	802b3d2 <mg_json_get_str>
 8013044:	6278      	str	r0, [r7, #36]	@ 0x24
 8013046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013048:	2b00      	cmp	r3, #0
 801304a:	d006      	beq.n	801305a <handle_mqtt_conf+0x26a>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 801304c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801304e:	33a5      	adds	r3, #165	@ 0xa5
 8013050:	2220      	movs	r2, #32
 8013052:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013054:	4618      	mov	r0, r3
 8013056:	f023 f88a 	bl	803616e <strncpy>
			}
			free(password);
 801305a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801305c:	f009 fcfc 	bl	801ca58 <vPortFree>

			mqtt_config->save = 1;
 8013060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013062:	2201      	movs	r2, #1
 8013064:	701a      	strb	r2, [r3, #0]

			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 8013066:	4b10      	ldr	r3, [pc, #64]	@ (80130a8 <handle_mqtt_conf+0x2b8>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	2201      	movs	r2, #1
 801306c:	2100      	movs	r1, #0
 801306e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013070:	4798      	blx	r3

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013072:	4b1d      	ldr	r3, [pc, #116]	@ (80130e8 <handle_mqtt_conf+0x2f8>)
 8013074:	4a0b      	ldr	r2, [pc, #44]	@ (80130a4 <handle_mqtt_conf+0x2b4>)
 8013076:	21c8      	movs	r1, #200	@ 0xc8
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f015 fa7f 	bl	802857c <mg_http_reply>
				"{\"status\":\"success\",\"message\":\"MQTT settings updated!\"}\r\n");

		}

		free(mqtt_config);
 801307e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013080:	f009 fcea 	bl	801ca58 <vPortFree>
 8013084:	e006      	b.n	8013094 <handle_mqtt_conf+0x2a4>

	}else{//error, unsupported method
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013086:	4b19      	ldr	r3, [pc, #100]	@ (80130ec <handle_mqtt_conf+0x2fc>)
 8013088:	4a06      	ldr	r2, [pc, #24]	@ (80130a4 <handle_mqtt_conf+0x2b4>)
 801308a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f015 fa74 	bl	802857c <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
	}
}
 8013094:	3738      	adds	r7, #56	@ 0x38
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}
 801309a:	bf00      	nop
 801309c:	0803f884 	.word	0x0803f884
 80130a0:	0803fa4c 	.word	0x0803fa4c
 80130a4:	0803f8bc 	.word	0x0803f8bc
 80130a8:	20000b84 	.word	0x20000b84
 80130ac:	0803fa88 	.word	0x0803fa88
 80130b0:	0803fa90 	.word	0x0803fa90
 80130b4:	0803fa98 	.word	0x0803fa98
 80130b8:	0803f92c 	.word	0x0803f92c
 80130bc:	0803fae0 	.word	0x0803fae0
 80130c0:	0803fae4 	.word	0x0803fae4
 80130c4:	0803fb14 	.word	0x0803fb14
 80130c8:	0803fb20 	.word	0x0803fb20
 80130cc:	0803fb2c 	.word	0x0803fb2c
 80130d0:	0803fb70 	.word	0x0803fb70
 80130d4:	0803fbbc 	.word	0x0803fbbc
 80130d8:	0803fbfc 	.word	0x0803fbfc
 80130dc:	0803fc34 	.word	0x0803fc34
 80130e0:	0803fc68 	.word	0x0803fc68
 80130e4:	0803fc74 	.word	0x0803fc74
 80130e8:	0803fc80 	.word	0x0803fc80
 80130ec:	0803f9f8 	.word	0x0803f9f8

080130f0 <handle_dev_status>:

static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b0d2      	sub	sp, #328	@ 0x148
 80130f4:	af06      	add	r7, sp, #24
 80130f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80130fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80130fe:	6018      	str	r0, [r3, #0]
 8013100:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013104:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8013108:	6019      	str	r1, [r3, #0]

	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 801310a:	4acf      	ldr	r2, [pc, #828]	@ (8013448 <handle_dev_status+0x358>)
 801310c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013110:	4611      	mov	r1, r2
 8013112:	2272      	movs	r2, #114	@ 0x72
 8013114:	4618      	mov	r0, r3
 8013116:	f024 fa1f 	bl	8037558 <memcpy>
	struct mg_connection* mqtt_connection = NULL;
 801311a:	2300      	movs	r3, #0
 801311c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	int    str_part_len = 30;
 8013120:	231e      	movs	r3, #30
 8013122:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8013126:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801312a:	2101      	movs	r1, #1
 801312c:	4618      	mov	r0, r3
 801312e:	f7ff fca8 	bl	8012a82 <mg_calloc>
 8013132:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013136:	2101      	movs	r1, #1
 8013138:	202e      	movs	r0, #46	@ 0x2e
 801313a:	f7ff fca2 	bl	8012a82 <mg_calloc>
 801313e:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013142:	2101      	movs	r1, #1
 8013144:	202e      	movs	r0, #46	@ 0x2e
 8013146:	f7ff fc9c 	bl	8012a82 <mg_calloc>
 801314a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 801314e:	2101      	movs	r1, #1
 8013150:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8013154:	f7ff fc95 	bl	8012a82 <mg_calloc>
 8013158:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 801315c:	2101      	movs	r1, #1
 801315e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8013162:	f7ff fc8e 	bl	8012a82 <mg_calloc>
 8013166:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 801316a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801316e:	2b00      	cmp	r3, #0
 8013170:	f000 8182 	beq.w	8013478 <handle_dev_status+0x388>
 8013174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013178:	2b00      	cmp	r3, #0
 801317a:	f000 817d 	beq.w	8013478 <handle_dev_status+0x388>
 801317e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8013182:	2b00      	cmp	r3, #0
 8013184:	f000 8178 	beq.w	8013478 <handle_dev_status+0x388>
 8013188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801318c:	2b00      	cmp	r3, #0
 801318e:	f000 8173 	beq.w	8013478 <handle_dev_status+0x388>
 8013192:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013196:	2b00      	cmp	r3, #0
 8013198:	f000 816e 	beq.w	8013478 <handle_dev_status+0x388>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 801319c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80131a0:	49aa      	ldr	r1, [pc, #680]	@ (801344c <handle_dev_status+0x35c>)
 80131a2:	4618      	mov	r0, r3
 80131a4:	f01e fe96 	bl	8031ed4 <mg_str_s>
 80131a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80131ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80131b0:	6819      	ldr	r1, [r3, #0]
 80131b2:	2300      	movs	r3, #0
 80131b4:	9300      	str	r3, [sp, #0]
 80131b6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80131ba:	cb0c      	ldmia	r3, {r2, r3}
 80131bc:	c903      	ldmia	r1, {r0, r1}
 80131be:	f01e ff5c 	bl	803207a <mg_match>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	f000 8132 	beq.w	801342e <handle_dev_status+0x33e>
			mqtt_connection =  get_mqtt_connection();
 80131ca:	f001 fa81 	bl	80146d0 <get_mqtt_connection>
 80131ce:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

			if(!mqtt_connection){
 80131d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d108      	bne.n	80131ec <handle_dev_status+0xfc>
				strncpy(mqtt_status_str, "closed", str_part_len);
 80131da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80131de:	461a      	mov	r2, r3
 80131e0:	499b      	ldr	r1, [pc, #620]	@ (8013450 <handle_dev_status+0x360>)
 80131e2:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80131e6:	f022 ffc2 	bl	803616e <strncpy>
 80131ea:	e041      	b.n	8013270 <handle_dev_status+0x180>
			}else{
				if (mqtt_connection->is_connecting){
 80131ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80131f0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80131f4:	f003 0320 	and.w	r3, r3, #32
 80131f8:	b2db      	uxtb	r3, r3
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d008      	beq.n	8013210 <handle_dev_status+0x120>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 80131fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013202:	461a      	mov	r2, r3
 8013204:	4993      	ldr	r1, [pc, #588]	@ (8013454 <handle_dev_status+0x364>)
 8013206:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 801320a:	f022 ffb0 	bl	803616e <strncpy>
 801320e:	e019      	b.n	8013244 <handle_dev_status+0x154>
				}else if(mqtt_connection->is_closing){
 8013210:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8013214:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8013218:	f003 0320 	and.w	r3, r3, #32
 801321c:	b2db      	uxtb	r3, r3
 801321e:	2b00      	cmp	r3, #0
 8013220:	d008      	beq.n	8013234 <handle_dev_status+0x144>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8013222:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013226:	461a      	mov	r2, r3
 8013228:	498b      	ldr	r1, [pc, #556]	@ (8013458 <handle_dev_status+0x368>)
 801322a:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 801322e:	f022 ff9e 	bl	803616e <strncpy>
 8013232:	e007      	b.n	8013244 <handle_dev_status+0x154>
				}else{
					strncpy(mqtt_status_str, "established", str_part_len);
 8013234:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013238:	461a      	mov	r2, r3
 801323a:	4988      	ldr	r1, [pc, #544]	@ (801345c <handle_dev_status+0x36c>)
 801323c:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8013240:	f022 ff95 	bl	803616e <strncpy>
				}

				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 8013244:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8013248:	3308      	adds	r3, #8
 801324a:	9300      	str	r3, [sp, #0]
 801324c:	4b84      	ldr	r3, [pc, #528]	@ (8013460 <handle_dev_status+0x370>)
 801324e:	4a85      	ldr	r2, [pc, #532]	@ (8013464 <handle_dev_status+0x374>)
 8013250:	212e      	movs	r1, #46	@ 0x2e
 8013252:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8013256:	f01e f955 	bl	8031504 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 801325a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801325e:	331c      	adds	r3, #28
 8013260:	9300      	str	r3, [sp, #0]
 8013262:	4b7f      	ldr	r3, [pc, #508]	@ (8013460 <handle_dev_status+0x370>)
 8013264:	4a7f      	ldr	r2, [pc, #508]	@ (8013464 <handle_dev_status+0x374>)
 8013266:	212e      	movs	r1, #46	@ 0x2e
 8013268:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 801326c:	f01e f94a 	bl	8031504 <mg_snprintf>

			}

			char topic[MQTT_TOPIK_MAX_LEN];
			strcat(pub_topics_str, "\"");
 8013270:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8013274:	f7fd f814 	bl	80102a0 <strlen>
 8013278:	4603      	mov	r3, r0
 801327a:	461a      	mov	r2, r3
 801327c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013280:	4413      	add	r3, r2
 8013282:	4979      	ldr	r1, [pc, #484]	@ (8013468 <handle_dev_status+0x378>)
 8013284:	461a      	mov	r2, r3
 8013286:	460b      	mov	r3, r1
 8013288:	881b      	ldrh	r3, [r3, #0]
 801328a:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков состояний для INPUT_SENSOR
			for (int i = 1; i <= INPUTS_COUNT; i++){
 801328c:	2301      	movs	r3, #1
 801328e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013292:	e022      	b.n	80132da <handle_dev_status+0x1ea>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8013294:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013298:	b2db      	uxtb	r3, r3
 801329a:	f107 000c 	add.w	r0, r7, #12
 801329e:	2201      	movs	r2, #1
 80132a0:	2180      	movs	r1, #128	@ 0x80
 80132a2:	f001 ff33 	bl	801510c <generate_status_topik>
				strcat(pub_topics_str, topic);
 80132a6:	f107 030c 	add.w	r3, r7, #12
 80132aa:	4619      	mov	r1, r3
 80132ac:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80132b0:	f022 ff1e 	bl	80360f0 <strcat>
				strcat(pub_topics_str, "\", \"");
 80132b4:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80132b8:	f7fc fff2 	bl	80102a0 <strlen>
 80132bc:	4603      	mov	r3, r0
 80132be:	461a      	mov	r2, r3
 80132c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80132c4:	4413      	add	r3, r2
 80132c6:	4a69      	ldr	r2, [pc, #420]	@ (801346c <handle_dev_status+0x37c>)
 80132c8:	6810      	ldr	r0, [r2, #0]
 80132ca:	6018      	str	r0, [r3, #0]
 80132cc:	7912      	ldrb	r2, [r2, #4]
 80132ce:	711a      	strb	r2, [r3, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 80132d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80132d4:	3301      	adds	r3, #1
 80132d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80132da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80132de:	2b03      	cmp	r3, #3
 80132e0:	ddd8      	ble.n	8013294 <handle_dev_status+0x1a4>
			}

			// Формируем список топиков состояний для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80132e2:	2301      	movs	r3, #1
 80132e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80132e8:	e035      	b.n	8013356 <handle_dev_status+0x266>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 80132ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80132ee:	b2db      	uxtb	r3, r3
 80132f0:	f107 000c 	add.w	r0, r7, #12
 80132f4:	2202      	movs	r2, #2
 80132f6:	2180      	movs	r1, #128	@ 0x80
 80132f8:	f001 ff08 	bl	801510c <generate_status_topik>
				strcat(pub_topics_str, topic);
 80132fc:	f107 030c 	add.w	r3, r7, #12
 8013300:	4619      	mov	r1, r3
 8013302:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8013306:	f022 fef3 	bl	80360f0 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 801330a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801330e:	2b02      	cmp	r3, #2
 8013310:	dc0e      	bgt.n	8013330 <handle_dev_status+0x240>
					strcat(pub_topics_str, "\", \"");
 8013312:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8013316:	f7fc ffc3 	bl	80102a0 <strlen>
 801331a:	4603      	mov	r3, r0
 801331c:	461a      	mov	r2, r3
 801331e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013322:	4413      	add	r3, r2
 8013324:	4a51      	ldr	r2, [pc, #324]	@ (801346c <handle_dev_status+0x37c>)
 8013326:	6810      	ldr	r0, [r2, #0]
 8013328:	6018      	str	r0, [r3, #0]
 801332a:	7912      	ldrb	r2, [r2, #4]
 801332c:	711a      	strb	r2, [r3, #4]
 801332e:	e00d      	b.n	801334c <handle_dev_status+0x25c>
				}else{
					strcat(pub_topics_str, "\"");
 8013330:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8013334:	f7fc ffb4 	bl	80102a0 <strlen>
 8013338:	4603      	mov	r3, r0
 801333a:	461a      	mov	r2, r3
 801333c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013340:	4413      	add	r3, r2
 8013342:	4949      	ldr	r1, [pc, #292]	@ (8013468 <handle_dev_status+0x378>)
 8013344:	461a      	mov	r2, r3
 8013346:	460b      	mov	r3, r1
 8013348:	881b      	ldrh	r3, [r3, #0]
 801334a:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 801334c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013350:	3301      	adds	r3, #1
 8013352:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8013356:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801335a:	2b03      	cmp	r3, #3
 801335c:	ddc5      	ble.n	80132ea <handle_dev_status+0x1fa>
				}
			}

			strcat(subscr_topics_str, "\"");
 801335e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8013362:	f7fc ff9d 	bl	80102a0 <strlen>
 8013366:	4603      	mov	r3, r0
 8013368:	461a      	mov	r2, r3
 801336a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801336e:	4413      	add	r3, r2
 8013370:	493d      	ldr	r1, [pc, #244]	@ (8013468 <handle_dev_status+0x378>)
 8013372:	461a      	mov	r2, r3
 8013374:	460b      	mov	r3, r1
 8013376:	881b      	ldrh	r3, [r3, #0]
 8013378:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков подписки для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 801337a:	2301      	movs	r3, #1
 801337c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8013380:	e035      	b.n	80133ee <handle_dev_status+0x2fe>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013382:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8013386:	b2db      	uxtb	r3, r3
 8013388:	f107 000c 	add.w	r0, r7, #12
 801338c:	2202      	movs	r2, #2
 801338e:	2180      	movs	r1, #128	@ 0x80
 8013390:	f001 fe92 	bl	80150b8 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8013394:	f107 030c 	add.w	r3, r7, #12
 8013398:	4619      	mov	r1, r3
 801339a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 801339e:	f022 fea7 	bl	80360f0 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 80133a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80133a6:	2b02      	cmp	r3, #2
 80133a8:	dc0e      	bgt.n	80133c8 <handle_dev_status+0x2d8>
					strcat(subscr_topics_str, "\", \"");
 80133aa:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80133ae:	f7fc ff77 	bl	80102a0 <strlen>
 80133b2:	4603      	mov	r3, r0
 80133b4:	461a      	mov	r2, r3
 80133b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80133ba:	4413      	add	r3, r2
 80133bc:	4a2b      	ldr	r2, [pc, #172]	@ (801346c <handle_dev_status+0x37c>)
 80133be:	6810      	ldr	r0, [r2, #0]
 80133c0:	6018      	str	r0, [r3, #0]
 80133c2:	7912      	ldrb	r2, [r2, #4]
 80133c4:	711a      	strb	r2, [r3, #4]
 80133c6:	e00d      	b.n	80133e4 <handle_dev_status+0x2f4>
				}else{
					strcat(subscr_topics_str, "\"");
 80133c8:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80133cc:	f7fc ff68 	bl	80102a0 <strlen>
 80133d0:	4603      	mov	r3, r0
 80133d2:	461a      	mov	r2, r3
 80133d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80133d8:	4413      	add	r3, r2
 80133da:	4923      	ldr	r1, [pc, #140]	@ (8013468 <handle_dev_status+0x378>)
 80133dc:	461a      	mov	r2, r3
 80133de:	460b      	mov	r3, r1
 80133e0:	881b      	ldrh	r3, [r3, #0]
 80133e2:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80133e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80133e8:	3301      	adds	r3, #1
 80133ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80133ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80133f2:	2b03      	cmp	r3, #3
 80133f4:	ddc5      	ble.n	8013382 <handle_dev_status+0x292>
				}
			}


			mg_http_reply(c, 200, headers, //TODO delete for release,
 80133f6:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80133fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80133fe:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8013402:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013406:	9304      	str	r3, [sp, #16]
 8013408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801340c:	9303      	str	r3, [sp, #12]
 801340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013412:	9302      	str	r3, [sp, #8]
 8013414:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8013418:	9301      	str	r3, [sp, #4]
 801341a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801341e:	9300      	str	r3, [sp, #0]
 8013420:	4613      	mov	r3, r2
 8013422:	4a13      	ldr	r2, [pc, #76]	@ (8013470 <handle_dev_status+0x380>)
 8013424:	21c8      	movs	r1, #200	@ 0xc8
 8013426:	6800      	ldr	r0, [r0, #0]
 8013428:	f015 f8a8 	bl	802857c <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 801342c:	e02f      	b.n	801348e <handle_dev_status+0x39e>
					dev_status_template, mqtt_status_str, mqtt_local_addr, mqtt_server_addr, pub_topics_str, subscr_topics_str);

		}else{//error, unsupported method
			mg_http_reply(c, 400, headers, //TODO delete for release,
 801342e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013432:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8013436:	4b0f      	ldr	r3, [pc, #60]	@ (8013474 <handle_dev_status+0x384>)
 8013438:	4a0d      	ldr	r2, [pc, #52]	@ (8013470 <handle_dev_status+0x380>)
 801343a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801343e:	6800      	ldr	r0, [r0, #0]
 8013440:	f015 f89c 	bl	802857c <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013444:	e023      	b.n	801348e <handle_dev_status+0x39e>
 8013446:	bf00      	nop
 8013448:	0803fd30 	.word	0x0803fd30
 801344c:	0803f884 	.word	0x0803f884
 8013450:	0803fcbc 	.word	0x0803fcbc
 8013454:	0803fcc4 	.word	0x0803fcc4
 8013458:	0803fcd0 	.word	0x0803fcd0
 801345c:	0803fcd8 	.word	0x0803fcd8
 8013460:	08031735 	.word	0x08031735
 8013464:	0803fce4 	.word	0x0803fce4
 8013468:	0803fce8 	.word	0x0803fce8
 801346c:	0803fcec 	.word	0x0803fcec
 8013470:	0803f8bc 	.word	0x0803f8bc
 8013474:	0803f9f8 	.word	0x0803f9f8
					"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
		}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013478:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801347c:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8013480:	4b0f      	ldr	r3, [pc, #60]	@ (80134c0 <handle_dev_status+0x3d0>)
 8013482:	4a10      	ldr	r2, [pc, #64]	@ (80134c4 <handle_dev_status+0x3d4>)
 8013484:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013488:	6800      	ldr	r0, [r0, #0]
 801348a:	f015 f877 	bl	802857c <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Memory allocation error\"}\r\n");

	}

	free(mqtt_status_str);
 801348e:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8013492:	f009 fae1 	bl	801ca58 <vPortFree>
	free(mqtt_server_addr);
 8013496:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 801349a:	f009 fadd 	bl	801ca58 <vPortFree>
	free(mqtt_local_addr);
 801349e:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80134a2:	f009 fad9 	bl	801ca58 <vPortFree>
	free(pub_topics_str);
 80134a6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80134aa:	f009 fad5 	bl	801ca58 <vPortFree>
	free(subscr_topics_str);
 80134ae:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80134b2:	f009 fad1 	bl	801ca58 <vPortFree>
}
 80134b6:	bf00      	nop
 80134b8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}
 80134c0:	0803fcf4 	.word	0x0803fcf4
 80134c4:	0803f8bc 	.word	0x0803f8bc

080134c8 <handle_OPTIONS_method>:


static void handle_OPTIONS_method(struct mg_connection *c){
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b082      	sub	sp, #8
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]

	mg_http_reply(c, 200,
 80134d0:	4b04      	ldr	r3, [pc, #16]	@ (80134e4 <handle_OPTIONS_method+0x1c>)
 80134d2:	4a05      	ldr	r2, [pc, #20]	@ (80134e8 <handle_OPTIONS_method+0x20>)
 80134d4:	21c8      	movs	r1, #200	@ 0xc8
 80134d6:	6878      	ldr	r0, [r7, #4]
 80134d8:	f015 f850 	bl	802857c <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 80134dc:	bf00      	nop
 80134de:	3708      	adds	r7, #8
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}
 80134e4:	0803fda4 	.word	0x0803fda4
 80134e8:	0803fda8 	.word	0x0803fda8

080134ec <handle_restart_mcu>:

static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b08a      	sub	sp, #40	@ 0x28
 80134f0:	af04      	add	r7, sp, #16
 80134f2:	6078      	str	r0, [r7, #4]
 80134f4:	6039      	str	r1, [r7, #0]

	//HAL_NVIC_SystemReset();
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 80134f6:	f107 030c 	add.w	r3, r7, #12
 80134fa:	491a      	ldr	r1, [pc, #104]	@ (8013564 <handle_restart_mcu+0x78>)
 80134fc:	4618      	mov	r0, r3
 80134fe:	f01e fce9 	bl	8031ed4 <mg_str_s>
 8013502:	6839      	ldr	r1, [r7, #0]
 8013504:	2300      	movs	r3, #0
 8013506:	9300      	str	r3, [sp, #0]
 8013508:	f107 030c 	add.w	r3, r7, #12
 801350c:	cb0c      	ldmia	r3, {r2, r3}
 801350e:	c903      	ldmia	r1, {r0, r1}
 8013510:	f01e fdb3 	bl	803207a <mg_match>
 8013514:	4603      	mov	r3, r0
 8013516:	2b00      	cmp	r3, #0
 8013518:	d018      	beq.n	801354c <handle_restart_mcu+0x60>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801351e:	617b      	str	r3, [r7, #20]


		mg_timer_add(param->mgr, 2000 /* 05 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	6819      	ldr	r1, [r3, #0]
 8013524:	2300      	movs	r3, #0
 8013526:	9302      	str	r3, [sp, #8]
 8013528:	4b0f      	ldr	r3, [pc, #60]	@ (8013568 <handle_restart_mcu+0x7c>)
 801352a:	9301      	str	r3, [sp, #4]
 801352c:	2301      	movs	r3, #1
 801352e:	9300      	str	r3, [sp, #0]
 8013530:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8013534:	f04f 0300 	mov.w	r3, #0
 8013538:	4608      	mov	r0, r1
 801353a:	f01a fd61 	bl	802e000 <mg_timer_add>

		mg_http_reply(c, 200, headers, //TODO delete for release,
 801353e:	4b0b      	ldr	r3, [pc, #44]	@ (801356c <handle_restart_mcu+0x80>)
 8013540:	4a0b      	ldr	r2, [pc, #44]	@ (8013570 <handle_restart_mcu+0x84>)
 8013542:	21c8      	movs	r1, #200	@ 0xc8
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f015 f819 	bl	802857c <mg_http_reply>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 801354a:	e006      	b.n	801355a <handle_restart_mcu+0x6e>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801354c:	4b09      	ldr	r3, [pc, #36]	@ (8013574 <handle_restart_mcu+0x88>)
 801354e:	4a08      	ldr	r2, [pc, #32]	@ (8013570 <handle_restart_mcu+0x84>)
 8013550:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f015 f811 	bl	802857c <mg_http_reply>
}
 801355a:	bf00      	nop
 801355c:	3718      	adds	r7, #24
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}
 8013562:	bf00      	nop
 8013564:	0803f92c 	.word	0x0803f92c
 8013568:	080160fb 	.word	0x080160fb
 801356c:	0803fe48 	.word	0x0803fe48
 8013570:	0803f8bc 	.word	0x0803f8bc
 8013574:	0803fe7c 	.word	0x0803fe7c

08013578 <handle_firmware_upload>:

static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 8013578:	b580      	push	{r7, lr}
 801357a:	b0a6      	sub	sp, #152	@ 0x98
 801357c:	af02      	add	r7, sp, #8
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013582:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8013586:	4920      	ldr	r1, [pc, #128]	@ (8013608 <handle_firmware_upload+0x90>)
 8013588:	4618      	mov	r0, r3
 801358a:	f01e fca3 	bl	8031ed4 <mg_str_s>
 801358e:	6839      	ldr	r1, [r7, #0]
 8013590:	2300      	movs	r3, #0
 8013592:	9300      	str	r3, [sp, #0]
 8013594:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8013598:	cb0c      	ldmia	r3, {r2, r3}
 801359a:	c903      	ldmia	r1, {r0, r1}
 801359c:	f01e fd6d 	bl	803207a <mg_match>
 80135a0:	4603      	mov	r3, r0
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d024      	beq.n	80135f0 <handle_firmware_upload+0x78>
		char file[MG_PATH_MAX];
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	f103 0010 	add.w	r0, r3, #16
 80135ac:	f107 0208 	add.w	r2, r7, #8
 80135b0:	2380      	movs	r3, #128	@ 0x80
 80135b2:	4916      	ldr	r1, [pc, #88]	@ (801360c <handle_firmware_upload+0x94>)
 80135b4:	f013 fe54 	bl	8027260 <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 80135b8:	f107 0308 	add.w	r3, r7, #8
 80135bc:	4914      	ldr	r1, [pc, #80]	@ (8013610 <handle_firmware_upload+0x98>)
 80135be:	4618      	mov	r0, r3
 80135c0:	f7fc fe0e 	bl	80101e0 <strcmp>
 80135c4:	4603      	mov	r3, r0
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d108      	bne.n	80135dc <handle_firmware_upload+0x64>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 80135ca:	4b12      	ldr	r3, [pc, #72]	@ (8013614 <handle_firmware_upload+0x9c>)
 80135cc:	9300      	str	r3, [sp, #0]
 80135ce:	4b12      	ldr	r3, [pc, #72]	@ (8013618 <handle_firmware_upload+0xa0>)
 80135d0:	4a12      	ldr	r2, [pc, #72]	@ (801361c <handle_firmware_upload+0xa4>)
 80135d2:	6839      	ldr	r1, [r7, #0]
 80135d4:	6878      	ldr	r0, [r7, #4]
 80135d6:	f016 f98d 	bl	80298f4 <mg_http_upload>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 80135da:	e010      	b.n	80135fe <handle_firmware_upload+0x86>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80135dc:	4b0c      	ldr	r3, [pc, #48]	@ (8013610 <handle_firmware_upload+0x98>)
 80135de:	9300      	str	r3, [sp, #0]
 80135e0:	4b0f      	ldr	r3, [pc, #60]	@ (8013620 <handle_firmware_upload+0xa8>)
 80135e2:	4a10      	ldr	r2, [pc, #64]	@ (8013624 <handle_firmware_upload+0xac>)
 80135e4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f014 ffc7 	bl	802857c <mg_http_reply>
}
 80135ee:	e006      	b.n	80135fe <handle_firmware_upload+0x86>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80135f0:	4b0d      	ldr	r3, [pc, #52]	@ (8013628 <handle_firmware_upload+0xb0>)
 80135f2:	4a0c      	ldr	r2, [pc, #48]	@ (8013624 <handle_firmware_upload+0xac>)
 80135f4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f014 ffbf 	bl	802857c <mg_http_reply>
}
 80135fe:	bf00      	nop
 8013600:	3790      	adds	r7, #144	@ 0x90
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	0803f92c 	.word	0x0803f92c
 801360c:	0803fecc 	.word	0x0803fecc
 8013610:	0803fed4 	.word	0x0803fed4
 8013614:	00030d40 	.word	0x00030d40
 8013618:	0803fee4 	.word	0x0803fee4
 801361c:	2000001c 	.word	0x2000001c
 8013620:	0803fef0 	.word	0x0803fef0
 8013624:	0803f8bc 	.word	0x0803f8bc
 8013628:	0803fe7c 	.word	0x0803fe7c

0801362c <handle_firmware_md5>:

static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 801362c:	b580      	push	{r7, lr}
 801362e:	b088      	sub	sp, #32
 8013630:	af02      	add	r7, sp, #8
 8013632:	6078      	str	r0, [r7, #4]
 8013634:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013636:	f107 030c 	add.w	r3, r7, #12
 801363a:	491d      	ldr	r1, [pc, #116]	@ (80136b0 <handle_firmware_md5+0x84>)
 801363c:	4618      	mov	r0, r3
 801363e:	f01e fc49 	bl	8031ed4 <mg_str_s>
 8013642:	6839      	ldr	r1, [r7, #0]
 8013644:	2300      	movs	r3, #0
 8013646:	9300      	str	r3, [sp, #0]
 8013648:	f107 030c 	add.w	r3, r7, #12
 801364c:	cb0c      	ldmia	r3, {r2, r3}
 801364e:	c903      	ldmia	r1, {r0, r1}
 8013650:	f01e fd13 	bl	803207a <mg_match>
 8013654:	4603      	mov	r3, r0
 8013656:	2b00      	cmp	r3, #0
 8013658:	d01f      	beq.n	801369a <handle_firmware_md5+0x6e>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 801365a:	2101      	movs	r1, #1
 801365c:	2021      	movs	r0, #33	@ 0x21
 801365e:	f7ff fa10 	bl	8012a82 <mg_calloc>
 8013662:	6178      	str	r0, [r7, #20]
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 8013664:	6979      	ldr	r1, [r7, #20]
 8013666:	4813      	ldr	r0, [pc, #76]	@ (80136b4 <handle_firmware_md5+0x88>)
 8013668:	f7ff fa56 	bl	8012b18 <calc_file_md5sum>
 801366c:	4603      	mov	r3, r0
 801366e:	2b00      	cmp	r3, #0
 8013670:	d108      	bne.n	8013684 <handle_firmware_md5+0x58>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	9300      	str	r3, [sp, #0]
 8013676:	4b10      	ldr	r3, [pc, #64]	@ (80136b8 <handle_firmware_md5+0x8c>)
 8013678:	4a10      	ldr	r2, [pc, #64]	@ (80136bc <handle_firmware_md5+0x90>)
 801367a:	21c8      	movs	r1, #200	@ 0xc8
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f014 ff7d 	bl	802857c <mg_http_reply>
 8013682:	e006      	b.n	8013692 <handle_firmware_md5+0x66>
						"{\"status\":\"success\",\"md5\":\"%s\"}\r\n", md5_str);
		}else{
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8013684:	4b0e      	ldr	r3, [pc, #56]	@ (80136c0 <handle_firmware_md5+0x94>)
 8013686:	4a0d      	ldr	r2, [pc, #52]	@ (80136bc <handle_firmware_md5+0x90>)
 8013688:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f014 ff75 	bl	802857c <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Firmware update file not found\"}\r\n");
		}

		free(md5_str);
 8013692:	6978      	ldr	r0, [r7, #20]
 8013694:	f009 f9e0 	bl	801ca58 <vPortFree>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
	}
}
 8013698:	e006      	b.n	80136a8 <handle_firmware_md5+0x7c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801369a:	4b0a      	ldr	r3, [pc, #40]	@ (80136c4 <handle_firmware_md5+0x98>)
 801369c:	4a07      	ldr	r2, [pc, #28]	@ (80136bc <handle_firmware_md5+0x90>)
 801369e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f014 ff6a 	bl	802857c <mg_http_reply>
}
 80136a8:	bf00      	nop
 80136aa:	3718      	adds	r7, #24
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}
 80136b0:	0803f884 	.word	0x0803f884
 80136b4:	0803ff3c 	.word	0x0803ff3c
 80136b8:	0803ff54 	.word	0x0803ff54
 80136bc:	0803f8bc 	.word	0x0803f8bc
 80136c0:	0803ff78 	.word	0x0803ff78
 80136c4:	0803ffb8 	.word	0x0803ffb8

080136c8 <handle_firmware_activate>:

static void handle_firmware_activate(struct mg_connection *c, struct mg_http_message *hm){
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b08a      	sub	sp, #40	@ 0x28
 80136cc:	af02      	add	r7, sp, #8
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80136d2:	f107 0310 	add.w	r3, r7, #16
 80136d6:	492e      	ldr	r1, [pc, #184]	@ (8013790 <handle_firmware_activate+0xc8>)
 80136d8:	4618      	mov	r0, r3
 80136da:	f01e fbfb 	bl	8031ed4 <mg_str_s>
 80136de:	6839      	ldr	r1, [r7, #0]
 80136e0:	2300      	movs	r3, #0
 80136e2:	9300      	str	r3, [sp, #0]
 80136e4:	f107 0310 	add.w	r3, r7, #16
 80136e8:	cb0c      	ldmia	r3, {r2, r3}
 80136ea:	c903      	ldmia	r1, {r0, r1}
 80136ec:	f01e fcc5 	bl	803207a <mg_match>
 80136f0:	4603      	mov	r3, r0
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d017      	beq.n	8013726 <handle_firmware_activate+0x5e>
		size_t  size;

		if (mg_fs_lfs.st("/firmware.bin", &size, NULL)){ //Check if file exist
 80136f6:	4b27      	ldr	r3, [pc, #156]	@ (8013794 <handle_firmware_activate+0xcc>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	f107 010c 	add.w	r1, r7, #12
 80136fe:	2200      	movs	r2, #0
 8013700:	4825      	ldr	r0, [pc, #148]	@ (8013798 <handle_firmware_activate+0xd0>)
 8013702:	4798      	blx	r3
 8013704:	4603      	mov	r3, r0
 8013706:	2b00      	cmp	r3, #0
 8013708:	d006      	beq.n	8013718 <handle_firmware_activate+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 801370a:	4b24      	ldr	r3, [pc, #144]	@ (801379c <handle_firmware_activate+0xd4>)
 801370c:	4a24      	ldr	r2, [pc, #144]	@ (80137a0 <handle_firmware_activate+0xd8>)
 801370e:	21c8      	movs	r1, #200	@ 0xc8
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f014 ff33 	bl	802857c <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");

	}
}
 8013716:	e036      	b.n	8013786 <handle_firmware_activate+0xbe>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013718:	4b22      	ldr	r3, [pc, #136]	@ (80137a4 <handle_firmware_activate+0xdc>)
 801371a:	4a21      	ldr	r2, [pc, #132]	@ (80137a0 <handle_firmware_activate+0xd8>)
 801371c:	21c8      	movs	r1, #200	@ 0xc8
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f014 ff2c 	bl	802857c <mg_http_reply>
}
 8013724:	e02f      	b.n	8013786 <handle_firmware_activate+0xbe>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013726:	f107 0318 	add.w	r3, r7, #24
 801372a:	491f      	ldr	r1, [pc, #124]	@ (80137a8 <handle_firmware_activate+0xe0>)
 801372c:	4618      	mov	r0, r3
 801372e:	f01e fbd1 	bl	8031ed4 <mg_str_s>
 8013732:	6839      	ldr	r1, [r7, #0]
 8013734:	2300      	movs	r3, #0
 8013736:	9300      	str	r3, [sp, #0]
 8013738:	f107 0318 	add.w	r3, r7, #24
 801373c:	cb0c      	ldmia	r3, {r2, r3}
 801373e:	c903      	ldmia	r1, {r0, r1}
 8013740:	f01e fc9b 	bl	803207a <mg_match>
 8013744:	4603      	mov	r3, r0
 8013746:	2b00      	cmp	r3, #0
 8013748:	d016      	beq.n	8013778 <handle_firmware_activate+0xb0>
	    if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 801374a:	4b12      	ldr	r3, [pc, #72]	@ (8013794 <handle_firmware_activate+0xcc>)
 801374c:	69db      	ldr	r3, [r3, #28]
 801374e:	4912      	ldr	r1, [pc, #72]	@ (8013798 <handle_firmware_activate+0xd0>)
 8013750:	4816      	ldr	r0, [pc, #88]	@ (80137ac <handle_firmware_activate+0xe4>)
 8013752:	4798      	blx	r3
 8013754:	4603      	mov	r3, r0
 8013756:	2b00      	cmp	r3, #0
 8013758:	d006      	beq.n	8013768 <handle_firmware_activate+0xa0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 801375a:	4b10      	ldr	r3, [pc, #64]	@ (801379c <handle_firmware_activate+0xd4>)
 801375c:	4a10      	ldr	r2, [pc, #64]	@ (80137a0 <handle_firmware_activate+0xd8>)
 801375e:	21c8      	movs	r1, #200	@ 0xc8
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f014 ff0b 	bl	802857c <mg_http_reply>
}
 8013766:	e00e      	b.n	8013786 <handle_firmware_activate+0xbe>
			mg_http_reply(c, 500, headers, //TODO delete for release,
 8013768:	4b11      	ldr	r3, [pc, #68]	@ (80137b0 <handle_firmware_activate+0xe8>)
 801376a:	4a0d      	ldr	r2, [pc, #52]	@ (80137a0 <handle_firmware_activate+0xd8>)
 801376c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f014 ff03 	bl	802857c <mg_http_reply>
}
 8013776:	e006      	b.n	8013786 <handle_firmware_activate+0xbe>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013778:	4b0e      	ldr	r3, [pc, #56]	@ (80137b4 <handle_firmware_activate+0xec>)
 801377a:	4a09      	ldr	r2, [pc, #36]	@ (80137a0 <handle_firmware_activate+0xd8>)
 801377c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f014 fefb 	bl	802857c <mg_http_reply>
}
 8013786:	bf00      	nop
 8013788:	3720      	adds	r7, #32
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
 801378e:	bf00      	nop
 8013790:	0803f884 	.word	0x0803f884
 8013794:	2000001c 	.word	0x2000001c
 8013798:	08040008 	.word	0x08040008
 801379c:	08040018 	.word	0x08040018
 80137a0:	0803f8bc 	.word	0x0803f8bc
 80137a4:	08040050 	.word	0x08040050
 80137a8:	0803f92c 	.word	0x0803f92c
 80137ac:	0803ff3c 	.word	0x0803ff3c
 80137b0:	0804008c 	.word	0x0804008c
 80137b4:	080400d0 	.word	0x080400d0

080137b8 <handle_firmware_deactivate>:

static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b086      	sub	sp, #24
 80137bc:	af02      	add	r7, sp, #8
 80137be:	6078      	str	r0, [r7, #4]
 80137c0:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80137c2:	f107 0308 	add.w	r3, r7, #8
 80137c6:	4918      	ldr	r1, [pc, #96]	@ (8013828 <handle_firmware_deactivate+0x70>)
 80137c8:	4618      	mov	r0, r3
 80137ca:	f01e fb83 	bl	8031ed4 <mg_str_s>
 80137ce:	6839      	ldr	r1, [r7, #0]
 80137d0:	2300      	movs	r3, #0
 80137d2:	9300      	str	r3, [sp, #0]
 80137d4:	f107 0308 	add.w	r3, r7, #8
 80137d8:	cb0c      	ldmia	r3, {r2, r3}
 80137da:	c903      	ldmia	r1, {r0, r1}
 80137dc:	f01e fc4d 	bl	803207a <mg_match>
 80137e0:	4603      	mov	r3, r0
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d014      	beq.n	8013810 <handle_firmware_deactivate+0x58>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 80137e6:	4b11      	ldr	r3, [pc, #68]	@ (801382c <handle_firmware_deactivate+0x74>)
 80137e8:	6a1b      	ldr	r3, [r3, #32]
 80137ea:	4811      	ldr	r0, [pc, #68]	@ (8013830 <handle_firmware_deactivate+0x78>)
 80137ec:	4798      	blx	r3
 80137ee:	4603      	mov	r3, r0
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d006      	beq.n	8013802 <handle_firmware_deactivate+0x4a>

			mg_http_reply(c, 200, headers, //TODO delete for release,
 80137f4:	4b0f      	ldr	r3, [pc, #60]	@ (8013834 <handle_firmware_deactivate+0x7c>)
 80137f6:	4a10      	ldr	r2, [pc, #64]	@ (8013838 <handle_firmware_deactivate+0x80>)
 80137f8:	21c8      	movs	r1, #200	@ 0xc8
 80137fa:	6878      	ldr	r0, [r7, #4]
 80137fc:	f014 febe 	bl	802857c <mg_http_reply>
				}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 8013800:	e00d      	b.n	801381e <handle_firmware_deactivate+0x66>
					mg_http_reply(c, 200, headers, //TODO delete for release,
 8013802:	4b0e      	ldr	r3, [pc, #56]	@ (801383c <handle_firmware_deactivate+0x84>)
 8013804:	4a0c      	ldr	r2, [pc, #48]	@ (8013838 <handle_firmware_deactivate+0x80>)
 8013806:	21c8      	movs	r1, #200	@ 0xc8
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f014 feb7 	bl	802857c <mg_http_reply>
}
 801380e:	e006      	b.n	801381e <handle_firmware_deactivate+0x66>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013810:	4b0b      	ldr	r3, [pc, #44]	@ (8013840 <handle_firmware_deactivate+0x88>)
 8013812:	4a09      	ldr	r2, [pc, #36]	@ (8013838 <handle_firmware_deactivate+0x80>)
 8013814:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013818:	6878      	ldr	r0, [r7, #4]
 801381a:	f014 feaf 	bl	802857c <mg_http_reply>
}
 801381e:	bf00      	nop
 8013820:	3710      	adds	r7, #16
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}
 8013826:	bf00      	nop
 8013828:	0803f92c 	.word	0x0803f92c
 801382c:	2000001c 	.word	0x2000001c
 8013830:	08040008 	.word	0x08040008
 8013834:	08040128 	.word	0x08040128
 8013838:	0803f8bc 	.word	0x0803f8bc
 801383c:	08040164 	.word	0x08040164
 8013840:	0803fe7c 	.word	0x0803fe7c

08013844 <handle_web_files_remove>:

static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 8013844:	b580      	push	{r7, lr}
 8013846:	b086      	sub	sp, #24
 8013848:	af02      	add	r7, sp, #8
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 801384e:	f107 0308 	add.w	r3, r7, #8
 8013852:	4915      	ldr	r1, [pc, #84]	@ (80138a8 <handle_web_files_remove+0x64>)
 8013854:	4618      	mov	r0, r3
 8013856:	f01e fb3d 	bl	8031ed4 <mg_str_s>
 801385a:	6839      	ldr	r1, [r7, #0]
 801385c:	2300      	movs	r3, #0
 801385e:	9300      	str	r3, [sp, #0]
 8013860:	f107 0308 	add.w	r3, r7, #8
 8013864:	cb0c      	ldmia	r3, {r2, r3}
 8013866:	c903      	ldmia	r1, {r0, r1}
 8013868:	f01e fc07 	bl	803207a <mg_match>
 801386c:	4603      	mov	r3, r0
 801386e:	2b00      	cmp	r3, #0
 8013870:	d00e      	beq.n	8013890 <handle_web_files_remove+0x4c>
			mg_fs_lfs.rm("/web");
 8013872:	4b0e      	ldr	r3, [pc, #56]	@ (80138ac <handle_web_files_remove+0x68>)
 8013874:	6a1b      	ldr	r3, [r3, #32]
 8013876:	480e      	ldr	r0, [pc, #56]	@ (80138b0 <handle_web_files_remove+0x6c>)
 8013878:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 801387a:	4b0c      	ldr	r3, [pc, #48]	@ (80138ac <handle_web_files_remove+0x68>)
 801387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801387e:	480c      	ldr	r0, [pc, #48]	@ (80138b0 <handle_web_files_remove+0x6c>)
 8013880:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8013882:	4b0c      	ldr	r3, [pc, #48]	@ (80138b4 <handle_web_files_remove+0x70>)
 8013884:	4a0c      	ldr	r2, [pc, #48]	@ (80138b8 <handle_web_files_remove+0x74>)
 8013886:	21c8      	movs	r1, #200	@ 0xc8
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f014 fe77 	bl	802857c <mg_http_reply>
			    "{\"status\":\"success\",\"message\":\"All web interface files are deleted\"}\r\n");
    }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
    }
}
 801388e:	e006      	b.n	801389e <handle_web_files_remove+0x5a>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013890:	4b0a      	ldr	r3, [pc, #40]	@ (80138bc <handle_web_files_remove+0x78>)
 8013892:	4a09      	ldr	r2, [pc, #36]	@ (80138b8 <handle_web_files_remove+0x74>)
 8013894:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f014 fe6f 	bl	802857c <mg_http_reply>
}
 801389e:	bf00      	nop
 80138a0:	3710      	adds	r7, #16
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
 80138a6:	bf00      	nop
 80138a8:	0803f92c 	.word	0x0803f92c
 80138ac:	2000001c 	.word	0x2000001c
 80138b0:	080401a8 	.word	0x080401a8
 80138b4:	080401b0 	.word	0x080401b0
 80138b8:	0803f8bc 	.word	0x0803f8bc
 80138bc:	0803fe7c 	.word	0x0803fe7c

080138c0 <handle_fs_mkdir>:

// Функция для создания папки
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b0c6      	sub	sp, #280	@ 0x118
 80138c4:	af02      	add	r7, sp, #8
 80138c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80138ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80138ce:	6018      	str	r0, [r3, #0]
 80138d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80138d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80138d8:	6019      	str	r1, [r3, #0]
  char name[123];
  char path[MG_PATH_MAX];

  if (mg_match(hm->method, mg_str("POST"), NULL)){
 80138da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80138de:	4934      	ldr	r1, [pc, #208]	@ (80139b0 <handle_fs_mkdir+0xf0>)
 80138e0:	4618      	mov	r0, r3
 80138e2:	f01e faf7 	bl	8031ed4 <mg_str_s>
 80138e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80138ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80138ee:	6819      	ldr	r1, [r3, #0]
 80138f0:	2300      	movs	r3, #0
 80138f2:	9300      	str	r3, [sp, #0]
 80138f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80138f8:	cb0c      	ldmia	r3, {r2, r3}
 80138fa:	c903      	ldmia	r1, {r0, r1}
 80138fc:	f01e fbbd 	bl	803207a <mg_match>
 8013900:	4603      	mov	r3, r0
 8013902:	2b00      	cmp	r3, #0
 8013904:	d043      	beq.n	801398e <handle_fs_mkdir+0xce>
			// Получаем имя папки из параметра запроса
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 8013906:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801390a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	f503 7000 	add.w	r0, r3, #512	@ 0x200
 8013914:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8013918:	237b      	movs	r3, #123	@ 0x7b
 801391a:	4926      	ldr	r1, [pc, #152]	@ (80139b4 <handle_fs_mkdir+0xf4>)
 801391c:	f013 fca0 	bl	8027260 <mg_http_get_var>
 8013920:	4603      	mov	r3, r0
 8013922:	2b00      	cmp	r3, #0
 8013924:	dd27      	ble.n	8013976 <handle_fs_mkdir+0xb6>
		// Формируем полный путь
		snprintf(path, sizeof(path), "/web/%s", name);
 8013926:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801392a:	f107 000c 	add.w	r0, r7, #12
 801392e:	4a22      	ldr	r2, [pc, #136]	@ (80139b8 <handle_fs_mkdir+0xf8>)
 8013930:	2180      	movs	r1, #128	@ 0x80
 8013932:	f021 feab 	bl	803568c <snprintf>

		// Создаем папку
		if (mg_fs_lfs.mkd(path)) {
 8013936:	4b21      	ldr	r3, [pc, #132]	@ (80139bc <handle_fs_mkdir+0xfc>)
 8013938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801393a:	f107 020c 	add.w	r2, r7, #12
 801393e:	4610      	mov	r0, r2
 8013940:	4798      	blx	r3
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d00a      	beq.n	801395e <handle_fs_mkdir+0x9e>
		  // Если создание успешно, отправляем положительный ответ
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 8013948:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801394c:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8013950:	4b1b      	ldr	r3, [pc, #108]	@ (80139c0 <handle_fs_mkdir+0x100>)
 8013952:	4a1c      	ldr	r2, [pc, #112]	@ (80139c4 <handle_fs_mkdir+0x104>)
 8013954:	21c8      	movs	r1, #200	@ 0xc8
 8013956:	6800      	ldr	r0, [r0, #0]
 8013958:	f014 fe10 	bl	802857c <mg_http_reply>
	  }
  }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
  }
}
 801395c:	e022      	b.n	80139a4 <handle_fs_mkdir+0xe4>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 801395e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013962:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8013966:	4b18      	ldr	r3, [pc, #96]	@ (80139c8 <handle_fs_mkdir+0x108>)
 8013968:	4a16      	ldr	r2, [pc, #88]	@ (80139c4 <handle_fs_mkdir+0x104>)
 801396a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801396e:	6800      	ldr	r0, [r0, #0]
 8013970:	f014 fe04 	bl	802857c <mg_http_reply>
}
 8013974:	e016      	b.n	80139a4 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013976:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801397a:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 801397e:	4b13      	ldr	r3, [pc, #76]	@ (80139cc <handle_fs_mkdir+0x10c>)
 8013980:	4a10      	ldr	r2, [pc, #64]	@ (80139c4 <handle_fs_mkdir+0x104>)
 8013982:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013986:	6800      	ldr	r0, [r0, #0]
 8013988:	f014 fdf8 	bl	802857c <mg_http_reply>
}
 801398c:	e00a      	b.n	80139a4 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801398e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013992:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8013996:	4b0e      	ldr	r3, [pc, #56]	@ (80139d0 <handle_fs_mkdir+0x110>)
 8013998:	4a0a      	ldr	r2, [pc, #40]	@ (80139c4 <handle_fs_mkdir+0x104>)
 801399a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801399e:	6800      	ldr	r0, [r0, #0]
 80139a0:	f014 fdec 	bl	802857c <mg_http_reply>
}
 80139a4:	bf00      	nop
 80139a6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}
 80139ae:	bf00      	nop
 80139b0:	0803f92c 	.word	0x0803f92c
 80139b4:	080401f8 	.word	0x080401f8
 80139b8:	08040200 	.word	0x08040200
 80139bc:	2000001c 	.word	0x2000001c
 80139c0:	08040208 	.word	0x08040208
 80139c4:	0803f8bc 	.word	0x0803f8bc
 80139c8:	0804023c 	.word	0x0804023c
 80139cc:	08040278 	.word	0x08040278
 80139d0:	0803fe7c 	.word	0x0803fe7c

080139d4 <handle_fs_get_log>:

// function for show logging
// function for show logging
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b090      	sub	sp, #64	@ 0x40
 80139d8:	af02      	add	r7, sp, #8
 80139da:	60f8      	str	r0, [r7, #12]
 80139dc:	60b9      	str	r1, [r7, #8]
 80139de:	607a      	str	r2, [r7, #4]

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80139e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80139e4:	492c      	ldr	r1, [pc, #176]	@ (8013a98 <handle_fs_get_log+0xc4>)
 80139e6:	4618      	mov	r0, r3
 80139e8:	f01e fa74 	bl	8031ed4 <mg_str_s>
 80139ec:	68b9      	ldr	r1, [r7, #8]
 80139ee:	2300      	movs	r3, #0
 80139f0:	9300      	str	r3, [sp, #0]
 80139f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80139f6:	cb0c      	ldmia	r3, {r2, r3}
 80139f8:	c903      	ldmia	r1, {r0, r1}
 80139fa:	f01e fb3e 	bl	803207a <mg_match>
 80139fe:	4603      	mov	r3, r0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d02b      	beq.n	8013a5c <handle_fs_get_log+0x88>

		struct mg_http_serve_opts opts = {
 8013a04:	f107 0310 	add.w	r3, r7, #16
 8013a08:	2200      	movs	r2, #0
 8013a0a:	601a      	str	r2, [r3, #0]
 8013a0c:	605a      	str	r2, [r3, #4]
 8013a0e:	609a      	str	r2, [r3, #8]
 8013a10:	60da      	str	r2, [r3, #12]
 8013a12:	611a      	str	r2, [r3, #16]
 8013a14:	615a      	str	r2, [r3, #20]
 8013a16:	4b21      	ldr	r3, [pc, #132]	@ (8013a9c <handle_fs_get_log+0xc8>)
 8013a18:	613b      	str	r3, [r7, #16]
 8013a1a:	4b21      	ldr	r3, [pc, #132]	@ (8013aa0 <handle_fs_get_log+0xcc>)
 8013a1c:	627b      	str	r3, [r7, #36]	@ 0x24
			.root_dir = "/log",
			.fs = &mg_fs_lfs
		};

		switch (number) {
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d003      	beq.n	8013a2c <handle_fs_get_log+0x58>
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2b01      	cmp	r3, #1
 8013a28:	d008      	beq.n	8013a3c <handle_fs_get_log+0x68>
 8013a2a:	e00f      	b.n	8013a4c <handle_fs_get_log+0x78>
			case 0:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013a2c:	f107 0310 	add.w	r3, r7, #16
 8013a30:	4a1c      	ldr	r2, [pc, #112]	@ (8013aa4 <handle_fs_get_log+0xd0>)
 8013a32:	68b9      	ldr	r1, [r7, #8]
 8013a34:	68f8      	ldr	r0, [r7, #12]
 8013a36:	f014 ff95 	bl	8028964 <mg_http_serve_file>
				break;
 8013a3a:	e029      	b.n	8013a90 <handle_fs_get_log+0xbc>
			case 1:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8013a3c:	f107 0310 	add.w	r3, r7, #16
 8013a40:	4a19      	ldr	r2, [pc, #100]	@ (8013aa8 <handle_fs_get_log+0xd4>)
 8013a42:	68b9      	ldr	r1, [r7, #8]
 8013a44:	68f8      	ldr	r0, [r7, #12]
 8013a46:	f014 ff8d 	bl	8028964 <mg_http_serve_file>
				break;
 8013a4a:	e021      	b.n	8013a90 <handle_fs_get_log+0xbc>
			default:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013a4c:	f107 0310 	add.w	r3, r7, #16
 8013a50:	4a14      	ldr	r2, [pc, #80]	@ (8013aa4 <handle_fs_get_log+0xd0>)
 8013a52:	68b9      	ldr	r1, [r7, #8]
 8013a54:	68f8      	ldr	r0, [r7, #12]
 8013a56:	f014 ff85 	bl	8028964 <mg_http_serve_file>
				break;
 8013a5a:	e019      	b.n	8013a90 <handle_fs_get_log+0xbc>
		}


	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013a5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013a60:	4912      	ldr	r1, [pc, #72]	@ (8013aac <handle_fs_get_log+0xd8>)
 8013a62:	4618      	mov	r0, r3
 8013a64:	f01e fa36 	bl	8031ed4 <mg_str_s>
 8013a68:	68b9      	ldr	r1, [r7, #8]
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	9300      	str	r3, [sp, #0]
 8013a6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013a72:	cb0c      	ldmia	r3, {r2, r3}
 8013a74:	c903      	ldmia	r1, {r0, r1}
 8013a76:	f01e fb00 	bl	803207a <mg_match>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d107      	bne.n	8013a90 <handle_fs_get_log+0xbc>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013a80:	4b0b      	ldr	r3, [pc, #44]	@ (8013ab0 <handle_fs_get_log+0xdc>)
 8013a82:	4a0c      	ldr	r2, [pc, #48]	@ (8013ab4 <handle_fs_get_log+0xe0>)
 8013a84:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013a88:	68f8      	ldr	r0, [r7, #12]
 8013a8a:	f014 fd77 	bl	802857c <mg_http_reply>
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}
}
 8013a8e:	e7ff      	b.n	8013a90 <handle_fs_get_log+0xbc>
 8013a90:	bf00      	nop
 8013a92:	3738      	adds	r7, #56	@ 0x38
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}
 8013a98:	0803f884 	.word	0x0803f884
 8013a9c:	080402b4 	.word	0x080402b4
 8013aa0:	2000001c 	.word	0x2000001c
 8013aa4:	080402bc 	.word	0x080402bc
 8013aa8:	080402cc 	.word	0x080402cc
 8013aac:	0803f92c 	.word	0x0803f92c
 8013ab0:	080400d0 	.word	0x080400d0
 8013ab4:	0803f8bc 	.word	0x0803f8bc

08013ab8 <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b0ac      	sub	sp, #176	@ 0xb0
 8013abc:	af02      	add	r7, sp, #8
 8013abe:	60f8      	str	r0, [r7, #12]
 8013ac0:	60b9      	str	r1, [r7, #8]
 8013ac2:	607a      	str	r2, [r7, #4]

	if (ev == MG_EV_HTTP_MSG) {
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	2b0b      	cmp	r3, #11
 8013ac8:	f040 81c0 	bne.w	8013e4c <dashboard+0x394>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8013ad2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013ad6:	49b5      	ldr	r1, [pc, #724]	@ (8013dac <dashboard+0x2f4>)
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f01e f9fb 	bl	8031ed4 <mg_str_s>
 8013ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	9300      	str	r3, [sp, #0]
 8013ae6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013aea:	cb0c      	ldmia	r3, {r2, r3}
 8013aec:	c903      	ldmia	r1, {r0, r1}
 8013aee:	f01e fac4 	bl	803207a <mg_match>
 8013af2:	4603      	mov	r3, r0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d003      	beq.n	8013b00 <dashboard+0x48>
            	handle_OPTIONS_method(c);
 8013af8:	68f8      	ldr	r0, [r7, #12]
 8013afa:	f7ff fce5 	bl	80134c8 <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 8013afe:	e1a5      	b.n	8013e4c <dashboard+0x394>
        }else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 8013b00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013b04:	49aa      	ldr	r1, [pc, #680]	@ (8013db0 <dashboard+0x2f8>)
 8013b06:	4618      	mov	r0, r3
 8013b08:	f01e f9e4 	bl	8031ed4 <mg_str_s>
 8013b0c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013b10:	2300      	movs	r3, #0
 8013b12:	9300      	str	r3, [sp, #0]
 8013b14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013b18:	cb0c      	ldmia	r3, {r2, r3}
 8013b1a:	3108      	adds	r1, #8
 8013b1c:	c903      	ldmia	r1, {r0, r1}
 8013b1e:	f01e faac 	bl	803207a <mg_match>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d003      	beq.n	8013b30 <dashboard+0x78>
			handle_ram_status_get(c);
 8013b28:	68f8      	ldr	r0, [r7, #12]
 8013b2a:	f7fe ffc9 	bl	8012ac0 <handle_ram_status_get>
}
 8013b2e:	e18d      	b.n	8013e4c <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8013b30:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013b34:	499f      	ldr	r1, [pc, #636]	@ (8013db4 <dashboard+0x2fc>)
 8013b36:	4618      	mov	r0, r3
 8013b38:	f01e f9cc 	bl	8031ed4 <mg_str_s>
 8013b3c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013b40:	2300      	movs	r3, #0
 8013b42:	9300      	str	r3, [sp, #0]
 8013b44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013b48:	cb0c      	ldmia	r3, {r2, r3}
 8013b4a:	3108      	adds	r1, #8
 8013b4c:	c903      	ldmia	r1, {r0, r1}
 8013b4e:	f01e fa94 	bl	803207a <mg_match>
 8013b52:	4603      	mov	r3, r0
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d005      	beq.n	8013b64 <dashboard+0xac>
			handle_io_status_get(c, hm);
 8013b58:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013b5c:	68f8      	ldr	r0, [r7, #12]
 8013b5e:	f7ff f869 	bl	8012c34 <handle_io_status_get>
}
 8013b62:	e173      	b.n	8013e4c <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8013b64:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013b68:	4993      	ldr	r1, [pc, #588]	@ (8013db8 <dashboard+0x300>)
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f01e f9b2 	bl	8031ed4 <mg_str_s>
 8013b70:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013b74:	2300      	movs	r3, #0
 8013b76:	9300      	str	r3, [sp, #0]
 8013b78:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013b7c:	cb0c      	ldmia	r3, {r2, r3}
 8013b7e:	3108      	adds	r1, #8
 8013b80:	c903      	ldmia	r1, {r0, r1}
 8013b82:	f01e fa7a 	bl	803207a <mg_match>
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d005      	beq.n	8013b98 <dashboard+0xe0>
			handle_mqtt_conf(c, hm);
 8013b8c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013b90:	68f8      	ldr	r0, [r7, #12]
 8013b92:	f7ff f92d 	bl	8012df0 <handle_mqtt_conf>
}
 8013b96:	e159      	b.n	8013e4c <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8013b98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013b9c:	4987      	ldr	r1, [pc, #540]	@ (8013dbc <dashboard+0x304>)
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f01e f998 	bl	8031ed4 <mg_str_s>
 8013ba4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013ba8:	2300      	movs	r3, #0
 8013baa:	9300      	str	r3, [sp, #0]
 8013bac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013bb0:	cb0c      	ldmia	r3, {r2, r3}
 8013bb2:	3108      	adds	r1, #8
 8013bb4:	c903      	ldmia	r1, {r0, r1}
 8013bb6:	f01e fa60 	bl	803207a <mg_match>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d005      	beq.n	8013bcc <dashboard+0x114>
			handle_dev_status(c, hm);
 8013bc0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013bc4:	68f8      	ldr	r0, [r7, #12]
 8013bc6:	f7ff fa93 	bl	80130f0 <handle_dev_status>
}
 8013bca:	e13f      	b.n	8013e4c <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8013bcc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013bd0:	497b      	ldr	r1, [pc, #492]	@ (8013dc0 <dashboard+0x308>)
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f01e f97e 	bl	8031ed4 <mg_str_s>
 8013bd8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013bdc:	2300      	movs	r3, #0
 8013bde:	9300      	str	r3, [sp, #0]
 8013be0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013be4:	cb0c      	ldmia	r3, {r2, r3}
 8013be6:	3108      	adds	r1, #8
 8013be8:	c903      	ldmia	r1, {r0, r1}
 8013bea:	f01e fa46 	bl	803207a <mg_match>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d006      	beq.n	8013c02 <dashboard+0x14a>
			handle_fs_get_log(c, hm, 0);
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013bfa:	68f8      	ldr	r0, [r7, #12]
 8013bfc:	f7ff feea 	bl	80139d4 <handle_fs_get_log>
}
 8013c00:	e124      	b.n	8013e4c <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8013c02:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013c06:	496f      	ldr	r1, [pc, #444]	@ (8013dc4 <dashboard+0x30c>)
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f01e f963 	bl	8031ed4 <mg_str_s>
 8013c0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013c12:	2300      	movs	r3, #0
 8013c14:	9300      	str	r3, [sp, #0]
 8013c16:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013c1a:	cb0c      	ldmia	r3, {r2, r3}
 8013c1c:	3108      	adds	r1, #8
 8013c1e:	c903      	ldmia	r1, {r0, r1}
 8013c20:	f01e fa2b 	bl	803207a <mg_match>
 8013c24:	4603      	mov	r3, r0
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d006      	beq.n	8013c38 <dashboard+0x180>
			handle_fs_get_log(c, hm, 1);
 8013c2a:	2201      	movs	r2, #1
 8013c2c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013c30:	68f8      	ldr	r0, [r7, #12]
 8013c32:	f7ff fecf 	bl	80139d4 <handle_fs_get_log>
}
 8013c36:	e109      	b.n	8013e4c <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8013c38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013c3c:	4962      	ldr	r1, [pc, #392]	@ (8013dc8 <dashboard+0x310>)
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f01e f948 	bl	8031ed4 <mg_str_s>
 8013c44:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013c48:	2300      	movs	r3, #0
 8013c4a:	9300      	str	r3, [sp, #0]
 8013c4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013c50:	cb0c      	ldmia	r3, {r2, r3}
 8013c52:	3108      	adds	r1, #8
 8013c54:	c903      	ldmia	r1, {r0, r1}
 8013c56:	f01e fa10 	bl	803207a <mg_match>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d005      	beq.n	8013c6c <dashboard+0x1b4>
			handle_restart_mcu(c, hm);
 8013c60:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013c64:	68f8      	ldr	r0, [r7, #12]
 8013c66:	f7ff fc41 	bl	80134ec <handle_restart_mcu>
}
 8013c6a:	e0ef      	b.n	8013e4c <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8013c6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8013c70:	4956      	ldr	r1, [pc, #344]	@ (8013dcc <dashboard+0x314>)
 8013c72:	4618      	mov	r0, r3
 8013c74:	f01e f92e 	bl	8031ed4 <mg_str_s>
 8013c78:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	9300      	str	r3, [sp, #0]
 8013c80:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8013c84:	cb0c      	ldmia	r3, {r2, r3}
 8013c86:	3108      	adds	r1, #8
 8013c88:	c903      	ldmia	r1, {r0, r1}
 8013c8a:	f01e f9f6 	bl	803207a <mg_match>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d005      	beq.n	8013ca0 <dashboard+0x1e8>
			handle_firmware_upload(c, hm);
 8013c94:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013c98:	68f8      	ldr	r0, [r7, #12]
 8013c9a:	f7ff fc6d 	bl	8013578 <handle_firmware_upload>
}
 8013c9e:	e0d5      	b.n	8013e4c <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8013ca0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013ca4:	494a      	ldr	r1, [pc, #296]	@ (8013dd0 <dashboard+0x318>)
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f01e f914 	bl	8031ed4 <mg_str_s>
 8013cac:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	9300      	str	r3, [sp, #0]
 8013cb4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013cb8:	cb0c      	ldmia	r3, {r2, r3}
 8013cba:	3108      	adds	r1, #8
 8013cbc:	c903      	ldmia	r1, {r0, r1}
 8013cbe:	f01e f9dc 	bl	803207a <mg_match>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d005      	beq.n	8013cd4 <dashboard+0x21c>
			handle_firmware_md5(c, hm);
 8013cc8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013ccc:	68f8      	ldr	r0, [r7, #12]
 8013cce:	f7ff fcad 	bl	801362c <handle_firmware_md5>
}
 8013cd2:	e0bb      	b.n	8013e4c <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/activate_and_reboot"), NULL)){
 8013cd4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8013cd8:	493e      	ldr	r1, [pc, #248]	@ (8013dd4 <dashboard+0x31c>)
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f01e f8fa 	bl	8031ed4 <mg_str_s>
 8013ce0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	9300      	str	r3, [sp, #0]
 8013ce8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8013cec:	cb0c      	ldmia	r3, {r2, r3}
 8013cee:	3108      	adds	r1, #8
 8013cf0:	c903      	ldmia	r1, {r0, r1}
 8013cf2:	f01e f9c2 	bl	803207a <mg_match>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d005      	beq.n	8013d08 <dashboard+0x250>
			handle_firmware_activate(c, hm);
 8013cfc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013d00:	68f8      	ldr	r0, [r7, #12]
 8013d02:	f7ff fce1 	bl	80136c8 <handle_firmware_activate>
}
 8013d06:	e0a1      	b.n	8013e4c <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8013d08:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8013d0c:	4932      	ldr	r1, [pc, #200]	@ (8013dd8 <dashboard+0x320>)
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f01e f8e0 	bl	8031ed4 <mg_str_s>
 8013d14:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013d18:	2300      	movs	r3, #0
 8013d1a:	9300      	str	r3, [sp, #0]
 8013d1c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8013d20:	cb0c      	ldmia	r3, {r2, r3}
 8013d22:	3108      	adds	r1, #8
 8013d24:	c903      	ldmia	r1, {r0, r1}
 8013d26:	f01e f9a8 	bl	803207a <mg_match>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d005      	beq.n	8013d3c <dashboard+0x284>
			handle_firmware_deactivate(c, hm);
 8013d30:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013d34:	68f8      	ldr	r0, [r7, #12]
 8013d36:	f7ff fd3f 	bl	80137b8 <handle_firmware_deactivate>
}
 8013d3a:	e087      	b.n	8013e4c <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8013d3c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013d40:	4926      	ldr	r1, [pc, #152]	@ (8013ddc <dashboard+0x324>)
 8013d42:	4618      	mov	r0, r3
 8013d44:	f01e f8c6 	bl	8031ed4 <mg_str_s>
 8013d48:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	9300      	str	r3, [sp, #0]
 8013d50:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013d54:	cb0c      	ldmia	r3, {r2, r3}
 8013d56:	3108      	adds	r1, #8
 8013d58:	c903      	ldmia	r1, {r0, r1}
 8013d5a:	f01e f98e 	bl	803207a <mg_match>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d005      	beq.n	8013d70 <dashboard+0x2b8>
			 handle_web_files_remove(c, hm);
 8013d64:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013d68:	68f8      	ldr	r0, [r7, #12]
 8013d6a:	f7ff fd6b 	bl	8013844 <handle_web_files_remove>
}
 8013d6e:	e06d      	b.n	8013e4c <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8013d70:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8013d74:	491a      	ldr	r1, [pc, #104]	@ (8013de0 <dashboard+0x328>)
 8013d76:	4618      	mov	r0, r3
 8013d78:	f01e f8ac 	bl	8031ed4 <mg_str_s>
 8013d7c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013d80:	2300      	movs	r3, #0
 8013d82:	9300      	str	r3, [sp, #0]
 8013d84:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8013d88:	cb0c      	ldmia	r3, {r2, r3}
 8013d8a:	3108      	adds	r1, #8
 8013d8c:	c903      	ldmia	r1, {r0, r1}
 8013d8e:	f01e f974 	bl	803207a <mg_match>
 8013d92:	4603      	mov	r3, r0
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d02b      	beq.n	8013df0 <dashboard+0x338>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8013d98:	4b12      	ldr	r3, [pc, #72]	@ (8013de4 <dashboard+0x32c>)
 8013d9a:	9300      	str	r3, [sp, #0]
 8013d9c:	4b12      	ldr	r3, [pc, #72]	@ (8013de8 <dashboard+0x330>)
 8013d9e:	4a13      	ldr	r2, [pc, #76]	@ (8013dec <dashboard+0x334>)
 8013da0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013da4:	68f8      	ldr	r0, [r7, #12]
 8013da6:	f015 fda5 	bl	80298f4 <mg_http_upload>
}
 8013daa:	e04f      	b.n	8013e4c <dashboard+0x394>
 8013dac:	080402dc 	.word	0x080402dc
 8013db0:	080402e4 	.word	0x080402e4
 8013db4:	080402f4 	.word	0x080402f4
 8013db8:	08040304 	.word	0x08040304
 8013dbc:	08040318 	.word	0x08040318
 8013dc0:	0804032c 	.word	0x0804032c
 8013dc4:	0804033c 	.word	0x0804033c
 8013dc8:	08040350 	.word	0x08040350
 8013dcc:	08040364 	.word	0x08040364
 8013dd0:	0804037c 	.word	0x0804037c
 8013dd4:	08040390 	.word	0x08040390
 8013dd8:	080403b4 	.word	0x080403b4
 8013ddc:	080403d0 	.word	0x080403d0
 8013de0:	080403ec 	.word	0x080403ec
 8013de4:	0016e360 	.word	0x0016e360
 8013de8:	080401a8 	.word	0x080401a8
 8013dec:	2000001c 	.word	0x2000001c
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8013df0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8013df4:	4917      	ldr	r1, [pc, #92]	@ (8013e54 <dashboard+0x39c>)
 8013df6:	4618      	mov	r0, r3
 8013df8:	f01e f86c 	bl	8031ed4 <mg_str_s>
 8013dfc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013e00:	2300      	movs	r3, #0
 8013e02:	9300      	str	r3, [sp, #0]
 8013e04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8013e08:	cb0c      	ldmia	r3, {r2, r3}
 8013e0a:	3108      	adds	r1, #8
 8013e0c:	c903      	ldmia	r1, {r0, r1}
 8013e0e:	f01e f934 	bl	803207a <mg_match>
 8013e12:	4603      	mov	r3, r0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d005      	beq.n	8013e24 <dashboard+0x36c>
			 handle_fs_mkdir(c, hm);
 8013e18:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013e1c:	68f8      	ldr	r0, [r7, #12]
 8013e1e:	f7ff fd4f 	bl	80138c0 <handle_fs_mkdir>
}
 8013e22:	e013      	b.n	8013e4c <dashboard+0x394>
			struct mg_http_serve_opts opts = {
 8013e24:	f107 0314 	add.w	r3, r7, #20
 8013e28:	2200      	movs	r2, #0
 8013e2a:	601a      	str	r2, [r3, #0]
 8013e2c:	605a      	str	r2, [r3, #4]
 8013e2e:	609a      	str	r2, [r3, #8]
 8013e30:	60da      	str	r2, [r3, #12]
 8013e32:	611a      	str	r2, [r3, #16]
 8013e34:	615a      	str	r2, [r3, #20]
 8013e36:	4b08      	ldr	r3, [pc, #32]	@ (8013e58 <dashboard+0x3a0>)
 8013e38:	617b      	str	r3, [r7, #20]
 8013e3a:	4b08      	ldr	r3, [pc, #32]	@ (8013e5c <dashboard+0x3a4>)
 8013e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
			mg_http_serve_dir(c, ev_data, &opts);
 8013e3e:	f107 0314 	add.w	r3, r7, #20
 8013e42:	461a      	mov	r2, r3
 8013e44:	6879      	ldr	r1, [r7, #4]
 8013e46:	68f8      	ldr	r0, [r7, #12]
 8013e48:	f015 fc66 	bl	8029718 <mg_http_serve_dir>
}
 8013e4c:	bf00      	nop
 8013e4e:	37a8      	adds	r7, #168	@ 0xa8
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}
 8013e54:	08040408 	.word	0x08040408
 8013e58:	080401a8 	.word	0x080401a8
 8013e5c:	2000001c 	.word	0x2000001c

08013e60 <dash_hdl>:

void * dash_hdl (void){
 8013e60:	b480      	push	{r7}
 8013e62:	af00      	add	r7, sp, #0
	return &dashboard;
 8013e64:	4b02      	ldr	r3, [pc, #8]	@ (8013e70 <dash_hdl+0x10>)
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6e:	4770      	bx	lr
 8013e70:	08013ab9 	.word	0x08013ab9

08013e74 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
 8013e74:	b480      	push	{r7}
 8013e76:	b083      	sub	sp, #12
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
    r_w_parameter = func;
 8013e7c:	4a04      	ldr	r2, [pc, #16]	@ (8013e90 <reg_parameter_handler+0x1c>)
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	6013      	str	r3, [r2, #0]
}
 8013e82:	bf00      	nop
 8013e84:	370c      	adds	r7, #12
 8013e86:	46bd      	mov	sp, r7
 8013e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8c:	4770      	bx	lr
 8013e8e:	bf00      	nop
 8013e90:	20000b84 	.word	0x20000b84

08013e94 <_ZL9my_callocjj>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	683a      	ldr	r2, [r7, #0]
 8013ea2:	fb02 f303 	mul.w	r3, r2, r3
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f008 fd08 	bl	801c8bc <pvPortMalloc>
 8013eac:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d008      	beq.n	8013ec6 <_ZL9my_callocjj+0x32>
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	687a      	ldr	r2, [r7, #4]
 8013eb8:	fb02 f303 	mul.w	r3, r2, r3
 8013ebc:	461a      	mov	r2, r3
 8013ebe:	2100      	movs	r1, #0
 8013ec0:	68f8      	ldr	r0, [r7, #12]
 8013ec2:	f022 f90d 	bl	80360e0 <memset>
  return p;
 8013ec6:	68fb      	ldr	r3, [r7, #12]
}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3710      	adds	r7, #16
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}

08013ed0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
		{OUTPUT_SENSOR, 3}
    };

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;

static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8013ed0:	b590      	push	{r4, r7, lr}
 8013ed2:	b08d      	sub	sp, #52	@ 0x34
 8013ed4:	af02      	add	r7, sp, #8
 8013ed6:	6178      	str	r0, [r7, #20]
 8013ed8:	6139      	str	r1, [r7, #16]
 8013eda:	60fa      	str	r2, [r7, #12]

	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8013edc:	4b3a      	ldr	r3, [pc, #232]	@ (8013fc8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8013ede:	6818      	ldr	r0, [r3, #0]
 8013ee0:	697b      	ldr	r3, [r7, #20]
 8013ee2:	3308      	adds	r3, #8
 8013ee4:	9300      	str	r3, [sp, #0]
 8013ee6:	4b39      	ldr	r3, [pc, #228]	@ (8013fcc <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xfc>)
 8013ee8:	4a39      	ldr	r2, [pc, #228]	@ (8013fd0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x100>)
 8013eea:	2128      	movs	r1, #40	@ 0x28
 8013eec:	f01d fb0a 	bl	8031504 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8013ef0:	4b35      	ldr	r3, [pc, #212]	@ (8013fc8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8013ef2:	681c      	ldr	r4, [r3, #0]
 8013ef4:	4b34      	ldr	r3, [pc, #208]	@ (8013fc8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f7fc f9d1 	bl	80102a0 <strlen>
 8013efe:	4603      	mov	r3, r0
 8013f00:	4619      	mov	r1, r3
 8013f02:	4620      	mov	r0, r4
 8013f04:	f000 fd26 	bl	8014954 <set_device_conf_ip>


	for (size_t i = 0; i < sensor_count; i++) {
 8013f08:	2300      	movs	r3, #0
 8013f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8013f0c:	e052      	b.n	8013fb4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xe4>
	        int sensor_type = sensors[i].sensor_type;
 8013f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f10:	00db      	lsls	r3, r3, #3
 8013f12:	693a      	ldr	r2, [r7, #16]
 8013f14:	4413      	add	r3, r2
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	623b      	str	r3, [r7, #32]
	        int sensor_number = sensors[i].sensor_number;
 8013f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f1c:	00db      	lsls	r3, r3, #3
 8013f1e:	693a      	ldr	r2, [r7, #16]
 8013f20:	4413      	add	r3, r2
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	61fb      	str	r3, [r7, #28]
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8013f26:	4b2b      	ldr	r3, [pc, #172]	@ (8013fd4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8013f28:	6818      	ldr	r0, [r3, #0]
 8013f2a:	6a3b      	ldr	r3, [r7, #32]
 8013f2c:	b2da      	uxtb	r2, r3
 8013f2e:	69fb      	ldr	r3, [r7, #28]
 8013f30:	b2db      	uxtb	r3, r3
 8013f32:	2180      	movs	r1, #128	@ 0x80
 8013f34:	f000 fd40 	bl	80149b8 <get_config_topik_string>

			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8013f38:	4b27      	ldr	r3, [pc, #156]	@ (8013fd8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x108>)
 8013f3a:	6818      	ldr	r0, [r3, #0]
 8013f3c:	6a3b      	ldr	r3, [r7, #32]
 8013f3e:	b2da      	uxtb	r2, r3
 8013f40:	69fb      	ldr	r3, [r7, #28]
 8013f42:	b2db      	uxtb	r3, r3
 8013f44:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8013f48:	f000 fe10 	bl	8014b6c <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8013f4c:	4b21      	ldr	r3, [pc, #132]	@ (8013fd4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	4c22      	ldr	r4, [pc, #136]	@ (8013fdc <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8013f52:	463b      	mov	r3, r7
 8013f54:	4611      	mov	r1, r2
 8013f56:	4618      	mov	r0, r3
 8013f58:	f01d ffbc 	bl	8031ed4 <mg_str_s>
 8013f5c:	f104 0318 	add.w	r3, r4, #24
 8013f60:	463a      	mov	r2, r7
 8013f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f66:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8013f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8013fd8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x108>)
 8013f6c:	681a      	ldr	r2, [r3, #0]
 8013f6e:	4c1b      	ldr	r4, [pc, #108]	@ (8013fdc <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8013f70:	463b      	mov	r3, r7
 8013f72:	4611      	mov	r1, r2
 8013f74:	4618      	mov	r0, r3
 8013f76:	f01d ffad 	bl	8031ed4 <mg_str_s>
 8013f7a:	f104 0320 	add.w	r3, r4, #32
 8013f7e:	463a      	mov	r2, r7
 8013f80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f84:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8013f88:	4b14      	ldr	r3, [pc, #80]	@ (8013fdc <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8013f8a:	2201      	movs	r2, #1
 8013f8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8013f90:	4b12      	ldr	r3, [pc, #72]	@ (8013fdc <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8013f92:	2201      	movs	r2, #1
 8013f94:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8013f98:	4910      	ldr	r1, [pc, #64]	@ (8013fdc <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8013f9a:	6978      	ldr	r0, [r7, #20]
 8013f9c:	f018 ffec 	bl	802cf78 <mg_mqtt_pub>

			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8013fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8013fd4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	461a      	mov	r2, r3
 8013fa6:	490e      	ldr	r1, [pc, #56]	@ (8013fe0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8013fa8:	2001      	movs	r0, #1
 8013faa:	f7fe f8e1 	bl	8012170 <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8013fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fb0:	3301      	adds	r3, #1
 8013fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8013fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d3a8      	bcc.n	8013f0e <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x3e>

	}
}
 8013fbc:	bf00      	nop
 8013fbe:	bf00      	nop
 8013fc0:	372c      	adds	r7, #44	@ 0x2c
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd90      	pop	{r4, r7, pc}
 8013fc6:	bf00      	nop
 8013fc8:	20000be8 	.word	0x20000be8
 8013fcc:	080316eb 	.word	0x080316eb
 8013fd0:	08040424 	.word	0x08040424
 8013fd4:	20000b94 	.word	0x20000b94
 8013fd8:	20000b98 	.word	0x20000b98
 8013fdc:	20000ba4 	.word	0x20000ba4
 8013fe0:	08040428 	.word	0x08040428

08013fe4 <_ZL19mqtt_send_io_statusP13mg_connectionb>:


static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8013fe4:	b590      	push	{r4, r7, lr}
 8013fe6:	b08d      	sub	sp, #52	@ 0x34
 8013fe8:	af02      	add	r7, sp, #8
 8013fea:	60f8      	str	r0, [r7, #12]
 8013fec:	460b      	mov	r3, r1
 8013fee:	72fb      	strb	r3, [r7, #11]

	struct   DeviceStatus status;
	static struct DeviceStatus prev_status;
	uint8_t  i;
	char *   payload = NULL;
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	623b      	str	r3, [r7, #32]
	char *   topik = NULL;
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	61fb      	str	r3, [r7, #28]

	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8013ff8:	4b70      	ldr	r3, [pc, #448]	@ (80141bc <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1d8>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	f107 0014 	add.w	r0, r7, #20
 8014000:	2200      	movs	r2, #0
 8014002:	2101      	movs	r1, #1
 8014004:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014006:	4b6d      	ldr	r3, [pc, #436]	@ (80141bc <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1d8>)
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	f107 0214 	add.w	r2, r7, #20
 801400e:	1cd0      	adds	r0, r2, #3
 8014010:	2200      	movs	r2, #0
 8014012:	2102      	movs	r1, #2
 8014014:	4798      	blx	r3

	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014016:	f107 0314 	add.w	r3, r7, #20
 801401a:	2203      	movs	r2, #3
 801401c:	4968      	ldr	r1, [pc, #416]	@ (80141c0 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1dc>)
 801401e:	4618      	mov	r0, r3
 8014020:	f021 ffca 	bl	8035fb8 <memcmp>
 8014024:	4603      	mov	r3, r0
 8014026:	2b00      	cmp	r3, #0
 8014028:	d10e      	bne.n	8014048 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 801402a:	f107 0314 	add.w	r3, r7, #20
 801402e:	3303      	adds	r3, #3
 8014030:	2203      	movs	r2, #3
 8014032:	4964      	ldr	r1, [pc, #400]	@ (80141c4 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e0>)
 8014034:	4618      	mov	r0, r3
 8014036:	f021 ffbf 	bl	8035fb8 <memcmp>
 801403a:	4603      	mov	r3, r0
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 801403c:	2b00      	cmp	r3, #0
 801403e:	d103      	bne.n	8014048 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014040:	7afb      	ldrb	r3, [r7, #11]
 8014042:	2b00      	cmp	r3, #0
 8014044:	f000 80b5 	beq.w	80141b2 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1ce>
	    // Состояние изменилось, продолжаем
		memcpy(&prev_status, &status, sizeof(status));
 8014048:	4b5d      	ldr	r3, [pc, #372]	@ (80141c0 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1dc>)
 801404a:	f107 0214 	add.w	r2, r7, #20
 801404e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014052:	6018      	str	r0, [r3, #0]
 8014054:	3304      	adds	r3, #4
 8014056:	8019      	strh	r1, [r3, #0]

		//logging(L_INFO, "Send io status data to MQTT server");

		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8014058:	2101      	movs	r1, #1
 801405a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801405e:	f7ff ff19 	bl	8013e94 <_ZL9my_callocjj>
 8014062:	6238      	str	r0, [r7, #32]
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014064:	2101      	movs	r1, #1
 8014066:	2080      	movs	r0, #128	@ 0x80
 8014068:	f7ff ff14 	bl	8013e94 <_ZL9my_callocjj>
 801406c:	61f8      	str	r0, [r7, #28]

		for (i = 0; i < INPUTS_COUNT; i++){
 801406e:	2300      	movs	r3, #0
 8014070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014074:	e045      	b.n	8014102 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x11e>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8014076:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801407a:	3301      	adds	r3, #1
 801407c:	b2da      	uxtb	r2, r3
 801407e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014082:	3328      	adds	r3, #40	@ 0x28
 8014084:	443b      	add	r3, r7
 8014086:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 801408a:	9300      	str	r3, [sp, #0]
 801408c:	4613      	mov	r3, r2
 801408e:	2201      	movs	r2, #1
 8014090:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014094:	6a38      	ldr	r0, [r7, #32]
 8014096:	f000 ffcb 	bl	8015030 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 801409a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801409e:	3301      	adds	r3, #1
 80140a0:	b2db      	uxtb	r3, r3
 80140a2:	2201      	movs	r2, #1
 80140a4:	2180      	movs	r1, #128	@ 0x80
 80140a6:	69f8      	ldr	r0, [r7, #28]
 80140a8:	f001 f830 	bl	801510c <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 80140ac:	4c46      	ldr	r4, [pc, #280]	@ (80141c8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 80140ae:	463b      	mov	r3, r7
 80140b0:	69f9      	ldr	r1, [r7, #28]
 80140b2:	4618      	mov	r0, r3
 80140b4:	f01d ff0e 	bl	8031ed4 <mg_str_s>
 80140b8:	f104 0318 	add.w	r3, r4, #24
 80140bc:	463a      	mov	r2, r7
 80140be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140c2:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 80140c6:	4c40      	ldr	r4, [pc, #256]	@ (80141c8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 80140c8:	463b      	mov	r3, r7
 80140ca:	6a39      	ldr	r1, [r7, #32]
 80140cc:	4618      	mov	r0, r3
 80140ce:	f01d ff01 	bl	8031ed4 <mg_str_s>
 80140d2:	f104 0320 	add.w	r3, r4, #32
 80140d6:	463a      	mov	r2, r7
 80140d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140dc:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 80140e0:	4b39      	ldr	r3, [pc, #228]	@ (80141c8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 80140e2:	2200      	movs	r2, #0
 80140e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 80140e8:	4b37      	ldr	r3, [pc, #220]	@ (80141c8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 80140ea:	2200      	movs	r2, #0
 80140ec:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 80140f0:	4935      	ldr	r1, [pc, #212]	@ (80141c8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 80140f2:	68f8      	ldr	r0, [r7, #12]
 80140f4:	f018 ff40 	bl	802cf78 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 80140f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80140fc:	3301      	adds	r3, #1
 80140fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014102:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014106:	2b02      	cmp	r3, #2
 8014108:	d9b5      	bls.n	8014076 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x92>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}

		for (i = 0; i < OUTPUTS_COUNT; i++){
 801410a:	2300      	movs	r3, #0
 801410c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014110:	e045      	b.n	801419e <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1ba>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8014112:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014116:	3301      	adds	r3, #1
 8014118:	b2da      	uxtb	r2, r3
 801411a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801411e:	3328      	adds	r3, #40	@ 0x28
 8014120:	443b      	add	r3, r7
 8014122:	f813 3c11 	ldrb.w	r3, [r3, #-17]
 8014126:	9300      	str	r3, [sp, #0]
 8014128:	4613      	mov	r3, r2
 801412a:	2202      	movs	r2, #2
 801412c:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014130:	6a38      	ldr	r0, [r7, #32]
 8014132:	f000 ff7d 	bl	8015030 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8014136:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801413a:	3301      	adds	r3, #1
 801413c:	b2db      	uxtb	r3, r3
 801413e:	2202      	movs	r2, #2
 8014140:	2180      	movs	r1, #128	@ 0x80
 8014142:	69f8      	ldr	r0, [r7, #28]
 8014144:	f000 ffe2 	bl	801510c <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014148:	4c1f      	ldr	r4, [pc, #124]	@ (80141c8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 801414a:	463b      	mov	r3, r7
 801414c:	69f9      	ldr	r1, [r7, #28]
 801414e:	4618      	mov	r0, r3
 8014150:	f01d fec0 	bl	8031ed4 <mg_str_s>
 8014154:	f104 0318 	add.w	r3, r4, #24
 8014158:	463a      	mov	r2, r7
 801415a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801415e:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014162:	4c19      	ldr	r4, [pc, #100]	@ (80141c8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8014164:	463b      	mov	r3, r7
 8014166:	6a39      	ldr	r1, [r7, #32]
 8014168:	4618      	mov	r0, r3
 801416a:	f01d feb3 	bl	8031ed4 <mg_str_s>
 801416e:	f104 0320 	add.w	r3, r4, #32
 8014172:	463a      	mov	r2, r7
 8014174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014178:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 801417c:	4b12      	ldr	r3, [pc, #72]	@ (80141c8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 801417e:	2200      	movs	r2, #0
 8014180:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014184:	4b10      	ldr	r3, [pc, #64]	@ (80141c8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8014186:	2200      	movs	r2, #0
 8014188:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 801418c:	490e      	ldr	r1, [pc, #56]	@ (80141c8 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 801418e:	68f8      	ldr	r0, [r7, #12]
 8014190:	f018 fef2 	bl	802cf78 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014198:	3301      	adds	r3, #1
 801419a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801419e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80141a2:	2b02      	cmp	r3, #2
 80141a4:	d9b5      	bls.n	8014112 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x12e>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}


		free(payload);
 80141a6:	6a38      	ldr	r0, [r7, #32]
 80141a8:	f008 fc56 	bl	801ca58 <vPortFree>
		free(topik);
 80141ac:	69f8      	ldr	r0, [r7, #28]
 80141ae:	f008 fc53 	bl	801ca58 <vPortFree>
	}
}
 80141b2:	bf00      	nop
 80141b4:	372c      	adds	r7, #44	@ 0x2c
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd90      	pop	{r4, r7, pc}
 80141ba:	bf00      	nop
 80141bc:	20000bfc 	.word	0x20000bfc
 80141c0:	20000c00 	.word	0x20000c00
 80141c4:	20000c03 	.word	0x20000c03
 80141c8:	20000ba4 	.word	0x20000ba4

080141cc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:

static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 80141cc:	b590      	push	{r4, r7, lr}
 80141ce:	b089      	sub	sp, #36	@ 0x24
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6178      	str	r0, [r7, #20]
 80141d4:	6139      	str	r1, [r7, #16]
 80141d6:	60fa      	str	r2, [r7, #12]

	char * topik = NULL;
 80141d8:	2300      	movs	r3, #0
 80141da:	61bb      	str	r3, [r7, #24]

	for (size_t i = 0; i < sensor_count; i++) {
 80141dc:	2300      	movs	r3, #0
 80141de:	61fb      	str	r3, [r7, #28]
 80141e0:	e036      	b.n	8014250 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x84>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 80141e2:	69fb      	ldr	r3, [r7, #28]
 80141e4:	00db      	lsls	r3, r3, #3
 80141e6:	693a      	ldr	r2, [r7, #16]
 80141e8:	4413      	add	r3, r2
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	2b02      	cmp	r3, #2
 80141ee:	d12c      	bne.n	801424a <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7e>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80141f0:	2101      	movs	r1, #1
 80141f2:	2080      	movs	r0, #128	@ 0x80
 80141f4:	f7ff fe4e 	bl	8013e94 <_ZL9my_callocjj>
 80141f8:	61b8      	str	r0, [r7, #24]
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 80141fa:	69fb      	ldr	r3, [r7, #28]
 80141fc:	00db      	lsls	r3, r3, #3
 80141fe:	693a      	ldr	r2, [r7, #16]
 8014200:	4413      	add	r3, r2
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	b2db      	uxtb	r3, r3
 8014206:	2202      	movs	r2, #2
 8014208:	2180      	movs	r1, #128	@ 0x80
 801420a:	69b8      	ldr	r0, [r7, #24]
 801420c:	f000 ff54 	bl	80150b8 <generate_comand_topik_for_subscrabe>

			mqtt_opts.qos = 1;
 8014210:	4b14      	ldr	r3, [pc, #80]	@ (8014264 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 8014212:	2201      	movs	r2, #1
 8014214:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 8014218:	4c12      	ldr	r4, [pc, #72]	@ (8014264 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 801421a:	463b      	mov	r3, r7
 801421c:	69b9      	ldr	r1, [r7, #24]
 801421e:	4618      	mov	r0, r3
 8014220:	f01d fe58 	bl	8031ed4 <mg_str_s>
 8014224:	f104 0318 	add.w	r3, r4, #24
 8014228:	463a      	mov	r2, r7
 801422a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801422e:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 8014232:	490c      	ldr	r1, [pc, #48]	@ (8014264 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 8014234:	6978      	ldr	r0, [r7, #20]
 8014236:	f018 ff6d 	bl	802d114 <mg_mqtt_sub>

			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 801423a:	69ba      	ldr	r2, [r7, #24]
 801423c:	490a      	ldr	r1, [pc, #40]	@ (8014268 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x9c>)
 801423e:	2001      	movs	r0, #1
 8014240:	f7fd ff96 	bl	8012170 <logging>
			free(topik);
 8014244:	69b8      	ldr	r0, [r7, #24]
 8014246:	f008 fc07 	bl	801ca58 <vPortFree>
	for (size_t i = 0; i < sensor_count; i++) {
 801424a:	69fb      	ldr	r3, [r7, #28]
 801424c:	3301      	adds	r3, #1
 801424e:	61fb      	str	r3, [r7, #28]
 8014250:	69fa      	ldr	r2, [r7, #28]
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	429a      	cmp	r2, r3
 8014256:	d3c4      	bcc.n	80141e2 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x16>
		}
	}
}
 8014258:	bf00      	nop
 801425a:	bf00      	nop
 801425c:	3724      	adds	r7, #36	@ 0x24
 801425e:	46bd      	mov	sp, r7
 8014260:	bd90      	pop	{r4, r7, pc}
 8014262:	bf00      	nop
 8014264:	20000ba4 	.word	0x20000ba4
 8014268:	0804044c 	.word	0x0804044c

0801426c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:

static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 801426c:	b580      	push	{r7, lr}
 801426e:	b088      	sub	sp, #32
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]

	inputs_state_t  sw_r, sw_w;
	int relay_number = 0;  // Переменная для хранения номера реле
 8014274:	2300      	movs	r3, #0
 8014276:	60bb      	str	r3, [r7, #8]
    //char *state = NULL;  // Строка для хранения состояния (ON/OFF)

    //Топик выглядит как "cedar_4022422E1436/switch0/set"
    const char *topic = mess->topic.buf;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	61fb      	str	r3, [r7, #28]
    const char *message = mess->data.buf;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	689b      	ldr	r3, [r3, #8]
 8014282:	61bb      	str	r3, [r7, #24]

    if(message == NULL || topic == NULL){
 8014284:	69bb      	ldr	r3, [r7, #24]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d002      	beq.n	8014290 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24>
 801428a:	69fb      	ldr	r3, [r7, #28]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d10e      	bne.n	80142ae <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x42>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8014290:	4b7e      	ldr	r3, [pc, #504]	@ (801448c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	2b00      	cmp	r3, #0
 8014296:	f340 80f5 	ble.w	8014484 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
 801429a:	4b7d      	ldr	r3, [pc, #500]	@ (8014490 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 801429c:	2292      	movs	r2, #146	@ 0x92
 801429e:	497d      	ldr	r1, [pc, #500]	@ (8014494 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80142a0:	2001      	movs	r0, #1
 80142a2:	f017 f913 	bl	802b4cc <mg_log_prefix>
 80142a6:	487c      	ldr	r0, [pc, #496]	@ (8014498 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22c>)
 80142a8:	f017 f960 	bl	802b56c <mg_log>
    	return;
 80142ac:	e0ea      	b.n	8014484 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
    }

    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 80142ae:	4b7b      	ldr	r3, [pc, #492]	@ (801449c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	f107 0010 	add.w	r0, r7, #16
 80142b6:	2200      	movs	r2, #0
 80142b8:	2102      	movs	r1, #2
 80142ba:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 80142bc:	f107 030c 	add.w	r3, r7, #12
 80142c0:	f107 0210 	add.w	r2, r7, #16
 80142c4:	6812      	ldr	r2, [r2, #0]
 80142c6:	4611      	mov	r1, r2
 80142c8:	8019      	strh	r1, [r3, #0]
 80142ca:	3302      	adds	r3, #2
 80142cc:	0c12      	lsrs	r2, r2, #16
 80142ce:	701a      	strb	r2, [r3, #0]

    // Ищем "switch" в топике и затем извлекаем номер реле
    const char *switch_position = strstr(topic, "switch");
 80142d0:	4973      	ldr	r1, [pc, #460]	@ (80144a0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x234>)
 80142d2:	69f8      	ldr	r0, [r7, #28]
 80142d4:	f021 ff84 	bl	80361e0 <strstr>
 80142d8:	6178      	str	r0, [r7, #20]

    if (switch_position != NULL) {
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	f000 80bd 	beq.w	801445c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>
    	// Извлекаем номер реле (например, "3" из "switch3")
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 80142e2:	f107 0308 	add.w	r3, r7, #8
 80142e6:	461a      	mov	r2, r3
 80142e8:	496e      	ldr	r1, [pc, #440]	@ (80144a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x238>)
 80142ea:	6978      	ldr	r0, [r7, #20]
 80142ec:	f021 fb56 	bl	803599c <sscanf>
 80142f0:	4603      	mov	r3, r0
 80142f2:	2b01      	cmp	r3, #1
 80142f4:	bf0c      	ite	eq
 80142f6:	2301      	moveq	r3, #1
 80142f8:	2300      	movne	r3, #0
 80142fa:	b2db      	uxtb	r3, r3
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	f000 809b 	beq.w	8014438 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1cc>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8014302:	4b62      	ldr	r3, [pc, #392]	@ (801448c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	2b01      	cmp	r3, #1
 8014308:	dd0b      	ble.n	8014322 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb6>
 801430a:	4b61      	ldr	r3, [pc, #388]	@ (8014490 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 801430c:	229f      	movs	r2, #159	@ 0x9f
 801430e:	4961      	ldr	r1, [pc, #388]	@ (8014494 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8014310:	2002      	movs	r0, #2
 8014312:	f017 f8db 	bl	802b4cc <mg_log_prefix>
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	69fa      	ldr	r2, [r7, #28]
 801431a:	4619      	mov	r1, r3
 801431c:	4862      	ldr	r0, [pc, #392]	@ (80144a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x23c>)
 801431e:	f017 f925 	bl	802b56c <mg_log>

    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, topic);
 8014322:	68ba      	ldr	r2, [r7, #8]
 8014324:	69fb      	ldr	r3, [r7, #28]
 8014326:	4961      	ldr	r1, [pc, #388]	@ (80144ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x240>)
 8014328:	2001      	movs	r0, #1
 801432a:	f7fd ff21 	bl	8012170 <logging>

    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	2b00      	cmp	r3, #0
 8014332:	dd02      	ble.n	801433a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xce>
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	2b03      	cmp	r3, #3
 8014338:	dd16      	ble.n	8014368 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xfc>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 801433a:	4b54      	ldr	r3, [pc, #336]	@ (801448c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	2b00      	cmp	r3, #0
 8014340:	dd0b      	ble.n	801435a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xee>
 8014342:	4b53      	ldr	r3, [pc, #332]	@ (8014490 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8014344:	22a4      	movs	r2, #164	@ 0xa4
 8014346:	4953      	ldr	r1, [pc, #332]	@ (8014494 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8014348:	2001      	movs	r0, #1
 801434a:	f017 f8bf 	bl	802b4cc <mg_log_prefix>
 801434e:	68bb      	ldr	r3, [r7, #8]
 8014350:	461a      	mov	r2, r3
 8014352:	2103      	movs	r1, #3
 8014354:	4856      	ldr	r0, [pc, #344]	@ (80144b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x244>)
 8014356:	f017 f909 	bl	802b56c <mg_log>

    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	2203      	movs	r2, #3
 801435e:	4954      	ldr	r1, [pc, #336]	@ (80144b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x244>)
 8014360:	2003      	movs	r0, #3
 8014362:	f7fd ff05 	bl	8012170 <logging>

    			return;
 8014366:	e08e      	b.n	8014486 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    		}

    		// Получаем состояние реле (ON или OFF) из данных сообщения
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	68db      	ldr	r3, [r3, #12]
 801436c:	2b02      	cmp	r3, #2
 801436e:	d125      	bne.n	80143bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x150>
 8014370:	2202      	movs	r2, #2
 8014372:	4950      	ldr	r1, [pc, #320]	@ (80144b4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x248>)
 8014374:	69b8      	ldr	r0, [r7, #24]
 8014376:	f021 fee8 	bl	803614a <strncmp>
 801437a:	4603      	mov	r3, r0
 801437c:	2b00      	cmp	r3, #0
 801437e:	d11d      	bne.n	80143bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x150>
				sw_w[relay_number-1] = 1;
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	3b01      	subs	r3, #1
 8014384:	3320      	adds	r3, #32
 8014386:	443b      	add	r3, r7
 8014388:	2201      	movs	r2, #1
 801438a:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 801438e:	4b3f      	ldr	r3, [pc, #252]	@ (801448c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2b01      	cmp	r3, #1
 8014394:	dd0a      	ble.n	80143ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x140>
 8014396:	4b3e      	ldr	r3, [pc, #248]	@ (8014490 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8014398:	22ae      	movs	r2, #174	@ 0xae
 801439a:	493e      	ldr	r1, [pc, #248]	@ (8014494 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 801439c:	2002      	movs	r0, #2
 801439e:	f017 f895 	bl	802b4cc <mg_log_prefix>
 80143a2:	68bb      	ldr	r3, [r7, #8]
 80143a4:	4619      	mov	r1, r3
 80143a6:	4844      	ldr	r0, [pc, #272]	@ (80144b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 80143a8:	f017 f8e0 	bl	802b56c <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 80143ac:	4b3b      	ldr	r3, [pc, #236]	@ (801449c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	f107 000c 	add.w	r0, r7, #12
 80143b4:	2201      	movs	r2, #1
 80143b6:	2102      	movs	r1, #2
 80143b8:	4798      	blx	r3
 80143ba:	e064      	b.n	8014486 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	68db      	ldr	r3, [r3, #12]
 80143c0:	2b03      	cmp	r3, #3
 80143c2:	d125      	bne.n	8014410 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a4>
 80143c4:	2203      	movs	r2, #3
 80143c6:	493d      	ldr	r1, [pc, #244]	@ (80144bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 80143c8:	69b8      	ldr	r0, [r7, #24]
 80143ca:	f021 febe 	bl	803614a <strncmp>
 80143ce:	4603      	mov	r3, r0
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d11d      	bne.n	8014410 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a4>
				sw_w[relay_number-1] = 0;
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	3b01      	subs	r3, #1
 80143d8:	3320      	adds	r3, #32
 80143da:	443b      	add	r3, r7
 80143dc:	2200      	movs	r2, #0
 80143de:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 80143e2:	4b2a      	ldr	r3, [pc, #168]	@ (801448c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	2b01      	cmp	r3, #1
 80143e8:	dd0a      	ble.n	8014400 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x194>
 80143ea:	4b29      	ldr	r3, [pc, #164]	@ (8014490 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80143ec:	22b2      	movs	r2, #178	@ 0xb2
 80143ee:	4929      	ldr	r1, [pc, #164]	@ (8014494 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80143f0:	2002      	movs	r0, #2
 80143f2:	f017 f86b 	bl	802b4cc <mg_log_prefix>
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	4619      	mov	r1, r3
 80143fa:	4831      	ldr	r0, [pc, #196]	@ (80144c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80143fc:	f017 f8b6 	bl	802b56c <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8014400:	4b26      	ldr	r3, [pc, #152]	@ (801449c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	f107 000c 	add.w	r0, r7, #12
 8014408:	2201      	movs	r2, #1
 801440a:	2102      	movs	r1, #2
 801440c:	4798      	blx	r3
 801440e:	e03a      	b.n	8014486 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>

			}else{
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 8014410:	4b1e      	ldr	r3, [pc, #120]	@ (801448c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	dd09      	ble.n	801442c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c0>
 8014418:	4b1d      	ldr	r3, [pc, #116]	@ (8014490 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 801441a:	22b6      	movs	r2, #182	@ 0xb6
 801441c:	491d      	ldr	r1, [pc, #116]	@ (8014494 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 801441e:	2001      	movs	r0, #1
 8014420:	f017 f854 	bl	802b4cc <mg_log_prefix>
 8014424:	69b9      	ldr	r1, [r7, #24]
 8014426:	4827      	ldr	r0, [pc, #156]	@ (80144c4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8014428:	f017 f8a0 	bl	802b56c <mg_log>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message);
 801442c:	69ba      	ldr	r2, [r7, #24]
 801442e:	4925      	ldr	r1, [pc, #148]	@ (80144c4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8014430:	2003      	movs	r0, #3
 8014432:	f7fd fe9d 	bl	8012170 <logging>
 8014436:	e026      	b.n	8014486 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
			}

    	}else{
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8014438:	4b14      	ldr	r3, [pc, #80]	@ (801448c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	2b00      	cmp	r3, #0
 801443e:	dd08      	ble.n	8014452 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e6>
 8014440:	4b13      	ldr	r3, [pc, #76]	@ (8014490 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8014442:	22bb      	movs	r2, #187	@ 0xbb
 8014444:	4913      	ldr	r1, [pc, #76]	@ (8014494 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8014446:	2001      	movs	r0, #1
 8014448:	f017 f840 	bl	802b4cc <mg_log_prefix>
 801444c:	481e      	ldr	r0, [pc, #120]	@ (80144c8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x25c>)
 801444e:	f017 f88d 	bl	802b56c <mg_log>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 8014452:	491e      	ldr	r1, [pc, #120]	@ (80144cc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 8014454:	2003      	movs	r0, #3
 8014456:	f7fd fe8b 	bl	8012170 <logging>
 801445a:	e014      	b.n	8014486 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    	}
    }else{
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 801445c:	4b0b      	ldr	r3, [pc, #44]	@ (801448c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	2b00      	cmp	r3, #0
 8014462:	dd09      	ble.n	8014478 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>
 8014464:	4b0a      	ldr	r3, [pc, #40]	@ (8014490 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8014466:	22bf      	movs	r2, #191	@ 0xbf
 8014468:	490a      	ldr	r1, [pc, #40]	@ (8014494 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 801446a:	2001      	movs	r0, #1
 801446c:	f017 f82e 	bl	802b4cc <mg_log_prefix>
 8014470:	69f9      	ldr	r1, [r7, #28]
 8014472:	4817      	ldr	r0, [pc, #92]	@ (80144d0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8014474:	f017 f87a 	bl	802b56c <mg_log>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", topic);
 8014478:	69fa      	ldr	r2, [r7, #28]
 801447a:	4915      	ldr	r1, [pc, #84]	@ (80144d0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 801447c:	2003      	movs	r0, #3
 801447e:	f7fd fe77 	bl	8012170 <logging>
 8014482:	e000      	b.n	8014486 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    	return;
 8014484:	bf00      	nop
    }
}
 8014486:	3720      	adds	r7, #32
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}
 801448c:	200002a8 	.word	0x200002a8
 8014490:	08040468 	.word	0x08040468
 8014494:	08040488 	.word	0x08040488
 8014498:	080404b4 	.word	0x080404b4
 801449c:	20000bfc 	.word	0x20000bfc
 80144a0:	080404d8 	.word	0x080404d8
 80144a4:	080404e0 	.word	0x080404e0
 80144a8:	080404ec 	.word	0x080404ec
 80144ac:	08040518 	.word	0x08040518
 80144b0:	08040540 	.word	0x08040540
 80144b4:	08040590 	.word	0x08040590
 80144b8:	08040594 	.word	0x08040594
 80144bc:	080405a8 	.word	0x080405a8
 80144c0:	080405ac 	.word	0x080405ac
 80144c4:	080405c0 	.word	0x080405c0
 80144c8:	080405fc 	.word	0x080405fc
 80144cc:	08040634 	.word	0x08040634
 80144d0:	0804066c 	.word	0x0804066c

080144d4 <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:


static void mqtt_pereodic_status_send_timer_handler(void *arg){
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b082      	sub	sp, #8
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
	if(is_registered){
 80144dc:	4b06      	ldr	r3, [pc, #24]	@ (80144f8 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x24>)
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d005      	beq.n	80144f0 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>
		mqtt_send_io_status(mqtt_conn, 1);
 80144e4:	4b05      	ldr	r3, [pc, #20]	@ (80144fc <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x28>)
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	2101      	movs	r1, #1
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7ff fd7a 	bl	8013fe4 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 80144f0:	bf00      	nop
 80144f2:	3708      	adds	r7, #8
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}
 80144f8:	20000bf8 	.word	0x20000bf8
 80144fc:	20000be4 	.word	0x20000be4

08014500 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:

static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 8014500:	b580      	push	{r7, lr}
 8014502:	b086      	sub	sp, #24
 8014504:	af00      	add	r7, sp, #0
 8014506:	60f8      	str	r0, [r7, #12]
 8014508:	60b9      	str	r1, [r7, #8]
 801450a:	607a      	str	r2, [r7, #4]
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	2b11      	cmp	r3, #17
 8014510:	d132      	bne.n	8014578 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x78>
		MG_DEBUG(("MQTT_open_connection"));
 8014512:	4b2d      	ldr	r3, [pc, #180]	@ (80145c8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc8>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	2b02      	cmp	r3, #2
 8014518:	dd08      	ble.n	801452c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x2c>
 801451a:	4b2c      	ldr	r3, [pc, #176]	@ (80145cc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xcc>)
 801451c:	22cd      	movs	r2, #205	@ 0xcd
 801451e:	492c      	ldr	r1, [pc, #176]	@ (80145d0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd0>)
 8014520:	2003      	movs	r0, #3
 8014522:	f016 ffd3 	bl	802b4cc <mg_log_prefix>
 8014526:	482b      	ldr	r0, [pc, #172]	@ (80145d4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd4>)
 8014528:	f017 f820 	bl	802b56c <mg_log>
		logging(L_INFO, "MQTT Open connection");
 801452c:	492a      	ldr	r1, [pc, #168]	@ (80145d8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd8>)
 801452e:	2001      	movs	r0, #1
 8014530:	f7fd fe1e 	bl	8012170 <logging>
		mqtt_conn = conn;
 8014534:	4a29      	ldr	r2, [pc, #164]	@ (80145dc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	6013      	str	r3, [r2, #0]
		if(!is_registered){
 801453a:	4b29      	ldr	r3, [pc, #164]	@ (80145e0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	f083 0301 	eor.w	r3, r3, #1
 8014542:	b2db      	uxtb	r3, r3
 8014544:	2b00      	cmp	r3, #0
 8014546:	d03a      	beq.n	80145be <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8014548:	4b24      	ldr	r3, [pc, #144]	@ (80145dc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	2206      	movs	r2, #6
 801454e:	4925      	ldr	r1, [pc, #148]	@ (80145e4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe4>)
 8014550:	4618      	mov	r0, r3
 8014552:	f7ff fcbd 	bl	8013ed0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 8014556:	4b21      	ldr	r3, [pc, #132]	@ (80145dc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	2101      	movs	r1, #1
 801455c:	4618      	mov	r0, r3
 801455e:	f7ff fd41 	bl	8013fe4 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8014562:	4b1e      	ldr	r3, [pc, #120]	@ (80145dc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	2206      	movs	r2, #6
 8014568:	491e      	ldr	r1, [pc, #120]	@ (80145e4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe4>)
 801456a:	4618      	mov	r0, r3
 801456c:	f7ff fe2e 	bl	80141cc <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8014570:	4b1b      	ldr	r3, [pc, #108]	@ (80145e0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 8014572:	2201      	movs	r2, #1
 8014574:	701a      	strb	r2, [r3, #0]
	}else if (ev == MG_EV_CLOSE){
		logging(L_INFO, "MQTT Close connection");
		mqtt_conn     = NULL;
		is_registered = false;
	}
}
 8014576:	e022      	b.n	80145be <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_MQTT_MSG){
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	2b10      	cmp	r3, #16
 801457c:	d10f      	bne.n	801459e <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9e>
		logging(L_INFO, "Receive message from MQTT server");
 801457e:	491a      	ldr	r1, [pc, #104]	@ (80145e8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe8>)
 8014580:	2001      	movs	r0, #1
 8014582:	f7fd fdf5 	bl	8012170 <logging>
		 struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	617b      	str	r3, [r7, #20]
		 mqtt_subscrabe_recv_cmd_parce(mm);
 801458a:	6978      	ldr	r0, [r7, #20]
 801458c:	f7ff fe6e 	bl	801426c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8014590:	4b12      	ldr	r3, [pc, #72]	@ (80145dc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	2100      	movs	r1, #0
 8014596:	4618      	mov	r0, r3
 8014598:	f7ff fd24 	bl	8013fe4 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 801459c:	e00f      	b.n	80145be <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_MQTT_CMD){
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	2b0f      	cmp	r3, #15
 80145a2:	d00c      	beq.n	80145be <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_CLOSE){
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	2b09      	cmp	r3, #9
 80145a8:	d109      	bne.n	80145be <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
		logging(L_INFO, "MQTT Close connection");
 80145aa:	4910      	ldr	r1, [pc, #64]	@ (80145ec <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xec>)
 80145ac:	2001      	movs	r0, #1
 80145ae:	f7fd fddf 	bl	8012170 <logging>
		mqtt_conn     = NULL;
 80145b2:	4b0a      	ldr	r3, [pc, #40]	@ (80145dc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 80145b4:	2200      	movs	r2, #0
 80145b6:	601a      	str	r2, [r3, #0]
		is_registered = false;
 80145b8:	4b09      	ldr	r3, [pc, #36]	@ (80145e0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 80145ba:	2200      	movs	r2, #0
 80145bc:	701a      	strb	r2, [r3, #0]
}
 80145be:	bf00      	nop
 80145c0:	3718      	adds	r7, #24
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
 80145c6:	bf00      	nop
 80145c8:	200002a8 	.word	0x200002a8
 80145cc:	0804069c 	.word	0x0804069c
 80145d0:	08040488 	.word	0x08040488
 80145d4:	080406b0 	.word	0x080406b0
 80145d8:	080406c8 	.word	0x080406c8
 80145dc:	20000be4 	.word	0x20000be4
 80145e0:	20000bf8 	.word	0x20000bf8
 80145e4:	20000044 	.word	0x20000044
 80145e8:	080406e0 	.word	0x080406e0
 80145ec:	08040704 	.word	0x08040704

080145f0 <_ZL18mqtt_timer_handlerPv>:

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
 80145f0:	b590      	push	{r4, r7, lr}
 80145f2:	b087      	sub	sp, #28
 80145f4:	af02      	add	r7, sp, #8
 80145f6:	60f8      	str	r0, [r7, #12]
	if (!mqtt_conn){
 80145f8:	4b20      	ldr	r3, [pc, #128]	@ (801467c <_ZL18mqtt_timer_handlerPv+0x8c>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d136      	bne.n	801466e <_ZL18mqtt_timer_handlerPv+0x7e>
		logging(L_INFO, "Try to connect to MQTT server");
 8014600:	491f      	ldr	r1, [pc, #124]	@ (8014680 <_ZL18mqtt_timer_handlerPv+0x90>)
 8014602:	2001      	movs	r0, #1
 8014604:	f7fd fdb4 	bl	8012170 <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 8014608:	2240      	movs	r2, #64	@ 0x40
 801460a:	2100      	movs	r1, #0
 801460c:	481d      	ldr	r0, [pc, #116]	@ (8014684 <_ZL18mqtt_timer_handlerPv+0x94>)
 801460e:	f021 fd67 	bl	80360e0 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 8014612:	4b1d      	ldr	r3, [pc, #116]	@ (8014688 <_ZL18mqtt_timer_handlerPv+0x98>)
 8014614:	681a      	ldr	r2, [r3, #0]
 8014616:	4c1b      	ldr	r4, [pc, #108]	@ (8014684 <_ZL18mqtt_timer_handlerPv+0x94>)
 8014618:	463b      	mov	r3, r7
 801461a:	4611      	mov	r1, r2
 801461c:	4618      	mov	r0, r3
 801461e:	f01d fc59 	bl	8031ed4 <mg_str_s>
 8014622:	4622      	mov	r2, r4
 8014624:	463b      	mov	r3, r7
 8014626:	e893 0003 	ldmia.w	r3, {r0, r1}
 801462a:	e882 0003 	stmia.w	r2, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 801462e:	4b17      	ldr	r3, [pc, #92]	@ (801468c <_ZL18mqtt_timer_handlerPv+0x9c>)
 8014630:	681a      	ldr	r2, [r3, #0]
 8014632:	4c14      	ldr	r4, [pc, #80]	@ (8014684 <_ZL18mqtt_timer_handlerPv+0x94>)
 8014634:	463b      	mov	r3, r7
 8014636:	4611      	mov	r1, r2
 8014638:	4618      	mov	r0, r3
 801463a:	f01d fc4b 	bl	8031ed4 <mg_str_s>
 801463e:	f104 0308 	add.w	r3, r4, #8
 8014642:	463a      	mov	r2, r7
 8014644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014648:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 801464c:	4b0d      	ldr	r3, [pc, #52]	@ (8014684 <_ZL18mqtt_timer_handlerPv+0x94>)
 801464e:	223c      	movs	r2, #60	@ 0x3c
 8014650:	855a      	strh	r2, [r3, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 8014652:	4b0f      	ldr	r3, [pc, #60]	@ (8014690 <_ZL18mqtt_timer_handlerPv+0xa0>)
 8014654:	6818      	ldr	r0, [r3, #0]
 8014656:	4b0f      	ldr	r3, [pc, #60]	@ (8014694 <_ZL18mqtt_timer_handlerPv+0xa4>)
 8014658:	6819      	ldr	r1, [r3, #0]
 801465a:	2300      	movs	r3, #0
 801465c:	9300      	str	r3, [sp, #0]
 801465e:	4b0e      	ldr	r3, [pc, #56]	@ (8014698 <_ZL18mqtt_timer_handlerPv+0xa8>)
 8014660:	4a08      	ldr	r2, [pc, #32]	@ (8014684 <_ZL18mqtt_timer_handlerPv+0x94>)
 8014662:	f019 f831 	bl	802d6c8 <mg_mqtt_connect>
 8014666:	4603      	mov	r3, r0
 8014668:	4a04      	ldr	r2, [pc, #16]	@ (801467c <_ZL18mqtt_timer_handlerPv+0x8c>)
 801466a:	6013      	str	r3, [r2, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 801466c:	e002      	b.n	8014674 <_ZL18mqtt_timer_handlerPv+0x84>
	}else if(mqtt_conn && is_registered){ //connection established and registered sensors
 801466e:	4b03      	ldr	r3, [pc, #12]	@ (801467c <_ZL18mqtt_timer_handlerPv+0x8c>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
}//void * param, sett_type_t param_type,  sett_direction_t direction
 8014674:	bf00      	nop
 8014676:	3714      	adds	r7, #20
 8014678:	46bd      	mov	sp, r7
 801467a:	bd90      	pop	{r4, r7, pc}
 801467c:	20000be4 	.word	0x20000be4
 8014680:	0804071c 	.word	0x0804071c
 8014684:	20000ba4 	.word	0x20000ba4
 8014688:	20000b8c 	.word	0x20000b8c
 801468c:	20000b90 	.word	0x20000b90
 8014690:	20000b9c 	.word	0x20000b9c
 8014694:	20000b88 	.word	0x20000b88
 8014698:	08014501 	.word	0x08014501

0801469c <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 801469c:	b580      	push	{r7, lr}
 801469e:	b082      	sub	sp, #8
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
	if(mqtt_conn && is_registered){
 80146a4:	4b08      	ldr	r3, [pc, #32]	@ (80146c8 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d009      	beq.n	80146c0 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
 80146ac:	4b07      	ldr	r3, [pc, #28]	@ (80146cc <_ZL33mqtt_timer_handler_cher_io_statusPv+0x30>)
 80146ae:	781b      	ldrb	r3, [r3, #0]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d005      	beq.n	80146c0 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
		mqtt_send_io_status(mqtt_conn, 0);
 80146b4:	4b04      	ldr	r3, [pc, #16]	@ (80146c8 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	2100      	movs	r1, #0
 80146ba:	4618      	mov	r0, r3
 80146bc:	f7ff fc92 	bl	8013fe4 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 80146c0:	bf00      	nop
 80146c2:	3708      	adds	r7, #8
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd80      	pop	{r7, pc}
 80146c8:	20000be4 	.word	0x20000be4
 80146cc:	20000bf8 	.word	0x20000bf8

080146d0 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
 80146d0:	b480      	push	{r7}
 80146d2:	af00      	add	r7, sp, #0
    return mqtt_conn;
 80146d4:	4b03      	ldr	r3, [pc, #12]	@ (80146e4 <get_mqtt_connection+0x14>)
 80146d6:	681b      	ldr	r3, [r3, #0]
}
 80146d8:	4618      	mov	r0, r3
 80146da:	46bd      	mov	sp, r7
 80146dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e0:	4770      	bx	lr
 80146e2:	bf00      	nop
 80146e4:	20000be4 	.word	0x20000be4

080146e8 <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 80146e8:	b590      	push	{r4, r7, lr}
 80146ea:	b08b      	sub	sp, #44	@ 0x2c
 80146ec:	af04      	add	r7, sp, #16
 80146ee:	6178      	str	r0, [r7, #20]
 80146f0:	6139      	str	r1, [r7, #16]
 80146f2:	60fa      	str	r2, [r7, #12]
 80146f4:	60bb      	str	r3, [r7, #8]

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 80146f6:	2101      	movs	r1, #1
 80146f8:	2080      	movs	r0, #128	@ 0x80
 80146fa:	f7ff fbcb 	bl	8013e94 <_ZL9my_callocjj>
 80146fe:	4603      	mov	r3, r0
 8014700:	4a54      	ldr	r2, [pc, #336]	@ (8014854 <mqtt_init+0x16c>)
 8014702:	6013      	str	r3, [r2, #0]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 8014704:	2101      	movs	r1, #1
 8014706:	2021      	movs	r0, #33	@ 0x21
 8014708:	f7ff fbc4 	bl	8013e94 <_ZL9my_callocjj>
 801470c:	4603      	mov	r3, r0
 801470e:	4a52      	ldr	r2, [pc, #328]	@ (8014858 <mqtt_init+0x170>)
 8014710:	6013      	str	r3, [r2, #0]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 8014712:	2101      	movs	r1, #1
 8014714:	2021      	movs	r0, #33	@ 0x21
 8014716:	f7ff fbbd 	bl	8013e94 <_ZL9my_callocjj>
 801471a:	4603      	mov	r3, r0
 801471c:	4a4f      	ldr	r2, [pc, #316]	@ (801485c <mqtt_init+0x174>)
 801471e:	6013      	str	r3, [r2, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014720:	2101      	movs	r1, #1
 8014722:	2080      	movs	r0, #128	@ 0x80
 8014724:	f7ff fbb6 	bl	8013e94 <_ZL9my_callocjj>
 8014728:	4603      	mov	r3, r0
 801472a:	4a4d      	ldr	r2, [pc, #308]	@ (8014860 <mqtt_init+0x178>)
 801472c:	6013      	str	r3, [r2, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 801472e:	2101      	movs	r1, #1
 8014730:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014734:	f7ff fbae 	bl	8013e94 <_ZL9my_callocjj>
 8014738:	4603      	mov	r3, r0
 801473a:	4a4a      	ldr	r2, [pc, #296]	@ (8014864 <mqtt_init+0x17c>)
 801473c:	6013      	str	r3, [r2, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 801473e:	2101      	movs	r1, #1
 8014740:	2028      	movs	r0, #40	@ 0x28
 8014742:	f7ff fba7 	bl	8013e94 <_ZL9my_callocjj>
 8014746:	4603      	mov	r3, r0
 8014748:	4a47      	ldr	r2, [pc, #284]	@ (8014868 <mqtt_init+0x180>)
 801474a:	6013      	str	r3, [r2, #0]
	r_w_parameter   = fn;
 801474c:	4a47      	ldr	r2, [pc, #284]	@ (801486c <mqtt_init+0x184>)
 801474e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014750:	6013      	str	r3, [r2, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 8014752:	4b40      	ldr	r3, [pc, #256]	@ (8014854 <mqtt_init+0x16c>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	68f9      	ldr	r1, [r7, #12]
 8014758:	4618      	mov	r0, r3
 801475a:	f022 fecb 	bl	80374f4 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 801475e:	4b3e      	ldr	r3, [pc, #248]	@ (8014858 <mqtt_init+0x170>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	68b9      	ldr	r1, [r7, #8]
 8014764:	4618      	mov	r0, r3
 8014766:	f022 fec5 	bl	80374f4 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 801476a:	4b3c      	ldr	r3, [pc, #240]	@ (801485c <mqtt_init+0x174>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014770:	4618      	mov	r0, r3
 8014772:	f022 febf 	bl	80374f4 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 8014776:	4b37      	ldr	r3, [pc, #220]	@ (8014854 <mqtt_init+0x16c>)
 8014778:	681a      	ldr	r2, [r3, #0]
 801477a:	4b37      	ldr	r3, [pc, #220]	@ (8014858 <mqtt_init+0x170>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	493c      	ldr	r1, [pc, #240]	@ (8014870 <mqtt_init+0x188>)
 8014780:	2001      	movs	r0, #1
 8014782:	f7fd fcf5 	bl	8012170 <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 8014786:	4a3b      	ldr	r2, [pc, #236]	@ (8014874 <mqtt_init+0x18c>)
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	6013      	str	r3, [r2, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 801478c:	4a3a      	ldr	r2, [pc, #232]	@ (8014878 <mqtt_init+0x190>)
 801478e:	693b      	ldr	r3, [r7, #16]
 8014790:	6013      	str	r3, [r2, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 8014792:	4b39      	ldr	r3, [pc, #228]	@ (8014878 <mqtt_init+0x190>)
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	2106      	movs	r1, #6
 8014798:	4618      	mov	r0, r3
 801479a:	f000 f89b 	bl	80148d4 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 801479e:	4b2e      	ldr	r3, [pc, #184]	@ (8014858 <mqtt_init+0x170>)
 80147a0:	681a      	ldr	r2, [r3, #0]
 80147a2:	4c36      	ldr	r4, [pc, #216]	@ (801487c <mqtt_init+0x194>)
 80147a4:	463b      	mov	r3, r7
 80147a6:	4611      	mov	r1, r2
 80147a8:	4618      	mov	r0, r3
 80147aa:	f01d fb93 	bl	8031ed4 <mg_str_s>
 80147ae:	4622      	mov	r2, r4
 80147b0:	463b      	mov	r3, r7
 80147b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80147b6:	e882 0003 	stmia.w	r2, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 80147ba:	4b28      	ldr	r3, [pc, #160]	@ (801485c <mqtt_init+0x174>)
 80147bc:	681a      	ldr	r2, [r3, #0]
 80147be:	4c2f      	ldr	r4, [pc, #188]	@ (801487c <mqtt_init+0x194>)
 80147c0:	463b      	mov	r3, r7
 80147c2:	4611      	mov	r1, r2
 80147c4:	4618      	mov	r0, r3
 80147c6:	f01d fb85 	bl	8031ed4 <mg_str_s>
 80147ca:	f104 0308 	add.w	r3, r4, #8
 80147ce:	463a      	mov	r2, r7
 80147d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147d4:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 80147d8:	4b28      	ldr	r3, [pc, #160]	@ (801487c <mqtt_init+0x194>)
 80147da:	223c      	movs	r2, #60	@ 0x3c
 80147dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 80147de:	4b25      	ldr	r3, [pc, #148]	@ (8014874 <mqtt_init+0x18c>)
 80147e0:	6819      	ldr	r1, [r3, #0]
 80147e2:	2300      	movs	r3, #0
 80147e4:	9302      	str	r3, [sp, #8]
 80147e6:	4b26      	ldr	r3, [pc, #152]	@ (8014880 <mqtt_init+0x198>)
 80147e8:	9301      	str	r3, [sp, #4]
 80147ea:	2303      	movs	r3, #3
 80147ec:	9300      	str	r3, [sp, #0]
 80147ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80147f2:	f04f 0300 	mov.w	r3, #0
 80147f6:	4608      	mov	r0, r1
 80147f8:	f019 fc02 	bl	802e000 <mg_timer_add>
 80147fc:	4603      	mov	r3, r0
 80147fe:	4a21      	ldr	r2, [pc, #132]	@ (8014884 <mqtt_init+0x19c>)
 8014800:	6013      	str	r3, [r2, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 8014802:	4b1c      	ldr	r3, [pc, #112]	@ (8014874 <mqtt_init+0x18c>)
 8014804:	6819      	ldr	r1, [r3, #0]
 8014806:	2300      	movs	r3, #0
 8014808:	9302      	str	r3, [sp, #8]
 801480a:	4b1f      	ldr	r3, [pc, #124]	@ (8014888 <mqtt_init+0x1a0>)
 801480c:	9301      	str	r3, [sp, #4]
 801480e:	2301      	movs	r3, #1
 8014810:	9300      	str	r3, [sp, #0]
 8014812:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8014816:	f04f 0300 	mov.w	r3, #0
 801481a:	4608      	mov	r0, r1
 801481c:	f019 fbf0 	bl	802e000 <mg_timer_add>
 8014820:	4603      	mov	r3, r0
 8014822:	4a1a      	ldr	r2, [pc, #104]	@ (801488c <mqtt_init+0x1a4>)
 8014824:	6013      	str	r3, [r2, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 8014826:	4b13      	ldr	r3, [pc, #76]	@ (8014874 <mqtt_init+0x18c>)
 8014828:	6819      	ldr	r1, [r3, #0]
 801482a:	2300      	movs	r3, #0
 801482c:	9302      	str	r3, [sp, #8]
 801482e:	4b18      	ldr	r3, [pc, #96]	@ (8014890 <mqtt_init+0x1a8>)
 8014830:	9301      	str	r3, [sp, #4]
 8014832:	2301      	movs	r3, #1
 8014834:	9300      	str	r3, [sp, #0]
 8014836:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801483a:	f04f 0300 	mov.w	r3, #0
 801483e:	4608      	mov	r0, r1
 8014840:	f019 fbde 	bl	802e000 <mg_timer_add>
 8014844:	4603      	mov	r3, r0
 8014846:	4a13      	ldr	r2, [pc, #76]	@ (8014894 <mqtt_init+0x1ac>)
 8014848:	6013      	str	r3, [r2, #0]

}
 801484a:	bf00      	nop
 801484c:	371c      	adds	r7, #28
 801484e:	46bd      	mov	sp, r7
 8014850:	bd90      	pop	{r4, r7, pc}
 8014852:	bf00      	nop
 8014854:	20000b88 	.word	0x20000b88
 8014858:	20000b8c 	.word	0x20000b8c
 801485c:	20000b90 	.word	0x20000b90
 8014860:	20000b94 	.word	0x20000b94
 8014864:	20000b98 	.word	0x20000b98
 8014868:	20000be8 	.word	0x20000be8
 801486c:	20000bfc 	.word	0x20000bfc
 8014870:	0804073c 	.word	0x0804073c
 8014874:	20000b9c 	.word	0x20000b9c
 8014878:	20000ba0 	.word	0x20000ba0
 801487c:	20000ba4 	.word	0x20000ba4
 8014880:	080145f1 	.word	0x080145f1
 8014884:	20000bec 	.word	0x20000bec
 8014888:	080144d5 	.word	0x080144d5
 801488c:	20000bf0 	.word	0x20000bf0
 8014890:	0801469d 	.word	0x0801469d
 8014894:	20000bf4 	.word	0x20000bf4

08014898 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8014898:	b580      	push	{r7, lr}
 801489a:	b084      	sub	sp, #16
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
 80148a0:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	683a      	ldr	r2, [r7, #0]
 80148a6:	fb02 f303 	mul.w	r3, r2, r3
 80148aa:	4618      	mov	r0, r3
 80148ac:	f008 f806 	bl	801c8bc <pvPortMalloc>
 80148b0:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d008      	beq.n	80148ca <_ZL9my_callocjj+0x32>
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	687a      	ldr	r2, [r7, #4]
 80148bc:	fb02 f303 	mul.w	r3, r2, r3
 80148c0:	461a      	mov	r2, r3
 80148c2:	2100      	movs	r1, #0
 80148c4:	68f8      	ldr	r0, [r7, #12]
 80148c6:	f021 fc0b 	bl	80360e0 <memset>
  return p;
 80148ca:	68fb      	ldr	r3, [r7, #12]
}
 80148cc:	4618      	mov	r0, r3
 80148ce:	3710      	adds	r7, #16
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}

080148d4 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b084      	sub	sp, #16
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	6039      	str	r1, [r7, #0]

	if ( unical_id){
 80148de:	4b1b      	ldr	r3, [pc, #108]	@ (801494c <set_device_id+0x78>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d004      	beq.n	80148f0 <set_device_id+0x1c>
		free(unical_id);
 80148e6:	4b19      	ldr	r3, [pc, #100]	@ (801494c <set_device_id+0x78>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	4618      	mov	r0, r3
 80148ec:	f008 f8b4 	bl	801ca58 <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	005b      	lsls	r3, r3, #1
 80148f4:	3301      	adds	r3, #1
 80148f6:	2101      	movs	r1, #1
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7ff ffcd 	bl	8014898 <_ZL9my_callocjj>
 80148fe:	4603      	mov	r3, r0
 8014900:	4a12      	ldr	r2, [pc, #72]	@ (801494c <set_device_id+0x78>)
 8014902:	6013      	str	r3, [r2, #0]


	if (unical_id){
 8014904:	4b11      	ldr	r3, [pc, #68]	@ (801494c <set_device_id+0x78>)
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d017      	beq.n	801493c <set_device_id+0x68>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 801490c:	2300      	movs	r3, #0
 801490e:	60fb      	str	r3, [r7, #12]
 8014910:	e00f      	b.n	8014932 <set_device_id+0x5e>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 8014912:	4b0e      	ldr	r3, [pc, #56]	@ (801494c <set_device_id+0x78>)
 8014914:	681a      	ldr	r2, [r3, #0]
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	005b      	lsls	r3, r3, #1
 801491a:	18d0      	adds	r0, r2, r3
 801491c:	687a      	ldr	r2, [r7, #4]
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	4413      	add	r3, r2
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	461a      	mov	r2, r3
 8014926:	490a      	ldr	r1, [pc, #40]	@ (8014950 <set_device_id+0x7c>)
 8014928:	f021 f818 	bl	803595c <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	3301      	adds	r3, #1
 8014930:	60fb      	str	r3, [r7, #12]
 8014932:	68fa      	ldr	r2, [r7, #12]
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	429a      	cmp	r2, r3
 8014938:	d3eb      	bcc.n	8014912 <set_device_id+0x3e>
 801493a:	e002      	b.n	8014942 <set_device_id+0x6e>
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 801493c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014940:	e000      	b.n	8014944 <set_device_id+0x70>
	}

	return NO_ERR; // Успешно
 8014942:	2300      	movs	r3, #0
}
 8014944:	4618      	mov	r0, r3
 8014946:	3710      	adds	r7, #16
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}
 801494c:	20000c08 	.word	0x20000c08
 8014950:	08040768 	.word	0x08040768

08014954 <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 8014954:	b580      	push	{r7, lr}
 8014956:	b082      	sub	sp, #8
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
 801495c:	6039      	str	r1, [r7, #0]

	if(dev_conf_ip){
 801495e:	4b15      	ldr	r3, [pc, #84]	@ (80149b4 <set_device_conf_ip+0x60>)
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d004      	beq.n	8014970 <set_device_conf_ip+0x1c>
		free(dev_conf_ip);
 8014966:	4b13      	ldr	r3, [pc, #76]	@ (80149b4 <set_device_conf_ip+0x60>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	4618      	mov	r0, r3
 801496c:	f008 f874 	bl	801ca58 <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	3301      	adds	r3, #1
 8014974:	2101      	movs	r1, #1
 8014976:	4618      	mov	r0, r3
 8014978:	f7ff ff8e 	bl	8014898 <_ZL9my_callocjj>
 801497c:	4603      	mov	r3, r0
 801497e:	4a0d      	ldr	r2, [pc, #52]	@ (80149b4 <set_device_conf_ip+0x60>)
 8014980:	6013      	str	r3, [r2, #0]

	if(dev_conf_ip){
 8014982:	4b0c      	ldr	r3, [pc, #48]	@ (80149b4 <set_device_conf_ip+0x60>)
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d00e      	beq.n	80149a8 <set_device_conf_ip+0x54>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 801498a:	4b0a      	ldr	r3, [pc, #40]	@ (80149b4 <set_device_conf_ip+0x60>)
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	683a      	ldr	r2, [r7, #0]
 8014990:	6879      	ldr	r1, [r7, #4]
 8014992:	4618      	mov	r0, r3
 8014994:	f021 fbeb 	bl	803616e <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 8014998:	4b06      	ldr	r3, [pc, #24]	@ (80149b4 <set_device_conf_ip+0x60>)
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	683b      	ldr	r3, [r7, #0]
 801499e:	4413      	add	r3, r2
 80149a0:	2200      	movs	r2, #0
 80149a2:	701a      	strb	r2, [r3, #0]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
 80149a4:	2300      	movs	r3, #0
 80149a6:	e001      	b.n	80149ac <set_device_conf_ip+0x58>
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 80149a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3708      	adds	r7, #8
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}
 80149b4:	20000c0c 	.word	0x20000c0c

080149b8 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b08a      	sub	sp, #40	@ 0x28
 80149bc:	af06      	add	r7, sp, #24
 80149be:	60f8      	str	r0, [r7, #12]
 80149c0:	60b9      	str	r1, [r7, #8]
 80149c2:	4611      	mov	r1, r2
 80149c4:	461a      	mov	r2, r3
 80149c6:	460b      	mov	r3, r1
 80149c8:	71fb      	strb	r3, [r7, #7]
 80149ca:	4613      	mov	r3, r2
 80149cc:	71bb      	strb	r3, [r7, #6]

	strcpy(buff, "");
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	2200      	movs	r2, #0
 80149d2:	701a      	strb	r2, [r3, #0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 80149d4:	79fb      	ldrb	r3, [r7, #7]
 80149d6:	3b01      	subs	r3, #1
 80149d8:	2b07      	cmp	r3, #7
 80149da:	f200 80a3 	bhi.w	8014b24 <get_config_topik_string+0x16c>
 80149de:	a201      	add	r2, pc, #4	@ (adr r2, 80149e4 <get_config_topik_string+0x2c>)
 80149e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149e4:	08014a05 	.word	0x08014a05
 80149e8:	08014a29 	.word	0x08014a29
 80149ec:	08014a4d 	.word	0x08014a4d
 80149f0:	08014a95 	.word	0x08014a95
 80149f4:	08014a71 	.word	0x08014a71
 80149f8:	08014add 	.word	0x08014add
 80149fc:	08014b01 	.word	0x08014b01
 8014a00:	08014ab9 	.word	0x08014ab9
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 8014a04:	4b4b      	ldr	r3, [pc, #300]	@ (8014b34 <get_config_topik_string+0x17c>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	79ba      	ldrb	r2, [r7, #6]
 8014a0a:	9204      	str	r2, [sp, #16]
 8014a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8014b38 <get_config_topik_string+0x180>)
 8014a0e:	9203      	str	r2, [sp, #12]
 8014a10:	9302      	str	r3, [sp, #8]
 8014a12:	4b4a      	ldr	r3, [pc, #296]	@ (8014b3c <get_config_topik_string+0x184>)
 8014a14:	9301      	str	r3, [sp, #4]
 8014a16:	4b4a      	ldr	r3, [pc, #296]	@ (8014b40 <get_config_topik_string+0x188>)
 8014a18:	9300      	str	r3, [sp, #0]
 8014a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8014b44 <get_config_topik_string+0x18c>)
 8014a1c:	4a4a      	ldr	r2, [pc, #296]	@ (8014b48 <get_config_topik_string+0x190>)
 8014a1e:	68b9      	ldr	r1, [r7, #8]
 8014a20:	68f8      	ldr	r0, [r7, #12]
 8014a22:	f020 fe33 	bl	803568c <snprintf>
			break;
 8014a26:	e080      	b.n	8014b2a <get_config_topik_string+0x172>
		case OUTPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 8014a28:	4b42      	ldr	r3, [pc, #264]	@ (8014b34 <get_config_topik_string+0x17c>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	79ba      	ldrb	r2, [r7, #6]
 8014a2e:	9204      	str	r2, [sp, #16]
 8014a30:	4a46      	ldr	r2, [pc, #280]	@ (8014b4c <get_config_topik_string+0x194>)
 8014a32:	9203      	str	r2, [sp, #12]
 8014a34:	9302      	str	r3, [sp, #8]
 8014a36:	4b41      	ldr	r3, [pc, #260]	@ (8014b3c <get_config_topik_string+0x184>)
 8014a38:	9301      	str	r3, [sp, #4]
 8014a3a:	4b44      	ldr	r3, [pc, #272]	@ (8014b4c <get_config_topik_string+0x194>)
 8014a3c:	9300      	str	r3, [sp, #0]
 8014a3e:	4b41      	ldr	r3, [pc, #260]	@ (8014b44 <get_config_topik_string+0x18c>)
 8014a40:	4a41      	ldr	r2, [pc, #260]	@ (8014b48 <get_config_topik_string+0x190>)
 8014a42:	68b9      	ldr	r1, [r7, #8]
 8014a44:	68f8      	ldr	r0, [r7, #12]
 8014a46:	f020 fe21 	bl	803568c <snprintf>
			break;
 8014a4a:	e06e      	b.n	8014b2a <get_config_topik_string+0x172>
		case ENERGY_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 8014a4c:	4b39      	ldr	r3, [pc, #228]	@ (8014b34 <get_config_topik_string+0x17c>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	79ba      	ldrb	r2, [r7, #6]
 8014a52:	9204      	str	r2, [sp, #16]
 8014a54:	4a3e      	ldr	r2, [pc, #248]	@ (8014b50 <get_config_topik_string+0x198>)
 8014a56:	9203      	str	r2, [sp, #12]
 8014a58:	9302      	str	r3, [sp, #8]
 8014a5a:	4b38      	ldr	r3, [pc, #224]	@ (8014b3c <get_config_topik_string+0x184>)
 8014a5c:	9301      	str	r3, [sp, #4]
 8014a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8014b54 <get_config_topik_string+0x19c>)
 8014a60:	9300      	str	r3, [sp, #0]
 8014a62:	4b38      	ldr	r3, [pc, #224]	@ (8014b44 <get_config_topik_string+0x18c>)
 8014a64:	4a38      	ldr	r2, [pc, #224]	@ (8014b48 <get_config_topik_string+0x190>)
 8014a66:	68b9      	ldr	r1, [r7, #8]
 8014a68:	68f8      	ldr	r0, [r7, #12]
 8014a6a:	f020 fe0f 	bl	803568c <snprintf>
			break;
 8014a6e:	e05c      	b.n	8014b2a <get_config_topik_string+0x172>
		case VOLTAGE_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 8014a70:	4b30      	ldr	r3, [pc, #192]	@ (8014b34 <get_config_topik_string+0x17c>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	79ba      	ldrb	r2, [r7, #6]
 8014a76:	9204      	str	r2, [sp, #16]
 8014a78:	4a37      	ldr	r2, [pc, #220]	@ (8014b58 <get_config_topik_string+0x1a0>)
 8014a7a:	9203      	str	r2, [sp, #12]
 8014a7c:	9302      	str	r3, [sp, #8]
 8014a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8014b3c <get_config_topik_string+0x184>)
 8014a80:	9301      	str	r3, [sp, #4]
 8014a82:	4b34      	ldr	r3, [pc, #208]	@ (8014b54 <get_config_topik_string+0x19c>)
 8014a84:	9300      	str	r3, [sp, #0]
 8014a86:	4b2f      	ldr	r3, [pc, #188]	@ (8014b44 <get_config_topik_string+0x18c>)
 8014a88:	4a2f      	ldr	r2, [pc, #188]	@ (8014b48 <get_config_topik_string+0x190>)
 8014a8a:	68b9      	ldr	r1, [r7, #8]
 8014a8c:	68f8      	ldr	r0, [r7, #12]
 8014a8e:	f020 fdfd 	bl	803568c <snprintf>
			break;
 8014a92:	e04a      	b.n	8014b2a <get_config_topik_string+0x172>
		case POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 8014a94:	4b27      	ldr	r3, [pc, #156]	@ (8014b34 <get_config_topik_string+0x17c>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	79ba      	ldrb	r2, [r7, #6]
 8014a9a:	9204      	str	r2, [sp, #16]
 8014a9c:	4a2f      	ldr	r2, [pc, #188]	@ (8014b5c <get_config_topik_string+0x1a4>)
 8014a9e:	9203      	str	r2, [sp, #12]
 8014aa0:	9302      	str	r3, [sp, #8]
 8014aa2:	4b26      	ldr	r3, [pc, #152]	@ (8014b3c <get_config_topik_string+0x184>)
 8014aa4:	9301      	str	r3, [sp, #4]
 8014aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8014b54 <get_config_topik_string+0x19c>)
 8014aa8:	9300      	str	r3, [sp, #0]
 8014aaa:	4b26      	ldr	r3, [pc, #152]	@ (8014b44 <get_config_topik_string+0x18c>)
 8014aac:	4a26      	ldr	r2, [pc, #152]	@ (8014b48 <get_config_topik_string+0x190>)
 8014aae:	68b9      	ldr	r1, [r7, #8]
 8014ab0:	68f8      	ldr	r0, [r7, #12]
 8014ab2:	f020 fdeb 	bl	803568c <snprintf>
			break;
 8014ab6:	e038      	b.n	8014b2a <get_config_topik_string+0x172>
		case APPARENT_POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 8014ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8014b34 <get_config_topik_string+0x17c>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	79ba      	ldrb	r2, [r7, #6]
 8014abe:	9204      	str	r2, [sp, #16]
 8014ac0:	4a27      	ldr	r2, [pc, #156]	@ (8014b60 <get_config_topik_string+0x1a8>)
 8014ac2:	9203      	str	r2, [sp, #12]
 8014ac4:	9302      	str	r3, [sp, #8]
 8014ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8014b3c <get_config_topik_string+0x184>)
 8014ac8:	9301      	str	r3, [sp, #4]
 8014aca:	4b22      	ldr	r3, [pc, #136]	@ (8014b54 <get_config_topik_string+0x19c>)
 8014acc:	9300      	str	r3, [sp, #0]
 8014ace:	4b1d      	ldr	r3, [pc, #116]	@ (8014b44 <get_config_topik_string+0x18c>)
 8014ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8014b48 <get_config_topik_string+0x190>)
 8014ad2:	68b9      	ldr	r1, [r7, #8]
 8014ad4:	68f8      	ldr	r0, [r7, #12]
 8014ad6:	f020 fdd9 	bl	803568c <snprintf>
			break;
 8014ada:	e026      	b.n	8014b2a <get_config_topik_string+0x172>
		case POWER_FACTOR_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 8014adc:	4b15      	ldr	r3, [pc, #84]	@ (8014b34 <get_config_topik_string+0x17c>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	79ba      	ldrb	r2, [r7, #6]
 8014ae2:	9204      	str	r2, [sp, #16]
 8014ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8014b64 <get_config_topik_string+0x1ac>)
 8014ae6:	9203      	str	r2, [sp, #12]
 8014ae8:	9302      	str	r3, [sp, #8]
 8014aea:	4b14      	ldr	r3, [pc, #80]	@ (8014b3c <get_config_topik_string+0x184>)
 8014aec:	9301      	str	r3, [sp, #4]
 8014aee:	4b19      	ldr	r3, [pc, #100]	@ (8014b54 <get_config_topik_string+0x19c>)
 8014af0:	9300      	str	r3, [sp, #0]
 8014af2:	4b14      	ldr	r3, [pc, #80]	@ (8014b44 <get_config_topik_string+0x18c>)
 8014af4:	4a14      	ldr	r2, [pc, #80]	@ (8014b48 <get_config_topik_string+0x190>)
 8014af6:	68b9      	ldr	r1, [r7, #8]
 8014af8:	68f8      	ldr	r0, [r7, #12]
 8014afa:	f020 fdc7 	bl	803568c <snprintf>
			break;
 8014afe:	e014      	b.n	8014b2a <get_config_topik_string+0x172>
		case CURRENT_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 8014b00:	4b0c      	ldr	r3, [pc, #48]	@ (8014b34 <get_config_topik_string+0x17c>)
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	79ba      	ldrb	r2, [r7, #6]
 8014b06:	9204      	str	r2, [sp, #16]
 8014b08:	4a17      	ldr	r2, [pc, #92]	@ (8014b68 <get_config_topik_string+0x1b0>)
 8014b0a:	9203      	str	r2, [sp, #12]
 8014b0c:	9302      	str	r3, [sp, #8]
 8014b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8014b3c <get_config_topik_string+0x184>)
 8014b10:	9301      	str	r3, [sp, #4]
 8014b12:	4b10      	ldr	r3, [pc, #64]	@ (8014b54 <get_config_topik_string+0x19c>)
 8014b14:	9300      	str	r3, [sp, #0]
 8014b16:	4b0b      	ldr	r3, [pc, #44]	@ (8014b44 <get_config_topik_string+0x18c>)
 8014b18:	4a0b      	ldr	r2, [pc, #44]	@ (8014b48 <get_config_topik_string+0x190>)
 8014b1a:	68b9      	ldr	r1, [r7, #8]
 8014b1c:	68f8      	ldr	r0, [r7, #12]
 8014b1e:	f020 fdb5 	bl	803568c <snprintf>
			break;
 8014b22:	e002      	b.n	8014b2a <get_config_topik_string+0x172>
		default:
			return -1;
 8014b24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014b28:	e000      	b.n	8014b2c <get_config_topik_string+0x174>
			break;
	}


	return 0;
 8014b2a:	2300      	movs	r3, #0
}
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	3710      	adds	r7, #16
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}
 8014b34:	20000c08 	.word	0x20000c08
 8014b38:	08040788 	.word	0x08040788
 8014b3c:	08040790 	.word	0x08040790
 8014b40:	08040798 	.word	0x08040798
 8014b44:	20000074 	.word	0x20000074
 8014b48:	08040770 	.word	0x08040770
 8014b4c:	080407a8 	.word	0x080407a8
 8014b50:	080407b0 	.word	0x080407b0
 8014b54:	080407b8 	.word	0x080407b8
 8014b58:	080407c0 	.word	0x080407c0
 8014b5c:	080407c8 	.word	0x080407c8
 8014b60:	080407d0 	.word	0x080407d0
 8014b64:	080407e0 	.word	0x080407e0
 8014b68:	080407f0 	.word	0x080407f0

08014b6c <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 8014b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b6e:	b09f      	sub	sp, #124	@ 0x7c
 8014b70:	af16      	add	r7, sp, #88	@ 0x58
 8014b72:	60f8      	str	r0, [r7, #12]
 8014b74:	60b9      	str	r1, [r7, #8]
 8014b76:	4611      	mov	r1, r2
 8014b78:	461a      	mov	r2, r3
 8014b7a:	460b      	mov	r3, r1
 8014b7c:	71fb      	strb	r3, [r7, #7]
 8014b7e:	4613      	mov	r3, r2
 8014b80:	71bb      	strb	r3, [r7, #6]

	uint8_t len = 0;
 8014b82:	2300      	movs	r3, #0
 8014b84:	77fb      	strb	r3, [r7, #31]
	char * name      = NULL;
 8014b86:	2300      	movs	r3, #0
 8014b88:	61bb      	str	r3, [r7, #24]
	char * com_topik = NULL;
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	617b      	str	r3, [r7, #20]
	memset(payload, 0, payload_len * sizeof(char));
 8014b8e:	68ba      	ldr	r2, [r7, #8]
 8014b90:	2100      	movs	r1, #0
 8014b92:	68f8      	ldr	r0, [r7, #12]
 8014b94:	f021 faa4 	bl	80360e0 <memset>

	switch (payload_type) {
 8014b98:	79fb      	ldrb	r3, [r7, #7]
 8014b9a:	3b01      	subs	r3, #1
 8014b9c:	2b07      	cmp	r3, #7
 8014b9e:	f200 8211 	bhi.w	8014fc4 <get_config_payload_string+0x458>
 8014ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8014ba8 <get_config_payload_string+0x3c>)
 8014ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ba8:	08014bc9 	.word	0x08014bc9
 8014bac:	08014c59 	.word	0x08014c59
 8014bb0:	08014d23 	.word	0x08014d23
 8014bb4:	08014e4d 	.word	0x08014e4d
 8014bb8:	08014d81 	.word	0x08014d81
 8014bbc:	08014f09 	.word	0x08014f09
 8014bc0:	08014f67 	.word	0x08014f67
 8014bc4:	08014eab 	.word	0x08014eab

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8014bc8:	2101      	movs	r1, #1
 8014bca:	2080      	movs	r0, #128	@ 0x80
 8014bcc:	f7ff fe64 	bl	8014898 <_ZL9my_callocjj>
 8014bd0:	61b8      	str	r0, [r7, #24]
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8014bd2:	79bb      	ldrb	r3, [r7, #6]
 8014bd4:	9300      	str	r3, [sp, #0]
 8014bd6:	4b82      	ldr	r3, [pc, #520]	@ (8014de0 <get_config_payload_string+0x274>)
 8014bd8:	4a82      	ldr	r2, [pc, #520]	@ (8014de4 <get_config_payload_string+0x278>)
 8014bda:	2180      	movs	r1, #128	@ 0x80
 8014bdc:	69b8      	ldr	r0, [r7, #24]
 8014bde:	f020 fd55 	bl	803568c <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8014be2:	4b81      	ldr	r3, [pc, #516]	@ (8014de8 <get_config_payload_string+0x27c>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	79ba      	ldrb	r2, [r7, #6]
 8014be8:	79b9      	ldrb	r1, [r7, #6]
 8014bea:	487f      	ldr	r0, [pc, #508]	@ (8014de8 <get_config_payload_string+0x27c>)
 8014bec:	6800      	ldr	r0, [r0, #0]
 8014bee:	79bc      	ldrb	r4, [r7, #6]
 8014bf0:	4d7d      	ldr	r5, [pc, #500]	@ (8014de8 <get_config_payload_string+0x27c>)
 8014bf2:	682d      	ldr	r5, [r5, #0]
 8014bf4:	4e7d      	ldr	r6, [pc, #500]	@ (8014dec <get_config_payload_string+0x280>)
 8014bf6:	6836      	ldr	r6, [r6, #0]
 8014bf8:	9614      	str	r6, [sp, #80]	@ 0x50
 8014bfa:	4e7d      	ldr	r6, [pc, #500]	@ (8014df0 <get_config_payload_string+0x284>)
 8014bfc:	9613      	str	r6, [sp, #76]	@ 0x4c
 8014bfe:	4e7d      	ldr	r6, [pc, #500]	@ (8014df4 <get_config_payload_string+0x288>)
 8014c00:	9612      	str	r6, [sp, #72]	@ 0x48
 8014c02:	4e7d      	ldr	r6, [pc, #500]	@ (8014df8 <get_config_payload_string+0x28c>)
 8014c04:	9611      	str	r6, [sp, #68]	@ 0x44
 8014c06:	4e7d      	ldr	r6, [pc, #500]	@ (8014dfc <get_config_payload_string+0x290>)
 8014c08:	9610      	str	r6, [sp, #64]	@ 0x40
 8014c0a:	4e7d      	ldr	r6, [pc, #500]	@ (8014e00 <get_config_payload_string+0x294>)
 8014c0c:	960f      	str	r6, [sp, #60]	@ 0x3c
 8014c0e:	950e      	str	r5, [sp, #56]	@ 0x38
 8014c10:	4d7c      	ldr	r5, [pc, #496]	@ (8014e04 <get_config_payload_string+0x298>)
 8014c12:	950d      	str	r5, [sp, #52]	@ 0x34
 8014c14:	4d7c      	ldr	r5, [pc, #496]	@ (8014e08 <get_config_payload_string+0x29c>)
 8014c16:	950c      	str	r5, [sp, #48]	@ 0x30
 8014c18:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014c1a:	4c7c      	ldr	r4, [pc, #496]	@ (8014e0c <get_config_payload_string+0x2a0>)
 8014c1c:	940a      	str	r4, [sp, #40]	@ 0x28
 8014c1e:	9009      	str	r0, [sp, #36]	@ 0x24
 8014c20:	4878      	ldr	r0, [pc, #480]	@ (8014e04 <get_config_payload_string+0x298>)
 8014c22:	9008      	str	r0, [sp, #32]
 8014c24:	69b8      	ldr	r0, [r7, #24]
 8014c26:	9007      	str	r0, [sp, #28]
 8014c28:	4879      	ldr	r0, [pc, #484]	@ (8014e10 <get_config_payload_string+0x2a4>)
 8014c2a:	9006      	str	r0, [sp, #24]
 8014c2c:	9105      	str	r1, [sp, #20]
 8014c2e:	4977      	ldr	r1, [pc, #476]	@ (8014e0c <get_config_payload_string+0x2a0>)
 8014c30:	9104      	str	r1, [sp, #16]
 8014c32:	9203      	str	r2, [sp, #12]
 8014c34:	4a75      	ldr	r2, [pc, #468]	@ (8014e0c <get_config_payload_string+0x2a0>)
 8014c36:	9202      	str	r2, [sp, #8]
 8014c38:	9301      	str	r3, [sp, #4]
 8014c3a:	4b72      	ldr	r3, [pc, #456]	@ (8014e04 <get_config_payload_string+0x298>)
 8014c3c:	9300      	str	r3, [sp, #0]
 8014c3e:	4b75      	ldr	r3, [pc, #468]	@ (8014e14 <get_config_payload_string+0x2a8>)
 8014c40:	4a75      	ldr	r2, [pc, #468]	@ (8014e18 <get_config_payload_string+0x2ac>)
 8014c42:	68b9      	ldr	r1, [r7, #8]
 8014c44:	68f8      	ldr	r0, [r7, #12]
 8014c46:	f020 fd21 	bl	803568c <snprintf>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	77fb      	strb	r3, [r7, #31]
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8014c4e:	69b8      	ldr	r0, [r7, #24]
 8014c50:	f007 ff02 	bl	801ca58 <vPortFree>

			return len;
 8014c54:	7ffb      	ldrb	r3, [r7, #31]
 8014c56:	e1b8      	b.n	8014fca <get_config_payload_string+0x45e>
			break;

		case OUT_CONF_PAYLOAD:

			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8014c58:	2101      	movs	r1, #1
 8014c5a:	2080      	movs	r0, #128	@ 0x80
 8014c5c:	f7ff fe1c 	bl	8014898 <_ZL9my_callocjj>
 8014c60:	61b8      	str	r0, [r7, #24]
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8014c62:	2101      	movs	r1, #1
 8014c64:	2080      	movs	r0, #128	@ 0x80
 8014c66:	f7ff fe17 	bl	8014898 <_ZL9my_callocjj>
 8014c6a:	6178      	str	r0, [r7, #20]

			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8014c6c:	79bb      	ldrb	r3, [r7, #6]
 8014c6e:	9300      	str	r3, [sp, #0]
 8014c70:	4b6a      	ldr	r3, [pc, #424]	@ (8014e1c <get_config_payload_string+0x2b0>)
 8014c72:	4a6b      	ldr	r2, [pc, #428]	@ (8014e20 <get_config_payload_string+0x2b4>)
 8014c74:	2180      	movs	r1, #128	@ 0x80
 8014c76:	69b8      	ldr	r0, [r7, #24]
 8014c78:	f020 fd08 	bl	803568c <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 8014c7c:	4b5a      	ldr	r3, [pc, #360]	@ (8014de8 <get_config_payload_string+0x27c>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	4a61      	ldr	r2, [pc, #388]	@ (8014e08 <get_config_payload_string+0x29c>)
 8014c82:	9202      	str	r2, [sp, #8]
 8014c84:	69ba      	ldr	r2, [r7, #24]
 8014c86:	9201      	str	r2, [sp, #4]
 8014c88:	9300      	str	r3, [sp, #0]
 8014c8a:	4b5e      	ldr	r3, [pc, #376]	@ (8014e04 <get_config_payload_string+0x298>)
 8014c8c:	4a65      	ldr	r2, [pc, #404]	@ (8014e24 <get_config_payload_string+0x2b8>)
 8014c8e:	2180      	movs	r1, #128	@ 0x80
 8014c90:	6978      	ldr	r0, [r7, #20]
 8014c92:	f020 fcfb 	bl	803568c <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 8014c96:	79bb      	ldrb	r3, [r7, #6]
 8014c98:	9300      	str	r3, [sp, #0]
 8014c9a:	4b63      	ldr	r3, [pc, #396]	@ (8014e28 <get_config_payload_string+0x2bc>)
 8014c9c:	4a51      	ldr	r2, [pc, #324]	@ (8014de4 <get_config_payload_string+0x278>)
 8014c9e:	2180      	movs	r1, #128	@ 0x80
 8014ca0:	69b8      	ldr	r0, [r7, #24]
 8014ca2:	f020 fcf3 	bl	803568c <snprintf>

			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8014ca6:	4b50      	ldr	r3, [pc, #320]	@ (8014de8 <get_config_payload_string+0x27c>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	79ba      	ldrb	r2, [r7, #6]
 8014cac:	79b9      	ldrb	r1, [r7, #6]
 8014cae:	484e      	ldr	r0, [pc, #312]	@ (8014de8 <get_config_payload_string+0x27c>)
 8014cb0:	6800      	ldr	r0, [r0, #0]
 8014cb2:	79bc      	ldrb	r4, [r7, #6]
 8014cb4:	4d4c      	ldr	r5, [pc, #304]	@ (8014de8 <get_config_payload_string+0x27c>)
 8014cb6:	682d      	ldr	r5, [r5, #0]
 8014cb8:	4e4c      	ldr	r6, [pc, #304]	@ (8014dec <get_config_payload_string+0x280>)
 8014cba:	6836      	ldr	r6, [r6, #0]
 8014cbc:	9614      	str	r6, [sp, #80]	@ 0x50
 8014cbe:	4e4c      	ldr	r6, [pc, #304]	@ (8014df0 <get_config_payload_string+0x284>)
 8014cc0:	9613      	str	r6, [sp, #76]	@ 0x4c
 8014cc2:	4e4c      	ldr	r6, [pc, #304]	@ (8014df4 <get_config_payload_string+0x288>)
 8014cc4:	9612      	str	r6, [sp, #72]	@ 0x48
 8014cc6:	4e4c      	ldr	r6, [pc, #304]	@ (8014df8 <get_config_payload_string+0x28c>)
 8014cc8:	9611      	str	r6, [sp, #68]	@ 0x44
 8014cca:	4e4c      	ldr	r6, [pc, #304]	@ (8014dfc <get_config_payload_string+0x290>)
 8014ccc:	9610      	str	r6, [sp, #64]	@ 0x40
 8014cce:	4e4c      	ldr	r6, [pc, #304]	@ (8014e00 <get_config_payload_string+0x294>)
 8014cd0:	960f      	str	r6, [sp, #60]	@ 0x3c
 8014cd2:	950e      	str	r5, [sp, #56]	@ 0x38
 8014cd4:	4d4b      	ldr	r5, [pc, #300]	@ (8014e04 <get_config_payload_string+0x298>)
 8014cd6:	950d      	str	r5, [sp, #52]	@ 0x34
 8014cd8:	4d4b      	ldr	r5, [pc, #300]	@ (8014e08 <get_config_payload_string+0x29c>)
 8014cda:	950c      	str	r5, [sp, #48]	@ 0x30
 8014cdc:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014cde:	4c4f      	ldr	r4, [pc, #316]	@ (8014e1c <get_config_payload_string+0x2b0>)
 8014ce0:	940a      	str	r4, [sp, #40]	@ 0x28
 8014ce2:	9009      	str	r0, [sp, #36]	@ 0x24
 8014ce4:	4847      	ldr	r0, [pc, #284]	@ (8014e04 <get_config_payload_string+0x298>)
 8014ce6:	9008      	str	r0, [sp, #32]
 8014ce8:	69b8      	ldr	r0, [r7, #24]
 8014cea:	9007      	str	r0, [sp, #28]
 8014cec:	6978      	ldr	r0, [r7, #20]
 8014cee:	9006      	str	r0, [sp, #24]
 8014cf0:	9105      	str	r1, [sp, #20]
 8014cf2:	494a      	ldr	r1, [pc, #296]	@ (8014e1c <get_config_payload_string+0x2b0>)
 8014cf4:	9104      	str	r1, [sp, #16]
 8014cf6:	9203      	str	r2, [sp, #12]
 8014cf8:	4a48      	ldr	r2, [pc, #288]	@ (8014e1c <get_config_payload_string+0x2b0>)
 8014cfa:	9202      	str	r2, [sp, #8]
 8014cfc:	9301      	str	r3, [sp, #4]
 8014cfe:	4b41      	ldr	r3, [pc, #260]	@ (8014e04 <get_config_payload_string+0x298>)
 8014d00:	9300      	str	r3, [sp, #0]
 8014d02:	4b46      	ldr	r3, [pc, #280]	@ (8014e1c <get_config_payload_string+0x2b0>)
 8014d04:	4a44      	ldr	r2, [pc, #272]	@ (8014e18 <get_config_payload_string+0x2ac>)
 8014d06:	68b9      	ldr	r1, [r7, #8]
 8014d08:	68f8      	ldr	r0, [r7, #12]
 8014d0a:	f020 fcbf 	bl	803568c <snprintf>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	77fb      	strb	r3, [r7, #31]
							unical_id, component_switch, obj_number, component_switch, obj_number, com_topik, \
							name, dev_system, unical_id, \
							component_switch, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
							dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			//len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
			free(name);
 8014d12:	69b8      	ldr	r0, [r7, #24]
 8014d14:	f007 fea0 	bl	801ca58 <vPortFree>
			free(com_topik);
 8014d18:	6978      	ldr	r0, [r7, #20]
 8014d1a:	f007 fe9d 	bl	801ca58 <vPortFree>

			return len;
 8014d1e:	7ffb      	ldrb	r3, [r7, #31]
 8014d20:	e153      	b.n	8014fca <get_config_payload_string+0x45e>
			break;

		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8014d22:	4b31      	ldr	r3, [pc, #196]	@ (8014de8 <get_config_payload_string+0x27c>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	4a30      	ldr	r2, [pc, #192]	@ (8014de8 <get_config_payload_string+0x27c>)
 8014d28:	6812      	ldr	r2, [r2, #0]
 8014d2a:	492f      	ldr	r1, [pc, #188]	@ (8014de8 <get_config_payload_string+0x27c>)
 8014d2c:	6809      	ldr	r1, [r1, #0]
 8014d2e:	482f      	ldr	r0, [pc, #188]	@ (8014dec <get_config_payload_string+0x280>)
 8014d30:	6800      	ldr	r0, [r0, #0]
 8014d32:	9010      	str	r0, [sp, #64]	@ 0x40
 8014d34:	482e      	ldr	r0, [pc, #184]	@ (8014df0 <get_config_payload_string+0x284>)
 8014d36:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014d38:	482e      	ldr	r0, [pc, #184]	@ (8014df4 <get_config_payload_string+0x288>)
 8014d3a:	900e      	str	r0, [sp, #56]	@ 0x38
 8014d3c:	482e      	ldr	r0, [pc, #184]	@ (8014df8 <get_config_payload_string+0x28c>)
 8014d3e:	900d      	str	r0, [sp, #52]	@ 0x34
 8014d40:	482e      	ldr	r0, [pc, #184]	@ (8014dfc <get_config_payload_string+0x290>)
 8014d42:	900c      	str	r0, [sp, #48]	@ 0x30
 8014d44:	482e      	ldr	r0, [pc, #184]	@ (8014e00 <get_config_payload_string+0x294>)
 8014d46:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014d48:	910a      	str	r1, [sp, #40]	@ 0x28
 8014d4a:	492e      	ldr	r1, [pc, #184]	@ (8014e04 <get_config_payload_string+0x298>)
 8014d4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8014d4e:	4937      	ldr	r1, [pc, #220]	@ (8014e2c <get_config_payload_string+0x2c0>)
 8014d50:	9108      	str	r1, [sp, #32]
 8014d52:	4937      	ldr	r1, [pc, #220]	@ (8014e30 <get_config_payload_string+0x2c4>)
 8014d54:	9107      	str	r1, [sp, #28]
 8014d56:	9206      	str	r2, [sp, #24]
 8014d58:	4a2a      	ldr	r2, [pc, #168]	@ (8014e04 <get_config_payload_string+0x298>)
 8014d5a:	9205      	str	r2, [sp, #20]
 8014d5c:	4a35      	ldr	r2, [pc, #212]	@ (8014e34 <get_config_payload_string+0x2c8>)
 8014d5e:	9204      	str	r2, [sp, #16]
 8014d60:	4a35      	ldr	r2, [pc, #212]	@ (8014e38 <get_config_payload_string+0x2cc>)
 8014d62:	9203      	str	r2, [sp, #12]
 8014d64:	4a32      	ldr	r2, [pc, #200]	@ (8014e30 <get_config_payload_string+0x2c4>)
 8014d66:	9202      	str	r2, [sp, #8]
 8014d68:	4a34      	ldr	r2, [pc, #208]	@ (8014e3c <get_config_payload_string+0x2d0>)
 8014d6a:	9201      	str	r2, [sp, #4]
 8014d6c:	9300      	str	r3, [sp, #0]
 8014d6e:	4b25      	ldr	r3, [pc, #148]	@ (8014e04 <get_config_payload_string+0x298>)
 8014d70:	4a2f      	ldr	r2, [pc, #188]	@ (8014e30 <get_config_payload_string+0x2c4>)
 8014d72:	4929      	ldr	r1, [pc, #164]	@ (8014e18 <get_config_payload_string+0x2ac>)
 8014d74:	68f8      	ldr	r0, [r7, #12]
 8014d76:	f020 fdf1 	bl	803595c <sprintf>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014d7e:	e124      	b.n	8014fca <get_config_payload_string+0x45e>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8014d80:	4b19      	ldr	r3, [pc, #100]	@ (8014de8 <get_config_payload_string+0x27c>)
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	4a18      	ldr	r2, [pc, #96]	@ (8014de8 <get_config_payload_string+0x27c>)
 8014d86:	6812      	ldr	r2, [r2, #0]
 8014d88:	4917      	ldr	r1, [pc, #92]	@ (8014de8 <get_config_payload_string+0x27c>)
 8014d8a:	6809      	ldr	r1, [r1, #0]
 8014d8c:	4817      	ldr	r0, [pc, #92]	@ (8014dec <get_config_payload_string+0x280>)
 8014d8e:	6800      	ldr	r0, [r0, #0]
 8014d90:	9010      	str	r0, [sp, #64]	@ 0x40
 8014d92:	4817      	ldr	r0, [pc, #92]	@ (8014df0 <get_config_payload_string+0x284>)
 8014d94:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014d96:	4817      	ldr	r0, [pc, #92]	@ (8014df4 <get_config_payload_string+0x288>)
 8014d98:	900e      	str	r0, [sp, #56]	@ 0x38
 8014d9a:	4817      	ldr	r0, [pc, #92]	@ (8014df8 <get_config_payload_string+0x28c>)
 8014d9c:	900d      	str	r0, [sp, #52]	@ 0x34
 8014d9e:	4817      	ldr	r0, [pc, #92]	@ (8014dfc <get_config_payload_string+0x290>)
 8014da0:	900c      	str	r0, [sp, #48]	@ 0x30
 8014da2:	4817      	ldr	r0, [pc, #92]	@ (8014e00 <get_config_payload_string+0x294>)
 8014da4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014da6:	910a      	str	r1, [sp, #40]	@ 0x28
 8014da8:	4916      	ldr	r1, [pc, #88]	@ (8014e04 <get_config_payload_string+0x298>)
 8014daa:	9109      	str	r1, [sp, #36]	@ 0x24
 8014dac:	4924      	ldr	r1, [pc, #144]	@ (8014e40 <get_config_payload_string+0x2d4>)
 8014dae:	9108      	str	r1, [sp, #32]
 8014db0:	4924      	ldr	r1, [pc, #144]	@ (8014e44 <get_config_payload_string+0x2d8>)
 8014db2:	9107      	str	r1, [sp, #28]
 8014db4:	9206      	str	r2, [sp, #24]
 8014db6:	4a13      	ldr	r2, [pc, #76]	@ (8014e04 <get_config_payload_string+0x298>)
 8014db8:	9205      	str	r2, [sp, #20]
 8014dba:	4a23      	ldr	r2, [pc, #140]	@ (8014e48 <get_config_payload_string+0x2dc>)
 8014dbc:	9204      	str	r2, [sp, #16]
 8014dbe:	4a14      	ldr	r2, [pc, #80]	@ (8014e10 <get_config_payload_string+0x2a4>)
 8014dc0:	9203      	str	r2, [sp, #12]
 8014dc2:	4a20      	ldr	r2, [pc, #128]	@ (8014e44 <get_config_payload_string+0x2d8>)
 8014dc4:	9202      	str	r2, [sp, #8]
 8014dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8014e3c <get_config_payload_string+0x2d0>)
 8014dc8:	9201      	str	r2, [sp, #4]
 8014dca:	9300      	str	r3, [sp, #0]
 8014dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8014e04 <get_config_payload_string+0x298>)
 8014dce:	4a1d      	ldr	r2, [pc, #116]	@ (8014e44 <get_config_payload_string+0x2d8>)
 8014dd0:	4911      	ldr	r1, [pc, #68]	@ (8014e18 <get_config_payload_string+0x2ac>)
 8014dd2:	68f8      	ldr	r0, [r7, #12]
 8014dd4:	f020 fdc2 	bl	803595c <sprintf>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014ddc:	e0f5      	b.n	8014fca <get_config_payload_string+0x45e>
 8014dde:	bf00      	nop
 8014de0:	080407f8 	.word	0x080407f8
 8014de4:	08040804 	.word	0x08040804
 8014de8:	20000c08 	.word	0x20000c08
 8014dec:	20000c0c 	.word	0x20000c0c
 8014df0:	0804080c 	.word	0x0804080c
 8014df4:	08040810 	.word	0x08040810
 8014df8:	08040814 	.word	0x08040814
 8014dfc:	08040824 	.word	0x08040824
 8014e00:	08040838 	.word	0x08040838
 8014e04:	08040790 	.word	0x08040790
 8014e08:	08040844 	.word	0x08040844
 8014e0c:	08040788 	.word	0x08040788
 8014e10:	08040848 	.word	0x08040848
 8014e14:	080407c8 	.word	0x080407c8
 8014e18:	08043c0c 	.word	0x08043c0c
 8014e1c:	080407a8 	.word	0x080407a8
 8014e20:	0804084c 	.word	0x0804084c
 8014e24:	08043d8c 	.word	0x08043d8c
 8014e28:	08040854 	.word	0x08040854
 8014e2c:	08040868 	.word	0x08040868
 8014e30:	080407b0 	.word	0x080407b0
 8014e34:	0804086c 	.word	0x0804086c
 8014e38:	0804087c 	.word	0x0804087c
 8014e3c:	080408a0 	.word	0x080408a0
 8014e40:	080408a8 	.word	0x080408a8
 8014e44:	080407c0 	.word	0x080407c0
 8014e48:	080408ac 	.word	0x080408ac
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8014e4c:	4b61      	ldr	r3, [pc, #388]	@ (8014fd4 <get_config_payload_string+0x468>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	4a60      	ldr	r2, [pc, #384]	@ (8014fd4 <get_config_payload_string+0x468>)
 8014e52:	6812      	ldr	r2, [r2, #0]
 8014e54:	495f      	ldr	r1, [pc, #380]	@ (8014fd4 <get_config_payload_string+0x468>)
 8014e56:	6809      	ldr	r1, [r1, #0]
 8014e58:	485f      	ldr	r0, [pc, #380]	@ (8014fd8 <get_config_payload_string+0x46c>)
 8014e5a:	6800      	ldr	r0, [r0, #0]
 8014e5c:	9010      	str	r0, [sp, #64]	@ 0x40
 8014e5e:	485f      	ldr	r0, [pc, #380]	@ (8014fdc <get_config_payload_string+0x470>)
 8014e60:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014e62:	485f      	ldr	r0, [pc, #380]	@ (8014fe0 <get_config_payload_string+0x474>)
 8014e64:	900e      	str	r0, [sp, #56]	@ 0x38
 8014e66:	485f      	ldr	r0, [pc, #380]	@ (8014fe4 <get_config_payload_string+0x478>)
 8014e68:	900d      	str	r0, [sp, #52]	@ 0x34
 8014e6a:	485f      	ldr	r0, [pc, #380]	@ (8014fe8 <get_config_payload_string+0x47c>)
 8014e6c:	900c      	str	r0, [sp, #48]	@ 0x30
 8014e6e:	485f      	ldr	r0, [pc, #380]	@ (8014fec <get_config_payload_string+0x480>)
 8014e70:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014e72:	910a      	str	r1, [sp, #40]	@ 0x28
 8014e74:	495e      	ldr	r1, [pc, #376]	@ (8014ff0 <get_config_payload_string+0x484>)
 8014e76:	9109      	str	r1, [sp, #36]	@ 0x24
 8014e78:	495e      	ldr	r1, [pc, #376]	@ (8014ff4 <get_config_payload_string+0x488>)
 8014e7a:	9108      	str	r1, [sp, #32]
 8014e7c:	495e      	ldr	r1, [pc, #376]	@ (8014ff8 <get_config_payload_string+0x48c>)
 8014e7e:	9107      	str	r1, [sp, #28]
 8014e80:	9206      	str	r2, [sp, #24]
 8014e82:	4a5b      	ldr	r2, [pc, #364]	@ (8014ff0 <get_config_payload_string+0x484>)
 8014e84:	9205      	str	r2, [sp, #20]
 8014e86:	4a5d      	ldr	r2, [pc, #372]	@ (8014ffc <get_config_payload_string+0x490>)
 8014e88:	9204      	str	r2, [sp, #16]
 8014e8a:	4a5d      	ldr	r2, [pc, #372]	@ (8015000 <get_config_payload_string+0x494>)
 8014e8c:	9203      	str	r2, [sp, #12]
 8014e8e:	4a5a      	ldr	r2, [pc, #360]	@ (8014ff8 <get_config_payload_string+0x48c>)
 8014e90:	9202      	str	r2, [sp, #8]
 8014e92:	4a5c      	ldr	r2, [pc, #368]	@ (8015004 <get_config_payload_string+0x498>)
 8014e94:	9201      	str	r2, [sp, #4]
 8014e96:	9300      	str	r3, [sp, #0]
 8014e98:	4b55      	ldr	r3, [pc, #340]	@ (8014ff0 <get_config_payload_string+0x484>)
 8014e9a:	4a57      	ldr	r2, [pc, #348]	@ (8014ff8 <get_config_payload_string+0x48c>)
 8014e9c:	495a      	ldr	r1, [pc, #360]	@ (8015008 <get_config_payload_string+0x49c>)
 8014e9e:	68f8      	ldr	r0, [r7, #12]
 8014ea0:	f020 fd5c 	bl	803595c <sprintf>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014ea8:	e08f      	b.n	8014fca <get_config_payload_string+0x45e>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8014eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8014fd4 <get_config_payload_string+0x468>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	4a49      	ldr	r2, [pc, #292]	@ (8014fd4 <get_config_payload_string+0x468>)
 8014eb0:	6812      	ldr	r2, [r2, #0]
 8014eb2:	4948      	ldr	r1, [pc, #288]	@ (8014fd4 <get_config_payload_string+0x468>)
 8014eb4:	6809      	ldr	r1, [r1, #0]
 8014eb6:	4848      	ldr	r0, [pc, #288]	@ (8014fd8 <get_config_payload_string+0x46c>)
 8014eb8:	6800      	ldr	r0, [r0, #0]
 8014eba:	9010      	str	r0, [sp, #64]	@ 0x40
 8014ebc:	4847      	ldr	r0, [pc, #284]	@ (8014fdc <get_config_payload_string+0x470>)
 8014ebe:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014ec0:	4847      	ldr	r0, [pc, #284]	@ (8014fe0 <get_config_payload_string+0x474>)
 8014ec2:	900e      	str	r0, [sp, #56]	@ 0x38
 8014ec4:	4847      	ldr	r0, [pc, #284]	@ (8014fe4 <get_config_payload_string+0x478>)
 8014ec6:	900d      	str	r0, [sp, #52]	@ 0x34
 8014ec8:	4847      	ldr	r0, [pc, #284]	@ (8014fe8 <get_config_payload_string+0x47c>)
 8014eca:	900c      	str	r0, [sp, #48]	@ 0x30
 8014ecc:	4847      	ldr	r0, [pc, #284]	@ (8014fec <get_config_payload_string+0x480>)
 8014ece:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014ed0:	910a      	str	r1, [sp, #40]	@ 0x28
 8014ed2:	4947      	ldr	r1, [pc, #284]	@ (8014ff0 <get_config_payload_string+0x484>)
 8014ed4:	9109      	str	r1, [sp, #36]	@ 0x24
 8014ed6:	494d      	ldr	r1, [pc, #308]	@ (801500c <get_config_payload_string+0x4a0>)
 8014ed8:	9108      	str	r1, [sp, #32]
 8014eda:	494d      	ldr	r1, [pc, #308]	@ (8015010 <get_config_payload_string+0x4a4>)
 8014edc:	9107      	str	r1, [sp, #28]
 8014ede:	9206      	str	r2, [sp, #24]
 8014ee0:	4a43      	ldr	r2, [pc, #268]	@ (8014ff0 <get_config_payload_string+0x484>)
 8014ee2:	9205      	str	r2, [sp, #20]
 8014ee4:	4a4b      	ldr	r2, [pc, #300]	@ (8015014 <get_config_payload_string+0x4a8>)
 8014ee6:	9204      	str	r2, [sp, #16]
 8014ee8:	4a45      	ldr	r2, [pc, #276]	@ (8015000 <get_config_payload_string+0x494>)
 8014eea:	9203      	str	r2, [sp, #12]
 8014eec:	4a48      	ldr	r2, [pc, #288]	@ (8015010 <get_config_payload_string+0x4a4>)
 8014eee:	9202      	str	r2, [sp, #8]
 8014ef0:	4a44      	ldr	r2, [pc, #272]	@ (8015004 <get_config_payload_string+0x498>)
 8014ef2:	9201      	str	r2, [sp, #4]
 8014ef4:	9300      	str	r3, [sp, #0]
 8014ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8014ff0 <get_config_payload_string+0x484>)
 8014ef8:	4a45      	ldr	r2, [pc, #276]	@ (8015010 <get_config_payload_string+0x4a4>)
 8014efa:	4943      	ldr	r1, [pc, #268]	@ (8015008 <get_config_payload_string+0x49c>)
 8014efc:	68f8      	ldr	r0, [r7, #12]
 8014efe:	f020 fd2d 	bl	803595c <sprintf>
 8014f02:	4603      	mov	r3, r0
 8014f04:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014f06:	e060      	b.n	8014fca <get_config_payload_string+0x45e>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8014f08:	4b32      	ldr	r3, [pc, #200]	@ (8014fd4 <get_config_payload_string+0x468>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	4a31      	ldr	r2, [pc, #196]	@ (8014fd4 <get_config_payload_string+0x468>)
 8014f0e:	6812      	ldr	r2, [r2, #0]
 8014f10:	4930      	ldr	r1, [pc, #192]	@ (8014fd4 <get_config_payload_string+0x468>)
 8014f12:	6809      	ldr	r1, [r1, #0]
 8014f14:	4830      	ldr	r0, [pc, #192]	@ (8014fd8 <get_config_payload_string+0x46c>)
 8014f16:	6800      	ldr	r0, [r0, #0]
 8014f18:	9010      	str	r0, [sp, #64]	@ 0x40
 8014f1a:	4830      	ldr	r0, [pc, #192]	@ (8014fdc <get_config_payload_string+0x470>)
 8014f1c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014f1e:	4830      	ldr	r0, [pc, #192]	@ (8014fe0 <get_config_payload_string+0x474>)
 8014f20:	900e      	str	r0, [sp, #56]	@ 0x38
 8014f22:	4830      	ldr	r0, [pc, #192]	@ (8014fe4 <get_config_payload_string+0x478>)
 8014f24:	900d      	str	r0, [sp, #52]	@ 0x34
 8014f26:	4830      	ldr	r0, [pc, #192]	@ (8014fe8 <get_config_payload_string+0x47c>)
 8014f28:	900c      	str	r0, [sp, #48]	@ 0x30
 8014f2a:	4830      	ldr	r0, [pc, #192]	@ (8014fec <get_config_payload_string+0x480>)
 8014f2c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014f2e:	910a      	str	r1, [sp, #40]	@ 0x28
 8014f30:	492f      	ldr	r1, [pc, #188]	@ (8014ff0 <get_config_payload_string+0x484>)
 8014f32:	9109      	str	r1, [sp, #36]	@ 0x24
 8014f34:	4938      	ldr	r1, [pc, #224]	@ (8015018 <get_config_payload_string+0x4ac>)
 8014f36:	9108      	str	r1, [sp, #32]
 8014f38:	4938      	ldr	r1, [pc, #224]	@ (801501c <get_config_payload_string+0x4b0>)
 8014f3a:	9107      	str	r1, [sp, #28]
 8014f3c:	9206      	str	r2, [sp, #24]
 8014f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8014ff0 <get_config_payload_string+0x484>)
 8014f40:	9205      	str	r2, [sp, #20]
 8014f42:	4a37      	ldr	r2, [pc, #220]	@ (8015020 <get_config_payload_string+0x4b4>)
 8014f44:	9204      	str	r2, [sp, #16]
 8014f46:	4a2e      	ldr	r2, [pc, #184]	@ (8015000 <get_config_payload_string+0x494>)
 8014f48:	9203      	str	r2, [sp, #12]
 8014f4a:	4a34      	ldr	r2, [pc, #208]	@ (801501c <get_config_payload_string+0x4b0>)
 8014f4c:	9202      	str	r2, [sp, #8]
 8014f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8015004 <get_config_payload_string+0x498>)
 8014f50:	9201      	str	r2, [sp, #4]
 8014f52:	9300      	str	r3, [sp, #0]
 8014f54:	4b26      	ldr	r3, [pc, #152]	@ (8014ff0 <get_config_payload_string+0x484>)
 8014f56:	4a31      	ldr	r2, [pc, #196]	@ (801501c <get_config_payload_string+0x4b0>)
 8014f58:	492b      	ldr	r1, [pc, #172]	@ (8015008 <get_config_payload_string+0x49c>)
 8014f5a:	68f8      	ldr	r0, [r7, #12]
 8014f5c:	f020 fcfe 	bl	803595c <sprintf>
 8014f60:	4603      	mov	r3, r0
 8014f62:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014f64:	e031      	b.n	8014fca <get_config_payload_string+0x45e>
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8014f66:	4b1b      	ldr	r3, [pc, #108]	@ (8014fd4 <get_config_payload_string+0x468>)
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8014fd4 <get_config_payload_string+0x468>)
 8014f6c:	6812      	ldr	r2, [r2, #0]
 8014f6e:	4919      	ldr	r1, [pc, #100]	@ (8014fd4 <get_config_payload_string+0x468>)
 8014f70:	6809      	ldr	r1, [r1, #0]
 8014f72:	4819      	ldr	r0, [pc, #100]	@ (8014fd8 <get_config_payload_string+0x46c>)
 8014f74:	6800      	ldr	r0, [r0, #0]
 8014f76:	9010      	str	r0, [sp, #64]	@ 0x40
 8014f78:	4818      	ldr	r0, [pc, #96]	@ (8014fdc <get_config_payload_string+0x470>)
 8014f7a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014f7c:	4818      	ldr	r0, [pc, #96]	@ (8014fe0 <get_config_payload_string+0x474>)
 8014f7e:	900e      	str	r0, [sp, #56]	@ 0x38
 8014f80:	4818      	ldr	r0, [pc, #96]	@ (8014fe4 <get_config_payload_string+0x478>)
 8014f82:	900d      	str	r0, [sp, #52]	@ 0x34
 8014f84:	4818      	ldr	r0, [pc, #96]	@ (8014fe8 <get_config_payload_string+0x47c>)
 8014f86:	900c      	str	r0, [sp, #48]	@ 0x30
 8014f88:	4818      	ldr	r0, [pc, #96]	@ (8014fec <get_config_payload_string+0x480>)
 8014f8a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014f8c:	910a      	str	r1, [sp, #40]	@ 0x28
 8014f8e:	4918      	ldr	r1, [pc, #96]	@ (8014ff0 <get_config_payload_string+0x484>)
 8014f90:	9109      	str	r1, [sp, #36]	@ 0x24
 8014f92:	4924      	ldr	r1, [pc, #144]	@ (8015024 <get_config_payload_string+0x4b8>)
 8014f94:	9108      	str	r1, [sp, #32]
 8014f96:	4924      	ldr	r1, [pc, #144]	@ (8015028 <get_config_payload_string+0x4bc>)
 8014f98:	9107      	str	r1, [sp, #28]
 8014f9a:	9206      	str	r2, [sp, #24]
 8014f9c:	4a14      	ldr	r2, [pc, #80]	@ (8014ff0 <get_config_payload_string+0x484>)
 8014f9e:	9205      	str	r2, [sp, #20]
 8014fa0:	4a22      	ldr	r2, [pc, #136]	@ (801502c <get_config_payload_string+0x4c0>)
 8014fa2:	9204      	str	r2, [sp, #16]
 8014fa4:	4a16      	ldr	r2, [pc, #88]	@ (8015000 <get_config_payload_string+0x494>)
 8014fa6:	9203      	str	r2, [sp, #12]
 8014fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8015028 <get_config_payload_string+0x4bc>)
 8014faa:	9202      	str	r2, [sp, #8]
 8014fac:	4a15      	ldr	r2, [pc, #84]	@ (8015004 <get_config_payload_string+0x498>)
 8014fae:	9201      	str	r2, [sp, #4]
 8014fb0:	9300      	str	r3, [sp, #0]
 8014fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8014ff0 <get_config_payload_string+0x484>)
 8014fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8015028 <get_config_payload_string+0x4bc>)
 8014fb6:	4914      	ldr	r1, [pc, #80]	@ (8015008 <get_config_payload_string+0x49c>)
 8014fb8:	68f8      	ldr	r0, [r7, #12]
 8014fba:	f020 fccf 	bl	803595c <sprintf>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014fc2:	e002      	b.n	8014fca <get_config_payload_string+0x45e>

		default:
			return -1;
 8014fc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014fc8:	e7ff      	b.n	8014fca <get_config_payload_string+0x45e>
			break;
	}
}
 8014fca:	4618      	mov	r0, r3
 8014fcc:	3724      	adds	r7, #36	@ 0x24
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fd2:	bf00      	nop
 8014fd4:	20000c08 	.word	0x20000c08
 8014fd8:	20000c0c 	.word	0x20000c0c
 8014fdc:	0804080c 	.word	0x0804080c
 8014fe0:	08040810 	.word	0x08040810
 8014fe4:	08040814 	.word	0x08040814
 8014fe8:	08040824 	.word	0x08040824
 8014fec:	08040838 	.word	0x08040838
 8014ff0:	08040790 	.word	0x08040790
 8014ff4:	080408bc 	.word	0x080408bc
 8014ff8:	080407c8 	.word	0x080407c8
 8014ffc:	080408c0 	.word	0x080408c0
 8015000:	08040848 	.word	0x08040848
 8015004:	080408a0 	.word	0x080408a0
 8015008:	08043c0c 	.word	0x08043c0c
 801500c:	080408e4 	.word	0x080408e4
 8015010:	080407d0 	.word	0x080407d0
 8015014:	080408e8 	.word	0x080408e8
 8015018:	08040908 	.word	0x08040908
 801501c:	080407e0 	.word	0x080407e0
 8015020:	0804090c 	.word	0x0804090c
 8015024:	08040938 	.word	0x08040938
 8015028:	080407f0 	.word	0x080407f0
 801502c:	0804093c 	.word	0x0804093c

08015030 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8015030:	b580      	push	{r7, lr}
 8015032:	b088      	sub	sp, #32
 8015034:	af02      	add	r7, sp, #8
 8015036:	60f8      	str	r0, [r7, #12]
 8015038:	60b9      	str	r1, [r7, #8]
 801503a:	4611      	mov	r1, r2
 801503c:	461a      	mov	r2, r3
 801503e:	460b      	mov	r3, r1
 8015040:	71fb      	strb	r3, [r7, #7]
 8015042:	4613      	mov	r3, r2
 8015044:	71bb      	strb	r3, [r7, #6]

	char * sens_name = NULL;
 8015046:	2300      	movs	r3, #0
 8015048:	617b      	str	r3, [r7, #20]
	switch (sensor_type) {
 801504a:	79fb      	ldrb	r3, [r7, #7]
 801504c:	2b01      	cmp	r3, #1
 801504e:	d002      	beq.n	8015056 <gen_bin_sensor_status_payload_JSON+0x26>
 8015050:	2b02      	cmp	r3, #2
 8015052:	d003      	beq.n	801505c <gen_bin_sensor_status_payload_JSON+0x2c>
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
			break;
		default:
			break;
 8015054:	e005      	b.n	8015062 <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)component_input;
 8015056:	4b13      	ldr	r3, [pc, #76]	@ (80150a4 <gen_bin_sensor_status_payload_JSON+0x74>)
 8015058:	617b      	str	r3, [r7, #20]
			break;
 801505a:	e002      	b.n	8015062 <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)dev_class_switch;
 801505c:	4b12      	ldr	r3, [pc, #72]	@ (80150a8 <gen_bin_sensor_status_payload_JSON+0x78>)
 801505e:	617b      	str	r3, [r7, #20]
			break;
 8015060:	bf00      	nop
	}

	if (state){
 8015062:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d00b      	beq.n	8015082 <gen_bin_sensor_status_payload_JSON+0x52>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 801506a:	79bb      	ldrb	r3, [r7, #6]
 801506c:	4a0f      	ldr	r2, [pc, #60]	@ (80150ac <gen_bin_sensor_status_payload_JSON+0x7c>)
 801506e:	9201      	str	r2, [sp, #4]
 8015070:	9300      	str	r3, [sp, #0]
 8015072:	697b      	ldr	r3, [r7, #20]
 8015074:	4a0e      	ldr	r2, [pc, #56]	@ (80150b0 <gen_bin_sensor_status_payload_JSON+0x80>)
 8015076:	68b9      	ldr	r1, [r7, #8]
 8015078:	68f8      	ldr	r0, [r7, #12]
 801507a:	f020 fb07 	bl	803568c <snprintf>
 801507e:	4603      	mov	r3, r0
 8015080:	e00b      	b.n	801509a <gen_bin_sensor_status_payload_JSON+0x6a>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8015082:	79bb      	ldrb	r3, [r7, #6]
 8015084:	4a0b      	ldr	r2, [pc, #44]	@ (80150b4 <gen_bin_sensor_status_payload_JSON+0x84>)
 8015086:	9201      	str	r2, [sp, #4]
 8015088:	9300      	str	r3, [sp, #0]
 801508a:	697b      	ldr	r3, [r7, #20]
 801508c:	4a08      	ldr	r2, [pc, #32]	@ (80150b0 <gen_bin_sensor_status_payload_JSON+0x80>)
 801508e:	68b9      	ldr	r1, [r7, #8]
 8015090:	68f8      	ldr	r0, [r7, #12]
 8015092:	f020 fafb 	bl	803568c <snprintf>
 8015096:	4603      	mov	r3, r0
 8015098:	bf00      	nop
	}
}
 801509a:	4618      	mov	r0, r3
 801509c:	3718      	adds	r7, #24
 801509e:	46bd      	mov	sp, r7
 80150a0:	bd80      	pop	{r7, pc}
 80150a2:	bf00      	nop
 80150a4:	08040788 	.word	0x08040788
 80150a8:	080407a8 	.word	0x080407a8
 80150ac:	08040948 	.word	0x08040948
 80150b0:	08043db4 	.word	0x08043db4
 80150b4:	0804094c 	.word	0x0804094c

080150b8 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b088      	sub	sp, #32
 80150bc:	af04      	add	r7, sp, #16
 80150be:	60f8      	str	r0, [r7, #12]
 80150c0:	60b9      	str	r1, [r7, #8]
 80150c2:	4611      	mov	r1, r2
 80150c4:	461a      	mov	r2, r3
 80150c6:	460b      	mov	r3, r1
 80150c8:	71fb      	strb	r3, [r7, #7]
 80150ca:	4613      	mov	r3, r2
 80150cc:	71bb      	strb	r3, [r7, #6]

	switch(sensor_type){
 80150ce:	79fb      	ldrb	r3, [r7, #7]
 80150d0:	2b02      	cmp	r3, #2
 80150d2:	d10e      	bne.n	80150f2 <generate_comand_topik_for_subscrabe+0x3a>

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 80150d4:	4b09      	ldr	r3, [pc, #36]	@ (80150fc <generate_comand_topik_for_subscrabe+0x44>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	79ba      	ldrb	r2, [r7, #6]
 80150da:	9202      	str	r2, [sp, #8]
 80150dc:	4a08      	ldr	r2, [pc, #32]	@ (8015100 <generate_comand_topik_for_subscrabe+0x48>)
 80150de:	9201      	str	r2, [sp, #4]
 80150e0:	9300      	str	r3, [sp, #0]
 80150e2:	4b08      	ldr	r3, [pc, #32]	@ (8015104 <generate_comand_topik_for_subscrabe+0x4c>)
 80150e4:	4a08      	ldr	r2, [pc, #32]	@ (8015108 <generate_comand_topik_for_subscrabe+0x50>)
 80150e6:	68b9      	ldr	r1, [r7, #8]
 80150e8:	68f8      	ldr	r0, [r7, #12]
 80150ea:	f020 facf 	bl	803568c <snprintf>
 80150ee:	4603      	mov	r3, r0
 80150f0:	e7ff      	b.n	80150f2 <generate_comand_topik_for_subscrabe+0x3a>
			break;
	}
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	3710      	adds	r7, #16
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}
 80150fa:	bf00      	nop
 80150fc:	20000c08 	.word	0x20000c08
 8015100:	080407a8 	.word	0x080407a8
 8015104:	08040790 	.word	0x08040790
 8015108:	08040950 	.word	0x08040950

0801510c <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 801510c:	b580      	push	{r7, lr}
 801510e:	b088      	sub	sp, #32
 8015110:	af04      	add	r7, sp, #16
 8015112:	60f8      	str	r0, [r7, #12]
 8015114:	60b9      	str	r1, [r7, #8]
 8015116:	4611      	mov	r1, r2
 8015118:	461a      	mov	r2, r3
 801511a:	460b      	mov	r3, r1
 801511c:	71fb      	strb	r3, [r7, #7]
 801511e:	4613      	mov	r3, r2
 8015120:	71bb      	strb	r3, [r7, #6]

	strcpy(topik, "\0");
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	2200      	movs	r2, #0
 8015126:	701a      	strb	r2, [r3, #0]

	switch (sensor_type) {
 8015128:	79fb      	ldrb	r3, [r7, #7]
 801512a:	2b01      	cmp	r3, #1
 801512c:	d002      	beq.n	8015134 <generate_status_topik+0x28>
 801512e:	2b02      	cmp	r3, #2
 8015130:	d00f      	beq.n	8015152 <generate_status_topik+0x46>
 8015132:	e01d      	b.n	8015170 <generate_status_topik+0x64>
		case INPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8015134:	4b11      	ldr	r3, [pc, #68]	@ (801517c <generate_status_topik+0x70>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	79ba      	ldrb	r2, [r7, #6]
 801513a:	9202      	str	r2, [sp, #8]
 801513c:	4a10      	ldr	r2, [pc, #64]	@ (8015180 <generate_status_topik+0x74>)
 801513e:	9201      	str	r2, [sp, #4]
 8015140:	9300      	str	r3, [sp, #0]
 8015142:	4b10      	ldr	r3, [pc, #64]	@ (8015184 <generate_status_topik+0x78>)
 8015144:	4a10      	ldr	r2, [pc, #64]	@ (8015188 <generate_status_topik+0x7c>)
 8015146:	68b9      	ldr	r1, [r7, #8]
 8015148:	68f8      	ldr	r0, [r7, #12]
 801514a:	f020 fa9f 	bl	803568c <snprintf>
 801514e:	4603      	mov	r3, r0
 8015150:	e010      	b.n	8015174 <generate_status_topik+0x68>
			break;

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8015152:	4b0a      	ldr	r3, [pc, #40]	@ (801517c <generate_status_topik+0x70>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	79ba      	ldrb	r2, [r7, #6]
 8015158:	9202      	str	r2, [sp, #8]
 801515a:	4a0c      	ldr	r2, [pc, #48]	@ (801518c <generate_status_topik+0x80>)
 801515c:	9201      	str	r2, [sp, #4]
 801515e:	9300      	str	r3, [sp, #0]
 8015160:	4b08      	ldr	r3, [pc, #32]	@ (8015184 <generate_status_topik+0x78>)
 8015162:	4a09      	ldr	r2, [pc, #36]	@ (8015188 <generate_status_topik+0x7c>)
 8015164:	68b9      	ldr	r1, [r7, #8]
 8015166:	68f8      	ldr	r0, [r7, #12]
 8015168:	f020 fa90 	bl	803568c <snprintf>
 801516c:	4603      	mov	r3, r0
 801516e:	e001      	b.n	8015174 <generate_status_topik+0x68>
			break;

		default:
			return -1;
 8015170:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
			break;
	}

	return 0;
}
 8015174:	4618      	mov	r0, r3
 8015176:	3710      	adds	r7, #16
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}
 801517c:	20000c08 	.word	0x20000c08
 8015180:	08040788 	.word	0x08040788
 8015184:	08040790 	.word	0x08040790
 8015188:	08040960 	.word	0x08040960
 801518c:	080407a8 	.word	0x080407a8

08015190 <sfn>:

// SNTP client connection
static struct mg_connection *s_sntp_conn = NULL;

// SNTP client callback
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 8015190:	b5b0      	push	{r4, r5, r7, lr}
 8015192:	b088      	sub	sp, #32
 8015194:	af00      	add	r7, sp, #0
 8015196:	60f8      	str	r0, [r7, #12]
 8015198:	60b9      	str	r1, [r7, #8]
 801519a:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_SNTP_TIME) {
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	2b12      	cmp	r3, #18
 80151a0:	d14b      	bne.n	801523a <sfn+0xaa>
	  logging(L_INFO, "Response from NTP server received");
 80151a2:	492d      	ldr	r1, [pc, #180]	@ (8015258 <sfn+0xc8>)
 80151a4:	2001      	movs	r0, #1
 80151a6:	f7fc ffe3 	bl	8012170 <logging>
    // Time received, the internal protocol handler updates what mg_now() returns
    uint64_t curtime = mg_now();
 80151aa:	f01c fbbd 	bl	8031928 <mg_now>
 80151ae:	e9c7 0106 	strd	r0, r1, [r7, #24]
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 80151b2:	4b2a      	ldr	r3, [pc, #168]	@ (801525c <sfn+0xcc>)
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	2b01      	cmp	r3, #1
 80151b8:	dd0a      	ble.n	80151d0 <sfn+0x40>
 80151ba:	4b29      	ldr	r3, [pc, #164]	@ (8015260 <sfn+0xd0>)
 80151bc:	221b      	movs	r2, #27
 80151be:	4929      	ldr	r1, [pc, #164]	@ (8015264 <sfn+0xd4>)
 80151c0:	2002      	movs	r0, #2
 80151c2:	f016 f983 	bl	802b4cc <mg_log_prefix>
 80151c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80151ca:	4827      	ldr	r0, [pc, #156]	@ (8015268 <sfn+0xd8>)
 80151cc:	f016 f9ce 	bl	802b56c <mg_log>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 80151d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80151d4:	4924      	ldr	r1, [pc, #144]	@ (8015268 <sfn+0xd8>)
 80151d6:	2001      	movs	r0, #1
 80151d8:	f7fc ffca 	bl	8012170 <logging>
    // otherwise, you can process the server returned data yourself
    {
      uint64_t t = *(uint64_t *) ev_data;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 80151e6:	f01d fea9 	bl	8032f3c <mg_millis>
 80151ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80151ee:	1a14      	subs	r4, r2, r0
 80151f0:	eb63 0501 	sbc.w	r5, r3, r1
 80151f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80151f8:	f04f 0300 	mov.w	r3, #0
 80151fc:	4620      	mov	r0, r4
 80151fe:	4629      	mov	r1, r5
 8015200:	f7fb fdaa 	bl	8010d58 <__aeabi_uldivmod>
 8015204:	4602      	mov	r2, r0
 8015206:	460b      	mov	r3, r1
 8015208:	4918      	ldr	r1, [pc, #96]	@ (801526c <sfn+0xdc>)
 801520a:	e9c1 2300 	strd	r2, r3, [r1]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 801520e:	4b13      	ldr	r3, [pc, #76]	@ (801525c <sfn+0xcc>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	2b01      	cmp	r3, #1
 8015214:	dd0a      	ble.n	801522c <sfn+0x9c>
 8015216:	4b12      	ldr	r3, [pc, #72]	@ (8015260 <sfn+0xd0>)
 8015218:	2221      	movs	r2, #33	@ 0x21
 801521a:	4912      	ldr	r1, [pc, #72]	@ (8015264 <sfn+0xd4>)
 801521c:	2002      	movs	r0, #2
 801521e:	f016 f955 	bl	802b4cc <mg_log_prefix>
 8015222:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015226:	4812      	ldr	r0, [pc, #72]	@ (8015270 <sfn+0xe0>)
 8015228:	f016 f9a0 	bl	802b56c <mg_log>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 801522c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015230:	4910      	ldr	r1, [pc, #64]	@ (8015274 <sfn+0xe4>)
 8015232:	2001      	movs	r0, #1
 8015234:	f7fc ff9c 	bl	8012170 <logging>
  } else if (ev == MG_EV_CLOSE) {
	  logging(L_INFO, "NTP connection is closed");
    s_sntp_conn = NULL;
  }
  (void) c;
}
 8015238:	e009      	b.n	801524e <sfn+0xbe>
  } else if (ev == MG_EV_CLOSE) {
 801523a:	68bb      	ldr	r3, [r7, #8]
 801523c:	2b09      	cmp	r3, #9
 801523e:	d106      	bne.n	801524e <sfn+0xbe>
	  logging(L_INFO, "NTP connection is closed");
 8015240:	490d      	ldr	r1, [pc, #52]	@ (8015278 <sfn+0xe8>)
 8015242:	2001      	movs	r0, #1
 8015244:	f7fc ff94 	bl	8012170 <logging>
    s_sntp_conn = NULL;
 8015248:	4b0c      	ldr	r3, [pc, #48]	@ (801527c <sfn+0xec>)
 801524a:	2200      	movs	r2, #0
 801524c:	601a      	str	r2, [r3, #0]
}
 801524e:	bf00      	nop
 8015250:	3720      	adds	r7, #32
 8015252:	46bd      	mov	sp, r7
 8015254:	bdb0      	pop	{r4, r5, r7, pc}
 8015256:	bf00      	nop
 8015258:	08040984 	.word	0x08040984
 801525c:	200002a8 	.word	0x200002a8
 8015260:	08043dc4 	.word	0x08043dc4
 8015264:	080409a8 	.word	0x080409a8
 8015268:	080409c8 	.word	0x080409c8
 801526c:	20000c10 	.word	0x20000c10
 8015270:	080409fc 	.word	0x080409fc
 8015274:	08040a20 	.word	0x08040a20
 8015278:	08040a44 	.word	0x08040a44
 801527c:	20000c18 	.word	0x20000c18

08015280 <timer_fn>:


void timer_fn(void *arg) {
 8015280:	b580      	push	{r7, lr}
 8015282:	b084      	sub	sp, #16
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	60fb      	str	r3, [r7, #12]
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 801528c:	4b0c      	ldr	r3, [pc, #48]	@ (80152c0 <timer_fn+0x40>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d108      	bne.n	80152a6 <timer_fn+0x26>
 8015294:	2300      	movs	r3, #0
 8015296:	4a0b      	ldr	r2, [pc, #44]	@ (80152c4 <timer_fn+0x44>)
 8015298:	2100      	movs	r1, #0
 801529a:	68f8      	ldr	r0, [r7, #12]
 801529c:	f01c fddc 	bl	8031e58 <mg_sntp_connect>
 80152a0:	4603      	mov	r3, r0
 80152a2:	4a07      	ldr	r2, [pc, #28]	@ (80152c0 <timer_fn+0x40>)
 80152a4:	6013      	str	r3, [r2, #0]
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 80152a6:	4b06      	ldr	r3, [pc, #24]	@ (80152c0 <timer_fn+0x40>)
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d004      	beq.n	80152b8 <timer_fn+0x38>
 80152ae:	4b04      	ldr	r3, [pc, #16]	@ (80152c0 <timer_fn+0x40>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	4618      	mov	r0, r3
 80152b4:	f01c fd44 	bl	8031d40 <mg_sntp_request>
}
 80152b8:	bf00      	nop
 80152ba:	3710      	adds	r7, #16
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}
 80152c0:	20000c18 	.word	0x20000c18
 80152c4:	08015191 	.word	0x08015191

080152c8 <start_sntp>:

void start_sntp(void *arg){
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b088      	sub	sp, #32
 80152cc:	af04      	add	r7, sp, #16
 80152ce:	6078      	str	r0, [r7, #4]
	logging(L_INFO, "starting NTP client service");
 80152d0:	4911      	ldr	r1, [pc, #68]	@ (8015318 <start_sntp+0x50>)
 80152d2:	2001      	movs	r0, #1
 80152d4:	f7fc ff4c 	bl	8012170 <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	60fb      	str	r3, [r7, #12]

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	9302      	str	r3, [sp, #8]
 80152e0:	4b0e      	ldr	r3, [pc, #56]	@ (801531c <start_sntp+0x54>)
 80152e2:	9301      	str	r3, [sp, #4]
 80152e4:	2300      	movs	r3, #0
 80152e6:	9300      	str	r3, [sp, #0]
 80152e8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80152ec:	f04f 0300 	mov.w	r3, #0
 80152f0:	68f8      	ldr	r0, [r7, #12]
 80152f2:	f018 fe85 	bl	802e000 <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	9302      	str	r3, [sp, #8]
 80152fa:	4b08      	ldr	r3, [pc, #32]	@ (801531c <start_sntp+0x54>)
 80152fc:	9301      	str	r3, [sp, #4]
 80152fe:	2301      	movs	r3, #1
 8015300:	9300      	str	r3, [sp, #0]
 8015302:	4a07      	ldr	r2, [pc, #28]	@ (8015320 <start_sntp+0x58>)
 8015304:	f04f 0300 	mov.w	r3, #0
 8015308:	68f8      	ldr	r0, [r7, #12]
 801530a:	f018 fe79 	bl	802e000 <mg_timer_add>

}
 801530e:	bf00      	nop
 8015310:	3710      	adds	r7, #16
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	08040a60 	.word	0x08040a60
 801531c:	08015281 	.word	0x08015281
 8015320:	00107ac0 	.word	0x00107ac0

08015324 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8015324:	b580      	push	{r7, lr}
 8015326:	b084      	sub	sp, #16
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	683a      	ldr	r2, [r7, #0]
 8015332:	fb02 f303 	mul.w	r3, r2, r3
 8015336:	4618      	mov	r0, r3
 8015338:	f007 fac0 	bl	801c8bc <pvPortMalloc>
 801533c:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d008      	beq.n	8015356 <my_calloc+0x32>
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	687a      	ldr	r2, [r7, #4]
 8015348:	fb02 f303 	mul.w	r3, r2, r3
 801534c:	461a      	mov	r2, r3
 801534e:	2100      	movs	r1, #0
 8015350:	68f8      	ldr	r0, [r7, #12]
 8015352:	f020 fec5 	bl	80360e0 <memset>
  return p;
 8015356:	68fb      	ldr	r3, [r7, #12]
}
 8015358:	4618      	mov	r0, r3
 801535a:	3710      	adds	r7, #16
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}

08015360 <ip_to_string>:
    "NT:upnp:rootdevice\r\n"
    "USN:%s::upnp:rootdevice\r\n"
    "\r\n";


void ip_to_string(uint32_t ip, char *buffer) {
 8015360:	b580      	push	{r7, lr}
 8015362:	b086      	sub	sp, #24
 8015364:	af02      	add	r7, sp, #8
 8015366:	6078      	str	r0, [r7, #4]
 8015368:	6039      	str	r1, [r7, #0]
    // Разбиваем IP-адрес на байты
    unsigned char bytes[4];
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	0e1b      	lsrs	r3, r3, #24
 801536e:	b2db      	uxtb	r3, r3
 8015370:	73fb      	strb	r3, [r7, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	0c1b      	lsrs	r3, r3, #16
 8015376:	b2db      	uxtb	r3, r3
 8015378:	73bb      	strb	r3, [r7, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	0a1b      	lsrs	r3, r3, #8
 801537e:	b2db      	uxtb	r3, r3
 8015380:	737b      	strb	r3, [r7, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	b2db      	uxtb	r3, r3
 8015386:	733b      	strb	r3, [r7, #12]

    // Формируем строку в формате "xxx.xxx.xxx.xxx"
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 8015388:	7b3b      	ldrb	r3, [r7, #12]
 801538a:	4619      	mov	r1, r3
 801538c:	7b7b      	ldrb	r3, [r7, #13]
 801538e:	4618      	mov	r0, r3
 8015390:	7bbb      	ldrb	r3, [r7, #14]
 8015392:	7bfa      	ldrb	r2, [r7, #15]
 8015394:	9201      	str	r2, [sp, #4]
 8015396:	9300      	str	r3, [sp, #0]
 8015398:	4603      	mov	r3, r0
 801539a:	460a      	mov	r2, r1
 801539c:	4903      	ldr	r1, [pc, #12]	@ (80153ac <ip_to_string+0x4c>)
 801539e:	6838      	ldr	r0, [r7, #0]
 80153a0:	f020 fadc 	bl	803595c <sprintf>
}
 80153a4:	bf00      	nop
 80153a6:	3710      	adds	r7, #16
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}
 80153ac:	08040a7c 	.word	0x08040a7c

080153b0 <send_ssdp_notify>:

// Функция отправки SSDP NOTIFY
static void send_ssdp_notify(void *param){
 80153b0:	b590      	push	{r4, r7, lr}
 80153b2:	b089      	sub	sp, #36	@ 0x24
 80153b4:	af04      	add	r7, sp, #16
 80153b6:	6078      	str	r0, [r7, #4]
	logging(L_DEBUG, "Call send_ssdp_notify");
 80153b8:	4927      	ldr	r1, [pc, #156]	@ (8015458 <send_ssdp_notify+0xa8>)
 80153ba:	2000      	movs	r0, #0
 80153bc:	f7fc fed8 	bl	8012170 <logging>
	struct mg_connection *udp_conn = (struct mg_connection *)param;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	60fb      	str	r3, [r7, #12]

	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 80153c4:	4b25      	ldr	r3, [pc, #148]	@ (801545c <send_ssdp_notify+0xac>)
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	4618      	mov	r0, r3
 80153ca:	f7fa ff69 	bl	80102a0 <strlen>
 80153ce:	4603      	mov	r3, r0
 80153d0:	f203 1339 	addw	r3, r3, #313	@ 0x139
 80153d4:	60bb      	str	r3, [r7, #8]
	buff = calloc(buff_len, sizeof(char));
 80153d6:	2101      	movs	r1, #1
 80153d8:	68b8      	ldr	r0, [r7, #8]
 80153da:	f7ff ffa3 	bl	8015324 <my_calloc>
 80153de:	4603      	mov	r3, r0
 80153e0:	4a1f      	ldr	r2, [pc, #124]	@ (8015460 <send_ssdp_notify+0xb0>)
 80153e2:	6013      	str	r3, [r2, #0]
	if (!buff) {
 80153e4:	4b1e      	ldr	r3, [pc, #120]	@ (8015460 <send_ssdp_notify+0xb0>)
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d104      	bne.n	80153f6 <send_ssdp_notify+0x46>
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 80153ec:	491d      	ldr	r1, [pc, #116]	@ (8015464 <send_ssdp_notify+0xb4>)
 80153ee:	2003      	movs	r0, #3
 80153f0:	f7fc febe 	bl	8012170 <logging>
		return; //TODO add log
 80153f4:	e02d      	b.n	8015452 <send_ssdp_notify+0xa2>
	}
	//mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &udp_conn->loc);
	ip_to_string(mif->ip, ip_addr_str);
 80153f6:	4b1c      	ldr	r3, [pc, #112]	@ (8015468 <send_ssdp_notify+0xb8>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	689b      	ldr	r3, [r3, #8]
 80153fc:	4a1b      	ldr	r2, [pc, #108]	@ (801546c <send_ssdp_notify+0xbc>)
 80153fe:	6812      	ldr	r2, [r2, #0]
 8015400:	4611      	mov	r1, r2
 8015402:	4618      	mov	r0, r3
 8015404:	f7ff ffac 	bl	8015360 <ip_to_string>

	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 8015408:	4b15      	ldr	r3, [pc, #84]	@ (8015460 <send_ssdp_notify+0xb0>)
 801540a:	6818      	ldr	r0, [r3, #0]
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	1e59      	subs	r1, r3, #1
 8015410:	4b16      	ldr	r3, [pc, #88]	@ (801546c <send_ssdp_notify+0xbc>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	4a11      	ldr	r2, [pc, #68]	@ (801545c <send_ssdp_notify+0xac>)
 8015416:	6812      	ldr	r2, [r2, #0]
 8015418:	9202      	str	r2, [sp, #8]
 801541a:	4a15      	ldr	r2, [pc, #84]	@ (8015470 <send_ssdp_notify+0xc0>)
 801541c:	9201      	str	r2, [sp, #4]
 801541e:	9300      	str	r3, [sp, #0]
 8015420:	4b14      	ldr	r3, [pc, #80]	@ (8015474 <send_ssdp_notify+0xc4>)
 8015422:	4a15      	ldr	r2, [pc, #84]	@ (8015478 <send_ssdp_notify+0xc8>)
 8015424:	f020 f932 	bl	803568c <snprintf>
    if (udp_conn != NULL) {
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d00c      	beq.n	8015448 <send_ssdp_notify+0x98>
        mg_send(udp_conn, buff, strlen(buff));
 801542e:	4b0c      	ldr	r3, [pc, #48]	@ (8015460 <send_ssdp_notify+0xb0>)
 8015430:	681c      	ldr	r4, [r3, #0]
 8015432:	4b0b      	ldr	r3, [pc, #44]	@ (8015460 <send_ssdp_notify+0xb0>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	4618      	mov	r0, r3
 8015438:	f7fa ff32 	bl	80102a0 <strlen>
 801543c:	4603      	mov	r3, r0
 801543e:	461a      	mov	r2, r3
 8015440:	4621      	mov	r1, r4
 8015442:	68f8      	ldr	r0, [r7, #12]
 8015444:	f01b ff70 	bl	8031328 <mg_send>
    }
    free(buff);
 8015448:	4b05      	ldr	r3, [pc, #20]	@ (8015460 <send_ssdp_notify+0xb0>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	4618      	mov	r0, r3
 801544e:	f007 fb03 	bl	801ca58 <vPortFree>
}
 8015452:	3714      	adds	r7, #20
 8015454:	46bd      	mov	sp, r7
 8015456:	bd90      	pop	{r4, r7, pc}
 8015458:	08040a88 	.word	0x08040a88
 801545c:	20000c1c 	.word	0x20000c1c
 8015460:	20000c20 	.word	0x20000c20
 8015464:	08040aa0 	.word	0x08040aa0
 8015468:	20000c2c 	.word	0x20000c2c
 801546c:	20000c24 	.word	0x20000c24
 8015470:	08040ad8 	.word	0x08040ad8
 8015474:	08040ad0 	.word	0x08040ad0
 8015478:	08043f88 	.word	0x08043f88

0801547c <ssdp_set_id>:


void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 801547c:	b580      	push	{r7, lr}
 801547e:	b084      	sub	sp, #16
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
 8015484:	460b      	mov	r3, r1
 8015486:	70fb      	strb	r3, [r7, #3]
	logging(L_DEBUG, "Call ssdp_set_id");
 8015488:	491e      	ldr	r1, [pc, #120]	@ (8015504 <ssdp_set_id+0x88>)
 801548a:	2000      	movs	r0, #0
 801548c:	f7fc fe70 	bl	8012170 <logging>
	if (id && (id_len > 0)){
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d032      	beq.n	80154fc <ssdp_set_id+0x80>
 8015496:	78fb      	ldrb	r3, [r7, #3]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d02f      	beq.n	80154fc <ssdp_set_id+0x80>
		if(dev_id) free(dev_id);
 801549c:	4b1a      	ldr	r3, [pc, #104]	@ (8015508 <ssdp_set_id+0x8c>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d004      	beq.n	80154ae <ssdp_set_id+0x32>
 80154a4:	4b18      	ldr	r3, [pc, #96]	@ (8015508 <ssdp_set_id+0x8c>)
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	4618      	mov	r0, r3
 80154aa:	f007 fad5 	bl	801ca58 <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 80154ae:	78fb      	ldrb	r3, [r7, #3]
 80154b0:	005b      	lsls	r3, r3, #1
 80154b2:	3301      	adds	r3, #1
 80154b4:	2101      	movs	r1, #1
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7ff ff34 	bl	8015324 <my_calloc>
 80154bc:	4603      	mov	r3, r0
 80154be:	4a12      	ldr	r2, [pc, #72]	@ (8015508 <ssdp_set_id+0x8c>)
 80154c0:	6013      	str	r3, [r2, #0]
		if (dev_id ){
 80154c2:	4b11      	ldr	r3, [pc, #68]	@ (8015508 <ssdp_set_id+0x8c>)
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d017      	beq.n	80154fa <ssdp_set_id+0x7e>
	        // Проходим по каждому байту идентификатора
	        for (unsigned int i = 0; i < id_len; i++) {
 80154ca:	2300      	movs	r3, #0
 80154cc:	60fb      	str	r3, [r7, #12]
 80154ce:	e00f      	b.n	80154f0 <ssdp_set_id+0x74>
	            // Конвертируем каждый байт в два символа и добавляем в строку
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 80154d0:	4b0d      	ldr	r3, [pc, #52]	@ (8015508 <ssdp_set_id+0x8c>)
 80154d2:	681a      	ldr	r2, [r3, #0]
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	005b      	lsls	r3, r3, #1
 80154d8:	18d0      	adds	r0, r2, r3
 80154da:	687a      	ldr	r2, [r7, #4]
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	4413      	add	r3, r2
 80154e0:	781b      	ldrb	r3, [r3, #0]
 80154e2:	461a      	mov	r2, r3
 80154e4:	4909      	ldr	r1, [pc, #36]	@ (801550c <ssdp_set_id+0x90>)
 80154e6:	f020 fa39 	bl	803595c <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	3301      	adds	r3, #1
 80154ee:	60fb      	str	r3, [r7, #12]
 80154f0:	78fb      	ldrb	r3, [r7, #3]
 80154f2:	68fa      	ldr	r2, [r7, #12]
 80154f4:	429a      	cmp	r2, r3
 80154f6:	d3eb      	bcc.n	80154d0 <ssdp_set_id+0x54>
 80154f8:	e000      	b.n	80154fc <ssdp_set_id+0x80>
	        }
		}else{
			return ;
 80154fa:	bf00      	nop
		}
	}
}
 80154fc:	3710      	adds	r7, #16
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}
 8015502:	bf00      	nop
 8015504:	08040ae0 	.word	0x08040ae0
 8015508:	20000c1c 	.word	0x20000c1c
 801550c:	08040af4 	.word	0x08040af4

08015510 <dev_description_handler>:


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015510:	b580      	push	{r7, lr}
 8015512:	b08a      	sub	sp, #40	@ 0x28
 8015514:	af06      	add	r7, sp, #24
 8015516:	6078      	str	r0, [r7, #4]
 8015518:	6039      	str	r1, [r7, #0]
	logging(L_DEBUG, "Call dev_description_handler");
 801551a:	491b      	ldr	r1, [pc, #108]	@ (8015588 <dev_description_handler+0x78>)
 801551c:	2000      	movs	r0, #0
 801551e:	f7fc fe27 	bl	8012170 <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8015522:	f107 0308 	add.w	r3, r7, #8
 8015526:	4919      	ldr	r1, [pc, #100]	@ (801558c <dev_description_handler+0x7c>)
 8015528:	4618      	mov	r0, r3
 801552a:	f01c fcd3 	bl	8031ed4 <mg_str_s>
 801552e:	6839      	ldr	r1, [r7, #0]
 8015530:	2300      	movs	r3, #0
 8015532:	9300      	str	r3, [sp, #0]
 8015534:	f107 0308 	add.w	r3, r7, #8
 8015538:	cb0c      	ldmia	r3, {r2, r3}
 801553a:	c903      	ldmia	r1, {r0, r1}
 801553c:	f01c fd9d 	bl	803207a <mg_match>
 8015540:	4603      	mov	r3, r0
 8015542:	2b00      	cmp	r3, #0
 8015544:	d014      	beq.n	8015570 <dev_description_handler+0x60>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 8015546:	4b12      	ldr	r3, [pc, #72]	@ (8015590 <dev_description_handler+0x80>)
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	4a12      	ldr	r2, [pc, #72]	@ (8015594 <dev_description_handler+0x84>)
 801554c:	6812      	ldr	r2, [r2, #0]
 801554e:	9205      	str	r2, [sp, #20]
 8015550:	9304      	str	r3, [sp, #16]
 8015552:	4b11      	ldr	r3, [pc, #68]	@ (8015598 <dev_description_handler+0x88>)
 8015554:	9303      	str	r3, [sp, #12]
 8015556:	4b11      	ldr	r3, [pc, #68]	@ (801559c <dev_description_handler+0x8c>)
 8015558:	9302      	str	r3, [sp, #8]
 801555a:	4b11      	ldr	r3, [pc, #68]	@ (80155a0 <dev_description_handler+0x90>)
 801555c:	9301      	str	r3, [sp, #4]
 801555e:	4b11      	ldr	r3, [pc, #68]	@ (80155a4 <dev_description_handler+0x94>)
 8015560:	9300      	str	r3, [sp, #0]
 8015562:	4b11      	ldr	r3, [pc, #68]	@ (80155a8 <dev_description_handler+0x98>)
 8015564:	4a11      	ldr	r2, [pc, #68]	@ (80155ac <dev_description_handler+0x9c>)
 8015566:	21c8      	movs	r1, #200	@ 0xc8
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f013 f807 	bl	802857c <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 801556e:	e006      	b.n	801557e <dev_description_handler+0x6e>
		mg_http_reply(c, 400, "", //TODO delete for release,
 8015570:	4b0f      	ldr	r3, [pc, #60]	@ (80155b0 <dev_description_handler+0xa0>)
 8015572:	4a0e      	ldr	r2, [pc, #56]	@ (80155ac <dev_description_handler+0x9c>)
 8015574:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8015578:	6878      	ldr	r0, [r7, #4]
 801557a:	f012 ffff 	bl	802857c <mg_http_reply>
}
 801557e:	bf00      	nop
 8015580:	3710      	adds	r7, #16
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}
 8015586:	bf00      	nop
 8015588:	08040afc 	.word	0x08040afc
 801558c:	08040b1c 	.word	0x08040b1c
 8015590:	20000c1c 	.word	0x20000c1c
 8015594:	20000c24 	.word	0x20000c24
 8015598:	08040b24 	.word	0x08040b24
 801559c:	08040b28 	.word	0x08040b28
 80155a0:	08040b3c 	.word	0x08040b3c
 80155a4:	08040b4c 	.word	0x08040b4c
 80155a8:	08043de4 	.word	0x08043de4
 80155ac:	08040b20 	.word	0x08040b20
 80155b0:	08040b58 	.word	0x08040b58

080155b4 <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
 80155bc:	6039      	str	r1, [r7, #0]
	logging(L_DEBUG, "Call  dev_404_handler");
 80155be:	4907      	ldr	r1, [pc, #28]	@ (80155dc <dev_404_handler+0x28>)
 80155c0:	2000      	movs	r0, #0
 80155c2:	f7fc fdd5 	bl	8012170 <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 80155c6:	4b06      	ldr	r3, [pc, #24]	@ (80155e0 <dev_404_handler+0x2c>)
 80155c8:	4a06      	ldr	r2, [pc, #24]	@ (80155e4 <dev_404_handler+0x30>)
 80155ca:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80155ce:	6878      	ldr	r0, [r7, #4]
 80155d0:	f012 ffd4 	bl	802857c <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 80155d4:	bf00      	nop
 80155d6:	3708      	adds	r7, #8
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}
 80155dc:	08040bb0 	.word	0x08040bb0
 80155e0:	08040bc8 	.word	0x08040bc8
 80155e4:	08040b20 	.word	0x08040b20

080155e8 <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b08c      	sub	sp, #48	@ 0x30
 80155ec:	af02      	add	r7, sp, #8
 80155ee:	60f8      	str	r0, [r7, #12]
 80155f0:	60b9      	str	r1, [r7, #8]
 80155f2:	607a      	str	r2, [r7, #4]

	if (ev == MG_EV_HTTP_MSG) {
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	2b0b      	cmp	r3, #11
 80155f8:	d134      	bne.n	8015664 <ssdp_web_handler+0x7c>
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 80155fa:	491c      	ldr	r1, [pc, #112]	@ (801566c <ssdp_web_handler+0x84>)
 80155fc:	2000      	movs	r0, #0
 80155fe:	f7fc fdb7 	bl	8012170 <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	627b      	str	r3, [r7, #36]	@ 0x24

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 8015606:	f107 0314 	add.w	r3, r7, #20
 801560a:	4919      	ldr	r1, [pc, #100]	@ (8015670 <ssdp_web_handler+0x88>)
 801560c:	4618      	mov	r0, r3
 801560e:	f01c fc61 	bl	8031ed4 <mg_str_s>
 8015612:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015614:	2300      	movs	r3, #0
 8015616:	9300      	str	r3, [sp, #0]
 8015618:	f107 0314 	add.w	r3, r7, #20
 801561c:	cb0c      	ldmia	r3, {r2, r3}
 801561e:	3108      	adds	r1, #8
 8015620:	c903      	ldmia	r1, {r0, r1}
 8015622:	f01c fd2a 	bl	803207a <mg_match>
 8015626:	4603      	mov	r3, r0
 8015628:	2b00      	cmp	r3, #0
 801562a:	d004      	beq.n	8015636 <ssdp_web_handler+0x4e>
			dev_description_handler(c, hm);
 801562c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801562e:	68f8      	ldr	r0, [r7, #12]
 8015630:	f7ff ff6e 	bl	8015510 <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 8015634:	e016      	b.n	8015664 <ssdp_web_handler+0x7c>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 8015636:	f107 031c 	add.w	r3, r7, #28
 801563a:	490e      	ldr	r1, [pc, #56]	@ (8015674 <ssdp_web_handler+0x8c>)
 801563c:	4618      	mov	r0, r3
 801563e:	f01c fc49 	bl	8031ed4 <mg_str_s>
 8015642:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015644:	2300      	movs	r3, #0
 8015646:	9300      	str	r3, [sp, #0]
 8015648:	f107 031c 	add.w	r3, r7, #28
 801564c:	cb0c      	ldmia	r3, {r2, r3}
 801564e:	3108      	adds	r1, #8
 8015650:	c903      	ldmia	r1, {r0, r1}
 8015652:	f01c fd12 	bl	803207a <mg_match>
 8015656:	4603      	mov	r3, r0
 8015658:	2b00      	cmp	r3, #0
 801565a:	d003      	beq.n	8015664 <ssdp_web_handler+0x7c>
			dev_404_handler(c, hm);
 801565c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801565e:	68f8      	ldr	r0, [r7, #12]
 8015660:	f7ff ffa8 	bl	80155b4 <dev_404_handler>
}
 8015664:	bf00      	nop
 8015666:	3728      	adds	r7, #40	@ 0x28
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}
 801566c:	08040bf4 	.word	0x08040bf4
 8015670:	08040c1c 	.word	0x08040c1c
 8015674:	08040c34 	.word	0x08040c34

08015678 <ssdp_timer_handler>:

static void ssdp_timer_handler(void *param){
 8015678:	b580      	push	{r7, lr}
 801567a:	b084      	sub	sp, #16
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
	logging(L_DEBUG, "Call ssdp_timer_handler");
 8015680:	490a      	ldr	r1, [pc, #40]	@ (80156ac <ssdp_timer_handler+0x34>)
 8015682:	2000      	movs	r0, #0
 8015684:	f7fc fd74 	bl	8012170 <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 8015688:	4b09      	ldr	r3, [pc, #36]	@ (80156b0 <ssdp_timer_handler+0x38>)
 801568a:	6818      	ldr	r0, [r3, #0]
 801568c:	2300      	movs	r3, #0
 801568e:	2200      	movs	r2, #0
 8015690:	4908      	ldr	r1, [pc, #32]	@ (80156b4 <ssdp_timer_handler+0x3c>)
 8015692:	f018 fb85 	bl	802dda0 <mg_connect>
 8015696:	60f8      	str	r0, [r7, #12]
	send_ssdp_notify(conn);
 8015698:	68f8      	ldr	r0, [r7, #12]
 801569a:	f7ff fe89 	bl	80153b0 <send_ssdp_notify>
	mg_close_conn(conn);
 801569e:	68f8      	ldr	r0, [r7, #12]
 80156a0:	f018 fb16 	bl	802dcd0 <mg_close_conn>
}
 80156a4:	bf00      	nop
 80156a6:	3710      	adds	r7, #16
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd80      	pop	{r7, pc}
 80156ac:	08040c38 	.word	0x08040c38
 80156b0:	20000c28 	.word	0x20000c28
 80156b4:	08043dc8 	.word	0x08043dc8

080156b8 <ssdp_listener_handler>:

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b08e      	sub	sp, #56	@ 0x38
 80156bc:	af02      	add	r7, sp, #8
 80156be:	60f8      	str	r0, [r7, #12]
 80156c0:	60b9      	str	r1, [r7, #8]
 80156c2:	607a      	str	r2, [r7, #4]
	char *buffer = NULL;
 80156c4:	2300      	movs	r3, #0
 80156c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (ev == MG_EV_READ) {
 80156c8:	68bb      	ldr	r3, [r7, #8]
 80156ca:	2b07      	cmp	r3, #7
 80156cc:	d14b      	bne.n	8015766 <ssdp_listener_handler+0xae>
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 80156ce:	4927      	ldr	r1, [pc, #156]	@ (801576c <ssdp_listener_handler+0xb4>)
 80156d0:	2000      	movs	r0, #0
 80156d2:	f7fc fd4d 	bl	8012170 <logging>
		struct mg_str msg = mg_str_n((char *) c->recv.buf, c->recv.len);
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80156de:	f107 0314 	add.w	r3, r7, #20
 80156e2:	4618      	mov	r0, r3
 80156e4:	f01c fc13 	bl	8031f0e <mg_str_n>
		// Получаем сообщение от клиента
		buffer = (char *)calloc(msg.len + 1, sizeof(char));
 80156e8:	69bb      	ldr	r3, [r7, #24]
 80156ea:	3301      	adds	r3, #1
 80156ec:	2101      	movs	r1, #1
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7ff fe18 	bl	8015324 <my_calloc>
 80156f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (!buffer) {
 80156f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d104      	bne.n	8015706 <ssdp_listener_handler+0x4e>
			logging(L_ERR, "Failed to allocate memory for SSDP buffer");
 80156fc:	491c      	ldr	r1, [pc, #112]	@ (8015770 <ssdp_listener_handler+0xb8>)
 80156fe:	2003      	movs	r0, #3
 8015700:	f7fc fd36 	bl	8012170 <logging>
 8015704:	e02f      	b.n	8015766 <ssdp_listener_handler+0xae>
			return;
		}

		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015706:	f107 031c 	add.w	r3, r7, #28
 801570a:	491a      	ldr	r1, [pc, #104]	@ (8015774 <ssdp_listener_handler+0xbc>)
 801570c:	4618      	mov	r0, r3
 801570e:	f01c fbe1 	bl	8031ed4 <mg_str_s>
 8015712:	2300      	movs	r3, #0
 8015714:	9300      	str	r3, [sp, #0]
 8015716:	f107 031c 	add.w	r3, r7, #28
 801571a:	cb0c      	ldmia	r3, {r2, r3}
 801571c:	f107 0114 	add.w	r1, r7, #20
 8015720:	c903      	ldmia	r1, {r0, r1}
 8015722:	f01c fcaa 	bl	803207a <mg_match>
 8015726:	4603      	mov	r3, r0
 8015728:	2b00      	cmp	r3, #0
 801572a:	d019      	beq.n	8015760 <ssdp_listener_handler+0xa8>
 801572c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015730:	4911      	ldr	r1, [pc, #68]	@ (8015778 <ssdp_listener_handler+0xc0>)
 8015732:	4618      	mov	r0, r3
 8015734:	f01c fbce 	bl	8031ed4 <mg_str_s>
 8015738:	2300      	movs	r3, #0
 801573a:	9300      	str	r3, [sp, #0]
 801573c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015740:	cb0c      	ldmia	r3, {r2, r3}
 8015742:	f107 0114 	add.w	r1, r7, #20
 8015746:	c903      	ldmia	r1, {r0, r1}
 8015748:	f01c fc97 	bl	803207a <mg_match>
 801574c:	4603      	mov	r3, r0
 801574e:	2b00      	cmp	r3, #0
 8015750:	d006      	beq.n	8015760 <ssdp_listener_handler+0xa8>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 8015752:	490a      	ldr	r1, [pc, #40]	@ (801577c <ssdp_listener_handler+0xc4>)
 8015754:	2000      	movs	r0, #0
 8015756:	f7fc fd0b 	bl	8012170 <logging>
			//ssdp_timer_handler(NULL);
			send_ssdp_notify(c);
 801575a:	68f8      	ldr	r0, [r7, #12]
 801575c:	f7ff fe28 	bl	80153b0 <send_ssdp_notify>
		}
		free(buffer);
 8015760:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015762:	f007 f979 	bl	801ca58 <vPortFree>
	}
}
 8015766:	3730      	adds	r7, #48	@ 0x30
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}
 801576c:	08040c50 	.word	0x08040c50
 8015770:	08040c84 	.word	0x08040c84
 8015774:	08040cb0 	.word	0x08040cb0
 8015778:	08040cbc 	.word	0x08040cbc
 801577c:	08040ccc 	.word	0x08040ccc

08015780 <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 8015780:	b580      	push	{r7, lr}
 8015782:	b086      	sub	sp, #24
 8015784:	af04      	add	r7, sp, #16
 8015786:	6078      	str	r0, [r7, #4]
 8015788:	6039      	str	r1, [r7, #0]
	mgr 		= (struct mg_mgr *)param_mgr;
 801578a:	4a1f      	ldr	r2, [pc, #124]	@ (8015808 <ssdp_start_server+0x88>)
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6013      	str	r3, [r2, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 8015790:	4a1e      	ldr	r2, [pc, #120]	@ (801580c <ssdp_start_server+0x8c>)
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	6013      	str	r3, [r2, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 8015796:	2101      	movs	r1, #1
 8015798:	2028      	movs	r0, #40	@ 0x28
 801579a:	f7ff fdc3 	bl	8015324 <my_calloc>
 801579e:	4603      	mov	r3, r0
 80157a0:	4a1b      	ldr	r2, [pc, #108]	@ (8015810 <ssdp_start_server+0x90>)
 80157a2:	6013      	str	r3, [r2, #0]
	if (!ip_addr_str) return; //TODO add logging
 80157a4:	4b1a      	ldr	r3, [pc, #104]	@ (8015810 <ssdp_start_server+0x90>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d029      	beq.n	8015800 <ssdp_start_server+0x80>

	ssdp_set_id(mif->mac, mac_len);
 80157ac:	4b17      	ldr	r3, [pc, #92]	@ (801580c <ssdp_start_server+0x8c>)
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	2106      	movs	r1, #6
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7ff fe62 	bl	801547c <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 80157b8:	4916      	ldr	r1, [pc, #88]	@ (8015814 <ssdp_start_server+0x94>)
 80157ba:	2001      	movs	r0, #1
 80157bc:	f7fc fcd8 	bl	8012170 <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 80157c0:	4b11      	ldr	r3, [pc, #68]	@ (8015808 <ssdp_start_server+0x88>)
 80157c2:	6819      	ldr	r1, [r3, #0]
 80157c4:	2300      	movs	r3, #0
 80157c6:	9302      	str	r3, [sp, #8]
 80157c8:	4b13      	ldr	r3, [pc, #76]	@ (8015818 <ssdp_start_server+0x98>)
 80157ca:	9301      	str	r3, [sp, #4]
 80157cc:	2303      	movs	r3, #3
 80157ce:	9300      	str	r3, [sp, #0]
 80157d0:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80157d4:	f04f 0300 	mov.w	r3, #0
 80157d8:	4608      	mov	r0, r1
 80157da:	f018 fc11 	bl	802e000 <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 80157de:	4b0a      	ldr	r3, [pc, #40]	@ (8015808 <ssdp_start_server+0x88>)
 80157e0:	6818      	ldr	r0, [r3, #0]
 80157e2:	4b0a      	ldr	r3, [pc, #40]	@ (801580c <ssdp_start_server+0x8c>)
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	4a0d      	ldr	r2, [pc, #52]	@ (801581c <ssdp_start_server+0x9c>)
 80157e8:	490d      	ldr	r1, [pc, #52]	@ (8015820 <ssdp_start_server+0xa0>)
 80157ea:	f014 fe49 	bl	802a480 <mg_http_listen>
	//mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
	mg_listen(mgr, "udp://0.0.0.0:1900", ssdp_listener_handler, mif);
 80157ee:	4b06      	ldr	r3, [pc, #24]	@ (8015808 <ssdp_start_server+0x88>)
 80157f0:	6818      	ldr	r0, [r3, #0]
 80157f2:	4b06      	ldr	r3, [pc, #24]	@ (801580c <ssdp_start_server+0x8c>)
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	4a0b      	ldr	r2, [pc, #44]	@ (8015824 <ssdp_start_server+0xa4>)
 80157f8:	490b      	ldr	r1, [pc, #44]	@ (8015828 <ssdp_start_server+0xa8>)
 80157fa:	f018 fb5f 	bl	802debc <mg_listen>
 80157fe:	e000      	b.n	8015802 <ssdp_start_server+0x82>
	if (!ip_addr_str) return; //TODO add logging
 8015800:	bf00      	nop

}
 8015802:	3708      	adds	r7, #8
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}
 8015808:	20000c28 	.word	0x20000c28
 801580c:	20000c2c 	.word	0x20000c2c
 8015810:	20000c24 	.word	0x20000c24
 8015814:	08040cfc 	.word	0x08040cfc
 8015818:	08015679 	.word	0x08015679
 801581c:	080155e9 	.word	0x080155e9
 8015820:	08040d14 	.word	0x08040d14
 8015824:	080156b9 	.word	0x080156b9
 8015828:	08040d2c 	.word	0x08040d2c

0801582c <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 801582c:	b480      	push	{r7}
 801582e:	af00      	add	r7, sp, #0
 8015830:	bf00      	nop
 8015832:	46bd      	mov	sp, r7
 8015834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015838:	4770      	bx	lr
	...

0801583c <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 801583c:	b480      	push	{r7}
 801583e:	b085      	sub	sp, #20
 8015840:	af00      	add	r7, sp, #0
 8015842:	60f8      	str	r0, [r7, #12]
 8015844:	60b9      	str	r1, [r7, #8]
 8015846:	607a      	str	r2, [r7, #4]
 8015848:	603b      	str	r3, [r7, #0]

	if (chip_select){
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d003      	beq.n	8015858 <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 8015850:	4a0e      	ldr	r2, [pc, #56]	@ (801588c <SPI_flash_reg_cb+0x50>)
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	60d3      	str	r3, [r2, #12]
 8015856:	e002      	b.n	801585e <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 8015858:	4b0c      	ldr	r3, [pc, #48]	@ (801588c <SPI_flash_reg_cb+0x50>)
 801585a:	4a0d      	ldr	r2, [pc, #52]	@ (8015890 <SPI_flash_reg_cb+0x54>)
 801585c:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d003      	beq.n	801586c <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 8015864:	4a09      	ldr	r2, [pc, #36]	@ (801588c <SPI_flash_reg_cb+0x50>)
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	6113      	str	r3, [r2, #16]
 801586a:	e002      	b.n	8015872 <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 801586c:	4b07      	ldr	r3, [pc, #28]	@ (801588c <SPI_flash_reg_cb+0x50>)
 801586e:	4a08      	ldr	r2, [pc, #32]	@ (8015890 <SPI_flash_reg_cb+0x54>)
 8015870:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_buffer	= receive_buffer;
 8015872:	4a06      	ldr	r2, [pc, #24]	@ (801588c <SPI_flash_reg_cb+0x50>)
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 8015878:	4a04      	ldr	r2, [pc, #16]	@ (801588c <SPI_flash_reg_cb+0x50>)
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	6093      	str	r3, [r2, #8]

}
 801587e:	bf00      	nop
 8015880:	3714      	adds	r7, #20
 8015882:	46bd      	mov	sp, r7
 8015884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015888:	4770      	bx	lr
 801588a:	bf00      	nop
 801588c:	20000c30 	.word	0x20000c30
 8015890:	0801582d 	.word	0x0801582d

08015894 <sFLASH_Reset>:

void SPI_flash_io_init(void){

}

void sFLASH_Reset(void){
 8015894:	b580      	push	{r7, lr}
 8015896:	af00      	add	r7, sp, #0
    sFLASH_CS_LOW();
 8015898:	f000 f8d2 	bl	8015a40 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 801589c:	2066      	movs	r0, #102	@ 0x66
 801589e:	f000 fa8d 	bl	8015dbc <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 80158a2:	2099      	movs	r0, #153	@ 0x99
 80158a4:	f000 fa8a 	bl	8015dbc <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 80158a8:	f000 f8d4 	bl	8015a54 <sFLASH_CS_HIGH>
}
 80158ac:	bf00      	nop
 80158ae:	bd80      	pop	{r7, pc}

080158b0 <sFLASH_Init>:

void sFLASH_Init(void){
 80158b0:	b580      	push	{r7, lr}
 80158b2:	af00      	add	r7, sp, #0

    HAL_Delay(100);
 80158b4:	2064      	movs	r0, #100	@ 0x64
 80158b6:	f000 fb03 	bl	8015ec0 <HAL_Delay>
    sFLASH_Reset();
 80158ba:	f7ff ffeb 	bl	8015894 <sFLASH_Reset>
    HAL_Delay(100);
 80158be:	2064      	movs	r0, #100	@ 0x64
 80158c0:	f000 fafe 	bl	8015ec0 <HAL_Delay>
    HAL_Delay(100);
 80158c4:	2064      	movs	r0, #100	@ 0x64
 80158c6:	f000 fafb 	bl	8015ec0 <HAL_Delay>
}
 80158ca:	bf00      	nop
 80158cc:	bd80      	pop	{r7, pc}
	...

080158d0 <sFLASH_GetInfo>:

struct SPI_flash_info sFLASH_GetInfo(void){
 80158d0:	b590      	push	{r4, r7, lr}
 80158d2:	b085      	sub	sp, #20
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

	sFLASH_Init();
 80158d8:	f7ff ffea 	bl	80158b0 <sFLASH_Init>

	flash_id = sFLASH_ReadID();
 80158dc:	f000 fa18 	bl	8015d10 <sFLASH_ReadID>
 80158e0:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	4a4f      	ldr	r2, [pc, #316]	@ (8015a24 <sFLASH_GetInfo+0x154>)
 80158e6:	4293      	cmp	r3, r2
 80158e8:	d076      	beq.n	80159d8 <sFLASH_GetInfo+0x108>
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	4a4d      	ldr	r2, [pc, #308]	@ (8015a24 <sFLASH_GetInfo+0x154>)
 80158ee:	4293      	cmp	r3, r2
 80158f0:	f0c0 8088 	bcc.w	8015a04 <sFLASH_GetInfo+0x134>
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	4a4c      	ldr	r2, [pc, #304]	@ (8015a28 <sFLASH_GetInfo+0x158>)
 80158f8:	4293      	cmp	r3, r2
 80158fa:	f200 8083 	bhi.w	8015a04 <sFLASH_GetInfo+0x134>
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	4a4a      	ldr	r2, [pc, #296]	@ (8015a2c <sFLASH_GetInfo+0x15c>)
 8015902:	4293      	cmp	r3, r2
 8015904:	d37e      	bcc.n	8015a04 <sFLASH_GetInfo+0x134>
 8015906:	68fa      	ldr	r2, [r7, #12]
 8015908:	4b49      	ldr	r3, [pc, #292]	@ (8015a30 <sFLASH_GetInfo+0x160>)
 801590a:	4413      	add	r3, r2
 801590c:	2b03      	cmp	r3, #3
 801590e:	d879      	bhi.n	8015a04 <sFLASH_GetInfo+0x134>
 8015910:	a201      	add	r2, pc, #4	@ (adr r2, 8015918 <sFLASH_GetInfo+0x48>)
 8015912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015916:	bf00      	nop
 8015918:	08015929 	.word	0x08015929
 801591c:	08015955 	.word	0x08015955
 8015920:	08015981 	.word	0x08015981
 8015924:	080159ad 	.word	0x080159ad
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8015928:	4b42      	ldr	r3, [pc, #264]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 801592a:	4a40      	ldr	r2, [pc, #256]	@ (8015a2c <sFLASH_GetInfo+0x15c>)
 801592c:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 801592e:	4b41      	ldr	r3, [pc, #260]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 8015930:	2201      	movs	r2, #1
 8015932:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015934:	4b3f      	ldr	r3, [pc, #252]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 8015936:	2201      	movs	r2, #1
 8015938:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 801593a:	4b3e      	ldr	r3, [pc, #248]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 801593c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8015940:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015942:	4b3c      	ldr	r3, [pc, #240]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 8015944:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015948:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 801594a:	4b3a      	ldr	r3, [pc, #232]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 801594c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015950:	819a      	strh	r2, [r3, #12]
			break;
 8015952:	e05b      	b.n	8015a0c <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8015954:	4b37      	ldr	r3, [pc, #220]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 8015956:	4a38      	ldr	r2, [pc, #224]	@ (8015a38 <sFLASH_GetInfo+0x168>)
 8015958:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 801595a:	4b36      	ldr	r3, [pc, #216]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 801595c:	2201      	movs	r2, #1
 801595e:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015960:	4b34      	ldr	r3, [pc, #208]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 8015962:	2201      	movs	r2, #1
 8015964:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8015966:	4b33      	ldr	r3, [pc, #204]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 8015968:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801596c:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 801596e:	4b31      	ldr	r3, [pc, #196]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 8015970:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015974:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8015976:	4b2f      	ldr	r3, [pc, #188]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 8015978:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801597c:	819a      	strh	r2, [r3, #12]
			break;
 801597e:	e045      	b.n	8015a0c <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8015980:	4b2c      	ldr	r3, [pc, #176]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 8015982:	4a2e      	ldr	r2, [pc, #184]	@ (8015a3c <sFLASH_GetInfo+0x16c>)
 8015984:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8015986:	4b2b      	ldr	r3, [pc, #172]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 8015988:	2201      	movs	r2, #1
 801598a:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 801598c:	4b29      	ldr	r3, [pc, #164]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 801598e:	2201      	movs	r2, #1
 8015990:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8015992:	4b28      	ldr	r3, [pc, #160]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 8015994:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8015998:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 801599a:	4b26      	ldr	r3, [pc, #152]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 801599c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80159a0:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 80159a2:	4b24      	ldr	r3, [pc, #144]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 80159a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80159a8:	819a      	strh	r2, [r3, #12]
			break;
 80159aa:	e02f      	b.n	8015a0c <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q128BV_ID:
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 80159ac:	4b21      	ldr	r3, [pc, #132]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 80159ae:	4a1e      	ldr	r2, [pc, #120]	@ (8015a28 <sFLASH_GetInfo+0x158>)
 80159b0:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80159b2:	4b20      	ldr	r3, [pc, #128]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 80159b4:	2201      	movs	r2, #1
 80159b6:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80159b8:	4b1e      	ldr	r3, [pc, #120]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 80159ba:	2201      	movs	r2, #1
 80159bc:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80159be:	4b1d      	ldr	r3, [pc, #116]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 80159c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80159c4:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80159c6:	4b1b      	ldr	r3, [pc, #108]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 80159c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80159cc:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 4096;
 80159ce:	4b19      	ldr	r3, [pc, #100]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 80159d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80159d4:	819a      	strh	r2, [r3, #12]
			break;
 80159d6:	e019      	b.n	8015a0c <sFLASH_GetInfo+0x13c>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 80159d8:	4b16      	ldr	r3, [pc, #88]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 80159da:	4a12      	ldr	r2, [pc, #72]	@ (8015a24 <sFLASH_GetInfo+0x154>)
 80159dc:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80159de:	4b15      	ldr	r3, [pc, #84]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 80159e0:	2201      	movs	r2, #1
 80159e2:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80159e4:	4b13      	ldr	r3, [pc, #76]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 80159e6:	2201      	movs	r2, #1
 80159e8:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80159ea:	4b12      	ldr	r3, [pc, #72]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 80159ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80159f0:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80159f2:	4b10      	ldr	r3, [pc, #64]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 80159f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80159f8:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 80159fa:	4b0e      	ldr	r3, [pc, #56]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 80159fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015a00:	819a      	strh	r2, [r3, #12]
			break;
 8015a02:	e003      	b.n	8015a0c <sFLASH_GetInfo+0x13c>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8015a04:	4b0b      	ldr	r3, [pc, #44]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 8015a06:	2200      	movs	r2, #0
 8015a08:	601a      	str	r2, [r3, #0]
			break;
 8015a0a:	bf00      	nop
	}

	return flash_info;
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	4a09      	ldr	r2, [pc, #36]	@ (8015a34 <sFLASH_GetInfo+0x164>)
 8015a10:	461c      	mov	r4, r3
 8015a12:	4613      	mov	r3, r2
 8015a14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015a16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8015a1a:	6878      	ldr	r0, [r7, #4]
 8015a1c:	3714      	adds	r7, #20
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd90      	pop	{r4, r7, pc}
 8015a22:	bf00      	nop
 8015a24:	00c22016 	.word	0x00c22016
 8015a28:	00ef4018 	.word	0x00ef4018
 8015a2c:	00ef4015 	.word	0x00ef4015
 8015a30:	ff10bfeb 	.word	0xff10bfeb
 8015a34:	20000c44 	.word	0x20000c44
 8015a38:	00ef4016 	.word	0x00ef4016
 8015a3c:	00ef4017 	.word	0x00ef4017

08015a40 <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 8015a40:	b580      	push	{r7, lr}
 8015a42:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 8015a44:	4b02      	ldr	r3, [pc, #8]	@ (8015a50 <sFLASH_CS_LOW+0x10>)
 8015a46:	68db      	ldr	r3, [r3, #12]
 8015a48:	4798      	blx	r3

}
 8015a4a:	bf00      	nop
 8015a4c:	bd80      	pop	{r7, pc}
 8015a4e:	bf00      	nop
 8015a50:	20000c30 	.word	0x20000c30

08015a54 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 8015a54:	b580      	push	{r7, lr}
 8015a56:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 8015a58:	4b02      	ldr	r3, [pc, #8]	@ (8015a64 <sFLASH_CS_HIGH+0x10>)
 8015a5a:	691b      	ldr	r3, [r3, #16]
 8015a5c:	4798      	blx	r3
}
 8015a5e:	bf00      	nop
 8015a60:	bd80      	pop	{r7, pc}
 8015a62:	bf00      	nop
 8015a64:	20000c30 	.word	0x20000c30

08015a68 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b082      	sub	sp, #8
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 8015a70:	f000 f9b4 	bl	8015ddc <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015a74:	f7ff ffe4 	bl	8015a40 <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 8015a78:	2020      	movs	r0, #32
 8015a7a:	f000 f99f 	bl	8015dbc <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	0c1b      	lsrs	r3, r3, #16
 8015a82:	b2db      	uxtb	r3, r3
 8015a84:	4618      	mov	r0, r3
 8015a86:	f000 f999 	bl	8015dbc <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	0a1b      	lsrs	r3, r3, #8
 8015a8e:	b2db      	uxtb	r3, r3
 8015a90:	4618      	mov	r0, r3
 8015a92:	f000 f993 	bl	8015dbc <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	b2db      	uxtb	r3, r3
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f000 f98e 	bl	8015dbc <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015aa0:	f7ff ffd8 	bl	8015a54 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8015aa4:	f000 f9a6 	bl	8015df4 <sFLASH_WaitForWriteEnd>
}
 8015aa8:	bf00      	nop
 8015aaa:	3708      	adds	r7, #8
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}

08015ab0 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b084      	sub	sp, #16
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	60f8      	str	r0, [r7, #12]
 8015ab8:	60b9      	str	r1, [r7, #8]
 8015aba:	4613      	mov	r3, r2
 8015abc:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8015abe:	f000 f98d 	bl	8015ddc <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015ac2:	f7ff ffbd 	bl	8015a40 <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 8015ac6:	2002      	movs	r0, #2
 8015ac8:	f000 f978 	bl	8015dbc <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	0c1b      	lsrs	r3, r3, #16
 8015ad0:	b2db      	uxtb	r3, r3
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f000 f972 	bl	8015dbc <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8015ad8:	68bb      	ldr	r3, [r7, #8]
 8015ada:	0a1b      	lsrs	r3, r3, #8
 8015adc:	b2db      	uxtb	r3, r3
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f000 f96c 	bl	8015dbc <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	b2db      	uxtb	r3, r3
 8015ae8:	4618      	mov	r0, r3
 8015aea:	f000 f967 	bl	8015dbc <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 8015aee:	e007      	b.n	8015b00 <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	781b      	ldrb	r3, [r3, #0]
 8015af4:	4618      	mov	r0, r3
 8015af6:	f000 f961 	bl	8015dbc <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	3301      	adds	r3, #1
 8015afe:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8015b00:	88fb      	ldrh	r3, [r7, #6]
 8015b02:	1e5a      	subs	r2, r3, #1
 8015b04:	80fa      	strh	r2, [r7, #6]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d1f2      	bne.n	8015af0 <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015b0a:	f7ff ffa3 	bl	8015a54 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8015b0e:	f000 f971 	bl	8015df4 <sFLASH_WaitForWriteEnd>
}
 8015b12:	bf00      	nop
 8015b14:	3710      	adds	r7, #16
 8015b16:	46bd      	mov	sp, r7
 8015b18:	bd80      	pop	{r7, pc}

08015b1a <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8015b1a:	b580      	push	{r7, lr}
 8015b1c:	b086      	sub	sp, #24
 8015b1e:	af00      	add	r7, sp, #0
 8015b20:	60f8      	str	r0, [r7, #12]
 8015b22:	60b9      	str	r1, [r7, #8]
 8015b24:	4613      	mov	r3, r2
 8015b26:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	75fb      	strb	r3, [r7, #23]
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	75bb      	strb	r3, [r7, #22]
 8015b30:	2300      	movs	r3, #0
 8015b32:	757b      	strb	r3, [r7, #21]
 8015b34:	2300      	movs	r3, #0
 8015b36:	753b      	strb	r3, [r7, #20]
 8015b38:	2300      	movs	r3, #0
 8015b3a:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8015b3c:	68bb      	ldr	r3, [r7, #8]
 8015b3e:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 8015b40:	7d7b      	ldrb	r3, [r7, #21]
 8015b42:	425b      	negs	r3, r3
 8015b44:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015b46:	88fb      	ldrh	r3, [r7, #6]
 8015b48:	0a1b      	lsrs	r3, r3, #8
 8015b4a:	b29b      	uxth	r3, r3
 8015b4c:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8015b4e:	88fb      	ldrh	r3, [r7, #6]
 8015b50:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8015b52:	7d7b      	ldrb	r3, [r7, #21]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d124      	bne.n	8015ba2 <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015b58:	7dfb      	ldrb	r3, [r7, #23]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d114      	bne.n	8015b88 <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8015b5e:	88fb      	ldrh	r3, [r7, #6]
 8015b60:	461a      	mov	r2, r3
 8015b62:	68b9      	ldr	r1, [r7, #8]
 8015b64:	68f8      	ldr	r0, [r7, #12]
 8015b66:	f7ff ffa3 	bl	8015ab0 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 8015b6a:	e07b      	b.n	8015c64 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8015b6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015b70:	68b9      	ldr	r1, [r7, #8]
 8015b72:	68f8      	ldr	r0, [r7, #12]
 8015b74:	f7ff ff9c 	bl	8015ab0 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015b78:	68bb      	ldr	r3, [r7, #8]
 8015b7a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8015b7e:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8015b86:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015b88:	7dfb      	ldrb	r3, [r7, #23]
 8015b8a:	1e5a      	subs	r2, r3, #1
 8015b8c:	75fa      	strb	r2, [r7, #23]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d1ec      	bne.n	8015b6c <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8015b92:	7dbb      	ldrb	r3, [r7, #22]
 8015b94:	b29b      	uxth	r3, r3
 8015b96:	461a      	mov	r2, r3
 8015b98:	68b9      	ldr	r1, [r7, #8]
 8015b9a:	68f8      	ldr	r0, [r7, #12]
 8015b9c:	f7ff ff88 	bl	8015ab0 <sFLASH_WritePage>
}
 8015ba0:	e060      	b.n	8015c64 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015ba2:	7dfb      	ldrb	r3, [r7, #23]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d125      	bne.n	8015bf4 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8015ba8:	7dba      	ldrb	r2, [r7, #22]
 8015baa:	7d3b      	ldrb	r3, [r7, #20]
 8015bac:	429a      	cmp	r2, r3
 8015bae:	d91a      	bls.n	8015be6 <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 8015bb0:	7dba      	ldrb	r2, [r7, #22]
 8015bb2:	7d3b      	ldrb	r3, [r7, #20]
 8015bb4:	1ad3      	subs	r3, r2, r3
 8015bb6:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8015bb8:	7d3b      	ldrb	r3, [r7, #20]
 8015bba:	b29b      	uxth	r3, r3
 8015bbc:	461a      	mov	r2, r3
 8015bbe:	68b9      	ldr	r1, [r7, #8]
 8015bc0:	68f8      	ldr	r0, [r7, #12]
 8015bc2:	f7ff ff75 	bl	8015ab0 <sFLASH_WritePage>
        WriteAddr +=  count;
 8015bc6:	7d3b      	ldrb	r3, [r7, #20]
 8015bc8:	68ba      	ldr	r2, [r7, #8]
 8015bca:	4413      	add	r3, r2
 8015bcc:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 8015bce:	7d3b      	ldrb	r3, [r7, #20]
 8015bd0:	68fa      	ldr	r2, [r7, #12]
 8015bd2:	4413      	add	r3, r2
 8015bd4:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 8015bd6:	7cfb      	ldrb	r3, [r7, #19]
 8015bd8:	b29b      	uxth	r3, r3
 8015bda:	461a      	mov	r2, r3
 8015bdc:	68b9      	ldr	r1, [r7, #8]
 8015bde:	68f8      	ldr	r0, [r7, #12]
 8015be0:	f7ff ff66 	bl	8015ab0 <sFLASH_WritePage>
}
 8015be4:	e03e      	b.n	8015c64 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8015be6:	88fb      	ldrh	r3, [r7, #6]
 8015be8:	461a      	mov	r2, r3
 8015bea:	68b9      	ldr	r1, [r7, #8]
 8015bec:	68f8      	ldr	r0, [r7, #12]
 8015bee:	f7ff ff5f 	bl	8015ab0 <sFLASH_WritePage>
}
 8015bf2:	e037      	b.n	8015c64 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8015bf4:	7d3b      	ldrb	r3, [r7, #20]
 8015bf6:	b29b      	uxth	r3, r3
 8015bf8:	88fa      	ldrh	r2, [r7, #6]
 8015bfa:	1ad3      	subs	r3, r2, r3
 8015bfc:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015bfe:	88fb      	ldrh	r3, [r7, #6]
 8015c00:	0a1b      	lsrs	r3, r3, #8
 8015c02:	b29b      	uxth	r3, r3
 8015c04:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8015c06:	88fb      	ldrh	r3, [r7, #6]
 8015c08:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 8015c0a:	7d3b      	ldrb	r3, [r7, #20]
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	461a      	mov	r2, r3
 8015c10:	68b9      	ldr	r1, [r7, #8]
 8015c12:	68f8      	ldr	r0, [r7, #12]
 8015c14:	f7ff ff4c 	bl	8015ab0 <sFLASH_WritePage>
      WriteAddr +=  count;
 8015c18:	7d3b      	ldrb	r3, [r7, #20]
 8015c1a:	68ba      	ldr	r2, [r7, #8]
 8015c1c:	4413      	add	r3, r2
 8015c1e:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 8015c20:	7d3b      	ldrb	r3, [r7, #20]
 8015c22:	68fa      	ldr	r2, [r7, #12]
 8015c24:	4413      	add	r3, r2
 8015c26:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015c28:	e00d      	b.n	8015c46 <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8015c2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015c2e:	68b9      	ldr	r1, [r7, #8]
 8015c30:	68f8      	ldr	r0, [r7, #12]
 8015c32:	f7ff ff3d 	bl	8015ab0 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015c36:	68bb      	ldr	r3, [r7, #8]
 8015c38:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8015c3c:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8015c44:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015c46:	7dfb      	ldrb	r3, [r7, #23]
 8015c48:	1e5a      	subs	r2, r3, #1
 8015c4a:	75fa      	strb	r2, [r7, #23]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d1ec      	bne.n	8015c2a <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 8015c50:	7dbb      	ldrb	r3, [r7, #22]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d006      	beq.n	8015c64 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8015c56:	7dbb      	ldrb	r3, [r7, #22]
 8015c58:	b29b      	uxth	r3, r3
 8015c5a:	461a      	mov	r2, r3
 8015c5c:	68b9      	ldr	r1, [r7, #8]
 8015c5e:	68f8      	ldr	r0, [r7, #12]
 8015c60:	f7ff ff26 	bl	8015ab0 <sFLASH_WritePage>
}
 8015c64:	bf00      	nop
 8015c66:	3718      	adds	r7, #24
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd80      	pop	{r7, pc}

08015c6c <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b084      	sub	sp, #16
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	4613      	mov	r3, r2
 8015c78:	80fb      	strh	r3, [r7, #6]
//#include "cmsis_os.h"
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015c7a:	f7ff fee1 	bl	8015a40 <sFLASH_CS_LOW>

  if (NumByteToRead > 16){
 8015c7e:	88fb      	ldrh	r3, [r7, #6]
 8015c80:	2b10      	cmp	r3, #16
 8015c82:	d91c      	bls.n	8015cbe <sFLASH_ReadBuffer+0x52>
	  //Send "Fast read" inctruction
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 8015c84:	200b      	movs	r0, #11
 8015c86:	f000 f899 	bl	8015dbc <sFLASH_SendByte>
	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015c8a:	68bb      	ldr	r3, [r7, #8]
 8015c8c:	0c1b      	lsrs	r3, r3, #16
 8015c8e:	b2db      	uxtb	r3, r3
 8015c90:	4618      	mov	r0, r3
 8015c92:	f000 f893 	bl	8015dbc <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 8015c96:	68bb      	ldr	r3, [r7, #8]
 8015c98:	0a1b      	lsrs	r3, r3, #8
 8015c9a:	b2db      	uxtb	r3, r3
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f000 f88d 	bl	8015dbc <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8015ca2:	68bb      	ldr	r3, [r7, #8]
 8015ca4:	b2db      	uxtb	r3, r3
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f000 f888 	bl	8015dbc <sFLASH_SendByte>

	  sFLASH_SendByte(0x00);
 8015cac:	2000      	movs	r0, #0
 8015cae:	f000 f885 	bl	8015dbc <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8015cb2:	88fb      	ldrh	r3, [r7, #6]
 8015cb4:	4619      	mov	r1, r3
 8015cb6:	68f8      	ldr	r0, [r7, #12]
 8015cb8:	f000 f86e 	bl	8015d98 <sFLASH_SPI_ReadBuffer>
 8015cbc:	e022      	b.n	8015d04 <sFLASH_ReadBuffer+0x98>


  }else{
	  /*!< Send "Read from Memory " instruction */
	  sFLASH_SendByte(sFLASH_CMD_READ);
 8015cbe:	2003      	movs	r0, #3
 8015cc0:	f000 f87c 	bl	8015dbc <sFLASH_SendByte>

	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015cc4:	68bb      	ldr	r3, [r7, #8]
 8015cc6:	0c1b      	lsrs	r3, r3, #16
 8015cc8:	b2db      	uxtb	r3, r3
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f000 f876 	bl	8015dbc <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8015cd0:	68bb      	ldr	r3, [r7, #8]
 8015cd2:	0a1b      	lsrs	r3, r3, #8
 8015cd4:	b2db      	uxtb	r3, r3
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f000 f870 	bl	8015dbc <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8015cdc:	68bb      	ldr	r3, [r7, #8]
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f000 f86b 	bl	8015dbc <sFLASH_SendByte>

	  while (NumByteToRead--) /*!< while there is data to be read */
 8015ce6:	e008      	b.n	8015cfa <sFLASH_ReadBuffer+0x8e>
	  {
		/*!< Read a byte from the FLASH */
		//*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
		  *pBuffer = sFLASH_ReadByte();
 8015ce8:	f000 f846 	bl	8015d78 <sFLASH_ReadByte>
 8015cec:	4603      	mov	r3, r0
 8015cee:	461a      	mov	r2, r3
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	701a      	strb	r2, [r3, #0]
		/*!< Point to the next location where the byte read will be saved */
		pBuffer++;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	3301      	adds	r3, #1
 8015cf8:	60fb      	str	r3, [r7, #12]
	  while (NumByteToRead--) /*!< while there is data to be read */
 8015cfa:	88fb      	ldrh	r3, [r7, #6]
 8015cfc:	1e5a      	subs	r2, r3, #1
 8015cfe:	80fa      	strh	r2, [r7, #6]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d1f1      	bne.n	8015ce8 <sFLASH_ReadBuffer+0x7c>
	  }
  }
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015d04:	f7ff fea6 	bl	8015a54 <sFLASH_CS_HIGH>
}
 8015d08:	bf00      	nop
 8015d0a:	3710      	adds	r7, #16
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}

08015d10 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8015d16:	2300      	movs	r3, #0
 8015d18:	60fb      	str	r3, [r7, #12]
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	60bb      	str	r3, [r7, #8]
 8015d1e:	2300      	movs	r3, #0
 8015d20:	607b      	str	r3, [r7, #4]
 8015d22:	2300      	movs	r3, #0
 8015d24:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015d26:	f7ff fe8b 	bl	8015a40 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015d2a:	f7ff fe93 	bl	8015a54 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015d2e:	f7ff fe87 	bl	8015a40 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015d32:	f7ff fe8f 	bl	8015a54 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015d36:	f7ff fe83 	bl	8015a40 <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8015d3a:	209f      	movs	r0, #159	@ 0x9f
 8015d3c:	f000 f83e 	bl	8015dbc <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 8015d40:	f000 f81a 	bl	8015d78 <sFLASH_ReadByte>
 8015d44:	4603      	mov	r3, r0
 8015d46:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 8015d48:	f000 f816 	bl	8015d78 <sFLASH_ReadByte>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 8015d50:	f000 f812 	bl	8015d78 <sFLASH_ReadByte>
 8015d54:	4603      	mov	r3, r0
 8015d56:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015d58:	f7ff fe7c 	bl	8015a54 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8015d5c:	68bb      	ldr	r3, [r7, #8]
 8015d5e:	041a      	lsls	r2, r3, #16
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	021b      	lsls	r3, r3, #8
 8015d64:	4313      	orrs	r3, r2
 8015d66:	683a      	ldr	r2, [r7, #0]
 8015d68:	4313      	orrs	r3, r2
 8015d6a:	60fb      	str	r3, [r7, #12]

  return Temp;
 8015d6c:	68fb      	ldr	r3, [r7, #12]
}
 8015d6e:	4618      	mov	r0, r3
 8015d70:	3710      	adds	r7, #16
 8015d72:	46bd      	mov	sp, r7
 8015d74:	bd80      	pop	{r7, pc}
	...

08015d78 <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b082      	sub	sp, #8
 8015d7c:	af00      	add	r7, sp, #0
	uint8_t byte;
	flash_conf.receive_buffer(&byte, 1);
 8015d7e:	4b05      	ldr	r3, [pc, #20]	@ (8015d94 <sFLASH_ReadByte+0x1c>)
 8015d80:	685b      	ldr	r3, [r3, #4]
 8015d82:	1dfa      	adds	r2, r7, #7
 8015d84:	2101      	movs	r1, #1
 8015d86:	4610      	mov	r0, r2
 8015d88:	4798      	blx	r3
	return byte;
 8015d8a:	79fb      	ldrb	r3, [r7, #7]
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3708      	adds	r7, #8
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}
 8015d94:	20000c30 	.word	0x20000c30

08015d98 <sFLASH_SPI_ReadBuffer>:


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b082      	sub	sp, #8
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
 8015da0:	460b      	mov	r3, r1
 8015da2:	807b      	strh	r3, [r7, #2]
	flash_conf.receive_buffer(buffer, size);
 8015da4:	4b04      	ldr	r3, [pc, #16]	@ (8015db8 <sFLASH_SPI_ReadBuffer+0x20>)
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	887a      	ldrh	r2, [r7, #2]
 8015daa:	4611      	mov	r1, r2
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	4798      	blx	r3
}
 8015db0:	bf00      	nop
 8015db2:	3708      	adds	r7, #8
 8015db4:	46bd      	mov	sp, r7
 8015db6:	bd80      	pop	{r7, pc}
 8015db8:	20000c30 	.word	0x20000c30

08015dbc <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b082      	sub	sp, #8
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 8015dc6:	4b04      	ldr	r3, [pc, #16]	@ (8015dd8 <sFLASH_SendByte+0x1c>)
 8015dc8:	689b      	ldr	r3, [r3, #8]
 8015dca:	79fa      	ldrb	r2, [r7, #7]
 8015dcc:	4610      	mov	r0, r2
 8015dce:	4798      	blx	r3
}
 8015dd0:	bf00      	nop
 8015dd2:	3708      	adds	r7, #8
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	20000c30 	.word	0x20000c30

08015ddc <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015de0:	f7ff fe2e 	bl	8015a40 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8015de4:	2006      	movs	r0, #6
 8015de6:	f7ff ffe9 	bl	8015dbc <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015dea:	f7ff fe33 	bl	8015a54 <sFLASH_CS_HIGH>
}
 8015dee:	bf00      	nop
 8015df0:	bd80      	pop	{r7, pc}
	...

08015df4 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b082      	sub	sp, #8
 8015df8:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	70fb      	strb	r3, [r7, #3]

  int32_t timeout = 100000;
 8015dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8015e38 <sFLASH_WaitForWriteEnd+0x44>)
 8015e00:	607b      	str	r3, [r7, #4]
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 8015e02:	f7ff fe1d 	bl	8015a40 <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8015e06:	2005      	movs	r0, #5
 8015e08:	f7ff ffd8 	bl	8015dbc <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 8015e0c:	f7ff ffb4 	bl	8015d78 <sFLASH_ReadByte>
 8015e10:	4603      	mov	r3, r0
 8015e12:	70fb      	strb	r3, [r7, #3]

	  sFLASH_CS_HIGH();
 8015e14:	f7ff fe1e 	bl	8015a54 <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	1e5a      	subs	r2, r3, #1
 8015e1c:	607a      	str	r2, [r7, #4]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d005      	beq.n	8015e2e <sFLASH_WaitForWriteEnd+0x3a>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8015e22:	78fb      	ldrb	r3, [r7, #3]
 8015e24:	f003 0301 	and.w	r3, r3, #1
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d1ea      	bne.n	8015e02 <sFLASH_WaitForWriteEnd+0xe>
 8015e2c:	e000      	b.n	8015e30 <sFLASH_WaitForWriteEnd+0x3c>
		  return; //Exit if timeout
 8015e2e:	bf00      	nop

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 8015e30:	3708      	adds	r7, #8
 8015e32:	46bd      	mov	sp, r7
 8015e34:	bd80      	pop	{r7, pc}
 8015e36:	bf00      	nop
 8015e38:	000186a0 	.word	0x000186a0

08015e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8015e40:	4b0e      	ldr	r3, [pc, #56]	@ (8015e7c <HAL_Init+0x40>)
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	4a0d      	ldr	r2, [pc, #52]	@ (8015e7c <HAL_Init+0x40>)
 8015e46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8015e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8015e7c <HAL_Init+0x40>)
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	4a0a      	ldr	r2, [pc, #40]	@ (8015e7c <HAL_Init+0x40>)
 8015e52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8015e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015e58:	4b08      	ldr	r3, [pc, #32]	@ (8015e7c <HAL_Init+0x40>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	4a07      	ldr	r2, [pc, #28]	@ (8015e7c <HAL_Init+0x40>)
 8015e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015e64:	2003      	movs	r0, #3
 8015e66:	f000 f913 	bl	8016090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015e6a:	200f      	movs	r0, #15
 8015e6c:	f7fc fc70 	bl	8012750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015e70:	f7fc fc42 	bl	80126f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015e74:	2300      	movs	r3, #0
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	bd80      	pop	{r7, pc}
 8015e7a:	bf00      	nop
 8015e7c:	40023c00 	.word	0x40023c00

08015e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015e80:	b480      	push	{r7}
 8015e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015e84:	4b06      	ldr	r3, [pc, #24]	@ (8015ea0 <HAL_IncTick+0x20>)
 8015e86:	781b      	ldrb	r3, [r3, #0]
 8015e88:	461a      	mov	r2, r3
 8015e8a:	4b06      	ldr	r3, [pc, #24]	@ (8015ea4 <HAL_IncTick+0x24>)
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	4413      	add	r3, r2
 8015e90:	4a04      	ldr	r2, [pc, #16]	@ (8015ea4 <HAL_IncTick+0x24>)
 8015e92:	6013      	str	r3, [r2, #0]
}
 8015e94:	bf00      	nop
 8015e96:	46bd      	mov	sp, r7
 8015e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9c:	4770      	bx	lr
 8015e9e:	bf00      	nop
 8015ea0:	20000088 	.word	0x20000088
 8015ea4:	20000c54 	.word	0x20000c54

08015ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015ea8:	b480      	push	{r7}
 8015eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8015eac:	4b03      	ldr	r3, [pc, #12]	@ (8015ebc <HAL_GetTick+0x14>)
 8015eae:	681b      	ldr	r3, [r3, #0]
}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb8:	4770      	bx	lr
 8015eba:	bf00      	nop
 8015ebc:	20000c54 	.word	0x20000c54

08015ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b084      	sub	sp, #16
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015ec8:	f7ff ffee 	bl	8015ea8 <HAL_GetTick>
 8015ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015ed8:	d005      	beq.n	8015ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8015eda:	4b0a      	ldr	r3, [pc, #40]	@ (8015f04 <HAL_Delay+0x44>)
 8015edc:	781b      	ldrb	r3, [r3, #0]
 8015ede:	461a      	mov	r2, r3
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	4413      	add	r3, r2
 8015ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8015ee6:	bf00      	nop
 8015ee8:	f7ff ffde 	bl	8015ea8 <HAL_GetTick>
 8015eec:	4602      	mov	r2, r0
 8015eee:	68bb      	ldr	r3, [r7, #8]
 8015ef0:	1ad3      	subs	r3, r2, r3
 8015ef2:	68fa      	ldr	r2, [r7, #12]
 8015ef4:	429a      	cmp	r2, r3
 8015ef6:	d8f7      	bhi.n	8015ee8 <HAL_Delay+0x28>
  {
  }
}
 8015ef8:	bf00      	nop
 8015efa:	bf00      	nop
 8015efc:	3710      	adds	r7, #16
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd80      	pop	{r7, pc}
 8015f02:	bf00      	nop
 8015f04:	20000088 	.word	0x20000088

08015f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015f08:	b480      	push	{r7}
 8015f0a:	b085      	sub	sp, #20
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f003 0307 	and.w	r3, r3, #7
 8015f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015f18:	4b0c      	ldr	r3, [pc, #48]	@ (8015f4c <__NVIC_SetPriorityGrouping+0x44>)
 8015f1a:	68db      	ldr	r3, [r3, #12]
 8015f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015f1e:	68ba      	ldr	r2, [r7, #8]
 8015f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8015f24:	4013      	ands	r3, r2
 8015f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015f2c:	68bb      	ldr	r3, [r7, #8]
 8015f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8015f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015f3a:	4a04      	ldr	r2, [pc, #16]	@ (8015f4c <__NVIC_SetPriorityGrouping+0x44>)
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	60d3      	str	r3, [r2, #12]
}
 8015f40:	bf00      	nop
 8015f42:	3714      	adds	r7, #20
 8015f44:	46bd      	mov	sp, r7
 8015f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4a:	4770      	bx	lr
 8015f4c:	e000ed00 	.word	0xe000ed00

08015f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015f50:	b480      	push	{r7}
 8015f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015f54:	4b04      	ldr	r3, [pc, #16]	@ (8015f68 <__NVIC_GetPriorityGrouping+0x18>)
 8015f56:	68db      	ldr	r3, [r3, #12]
 8015f58:	0a1b      	lsrs	r3, r3, #8
 8015f5a:	f003 0307 	and.w	r3, r3, #7
}
 8015f5e:	4618      	mov	r0, r3
 8015f60:	46bd      	mov	sp, r7
 8015f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f66:	4770      	bx	lr
 8015f68:	e000ed00 	.word	0xe000ed00

08015f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015f6c:	b480      	push	{r7}
 8015f6e:	b083      	sub	sp, #12
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	4603      	mov	r3, r0
 8015f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	db0b      	blt.n	8015f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015f7e:	79fb      	ldrb	r3, [r7, #7]
 8015f80:	f003 021f 	and.w	r2, r3, #31
 8015f84:	4907      	ldr	r1, [pc, #28]	@ (8015fa4 <__NVIC_EnableIRQ+0x38>)
 8015f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f8a:	095b      	lsrs	r3, r3, #5
 8015f8c:	2001      	movs	r0, #1
 8015f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8015f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8015f96:	bf00      	nop
 8015f98:	370c      	adds	r7, #12
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa0:	4770      	bx	lr
 8015fa2:	bf00      	nop
 8015fa4:	e000e100 	.word	0xe000e100

08015fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015fa8:	b480      	push	{r7}
 8015faa:	b083      	sub	sp, #12
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	4603      	mov	r3, r0
 8015fb0:	6039      	str	r1, [r7, #0]
 8015fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	db0a      	blt.n	8015fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015fbc:	683b      	ldr	r3, [r7, #0]
 8015fbe:	b2da      	uxtb	r2, r3
 8015fc0:	490c      	ldr	r1, [pc, #48]	@ (8015ff4 <__NVIC_SetPriority+0x4c>)
 8015fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015fc6:	0112      	lsls	r2, r2, #4
 8015fc8:	b2d2      	uxtb	r2, r2
 8015fca:	440b      	add	r3, r1
 8015fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8015fd0:	e00a      	b.n	8015fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	b2da      	uxtb	r2, r3
 8015fd6:	4908      	ldr	r1, [pc, #32]	@ (8015ff8 <__NVIC_SetPriority+0x50>)
 8015fd8:	79fb      	ldrb	r3, [r7, #7]
 8015fda:	f003 030f 	and.w	r3, r3, #15
 8015fde:	3b04      	subs	r3, #4
 8015fe0:	0112      	lsls	r2, r2, #4
 8015fe2:	b2d2      	uxtb	r2, r2
 8015fe4:	440b      	add	r3, r1
 8015fe6:	761a      	strb	r2, [r3, #24]
}
 8015fe8:	bf00      	nop
 8015fea:	370c      	adds	r7, #12
 8015fec:	46bd      	mov	sp, r7
 8015fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff2:	4770      	bx	lr
 8015ff4:	e000e100 	.word	0xe000e100
 8015ff8:	e000ed00 	.word	0xe000ed00

08015ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015ffc:	b480      	push	{r7}
 8015ffe:	b089      	sub	sp, #36	@ 0x24
 8016000:	af00      	add	r7, sp, #0
 8016002:	60f8      	str	r0, [r7, #12]
 8016004:	60b9      	str	r1, [r7, #8]
 8016006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	f003 0307 	and.w	r3, r3, #7
 801600e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016010:	69fb      	ldr	r3, [r7, #28]
 8016012:	f1c3 0307 	rsb	r3, r3, #7
 8016016:	2b04      	cmp	r3, #4
 8016018:	bf28      	it	cs
 801601a:	2304      	movcs	r3, #4
 801601c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801601e:	69fb      	ldr	r3, [r7, #28]
 8016020:	3304      	adds	r3, #4
 8016022:	2b06      	cmp	r3, #6
 8016024:	d902      	bls.n	801602c <NVIC_EncodePriority+0x30>
 8016026:	69fb      	ldr	r3, [r7, #28]
 8016028:	3b03      	subs	r3, #3
 801602a:	e000      	b.n	801602e <NVIC_EncodePriority+0x32>
 801602c:	2300      	movs	r3, #0
 801602e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016034:	69bb      	ldr	r3, [r7, #24]
 8016036:	fa02 f303 	lsl.w	r3, r2, r3
 801603a:	43da      	mvns	r2, r3
 801603c:	68bb      	ldr	r3, [r7, #8]
 801603e:	401a      	ands	r2, r3
 8016040:	697b      	ldr	r3, [r7, #20]
 8016042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016044:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8016048:	697b      	ldr	r3, [r7, #20]
 801604a:	fa01 f303 	lsl.w	r3, r1, r3
 801604e:	43d9      	mvns	r1, r3
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016054:	4313      	orrs	r3, r2
         );
}
 8016056:	4618      	mov	r0, r3
 8016058:	3724      	adds	r7, #36	@ 0x24
 801605a:	46bd      	mov	sp, r7
 801605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016060:	4770      	bx	lr
	...

08016064 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8016064:	b480      	push	{r7}
 8016066:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8016068:	f3bf 8f4f 	dsb	sy
}
 801606c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801606e:	4b06      	ldr	r3, [pc, #24]	@ (8016088 <__NVIC_SystemReset+0x24>)
 8016070:	68db      	ldr	r3, [r3, #12]
 8016072:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8016076:	4904      	ldr	r1, [pc, #16]	@ (8016088 <__NVIC_SystemReset+0x24>)
 8016078:	4b04      	ldr	r3, [pc, #16]	@ (801608c <__NVIC_SystemReset+0x28>)
 801607a:	4313      	orrs	r3, r2
 801607c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801607e:	f3bf 8f4f 	dsb	sy
}
 8016082:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8016084:	bf00      	nop
 8016086:	e7fd      	b.n	8016084 <__NVIC_SystemReset+0x20>
 8016088:	e000ed00 	.word	0xe000ed00
 801608c:	05fa0004 	.word	0x05fa0004

08016090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f7ff ff35 	bl	8015f08 <__NVIC_SetPriorityGrouping>
}
 801609e:	bf00      	nop
 80160a0:	3708      	adds	r7, #8
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}

080160a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80160a6:	b580      	push	{r7, lr}
 80160a8:	b086      	sub	sp, #24
 80160aa:	af00      	add	r7, sp, #0
 80160ac:	4603      	mov	r3, r0
 80160ae:	60b9      	str	r1, [r7, #8]
 80160b0:	607a      	str	r2, [r7, #4]
 80160b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80160b4:	2300      	movs	r3, #0
 80160b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80160b8:	f7ff ff4a 	bl	8015f50 <__NVIC_GetPriorityGrouping>
 80160bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80160be:	687a      	ldr	r2, [r7, #4]
 80160c0:	68b9      	ldr	r1, [r7, #8]
 80160c2:	6978      	ldr	r0, [r7, #20]
 80160c4:	f7ff ff9a 	bl	8015ffc <NVIC_EncodePriority>
 80160c8:	4602      	mov	r2, r0
 80160ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160ce:	4611      	mov	r1, r2
 80160d0:	4618      	mov	r0, r3
 80160d2:	f7ff ff69 	bl	8015fa8 <__NVIC_SetPriority>
}
 80160d6:	bf00      	nop
 80160d8:	3718      	adds	r7, #24
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}

080160de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80160de:	b580      	push	{r7, lr}
 80160e0:	b082      	sub	sp, #8
 80160e2:	af00      	add	r7, sp, #0
 80160e4:	4603      	mov	r3, r0
 80160e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80160e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80160ec:	4618      	mov	r0, r3
 80160ee:	f7ff ff3d 	bl	8015f6c <__NVIC_EnableIRQ>
}
 80160f2:	bf00      	nop
 80160f4:	3708      	adds	r7, #8
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}

080160fa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80160fa:	b580      	push	{r7, lr}
 80160fc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80160fe:	f7ff ffb1 	bl	8016064 <__NVIC_SystemReset>
	...

08016104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016104:	b480      	push	{r7}
 8016106:	b089      	sub	sp, #36	@ 0x24
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
 801610c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801610e:	2300      	movs	r3, #0
 8016110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8016112:	2300      	movs	r3, #0
 8016114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8016116:	2300      	movs	r3, #0
 8016118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801611a:	2300      	movs	r3, #0
 801611c:	61fb      	str	r3, [r7, #28]
 801611e:	e159      	b.n	80163d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8016120:	2201      	movs	r2, #1
 8016122:	69fb      	ldr	r3, [r7, #28]
 8016124:	fa02 f303 	lsl.w	r3, r2, r3
 8016128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801612a:	683b      	ldr	r3, [r7, #0]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	697a      	ldr	r2, [r7, #20]
 8016130:	4013      	ands	r3, r2
 8016132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8016134:	693a      	ldr	r2, [r7, #16]
 8016136:	697b      	ldr	r3, [r7, #20]
 8016138:	429a      	cmp	r2, r3
 801613a:	f040 8148 	bne.w	80163ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	685b      	ldr	r3, [r3, #4]
 8016142:	f003 0303 	and.w	r3, r3, #3
 8016146:	2b01      	cmp	r3, #1
 8016148:	d005      	beq.n	8016156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801614a:	683b      	ldr	r3, [r7, #0]
 801614c:	685b      	ldr	r3, [r3, #4]
 801614e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016152:	2b02      	cmp	r3, #2
 8016154:	d130      	bne.n	80161b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	689b      	ldr	r3, [r3, #8]
 801615a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801615c:	69fb      	ldr	r3, [r7, #28]
 801615e:	005b      	lsls	r3, r3, #1
 8016160:	2203      	movs	r2, #3
 8016162:	fa02 f303 	lsl.w	r3, r2, r3
 8016166:	43db      	mvns	r3, r3
 8016168:	69ba      	ldr	r2, [r7, #24]
 801616a:	4013      	ands	r3, r2
 801616c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	68da      	ldr	r2, [r3, #12]
 8016172:	69fb      	ldr	r3, [r7, #28]
 8016174:	005b      	lsls	r3, r3, #1
 8016176:	fa02 f303 	lsl.w	r3, r2, r3
 801617a:	69ba      	ldr	r2, [r7, #24]
 801617c:	4313      	orrs	r3, r2
 801617e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	69ba      	ldr	r2, [r7, #24]
 8016184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	685b      	ldr	r3, [r3, #4]
 801618a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801618c:	2201      	movs	r2, #1
 801618e:	69fb      	ldr	r3, [r7, #28]
 8016190:	fa02 f303 	lsl.w	r3, r2, r3
 8016194:	43db      	mvns	r3, r3
 8016196:	69ba      	ldr	r2, [r7, #24]
 8016198:	4013      	ands	r3, r2
 801619a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801619c:	683b      	ldr	r3, [r7, #0]
 801619e:	685b      	ldr	r3, [r3, #4]
 80161a0:	091b      	lsrs	r3, r3, #4
 80161a2:	f003 0201 	and.w	r2, r3, #1
 80161a6:	69fb      	ldr	r3, [r7, #28]
 80161a8:	fa02 f303 	lsl.w	r3, r2, r3
 80161ac:	69ba      	ldr	r2, [r7, #24]
 80161ae:	4313      	orrs	r3, r2
 80161b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	69ba      	ldr	r2, [r7, #24]
 80161b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	685b      	ldr	r3, [r3, #4]
 80161bc:	f003 0303 	and.w	r3, r3, #3
 80161c0:	2b03      	cmp	r3, #3
 80161c2:	d017      	beq.n	80161f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	68db      	ldr	r3, [r3, #12]
 80161c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80161ca:	69fb      	ldr	r3, [r7, #28]
 80161cc:	005b      	lsls	r3, r3, #1
 80161ce:	2203      	movs	r2, #3
 80161d0:	fa02 f303 	lsl.w	r3, r2, r3
 80161d4:	43db      	mvns	r3, r3
 80161d6:	69ba      	ldr	r2, [r7, #24]
 80161d8:	4013      	ands	r3, r2
 80161da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	689a      	ldr	r2, [r3, #8]
 80161e0:	69fb      	ldr	r3, [r7, #28]
 80161e2:	005b      	lsls	r3, r3, #1
 80161e4:	fa02 f303 	lsl.w	r3, r2, r3
 80161e8:	69ba      	ldr	r2, [r7, #24]
 80161ea:	4313      	orrs	r3, r2
 80161ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	69ba      	ldr	r2, [r7, #24]
 80161f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	685b      	ldr	r3, [r3, #4]
 80161f8:	f003 0303 	and.w	r3, r3, #3
 80161fc:	2b02      	cmp	r3, #2
 80161fe:	d123      	bne.n	8016248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016200:	69fb      	ldr	r3, [r7, #28]
 8016202:	08da      	lsrs	r2, r3, #3
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	3208      	adds	r2, #8
 8016208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801620c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801620e:	69fb      	ldr	r3, [r7, #28]
 8016210:	f003 0307 	and.w	r3, r3, #7
 8016214:	009b      	lsls	r3, r3, #2
 8016216:	220f      	movs	r2, #15
 8016218:	fa02 f303 	lsl.w	r3, r2, r3
 801621c:	43db      	mvns	r3, r3
 801621e:	69ba      	ldr	r2, [r7, #24]
 8016220:	4013      	ands	r3, r2
 8016222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016224:	683b      	ldr	r3, [r7, #0]
 8016226:	691a      	ldr	r2, [r3, #16]
 8016228:	69fb      	ldr	r3, [r7, #28]
 801622a:	f003 0307 	and.w	r3, r3, #7
 801622e:	009b      	lsls	r3, r3, #2
 8016230:	fa02 f303 	lsl.w	r3, r2, r3
 8016234:	69ba      	ldr	r2, [r7, #24]
 8016236:	4313      	orrs	r3, r2
 8016238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801623a:	69fb      	ldr	r3, [r7, #28]
 801623c:	08da      	lsrs	r2, r3, #3
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	3208      	adds	r2, #8
 8016242:	69b9      	ldr	r1, [r7, #24]
 8016244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801624e:	69fb      	ldr	r3, [r7, #28]
 8016250:	005b      	lsls	r3, r3, #1
 8016252:	2203      	movs	r2, #3
 8016254:	fa02 f303 	lsl.w	r3, r2, r3
 8016258:	43db      	mvns	r3, r3
 801625a:	69ba      	ldr	r2, [r7, #24]
 801625c:	4013      	ands	r3, r2
 801625e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	685b      	ldr	r3, [r3, #4]
 8016264:	f003 0203 	and.w	r2, r3, #3
 8016268:	69fb      	ldr	r3, [r7, #28]
 801626a:	005b      	lsls	r3, r3, #1
 801626c:	fa02 f303 	lsl.w	r3, r2, r3
 8016270:	69ba      	ldr	r2, [r7, #24]
 8016272:	4313      	orrs	r3, r2
 8016274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	69ba      	ldr	r2, [r7, #24]
 801627a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801627c:	683b      	ldr	r3, [r7, #0]
 801627e:	685b      	ldr	r3, [r3, #4]
 8016280:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8016284:	2b00      	cmp	r3, #0
 8016286:	f000 80a2 	beq.w	80163ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801628a:	2300      	movs	r3, #0
 801628c:	60fb      	str	r3, [r7, #12]
 801628e:	4b57      	ldr	r3, [pc, #348]	@ (80163ec <HAL_GPIO_Init+0x2e8>)
 8016290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016292:	4a56      	ldr	r2, [pc, #344]	@ (80163ec <HAL_GPIO_Init+0x2e8>)
 8016294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8016298:	6453      	str	r3, [r2, #68]	@ 0x44
 801629a:	4b54      	ldr	r3, [pc, #336]	@ (80163ec <HAL_GPIO_Init+0x2e8>)
 801629c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801629e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80162a2:	60fb      	str	r3, [r7, #12]
 80162a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80162a6:	4a52      	ldr	r2, [pc, #328]	@ (80163f0 <HAL_GPIO_Init+0x2ec>)
 80162a8:	69fb      	ldr	r3, [r7, #28]
 80162aa:	089b      	lsrs	r3, r3, #2
 80162ac:	3302      	adds	r3, #2
 80162ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80162b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80162b4:	69fb      	ldr	r3, [r7, #28]
 80162b6:	f003 0303 	and.w	r3, r3, #3
 80162ba:	009b      	lsls	r3, r3, #2
 80162bc:	220f      	movs	r2, #15
 80162be:	fa02 f303 	lsl.w	r3, r2, r3
 80162c2:	43db      	mvns	r3, r3
 80162c4:	69ba      	ldr	r2, [r7, #24]
 80162c6:	4013      	ands	r3, r2
 80162c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	4a49      	ldr	r2, [pc, #292]	@ (80163f4 <HAL_GPIO_Init+0x2f0>)
 80162ce:	4293      	cmp	r3, r2
 80162d0:	d019      	beq.n	8016306 <HAL_GPIO_Init+0x202>
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	4a48      	ldr	r2, [pc, #288]	@ (80163f8 <HAL_GPIO_Init+0x2f4>)
 80162d6:	4293      	cmp	r3, r2
 80162d8:	d013      	beq.n	8016302 <HAL_GPIO_Init+0x1fe>
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	4a47      	ldr	r2, [pc, #284]	@ (80163fc <HAL_GPIO_Init+0x2f8>)
 80162de:	4293      	cmp	r3, r2
 80162e0:	d00d      	beq.n	80162fe <HAL_GPIO_Init+0x1fa>
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	4a46      	ldr	r2, [pc, #280]	@ (8016400 <HAL_GPIO_Init+0x2fc>)
 80162e6:	4293      	cmp	r3, r2
 80162e8:	d007      	beq.n	80162fa <HAL_GPIO_Init+0x1f6>
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	4a45      	ldr	r2, [pc, #276]	@ (8016404 <HAL_GPIO_Init+0x300>)
 80162ee:	4293      	cmp	r3, r2
 80162f0:	d101      	bne.n	80162f6 <HAL_GPIO_Init+0x1f2>
 80162f2:	2304      	movs	r3, #4
 80162f4:	e008      	b.n	8016308 <HAL_GPIO_Init+0x204>
 80162f6:	2307      	movs	r3, #7
 80162f8:	e006      	b.n	8016308 <HAL_GPIO_Init+0x204>
 80162fa:	2303      	movs	r3, #3
 80162fc:	e004      	b.n	8016308 <HAL_GPIO_Init+0x204>
 80162fe:	2302      	movs	r3, #2
 8016300:	e002      	b.n	8016308 <HAL_GPIO_Init+0x204>
 8016302:	2301      	movs	r3, #1
 8016304:	e000      	b.n	8016308 <HAL_GPIO_Init+0x204>
 8016306:	2300      	movs	r3, #0
 8016308:	69fa      	ldr	r2, [r7, #28]
 801630a:	f002 0203 	and.w	r2, r2, #3
 801630e:	0092      	lsls	r2, r2, #2
 8016310:	4093      	lsls	r3, r2
 8016312:	69ba      	ldr	r2, [r7, #24]
 8016314:	4313      	orrs	r3, r2
 8016316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016318:	4935      	ldr	r1, [pc, #212]	@ (80163f0 <HAL_GPIO_Init+0x2ec>)
 801631a:	69fb      	ldr	r3, [r7, #28]
 801631c:	089b      	lsrs	r3, r3, #2
 801631e:	3302      	adds	r3, #2
 8016320:	69ba      	ldr	r2, [r7, #24]
 8016322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8016326:	4b38      	ldr	r3, [pc, #224]	@ (8016408 <HAL_GPIO_Init+0x304>)
 8016328:	689b      	ldr	r3, [r3, #8]
 801632a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801632c:	693b      	ldr	r3, [r7, #16]
 801632e:	43db      	mvns	r3, r3
 8016330:	69ba      	ldr	r2, [r7, #24]
 8016332:	4013      	ands	r3, r2
 8016334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801633e:	2b00      	cmp	r3, #0
 8016340:	d003      	beq.n	801634a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8016342:	69ba      	ldr	r2, [r7, #24]
 8016344:	693b      	ldr	r3, [r7, #16]
 8016346:	4313      	orrs	r3, r2
 8016348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801634a:	4a2f      	ldr	r2, [pc, #188]	@ (8016408 <HAL_GPIO_Init+0x304>)
 801634c:	69bb      	ldr	r3, [r7, #24]
 801634e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8016350:	4b2d      	ldr	r3, [pc, #180]	@ (8016408 <HAL_GPIO_Init+0x304>)
 8016352:	68db      	ldr	r3, [r3, #12]
 8016354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016356:	693b      	ldr	r3, [r7, #16]
 8016358:	43db      	mvns	r3, r3
 801635a:	69ba      	ldr	r2, [r7, #24]
 801635c:	4013      	ands	r3, r2
 801635e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8016360:	683b      	ldr	r3, [r7, #0]
 8016362:	685b      	ldr	r3, [r3, #4]
 8016364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8016368:	2b00      	cmp	r3, #0
 801636a:	d003      	beq.n	8016374 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801636c:	69ba      	ldr	r2, [r7, #24]
 801636e:	693b      	ldr	r3, [r7, #16]
 8016370:	4313      	orrs	r3, r2
 8016372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8016374:	4a24      	ldr	r2, [pc, #144]	@ (8016408 <HAL_GPIO_Init+0x304>)
 8016376:	69bb      	ldr	r3, [r7, #24]
 8016378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801637a:	4b23      	ldr	r3, [pc, #140]	@ (8016408 <HAL_GPIO_Init+0x304>)
 801637c:	685b      	ldr	r3, [r3, #4]
 801637e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016380:	693b      	ldr	r3, [r7, #16]
 8016382:	43db      	mvns	r3, r3
 8016384:	69ba      	ldr	r2, [r7, #24]
 8016386:	4013      	ands	r3, r2
 8016388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801638a:	683b      	ldr	r3, [r7, #0]
 801638c:	685b      	ldr	r3, [r3, #4]
 801638e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016392:	2b00      	cmp	r3, #0
 8016394:	d003      	beq.n	801639e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8016396:	69ba      	ldr	r2, [r7, #24]
 8016398:	693b      	ldr	r3, [r7, #16]
 801639a:	4313      	orrs	r3, r2
 801639c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801639e:	4a1a      	ldr	r2, [pc, #104]	@ (8016408 <HAL_GPIO_Init+0x304>)
 80163a0:	69bb      	ldr	r3, [r7, #24]
 80163a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80163a4:	4b18      	ldr	r3, [pc, #96]	@ (8016408 <HAL_GPIO_Init+0x304>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80163aa:	693b      	ldr	r3, [r7, #16]
 80163ac:	43db      	mvns	r3, r3
 80163ae:	69ba      	ldr	r2, [r7, #24]
 80163b0:	4013      	ands	r3, r2
 80163b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80163b4:	683b      	ldr	r3, [r7, #0]
 80163b6:	685b      	ldr	r3, [r3, #4]
 80163b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d003      	beq.n	80163c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80163c0:	69ba      	ldr	r2, [r7, #24]
 80163c2:	693b      	ldr	r3, [r7, #16]
 80163c4:	4313      	orrs	r3, r2
 80163c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80163c8:	4a0f      	ldr	r2, [pc, #60]	@ (8016408 <HAL_GPIO_Init+0x304>)
 80163ca:	69bb      	ldr	r3, [r7, #24]
 80163cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80163ce:	69fb      	ldr	r3, [r7, #28]
 80163d0:	3301      	adds	r3, #1
 80163d2:	61fb      	str	r3, [r7, #28]
 80163d4:	69fb      	ldr	r3, [r7, #28]
 80163d6:	2b0f      	cmp	r3, #15
 80163d8:	f67f aea2 	bls.w	8016120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80163dc:	bf00      	nop
 80163de:	bf00      	nop
 80163e0:	3724      	adds	r7, #36	@ 0x24
 80163e2:	46bd      	mov	sp, r7
 80163e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e8:	4770      	bx	lr
 80163ea:	bf00      	nop
 80163ec:	40023800 	.word	0x40023800
 80163f0:	40013800 	.word	0x40013800
 80163f4:	40020000 	.word	0x40020000
 80163f8:	40020400 	.word	0x40020400
 80163fc:	40020800 	.word	0x40020800
 8016400:	40020c00 	.word	0x40020c00
 8016404:	40021000 	.word	0x40021000
 8016408:	40013c00 	.word	0x40013c00

0801640c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801640c:	b480      	push	{r7}
 801640e:	b087      	sub	sp, #28
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
 8016414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8016416:	2300      	movs	r3, #0
 8016418:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801641a:	2300      	movs	r3, #0
 801641c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801641e:	2300      	movs	r3, #0
 8016420:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016422:	2300      	movs	r3, #0
 8016424:	617b      	str	r3, [r7, #20]
 8016426:	e0bb      	b.n	80165a0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8016428:	2201      	movs	r2, #1
 801642a:	697b      	ldr	r3, [r7, #20]
 801642c:	fa02 f303 	lsl.w	r3, r2, r3
 8016430:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8016432:	683a      	ldr	r2, [r7, #0]
 8016434:	693b      	ldr	r3, [r7, #16]
 8016436:	4013      	ands	r3, r2
 8016438:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801643a:	68fa      	ldr	r2, [r7, #12]
 801643c:	693b      	ldr	r3, [r7, #16]
 801643e:	429a      	cmp	r2, r3
 8016440:	f040 80ab 	bne.w	801659a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8016444:	4a5c      	ldr	r2, [pc, #368]	@ (80165b8 <HAL_GPIO_DeInit+0x1ac>)
 8016446:	697b      	ldr	r3, [r7, #20]
 8016448:	089b      	lsrs	r3, r3, #2
 801644a:	3302      	adds	r3, #2
 801644c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016450:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8016452:	697b      	ldr	r3, [r7, #20]
 8016454:	f003 0303 	and.w	r3, r3, #3
 8016458:	009b      	lsls	r3, r3, #2
 801645a:	220f      	movs	r2, #15
 801645c:	fa02 f303 	lsl.w	r3, r2, r3
 8016460:	68ba      	ldr	r2, [r7, #8]
 8016462:	4013      	ands	r3, r2
 8016464:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	4a54      	ldr	r2, [pc, #336]	@ (80165bc <HAL_GPIO_DeInit+0x1b0>)
 801646a:	4293      	cmp	r3, r2
 801646c:	d019      	beq.n	80164a2 <HAL_GPIO_DeInit+0x96>
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	4a53      	ldr	r2, [pc, #332]	@ (80165c0 <HAL_GPIO_DeInit+0x1b4>)
 8016472:	4293      	cmp	r3, r2
 8016474:	d013      	beq.n	801649e <HAL_GPIO_DeInit+0x92>
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	4a52      	ldr	r2, [pc, #328]	@ (80165c4 <HAL_GPIO_DeInit+0x1b8>)
 801647a:	4293      	cmp	r3, r2
 801647c:	d00d      	beq.n	801649a <HAL_GPIO_DeInit+0x8e>
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	4a51      	ldr	r2, [pc, #324]	@ (80165c8 <HAL_GPIO_DeInit+0x1bc>)
 8016482:	4293      	cmp	r3, r2
 8016484:	d007      	beq.n	8016496 <HAL_GPIO_DeInit+0x8a>
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	4a50      	ldr	r2, [pc, #320]	@ (80165cc <HAL_GPIO_DeInit+0x1c0>)
 801648a:	4293      	cmp	r3, r2
 801648c:	d101      	bne.n	8016492 <HAL_GPIO_DeInit+0x86>
 801648e:	2304      	movs	r3, #4
 8016490:	e008      	b.n	80164a4 <HAL_GPIO_DeInit+0x98>
 8016492:	2307      	movs	r3, #7
 8016494:	e006      	b.n	80164a4 <HAL_GPIO_DeInit+0x98>
 8016496:	2303      	movs	r3, #3
 8016498:	e004      	b.n	80164a4 <HAL_GPIO_DeInit+0x98>
 801649a:	2302      	movs	r3, #2
 801649c:	e002      	b.n	80164a4 <HAL_GPIO_DeInit+0x98>
 801649e:	2301      	movs	r3, #1
 80164a0:	e000      	b.n	80164a4 <HAL_GPIO_DeInit+0x98>
 80164a2:	2300      	movs	r3, #0
 80164a4:	697a      	ldr	r2, [r7, #20]
 80164a6:	f002 0203 	and.w	r2, r2, #3
 80164aa:	0092      	lsls	r2, r2, #2
 80164ac:	4093      	lsls	r3, r2
 80164ae:	68ba      	ldr	r2, [r7, #8]
 80164b0:	429a      	cmp	r2, r3
 80164b2:	d132      	bne.n	801651a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80164b4:	4b46      	ldr	r3, [pc, #280]	@ (80165d0 <HAL_GPIO_DeInit+0x1c4>)
 80164b6:	681a      	ldr	r2, [r3, #0]
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	43db      	mvns	r3, r3
 80164bc:	4944      	ldr	r1, [pc, #272]	@ (80165d0 <HAL_GPIO_DeInit+0x1c4>)
 80164be:	4013      	ands	r3, r2
 80164c0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80164c2:	4b43      	ldr	r3, [pc, #268]	@ (80165d0 <HAL_GPIO_DeInit+0x1c4>)
 80164c4:	685a      	ldr	r2, [r3, #4]
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	43db      	mvns	r3, r3
 80164ca:	4941      	ldr	r1, [pc, #260]	@ (80165d0 <HAL_GPIO_DeInit+0x1c4>)
 80164cc:	4013      	ands	r3, r2
 80164ce:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80164d0:	4b3f      	ldr	r3, [pc, #252]	@ (80165d0 <HAL_GPIO_DeInit+0x1c4>)
 80164d2:	68da      	ldr	r2, [r3, #12]
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	43db      	mvns	r3, r3
 80164d8:	493d      	ldr	r1, [pc, #244]	@ (80165d0 <HAL_GPIO_DeInit+0x1c4>)
 80164da:	4013      	ands	r3, r2
 80164dc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80164de:	4b3c      	ldr	r3, [pc, #240]	@ (80165d0 <HAL_GPIO_DeInit+0x1c4>)
 80164e0:	689a      	ldr	r2, [r3, #8]
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	43db      	mvns	r3, r3
 80164e6:	493a      	ldr	r1, [pc, #232]	@ (80165d0 <HAL_GPIO_DeInit+0x1c4>)
 80164e8:	4013      	ands	r3, r2
 80164ea:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80164ec:	697b      	ldr	r3, [r7, #20]
 80164ee:	f003 0303 	and.w	r3, r3, #3
 80164f2:	009b      	lsls	r3, r3, #2
 80164f4:	220f      	movs	r2, #15
 80164f6:	fa02 f303 	lsl.w	r3, r2, r3
 80164fa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80164fc:	4a2e      	ldr	r2, [pc, #184]	@ (80165b8 <HAL_GPIO_DeInit+0x1ac>)
 80164fe:	697b      	ldr	r3, [r7, #20]
 8016500:	089b      	lsrs	r3, r3, #2
 8016502:	3302      	adds	r3, #2
 8016504:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016508:	68bb      	ldr	r3, [r7, #8]
 801650a:	43da      	mvns	r2, r3
 801650c:	482a      	ldr	r0, [pc, #168]	@ (80165b8 <HAL_GPIO_DeInit+0x1ac>)
 801650e:	697b      	ldr	r3, [r7, #20]
 8016510:	089b      	lsrs	r3, r3, #2
 8016512:	400a      	ands	r2, r1
 8016514:	3302      	adds	r3, #2
 8016516:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681a      	ldr	r2, [r3, #0]
 801651e:	697b      	ldr	r3, [r7, #20]
 8016520:	005b      	lsls	r3, r3, #1
 8016522:	2103      	movs	r1, #3
 8016524:	fa01 f303 	lsl.w	r3, r1, r3
 8016528:	43db      	mvns	r3, r3
 801652a:	401a      	ands	r2, r3
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016530:	697b      	ldr	r3, [r7, #20]
 8016532:	08da      	lsrs	r2, r3, #3
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	3208      	adds	r2, #8
 8016538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801653c:	697b      	ldr	r3, [r7, #20]
 801653e:	f003 0307 	and.w	r3, r3, #7
 8016542:	009b      	lsls	r3, r3, #2
 8016544:	220f      	movs	r2, #15
 8016546:	fa02 f303 	lsl.w	r3, r2, r3
 801654a:	43db      	mvns	r3, r3
 801654c:	697a      	ldr	r2, [r7, #20]
 801654e:	08d2      	lsrs	r2, r2, #3
 8016550:	4019      	ands	r1, r3
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	3208      	adds	r2, #8
 8016556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	68da      	ldr	r2, [r3, #12]
 801655e:	697b      	ldr	r3, [r7, #20]
 8016560:	005b      	lsls	r3, r3, #1
 8016562:	2103      	movs	r1, #3
 8016564:	fa01 f303 	lsl.w	r3, r1, r3
 8016568:	43db      	mvns	r3, r3
 801656a:	401a      	ands	r2, r3
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	685a      	ldr	r2, [r3, #4]
 8016574:	2101      	movs	r1, #1
 8016576:	697b      	ldr	r3, [r7, #20]
 8016578:	fa01 f303 	lsl.w	r3, r1, r3
 801657c:	43db      	mvns	r3, r3
 801657e:	401a      	ands	r2, r3
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	689a      	ldr	r2, [r3, #8]
 8016588:	697b      	ldr	r3, [r7, #20]
 801658a:	005b      	lsls	r3, r3, #1
 801658c:	2103      	movs	r1, #3
 801658e:	fa01 f303 	lsl.w	r3, r1, r3
 8016592:	43db      	mvns	r3, r3
 8016594:	401a      	ands	r2, r3
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	3301      	adds	r3, #1
 801659e:	617b      	str	r3, [r7, #20]
 80165a0:	697b      	ldr	r3, [r7, #20]
 80165a2:	2b0f      	cmp	r3, #15
 80165a4:	f67f af40 	bls.w	8016428 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80165a8:	bf00      	nop
 80165aa:	bf00      	nop
 80165ac:	371c      	adds	r7, #28
 80165ae:	46bd      	mov	sp, r7
 80165b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b4:	4770      	bx	lr
 80165b6:	bf00      	nop
 80165b8:	40013800 	.word	0x40013800
 80165bc:	40020000 	.word	0x40020000
 80165c0:	40020400 	.word	0x40020400
 80165c4:	40020800 	.word	0x40020800
 80165c8:	40020c00 	.word	0x40020c00
 80165cc:	40021000 	.word	0x40021000
 80165d0:	40013c00 	.word	0x40013c00

080165d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80165d4:	b480      	push	{r7}
 80165d6:	b085      	sub	sp, #20
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	460b      	mov	r3, r1
 80165de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	691a      	ldr	r2, [r3, #16]
 80165e4:	887b      	ldrh	r3, [r7, #2]
 80165e6:	4013      	ands	r3, r2
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d002      	beq.n	80165f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80165ec:	2301      	movs	r3, #1
 80165ee:	73fb      	strb	r3, [r7, #15]
 80165f0:	e001      	b.n	80165f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80165f2:	2300      	movs	r3, #0
 80165f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80165f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80165f8:	4618      	mov	r0, r3
 80165fa:	3714      	adds	r7, #20
 80165fc:	46bd      	mov	sp, r7
 80165fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016602:	4770      	bx	lr

08016604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016604:	b480      	push	{r7}
 8016606:	b083      	sub	sp, #12
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
 801660c:	460b      	mov	r3, r1
 801660e:	807b      	strh	r3, [r7, #2]
 8016610:	4613      	mov	r3, r2
 8016612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8016614:	787b      	ldrb	r3, [r7, #1]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d003      	beq.n	8016622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801661a:	887a      	ldrh	r2, [r7, #2]
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8016620:	e003      	b.n	801662a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8016622:	887b      	ldrh	r3, [r7, #2]
 8016624:	041a      	lsls	r2, r3, #16
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	619a      	str	r2, [r3, #24]
}
 801662a:	bf00      	nop
 801662c:	370c      	adds	r7, #12
 801662e:	46bd      	mov	sp, r7
 8016630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016634:	4770      	bx	lr
	...

08016638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b084      	sub	sp, #16
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d101      	bne.n	801664a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8016646:	2301      	movs	r3, #1
 8016648:	e12b      	b.n	80168a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016650:	b2db      	uxtb	r3, r3
 8016652:	2b00      	cmp	r3, #0
 8016654:	d106      	bne.n	8016664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	2200      	movs	r2, #0
 801665a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801665e:	6878      	ldr	r0, [r7, #4]
 8016660:	f7fb fcce 	bl	8012000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2224      	movs	r2, #36	@ 0x24
 8016668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	681a      	ldr	r2, [r3, #0]
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	f022 0201 	bic.w	r2, r2, #1
 801667a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	681a      	ldr	r2, [r3, #0]
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801668a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	681a      	ldr	r2, [r3, #0]
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801669a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801669c:	f001 fa38 	bl	8017b10 <HAL_RCC_GetPCLK1Freq>
 80166a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	685b      	ldr	r3, [r3, #4]
 80166a6:	4a81      	ldr	r2, [pc, #516]	@ (80168ac <HAL_I2C_Init+0x274>)
 80166a8:	4293      	cmp	r3, r2
 80166aa:	d807      	bhi.n	80166bc <HAL_I2C_Init+0x84>
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	4a80      	ldr	r2, [pc, #512]	@ (80168b0 <HAL_I2C_Init+0x278>)
 80166b0:	4293      	cmp	r3, r2
 80166b2:	bf94      	ite	ls
 80166b4:	2301      	movls	r3, #1
 80166b6:	2300      	movhi	r3, #0
 80166b8:	b2db      	uxtb	r3, r3
 80166ba:	e006      	b.n	80166ca <HAL_I2C_Init+0x92>
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	4a7d      	ldr	r2, [pc, #500]	@ (80168b4 <HAL_I2C_Init+0x27c>)
 80166c0:	4293      	cmp	r3, r2
 80166c2:	bf94      	ite	ls
 80166c4:	2301      	movls	r3, #1
 80166c6:	2300      	movhi	r3, #0
 80166c8:	b2db      	uxtb	r3, r3
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d001      	beq.n	80166d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80166ce:	2301      	movs	r3, #1
 80166d0:	e0e7      	b.n	80168a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	4a78      	ldr	r2, [pc, #480]	@ (80168b8 <HAL_I2C_Init+0x280>)
 80166d6:	fba2 2303 	umull	r2, r3, r2, r3
 80166da:	0c9b      	lsrs	r3, r3, #18
 80166dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	685b      	ldr	r3, [r3, #4]
 80166e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	68ba      	ldr	r2, [r7, #8]
 80166ee:	430a      	orrs	r2, r1
 80166f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	6a1b      	ldr	r3, [r3, #32]
 80166f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	4a6a      	ldr	r2, [pc, #424]	@ (80168ac <HAL_I2C_Init+0x274>)
 8016702:	4293      	cmp	r3, r2
 8016704:	d802      	bhi.n	801670c <HAL_I2C_Init+0xd4>
 8016706:	68bb      	ldr	r3, [r7, #8]
 8016708:	3301      	adds	r3, #1
 801670a:	e009      	b.n	8016720 <HAL_I2C_Init+0xe8>
 801670c:	68bb      	ldr	r3, [r7, #8]
 801670e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016712:	fb02 f303 	mul.w	r3, r2, r3
 8016716:	4a69      	ldr	r2, [pc, #420]	@ (80168bc <HAL_I2C_Init+0x284>)
 8016718:	fba2 2303 	umull	r2, r3, r2, r3
 801671c:	099b      	lsrs	r3, r3, #6
 801671e:	3301      	adds	r3, #1
 8016720:	687a      	ldr	r2, [r7, #4]
 8016722:	6812      	ldr	r2, [r2, #0]
 8016724:	430b      	orrs	r3, r1
 8016726:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	69db      	ldr	r3, [r3, #28]
 801672e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8016732:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	685b      	ldr	r3, [r3, #4]
 801673a:	495c      	ldr	r1, [pc, #368]	@ (80168ac <HAL_I2C_Init+0x274>)
 801673c:	428b      	cmp	r3, r1
 801673e:	d819      	bhi.n	8016774 <HAL_I2C_Init+0x13c>
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	1e59      	subs	r1, r3, #1
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	685b      	ldr	r3, [r3, #4]
 8016748:	005b      	lsls	r3, r3, #1
 801674a:	fbb1 f3f3 	udiv	r3, r1, r3
 801674e:	1c59      	adds	r1, r3, #1
 8016750:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8016754:	400b      	ands	r3, r1
 8016756:	2b00      	cmp	r3, #0
 8016758:	d00a      	beq.n	8016770 <HAL_I2C_Init+0x138>
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	1e59      	subs	r1, r3, #1
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	685b      	ldr	r3, [r3, #4]
 8016762:	005b      	lsls	r3, r3, #1
 8016764:	fbb1 f3f3 	udiv	r3, r1, r3
 8016768:	3301      	adds	r3, #1
 801676a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801676e:	e051      	b.n	8016814 <HAL_I2C_Init+0x1dc>
 8016770:	2304      	movs	r3, #4
 8016772:	e04f      	b.n	8016814 <HAL_I2C_Init+0x1dc>
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	689b      	ldr	r3, [r3, #8]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d111      	bne.n	80167a0 <HAL_I2C_Init+0x168>
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	1e58      	subs	r0, r3, #1
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	6859      	ldr	r1, [r3, #4]
 8016784:	460b      	mov	r3, r1
 8016786:	005b      	lsls	r3, r3, #1
 8016788:	440b      	add	r3, r1
 801678a:	fbb0 f3f3 	udiv	r3, r0, r3
 801678e:	3301      	adds	r3, #1
 8016790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016794:	2b00      	cmp	r3, #0
 8016796:	bf0c      	ite	eq
 8016798:	2301      	moveq	r3, #1
 801679a:	2300      	movne	r3, #0
 801679c:	b2db      	uxtb	r3, r3
 801679e:	e012      	b.n	80167c6 <HAL_I2C_Init+0x18e>
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	1e58      	subs	r0, r3, #1
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	6859      	ldr	r1, [r3, #4]
 80167a8:	460b      	mov	r3, r1
 80167aa:	009b      	lsls	r3, r3, #2
 80167ac:	440b      	add	r3, r1
 80167ae:	0099      	lsls	r1, r3, #2
 80167b0:	440b      	add	r3, r1
 80167b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80167b6:	3301      	adds	r3, #1
 80167b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80167bc:	2b00      	cmp	r3, #0
 80167be:	bf0c      	ite	eq
 80167c0:	2301      	moveq	r3, #1
 80167c2:	2300      	movne	r3, #0
 80167c4:	b2db      	uxtb	r3, r3
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d001      	beq.n	80167ce <HAL_I2C_Init+0x196>
 80167ca:	2301      	movs	r3, #1
 80167cc:	e022      	b.n	8016814 <HAL_I2C_Init+0x1dc>
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	689b      	ldr	r3, [r3, #8]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d10e      	bne.n	80167f4 <HAL_I2C_Init+0x1bc>
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	1e58      	subs	r0, r3, #1
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	6859      	ldr	r1, [r3, #4]
 80167de:	460b      	mov	r3, r1
 80167e0:	005b      	lsls	r3, r3, #1
 80167e2:	440b      	add	r3, r1
 80167e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80167e8:	3301      	adds	r3, #1
 80167ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80167ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80167f2:	e00f      	b.n	8016814 <HAL_I2C_Init+0x1dc>
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	1e58      	subs	r0, r3, #1
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	6859      	ldr	r1, [r3, #4]
 80167fc:	460b      	mov	r3, r1
 80167fe:	009b      	lsls	r3, r3, #2
 8016800:	440b      	add	r3, r1
 8016802:	0099      	lsls	r1, r3, #2
 8016804:	440b      	add	r3, r1
 8016806:	fbb0 f3f3 	udiv	r3, r0, r3
 801680a:	3301      	adds	r3, #1
 801680c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016810:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8016814:	6879      	ldr	r1, [r7, #4]
 8016816:	6809      	ldr	r1, [r1, #0]
 8016818:	4313      	orrs	r3, r2
 801681a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	69da      	ldr	r2, [r3, #28]
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	6a1b      	ldr	r3, [r3, #32]
 801682e:	431a      	orrs	r2, r3
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	430a      	orrs	r2, r1
 8016836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	689b      	ldr	r3, [r3, #8]
 801683e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8016842:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016846:	687a      	ldr	r2, [r7, #4]
 8016848:	6911      	ldr	r1, [r2, #16]
 801684a:	687a      	ldr	r2, [r7, #4]
 801684c:	68d2      	ldr	r2, [r2, #12]
 801684e:	4311      	orrs	r1, r2
 8016850:	687a      	ldr	r2, [r7, #4]
 8016852:	6812      	ldr	r2, [r2, #0]
 8016854:	430b      	orrs	r3, r1
 8016856:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	68db      	ldr	r3, [r3, #12]
 801685e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	695a      	ldr	r2, [r3, #20]
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	699b      	ldr	r3, [r3, #24]
 801686a:	431a      	orrs	r2, r3
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	430a      	orrs	r2, r1
 8016872:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	681a      	ldr	r2, [r3, #0]
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	f042 0201 	orr.w	r2, r2, #1
 8016882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	2200      	movs	r2, #0
 8016888:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	2220      	movs	r2, #32
 801688e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	2200      	movs	r2, #0
 8016896:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	2200      	movs	r2, #0
 801689c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80168a0:	2300      	movs	r3, #0
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	3710      	adds	r7, #16
 80168a6:	46bd      	mov	sp, r7
 80168a8:	bd80      	pop	{r7, pc}
 80168aa:	bf00      	nop
 80168ac:	000186a0 	.word	0x000186a0
 80168b0:	001e847f 	.word	0x001e847f
 80168b4:	003d08ff 	.word	0x003d08ff
 80168b8:	431bde83 	.word	0x431bde83
 80168bc:	10624dd3 	.word	0x10624dd3

080168c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d101      	bne.n	80168d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80168ce:	2301      	movs	r3, #1
 80168d0:	e021      	b.n	8016916 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	2224      	movs	r2, #36	@ 0x24
 80168d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	681a      	ldr	r2, [r3, #0]
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	f022 0201 	bic.w	r2, r2, #1
 80168e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80168ea:	6878      	ldr	r0, [r7, #4]
 80168ec:	f7fb fbd0 	bl	8012090 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2200      	movs	r2, #0
 80168f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	2200      	movs	r2, #0
 80168fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	2200      	movs	r2, #0
 8016902:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	2200      	movs	r2, #0
 8016908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	2200      	movs	r2, #0
 8016910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8016914:	2300      	movs	r3, #0
}
 8016916:	4618      	mov	r0, r3
 8016918:	3708      	adds	r7, #8
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
	...

08016920 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b088      	sub	sp, #32
 8016924:	af02      	add	r7, sp, #8
 8016926:	60f8      	str	r0, [r7, #12]
 8016928:	607a      	str	r2, [r7, #4]
 801692a:	461a      	mov	r2, r3
 801692c:	460b      	mov	r3, r1
 801692e:	817b      	strh	r3, [r7, #10]
 8016930:	4613      	mov	r3, r2
 8016932:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8016934:	f7ff fab8 	bl	8015ea8 <HAL_GetTick>
 8016938:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016940:	b2db      	uxtb	r3, r3
 8016942:	2b20      	cmp	r3, #32
 8016944:	f040 80e0 	bne.w	8016b08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016948:	697b      	ldr	r3, [r7, #20]
 801694a:	9300      	str	r3, [sp, #0]
 801694c:	2319      	movs	r3, #25
 801694e:	2201      	movs	r2, #1
 8016950:	4970      	ldr	r1, [pc, #448]	@ (8016b14 <HAL_I2C_Master_Transmit+0x1f4>)
 8016952:	68f8      	ldr	r0, [r7, #12]
 8016954:	f000 fa92 	bl	8016e7c <I2C_WaitOnFlagUntilTimeout>
 8016958:	4603      	mov	r3, r0
 801695a:	2b00      	cmp	r3, #0
 801695c:	d001      	beq.n	8016962 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 801695e:	2302      	movs	r3, #2
 8016960:	e0d3      	b.n	8016b0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016968:	2b01      	cmp	r3, #1
 801696a:	d101      	bne.n	8016970 <HAL_I2C_Master_Transmit+0x50>
 801696c:	2302      	movs	r3, #2
 801696e:	e0cc      	b.n	8016b0a <HAL_I2C_Master_Transmit+0x1ea>
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	2201      	movs	r2, #1
 8016974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	f003 0301 	and.w	r3, r3, #1
 8016982:	2b01      	cmp	r3, #1
 8016984:	d007      	beq.n	8016996 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	681a      	ldr	r2, [r3, #0]
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	f042 0201 	orr.w	r2, r2, #1
 8016994:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	681a      	ldr	r2, [r3, #0]
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80169a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	2221      	movs	r2, #33	@ 0x21
 80169aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	2210      	movs	r2, #16
 80169b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	2200      	movs	r2, #0
 80169ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	687a      	ldr	r2, [r7, #4]
 80169c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	893a      	ldrh	r2, [r7, #8]
 80169c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169cc:	b29a      	uxth	r2, r3
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	4a50      	ldr	r2, [pc, #320]	@ (8016b18 <HAL_I2C_Master_Transmit+0x1f8>)
 80169d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80169d8:	8979      	ldrh	r1, [r7, #10]
 80169da:	697b      	ldr	r3, [r7, #20]
 80169dc:	6a3a      	ldr	r2, [r7, #32]
 80169de:	68f8      	ldr	r0, [r7, #12]
 80169e0:	f000 f9ca 	bl	8016d78 <I2C_MasterRequestWrite>
 80169e4:	4603      	mov	r3, r0
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d001      	beq.n	80169ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80169ea:	2301      	movs	r3, #1
 80169ec:	e08d      	b.n	8016b0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80169ee:	2300      	movs	r3, #0
 80169f0:	613b      	str	r3, [r7, #16]
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	695b      	ldr	r3, [r3, #20]
 80169f8:	613b      	str	r3, [r7, #16]
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	699b      	ldr	r3, [r3, #24]
 8016a00:	613b      	str	r3, [r7, #16]
 8016a02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8016a04:	e066      	b.n	8016ad4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016a06:	697a      	ldr	r2, [r7, #20]
 8016a08:	6a39      	ldr	r1, [r7, #32]
 8016a0a:	68f8      	ldr	r0, [r7, #12]
 8016a0c:	f000 fb50 	bl	80170b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8016a10:	4603      	mov	r3, r0
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d00d      	beq.n	8016a32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a1a:	2b04      	cmp	r3, #4
 8016a1c:	d107      	bne.n	8016a2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	681a      	ldr	r2, [r3, #0]
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016a2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8016a2e:	2301      	movs	r3, #1
 8016a30:	e06b      	b.n	8016b0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a36:	781a      	ldrb	r2, [r3, #0]
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a42:	1c5a      	adds	r2, r3, #1
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a4c:	b29b      	uxth	r3, r3
 8016a4e:	3b01      	subs	r3, #1
 8016a50:	b29a      	uxth	r2, r3
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a5a:	3b01      	subs	r3, #1
 8016a5c:	b29a      	uxth	r2, r3
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	695b      	ldr	r3, [r3, #20]
 8016a68:	f003 0304 	and.w	r3, r3, #4
 8016a6c:	2b04      	cmp	r3, #4
 8016a6e:	d11b      	bne.n	8016aa8 <HAL_I2C_Master_Transmit+0x188>
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d017      	beq.n	8016aa8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a7c:	781a      	ldrb	r2, [r3, #0]
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a88:	1c5a      	adds	r2, r3, #1
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a92:	b29b      	uxth	r3, r3
 8016a94:	3b01      	subs	r3, #1
 8016a96:	b29a      	uxth	r2, r3
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016aa0:	3b01      	subs	r3, #1
 8016aa2:	b29a      	uxth	r2, r3
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016aa8:	697a      	ldr	r2, [r7, #20]
 8016aaa:	6a39      	ldr	r1, [r7, #32]
 8016aac:	68f8      	ldr	r0, [r7, #12]
 8016aae:	f000 fb47 	bl	8017140 <I2C_WaitOnBTFFlagUntilTimeout>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d00d      	beq.n	8016ad4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016abc:	2b04      	cmp	r3, #4
 8016abe:	d107      	bne.n	8016ad0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	681a      	ldr	r2, [r3, #0]
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016ace:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8016ad0:	2301      	movs	r3, #1
 8016ad2:	e01a      	b.n	8016b0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d194      	bne.n	8016a06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	681a      	ldr	r2, [r3, #0]
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	2220      	movs	r2, #32
 8016af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	2200      	movs	r2, #0
 8016af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	2200      	movs	r2, #0
 8016b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8016b04:	2300      	movs	r3, #0
 8016b06:	e000      	b.n	8016b0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016b08:	2302      	movs	r3, #2
  }
}
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	3718      	adds	r7, #24
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	bd80      	pop	{r7, pc}
 8016b12:	bf00      	nop
 8016b14:	00100002 	.word	0x00100002
 8016b18:	ffff0000 	.word	0xffff0000

08016b1c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b08a      	sub	sp, #40	@ 0x28
 8016b20:	af02      	add	r7, sp, #8
 8016b22:	60f8      	str	r0, [r7, #12]
 8016b24:	607a      	str	r2, [r7, #4]
 8016b26:	603b      	str	r3, [r7, #0]
 8016b28:	460b      	mov	r3, r1
 8016b2a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8016b2c:	f7ff f9bc 	bl	8015ea8 <HAL_GetTick>
 8016b30:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8016b32:	2300      	movs	r3, #0
 8016b34:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016b3c:	b2db      	uxtb	r3, r3
 8016b3e:	2b20      	cmp	r3, #32
 8016b40:	f040 8111 	bne.w	8016d66 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016b44:	69fb      	ldr	r3, [r7, #28]
 8016b46:	9300      	str	r3, [sp, #0]
 8016b48:	2319      	movs	r3, #25
 8016b4a:	2201      	movs	r2, #1
 8016b4c:	4988      	ldr	r1, [pc, #544]	@ (8016d70 <HAL_I2C_IsDeviceReady+0x254>)
 8016b4e:	68f8      	ldr	r0, [r7, #12]
 8016b50:	f000 f994 	bl	8016e7c <I2C_WaitOnFlagUntilTimeout>
 8016b54:	4603      	mov	r3, r0
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d001      	beq.n	8016b5e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8016b5a:	2302      	movs	r3, #2
 8016b5c:	e104      	b.n	8016d68 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016b64:	2b01      	cmp	r3, #1
 8016b66:	d101      	bne.n	8016b6c <HAL_I2C_IsDeviceReady+0x50>
 8016b68:	2302      	movs	r3, #2
 8016b6a:	e0fd      	b.n	8016d68 <HAL_I2C_IsDeviceReady+0x24c>
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	2201      	movs	r2, #1
 8016b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	f003 0301 	and.w	r3, r3, #1
 8016b7e:	2b01      	cmp	r3, #1
 8016b80:	d007      	beq.n	8016b92 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	681a      	ldr	r2, [r3, #0]
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	f042 0201 	orr.w	r2, r2, #1
 8016b90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	681a      	ldr	r2, [r3, #0]
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8016ba0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	2224      	movs	r2, #36	@ 0x24
 8016ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	2200      	movs	r2, #0
 8016bae:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	4a70      	ldr	r2, [pc, #448]	@ (8016d74 <HAL_I2C_IsDeviceReady+0x258>)
 8016bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	681a      	ldr	r2, [r3, #0]
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016bc4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8016bc6:	69fb      	ldr	r3, [r7, #28]
 8016bc8:	9300      	str	r3, [sp, #0]
 8016bca:	683b      	ldr	r3, [r7, #0]
 8016bcc:	2200      	movs	r2, #0
 8016bce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8016bd2:	68f8      	ldr	r0, [r7, #12]
 8016bd4:	f000 f952 	bl	8016e7c <I2C_WaitOnFlagUntilTimeout>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d00d      	beq.n	8016bfa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016be8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016bec:	d103      	bne.n	8016bf6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016bf4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8016bf6:	2303      	movs	r3, #3
 8016bf8:	e0b6      	b.n	8016d68 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016bfa:	897b      	ldrh	r3, [r7, #10]
 8016bfc:	b2db      	uxtb	r3, r3
 8016bfe:	461a      	mov	r2, r3
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8016c08:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8016c0a:	f7ff f94d 	bl	8015ea8 <HAL_GetTick>
 8016c0e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	695b      	ldr	r3, [r3, #20]
 8016c16:	f003 0302 	and.w	r3, r3, #2
 8016c1a:	2b02      	cmp	r3, #2
 8016c1c:	bf0c      	ite	eq
 8016c1e:	2301      	moveq	r3, #1
 8016c20:	2300      	movne	r3, #0
 8016c22:	b2db      	uxtb	r3, r3
 8016c24:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	695b      	ldr	r3, [r3, #20]
 8016c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016c34:	bf0c      	ite	eq
 8016c36:	2301      	moveq	r3, #1
 8016c38:	2300      	movne	r3, #0
 8016c3a:	b2db      	uxtb	r3, r3
 8016c3c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8016c3e:	e025      	b.n	8016c8c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016c40:	f7ff f932 	bl	8015ea8 <HAL_GetTick>
 8016c44:	4602      	mov	r2, r0
 8016c46:	69fb      	ldr	r3, [r7, #28]
 8016c48:	1ad3      	subs	r3, r2, r3
 8016c4a:	683a      	ldr	r2, [r7, #0]
 8016c4c:	429a      	cmp	r2, r3
 8016c4e:	d302      	bcc.n	8016c56 <HAL_I2C_IsDeviceReady+0x13a>
 8016c50:	683b      	ldr	r3, [r7, #0]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d103      	bne.n	8016c5e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	22a0      	movs	r2, #160	@ 0xa0
 8016c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	695b      	ldr	r3, [r3, #20]
 8016c64:	f003 0302 	and.w	r3, r3, #2
 8016c68:	2b02      	cmp	r3, #2
 8016c6a:	bf0c      	ite	eq
 8016c6c:	2301      	moveq	r3, #1
 8016c6e:	2300      	movne	r3, #0
 8016c70:	b2db      	uxtb	r3, r3
 8016c72:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	695b      	ldr	r3, [r3, #20]
 8016c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016c82:	bf0c      	ite	eq
 8016c84:	2301      	moveq	r3, #1
 8016c86:	2300      	movne	r3, #0
 8016c88:	b2db      	uxtb	r3, r3
 8016c8a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016c92:	b2db      	uxtb	r3, r3
 8016c94:	2ba0      	cmp	r3, #160	@ 0xa0
 8016c96:	d005      	beq.n	8016ca4 <HAL_I2C_IsDeviceReady+0x188>
 8016c98:	7dfb      	ldrb	r3, [r7, #23]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d102      	bne.n	8016ca4 <HAL_I2C_IsDeviceReady+0x188>
 8016c9e:	7dbb      	ldrb	r3, [r7, #22]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d0cd      	beq.n	8016c40 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	2220      	movs	r2, #32
 8016ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	695b      	ldr	r3, [r3, #20]
 8016cb2:	f003 0302 	and.w	r3, r3, #2
 8016cb6:	2b02      	cmp	r3, #2
 8016cb8:	d129      	bne.n	8016d0e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	681a      	ldr	r2, [r3, #0]
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016cc8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016cca:	2300      	movs	r3, #0
 8016ccc:	613b      	str	r3, [r7, #16]
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	695b      	ldr	r3, [r3, #20]
 8016cd4:	613b      	str	r3, [r7, #16]
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	699b      	ldr	r3, [r3, #24]
 8016cdc:	613b      	str	r3, [r7, #16]
 8016cde:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016ce0:	69fb      	ldr	r3, [r7, #28]
 8016ce2:	9300      	str	r3, [sp, #0]
 8016ce4:	2319      	movs	r3, #25
 8016ce6:	2201      	movs	r2, #1
 8016ce8:	4921      	ldr	r1, [pc, #132]	@ (8016d70 <HAL_I2C_IsDeviceReady+0x254>)
 8016cea:	68f8      	ldr	r0, [r7, #12]
 8016cec:	f000 f8c6 	bl	8016e7c <I2C_WaitOnFlagUntilTimeout>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d001      	beq.n	8016cfa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8016cf6:	2301      	movs	r3, #1
 8016cf8:	e036      	b.n	8016d68 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	2220      	movs	r2, #32
 8016cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	2200      	movs	r2, #0
 8016d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	e02c      	b.n	8016d68 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	681a      	ldr	r2, [r3, #0]
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016d1c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016d26:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016d28:	69fb      	ldr	r3, [r7, #28]
 8016d2a:	9300      	str	r3, [sp, #0]
 8016d2c:	2319      	movs	r3, #25
 8016d2e:	2201      	movs	r2, #1
 8016d30:	490f      	ldr	r1, [pc, #60]	@ (8016d70 <HAL_I2C_IsDeviceReady+0x254>)
 8016d32:	68f8      	ldr	r0, [r7, #12]
 8016d34:	f000 f8a2 	bl	8016e7c <I2C_WaitOnFlagUntilTimeout>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d001      	beq.n	8016d42 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8016d3e:	2301      	movs	r3, #1
 8016d40:	e012      	b.n	8016d68 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8016d42:	69bb      	ldr	r3, [r7, #24]
 8016d44:	3301      	adds	r3, #1
 8016d46:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8016d48:	69ba      	ldr	r2, [r7, #24]
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	429a      	cmp	r2, r3
 8016d4e:	f4ff af32 	bcc.w	8016bb6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	2220      	movs	r2, #32
 8016d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8016d62:	2301      	movs	r3, #1
 8016d64:	e000      	b.n	8016d68 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8016d66:	2302      	movs	r3, #2
  }
}
 8016d68:	4618      	mov	r0, r3
 8016d6a:	3720      	adds	r7, #32
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	bd80      	pop	{r7, pc}
 8016d70:	00100002 	.word	0x00100002
 8016d74:	ffff0000 	.word	0xffff0000

08016d78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b088      	sub	sp, #32
 8016d7c:	af02      	add	r7, sp, #8
 8016d7e:	60f8      	str	r0, [r7, #12]
 8016d80:	607a      	str	r2, [r7, #4]
 8016d82:	603b      	str	r3, [r7, #0]
 8016d84:	460b      	mov	r3, r1
 8016d86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8016d8e:	697b      	ldr	r3, [r7, #20]
 8016d90:	2b08      	cmp	r3, #8
 8016d92:	d006      	beq.n	8016da2 <I2C_MasterRequestWrite+0x2a>
 8016d94:	697b      	ldr	r3, [r7, #20]
 8016d96:	2b01      	cmp	r3, #1
 8016d98:	d003      	beq.n	8016da2 <I2C_MasterRequestWrite+0x2a>
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8016da0:	d108      	bne.n	8016db4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	681a      	ldr	r2, [r3, #0]
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016db0:	601a      	str	r2, [r3, #0]
 8016db2:	e00b      	b.n	8016dcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016db8:	2b12      	cmp	r3, #18
 8016dba:	d107      	bne.n	8016dcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	681a      	ldr	r2, [r3, #0]
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016dca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8016dcc:	683b      	ldr	r3, [r7, #0]
 8016dce:	9300      	str	r3, [sp, #0]
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	2200      	movs	r2, #0
 8016dd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8016dd8:	68f8      	ldr	r0, [r7, #12]
 8016dda:	f000 f84f 	bl	8016e7c <I2C_WaitOnFlagUntilTimeout>
 8016dde:	4603      	mov	r3, r0
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d00d      	beq.n	8016e00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016df2:	d103      	bne.n	8016dfc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016dfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8016dfc:	2303      	movs	r3, #3
 8016dfe:	e035      	b.n	8016e6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	691b      	ldr	r3, [r3, #16]
 8016e04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016e08:	d108      	bne.n	8016e1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016e0a:	897b      	ldrh	r3, [r7, #10]
 8016e0c:	b2db      	uxtb	r3, r3
 8016e0e:	461a      	mov	r2, r3
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8016e18:	611a      	str	r2, [r3, #16]
 8016e1a:	e01b      	b.n	8016e54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8016e1c:	897b      	ldrh	r3, [r7, #10]
 8016e1e:	11db      	asrs	r3, r3, #7
 8016e20:	b2db      	uxtb	r3, r3
 8016e22:	f003 0306 	and.w	r3, r3, #6
 8016e26:	b2db      	uxtb	r3, r3
 8016e28:	f063 030f 	orn	r3, r3, #15
 8016e2c:	b2da      	uxtb	r2, r3
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8016e34:	683b      	ldr	r3, [r7, #0]
 8016e36:	687a      	ldr	r2, [r7, #4]
 8016e38:	490e      	ldr	r1, [pc, #56]	@ (8016e74 <I2C_MasterRequestWrite+0xfc>)
 8016e3a:	68f8      	ldr	r0, [r7, #12]
 8016e3c:	f000 f898 	bl	8016f70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016e40:	4603      	mov	r3, r0
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d001      	beq.n	8016e4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8016e46:	2301      	movs	r3, #1
 8016e48:	e010      	b.n	8016e6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8016e4a:	897b      	ldrh	r3, [r7, #10]
 8016e4c:	b2da      	uxtb	r2, r3
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8016e54:	683b      	ldr	r3, [r7, #0]
 8016e56:	687a      	ldr	r2, [r7, #4]
 8016e58:	4907      	ldr	r1, [pc, #28]	@ (8016e78 <I2C_MasterRequestWrite+0x100>)
 8016e5a:	68f8      	ldr	r0, [r7, #12]
 8016e5c:	f000 f888 	bl	8016f70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016e60:	4603      	mov	r3, r0
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d001      	beq.n	8016e6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8016e66:	2301      	movs	r3, #1
 8016e68:	e000      	b.n	8016e6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8016e6a:	2300      	movs	r3, #0
}
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	3718      	adds	r7, #24
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}
 8016e74:	00010008 	.word	0x00010008
 8016e78:	00010002 	.word	0x00010002

08016e7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b084      	sub	sp, #16
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	60f8      	str	r0, [r7, #12]
 8016e84:	60b9      	str	r1, [r7, #8]
 8016e86:	603b      	str	r3, [r7, #0]
 8016e88:	4613      	mov	r3, r2
 8016e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016e8c:	e048      	b.n	8016f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016e8e:	683b      	ldr	r3, [r7, #0]
 8016e90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016e94:	d044      	beq.n	8016f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016e96:	f7ff f807 	bl	8015ea8 <HAL_GetTick>
 8016e9a:	4602      	mov	r2, r0
 8016e9c:	69bb      	ldr	r3, [r7, #24]
 8016e9e:	1ad3      	subs	r3, r2, r3
 8016ea0:	683a      	ldr	r2, [r7, #0]
 8016ea2:	429a      	cmp	r2, r3
 8016ea4:	d302      	bcc.n	8016eac <I2C_WaitOnFlagUntilTimeout+0x30>
 8016ea6:	683b      	ldr	r3, [r7, #0]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d139      	bne.n	8016f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016eac:	68bb      	ldr	r3, [r7, #8]
 8016eae:	0c1b      	lsrs	r3, r3, #16
 8016eb0:	b2db      	uxtb	r3, r3
 8016eb2:	2b01      	cmp	r3, #1
 8016eb4:	d10d      	bne.n	8016ed2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	695b      	ldr	r3, [r3, #20]
 8016ebc:	43da      	mvns	r2, r3
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	4013      	ands	r3, r2
 8016ec2:	b29b      	uxth	r3, r3
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	bf0c      	ite	eq
 8016ec8:	2301      	moveq	r3, #1
 8016eca:	2300      	movne	r3, #0
 8016ecc:	b2db      	uxtb	r3, r3
 8016ece:	461a      	mov	r2, r3
 8016ed0:	e00c      	b.n	8016eec <I2C_WaitOnFlagUntilTimeout+0x70>
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	699b      	ldr	r3, [r3, #24]
 8016ed8:	43da      	mvns	r2, r3
 8016eda:	68bb      	ldr	r3, [r7, #8]
 8016edc:	4013      	ands	r3, r2
 8016ede:	b29b      	uxth	r3, r3
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	bf0c      	ite	eq
 8016ee4:	2301      	moveq	r3, #1
 8016ee6:	2300      	movne	r3, #0
 8016ee8:	b2db      	uxtb	r3, r3
 8016eea:	461a      	mov	r2, r3
 8016eec:	79fb      	ldrb	r3, [r7, #7]
 8016eee:	429a      	cmp	r2, r3
 8016ef0:	d116      	bne.n	8016f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	2200      	movs	r2, #0
 8016ef6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	2220      	movs	r2, #32
 8016efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	2200      	movs	r2, #0
 8016f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016f0c:	f043 0220 	orr.w	r2, r3, #32
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	2200      	movs	r2, #0
 8016f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8016f1c:	2301      	movs	r3, #1
 8016f1e:	e023      	b.n	8016f68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016f20:	68bb      	ldr	r3, [r7, #8]
 8016f22:	0c1b      	lsrs	r3, r3, #16
 8016f24:	b2db      	uxtb	r3, r3
 8016f26:	2b01      	cmp	r3, #1
 8016f28:	d10d      	bne.n	8016f46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	695b      	ldr	r3, [r3, #20]
 8016f30:	43da      	mvns	r2, r3
 8016f32:	68bb      	ldr	r3, [r7, #8]
 8016f34:	4013      	ands	r3, r2
 8016f36:	b29b      	uxth	r3, r3
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	bf0c      	ite	eq
 8016f3c:	2301      	moveq	r3, #1
 8016f3e:	2300      	movne	r3, #0
 8016f40:	b2db      	uxtb	r3, r3
 8016f42:	461a      	mov	r2, r3
 8016f44:	e00c      	b.n	8016f60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	699b      	ldr	r3, [r3, #24]
 8016f4c:	43da      	mvns	r2, r3
 8016f4e:	68bb      	ldr	r3, [r7, #8]
 8016f50:	4013      	ands	r3, r2
 8016f52:	b29b      	uxth	r3, r3
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	bf0c      	ite	eq
 8016f58:	2301      	moveq	r3, #1
 8016f5a:	2300      	movne	r3, #0
 8016f5c:	b2db      	uxtb	r3, r3
 8016f5e:	461a      	mov	r2, r3
 8016f60:	79fb      	ldrb	r3, [r7, #7]
 8016f62:	429a      	cmp	r2, r3
 8016f64:	d093      	beq.n	8016e8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016f66:	2300      	movs	r3, #0
}
 8016f68:	4618      	mov	r0, r3
 8016f6a:	3710      	adds	r7, #16
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	bd80      	pop	{r7, pc}

08016f70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b084      	sub	sp, #16
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	60f8      	str	r0, [r7, #12]
 8016f78:	60b9      	str	r1, [r7, #8]
 8016f7a:	607a      	str	r2, [r7, #4]
 8016f7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016f7e:	e071      	b.n	8017064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	695b      	ldr	r3, [r3, #20]
 8016f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016f8e:	d123      	bne.n	8016fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	681a      	ldr	r2, [r3, #0]
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016f9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016fa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	2200      	movs	r2, #0
 8016fae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	2220      	movs	r2, #32
 8016fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	2200      	movs	r2, #0
 8016fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016fc4:	f043 0204 	orr.w	r2, r3, #4
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	2200      	movs	r2, #0
 8016fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8016fd4:	2301      	movs	r3, #1
 8016fd6:	e067      	b.n	80170a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016fde:	d041      	beq.n	8017064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016fe0:	f7fe ff62 	bl	8015ea8 <HAL_GetTick>
 8016fe4:	4602      	mov	r2, r0
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	1ad3      	subs	r3, r2, r3
 8016fea:	687a      	ldr	r2, [r7, #4]
 8016fec:	429a      	cmp	r2, r3
 8016fee:	d302      	bcc.n	8016ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d136      	bne.n	8017064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8016ff6:	68bb      	ldr	r3, [r7, #8]
 8016ff8:	0c1b      	lsrs	r3, r3, #16
 8016ffa:	b2db      	uxtb	r3, r3
 8016ffc:	2b01      	cmp	r3, #1
 8016ffe:	d10c      	bne.n	801701a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	695b      	ldr	r3, [r3, #20]
 8017006:	43da      	mvns	r2, r3
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	4013      	ands	r3, r2
 801700c:	b29b      	uxth	r3, r3
 801700e:	2b00      	cmp	r3, #0
 8017010:	bf14      	ite	ne
 8017012:	2301      	movne	r3, #1
 8017014:	2300      	moveq	r3, #0
 8017016:	b2db      	uxtb	r3, r3
 8017018:	e00b      	b.n	8017032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	699b      	ldr	r3, [r3, #24]
 8017020:	43da      	mvns	r2, r3
 8017022:	68bb      	ldr	r3, [r7, #8]
 8017024:	4013      	ands	r3, r2
 8017026:	b29b      	uxth	r3, r3
 8017028:	2b00      	cmp	r3, #0
 801702a:	bf14      	ite	ne
 801702c:	2301      	movne	r3, #1
 801702e:	2300      	moveq	r3, #0
 8017030:	b2db      	uxtb	r3, r3
 8017032:	2b00      	cmp	r3, #0
 8017034:	d016      	beq.n	8017064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	2200      	movs	r2, #0
 801703a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	2220      	movs	r2, #32
 8017040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	2200      	movs	r2, #0
 8017048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017050:	f043 0220 	orr.w	r2, r3, #32
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	2200      	movs	r2, #0
 801705c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8017060:	2301      	movs	r3, #1
 8017062:	e021      	b.n	80170a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	0c1b      	lsrs	r3, r3, #16
 8017068:	b2db      	uxtb	r3, r3
 801706a:	2b01      	cmp	r3, #1
 801706c:	d10c      	bne.n	8017088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	695b      	ldr	r3, [r3, #20]
 8017074:	43da      	mvns	r2, r3
 8017076:	68bb      	ldr	r3, [r7, #8]
 8017078:	4013      	ands	r3, r2
 801707a:	b29b      	uxth	r3, r3
 801707c:	2b00      	cmp	r3, #0
 801707e:	bf14      	ite	ne
 8017080:	2301      	movne	r3, #1
 8017082:	2300      	moveq	r3, #0
 8017084:	b2db      	uxtb	r3, r3
 8017086:	e00b      	b.n	80170a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	699b      	ldr	r3, [r3, #24]
 801708e:	43da      	mvns	r2, r3
 8017090:	68bb      	ldr	r3, [r7, #8]
 8017092:	4013      	ands	r3, r2
 8017094:	b29b      	uxth	r3, r3
 8017096:	2b00      	cmp	r3, #0
 8017098:	bf14      	ite	ne
 801709a:	2301      	movne	r3, #1
 801709c:	2300      	moveq	r3, #0
 801709e:	b2db      	uxtb	r3, r3
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	f47f af6d 	bne.w	8016f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80170a6:	2300      	movs	r3, #0
}
 80170a8:	4618      	mov	r0, r3
 80170aa:	3710      	adds	r7, #16
 80170ac:	46bd      	mov	sp, r7
 80170ae:	bd80      	pop	{r7, pc}

080170b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b084      	sub	sp, #16
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	60f8      	str	r0, [r7, #12]
 80170b8:	60b9      	str	r1, [r7, #8]
 80170ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80170bc:	e034      	b.n	8017128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80170be:	68f8      	ldr	r0, [r7, #12]
 80170c0:	f000 f886 	bl	80171d0 <I2C_IsAcknowledgeFailed>
 80170c4:	4603      	mov	r3, r0
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d001      	beq.n	80170ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80170ca:	2301      	movs	r3, #1
 80170cc:	e034      	b.n	8017138 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80170d4:	d028      	beq.n	8017128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80170d6:	f7fe fee7 	bl	8015ea8 <HAL_GetTick>
 80170da:	4602      	mov	r2, r0
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	1ad3      	subs	r3, r2, r3
 80170e0:	68ba      	ldr	r2, [r7, #8]
 80170e2:	429a      	cmp	r2, r3
 80170e4:	d302      	bcc.n	80170ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d11d      	bne.n	8017128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	695b      	ldr	r3, [r3, #20]
 80170f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80170f6:	2b80      	cmp	r3, #128	@ 0x80
 80170f8:	d016      	beq.n	8017128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	2200      	movs	r2, #0
 80170fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	2220      	movs	r2, #32
 8017104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	2200      	movs	r2, #0
 801710c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017114:	f043 0220 	orr.w	r2, r3, #32
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	2200      	movs	r2, #0
 8017120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8017124:	2301      	movs	r3, #1
 8017126:	e007      	b.n	8017138 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	695b      	ldr	r3, [r3, #20]
 801712e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017132:	2b80      	cmp	r3, #128	@ 0x80
 8017134:	d1c3      	bne.n	80170be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8017136:	2300      	movs	r3, #0
}
 8017138:	4618      	mov	r0, r3
 801713a:	3710      	adds	r7, #16
 801713c:	46bd      	mov	sp, r7
 801713e:	bd80      	pop	{r7, pc}

08017140 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017140:	b580      	push	{r7, lr}
 8017142:	b084      	sub	sp, #16
 8017144:	af00      	add	r7, sp, #0
 8017146:	60f8      	str	r0, [r7, #12]
 8017148:	60b9      	str	r1, [r7, #8]
 801714a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801714c:	e034      	b.n	80171b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801714e:	68f8      	ldr	r0, [r7, #12]
 8017150:	f000 f83e 	bl	80171d0 <I2C_IsAcknowledgeFailed>
 8017154:	4603      	mov	r3, r0
 8017156:	2b00      	cmp	r3, #0
 8017158:	d001      	beq.n	801715e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801715a:	2301      	movs	r3, #1
 801715c:	e034      	b.n	80171c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801715e:	68bb      	ldr	r3, [r7, #8]
 8017160:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017164:	d028      	beq.n	80171b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017166:	f7fe fe9f 	bl	8015ea8 <HAL_GetTick>
 801716a:	4602      	mov	r2, r0
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	1ad3      	subs	r3, r2, r3
 8017170:	68ba      	ldr	r2, [r7, #8]
 8017172:	429a      	cmp	r2, r3
 8017174:	d302      	bcc.n	801717c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8017176:	68bb      	ldr	r3, [r7, #8]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d11d      	bne.n	80171b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	695b      	ldr	r3, [r3, #20]
 8017182:	f003 0304 	and.w	r3, r3, #4
 8017186:	2b04      	cmp	r3, #4
 8017188:	d016      	beq.n	80171b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	2200      	movs	r2, #0
 801718e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	2220      	movs	r2, #32
 8017194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	2200      	movs	r2, #0
 801719c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80171a4:	f043 0220 	orr.w	r2, r3, #32
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	2200      	movs	r2, #0
 80171b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80171b4:	2301      	movs	r3, #1
 80171b6:	e007      	b.n	80171c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	695b      	ldr	r3, [r3, #20]
 80171be:	f003 0304 	and.w	r3, r3, #4
 80171c2:	2b04      	cmp	r3, #4
 80171c4:	d1c3      	bne.n	801714e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80171c6:	2300      	movs	r3, #0
}
 80171c8:	4618      	mov	r0, r3
 80171ca:	3710      	adds	r7, #16
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}

080171d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80171d0:	b480      	push	{r7}
 80171d2:	b083      	sub	sp, #12
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	695b      	ldr	r3, [r3, #20]
 80171de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80171e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80171e6:	d11b      	bne.n	8017220 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80171f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	2200      	movs	r2, #0
 80171f6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	2220      	movs	r2, #32
 80171fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2200      	movs	r2, #0
 8017204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801720c:	f043 0204 	orr.w	r2, r3, #4
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	2200      	movs	r2, #0
 8017218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 801721c:	2301      	movs	r3, #1
 801721e:	e000      	b.n	8017222 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8017220:	2300      	movs	r3, #0
}
 8017222:	4618      	mov	r0, r3
 8017224:	370c      	adds	r7, #12
 8017226:	46bd      	mov	sp, r7
 8017228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722c:	4770      	bx	lr
	...

08017230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b086      	sub	sp, #24
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d101      	bne.n	8017242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801723e:	2301      	movs	r3, #1
 8017240:	e267      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	f003 0301 	and.w	r3, r3, #1
 801724a:	2b00      	cmp	r3, #0
 801724c:	d075      	beq.n	801733a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 801724e:	4b88      	ldr	r3, [pc, #544]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 8017250:	689b      	ldr	r3, [r3, #8]
 8017252:	f003 030c 	and.w	r3, r3, #12
 8017256:	2b04      	cmp	r3, #4
 8017258:	d00c      	beq.n	8017274 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801725a:	4b85      	ldr	r3, [pc, #532]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 801725c:	689b      	ldr	r3, [r3, #8]
 801725e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8017262:	2b08      	cmp	r3, #8
 8017264:	d112      	bne.n	801728c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8017266:	4b82      	ldr	r3, [pc, #520]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 8017268:	685b      	ldr	r3, [r3, #4]
 801726a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801726e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017272:	d10b      	bne.n	801728c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017274:	4b7e      	ldr	r3, [pc, #504]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801727c:	2b00      	cmp	r3, #0
 801727e:	d05b      	beq.n	8017338 <HAL_RCC_OscConfig+0x108>
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	685b      	ldr	r3, [r3, #4]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d157      	bne.n	8017338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8017288:	2301      	movs	r3, #1
 801728a:	e242      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	685b      	ldr	r3, [r3, #4]
 8017290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017294:	d106      	bne.n	80172a4 <HAL_RCC_OscConfig+0x74>
 8017296:	4b76      	ldr	r3, [pc, #472]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	4a75      	ldr	r2, [pc, #468]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 801729c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80172a0:	6013      	str	r3, [r2, #0]
 80172a2:	e01d      	b.n	80172e0 <HAL_RCC_OscConfig+0xb0>
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	685b      	ldr	r3, [r3, #4]
 80172a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80172ac:	d10c      	bne.n	80172c8 <HAL_RCC_OscConfig+0x98>
 80172ae:	4b70      	ldr	r3, [pc, #448]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	4a6f      	ldr	r2, [pc, #444]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 80172b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80172b8:	6013      	str	r3, [r2, #0]
 80172ba:	4b6d      	ldr	r3, [pc, #436]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	4a6c      	ldr	r2, [pc, #432]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 80172c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80172c4:	6013      	str	r3, [r2, #0]
 80172c6:	e00b      	b.n	80172e0 <HAL_RCC_OscConfig+0xb0>
 80172c8:	4b69      	ldr	r3, [pc, #420]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	4a68      	ldr	r2, [pc, #416]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 80172ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80172d2:	6013      	str	r3, [r2, #0]
 80172d4:	4b66      	ldr	r3, [pc, #408]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	4a65      	ldr	r2, [pc, #404]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 80172da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80172de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	685b      	ldr	r3, [r3, #4]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d013      	beq.n	8017310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80172e8:	f7fe fdde 	bl	8015ea8 <HAL_GetTick>
 80172ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80172ee:	e008      	b.n	8017302 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80172f0:	f7fe fdda 	bl	8015ea8 <HAL_GetTick>
 80172f4:	4602      	mov	r2, r0
 80172f6:	693b      	ldr	r3, [r7, #16]
 80172f8:	1ad3      	subs	r3, r2, r3
 80172fa:	2b64      	cmp	r3, #100	@ 0x64
 80172fc:	d901      	bls.n	8017302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80172fe:	2303      	movs	r3, #3
 8017300:	e207      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017302:	4b5b      	ldr	r3, [pc, #364]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801730a:	2b00      	cmp	r3, #0
 801730c:	d0f0      	beq.n	80172f0 <HAL_RCC_OscConfig+0xc0>
 801730e:	e014      	b.n	801733a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017310:	f7fe fdca 	bl	8015ea8 <HAL_GetTick>
 8017314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8017316:	e008      	b.n	801732a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017318:	f7fe fdc6 	bl	8015ea8 <HAL_GetTick>
 801731c:	4602      	mov	r2, r0
 801731e:	693b      	ldr	r3, [r7, #16]
 8017320:	1ad3      	subs	r3, r2, r3
 8017322:	2b64      	cmp	r3, #100	@ 0x64
 8017324:	d901      	bls.n	801732a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8017326:	2303      	movs	r3, #3
 8017328:	e1f3      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801732a:	4b51      	ldr	r3, [pc, #324]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017332:	2b00      	cmp	r3, #0
 8017334:	d1f0      	bne.n	8017318 <HAL_RCC_OscConfig+0xe8>
 8017336:	e000      	b.n	801733a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	f003 0302 	and.w	r3, r3, #2
 8017342:	2b00      	cmp	r3, #0
 8017344:	d063      	beq.n	801740e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8017346:	4b4a      	ldr	r3, [pc, #296]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 8017348:	689b      	ldr	r3, [r3, #8]
 801734a:	f003 030c 	and.w	r3, r3, #12
 801734e:	2b00      	cmp	r3, #0
 8017350:	d00b      	beq.n	801736a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8017352:	4b47      	ldr	r3, [pc, #284]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 8017354:	689b      	ldr	r3, [r3, #8]
 8017356:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 801735a:	2b08      	cmp	r3, #8
 801735c:	d11c      	bne.n	8017398 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801735e:	4b44      	ldr	r3, [pc, #272]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 8017360:	685b      	ldr	r3, [r3, #4]
 8017362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8017366:	2b00      	cmp	r3, #0
 8017368:	d116      	bne.n	8017398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801736a:	4b41      	ldr	r3, [pc, #260]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	f003 0302 	and.w	r3, r3, #2
 8017372:	2b00      	cmp	r3, #0
 8017374:	d005      	beq.n	8017382 <HAL_RCC_OscConfig+0x152>
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	68db      	ldr	r3, [r3, #12]
 801737a:	2b01      	cmp	r3, #1
 801737c:	d001      	beq.n	8017382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801737e:	2301      	movs	r3, #1
 8017380:	e1c7      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017382:	4b3b      	ldr	r3, [pc, #236]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	691b      	ldr	r3, [r3, #16]
 801738e:	00db      	lsls	r3, r3, #3
 8017390:	4937      	ldr	r1, [pc, #220]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 8017392:	4313      	orrs	r3, r2
 8017394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8017396:	e03a      	b.n	801740e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	68db      	ldr	r3, [r3, #12]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d020      	beq.n	80173e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80173a0:	4b34      	ldr	r3, [pc, #208]	@ (8017474 <HAL_RCC_OscConfig+0x244>)
 80173a2:	2201      	movs	r2, #1
 80173a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80173a6:	f7fe fd7f 	bl	8015ea8 <HAL_GetTick>
 80173aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80173ac:	e008      	b.n	80173c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80173ae:	f7fe fd7b 	bl	8015ea8 <HAL_GetTick>
 80173b2:	4602      	mov	r2, r0
 80173b4:	693b      	ldr	r3, [r7, #16]
 80173b6:	1ad3      	subs	r3, r2, r3
 80173b8:	2b02      	cmp	r3, #2
 80173ba:	d901      	bls.n	80173c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80173bc:	2303      	movs	r3, #3
 80173be:	e1a8      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80173c0:	4b2b      	ldr	r3, [pc, #172]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	f003 0302 	and.w	r3, r3, #2
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d0f0      	beq.n	80173ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80173cc:	4b28      	ldr	r3, [pc, #160]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	691b      	ldr	r3, [r3, #16]
 80173d8:	00db      	lsls	r3, r3, #3
 80173da:	4925      	ldr	r1, [pc, #148]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 80173dc:	4313      	orrs	r3, r2
 80173de:	600b      	str	r3, [r1, #0]
 80173e0:	e015      	b.n	801740e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80173e2:	4b24      	ldr	r3, [pc, #144]	@ (8017474 <HAL_RCC_OscConfig+0x244>)
 80173e4:	2200      	movs	r2, #0
 80173e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80173e8:	f7fe fd5e 	bl	8015ea8 <HAL_GetTick>
 80173ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80173ee:	e008      	b.n	8017402 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80173f0:	f7fe fd5a 	bl	8015ea8 <HAL_GetTick>
 80173f4:	4602      	mov	r2, r0
 80173f6:	693b      	ldr	r3, [r7, #16]
 80173f8:	1ad3      	subs	r3, r2, r3
 80173fa:	2b02      	cmp	r3, #2
 80173fc:	d901      	bls.n	8017402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80173fe:	2303      	movs	r3, #3
 8017400:	e187      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8017402:	4b1b      	ldr	r3, [pc, #108]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	f003 0302 	and.w	r3, r3, #2
 801740a:	2b00      	cmp	r3, #0
 801740c:	d1f0      	bne.n	80173f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	f003 0308 	and.w	r3, r3, #8
 8017416:	2b00      	cmp	r3, #0
 8017418:	d036      	beq.n	8017488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	695b      	ldr	r3, [r3, #20]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d016      	beq.n	8017450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017422:	4b15      	ldr	r3, [pc, #84]	@ (8017478 <HAL_RCC_OscConfig+0x248>)
 8017424:	2201      	movs	r2, #1
 8017426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017428:	f7fe fd3e 	bl	8015ea8 <HAL_GetTick>
 801742c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801742e:	e008      	b.n	8017442 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017430:	f7fe fd3a 	bl	8015ea8 <HAL_GetTick>
 8017434:	4602      	mov	r2, r0
 8017436:	693b      	ldr	r3, [r7, #16]
 8017438:	1ad3      	subs	r3, r2, r3
 801743a:	2b02      	cmp	r3, #2
 801743c:	d901      	bls.n	8017442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801743e:	2303      	movs	r3, #3
 8017440:	e167      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8017442:	4b0b      	ldr	r3, [pc, #44]	@ (8017470 <HAL_RCC_OscConfig+0x240>)
 8017444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017446:	f003 0302 	and.w	r3, r3, #2
 801744a:	2b00      	cmp	r3, #0
 801744c:	d0f0      	beq.n	8017430 <HAL_RCC_OscConfig+0x200>
 801744e:	e01b      	b.n	8017488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017450:	4b09      	ldr	r3, [pc, #36]	@ (8017478 <HAL_RCC_OscConfig+0x248>)
 8017452:	2200      	movs	r2, #0
 8017454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017456:	f7fe fd27 	bl	8015ea8 <HAL_GetTick>
 801745a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801745c:	e00e      	b.n	801747c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801745e:	f7fe fd23 	bl	8015ea8 <HAL_GetTick>
 8017462:	4602      	mov	r2, r0
 8017464:	693b      	ldr	r3, [r7, #16]
 8017466:	1ad3      	subs	r3, r2, r3
 8017468:	2b02      	cmp	r3, #2
 801746a:	d907      	bls.n	801747c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801746c:	2303      	movs	r3, #3
 801746e:	e150      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
 8017470:	40023800 	.word	0x40023800
 8017474:	42470000 	.word	0x42470000
 8017478:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801747c:	4b88      	ldr	r3, [pc, #544]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 801747e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017480:	f003 0302 	and.w	r3, r3, #2
 8017484:	2b00      	cmp	r3, #0
 8017486:	d1ea      	bne.n	801745e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	f003 0304 	and.w	r3, r3, #4
 8017490:	2b00      	cmp	r3, #0
 8017492:	f000 8097 	beq.w	80175c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017496:	2300      	movs	r3, #0
 8017498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801749a:	4b81      	ldr	r3, [pc, #516]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 801749c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801749e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d10f      	bne.n	80174c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80174a6:	2300      	movs	r3, #0
 80174a8:	60bb      	str	r3, [r7, #8]
 80174aa:	4b7d      	ldr	r3, [pc, #500]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 80174ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80174ae:	4a7c      	ldr	r2, [pc, #496]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 80174b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80174b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80174b6:	4b7a      	ldr	r3, [pc, #488]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 80174b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80174ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80174be:	60bb      	str	r3, [r7, #8]
 80174c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80174c2:	2301      	movs	r3, #1
 80174c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80174c6:	4b77      	ldr	r3, [pc, #476]	@ (80176a4 <HAL_RCC_OscConfig+0x474>)
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d118      	bne.n	8017504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80174d2:	4b74      	ldr	r3, [pc, #464]	@ (80176a4 <HAL_RCC_OscConfig+0x474>)
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	4a73      	ldr	r2, [pc, #460]	@ (80176a4 <HAL_RCC_OscConfig+0x474>)
 80174d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80174dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80174de:	f7fe fce3 	bl	8015ea8 <HAL_GetTick>
 80174e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80174e4:	e008      	b.n	80174f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80174e6:	f7fe fcdf 	bl	8015ea8 <HAL_GetTick>
 80174ea:	4602      	mov	r2, r0
 80174ec:	693b      	ldr	r3, [r7, #16]
 80174ee:	1ad3      	subs	r3, r2, r3
 80174f0:	2b02      	cmp	r3, #2
 80174f2:	d901      	bls.n	80174f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80174f4:	2303      	movs	r3, #3
 80174f6:	e10c      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80174f8:	4b6a      	ldr	r3, [pc, #424]	@ (80176a4 <HAL_RCC_OscConfig+0x474>)
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017500:	2b00      	cmp	r3, #0
 8017502:	d0f0      	beq.n	80174e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	689b      	ldr	r3, [r3, #8]
 8017508:	2b01      	cmp	r3, #1
 801750a:	d106      	bne.n	801751a <HAL_RCC_OscConfig+0x2ea>
 801750c:	4b64      	ldr	r3, [pc, #400]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 801750e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017510:	4a63      	ldr	r2, [pc, #396]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 8017512:	f043 0301 	orr.w	r3, r3, #1
 8017516:	6713      	str	r3, [r2, #112]	@ 0x70
 8017518:	e01c      	b.n	8017554 <HAL_RCC_OscConfig+0x324>
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	689b      	ldr	r3, [r3, #8]
 801751e:	2b05      	cmp	r3, #5
 8017520:	d10c      	bne.n	801753c <HAL_RCC_OscConfig+0x30c>
 8017522:	4b5f      	ldr	r3, [pc, #380]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 8017524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017526:	4a5e      	ldr	r2, [pc, #376]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 8017528:	f043 0304 	orr.w	r3, r3, #4
 801752c:	6713      	str	r3, [r2, #112]	@ 0x70
 801752e:	4b5c      	ldr	r3, [pc, #368]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 8017530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017532:	4a5b      	ldr	r2, [pc, #364]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 8017534:	f043 0301 	orr.w	r3, r3, #1
 8017538:	6713      	str	r3, [r2, #112]	@ 0x70
 801753a:	e00b      	b.n	8017554 <HAL_RCC_OscConfig+0x324>
 801753c:	4b58      	ldr	r3, [pc, #352]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 801753e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017540:	4a57      	ldr	r2, [pc, #348]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 8017542:	f023 0301 	bic.w	r3, r3, #1
 8017546:	6713      	str	r3, [r2, #112]	@ 0x70
 8017548:	4b55      	ldr	r3, [pc, #340]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 801754a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801754c:	4a54      	ldr	r2, [pc, #336]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 801754e:	f023 0304 	bic.w	r3, r3, #4
 8017552:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	689b      	ldr	r3, [r3, #8]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d015      	beq.n	8017588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801755c:	f7fe fca4 	bl	8015ea8 <HAL_GetTick>
 8017560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017562:	e00a      	b.n	801757a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017564:	f7fe fca0 	bl	8015ea8 <HAL_GetTick>
 8017568:	4602      	mov	r2, r0
 801756a:	693b      	ldr	r3, [r7, #16]
 801756c:	1ad3      	subs	r3, r2, r3
 801756e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017572:	4293      	cmp	r3, r2
 8017574:	d901      	bls.n	801757a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8017576:	2303      	movs	r3, #3
 8017578:	e0cb      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801757a:	4b49      	ldr	r3, [pc, #292]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 801757c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801757e:	f003 0302 	and.w	r3, r3, #2
 8017582:	2b00      	cmp	r3, #0
 8017584:	d0ee      	beq.n	8017564 <HAL_RCC_OscConfig+0x334>
 8017586:	e014      	b.n	80175b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017588:	f7fe fc8e 	bl	8015ea8 <HAL_GetTick>
 801758c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801758e:	e00a      	b.n	80175a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017590:	f7fe fc8a 	bl	8015ea8 <HAL_GetTick>
 8017594:	4602      	mov	r2, r0
 8017596:	693b      	ldr	r3, [r7, #16]
 8017598:	1ad3      	subs	r3, r2, r3
 801759a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801759e:	4293      	cmp	r3, r2
 80175a0:	d901      	bls.n	80175a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80175a2:	2303      	movs	r3, #3
 80175a4:	e0b5      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80175a6:	4b3e      	ldr	r3, [pc, #248]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 80175a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80175aa:	f003 0302 	and.w	r3, r3, #2
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d1ee      	bne.n	8017590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80175b2:	7dfb      	ldrb	r3, [r7, #23]
 80175b4:	2b01      	cmp	r3, #1
 80175b6:	d105      	bne.n	80175c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80175b8:	4b39      	ldr	r3, [pc, #228]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 80175ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80175bc:	4a38      	ldr	r2, [pc, #224]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 80175be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80175c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	699b      	ldr	r3, [r3, #24]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	f000 80a1 	beq.w	8017710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80175ce:	4b34      	ldr	r3, [pc, #208]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 80175d0:	689b      	ldr	r3, [r3, #8]
 80175d2:	f003 030c 	and.w	r3, r3, #12
 80175d6:	2b08      	cmp	r3, #8
 80175d8:	d05c      	beq.n	8017694 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	699b      	ldr	r3, [r3, #24]
 80175de:	2b02      	cmp	r3, #2
 80175e0:	d141      	bne.n	8017666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80175e2:	4b31      	ldr	r3, [pc, #196]	@ (80176a8 <HAL_RCC_OscConfig+0x478>)
 80175e4:	2200      	movs	r2, #0
 80175e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80175e8:	f7fe fc5e 	bl	8015ea8 <HAL_GetTick>
 80175ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80175ee:	e008      	b.n	8017602 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80175f0:	f7fe fc5a 	bl	8015ea8 <HAL_GetTick>
 80175f4:	4602      	mov	r2, r0
 80175f6:	693b      	ldr	r3, [r7, #16]
 80175f8:	1ad3      	subs	r3, r2, r3
 80175fa:	2b02      	cmp	r3, #2
 80175fc:	d901      	bls.n	8017602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80175fe:	2303      	movs	r3, #3
 8017600:	e087      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017602:	4b27      	ldr	r3, [pc, #156]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801760a:	2b00      	cmp	r3, #0
 801760c:	d1f0      	bne.n	80175f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	69da      	ldr	r2, [r3, #28]
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	6a1b      	ldr	r3, [r3, #32]
 8017616:	431a      	orrs	r2, r3
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801761c:	019b      	lsls	r3, r3, #6
 801761e:	431a      	orrs	r2, r3
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017624:	085b      	lsrs	r3, r3, #1
 8017626:	3b01      	subs	r3, #1
 8017628:	041b      	lsls	r3, r3, #16
 801762a:	431a      	orrs	r2, r3
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017630:	061b      	lsls	r3, r3, #24
 8017632:	491b      	ldr	r1, [pc, #108]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 8017634:	4313      	orrs	r3, r2
 8017636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8017638:	4b1b      	ldr	r3, [pc, #108]	@ (80176a8 <HAL_RCC_OscConfig+0x478>)
 801763a:	2201      	movs	r2, #1
 801763c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801763e:	f7fe fc33 	bl	8015ea8 <HAL_GetTick>
 8017642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017644:	e008      	b.n	8017658 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017646:	f7fe fc2f 	bl	8015ea8 <HAL_GetTick>
 801764a:	4602      	mov	r2, r0
 801764c:	693b      	ldr	r3, [r7, #16]
 801764e:	1ad3      	subs	r3, r2, r3
 8017650:	2b02      	cmp	r3, #2
 8017652:	d901      	bls.n	8017658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8017654:	2303      	movs	r3, #3
 8017656:	e05c      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017658:	4b11      	ldr	r3, [pc, #68]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017660:	2b00      	cmp	r3, #0
 8017662:	d0f0      	beq.n	8017646 <HAL_RCC_OscConfig+0x416>
 8017664:	e054      	b.n	8017710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017666:	4b10      	ldr	r3, [pc, #64]	@ (80176a8 <HAL_RCC_OscConfig+0x478>)
 8017668:	2200      	movs	r2, #0
 801766a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801766c:	f7fe fc1c 	bl	8015ea8 <HAL_GetTick>
 8017670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017672:	e008      	b.n	8017686 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017674:	f7fe fc18 	bl	8015ea8 <HAL_GetTick>
 8017678:	4602      	mov	r2, r0
 801767a:	693b      	ldr	r3, [r7, #16]
 801767c:	1ad3      	subs	r3, r2, r3
 801767e:	2b02      	cmp	r3, #2
 8017680:	d901      	bls.n	8017686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8017682:	2303      	movs	r3, #3
 8017684:	e045      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017686:	4b06      	ldr	r3, [pc, #24]	@ (80176a0 <HAL_RCC_OscConfig+0x470>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801768e:	2b00      	cmp	r3, #0
 8017690:	d1f0      	bne.n	8017674 <HAL_RCC_OscConfig+0x444>
 8017692:	e03d      	b.n	8017710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	699b      	ldr	r3, [r3, #24]
 8017698:	2b01      	cmp	r3, #1
 801769a:	d107      	bne.n	80176ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801769c:	2301      	movs	r3, #1
 801769e:	e038      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
 80176a0:	40023800 	.word	0x40023800
 80176a4:	40007000 	.word	0x40007000
 80176a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80176ac:	4b1b      	ldr	r3, [pc, #108]	@ (801771c <HAL_RCC_OscConfig+0x4ec>)
 80176ae:	685b      	ldr	r3, [r3, #4]
 80176b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	699b      	ldr	r3, [r3, #24]
 80176b6:	2b01      	cmp	r3, #1
 80176b8:	d028      	beq.n	801770c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80176c4:	429a      	cmp	r2, r3
 80176c6:	d121      	bne.n	801770c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80176d2:	429a      	cmp	r2, r3
 80176d4:	d11a      	bne.n	801770c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80176d6:	68fa      	ldr	r2, [r7, #12]
 80176d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80176dc:	4013      	ands	r3, r2
 80176de:	687a      	ldr	r2, [r7, #4]
 80176e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80176e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80176e4:	4293      	cmp	r3, r2
 80176e6:	d111      	bne.n	801770c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176f2:	085b      	lsrs	r3, r3, #1
 80176f4:	3b01      	subs	r3, #1
 80176f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80176f8:	429a      	cmp	r2, r3
 80176fa:	d107      	bne.n	801770c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017708:	429a      	cmp	r2, r3
 801770a:	d001      	beq.n	8017710 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 801770c:	2301      	movs	r3, #1
 801770e:	e000      	b.n	8017712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8017710:	2300      	movs	r3, #0
}
 8017712:	4618      	mov	r0, r3
 8017714:	3718      	adds	r7, #24
 8017716:	46bd      	mov	sp, r7
 8017718:	bd80      	pop	{r7, pc}
 801771a:	bf00      	nop
 801771c:	40023800 	.word	0x40023800

08017720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017720:	b580      	push	{r7, lr}
 8017722:	b084      	sub	sp, #16
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
 8017728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d101      	bne.n	8017734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017730:	2301      	movs	r3, #1
 8017732:	e0cc      	b.n	80178ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017734:	4b68      	ldr	r3, [pc, #416]	@ (80178d8 <HAL_RCC_ClockConfig+0x1b8>)
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	f003 0307 	and.w	r3, r3, #7
 801773c:	683a      	ldr	r2, [r7, #0]
 801773e:	429a      	cmp	r2, r3
 8017740:	d90c      	bls.n	801775c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017742:	4b65      	ldr	r3, [pc, #404]	@ (80178d8 <HAL_RCC_ClockConfig+0x1b8>)
 8017744:	683a      	ldr	r2, [r7, #0]
 8017746:	b2d2      	uxtb	r2, r2
 8017748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801774a:	4b63      	ldr	r3, [pc, #396]	@ (80178d8 <HAL_RCC_ClockConfig+0x1b8>)
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	f003 0307 	and.w	r3, r3, #7
 8017752:	683a      	ldr	r2, [r7, #0]
 8017754:	429a      	cmp	r2, r3
 8017756:	d001      	beq.n	801775c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8017758:	2301      	movs	r3, #1
 801775a:	e0b8      	b.n	80178ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	f003 0302 	and.w	r3, r3, #2
 8017764:	2b00      	cmp	r3, #0
 8017766:	d020      	beq.n	80177aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	f003 0304 	and.w	r3, r3, #4
 8017770:	2b00      	cmp	r3, #0
 8017772:	d005      	beq.n	8017780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8017774:	4b59      	ldr	r3, [pc, #356]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 8017776:	689b      	ldr	r3, [r3, #8]
 8017778:	4a58      	ldr	r2, [pc, #352]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 801777a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 801777e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	f003 0308 	and.w	r3, r3, #8
 8017788:	2b00      	cmp	r3, #0
 801778a:	d005      	beq.n	8017798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801778c:	4b53      	ldr	r3, [pc, #332]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 801778e:	689b      	ldr	r3, [r3, #8]
 8017790:	4a52      	ldr	r2, [pc, #328]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 8017792:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8017796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017798:	4b50      	ldr	r3, [pc, #320]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 801779a:	689b      	ldr	r3, [r3, #8]
 801779c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	689b      	ldr	r3, [r3, #8]
 80177a4:	494d      	ldr	r1, [pc, #308]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 80177a6:	4313      	orrs	r3, r2
 80177a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	f003 0301 	and.w	r3, r3, #1
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d044      	beq.n	8017840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	685b      	ldr	r3, [r3, #4]
 80177ba:	2b01      	cmp	r3, #1
 80177bc:	d107      	bne.n	80177ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80177be:	4b47      	ldr	r3, [pc, #284]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d119      	bne.n	80177fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80177ca:	2301      	movs	r3, #1
 80177cc:	e07f      	b.n	80178ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	685b      	ldr	r3, [r3, #4]
 80177d2:	2b02      	cmp	r3, #2
 80177d4:	d003      	beq.n	80177de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80177da:	2b03      	cmp	r3, #3
 80177dc:	d107      	bne.n	80177ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80177de:	4b3f      	ldr	r3, [pc, #252]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d109      	bne.n	80177fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80177ea:	2301      	movs	r3, #1
 80177ec:	e06f      	b.n	80178ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80177ee:	4b3b      	ldr	r3, [pc, #236]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	f003 0302 	and.w	r3, r3, #2
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d101      	bne.n	80177fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80177fa:	2301      	movs	r3, #1
 80177fc:	e067      	b.n	80178ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80177fe:	4b37      	ldr	r3, [pc, #220]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 8017800:	689b      	ldr	r3, [r3, #8]
 8017802:	f023 0203 	bic.w	r2, r3, #3
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	685b      	ldr	r3, [r3, #4]
 801780a:	4934      	ldr	r1, [pc, #208]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 801780c:	4313      	orrs	r3, r2
 801780e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8017810:	f7fe fb4a 	bl	8015ea8 <HAL_GetTick>
 8017814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017816:	e00a      	b.n	801782e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017818:	f7fe fb46 	bl	8015ea8 <HAL_GetTick>
 801781c:	4602      	mov	r2, r0
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	1ad3      	subs	r3, r2, r3
 8017822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017826:	4293      	cmp	r3, r2
 8017828:	d901      	bls.n	801782e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801782a:	2303      	movs	r3, #3
 801782c:	e04f      	b.n	80178ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801782e:	4b2b      	ldr	r3, [pc, #172]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 8017830:	689b      	ldr	r3, [r3, #8]
 8017832:	f003 020c 	and.w	r2, r3, #12
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	685b      	ldr	r3, [r3, #4]
 801783a:	009b      	lsls	r3, r3, #2
 801783c:	429a      	cmp	r2, r3
 801783e:	d1eb      	bne.n	8017818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017840:	4b25      	ldr	r3, [pc, #148]	@ (80178d8 <HAL_RCC_ClockConfig+0x1b8>)
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	f003 0307 	and.w	r3, r3, #7
 8017848:	683a      	ldr	r2, [r7, #0]
 801784a:	429a      	cmp	r2, r3
 801784c:	d20c      	bcs.n	8017868 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801784e:	4b22      	ldr	r3, [pc, #136]	@ (80178d8 <HAL_RCC_ClockConfig+0x1b8>)
 8017850:	683a      	ldr	r2, [r7, #0]
 8017852:	b2d2      	uxtb	r2, r2
 8017854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017856:	4b20      	ldr	r3, [pc, #128]	@ (80178d8 <HAL_RCC_ClockConfig+0x1b8>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	f003 0307 	and.w	r3, r3, #7
 801785e:	683a      	ldr	r2, [r7, #0]
 8017860:	429a      	cmp	r2, r3
 8017862:	d001      	beq.n	8017868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8017864:	2301      	movs	r3, #1
 8017866:	e032      	b.n	80178ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	f003 0304 	and.w	r3, r3, #4
 8017870:	2b00      	cmp	r3, #0
 8017872:	d008      	beq.n	8017886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8017874:	4b19      	ldr	r3, [pc, #100]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 8017876:	689b      	ldr	r3, [r3, #8]
 8017878:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	68db      	ldr	r3, [r3, #12]
 8017880:	4916      	ldr	r1, [pc, #88]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 8017882:	4313      	orrs	r3, r2
 8017884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	f003 0308 	and.w	r3, r3, #8
 801788e:	2b00      	cmp	r3, #0
 8017890:	d009      	beq.n	80178a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8017892:	4b12      	ldr	r3, [pc, #72]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 8017894:	689b      	ldr	r3, [r3, #8]
 8017896:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	691b      	ldr	r3, [r3, #16]
 801789e:	00db      	lsls	r3, r3, #3
 80178a0:	490e      	ldr	r1, [pc, #56]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 80178a2:	4313      	orrs	r3, r2
 80178a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80178a6:	f000 f821 	bl	80178ec <HAL_RCC_GetSysClockFreq>
 80178aa:	4602      	mov	r2, r0
 80178ac:	4b0b      	ldr	r3, [pc, #44]	@ (80178dc <HAL_RCC_ClockConfig+0x1bc>)
 80178ae:	689b      	ldr	r3, [r3, #8]
 80178b0:	091b      	lsrs	r3, r3, #4
 80178b2:	f003 030f 	and.w	r3, r3, #15
 80178b6:	490a      	ldr	r1, [pc, #40]	@ (80178e0 <HAL_RCC_ClockConfig+0x1c0>)
 80178b8:	5ccb      	ldrb	r3, [r1, r3]
 80178ba:	fa22 f303 	lsr.w	r3, r2, r3
 80178be:	4a09      	ldr	r2, [pc, #36]	@ (80178e4 <HAL_RCC_ClockConfig+0x1c4>)
 80178c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80178c2:	4b09      	ldr	r3, [pc, #36]	@ (80178e8 <HAL_RCC_ClockConfig+0x1c8>)
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	4618      	mov	r0, r3
 80178c8:	f7fa ff42 	bl	8012750 <HAL_InitTick>

  return HAL_OK;
 80178cc:	2300      	movs	r3, #0
}
 80178ce:	4618      	mov	r0, r3
 80178d0:	3710      	adds	r7, #16
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}
 80178d6:	bf00      	nop
 80178d8:	40023c00 	.word	0x40023c00
 80178dc:	40023800 	.word	0x40023800
 80178e0:	08043bf4 	.word	0x08043bf4
 80178e4:	20000018 	.word	0x20000018
 80178e8:	20000084 	.word	0x20000084

080178ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80178ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80178f0:	b094      	sub	sp, #80	@ 0x50
 80178f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80178f4:	2300      	movs	r3, #0
 80178f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80178f8:	2300      	movs	r3, #0
 80178fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80178fc:	2300      	movs	r3, #0
 80178fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8017900:	2300      	movs	r3, #0
 8017902:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017904:	4b79      	ldr	r3, [pc, #484]	@ (8017aec <HAL_RCC_GetSysClockFreq+0x200>)
 8017906:	689b      	ldr	r3, [r3, #8]
 8017908:	f003 030c 	and.w	r3, r3, #12
 801790c:	2b08      	cmp	r3, #8
 801790e:	d00d      	beq.n	801792c <HAL_RCC_GetSysClockFreq+0x40>
 8017910:	2b08      	cmp	r3, #8
 8017912:	f200 80e1 	bhi.w	8017ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8017916:	2b00      	cmp	r3, #0
 8017918:	d002      	beq.n	8017920 <HAL_RCC_GetSysClockFreq+0x34>
 801791a:	2b04      	cmp	r3, #4
 801791c:	d003      	beq.n	8017926 <HAL_RCC_GetSysClockFreq+0x3a>
 801791e:	e0db      	b.n	8017ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8017920:	4b73      	ldr	r3, [pc, #460]	@ (8017af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8017922:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8017924:	e0db      	b.n	8017ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8017926:	4b73      	ldr	r3, [pc, #460]	@ (8017af4 <HAL_RCC_GetSysClockFreq+0x208>)
 8017928:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801792a:	e0d8      	b.n	8017ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801792c:	4b6f      	ldr	r3, [pc, #444]	@ (8017aec <HAL_RCC_GetSysClockFreq+0x200>)
 801792e:	685b      	ldr	r3, [r3, #4]
 8017930:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017934:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8017936:	4b6d      	ldr	r3, [pc, #436]	@ (8017aec <HAL_RCC_GetSysClockFreq+0x200>)
 8017938:	685b      	ldr	r3, [r3, #4]
 801793a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801793e:	2b00      	cmp	r3, #0
 8017940:	d063      	beq.n	8017a0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017942:	4b6a      	ldr	r3, [pc, #424]	@ (8017aec <HAL_RCC_GetSysClockFreq+0x200>)
 8017944:	685b      	ldr	r3, [r3, #4]
 8017946:	099b      	lsrs	r3, r3, #6
 8017948:	2200      	movs	r2, #0
 801794a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801794c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801794e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017954:	633b      	str	r3, [r7, #48]	@ 0x30
 8017956:	2300      	movs	r3, #0
 8017958:	637b      	str	r3, [r7, #52]	@ 0x34
 801795a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 801795e:	4622      	mov	r2, r4
 8017960:	462b      	mov	r3, r5
 8017962:	f04f 0000 	mov.w	r0, #0
 8017966:	f04f 0100 	mov.w	r1, #0
 801796a:	0159      	lsls	r1, r3, #5
 801796c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8017970:	0150      	lsls	r0, r2, #5
 8017972:	4602      	mov	r2, r0
 8017974:	460b      	mov	r3, r1
 8017976:	4621      	mov	r1, r4
 8017978:	1a51      	subs	r1, r2, r1
 801797a:	6139      	str	r1, [r7, #16]
 801797c:	4629      	mov	r1, r5
 801797e:	eb63 0301 	sbc.w	r3, r3, r1
 8017982:	617b      	str	r3, [r7, #20]
 8017984:	f04f 0200 	mov.w	r2, #0
 8017988:	f04f 0300 	mov.w	r3, #0
 801798c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8017990:	4659      	mov	r1, fp
 8017992:	018b      	lsls	r3, r1, #6
 8017994:	4651      	mov	r1, sl
 8017996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801799a:	4651      	mov	r1, sl
 801799c:	018a      	lsls	r2, r1, #6
 801799e:	4651      	mov	r1, sl
 80179a0:	ebb2 0801 	subs.w	r8, r2, r1
 80179a4:	4659      	mov	r1, fp
 80179a6:	eb63 0901 	sbc.w	r9, r3, r1
 80179aa:	f04f 0200 	mov.w	r2, #0
 80179ae:	f04f 0300 	mov.w	r3, #0
 80179b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80179b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80179ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80179be:	4690      	mov	r8, r2
 80179c0:	4699      	mov	r9, r3
 80179c2:	4623      	mov	r3, r4
 80179c4:	eb18 0303 	adds.w	r3, r8, r3
 80179c8:	60bb      	str	r3, [r7, #8]
 80179ca:	462b      	mov	r3, r5
 80179cc:	eb49 0303 	adc.w	r3, r9, r3
 80179d0:	60fb      	str	r3, [r7, #12]
 80179d2:	f04f 0200 	mov.w	r2, #0
 80179d6:	f04f 0300 	mov.w	r3, #0
 80179da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80179de:	4629      	mov	r1, r5
 80179e0:	024b      	lsls	r3, r1, #9
 80179e2:	4621      	mov	r1, r4
 80179e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80179e8:	4621      	mov	r1, r4
 80179ea:	024a      	lsls	r2, r1, #9
 80179ec:	4610      	mov	r0, r2
 80179ee:	4619      	mov	r1, r3
 80179f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80179f2:	2200      	movs	r2, #0
 80179f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80179f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80179f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80179fc:	f7f9 f9ac 	bl	8010d58 <__aeabi_uldivmod>
 8017a00:	4602      	mov	r2, r0
 8017a02:	460b      	mov	r3, r1
 8017a04:	4613      	mov	r3, r2
 8017a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017a08:	e058      	b.n	8017abc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017a0a:	4b38      	ldr	r3, [pc, #224]	@ (8017aec <HAL_RCC_GetSysClockFreq+0x200>)
 8017a0c:	685b      	ldr	r3, [r3, #4]
 8017a0e:	099b      	lsrs	r3, r3, #6
 8017a10:	2200      	movs	r2, #0
 8017a12:	4618      	mov	r0, r3
 8017a14:	4611      	mov	r1, r2
 8017a16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8017a1a:	623b      	str	r3, [r7, #32]
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017a20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8017a24:	4642      	mov	r2, r8
 8017a26:	464b      	mov	r3, r9
 8017a28:	f04f 0000 	mov.w	r0, #0
 8017a2c:	f04f 0100 	mov.w	r1, #0
 8017a30:	0159      	lsls	r1, r3, #5
 8017a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8017a36:	0150      	lsls	r0, r2, #5
 8017a38:	4602      	mov	r2, r0
 8017a3a:	460b      	mov	r3, r1
 8017a3c:	4641      	mov	r1, r8
 8017a3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8017a42:	4649      	mov	r1, r9
 8017a44:	eb63 0b01 	sbc.w	fp, r3, r1
 8017a48:	f04f 0200 	mov.w	r2, #0
 8017a4c:	f04f 0300 	mov.w	r3, #0
 8017a50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8017a54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8017a58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8017a5c:	ebb2 040a 	subs.w	r4, r2, sl
 8017a60:	eb63 050b 	sbc.w	r5, r3, fp
 8017a64:	f04f 0200 	mov.w	r2, #0
 8017a68:	f04f 0300 	mov.w	r3, #0
 8017a6c:	00eb      	lsls	r3, r5, #3
 8017a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8017a72:	00e2      	lsls	r2, r4, #3
 8017a74:	4614      	mov	r4, r2
 8017a76:	461d      	mov	r5, r3
 8017a78:	4643      	mov	r3, r8
 8017a7a:	18e3      	adds	r3, r4, r3
 8017a7c:	603b      	str	r3, [r7, #0]
 8017a7e:	464b      	mov	r3, r9
 8017a80:	eb45 0303 	adc.w	r3, r5, r3
 8017a84:	607b      	str	r3, [r7, #4]
 8017a86:	f04f 0200 	mov.w	r2, #0
 8017a8a:	f04f 0300 	mov.w	r3, #0
 8017a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8017a92:	4629      	mov	r1, r5
 8017a94:	028b      	lsls	r3, r1, #10
 8017a96:	4621      	mov	r1, r4
 8017a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8017a9c:	4621      	mov	r1, r4
 8017a9e:	028a      	lsls	r2, r1, #10
 8017aa0:	4610      	mov	r0, r2
 8017aa2:	4619      	mov	r1, r3
 8017aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017aa6:	2200      	movs	r2, #0
 8017aa8:	61bb      	str	r3, [r7, #24]
 8017aaa:	61fa      	str	r2, [r7, #28]
 8017aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017ab0:	f7f9 f952 	bl	8010d58 <__aeabi_uldivmod>
 8017ab4:	4602      	mov	r2, r0
 8017ab6:	460b      	mov	r3, r1
 8017ab8:	4613      	mov	r3, r2
 8017aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8017abc:	4b0b      	ldr	r3, [pc, #44]	@ (8017aec <HAL_RCC_GetSysClockFreq+0x200>)
 8017abe:	685b      	ldr	r3, [r3, #4]
 8017ac0:	0c1b      	lsrs	r3, r3, #16
 8017ac2:	f003 0303 	and.w	r3, r3, #3
 8017ac6:	3301      	adds	r3, #1
 8017ac8:	005b      	lsls	r3, r3, #1
 8017aca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8017acc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8017ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8017ad6:	e002      	b.n	8017ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8017ad8:	4b05      	ldr	r3, [pc, #20]	@ (8017af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8017ada:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8017adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8017ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	3750      	adds	r7, #80	@ 0x50
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8017aea:	bf00      	nop
 8017aec:	40023800 	.word	0x40023800
 8017af0:	00f42400 	.word	0x00f42400
 8017af4:	007a1200 	.word	0x007a1200

08017af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017af8:	b480      	push	{r7}
 8017afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8017afc:	4b03      	ldr	r3, [pc, #12]	@ (8017b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8017afe:	681b      	ldr	r3, [r3, #0]
}
 8017b00:	4618      	mov	r0, r3
 8017b02:	46bd      	mov	sp, r7
 8017b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b08:	4770      	bx	lr
 8017b0a:	bf00      	nop
 8017b0c:	20000018 	.word	0x20000018

08017b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8017b14:	f7ff fff0 	bl	8017af8 <HAL_RCC_GetHCLKFreq>
 8017b18:	4602      	mov	r2, r0
 8017b1a:	4b05      	ldr	r3, [pc, #20]	@ (8017b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8017b1c:	689b      	ldr	r3, [r3, #8]
 8017b1e:	0a9b      	lsrs	r3, r3, #10
 8017b20:	f003 0307 	and.w	r3, r3, #7
 8017b24:	4903      	ldr	r1, [pc, #12]	@ (8017b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8017b26:	5ccb      	ldrb	r3, [r1, r3]
 8017b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	bd80      	pop	{r7, pc}
 8017b30:	40023800 	.word	0x40023800
 8017b34:	08043c04 	.word	0x08043c04

08017b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8017b3c:	f7ff ffdc 	bl	8017af8 <HAL_RCC_GetHCLKFreq>
 8017b40:	4602      	mov	r2, r0
 8017b42:	4b05      	ldr	r3, [pc, #20]	@ (8017b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8017b44:	689b      	ldr	r3, [r3, #8]
 8017b46:	0b5b      	lsrs	r3, r3, #13
 8017b48:	f003 0307 	and.w	r3, r3, #7
 8017b4c:	4903      	ldr	r1, [pc, #12]	@ (8017b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8017b4e:	5ccb      	ldrb	r3, [r1, r3]
 8017b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017b54:	4618      	mov	r0, r3
 8017b56:	bd80      	pop	{r7, pc}
 8017b58:	40023800 	.word	0x40023800
 8017b5c:	08043c04 	.word	0x08043c04

08017b60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8017b60:	b480      	push	{r7}
 8017b62:	b083      	sub	sp, #12
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
 8017b68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	220f      	movs	r2, #15
 8017b6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8017b70:	4b12      	ldr	r3, [pc, #72]	@ (8017bbc <HAL_RCC_GetClockConfig+0x5c>)
 8017b72:	689b      	ldr	r3, [r3, #8]
 8017b74:	f003 0203 	and.w	r2, r3, #3
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8017b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8017bbc <HAL_RCC_GetClockConfig+0x5c>)
 8017b7e:	689b      	ldr	r3, [r3, #8]
 8017b80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8017b88:	4b0c      	ldr	r3, [pc, #48]	@ (8017bbc <HAL_RCC_GetClockConfig+0x5c>)
 8017b8a:	689b      	ldr	r3, [r3, #8]
 8017b8c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8017b94:	4b09      	ldr	r3, [pc, #36]	@ (8017bbc <HAL_RCC_GetClockConfig+0x5c>)
 8017b96:	689b      	ldr	r3, [r3, #8]
 8017b98:	08db      	lsrs	r3, r3, #3
 8017b9a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8017ba2:	4b07      	ldr	r3, [pc, #28]	@ (8017bc0 <HAL_RCC_GetClockConfig+0x60>)
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	f003 0207 	and.w	r2, r3, #7
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	601a      	str	r2, [r3, #0]
}
 8017bae:	bf00      	nop
 8017bb0:	370c      	adds	r7, #12
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb8:	4770      	bx	lr
 8017bba:	bf00      	nop
 8017bbc:	40023800 	.word	0x40023800
 8017bc0:	40023c00 	.word	0x40023c00

08017bc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b082      	sub	sp, #8
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d101      	bne.n	8017bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8017bd2:	2301      	movs	r3, #1
 8017bd4:	e07b      	b.n	8017cce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d108      	bne.n	8017bf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	685b      	ldr	r3, [r3, #4]
 8017be2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017be6:	d009      	beq.n	8017bfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	2200      	movs	r2, #0
 8017bec:	61da      	str	r2, [r3, #28]
 8017bee:	e005      	b.n	8017bfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	2200      	movs	r2, #0
 8017c00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017c08:	b2db      	uxtb	r3, r3
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d106      	bne.n	8017c1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	2200      	movs	r2, #0
 8017c12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f7fa fcf2 	bl	8012600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	2202      	movs	r2, #2
 8017c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	681a      	ldr	r2, [r3, #0]
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8017c32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	685b      	ldr	r3, [r3, #4]
 8017c38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	689b      	ldr	r3, [r3, #8]
 8017c40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8017c44:	431a      	orrs	r2, r3
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	68db      	ldr	r3, [r3, #12]
 8017c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017c4e:	431a      	orrs	r2, r3
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	691b      	ldr	r3, [r3, #16]
 8017c54:	f003 0302 	and.w	r3, r3, #2
 8017c58:	431a      	orrs	r2, r3
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	695b      	ldr	r3, [r3, #20]
 8017c5e:	f003 0301 	and.w	r3, r3, #1
 8017c62:	431a      	orrs	r2, r3
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	699b      	ldr	r3, [r3, #24]
 8017c68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017c6c:	431a      	orrs	r2, r3
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	69db      	ldr	r3, [r3, #28]
 8017c72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8017c76:	431a      	orrs	r2, r3
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	6a1b      	ldr	r3, [r3, #32]
 8017c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017c80:	ea42 0103 	orr.w	r1, r2, r3
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	430a      	orrs	r2, r1
 8017c92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	699b      	ldr	r3, [r3, #24]
 8017c98:	0c1b      	lsrs	r3, r3, #16
 8017c9a:	f003 0104 	and.w	r1, r3, #4
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ca2:	f003 0210 	and.w	r2, r3, #16
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	430a      	orrs	r2, r1
 8017cac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	69da      	ldr	r2, [r3, #28]
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8017cbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	2201      	movs	r2, #1
 8017cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8017ccc:	2300      	movs	r3, #0
}
 8017cce:	4618      	mov	r0, r3
 8017cd0:	3708      	adds	r7, #8
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd80      	pop	{r7, pc}

08017cd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017cd6:	b580      	push	{r7, lr}
 8017cd8:	b088      	sub	sp, #32
 8017cda:	af00      	add	r7, sp, #0
 8017cdc:	60f8      	str	r0, [r7, #12]
 8017cde:	60b9      	str	r1, [r7, #8]
 8017ce0:	603b      	str	r3, [r7, #0]
 8017ce2:	4613      	mov	r3, r2
 8017ce4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8017ce6:	f7fe f8df 	bl	8015ea8 <HAL_GetTick>
 8017cea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8017cec:	88fb      	ldrh	r3, [r7, #6]
 8017cee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017cf6:	b2db      	uxtb	r3, r3
 8017cf8:	2b01      	cmp	r3, #1
 8017cfa:	d001      	beq.n	8017d00 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8017cfc:	2302      	movs	r3, #2
 8017cfe:	e12a      	b.n	8017f56 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8017d00:	68bb      	ldr	r3, [r7, #8]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d002      	beq.n	8017d0c <HAL_SPI_Transmit+0x36>
 8017d06:	88fb      	ldrh	r3, [r7, #6]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d101      	bne.n	8017d10 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8017d0c:	2301      	movs	r3, #1
 8017d0e:	e122      	b.n	8017f56 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017d16:	2b01      	cmp	r3, #1
 8017d18:	d101      	bne.n	8017d1e <HAL_SPI_Transmit+0x48>
 8017d1a:	2302      	movs	r3, #2
 8017d1c:	e11b      	b.n	8017f56 <HAL_SPI_Transmit+0x280>
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	2201      	movs	r2, #1
 8017d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	2203      	movs	r2, #3
 8017d2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	2200      	movs	r2, #0
 8017d32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	68ba      	ldr	r2, [r7, #8]
 8017d38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	88fa      	ldrh	r2, [r7, #6]
 8017d3e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	88fa      	ldrh	r2, [r7, #6]
 8017d44:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	2200      	movs	r2, #0
 8017d4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	2200      	movs	r2, #0
 8017d50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	2200      	movs	r2, #0
 8017d56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	2200      	movs	r2, #0
 8017d62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	689b      	ldr	r3, [r3, #8]
 8017d68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017d6c:	d10f      	bne.n	8017d8e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	681a      	ldr	r2, [r3, #0]
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8017d7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	681a      	ldr	r2, [r3, #0]
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8017d8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017d98:	2b40      	cmp	r3, #64	@ 0x40
 8017d9a:	d007      	beq.n	8017dac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	681a      	ldr	r2, [r3, #0]
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017daa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8017dac:	68fb      	ldr	r3, [r7, #12]
 8017dae:	68db      	ldr	r3, [r3, #12]
 8017db0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017db4:	d152      	bne.n	8017e5c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	685b      	ldr	r3, [r3, #4]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d002      	beq.n	8017dc4 <HAL_SPI_Transmit+0xee>
 8017dbe:	8b7b      	ldrh	r3, [r7, #26]
 8017dc0:	2b01      	cmp	r3, #1
 8017dc2:	d145      	bne.n	8017e50 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017dc8:	881a      	ldrh	r2, [r3, #0]
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017dd4:	1c9a      	adds	r2, r3, #2
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017dde:	b29b      	uxth	r3, r3
 8017de0:	3b01      	subs	r3, #1
 8017de2:	b29a      	uxth	r2, r3
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8017de8:	e032      	b.n	8017e50 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	689b      	ldr	r3, [r3, #8]
 8017df0:	f003 0302 	and.w	r3, r3, #2
 8017df4:	2b02      	cmp	r3, #2
 8017df6:	d112      	bne.n	8017e1e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017dfc:	881a      	ldrh	r2, [r3, #0]
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e08:	1c9a      	adds	r2, r3, #2
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017e12:	b29b      	uxth	r3, r3
 8017e14:	3b01      	subs	r3, #1
 8017e16:	b29a      	uxth	r2, r3
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8017e1c:	e018      	b.n	8017e50 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017e1e:	f7fe f843 	bl	8015ea8 <HAL_GetTick>
 8017e22:	4602      	mov	r2, r0
 8017e24:	69fb      	ldr	r3, [r7, #28]
 8017e26:	1ad3      	subs	r3, r2, r3
 8017e28:	683a      	ldr	r2, [r7, #0]
 8017e2a:	429a      	cmp	r2, r3
 8017e2c:	d803      	bhi.n	8017e36 <HAL_SPI_Transmit+0x160>
 8017e2e:	683b      	ldr	r3, [r7, #0]
 8017e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017e34:	d102      	bne.n	8017e3c <HAL_SPI_Transmit+0x166>
 8017e36:	683b      	ldr	r3, [r7, #0]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d109      	bne.n	8017e50 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	2201      	movs	r2, #1
 8017e40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	2200      	movs	r2, #0
 8017e48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017e4c:	2303      	movs	r3, #3
 8017e4e:	e082      	b.n	8017f56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017e54:	b29b      	uxth	r3, r3
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d1c7      	bne.n	8017dea <HAL_SPI_Transmit+0x114>
 8017e5a:	e053      	b.n	8017f04 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	685b      	ldr	r3, [r3, #4]
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d002      	beq.n	8017e6a <HAL_SPI_Transmit+0x194>
 8017e64:	8b7b      	ldrh	r3, [r7, #26]
 8017e66:	2b01      	cmp	r3, #1
 8017e68:	d147      	bne.n	8017efa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	330c      	adds	r3, #12
 8017e74:	7812      	ldrb	r2, [r2, #0]
 8017e76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e7c:	1c5a      	adds	r2, r3, #1
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017e86:	b29b      	uxth	r3, r3
 8017e88:	3b01      	subs	r3, #1
 8017e8a:	b29a      	uxth	r2, r3
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8017e90:	e033      	b.n	8017efa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	689b      	ldr	r3, [r3, #8]
 8017e98:	f003 0302 	and.w	r3, r3, #2
 8017e9c:	2b02      	cmp	r3, #2
 8017e9e:	d113      	bne.n	8017ec8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	330c      	adds	r3, #12
 8017eaa:	7812      	ldrb	r2, [r2, #0]
 8017eac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017eb2:	1c5a      	adds	r2, r3, #1
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017ebc:	b29b      	uxth	r3, r3
 8017ebe:	3b01      	subs	r3, #1
 8017ec0:	b29a      	uxth	r2, r3
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8017ec6:	e018      	b.n	8017efa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017ec8:	f7fd ffee 	bl	8015ea8 <HAL_GetTick>
 8017ecc:	4602      	mov	r2, r0
 8017ece:	69fb      	ldr	r3, [r7, #28]
 8017ed0:	1ad3      	subs	r3, r2, r3
 8017ed2:	683a      	ldr	r2, [r7, #0]
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d803      	bhi.n	8017ee0 <HAL_SPI_Transmit+0x20a>
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017ede:	d102      	bne.n	8017ee6 <HAL_SPI_Transmit+0x210>
 8017ee0:	683b      	ldr	r3, [r7, #0]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d109      	bne.n	8017efa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	2201      	movs	r2, #1
 8017eea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017ef6:	2303      	movs	r3, #3
 8017ef8:	e02d      	b.n	8017f56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017efe:	b29b      	uxth	r3, r3
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d1c6      	bne.n	8017e92 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017f04:	69fa      	ldr	r2, [r7, #28]
 8017f06:	6839      	ldr	r1, [r7, #0]
 8017f08:	68f8      	ldr	r0, [r7, #12]
 8017f0a:	f000 fbd9 	bl	80186c0 <SPI_EndRxTxTransaction>
 8017f0e:	4603      	mov	r3, r0
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d002      	beq.n	8017f1a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	2220      	movs	r2, #32
 8017f18:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	689b      	ldr	r3, [r3, #8]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d10a      	bne.n	8017f38 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8017f22:	2300      	movs	r3, #0
 8017f24:	617b      	str	r3, [r7, #20]
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	68db      	ldr	r3, [r3, #12]
 8017f2c:	617b      	str	r3, [r7, #20]
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	689b      	ldr	r3, [r3, #8]
 8017f34:	617b      	str	r3, [r7, #20]
 8017f36:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	2201      	movs	r2, #1
 8017f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	2200      	movs	r2, #0
 8017f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d001      	beq.n	8017f54 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8017f50:	2301      	movs	r3, #1
 8017f52:	e000      	b.n	8017f56 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8017f54:	2300      	movs	r3, #0
  }
}
 8017f56:	4618      	mov	r0, r3
 8017f58:	3720      	adds	r7, #32
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	bd80      	pop	{r7, pc}

08017f5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017f5e:	b580      	push	{r7, lr}
 8017f60:	b088      	sub	sp, #32
 8017f62:	af02      	add	r7, sp, #8
 8017f64:	60f8      	str	r0, [r7, #12]
 8017f66:	60b9      	str	r1, [r7, #8]
 8017f68:	603b      	str	r3, [r7, #0]
 8017f6a:	4613      	mov	r3, r2
 8017f6c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017f74:	b2db      	uxtb	r3, r3
 8017f76:	2b01      	cmp	r3, #1
 8017f78:	d001      	beq.n	8017f7e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8017f7a:	2302      	movs	r3, #2
 8017f7c:	e104      	b.n	8018188 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	685b      	ldr	r3, [r3, #4]
 8017f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017f86:	d112      	bne.n	8017fae <HAL_SPI_Receive+0x50>
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	689b      	ldr	r3, [r3, #8]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d10e      	bne.n	8017fae <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	2204      	movs	r2, #4
 8017f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8017f98:	88fa      	ldrh	r2, [r7, #6]
 8017f9a:	683b      	ldr	r3, [r7, #0]
 8017f9c:	9300      	str	r3, [sp, #0]
 8017f9e:	4613      	mov	r3, r2
 8017fa0:	68ba      	ldr	r2, [r7, #8]
 8017fa2:	68b9      	ldr	r1, [r7, #8]
 8017fa4:	68f8      	ldr	r0, [r7, #12]
 8017fa6:	f000 f8f3 	bl	8018190 <HAL_SPI_TransmitReceive>
 8017faa:	4603      	mov	r3, r0
 8017fac:	e0ec      	b.n	8018188 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8017fae:	f7fd ff7b 	bl	8015ea8 <HAL_GetTick>
 8017fb2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8017fb4:	68bb      	ldr	r3, [r7, #8]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d002      	beq.n	8017fc0 <HAL_SPI_Receive+0x62>
 8017fba:	88fb      	ldrh	r3, [r7, #6]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d101      	bne.n	8017fc4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8017fc0:	2301      	movs	r3, #1
 8017fc2:	e0e1      	b.n	8018188 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017fca:	2b01      	cmp	r3, #1
 8017fcc:	d101      	bne.n	8017fd2 <HAL_SPI_Receive+0x74>
 8017fce:	2302      	movs	r3, #2
 8017fd0:	e0da      	b.n	8018188 <HAL_SPI_Receive+0x22a>
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	2201      	movs	r2, #1
 8017fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	2204      	movs	r2, #4
 8017fde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	68ba      	ldr	r2, [r7, #8]
 8017fec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	88fa      	ldrh	r2, [r7, #6]
 8017ff2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	88fa      	ldrh	r2, [r7, #6]
 8017ff8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	2200      	movs	r2, #0
 8017ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	2200      	movs	r2, #0
 8018004:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	2200      	movs	r2, #0
 801800a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	2200      	movs	r2, #0
 8018010:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	2200      	movs	r2, #0
 8018016:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	689b      	ldr	r3, [r3, #8]
 801801c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018020:	d10f      	bne.n	8018042 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	681a      	ldr	r2, [r3, #0]
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8018030:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	681a      	ldr	r2, [r3, #0]
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8018040:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801804c:	2b40      	cmp	r3, #64	@ 0x40
 801804e:	d007      	beq.n	8018060 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	681a      	ldr	r2, [r3, #0]
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801805e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	68db      	ldr	r3, [r3, #12]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d170      	bne.n	801814a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8018068:	e035      	b.n	80180d6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	689b      	ldr	r3, [r3, #8]
 8018070:	f003 0301 	and.w	r3, r3, #1
 8018074:	2b01      	cmp	r3, #1
 8018076:	d115      	bne.n	80180a4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	f103 020c 	add.w	r2, r3, #12
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018084:	7812      	ldrb	r2, [r2, #0]
 8018086:	b2d2      	uxtb	r2, r2
 8018088:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801808e:	1c5a      	adds	r2, r3, #1
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018098:	b29b      	uxth	r3, r3
 801809a:	3b01      	subs	r3, #1
 801809c:	b29a      	uxth	r2, r3
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80180a2:	e018      	b.n	80180d6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80180a4:	f7fd ff00 	bl	8015ea8 <HAL_GetTick>
 80180a8:	4602      	mov	r2, r0
 80180aa:	697b      	ldr	r3, [r7, #20]
 80180ac:	1ad3      	subs	r3, r2, r3
 80180ae:	683a      	ldr	r2, [r7, #0]
 80180b0:	429a      	cmp	r2, r3
 80180b2:	d803      	bhi.n	80180bc <HAL_SPI_Receive+0x15e>
 80180b4:	683b      	ldr	r3, [r7, #0]
 80180b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80180ba:	d102      	bne.n	80180c2 <HAL_SPI_Receive+0x164>
 80180bc:	683b      	ldr	r3, [r7, #0]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d109      	bne.n	80180d6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	2201      	movs	r2, #1
 80180c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	2200      	movs	r2, #0
 80180ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80180d2:	2303      	movs	r3, #3
 80180d4:	e058      	b.n	8018188 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80180da:	b29b      	uxth	r3, r3
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d1c4      	bne.n	801806a <HAL_SPI_Receive+0x10c>
 80180e0:	e038      	b.n	8018154 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	689b      	ldr	r3, [r3, #8]
 80180e8:	f003 0301 	and.w	r3, r3, #1
 80180ec:	2b01      	cmp	r3, #1
 80180ee:	d113      	bne.n	8018118 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	68da      	ldr	r2, [r3, #12]
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80180fa:	b292      	uxth	r2, r2
 80180fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018102:	1c9a      	adds	r2, r3, #2
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801810c:	b29b      	uxth	r3, r3
 801810e:	3b01      	subs	r3, #1
 8018110:	b29a      	uxth	r2, r3
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8018116:	e018      	b.n	801814a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018118:	f7fd fec6 	bl	8015ea8 <HAL_GetTick>
 801811c:	4602      	mov	r2, r0
 801811e:	697b      	ldr	r3, [r7, #20]
 8018120:	1ad3      	subs	r3, r2, r3
 8018122:	683a      	ldr	r2, [r7, #0]
 8018124:	429a      	cmp	r2, r3
 8018126:	d803      	bhi.n	8018130 <HAL_SPI_Receive+0x1d2>
 8018128:	683b      	ldr	r3, [r7, #0]
 801812a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801812e:	d102      	bne.n	8018136 <HAL_SPI_Receive+0x1d8>
 8018130:	683b      	ldr	r3, [r7, #0]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d109      	bne.n	801814a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	2201      	movs	r2, #1
 801813a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	2200      	movs	r2, #0
 8018142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8018146:	2303      	movs	r3, #3
 8018148:	e01e      	b.n	8018188 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801814e:	b29b      	uxth	r3, r3
 8018150:	2b00      	cmp	r3, #0
 8018152:	d1c6      	bne.n	80180e2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8018154:	697a      	ldr	r2, [r7, #20]
 8018156:	6839      	ldr	r1, [r7, #0]
 8018158:	68f8      	ldr	r0, [r7, #12]
 801815a:	f000 fa4b 	bl	80185f4 <SPI_EndRxTransaction>
 801815e:	4603      	mov	r3, r0
 8018160:	2b00      	cmp	r3, #0
 8018162:	d002      	beq.n	801816a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	2220      	movs	r2, #32
 8018168:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	2201      	movs	r2, #1
 801816e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	2200      	movs	r2, #0
 8018176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801817e:	2b00      	cmp	r3, #0
 8018180:	d001      	beq.n	8018186 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8018182:	2301      	movs	r3, #1
 8018184:	e000      	b.n	8018188 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8018186:	2300      	movs	r3, #0
  }
}
 8018188:	4618      	mov	r0, r3
 801818a:	3718      	adds	r7, #24
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}

08018190 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b08a      	sub	sp, #40	@ 0x28
 8018194:	af00      	add	r7, sp, #0
 8018196:	60f8      	str	r0, [r7, #12]
 8018198:	60b9      	str	r1, [r7, #8]
 801819a:	607a      	str	r2, [r7, #4]
 801819c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801819e:	2301      	movs	r3, #1
 80181a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80181a2:	f7fd fe81 	bl	8015ea8 <HAL_GetTick>
 80181a6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80181ae:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	685b      	ldr	r3, [r3, #4]
 80181b4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80181b6:	887b      	ldrh	r3, [r7, #2]
 80181b8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80181ba:	7ffb      	ldrb	r3, [r7, #31]
 80181bc:	2b01      	cmp	r3, #1
 80181be:	d00c      	beq.n	80181da <HAL_SPI_TransmitReceive+0x4a>
 80181c0:	69bb      	ldr	r3, [r7, #24]
 80181c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80181c6:	d106      	bne.n	80181d6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	689b      	ldr	r3, [r3, #8]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d102      	bne.n	80181d6 <HAL_SPI_TransmitReceive+0x46>
 80181d0:	7ffb      	ldrb	r3, [r7, #31]
 80181d2:	2b04      	cmp	r3, #4
 80181d4:	d001      	beq.n	80181da <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80181d6:	2302      	movs	r3, #2
 80181d8:	e17f      	b.n	80184da <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80181da:	68bb      	ldr	r3, [r7, #8]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d005      	beq.n	80181ec <HAL_SPI_TransmitReceive+0x5c>
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d002      	beq.n	80181ec <HAL_SPI_TransmitReceive+0x5c>
 80181e6:	887b      	ldrh	r3, [r7, #2]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d101      	bne.n	80181f0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80181ec:	2301      	movs	r3, #1
 80181ee:	e174      	b.n	80184da <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80181f6:	2b01      	cmp	r3, #1
 80181f8:	d101      	bne.n	80181fe <HAL_SPI_TransmitReceive+0x6e>
 80181fa:	2302      	movs	r3, #2
 80181fc:	e16d      	b.n	80184da <HAL_SPI_TransmitReceive+0x34a>
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	2201      	movs	r2, #1
 8018202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801820c:	b2db      	uxtb	r3, r3
 801820e:	2b04      	cmp	r3, #4
 8018210:	d003      	beq.n	801821a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	2205      	movs	r2, #5
 8018216:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	2200      	movs	r2, #0
 801821e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	687a      	ldr	r2, [r7, #4]
 8018224:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	887a      	ldrh	r2, [r7, #2]
 801822a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	887a      	ldrh	r2, [r7, #2]
 8018230:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	68ba      	ldr	r2, [r7, #8]
 8018236:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	887a      	ldrh	r2, [r7, #2]
 801823c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 801823e:	68fb      	ldr	r3, [r7, #12]
 8018240:	887a      	ldrh	r2, [r7, #2]
 8018242:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	2200      	movs	r2, #0
 8018248:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	2200      	movs	r2, #0
 801824e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801825a:	2b40      	cmp	r3, #64	@ 0x40
 801825c:	d007      	beq.n	801826e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	681a      	ldr	r2, [r3, #0]
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801826c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	68db      	ldr	r3, [r3, #12]
 8018272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018276:	d17e      	bne.n	8018376 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	685b      	ldr	r3, [r3, #4]
 801827c:	2b00      	cmp	r3, #0
 801827e:	d002      	beq.n	8018286 <HAL_SPI_TransmitReceive+0xf6>
 8018280:	8afb      	ldrh	r3, [r7, #22]
 8018282:	2b01      	cmp	r3, #1
 8018284:	d16c      	bne.n	8018360 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801828a:	881a      	ldrh	r2, [r3, #0]
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8018292:	68fb      	ldr	r3, [r7, #12]
 8018294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018296:	1c9a      	adds	r2, r3, #2
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80182a0:	b29b      	uxth	r3, r3
 80182a2:	3b01      	subs	r3, #1
 80182a4:	b29a      	uxth	r2, r3
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80182aa:	e059      	b.n	8018360 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	689b      	ldr	r3, [r3, #8]
 80182b2:	f003 0302 	and.w	r3, r3, #2
 80182b6:	2b02      	cmp	r3, #2
 80182b8:	d11b      	bne.n	80182f2 <HAL_SPI_TransmitReceive+0x162>
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80182be:	b29b      	uxth	r3, r3
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d016      	beq.n	80182f2 <HAL_SPI_TransmitReceive+0x162>
 80182c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182c6:	2b01      	cmp	r3, #1
 80182c8:	d113      	bne.n	80182f2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80182ce:	881a      	ldrh	r2, [r3, #0]
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80182da:	1c9a      	adds	r2, r3, #2
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80182e4:	b29b      	uxth	r3, r3
 80182e6:	3b01      	subs	r3, #1
 80182e8:	b29a      	uxth	r2, r3
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80182ee:	2300      	movs	r3, #0
 80182f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	689b      	ldr	r3, [r3, #8]
 80182f8:	f003 0301 	and.w	r3, r3, #1
 80182fc:	2b01      	cmp	r3, #1
 80182fe:	d119      	bne.n	8018334 <HAL_SPI_TransmitReceive+0x1a4>
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018304:	b29b      	uxth	r3, r3
 8018306:	2b00      	cmp	r3, #0
 8018308:	d014      	beq.n	8018334 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	68da      	ldr	r2, [r3, #12]
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018314:	b292      	uxth	r2, r2
 8018316:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801831c:	1c9a      	adds	r2, r3, #2
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018326:	b29b      	uxth	r3, r3
 8018328:	3b01      	subs	r3, #1
 801832a:	b29a      	uxth	r2, r3
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8018330:	2301      	movs	r3, #1
 8018332:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8018334:	f7fd fdb8 	bl	8015ea8 <HAL_GetTick>
 8018338:	4602      	mov	r2, r0
 801833a:	6a3b      	ldr	r3, [r7, #32]
 801833c:	1ad3      	subs	r3, r2, r3
 801833e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018340:	429a      	cmp	r2, r3
 8018342:	d80d      	bhi.n	8018360 <HAL_SPI_TransmitReceive+0x1d0>
 8018344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801834a:	d009      	beq.n	8018360 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	2201      	movs	r2, #1
 8018350:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	2200      	movs	r2, #0
 8018358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 801835c:	2303      	movs	r3, #3
 801835e:	e0bc      	b.n	80184da <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8018364:	b29b      	uxth	r3, r3
 8018366:	2b00      	cmp	r3, #0
 8018368:	d1a0      	bne.n	80182ac <HAL_SPI_TransmitReceive+0x11c>
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801836e:	b29b      	uxth	r3, r3
 8018370:	2b00      	cmp	r3, #0
 8018372:	d19b      	bne.n	80182ac <HAL_SPI_TransmitReceive+0x11c>
 8018374:	e082      	b.n	801847c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	685b      	ldr	r3, [r3, #4]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d002      	beq.n	8018384 <HAL_SPI_TransmitReceive+0x1f4>
 801837e:	8afb      	ldrh	r3, [r7, #22]
 8018380:	2b01      	cmp	r3, #1
 8018382:	d171      	bne.n	8018468 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	330c      	adds	r3, #12
 801838e:	7812      	ldrb	r2, [r2, #0]
 8018390:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018396:	1c5a      	adds	r2, r3, #1
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80183a0:	b29b      	uxth	r3, r3
 80183a2:	3b01      	subs	r3, #1
 80183a4:	b29a      	uxth	r2, r3
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80183aa:	e05d      	b.n	8018468 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	689b      	ldr	r3, [r3, #8]
 80183b2:	f003 0302 	and.w	r3, r3, #2
 80183b6:	2b02      	cmp	r3, #2
 80183b8:	d11c      	bne.n	80183f4 <HAL_SPI_TransmitReceive+0x264>
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80183be:	b29b      	uxth	r3, r3
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d017      	beq.n	80183f4 <HAL_SPI_TransmitReceive+0x264>
 80183c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183c6:	2b01      	cmp	r3, #1
 80183c8:	d114      	bne.n	80183f4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	330c      	adds	r3, #12
 80183d4:	7812      	ldrb	r2, [r2, #0]
 80183d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80183dc:	1c5a      	adds	r2, r3, #1
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80183e6:	b29b      	uxth	r3, r3
 80183e8:	3b01      	subs	r3, #1
 80183ea:	b29a      	uxth	r2, r3
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80183f0:	2300      	movs	r3, #0
 80183f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	689b      	ldr	r3, [r3, #8]
 80183fa:	f003 0301 	and.w	r3, r3, #1
 80183fe:	2b01      	cmp	r3, #1
 8018400:	d119      	bne.n	8018436 <HAL_SPI_TransmitReceive+0x2a6>
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018406:	b29b      	uxth	r3, r3
 8018408:	2b00      	cmp	r3, #0
 801840a:	d014      	beq.n	8018436 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	68da      	ldr	r2, [r3, #12]
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018416:	b2d2      	uxtb	r2, r2
 8018418:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801841e:	1c5a      	adds	r2, r3, #1
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018428:	b29b      	uxth	r3, r3
 801842a:	3b01      	subs	r3, #1
 801842c:	b29a      	uxth	r2, r3
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8018432:	2301      	movs	r3, #1
 8018434:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8018436:	f7fd fd37 	bl	8015ea8 <HAL_GetTick>
 801843a:	4602      	mov	r2, r0
 801843c:	6a3b      	ldr	r3, [r7, #32]
 801843e:	1ad3      	subs	r3, r2, r3
 8018440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018442:	429a      	cmp	r2, r3
 8018444:	d803      	bhi.n	801844e <HAL_SPI_TransmitReceive+0x2be>
 8018446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018448:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801844c:	d102      	bne.n	8018454 <HAL_SPI_TransmitReceive+0x2c4>
 801844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018450:	2b00      	cmp	r3, #0
 8018452:	d109      	bne.n	8018468 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	2201      	movs	r2, #1
 8018458:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	2200      	movs	r2, #0
 8018460:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8018464:	2303      	movs	r3, #3
 8018466:	e038      	b.n	80184da <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801846c:	b29b      	uxth	r3, r3
 801846e:	2b00      	cmp	r3, #0
 8018470:	d19c      	bne.n	80183ac <HAL_SPI_TransmitReceive+0x21c>
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018476:	b29b      	uxth	r3, r3
 8018478:	2b00      	cmp	r3, #0
 801847a:	d197      	bne.n	80183ac <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801847c:	6a3a      	ldr	r2, [r7, #32]
 801847e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018480:	68f8      	ldr	r0, [r7, #12]
 8018482:	f000 f91d 	bl	80186c0 <SPI_EndRxTxTransaction>
 8018486:	4603      	mov	r3, r0
 8018488:	2b00      	cmp	r3, #0
 801848a:	d008      	beq.n	801849e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	2220      	movs	r2, #32
 8018490:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	2200      	movs	r2, #0
 8018496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 801849a:	2301      	movs	r3, #1
 801849c:	e01d      	b.n	80184da <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	689b      	ldr	r3, [r3, #8]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d10a      	bne.n	80184bc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80184a6:	2300      	movs	r3, #0
 80184a8:	613b      	str	r3, [r7, #16]
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	68db      	ldr	r3, [r3, #12]
 80184b0:	613b      	str	r3, [r7, #16]
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	689b      	ldr	r3, [r3, #8]
 80184b8:	613b      	str	r3, [r7, #16]
 80184ba:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	2201      	movs	r2, #1
 80184c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	2200      	movs	r2, #0
 80184c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d001      	beq.n	80184d8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80184d4:	2301      	movs	r3, #1
 80184d6:	e000      	b.n	80184da <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80184d8:	2300      	movs	r3, #0
  }
}
 80184da:	4618      	mov	r0, r3
 80184dc:	3728      	adds	r7, #40	@ 0x28
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}
	...

080184e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80184e4:	b580      	push	{r7, lr}
 80184e6:	b088      	sub	sp, #32
 80184e8:	af00      	add	r7, sp, #0
 80184ea:	60f8      	str	r0, [r7, #12]
 80184ec:	60b9      	str	r1, [r7, #8]
 80184ee:	603b      	str	r3, [r7, #0]
 80184f0:	4613      	mov	r3, r2
 80184f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80184f4:	f7fd fcd8 	bl	8015ea8 <HAL_GetTick>
 80184f8:	4602      	mov	r2, r0
 80184fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184fc:	1a9b      	subs	r3, r3, r2
 80184fe:	683a      	ldr	r2, [r7, #0]
 8018500:	4413      	add	r3, r2
 8018502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8018504:	f7fd fcd0 	bl	8015ea8 <HAL_GetTick>
 8018508:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801850a:	4b39      	ldr	r3, [pc, #228]	@ (80185f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	015b      	lsls	r3, r3, #5
 8018510:	0d1b      	lsrs	r3, r3, #20
 8018512:	69fa      	ldr	r2, [r7, #28]
 8018514:	fb02 f303 	mul.w	r3, r2, r3
 8018518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801851a:	e054      	b.n	80185c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801851c:	683b      	ldr	r3, [r7, #0]
 801851e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018522:	d050      	beq.n	80185c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8018524:	f7fd fcc0 	bl	8015ea8 <HAL_GetTick>
 8018528:	4602      	mov	r2, r0
 801852a:	69bb      	ldr	r3, [r7, #24]
 801852c:	1ad3      	subs	r3, r2, r3
 801852e:	69fa      	ldr	r2, [r7, #28]
 8018530:	429a      	cmp	r2, r3
 8018532:	d902      	bls.n	801853a <SPI_WaitFlagStateUntilTimeout+0x56>
 8018534:	69fb      	ldr	r3, [r7, #28]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d13d      	bne.n	80185b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	685a      	ldr	r2, [r3, #4]
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8018548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	685b      	ldr	r3, [r3, #4]
 801854e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018552:	d111      	bne.n	8018578 <SPI_WaitFlagStateUntilTimeout+0x94>
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	689b      	ldr	r3, [r3, #8]
 8018558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801855c:	d004      	beq.n	8018568 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	689b      	ldr	r3, [r3, #8]
 8018562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018566:	d107      	bne.n	8018578 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	681a      	ldr	r2, [r3, #0]
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8018576:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801857c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018580:	d10f      	bne.n	80185a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	681a      	ldr	r2, [r3, #0]
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8018590:	601a      	str	r2, [r3, #0]
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	681a      	ldr	r2, [r3, #0]
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80185a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	2201      	movs	r2, #1
 80185a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	2200      	movs	r2, #0
 80185ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80185b2:	2303      	movs	r3, #3
 80185b4:	e017      	b.n	80185e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80185b6:	697b      	ldr	r3, [r7, #20]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d101      	bne.n	80185c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80185bc:	2300      	movs	r3, #0
 80185be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80185c0:	697b      	ldr	r3, [r7, #20]
 80185c2:	3b01      	subs	r3, #1
 80185c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	689a      	ldr	r2, [r3, #8]
 80185cc:	68bb      	ldr	r3, [r7, #8]
 80185ce:	4013      	ands	r3, r2
 80185d0:	68ba      	ldr	r2, [r7, #8]
 80185d2:	429a      	cmp	r2, r3
 80185d4:	bf0c      	ite	eq
 80185d6:	2301      	moveq	r3, #1
 80185d8:	2300      	movne	r3, #0
 80185da:	b2db      	uxtb	r3, r3
 80185dc:	461a      	mov	r2, r3
 80185de:	79fb      	ldrb	r3, [r7, #7]
 80185e0:	429a      	cmp	r2, r3
 80185e2:	d19b      	bne.n	801851c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80185e4:	2300      	movs	r3, #0
}
 80185e6:	4618      	mov	r0, r3
 80185e8:	3720      	adds	r7, #32
 80185ea:	46bd      	mov	sp, r7
 80185ec:	bd80      	pop	{r7, pc}
 80185ee:	bf00      	nop
 80185f0:	20000018 	.word	0x20000018

080185f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b086      	sub	sp, #24
 80185f8:	af02      	add	r7, sp, #8
 80185fa:	60f8      	str	r0, [r7, #12]
 80185fc:	60b9      	str	r1, [r7, #8]
 80185fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	685b      	ldr	r3, [r3, #4]
 8018604:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018608:	d111      	bne.n	801862e <SPI_EndRxTransaction+0x3a>
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	689b      	ldr	r3, [r3, #8]
 801860e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018612:	d004      	beq.n	801861e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	689b      	ldr	r3, [r3, #8]
 8018618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801861c:	d107      	bne.n	801862e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	681a      	ldr	r2, [r3, #0]
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801862c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	685b      	ldr	r3, [r3, #4]
 8018632:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018636:	d12a      	bne.n	801868e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	689b      	ldr	r3, [r3, #8]
 801863c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018640:	d012      	beq.n	8018668 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	9300      	str	r3, [sp, #0]
 8018646:	68bb      	ldr	r3, [r7, #8]
 8018648:	2200      	movs	r2, #0
 801864a:	2180      	movs	r1, #128	@ 0x80
 801864c:	68f8      	ldr	r0, [r7, #12]
 801864e:	f7ff ff49 	bl	80184e4 <SPI_WaitFlagStateUntilTimeout>
 8018652:	4603      	mov	r3, r0
 8018654:	2b00      	cmp	r3, #0
 8018656:	d02d      	beq.n	80186b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801865c:	f043 0220 	orr.w	r2, r3, #32
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8018664:	2303      	movs	r3, #3
 8018666:	e026      	b.n	80186b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	9300      	str	r3, [sp, #0]
 801866c:	68bb      	ldr	r3, [r7, #8]
 801866e:	2200      	movs	r2, #0
 8018670:	2101      	movs	r1, #1
 8018672:	68f8      	ldr	r0, [r7, #12]
 8018674:	f7ff ff36 	bl	80184e4 <SPI_WaitFlagStateUntilTimeout>
 8018678:	4603      	mov	r3, r0
 801867a:	2b00      	cmp	r3, #0
 801867c:	d01a      	beq.n	80186b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018682:	f043 0220 	orr.w	r2, r3, #32
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 801868a:	2303      	movs	r3, #3
 801868c:	e013      	b.n	80186b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	9300      	str	r3, [sp, #0]
 8018692:	68bb      	ldr	r3, [r7, #8]
 8018694:	2200      	movs	r2, #0
 8018696:	2101      	movs	r1, #1
 8018698:	68f8      	ldr	r0, [r7, #12]
 801869a:	f7ff ff23 	bl	80184e4 <SPI_WaitFlagStateUntilTimeout>
 801869e:	4603      	mov	r3, r0
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d007      	beq.n	80186b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80186a8:	f043 0220 	orr.w	r2, r3, #32
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80186b0:	2303      	movs	r3, #3
 80186b2:	e000      	b.n	80186b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80186b4:	2300      	movs	r3, #0
}
 80186b6:	4618      	mov	r0, r3
 80186b8:	3710      	adds	r7, #16
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}
	...

080186c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b088      	sub	sp, #32
 80186c4:	af02      	add	r7, sp, #8
 80186c6:	60f8      	str	r0, [r7, #12]
 80186c8:	60b9      	str	r1, [r7, #8]
 80186ca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	9300      	str	r3, [sp, #0]
 80186d0:	68bb      	ldr	r3, [r7, #8]
 80186d2:	2201      	movs	r2, #1
 80186d4:	2102      	movs	r1, #2
 80186d6:	68f8      	ldr	r0, [r7, #12]
 80186d8:	f7ff ff04 	bl	80184e4 <SPI_WaitFlagStateUntilTimeout>
 80186dc:	4603      	mov	r3, r0
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d007      	beq.n	80186f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80186e6:	f043 0220 	orr.w	r2, r3, #32
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80186ee:	2303      	movs	r3, #3
 80186f0:	e032      	b.n	8018758 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80186f2:	4b1b      	ldr	r3, [pc, #108]	@ (8018760 <SPI_EndRxTxTransaction+0xa0>)
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	4a1b      	ldr	r2, [pc, #108]	@ (8018764 <SPI_EndRxTxTransaction+0xa4>)
 80186f8:	fba2 2303 	umull	r2, r3, r2, r3
 80186fc:	0d5b      	lsrs	r3, r3, #21
 80186fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018702:	fb02 f303 	mul.w	r3, r2, r3
 8018706:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	685b      	ldr	r3, [r3, #4]
 801870c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018710:	d112      	bne.n	8018738 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	9300      	str	r3, [sp, #0]
 8018716:	68bb      	ldr	r3, [r7, #8]
 8018718:	2200      	movs	r2, #0
 801871a:	2180      	movs	r1, #128	@ 0x80
 801871c:	68f8      	ldr	r0, [r7, #12]
 801871e:	f7ff fee1 	bl	80184e4 <SPI_WaitFlagStateUntilTimeout>
 8018722:	4603      	mov	r3, r0
 8018724:	2b00      	cmp	r3, #0
 8018726:	d016      	beq.n	8018756 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801872c:	f043 0220 	orr.w	r2, r3, #32
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8018734:	2303      	movs	r3, #3
 8018736:	e00f      	b.n	8018758 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8018738:	697b      	ldr	r3, [r7, #20]
 801873a:	2b00      	cmp	r3, #0
 801873c:	d00a      	beq.n	8018754 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 801873e:	697b      	ldr	r3, [r7, #20]
 8018740:	3b01      	subs	r3, #1
 8018742:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	689b      	ldr	r3, [r3, #8]
 801874a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801874e:	2b80      	cmp	r3, #128	@ 0x80
 8018750:	d0f2      	beq.n	8018738 <SPI_EndRxTxTransaction+0x78>
 8018752:	e000      	b.n	8018756 <SPI_EndRxTxTransaction+0x96>
        break;
 8018754:	bf00      	nop
  }

  return HAL_OK;
 8018756:	2300      	movs	r3, #0
}
 8018758:	4618      	mov	r0, r3
 801875a:	3718      	adds	r7, #24
 801875c:	46bd      	mov	sp, r7
 801875e:	bd80      	pop	{r7, pc}
 8018760:	20000018 	.word	0x20000018
 8018764:	165e9f81 	.word	0x165e9f81

08018768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8018768:	b580      	push	{r7, lr}
 801876a:	b082      	sub	sp, #8
 801876c:	af00      	add	r7, sp, #0
 801876e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d101      	bne.n	801877a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8018776:	2301      	movs	r3, #1
 8018778:	e041      	b.n	80187fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8018780:	b2db      	uxtb	r3, r3
 8018782:	2b00      	cmp	r3, #0
 8018784:	d106      	bne.n	8018794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	2200      	movs	r2, #0
 801878a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801878e:	6878      	ldr	r0, [r7, #4]
 8018790:	f000 f839 	bl	8018806 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	2202      	movs	r2, #2
 8018798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	681a      	ldr	r2, [r3, #0]
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	3304      	adds	r3, #4
 80187a4:	4619      	mov	r1, r3
 80187a6:	4610      	mov	r0, r2
 80187a8:	f000 f9b2 	bl	8018b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	2201      	movs	r2, #1
 80187b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	2201      	movs	r2, #1
 80187b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	2201      	movs	r2, #1
 80187c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	2201      	movs	r2, #1
 80187c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	2201      	movs	r2, #1
 80187d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	2201      	movs	r2, #1
 80187d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	2201      	movs	r2, #1
 80187e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	2201      	movs	r2, #1
 80187e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	2201      	movs	r2, #1
 80187f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	2201      	movs	r2, #1
 80187f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80187fc:	2300      	movs	r3, #0
}
 80187fe:	4618      	mov	r0, r3
 8018800:	3708      	adds	r7, #8
 8018802:	46bd      	mov	sp, r7
 8018804:	bd80      	pop	{r7, pc}

08018806 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8018806:	b480      	push	{r7}
 8018808:	b083      	sub	sp, #12
 801880a:	af00      	add	r7, sp, #0
 801880c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801880e:	bf00      	nop
 8018810:	370c      	adds	r7, #12
 8018812:	46bd      	mov	sp, r7
 8018814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018818:	4770      	bx	lr
	...

0801881c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801881c:	b480      	push	{r7}
 801881e:	b085      	sub	sp, #20
 8018820:	af00      	add	r7, sp, #0
 8018822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801882a:	b2db      	uxtb	r3, r3
 801882c:	2b01      	cmp	r3, #1
 801882e:	d001      	beq.n	8018834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8018830:	2301      	movs	r3, #1
 8018832:	e044      	b.n	80188be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	2202      	movs	r2, #2
 8018838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	68da      	ldr	r2, [r3, #12]
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	f042 0201 	orr.w	r2, r2, #1
 801884a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	4a1e      	ldr	r2, [pc, #120]	@ (80188cc <HAL_TIM_Base_Start_IT+0xb0>)
 8018852:	4293      	cmp	r3, r2
 8018854:	d018      	beq.n	8018888 <HAL_TIM_Base_Start_IT+0x6c>
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801885e:	d013      	beq.n	8018888 <HAL_TIM_Base_Start_IT+0x6c>
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	4a1a      	ldr	r2, [pc, #104]	@ (80188d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8018866:	4293      	cmp	r3, r2
 8018868:	d00e      	beq.n	8018888 <HAL_TIM_Base_Start_IT+0x6c>
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	4a19      	ldr	r2, [pc, #100]	@ (80188d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8018870:	4293      	cmp	r3, r2
 8018872:	d009      	beq.n	8018888 <HAL_TIM_Base_Start_IT+0x6c>
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	4a17      	ldr	r2, [pc, #92]	@ (80188d8 <HAL_TIM_Base_Start_IT+0xbc>)
 801887a:	4293      	cmp	r3, r2
 801887c:	d004      	beq.n	8018888 <HAL_TIM_Base_Start_IT+0x6c>
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	4a16      	ldr	r2, [pc, #88]	@ (80188dc <HAL_TIM_Base_Start_IT+0xc0>)
 8018884:	4293      	cmp	r3, r2
 8018886:	d111      	bne.n	80188ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	689b      	ldr	r3, [r3, #8]
 801888e:	f003 0307 	and.w	r3, r3, #7
 8018892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	2b06      	cmp	r3, #6
 8018898:	d010      	beq.n	80188bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	681a      	ldr	r2, [r3, #0]
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	f042 0201 	orr.w	r2, r2, #1
 80188a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80188aa:	e007      	b.n	80188bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	681a      	ldr	r2, [r3, #0]
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	f042 0201 	orr.w	r2, r2, #1
 80188ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80188bc:	2300      	movs	r3, #0
}
 80188be:	4618      	mov	r0, r3
 80188c0:	3714      	adds	r7, #20
 80188c2:	46bd      	mov	sp, r7
 80188c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c8:	4770      	bx	lr
 80188ca:	bf00      	nop
 80188cc:	40010000 	.word	0x40010000
 80188d0:	40000400 	.word	0x40000400
 80188d4:	40000800 	.word	0x40000800
 80188d8:	40000c00 	.word	0x40000c00
 80188dc:	40014000 	.word	0x40014000

080188e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b084      	sub	sp, #16
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	68db      	ldr	r3, [r3, #12]
 80188ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	691b      	ldr	r3, [r3, #16]
 80188f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80188f8:	68bb      	ldr	r3, [r7, #8]
 80188fa:	f003 0302 	and.w	r3, r3, #2
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d020      	beq.n	8018944 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	f003 0302 	and.w	r3, r3, #2
 8018908:	2b00      	cmp	r3, #0
 801890a:	d01b      	beq.n	8018944 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	f06f 0202 	mvn.w	r2, #2
 8018914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	2201      	movs	r2, #1
 801891a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	699b      	ldr	r3, [r3, #24]
 8018922:	f003 0303 	and.w	r3, r3, #3
 8018926:	2b00      	cmp	r3, #0
 8018928:	d003      	beq.n	8018932 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801892a:	6878      	ldr	r0, [r7, #4]
 801892c:	f000 f8d2 	bl	8018ad4 <HAL_TIM_IC_CaptureCallback>
 8018930:	e005      	b.n	801893e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8018932:	6878      	ldr	r0, [r7, #4]
 8018934:	f000 f8c4 	bl	8018ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018938:	6878      	ldr	r0, [r7, #4]
 801893a:	f000 f8d5 	bl	8018ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	2200      	movs	r2, #0
 8018942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8018944:	68bb      	ldr	r3, [r7, #8]
 8018946:	f003 0304 	and.w	r3, r3, #4
 801894a:	2b00      	cmp	r3, #0
 801894c:	d020      	beq.n	8018990 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	f003 0304 	and.w	r3, r3, #4
 8018954:	2b00      	cmp	r3, #0
 8018956:	d01b      	beq.n	8018990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	f06f 0204 	mvn.w	r2, #4
 8018960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	2202      	movs	r2, #2
 8018966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	699b      	ldr	r3, [r3, #24]
 801896e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8018972:	2b00      	cmp	r3, #0
 8018974:	d003      	beq.n	801897e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018976:	6878      	ldr	r0, [r7, #4]
 8018978:	f000 f8ac 	bl	8018ad4 <HAL_TIM_IC_CaptureCallback>
 801897c:	e005      	b.n	801898a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801897e:	6878      	ldr	r0, [r7, #4]
 8018980:	f000 f89e 	bl	8018ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018984:	6878      	ldr	r0, [r7, #4]
 8018986:	f000 f8af 	bl	8018ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	2200      	movs	r2, #0
 801898e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8018990:	68bb      	ldr	r3, [r7, #8]
 8018992:	f003 0308 	and.w	r3, r3, #8
 8018996:	2b00      	cmp	r3, #0
 8018998:	d020      	beq.n	80189dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	f003 0308 	and.w	r3, r3, #8
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d01b      	beq.n	80189dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	f06f 0208 	mvn.w	r2, #8
 80189ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	2204      	movs	r2, #4
 80189b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	69db      	ldr	r3, [r3, #28]
 80189ba:	f003 0303 	and.w	r3, r3, #3
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d003      	beq.n	80189ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80189c2:	6878      	ldr	r0, [r7, #4]
 80189c4:	f000 f886 	bl	8018ad4 <HAL_TIM_IC_CaptureCallback>
 80189c8:	e005      	b.n	80189d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80189ca:	6878      	ldr	r0, [r7, #4]
 80189cc:	f000 f878 	bl	8018ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80189d0:	6878      	ldr	r0, [r7, #4]
 80189d2:	f000 f889 	bl	8018ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	2200      	movs	r2, #0
 80189da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80189dc:	68bb      	ldr	r3, [r7, #8]
 80189de:	f003 0310 	and.w	r3, r3, #16
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d020      	beq.n	8018a28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	f003 0310 	and.w	r3, r3, #16
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d01b      	beq.n	8018a28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	f06f 0210 	mvn.w	r2, #16
 80189f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	2208      	movs	r2, #8
 80189fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	69db      	ldr	r3, [r3, #28]
 8018a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d003      	beq.n	8018a16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018a0e:	6878      	ldr	r0, [r7, #4]
 8018a10:	f000 f860 	bl	8018ad4 <HAL_TIM_IC_CaptureCallback>
 8018a14:	e005      	b.n	8018a22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018a16:	6878      	ldr	r0, [r7, #4]
 8018a18:	f000 f852 	bl	8018ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018a1c:	6878      	ldr	r0, [r7, #4]
 8018a1e:	f000 f863 	bl	8018ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	2200      	movs	r2, #0
 8018a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8018a28:	68bb      	ldr	r3, [r7, #8]
 8018a2a:	f003 0301 	and.w	r3, r3, #1
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d00c      	beq.n	8018a4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	f003 0301 	and.w	r3, r3, #1
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d007      	beq.n	8018a4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	f06f 0201 	mvn.w	r2, #1
 8018a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8018a46:	6878      	ldr	r0, [r7, #4]
 8018a48:	f7f9 fd56 	bl	80124f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8018a4c:	68bb      	ldr	r3, [r7, #8]
 8018a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d00c      	beq.n	8018a70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d007      	beq.n	8018a70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8018a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8018a6a:	6878      	ldr	r0, [r7, #4]
 8018a6c:	f000 f8e6 	bl	8018c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8018a70:	68bb      	ldr	r3, [r7, #8]
 8018a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d00c      	beq.n	8018a94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d007      	beq.n	8018a94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8018a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8018a8e:	6878      	ldr	r0, [r7, #4]
 8018a90:	f000 f834 	bl	8018afc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8018a94:	68bb      	ldr	r3, [r7, #8]
 8018a96:	f003 0320 	and.w	r3, r3, #32
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d00c      	beq.n	8018ab8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	f003 0320 	and.w	r3, r3, #32
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d007      	beq.n	8018ab8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	f06f 0220 	mvn.w	r2, #32
 8018ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8018ab2:	6878      	ldr	r0, [r7, #4]
 8018ab4:	f000 f8b8 	bl	8018c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8018ab8:	bf00      	nop
 8018aba:	3710      	adds	r7, #16
 8018abc:	46bd      	mov	sp, r7
 8018abe:	bd80      	pop	{r7, pc}

08018ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8018ac0:	b480      	push	{r7}
 8018ac2:	b083      	sub	sp, #12
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8018ac8:	bf00      	nop
 8018aca:	370c      	adds	r7, #12
 8018acc:	46bd      	mov	sp, r7
 8018ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad2:	4770      	bx	lr

08018ad4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8018ad4:	b480      	push	{r7}
 8018ad6:	b083      	sub	sp, #12
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8018adc:	bf00      	nop
 8018ade:	370c      	adds	r7, #12
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae6:	4770      	bx	lr

08018ae8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8018ae8:	b480      	push	{r7}
 8018aea:	b083      	sub	sp, #12
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8018af0:	bf00      	nop
 8018af2:	370c      	adds	r7, #12
 8018af4:	46bd      	mov	sp, r7
 8018af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018afa:	4770      	bx	lr

08018afc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8018afc:	b480      	push	{r7}
 8018afe:	b083      	sub	sp, #12
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8018b04:	bf00      	nop
 8018b06:	370c      	adds	r7, #12
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b0e:	4770      	bx	lr

08018b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8018b10:	b480      	push	{r7}
 8018b12:	b085      	sub	sp, #20
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	6078      	str	r0, [r7, #4]
 8018b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	4a3a      	ldr	r2, [pc, #232]	@ (8018c0c <TIM_Base_SetConfig+0xfc>)
 8018b24:	4293      	cmp	r3, r2
 8018b26:	d00f      	beq.n	8018b48 <TIM_Base_SetConfig+0x38>
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018b2e:	d00b      	beq.n	8018b48 <TIM_Base_SetConfig+0x38>
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	4a37      	ldr	r2, [pc, #220]	@ (8018c10 <TIM_Base_SetConfig+0x100>)
 8018b34:	4293      	cmp	r3, r2
 8018b36:	d007      	beq.n	8018b48 <TIM_Base_SetConfig+0x38>
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	4a36      	ldr	r2, [pc, #216]	@ (8018c14 <TIM_Base_SetConfig+0x104>)
 8018b3c:	4293      	cmp	r3, r2
 8018b3e:	d003      	beq.n	8018b48 <TIM_Base_SetConfig+0x38>
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	4a35      	ldr	r2, [pc, #212]	@ (8018c18 <TIM_Base_SetConfig+0x108>)
 8018b44:	4293      	cmp	r3, r2
 8018b46:	d108      	bne.n	8018b5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8018b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8018b50:	683b      	ldr	r3, [r7, #0]
 8018b52:	685b      	ldr	r3, [r3, #4]
 8018b54:	68fa      	ldr	r2, [r7, #12]
 8018b56:	4313      	orrs	r3, r2
 8018b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8018c0c <TIM_Base_SetConfig+0xfc>)
 8018b5e:	4293      	cmp	r3, r2
 8018b60:	d01b      	beq.n	8018b9a <TIM_Base_SetConfig+0x8a>
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018b68:	d017      	beq.n	8018b9a <TIM_Base_SetConfig+0x8a>
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	4a28      	ldr	r2, [pc, #160]	@ (8018c10 <TIM_Base_SetConfig+0x100>)
 8018b6e:	4293      	cmp	r3, r2
 8018b70:	d013      	beq.n	8018b9a <TIM_Base_SetConfig+0x8a>
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	4a27      	ldr	r2, [pc, #156]	@ (8018c14 <TIM_Base_SetConfig+0x104>)
 8018b76:	4293      	cmp	r3, r2
 8018b78:	d00f      	beq.n	8018b9a <TIM_Base_SetConfig+0x8a>
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	4a26      	ldr	r2, [pc, #152]	@ (8018c18 <TIM_Base_SetConfig+0x108>)
 8018b7e:	4293      	cmp	r3, r2
 8018b80:	d00b      	beq.n	8018b9a <TIM_Base_SetConfig+0x8a>
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	4a25      	ldr	r2, [pc, #148]	@ (8018c1c <TIM_Base_SetConfig+0x10c>)
 8018b86:	4293      	cmp	r3, r2
 8018b88:	d007      	beq.n	8018b9a <TIM_Base_SetConfig+0x8a>
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	4a24      	ldr	r2, [pc, #144]	@ (8018c20 <TIM_Base_SetConfig+0x110>)
 8018b8e:	4293      	cmp	r3, r2
 8018b90:	d003      	beq.n	8018b9a <TIM_Base_SetConfig+0x8a>
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	4a23      	ldr	r2, [pc, #140]	@ (8018c24 <TIM_Base_SetConfig+0x114>)
 8018b96:	4293      	cmp	r3, r2
 8018b98:	d108      	bne.n	8018bac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8018ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8018ba2:	683b      	ldr	r3, [r7, #0]
 8018ba4:	68db      	ldr	r3, [r3, #12]
 8018ba6:	68fa      	ldr	r2, [r7, #12]
 8018ba8:	4313      	orrs	r3, r2
 8018baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8018bb2:	683b      	ldr	r3, [r7, #0]
 8018bb4:	695b      	ldr	r3, [r3, #20]
 8018bb6:	4313      	orrs	r3, r2
 8018bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	68fa      	ldr	r2, [r7, #12]
 8018bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018bc0:	683b      	ldr	r3, [r7, #0]
 8018bc2:	689a      	ldr	r2, [r3, #8]
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018bc8:	683b      	ldr	r3, [r7, #0]
 8018bca:	681a      	ldr	r2, [r3, #0]
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8018c0c <TIM_Base_SetConfig+0xfc>)
 8018bd4:	4293      	cmp	r3, r2
 8018bd6:	d103      	bne.n	8018be0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8018bd8:	683b      	ldr	r3, [r7, #0]
 8018bda:	691a      	ldr	r2, [r3, #16]
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	2201      	movs	r2, #1
 8018be4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	691b      	ldr	r3, [r3, #16]
 8018bea:	f003 0301 	and.w	r3, r3, #1
 8018bee:	2b01      	cmp	r3, #1
 8018bf0:	d105      	bne.n	8018bfe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	691b      	ldr	r3, [r3, #16]
 8018bf6:	f023 0201 	bic.w	r2, r3, #1
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	611a      	str	r2, [r3, #16]
  }
}
 8018bfe:	bf00      	nop
 8018c00:	3714      	adds	r7, #20
 8018c02:	46bd      	mov	sp, r7
 8018c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c08:	4770      	bx	lr
 8018c0a:	bf00      	nop
 8018c0c:	40010000 	.word	0x40010000
 8018c10:	40000400 	.word	0x40000400
 8018c14:	40000800 	.word	0x40000800
 8018c18:	40000c00 	.word	0x40000c00
 8018c1c:	40014000 	.word	0x40014000
 8018c20:	40014400 	.word	0x40014400
 8018c24:	40014800 	.word	0x40014800

08018c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018c28:	b480      	push	{r7}
 8018c2a:	b083      	sub	sp, #12
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018c30:	bf00      	nop
 8018c32:	370c      	adds	r7, #12
 8018c34:	46bd      	mov	sp, r7
 8018c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c3a:	4770      	bx	lr

08018c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018c3c:	b480      	push	{r7}
 8018c3e:	b083      	sub	sp, #12
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018c44:	bf00      	nop
 8018c46:	370c      	adds	r7, #12
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4e:	4770      	bx	lr

08018c50 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b082      	sub	sp, #8
 8018c54:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8018c56:	f000 fa15 	bl	8019084 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8018c5a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8018c5e:	2201      	movs	r2, #1
 8018c60:	2178      	movs	r1, #120	@ 0x78
 8018c62:	4856      	ldr	r0, [pc, #344]	@ (8018dbc <SSD1306_Init+0x16c>)
 8018c64:	f7fd ff5a 	bl	8016b1c <HAL_I2C_IsDeviceReady>
 8018c68:	4603      	mov	r3, r0
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d001      	beq.n	8018c72 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8018c6e:	2300      	movs	r3, #0
 8018c70:	e09f      	b.n	8018db2 <SSD1306_Init+0x162>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8018c72:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8018c76:	607b      	str	r3, [r7, #4]
	while(p>0)
 8018c78:	e002      	b.n	8018c80 <SSD1306_Init+0x30>
		p--;
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	3b01      	subs	r3, #1
 8018c7e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d1f9      	bne.n	8018c7a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8018c86:	22ae      	movs	r2, #174	@ 0xae
 8018c88:	2100      	movs	r1, #0
 8018c8a:	2078      	movs	r0, #120	@ 0x78
 8018c8c:	f000 fa76 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8018c90:	2220      	movs	r2, #32
 8018c92:	2100      	movs	r1, #0
 8018c94:	2078      	movs	r0, #120	@ 0x78
 8018c96:	f000 fa71 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8018c9a:	2210      	movs	r2, #16
 8018c9c:	2100      	movs	r1, #0
 8018c9e:	2078      	movs	r0, #120	@ 0x78
 8018ca0:	f000 fa6c 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8018ca4:	22b0      	movs	r2, #176	@ 0xb0
 8018ca6:	2100      	movs	r1, #0
 8018ca8:	2078      	movs	r0, #120	@ 0x78
 8018caa:	f000 fa67 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8018cae:	22c8      	movs	r2, #200	@ 0xc8
 8018cb0:	2100      	movs	r1, #0
 8018cb2:	2078      	movs	r0, #120	@ 0x78
 8018cb4:	f000 fa62 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8018cb8:	2200      	movs	r2, #0
 8018cba:	2100      	movs	r1, #0
 8018cbc:	2078      	movs	r0, #120	@ 0x78
 8018cbe:	f000 fa5d 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8018cc2:	2210      	movs	r2, #16
 8018cc4:	2100      	movs	r1, #0
 8018cc6:	2078      	movs	r0, #120	@ 0x78
 8018cc8:	f000 fa58 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8018ccc:	2240      	movs	r2, #64	@ 0x40
 8018cce:	2100      	movs	r1, #0
 8018cd0:	2078      	movs	r0, #120	@ 0x78
 8018cd2:	f000 fa53 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8018cd6:	2281      	movs	r2, #129	@ 0x81
 8018cd8:	2100      	movs	r1, #0
 8018cda:	2078      	movs	r0, #120	@ 0x78
 8018cdc:	f000 fa4e 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8018ce0:	22ff      	movs	r2, #255	@ 0xff
 8018ce2:	2100      	movs	r1, #0
 8018ce4:	2078      	movs	r0, #120	@ 0x78
 8018ce6:	f000 fa49 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8018cea:	22a1      	movs	r2, #161	@ 0xa1
 8018cec:	2100      	movs	r1, #0
 8018cee:	2078      	movs	r0, #120	@ 0x78
 8018cf0:	f000 fa44 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8018cf4:	22a6      	movs	r2, #166	@ 0xa6
 8018cf6:	2100      	movs	r1, #0
 8018cf8:	2078      	movs	r0, #120	@ 0x78
 8018cfa:	f000 fa3f 	bl	801917c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8018cfe:	22a8      	movs	r2, #168	@ 0xa8
 8018d00:	2100      	movs	r1, #0
 8018d02:	2078      	movs	r0, #120	@ 0x78
 8018d04:	f000 fa3a 	bl	801917c <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8018d08:	223f      	movs	r2, #63	@ 0x3f
 8018d0a:	2100      	movs	r1, #0
 8018d0c:	2078      	movs	r0, #120	@ 0x78
 8018d0e:	f000 fa35 	bl	801917c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8018d12:	22a4      	movs	r2, #164	@ 0xa4
 8018d14:	2100      	movs	r1, #0
 8018d16:	2078      	movs	r0, #120	@ 0x78
 8018d18:	f000 fa30 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8018d1c:	22d3      	movs	r2, #211	@ 0xd3
 8018d1e:	2100      	movs	r1, #0
 8018d20:	2078      	movs	r0, #120	@ 0x78
 8018d22:	f000 fa2b 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8018d26:	2200      	movs	r2, #0
 8018d28:	2100      	movs	r1, #0
 8018d2a:	2078      	movs	r0, #120	@ 0x78
 8018d2c:	f000 fa26 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8018d30:	22d5      	movs	r2, #213	@ 0xd5
 8018d32:	2100      	movs	r1, #0
 8018d34:	2078      	movs	r0, #120	@ 0x78
 8018d36:	f000 fa21 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8018d3a:	22f0      	movs	r2, #240	@ 0xf0
 8018d3c:	2100      	movs	r1, #0
 8018d3e:	2078      	movs	r0, #120	@ 0x78
 8018d40:	f000 fa1c 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8018d44:	22d9      	movs	r2, #217	@ 0xd9
 8018d46:	2100      	movs	r1, #0
 8018d48:	2078      	movs	r0, #120	@ 0x78
 8018d4a:	f000 fa17 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8018d4e:	2222      	movs	r2, #34	@ 0x22
 8018d50:	2100      	movs	r1, #0
 8018d52:	2078      	movs	r0, #120	@ 0x78
 8018d54:	f000 fa12 	bl	801917c <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8018d58:	22da      	movs	r2, #218	@ 0xda
 8018d5a:	2100      	movs	r1, #0
 8018d5c:	2078      	movs	r0, #120	@ 0x78
 8018d5e:	f000 fa0d 	bl	801917c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8018d62:	2212      	movs	r2, #18
 8018d64:	2100      	movs	r1, #0
 8018d66:	2078      	movs	r0, #120	@ 0x78
 8018d68:	f000 fa08 	bl	801917c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8018d6c:	22db      	movs	r2, #219	@ 0xdb
 8018d6e:	2100      	movs	r1, #0
 8018d70:	2078      	movs	r0, #120	@ 0x78
 8018d72:	f000 fa03 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8018d76:	2220      	movs	r2, #32
 8018d78:	2100      	movs	r1, #0
 8018d7a:	2078      	movs	r0, #120	@ 0x78
 8018d7c:	f000 f9fe 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8018d80:	228d      	movs	r2, #141	@ 0x8d
 8018d82:	2100      	movs	r1, #0
 8018d84:	2078      	movs	r0, #120	@ 0x78
 8018d86:	f000 f9f9 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8018d8a:	2214      	movs	r2, #20
 8018d8c:	2100      	movs	r1, #0
 8018d8e:	2078      	movs	r0, #120	@ 0x78
 8018d90:	f000 f9f4 	bl	801917c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8018d94:	22af      	movs	r2, #175	@ 0xaf
 8018d96:	2100      	movs	r1, #0
 8018d98:	2078      	movs	r0, #120	@ 0x78
 8018d9a:	f000 f9ef 	bl	801917c <ssd1306_I2C_Write>
	
	/* Update screen */
	//SSD1306_UpdateScreen();
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8018d9e:	4b08      	ldr	r3, [pc, #32]	@ (8018dc0 <SSD1306_Init+0x170>)
 8018da0:	2200      	movs	r2, #0
 8018da2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8018da4:	4b06      	ldr	r3, [pc, #24]	@ (8018dc0 <SSD1306_Init+0x170>)
 8018da6:	2200      	movs	r2, #0
 8018da8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8018daa:	4b05      	ldr	r3, [pc, #20]	@ (8018dc0 <SSD1306_Init+0x170>)
 8018dac:	2201      	movs	r2, #1
 8018dae:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8018db0:	2301      	movs	r3, #1
}
 8018db2:	4618      	mov	r0, r3
 8018db4:	3708      	adds	r7, #8
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bd80      	pop	{r7, pc}
 8018dba:	bf00      	nop
 8018dbc:	20000a2c 	.word	0x20000a2c
 8018dc0:	20001058 	.word	0x20001058

08018dc4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b082      	sub	sp, #8
 8018dc8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8018dca:	2300      	movs	r3, #0
 8018dcc:	71fb      	strb	r3, [r7, #7]
 8018dce:	e01d      	b.n	8018e0c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8018dd0:	79fb      	ldrb	r3, [r7, #7]
 8018dd2:	3b50      	subs	r3, #80	@ 0x50
 8018dd4:	b2db      	uxtb	r3, r3
 8018dd6:	461a      	mov	r2, r3
 8018dd8:	2100      	movs	r1, #0
 8018dda:	2078      	movs	r0, #120	@ 0x78
 8018ddc:	f000 f9ce 	bl	801917c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8018de0:	2200      	movs	r2, #0
 8018de2:	2100      	movs	r1, #0
 8018de4:	2078      	movs	r0, #120	@ 0x78
 8018de6:	f000 f9c9 	bl	801917c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8018dea:	2210      	movs	r2, #16
 8018dec:	2100      	movs	r1, #0
 8018dee:	2078      	movs	r0, #120	@ 0x78
 8018df0:	f000 f9c4 	bl	801917c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8018df4:	79fb      	ldrb	r3, [r7, #7]
 8018df6:	01db      	lsls	r3, r3, #7
 8018df8:	4a08      	ldr	r2, [pc, #32]	@ (8018e1c <SSD1306_UpdateScreen+0x58>)
 8018dfa:	441a      	add	r2, r3
 8018dfc:	2380      	movs	r3, #128	@ 0x80
 8018dfe:	2140      	movs	r1, #64	@ 0x40
 8018e00:	2078      	movs	r0, #120	@ 0x78
 8018e02:	f000 f955 	bl	80190b0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8018e06:	79fb      	ldrb	r3, [r7, #7]
 8018e08:	3301      	adds	r3, #1
 8018e0a:	71fb      	strb	r3, [r7, #7]
 8018e0c:	79fb      	ldrb	r3, [r7, #7]
 8018e0e:	2b07      	cmp	r3, #7
 8018e10:	d9de      	bls.n	8018dd0 <SSD1306_UpdateScreen+0xc>
	}
}
 8018e12:	bf00      	nop
 8018e14:	bf00      	nop
 8018e16:	3708      	adds	r7, #8
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	bd80      	pop	{r7, pc}
 8018e1c:	20000c58 	.word	0x20000c58

08018e20 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b082      	sub	sp, #8
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	4603      	mov	r3, r0
 8018e28:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8018e2a:	79fb      	ldrb	r3, [r7, #7]
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d101      	bne.n	8018e34 <SSD1306_Fill+0x14>
 8018e30:	2300      	movs	r3, #0
 8018e32:	e000      	b.n	8018e36 <SSD1306_Fill+0x16>
 8018e34:	23ff      	movs	r3, #255	@ 0xff
 8018e36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018e3a:	4619      	mov	r1, r3
 8018e3c:	4803      	ldr	r0, [pc, #12]	@ (8018e4c <SSD1306_Fill+0x2c>)
 8018e3e:	f01d f94f 	bl	80360e0 <memset>
}
 8018e42:	bf00      	nop
 8018e44:	3708      	adds	r7, #8
 8018e46:	46bd      	mov	sp, r7
 8018e48:	bd80      	pop	{r7, pc}
 8018e4a:	bf00      	nop
 8018e4c:	20000c58 	.word	0x20000c58

08018e50 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8018e50:	b480      	push	{r7}
 8018e52:	b083      	sub	sp, #12
 8018e54:	af00      	add	r7, sp, #0
 8018e56:	4603      	mov	r3, r0
 8018e58:	80fb      	strh	r3, [r7, #6]
 8018e5a:	460b      	mov	r3, r1
 8018e5c:	80bb      	strh	r3, [r7, #4]
 8018e5e:	4613      	mov	r3, r2
 8018e60:	70fb      	strb	r3, [r7, #3]
	if (
 8018e62:	88fb      	ldrh	r3, [r7, #6]
 8018e64:	2b7f      	cmp	r3, #127	@ 0x7f
 8018e66:	d848      	bhi.n	8018efa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8018e68:	88bb      	ldrh	r3, [r7, #4]
 8018e6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8018e6c:	d845      	bhi.n	8018efa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8018e6e:	4b26      	ldr	r3, [pc, #152]	@ (8018f08 <SSD1306_DrawPixel+0xb8>)
 8018e70:	791b      	ldrb	r3, [r3, #4]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d006      	beq.n	8018e84 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8018e76:	78fb      	ldrb	r3, [r7, #3]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	bf0c      	ite	eq
 8018e7c:	2301      	moveq	r3, #1
 8018e7e:	2300      	movne	r3, #0
 8018e80:	b2db      	uxtb	r3, r3
 8018e82:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8018e84:	78fb      	ldrb	r3, [r7, #3]
 8018e86:	2b01      	cmp	r3, #1
 8018e88:	d11a      	bne.n	8018ec0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8018e8a:	88fa      	ldrh	r2, [r7, #6]
 8018e8c:	88bb      	ldrh	r3, [r7, #4]
 8018e8e:	08db      	lsrs	r3, r3, #3
 8018e90:	b298      	uxth	r0, r3
 8018e92:	4603      	mov	r3, r0
 8018e94:	01db      	lsls	r3, r3, #7
 8018e96:	4413      	add	r3, r2
 8018e98:	4a1c      	ldr	r2, [pc, #112]	@ (8018f0c <SSD1306_DrawPixel+0xbc>)
 8018e9a:	5cd3      	ldrb	r3, [r2, r3]
 8018e9c:	b25a      	sxtb	r2, r3
 8018e9e:	88bb      	ldrh	r3, [r7, #4]
 8018ea0:	f003 0307 	and.w	r3, r3, #7
 8018ea4:	2101      	movs	r1, #1
 8018ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8018eaa:	b25b      	sxtb	r3, r3
 8018eac:	4313      	orrs	r3, r2
 8018eae:	b259      	sxtb	r1, r3
 8018eb0:	88fa      	ldrh	r2, [r7, #6]
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	01db      	lsls	r3, r3, #7
 8018eb6:	4413      	add	r3, r2
 8018eb8:	b2c9      	uxtb	r1, r1
 8018eba:	4a14      	ldr	r2, [pc, #80]	@ (8018f0c <SSD1306_DrawPixel+0xbc>)
 8018ebc:	54d1      	strb	r1, [r2, r3]
 8018ebe:	e01d      	b.n	8018efc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8018ec0:	88fa      	ldrh	r2, [r7, #6]
 8018ec2:	88bb      	ldrh	r3, [r7, #4]
 8018ec4:	08db      	lsrs	r3, r3, #3
 8018ec6:	b298      	uxth	r0, r3
 8018ec8:	4603      	mov	r3, r0
 8018eca:	01db      	lsls	r3, r3, #7
 8018ecc:	4413      	add	r3, r2
 8018ece:	4a0f      	ldr	r2, [pc, #60]	@ (8018f0c <SSD1306_DrawPixel+0xbc>)
 8018ed0:	5cd3      	ldrb	r3, [r2, r3]
 8018ed2:	b25a      	sxtb	r2, r3
 8018ed4:	88bb      	ldrh	r3, [r7, #4]
 8018ed6:	f003 0307 	and.w	r3, r3, #7
 8018eda:	2101      	movs	r1, #1
 8018edc:	fa01 f303 	lsl.w	r3, r1, r3
 8018ee0:	b25b      	sxtb	r3, r3
 8018ee2:	43db      	mvns	r3, r3
 8018ee4:	b25b      	sxtb	r3, r3
 8018ee6:	4013      	ands	r3, r2
 8018ee8:	b259      	sxtb	r1, r3
 8018eea:	88fa      	ldrh	r2, [r7, #6]
 8018eec:	4603      	mov	r3, r0
 8018eee:	01db      	lsls	r3, r3, #7
 8018ef0:	4413      	add	r3, r2
 8018ef2:	b2c9      	uxtb	r1, r1
 8018ef4:	4a05      	ldr	r2, [pc, #20]	@ (8018f0c <SSD1306_DrawPixel+0xbc>)
 8018ef6:	54d1      	strb	r1, [r2, r3]
 8018ef8:	e000      	b.n	8018efc <SSD1306_DrawPixel+0xac>
		return;
 8018efa:	bf00      	nop
	}
}
 8018efc:	370c      	adds	r7, #12
 8018efe:	46bd      	mov	sp, r7
 8018f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f04:	4770      	bx	lr
 8018f06:	bf00      	nop
 8018f08:	20001058 	.word	0x20001058
 8018f0c:	20000c58 	.word	0x20000c58

08018f10 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8018f10:	b480      	push	{r7}
 8018f12:	b083      	sub	sp, #12
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	4603      	mov	r3, r0
 8018f18:	460a      	mov	r2, r1
 8018f1a:	80fb      	strh	r3, [r7, #6]
 8018f1c:	4613      	mov	r3, r2
 8018f1e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8018f20:	4a05      	ldr	r2, [pc, #20]	@ (8018f38 <SSD1306_GotoXY+0x28>)
 8018f22:	88fb      	ldrh	r3, [r7, #6]
 8018f24:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8018f26:	4a04      	ldr	r2, [pc, #16]	@ (8018f38 <SSD1306_GotoXY+0x28>)
 8018f28:	88bb      	ldrh	r3, [r7, #4]
 8018f2a:	8053      	strh	r3, [r2, #2]
}
 8018f2c:	bf00      	nop
 8018f2e:	370c      	adds	r7, #12
 8018f30:	46bd      	mov	sp, r7
 8018f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f36:	4770      	bx	lr
 8018f38:	20001058 	.word	0x20001058

08018f3c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b086      	sub	sp, #24
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	4603      	mov	r3, r0
 8018f44:	6039      	str	r1, [r7, #0]
 8018f46:	71fb      	strb	r3, [r7, #7]
 8018f48:	4613      	mov	r3, r2
 8018f4a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8018f4c:	4b39      	ldr	r3, [pc, #228]	@ (8019034 <SSD1306_Putc+0xf8>)
 8018f4e:	881b      	ldrh	r3, [r3, #0]
 8018f50:	461a      	mov	r2, r3
 8018f52:	683b      	ldr	r3, [r7, #0]
 8018f54:	781b      	ldrb	r3, [r3, #0]
 8018f56:	4413      	add	r3, r2
	if (
 8018f58:	2b7f      	cmp	r3, #127	@ 0x7f
 8018f5a:	dc07      	bgt.n	8018f6c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8018f5c:	4b35      	ldr	r3, [pc, #212]	@ (8019034 <SSD1306_Putc+0xf8>)
 8018f5e:	885b      	ldrh	r3, [r3, #2]
 8018f60:	461a      	mov	r2, r3
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	785b      	ldrb	r3, [r3, #1]
 8018f66:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8018f68:	2b3f      	cmp	r3, #63	@ 0x3f
 8018f6a:	dd01      	ble.n	8018f70 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8018f6c:	2300      	movs	r3, #0
 8018f6e:	e05d      	b.n	801902c <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8018f70:	2300      	movs	r3, #0
 8018f72:	617b      	str	r3, [r7, #20]
 8018f74:	e04b      	b.n	801900e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8018f76:	683b      	ldr	r3, [r7, #0]
 8018f78:	685a      	ldr	r2, [r3, #4]
 8018f7a:	79fb      	ldrb	r3, [r7, #7]
 8018f7c:	3b20      	subs	r3, #32
 8018f7e:	6839      	ldr	r1, [r7, #0]
 8018f80:	7849      	ldrb	r1, [r1, #1]
 8018f82:	fb01 f303 	mul.w	r3, r1, r3
 8018f86:	4619      	mov	r1, r3
 8018f88:	697b      	ldr	r3, [r7, #20]
 8018f8a:	440b      	add	r3, r1
 8018f8c:	005b      	lsls	r3, r3, #1
 8018f8e:	4413      	add	r3, r2
 8018f90:	881b      	ldrh	r3, [r3, #0]
 8018f92:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8018f94:	2300      	movs	r3, #0
 8018f96:	613b      	str	r3, [r7, #16]
 8018f98:	e030      	b.n	8018ffc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8018f9a:	68fa      	ldr	r2, [r7, #12]
 8018f9c:	693b      	ldr	r3, [r7, #16]
 8018f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8018fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d010      	beq.n	8018fcc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8018faa:	4b22      	ldr	r3, [pc, #136]	@ (8019034 <SSD1306_Putc+0xf8>)
 8018fac:	881a      	ldrh	r2, [r3, #0]
 8018fae:	693b      	ldr	r3, [r7, #16]
 8018fb0:	b29b      	uxth	r3, r3
 8018fb2:	4413      	add	r3, r2
 8018fb4:	b298      	uxth	r0, r3
 8018fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8019034 <SSD1306_Putc+0xf8>)
 8018fb8:	885a      	ldrh	r2, [r3, #2]
 8018fba:	697b      	ldr	r3, [r7, #20]
 8018fbc:	b29b      	uxth	r3, r3
 8018fbe:	4413      	add	r3, r2
 8018fc0:	b29b      	uxth	r3, r3
 8018fc2:	79ba      	ldrb	r2, [r7, #6]
 8018fc4:	4619      	mov	r1, r3
 8018fc6:	f7ff ff43 	bl	8018e50 <SSD1306_DrawPixel>
 8018fca:	e014      	b.n	8018ff6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8018fcc:	4b19      	ldr	r3, [pc, #100]	@ (8019034 <SSD1306_Putc+0xf8>)
 8018fce:	881a      	ldrh	r2, [r3, #0]
 8018fd0:	693b      	ldr	r3, [r7, #16]
 8018fd2:	b29b      	uxth	r3, r3
 8018fd4:	4413      	add	r3, r2
 8018fd6:	b298      	uxth	r0, r3
 8018fd8:	4b16      	ldr	r3, [pc, #88]	@ (8019034 <SSD1306_Putc+0xf8>)
 8018fda:	885a      	ldrh	r2, [r3, #2]
 8018fdc:	697b      	ldr	r3, [r7, #20]
 8018fde:	b29b      	uxth	r3, r3
 8018fe0:	4413      	add	r3, r2
 8018fe2:	b299      	uxth	r1, r3
 8018fe4:	79bb      	ldrb	r3, [r7, #6]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	bf0c      	ite	eq
 8018fea:	2301      	moveq	r3, #1
 8018fec:	2300      	movne	r3, #0
 8018fee:	b2db      	uxtb	r3, r3
 8018ff0:	461a      	mov	r2, r3
 8018ff2:	f7ff ff2d 	bl	8018e50 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8018ff6:	693b      	ldr	r3, [r7, #16]
 8018ff8:	3301      	adds	r3, #1
 8018ffa:	613b      	str	r3, [r7, #16]
 8018ffc:	683b      	ldr	r3, [r7, #0]
 8018ffe:	781b      	ldrb	r3, [r3, #0]
 8019000:	461a      	mov	r2, r3
 8019002:	693b      	ldr	r3, [r7, #16]
 8019004:	4293      	cmp	r3, r2
 8019006:	d3c8      	bcc.n	8018f9a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8019008:	697b      	ldr	r3, [r7, #20]
 801900a:	3301      	adds	r3, #1
 801900c:	617b      	str	r3, [r7, #20]
 801900e:	683b      	ldr	r3, [r7, #0]
 8019010:	785b      	ldrb	r3, [r3, #1]
 8019012:	461a      	mov	r2, r3
 8019014:	697b      	ldr	r3, [r7, #20]
 8019016:	4293      	cmp	r3, r2
 8019018:	d3ad      	bcc.n	8018f76 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 801901a:	4b06      	ldr	r3, [pc, #24]	@ (8019034 <SSD1306_Putc+0xf8>)
 801901c:	881b      	ldrh	r3, [r3, #0]
 801901e:	683a      	ldr	r2, [r7, #0]
 8019020:	7812      	ldrb	r2, [r2, #0]
 8019022:	4413      	add	r3, r2
 8019024:	b29a      	uxth	r2, r3
 8019026:	4b03      	ldr	r3, [pc, #12]	@ (8019034 <SSD1306_Putc+0xf8>)
 8019028:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 801902a:	79fb      	ldrb	r3, [r7, #7]
}
 801902c:	4618      	mov	r0, r3
 801902e:	3718      	adds	r7, #24
 8019030:	46bd      	mov	sp, r7
 8019032:	bd80      	pop	{r7, pc}
 8019034:	20001058 	.word	0x20001058

08019038 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8019038:	b580      	push	{r7, lr}
 801903a:	b084      	sub	sp, #16
 801903c:	af00      	add	r7, sp, #0
 801903e:	60f8      	str	r0, [r7, #12]
 8019040:	60b9      	str	r1, [r7, #8]
 8019042:	4613      	mov	r3, r2
 8019044:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8019046:	e012      	b.n	801906e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	781b      	ldrb	r3, [r3, #0]
 801904c:	79fa      	ldrb	r2, [r7, #7]
 801904e:	68b9      	ldr	r1, [r7, #8]
 8019050:	4618      	mov	r0, r3
 8019052:	f7ff ff73 	bl	8018f3c <SSD1306_Putc>
 8019056:	4603      	mov	r3, r0
 8019058:	461a      	mov	r2, r3
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	781b      	ldrb	r3, [r3, #0]
 801905e:	429a      	cmp	r2, r3
 8019060:	d002      	beq.n	8019068 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	781b      	ldrb	r3, [r3, #0]
 8019066:	e008      	b.n	801907a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	3301      	adds	r3, #1
 801906c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	781b      	ldrb	r3, [r3, #0]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d1e8      	bne.n	8019048 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	781b      	ldrb	r3, [r3, #0]
}
 801907a:	4618      	mov	r0, r3
 801907c:	3710      	adds	r7, #16
 801907e:	46bd      	mov	sp, r7
 8019080:	bd80      	pop	{r7, pc}
	...

08019084 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8019084:	b480      	push	{r7}
 8019086:	b083      	sub	sp, #12
 8019088:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 801908a:	4b08      	ldr	r3, [pc, #32]	@ (80190ac <ssd1306_I2C_Init+0x28>)
 801908c:	607b      	str	r3, [r7, #4]
	while(p>0)
 801908e:	e002      	b.n	8019096 <ssd1306_I2C_Init+0x12>
		p--;
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	3b01      	subs	r3, #1
 8019094:	607b      	str	r3, [r7, #4]
	while(p>0)
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d1f9      	bne.n	8019090 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 801909c:	bf00      	nop
 801909e:	bf00      	nop
 80190a0:	370c      	adds	r7, #12
 80190a2:	46bd      	mov	sp, r7
 80190a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a8:	4770      	bx	lr
 80190aa:	bf00      	nop
 80190ac:	0003d090 	.word	0x0003d090

080190b0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80190b0:	b590      	push	{r4, r7, lr}
 80190b2:	b0c7      	sub	sp, #284	@ 0x11c
 80190b4:	af02      	add	r7, sp, #8
 80190b6:	4604      	mov	r4, r0
 80190b8:	4608      	mov	r0, r1
 80190ba:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80190be:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80190c2:	600a      	str	r2, [r1, #0]
 80190c4:	4619      	mov	r1, r3
 80190c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80190ca:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80190ce:	4622      	mov	r2, r4
 80190d0:	701a      	strb	r2, [r3, #0]
 80190d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80190d6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80190da:	4602      	mov	r2, r0
 80190dc:	701a      	strb	r2, [r3, #0]
 80190de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80190e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80190e6:	460a      	mov	r2, r1
 80190e8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80190ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80190ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80190f2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80190f6:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80190fa:	7812      	ldrb	r2, [r2, #0]
 80190fc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80190fe:	2300      	movs	r3, #0
 8019100:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8019104:	e015      	b.n	8019132 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8019106:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 801910a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 801910e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8019112:	6812      	ldr	r2, [r2, #0]
 8019114:	441a      	add	r2, r3
 8019116:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 801911a:	3301      	adds	r3, #1
 801911c:	7811      	ldrb	r1, [r2, #0]
 801911e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8019122:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8019126:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8019128:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 801912c:	3301      	adds	r3, #1
 801912e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8019132:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8019136:	b29b      	uxth	r3, r3
 8019138:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 801913c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8019140:	8812      	ldrh	r2, [r2, #0]
 8019142:	429a      	cmp	r2, r3
 8019144:	d8df      	bhi.n	8019106 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8019146:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801914a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 801914e:	781b      	ldrb	r3, [r3, #0]
 8019150:	b299      	uxth	r1, r3
 8019152:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019156:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801915a:	881b      	ldrh	r3, [r3, #0]
 801915c:	3301      	adds	r3, #1
 801915e:	b29b      	uxth	r3, r3
 8019160:	f107 020c 	add.w	r2, r7, #12
 8019164:	200a      	movs	r0, #10
 8019166:	9000      	str	r0, [sp, #0]
 8019168:	4803      	ldr	r0, [pc, #12]	@ (8019178 <ssd1306_I2C_WriteMulti+0xc8>)
 801916a:	f7fd fbd9 	bl	8016920 <HAL_I2C_Master_Transmit>
}
 801916e:	bf00      	nop
 8019170:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8019174:	46bd      	mov	sp, r7
 8019176:	bd90      	pop	{r4, r7, pc}
 8019178:	20000a2c 	.word	0x20000a2c

0801917c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 801917c:	b580      	push	{r7, lr}
 801917e:	b086      	sub	sp, #24
 8019180:	af02      	add	r7, sp, #8
 8019182:	4603      	mov	r3, r0
 8019184:	71fb      	strb	r3, [r7, #7]
 8019186:	460b      	mov	r3, r1
 8019188:	71bb      	strb	r3, [r7, #6]
 801918a:	4613      	mov	r3, r2
 801918c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 801918e:	79bb      	ldrb	r3, [r7, #6]
 8019190:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8019192:	797b      	ldrb	r3, [r7, #5]
 8019194:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8019196:	79fb      	ldrb	r3, [r7, #7]
 8019198:	b299      	uxth	r1, r3
 801919a:	f107 020c 	add.w	r2, r7, #12
 801919e:	230a      	movs	r3, #10
 80191a0:	9300      	str	r3, [sp, #0]
 80191a2:	2302      	movs	r3, #2
 80191a4:	4803      	ldr	r0, [pc, #12]	@ (80191b4 <ssd1306_I2C_Write+0x38>)
 80191a6:	f7fd fbbb 	bl	8016920 <HAL_I2C_Master_Transmit>
}
 80191aa:	bf00      	nop
 80191ac:	3710      	adds	r7, #16
 80191ae:	46bd      	mov	sp, r7
 80191b0:	bd80      	pop	{r7, pc}
 80191b2:	bf00      	nop
 80191b4:	20000a2c 	.word	0x20000a2c

080191b8 <__NVIC_SetPriority>:
{
 80191b8:	b480      	push	{r7}
 80191ba:	b083      	sub	sp, #12
 80191bc:	af00      	add	r7, sp, #0
 80191be:	4603      	mov	r3, r0
 80191c0:	6039      	str	r1, [r7, #0]
 80191c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80191c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	db0a      	blt.n	80191e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80191cc:	683b      	ldr	r3, [r7, #0]
 80191ce:	b2da      	uxtb	r2, r3
 80191d0:	490c      	ldr	r1, [pc, #48]	@ (8019204 <__NVIC_SetPriority+0x4c>)
 80191d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80191d6:	0112      	lsls	r2, r2, #4
 80191d8:	b2d2      	uxtb	r2, r2
 80191da:	440b      	add	r3, r1
 80191dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80191e0:	e00a      	b.n	80191f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80191e2:	683b      	ldr	r3, [r7, #0]
 80191e4:	b2da      	uxtb	r2, r3
 80191e6:	4908      	ldr	r1, [pc, #32]	@ (8019208 <__NVIC_SetPriority+0x50>)
 80191e8:	79fb      	ldrb	r3, [r7, #7]
 80191ea:	f003 030f 	and.w	r3, r3, #15
 80191ee:	3b04      	subs	r3, #4
 80191f0:	0112      	lsls	r2, r2, #4
 80191f2:	b2d2      	uxtb	r2, r2
 80191f4:	440b      	add	r3, r1
 80191f6:	761a      	strb	r2, [r3, #24]
}
 80191f8:	bf00      	nop
 80191fa:	370c      	adds	r7, #12
 80191fc:	46bd      	mov	sp, r7
 80191fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019202:	4770      	bx	lr
 8019204:	e000e100 	.word	0xe000e100
 8019208:	e000ed00 	.word	0xe000ed00

0801920c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801920c:	b580      	push	{r7, lr}
 801920e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8019210:	4b05      	ldr	r3, [pc, #20]	@ (8019228 <SysTick_Handler+0x1c>)
 8019212:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8019214:	f002 fbc2 	bl	801b99c <xTaskGetSchedulerState>
 8019218:	4603      	mov	r3, r0
 801921a:	2b01      	cmp	r3, #1
 801921c:	d001      	beq.n	8019222 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801921e:	f003 fabb 	bl	801c798 <xPortSysTickHandler>
  }
}
 8019222:	bf00      	nop
 8019224:	bd80      	pop	{r7, pc}
 8019226:	bf00      	nop
 8019228:	e000e010 	.word	0xe000e010

0801922c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801922c:	b580      	push	{r7, lr}
 801922e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8019230:	2100      	movs	r1, #0
 8019232:	f06f 0004 	mvn.w	r0, #4
 8019236:	f7ff ffbf 	bl	80191b8 <__NVIC_SetPriority>
#endif
}
 801923a:	bf00      	nop
 801923c:	bd80      	pop	{r7, pc}
	...

08019240 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8019240:	b480      	push	{r7}
 8019242:	b083      	sub	sp, #12
 8019244:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019246:	f3ef 8305 	mrs	r3, IPSR
 801924a:	603b      	str	r3, [r7, #0]
  return(result);
 801924c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801924e:	2b00      	cmp	r3, #0
 8019250:	d003      	beq.n	801925a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8019252:	f06f 0305 	mvn.w	r3, #5
 8019256:	607b      	str	r3, [r7, #4]
 8019258:	e00c      	b.n	8019274 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801925a:	4b0a      	ldr	r3, [pc, #40]	@ (8019284 <osKernelInitialize+0x44>)
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d105      	bne.n	801926e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8019262:	4b08      	ldr	r3, [pc, #32]	@ (8019284 <osKernelInitialize+0x44>)
 8019264:	2201      	movs	r2, #1
 8019266:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8019268:	2300      	movs	r3, #0
 801926a:	607b      	str	r3, [r7, #4]
 801926c:	e002      	b.n	8019274 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801926e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019272:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8019274:	687b      	ldr	r3, [r7, #4]
}
 8019276:	4618      	mov	r0, r3
 8019278:	370c      	adds	r7, #12
 801927a:	46bd      	mov	sp, r7
 801927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019280:	4770      	bx	lr
 8019282:	bf00      	nop
 8019284:	20001060 	.word	0x20001060

08019288 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8019288:	b580      	push	{r7, lr}
 801928a:	b082      	sub	sp, #8
 801928c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801928e:	f3ef 8305 	mrs	r3, IPSR
 8019292:	603b      	str	r3, [r7, #0]
  return(result);
 8019294:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019296:	2b00      	cmp	r3, #0
 8019298:	d003      	beq.n	80192a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 801929a:	f06f 0305 	mvn.w	r3, #5
 801929e:	607b      	str	r3, [r7, #4]
 80192a0:	e010      	b.n	80192c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80192a2:	4b0b      	ldr	r3, [pc, #44]	@ (80192d0 <osKernelStart+0x48>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	2b01      	cmp	r3, #1
 80192a8:	d109      	bne.n	80192be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80192aa:	f7ff ffbf 	bl	801922c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80192ae:	4b08      	ldr	r3, [pc, #32]	@ (80192d0 <osKernelStart+0x48>)
 80192b0:	2202      	movs	r2, #2
 80192b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80192b4:	f001 fefe 	bl	801b0b4 <vTaskStartScheduler>
      stat = osOK;
 80192b8:	2300      	movs	r3, #0
 80192ba:	607b      	str	r3, [r7, #4]
 80192bc:	e002      	b.n	80192c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80192be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80192c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80192c4:	687b      	ldr	r3, [r7, #4]
}
 80192c6:	4618      	mov	r0, r3
 80192c8:	3708      	adds	r7, #8
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}
 80192ce:	bf00      	nop
 80192d0:	20001060 	.word	0x20001060

080192d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b08e      	sub	sp, #56	@ 0x38
 80192d8:	af04      	add	r7, sp, #16
 80192da:	60f8      	str	r0, [r7, #12]
 80192dc:	60b9      	str	r1, [r7, #8]
 80192de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80192e0:	2300      	movs	r3, #0
 80192e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80192e4:	f3ef 8305 	mrs	r3, IPSR
 80192e8:	617b      	str	r3, [r7, #20]
  return(result);
 80192ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d17f      	bne.n	80193f0 <osThreadNew+0x11c>
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d07c      	beq.n	80193f0 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80192f6:	2380      	movs	r3, #128	@ 0x80
 80192f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80192fa:	2318      	movs	r3, #24
 80192fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80192fe:	2300      	movs	r3, #0
 8019300:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8019302:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019306:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d046      	beq.n	801939c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d002      	beq.n	801931c <osThreadNew+0x48>
        name = attr->name;
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	699b      	ldr	r3, [r3, #24]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d002      	beq.n	801932a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	699b      	ldr	r3, [r3, #24]
 8019328:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801932a:	69fb      	ldr	r3, [r7, #28]
 801932c:	2b00      	cmp	r3, #0
 801932e:	d008      	beq.n	8019342 <osThreadNew+0x6e>
 8019330:	69fb      	ldr	r3, [r7, #28]
 8019332:	2b38      	cmp	r3, #56	@ 0x38
 8019334:	d805      	bhi.n	8019342 <osThreadNew+0x6e>
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	685b      	ldr	r3, [r3, #4]
 801933a:	f003 0301 	and.w	r3, r3, #1
 801933e:	2b00      	cmp	r3, #0
 8019340:	d001      	beq.n	8019346 <osThreadNew+0x72>
        return (NULL);
 8019342:	2300      	movs	r3, #0
 8019344:	e055      	b.n	80193f2 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	695b      	ldr	r3, [r3, #20]
 801934a:	2b00      	cmp	r3, #0
 801934c:	d003      	beq.n	8019356 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	695b      	ldr	r3, [r3, #20]
 8019352:	089b      	lsrs	r3, r3, #2
 8019354:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	689b      	ldr	r3, [r3, #8]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d00f      	beq.n	801937e <osThreadNew+0xaa>
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	68db      	ldr	r3, [r3, #12]
 8019362:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8019366:	d30a      	bcc.n	801937e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801936c:	2b00      	cmp	r3, #0
 801936e:	d006      	beq.n	801937e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	695b      	ldr	r3, [r3, #20]
 8019374:	2b00      	cmp	r3, #0
 8019376:	d002      	beq.n	801937e <osThreadNew+0xaa>
        mem = 1;
 8019378:	2301      	movs	r3, #1
 801937a:	61bb      	str	r3, [r7, #24]
 801937c:	e010      	b.n	80193a0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	689b      	ldr	r3, [r3, #8]
 8019382:	2b00      	cmp	r3, #0
 8019384:	d10c      	bne.n	80193a0 <osThreadNew+0xcc>
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	68db      	ldr	r3, [r3, #12]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d108      	bne.n	80193a0 <osThreadNew+0xcc>
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	691b      	ldr	r3, [r3, #16]
 8019392:	2b00      	cmp	r3, #0
 8019394:	d104      	bne.n	80193a0 <osThreadNew+0xcc>
          mem = 0;
 8019396:	2300      	movs	r3, #0
 8019398:	61bb      	str	r3, [r7, #24]
 801939a:	e001      	b.n	80193a0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 801939c:	2300      	movs	r3, #0
 801939e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80193a0:	69bb      	ldr	r3, [r7, #24]
 80193a2:	2b01      	cmp	r3, #1
 80193a4:	d110      	bne.n	80193c8 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80193aa:	687a      	ldr	r2, [r7, #4]
 80193ac:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80193ae:	9202      	str	r2, [sp, #8]
 80193b0:	9301      	str	r3, [sp, #4]
 80193b2:	69fb      	ldr	r3, [r7, #28]
 80193b4:	9300      	str	r3, [sp, #0]
 80193b6:	68bb      	ldr	r3, [r7, #8]
 80193b8:	6a3a      	ldr	r2, [r7, #32]
 80193ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80193bc:	68f8      	ldr	r0, [r7, #12]
 80193be:	f001 fc5b 	bl	801ac78 <xTaskCreateStatic>
 80193c2:	4603      	mov	r3, r0
 80193c4:	613b      	str	r3, [r7, #16]
 80193c6:	e013      	b.n	80193f0 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80193c8:	69bb      	ldr	r3, [r7, #24]
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d110      	bne.n	80193f0 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80193ce:	6a3b      	ldr	r3, [r7, #32]
 80193d0:	b29a      	uxth	r2, r3
 80193d2:	f107 0310 	add.w	r3, r7, #16
 80193d6:	9301      	str	r3, [sp, #4]
 80193d8:	69fb      	ldr	r3, [r7, #28]
 80193da:	9300      	str	r3, [sp, #0]
 80193dc:	68bb      	ldr	r3, [r7, #8]
 80193de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80193e0:	68f8      	ldr	r0, [r7, #12]
 80193e2:	f001 fcab 	bl	801ad3c <xTaskCreate>
 80193e6:	4603      	mov	r3, r0
 80193e8:	2b01      	cmp	r3, #1
 80193ea:	d001      	beq.n	80193f0 <osThreadNew+0x11c>
            hTask = NULL;
 80193ec:	2300      	movs	r3, #0
 80193ee:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80193f0:	693b      	ldr	r3, [r7, #16]
}
 80193f2:	4618      	mov	r0, r3
 80193f4:	3728      	adds	r7, #40	@ 0x28
 80193f6:	46bd      	mov	sp, r7
 80193f8:	bd80      	pop	{r7, pc}

080193fa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80193fa:	b580      	push	{r7, lr}
 80193fc:	b084      	sub	sp, #16
 80193fe:	af00      	add	r7, sp, #0
 8019400:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019402:	f3ef 8305 	mrs	r3, IPSR
 8019406:	60bb      	str	r3, [r7, #8]
  return(result);
 8019408:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801940a:	2b00      	cmp	r3, #0
 801940c:	d003      	beq.n	8019416 <osDelay+0x1c>
    stat = osErrorISR;
 801940e:	f06f 0305 	mvn.w	r3, #5
 8019412:	60fb      	str	r3, [r7, #12]
 8019414:	e007      	b.n	8019426 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8019416:	2300      	movs	r3, #0
 8019418:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d002      	beq.n	8019426 <osDelay+0x2c>
      vTaskDelay(ticks);
 8019420:	6878      	ldr	r0, [r7, #4]
 8019422:	f001 fe11 	bl	801b048 <vTaskDelay>
    }
  }

  return (stat);
 8019426:	68fb      	ldr	r3, [r7, #12]
}
 8019428:	4618      	mov	r0, r3
 801942a:	3710      	adds	r7, #16
 801942c:	46bd      	mov	sp, r7
 801942e:	bd80      	pop	{r7, pc}

08019430 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8019430:	b580      	push	{r7, lr}
 8019432:	b088      	sub	sp, #32
 8019434:	af00      	add	r7, sp, #0
 8019436:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8019438:	2300      	movs	r3, #0
 801943a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801943c:	f3ef 8305 	mrs	r3, IPSR
 8019440:	60bb      	str	r3, [r7, #8]
  return(result);
 8019442:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8019444:	2b00      	cmp	r3, #0
 8019446:	d174      	bne.n	8019532 <osMutexNew+0x102>
    if (attr != NULL) {
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	2b00      	cmp	r3, #0
 801944c:	d003      	beq.n	8019456 <osMutexNew+0x26>
      type = attr->attr_bits;
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	685b      	ldr	r3, [r3, #4]
 8019452:	61bb      	str	r3, [r7, #24]
 8019454:	e001      	b.n	801945a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8019456:	2300      	movs	r3, #0
 8019458:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801945a:	69bb      	ldr	r3, [r7, #24]
 801945c:	f003 0301 	and.w	r3, r3, #1
 8019460:	2b00      	cmp	r3, #0
 8019462:	d002      	beq.n	801946a <osMutexNew+0x3a>
      rmtx = 1U;
 8019464:	2301      	movs	r3, #1
 8019466:	617b      	str	r3, [r7, #20]
 8019468:	e001      	b.n	801946e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 801946a:	2300      	movs	r3, #0
 801946c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801946e:	69bb      	ldr	r3, [r7, #24]
 8019470:	f003 0308 	and.w	r3, r3, #8
 8019474:	2b00      	cmp	r3, #0
 8019476:	d15c      	bne.n	8019532 <osMutexNew+0x102>
      mem = -1;
 8019478:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801947c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d015      	beq.n	80194b0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	689b      	ldr	r3, [r3, #8]
 8019488:	2b00      	cmp	r3, #0
 801948a:	d006      	beq.n	801949a <osMutexNew+0x6a>
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	68db      	ldr	r3, [r3, #12]
 8019490:	2b4f      	cmp	r3, #79	@ 0x4f
 8019492:	d902      	bls.n	801949a <osMutexNew+0x6a>
          mem = 1;
 8019494:	2301      	movs	r3, #1
 8019496:	613b      	str	r3, [r7, #16]
 8019498:	e00c      	b.n	80194b4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	689b      	ldr	r3, [r3, #8]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d108      	bne.n	80194b4 <osMutexNew+0x84>
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	68db      	ldr	r3, [r3, #12]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d104      	bne.n	80194b4 <osMutexNew+0x84>
            mem = 0;
 80194aa:	2300      	movs	r3, #0
 80194ac:	613b      	str	r3, [r7, #16]
 80194ae:	e001      	b.n	80194b4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80194b0:	2300      	movs	r3, #0
 80194b2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80194b4:	693b      	ldr	r3, [r7, #16]
 80194b6:	2b01      	cmp	r3, #1
 80194b8:	d112      	bne.n	80194e0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80194ba:	697b      	ldr	r3, [r7, #20]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d007      	beq.n	80194d0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	689b      	ldr	r3, [r3, #8]
 80194c4:	4619      	mov	r1, r3
 80194c6:	2004      	movs	r0, #4
 80194c8:	f000 fc93 	bl	8019df2 <xQueueCreateMutexStatic>
 80194cc:	61f8      	str	r0, [r7, #28]
 80194ce:	e016      	b.n	80194fe <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	689b      	ldr	r3, [r3, #8]
 80194d4:	4619      	mov	r1, r3
 80194d6:	2001      	movs	r0, #1
 80194d8:	f000 fc8b 	bl	8019df2 <xQueueCreateMutexStatic>
 80194dc:	61f8      	str	r0, [r7, #28]
 80194de:	e00e      	b.n	80194fe <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80194e0:	693b      	ldr	r3, [r7, #16]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d10b      	bne.n	80194fe <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80194e6:	697b      	ldr	r3, [r7, #20]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d004      	beq.n	80194f6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80194ec:	2004      	movs	r0, #4
 80194ee:	f000 fc68 	bl	8019dc2 <xQueueCreateMutex>
 80194f2:	61f8      	str	r0, [r7, #28]
 80194f4:	e003      	b.n	80194fe <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80194f6:	2001      	movs	r0, #1
 80194f8:	f000 fc63 	bl	8019dc2 <xQueueCreateMutex>
 80194fc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80194fe:	69fb      	ldr	r3, [r7, #28]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d00c      	beq.n	801951e <osMutexNew+0xee>
        if (attr != NULL) {
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d003      	beq.n	8019512 <osMutexNew+0xe2>
          name = attr->name;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	60fb      	str	r3, [r7, #12]
 8019510:	e001      	b.n	8019516 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8019512:	2300      	movs	r3, #0
 8019514:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8019516:	68f9      	ldr	r1, [r7, #12]
 8019518:	69f8      	ldr	r0, [r7, #28]
 801951a:	f001 fb4f 	bl	801abbc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801951e:	69fb      	ldr	r3, [r7, #28]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d006      	beq.n	8019532 <osMutexNew+0x102>
 8019524:	697b      	ldr	r3, [r7, #20]
 8019526:	2b00      	cmp	r3, #0
 8019528:	d003      	beq.n	8019532 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801952a:	69fb      	ldr	r3, [r7, #28]
 801952c:	f043 0301 	orr.w	r3, r3, #1
 8019530:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8019532:	69fb      	ldr	r3, [r7, #28]
}
 8019534:	4618      	mov	r0, r3
 8019536:	3720      	adds	r7, #32
 8019538:	46bd      	mov	sp, r7
 801953a:	bd80      	pop	{r7, pc}

0801953c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801953c:	b580      	push	{r7, lr}
 801953e:	b086      	sub	sp, #24
 8019540:	af00      	add	r7, sp, #0
 8019542:	6078      	str	r0, [r7, #4]
 8019544:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	f023 0301 	bic.w	r3, r3, #1
 801954c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	f003 0301 	and.w	r3, r3, #1
 8019554:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8019556:	2300      	movs	r3, #0
 8019558:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801955a:	f3ef 8305 	mrs	r3, IPSR
 801955e:	60bb      	str	r3, [r7, #8]
  return(result);
 8019560:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8019562:	2b00      	cmp	r3, #0
 8019564:	d003      	beq.n	801956e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8019566:	f06f 0305 	mvn.w	r3, #5
 801956a:	617b      	str	r3, [r7, #20]
 801956c:	e02c      	b.n	80195c8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 801956e:	693b      	ldr	r3, [r7, #16]
 8019570:	2b00      	cmp	r3, #0
 8019572:	d103      	bne.n	801957c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8019574:	f06f 0303 	mvn.w	r3, #3
 8019578:	617b      	str	r3, [r7, #20]
 801957a:	e025      	b.n	80195c8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	2b00      	cmp	r3, #0
 8019580:	d011      	beq.n	80195a6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8019582:	6839      	ldr	r1, [r7, #0]
 8019584:	6938      	ldr	r0, [r7, #16]
 8019586:	f000 fc84 	bl	8019e92 <xQueueTakeMutexRecursive>
 801958a:	4603      	mov	r3, r0
 801958c:	2b01      	cmp	r3, #1
 801958e:	d01b      	beq.n	80195c8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8019590:	683b      	ldr	r3, [r7, #0]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d003      	beq.n	801959e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8019596:	f06f 0301 	mvn.w	r3, #1
 801959a:	617b      	str	r3, [r7, #20]
 801959c:	e014      	b.n	80195c8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801959e:	f06f 0302 	mvn.w	r3, #2
 80195a2:	617b      	str	r3, [r7, #20]
 80195a4:	e010      	b.n	80195c8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80195a6:	6839      	ldr	r1, [r7, #0]
 80195a8:	6938      	ldr	r0, [r7, #16]
 80195aa:	f000 ff2b 	bl	801a404 <xQueueSemaphoreTake>
 80195ae:	4603      	mov	r3, r0
 80195b0:	2b01      	cmp	r3, #1
 80195b2:	d009      	beq.n	80195c8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80195b4:	683b      	ldr	r3, [r7, #0]
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d003      	beq.n	80195c2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80195ba:	f06f 0301 	mvn.w	r3, #1
 80195be:	617b      	str	r3, [r7, #20]
 80195c0:	e002      	b.n	80195c8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80195c2:	f06f 0302 	mvn.w	r3, #2
 80195c6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80195c8:	697b      	ldr	r3, [r7, #20]
}
 80195ca:	4618      	mov	r0, r3
 80195cc:	3718      	adds	r7, #24
 80195ce:	46bd      	mov	sp, r7
 80195d0:	bd80      	pop	{r7, pc}

080195d2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80195d2:	b580      	push	{r7, lr}
 80195d4:	b086      	sub	sp, #24
 80195d6:	af00      	add	r7, sp, #0
 80195d8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	f023 0301 	bic.w	r3, r3, #1
 80195e0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	f003 0301 	and.w	r3, r3, #1
 80195e8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80195ea:	2300      	movs	r3, #0
 80195ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80195ee:	f3ef 8305 	mrs	r3, IPSR
 80195f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80195f4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d003      	beq.n	8019602 <osMutexRelease+0x30>
    stat = osErrorISR;
 80195fa:	f06f 0305 	mvn.w	r3, #5
 80195fe:	617b      	str	r3, [r7, #20]
 8019600:	e01f      	b.n	8019642 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8019602:	693b      	ldr	r3, [r7, #16]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d103      	bne.n	8019610 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8019608:	f06f 0303 	mvn.w	r3, #3
 801960c:	617b      	str	r3, [r7, #20]
 801960e:	e018      	b.n	8019642 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d009      	beq.n	801962a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8019616:	6938      	ldr	r0, [r7, #16]
 8019618:	f000 fc06 	bl	8019e28 <xQueueGiveMutexRecursive>
 801961c:	4603      	mov	r3, r0
 801961e:	2b01      	cmp	r3, #1
 8019620:	d00f      	beq.n	8019642 <osMutexRelease+0x70>
        stat = osErrorResource;
 8019622:	f06f 0302 	mvn.w	r3, #2
 8019626:	617b      	str	r3, [r7, #20]
 8019628:	e00b      	b.n	8019642 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801962a:	2300      	movs	r3, #0
 801962c:	2200      	movs	r2, #0
 801962e:	2100      	movs	r1, #0
 8019630:	6938      	ldr	r0, [r7, #16]
 8019632:	f000 fc65 	bl	8019f00 <xQueueGenericSend>
 8019636:	4603      	mov	r3, r0
 8019638:	2b01      	cmp	r3, #1
 801963a:	d002      	beq.n	8019642 <osMutexRelease+0x70>
        stat = osErrorResource;
 801963c:	f06f 0302 	mvn.w	r3, #2
 8019640:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8019642:	697b      	ldr	r3, [r7, #20]
}
 8019644:	4618      	mov	r0, r3
 8019646:	3718      	adds	r7, #24
 8019648:	46bd      	mov	sp, r7
 801964a:	bd80      	pop	{r7, pc}

0801964c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801964c:	b580      	push	{r7, lr}
 801964e:	b08a      	sub	sp, #40	@ 0x28
 8019650:	af02      	add	r7, sp, #8
 8019652:	60f8      	str	r0, [r7, #12]
 8019654:	60b9      	str	r1, [r7, #8]
 8019656:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8019658:	2300      	movs	r3, #0
 801965a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801965c:	f3ef 8305 	mrs	r3, IPSR
 8019660:	613b      	str	r3, [r7, #16]
  return(result);
 8019662:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8019664:	2b00      	cmp	r3, #0
 8019666:	d15f      	bne.n	8019728 <osMessageQueueNew+0xdc>
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	2b00      	cmp	r3, #0
 801966c:	d05c      	beq.n	8019728 <osMessageQueueNew+0xdc>
 801966e:	68bb      	ldr	r3, [r7, #8]
 8019670:	2b00      	cmp	r3, #0
 8019672:	d059      	beq.n	8019728 <osMessageQueueNew+0xdc>
    mem = -1;
 8019674:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019678:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	2b00      	cmp	r3, #0
 801967e:	d029      	beq.n	80196d4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	689b      	ldr	r3, [r3, #8]
 8019684:	2b00      	cmp	r3, #0
 8019686:	d012      	beq.n	80196ae <osMessageQueueNew+0x62>
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	68db      	ldr	r3, [r3, #12]
 801968c:	2b4f      	cmp	r3, #79	@ 0x4f
 801968e:	d90e      	bls.n	80196ae <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8019694:	2b00      	cmp	r3, #0
 8019696:	d00a      	beq.n	80196ae <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	695a      	ldr	r2, [r3, #20]
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	68b9      	ldr	r1, [r7, #8]
 80196a0:	fb01 f303 	mul.w	r3, r1, r3
 80196a4:	429a      	cmp	r2, r3
 80196a6:	d302      	bcc.n	80196ae <osMessageQueueNew+0x62>
        mem = 1;
 80196a8:	2301      	movs	r3, #1
 80196aa:	61bb      	str	r3, [r7, #24]
 80196ac:	e014      	b.n	80196d8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	689b      	ldr	r3, [r3, #8]
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d110      	bne.n	80196d8 <osMessageQueueNew+0x8c>
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	68db      	ldr	r3, [r3, #12]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d10c      	bne.n	80196d8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d108      	bne.n	80196d8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	695b      	ldr	r3, [r3, #20]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d104      	bne.n	80196d8 <osMessageQueueNew+0x8c>
          mem = 0;
 80196ce:	2300      	movs	r3, #0
 80196d0:	61bb      	str	r3, [r7, #24]
 80196d2:	e001      	b.n	80196d8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80196d4:	2300      	movs	r3, #0
 80196d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80196d8:	69bb      	ldr	r3, [r7, #24]
 80196da:	2b01      	cmp	r3, #1
 80196dc:	d10b      	bne.n	80196f6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	691a      	ldr	r2, [r3, #16]
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	689b      	ldr	r3, [r3, #8]
 80196e6:	2100      	movs	r1, #0
 80196e8:	9100      	str	r1, [sp, #0]
 80196ea:	68b9      	ldr	r1, [r7, #8]
 80196ec:	68f8      	ldr	r0, [r7, #12]
 80196ee:	f000 fa73 	bl	8019bd8 <xQueueGenericCreateStatic>
 80196f2:	61f8      	str	r0, [r7, #28]
 80196f4:	e008      	b.n	8019708 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80196f6:	69bb      	ldr	r3, [r7, #24]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d105      	bne.n	8019708 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80196fc:	2200      	movs	r2, #0
 80196fe:	68b9      	ldr	r1, [r7, #8]
 8019700:	68f8      	ldr	r0, [r7, #12]
 8019702:	f000 fae6 	bl	8019cd2 <xQueueGenericCreate>
 8019706:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8019708:	69fb      	ldr	r3, [r7, #28]
 801970a:	2b00      	cmp	r3, #0
 801970c:	d00c      	beq.n	8019728 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	2b00      	cmp	r3, #0
 8019712:	d003      	beq.n	801971c <osMessageQueueNew+0xd0>
        name = attr->name;
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	617b      	str	r3, [r7, #20]
 801971a:	e001      	b.n	8019720 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801971c:	2300      	movs	r3, #0
 801971e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8019720:	6979      	ldr	r1, [r7, #20]
 8019722:	69f8      	ldr	r0, [r7, #28]
 8019724:	f001 fa4a 	bl	801abbc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8019728:	69fb      	ldr	r3, [r7, #28]
}
 801972a:	4618      	mov	r0, r3
 801972c:	3720      	adds	r7, #32
 801972e:	46bd      	mov	sp, r7
 8019730:	bd80      	pop	{r7, pc}
	...

08019734 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8019734:	b580      	push	{r7, lr}
 8019736:	b088      	sub	sp, #32
 8019738:	af00      	add	r7, sp, #0
 801973a:	60f8      	str	r0, [r7, #12]
 801973c:	60b9      	str	r1, [r7, #8]
 801973e:	603b      	str	r3, [r7, #0]
 8019740:	4613      	mov	r3, r2
 8019742:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8019748:	2300      	movs	r3, #0
 801974a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801974c:	f3ef 8305 	mrs	r3, IPSR
 8019750:	617b      	str	r3, [r7, #20]
  return(result);
 8019752:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8019754:	2b00      	cmp	r3, #0
 8019756:	d028      	beq.n	80197aa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8019758:	69bb      	ldr	r3, [r7, #24]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d005      	beq.n	801976a <osMessageQueuePut+0x36>
 801975e:	68bb      	ldr	r3, [r7, #8]
 8019760:	2b00      	cmp	r3, #0
 8019762:	d002      	beq.n	801976a <osMessageQueuePut+0x36>
 8019764:	683b      	ldr	r3, [r7, #0]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d003      	beq.n	8019772 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801976a:	f06f 0303 	mvn.w	r3, #3
 801976e:	61fb      	str	r3, [r7, #28]
 8019770:	e038      	b.n	80197e4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8019772:	2300      	movs	r3, #0
 8019774:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8019776:	f107 0210 	add.w	r2, r7, #16
 801977a:	2300      	movs	r3, #0
 801977c:	68b9      	ldr	r1, [r7, #8]
 801977e:	69b8      	ldr	r0, [r7, #24]
 8019780:	f000 fcc0 	bl	801a104 <xQueueGenericSendFromISR>
 8019784:	4603      	mov	r3, r0
 8019786:	2b01      	cmp	r3, #1
 8019788:	d003      	beq.n	8019792 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801978a:	f06f 0302 	mvn.w	r3, #2
 801978e:	61fb      	str	r3, [r7, #28]
 8019790:	e028      	b.n	80197e4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8019792:	693b      	ldr	r3, [r7, #16]
 8019794:	2b00      	cmp	r3, #0
 8019796:	d025      	beq.n	80197e4 <osMessageQueuePut+0xb0>
 8019798:	4b15      	ldr	r3, [pc, #84]	@ (80197f0 <osMessageQueuePut+0xbc>)
 801979a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801979e:	601a      	str	r2, [r3, #0]
 80197a0:	f3bf 8f4f 	dsb	sy
 80197a4:	f3bf 8f6f 	isb	sy
 80197a8:	e01c      	b.n	80197e4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80197aa:	69bb      	ldr	r3, [r7, #24]
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d002      	beq.n	80197b6 <osMessageQueuePut+0x82>
 80197b0:	68bb      	ldr	r3, [r7, #8]
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d103      	bne.n	80197be <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80197b6:	f06f 0303 	mvn.w	r3, #3
 80197ba:	61fb      	str	r3, [r7, #28]
 80197bc:	e012      	b.n	80197e4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80197be:	2300      	movs	r3, #0
 80197c0:	683a      	ldr	r2, [r7, #0]
 80197c2:	68b9      	ldr	r1, [r7, #8]
 80197c4:	69b8      	ldr	r0, [r7, #24]
 80197c6:	f000 fb9b 	bl	8019f00 <xQueueGenericSend>
 80197ca:	4603      	mov	r3, r0
 80197cc:	2b01      	cmp	r3, #1
 80197ce:	d009      	beq.n	80197e4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80197d0:	683b      	ldr	r3, [r7, #0]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d003      	beq.n	80197de <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80197d6:	f06f 0301 	mvn.w	r3, #1
 80197da:	61fb      	str	r3, [r7, #28]
 80197dc:	e002      	b.n	80197e4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80197de:	f06f 0302 	mvn.w	r3, #2
 80197e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80197e4:	69fb      	ldr	r3, [r7, #28]
}
 80197e6:	4618      	mov	r0, r3
 80197e8:	3720      	adds	r7, #32
 80197ea:	46bd      	mov	sp, r7
 80197ec:	bd80      	pop	{r7, pc}
 80197ee:	bf00      	nop
 80197f0:	e000ed04 	.word	0xe000ed04

080197f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b088      	sub	sp, #32
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	60f8      	str	r0, [r7, #12]
 80197fc:	60b9      	str	r1, [r7, #8]
 80197fe:	607a      	str	r2, [r7, #4]
 8019800:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8019806:	2300      	movs	r3, #0
 8019808:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801980a:	f3ef 8305 	mrs	r3, IPSR
 801980e:	617b      	str	r3, [r7, #20]
  return(result);
 8019810:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8019812:	2b00      	cmp	r3, #0
 8019814:	d028      	beq.n	8019868 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8019816:	69bb      	ldr	r3, [r7, #24]
 8019818:	2b00      	cmp	r3, #0
 801981a:	d005      	beq.n	8019828 <osMessageQueueGet+0x34>
 801981c:	68bb      	ldr	r3, [r7, #8]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d002      	beq.n	8019828 <osMessageQueueGet+0x34>
 8019822:	683b      	ldr	r3, [r7, #0]
 8019824:	2b00      	cmp	r3, #0
 8019826:	d003      	beq.n	8019830 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8019828:	f06f 0303 	mvn.w	r3, #3
 801982c:	61fb      	str	r3, [r7, #28]
 801982e:	e037      	b.n	80198a0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8019830:	2300      	movs	r3, #0
 8019832:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8019834:	f107 0310 	add.w	r3, r7, #16
 8019838:	461a      	mov	r2, r3
 801983a:	68b9      	ldr	r1, [r7, #8]
 801983c:	69b8      	ldr	r0, [r7, #24]
 801983e:	f000 ffd5 	bl	801a7ec <xQueueReceiveFromISR>
 8019842:	4603      	mov	r3, r0
 8019844:	2b01      	cmp	r3, #1
 8019846:	d003      	beq.n	8019850 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8019848:	f06f 0302 	mvn.w	r3, #2
 801984c:	61fb      	str	r3, [r7, #28]
 801984e:	e027      	b.n	80198a0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8019850:	693b      	ldr	r3, [r7, #16]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d024      	beq.n	80198a0 <osMessageQueueGet+0xac>
 8019856:	4b15      	ldr	r3, [pc, #84]	@ (80198ac <osMessageQueueGet+0xb8>)
 8019858:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801985c:	601a      	str	r2, [r3, #0]
 801985e:	f3bf 8f4f 	dsb	sy
 8019862:	f3bf 8f6f 	isb	sy
 8019866:	e01b      	b.n	80198a0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8019868:	69bb      	ldr	r3, [r7, #24]
 801986a:	2b00      	cmp	r3, #0
 801986c:	d002      	beq.n	8019874 <osMessageQueueGet+0x80>
 801986e:	68bb      	ldr	r3, [r7, #8]
 8019870:	2b00      	cmp	r3, #0
 8019872:	d103      	bne.n	801987c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8019874:	f06f 0303 	mvn.w	r3, #3
 8019878:	61fb      	str	r3, [r7, #28]
 801987a:	e011      	b.n	80198a0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801987c:	683a      	ldr	r2, [r7, #0]
 801987e:	68b9      	ldr	r1, [r7, #8]
 8019880:	69b8      	ldr	r0, [r7, #24]
 8019882:	f000 fcdd 	bl	801a240 <xQueueReceive>
 8019886:	4603      	mov	r3, r0
 8019888:	2b01      	cmp	r3, #1
 801988a:	d009      	beq.n	80198a0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801988c:	683b      	ldr	r3, [r7, #0]
 801988e:	2b00      	cmp	r3, #0
 8019890:	d003      	beq.n	801989a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8019892:	f06f 0301 	mvn.w	r3, #1
 8019896:	61fb      	str	r3, [r7, #28]
 8019898:	e002      	b.n	80198a0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801989a:	f06f 0302 	mvn.w	r3, #2
 801989e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80198a0:	69fb      	ldr	r3, [r7, #28]
}
 80198a2:	4618      	mov	r0, r3
 80198a4:	3720      	adds	r7, #32
 80198a6:	46bd      	mov	sp, r7
 80198a8:	bd80      	pop	{r7, pc}
 80198aa:	bf00      	nop
 80198ac:	e000ed04 	.word	0xe000ed04

080198b0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80198b0:	b580      	push	{r7, lr}
 80198b2:	b086      	sub	sp, #24
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80198bc:	693b      	ldr	r3, [r7, #16]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d102      	bne.n	80198c8 <osMessageQueueGetCount+0x18>
    count = 0U;
 80198c2:	2300      	movs	r3, #0
 80198c4:	617b      	str	r3, [r7, #20]
 80198c6:	e00e      	b.n	80198e6 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80198c8:	f3ef 8305 	mrs	r3, IPSR
 80198cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80198ce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d004      	beq.n	80198de <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80198d4:	6938      	ldr	r0, [r7, #16]
 80198d6:	f001 f82a 	bl	801a92e <uxQueueMessagesWaitingFromISR>
 80198da:	6178      	str	r0, [r7, #20]
 80198dc:	e003      	b.n	80198e6 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80198de:	6938      	ldr	r0, [r7, #16]
 80198e0:	f001 f806 	bl	801a8f0 <uxQueueMessagesWaiting>
 80198e4:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80198e6:	697b      	ldr	r3, [r7, #20]
}
 80198e8:	4618      	mov	r0, r3
 80198ea:	3718      	adds	r7, #24
 80198ec:	46bd      	mov	sp, r7
 80198ee:	bd80      	pop	{r7, pc}

080198f0 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 80198f0:	b580      	push	{r7, lr}
 80198f2:	b086      	sub	sp, #24
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80198fc:	f3ef 8305 	mrs	r3, IPSR
 8019900:	60fb      	str	r3, [r7, #12]
  return(result);
 8019902:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019904:	2b00      	cmp	r3, #0
 8019906:	d003      	beq.n	8019910 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 8019908:	f06f 0305 	mvn.w	r3, #5
 801990c:	617b      	str	r3, [r7, #20]
 801990e:	e00c      	b.n	801992a <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8019910:	693b      	ldr	r3, [r7, #16]
 8019912:	2b00      	cmp	r3, #0
 8019914:	d103      	bne.n	801991e <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 8019916:	f06f 0303 	mvn.w	r3, #3
 801991a:	617b      	str	r3, [r7, #20]
 801991c:	e005      	b.n	801992a <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 801991e:	2300      	movs	r3, #0
 8019920:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8019922:	2100      	movs	r1, #0
 8019924:	6938      	ldr	r0, [r7, #16]
 8019926:	f000 f8ed 	bl	8019b04 <xQueueGenericReset>
  }

  return (stat);
 801992a:	697b      	ldr	r3, [r7, #20]
}
 801992c:	4618      	mov	r0, r3
 801992e:	3718      	adds	r7, #24
 8019930:	46bd      	mov	sp, r7
 8019932:	bd80      	pop	{r7, pc}

08019934 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8019934:	b480      	push	{r7}
 8019936:	b085      	sub	sp, #20
 8019938:	af00      	add	r7, sp, #0
 801993a:	60f8      	str	r0, [r7, #12]
 801993c:	60b9      	str	r1, [r7, #8]
 801993e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	4a07      	ldr	r2, [pc, #28]	@ (8019960 <vApplicationGetIdleTaskMemory+0x2c>)
 8019944:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8019946:	68bb      	ldr	r3, [r7, #8]
 8019948:	4a06      	ldr	r2, [pc, #24]	@ (8019964 <vApplicationGetIdleTaskMemory+0x30>)
 801994a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	2280      	movs	r2, #128	@ 0x80
 8019950:	601a      	str	r2, [r3, #0]
}
 8019952:	bf00      	nop
 8019954:	3714      	adds	r7, #20
 8019956:	46bd      	mov	sp, r7
 8019958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801995c:	4770      	bx	lr
 801995e:	bf00      	nop
 8019960:	20001068 	.word	0x20001068
 8019964:	200011e8 	.word	0x200011e8

08019968 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8019968:	b480      	push	{r7}
 801996a:	b085      	sub	sp, #20
 801996c:	af00      	add	r7, sp, #0
 801996e:	60f8      	str	r0, [r7, #12]
 8019970:	60b9      	str	r1, [r7, #8]
 8019972:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8019974:	68fb      	ldr	r3, [r7, #12]
 8019976:	4a07      	ldr	r2, [pc, #28]	@ (8019994 <vApplicationGetTimerTaskMemory+0x2c>)
 8019978:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801997a:	68bb      	ldr	r3, [r7, #8]
 801997c:	4a06      	ldr	r2, [pc, #24]	@ (8019998 <vApplicationGetTimerTaskMemory+0x30>)
 801997e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019986:	601a      	str	r2, [r3, #0]
}
 8019988:	bf00      	nop
 801998a:	3714      	adds	r7, #20
 801998c:	46bd      	mov	sp, r7
 801998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019992:	4770      	bx	lr
 8019994:	200013e8 	.word	0x200013e8
 8019998:	20001568 	.word	0x20001568

0801999c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801999c:	b480      	push	{r7}
 801999e:	b083      	sub	sp, #12
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	f103 0208 	add.w	r2, r3, #8
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80199b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	f103 0208 	add.w	r2, r3, #8
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	f103 0208 	add.w	r2, r3, #8
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	2200      	movs	r2, #0
 80199ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80199d0:	bf00      	nop
 80199d2:	370c      	adds	r7, #12
 80199d4:	46bd      	mov	sp, r7
 80199d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199da:	4770      	bx	lr

080199dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80199dc:	b480      	push	{r7}
 80199de:	b083      	sub	sp, #12
 80199e0:	af00      	add	r7, sp, #0
 80199e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	2200      	movs	r2, #0
 80199e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80199ea:	bf00      	nop
 80199ec:	370c      	adds	r7, #12
 80199ee:	46bd      	mov	sp, r7
 80199f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199f4:	4770      	bx	lr

080199f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80199f6:	b480      	push	{r7}
 80199f8:	b085      	sub	sp, #20
 80199fa:	af00      	add	r7, sp, #0
 80199fc:	6078      	str	r0, [r7, #4]
 80199fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	685b      	ldr	r3, [r3, #4]
 8019a04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019a06:	683b      	ldr	r3, [r7, #0]
 8019a08:	68fa      	ldr	r2, [r7, #12]
 8019a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	689a      	ldr	r2, [r3, #8]
 8019a10:	683b      	ldr	r3, [r7, #0]
 8019a12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	689b      	ldr	r3, [r3, #8]
 8019a18:	683a      	ldr	r2, [r7, #0]
 8019a1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8019a1c:	68fb      	ldr	r3, [r7, #12]
 8019a1e:	683a      	ldr	r2, [r7, #0]
 8019a20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8019a22:	683b      	ldr	r3, [r7, #0]
 8019a24:	687a      	ldr	r2, [r7, #4]
 8019a26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	1c5a      	adds	r2, r3, #1
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	601a      	str	r2, [r3, #0]
}
 8019a32:	bf00      	nop
 8019a34:	3714      	adds	r7, #20
 8019a36:	46bd      	mov	sp, r7
 8019a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a3c:	4770      	bx	lr

08019a3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019a3e:	b480      	push	{r7}
 8019a40:	b085      	sub	sp, #20
 8019a42:	af00      	add	r7, sp, #0
 8019a44:	6078      	str	r0, [r7, #4]
 8019a46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019a48:	683b      	ldr	r3, [r7, #0]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019a4e:	68bb      	ldr	r3, [r7, #8]
 8019a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019a54:	d103      	bne.n	8019a5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	691b      	ldr	r3, [r3, #16]
 8019a5a:	60fb      	str	r3, [r7, #12]
 8019a5c:	e00c      	b.n	8019a78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	3308      	adds	r3, #8
 8019a62:	60fb      	str	r3, [r7, #12]
 8019a64:	e002      	b.n	8019a6c <vListInsert+0x2e>
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	685b      	ldr	r3, [r3, #4]
 8019a6a:	60fb      	str	r3, [r7, #12]
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	685b      	ldr	r3, [r3, #4]
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	68ba      	ldr	r2, [r7, #8]
 8019a74:	429a      	cmp	r2, r3
 8019a76:	d2f6      	bcs.n	8019a66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	685a      	ldr	r2, [r3, #4]
 8019a7c:	683b      	ldr	r3, [r7, #0]
 8019a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019a80:	683b      	ldr	r3, [r7, #0]
 8019a82:	685b      	ldr	r3, [r3, #4]
 8019a84:	683a      	ldr	r2, [r7, #0]
 8019a86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019a88:	683b      	ldr	r3, [r7, #0]
 8019a8a:	68fa      	ldr	r2, [r7, #12]
 8019a8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	683a      	ldr	r2, [r7, #0]
 8019a92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019a94:	683b      	ldr	r3, [r7, #0]
 8019a96:	687a      	ldr	r2, [r7, #4]
 8019a98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	1c5a      	adds	r2, r3, #1
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	601a      	str	r2, [r3, #0]
}
 8019aa4:	bf00      	nop
 8019aa6:	3714      	adds	r7, #20
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aae:	4770      	bx	lr

08019ab0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8019ab0:	b480      	push	{r7}
 8019ab2:	b085      	sub	sp, #20
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	691b      	ldr	r3, [r3, #16]
 8019abc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	685b      	ldr	r3, [r3, #4]
 8019ac2:	687a      	ldr	r2, [r7, #4]
 8019ac4:	6892      	ldr	r2, [r2, #8]
 8019ac6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	689b      	ldr	r3, [r3, #8]
 8019acc:	687a      	ldr	r2, [r7, #4]
 8019ace:	6852      	ldr	r2, [r2, #4]
 8019ad0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	685b      	ldr	r3, [r3, #4]
 8019ad6:	687a      	ldr	r2, [r7, #4]
 8019ad8:	429a      	cmp	r2, r3
 8019ada:	d103      	bne.n	8019ae4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	689a      	ldr	r2, [r3, #8]
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	2200      	movs	r2, #0
 8019ae8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	1e5a      	subs	r2, r3, #1
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	681b      	ldr	r3, [r3, #0]
}
 8019af8:	4618      	mov	r0, r3
 8019afa:	3714      	adds	r7, #20
 8019afc:	46bd      	mov	sp, r7
 8019afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b02:	4770      	bx	lr

08019b04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019b04:	b580      	push	{r7, lr}
 8019b06:	b084      	sub	sp, #16
 8019b08:	af00      	add	r7, sp, #0
 8019b0a:	6078      	str	r0, [r7, #4]
 8019b0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d10b      	bne.n	8019b30 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8019b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b1c:	f383 8811 	msr	BASEPRI, r3
 8019b20:	f3bf 8f6f 	isb	sy
 8019b24:	f3bf 8f4f 	dsb	sy
 8019b28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8019b2a:	bf00      	nop
 8019b2c:	bf00      	nop
 8019b2e:	e7fd      	b.n	8019b2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8019b30:	f002 fda2 	bl	801c678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	681a      	ldr	r2, [r3, #0]
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019b3c:	68f9      	ldr	r1, [r7, #12]
 8019b3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8019b40:	fb01 f303 	mul.w	r3, r1, r3
 8019b44:	441a      	add	r2, r3
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	2200      	movs	r2, #0
 8019b4e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	681a      	ldr	r2, [r3, #0]
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	681a      	ldr	r2, [r3, #0]
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019b60:	3b01      	subs	r3, #1
 8019b62:	68f9      	ldr	r1, [r7, #12]
 8019b64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8019b66:	fb01 f303 	mul.w	r3, r1, r3
 8019b6a:	441a      	add	r2, r3
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	22ff      	movs	r2, #255	@ 0xff
 8019b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	22ff      	movs	r2, #255	@ 0xff
 8019b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8019b80:	683b      	ldr	r3, [r7, #0]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d114      	bne.n	8019bb0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	691b      	ldr	r3, [r3, #16]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d01a      	beq.n	8019bc4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	3310      	adds	r3, #16
 8019b92:	4618      	mov	r0, r3
 8019b94:	f001 fd2c 	bl	801b5f0 <xTaskRemoveFromEventList>
 8019b98:	4603      	mov	r3, r0
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d012      	beq.n	8019bc4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8019b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8019bd4 <xQueueGenericReset+0xd0>)
 8019ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019ba4:	601a      	str	r2, [r3, #0]
 8019ba6:	f3bf 8f4f 	dsb	sy
 8019baa:	f3bf 8f6f 	isb	sy
 8019bae:	e009      	b.n	8019bc4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	3310      	adds	r3, #16
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	f7ff fef1 	bl	801999c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	3324      	adds	r3, #36	@ 0x24
 8019bbe:	4618      	mov	r0, r3
 8019bc0:	f7ff feec 	bl	801999c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8019bc4:	f002 fd8a 	bl	801c6dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8019bc8:	2301      	movs	r3, #1
}
 8019bca:	4618      	mov	r0, r3
 8019bcc:	3710      	adds	r7, #16
 8019bce:	46bd      	mov	sp, r7
 8019bd0:	bd80      	pop	{r7, pc}
 8019bd2:	bf00      	nop
 8019bd4:	e000ed04 	.word	0xe000ed04

08019bd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b08e      	sub	sp, #56	@ 0x38
 8019bdc:	af02      	add	r7, sp, #8
 8019bde:	60f8      	str	r0, [r7, #12]
 8019be0:	60b9      	str	r1, [r7, #8]
 8019be2:	607a      	str	r2, [r7, #4]
 8019be4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019be6:	68fb      	ldr	r3, [r7, #12]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d10b      	bne.n	8019c04 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8019bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019bf0:	f383 8811 	msr	BASEPRI, r3
 8019bf4:	f3bf 8f6f 	isb	sy
 8019bf8:	f3bf 8f4f 	dsb	sy
 8019bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8019bfe:	bf00      	nop
 8019c00:	bf00      	nop
 8019c02:	e7fd      	b.n	8019c00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8019c04:	683b      	ldr	r3, [r7, #0]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d10b      	bne.n	8019c22 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8019c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c0e:	f383 8811 	msr	BASEPRI, r3
 8019c12:	f3bf 8f6f 	isb	sy
 8019c16:	f3bf 8f4f 	dsb	sy
 8019c1a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019c1c:	bf00      	nop
 8019c1e:	bf00      	nop
 8019c20:	e7fd      	b.n	8019c1e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d002      	beq.n	8019c2e <xQueueGenericCreateStatic+0x56>
 8019c28:	68bb      	ldr	r3, [r7, #8]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d001      	beq.n	8019c32 <xQueueGenericCreateStatic+0x5a>
 8019c2e:	2301      	movs	r3, #1
 8019c30:	e000      	b.n	8019c34 <xQueueGenericCreateStatic+0x5c>
 8019c32:	2300      	movs	r3, #0
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d10b      	bne.n	8019c50 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8019c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c3c:	f383 8811 	msr	BASEPRI, r3
 8019c40:	f3bf 8f6f 	isb	sy
 8019c44:	f3bf 8f4f 	dsb	sy
 8019c48:	623b      	str	r3, [r7, #32]
}
 8019c4a:	bf00      	nop
 8019c4c:	bf00      	nop
 8019c4e:	e7fd      	b.n	8019c4c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d102      	bne.n	8019c5c <xQueueGenericCreateStatic+0x84>
 8019c56:	68bb      	ldr	r3, [r7, #8]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d101      	bne.n	8019c60 <xQueueGenericCreateStatic+0x88>
 8019c5c:	2301      	movs	r3, #1
 8019c5e:	e000      	b.n	8019c62 <xQueueGenericCreateStatic+0x8a>
 8019c60:	2300      	movs	r3, #0
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d10b      	bne.n	8019c7e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8019c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c6a:	f383 8811 	msr	BASEPRI, r3
 8019c6e:	f3bf 8f6f 	isb	sy
 8019c72:	f3bf 8f4f 	dsb	sy
 8019c76:	61fb      	str	r3, [r7, #28]
}
 8019c78:	bf00      	nop
 8019c7a:	bf00      	nop
 8019c7c:	e7fd      	b.n	8019c7a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8019c7e:	2350      	movs	r3, #80	@ 0x50
 8019c80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019c82:	697b      	ldr	r3, [r7, #20]
 8019c84:	2b50      	cmp	r3, #80	@ 0x50
 8019c86:	d00b      	beq.n	8019ca0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8019c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c8c:	f383 8811 	msr	BASEPRI, r3
 8019c90:	f3bf 8f6f 	isb	sy
 8019c94:	f3bf 8f4f 	dsb	sy
 8019c98:	61bb      	str	r3, [r7, #24]
}
 8019c9a:	bf00      	nop
 8019c9c:	bf00      	nop
 8019c9e:	e7fd      	b.n	8019c9c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019ca0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019ca2:	683b      	ldr	r3, [r7, #0]
 8019ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8019ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d00d      	beq.n	8019cc8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8019cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019cae:	2201      	movs	r2, #1
 8019cb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019cb4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8019cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019cba:	9300      	str	r3, [sp, #0]
 8019cbc:	4613      	mov	r3, r2
 8019cbe:	687a      	ldr	r2, [r7, #4]
 8019cc0:	68b9      	ldr	r1, [r7, #8]
 8019cc2:	68f8      	ldr	r0, [r7, #12]
 8019cc4:	f000 f840 	bl	8019d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8019cca:	4618      	mov	r0, r3
 8019ccc:	3730      	adds	r7, #48	@ 0x30
 8019cce:	46bd      	mov	sp, r7
 8019cd0:	bd80      	pop	{r7, pc}

08019cd2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8019cd2:	b580      	push	{r7, lr}
 8019cd4:	b08a      	sub	sp, #40	@ 0x28
 8019cd6:	af02      	add	r7, sp, #8
 8019cd8:	60f8      	str	r0, [r7, #12]
 8019cda:	60b9      	str	r1, [r7, #8]
 8019cdc:	4613      	mov	r3, r2
 8019cde:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d10b      	bne.n	8019cfe <xQueueGenericCreate+0x2c>
	__asm volatile
 8019ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cea:	f383 8811 	msr	BASEPRI, r3
 8019cee:	f3bf 8f6f 	isb	sy
 8019cf2:	f3bf 8f4f 	dsb	sy
 8019cf6:	613b      	str	r3, [r7, #16]
}
 8019cf8:	bf00      	nop
 8019cfa:	bf00      	nop
 8019cfc:	e7fd      	b.n	8019cfa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	68ba      	ldr	r2, [r7, #8]
 8019d02:	fb02 f303 	mul.w	r3, r2, r3
 8019d06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019d08:	69fb      	ldr	r3, [r7, #28]
 8019d0a:	3350      	adds	r3, #80	@ 0x50
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	f002 fdd5 	bl	801c8bc <pvPortMalloc>
 8019d12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019d14:	69bb      	ldr	r3, [r7, #24]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d011      	beq.n	8019d3e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8019d1a:	69bb      	ldr	r3, [r7, #24]
 8019d1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019d1e:	697b      	ldr	r3, [r7, #20]
 8019d20:	3350      	adds	r3, #80	@ 0x50
 8019d22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019d24:	69bb      	ldr	r3, [r7, #24]
 8019d26:	2200      	movs	r2, #0
 8019d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019d2c:	79fa      	ldrb	r2, [r7, #7]
 8019d2e:	69bb      	ldr	r3, [r7, #24]
 8019d30:	9300      	str	r3, [sp, #0]
 8019d32:	4613      	mov	r3, r2
 8019d34:	697a      	ldr	r2, [r7, #20]
 8019d36:	68b9      	ldr	r1, [r7, #8]
 8019d38:	68f8      	ldr	r0, [r7, #12]
 8019d3a:	f000 f805 	bl	8019d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019d3e:	69bb      	ldr	r3, [r7, #24]
	}
 8019d40:	4618      	mov	r0, r3
 8019d42:	3720      	adds	r7, #32
 8019d44:	46bd      	mov	sp, r7
 8019d46:	bd80      	pop	{r7, pc}

08019d48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b084      	sub	sp, #16
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	60f8      	str	r0, [r7, #12]
 8019d50:	60b9      	str	r1, [r7, #8]
 8019d52:	607a      	str	r2, [r7, #4]
 8019d54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8019d56:	68bb      	ldr	r3, [r7, #8]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d103      	bne.n	8019d64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019d5c:	69bb      	ldr	r3, [r7, #24]
 8019d5e:	69ba      	ldr	r2, [r7, #24]
 8019d60:	601a      	str	r2, [r3, #0]
 8019d62:	e002      	b.n	8019d6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019d64:	69bb      	ldr	r3, [r7, #24]
 8019d66:	687a      	ldr	r2, [r7, #4]
 8019d68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8019d6a:	69bb      	ldr	r3, [r7, #24]
 8019d6c:	68fa      	ldr	r2, [r7, #12]
 8019d6e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019d70:	69bb      	ldr	r3, [r7, #24]
 8019d72:	68ba      	ldr	r2, [r7, #8]
 8019d74:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019d76:	2101      	movs	r1, #1
 8019d78:	69b8      	ldr	r0, [r7, #24]
 8019d7a:	f7ff fec3 	bl	8019b04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8019d7e:	69bb      	ldr	r3, [r7, #24]
 8019d80:	78fa      	ldrb	r2, [r7, #3]
 8019d82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8019d86:	bf00      	nop
 8019d88:	3710      	adds	r7, #16
 8019d8a:	46bd      	mov	sp, r7
 8019d8c:	bd80      	pop	{r7, pc}

08019d8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8019d8e:	b580      	push	{r7, lr}
 8019d90:	b082      	sub	sp, #8
 8019d92:	af00      	add	r7, sp, #0
 8019d94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d00e      	beq.n	8019dba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	2200      	movs	r2, #0
 8019da0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	2200      	movs	r2, #0
 8019da6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	2200      	movs	r2, #0
 8019dac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8019dae:	2300      	movs	r3, #0
 8019db0:	2200      	movs	r2, #0
 8019db2:	2100      	movs	r1, #0
 8019db4:	6878      	ldr	r0, [r7, #4]
 8019db6:	f000 f8a3 	bl	8019f00 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8019dba:	bf00      	nop
 8019dbc:	3708      	adds	r7, #8
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bd80      	pop	{r7, pc}

08019dc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8019dc2:	b580      	push	{r7, lr}
 8019dc4:	b086      	sub	sp, #24
 8019dc6:	af00      	add	r7, sp, #0
 8019dc8:	4603      	mov	r3, r0
 8019dca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8019dcc:	2301      	movs	r3, #1
 8019dce:	617b      	str	r3, [r7, #20]
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8019dd4:	79fb      	ldrb	r3, [r7, #7]
 8019dd6:	461a      	mov	r2, r3
 8019dd8:	6939      	ldr	r1, [r7, #16]
 8019dda:	6978      	ldr	r0, [r7, #20]
 8019ddc:	f7ff ff79 	bl	8019cd2 <xQueueGenericCreate>
 8019de0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019de2:	68f8      	ldr	r0, [r7, #12]
 8019de4:	f7ff ffd3 	bl	8019d8e <prvInitialiseMutex>

		return xNewQueue;
 8019de8:	68fb      	ldr	r3, [r7, #12]
	}
 8019dea:	4618      	mov	r0, r3
 8019dec:	3718      	adds	r7, #24
 8019dee:	46bd      	mov	sp, r7
 8019df0:	bd80      	pop	{r7, pc}

08019df2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8019df2:	b580      	push	{r7, lr}
 8019df4:	b088      	sub	sp, #32
 8019df6:	af02      	add	r7, sp, #8
 8019df8:	4603      	mov	r3, r0
 8019dfa:	6039      	str	r1, [r7, #0]
 8019dfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8019dfe:	2301      	movs	r3, #1
 8019e00:	617b      	str	r3, [r7, #20]
 8019e02:	2300      	movs	r3, #0
 8019e04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8019e06:	79fb      	ldrb	r3, [r7, #7]
 8019e08:	9300      	str	r3, [sp, #0]
 8019e0a:	683b      	ldr	r3, [r7, #0]
 8019e0c:	2200      	movs	r2, #0
 8019e0e:	6939      	ldr	r1, [r7, #16]
 8019e10:	6978      	ldr	r0, [r7, #20]
 8019e12:	f7ff fee1 	bl	8019bd8 <xQueueGenericCreateStatic>
 8019e16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019e18:	68f8      	ldr	r0, [r7, #12]
 8019e1a:	f7ff ffb8 	bl	8019d8e <prvInitialiseMutex>

		return xNewQueue;
 8019e1e:	68fb      	ldr	r3, [r7, #12]
	}
 8019e20:	4618      	mov	r0, r3
 8019e22:	3718      	adds	r7, #24
 8019e24:	46bd      	mov	sp, r7
 8019e26:	bd80      	pop	{r7, pc}

08019e28 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8019e28:	b590      	push	{r4, r7, lr}
 8019e2a:	b087      	sub	sp, #28
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8019e34:	693b      	ldr	r3, [r7, #16]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d10b      	bne.n	8019e52 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8019e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e3e:	f383 8811 	msr	BASEPRI, r3
 8019e42:	f3bf 8f6f 	isb	sy
 8019e46:	f3bf 8f4f 	dsb	sy
 8019e4a:	60fb      	str	r3, [r7, #12]
}
 8019e4c:	bf00      	nop
 8019e4e:	bf00      	nop
 8019e50:	e7fd      	b.n	8019e4e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8019e52:	693b      	ldr	r3, [r7, #16]
 8019e54:	689c      	ldr	r4, [r3, #8]
 8019e56:	f001 fd91 	bl	801b97c <xTaskGetCurrentTaskHandle>
 8019e5a:	4603      	mov	r3, r0
 8019e5c:	429c      	cmp	r4, r3
 8019e5e:	d111      	bne.n	8019e84 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8019e60:	693b      	ldr	r3, [r7, #16]
 8019e62:	68db      	ldr	r3, [r3, #12]
 8019e64:	1e5a      	subs	r2, r3, #1
 8019e66:	693b      	ldr	r3, [r7, #16]
 8019e68:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8019e6a:	693b      	ldr	r3, [r7, #16]
 8019e6c:	68db      	ldr	r3, [r3, #12]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d105      	bne.n	8019e7e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8019e72:	2300      	movs	r3, #0
 8019e74:	2200      	movs	r2, #0
 8019e76:	2100      	movs	r1, #0
 8019e78:	6938      	ldr	r0, [r7, #16]
 8019e7a:	f000 f841 	bl	8019f00 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8019e7e:	2301      	movs	r3, #1
 8019e80:	617b      	str	r3, [r7, #20]
 8019e82:	e001      	b.n	8019e88 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8019e84:	2300      	movs	r3, #0
 8019e86:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8019e88:	697b      	ldr	r3, [r7, #20]
	}
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	371c      	adds	r7, #28
 8019e8e:	46bd      	mov	sp, r7
 8019e90:	bd90      	pop	{r4, r7, pc}

08019e92 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8019e92:	b590      	push	{r4, r7, lr}
 8019e94:	b087      	sub	sp, #28
 8019e96:	af00      	add	r7, sp, #0
 8019e98:	6078      	str	r0, [r7, #4]
 8019e9a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8019ea0:	693b      	ldr	r3, [r7, #16]
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d10b      	bne.n	8019ebe <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8019ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019eaa:	f383 8811 	msr	BASEPRI, r3
 8019eae:	f3bf 8f6f 	isb	sy
 8019eb2:	f3bf 8f4f 	dsb	sy
 8019eb6:	60fb      	str	r3, [r7, #12]
}
 8019eb8:	bf00      	nop
 8019eba:	bf00      	nop
 8019ebc:	e7fd      	b.n	8019eba <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8019ebe:	693b      	ldr	r3, [r7, #16]
 8019ec0:	689c      	ldr	r4, [r3, #8]
 8019ec2:	f001 fd5b 	bl	801b97c <xTaskGetCurrentTaskHandle>
 8019ec6:	4603      	mov	r3, r0
 8019ec8:	429c      	cmp	r4, r3
 8019eca:	d107      	bne.n	8019edc <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8019ecc:	693b      	ldr	r3, [r7, #16]
 8019ece:	68db      	ldr	r3, [r3, #12]
 8019ed0:	1c5a      	adds	r2, r3, #1
 8019ed2:	693b      	ldr	r3, [r7, #16]
 8019ed4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8019ed6:	2301      	movs	r3, #1
 8019ed8:	617b      	str	r3, [r7, #20]
 8019eda:	e00c      	b.n	8019ef6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8019edc:	6839      	ldr	r1, [r7, #0]
 8019ede:	6938      	ldr	r0, [r7, #16]
 8019ee0:	f000 fa90 	bl	801a404 <xQueueSemaphoreTake>
 8019ee4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8019ee6:	697b      	ldr	r3, [r7, #20]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d004      	beq.n	8019ef6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8019eec:	693b      	ldr	r3, [r7, #16]
 8019eee:	68db      	ldr	r3, [r3, #12]
 8019ef0:	1c5a      	adds	r2, r3, #1
 8019ef2:	693b      	ldr	r3, [r7, #16]
 8019ef4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8019ef6:	697b      	ldr	r3, [r7, #20]
	}
 8019ef8:	4618      	mov	r0, r3
 8019efa:	371c      	adds	r7, #28
 8019efc:	46bd      	mov	sp, r7
 8019efe:	bd90      	pop	{r4, r7, pc}

08019f00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019f00:	b580      	push	{r7, lr}
 8019f02:	b08e      	sub	sp, #56	@ 0x38
 8019f04:	af00      	add	r7, sp, #0
 8019f06:	60f8      	str	r0, [r7, #12]
 8019f08:	60b9      	str	r1, [r7, #8]
 8019f0a:	607a      	str	r2, [r7, #4]
 8019f0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8019f0e:	2300      	movs	r3, #0
 8019f10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8019f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d10b      	bne.n	8019f34 <xQueueGenericSend+0x34>
	__asm volatile
 8019f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f20:	f383 8811 	msr	BASEPRI, r3
 8019f24:	f3bf 8f6f 	isb	sy
 8019f28:	f3bf 8f4f 	dsb	sy
 8019f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8019f2e:	bf00      	nop
 8019f30:	bf00      	nop
 8019f32:	e7fd      	b.n	8019f30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019f34:	68bb      	ldr	r3, [r7, #8]
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d103      	bne.n	8019f42 <xQueueGenericSend+0x42>
 8019f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d101      	bne.n	8019f46 <xQueueGenericSend+0x46>
 8019f42:	2301      	movs	r3, #1
 8019f44:	e000      	b.n	8019f48 <xQueueGenericSend+0x48>
 8019f46:	2300      	movs	r3, #0
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d10b      	bne.n	8019f64 <xQueueGenericSend+0x64>
	__asm volatile
 8019f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f50:	f383 8811 	msr	BASEPRI, r3
 8019f54:	f3bf 8f6f 	isb	sy
 8019f58:	f3bf 8f4f 	dsb	sy
 8019f5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019f5e:	bf00      	nop
 8019f60:	bf00      	nop
 8019f62:	e7fd      	b.n	8019f60 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019f64:	683b      	ldr	r3, [r7, #0]
 8019f66:	2b02      	cmp	r3, #2
 8019f68:	d103      	bne.n	8019f72 <xQueueGenericSend+0x72>
 8019f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019f6e:	2b01      	cmp	r3, #1
 8019f70:	d101      	bne.n	8019f76 <xQueueGenericSend+0x76>
 8019f72:	2301      	movs	r3, #1
 8019f74:	e000      	b.n	8019f78 <xQueueGenericSend+0x78>
 8019f76:	2300      	movs	r3, #0
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d10b      	bne.n	8019f94 <xQueueGenericSend+0x94>
	__asm volatile
 8019f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f80:	f383 8811 	msr	BASEPRI, r3
 8019f84:	f3bf 8f6f 	isb	sy
 8019f88:	f3bf 8f4f 	dsb	sy
 8019f8c:	623b      	str	r3, [r7, #32]
}
 8019f8e:	bf00      	nop
 8019f90:	bf00      	nop
 8019f92:	e7fd      	b.n	8019f90 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019f94:	f001 fd02 	bl	801b99c <xTaskGetSchedulerState>
 8019f98:	4603      	mov	r3, r0
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d102      	bne.n	8019fa4 <xQueueGenericSend+0xa4>
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d101      	bne.n	8019fa8 <xQueueGenericSend+0xa8>
 8019fa4:	2301      	movs	r3, #1
 8019fa6:	e000      	b.n	8019faa <xQueueGenericSend+0xaa>
 8019fa8:	2300      	movs	r3, #0
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d10b      	bne.n	8019fc6 <xQueueGenericSend+0xc6>
	__asm volatile
 8019fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fb2:	f383 8811 	msr	BASEPRI, r3
 8019fb6:	f3bf 8f6f 	isb	sy
 8019fba:	f3bf 8f4f 	dsb	sy
 8019fbe:	61fb      	str	r3, [r7, #28]
}
 8019fc0:	bf00      	nop
 8019fc2:	bf00      	nop
 8019fc4:	e7fd      	b.n	8019fc2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019fc6:	f002 fb57 	bl	801c678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019fd2:	429a      	cmp	r2, r3
 8019fd4:	d302      	bcc.n	8019fdc <xQueueGenericSend+0xdc>
 8019fd6:	683b      	ldr	r3, [r7, #0]
 8019fd8:	2b02      	cmp	r3, #2
 8019fda:	d129      	bne.n	801a030 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019fdc:	683a      	ldr	r2, [r7, #0]
 8019fde:	68b9      	ldr	r1, [r7, #8]
 8019fe0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019fe2:	f000 fcdb 	bl	801a99c <prvCopyDataToQueue>
 8019fe6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d010      	beq.n	801a012 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ff2:	3324      	adds	r3, #36	@ 0x24
 8019ff4:	4618      	mov	r0, r3
 8019ff6:	f001 fafb 	bl	801b5f0 <xTaskRemoveFromEventList>
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d013      	beq.n	801a028 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801a000:	4b3f      	ldr	r3, [pc, #252]	@ (801a100 <xQueueGenericSend+0x200>)
 801a002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a006:	601a      	str	r2, [r3, #0]
 801a008:	f3bf 8f4f 	dsb	sy
 801a00c:	f3bf 8f6f 	isb	sy
 801a010:	e00a      	b.n	801a028 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801a012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a014:	2b00      	cmp	r3, #0
 801a016:	d007      	beq.n	801a028 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801a018:	4b39      	ldr	r3, [pc, #228]	@ (801a100 <xQueueGenericSend+0x200>)
 801a01a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a01e:	601a      	str	r2, [r3, #0]
 801a020:	f3bf 8f4f 	dsb	sy
 801a024:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801a028:	f002 fb58 	bl	801c6dc <vPortExitCritical>
				return pdPASS;
 801a02c:	2301      	movs	r3, #1
 801a02e:	e063      	b.n	801a0f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	2b00      	cmp	r3, #0
 801a034:	d103      	bne.n	801a03e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a036:	f002 fb51 	bl	801c6dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801a03a:	2300      	movs	r3, #0
 801a03c:	e05c      	b.n	801a0f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a03e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a040:	2b00      	cmp	r3, #0
 801a042:	d106      	bne.n	801a052 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a044:	f107 0314 	add.w	r3, r7, #20
 801a048:	4618      	mov	r0, r3
 801a04a:	f001 fb35 	bl	801b6b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a04e:	2301      	movs	r3, #1
 801a050:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a052:	f002 fb43 	bl	801c6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a056:	f001 f89d 	bl	801b194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a05a:	f002 fb0d 	bl	801c678 <vPortEnterCritical>
 801a05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a060:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a064:	b25b      	sxtb	r3, r3
 801a066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a06a:	d103      	bne.n	801a074 <xQueueGenericSend+0x174>
 801a06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a06e:	2200      	movs	r2, #0
 801a070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a076:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a07a:	b25b      	sxtb	r3, r3
 801a07c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a080:	d103      	bne.n	801a08a <xQueueGenericSend+0x18a>
 801a082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a084:	2200      	movs	r2, #0
 801a086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a08a:	f002 fb27 	bl	801c6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a08e:	1d3a      	adds	r2, r7, #4
 801a090:	f107 0314 	add.w	r3, r7, #20
 801a094:	4611      	mov	r1, r2
 801a096:	4618      	mov	r0, r3
 801a098:	f001 fb24 	bl	801b6e4 <xTaskCheckForTimeOut>
 801a09c:	4603      	mov	r3, r0
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d124      	bne.n	801a0ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a0a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a0a4:	f000 fd72 	bl	801ab8c <prvIsQueueFull>
 801a0a8:	4603      	mov	r3, r0
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d018      	beq.n	801a0e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0b0:	3310      	adds	r3, #16
 801a0b2:	687a      	ldr	r2, [r7, #4]
 801a0b4:	4611      	mov	r1, r2
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	f001 fa48 	bl	801b54c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801a0bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a0be:	f000 fcfd 	bl	801aabc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801a0c2:	f001 f875 	bl	801b1b0 <xTaskResumeAll>
 801a0c6:	4603      	mov	r3, r0
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	f47f af7c 	bne.w	8019fc6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801a0ce:	4b0c      	ldr	r3, [pc, #48]	@ (801a100 <xQueueGenericSend+0x200>)
 801a0d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a0d4:	601a      	str	r2, [r3, #0]
 801a0d6:	f3bf 8f4f 	dsb	sy
 801a0da:	f3bf 8f6f 	isb	sy
 801a0de:	e772      	b.n	8019fc6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801a0e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a0e2:	f000 fceb 	bl	801aabc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a0e6:	f001 f863 	bl	801b1b0 <xTaskResumeAll>
 801a0ea:	e76c      	b.n	8019fc6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801a0ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a0ee:	f000 fce5 	bl	801aabc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a0f2:	f001 f85d 	bl	801b1b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801a0f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	3738      	adds	r7, #56	@ 0x38
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	bd80      	pop	{r7, pc}
 801a100:	e000ed04 	.word	0xe000ed04

0801a104 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801a104:	b580      	push	{r7, lr}
 801a106:	b090      	sub	sp, #64	@ 0x40
 801a108:	af00      	add	r7, sp, #0
 801a10a:	60f8      	str	r0, [r7, #12]
 801a10c:	60b9      	str	r1, [r7, #8]
 801a10e:	607a      	str	r2, [r7, #4]
 801a110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801a116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d10b      	bne.n	801a134 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 801a11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a120:	f383 8811 	msr	BASEPRI, r3
 801a124:	f3bf 8f6f 	isb	sy
 801a128:	f3bf 8f4f 	dsb	sy
 801a12c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801a12e:	bf00      	nop
 801a130:	bf00      	nop
 801a132:	e7fd      	b.n	801a130 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a134:	68bb      	ldr	r3, [r7, #8]
 801a136:	2b00      	cmp	r3, #0
 801a138:	d103      	bne.n	801a142 <xQueueGenericSendFromISR+0x3e>
 801a13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a13c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d101      	bne.n	801a146 <xQueueGenericSendFromISR+0x42>
 801a142:	2301      	movs	r3, #1
 801a144:	e000      	b.n	801a148 <xQueueGenericSendFromISR+0x44>
 801a146:	2300      	movs	r3, #0
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d10b      	bne.n	801a164 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 801a14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a150:	f383 8811 	msr	BASEPRI, r3
 801a154:	f3bf 8f6f 	isb	sy
 801a158:	f3bf 8f4f 	dsb	sy
 801a15c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801a15e:	bf00      	nop
 801a160:	bf00      	nop
 801a162:	e7fd      	b.n	801a160 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a164:	683b      	ldr	r3, [r7, #0]
 801a166:	2b02      	cmp	r3, #2
 801a168:	d103      	bne.n	801a172 <xQueueGenericSendFromISR+0x6e>
 801a16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a16c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a16e:	2b01      	cmp	r3, #1
 801a170:	d101      	bne.n	801a176 <xQueueGenericSendFromISR+0x72>
 801a172:	2301      	movs	r3, #1
 801a174:	e000      	b.n	801a178 <xQueueGenericSendFromISR+0x74>
 801a176:	2300      	movs	r3, #0
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d10b      	bne.n	801a194 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 801a17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a180:	f383 8811 	msr	BASEPRI, r3
 801a184:	f3bf 8f6f 	isb	sy
 801a188:	f3bf 8f4f 	dsb	sy
 801a18c:	623b      	str	r3, [r7, #32]
}
 801a18e:	bf00      	nop
 801a190:	bf00      	nop
 801a192:	e7fd      	b.n	801a190 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a194:	f002 fb50 	bl	801c838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801a198:	f3ef 8211 	mrs	r2, BASEPRI
 801a19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1a0:	f383 8811 	msr	BASEPRI, r3
 801a1a4:	f3bf 8f6f 	isb	sy
 801a1a8:	f3bf 8f4f 	dsb	sy
 801a1ac:	61fa      	str	r2, [r7, #28]
 801a1ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801a1b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a1b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a1bc:	429a      	cmp	r2, r3
 801a1be:	d302      	bcc.n	801a1c6 <xQueueGenericSendFromISR+0xc2>
 801a1c0:	683b      	ldr	r3, [r7, #0]
 801a1c2:	2b02      	cmp	r3, #2
 801a1c4:	d12f      	bne.n	801a226 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a1cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a1d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a1d6:	683a      	ldr	r2, [r7, #0]
 801a1d8:	68b9      	ldr	r1, [r7, #8]
 801a1da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801a1dc:	f000 fbde 	bl	801a99c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a1e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801a1e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a1e8:	d112      	bne.n	801a210 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d016      	beq.n	801a220 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1f4:	3324      	adds	r3, #36	@ 0x24
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	f001 f9fa 	bl	801b5f0 <xTaskRemoveFromEventList>
 801a1fc:	4603      	mov	r3, r0
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d00e      	beq.n	801a220 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	2b00      	cmp	r3, #0
 801a206:	d00b      	beq.n	801a220 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	2201      	movs	r2, #1
 801a20c:	601a      	str	r2, [r3, #0]
 801a20e:	e007      	b.n	801a220 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a210:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801a214:	3301      	adds	r3, #1
 801a216:	b2db      	uxtb	r3, r3
 801a218:	b25a      	sxtb	r2, r3
 801a21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a21c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801a220:	2301      	movs	r3, #1
 801a222:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 801a224:	e001      	b.n	801a22a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a226:	2300      	movs	r3, #0
 801a228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a22a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a22c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801a22e:	697b      	ldr	r3, [r7, #20]
 801a230:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801a234:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801a238:	4618      	mov	r0, r3
 801a23a:	3740      	adds	r7, #64	@ 0x40
 801a23c:	46bd      	mov	sp, r7
 801a23e:	bd80      	pop	{r7, pc}

0801a240 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a240:	b580      	push	{r7, lr}
 801a242:	b08c      	sub	sp, #48	@ 0x30
 801a244:	af00      	add	r7, sp, #0
 801a246:	60f8      	str	r0, [r7, #12]
 801a248:	60b9      	str	r1, [r7, #8]
 801a24a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a24c:	2300      	movs	r3, #0
 801a24e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a256:	2b00      	cmp	r3, #0
 801a258:	d10b      	bne.n	801a272 <xQueueReceive+0x32>
	__asm volatile
 801a25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a25e:	f383 8811 	msr	BASEPRI, r3
 801a262:	f3bf 8f6f 	isb	sy
 801a266:	f3bf 8f4f 	dsb	sy
 801a26a:	623b      	str	r3, [r7, #32]
}
 801a26c:	bf00      	nop
 801a26e:	bf00      	nop
 801a270:	e7fd      	b.n	801a26e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a272:	68bb      	ldr	r3, [r7, #8]
 801a274:	2b00      	cmp	r3, #0
 801a276:	d103      	bne.n	801a280 <xQueueReceive+0x40>
 801a278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a27a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d101      	bne.n	801a284 <xQueueReceive+0x44>
 801a280:	2301      	movs	r3, #1
 801a282:	e000      	b.n	801a286 <xQueueReceive+0x46>
 801a284:	2300      	movs	r3, #0
 801a286:	2b00      	cmp	r3, #0
 801a288:	d10b      	bne.n	801a2a2 <xQueueReceive+0x62>
	__asm volatile
 801a28a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a28e:	f383 8811 	msr	BASEPRI, r3
 801a292:	f3bf 8f6f 	isb	sy
 801a296:	f3bf 8f4f 	dsb	sy
 801a29a:	61fb      	str	r3, [r7, #28]
}
 801a29c:	bf00      	nop
 801a29e:	bf00      	nop
 801a2a0:	e7fd      	b.n	801a29e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a2a2:	f001 fb7b 	bl	801b99c <xTaskGetSchedulerState>
 801a2a6:	4603      	mov	r3, r0
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d102      	bne.n	801a2b2 <xQueueReceive+0x72>
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d101      	bne.n	801a2b6 <xQueueReceive+0x76>
 801a2b2:	2301      	movs	r3, #1
 801a2b4:	e000      	b.n	801a2b8 <xQueueReceive+0x78>
 801a2b6:	2300      	movs	r3, #0
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d10b      	bne.n	801a2d4 <xQueueReceive+0x94>
	__asm volatile
 801a2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2c0:	f383 8811 	msr	BASEPRI, r3
 801a2c4:	f3bf 8f6f 	isb	sy
 801a2c8:	f3bf 8f4f 	dsb	sy
 801a2cc:	61bb      	str	r3, [r7, #24]
}
 801a2ce:	bf00      	nop
 801a2d0:	bf00      	nop
 801a2d2:	e7fd      	b.n	801a2d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a2d4:	f002 f9d0 	bl	801c678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a2dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d01f      	beq.n	801a324 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a2e4:	68b9      	ldr	r1, [r7, #8]
 801a2e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a2e8:	f000 fbc2 	bl	801aa70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2ee:	1e5a      	subs	r2, r3, #1
 801a2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2f6:	691b      	ldr	r3, [r3, #16]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d00f      	beq.n	801a31c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2fe:	3310      	adds	r3, #16
 801a300:	4618      	mov	r0, r3
 801a302:	f001 f975 	bl	801b5f0 <xTaskRemoveFromEventList>
 801a306:	4603      	mov	r3, r0
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d007      	beq.n	801a31c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a30c:	4b3c      	ldr	r3, [pc, #240]	@ (801a400 <xQueueReceive+0x1c0>)
 801a30e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a312:	601a      	str	r2, [r3, #0]
 801a314:	f3bf 8f4f 	dsb	sy
 801a318:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a31c:	f002 f9de 	bl	801c6dc <vPortExitCritical>
				return pdPASS;
 801a320:	2301      	movs	r3, #1
 801a322:	e069      	b.n	801a3f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	2b00      	cmp	r3, #0
 801a328:	d103      	bne.n	801a332 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a32a:	f002 f9d7 	bl	801c6dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a32e:	2300      	movs	r3, #0
 801a330:	e062      	b.n	801a3f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a334:	2b00      	cmp	r3, #0
 801a336:	d106      	bne.n	801a346 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a338:	f107 0310 	add.w	r3, r7, #16
 801a33c:	4618      	mov	r0, r3
 801a33e:	f001 f9bb 	bl	801b6b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a342:	2301      	movs	r3, #1
 801a344:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a346:	f002 f9c9 	bl	801c6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a34a:	f000 ff23 	bl	801b194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a34e:	f002 f993 	bl	801c678 <vPortEnterCritical>
 801a352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a354:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a358:	b25b      	sxtb	r3, r3
 801a35a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a35e:	d103      	bne.n	801a368 <xQueueReceive+0x128>
 801a360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a362:	2200      	movs	r2, #0
 801a364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a36a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a36e:	b25b      	sxtb	r3, r3
 801a370:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a374:	d103      	bne.n	801a37e <xQueueReceive+0x13e>
 801a376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a378:	2200      	movs	r2, #0
 801a37a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a37e:	f002 f9ad 	bl	801c6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a382:	1d3a      	adds	r2, r7, #4
 801a384:	f107 0310 	add.w	r3, r7, #16
 801a388:	4611      	mov	r1, r2
 801a38a:	4618      	mov	r0, r3
 801a38c:	f001 f9aa 	bl	801b6e4 <xTaskCheckForTimeOut>
 801a390:	4603      	mov	r3, r0
 801a392:	2b00      	cmp	r3, #0
 801a394:	d123      	bne.n	801a3de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a398:	f000 fbe2 	bl	801ab60 <prvIsQueueEmpty>
 801a39c:	4603      	mov	r3, r0
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d017      	beq.n	801a3d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3a4:	3324      	adds	r3, #36	@ 0x24
 801a3a6:	687a      	ldr	r2, [r7, #4]
 801a3a8:	4611      	mov	r1, r2
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	f001 f8ce 	bl	801b54c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a3b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a3b2:	f000 fb83 	bl	801aabc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a3b6:	f000 fefb 	bl	801b1b0 <xTaskResumeAll>
 801a3ba:	4603      	mov	r3, r0
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d189      	bne.n	801a2d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801a3c0:	4b0f      	ldr	r3, [pc, #60]	@ (801a400 <xQueueReceive+0x1c0>)
 801a3c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a3c6:	601a      	str	r2, [r3, #0]
 801a3c8:	f3bf 8f4f 	dsb	sy
 801a3cc:	f3bf 8f6f 	isb	sy
 801a3d0:	e780      	b.n	801a2d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801a3d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a3d4:	f000 fb72 	bl	801aabc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a3d8:	f000 feea 	bl	801b1b0 <xTaskResumeAll>
 801a3dc:	e77a      	b.n	801a2d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801a3de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a3e0:	f000 fb6c 	bl	801aabc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a3e4:	f000 fee4 	bl	801b1b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a3e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a3ea:	f000 fbb9 	bl	801ab60 <prvIsQueueEmpty>
 801a3ee:	4603      	mov	r3, r0
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	f43f af6f 	beq.w	801a2d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a3f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	3730      	adds	r7, #48	@ 0x30
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	bd80      	pop	{r7, pc}
 801a400:	e000ed04 	.word	0xe000ed04

0801a404 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801a404:	b580      	push	{r7, lr}
 801a406:	b08e      	sub	sp, #56	@ 0x38
 801a408:	af00      	add	r7, sp, #0
 801a40a:	6078      	str	r0, [r7, #4]
 801a40c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801a40e:	2300      	movs	r3, #0
 801a410:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801a416:	2300      	movs	r3, #0
 801a418:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d10b      	bne.n	801a438 <xQueueSemaphoreTake+0x34>
	__asm volatile
 801a420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a424:	f383 8811 	msr	BASEPRI, r3
 801a428:	f3bf 8f6f 	isb	sy
 801a42c:	f3bf 8f4f 	dsb	sy
 801a430:	623b      	str	r3, [r7, #32]
}
 801a432:	bf00      	nop
 801a434:	bf00      	nop
 801a436:	e7fd      	b.n	801a434 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a43a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d00b      	beq.n	801a458 <xQueueSemaphoreTake+0x54>
	__asm volatile
 801a440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a444:	f383 8811 	msr	BASEPRI, r3
 801a448:	f3bf 8f6f 	isb	sy
 801a44c:	f3bf 8f4f 	dsb	sy
 801a450:	61fb      	str	r3, [r7, #28]
}
 801a452:	bf00      	nop
 801a454:	bf00      	nop
 801a456:	e7fd      	b.n	801a454 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a458:	f001 faa0 	bl	801b99c <xTaskGetSchedulerState>
 801a45c:	4603      	mov	r3, r0
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d102      	bne.n	801a468 <xQueueSemaphoreTake+0x64>
 801a462:	683b      	ldr	r3, [r7, #0]
 801a464:	2b00      	cmp	r3, #0
 801a466:	d101      	bne.n	801a46c <xQueueSemaphoreTake+0x68>
 801a468:	2301      	movs	r3, #1
 801a46a:	e000      	b.n	801a46e <xQueueSemaphoreTake+0x6a>
 801a46c:	2300      	movs	r3, #0
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d10b      	bne.n	801a48a <xQueueSemaphoreTake+0x86>
	__asm volatile
 801a472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a476:	f383 8811 	msr	BASEPRI, r3
 801a47a:	f3bf 8f6f 	isb	sy
 801a47e:	f3bf 8f4f 	dsb	sy
 801a482:	61bb      	str	r3, [r7, #24]
}
 801a484:	bf00      	nop
 801a486:	bf00      	nop
 801a488:	e7fd      	b.n	801a486 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a48a:	f002 f8f5 	bl	801c678 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801a48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a492:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801a494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a496:	2b00      	cmp	r3, #0
 801a498:	d024      	beq.n	801a4e4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801a49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a49c:	1e5a      	subs	r2, r3, #1
 801a49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4a0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d104      	bne.n	801a4b4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801a4aa:	f001 fbf1 	bl	801bc90 <pvTaskIncrementMutexHeldCount>
 801a4ae:	4602      	mov	r2, r0
 801a4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4b6:	691b      	ldr	r3, [r3, #16]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d00f      	beq.n	801a4dc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4be:	3310      	adds	r3, #16
 801a4c0:	4618      	mov	r0, r3
 801a4c2:	f001 f895 	bl	801b5f0 <xTaskRemoveFromEventList>
 801a4c6:	4603      	mov	r3, r0
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d007      	beq.n	801a4dc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a4cc:	4b54      	ldr	r3, [pc, #336]	@ (801a620 <xQueueSemaphoreTake+0x21c>)
 801a4ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a4d2:	601a      	str	r2, [r3, #0]
 801a4d4:	f3bf 8f4f 	dsb	sy
 801a4d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a4dc:	f002 f8fe 	bl	801c6dc <vPortExitCritical>
				return pdPASS;
 801a4e0:	2301      	movs	r3, #1
 801a4e2:	e098      	b.n	801a616 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a4e4:	683b      	ldr	r3, [r7, #0]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d112      	bne.n	801a510 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d00b      	beq.n	801a508 <xQueueSemaphoreTake+0x104>
	__asm volatile
 801a4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4f4:	f383 8811 	msr	BASEPRI, r3
 801a4f8:	f3bf 8f6f 	isb	sy
 801a4fc:	f3bf 8f4f 	dsb	sy
 801a500:	617b      	str	r3, [r7, #20]
}
 801a502:	bf00      	nop
 801a504:	bf00      	nop
 801a506:	e7fd      	b.n	801a504 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801a508:	f002 f8e8 	bl	801c6dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a50c:	2300      	movs	r3, #0
 801a50e:	e082      	b.n	801a616 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a512:	2b00      	cmp	r3, #0
 801a514:	d106      	bne.n	801a524 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a516:	f107 030c 	add.w	r3, r7, #12
 801a51a:	4618      	mov	r0, r3
 801a51c:	f001 f8cc 	bl	801b6b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a520:	2301      	movs	r3, #1
 801a522:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a524:	f002 f8da 	bl	801c6dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a528:	f000 fe34 	bl	801b194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a52c:	f002 f8a4 	bl	801c678 <vPortEnterCritical>
 801a530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a532:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a536:	b25b      	sxtb	r3, r3
 801a538:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a53c:	d103      	bne.n	801a546 <xQueueSemaphoreTake+0x142>
 801a53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a540:	2200      	movs	r2, #0
 801a542:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a548:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a54c:	b25b      	sxtb	r3, r3
 801a54e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a552:	d103      	bne.n	801a55c <xQueueSemaphoreTake+0x158>
 801a554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a556:	2200      	movs	r2, #0
 801a558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a55c:	f002 f8be 	bl	801c6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a560:	463a      	mov	r2, r7
 801a562:	f107 030c 	add.w	r3, r7, #12
 801a566:	4611      	mov	r1, r2
 801a568:	4618      	mov	r0, r3
 801a56a:	f001 f8bb 	bl	801b6e4 <xTaskCheckForTimeOut>
 801a56e:	4603      	mov	r3, r0
 801a570:	2b00      	cmp	r3, #0
 801a572:	d132      	bne.n	801a5da <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a574:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a576:	f000 faf3 	bl	801ab60 <prvIsQueueEmpty>
 801a57a:	4603      	mov	r3, r0
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d026      	beq.n	801a5ce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	2b00      	cmp	r3, #0
 801a586:	d109      	bne.n	801a59c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801a588:	f002 f876 	bl	801c678 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a58e:	689b      	ldr	r3, [r3, #8]
 801a590:	4618      	mov	r0, r3
 801a592:	f001 fa21 	bl	801b9d8 <xTaskPriorityInherit>
 801a596:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801a598:	f002 f8a0 	bl	801c6dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a59e:	3324      	adds	r3, #36	@ 0x24
 801a5a0:	683a      	ldr	r2, [r7, #0]
 801a5a2:	4611      	mov	r1, r2
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	f000 ffd1 	bl	801b54c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a5aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a5ac:	f000 fa86 	bl	801aabc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a5b0:	f000 fdfe 	bl	801b1b0 <xTaskResumeAll>
 801a5b4:	4603      	mov	r3, r0
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	f47f af67 	bne.w	801a48a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801a5bc:	4b18      	ldr	r3, [pc, #96]	@ (801a620 <xQueueSemaphoreTake+0x21c>)
 801a5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a5c2:	601a      	str	r2, [r3, #0]
 801a5c4:	f3bf 8f4f 	dsb	sy
 801a5c8:	f3bf 8f6f 	isb	sy
 801a5cc:	e75d      	b.n	801a48a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801a5ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a5d0:	f000 fa74 	bl	801aabc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a5d4:	f000 fdec 	bl	801b1b0 <xTaskResumeAll>
 801a5d8:	e757      	b.n	801a48a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801a5da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a5dc:	f000 fa6e 	bl	801aabc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a5e0:	f000 fde6 	bl	801b1b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a5e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a5e6:	f000 fabb 	bl	801ab60 <prvIsQueueEmpty>
 801a5ea:	4603      	mov	r3, r0
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	f43f af4c 	beq.w	801a48a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801a5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d00d      	beq.n	801a614 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801a5f8:	f002 f83e 	bl	801c678 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a5fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a5fe:	f000 f9b5 	bl	801a96c <prvGetDisinheritPriorityAfterTimeout>
 801a602:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a606:	689b      	ldr	r3, [r3, #8]
 801a608:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a60a:	4618      	mov	r0, r3
 801a60c:	f001 fabc 	bl	801bb88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801a610:	f002 f864 	bl	801c6dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a614:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a616:	4618      	mov	r0, r3
 801a618:	3738      	adds	r7, #56	@ 0x38
 801a61a:	46bd      	mov	sp, r7
 801a61c:	bd80      	pop	{r7, pc}
 801a61e:	bf00      	nop
 801a620:	e000ed04 	.word	0xe000ed04

0801a624 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a624:	b580      	push	{r7, lr}
 801a626:	b08e      	sub	sp, #56	@ 0x38
 801a628:	af00      	add	r7, sp, #0
 801a62a:	60f8      	str	r0, [r7, #12]
 801a62c:	60b9      	str	r1, [r7, #8]
 801a62e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a630:	2300      	movs	r3, #0
 801a632:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d10b      	bne.n	801a656 <xQueuePeek+0x32>
	__asm volatile
 801a63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a642:	f383 8811 	msr	BASEPRI, r3
 801a646:	f3bf 8f6f 	isb	sy
 801a64a:	f3bf 8f4f 	dsb	sy
 801a64e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801a650:	bf00      	nop
 801a652:	bf00      	nop
 801a654:	e7fd      	b.n	801a652 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a656:	68bb      	ldr	r3, [r7, #8]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d103      	bne.n	801a664 <xQueuePeek+0x40>
 801a65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a660:	2b00      	cmp	r3, #0
 801a662:	d101      	bne.n	801a668 <xQueuePeek+0x44>
 801a664:	2301      	movs	r3, #1
 801a666:	e000      	b.n	801a66a <xQueuePeek+0x46>
 801a668:	2300      	movs	r3, #0
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d10b      	bne.n	801a686 <xQueuePeek+0x62>
	__asm volatile
 801a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a672:	f383 8811 	msr	BASEPRI, r3
 801a676:	f3bf 8f6f 	isb	sy
 801a67a:	f3bf 8f4f 	dsb	sy
 801a67e:	623b      	str	r3, [r7, #32]
}
 801a680:	bf00      	nop
 801a682:	bf00      	nop
 801a684:	e7fd      	b.n	801a682 <xQueuePeek+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a686:	f001 f989 	bl	801b99c <xTaskGetSchedulerState>
 801a68a:	4603      	mov	r3, r0
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d102      	bne.n	801a696 <xQueuePeek+0x72>
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	2b00      	cmp	r3, #0
 801a694:	d101      	bne.n	801a69a <xQueuePeek+0x76>
 801a696:	2301      	movs	r3, #1
 801a698:	e000      	b.n	801a69c <xQueuePeek+0x78>
 801a69a:	2300      	movs	r3, #0
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d10b      	bne.n	801a6b8 <xQueuePeek+0x94>
	__asm volatile
 801a6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a6a4:	f383 8811 	msr	BASEPRI, r3
 801a6a8:	f3bf 8f6f 	isb	sy
 801a6ac:	f3bf 8f4f 	dsb	sy
 801a6b0:	61fb      	str	r3, [r7, #28]
}
 801a6b2:	bf00      	nop
 801a6b4:	bf00      	nop
 801a6b6:	e7fd      	b.n	801a6b4 <xQueuePeek+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a6b8:	f001 ffde 	bl	801c678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a6c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d021      	beq.n	801a70c <xQueuePeek+0xe8>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 801a6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6ca:	68db      	ldr	r3, [r3, #12]
 801a6cc:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a6ce:	68b9      	ldr	r1, [r7, #8]
 801a6d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a6d2:	f000 f9cd 	bl	801aa70 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 801a6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a6da:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d00f      	beq.n	801a704 <xQueuePeek+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6e6:	3324      	adds	r3, #36	@ 0x24
 801a6e8:	4618      	mov	r0, r3
 801a6ea:	f000 ff81 	bl	801b5f0 <xTaskRemoveFromEventList>
 801a6ee:	4603      	mov	r3, r0
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	d007      	beq.n	801a704 <xQueuePeek+0xe0>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 801a6f4:	4b3c      	ldr	r3, [pc, #240]	@ (801a7e8 <xQueuePeek+0x1c4>)
 801a6f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a6fa:	601a      	str	r2, [r3, #0]
 801a6fc:	f3bf 8f4f 	dsb	sy
 801a700:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a704:	f001 ffea 	bl	801c6dc <vPortExitCritical>
				return pdPASS;
 801a708:	2301      	movs	r3, #1
 801a70a:	e069      	b.n	801a7e0 <xQueuePeek+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d103      	bne.n	801a71a <xQueuePeek+0xf6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a712:	f001 ffe3 	bl	801c6dc <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a716:	2300      	movs	r3, #0
 801a718:	e062      	b.n	801a7e0 <xQueuePeek+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d106      	bne.n	801a72e <xQueuePeek+0x10a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a720:	f107 0314 	add.w	r3, r7, #20
 801a724:	4618      	mov	r0, r3
 801a726:	f000 ffc7 	bl	801b6b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a72a:	2301      	movs	r3, #1
 801a72c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a72e:	f001 ffd5 	bl	801c6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a732:	f000 fd2f 	bl	801b194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a736:	f001 ff9f 	bl	801c678 <vPortEnterCritical>
 801a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a73c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a740:	b25b      	sxtb	r3, r3
 801a742:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a746:	d103      	bne.n	801a750 <xQueuePeek+0x12c>
 801a748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a74a:	2200      	movs	r2, #0
 801a74c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a752:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a756:	b25b      	sxtb	r3, r3
 801a758:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a75c:	d103      	bne.n	801a766 <xQueuePeek+0x142>
 801a75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a760:	2200      	movs	r2, #0
 801a762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a766:	f001 ffb9 	bl	801c6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a76a:	1d3a      	adds	r2, r7, #4
 801a76c:	f107 0314 	add.w	r3, r7, #20
 801a770:	4611      	mov	r1, r2
 801a772:	4618      	mov	r0, r3
 801a774:	f000 ffb6 	bl	801b6e4 <xTaskCheckForTimeOut>
 801a778:	4603      	mov	r3, r0
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d123      	bne.n	801a7c6 <xQueuePeek+0x1a2>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a77e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a780:	f000 f9ee 	bl	801ab60 <prvIsQueueEmpty>
 801a784:	4603      	mov	r3, r0
 801a786:	2b00      	cmp	r3, #0
 801a788:	d017      	beq.n	801a7ba <xQueuePeek+0x196>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a78c:	3324      	adds	r3, #36	@ 0x24
 801a78e:	687a      	ldr	r2, [r7, #4]
 801a790:	4611      	mov	r1, r2
 801a792:	4618      	mov	r0, r3
 801a794:	f000 feda 	bl	801b54c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a79a:	f000 f98f 	bl	801aabc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a79e:	f000 fd07 	bl	801b1b0 <xTaskResumeAll>
 801a7a2:	4603      	mov	r3, r0
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d187      	bne.n	801a6b8 <xQueuePeek+0x94>
				{
					portYIELD_WITHIN_API();
 801a7a8:	4b0f      	ldr	r3, [pc, #60]	@ (801a7e8 <xQueuePeek+0x1c4>)
 801a7aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a7ae:	601a      	str	r2, [r3, #0]
 801a7b0:	f3bf 8f4f 	dsb	sy
 801a7b4:	f3bf 8f6f 	isb	sy
 801a7b8:	e77e      	b.n	801a6b8 <xQueuePeek+0x94>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 801a7ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a7bc:	f000 f97e 	bl	801aabc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a7c0:	f000 fcf6 	bl	801b1b0 <xTaskResumeAll>
 801a7c4:	e778      	b.n	801a6b8 <xQueuePeek+0x94>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 801a7c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a7c8:	f000 f978 	bl	801aabc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a7cc:	f000 fcf0 	bl	801b1b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a7d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a7d2:	f000 f9c5 	bl	801ab60 <prvIsQueueEmpty>
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	f43f af6d 	beq.w	801a6b8 <xQueuePeek+0x94>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a7de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	3738      	adds	r7, #56	@ 0x38
 801a7e4:	46bd      	mov	sp, r7
 801a7e6:	bd80      	pop	{r7, pc}
 801a7e8:	e000ed04 	.word	0xe000ed04

0801a7ec <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b08e      	sub	sp, #56	@ 0x38
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	60f8      	str	r0, [r7, #12]
 801a7f4:	60b9      	str	r1, [r7, #8]
 801a7f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801a7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d10b      	bne.n	801a81a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801a802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a806:	f383 8811 	msr	BASEPRI, r3
 801a80a:	f3bf 8f6f 	isb	sy
 801a80e:	f3bf 8f4f 	dsb	sy
 801a812:	623b      	str	r3, [r7, #32]
}
 801a814:	bf00      	nop
 801a816:	bf00      	nop
 801a818:	e7fd      	b.n	801a816 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a81a:	68bb      	ldr	r3, [r7, #8]
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d103      	bne.n	801a828 <xQueueReceiveFromISR+0x3c>
 801a820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a824:	2b00      	cmp	r3, #0
 801a826:	d101      	bne.n	801a82c <xQueueReceiveFromISR+0x40>
 801a828:	2301      	movs	r3, #1
 801a82a:	e000      	b.n	801a82e <xQueueReceiveFromISR+0x42>
 801a82c:	2300      	movs	r3, #0
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d10b      	bne.n	801a84a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801a832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a836:	f383 8811 	msr	BASEPRI, r3
 801a83a:	f3bf 8f6f 	isb	sy
 801a83e:	f3bf 8f4f 	dsb	sy
 801a842:	61fb      	str	r3, [r7, #28]
}
 801a844:	bf00      	nop
 801a846:	bf00      	nop
 801a848:	e7fd      	b.n	801a846 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a84a:	f001 fff5 	bl	801c838 <vPortValidateInterruptPriority>
	__asm volatile
 801a84e:	f3ef 8211 	mrs	r2, BASEPRI
 801a852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a856:	f383 8811 	msr	BASEPRI, r3
 801a85a:	f3bf 8f6f 	isb	sy
 801a85e:	f3bf 8f4f 	dsb	sy
 801a862:	61ba      	str	r2, [r7, #24]
 801a864:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801a866:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a868:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a86e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a872:	2b00      	cmp	r3, #0
 801a874:	d02f      	beq.n	801a8d6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801a876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a878:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a87c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a880:	68b9      	ldr	r1, [r7, #8]
 801a882:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a884:	f000 f8f4 	bl	801aa70 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a88a:	1e5a      	subs	r2, r3, #1
 801a88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a88e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801a890:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a898:	d112      	bne.n	801a8c0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a89c:	691b      	ldr	r3, [r3, #16]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d016      	beq.n	801a8d0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8a4:	3310      	adds	r3, #16
 801a8a6:	4618      	mov	r0, r3
 801a8a8:	f000 fea2 	bl	801b5f0 <xTaskRemoveFromEventList>
 801a8ac:	4603      	mov	r3, r0
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d00e      	beq.n	801a8d0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d00b      	beq.n	801a8d0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	2201      	movs	r2, #1
 801a8bc:	601a      	str	r2, [r3, #0]
 801a8be:	e007      	b.n	801a8d0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801a8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a8c4:	3301      	adds	r3, #1
 801a8c6:	b2db      	uxtb	r3, r3
 801a8c8:	b25a      	sxtb	r2, r3
 801a8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801a8d0:	2301      	movs	r3, #1
 801a8d2:	637b      	str	r3, [r7, #52]	@ 0x34
 801a8d4:	e001      	b.n	801a8da <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801a8d6:	2300      	movs	r3, #0
 801a8d8:	637b      	str	r3, [r7, #52]	@ 0x34
 801a8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 801a8de:	693b      	ldr	r3, [r7, #16]
 801a8e0:	f383 8811 	msr	BASEPRI, r3
}
 801a8e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a8e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	3738      	adds	r7, #56	@ 0x38
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	bd80      	pop	{r7, pc}

0801a8f0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b084      	sub	sp, #16
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d10b      	bne.n	801a916 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 801a8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a902:	f383 8811 	msr	BASEPRI, r3
 801a906:	f3bf 8f6f 	isb	sy
 801a90a:	f3bf 8f4f 	dsb	sy
 801a90e:	60bb      	str	r3, [r7, #8]
}
 801a910:	bf00      	nop
 801a912:	bf00      	nop
 801a914:	e7fd      	b.n	801a912 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 801a916:	f001 feaf 	bl	801c678 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a91e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801a920:	f001 fedc 	bl	801c6dc <vPortExitCritical>

	return uxReturn;
 801a924:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801a926:	4618      	mov	r0, r3
 801a928:	3710      	adds	r7, #16
 801a92a:	46bd      	mov	sp, r7
 801a92c:	bd80      	pop	{r7, pc}

0801a92e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801a92e:	b480      	push	{r7}
 801a930:	b087      	sub	sp, #28
 801a932:	af00      	add	r7, sp, #0
 801a934:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 801a93a:	697b      	ldr	r3, [r7, #20]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d10b      	bne.n	801a958 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 801a940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a944:	f383 8811 	msr	BASEPRI, r3
 801a948:	f3bf 8f6f 	isb	sy
 801a94c:	f3bf 8f4f 	dsb	sy
 801a950:	60fb      	str	r3, [r7, #12]
}
 801a952:	bf00      	nop
 801a954:	bf00      	nop
 801a956:	e7fd      	b.n	801a954 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 801a958:	697b      	ldr	r3, [r7, #20]
 801a95a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a95c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801a95e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801a960:	4618      	mov	r0, r3
 801a962:	371c      	adds	r7, #28
 801a964:	46bd      	mov	sp, r7
 801a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a96a:	4770      	bx	lr

0801a96c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a96c:	b480      	push	{r7}
 801a96e:	b085      	sub	sp, #20
 801a970:	af00      	add	r7, sp, #0
 801a972:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d006      	beq.n	801a98a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801a986:	60fb      	str	r3, [r7, #12]
 801a988:	e001      	b.n	801a98e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801a98a:	2300      	movs	r3, #0
 801a98c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801a98e:	68fb      	ldr	r3, [r7, #12]
	}
 801a990:	4618      	mov	r0, r3
 801a992:	3714      	adds	r7, #20
 801a994:	46bd      	mov	sp, r7
 801a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a99a:	4770      	bx	lr

0801a99c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a99c:	b580      	push	{r7, lr}
 801a99e:	b086      	sub	sp, #24
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	60f8      	str	r0, [r7, #12]
 801a9a4:	60b9      	str	r1, [r7, #8]
 801a9a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a9a8:	2300      	movs	r3, #0
 801a9aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a9b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a9b2:	68fb      	ldr	r3, [r7, #12]
 801a9b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d10d      	bne.n	801a9d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d14d      	bne.n	801aa5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	689b      	ldr	r3, [r3, #8]
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	f001 f86e 	bl	801baa8 <xTaskPriorityDisinherit>
 801a9cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	609a      	str	r2, [r3, #8]
 801a9d4:	e043      	b.n	801aa5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d119      	bne.n	801aa10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a9dc:	68fb      	ldr	r3, [r7, #12]
 801a9de:	6858      	ldr	r0, [r3, #4]
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a9e4:	461a      	mov	r2, r3
 801a9e6:	68b9      	ldr	r1, [r7, #8]
 801a9e8:	f01c fdb6 	bl	8037558 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	685a      	ldr	r2, [r3, #4]
 801a9f0:	68fb      	ldr	r3, [r7, #12]
 801a9f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a9f4:	441a      	add	r2, r3
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	685a      	ldr	r2, [r3, #4]
 801a9fe:	68fb      	ldr	r3, [r7, #12]
 801aa00:	689b      	ldr	r3, [r3, #8]
 801aa02:	429a      	cmp	r2, r3
 801aa04:	d32b      	bcc.n	801aa5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	681a      	ldr	r2, [r3, #0]
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	605a      	str	r2, [r3, #4]
 801aa0e:	e026      	b.n	801aa5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801aa10:	68fb      	ldr	r3, [r7, #12]
 801aa12:	68d8      	ldr	r0, [r3, #12]
 801aa14:	68fb      	ldr	r3, [r7, #12]
 801aa16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aa18:	461a      	mov	r2, r3
 801aa1a:	68b9      	ldr	r1, [r7, #8]
 801aa1c:	f01c fd9c 	bl	8037558 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801aa20:	68fb      	ldr	r3, [r7, #12]
 801aa22:	68da      	ldr	r2, [r3, #12]
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aa28:	425b      	negs	r3, r3
 801aa2a:	441a      	add	r2, r3
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	68da      	ldr	r2, [r3, #12]
 801aa34:	68fb      	ldr	r3, [r7, #12]
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	429a      	cmp	r2, r3
 801aa3a:	d207      	bcs.n	801aa4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	689a      	ldr	r2, [r3, #8]
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aa44:	425b      	negs	r3, r3
 801aa46:	441a      	add	r2, r3
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	2b02      	cmp	r3, #2
 801aa50:	d105      	bne.n	801aa5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801aa52:	693b      	ldr	r3, [r7, #16]
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d002      	beq.n	801aa5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801aa58:	693b      	ldr	r3, [r7, #16]
 801aa5a:	3b01      	subs	r3, #1
 801aa5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801aa5e:	693b      	ldr	r3, [r7, #16]
 801aa60:	1c5a      	adds	r2, r3, #1
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801aa66:	697b      	ldr	r3, [r7, #20]
}
 801aa68:	4618      	mov	r0, r3
 801aa6a:	3718      	adds	r7, #24
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	bd80      	pop	{r7, pc}

0801aa70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b082      	sub	sp, #8
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
 801aa78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d018      	beq.n	801aab4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	68da      	ldr	r2, [r3, #12]
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aa8a:	441a      	add	r2, r3
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	68da      	ldr	r2, [r3, #12]
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	689b      	ldr	r3, [r3, #8]
 801aa98:	429a      	cmp	r2, r3
 801aa9a:	d303      	bcc.n	801aaa4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	681a      	ldr	r2, [r3, #0]
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	68d9      	ldr	r1, [r3, #12]
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aaac:	461a      	mov	r2, r3
 801aaae:	6838      	ldr	r0, [r7, #0]
 801aab0:	f01c fd52 	bl	8037558 <memcpy>
	}
}
 801aab4:	bf00      	nop
 801aab6:	3708      	adds	r7, #8
 801aab8:	46bd      	mov	sp, r7
 801aaba:	bd80      	pop	{r7, pc}

0801aabc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b084      	sub	sp, #16
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801aac4:	f001 fdd8 	bl	801c678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801aace:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801aad0:	e011      	b.n	801aaf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d012      	beq.n	801ab00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	3324      	adds	r3, #36	@ 0x24
 801aade:	4618      	mov	r0, r3
 801aae0:	f000 fd86 	bl	801b5f0 <xTaskRemoveFromEventList>
 801aae4:	4603      	mov	r3, r0
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d001      	beq.n	801aaee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801aaea:	f000 fe5f 	bl	801b7ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801aaee:	7bfb      	ldrb	r3, [r7, #15]
 801aaf0:	3b01      	subs	r3, #1
 801aaf2:	b2db      	uxtb	r3, r3
 801aaf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801aaf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	dce9      	bgt.n	801aad2 <prvUnlockQueue+0x16>
 801aafe:	e000      	b.n	801ab02 <prvUnlockQueue+0x46>
					break;
 801ab00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	22ff      	movs	r2, #255	@ 0xff
 801ab06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801ab0a:	f001 fde7 	bl	801c6dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801ab0e:	f001 fdb3 	bl	801c678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801ab18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ab1a:	e011      	b.n	801ab40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	691b      	ldr	r3, [r3, #16]
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	d012      	beq.n	801ab4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	3310      	adds	r3, #16
 801ab28:	4618      	mov	r0, r3
 801ab2a:	f000 fd61 	bl	801b5f0 <xTaskRemoveFromEventList>
 801ab2e:	4603      	mov	r3, r0
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d001      	beq.n	801ab38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801ab34:	f000 fe3a 	bl	801b7ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801ab38:	7bbb      	ldrb	r3, [r7, #14]
 801ab3a:	3b01      	subs	r3, #1
 801ab3c:	b2db      	uxtb	r3, r3
 801ab3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ab40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	dce9      	bgt.n	801ab1c <prvUnlockQueue+0x60>
 801ab48:	e000      	b.n	801ab4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801ab4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	22ff      	movs	r2, #255	@ 0xff
 801ab50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801ab54:	f001 fdc2 	bl	801c6dc <vPortExitCritical>
}
 801ab58:	bf00      	nop
 801ab5a:	3710      	adds	r7, #16
 801ab5c:	46bd      	mov	sp, r7
 801ab5e:	bd80      	pop	{r7, pc}

0801ab60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801ab60:	b580      	push	{r7, lr}
 801ab62:	b084      	sub	sp, #16
 801ab64:	af00      	add	r7, sp, #0
 801ab66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801ab68:	f001 fd86 	bl	801c678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d102      	bne.n	801ab7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801ab74:	2301      	movs	r3, #1
 801ab76:	60fb      	str	r3, [r7, #12]
 801ab78:	e001      	b.n	801ab7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801ab7e:	f001 fdad 	bl	801c6dc <vPortExitCritical>

	return xReturn;
 801ab82:	68fb      	ldr	r3, [r7, #12]
}
 801ab84:	4618      	mov	r0, r3
 801ab86:	3710      	adds	r7, #16
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	bd80      	pop	{r7, pc}

0801ab8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b084      	sub	sp, #16
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801ab94:	f001 fd70 	bl	801c678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801aba0:	429a      	cmp	r2, r3
 801aba2:	d102      	bne.n	801abaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801aba4:	2301      	movs	r3, #1
 801aba6:	60fb      	str	r3, [r7, #12]
 801aba8:	e001      	b.n	801abae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801abaa:	2300      	movs	r3, #0
 801abac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801abae:	f001 fd95 	bl	801c6dc <vPortExitCritical>

	return xReturn;
 801abb2:	68fb      	ldr	r3, [r7, #12]
}
 801abb4:	4618      	mov	r0, r3
 801abb6:	3710      	adds	r7, #16
 801abb8:	46bd      	mov	sp, r7
 801abba:	bd80      	pop	{r7, pc}

0801abbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801abbc:	b480      	push	{r7}
 801abbe:	b085      	sub	sp, #20
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
 801abc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801abc6:	2300      	movs	r3, #0
 801abc8:	60fb      	str	r3, [r7, #12]
 801abca:	e014      	b.n	801abf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801abcc:	4a0f      	ldr	r2, [pc, #60]	@ (801ac0c <vQueueAddToRegistry+0x50>)
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d10b      	bne.n	801abf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801abd8:	490c      	ldr	r1, [pc, #48]	@ (801ac0c <vQueueAddToRegistry+0x50>)
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	683a      	ldr	r2, [r7, #0]
 801abde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801abe2:	4a0a      	ldr	r2, [pc, #40]	@ (801ac0c <vQueueAddToRegistry+0x50>)
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	00db      	lsls	r3, r3, #3
 801abe8:	4413      	add	r3, r2
 801abea:	687a      	ldr	r2, [r7, #4]
 801abec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801abee:	e006      	b.n	801abfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801abf0:	68fb      	ldr	r3, [r7, #12]
 801abf2:	3301      	adds	r3, #1
 801abf4:	60fb      	str	r3, [r7, #12]
 801abf6:	68fb      	ldr	r3, [r7, #12]
 801abf8:	2b07      	cmp	r3, #7
 801abfa:	d9e7      	bls.n	801abcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801abfc:	bf00      	nop
 801abfe:	bf00      	nop
 801ac00:	3714      	adds	r7, #20
 801ac02:	46bd      	mov	sp, r7
 801ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac08:	4770      	bx	lr
 801ac0a:	bf00      	nop
 801ac0c:	20001968 	.word	0x20001968

0801ac10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ac10:	b580      	push	{r7, lr}
 801ac12:	b086      	sub	sp, #24
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	60f8      	str	r0, [r7, #12]
 801ac18:	60b9      	str	r1, [r7, #8]
 801ac1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801ac20:	f001 fd2a 	bl	801c678 <vPortEnterCritical>
 801ac24:	697b      	ldr	r3, [r7, #20]
 801ac26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801ac2a:	b25b      	sxtb	r3, r3
 801ac2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ac30:	d103      	bne.n	801ac3a <vQueueWaitForMessageRestricted+0x2a>
 801ac32:	697b      	ldr	r3, [r7, #20]
 801ac34:	2200      	movs	r2, #0
 801ac36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801ac3a:	697b      	ldr	r3, [r7, #20]
 801ac3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801ac40:	b25b      	sxtb	r3, r3
 801ac42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ac46:	d103      	bne.n	801ac50 <vQueueWaitForMessageRestricted+0x40>
 801ac48:	697b      	ldr	r3, [r7, #20]
 801ac4a:	2200      	movs	r2, #0
 801ac4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801ac50:	f001 fd44 	bl	801c6dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801ac54:	697b      	ldr	r3, [r7, #20]
 801ac56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d106      	bne.n	801ac6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801ac5c:	697b      	ldr	r3, [r7, #20]
 801ac5e:	3324      	adds	r3, #36	@ 0x24
 801ac60:	687a      	ldr	r2, [r7, #4]
 801ac62:	68b9      	ldr	r1, [r7, #8]
 801ac64:	4618      	mov	r0, r3
 801ac66:	f000 fc97 	bl	801b598 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801ac6a:	6978      	ldr	r0, [r7, #20]
 801ac6c:	f7ff ff26 	bl	801aabc <prvUnlockQueue>
	}
 801ac70:	bf00      	nop
 801ac72:	3718      	adds	r7, #24
 801ac74:	46bd      	mov	sp, r7
 801ac76:	bd80      	pop	{r7, pc}

0801ac78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801ac78:	b580      	push	{r7, lr}
 801ac7a:	b08e      	sub	sp, #56	@ 0x38
 801ac7c:	af04      	add	r7, sp, #16
 801ac7e:	60f8      	str	r0, [r7, #12]
 801ac80:	60b9      	str	r1, [r7, #8]
 801ac82:	607a      	str	r2, [r7, #4]
 801ac84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801ac86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d10b      	bne.n	801aca4 <xTaskCreateStatic+0x2c>
	__asm volatile
 801ac8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ac90:	f383 8811 	msr	BASEPRI, r3
 801ac94:	f3bf 8f6f 	isb	sy
 801ac98:	f3bf 8f4f 	dsb	sy
 801ac9c:	623b      	str	r3, [r7, #32]
}
 801ac9e:	bf00      	nop
 801aca0:	bf00      	nop
 801aca2:	e7fd      	b.n	801aca0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801aca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d10b      	bne.n	801acc2 <xTaskCreateStatic+0x4a>
	__asm volatile
 801acaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801acae:	f383 8811 	msr	BASEPRI, r3
 801acb2:	f3bf 8f6f 	isb	sy
 801acb6:	f3bf 8f4f 	dsb	sy
 801acba:	61fb      	str	r3, [r7, #28]
}
 801acbc:	bf00      	nop
 801acbe:	bf00      	nop
 801acc0:	e7fd      	b.n	801acbe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801acc2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 801acc6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801acc8:	693b      	ldr	r3, [r7, #16]
 801acca:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 801acce:	d00b      	beq.n	801ace8 <xTaskCreateStatic+0x70>
	__asm volatile
 801acd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801acd4:	f383 8811 	msr	BASEPRI, r3
 801acd8:	f3bf 8f6f 	isb	sy
 801acdc:	f3bf 8f4f 	dsb	sy
 801ace0:	61bb      	str	r3, [r7, #24]
}
 801ace2:	bf00      	nop
 801ace4:	bf00      	nop
 801ace6:	e7fd      	b.n	801ace4 <xTaskCreateStatic+0x6c>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801ace8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801acea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801acec:	2b00      	cmp	r3, #0
 801acee:	d01e      	beq.n	801ad2e <xTaskCreateStatic+0xb6>
 801acf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d01b      	beq.n	801ad2e <xTaskCreateStatic+0xb6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801acf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801acf8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801acfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801acfe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801ad00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad02:	2202      	movs	r2, #2
 801ad04:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801ad08:	2300      	movs	r3, #0
 801ad0a:	9303      	str	r3, [sp, #12]
 801ad0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad0e:	9302      	str	r3, [sp, #8]
 801ad10:	f107 0314 	add.w	r3, r7, #20
 801ad14:	9301      	str	r3, [sp, #4]
 801ad16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad18:	9300      	str	r3, [sp, #0]
 801ad1a:	683b      	ldr	r3, [r7, #0]
 801ad1c:	687a      	ldr	r2, [r7, #4]
 801ad1e:	68b9      	ldr	r1, [r7, #8]
 801ad20:	68f8      	ldr	r0, [r7, #12]
 801ad22:	f000 f851 	bl	801adc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ad26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ad28:	f000 f91e 	bl	801af68 <prvAddNewTaskToReadyList>
 801ad2c:	e001      	b.n	801ad32 <xTaskCreateStatic+0xba>
		}
		else
		{
			xReturn = NULL;
 801ad2e:	2300      	movs	r3, #0
 801ad30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801ad32:	697b      	ldr	r3, [r7, #20]
	}
 801ad34:	4618      	mov	r0, r3
 801ad36:	3728      	adds	r7, #40	@ 0x28
 801ad38:	46bd      	mov	sp, r7
 801ad3a:	bd80      	pop	{r7, pc}

0801ad3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	b08c      	sub	sp, #48	@ 0x30
 801ad40:	af04      	add	r7, sp, #16
 801ad42:	60f8      	str	r0, [r7, #12]
 801ad44:	60b9      	str	r1, [r7, #8]
 801ad46:	603b      	str	r3, [r7, #0]
 801ad48:	4613      	mov	r3, r2
 801ad4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801ad4c:	88fb      	ldrh	r3, [r7, #6]
 801ad4e:	009b      	lsls	r3, r3, #2
 801ad50:	4618      	mov	r0, r3
 801ad52:	f001 fdb3 	bl	801c8bc <pvPortMalloc>
 801ad56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801ad58:	697b      	ldr	r3, [r7, #20]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d00f      	beq.n	801ad7e <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801ad5e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801ad62:	f001 fdab 	bl	801c8bc <pvPortMalloc>
 801ad66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801ad68:	69fb      	ldr	r3, [r7, #28]
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d003      	beq.n	801ad76 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801ad6e:	69fb      	ldr	r3, [r7, #28]
 801ad70:	697a      	ldr	r2, [r7, #20]
 801ad72:	631a      	str	r2, [r3, #48]	@ 0x30
 801ad74:	e005      	b.n	801ad82 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801ad76:	6978      	ldr	r0, [r7, #20]
 801ad78:	f001 fe6e 	bl	801ca58 <vPortFree>
 801ad7c:	e001      	b.n	801ad82 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801ad7e:	2300      	movs	r3, #0
 801ad80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801ad82:	69fb      	ldr	r3, [r7, #28]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d017      	beq.n	801adb8 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801ad88:	69fb      	ldr	r3, [r7, #28]
 801ad8a:	2200      	movs	r2, #0
 801ad8c:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801ad90:	88fa      	ldrh	r2, [r7, #6]
 801ad92:	2300      	movs	r3, #0
 801ad94:	9303      	str	r3, [sp, #12]
 801ad96:	69fb      	ldr	r3, [r7, #28]
 801ad98:	9302      	str	r3, [sp, #8]
 801ad9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad9c:	9301      	str	r3, [sp, #4]
 801ad9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ada0:	9300      	str	r3, [sp, #0]
 801ada2:	683b      	ldr	r3, [r7, #0]
 801ada4:	68b9      	ldr	r1, [r7, #8]
 801ada6:	68f8      	ldr	r0, [r7, #12]
 801ada8:	f000 f80e 	bl	801adc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801adac:	69f8      	ldr	r0, [r7, #28]
 801adae:	f000 f8db 	bl	801af68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801adb2:	2301      	movs	r3, #1
 801adb4:	61bb      	str	r3, [r7, #24]
 801adb6:	e002      	b.n	801adbe <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801adb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801adbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801adbe:	69bb      	ldr	r3, [r7, #24]
	}
 801adc0:	4618      	mov	r0, r3
 801adc2:	3720      	adds	r7, #32
 801adc4:	46bd      	mov	sp, r7
 801adc6:	bd80      	pop	{r7, pc}

0801adc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801adc8:	b580      	push	{r7, lr}
 801adca:	b088      	sub	sp, #32
 801adcc:	af00      	add	r7, sp, #0
 801adce:	60f8      	str	r0, [r7, #12]
 801add0:	60b9      	str	r1, [r7, #8]
 801add2:	607a      	str	r2, [r7, #4]
 801add4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801add6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801add8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	009b      	lsls	r3, r3, #2
 801adde:	461a      	mov	r2, r3
 801ade0:	21a5      	movs	r1, #165	@ 0xa5
 801ade2:	f01b f97d 	bl	80360e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801ade6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ade8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801adf0:	3b01      	subs	r3, #1
 801adf2:	009b      	lsls	r3, r3, #2
 801adf4:	4413      	add	r3, r2
 801adf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801adf8:	69bb      	ldr	r3, [r7, #24]
 801adfa:	f023 0307 	bic.w	r3, r3, #7
 801adfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801ae00:	69bb      	ldr	r3, [r7, #24]
 801ae02:	f003 0307 	and.w	r3, r3, #7
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d00b      	beq.n	801ae22 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801ae0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ae0e:	f383 8811 	msr	BASEPRI, r3
 801ae12:	f3bf 8f6f 	isb	sy
 801ae16:	f3bf 8f4f 	dsb	sy
 801ae1a:	617b      	str	r3, [r7, #20]
}
 801ae1c:	bf00      	nop
 801ae1e:	bf00      	nop
 801ae20:	e7fd      	b.n	801ae1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801ae22:	68bb      	ldr	r3, [r7, #8]
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d01f      	beq.n	801ae68 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ae28:	2300      	movs	r3, #0
 801ae2a:	61fb      	str	r3, [r7, #28]
 801ae2c:	e012      	b.n	801ae54 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801ae2e:	68ba      	ldr	r2, [r7, #8]
 801ae30:	69fb      	ldr	r3, [r7, #28]
 801ae32:	4413      	add	r3, r2
 801ae34:	7819      	ldrb	r1, [r3, #0]
 801ae36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ae38:	69fb      	ldr	r3, [r7, #28]
 801ae3a:	4413      	add	r3, r2
 801ae3c:	3334      	adds	r3, #52	@ 0x34
 801ae3e:	460a      	mov	r2, r1
 801ae40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801ae42:	68ba      	ldr	r2, [r7, #8]
 801ae44:	69fb      	ldr	r3, [r7, #28]
 801ae46:	4413      	add	r3, r2
 801ae48:	781b      	ldrb	r3, [r3, #0]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d006      	beq.n	801ae5c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ae4e:	69fb      	ldr	r3, [r7, #28]
 801ae50:	3301      	adds	r3, #1
 801ae52:	61fb      	str	r3, [r7, #28]
 801ae54:	69fb      	ldr	r3, [r7, #28]
 801ae56:	2b0f      	cmp	r3, #15
 801ae58:	d9e9      	bls.n	801ae2e <prvInitialiseNewTask+0x66>
 801ae5a:	e000      	b.n	801ae5e <prvInitialiseNewTask+0x96>
			{
				break;
 801ae5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801ae5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae60:	2200      	movs	r2, #0
 801ae62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801ae66:	e003      	b.n	801ae70 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801ae68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae6a:	2200      	movs	r2, #0
 801ae6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801ae70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae72:	2b37      	cmp	r3, #55	@ 0x37
 801ae74:	d901      	bls.n	801ae7a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801ae76:	2337      	movs	r3, #55	@ 0x37
 801ae78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801ae7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ae7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801ae80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ae84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801ae86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae88:	2200      	movs	r2, #0
 801ae8a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801ae8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae8e:	3304      	adds	r3, #4
 801ae90:	4618      	mov	r0, r3
 801ae92:	f7fe fda3 	bl	80199dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801ae96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae98:	3318      	adds	r3, #24
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	f7fe fd9e 	bl	80199dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801aea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aea4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aea8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801aeac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aeae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801aeb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aeb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aeb4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801aeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aeb8:	2200      	movs	r2, #0
 801aeba:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801aebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aec0:	2200      	movs	r2, #0
 801aec2:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801aec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aec8:	3358      	adds	r3, #88	@ 0x58
 801aeca:	f44f 7290 	mov.w	r2, #288	@ 0x120
 801aece:	2100      	movs	r1, #0
 801aed0:	4618      	mov	r0, r3
 801aed2:	f01b f905 	bl	80360e0 <memset>
 801aed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aed8:	4a20      	ldr	r2, [pc, #128]	@ (801af5c <prvInitialiseNewTask+0x194>)
 801aeda:	65da      	str	r2, [r3, #92]	@ 0x5c
 801aedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aede:	4a20      	ldr	r2, [pc, #128]	@ (801af60 <prvInitialiseNewTask+0x198>)
 801aee0:	661a      	str	r2, [r3, #96]	@ 0x60
 801aee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aee4:	4a1f      	ldr	r2, [pc, #124]	@ (801af64 <prvInitialiseNewTask+0x19c>)
 801aee6:	665a      	str	r2, [r3, #100]	@ 0x64
 801aee8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801aeea:	f04f 0201 	mov.w	r2, #1
 801aeee:	f04f 0300 	mov.w	r3, #0
 801aef2:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
 801aef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aef8:	f243 320e 	movw	r2, #13070	@ 0x330e
 801aefc:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 801af00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af02:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 801af06:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
 801af0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af0c:	f241 2234 	movw	r2, #4660	@ 0x1234
 801af10:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
 801af14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af16:	f24e 626d 	movw	r2, #58989	@ 0xe66d
 801af1a:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
 801af1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af20:	f64d 62ec 	movw	r2, #57068	@ 0xdeec
 801af24:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 801af28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af2a:	2205      	movs	r2, #5
 801af2c:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
 801af30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af32:	220b      	movs	r2, #11
 801af34:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801af38:	683a      	ldr	r2, [r7, #0]
 801af3a:	68f9      	ldr	r1, [r7, #12]
 801af3c:	69b8      	ldr	r0, [r7, #24]
 801af3e:	f001 fa69 	bl	801c414 <pxPortInitialiseStack>
 801af42:	4602      	mov	r2, r0
 801af44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801af48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d002      	beq.n	801af54 <prvInitialiseNewTask+0x18c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801af4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801af52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801af54:	bf00      	nop
 801af56:	3720      	adds	r7, #32
 801af58:	46bd      	mov	sp, r7
 801af5a:	bd80      	pop	{r7, pc}
 801af5c:	200181e0 	.word	0x200181e0
 801af60:	20018248 	.word	0x20018248
 801af64:	200182b0 	.word	0x200182b0

0801af68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b082      	sub	sp, #8
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801af70:	f001 fb82 	bl	801c678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801af74:	4b2d      	ldr	r3, [pc, #180]	@ (801b02c <prvAddNewTaskToReadyList+0xc4>)
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	3301      	adds	r3, #1
 801af7a:	4a2c      	ldr	r2, [pc, #176]	@ (801b02c <prvAddNewTaskToReadyList+0xc4>)
 801af7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801af7e:	4b2c      	ldr	r3, [pc, #176]	@ (801b030 <prvAddNewTaskToReadyList+0xc8>)
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	2b00      	cmp	r3, #0
 801af84:	d109      	bne.n	801af9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801af86:	4a2a      	ldr	r2, [pc, #168]	@ (801b030 <prvAddNewTaskToReadyList+0xc8>)
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801af8c:	4b27      	ldr	r3, [pc, #156]	@ (801b02c <prvAddNewTaskToReadyList+0xc4>)
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	2b01      	cmp	r3, #1
 801af92:	d110      	bne.n	801afb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801af94:	f000 fc2e 	bl	801b7f4 <prvInitialiseTaskLists>
 801af98:	e00d      	b.n	801afb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801af9a:	4b26      	ldr	r3, [pc, #152]	@ (801b034 <prvAddNewTaskToReadyList+0xcc>)
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d109      	bne.n	801afb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801afa2:	4b23      	ldr	r3, [pc, #140]	@ (801b030 <prvAddNewTaskToReadyList+0xc8>)
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afac:	429a      	cmp	r2, r3
 801afae:	d802      	bhi.n	801afb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801afb0:	4a1f      	ldr	r2, [pc, #124]	@ (801b030 <prvAddNewTaskToReadyList+0xc8>)
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801afb6:	4b20      	ldr	r3, [pc, #128]	@ (801b038 <prvAddNewTaskToReadyList+0xd0>)
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	3301      	adds	r3, #1
 801afbc:	4a1e      	ldr	r2, [pc, #120]	@ (801b038 <prvAddNewTaskToReadyList+0xd0>)
 801afbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801afc0:	4b1d      	ldr	r3, [pc, #116]	@ (801b038 <prvAddNewTaskToReadyList+0xd0>)
 801afc2:	681a      	ldr	r2, [r3, #0]
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801afcc:	4b1b      	ldr	r3, [pc, #108]	@ (801b03c <prvAddNewTaskToReadyList+0xd4>)
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	429a      	cmp	r2, r3
 801afd2:	d903      	bls.n	801afdc <prvAddNewTaskToReadyList+0x74>
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afd8:	4a18      	ldr	r2, [pc, #96]	@ (801b03c <prvAddNewTaskToReadyList+0xd4>)
 801afda:	6013      	str	r3, [r2, #0]
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801afe0:	4613      	mov	r3, r2
 801afe2:	009b      	lsls	r3, r3, #2
 801afe4:	4413      	add	r3, r2
 801afe6:	009b      	lsls	r3, r3, #2
 801afe8:	4a15      	ldr	r2, [pc, #84]	@ (801b040 <prvAddNewTaskToReadyList+0xd8>)
 801afea:	441a      	add	r2, r3
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	3304      	adds	r3, #4
 801aff0:	4619      	mov	r1, r3
 801aff2:	4610      	mov	r0, r2
 801aff4:	f7fe fcff 	bl	80199f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801aff8:	f001 fb70 	bl	801c6dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801affc:	4b0d      	ldr	r3, [pc, #52]	@ (801b034 <prvAddNewTaskToReadyList+0xcc>)
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	2b00      	cmp	r3, #0
 801b002:	d00e      	beq.n	801b022 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801b004:	4b0a      	ldr	r3, [pc, #40]	@ (801b030 <prvAddNewTaskToReadyList+0xc8>)
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b00e:	429a      	cmp	r2, r3
 801b010:	d207      	bcs.n	801b022 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801b012:	4b0c      	ldr	r3, [pc, #48]	@ (801b044 <prvAddNewTaskToReadyList+0xdc>)
 801b014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b018:	601a      	str	r2, [r3, #0]
 801b01a:	f3bf 8f4f 	dsb	sy
 801b01e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b022:	bf00      	nop
 801b024:	3708      	adds	r7, #8
 801b026:	46bd      	mov	sp, r7
 801b028:	bd80      	pop	{r7, pc}
 801b02a:	bf00      	nop
 801b02c:	20001e7c 	.word	0x20001e7c
 801b030:	200019a8 	.word	0x200019a8
 801b034:	20001e88 	.word	0x20001e88
 801b038:	20001e98 	.word	0x20001e98
 801b03c:	20001e84 	.word	0x20001e84
 801b040:	200019ac 	.word	0x200019ac
 801b044:	e000ed04 	.word	0xe000ed04

0801b048 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801b048:	b580      	push	{r7, lr}
 801b04a:	b084      	sub	sp, #16
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801b050:	2300      	movs	r3, #0
 801b052:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	2b00      	cmp	r3, #0
 801b058:	d018      	beq.n	801b08c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801b05a:	4b14      	ldr	r3, [pc, #80]	@ (801b0ac <vTaskDelay+0x64>)
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d00b      	beq.n	801b07a <vTaskDelay+0x32>
	__asm volatile
 801b062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b066:	f383 8811 	msr	BASEPRI, r3
 801b06a:	f3bf 8f6f 	isb	sy
 801b06e:	f3bf 8f4f 	dsb	sy
 801b072:	60bb      	str	r3, [r7, #8]
}
 801b074:	bf00      	nop
 801b076:	bf00      	nop
 801b078:	e7fd      	b.n	801b076 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801b07a:	f000 f88b 	bl	801b194 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801b07e:	2100      	movs	r1, #0
 801b080:	6878      	ldr	r0, [r7, #4]
 801b082:	f000 fe19 	bl	801bcb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801b086:	f000 f893 	bl	801b1b0 <xTaskResumeAll>
 801b08a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801b08c:	68fb      	ldr	r3, [r7, #12]
 801b08e:	2b00      	cmp	r3, #0
 801b090:	d107      	bne.n	801b0a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801b092:	4b07      	ldr	r3, [pc, #28]	@ (801b0b0 <vTaskDelay+0x68>)
 801b094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b098:	601a      	str	r2, [r3, #0]
 801b09a:	f3bf 8f4f 	dsb	sy
 801b09e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b0a2:	bf00      	nop
 801b0a4:	3710      	adds	r7, #16
 801b0a6:	46bd      	mov	sp, r7
 801b0a8:	bd80      	pop	{r7, pc}
 801b0aa:	bf00      	nop
 801b0ac:	20001ea4 	.word	0x20001ea4
 801b0b0:	e000ed04 	.word	0xe000ed04

0801b0b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b08a      	sub	sp, #40	@ 0x28
 801b0b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801b0be:	2300      	movs	r3, #0
 801b0c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801b0c2:	463a      	mov	r2, r7
 801b0c4:	1d39      	adds	r1, r7, #4
 801b0c6:	f107 0308 	add.w	r3, r7, #8
 801b0ca:	4618      	mov	r0, r3
 801b0cc:	f7fe fc32 	bl	8019934 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801b0d0:	6839      	ldr	r1, [r7, #0]
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	68ba      	ldr	r2, [r7, #8]
 801b0d6:	9202      	str	r2, [sp, #8]
 801b0d8:	9301      	str	r3, [sp, #4]
 801b0da:	2300      	movs	r3, #0
 801b0dc:	9300      	str	r3, [sp, #0]
 801b0de:	2300      	movs	r3, #0
 801b0e0:	460a      	mov	r2, r1
 801b0e2:	4924      	ldr	r1, [pc, #144]	@ (801b174 <vTaskStartScheduler+0xc0>)
 801b0e4:	4824      	ldr	r0, [pc, #144]	@ (801b178 <vTaskStartScheduler+0xc4>)
 801b0e6:	f7ff fdc7 	bl	801ac78 <xTaskCreateStatic>
 801b0ea:	4603      	mov	r3, r0
 801b0ec:	4a23      	ldr	r2, [pc, #140]	@ (801b17c <vTaskStartScheduler+0xc8>)
 801b0ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801b0f0:	4b22      	ldr	r3, [pc, #136]	@ (801b17c <vTaskStartScheduler+0xc8>)
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d002      	beq.n	801b0fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801b0f8:	2301      	movs	r3, #1
 801b0fa:	617b      	str	r3, [r7, #20]
 801b0fc:	e001      	b.n	801b102 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801b0fe:	2300      	movs	r3, #0
 801b100:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801b102:	697b      	ldr	r3, [r7, #20]
 801b104:	2b01      	cmp	r3, #1
 801b106:	d102      	bne.n	801b10e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801b108:	f000 fe2a 	bl	801bd60 <xTimerCreateTimerTask>
 801b10c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801b10e:	697b      	ldr	r3, [r7, #20]
 801b110:	2b01      	cmp	r3, #1
 801b112:	d11b      	bne.n	801b14c <vTaskStartScheduler+0x98>
	__asm volatile
 801b114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b118:	f383 8811 	msr	BASEPRI, r3
 801b11c:	f3bf 8f6f 	isb	sy
 801b120:	f3bf 8f4f 	dsb	sy
 801b124:	613b      	str	r3, [r7, #16]
}
 801b126:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b128:	4b15      	ldr	r3, [pc, #84]	@ (801b180 <vTaskStartScheduler+0xcc>)
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	3358      	adds	r3, #88	@ 0x58
 801b12e:	4a15      	ldr	r2, [pc, #84]	@ (801b184 <vTaskStartScheduler+0xd0>)
 801b130:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801b132:	4b15      	ldr	r3, [pc, #84]	@ (801b188 <vTaskStartScheduler+0xd4>)
 801b134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b138:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b13a:	4b14      	ldr	r3, [pc, #80]	@ (801b18c <vTaskStartScheduler+0xd8>)
 801b13c:	2201      	movs	r2, #1
 801b13e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b140:	4b13      	ldr	r3, [pc, #76]	@ (801b190 <vTaskStartScheduler+0xdc>)
 801b142:	2200      	movs	r2, #0
 801b144:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801b146:	f001 f9f3 	bl	801c530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801b14a:	e00f      	b.n	801b16c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b14c:	697b      	ldr	r3, [r7, #20]
 801b14e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b152:	d10b      	bne.n	801b16c <vTaskStartScheduler+0xb8>
	__asm volatile
 801b154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b158:	f383 8811 	msr	BASEPRI, r3
 801b15c:	f3bf 8f6f 	isb	sy
 801b160:	f3bf 8f4f 	dsb	sy
 801b164:	60fb      	str	r3, [r7, #12]
}
 801b166:	bf00      	nop
 801b168:	bf00      	nop
 801b16a:	e7fd      	b.n	801b168 <vTaskStartScheduler+0xb4>
}
 801b16c:	bf00      	nop
 801b16e:	3718      	adds	r7, #24
 801b170:	46bd      	mov	sp, r7
 801b172:	bd80      	pop	{r7, pc}
 801b174:	08040d40 	.word	0x08040d40
 801b178:	0801b7c5 	.word	0x0801b7c5
 801b17c:	20001ea0 	.word	0x20001ea0
 801b180:	200019a8 	.word	0x200019a8
 801b184:	20000440 	.word	0x20000440
 801b188:	20001e9c 	.word	0x20001e9c
 801b18c:	20001e88 	.word	0x20001e88
 801b190:	20001e80 	.word	0x20001e80

0801b194 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801b194:	b480      	push	{r7}
 801b196:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801b198:	4b04      	ldr	r3, [pc, #16]	@ (801b1ac <vTaskSuspendAll+0x18>)
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	3301      	adds	r3, #1
 801b19e:	4a03      	ldr	r2, [pc, #12]	@ (801b1ac <vTaskSuspendAll+0x18>)
 801b1a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801b1a2:	bf00      	nop
 801b1a4:	46bd      	mov	sp, r7
 801b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1aa:	4770      	bx	lr
 801b1ac:	20001ea4 	.word	0x20001ea4

0801b1b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801b1b0:	b580      	push	{r7, lr}
 801b1b2:	b084      	sub	sp, #16
 801b1b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801b1b6:	2300      	movs	r3, #0
 801b1b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801b1ba:	2300      	movs	r3, #0
 801b1bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801b1be:	4b42      	ldr	r3, [pc, #264]	@ (801b2c8 <xTaskResumeAll+0x118>)
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d10b      	bne.n	801b1de <xTaskResumeAll+0x2e>
	__asm volatile
 801b1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b1ca:	f383 8811 	msr	BASEPRI, r3
 801b1ce:	f3bf 8f6f 	isb	sy
 801b1d2:	f3bf 8f4f 	dsb	sy
 801b1d6:	603b      	str	r3, [r7, #0]
}
 801b1d8:	bf00      	nop
 801b1da:	bf00      	nop
 801b1dc:	e7fd      	b.n	801b1da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801b1de:	f001 fa4b 	bl	801c678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801b1e2:	4b39      	ldr	r3, [pc, #228]	@ (801b2c8 <xTaskResumeAll+0x118>)
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	3b01      	subs	r3, #1
 801b1e8:	4a37      	ldr	r2, [pc, #220]	@ (801b2c8 <xTaskResumeAll+0x118>)
 801b1ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b1ec:	4b36      	ldr	r3, [pc, #216]	@ (801b2c8 <xTaskResumeAll+0x118>)
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d162      	bne.n	801b2ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b1f4:	4b35      	ldr	r3, [pc, #212]	@ (801b2cc <xTaskResumeAll+0x11c>)
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d05e      	beq.n	801b2ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b1fc:	e02f      	b.n	801b25e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b1fe:	4b34      	ldr	r3, [pc, #208]	@ (801b2d0 <xTaskResumeAll+0x120>)
 801b200:	68db      	ldr	r3, [r3, #12]
 801b202:	68db      	ldr	r3, [r3, #12]
 801b204:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b206:	68fb      	ldr	r3, [r7, #12]
 801b208:	3318      	adds	r3, #24
 801b20a:	4618      	mov	r0, r3
 801b20c:	f7fe fc50 	bl	8019ab0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b210:	68fb      	ldr	r3, [r7, #12]
 801b212:	3304      	adds	r3, #4
 801b214:	4618      	mov	r0, r3
 801b216:	f7fe fc4b 	bl	8019ab0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b21a:	68fb      	ldr	r3, [r7, #12]
 801b21c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b21e:	4b2d      	ldr	r3, [pc, #180]	@ (801b2d4 <xTaskResumeAll+0x124>)
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	429a      	cmp	r2, r3
 801b224:	d903      	bls.n	801b22e <xTaskResumeAll+0x7e>
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b22a:	4a2a      	ldr	r2, [pc, #168]	@ (801b2d4 <xTaskResumeAll+0x124>)
 801b22c:	6013      	str	r3, [r2, #0]
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b232:	4613      	mov	r3, r2
 801b234:	009b      	lsls	r3, r3, #2
 801b236:	4413      	add	r3, r2
 801b238:	009b      	lsls	r3, r3, #2
 801b23a:	4a27      	ldr	r2, [pc, #156]	@ (801b2d8 <xTaskResumeAll+0x128>)
 801b23c:	441a      	add	r2, r3
 801b23e:	68fb      	ldr	r3, [r7, #12]
 801b240:	3304      	adds	r3, #4
 801b242:	4619      	mov	r1, r3
 801b244:	4610      	mov	r0, r2
 801b246:	f7fe fbd6 	bl	80199f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b24e:	4b23      	ldr	r3, [pc, #140]	@ (801b2dc <xTaskResumeAll+0x12c>)
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b254:	429a      	cmp	r2, r3
 801b256:	d302      	bcc.n	801b25e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801b258:	4b21      	ldr	r3, [pc, #132]	@ (801b2e0 <xTaskResumeAll+0x130>)
 801b25a:	2201      	movs	r2, #1
 801b25c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b25e:	4b1c      	ldr	r3, [pc, #112]	@ (801b2d0 <xTaskResumeAll+0x120>)
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	2b00      	cmp	r3, #0
 801b264:	d1cb      	bne.n	801b1fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d001      	beq.n	801b270 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b26c:	f000 fb66 	bl	801b93c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801b270:	4b1c      	ldr	r3, [pc, #112]	@ (801b2e4 <xTaskResumeAll+0x134>)
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d010      	beq.n	801b29e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b27c:	f000 f846 	bl	801b30c <xTaskIncrementTick>
 801b280:	4603      	mov	r3, r0
 801b282:	2b00      	cmp	r3, #0
 801b284:	d002      	beq.n	801b28c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801b286:	4b16      	ldr	r3, [pc, #88]	@ (801b2e0 <xTaskResumeAll+0x130>)
 801b288:	2201      	movs	r2, #1
 801b28a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	3b01      	subs	r3, #1
 801b290:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	2b00      	cmp	r3, #0
 801b296:	d1f1      	bne.n	801b27c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 801b298:	4b12      	ldr	r3, [pc, #72]	@ (801b2e4 <xTaskResumeAll+0x134>)
 801b29a:	2200      	movs	r2, #0
 801b29c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b29e:	4b10      	ldr	r3, [pc, #64]	@ (801b2e0 <xTaskResumeAll+0x130>)
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d009      	beq.n	801b2ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801b2a6:	2301      	movs	r3, #1
 801b2a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801b2aa:	4b0f      	ldr	r3, [pc, #60]	@ (801b2e8 <xTaskResumeAll+0x138>)
 801b2ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b2b0:	601a      	str	r2, [r3, #0]
 801b2b2:	f3bf 8f4f 	dsb	sy
 801b2b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b2ba:	f001 fa0f 	bl	801c6dc <vPortExitCritical>

	return xAlreadyYielded;
 801b2be:	68bb      	ldr	r3, [r7, #8]
}
 801b2c0:	4618      	mov	r0, r3
 801b2c2:	3710      	adds	r7, #16
 801b2c4:	46bd      	mov	sp, r7
 801b2c6:	bd80      	pop	{r7, pc}
 801b2c8:	20001ea4 	.word	0x20001ea4
 801b2cc:	20001e7c 	.word	0x20001e7c
 801b2d0:	20001e3c 	.word	0x20001e3c
 801b2d4:	20001e84 	.word	0x20001e84
 801b2d8:	200019ac 	.word	0x200019ac
 801b2dc:	200019a8 	.word	0x200019a8
 801b2e0:	20001e90 	.word	0x20001e90
 801b2e4:	20001e8c 	.word	0x20001e8c
 801b2e8:	e000ed04 	.word	0xe000ed04

0801b2ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801b2ec:	b480      	push	{r7}
 801b2ee:	b083      	sub	sp, #12
 801b2f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b2f2:	4b05      	ldr	r3, [pc, #20]	@ (801b308 <xTaskGetTickCount+0x1c>)
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b2f8:	687b      	ldr	r3, [r7, #4]
}
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	370c      	adds	r7, #12
 801b2fe:	46bd      	mov	sp, r7
 801b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b304:	4770      	bx	lr
 801b306:	bf00      	nop
 801b308:	20001e80 	.word	0x20001e80

0801b30c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b30c:	b580      	push	{r7, lr}
 801b30e:	b086      	sub	sp, #24
 801b310:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b312:	2300      	movs	r3, #0
 801b314:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b316:	4b4f      	ldr	r3, [pc, #316]	@ (801b454 <xTaskIncrementTick+0x148>)
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	f040 8090 	bne.w	801b440 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b320:	4b4d      	ldr	r3, [pc, #308]	@ (801b458 <xTaskIncrementTick+0x14c>)
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	3301      	adds	r3, #1
 801b326:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b328:	4a4b      	ldr	r2, [pc, #300]	@ (801b458 <xTaskIncrementTick+0x14c>)
 801b32a:	693b      	ldr	r3, [r7, #16]
 801b32c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b32e:	693b      	ldr	r3, [r7, #16]
 801b330:	2b00      	cmp	r3, #0
 801b332:	d121      	bne.n	801b378 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801b334:	4b49      	ldr	r3, [pc, #292]	@ (801b45c <xTaskIncrementTick+0x150>)
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d00b      	beq.n	801b356 <xTaskIncrementTick+0x4a>
	__asm volatile
 801b33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b342:	f383 8811 	msr	BASEPRI, r3
 801b346:	f3bf 8f6f 	isb	sy
 801b34a:	f3bf 8f4f 	dsb	sy
 801b34e:	603b      	str	r3, [r7, #0]
}
 801b350:	bf00      	nop
 801b352:	bf00      	nop
 801b354:	e7fd      	b.n	801b352 <xTaskIncrementTick+0x46>
 801b356:	4b41      	ldr	r3, [pc, #260]	@ (801b45c <xTaskIncrementTick+0x150>)
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	60fb      	str	r3, [r7, #12]
 801b35c:	4b40      	ldr	r3, [pc, #256]	@ (801b460 <xTaskIncrementTick+0x154>)
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	4a3e      	ldr	r2, [pc, #248]	@ (801b45c <xTaskIncrementTick+0x150>)
 801b362:	6013      	str	r3, [r2, #0]
 801b364:	4a3e      	ldr	r2, [pc, #248]	@ (801b460 <xTaskIncrementTick+0x154>)
 801b366:	68fb      	ldr	r3, [r7, #12]
 801b368:	6013      	str	r3, [r2, #0]
 801b36a:	4b3e      	ldr	r3, [pc, #248]	@ (801b464 <xTaskIncrementTick+0x158>)
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	3301      	adds	r3, #1
 801b370:	4a3c      	ldr	r2, [pc, #240]	@ (801b464 <xTaskIncrementTick+0x158>)
 801b372:	6013      	str	r3, [r2, #0]
 801b374:	f000 fae2 	bl	801b93c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b378:	4b3b      	ldr	r3, [pc, #236]	@ (801b468 <xTaskIncrementTick+0x15c>)
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	693a      	ldr	r2, [r7, #16]
 801b37e:	429a      	cmp	r2, r3
 801b380:	d349      	bcc.n	801b416 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b382:	4b36      	ldr	r3, [pc, #216]	@ (801b45c <xTaskIncrementTick+0x150>)
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d104      	bne.n	801b396 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b38c:	4b36      	ldr	r3, [pc, #216]	@ (801b468 <xTaskIncrementTick+0x15c>)
 801b38e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b392:	601a      	str	r2, [r3, #0]
					break;
 801b394:	e03f      	b.n	801b416 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b396:	4b31      	ldr	r3, [pc, #196]	@ (801b45c <xTaskIncrementTick+0x150>)
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	68db      	ldr	r3, [r3, #12]
 801b39c:	68db      	ldr	r3, [r3, #12]
 801b39e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b3a0:	68bb      	ldr	r3, [r7, #8]
 801b3a2:	685b      	ldr	r3, [r3, #4]
 801b3a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b3a6:	693a      	ldr	r2, [r7, #16]
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	429a      	cmp	r2, r3
 801b3ac:	d203      	bcs.n	801b3b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b3ae:	4a2e      	ldr	r2, [pc, #184]	@ (801b468 <xTaskIncrementTick+0x15c>)
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b3b4:	e02f      	b.n	801b416 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b3b6:	68bb      	ldr	r3, [r7, #8]
 801b3b8:	3304      	adds	r3, #4
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	f7fe fb78 	bl	8019ab0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b3c0:	68bb      	ldr	r3, [r7, #8]
 801b3c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d004      	beq.n	801b3d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b3c8:	68bb      	ldr	r3, [r7, #8]
 801b3ca:	3318      	adds	r3, #24
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	f7fe fb6f 	bl	8019ab0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b3d2:	68bb      	ldr	r3, [r7, #8]
 801b3d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b3d6:	4b25      	ldr	r3, [pc, #148]	@ (801b46c <xTaskIncrementTick+0x160>)
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	429a      	cmp	r2, r3
 801b3dc:	d903      	bls.n	801b3e6 <xTaskIncrementTick+0xda>
 801b3de:	68bb      	ldr	r3, [r7, #8]
 801b3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3e2:	4a22      	ldr	r2, [pc, #136]	@ (801b46c <xTaskIncrementTick+0x160>)
 801b3e4:	6013      	str	r3, [r2, #0]
 801b3e6:	68bb      	ldr	r3, [r7, #8]
 801b3e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b3ea:	4613      	mov	r3, r2
 801b3ec:	009b      	lsls	r3, r3, #2
 801b3ee:	4413      	add	r3, r2
 801b3f0:	009b      	lsls	r3, r3, #2
 801b3f2:	4a1f      	ldr	r2, [pc, #124]	@ (801b470 <xTaskIncrementTick+0x164>)
 801b3f4:	441a      	add	r2, r3
 801b3f6:	68bb      	ldr	r3, [r7, #8]
 801b3f8:	3304      	adds	r3, #4
 801b3fa:	4619      	mov	r1, r3
 801b3fc:	4610      	mov	r0, r2
 801b3fe:	f7fe fafa 	bl	80199f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b402:	68bb      	ldr	r3, [r7, #8]
 801b404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b406:	4b1b      	ldr	r3, [pc, #108]	@ (801b474 <xTaskIncrementTick+0x168>)
 801b408:	681b      	ldr	r3, [r3, #0]
 801b40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b40c:	429a      	cmp	r2, r3
 801b40e:	d3b8      	bcc.n	801b382 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801b410:	2301      	movs	r3, #1
 801b412:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b414:	e7b5      	b.n	801b382 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b416:	4b17      	ldr	r3, [pc, #92]	@ (801b474 <xTaskIncrementTick+0x168>)
 801b418:	681b      	ldr	r3, [r3, #0]
 801b41a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b41c:	4914      	ldr	r1, [pc, #80]	@ (801b470 <xTaskIncrementTick+0x164>)
 801b41e:	4613      	mov	r3, r2
 801b420:	009b      	lsls	r3, r3, #2
 801b422:	4413      	add	r3, r2
 801b424:	009b      	lsls	r3, r3, #2
 801b426:	440b      	add	r3, r1
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	2b01      	cmp	r3, #1
 801b42c:	d901      	bls.n	801b432 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801b42e:	2301      	movs	r3, #1
 801b430:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801b432:	4b11      	ldr	r3, [pc, #68]	@ (801b478 <xTaskIncrementTick+0x16c>)
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	2b00      	cmp	r3, #0
 801b438:	d007      	beq.n	801b44a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801b43a:	2301      	movs	r3, #1
 801b43c:	617b      	str	r3, [r7, #20]
 801b43e:	e004      	b.n	801b44a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b440:	4b0e      	ldr	r3, [pc, #56]	@ (801b47c <xTaskIncrementTick+0x170>)
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	3301      	adds	r3, #1
 801b446:	4a0d      	ldr	r2, [pc, #52]	@ (801b47c <xTaskIncrementTick+0x170>)
 801b448:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b44a:	697b      	ldr	r3, [r7, #20]
}
 801b44c:	4618      	mov	r0, r3
 801b44e:	3718      	adds	r7, #24
 801b450:	46bd      	mov	sp, r7
 801b452:	bd80      	pop	{r7, pc}
 801b454:	20001ea4 	.word	0x20001ea4
 801b458:	20001e80 	.word	0x20001e80
 801b45c:	20001e34 	.word	0x20001e34
 801b460:	20001e38 	.word	0x20001e38
 801b464:	20001e94 	.word	0x20001e94
 801b468:	20001e9c 	.word	0x20001e9c
 801b46c:	20001e84 	.word	0x20001e84
 801b470:	200019ac 	.word	0x200019ac
 801b474:	200019a8 	.word	0x200019a8
 801b478:	20001e90 	.word	0x20001e90
 801b47c:	20001e8c 	.word	0x20001e8c

0801b480 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b480:	b480      	push	{r7}
 801b482:	b085      	sub	sp, #20
 801b484:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b486:	4b2b      	ldr	r3, [pc, #172]	@ (801b534 <vTaskSwitchContext+0xb4>)
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d003      	beq.n	801b496 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b48e:	4b2a      	ldr	r3, [pc, #168]	@ (801b538 <vTaskSwitchContext+0xb8>)
 801b490:	2201      	movs	r2, #1
 801b492:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b494:	e047      	b.n	801b526 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801b496:	4b28      	ldr	r3, [pc, #160]	@ (801b538 <vTaskSwitchContext+0xb8>)
 801b498:	2200      	movs	r2, #0
 801b49a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b49c:	4b27      	ldr	r3, [pc, #156]	@ (801b53c <vTaskSwitchContext+0xbc>)
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	60fb      	str	r3, [r7, #12]
 801b4a2:	e011      	b.n	801b4c8 <vTaskSwitchContext+0x48>
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d10b      	bne.n	801b4c2 <vTaskSwitchContext+0x42>
	__asm volatile
 801b4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b4ae:	f383 8811 	msr	BASEPRI, r3
 801b4b2:	f3bf 8f6f 	isb	sy
 801b4b6:	f3bf 8f4f 	dsb	sy
 801b4ba:	607b      	str	r3, [r7, #4]
}
 801b4bc:	bf00      	nop
 801b4be:	bf00      	nop
 801b4c0:	e7fd      	b.n	801b4be <vTaskSwitchContext+0x3e>
 801b4c2:	68fb      	ldr	r3, [r7, #12]
 801b4c4:	3b01      	subs	r3, #1
 801b4c6:	60fb      	str	r3, [r7, #12]
 801b4c8:	491d      	ldr	r1, [pc, #116]	@ (801b540 <vTaskSwitchContext+0xc0>)
 801b4ca:	68fa      	ldr	r2, [r7, #12]
 801b4cc:	4613      	mov	r3, r2
 801b4ce:	009b      	lsls	r3, r3, #2
 801b4d0:	4413      	add	r3, r2
 801b4d2:	009b      	lsls	r3, r3, #2
 801b4d4:	440b      	add	r3, r1
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d0e3      	beq.n	801b4a4 <vTaskSwitchContext+0x24>
 801b4dc:	68fa      	ldr	r2, [r7, #12]
 801b4de:	4613      	mov	r3, r2
 801b4e0:	009b      	lsls	r3, r3, #2
 801b4e2:	4413      	add	r3, r2
 801b4e4:	009b      	lsls	r3, r3, #2
 801b4e6:	4a16      	ldr	r2, [pc, #88]	@ (801b540 <vTaskSwitchContext+0xc0>)
 801b4e8:	4413      	add	r3, r2
 801b4ea:	60bb      	str	r3, [r7, #8]
 801b4ec:	68bb      	ldr	r3, [r7, #8]
 801b4ee:	685b      	ldr	r3, [r3, #4]
 801b4f0:	685a      	ldr	r2, [r3, #4]
 801b4f2:	68bb      	ldr	r3, [r7, #8]
 801b4f4:	605a      	str	r2, [r3, #4]
 801b4f6:	68bb      	ldr	r3, [r7, #8]
 801b4f8:	685a      	ldr	r2, [r3, #4]
 801b4fa:	68bb      	ldr	r3, [r7, #8]
 801b4fc:	3308      	adds	r3, #8
 801b4fe:	429a      	cmp	r2, r3
 801b500:	d104      	bne.n	801b50c <vTaskSwitchContext+0x8c>
 801b502:	68bb      	ldr	r3, [r7, #8]
 801b504:	685b      	ldr	r3, [r3, #4]
 801b506:	685a      	ldr	r2, [r3, #4]
 801b508:	68bb      	ldr	r3, [r7, #8]
 801b50a:	605a      	str	r2, [r3, #4]
 801b50c:	68bb      	ldr	r3, [r7, #8]
 801b50e:	685b      	ldr	r3, [r3, #4]
 801b510:	68db      	ldr	r3, [r3, #12]
 801b512:	4a0c      	ldr	r2, [pc, #48]	@ (801b544 <vTaskSwitchContext+0xc4>)
 801b514:	6013      	str	r3, [r2, #0]
 801b516:	4a09      	ldr	r2, [pc, #36]	@ (801b53c <vTaskSwitchContext+0xbc>)
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b51c:	4b09      	ldr	r3, [pc, #36]	@ (801b544 <vTaskSwitchContext+0xc4>)
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	3358      	adds	r3, #88	@ 0x58
 801b522:	4a09      	ldr	r2, [pc, #36]	@ (801b548 <vTaskSwitchContext+0xc8>)
 801b524:	6013      	str	r3, [r2, #0]
}
 801b526:	bf00      	nop
 801b528:	3714      	adds	r7, #20
 801b52a:	46bd      	mov	sp, r7
 801b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b530:	4770      	bx	lr
 801b532:	bf00      	nop
 801b534:	20001ea4 	.word	0x20001ea4
 801b538:	20001e90 	.word	0x20001e90
 801b53c:	20001e84 	.word	0x20001e84
 801b540:	200019ac 	.word	0x200019ac
 801b544:	200019a8 	.word	0x200019a8
 801b548:	20000440 	.word	0x20000440

0801b54c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b54c:	b580      	push	{r7, lr}
 801b54e:	b084      	sub	sp, #16
 801b550:	af00      	add	r7, sp, #0
 801b552:	6078      	str	r0, [r7, #4]
 801b554:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d10b      	bne.n	801b574 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801b55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b560:	f383 8811 	msr	BASEPRI, r3
 801b564:	f3bf 8f6f 	isb	sy
 801b568:	f3bf 8f4f 	dsb	sy
 801b56c:	60fb      	str	r3, [r7, #12]
}
 801b56e:	bf00      	nop
 801b570:	bf00      	nop
 801b572:	e7fd      	b.n	801b570 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b574:	4b07      	ldr	r3, [pc, #28]	@ (801b594 <vTaskPlaceOnEventList+0x48>)
 801b576:	681b      	ldr	r3, [r3, #0]
 801b578:	3318      	adds	r3, #24
 801b57a:	4619      	mov	r1, r3
 801b57c:	6878      	ldr	r0, [r7, #4]
 801b57e:	f7fe fa5e 	bl	8019a3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b582:	2101      	movs	r1, #1
 801b584:	6838      	ldr	r0, [r7, #0]
 801b586:	f000 fb97 	bl	801bcb8 <prvAddCurrentTaskToDelayedList>
}
 801b58a:	bf00      	nop
 801b58c:	3710      	adds	r7, #16
 801b58e:	46bd      	mov	sp, r7
 801b590:	bd80      	pop	{r7, pc}
 801b592:	bf00      	nop
 801b594:	200019a8 	.word	0x200019a8

0801b598 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b598:	b580      	push	{r7, lr}
 801b59a:	b086      	sub	sp, #24
 801b59c:	af00      	add	r7, sp, #0
 801b59e:	60f8      	str	r0, [r7, #12]
 801b5a0:	60b9      	str	r1, [r7, #8]
 801b5a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801b5a4:	68fb      	ldr	r3, [r7, #12]
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d10b      	bne.n	801b5c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801b5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b5ae:	f383 8811 	msr	BASEPRI, r3
 801b5b2:	f3bf 8f6f 	isb	sy
 801b5b6:	f3bf 8f4f 	dsb	sy
 801b5ba:	617b      	str	r3, [r7, #20]
}
 801b5bc:	bf00      	nop
 801b5be:	bf00      	nop
 801b5c0:	e7fd      	b.n	801b5be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b5c2:	4b0a      	ldr	r3, [pc, #40]	@ (801b5ec <vTaskPlaceOnEventListRestricted+0x54>)
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	3318      	adds	r3, #24
 801b5c8:	4619      	mov	r1, r3
 801b5ca:	68f8      	ldr	r0, [r7, #12]
 801b5cc:	f7fe fa13 	bl	80199f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d002      	beq.n	801b5dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801b5d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b5da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b5dc:	6879      	ldr	r1, [r7, #4]
 801b5de:	68b8      	ldr	r0, [r7, #8]
 801b5e0:	f000 fb6a 	bl	801bcb8 <prvAddCurrentTaskToDelayedList>
	}
 801b5e4:	bf00      	nop
 801b5e6:	3718      	adds	r7, #24
 801b5e8:	46bd      	mov	sp, r7
 801b5ea:	bd80      	pop	{r7, pc}
 801b5ec:	200019a8 	.word	0x200019a8

0801b5f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b5f0:	b580      	push	{r7, lr}
 801b5f2:	b086      	sub	sp, #24
 801b5f4:	af00      	add	r7, sp, #0
 801b5f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	68db      	ldr	r3, [r3, #12]
 801b5fc:	68db      	ldr	r3, [r3, #12]
 801b5fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b600:	693b      	ldr	r3, [r7, #16]
 801b602:	2b00      	cmp	r3, #0
 801b604:	d10b      	bne.n	801b61e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801b606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b60a:	f383 8811 	msr	BASEPRI, r3
 801b60e:	f3bf 8f6f 	isb	sy
 801b612:	f3bf 8f4f 	dsb	sy
 801b616:	60fb      	str	r3, [r7, #12]
}
 801b618:	bf00      	nop
 801b61a:	bf00      	nop
 801b61c:	e7fd      	b.n	801b61a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b61e:	693b      	ldr	r3, [r7, #16]
 801b620:	3318      	adds	r3, #24
 801b622:	4618      	mov	r0, r3
 801b624:	f7fe fa44 	bl	8019ab0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b628:	4b1d      	ldr	r3, [pc, #116]	@ (801b6a0 <xTaskRemoveFromEventList+0xb0>)
 801b62a:	681b      	ldr	r3, [r3, #0]
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d11d      	bne.n	801b66c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b630:	693b      	ldr	r3, [r7, #16]
 801b632:	3304      	adds	r3, #4
 801b634:	4618      	mov	r0, r3
 801b636:	f7fe fa3b 	bl	8019ab0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b63a:	693b      	ldr	r3, [r7, #16]
 801b63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b63e:	4b19      	ldr	r3, [pc, #100]	@ (801b6a4 <xTaskRemoveFromEventList+0xb4>)
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	429a      	cmp	r2, r3
 801b644:	d903      	bls.n	801b64e <xTaskRemoveFromEventList+0x5e>
 801b646:	693b      	ldr	r3, [r7, #16]
 801b648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b64a:	4a16      	ldr	r2, [pc, #88]	@ (801b6a4 <xTaskRemoveFromEventList+0xb4>)
 801b64c:	6013      	str	r3, [r2, #0]
 801b64e:	693b      	ldr	r3, [r7, #16]
 801b650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b652:	4613      	mov	r3, r2
 801b654:	009b      	lsls	r3, r3, #2
 801b656:	4413      	add	r3, r2
 801b658:	009b      	lsls	r3, r3, #2
 801b65a:	4a13      	ldr	r2, [pc, #76]	@ (801b6a8 <xTaskRemoveFromEventList+0xb8>)
 801b65c:	441a      	add	r2, r3
 801b65e:	693b      	ldr	r3, [r7, #16]
 801b660:	3304      	adds	r3, #4
 801b662:	4619      	mov	r1, r3
 801b664:	4610      	mov	r0, r2
 801b666:	f7fe f9c6 	bl	80199f6 <vListInsertEnd>
 801b66a:	e005      	b.n	801b678 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b66c:	693b      	ldr	r3, [r7, #16]
 801b66e:	3318      	adds	r3, #24
 801b670:	4619      	mov	r1, r3
 801b672:	480e      	ldr	r0, [pc, #56]	@ (801b6ac <xTaskRemoveFromEventList+0xbc>)
 801b674:	f7fe f9bf 	bl	80199f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b678:	693b      	ldr	r3, [r7, #16]
 801b67a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b67c:	4b0c      	ldr	r3, [pc, #48]	@ (801b6b0 <xTaskRemoveFromEventList+0xc0>)
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b682:	429a      	cmp	r2, r3
 801b684:	d905      	bls.n	801b692 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b686:	2301      	movs	r3, #1
 801b688:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b68a:	4b0a      	ldr	r3, [pc, #40]	@ (801b6b4 <xTaskRemoveFromEventList+0xc4>)
 801b68c:	2201      	movs	r2, #1
 801b68e:	601a      	str	r2, [r3, #0]
 801b690:	e001      	b.n	801b696 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801b692:	2300      	movs	r3, #0
 801b694:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b696:	697b      	ldr	r3, [r7, #20]
}
 801b698:	4618      	mov	r0, r3
 801b69a:	3718      	adds	r7, #24
 801b69c:	46bd      	mov	sp, r7
 801b69e:	bd80      	pop	{r7, pc}
 801b6a0:	20001ea4 	.word	0x20001ea4
 801b6a4:	20001e84 	.word	0x20001e84
 801b6a8:	200019ac 	.word	0x200019ac
 801b6ac:	20001e3c 	.word	0x20001e3c
 801b6b0:	200019a8 	.word	0x200019a8
 801b6b4:	20001e90 	.word	0x20001e90

0801b6b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b6b8:	b480      	push	{r7}
 801b6ba:	b083      	sub	sp, #12
 801b6bc:	af00      	add	r7, sp, #0
 801b6be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b6c0:	4b06      	ldr	r3, [pc, #24]	@ (801b6dc <vTaskInternalSetTimeOutState+0x24>)
 801b6c2:	681a      	ldr	r2, [r3, #0]
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b6c8:	4b05      	ldr	r3, [pc, #20]	@ (801b6e0 <vTaskInternalSetTimeOutState+0x28>)
 801b6ca:	681a      	ldr	r2, [r3, #0]
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	605a      	str	r2, [r3, #4]
}
 801b6d0:	bf00      	nop
 801b6d2:	370c      	adds	r7, #12
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6da:	4770      	bx	lr
 801b6dc:	20001e94 	.word	0x20001e94
 801b6e0:	20001e80 	.word	0x20001e80

0801b6e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b6e4:	b580      	push	{r7, lr}
 801b6e6:	b088      	sub	sp, #32
 801b6e8:	af00      	add	r7, sp, #0
 801b6ea:	6078      	str	r0, [r7, #4]
 801b6ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d10b      	bne.n	801b70c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801b6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b6f8:	f383 8811 	msr	BASEPRI, r3
 801b6fc:	f3bf 8f6f 	isb	sy
 801b700:	f3bf 8f4f 	dsb	sy
 801b704:	613b      	str	r3, [r7, #16]
}
 801b706:	bf00      	nop
 801b708:	bf00      	nop
 801b70a:	e7fd      	b.n	801b708 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b70c:	683b      	ldr	r3, [r7, #0]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d10b      	bne.n	801b72a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801b712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b716:	f383 8811 	msr	BASEPRI, r3
 801b71a:	f3bf 8f6f 	isb	sy
 801b71e:	f3bf 8f4f 	dsb	sy
 801b722:	60fb      	str	r3, [r7, #12]
}
 801b724:	bf00      	nop
 801b726:	bf00      	nop
 801b728:	e7fd      	b.n	801b726 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801b72a:	f000 ffa5 	bl	801c678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b72e:	4b1d      	ldr	r3, [pc, #116]	@ (801b7a4 <xTaskCheckForTimeOut+0xc0>)
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	685b      	ldr	r3, [r3, #4]
 801b738:	69ba      	ldr	r2, [r7, #24]
 801b73a:	1ad3      	subs	r3, r2, r3
 801b73c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b73e:	683b      	ldr	r3, [r7, #0]
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b746:	d102      	bne.n	801b74e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b748:	2300      	movs	r3, #0
 801b74a:	61fb      	str	r3, [r7, #28]
 801b74c:	e023      	b.n	801b796 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	681a      	ldr	r2, [r3, #0]
 801b752:	4b15      	ldr	r3, [pc, #84]	@ (801b7a8 <xTaskCheckForTimeOut+0xc4>)
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	429a      	cmp	r2, r3
 801b758:	d007      	beq.n	801b76a <xTaskCheckForTimeOut+0x86>
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	685b      	ldr	r3, [r3, #4]
 801b75e:	69ba      	ldr	r2, [r7, #24]
 801b760:	429a      	cmp	r2, r3
 801b762:	d302      	bcc.n	801b76a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b764:	2301      	movs	r3, #1
 801b766:	61fb      	str	r3, [r7, #28]
 801b768:	e015      	b.n	801b796 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b76a:	683b      	ldr	r3, [r7, #0]
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	697a      	ldr	r2, [r7, #20]
 801b770:	429a      	cmp	r2, r3
 801b772:	d20b      	bcs.n	801b78c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b774:	683b      	ldr	r3, [r7, #0]
 801b776:	681a      	ldr	r2, [r3, #0]
 801b778:	697b      	ldr	r3, [r7, #20]
 801b77a:	1ad2      	subs	r2, r2, r3
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b780:	6878      	ldr	r0, [r7, #4]
 801b782:	f7ff ff99 	bl	801b6b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b786:	2300      	movs	r3, #0
 801b788:	61fb      	str	r3, [r7, #28]
 801b78a:	e004      	b.n	801b796 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801b78c:	683b      	ldr	r3, [r7, #0]
 801b78e:	2200      	movs	r2, #0
 801b790:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b792:	2301      	movs	r3, #1
 801b794:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b796:	f000 ffa1 	bl	801c6dc <vPortExitCritical>

	return xReturn;
 801b79a:	69fb      	ldr	r3, [r7, #28]
}
 801b79c:	4618      	mov	r0, r3
 801b79e:	3720      	adds	r7, #32
 801b7a0:	46bd      	mov	sp, r7
 801b7a2:	bd80      	pop	{r7, pc}
 801b7a4:	20001e80 	.word	0x20001e80
 801b7a8:	20001e94 	.word	0x20001e94

0801b7ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b7ac:	b480      	push	{r7}
 801b7ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b7b0:	4b03      	ldr	r3, [pc, #12]	@ (801b7c0 <vTaskMissedYield+0x14>)
 801b7b2:	2201      	movs	r2, #1
 801b7b4:	601a      	str	r2, [r3, #0]
}
 801b7b6:	bf00      	nop
 801b7b8:	46bd      	mov	sp, r7
 801b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7be:	4770      	bx	lr
 801b7c0:	20001e90 	.word	0x20001e90

0801b7c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b7c4:	b580      	push	{r7, lr}
 801b7c6:	b082      	sub	sp, #8
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b7cc:	f000 f852 	bl	801b874 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b7d0:	4b06      	ldr	r3, [pc, #24]	@ (801b7ec <prvIdleTask+0x28>)
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	2b01      	cmp	r3, #1
 801b7d6:	d9f9      	bls.n	801b7cc <prvIdleTask+0x8>
			{
				taskYIELD();
 801b7d8:	4b05      	ldr	r3, [pc, #20]	@ (801b7f0 <prvIdleTask+0x2c>)
 801b7da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b7de:	601a      	str	r2, [r3, #0]
 801b7e0:	f3bf 8f4f 	dsb	sy
 801b7e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b7e8:	e7f0      	b.n	801b7cc <prvIdleTask+0x8>
 801b7ea:	bf00      	nop
 801b7ec:	200019ac 	.word	0x200019ac
 801b7f0:	e000ed04 	.word	0xe000ed04

0801b7f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b082      	sub	sp, #8
 801b7f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b7fa:	2300      	movs	r3, #0
 801b7fc:	607b      	str	r3, [r7, #4]
 801b7fe:	e00c      	b.n	801b81a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b800:	687a      	ldr	r2, [r7, #4]
 801b802:	4613      	mov	r3, r2
 801b804:	009b      	lsls	r3, r3, #2
 801b806:	4413      	add	r3, r2
 801b808:	009b      	lsls	r3, r3, #2
 801b80a:	4a12      	ldr	r2, [pc, #72]	@ (801b854 <prvInitialiseTaskLists+0x60>)
 801b80c:	4413      	add	r3, r2
 801b80e:	4618      	mov	r0, r3
 801b810:	f7fe f8c4 	bl	801999c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	3301      	adds	r3, #1
 801b818:	607b      	str	r3, [r7, #4]
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	2b37      	cmp	r3, #55	@ 0x37
 801b81e:	d9ef      	bls.n	801b800 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b820:	480d      	ldr	r0, [pc, #52]	@ (801b858 <prvInitialiseTaskLists+0x64>)
 801b822:	f7fe f8bb 	bl	801999c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b826:	480d      	ldr	r0, [pc, #52]	@ (801b85c <prvInitialiseTaskLists+0x68>)
 801b828:	f7fe f8b8 	bl	801999c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b82c:	480c      	ldr	r0, [pc, #48]	@ (801b860 <prvInitialiseTaskLists+0x6c>)
 801b82e:	f7fe f8b5 	bl	801999c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b832:	480c      	ldr	r0, [pc, #48]	@ (801b864 <prvInitialiseTaskLists+0x70>)
 801b834:	f7fe f8b2 	bl	801999c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b838:	480b      	ldr	r0, [pc, #44]	@ (801b868 <prvInitialiseTaskLists+0x74>)
 801b83a:	f7fe f8af 	bl	801999c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b83e:	4b0b      	ldr	r3, [pc, #44]	@ (801b86c <prvInitialiseTaskLists+0x78>)
 801b840:	4a05      	ldr	r2, [pc, #20]	@ (801b858 <prvInitialiseTaskLists+0x64>)
 801b842:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b844:	4b0a      	ldr	r3, [pc, #40]	@ (801b870 <prvInitialiseTaskLists+0x7c>)
 801b846:	4a05      	ldr	r2, [pc, #20]	@ (801b85c <prvInitialiseTaskLists+0x68>)
 801b848:	601a      	str	r2, [r3, #0]
}
 801b84a:	bf00      	nop
 801b84c:	3708      	adds	r7, #8
 801b84e:	46bd      	mov	sp, r7
 801b850:	bd80      	pop	{r7, pc}
 801b852:	bf00      	nop
 801b854:	200019ac 	.word	0x200019ac
 801b858:	20001e0c 	.word	0x20001e0c
 801b85c:	20001e20 	.word	0x20001e20
 801b860:	20001e3c 	.word	0x20001e3c
 801b864:	20001e50 	.word	0x20001e50
 801b868:	20001e68 	.word	0x20001e68
 801b86c:	20001e34 	.word	0x20001e34
 801b870:	20001e38 	.word	0x20001e38

0801b874 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b874:	b580      	push	{r7, lr}
 801b876:	b082      	sub	sp, #8
 801b878:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b87a:	e019      	b.n	801b8b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b87c:	f000 fefc 	bl	801c678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b880:	4b10      	ldr	r3, [pc, #64]	@ (801b8c4 <prvCheckTasksWaitingTermination+0x50>)
 801b882:	68db      	ldr	r3, [r3, #12]
 801b884:	68db      	ldr	r3, [r3, #12]
 801b886:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	3304      	adds	r3, #4
 801b88c:	4618      	mov	r0, r3
 801b88e:	f7fe f90f 	bl	8019ab0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b892:	4b0d      	ldr	r3, [pc, #52]	@ (801b8c8 <prvCheckTasksWaitingTermination+0x54>)
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	3b01      	subs	r3, #1
 801b898:	4a0b      	ldr	r2, [pc, #44]	@ (801b8c8 <prvCheckTasksWaitingTermination+0x54>)
 801b89a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b89c:	4b0b      	ldr	r3, [pc, #44]	@ (801b8cc <prvCheckTasksWaitingTermination+0x58>)
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	3b01      	subs	r3, #1
 801b8a2:	4a0a      	ldr	r2, [pc, #40]	@ (801b8cc <prvCheckTasksWaitingTermination+0x58>)
 801b8a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b8a6:	f000 ff19 	bl	801c6dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b8aa:	6878      	ldr	r0, [r7, #4]
 801b8ac:	f000 f810 	bl	801b8d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b8b0:	4b06      	ldr	r3, [pc, #24]	@ (801b8cc <prvCheckTasksWaitingTermination+0x58>)
 801b8b2:	681b      	ldr	r3, [r3, #0]
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	d1e1      	bne.n	801b87c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b8b8:	bf00      	nop
 801b8ba:	bf00      	nop
 801b8bc:	3708      	adds	r7, #8
 801b8be:	46bd      	mov	sp, r7
 801b8c0:	bd80      	pop	{r7, pc}
 801b8c2:	bf00      	nop
 801b8c4:	20001e50 	.word	0x20001e50
 801b8c8:	20001e7c 	.word	0x20001e7c
 801b8cc:	20001e64 	.word	0x20001e64

0801b8d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b8d0:	b580      	push	{r7, lr}
 801b8d2:	b084      	sub	sp, #16
 801b8d4:	af00      	add	r7, sp, #0
 801b8d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	3358      	adds	r3, #88	@ 0x58
 801b8dc:	4618      	mov	r0, r3
 801b8de:	f01b fda1 	bl	8037424 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d108      	bne.n	801b8fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b8f0:	4618      	mov	r0, r3
 801b8f2:	f001 f8b1 	bl	801ca58 <vPortFree>
				vPortFree( pxTCB );
 801b8f6:	6878      	ldr	r0, [r7, #4]
 801b8f8:	f001 f8ae 	bl	801ca58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b8fc:	e019      	b.n	801b932 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 801b904:	2b01      	cmp	r3, #1
 801b906:	d103      	bne.n	801b910 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801b908:	6878      	ldr	r0, [r7, #4]
 801b90a:	f001 f8a5 	bl	801ca58 <vPortFree>
	}
 801b90e:	e010      	b.n	801b932 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 801b916:	2b02      	cmp	r3, #2
 801b918:	d00b      	beq.n	801b932 <prvDeleteTCB+0x62>
	__asm volatile
 801b91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b91e:	f383 8811 	msr	BASEPRI, r3
 801b922:	f3bf 8f6f 	isb	sy
 801b926:	f3bf 8f4f 	dsb	sy
 801b92a:	60fb      	str	r3, [r7, #12]
}
 801b92c:	bf00      	nop
 801b92e:	bf00      	nop
 801b930:	e7fd      	b.n	801b92e <prvDeleteTCB+0x5e>
	}
 801b932:	bf00      	nop
 801b934:	3710      	adds	r7, #16
 801b936:	46bd      	mov	sp, r7
 801b938:	bd80      	pop	{r7, pc}
	...

0801b93c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b93c:	b480      	push	{r7}
 801b93e:	b083      	sub	sp, #12
 801b940:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b942:	4b0c      	ldr	r3, [pc, #48]	@ (801b974 <prvResetNextTaskUnblockTime+0x38>)
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d104      	bne.n	801b956 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b94c:	4b0a      	ldr	r3, [pc, #40]	@ (801b978 <prvResetNextTaskUnblockTime+0x3c>)
 801b94e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b952:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b954:	e008      	b.n	801b968 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b956:	4b07      	ldr	r3, [pc, #28]	@ (801b974 <prvResetNextTaskUnblockTime+0x38>)
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	68db      	ldr	r3, [r3, #12]
 801b95c:	68db      	ldr	r3, [r3, #12]
 801b95e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	685b      	ldr	r3, [r3, #4]
 801b964:	4a04      	ldr	r2, [pc, #16]	@ (801b978 <prvResetNextTaskUnblockTime+0x3c>)
 801b966:	6013      	str	r3, [r2, #0]
}
 801b968:	bf00      	nop
 801b96a:	370c      	adds	r7, #12
 801b96c:	46bd      	mov	sp, r7
 801b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b972:	4770      	bx	lr
 801b974:	20001e34 	.word	0x20001e34
 801b978:	20001e9c 	.word	0x20001e9c

0801b97c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801b97c:	b480      	push	{r7}
 801b97e:	b083      	sub	sp, #12
 801b980:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801b982:	4b05      	ldr	r3, [pc, #20]	@ (801b998 <xTaskGetCurrentTaskHandle+0x1c>)
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	607b      	str	r3, [r7, #4]

		return xReturn;
 801b988:	687b      	ldr	r3, [r7, #4]
	}
 801b98a:	4618      	mov	r0, r3
 801b98c:	370c      	adds	r7, #12
 801b98e:	46bd      	mov	sp, r7
 801b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b994:	4770      	bx	lr
 801b996:	bf00      	nop
 801b998:	200019a8 	.word	0x200019a8

0801b99c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b99c:	b480      	push	{r7}
 801b99e:	b083      	sub	sp, #12
 801b9a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b9a2:	4b0b      	ldr	r3, [pc, #44]	@ (801b9d0 <xTaskGetSchedulerState+0x34>)
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d102      	bne.n	801b9b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b9aa:	2301      	movs	r3, #1
 801b9ac:	607b      	str	r3, [r7, #4]
 801b9ae:	e008      	b.n	801b9c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b9b0:	4b08      	ldr	r3, [pc, #32]	@ (801b9d4 <xTaskGetSchedulerState+0x38>)
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d102      	bne.n	801b9be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b9b8:	2302      	movs	r3, #2
 801b9ba:	607b      	str	r3, [r7, #4]
 801b9bc:	e001      	b.n	801b9c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b9be:	2300      	movs	r3, #0
 801b9c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b9c2:	687b      	ldr	r3, [r7, #4]
	}
 801b9c4:	4618      	mov	r0, r3
 801b9c6:	370c      	adds	r7, #12
 801b9c8:	46bd      	mov	sp, r7
 801b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ce:	4770      	bx	lr
 801b9d0:	20001e88 	.word	0x20001e88
 801b9d4:	20001ea4 	.word	0x20001ea4

0801b9d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801b9d8:	b580      	push	{r7, lr}
 801b9da:	b084      	sub	sp, #16
 801b9dc:	af00      	add	r7, sp, #0
 801b9de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801b9e4:	2300      	movs	r3, #0
 801b9e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d051      	beq.n	801ba92 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801b9ee:	68bb      	ldr	r3, [r7, #8]
 801b9f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b9f2:	4b2a      	ldr	r3, [pc, #168]	@ (801ba9c <xTaskPriorityInherit+0xc4>)
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9f8:	429a      	cmp	r2, r3
 801b9fa:	d241      	bcs.n	801ba80 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b9fc:	68bb      	ldr	r3, [r7, #8]
 801b9fe:	699b      	ldr	r3, [r3, #24]
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	db06      	blt.n	801ba12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ba04:	4b25      	ldr	r3, [pc, #148]	@ (801ba9c <xTaskPriorityInherit+0xc4>)
 801ba06:	681b      	ldr	r3, [r3, #0]
 801ba08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801ba0e:	68bb      	ldr	r3, [r7, #8]
 801ba10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801ba12:	68bb      	ldr	r3, [r7, #8]
 801ba14:	6959      	ldr	r1, [r3, #20]
 801ba16:	68bb      	ldr	r3, [r7, #8]
 801ba18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba1a:	4613      	mov	r3, r2
 801ba1c:	009b      	lsls	r3, r3, #2
 801ba1e:	4413      	add	r3, r2
 801ba20:	009b      	lsls	r3, r3, #2
 801ba22:	4a1f      	ldr	r2, [pc, #124]	@ (801baa0 <xTaskPriorityInherit+0xc8>)
 801ba24:	4413      	add	r3, r2
 801ba26:	4299      	cmp	r1, r3
 801ba28:	d122      	bne.n	801ba70 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ba2a:	68bb      	ldr	r3, [r7, #8]
 801ba2c:	3304      	adds	r3, #4
 801ba2e:	4618      	mov	r0, r3
 801ba30:	f7fe f83e 	bl	8019ab0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ba34:	4b19      	ldr	r3, [pc, #100]	@ (801ba9c <xTaskPriorityInherit+0xc4>)
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba3a:	68bb      	ldr	r3, [r7, #8]
 801ba3c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801ba3e:	68bb      	ldr	r3, [r7, #8]
 801ba40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba42:	4b18      	ldr	r3, [pc, #96]	@ (801baa4 <xTaskPriorityInherit+0xcc>)
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	429a      	cmp	r2, r3
 801ba48:	d903      	bls.n	801ba52 <xTaskPriorityInherit+0x7a>
 801ba4a:	68bb      	ldr	r3, [r7, #8]
 801ba4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba4e:	4a15      	ldr	r2, [pc, #84]	@ (801baa4 <xTaskPriorityInherit+0xcc>)
 801ba50:	6013      	str	r3, [r2, #0]
 801ba52:	68bb      	ldr	r3, [r7, #8]
 801ba54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba56:	4613      	mov	r3, r2
 801ba58:	009b      	lsls	r3, r3, #2
 801ba5a:	4413      	add	r3, r2
 801ba5c:	009b      	lsls	r3, r3, #2
 801ba5e:	4a10      	ldr	r2, [pc, #64]	@ (801baa0 <xTaskPriorityInherit+0xc8>)
 801ba60:	441a      	add	r2, r3
 801ba62:	68bb      	ldr	r3, [r7, #8]
 801ba64:	3304      	adds	r3, #4
 801ba66:	4619      	mov	r1, r3
 801ba68:	4610      	mov	r0, r2
 801ba6a:	f7fd ffc4 	bl	80199f6 <vListInsertEnd>
 801ba6e:	e004      	b.n	801ba7a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ba70:	4b0a      	ldr	r3, [pc, #40]	@ (801ba9c <xTaskPriorityInherit+0xc4>)
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba76:	68bb      	ldr	r3, [r7, #8]
 801ba78:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801ba7a:	2301      	movs	r3, #1
 801ba7c:	60fb      	str	r3, [r7, #12]
 801ba7e:	e008      	b.n	801ba92 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801ba80:	68bb      	ldr	r3, [r7, #8]
 801ba82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801ba84:	4b05      	ldr	r3, [pc, #20]	@ (801ba9c <xTaskPriorityInherit+0xc4>)
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba8a:	429a      	cmp	r2, r3
 801ba8c:	d201      	bcs.n	801ba92 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801ba8e:	2301      	movs	r3, #1
 801ba90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801ba92:	68fb      	ldr	r3, [r7, #12]
	}
 801ba94:	4618      	mov	r0, r3
 801ba96:	3710      	adds	r7, #16
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	bd80      	pop	{r7, pc}
 801ba9c:	200019a8 	.word	0x200019a8
 801baa0:	200019ac 	.word	0x200019ac
 801baa4:	20001e84 	.word	0x20001e84

0801baa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	b086      	sub	sp, #24
 801baac:	af00      	add	r7, sp, #0
 801baae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801bab4:	2300      	movs	r3, #0
 801bab6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	2b00      	cmp	r3, #0
 801babc:	d058      	beq.n	801bb70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801babe:	4b2f      	ldr	r3, [pc, #188]	@ (801bb7c <xTaskPriorityDisinherit+0xd4>)
 801bac0:	681b      	ldr	r3, [r3, #0]
 801bac2:	693a      	ldr	r2, [r7, #16]
 801bac4:	429a      	cmp	r2, r3
 801bac6:	d00b      	beq.n	801bae0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801bac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bacc:	f383 8811 	msr	BASEPRI, r3
 801bad0:	f3bf 8f6f 	isb	sy
 801bad4:	f3bf 8f4f 	dsb	sy
 801bad8:	60fb      	str	r3, [r7, #12]
}
 801bada:	bf00      	nop
 801badc:	bf00      	nop
 801bade:	e7fd      	b.n	801badc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801bae0:	693b      	ldr	r3, [r7, #16]
 801bae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d10b      	bne.n	801bb00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801bae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801baec:	f383 8811 	msr	BASEPRI, r3
 801baf0:	f3bf 8f6f 	isb	sy
 801baf4:	f3bf 8f4f 	dsb	sy
 801baf8:	60bb      	str	r3, [r7, #8]
}
 801bafa:	bf00      	nop
 801bafc:	bf00      	nop
 801bafe:	e7fd      	b.n	801bafc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801bb00:	693b      	ldr	r3, [r7, #16]
 801bb02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bb04:	1e5a      	subs	r2, r3, #1
 801bb06:	693b      	ldr	r3, [r7, #16]
 801bb08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801bb0a:	693b      	ldr	r3, [r7, #16]
 801bb0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bb0e:	693b      	ldr	r3, [r7, #16]
 801bb10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bb12:	429a      	cmp	r2, r3
 801bb14:	d02c      	beq.n	801bb70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801bb16:	693b      	ldr	r3, [r7, #16]
 801bb18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d128      	bne.n	801bb70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bb1e:	693b      	ldr	r3, [r7, #16]
 801bb20:	3304      	adds	r3, #4
 801bb22:	4618      	mov	r0, r3
 801bb24:	f7fd ffc4 	bl	8019ab0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801bb28:	693b      	ldr	r3, [r7, #16]
 801bb2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801bb2c:	693b      	ldr	r3, [r7, #16]
 801bb2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bb30:	693b      	ldr	r3, [r7, #16]
 801bb32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bb34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801bb38:	693b      	ldr	r3, [r7, #16]
 801bb3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801bb3c:	693b      	ldr	r3, [r7, #16]
 801bb3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bb40:	4b0f      	ldr	r3, [pc, #60]	@ (801bb80 <xTaskPriorityDisinherit+0xd8>)
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	429a      	cmp	r2, r3
 801bb46:	d903      	bls.n	801bb50 <xTaskPriorityDisinherit+0xa8>
 801bb48:	693b      	ldr	r3, [r7, #16]
 801bb4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bb4c:	4a0c      	ldr	r2, [pc, #48]	@ (801bb80 <xTaskPriorityDisinherit+0xd8>)
 801bb4e:	6013      	str	r3, [r2, #0]
 801bb50:	693b      	ldr	r3, [r7, #16]
 801bb52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bb54:	4613      	mov	r3, r2
 801bb56:	009b      	lsls	r3, r3, #2
 801bb58:	4413      	add	r3, r2
 801bb5a:	009b      	lsls	r3, r3, #2
 801bb5c:	4a09      	ldr	r2, [pc, #36]	@ (801bb84 <xTaskPriorityDisinherit+0xdc>)
 801bb5e:	441a      	add	r2, r3
 801bb60:	693b      	ldr	r3, [r7, #16]
 801bb62:	3304      	adds	r3, #4
 801bb64:	4619      	mov	r1, r3
 801bb66:	4610      	mov	r0, r2
 801bb68:	f7fd ff45 	bl	80199f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801bb6c:	2301      	movs	r3, #1
 801bb6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801bb70:	697b      	ldr	r3, [r7, #20]
	}
 801bb72:	4618      	mov	r0, r3
 801bb74:	3718      	adds	r7, #24
 801bb76:	46bd      	mov	sp, r7
 801bb78:	bd80      	pop	{r7, pc}
 801bb7a:	bf00      	nop
 801bb7c:	200019a8 	.word	0x200019a8
 801bb80:	20001e84 	.word	0x20001e84
 801bb84:	200019ac 	.word	0x200019ac

0801bb88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801bb88:	b580      	push	{r7, lr}
 801bb8a:	b088      	sub	sp, #32
 801bb8c:	af00      	add	r7, sp, #0
 801bb8e:	6078      	str	r0, [r7, #4]
 801bb90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801bb96:	2301      	movs	r3, #1
 801bb98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d06c      	beq.n	801bc7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801bba0:	69bb      	ldr	r3, [r7, #24]
 801bba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d10b      	bne.n	801bbc0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801bba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bbac:	f383 8811 	msr	BASEPRI, r3
 801bbb0:	f3bf 8f6f 	isb	sy
 801bbb4:	f3bf 8f4f 	dsb	sy
 801bbb8:	60fb      	str	r3, [r7, #12]
}
 801bbba:	bf00      	nop
 801bbbc:	bf00      	nop
 801bbbe:	e7fd      	b.n	801bbbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801bbc0:	69bb      	ldr	r3, [r7, #24]
 801bbc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bbc4:	683a      	ldr	r2, [r7, #0]
 801bbc6:	429a      	cmp	r2, r3
 801bbc8:	d902      	bls.n	801bbd0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801bbca:	683b      	ldr	r3, [r7, #0]
 801bbcc:	61fb      	str	r3, [r7, #28]
 801bbce:	e002      	b.n	801bbd6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801bbd0:	69bb      	ldr	r3, [r7, #24]
 801bbd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bbd4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801bbd6:	69bb      	ldr	r3, [r7, #24]
 801bbd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bbda:	69fa      	ldr	r2, [r7, #28]
 801bbdc:	429a      	cmp	r2, r3
 801bbde:	d04c      	beq.n	801bc7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801bbe0:	69bb      	ldr	r3, [r7, #24]
 801bbe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bbe4:	697a      	ldr	r2, [r7, #20]
 801bbe6:	429a      	cmp	r2, r3
 801bbe8:	d147      	bne.n	801bc7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801bbea:	4b26      	ldr	r3, [pc, #152]	@ (801bc84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	69ba      	ldr	r2, [r7, #24]
 801bbf0:	429a      	cmp	r2, r3
 801bbf2:	d10b      	bne.n	801bc0c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801bbf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bbf8:	f383 8811 	msr	BASEPRI, r3
 801bbfc:	f3bf 8f6f 	isb	sy
 801bc00:	f3bf 8f4f 	dsb	sy
 801bc04:	60bb      	str	r3, [r7, #8]
}
 801bc06:	bf00      	nop
 801bc08:	bf00      	nop
 801bc0a:	e7fd      	b.n	801bc08 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801bc0c:	69bb      	ldr	r3, [r7, #24]
 801bc0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801bc12:	69bb      	ldr	r3, [r7, #24]
 801bc14:	69fa      	ldr	r2, [r7, #28]
 801bc16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801bc18:	69bb      	ldr	r3, [r7, #24]
 801bc1a:	699b      	ldr	r3, [r3, #24]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	db04      	blt.n	801bc2a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bc20:	69fb      	ldr	r3, [r7, #28]
 801bc22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801bc26:	69bb      	ldr	r3, [r7, #24]
 801bc28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801bc2a:	69bb      	ldr	r3, [r7, #24]
 801bc2c:	6959      	ldr	r1, [r3, #20]
 801bc2e:	693a      	ldr	r2, [r7, #16]
 801bc30:	4613      	mov	r3, r2
 801bc32:	009b      	lsls	r3, r3, #2
 801bc34:	4413      	add	r3, r2
 801bc36:	009b      	lsls	r3, r3, #2
 801bc38:	4a13      	ldr	r2, [pc, #76]	@ (801bc88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801bc3a:	4413      	add	r3, r2
 801bc3c:	4299      	cmp	r1, r3
 801bc3e:	d11c      	bne.n	801bc7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bc40:	69bb      	ldr	r3, [r7, #24]
 801bc42:	3304      	adds	r3, #4
 801bc44:	4618      	mov	r0, r3
 801bc46:	f7fd ff33 	bl	8019ab0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801bc4a:	69bb      	ldr	r3, [r7, #24]
 801bc4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bc4e:	4b0f      	ldr	r3, [pc, #60]	@ (801bc8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	429a      	cmp	r2, r3
 801bc54:	d903      	bls.n	801bc5e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801bc56:	69bb      	ldr	r3, [r7, #24]
 801bc58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc5a:	4a0c      	ldr	r2, [pc, #48]	@ (801bc8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801bc5c:	6013      	str	r3, [r2, #0]
 801bc5e:	69bb      	ldr	r3, [r7, #24]
 801bc60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bc62:	4613      	mov	r3, r2
 801bc64:	009b      	lsls	r3, r3, #2
 801bc66:	4413      	add	r3, r2
 801bc68:	009b      	lsls	r3, r3, #2
 801bc6a:	4a07      	ldr	r2, [pc, #28]	@ (801bc88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801bc6c:	441a      	add	r2, r3
 801bc6e:	69bb      	ldr	r3, [r7, #24]
 801bc70:	3304      	adds	r3, #4
 801bc72:	4619      	mov	r1, r3
 801bc74:	4610      	mov	r0, r2
 801bc76:	f7fd febe 	bl	80199f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801bc7a:	bf00      	nop
 801bc7c:	3720      	adds	r7, #32
 801bc7e:	46bd      	mov	sp, r7
 801bc80:	bd80      	pop	{r7, pc}
 801bc82:	bf00      	nop
 801bc84:	200019a8 	.word	0x200019a8
 801bc88:	200019ac 	.word	0x200019ac
 801bc8c:	20001e84 	.word	0x20001e84

0801bc90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801bc90:	b480      	push	{r7}
 801bc92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801bc94:	4b07      	ldr	r3, [pc, #28]	@ (801bcb4 <pvTaskIncrementMutexHeldCount+0x24>)
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d004      	beq.n	801bca6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801bc9c:	4b05      	ldr	r3, [pc, #20]	@ (801bcb4 <pvTaskIncrementMutexHeldCount+0x24>)
 801bc9e:	681b      	ldr	r3, [r3, #0]
 801bca0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bca2:	3201      	adds	r2, #1
 801bca4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801bca6:	4b03      	ldr	r3, [pc, #12]	@ (801bcb4 <pvTaskIncrementMutexHeldCount+0x24>)
 801bca8:	681b      	ldr	r3, [r3, #0]
	}
 801bcaa:	4618      	mov	r0, r3
 801bcac:	46bd      	mov	sp, r7
 801bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcb2:	4770      	bx	lr
 801bcb4:	200019a8 	.word	0x200019a8

0801bcb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801bcb8:	b580      	push	{r7, lr}
 801bcba:	b084      	sub	sp, #16
 801bcbc:	af00      	add	r7, sp, #0
 801bcbe:	6078      	str	r0, [r7, #4]
 801bcc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801bcc2:	4b21      	ldr	r3, [pc, #132]	@ (801bd48 <prvAddCurrentTaskToDelayedList+0x90>)
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bcc8:	4b20      	ldr	r3, [pc, #128]	@ (801bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	3304      	adds	r3, #4
 801bcce:	4618      	mov	r0, r3
 801bcd0:	f7fd feee 	bl	8019ab0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bcda:	d10a      	bne.n	801bcf2 <prvAddCurrentTaskToDelayedList+0x3a>
 801bcdc:	683b      	ldr	r3, [r7, #0]
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d007      	beq.n	801bcf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bce2:	4b1a      	ldr	r3, [pc, #104]	@ (801bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	3304      	adds	r3, #4
 801bce8:	4619      	mov	r1, r3
 801bcea:	4819      	ldr	r0, [pc, #100]	@ (801bd50 <prvAddCurrentTaskToDelayedList+0x98>)
 801bcec:	f7fd fe83 	bl	80199f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801bcf0:	e026      	b.n	801bd40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801bcf2:	68fa      	ldr	r2, [r7, #12]
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	4413      	add	r3, r2
 801bcf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801bcfa:	4b14      	ldr	r3, [pc, #80]	@ (801bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	68ba      	ldr	r2, [r7, #8]
 801bd00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801bd02:	68ba      	ldr	r2, [r7, #8]
 801bd04:	68fb      	ldr	r3, [r7, #12]
 801bd06:	429a      	cmp	r2, r3
 801bd08:	d209      	bcs.n	801bd1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bd0a:	4b12      	ldr	r3, [pc, #72]	@ (801bd54 <prvAddCurrentTaskToDelayedList+0x9c>)
 801bd0c:	681a      	ldr	r2, [r3, #0]
 801bd0e:	4b0f      	ldr	r3, [pc, #60]	@ (801bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 801bd10:	681b      	ldr	r3, [r3, #0]
 801bd12:	3304      	adds	r3, #4
 801bd14:	4619      	mov	r1, r3
 801bd16:	4610      	mov	r0, r2
 801bd18:	f7fd fe91 	bl	8019a3e <vListInsert>
}
 801bd1c:	e010      	b.n	801bd40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bd1e:	4b0e      	ldr	r3, [pc, #56]	@ (801bd58 <prvAddCurrentTaskToDelayedList+0xa0>)
 801bd20:	681a      	ldr	r2, [r3, #0]
 801bd22:	4b0a      	ldr	r3, [pc, #40]	@ (801bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	3304      	adds	r3, #4
 801bd28:	4619      	mov	r1, r3
 801bd2a:	4610      	mov	r0, r2
 801bd2c:	f7fd fe87 	bl	8019a3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801bd30:	4b0a      	ldr	r3, [pc, #40]	@ (801bd5c <prvAddCurrentTaskToDelayedList+0xa4>)
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	68ba      	ldr	r2, [r7, #8]
 801bd36:	429a      	cmp	r2, r3
 801bd38:	d202      	bcs.n	801bd40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801bd3a:	4a08      	ldr	r2, [pc, #32]	@ (801bd5c <prvAddCurrentTaskToDelayedList+0xa4>)
 801bd3c:	68bb      	ldr	r3, [r7, #8]
 801bd3e:	6013      	str	r3, [r2, #0]
}
 801bd40:	bf00      	nop
 801bd42:	3710      	adds	r7, #16
 801bd44:	46bd      	mov	sp, r7
 801bd46:	bd80      	pop	{r7, pc}
 801bd48:	20001e80 	.word	0x20001e80
 801bd4c:	200019a8 	.word	0x200019a8
 801bd50:	20001e68 	.word	0x20001e68
 801bd54:	20001e38 	.word	0x20001e38
 801bd58:	20001e34 	.word	0x20001e34
 801bd5c:	20001e9c 	.word	0x20001e9c

0801bd60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801bd60:	b580      	push	{r7, lr}
 801bd62:	b08a      	sub	sp, #40	@ 0x28
 801bd64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801bd66:	2300      	movs	r3, #0
 801bd68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801bd6a:	f000 fb13 	bl	801c394 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801bd6e:	4b1d      	ldr	r3, [pc, #116]	@ (801bde4 <xTimerCreateTimerTask+0x84>)
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d021      	beq.n	801bdba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801bd76:	2300      	movs	r3, #0
 801bd78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801bd7a:	2300      	movs	r3, #0
 801bd7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801bd7e:	1d3a      	adds	r2, r7, #4
 801bd80:	f107 0108 	add.w	r1, r7, #8
 801bd84:	f107 030c 	add.w	r3, r7, #12
 801bd88:	4618      	mov	r0, r3
 801bd8a:	f7fd fded 	bl	8019968 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801bd8e:	6879      	ldr	r1, [r7, #4]
 801bd90:	68bb      	ldr	r3, [r7, #8]
 801bd92:	68fa      	ldr	r2, [r7, #12]
 801bd94:	9202      	str	r2, [sp, #8]
 801bd96:	9301      	str	r3, [sp, #4]
 801bd98:	2302      	movs	r3, #2
 801bd9a:	9300      	str	r3, [sp, #0]
 801bd9c:	2300      	movs	r3, #0
 801bd9e:	460a      	mov	r2, r1
 801bda0:	4911      	ldr	r1, [pc, #68]	@ (801bde8 <xTimerCreateTimerTask+0x88>)
 801bda2:	4812      	ldr	r0, [pc, #72]	@ (801bdec <xTimerCreateTimerTask+0x8c>)
 801bda4:	f7fe ff68 	bl	801ac78 <xTaskCreateStatic>
 801bda8:	4603      	mov	r3, r0
 801bdaa:	4a11      	ldr	r2, [pc, #68]	@ (801bdf0 <xTimerCreateTimerTask+0x90>)
 801bdac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801bdae:	4b10      	ldr	r3, [pc, #64]	@ (801bdf0 <xTimerCreateTimerTask+0x90>)
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d001      	beq.n	801bdba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801bdb6:	2301      	movs	r3, #1
 801bdb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801bdba:	697b      	ldr	r3, [r7, #20]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d10b      	bne.n	801bdd8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 801bdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bdc4:	f383 8811 	msr	BASEPRI, r3
 801bdc8:	f3bf 8f6f 	isb	sy
 801bdcc:	f3bf 8f4f 	dsb	sy
 801bdd0:	613b      	str	r3, [r7, #16]
}
 801bdd2:	bf00      	nop
 801bdd4:	bf00      	nop
 801bdd6:	e7fd      	b.n	801bdd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801bdd8:	697b      	ldr	r3, [r7, #20]
}
 801bdda:	4618      	mov	r0, r3
 801bddc:	3718      	adds	r7, #24
 801bdde:	46bd      	mov	sp, r7
 801bde0:	bd80      	pop	{r7, pc}
 801bde2:	bf00      	nop
 801bde4:	20001ed8 	.word	0x20001ed8
 801bde8:	08040d48 	.word	0x08040d48
 801bdec:	0801bf2d 	.word	0x0801bf2d
 801bdf0:	20001edc 	.word	0x20001edc

0801bdf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801bdf4:	b580      	push	{r7, lr}
 801bdf6:	b08a      	sub	sp, #40	@ 0x28
 801bdf8:	af00      	add	r7, sp, #0
 801bdfa:	60f8      	str	r0, [r7, #12]
 801bdfc:	60b9      	str	r1, [r7, #8]
 801bdfe:	607a      	str	r2, [r7, #4]
 801be00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801be02:	2300      	movs	r3, #0
 801be04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801be06:	68fb      	ldr	r3, [r7, #12]
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d10b      	bne.n	801be24 <xTimerGenericCommand+0x30>
	__asm volatile
 801be0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801be10:	f383 8811 	msr	BASEPRI, r3
 801be14:	f3bf 8f6f 	isb	sy
 801be18:	f3bf 8f4f 	dsb	sy
 801be1c:	623b      	str	r3, [r7, #32]
}
 801be1e:	bf00      	nop
 801be20:	bf00      	nop
 801be22:	e7fd      	b.n	801be20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801be24:	4b19      	ldr	r3, [pc, #100]	@ (801be8c <xTimerGenericCommand+0x98>)
 801be26:	681b      	ldr	r3, [r3, #0]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d02a      	beq.n	801be82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801be2c:	68bb      	ldr	r3, [r7, #8]
 801be2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801be34:	68fb      	ldr	r3, [r7, #12]
 801be36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801be38:	68bb      	ldr	r3, [r7, #8]
 801be3a:	2b05      	cmp	r3, #5
 801be3c:	dc18      	bgt.n	801be70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801be3e:	f7ff fdad 	bl	801b99c <xTaskGetSchedulerState>
 801be42:	4603      	mov	r3, r0
 801be44:	2b02      	cmp	r3, #2
 801be46:	d109      	bne.n	801be5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801be48:	4b10      	ldr	r3, [pc, #64]	@ (801be8c <xTimerGenericCommand+0x98>)
 801be4a:	6818      	ldr	r0, [r3, #0]
 801be4c:	f107 0110 	add.w	r1, r7, #16
 801be50:	2300      	movs	r3, #0
 801be52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801be54:	f7fe f854 	bl	8019f00 <xQueueGenericSend>
 801be58:	6278      	str	r0, [r7, #36]	@ 0x24
 801be5a:	e012      	b.n	801be82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801be5c:	4b0b      	ldr	r3, [pc, #44]	@ (801be8c <xTimerGenericCommand+0x98>)
 801be5e:	6818      	ldr	r0, [r3, #0]
 801be60:	f107 0110 	add.w	r1, r7, #16
 801be64:	2300      	movs	r3, #0
 801be66:	2200      	movs	r2, #0
 801be68:	f7fe f84a 	bl	8019f00 <xQueueGenericSend>
 801be6c:	6278      	str	r0, [r7, #36]	@ 0x24
 801be6e:	e008      	b.n	801be82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801be70:	4b06      	ldr	r3, [pc, #24]	@ (801be8c <xTimerGenericCommand+0x98>)
 801be72:	6818      	ldr	r0, [r3, #0]
 801be74:	f107 0110 	add.w	r1, r7, #16
 801be78:	2300      	movs	r3, #0
 801be7a:	683a      	ldr	r2, [r7, #0]
 801be7c:	f7fe f942 	bl	801a104 <xQueueGenericSendFromISR>
 801be80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801be82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801be84:	4618      	mov	r0, r3
 801be86:	3728      	adds	r7, #40	@ 0x28
 801be88:	46bd      	mov	sp, r7
 801be8a:	bd80      	pop	{r7, pc}
 801be8c:	20001ed8 	.word	0x20001ed8

0801be90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801be90:	b580      	push	{r7, lr}
 801be92:	b088      	sub	sp, #32
 801be94:	af02      	add	r7, sp, #8
 801be96:	6078      	str	r0, [r7, #4]
 801be98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801be9a:	4b23      	ldr	r3, [pc, #140]	@ (801bf28 <prvProcessExpiredTimer+0x98>)
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	68db      	ldr	r3, [r3, #12]
 801bea0:	68db      	ldr	r3, [r3, #12]
 801bea2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bea4:	697b      	ldr	r3, [r7, #20]
 801bea6:	3304      	adds	r3, #4
 801bea8:	4618      	mov	r0, r3
 801beaa:	f7fd fe01 	bl	8019ab0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801beae:	697b      	ldr	r3, [r7, #20]
 801beb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801beb4:	f003 0304 	and.w	r3, r3, #4
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d023      	beq.n	801bf04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801bebc:	697b      	ldr	r3, [r7, #20]
 801bebe:	699a      	ldr	r2, [r3, #24]
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	18d1      	adds	r1, r2, r3
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	683a      	ldr	r2, [r7, #0]
 801bec8:	6978      	ldr	r0, [r7, #20]
 801beca:	f000 f8d5 	bl	801c078 <prvInsertTimerInActiveList>
 801bece:	4603      	mov	r3, r0
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d020      	beq.n	801bf16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801bed4:	2300      	movs	r3, #0
 801bed6:	9300      	str	r3, [sp, #0]
 801bed8:	2300      	movs	r3, #0
 801beda:	687a      	ldr	r2, [r7, #4]
 801bedc:	2100      	movs	r1, #0
 801bede:	6978      	ldr	r0, [r7, #20]
 801bee0:	f7ff ff88 	bl	801bdf4 <xTimerGenericCommand>
 801bee4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801bee6:	693b      	ldr	r3, [r7, #16]
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d114      	bne.n	801bf16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801beec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bef0:	f383 8811 	msr	BASEPRI, r3
 801bef4:	f3bf 8f6f 	isb	sy
 801bef8:	f3bf 8f4f 	dsb	sy
 801befc:	60fb      	str	r3, [r7, #12]
}
 801befe:	bf00      	nop
 801bf00:	bf00      	nop
 801bf02:	e7fd      	b.n	801bf00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bf04:	697b      	ldr	r3, [r7, #20]
 801bf06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bf0a:	f023 0301 	bic.w	r3, r3, #1
 801bf0e:	b2da      	uxtb	r2, r3
 801bf10:	697b      	ldr	r3, [r7, #20]
 801bf12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bf16:	697b      	ldr	r3, [r7, #20]
 801bf18:	6a1b      	ldr	r3, [r3, #32]
 801bf1a:	6978      	ldr	r0, [r7, #20]
 801bf1c:	4798      	blx	r3
}
 801bf1e:	bf00      	nop
 801bf20:	3718      	adds	r7, #24
 801bf22:	46bd      	mov	sp, r7
 801bf24:	bd80      	pop	{r7, pc}
 801bf26:	bf00      	nop
 801bf28:	20001ed0 	.word	0x20001ed0

0801bf2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801bf2c:	b580      	push	{r7, lr}
 801bf2e:	b084      	sub	sp, #16
 801bf30:	af00      	add	r7, sp, #0
 801bf32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bf34:	f107 0308 	add.w	r3, r7, #8
 801bf38:	4618      	mov	r0, r3
 801bf3a:	f000 f859 	bl	801bff0 <prvGetNextExpireTime>
 801bf3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801bf40:	68bb      	ldr	r3, [r7, #8]
 801bf42:	4619      	mov	r1, r3
 801bf44:	68f8      	ldr	r0, [r7, #12]
 801bf46:	f000 f805 	bl	801bf54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801bf4a:	f000 f8d7 	bl	801c0fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bf4e:	bf00      	nop
 801bf50:	e7f0      	b.n	801bf34 <prvTimerTask+0x8>
	...

0801bf54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801bf54:	b580      	push	{r7, lr}
 801bf56:	b084      	sub	sp, #16
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	6078      	str	r0, [r7, #4]
 801bf5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801bf5e:	f7ff f919 	bl	801b194 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bf62:	f107 0308 	add.w	r3, r7, #8
 801bf66:	4618      	mov	r0, r3
 801bf68:	f000 f866 	bl	801c038 <prvSampleTimeNow>
 801bf6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801bf6e:	68bb      	ldr	r3, [r7, #8]
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d130      	bne.n	801bfd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801bf74:	683b      	ldr	r3, [r7, #0]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d10a      	bne.n	801bf90 <prvProcessTimerOrBlockTask+0x3c>
 801bf7a:	687a      	ldr	r2, [r7, #4]
 801bf7c:	68fb      	ldr	r3, [r7, #12]
 801bf7e:	429a      	cmp	r2, r3
 801bf80:	d806      	bhi.n	801bf90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801bf82:	f7ff f915 	bl	801b1b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801bf86:	68f9      	ldr	r1, [r7, #12]
 801bf88:	6878      	ldr	r0, [r7, #4]
 801bf8a:	f7ff ff81 	bl	801be90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801bf8e:	e024      	b.n	801bfda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801bf90:	683b      	ldr	r3, [r7, #0]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d008      	beq.n	801bfa8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801bf96:	4b13      	ldr	r3, [pc, #76]	@ (801bfe4 <prvProcessTimerOrBlockTask+0x90>)
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d101      	bne.n	801bfa4 <prvProcessTimerOrBlockTask+0x50>
 801bfa0:	2301      	movs	r3, #1
 801bfa2:	e000      	b.n	801bfa6 <prvProcessTimerOrBlockTask+0x52>
 801bfa4:	2300      	movs	r3, #0
 801bfa6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801bfa8:	4b0f      	ldr	r3, [pc, #60]	@ (801bfe8 <prvProcessTimerOrBlockTask+0x94>)
 801bfaa:	6818      	ldr	r0, [r3, #0]
 801bfac:	687a      	ldr	r2, [r7, #4]
 801bfae:	68fb      	ldr	r3, [r7, #12]
 801bfb0:	1ad3      	subs	r3, r2, r3
 801bfb2:	683a      	ldr	r2, [r7, #0]
 801bfb4:	4619      	mov	r1, r3
 801bfb6:	f7fe fe2b 	bl	801ac10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801bfba:	f7ff f8f9 	bl	801b1b0 <xTaskResumeAll>
 801bfbe:	4603      	mov	r3, r0
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d10a      	bne.n	801bfda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801bfc4:	4b09      	ldr	r3, [pc, #36]	@ (801bfec <prvProcessTimerOrBlockTask+0x98>)
 801bfc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801bfca:	601a      	str	r2, [r3, #0]
 801bfcc:	f3bf 8f4f 	dsb	sy
 801bfd0:	f3bf 8f6f 	isb	sy
}
 801bfd4:	e001      	b.n	801bfda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801bfd6:	f7ff f8eb 	bl	801b1b0 <xTaskResumeAll>
}
 801bfda:	bf00      	nop
 801bfdc:	3710      	adds	r7, #16
 801bfde:	46bd      	mov	sp, r7
 801bfe0:	bd80      	pop	{r7, pc}
 801bfe2:	bf00      	nop
 801bfe4:	20001ed4 	.word	0x20001ed4
 801bfe8:	20001ed8 	.word	0x20001ed8
 801bfec:	e000ed04 	.word	0xe000ed04

0801bff0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801bff0:	b480      	push	{r7}
 801bff2:	b085      	sub	sp, #20
 801bff4:	af00      	add	r7, sp, #0
 801bff6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801bff8:	4b0e      	ldr	r3, [pc, #56]	@ (801c034 <prvGetNextExpireTime+0x44>)
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d101      	bne.n	801c006 <prvGetNextExpireTime+0x16>
 801c002:	2201      	movs	r2, #1
 801c004:	e000      	b.n	801c008 <prvGetNextExpireTime+0x18>
 801c006:	2200      	movs	r2, #0
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	2b00      	cmp	r3, #0
 801c012:	d105      	bne.n	801c020 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c014:	4b07      	ldr	r3, [pc, #28]	@ (801c034 <prvGetNextExpireTime+0x44>)
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	68db      	ldr	r3, [r3, #12]
 801c01a:	681b      	ldr	r3, [r3, #0]
 801c01c:	60fb      	str	r3, [r7, #12]
 801c01e:	e001      	b.n	801c024 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801c020:	2300      	movs	r3, #0
 801c022:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801c024:	68fb      	ldr	r3, [r7, #12]
}
 801c026:	4618      	mov	r0, r3
 801c028:	3714      	adds	r7, #20
 801c02a:	46bd      	mov	sp, r7
 801c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c030:	4770      	bx	lr
 801c032:	bf00      	nop
 801c034:	20001ed0 	.word	0x20001ed0

0801c038 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801c038:	b580      	push	{r7, lr}
 801c03a:	b084      	sub	sp, #16
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801c040:	f7ff f954 	bl	801b2ec <xTaskGetTickCount>
 801c044:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801c046:	4b0b      	ldr	r3, [pc, #44]	@ (801c074 <prvSampleTimeNow+0x3c>)
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	68fa      	ldr	r2, [r7, #12]
 801c04c:	429a      	cmp	r2, r3
 801c04e:	d205      	bcs.n	801c05c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801c050:	f000 f93a 	bl	801c2c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	2201      	movs	r2, #1
 801c058:	601a      	str	r2, [r3, #0]
 801c05a:	e002      	b.n	801c062 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	2200      	movs	r2, #0
 801c060:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801c062:	4a04      	ldr	r2, [pc, #16]	@ (801c074 <prvSampleTimeNow+0x3c>)
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801c068:	68fb      	ldr	r3, [r7, #12]
}
 801c06a:	4618      	mov	r0, r3
 801c06c:	3710      	adds	r7, #16
 801c06e:	46bd      	mov	sp, r7
 801c070:	bd80      	pop	{r7, pc}
 801c072:	bf00      	nop
 801c074:	20001ee0 	.word	0x20001ee0

0801c078 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801c078:	b580      	push	{r7, lr}
 801c07a:	b086      	sub	sp, #24
 801c07c:	af00      	add	r7, sp, #0
 801c07e:	60f8      	str	r0, [r7, #12]
 801c080:	60b9      	str	r1, [r7, #8]
 801c082:	607a      	str	r2, [r7, #4]
 801c084:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801c086:	2300      	movs	r3, #0
 801c088:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801c08a:	68fb      	ldr	r3, [r7, #12]
 801c08c:	68ba      	ldr	r2, [r7, #8]
 801c08e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	68fa      	ldr	r2, [r7, #12]
 801c094:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801c096:	68ba      	ldr	r2, [r7, #8]
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	429a      	cmp	r2, r3
 801c09c:	d812      	bhi.n	801c0c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c09e:	687a      	ldr	r2, [r7, #4]
 801c0a0:	683b      	ldr	r3, [r7, #0]
 801c0a2:	1ad2      	subs	r2, r2, r3
 801c0a4:	68fb      	ldr	r3, [r7, #12]
 801c0a6:	699b      	ldr	r3, [r3, #24]
 801c0a8:	429a      	cmp	r2, r3
 801c0aa:	d302      	bcc.n	801c0b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801c0ac:	2301      	movs	r3, #1
 801c0ae:	617b      	str	r3, [r7, #20]
 801c0b0:	e01b      	b.n	801c0ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801c0b2:	4b10      	ldr	r3, [pc, #64]	@ (801c0f4 <prvInsertTimerInActiveList+0x7c>)
 801c0b4:	681a      	ldr	r2, [r3, #0]
 801c0b6:	68fb      	ldr	r3, [r7, #12]
 801c0b8:	3304      	adds	r3, #4
 801c0ba:	4619      	mov	r1, r3
 801c0bc:	4610      	mov	r0, r2
 801c0be:	f7fd fcbe 	bl	8019a3e <vListInsert>
 801c0c2:	e012      	b.n	801c0ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801c0c4:	687a      	ldr	r2, [r7, #4]
 801c0c6:	683b      	ldr	r3, [r7, #0]
 801c0c8:	429a      	cmp	r2, r3
 801c0ca:	d206      	bcs.n	801c0da <prvInsertTimerInActiveList+0x62>
 801c0cc:	68ba      	ldr	r2, [r7, #8]
 801c0ce:	683b      	ldr	r3, [r7, #0]
 801c0d0:	429a      	cmp	r2, r3
 801c0d2:	d302      	bcc.n	801c0da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801c0d4:	2301      	movs	r3, #1
 801c0d6:	617b      	str	r3, [r7, #20]
 801c0d8:	e007      	b.n	801c0ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c0da:	4b07      	ldr	r3, [pc, #28]	@ (801c0f8 <prvInsertTimerInActiveList+0x80>)
 801c0dc:	681a      	ldr	r2, [r3, #0]
 801c0de:	68fb      	ldr	r3, [r7, #12]
 801c0e0:	3304      	adds	r3, #4
 801c0e2:	4619      	mov	r1, r3
 801c0e4:	4610      	mov	r0, r2
 801c0e6:	f7fd fcaa 	bl	8019a3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801c0ea:	697b      	ldr	r3, [r7, #20]
}
 801c0ec:	4618      	mov	r0, r3
 801c0ee:	3718      	adds	r7, #24
 801c0f0:	46bd      	mov	sp, r7
 801c0f2:	bd80      	pop	{r7, pc}
 801c0f4:	20001ed4 	.word	0x20001ed4
 801c0f8:	20001ed0 	.word	0x20001ed0

0801c0fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801c0fc:	b580      	push	{r7, lr}
 801c0fe:	b08e      	sub	sp, #56	@ 0x38
 801c100:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c102:	e0ce      	b.n	801c2a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	2b00      	cmp	r3, #0
 801c108:	da19      	bge.n	801c13e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801c10a:	1d3b      	adds	r3, r7, #4
 801c10c:	3304      	adds	r3, #4
 801c10e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801c110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c112:	2b00      	cmp	r3, #0
 801c114:	d10b      	bne.n	801c12e <prvProcessReceivedCommands+0x32>
	__asm volatile
 801c116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c11a:	f383 8811 	msr	BASEPRI, r3
 801c11e:	f3bf 8f6f 	isb	sy
 801c122:	f3bf 8f4f 	dsb	sy
 801c126:	61fb      	str	r3, [r7, #28]
}
 801c128:	bf00      	nop
 801c12a:	bf00      	nop
 801c12c:	e7fd      	b.n	801c12a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801c12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c130:	681b      	ldr	r3, [r3, #0]
 801c132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c134:	6850      	ldr	r0, [r2, #4]
 801c136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c138:	6892      	ldr	r2, [r2, #8]
 801c13a:	4611      	mov	r1, r2
 801c13c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801c13e:	687b      	ldr	r3, [r7, #4]
 801c140:	2b00      	cmp	r3, #0
 801c142:	f2c0 80ae 	blt.w	801c2a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801c146:	68fb      	ldr	r3, [r7, #12]
 801c148:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801c14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c14c:	695b      	ldr	r3, [r3, #20]
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d004      	beq.n	801c15c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c154:	3304      	adds	r3, #4
 801c156:	4618      	mov	r0, r3
 801c158:	f7fd fcaa 	bl	8019ab0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c15c:	463b      	mov	r3, r7
 801c15e:	4618      	mov	r0, r3
 801c160:	f7ff ff6a 	bl	801c038 <prvSampleTimeNow>
 801c164:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	2b09      	cmp	r3, #9
 801c16a:	f200 8097 	bhi.w	801c29c <prvProcessReceivedCommands+0x1a0>
 801c16e:	a201      	add	r2, pc, #4	@ (adr r2, 801c174 <prvProcessReceivedCommands+0x78>)
 801c170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c174:	0801c19d 	.word	0x0801c19d
 801c178:	0801c19d 	.word	0x0801c19d
 801c17c:	0801c19d 	.word	0x0801c19d
 801c180:	0801c213 	.word	0x0801c213
 801c184:	0801c227 	.word	0x0801c227
 801c188:	0801c273 	.word	0x0801c273
 801c18c:	0801c19d 	.word	0x0801c19d
 801c190:	0801c19d 	.word	0x0801c19d
 801c194:	0801c213 	.word	0x0801c213
 801c198:	0801c227 	.word	0x0801c227
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c19e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c1a2:	f043 0301 	orr.w	r3, r3, #1
 801c1a6:	b2da      	uxtb	r2, r3
 801c1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801c1ae:	68ba      	ldr	r2, [r7, #8]
 801c1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1b2:	699b      	ldr	r3, [r3, #24]
 801c1b4:	18d1      	adds	r1, r2, r3
 801c1b6:	68bb      	ldr	r3, [r7, #8]
 801c1b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c1ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c1bc:	f7ff ff5c 	bl	801c078 <prvInsertTimerInActiveList>
 801c1c0:	4603      	mov	r3, r0
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d06c      	beq.n	801c2a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1c8:	6a1b      	ldr	r3, [r3, #32]
 801c1ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c1cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c1d4:	f003 0304 	and.w	r3, r3, #4
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d061      	beq.n	801c2a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801c1dc:	68ba      	ldr	r2, [r7, #8]
 801c1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1e0:	699b      	ldr	r3, [r3, #24]
 801c1e2:	441a      	add	r2, r3
 801c1e4:	2300      	movs	r3, #0
 801c1e6:	9300      	str	r3, [sp, #0]
 801c1e8:	2300      	movs	r3, #0
 801c1ea:	2100      	movs	r1, #0
 801c1ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c1ee:	f7ff fe01 	bl	801bdf4 <xTimerGenericCommand>
 801c1f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801c1f4:	6a3b      	ldr	r3, [r7, #32]
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d152      	bne.n	801c2a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801c1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c1fe:	f383 8811 	msr	BASEPRI, r3
 801c202:	f3bf 8f6f 	isb	sy
 801c206:	f3bf 8f4f 	dsb	sy
 801c20a:	61bb      	str	r3, [r7, #24]
}
 801c20c:	bf00      	nop
 801c20e:	bf00      	nop
 801c210:	e7fd      	b.n	801c20e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c218:	f023 0301 	bic.w	r3, r3, #1
 801c21c:	b2da      	uxtb	r2, r3
 801c21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c220:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801c224:	e03d      	b.n	801c2a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c228:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c22c:	f043 0301 	orr.w	r3, r3, #1
 801c230:	b2da      	uxtb	r2, r3
 801c232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c234:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801c238:	68ba      	ldr	r2, [r7, #8]
 801c23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c23c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801c23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c240:	699b      	ldr	r3, [r3, #24]
 801c242:	2b00      	cmp	r3, #0
 801c244:	d10b      	bne.n	801c25e <prvProcessReceivedCommands+0x162>
	__asm volatile
 801c246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c24a:	f383 8811 	msr	BASEPRI, r3
 801c24e:	f3bf 8f6f 	isb	sy
 801c252:	f3bf 8f4f 	dsb	sy
 801c256:	617b      	str	r3, [r7, #20]
}
 801c258:	bf00      	nop
 801c25a:	bf00      	nop
 801c25c:	e7fd      	b.n	801c25a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801c25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c260:	699a      	ldr	r2, [r3, #24]
 801c262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c264:	18d1      	adds	r1, r2, r3
 801c266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c26a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c26c:	f7ff ff04 	bl	801c078 <prvInsertTimerInActiveList>
					break;
 801c270:	e017      	b.n	801c2a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801c272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c274:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c278:	f003 0302 	and.w	r3, r3, #2
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	d103      	bne.n	801c288 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801c280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c282:	f000 fbe9 	bl	801ca58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801c286:	e00c      	b.n	801c2a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c28a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c28e:	f023 0301 	bic.w	r3, r3, #1
 801c292:	b2da      	uxtb	r2, r3
 801c294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c296:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801c29a:	e002      	b.n	801c2a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801c29c:	bf00      	nop
 801c29e:	e000      	b.n	801c2a2 <prvProcessReceivedCommands+0x1a6>
					break;
 801c2a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c2a2:	4b08      	ldr	r3, [pc, #32]	@ (801c2c4 <prvProcessReceivedCommands+0x1c8>)
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	1d39      	adds	r1, r7, #4
 801c2a8:	2200      	movs	r2, #0
 801c2aa:	4618      	mov	r0, r3
 801c2ac:	f7fd ffc8 	bl	801a240 <xQueueReceive>
 801c2b0:	4603      	mov	r3, r0
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	f47f af26 	bne.w	801c104 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801c2b8:	bf00      	nop
 801c2ba:	bf00      	nop
 801c2bc:	3730      	adds	r7, #48	@ 0x30
 801c2be:	46bd      	mov	sp, r7
 801c2c0:	bd80      	pop	{r7, pc}
 801c2c2:	bf00      	nop
 801c2c4:	20001ed8 	.word	0x20001ed8

0801c2c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801c2c8:	b580      	push	{r7, lr}
 801c2ca:	b088      	sub	sp, #32
 801c2cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c2ce:	e049      	b.n	801c364 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c2d0:	4b2e      	ldr	r3, [pc, #184]	@ (801c38c <prvSwitchTimerLists+0xc4>)
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	68db      	ldr	r3, [r3, #12]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c2da:	4b2c      	ldr	r3, [pc, #176]	@ (801c38c <prvSwitchTimerLists+0xc4>)
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	68db      	ldr	r3, [r3, #12]
 801c2e0:	68db      	ldr	r3, [r3, #12]
 801c2e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	3304      	adds	r3, #4
 801c2e8:	4618      	mov	r0, r3
 801c2ea:	f7fd fbe1 	bl	8019ab0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	6a1b      	ldr	r3, [r3, #32]
 801c2f2:	68f8      	ldr	r0, [r7, #12]
 801c2f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c2f6:	68fb      	ldr	r3, [r7, #12]
 801c2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c2fc:	f003 0304 	and.w	r3, r3, #4
 801c300:	2b00      	cmp	r3, #0
 801c302:	d02f      	beq.n	801c364 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801c304:	68fb      	ldr	r3, [r7, #12]
 801c306:	699b      	ldr	r3, [r3, #24]
 801c308:	693a      	ldr	r2, [r7, #16]
 801c30a:	4413      	add	r3, r2
 801c30c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801c30e:	68ba      	ldr	r2, [r7, #8]
 801c310:	693b      	ldr	r3, [r7, #16]
 801c312:	429a      	cmp	r2, r3
 801c314:	d90e      	bls.n	801c334 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801c316:	68fb      	ldr	r3, [r7, #12]
 801c318:	68ba      	ldr	r2, [r7, #8]
 801c31a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c31c:	68fb      	ldr	r3, [r7, #12]
 801c31e:	68fa      	ldr	r2, [r7, #12]
 801c320:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c322:	4b1a      	ldr	r3, [pc, #104]	@ (801c38c <prvSwitchTimerLists+0xc4>)
 801c324:	681a      	ldr	r2, [r3, #0]
 801c326:	68fb      	ldr	r3, [r7, #12]
 801c328:	3304      	adds	r3, #4
 801c32a:	4619      	mov	r1, r3
 801c32c:	4610      	mov	r0, r2
 801c32e:	f7fd fb86 	bl	8019a3e <vListInsert>
 801c332:	e017      	b.n	801c364 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c334:	2300      	movs	r3, #0
 801c336:	9300      	str	r3, [sp, #0]
 801c338:	2300      	movs	r3, #0
 801c33a:	693a      	ldr	r2, [r7, #16]
 801c33c:	2100      	movs	r1, #0
 801c33e:	68f8      	ldr	r0, [r7, #12]
 801c340:	f7ff fd58 	bl	801bdf4 <xTimerGenericCommand>
 801c344:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d10b      	bne.n	801c364 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801c34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c350:	f383 8811 	msr	BASEPRI, r3
 801c354:	f3bf 8f6f 	isb	sy
 801c358:	f3bf 8f4f 	dsb	sy
 801c35c:	603b      	str	r3, [r7, #0]
}
 801c35e:	bf00      	nop
 801c360:	bf00      	nop
 801c362:	e7fd      	b.n	801c360 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c364:	4b09      	ldr	r3, [pc, #36]	@ (801c38c <prvSwitchTimerLists+0xc4>)
 801c366:	681b      	ldr	r3, [r3, #0]
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	d1b0      	bne.n	801c2d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c36e:	4b07      	ldr	r3, [pc, #28]	@ (801c38c <prvSwitchTimerLists+0xc4>)
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c374:	4b06      	ldr	r3, [pc, #24]	@ (801c390 <prvSwitchTimerLists+0xc8>)
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	4a04      	ldr	r2, [pc, #16]	@ (801c38c <prvSwitchTimerLists+0xc4>)
 801c37a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c37c:	4a04      	ldr	r2, [pc, #16]	@ (801c390 <prvSwitchTimerLists+0xc8>)
 801c37e:	697b      	ldr	r3, [r7, #20]
 801c380:	6013      	str	r3, [r2, #0]
}
 801c382:	bf00      	nop
 801c384:	3718      	adds	r7, #24
 801c386:	46bd      	mov	sp, r7
 801c388:	bd80      	pop	{r7, pc}
 801c38a:	bf00      	nop
 801c38c:	20001ed0 	.word	0x20001ed0
 801c390:	20001ed4 	.word	0x20001ed4

0801c394 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c394:	b580      	push	{r7, lr}
 801c396:	b082      	sub	sp, #8
 801c398:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c39a:	f000 f96d 	bl	801c678 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c39e:	4b15      	ldr	r3, [pc, #84]	@ (801c3f4 <prvCheckForValidListAndQueue+0x60>)
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d120      	bne.n	801c3e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c3a6:	4814      	ldr	r0, [pc, #80]	@ (801c3f8 <prvCheckForValidListAndQueue+0x64>)
 801c3a8:	f7fd faf8 	bl	801999c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c3ac:	4813      	ldr	r0, [pc, #76]	@ (801c3fc <prvCheckForValidListAndQueue+0x68>)
 801c3ae:	f7fd faf5 	bl	801999c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c3b2:	4b13      	ldr	r3, [pc, #76]	@ (801c400 <prvCheckForValidListAndQueue+0x6c>)
 801c3b4:	4a10      	ldr	r2, [pc, #64]	@ (801c3f8 <prvCheckForValidListAndQueue+0x64>)
 801c3b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c3b8:	4b12      	ldr	r3, [pc, #72]	@ (801c404 <prvCheckForValidListAndQueue+0x70>)
 801c3ba:	4a10      	ldr	r2, [pc, #64]	@ (801c3fc <prvCheckForValidListAndQueue+0x68>)
 801c3bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c3be:	2300      	movs	r3, #0
 801c3c0:	9300      	str	r3, [sp, #0]
 801c3c2:	4b11      	ldr	r3, [pc, #68]	@ (801c408 <prvCheckForValidListAndQueue+0x74>)
 801c3c4:	4a11      	ldr	r2, [pc, #68]	@ (801c40c <prvCheckForValidListAndQueue+0x78>)
 801c3c6:	2110      	movs	r1, #16
 801c3c8:	200a      	movs	r0, #10
 801c3ca:	f7fd fc05 	bl	8019bd8 <xQueueGenericCreateStatic>
 801c3ce:	4603      	mov	r3, r0
 801c3d0:	4a08      	ldr	r2, [pc, #32]	@ (801c3f4 <prvCheckForValidListAndQueue+0x60>)
 801c3d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c3d4:	4b07      	ldr	r3, [pc, #28]	@ (801c3f4 <prvCheckForValidListAndQueue+0x60>)
 801c3d6:	681b      	ldr	r3, [r3, #0]
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d005      	beq.n	801c3e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c3dc:	4b05      	ldr	r3, [pc, #20]	@ (801c3f4 <prvCheckForValidListAndQueue+0x60>)
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	490b      	ldr	r1, [pc, #44]	@ (801c410 <prvCheckForValidListAndQueue+0x7c>)
 801c3e2:	4618      	mov	r0, r3
 801c3e4:	f7fe fbea 	bl	801abbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c3e8:	f000 f978 	bl	801c6dc <vPortExitCritical>
}
 801c3ec:	bf00      	nop
 801c3ee:	46bd      	mov	sp, r7
 801c3f0:	bd80      	pop	{r7, pc}
 801c3f2:	bf00      	nop
 801c3f4:	20001ed8 	.word	0x20001ed8
 801c3f8:	20001ea8 	.word	0x20001ea8
 801c3fc:	20001ebc 	.word	0x20001ebc
 801c400:	20001ed0 	.word	0x20001ed0
 801c404:	20001ed4 	.word	0x20001ed4
 801c408:	20001f84 	.word	0x20001f84
 801c40c:	20001ee4 	.word	0x20001ee4
 801c410:	08040d50 	.word	0x08040d50

0801c414 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c414:	b480      	push	{r7}
 801c416:	b085      	sub	sp, #20
 801c418:	af00      	add	r7, sp, #0
 801c41a:	60f8      	str	r0, [r7, #12]
 801c41c:	60b9      	str	r1, [r7, #8]
 801c41e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	3b04      	subs	r3, #4
 801c424:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801c42c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c42e:	68fb      	ldr	r3, [r7, #12]
 801c430:	3b04      	subs	r3, #4
 801c432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c434:	68bb      	ldr	r3, [r7, #8]
 801c436:	f023 0201 	bic.w	r2, r3, #1
 801c43a:	68fb      	ldr	r3, [r7, #12]
 801c43c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c43e:	68fb      	ldr	r3, [r7, #12]
 801c440:	3b04      	subs	r3, #4
 801c442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c444:	4a0c      	ldr	r2, [pc, #48]	@ (801c478 <pxPortInitialiseStack+0x64>)
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c44a:	68fb      	ldr	r3, [r7, #12]
 801c44c:	3b14      	subs	r3, #20
 801c44e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c450:	687a      	ldr	r2, [r7, #4]
 801c452:	68fb      	ldr	r3, [r7, #12]
 801c454:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	3b04      	subs	r3, #4
 801c45a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	f06f 0202 	mvn.w	r2, #2
 801c462:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	3b20      	subs	r3, #32
 801c468:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c46a:	68fb      	ldr	r3, [r7, #12]
}
 801c46c:	4618      	mov	r0, r3
 801c46e:	3714      	adds	r7, #20
 801c470:	46bd      	mov	sp, r7
 801c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c476:	4770      	bx	lr
 801c478:	0801c47d 	.word	0x0801c47d

0801c47c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c47c:	b480      	push	{r7}
 801c47e:	b085      	sub	sp, #20
 801c480:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c482:	2300      	movs	r3, #0
 801c484:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c486:	4b13      	ldr	r3, [pc, #76]	@ (801c4d4 <prvTaskExitError+0x58>)
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c48e:	d00b      	beq.n	801c4a8 <prvTaskExitError+0x2c>
	__asm volatile
 801c490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c494:	f383 8811 	msr	BASEPRI, r3
 801c498:	f3bf 8f6f 	isb	sy
 801c49c:	f3bf 8f4f 	dsb	sy
 801c4a0:	60fb      	str	r3, [r7, #12]
}
 801c4a2:	bf00      	nop
 801c4a4:	bf00      	nop
 801c4a6:	e7fd      	b.n	801c4a4 <prvTaskExitError+0x28>
	__asm volatile
 801c4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c4ac:	f383 8811 	msr	BASEPRI, r3
 801c4b0:	f3bf 8f6f 	isb	sy
 801c4b4:	f3bf 8f4f 	dsb	sy
 801c4b8:	60bb      	str	r3, [r7, #8]
}
 801c4ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c4bc:	bf00      	nop
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d0fc      	beq.n	801c4be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c4c4:	bf00      	nop
 801c4c6:	bf00      	nop
 801c4c8:	3714      	adds	r7, #20
 801c4ca:	46bd      	mov	sp, r7
 801c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4d0:	4770      	bx	lr
 801c4d2:	bf00      	nop
 801c4d4:	20000094 	.word	0x20000094
	...

0801c4e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c4e0:	4b07      	ldr	r3, [pc, #28]	@ (801c500 <pxCurrentTCBConst2>)
 801c4e2:	6819      	ldr	r1, [r3, #0]
 801c4e4:	6808      	ldr	r0, [r1, #0]
 801c4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4ea:	f380 8809 	msr	PSP, r0
 801c4ee:	f3bf 8f6f 	isb	sy
 801c4f2:	f04f 0000 	mov.w	r0, #0
 801c4f6:	f380 8811 	msr	BASEPRI, r0
 801c4fa:	4770      	bx	lr
 801c4fc:	f3af 8000 	nop.w

0801c500 <pxCurrentTCBConst2>:
 801c500:	200019a8 	.word	0x200019a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c504:	bf00      	nop
 801c506:	bf00      	nop

0801c508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c508:	4808      	ldr	r0, [pc, #32]	@ (801c52c <prvPortStartFirstTask+0x24>)
 801c50a:	6800      	ldr	r0, [r0, #0]
 801c50c:	6800      	ldr	r0, [r0, #0]
 801c50e:	f380 8808 	msr	MSP, r0
 801c512:	f04f 0000 	mov.w	r0, #0
 801c516:	f380 8814 	msr	CONTROL, r0
 801c51a:	b662      	cpsie	i
 801c51c:	b661      	cpsie	f
 801c51e:	f3bf 8f4f 	dsb	sy
 801c522:	f3bf 8f6f 	isb	sy
 801c526:	df00      	svc	0
 801c528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c52a:	bf00      	nop
 801c52c:	e000ed08 	.word	0xe000ed08

0801c530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c530:	b580      	push	{r7, lr}
 801c532:	b086      	sub	sp, #24
 801c534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c536:	4b47      	ldr	r3, [pc, #284]	@ (801c654 <xPortStartScheduler+0x124>)
 801c538:	681b      	ldr	r3, [r3, #0]
 801c53a:	4a47      	ldr	r2, [pc, #284]	@ (801c658 <xPortStartScheduler+0x128>)
 801c53c:	4293      	cmp	r3, r2
 801c53e:	d10b      	bne.n	801c558 <xPortStartScheduler+0x28>
	__asm volatile
 801c540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c544:	f383 8811 	msr	BASEPRI, r3
 801c548:	f3bf 8f6f 	isb	sy
 801c54c:	f3bf 8f4f 	dsb	sy
 801c550:	613b      	str	r3, [r7, #16]
}
 801c552:	bf00      	nop
 801c554:	bf00      	nop
 801c556:	e7fd      	b.n	801c554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c558:	4b3e      	ldr	r3, [pc, #248]	@ (801c654 <xPortStartScheduler+0x124>)
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	4a3f      	ldr	r2, [pc, #252]	@ (801c65c <xPortStartScheduler+0x12c>)
 801c55e:	4293      	cmp	r3, r2
 801c560:	d10b      	bne.n	801c57a <xPortStartScheduler+0x4a>
	__asm volatile
 801c562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c566:	f383 8811 	msr	BASEPRI, r3
 801c56a:	f3bf 8f6f 	isb	sy
 801c56e:	f3bf 8f4f 	dsb	sy
 801c572:	60fb      	str	r3, [r7, #12]
}
 801c574:	bf00      	nop
 801c576:	bf00      	nop
 801c578:	e7fd      	b.n	801c576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c57a:	4b39      	ldr	r3, [pc, #228]	@ (801c660 <xPortStartScheduler+0x130>)
 801c57c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c57e:	697b      	ldr	r3, [r7, #20]
 801c580:	781b      	ldrb	r3, [r3, #0]
 801c582:	b2db      	uxtb	r3, r3
 801c584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c586:	697b      	ldr	r3, [r7, #20]
 801c588:	22ff      	movs	r2, #255	@ 0xff
 801c58a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c58c:	697b      	ldr	r3, [r7, #20]
 801c58e:	781b      	ldrb	r3, [r3, #0]
 801c590:	b2db      	uxtb	r3, r3
 801c592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c594:	78fb      	ldrb	r3, [r7, #3]
 801c596:	b2db      	uxtb	r3, r3
 801c598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801c59c:	b2da      	uxtb	r2, r3
 801c59e:	4b31      	ldr	r3, [pc, #196]	@ (801c664 <xPortStartScheduler+0x134>)
 801c5a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c5a2:	4b31      	ldr	r3, [pc, #196]	@ (801c668 <xPortStartScheduler+0x138>)
 801c5a4:	2207      	movs	r2, #7
 801c5a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c5a8:	e009      	b.n	801c5be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801c5aa:	4b2f      	ldr	r3, [pc, #188]	@ (801c668 <xPortStartScheduler+0x138>)
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	3b01      	subs	r3, #1
 801c5b0:	4a2d      	ldr	r2, [pc, #180]	@ (801c668 <xPortStartScheduler+0x138>)
 801c5b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c5b4:	78fb      	ldrb	r3, [r7, #3]
 801c5b6:	b2db      	uxtb	r3, r3
 801c5b8:	005b      	lsls	r3, r3, #1
 801c5ba:	b2db      	uxtb	r3, r3
 801c5bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c5be:	78fb      	ldrb	r3, [r7, #3]
 801c5c0:	b2db      	uxtb	r3, r3
 801c5c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c5c6:	2b80      	cmp	r3, #128	@ 0x80
 801c5c8:	d0ef      	beq.n	801c5aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c5ca:	4b27      	ldr	r3, [pc, #156]	@ (801c668 <xPortStartScheduler+0x138>)
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	f1c3 0307 	rsb	r3, r3, #7
 801c5d2:	2b04      	cmp	r3, #4
 801c5d4:	d00b      	beq.n	801c5ee <xPortStartScheduler+0xbe>
	__asm volatile
 801c5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c5da:	f383 8811 	msr	BASEPRI, r3
 801c5de:	f3bf 8f6f 	isb	sy
 801c5e2:	f3bf 8f4f 	dsb	sy
 801c5e6:	60bb      	str	r3, [r7, #8]
}
 801c5e8:	bf00      	nop
 801c5ea:	bf00      	nop
 801c5ec:	e7fd      	b.n	801c5ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c5ee:	4b1e      	ldr	r3, [pc, #120]	@ (801c668 <xPortStartScheduler+0x138>)
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	021b      	lsls	r3, r3, #8
 801c5f4:	4a1c      	ldr	r2, [pc, #112]	@ (801c668 <xPortStartScheduler+0x138>)
 801c5f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c5f8:	4b1b      	ldr	r3, [pc, #108]	@ (801c668 <xPortStartScheduler+0x138>)
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c600:	4a19      	ldr	r2, [pc, #100]	@ (801c668 <xPortStartScheduler+0x138>)
 801c602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	b2da      	uxtb	r2, r3
 801c608:	697b      	ldr	r3, [r7, #20]
 801c60a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c60c:	4b17      	ldr	r3, [pc, #92]	@ (801c66c <xPortStartScheduler+0x13c>)
 801c60e:	681b      	ldr	r3, [r3, #0]
 801c610:	4a16      	ldr	r2, [pc, #88]	@ (801c66c <xPortStartScheduler+0x13c>)
 801c612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801c616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c618:	4b14      	ldr	r3, [pc, #80]	@ (801c66c <xPortStartScheduler+0x13c>)
 801c61a:	681b      	ldr	r3, [r3, #0]
 801c61c:	4a13      	ldr	r2, [pc, #76]	@ (801c66c <xPortStartScheduler+0x13c>)
 801c61e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801c622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c624:	f000 f8da 	bl	801c7dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c628:	4b11      	ldr	r3, [pc, #68]	@ (801c670 <xPortStartScheduler+0x140>)
 801c62a:	2200      	movs	r2, #0
 801c62c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c62e:	f000 f8f9 	bl	801c824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c632:	4b10      	ldr	r3, [pc, #64]	@ (801c674 <xPortStartScheduler+0x144>)
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	4a0f      	ldr	r2, [pc, #60]	@ (801c674 <xPortStartScheduler+0x144>)
 801c638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801c63c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c63e:	f7ff ff63 	bl	801c508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c642:	f7fe ff1d 	bl	801b480 <vTaskSwitchContext>
	prvTaskExitError();
 801c646:	f7ff ff19 	bl	801c47c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c64a:	2300      	movs	r3, #0
}
 801c64c:	4618      	mov	r0, r3
 801c64e:	3718      	adds	r7, #24
 801c650:	46bd      	mov	sp, r7
 801c652:	bd80      	pop	{r7, pc}
 801c654:	e000ed00 	.word	0xe000ed00
 801c658:	410fc271 	.word	0x410fc271
 801c65c:	410fc270 	.word	0x410fc270
 801c660:	e000e400 	.word	0xe000e400
 801c664:	20001fd4 	.word	0x20001fd4
 801c668:	20001fd8 	.word	0x20001fd8
 801c66c:	e000ed20 	.word	0xe000ed20
 801c670:	20000094 	.word	0x20000094
 801c674:	e000ef34 	.word	0xe000ef34

0801c678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c678:	b480      	push	{r7}
 801c67a:	b083      	sub	sp, #12
 801c67c:	af00      	add	r7, sp, #0
	__asm volatile
 801c67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c682:	f383 8811 	msr	BASEPRI, r3
 801c686:	f3bf 8f6f 	isb	sy
 801c68a:	f3bf 8f4f 	dsb	sy
 801c68e:	607b      	str	r3, [r7, #4]
}
 801c690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c692:	4b10      	ldr	r3, [pc, #64]	@ (801c6d4 <vPortEnterCritical+0x5c>)
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	3301      	adds	r3, #1
 801c698:	4a0e      	ldr	r2, [pc, #56]	@ (801c6d4 <vPortEnterCritical+0x5c>)
 801c69a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c69c:	4b0d      	ldr	r3, [pc, #52]	@ (801c6d4 <vPortEnterCritical+0x5c>)
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	2b01      	cmp	r3, #1
 801c6a2:	d110      	bne.n	801c6c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c6a4:	4b0c      	ldr	r3, [pc, #48]	@ (801c6d8 <vPortEnterCritical+0x60>)
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	b2db      	uxtb	r3, r3
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d00b      	beq.n	801c6c6 <vPortEnterCritical+0x4e>
	__asm volatile
 801c6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c6b2:	f383 8811 	msr	BASEPRI, r3
 801c6b6:	f3bf 8f6f 	isb	sy
 801c6ba:	f3bf 8f4f 	dsb	sy
 801c6be:	603b      	str	r3, [r7, #0]
}
 801c6c0:	bf00      	nop
 801c6c2:	bf00      	nop
 801c6c4:	e7fd      	b.n	801c6c2 <vPortEnterCritical+0x4a>
	}
}
 801c6c6:	bf00      	nop
 801c6c8:	370c      	adds	r7, #12
 801c6ca:	46bd      	mov	sp, r7
 801c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6d0:	4770      	bx	lr
 801c6d2:	bf00      	nop
 801c6d4:	20000094 	.word	0x20000094
 801c6d8:	e000ed04 	.word	0xe000ed04

0801c6dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c6dc:	b480      	push	{r7}
 801c6de:	b083      	sub	sp, #12
 801c6e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c6e2:	4b12      	ldr	r3, [pc, #72]	@ (801c72c <vPortExitCritical+0x50>)
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	d10b      	bne.n	801c702 <vPortExitCritical+0x26>
	__asm volatile
 801c6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c6ee:	f383 8811 	msr	BASEPRI, r3
 801c6f2:	f3bf 8f6f 	isb	sy
 801c6f6:	f3bf 8f4f 	dsb	sy
 801c6fa:	607b      	str	r3, [r7, #4]
}
 801c6fc:	bf00      	nop
 801c6fe:	bf00      	nop
 801c700:	e7fd      	b.n	801c6fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c702:	4b0a      	ldr	r3, [pc, #40]	@ (801c72c <vPortExitCritical+0x50>)
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	3b01      	subs	r3, #1
 801c708:	4a08      	ldr	r2, [pc, #32]	@ (801c72c <vPortExitCritical+0x50>)
 801c70a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c70c:	4b07      	ldr	r3, [pc, #28]	@ (801c72c <vPortExitCritical+0x50>)
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	2b00      	cmp	r3, #0
 801c712:	d105      	bne.n	801c720 <vPortExitCritical+0x44>
 801c714:	2300      	movs	r3, #0
 801c716:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c718:	683b      	ldr	r3, [r7, #0]
 801c71a:	f383 8811 	msr	BASEPRI, r3
}
 801c71e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c720:	bf00      	nop
 801c722:	370c      	adds	r7, #12
 801c724:	46bd      	mov	sp, r7
 801c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c72a:	4770      	bx	lr
 801c72c:	20000094 	.word	0x20000094

0801c730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c730:	f3ef 8009 	mrs	r0, PSP
 801c734:	f3bf 8f6f 	isb	sy
 801c738:	4b15      	ldr	r3, [pc, #84]	@ (801c790 <pxCurrentTCBConst>)
 801c73a:	681a      	ldr	r2, [r3, #0]
 801c73c:	f01e 0f10 	tst.w	lr, #16
 801c740:	bf08      	it	eq
 801c742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c74a:	6010      	str	r0, [r2, #0]
 801c74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801c754:	f380 8811 	msr	BASEPRI, r0
 801c758:	f3bf 8f4f 	dsb	sy
 801c75c:	f3bf 8f6f 	isb	sy
 801c760:	f7fe fe8e 	bl	801b480 <vTaskSwitchContext>
 801c764:	f04f 0000 	mov.w	r0, #0
 801c768:	f380 8811 	msr	BASEPRI, r0
 801c76c:	bc09      	pop	{r0, r3}
 801c76e:	6819      	ldr	r1, [r3, #0]
 801c770:	6808      	ldr	r0, [r1, #0]
 801c772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c776:	f01e 0f10 	tst.w	lr, #16
 801c77a:	bf08      	it	eq
 801c77c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c780:	f380 8809 	msr	PSP, r0
 801c784:	f3bf 8f6f 	isb	sy
 801c788:	4770      	bx	lr
 801c78a:	bf00      	nop
 801c78c:	f3af 8000 	nop.w

0801c790 <pxCurrentTCBConst>:
 801c790:	200019a8 	.word	0x200019a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c794:	bf00      	nop
 801c796:	bf00      	nop

0801c798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c798:	b580      	push	{r7, lr}
 801c79a:	b082      	sub	sp, #8
 801c79c:	af00      	add	r7, sp, #0
	__asm volatile
 801c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c7a2:	f383 8811 	msr	BASEPRI, r3
 801c7a6:	f3bf 8f6f 	isb	sy
 801c7aa:	f3bf 8f4f 	dsb	sy
 801c7ae:	607b      	str	r3, [r7, #4]
}
 801c7b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c7b2:	f7fe fdab 	bl	801b30c <xTaskIncrementTick>
 801c7b6:	4603      	mov	r3, r0
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d003      	beq.n	801c7c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c7bc:	4b06      	ldr	r3, [pc, #24]	@ (801c7d8 <xPortSysTickHandler+0x40>)
 801c7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c7c2:	601a      	str	r2, [r3, #0]
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c7c8:	683b      	ldr	r3, [r7, #0]
 801c7ca:	f383 8811 	msr	BASEPRI, r3
}
 801c7ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c7d0:	bf00      	nop
 801c7d2:	3708      	adds	r7, #8
 801c7d4:	46bd      	mov	sp, r7
 801c7d6:	bd80      	pop	{r7, pc}
 801c7d8:	e000ed04 	.word	0xe000ed04

0801c7dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c7dc:	b480      	push	{r7}
 801c7de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c7e0:	4b0b      	ldr	r3, [pc, #44]	@ (801c810 <vPortSetupTimerInterrupt+0x34>)
 801c7e2:	2200      	movs	r2, #0
 801c7e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c7e6:	4b0b      	ldr	r3, [pc, #44]	@ (801c814 <vPortSetupTimerInterrupt+0x38>)
 801c7e8:	2200      	movs	r2, #0
 801c7ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c7ec:	4b0a      	ldr	r3, [pc, #40]	@ (801c818 <vPortSetupTimerInterrupt+0x3c>)
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	4a0a      	ldr	r2, [pc, #40]	@ (801c81c <vPortSetupTimerInterrupt+0x40>)
 801c7f2:	fba2 2303 	umull	r2, r3, r2, r3
 801c7f6:	099b      	lsrs	r3, r3, #6
 801c7f8:	4a09      	ldr	r2, [pc, #36]	@ (801c820 <vPortSetupTimerInterrupt+0x44>)
 801c7fa:	3b01      	subs	r3, #1
 801c7fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c7fe:	4b04      	ldr	r3, [pc, #16]	@ (801c810 <vPortSetupTimerInterrupt+0x34>)
 801c800:	2207      	movs	r2, #7
 801c802:	601a      	str	r2, [r3, #0]
}
 801c804:	bf00      	nop
 801c806:	46bd      	mov	sp, r7
 801c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c80c:	4770      	bx	lr
 801c80e:	bf00      	nop
 801c810:	e000e010 	.word	0xe000e010
 801c814:	e000e018 	.word	0xe000e018
 801c818:	20000018 	.word	0x20000018
 801c81c:	10624dd3 	.word	0x10624dd3
 801c820:	e000e014 	.word	0xe000e014

0801c824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801c834 <vPortEnableVFP+0x10>
 801c828:	6801      	ldr	r1, [r0, #0]
 801c82a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801c82e:	6001      	str	r1, [r0, #0]
 801c830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c832:	bf00      	nop
 801c834:	e000ed88 	.word	0xe000ed88

0801c838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c838:	b480      	push	{r7}
 801c83a:	b085      	sub	sp, #20
 801c83c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c83e:	f3ef 8305 	mrs	r3, IPSR
 801c842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c844:	68fb      	ldr	r3, [r7, #12]
 801c846:	2b0f      	cmp	r3, #15
 801c848:	d915      	bls.n	801c876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c84a:	4a18      	ldr	r2, [pc, #96]	@ (801c8ac <vPortValidateInterruptPriority+0x74>)
 801c84c:	68fb      	ldr	r3, [r7, #12]
 801c84e:	4413      	add	r3, r2
 801c850:	781b      	ldrb	r3, [r3, #0]
 801c852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c854:	4b16      	ldr	r3, [pc, #88]	@ (801c8b0 <vPortValidateInterruptPriority+0x78>)
 801c856:	781b      	ldrb	r3, [r3, #0]
 801c858:	7afa      	ldrb	r2, [r7, #11]
 801c85a:	429a      	cmp	r2, r3
 801c85c:	d20b      	bcs.n	801c876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801c85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c862:	f383 8811 	msr	BASEPRI, r3
 801c866:	f3bf 8f6f 	isb	sy
 801c86a:	f3bf 8f4f 	dsb	sy
 801c86e:	607b      	str	r3, [r7, #4]
}
 801c870:	bf00      	nop
 801c872:	bf00      	nop
 801c874:	e7fd      	b.n	801c872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c876:	4b0f      	ldr	r3, [pc, #60]	@ (801c8b4 <vPortValidateInterruptPriority+0x7c>)
 801c878:	681b      	ldr	r3, [r3, #0]
 801c87a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801c87e:	4b0e      	ldr	r3, [pc, #56]	@ (801c8b8 <vPortValidateInterruptPriority+0x80>)
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	429a      	cmp	r2, r3
 801c884:	d90b      	bls.n	801c89e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801c886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c88a:	f383 8811 	msr	BASEPRI, r3
 801c88e:	f3bf 8f6f 	isb	sy
 801c892:	f3bf 8f4f 	dsb	sy
 801c896:	603b      	str	r3, [r7, #0]
}
 801c898:	bf00      	nop
 801c89a:	bf00      	nop
 801c89c:	e7fd      	b.n	801c89a <vPortValidateInterruptPriority+0x62>
	}
 801c89e:	bf00      	nop
 801c8a0:	3714      	adds	r7, #20
 801c8a2:	46bd      	mov	sp, r7
 801c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8a8:	4770      	bx	lr
 801c8aa:	bf00      	nop
 801c8ac:	e000e3f0 	.word	0xe000e3f0
 801c8b0:	20001fd4 	.word	0x20001fd4
 801c8b4:	e000ed0c 	.word	0xe000ed0c
 801c8b8:	20001fd8 	.word	0x20001fd8

0801c8bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c8bc:	b580      	push	{r7, lr}
 801c8be:	b08a      	sub	sp, #40	@ 0x28
 801c8c0:	af00      	add	r7, sp, #0
 801c8c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c8c4:	2300      	movs	r3, #0
 801c8c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c8c8:	f7fe fc64 	bl	801b194 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c8cc:	4b5c      	ldr	r3, [pc, #368]	@ (801ca40 <pvPortMalloc+0x184>)
 801c8ce:	681b      	ldr	r3, [r3, #0]
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d101      	bne.n	801c8d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c8d4:	f000 f924 	bl	801cb20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c8d8:	4b5a      	ldr	r3, [pc, #360]	@ (801ca44 <pvPortMalloc+0x188>)
 801c8da:	681a      	ldr	r2, [r3, #0]
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	4013      	ands	r3, r2
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	f040 8095 	bne.w	801ca10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	2b00      	cmp	r3, #0
 801c8ea:	d01e      	beq.n	801c92a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801c8ec:	2208      	movs	r2, #8
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	4413      	add	r3, r2
 801c8f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	f003 0307 	and.w	r3, r3, #7
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d015      	beq.n	801c92a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	f023 0307 	bic.w	r3, r3, #7
 801c904:	3308      	adds	r3, #8
 801c906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	f003 0307 	and.w	r3, r3, #7
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d00b      	beq.n	801c92a <pvPortMalloc+0x6e>
	__asm volatile
 801c912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c916:	f383 8811 	msr	BASEPRI, r3
 801c91a:	f3bf 8f6f 	isb	sy
 801c91e:	f3bf 8f4f 	dsb	sy
 801c922:	617b      	str	r3, [r7, #20]
}
 801c924:	bf00      	nop
 801c926:	bf00      	nop
 801c928:	e7fd      	b.n	801c926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d06f      	beq.n	801ca10 <pvPortMalloc+0x154>
 801c930:	4b45      	ldr	r3, [pc, #276]	@ (801ca48 <pvPortMalloc+0x18c>)
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	687a      	ldr	r2, [r7, #4]
 801c936:	429a      	cmp	r2, r3
 801c938:	d86a      	bhi.n	801ca10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c93a:	4b44      	ldr	r3, [pc, #272]	@ (801ca4c <pvPortMalloc+0x190>)
 801c93c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c93e:	4b43      	ldr	r3, [pc, #268]	@ (801ca4c <pvPortMalloc+0x190>)
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c944:	e004      	b.n	801c950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801c946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c952:	685b      	ldr	r3, [r3, #4]
 801c954:	687a      	ldr	r2, [r7, #4]
 801c956:	429a      	cmp	r2, r3
 801c958:	d903      	bls.n	801c962 <pvPortMalloc+0xa6>
 801c95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d1f1      	bne.n	801c946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c962:	4b37      	ldr	r3, [pc, #220]	@ (801ca40 <pvPortMalloc+0x184>)
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c968:	429a      	cmp	r2, r3
 801c96a:	d051      	beq.n	801ca10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c96c:	6a3b      	ldr	r3, [r7, #32]
 801c96e:	681b      	ldr	r3, [r3, #0]
 801c970:	2208      	movs	r2, #8
 801c972:	4413      	add	r3, r2
 801c974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c978:	681a      	ldr	r2, [r3, #0]
 801c97a:	6a3b      	ldr	r3, [r7, #32]
 801c97c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c980:	685a      	ldr	r2, [r3, #4]
 801c982:	687b      	ldr	r3, [r7, #4]
 801c984:	1ad2      	subs	r2, r2, r3
 801c986:	2308      	movs	r3, #8
 801c988:	005b      	lsls	r3, r3, #1
 801c98a:	429a      	cmp	r2, r3
 801c98c:	d920      	bls.n	801c9d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c98e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	4413      	add	r3, r2
 801c994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c996:	69bb      	ldr	r3, [r7, #24]
 801c998:	f003 0307 	and.w	r3, r3, #7
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d00b      	beq.n	801c9b8 <pvPortMalloc+0xfc>
	__asm volatile
 801c9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c9a4:	f383 8811 	msr	BASEPRI, r3
 801c9a8:	f3bf 8f6f 	isb	sy
 801c9ac:	f3bf 8f4f 	dsb	sy
 801c9b0:	613b      	str	r3, [r7, #16]
}
 801c9b2:	bf00      	nop
 801c9b4:	bf00      	nop
 801c9b6:	e7fd      	b.n	801c9b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9ba:	685a      	ldr	r2, [r3, #4]
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	1ad2      	subs	r2, r2, r3
 801c9c0:	69bb      	ldr	r3, [r7, #24]
 801c9c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9c6:	687a      	ldr	r2, [r7, #4]
 801c9c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c9ca:	69b8      	ldr	r0, [r7, #24]
 801c9cc:	f000 f90c 	bl	801cbe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c9d0:	4b1d      	ldr	r3, [pc, #116]	@ (801ca48 <pvPortMalloc+0x18c>)
 801c9d2:	681a      	ldr	r2, [r3, #0]
 801c9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9d6:	685b      	ldr	r3, [r3, #4]
 801c9d8:	1ad3      	subs	r3, r2, r3
 801c9da:	4a1b      	ldr	r2, [pc, #108]	@ (801ca48 <pvPortMalloc+0x18c>)
 801c9dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c9de:	4b1a      	ldr	r3, [pc, #104]	@ (801ca48 <pvPortMalloc+0x18c>)
 801c9e0:	681a      	ldr	r2, [r3, #0]
 801c9e2:	4b1b      	ldr	r3, [pc, #108]	@ (801ca50 <pvPortMalloc+0x194>)
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	429a      	cmp	r2, r3
 801c9e8:	d203      	bcs.n	801c9f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c9ea:	4b17      	ldr	r3, [pc, #92]	@ (801ca48 <pvPortMalloc+0x18c>)
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	4a18      	ldr	r2, [pc, #96]	@ (801ca50 <pvPortMalloc+0x194>)
 801c9f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9f4:	685a      	ldr	r2, [r3, #4]
 801c9f6:	4b13      	ldr	r3, [pc, #76]	@ (801ca44 <pvPortMalloc+0x188>)
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	431a      	orrs	r2, r3
 801c9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801ca00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca02:	2200      	movs	r2, #0
 801ca04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801ca06:	4b13      	ldr	r3, [pc, #76]	@ (801ca54 <pvPortMalloc+0x198>)
 801ca08:	681b      	ldr	r3, [r3, #0]
 801ca0a:	3301      	adds	r3, #1
 801ca0c:	4a11      	ldr	r2, [pc, #68]	@ (801ca54 <pvPortMalloc+0x198>)
 801ca0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801ca10:	f7fe fbce 	bl	801b1b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801ca14:	69fb      	ldr	r3, [r7, #28]
 801ca16:	f003 0307 	and.w	r3, r3, #7
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d00b      	beq.n	801ca36 <pvPortMalloc+0x17a>
	__asm volatile
 801ca1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ca22:	f383 8811 	msr	BASEPRI, r3
 801ca26:	f3bf 8f6f 	isb	sy
 801ca2a:	f3bf 8f4f 	dsb	sy
 801ca2e:	60fb      	str	r3, [r7, #12]
}
 801ca30:	bf00      	nop
 801ca32:	bf00      	nop
 801ca34:	e7fd      	b.n	801ca32 <pvPortMalloc+0x176>
	return pvReturn;
 801ca36:	69fb      	ldr	r3, [r7, #28]
}
 801ca38:	4618      	mov	r0, r3
 801ca3a:	3728      	adds	r7, #40	@ 0x28
 801ca3c:	46bd      	mov	sp, r7
 801ca3e:	bd80      	pop	{r7, pc}
 801ca40:	200180dc 	.word	0x200180dc
 801ca44:	200180f0 	.word	0x200180f0
 801ca48:	200180e0 	.word	0x200180e0
 801ca4c:	200180d4 	.word	0x200180d4
 801ca50:	200180e4 	.word	0x200180e4
 801ca54:	200180e8 	.word	0x200180e8

0801ca58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801ca58:	b580      	push	{r7, lr}
 801ca5a:	b086      	sub	sp, #24
 801ca5c:	af00      	add	r7, sp, #0
 801ca5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d04f      	beq.n	801cb0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801ca6a:	2308      	movs	r3, #8
 801ca6c:	425b      	negs	r3, r3
 801ca6e:	697a      	ldr	r2, [r7, #20]
 801ca70:	4413      	add	r3, r2
 801ca72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801ca74:	697b      	ldr	r3, [r7, #20]
 801ca76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ca78:	693b      	ldr	r3, [r7, #16]
 801ca7a:	685a      	ldr	r2, [r3, #4]
 801ca7c:	4b25      	ldr	r3, [pc, #148]	@ (801cb14 <vPortFree+0xbc>)
 801ca7e:	681b      	ldr	r3, [r3, #0]
 801ca80:	4013      	ands	r3, r2
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d10b      	bne.n	801ca9e <vPortFree+0x46>
	__asm volatile
 801ca86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ca8a:	f383 8811 	msr	BASEPRI, r3
 801ca8e:	f3bf 8f6f 	isb	sy
 801ca92:	f3bf 8f4f 	dsb	sy
 801ca96:	60fb      	str	r3, [r7, #12]
}
 801ca98:	bf00      	nop
 801ca9a:	bf00      	nop
 801ca9c:	e7fd      	b.n	801ca9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801ca9e:	693b      	ldr	r3, [r7, #16]
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d00b      	beq.n	801cabe <vPortFree+0x66>
	__asm volatile
 801caa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801caaa:	f383 8811 	msr	BASEPRI, r3
 801caae:	f3bf 8f6f 	isb	sy
 801cab2:	f3bf 8f4f 	dsb	sy
 801cab6:	60bb      	str	r3, [r7, #8]
}
 801cab8:	bf00      	nop
 801caba:	bf00      	nop
 801cabc:	e7fd      	b.n	801caba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801cabe:	693b      	ldr	r3, [r7, #16]
 801cac0:	685a      	ldr	r2, [r3, #4]
 801cac2:	4b14      	ldr	r3, [pc, #80]	@ (801cb14 <vPortFree+0xbc>)
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	4013      	ands	r3, r2
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d01e      	beq.n	801cb0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801cacc:	693b      	ldr	r3, [r7, #16]
 801cace:	681b      	ldr	r3, [r3, #0]
 801cad0:	2b00      	cmp	r3, #0
 801cad2:	d11a      	bne.n	801cb0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801cad4:	693b      	ldr	r3, [r7, #16]
 801cad6:	685a      	ldr	r2, [r3, #4]
 801cad8:	4b0e      	ldr	r3, [pc, #56]	@ (801cb14 <vPortFree+0xbc>)
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	43db      	mvns	r3, r3
 801cade:	401a      	ands	r2, r3
 801cae0:	693b      	ldr	r3, [r7, #16]
 801cae2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801cae4:	f7fe fb56 	bl	801b194 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801cae8:	693b      	ldr	r3, [r7, #16]
 801caea:	685a      	ldr	r2, [r3, #4]
 801caec:	4b0a      	ldr	r3, [pc, #40]	@ (801cb18 <vPortFree+0xc0>)
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	4413      	add	r3, r2
 801caf2:	4a09      	ldr	r2, [pc, #36]	@ (801cb18 <vPortFree+0xc0>)
 801caf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801caf6:	6938      	ldr	r0, [r7, #16]
 801caf8:	f000 f876 	bl	801cbe8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801cafc:	4b07      	ldr	r3, [pc, #28]	@ (801cb1c <vPortFree+0xc4>)
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	3301      	adds	r3, #1
 801cb02:	4a06      	ldr	r2, [pc, #24]	@ (801cb1c <vPortFree+0xc4>)
 801cb04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801cb06:	f7fe fb53 	bl	801b1b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801cb0a:	bf00      	nop
 801cb0c:	3718      	adds	r7, #24
 801cb0e:	46bd      	mov	sp, r7
 801cb10:	bd80      	pop	{r7, pc}
 801cb12:	bf00      	nop
 801cb14:	200180f0 	.word	0x200180f0
 801cb18:	200180e0 	.word	0x200180e0
 801cb1c:	200180ec 	.word	0x200180ec

0801cb20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801cb20:	b480      	push	{r7}
 801cb22:	b085      	sub	sp, #20
 801cb24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801cb26:	4b29      	ldr	r3, [pc, #164]	@ (801cbcc <prvHeapInit+0xac>)
 801cb28:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801cb2a:	4b29      	ldr	r3, [pc, #164]	@ (801cbd0 <prvHeapInit+0xb0>)
 801cb2c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	f003 0307 	and.w	r3, r3, #7
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d00c      	beq.n	801cb52 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801cb38:	68fb      	ldr	r3, [r7, #12]
 801cb3a:	3307      	adds	r3, #7
 801cb3c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801cb3e:	68fb      	ldr	r3, [r7, #12]
 801cb40:	f023 0307 	bic.w	r3, r3, #7
 801cb44:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801cb46:	68ba      	ldr	r2, [r7, #8]
 801cb48:	68fb      	ldr	r3, [r7, #12]
 801cb4a:	1ad3      	subs	r3, r2, r3
 801cb4c:	4a20      	ldr	r2, [pc, #128]	@ (801cbd0 <prvHeapInit+0xb0>)
 801cb4e:	4413      	add	r3, r2
 801cb50:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801cb56:	4a1f      	ldr	r2, [pc, #124]	@ (801cbd4 <prvHeapInit+0xb4>)
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801cb5c:	4b1d      	ldr	r3, [pc, #116]	@ (801cbd4 <prvHeapInit+0xb4>)
 801cb5e:	2200      	movs	r2, #0
 801cb60:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	68ba      	ldr	r2, [r7, #8]
 801cb66:	4413      	add	r3, r2
 801cb68:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801cb6a:	2208      	movs	r2, #8
 801cb6c:	68fb      	ldr	r3, [r7, #12]
 801cb6e:	1a9b      	subs	r3, r3, r2
 801cb70:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801cb72:	68fb      	ldr	r3, [r7, #12]
 801cb74:	f023 0307 	bic.w	r3, r3, #7
 801cb78:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801cb7a:	68fb      	ldr	r3, [r7, #12]
 801cb7c:	4a16      	ldr	r2, [pc, #88]	@ (801cbd8 <prvHeapInit+0xb8>)
 801cb7e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801cb80:	4b15      	ldr	r3, [pc, #84]	@ (801cbd8 <prvHeapInit+0xb8>)
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	2200      	movs	r2, #0
 801cb86:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801cb88:	4b13      	ldr	r3, [pc, #76]	@ (801cbd8 <prvHeapInit+0xb8>)
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	2200      	movs	r2, #0
 801cb8e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801cb94:	683b      	ldr	r3, [r7, #0]
 801cb96:	68fa      	ldr	r2, [r7, #12]
 801cb98:	1ad2      	subs	r2, r2, r3
 801cb9a:	683b      	ldr	r3, [r7, #0]
 801cb9c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801cb9e:	4b0e      	ldr	r3, [pc, #56]	@ (801cbd8 <prvHeapInit+0xb8>)
 801cba0:	681a      	ldr	r2, [r3, #0]
 801cba2:	683b      	ldr	r3, [r7, #0]
 801cba4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801cba6:	683b      	ldr	r3, [r7, #0]
 801cba8:	685b      	ldr	r3, [r3, #4]
 801cbaa:	4a0c      	ldr	r2, [pc, #48]	@ (801cbdc <prvHeapInit+0xbc>)
 801cbac:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801cbae:	683b      	ldr	r3, [r7, #0]
 801cbb0:	685b      	ldr	r3, [r3, #4]
 801cbb2:	4a0b      	ldr	r2, [pc, #44]	@ (801cbe0 <prvHeapInit+0xc0>)
 801cbb4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801cbb6:	4b0b      	ldr	r3, [pc, #44]	@ (801cbe4 <prvHeapInit+0xc4>)
 801cbb8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801cbbc:	601a      	str	r2, [r3, #0]
}
 801cbbe:	bf00      	nop
 801cbc0:	3714      	adds	r7, #20
 801cbc2:	46bd      	mov	sp, r7
 801cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbc8:	4770      	bx	lr
 801cbca:	bf00      	nop
 801cbcc:	000160f8 	.word	0x000160f8
 801cbd0:	20001fdc 	.word	0x20001fdc
 801cbd4:	200180d4 	.word	0x200180d4
 801cbd8:	200180dc 	.word	0x200180dc
 801cbdc:	200180e4 	.word	0x200180e4
 801cbe0:	200180e0 	.word	0x200180e0
 801cbe4:	200180f0 	.word	0x200180f0

0801cbe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801cbe8:	b480      	push	{r7}
 801cbea:	b085      	sub	sp, #20
 801cbec:	af00      	add	r7, sp, #0
 801cbee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801cbf0:	4b28      	ldr	r3, [pc, #160]	@ (801cc94 <prvInsertBlockIntoFreeList+0xac>)
 801cbf2:	60fb      	str	r3, [r7, #12]
 801cbf4:	e002      	b.n	801cbfc <prvInsertBlockIntoFreeList+0x14>
 801cbf6:	68fb      	ldr	r3, [r7, #12]
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	60fb      	str	r3, [r7, #12]
 801cbfc:	68fb      	ldr	r3, [r7, #12]
 801cbfe:	681b      	ldr	r3, [r3, #0]
 801cc00:	687a      	ldr	r2, [r7, #4]
 801cc02:	429a      	cmp	r2, r3
 801cc04:	d8f7      	bhi.n	801cbf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801cc0a:	68fb      	ldr	r3, [r7, #12]
 801cc0c:	685b      	ldr	r3, [r3, #4]
 801cc0e:	68ba      	ldr	r2, [r7, #8]
 801cc10:	4413      	add	r3, r2
 801cc12:	687a      	ldr	r2, [r7, #4]
 801cc14:	429a      	cmp	r2, r3
 801cc16:	d108      	bne.n	801cc2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801cc18:	68fb      	ldr	r3, [r7, #12]
 801cc1a:	685a      	ldr	r2, [r3, #4]
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	685b      	ldr	r3, [r3, #4]
 801cc20:	441a      	add	r2, r3
 801cc22:	68fb      	ldr	r3, [r7, #12]
 801cc24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801cc26:	68fb      	ldr	r3, [r7, #12]
 801cc28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	685b      	ldr	r3, [r3, #4]
 801cc32:	68ba      	ldr	r2, [r7, #8]
 801cc34:	441a      	add	r2, r3
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	429a      	cmp	r2, r3
 801cc3c:	d118      	bne.n	801cc70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801cc3e:	68fb      	ldr	r3, [r7, #12]
 801cc40:	681a      	ldr	r2, [r3, #0]
 801cc42:	4b15      	ldr	r3, [pc, #84]	@ (801cc98 <prvInsertBlockIntoFreeList+0xb0>)
 801cc44:	681b      	ldr	r3, [r3, #0]
 801cc46:	429a      	cmp	r2, r3
 801cc48:	d00d      	beq.n	801cc66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	685a      	ldr	r2, [r3, #4]
 801cc4e:	68fb      	ldr	r3, [r7, #12]
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	685b      	ldr	r3, [r3, #4]
 801cc54:	441a      	add	r2, r3
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	681a      	ldr	r2, [r3, #0]
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	601a      	str	r2, [r3, #0]
 801cc64:	e008      	b.n	801cc78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801cc66:	4b0c      	ldr	r3, [pc, #48]	@ (801cc98 <prvInsertBlockIntoFreeList+0xb0>)
 801cc68:	681a      	ldr	r2, [r3, #0]
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	601a      	str	r2, [r3, #0]
 801cc6e:	e003      	b.n	801cc78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	681a      	ldr	r2, [r3, #0]
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801cc78:	68fa      	ldr	r2, [r7, #12]
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	429a      	cmp	r2, r3
 801cc7e:	d002      	beq.n	801cc86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801cc80:	68fb      	ldr	r3, [r7, #12]
 801cc82:	687a      	ldr	r2, [r7, #4]
 801cc84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801cc86:	bf00      	nop
 801cc88:	3714      	adds	r7, #20
 801cc8a:	46bd      	mov	sp, r7
 801cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc90:	4770      	bx	lr
 801cc92:	bf00      	nop
 801cc94:	200180d4 	.word	0x200180d4
 801cc98:	200180dc 	.word	0x200180dc

0801cc9c <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b086      	sub	sp, #24
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801cca4:	2300      	movs	r3, #0
 801cca6:	613b      	str	r3, [r7, #16]
 801cca8:	2300      	movs	r3, #0
 801ccaa:	60fb      	str	r3, [r7, #12]
 801ccac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ccb0:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 801ccb2:	f7fe fa6f 	bl	801b194 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 801ccb6:	4b22      	ldr	r3, [pc, #136]	@ (801cd40 <vPortGetHeapStats+0xa4>)
 801ccb8:	681b      	ldr	r3, [r3, #0]
 801ccba:	617b      	str	r3, [r7, #20]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 801ccbc:	697b      	ldr	r3, [r7, #20]
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d01a      	beq.n	801ccf8 <vPortGetHeapStats+0x5c>
		{
			do
			{
				/* Increment the number of blocks and record the largest block seen
				so far. */
				xBlocks++;
 801ccc2:	693b      	ldr	r3, [r7, #16]
 801ccc4:	3301      	adds	r3, #1
 801ccc6:	613b      	str	r3, [r7, #16]

				if( pxBlock->xBlockSize > xMaxSize )
 801ccc8:	697b      	ldr	r3, [r7, #20]
 801ccca:	685b      	ldr	r3, [r3, #4]
 801cccc:	68fa      	ldr	r2, [r7, #12]
 801ccce:	429a      	cmp	r2, r3
 801ccd0:	d202      	bcs.n	801ccd8 <vPortGetHeapStats+0x3c>
				{
					xMaxSize = pxBlock->xBlockSize;
 801ccd2:	697b      	ldr	r3, [r7, #20]
 801ccd4:	685b      	ldr	r3, [r3, #4]
 801ccd6:	60fb      	str	r3, [r7, #12]
				}

				if( pxBlock->xBlockSize < xMinSize )
 801ccd8:	697b      	ldr	r3, [r7, #20]
 801ccda:	685b      	ldr	r3, [r3, #4]
 801ccdc:	68ba      	ldr	r2, [r7, #8]
 801ccde:	429a      	cmp	r2, r3
 801cce0:	d902      	bls.n	801cce8 <vPortGetHeapStats+0x4c>
				{
					xMinSize = pxBlock->xBlockSize;
 801cce2:	697b      	ldr	r3, [r7, #20]
 801cce4:	685b      	ldr	r3, [r3, #4]
 801cce6:	60bb      	str	r3, [r7, #8]
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 801cce8:	697b      	ldr	r3, [r7, #20]
 801ccea:	681b      	ldr	r3, [r3, #0]
 801ccec:	617b      	str	r3, [r7, #20]
			} while( pxBlock != pxEnd );
 801ccee:	4b15      	ldr	r3, [pc, #84]	@ (801cd44 <vPortGetHeapStats+0xa8>)
 801ccf0:	681b      	ldr	r3, [r3, #0]
 801ccf2:	697a      	ldr	r2, [r7, #20]
 801ccf4:	429a      	cmp	r2, r3
 801ccf6:	d1e4      	bne.n	801ccc2 <vPortGetHeapStats+0x26>
		}
	}
	xTaskResumeAll();
 801ccf8:	f7fe fa5a 	bl	801b1b0 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	68fa      	ldr	r2, [r7, #12]
 801cd00:	605a      	str	r2, [r3, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	68ba      	ldr	r2, [r7, #8]
 801cd06:	609a      	str	r2, [r3, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	693a      	ldr	r2, [r7, #16]
 801cd0c:	60da      	str	r2, [r3, #12]

	taskENTER_CRITICAL();
 801cd0e:	f7ff fcb3 	bl	801c678 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801cd12:	4b0d      	ldr	r3, [pc, #52]	@ (801cd48 <vPortGetHeapStats+0xac>)
 801cd14:	681a      	ldr	r2, [r3, #0]
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	601a      	str	r2, [r3, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 801cd1a:	4b0c      	ldr	r3, [pc, #48]	@ (801cd4c <vPortGetHeapStats+0xb0>)
 801cd1c:	681a      	ldr	r2, [r3, #0]
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	615a      	str	r2, [r3, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801cd22:	4b0b      	ldr	r3, [pc, #44]	@ (801cd50 <vPortGetHeapStats+0xb4>)
 801cd24:	681a      	ldr	r2, [r3, #0]
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	619a      	str	r2, [r3, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 801cd2a:	4b0a      	ldr	r3, [pc, #40]	@ (801cd54 <vPortGetHeapStats+0xb8>)
 801cd2c:	681a      	ldr	r2, [r3, #0]
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	611a      	str	r2, [r3, #16]
	}
	taskEXIT_CRITICAL();
 801cd32:	f7ff fcd3 	bl	801c6dc <vPortExitCritical>
}
 801cd36:	bf00      	nop
 801cd38:	3718      	adds	r7, #24
 801cd3a:	46bd      	mov	sp, r7
 801cd3c:	bd80      	pop	{r7, pc}
 801cd3e:	bf00      	nop
 801cd40:	200180d4 	.word	0x200180d4
 801cd44:	200180dc 	.word	0x200180dc
 801cd48:	200180e0 	.word	0x200180e0
 801cd4c:	200180e8 	.word	0x200180e8
 801cd50:	200180ec 	.word	0x200180ec
 801cd54:	200180e4 	.word	0x200180e4

0801cd58 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801cd58:	b580      	push	{r7, lr}
 801cd5a:	b084      	sub	sp, #16
 801cd5c:	af00      	add	r7, sp, #0
 801cd5e:	6078      	str	r0, [r7, #4]
 801cd60:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	683a      	ldr	r2, [r7, #0]
 801cd66:	fb02 f303 	mul.w	r3, r2, r3
 801cd6a:	4618      	mov	r0, r3
 801cd6c:	f7ff fda6 	bl	801c8bc <pvPortMalloc>
 801cd70:	4603      	mov	r3, r0
 801cd72:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 801cd74:	68fb      	ldr	r3, [r7, #12]
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d008      	beq.n	801cd8c <mg_calloc+0x34>
 801cd7a:	683b      	ldr	r3, [r7, #0]
 801cd7c:	687a      	ldr	r2, [r7, #4]
 801cd7e:	fb02 f303 	mul.w	r3, r2, r3
 801cd82:	461a      	mov	r2, r3
 801cd84:	2100      	movs	r1, #0
 801cd86:	68f8      	ldr	r0, [r7, #12]
 801cd88:	f019 f9aa 	bl	80360e0 <memset>
  return p;
 801cd8c:	68fb      	ldr	r3, [r7, #12]
}
 801cd8e:	4618      	mov	r0, r3
 801cd90:	3710      	adds	r7, #16
 801cd92:	46bd      	mov	sp, r7
 801cd94:	bd80      	pop	{r7, pc}
	...

0801cd98 <mg_fs_lfs_status>:
//struct mg_fs *mg_fs;

void fs_proto(void){}; //function prototype

// Получение информации о файле
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 801cd98:	b580      	push	{r7, lr}
 801cd9a:	b0c6      	sub	sp, #280	@ 0x118
 801cd9c:	af00      	add	r7, sp, #0
 801cd9e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cda2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801cda6:	6018      	str	r0, [r3, #0]
 801cda8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cdac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801cdb0:	6019      	str	r1, [r3, #0]
 801cdb2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cdb6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801cdba:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    if (lfs_stat(&lfs, path, &info) == 0) {
 801cdbc:	f107 0210 	add.w	r2, r7, #16
 801cdc0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cdc4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801cdc8:	6819      	ldr	r1, [r3, #0]
 801cdca:	481d      	ldr	r0, [pc, #116]	@ (801ce40 <mg_fs_lfs_status+0xa8>)
 801cdcc:	f007 ff3c 	bl	8024c48 <lfs_stat>
 801cdd0:	4603      	mov	r3, r0
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d12e      	bne.n	801ce34 <mg_fs_lfs_status+0x9c>
        if (size) *size = info.size;
 801cdd6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cdda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d00a      	beq.n	801cdfa <mg_fs_lfs_status+0x62>
 801cde4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cde8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801cdec:	685a      	ldr	r2, [r3, #4]
 801cdee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cdf2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	601a      	str	r2, [r3, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 801cdfa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801cdfe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d00a      	beq.n	801ce1e <mg_fs_lfs_status+0x86>
 801ce08:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801ce0c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801ce10:	6819      	ldr	r1, [r3, #0]
 801ce12:	f04f 0200 	mov.w	r2, #0
 801ce16:	f04f 0300 	mov.w	r3, #0
 801ce1a:	e9c1 2300 	strd	r2, r3, [r1]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 801ce1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801ce22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801ce26:	781b      	ldrb	r3, [r3, #0]
 801ce28:	2b02      	cmp	r3, #2
 801ce2a:	d101      	bne.n	801ce30 <mg_fs_lfs_status+0x98>
 801ce2c:	2304      	movs	r3, #4
 801ce2e:	e002      	b.n	801ce36 <mg_fs_lfs_status+0x9e>
 801ce30:	2301      	movs	r3, #1
 801ce32:	e000      	b.n	801ce36 <mg_fs_lfs_status+0x9e>
    }
    return 0;
 801ce34:	2300      	movs	r3, #0
}
 801ce36:	4618      	mov	r0, r3
 801ce38:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801ce3c:	46bd      	mov	sp, r7
 801ce3e:	bd80      	pop	{r7, pc}
 801ce40:	200180f4 	.word	0x200180f4

0801ce44 <mg_fs_lfs_list>:

// Список файлов в директории
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b0d4      	sub	sp, #336	@ 0x150
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801ce4e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ce52:	6018      	str	r0, [r3, #0]
 801ce54:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801ce58:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ce5c:	6019      	str	r1, [r3, #0]
 801ce5e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801ce62:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801ce66:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    lfs_dir_t dir;
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 801ce68:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801ce6c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ce70:	f107 0114 	add.w	r1, r7, #20
 801ce74:	681a      	ldr	r2, [r3, #0]
 801ce76:	4816      	ldr	r0, [pc, #88]	@ (801ced0 <mg_fs_lfs_list+0x8c>)
 801ce78:	f008 f89e 	bl	8024fb8 <lfs_dir_open>
 801ce7c:	4603      	mov	r3, r0
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d120      	bne.n	801cec4 <mg_fs_lfs_list+0x80>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801ce82:	e00e      	b.n	801cea2 <mg_fs_lfs_list+0x5e>
            fn(info.name, userdata);
 801ce84:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801ce88:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 801ce8c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801ce90:	f103 0008 	add.w	r0, r3, #8
 801ce94:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801ce98:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	6811      	ldr	r1, [r2, #0]
 801cea0:	4798      	blx	r3
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801cea2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801cea6:	f107 0314 	add.w	r3, r7, #20
 801ceaa:	4619      	mov	r1, r3
 801ceac:	4808      	ldr	r0, [pc, #32]	@ (801ced0 <mg_fs_lfs_list+0x8c>)
 801ceae:	f008 f8e4 	bl	802507a <lfs_dir_read>
 801ceb2:	4603      	mov	r3, r0
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	dce5      	bgt.n	801ce84 <mg_fs_lfs_list+0x40>
        }
        lfs_dir_close(&lfs, &dir);
 801ceb8:	f107 0314 	add.w	r3, r7, #20
 801cebc:	4619      	mov	r1, r3
 801cebe:	4804      	ldr	r0, [pc, #16]	@ (801ced0 <mg_fs_lfs_list+0x8c>)
 801cec0:	f008 f8b8 	bl	8025034 <lfs_dir_close>
    }
}
 801cec4:	bf00      	nop
 801cec6:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 801ceca:	46bd      	mov	sp, r7
 801cecc:	bd80      	pop	{r7, pc}
 801cece:	bf00      	nop
 801ced0:	200180f4 	.word	0x200180f4

0801ced4 <mg_fs_lfs_open>:

// Открытие файла
void *mg_fs_lfs_open(const char *path, int flags) {
 801ced4:	b580      	push	{r7, lr}
 801ced6:	b084      	sub	sp, #16
 801ced8:	af00      	add	r7, sp, #0
 801ceda:	6078      	str	r0, [r7, #4]
 801cedc:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 801cede:	2054      	movs	r0, #84	@ 0x54
 801cee0:	f7ff fcec 	bl	801c8bc <pvPortMalloc>
 801cee4:	4603      	mov	r3, r0
 801cee6:	60bb      	str	r3, [r7, #8]
    if (fd == NULL) return NULL;
 801cee8:	68bb      	ldr	r3, [r7, #8]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d101      	bne.n	801cef2 <mg_fs_lfs_open+0x1e>
 801ceee:	2300      	movs	r3, #0
 801cef0:	e024      	b.n	801cf3c <mg_fs_lfs_open+0x68>

    int lfs_flags = 0;
 801cef2:	2300      	movs	r3, #0
 801cef4:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 801cef6:	683b      	ldr	r3, [r7, #0]
 801cef8:	f003 0301 	and.w	r3, r3, #1
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	d003      	beq.n	801cf08 <mg_fs_lfs_open+0x34>
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	f043 0301 	orr.w	r3, r3, #1
 801cf06:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 801cf08:	683b      	ldr	r3, [r7, #0]
 801cf0a:	f003 0302 	and.w	r3, r3, #2
 801cf0e:	2b00      	cmp	r3, #0
 801cf10:	d005      	beq.n	801cf1e <mg_fs_lfs_open+0x4a>
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 801cf18:	f043 0302 	orr.w	r3, r3, #2
 801cf1c:	60fb      	str	r3, [r7, #12]

    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 801cf1e:	68b9      	ldr	r1, [r7, #8]
 801cf20:	68fb      	ldr	r3, [r7, #12]
 801cf22:	687a      	ldr	r2, [r7, #4]
 801cf24:	4807      	ldr	r0, [pc, #28]	@ (801cf44 <mg_fs_lfs_open+0x70>)
 801cf26:	f007 feb5 	bl	8024c94 <lfs_file_open>
 801cf2a:	4603      	mov	r3, r0
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	da04      	bge.n	801cf3a <mg_fs_lfs_open+0x66>
        free(fd);
 801cf30:	68b8      	ldr	r0, [r7, #8]
 801cf32:	f7ff fd91 	bl	801ca58 <vPortFree>
        return NULL;
 801cf36:	2300      	movs	r3, #0
 801cf38:	e000      	b.n	801cf3c <mg_fs_lfs_open+0x68>
    }
    return fd;
 801cf3a:	68bb      	ldr	r3, [r7, #8]
}
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	3710      	adds	r7, #16
 801cf40:	46bd      	mov	sp, r7
 801cf42:	bd80      	pop	{r7, pc}
 801cf44:	200180f4 	.word	0x200180f4

0801cf48 <mg_fs_lfs_close>:

// Закрытие файла
void mg_fs_lfs_close(void *fd) {
 801cf48:	b580      	push	{r7, lr}
 801cf4a:	b084      	sub	sp, #16
 801cf4c:	af00      	add	r7, sp, #0
 801cf4e:	6078      	str	r0, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	60fb      	str	r3, [r7, #12]
    lfs_file_close(&lfs, &file->file);
 801cf54:	68fb      	ldr	r3, [r7, #12]
 801cf56:	4619      	mov	r1, r3
 801cf58:	4804      	ldr	r0, [pc, #16]	@ (801cf6c <mg_fs_lfs_close+0x24>)
 801cf5a:	f007 fedb 	bl	8024d14 <lfs_file_close>
    free(file);
 801cf5e:	68f8      	ldr	r0, [r7, #12]
 801cf60:	f7ff fd7a 	bl	801ca58 <vPortFree>
}
 801cf64:	bf00      	nop
 801cf66:	3710      	adds	r7, #16
 801cf68:	46bd      	mov	sp, r7
 801cf6a:	bd80      	pop	{r7, pc}
 801cf6c:	200180f4 	.word	0x200180f4

0801cf70 <mg_fs_lfs_read>:

// Чтение из файла
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 801cf70:	b580      	push	{r7, lr}
 801cf72:	b086      	sub	sp, #24
 801cf74:	af00      	add	r7, sp, #0
 801cf76:	60f8      	str	r0, [r7, #12]
 801cf78:	60b9      	str	r1, [r7, #8]
 801cf7a:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	617b      	str	r3, [r7, #20]
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 801cf80:	6979      	ldr	r1, [r7, #20]
 801cf82:	687b      	ldr	r3, [r7, #4]
 801cf84:	68ba      	ldr	r2, [r7, #8]
 801cf86:	4805      	ldr	r0, [pc, #20]	@ (801cf9c <mg_fs_lfs_read+0x2c>)
 801cf88:	f007 fefe 	bl	8024d88 <lfs_file_read>
 801cf8c:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 801cf8e:	693b      	ldr	r3, [r7, #16]
 801cf90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801cf94:	4618      	mov	r0, r3
 801cf96:	3718      	adds	r7, #24
 801cf98:	46bd      	mov	sp, r7
 801cf9a:	bd80      	pop	{r7, pc}
 801cf9c:	200180f4 	.word	0x200180f4

0801cfa0 <mg_fs_lfs_write>:

// Запись в файл
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801cfa0:	b580      	push	{r7, lr}
 801cfa2:	b086      	sub	sp, #24
 801cfa4:	af00      	add	r7, sp, #0
 801cfa6:	60f8      	str	r0, [r7, #12]
 801cfa8:	60b9      	str	r1, [r7, #8]
 801cfaa:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 801cfac:	68fb      	ldr	r3, [r7, #12]
 801cfae:	617b      	str	r3, [r7, #20]
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 801cfb0:	6979      	ldr	r1, [r7, #20]
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	68ba      	ldr	r2, [r7, #8]
 801cfb6:	4805      	ldr	r0, [pc, #20]	@ (801cfcc <mg_fs_lfs_write+0x2c>)
 801cfb8:	f007 ff24 	bl	8024e04 <lfs_file_write>
 801cfbc:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 801cfbe:	693b      	ldr	r3, [r7, #16]
 801cfc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801cfc4:	4618      	mov	r0, r3
 801cfc6:	3718      	adds	r7, #24
 801cfc8:	46bd      	mov	sp, r7
 801cfca:	bd80      	pop	{r7, pc}
 801cfcc:	200180f4 	.word	0x200180f4

0801cfd0 <mg_fs_lfs_seek>:

// Установка позиции в файле
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b084      	sub	sp, #16
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	6078      	str	r0, [r7, #4]
 801cfd8:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	60fb      	str	r3, [r7, #12]

    // Попытка установить позицию в файле
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 801cfde:	68f9      	ldr	r1, [r7, #12]
 801cfe0:	683a      	ldr	r2, [r7, #0]
 801cfe2:	2300      	movs	r3, #0
 801cfe4:	480c      	ldr	r0, [pc, #48]	@ (801d018 <mg_fs_lfs_seek+0x48>)
 801cfe6:	f007 ff4b 	bl	8024e80 <lfs_file_seek>
 801cfea:	4603      	mov	r3, r0
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	da02      	bge.n	801cff6 <mg_fs_lfs_seek+0x26>
        return (size_t)-1;  // Ошибка при перемещении
 801cff0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cff4:	e00c      	b.n	801d010 <mg_fs_lfs_seek+0x40>
    }

    // Получение текущей позиции в файле
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 801cff6:	68fb      	ldr	r3, [r7, #12]
 801cff8:	4619      	mov	r1, r3
 801cffa:	4807      	ldr	r0, [pc, #28]	@ (801d018 <mg_fs_lfs_seek+0x48>)
 801cffc:	f007 ff7e 	bl	8024efc <lfs_file_tell>
 801d000:	60b8      	str	r0, [r7, #8]

    // Проверка ошибки
     if (pos < 0) {
 801d002:	68bb      	ldr	r3, [r7, #8]
 801d004:	2b00      	cmp	r3, #0
 801d006:	da02      	bge.n	801d00e <mg_fs_lfs_seek+0x3e>
         return (size_t)-1;  // Ошибка при получении позиции
 801d008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d00c:	e000      	b.n	801d010 <mg_fs_lfs_seek+0x40>
     }

     return (size_t)pos;  // Возвращаем текущую позицию
 801d00e:	68bb      	ldr	r3, [r7, #8]

}
 801d010:	4618      	mov	r0, r3
 801d012:	3710      	adds	r7, #16
 801d014:	46bd      	mov	sp, r7
 801d016:	bd80      	pop	{r7, pc}
 801d018:	200180f4 	.word	0x200180f4

0801d01c <mg_fs_lfs_rename>:

// Переименование файла
bool mg_fs_lfs_rename(const char *from, const char *to) {
 801d01c:	b580      	push	{r7, lr}
 801d01e:	b082      	sub	sp, #8
 801d020:	af00      	add	r7, sp, #0
 801d022:	6078      	str	r0, [r7, #4]
 801d024:	6039      	str	r1, [r7, #0]
    return lfs_rename(&lfs, from, to) == 0;
 801d026:	683a      	ldr	r2, [r7, #0]
 801d028:	6879      	ldr	r1, [r7, #4]
 801d02a:	4806      	ldr	r0, [pc, #24]	@ (801d044 <mg_fs_lfs_rename+0x28>)
 801d02c:	f007 fde7 	bl	8024bfe <lfs_rename>
 801d030:	4603      	mov	r3, r0
 801d032:	2b00      	cmp	r3, #0
 801d034:	bf0c      	ite	eq
 801d036:	2301      	moveq	r3, #1
 801d038:	2300      	movne	r3, #0
 801d03a:	b2db      	uxtb	r3, r3
}
 801d03c:	4618      	mov	r0, r3
 801d03e:	3708      	adds	r7, #8
 801d040:	46bd      	mov	sp, r7
 801d042:	bd80      	pop	{r7, pc}
 801d044:	200180f4 	.word	0x200180f4

0801d048 <mg_fs_lfs_remove>:

// Удаление файла
bool mg_fs_lfs_remove(const char *path) {
 801d048:	b580      	push	{r7, lr}
 801d04a:	b082      	sub	sp, #8
 801d04c:	af00      	add	r7, sp, #0
 801d04e:	6078      	str	r0, [r7, #4]
    return lfs_remove(&lfs, path) == 0;
 801d050:	6879      	ldr	r1, [r7, #4]
 801d052:	4806      	ldr	r0, [pc, #24]	@ (801d06c <mg_fs_lfs_remove+0x24>)
 801d054:	f007 fdb0 	bl	8024bb8 <lfs_remove>
 801d058:	4603      	mov	r3, r0
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	bf0c      	ite	eq
 801d05e:	2301      	moveq	r3, #1
 801d060:	2300      	movne	r3, #0
 801d062:	b2db      	uxtb	r3, r3
}
 801d064:	4618      	mov	r0, r3
 801d066:	3708      	adds	r7, #8
 801d068:	46bd      	mov	sp, r7
 801d06a:	bd80      	pop	{r7, pc}
 801d06c:	200180f4 	.word	0x200180f4

0801d070 <mg_fs_lfs_mkdir>:
    // Удаление пустой директории
    return lfs_remove(&lfs, path);
}

// Создание директории
bool mg_fs_lfs_mkdir(const char *path) {
 801d070:	b580      	push	{r7, lr}
 801d072:	b082      	sub	sp, #8
 801d074:	af00      	add	r7, sp, #0
 801d076:	6078      	str	r0, [r7, #4]
    return lfs_mkdir(&lfs, path) == 0;
 801d078:	6879      	ldr	r1, [r7, #4]
 801d07a:	4806      	ldr	r0, [pc, #24]	@ (801d094 <mg_fs_lfs_mkdir+0x24>)
 801d07c:	f007 ff78 	bl	8024f70 <lfs_mkdir>
 801d080:	4603      	mov	r3, r0
 801d082:	2b00      	cmp	r3, #0
 801d084:	bf0c      	ite	eq
 801d086:	2301      	moveq	r3, #1
 801d088:	2300      	movne	r3, #0
 801d08a:	b2db      	uxtb	r3, r3
}
 801d08c:	4618      	mov	r0, r3
 801d08e:	3708      	adds	r7, #8
 801d090:	46bd      	mov	sp, r7
 801d092:	bd80      	pop	{r7, pc}
 801d094:	200180f4 	.word	0x200180f4

0801d098 <lfs_fs_ll_init>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size);
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size);
int block_device_erase(const struct lfs_config *c, lfs_block_t block);
int block_device_sync(const struct lfs_config *c);

int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 801d098:	b580      	push	{r7, lr}
 801d09a:	b08a      	sub	sp, #40	@ 0x28
 801d09c:	af00      	add	r7, sp, #0
 801d09e:	6078      	str	r0, [r7, #4]
 801d0a0:	6039      	str	r1, [r7, #0]

	struct SPI_flash_info	flash_info;

	flash_info = sFLASH_GetInfo();
 801d0a2:	f107 030c 	add.w	r3, r7, #12
 801d0a6:	4618      	mov	r0, r3
 801d0a8:	f7f8 fc12 	bl	80158d0 <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d102      	bne.n	801d0b8 <lfs_fs_ll_init+0x20>
 801d0b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d0b6:	e066      	b.n	801d186 <lfs_fs_ll_init+0xee>

	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 801d0b8:	8afb      	ldrh	r3, [r7, #22]
 801d0ba:	4619      	mov	r1, r3
 801d0bc:	2001      	movs	r0, #1
 801d0be:	f7ff fe4b 	bl	801cd58 <mg_calloc>
 801d0c2:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 801d0c4:	8afb      	ldrh	r3, [r7, #22]
 801d0c6:	4619      	mov	r1, r3
 801d0c8:	2001      	movs	r0, #1
 801d0ca:	f7ff fe45 	bl	801cd58 <mg_calloc>
 801d0ce:	6238      	str	r0, [r7, #32]
	void * lookahead_buff = calloc(1, flash_info.page_size);
 801d0d0:	8afb      	ldrh	r3, [r7, #22]
 801d0d2:	4619      	mov	r1, r3
 801d0d4:	2001      	movs	r0, #1
 801d0d6:	f7ff fe3f 	bl	801cd58 <mg_calloc>
 801d0da:	61f8      	str	r0, [r7, #28]

	if (!(read_buff || write_buff || lookahead_buff)){
 801d0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d108      	bne.n	801d0f4 <lfs_fs_ll_init+0x5c>
 801d0e2:	6a3b      	ldr	r3, [r7, #32]
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d105      	bne.n	801d0f4 <lfs_fs_ll_init+0x5c>
 801d0e8:	69fb      	ldr	r3, [r7, #28]
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d102      	bne.n	801d0f4 <lfs_fs_ll_init+0x5c>
		return -2;
 801d0ee:	f06f 0301 	mvn.w	r3, #1
 801d0f2:	e048      	b.n	801d186 <lfs_fs_ll_init+0xee>
	}

	cfg.read_size         = flash_info.read_size;
 801d0f4:	8a3b      	ldrh	r3, [r7, #16]
 801d0f6:	461a      	mov	r2, r3
 801d0f8:	4b25      	ldr	r3, [pc, #148]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d0fa:	61da      	str	r2, [r3, #28]
	cfg.prog_size         = flash_info.write_size;
 801d0fc:	8a7b      	ldrh	r3, [r7, #18]
 801d0fe:	461a      	mov	r2, r3
 801d100:	4b23      	ldr	r3, [pc, #140]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d102:	621a      	str	r2, [r3, #32]
    cfg.block_size        = flash_info.erase_size;
 801d104:	8abb      	ldrh	r3, [r7, #20]
 801d106:	461a      	mov	r2, r3
 801d108:	4b21      	ldr	r3, [pc, #132]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d10a:	625a      	str	r2, [r3, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801d10c:	8b3b      	ldrh	r3, [r7, #24]
 801d10e:	461a      	mov	r2, r3
 801d110:	4b1f      	ldr	r3, [pc, #124]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d112:	629a      	str	r2, [r3, #40]	@ 0x28

    cfg.lookahead_size    = flash_info.page_size;
 801d114:	8afb      	ldrh	r3, [r7, #22]
 801d116:	461a      	mov	r2, r3
 801d118:	4b1d      	ldr	r3, [pc, #116]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d11a:	635a      	str	r2, [r3, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 801d11c:	8afb      	ldrh	r3, [r7, #22]
 801d11e:	461a      	mov	r2, r3
 801d120:	4b1b      	ldr	r3, [pc, #108]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d122:	631a      	str	r2, [r3, #48]	@ 0x30

    cfg.read_buffer       = read_buff;
 801d124:	4a1a      	ldr	r2, [pc, #104]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d128:	63d3      	str	r3, [r2, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 801d12a:	4a19      	ldr	r2, [pc, #100]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d12c:	6a3b      	ldr	r3, [r7, #32]
 801d12e:	6413      	str	r3, [r2, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801d130:	4a17      	ldr	r2, [pc, #92]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d132:	69fb      	ldr	r3, [r7, #28]
 801d134:	6453      	str	r3, [r2, #68]	@ 0x44

    cfg.read   = block_device_read;
 801d136:	4b16      	ldr	r3, [pc, #88]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d138:	4a16      	ldr	r2, [pc, #88]	@ (801d194 <lfs_fs_ll_init+0xfc>)
 801d13a:	605a      	str	r2, [r3, #4]
    cfg.prog   = block_device_prog;
 801d13c:	4b14      	ldr	r3, [pc, #80]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d13e:	4a16      	ldr	r2, [pc, #88]	@ (801d198 <lfs_fs_ll_init+0x100>)
 801d140:	609a      	str	r2, [r3, #8]
    cfg.erase  = block_device_erase;
 801d142:	4b13      	ldr	r3, [pc, #76]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d144:	4a15      	ldr	r2, [pc, #84]	@ (801d19c <lfs_fs_ll_init+0x104>)
 801d146:	60da      	str	r2, [r3, #12]
    cfg.sync   = block_device_sync;
 801d148:	4b11      	ldr	r3, [pc, #68]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d14a:	4a15      	ldr	r2, [pc, #84]	@ (801d1a0 <lfs_fs_ll_init+0x108>)
 801d14c:	611a      	str	r2, [r3, #16]

    cfg.lock 	= lock;
 801d14e:	4a10      	ldr	r2, [pc, #64]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	6153      	str	r3, [r2, #20]
	cfg.unlock	= unlock;
 801d154:	4a0e      	ldr	r2, [pc, #56]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d156:	683b      	ldr	r3, [r7, #0]
 801d158:	6193      	str	r3, [r2, #24]

#ifdef LFS_THREADSAFE
#endif

    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 801d15a:	4b0d      	ldr	r3, [pc, #52]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d15c:	f242 7210 	movw	r2, #10000	@ 0x2710
 801d160:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (lfs_mount(&lfs, &cfg)< 0){
 801d162:	490b      	ldr	r1, [pc, #44]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d164:	480f      	ldr	r0, [pc, #60]	@ (801d1a4 <lfs_fs_ll_init+0x10c>)
 801d166:	f007 fd0a 	bl	8024b7e <lfs_mount>
 801d16a:	4603      	mov	r3, r0
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	da09      	bge.n	801d184 <lfs_fs_ll_init+0xec>
    	lfs_format(&lfs, &cfg);
 801d170:	4907      	ldr	r1, [pc, #28]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d172:	480c      	ldr	r0, [pc, #48]	@ (801d1a4 <lfs_fs_ll_init+0x10c>)
 801d174:	f007 fce6 	bl	8024b44 <lfs_format>
    	return lfs_mount(&lfs, &cfg);
 801d178:	4905      	ldr	r1, [pc, #20]	@ (801d190 <lfs_fs_ll_init+0xf8>)
 801d17a:	480a      	ldr	r0, [pc, #40]	@ (801d1a4 <lfs_fs_ll_init+0x10c>)
 801d17c:	f007 fcff 	bl	8024b7e <lfs_mount>
 801d180:	4603      	mov	r3, r0
 801d182:	e000      	b.n	801d186 <lfs_fs_ll_init+0xee>
    }

	return 0;
 801d184:	2300      	movs	r3, #0
}
 801d186:	4618      	mov	r0, r3
 801d188:	3728      	adds	r7, #40	@ 0x28
 801d18a:	46bd      	mov	sp, r7
 801d18c:	bd80      	pop	{r7, pc}
 801d18e:	bf00      	nop
 801d190:	20018174 	.word	0x20018174
 801d194:	0801d1a9 	.word	0x0801d1a9
 801d198:	0801d249 	.word	0x0801d249
 801d19c:	0801d201 	.word	0x0801d201
 801d1a0:	0801d2a1 	.word	0x0801d2a1
 801d1a4:	200180f4 	.word	0x200180f4

0801d1a8 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 801d1a8:	b580      	push	{r7, lr}
 801d1aa:	b084      	sub	sp, #16
 801d1ac:	af00      	add	r7, sp, #0
 801d1ae:	60f8      	str	r0, [r7, #12]
 801d1b0:	60b9      	str	r1, [r7, #8]
 801d1b2:	607a      	str	r2, [r7, #4]
 801d1b4:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 801d1b6:	68fb      	ldr	r3, [r7, #12]
 801d1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d1ba:	68ba      	ldr	r2, [r7, #8]
 801d1bc:	429a      	cmp	r2, r3
 801d1be:	d306      	bcc.n	801d1ce <block_device_read+0x26>
 801d1c0:	4b0c      	ldr	r3, [pc, #48]	@ (801d1f4 <block_device_read+0x4c>)
 801d1c2:	4a0d      	ldr	r2, [pc, #52]	@ (801d1f8 <block_device_read+0x50>)
 801d1c4:	f240 1111 	movw	r1, #273	@ 0x111
 801d1c8:	480c      	ldr	r0, [pc, #48]	@ (801d1fc <block_device_read+0x54>)
 801d1ca:	f016 fa35 	bl	8033638 <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801d1ce:	68fb      	ldr	r3, [r7, #12]
 801d1d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d1d2:	68ba      	ldr	r2, [r7, #8]
 801d1d4:	fb03 f202 	mul.w	r2, r3, r2
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	4413      	add	r3, r2
 801d1dc:	69ba      	ldr	r2, [r7, #24]
 801d1de:	b292      	uxth	r2, r2
 801d1e0:	4619      	mov	r1, r3
 801d1e2:	6838      	ldr	r0, [r7, #0]
 801d1e4:	f7f8 fd42 	bl	8015c6c <sFLASH_ReadBuffer>
	return 0;
 801d1e8:	2300      	movs	r3, #0
}
 801d1ea:	4618      	mov	r0, r3
 801d1ec:	3710      	adds	r7, #16
 801d1ee:	46bd      	mov	sp, r7
 801d1f0:	bd80      	pop	{r7, pc}
 801d1f2:	bf00      	nop
 801d1f4:	08040d68 	.word	0x08040d68
 801d1f8:	080447ec 	.word	0x080447ec
 801d1fc:	08040d80 	.word	0x08040d80

0801d200 <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 801d200:	b580      	push	{r7, lr}
 801d202:	b082      	sub	sp, #8
 801d204:	af00      	add	r7, sp, #0
 801d206:	6078      	str	r0, [r7, #4]
 801d208:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d20e:	683a      	ldr	r2, [r7, #0]
 801d210:	429a      	cmp	r2, r3
 801d212:	d306      	bcc.n	801d222 <block_device_erase+0x22>
 801d214:	4b09      	ldr	r3, [pc, #36]	@ (801d23c <block_device_erase+0x3c>)
 801d216:	4a0a      	ldr	r2, [pc, #40]	@ (801d240 <block_device_erase+0x40>)
 801d218:	f240 1119 	movw	r1, #281	@ 0x119
 801d21c:	4809      	ldr	r0, [pc, #36]	@ (801d244 <block_device_erase+0x44>)
 801d21e:	f016 fa0b 	bl	8033638 <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d226:	683a      	ldr	r2, [r7, #0]
 801d228:	fb02 f303 	mul.w	r3, r2, r3
 801d22c:	4618      	mov	r0, r3
 801d22e:	f7f8 fc1b 	bl	8015a68 <sFLASH_EraseSector>
	return 0;
 801d232:	2300      	movs	r3, #0
}
 801d234:	4618      	mov	r0, r3
 801d236:	3708      	adds	r7, #8
 801d238:	46bd      	mov	sp, r7
 801d23a:	bd80      	pop	{r7, pc}
 801d23c:	08040d68 	.word	0x08040d68
 801d240:	08044800 	.word	0x08044800
 801d244:	08040d80 	.word	0x08040d80

0801d248 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801d248:	b580      	push	{r7, lr}
 801d24a:	b084      	sub	sp, #16
 801d24c:	af00      	add	r7, sp, #0
 801d24e:	60f8      	str	r0, [r7, #12]
 801d250:	60b9      	str	r1, [r7, #8]
 801d252:	607a      	str	r2, [r7, #4]
 801d254:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 801d256:	68fb      	ldr	r3, [r7, #12]
 801d258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d25a:	68ba      	ldr	r2, [r7, #8]
 801d25c:	429a      	cmp	r2, r3
 801d25e:	d306      	bcc.n	801d26e <block_device_prog+0x26>
 801d260:	4b0c      	ldr	r3, [pc, #48]	@ (801d294 <block_device_prog+0x4c>)
 801d262:	4a0d      	ldr	r2, [pc, #52]	@ (801d298 <block_device_prog+0x50>)
 801d264:	f240 1121 	movw	r1, #289	@ 0x121
 801d268:	480c      	ldr	r0, [pc, #48]	@ (801d29c <block_device_prog+0x54>)
 801d26a:	f016 f9e5 	bl	8033638 <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d272:	68ba      	ldr	r2, [r7, #8]
 801d274:	fb03 f202 	mul.w	r2, r3, r2
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	4413      	add	r3, r2
 801d27c:	69ba      	ldr	r2, [r7, #24]
 801d27e:	b292      	uxth	r2, r2
 801d280:	4619      	mov	r1, r3
 801d282:	6838      	ldr	r0, [r7, #0]
 801d284:	f7f8 fc49 	bl	8015b1a <sFLASH_WriteBuffer>
	return 0;
 801d288:	2300      	movs	r3, #0
}
 801d28a:	4618      	mov	r0, r3
 801d28c:	3710      	adds	r7, #16
 801d28e:	46bd      	mov	sp, r7
 801d290:	bd80      	pop	{r7, pc}
 801d292:	bf00      	nop
 801d294:	08040d68 	.word	0x08040d68
 801d298:	08044814 	.word	0x08044814
 801d29c:	08040d80 	.word	0x08040d80

0801d2a0 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 801d2a0:	b480      	push	{r7}
 801d2a2:	b083      	sub	sp, #12
 801d2a4:	af00      	add	r7, sp, #0
 801d2a6:	6078      	str	r0, [r7, #4]
	return 0;
 801d2a8:	2300      	movs	r3, #0
}
 801d2aa:	4618      	mov	r0, r3
 801d2ac:	370c      	adds	r7, #12
 801d2ae:	46bd      	mov	sp, r7
 801d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2b4:	4770      	bx	lr

0801d2b6 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 801d2b6:	b480      	push	{r7}
 801d2b8:	b083      	sub	sp, #12
 801d2ba:	af00      	add	r7, sp, #0
 801d2bc:	6078      	str	r0, [r7, #4]
 801d2be:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 801d2c0:	683a      	ldr	r2, [r7, #0]
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	4293      	cmp	r3, r2
 801d2c6:	bf38      	it	cc
 801d2c8:	4613      	movcc	r3, r2
}
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	370c      	adds	r7, #12
 801d2ce:	46bd      	mov	sp, r7
 801d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2d4:	4770      	bx	lr

0801d2d6 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 801d2d6:	b480      	push	{r7}
 801d2d8:	b083      	sub	sp, #12
 801d2da:	af00      	add	r7, sp, #0
 801d2dc:	6078      	str	r0, [r7, #4]
 801d2de:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 801d2e0:	683a      	ldr	r2, [r7, #0]
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	4293      	cmp	r3, r2
 801d2e6:	bf28      	it	cs
 801d2e8:	4613      	movcs	r3, r2
}
 801d2ea:	4618      	mov	r0, r3
 801d2ec:	370c      	adds	r7, #12
 801d2ee:	46bd      	mov	sp, r7
 801d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2f4:	4770      	bx	lr

0801d2f6 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 801d2f6:	b480      	push	{r7}
 801d2f8:	b083      	sub	sp, #12
 801d2fa:	af00      	add	r7, sp, #0
 801d2fc:	6078      	str	r0, [r7, #4]
 801d2fe:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	683a      	ldr	r2, [r7, #0]
 801d304:	fbb3 f2f2 	udiv	r2, r3, r2
 801d308:	6839      	ldr	r1, [r7, #0]
 801d30a:	fb01 f202 	mul.w	r2, r1, r2
 801d30e:	1a9b      	subs	r3, r3, r2
 801d310:	687a      	ldr	r2, [r7, #4]
 801d312:	1ad3      	subs	r3, r2, r3
}
 801d314:	4618      	mov	r0, r3
 801d316:	370c      	adds	r7, #12
 801d318:	46bd      	mov	sp, r7
 801d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d31e:	4770      	bx	lr

0801d320 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 801d320:	b580      	push	{r7, lr}
 801d322:	b082      	sub	sp, #8
 801d324:	af00      	add	r7, sp, #0
 801d326:	6078      	str	r0, [r7, #4]
 801d328:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 801d32a:	687a      	ldr	r2, [r7, #4]
 801d32c:	683b      	ldr	r3, [r7, #0]
 801d32e:	4413      	add	r3, r2
 801d330:	3b01      	subs	r3, #1
 801d332:	6839      	ldr	r1, [r7, #0]
 801d334:	4618      	mov	r0, r3
 801d336:	f7ff ffde 	bl	801d2f6 <lfs_aligndown>
 801d33a:	4603      	mov	r3, r0
}
 801d33c:	4618      	mov	r0, r3
 801d33e:	3708      	adds	r7, #8
 801d340:	46bd      	mov	sp, r7
 801d342:	bd80      	pop	{r7, pc}

0801d344 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 801d344:	b480      	push	{r7}
 801d346:	b083      	sub	sp, #12
 801d348:	af00      	add	r7, sp, #0
 801d34a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	3b01      	subs	r3, #1
 801d350:	fab3 f383 	clz	r3, r3
 801d354:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 801d358:	4618      	mov	r0, r3
 801d35a:	370c      	adds	r7, #12
 801d35c:	46bd      	mov	sp, r7
 801d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d362:	4770      	bx	lr

0801d364 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 801d364:	b480      	push	{r7}
 801d366:	b083      	sub	sp, #12
 801d368:	af00      	add	r7, sp, #0
 801d36a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 801d36c:	687b      	ldr	r3, [r7, #4]
 801d36e:	fa93 f3a3 	rbit	r3, r3
 801d372:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 801d376:	4618      	mov	r0, r3
 801d378:	370c      	adds	r7, #12
 801d37a:	46bd      	mov	sp, r7
 801d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d380:	4770      	bx	lr

0801d382 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 801d382:	b580      	push	{r7, lr}
 801d384:	b082      	sub	sp, #8
 801d386:	af00      	add	r7, sp, #0
 801d388:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 801d38a:	6878      	ldr	r0, [r7, #4]
 801d38c:	f7f3 fcfc 	bl	8010d88 <__popcountsi2>
 801d390:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 801d392:	4618      	mov	r0, r3
 801d394:	3708      	adds	r7, #8
 801d396:	46bd      	mov	sp, r7
 801d398:	bd80      	pop	{r7, pc}

0801d39a <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 801d39a:	b480      	push	{r7}
 801d39c:	b083      	sub	sp, #12
 801d39e:	af00      	add	r7, sp, #0
 801d3a0:	6078      	str	r0, [r7, #4]
 801d3a2:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 801d3a4:	687a      	ldr	r2, [r7, #4]
 801d3a6:	683b      	ldr	r3, [r7, #0]
 801d3a8:	1ad3      	subs	r3, r2, r3
}
 801d3aa:	4618      	mov	r0, r3
 801d3ac:	370c      	adds	r7, #12
 801d3ae:	46bd      	mov	sp, r7
 801d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3b4:	4770      	bx	lr

0801d3b6 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 801d3b6:	b480      	push	{r7}
 801d3b8:	b083      	sub	sp, #12
 801d3ba:	af00      	add	r7, sp, #0
 801d3bc:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 801d3be:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 801d3c0:	4618      	mov	r0, r3
 801d3c2:	370c      	adds	r7, #12
 801d3c4:	46bd      	mov	sp, r7
 801d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3ca:	4770      	bx	lr

0801d3cc <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 801d3cc:	b580      	push	{r7, lr}
 801d3ce:	b082      	sub	sp, #8
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 801d3d4:	6878      	ldr	r0, [r7, #4]
 801d3d6:	f7ff ffee 	bl	801d3b6 <lfs_fromle32>
 801d3da:	4603      	mov	r3, r0
}
 801d3dc:	4618      	mov	r0, r3
 801d3de:	3708      	adds	r7, #8
 801d3e0:	46bd      	mov	sp, r7
 801d3e2:	bd80      	pop	{r7, pc}

0801d3e4 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 801d3e4:	b480      	push	{r7}
 801d3e6:	b083      	sub	sp, #12
 801d3e8:	af00      	add	r7, sp, #0
 801d3ea:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 801d3f0:	4618      	mov	r0, r3
 801d3f2:	370c      	adds	r7, #12
 801d3f4:	46bd      	mov	sp, r7
 801d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3fa:	4770      	bx	lr

0801d3fc <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 801d3fc:	b580      	push	{r7, lr}
 801d3fe:	b082      	sub	sp, #8
 801d400:	af00      	add	r7, sp, #0
 801d402:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 801d404:	6878      	ldr	r0, [r7, #4]
 801d406:	f7ff ffed 	bl	801d3e4 <lfs_frombe32>
 801d40a:	4603      	mov	r3, r0
}
 801d40c:	4618      	mov	r0, r3
 801d40e:	3708      	adds	r7, #8
 801d410:	46bd      	mov	sp, r7
 801d412:	bd80      	pop	{r7, pc}

0801d414 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 801d414:	b580      	push	{r7, lr}
 801d416:	b082      	sub	sp, #8
 801d418:	af00      	add	r7, sp, #0
 801d41a:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 801d41c:	6878      	ldr	r0, [r7, #4]
 801d41e:	f7ff fa4d 	bl	801c8bc <pvPortMalloc>
 801d422:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 801d424:	4618      	mov	r0, r3
 801d426:	3708      	adds	r7, #8
 801d428:	46bd      	mov	sp, r7
 801d42a:	bd80      	pop	{r7, pc}

0801d42c <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 801d42c:	b580      	push	{r7, lr}
 801d42e:	b082      	sub	sp, #8
 801d430:	af00      	add	r7, sp, #0
 801d432:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801d434:	6878      	ldr	r0, [r7, #4]
 801d436:	f7ff fb0f 	bl	801ca58 <vPortFree>
#else
    (void)p;
#endif
}
 801d43a:	bf00      	nop
 801d43c:	3708      	adds	r7, #8
 801d43e:	46bd      	mov	sp, r7
 801d440:	bd80      	pop	{r7, pc}

0801d442 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 801d442:	b480      	push	{r7}
 801d444:	b083      	sub	sp, #12
 801d446:	af00      	add	r7, sp, #0
 801d448:	6078      	str	r0, [r7, #4]
 801d44a:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 801d44c:	683b      	ldr	r3, [r7, #0]
 801d44e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d452:	601a      	str	r2, [r3, #0]
}
 801d454:	bf00      	nop
 801d456:	370c      	adds	r7, #12
 801d458:	46bd      	mov	sp, r7
 801d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d45e:	4770      	bx	lr

0801d460 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 801d460:	b580      	push	{r7, lr}
 801d462:	b082      	sub	sp, #8
 801d464:	af00      	add	r7, sp, #0
 801d466:	6078      	str	r0, [r7, #4]
 801d468:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 801d46a:	683b      	ldr	r3, [r7, #0]
 801d46c:	68d8      	ldr	r0, [r3, #12]
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d474:	461a      	mov	r2, r3
 801d476:	21ff      	movs	r1, #255	@ 0xff
 801d478:	f018 fe32 	bl	80360e0 <memset>
    pcache->block = LFS_BLOCK_NULL;
 801d47c:	683b      	ldr	r3, [r7, #0]
 801d47e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d482:	601a      	str	r2, [r3, #0]
}
 801d484:	bf00      	nop
 801d486:	3708      	adds	r7, #8
 801d488:	46bd      	mov	sp, r7
 801d48a:	bd80      	pop	{r7, pc}

0801d48c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 801d48c:	b5b0      	push	{r4, r5, r7, lr}
 801d48e:	b08a      	sub	sp, #40	@ 0x28
 801d490:	af02      	add	r7, sp, #8
 801d492:	60f8      	str	r0, [r7, #12]
 801d494:	60b9      	str	r1, [r7, #8]
 801d496:	607a      	str	r2, [r7, #4]
 801d498:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 801d49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d49c:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 801d49e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d4a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d4a2:	441a      	add	r2, r3
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d4a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d4aa:	429a      	cmp	r2, r3
 801d4ac:	d80a      	bhi.n	801d4c4 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 801d4ae:	68fb      	ldr	r3, [r7, #12]
 801d4b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	f000 8124 	beq.w	801d700 <lfs_bd_read+0x274>
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d4bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d4be:	429a      	cmp	r2, r3
 801d4c0:	f0c0 811e 	bcc.w	801d700 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 801d4c4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d4c8:	e11f      	b.n	801d70a <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 801d4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d4cc:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 801d4ce:	68bb      	ldr	r3, [r7, #8]
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	d03f      	beq.n	801d554 <lfs_bd_read+0xc8>
 801d4d4:	68bb      	ldr	r3, [r7, #8]
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d4da:	429a      	cmp	r2, r3
 801d4dc:	d13a      	bne.n	801d554 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 801d4de:	68bb      	ldr	r3, [r7, #8]
 801d4e0:	685a      	ldr	r2, [r3, #4]
 801d4e2:	68bb      	ldr	r3, [r7, #8]
 801d4e4:	689b      	ldr	r3, [r3, #8]
 801d4e6:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 801d4e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d4ea:	429a      	cmp	r2, r3
 801d4ec:	d232      	bcs.n	801d554 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 801d4ee:	68bb      	ldr	r3, [r7, #8]
 801d4f0:	685b      	ldr	r3, [r3, #4]
 801d4f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d4f4:	429a      	cmp	r2, r3
 801d4f6:	d324      	bcc.n	801d542 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801d4f8:	68bb      	ldr	r3, [r7, #8]
 801d4fa:	689a      	ldr	r2, [r3, #8]
 801d4fc:	68bb      	ldr	r3, [r7, #8]
 801d4fe:	6859      	ldr	r1, [r3, #4]
 801d500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d502:	1acb      	subs	r3, r1, r3
 801d504:	4413      	add	r3, r2
 801d506:	4619      	mov	r1, r3
 801d508:	69b8      	ldr	r0, [r7, #24]
 801d50a:	f7ff fee4 	bl	801d2d6 <lfs_min>
 801d50e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801d510:	68bb      	ldr	r3, [r7, #8]
 801d512:	68da      	ldr	r2, [r3, #12]
 801d514:	68bb      	ldr	r3, [r7, #8]
 801d516:	685b      	ldr	r3, [r3, #4]
 801d518:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d51a:	1acb      	subs	r3, r1, r3
 801d51c:	4413      	add	r3, r2
 801d51e:	69ba      	ldr	r2, [r7, #24]
 801d520:	4619      	mov	r1, r3
 801d522:	69f8      	ldr	r0, [r7, #28]
 801d524:	f01a f818 	bl	8037558 <memcpy>

                data += diff;
 801d528:	69fa      	ldr	r2, [r7, #28]
 801d52a:	69bb      	ldr	r3, [r7, #24]
 801d52c:	4413      	add	r3, r2
 801d52e:	61fb      	str	r3, [r7, #28]
                off += diff;
 801d530:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d532:	69bb      	ldr	r3, [r7, #24]
 801d534:	4413      	add	r3, r2
 801d536:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 801d538:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d53a:	69bb      	ldr	r3, [r7, #24]
 801d53c:	1ad3      	subs	r3, r2, r3
 801d53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 801d540:	e0de      	b.n	801d700 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 801d542:	68bb      	ldr	r3, [r7, #8]
 801d544:	685a      	ldr	r2, [r3, #4]
 801d546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d548:	1ad3      	subs	r3, r2, r3
 801d54a:	4619      	mov	r1, r3
 801d54c:	69b8      	ldr	r0, [r7, #24]
 801d54e:	f7ff fec2 	bl	801d2d6 <lfs_min>
 801d552:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d55a:	429a      	cmp	r2, r3
 801d55c:	d13a      	bne.n	801d5d4 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	685a      	ldr	r2, [r3, #4]
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	689b      	ldr	r3, [r3, #8]
 801d566:	4413      	add	r3, r2
        if (block == rcache->block &&
 801d568:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d56a:	429a      	cmp	r2, r3
 801d56c:	d232      	bcs.n	801d5d4 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	685b      	ldr	r3, [r3, #4]
 801d572:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d574:	429a      	cmp	r2, r3
 801d576:	d324      	bcc.n	801d5c2 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	689a      	ldr	r2, [r3, #8]
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	6859      	ldr	r1, [r3, #4]
 801d580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d582:	1acb      	subs	r3, r1, r3
 801d584:	4413      	add	r3, r2
 801d586:	4619      	mov	r1, r3
 801d588:	69b8      	ldr	r0, [r7, #24]
 801d58a:	f7ff fea4 	bl	801d2d6 <lfs_min>
 801d58e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801d590:	687b      	ldr	r3, [r7, #4]
 801d592:	68da      	ldr	r2, [r3, #12]
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	685b      	ldr	r3, [r3, #4]
 801d598:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d59a:	1acb      	subs	r3, r1, r3
 801d59c:	4413      	add	r3, r2
 801d59e:	69ba      	ldr	r2, [r7, #24]
 801d5a0:	4619      	mov	r1, r3
 801d5a2:	69f8      	ldr	r0, [r7, #28]
 801d5a4:	f019 ffd8 	bl	8037558 <memcpy>

                data += diff;
 801d5a8:	69fa      	ldr	r2, [r7, #28]
 801d5aa:	69bb      	ldr	r3, [r7, #24]
 801d5ac:	4413      	add	r3, r2
 801d5ae:	61fb      	str	r3, [r7, #28]
                off += diff;
 801d5b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d5b2:	69bb      	ldr	r3, [r7, #24]
 801d5b4:	4413      	add	r3, r2
 801d5b6:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 801d5b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d5ba:	69bb      	ldr	r3, [r7, #24]
 801d5bc:	1ad3      	subs	r3, r2, r3
 801d5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 801d5c0:	e09e      	b.n	801d700 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	685a      	ldr	r2, [r3, #4]
 801d5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d5c8:	1ad3      	subs	r3, r2, r3
 801d5ca:	4619      	mov	r1, r3
 801d5cc:	69b8      	ldr	r0, [r7, #24]
 801d5ce:	f7ff fe82 	bl	801d2d6 <lfs_min>
 801d5d2:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801d5d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d5d6:	683b      	ldr	r3, [r7, #0]
 801d5d8:	429a      	cmp	r2, r3
 801d5da:	d336      	bcc.n	801d64a <lfs_bd_read+0x1be>
 801d5dc:	68fb      	ldr	r3, [r7, #12]
 801d5de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d5e0:	69da      	ldr	r2, [r3, #28]
 801d5e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d5e4:	fbb3 f1f2 	udiv	r1, r3, r2
 801d5e8:	fb01 f202 	mul.w	r2, r1, r2
 801d5ec:	1a9b      	subs	r3, r3, r2
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	d12b      	bne.n	801d64a <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 801d5f2:	68fb      	ldr	r3, [r7, #12]
 801d5f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d5f6:	69db      	ldr	r3, [r3, #28]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801d5f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d5fa:	429a      	cmp	r2, r3
 801d5fc:	d325      	bcc.n	801d64a <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d602:	69db      	ldr	r3, [r3, #28]
 801d604:	4619      	mov	r1, r3
 801d606:	69b8      	ldr	r0, [r7, #24]
 801d608:	f7ff fe75 	bl	801d2f6 <lfs_aligndown>
 801d60c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 801d60e:	68fb      	ldr	r3, [r7, #12]
 801d610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d612:	685c      	ldr	r4, [r3, #4]
 801d614:	68fb      	ldr	r3, [r7, #12]
 801d616:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801d618:	69bb      	ldr	r3, [r7, #24]
 801d61a:	9300      	str	r3, [sp, #0]
 801d61c:	69fb      	ldr	r3, [r7, #28]
 801d61e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d620:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801d622:	47a0      	blx	r4
 801d624:	6178      	str	r0, [r7, #20]
            if (err) {
 801d626:	697b      	ldr	r3, [r7, #20]
 801d628:	2b00      	cmp	r3, #0
 801d62a:	d001      	beq.n	801d630 <lfs_bd_read+0x1a4>
                return err;
 801d62c:	697b      	ldr	r3, [r7, #20]
 801d62e:	e06c      	b.n	801d70a <lfs_bd_read+0x27e>
            }

            data += diff;
 801d630:	69fa      	ldr	r2, [r7, #28]
 801d632:	69bb      	ldr	r3, [r7, #24]
 801d634:	4413      	add	r3, r2
 801d636:	61fb      	str	r3, [r7, #28]
            off += diff;
 801d638:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d63a:	69bb      	ldr	r3, [r7, #24]
 801d63c:	4413      	add	r3, r2
 801d63e:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 801d640:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d642:	69bb      	ldr	r3, [r7, #24]
 801d644:	1ad3      	subs	r3, r2, r3
 801d646:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 801d648:	e05a      	b.n	801d700 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801d64a:	68fb      	ldr	r3, [r7, #12]
 801d64c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d64e:	2b00      	cmp	r3, #0
 801d650:	d00a      	beq.n	801d668 <lfs_bd_read+0x1dc>
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d658:	429a      	cmp	r2, r3
 801d65a:	d305      	bcc.n	801d668 <lfs_bd_read+0x1dc>
 801d65c:	4b2d      	ldr	r3, [pc, #180]	@ (801d714 <lfs_bd_read+0x288>)
 801d65e:	4a2e      	ldr	r2, [pc, #184]	@ (801d718 <lfs_bd_read+0x28c>)
 801d660:	216b      	movs	r1, #107	@ 0x6b
 801d662:	482e      	ldr	r0, [pc, #184]	@ (801d71c <lfs_bd_read+0x290>)
 801d664:	f015 ffe8 	bl	8033638 <__assert_func>
        rcache->block = block;
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d66c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d672:	69db      	ldr	r3, [r3, #28]
 801d674:	4619      	mov	r1, r3
 801d676:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801d678:	f7ff fe3d 	bl	801d2f6 <lfs_aligndown>
 801d67c:	4602      	mov	r2, r0
 801d67e:	687b      	ldr	r3, [r7, #4]
 801d680:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 801d682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d684:	683b      	ldr	r3, [r7, #0]
 801d686:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 801d688:	68fb      	ldr	r3, [r7, #12]
 801d68a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d68c:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 801d68e:	4619      	mov	r1, r3
 801d690:	4610      	mov	r0, r2
 801d692:	f7ff fe45 	bl	801d320 <lfs_alignup>
 801d696:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 801d698:	68fb      	ldr	r3, [r7, #12]
 801d69a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                lfs_min(
 801d69e:	4619      	mov	r1, r3
 801d6a0:	4610      	mov	r0, r2
 801d6a2:	f7ff fe18 	bl	801d2d6 <lfs_min>
 801d6a6:	4602      	mov	r2, r0
                - rcache->off,
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 801d6ac:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d6b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(
 801d6b4:	4619      	mov	r1, r3
 801d6b6:	4610      	mov	r0, r2
 801d6b8:	f7ff fe0d 	bl	801d2d6 <lfs_min>
 801d6bc:	4602      	mov	r2, r0
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d6c6:	685c      	ldr	r4, [r3, #4]
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	6819      	ldr	r1, [r3, #0]
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	689b      	ldr	r3, [r3, #8]
 801d6dc:	9300      	str	r3, [sp, #0]
 801d6de:	462b      	mov	r3, r5
 801d6e0:	47a0      	blx	r4
 801d6e2:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 801d6e4:	693b      	ldr	r3, [r7, #16]
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	dd05      	ble.n	801d6f6 <lfs_bd_read+0x26a>
 801d6ea:	4b0d      	ldr	r3, [pc, #52]	@ (801d720 <lfs_bd_read+0x294>)
 801d6ec:	4a0a      	ldr	r2, [pc, #40]	@ (801d718 <lfs_bd_read+0x28c>)
 801d6ee:	2176      	movs	r1, #118	@ 0x76
 801d6f0:	480a      	ldr	r0, [pc, #40]	@ (801d71c <lfs_bd_read+0x290>)
 801d6f2:	f015 ffa1 	bl	8033638 <__assert_func>
        if (err) {
 801d6f6:	693b      	ldr	r3, [r7, #16]
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d001      	beq.n	801d700 <lfs_bd_read+0x274>
            return err;
 801d6fc:	693b      	ldr	r3, [r7, #16]
 801d6fe:	e004      	b.n	801d70a <lfs_bd_read+0x27e>
    while (size > 0) {
 801d700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d702:	2b00      	cmp	r3, #0
 801d704:	f47f aee1 	bne.w	801d4ca <lfs_bd_read+0x3e>
        }
    }

    return 0;
 801d708:	2300      	movs	r3, #0
}
 801d70a:	4618      	mov	r0, r3
 801d70c:	3720      	adds	r7, #32
 801d70e:	46bd      	mov	sp, r7
 801d710:	bdb0      	pop	{r4, r5, r7, pc}
 801d712:	bf00      	nop
 801d714:	08040dbc 	.word	0x08040dbc
 801d718:	08044828 	.word	0x08044828
 801d71c:	08040dec 	.word	0x08040dec
 801d720:	08040e1c 	.word	0x08040e1c

0801d724 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 801d724:	b580      	push	{r7, lr}
 801d726:	b090      	sub	sp, #64	@ 0x40
 801d728:	af04      	add	r7, sp, #16
 801d72a:	60f8      	str	r0, [r7, #12]
 801d72c:	60b9      	str	r1, [r7, #8]
 801d72e:	607a      	str	r2, [r7, #4]
 801d730:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 801d732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d734:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 801d736:	2300      	movs	r3, #0
 801d738:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 801d73a:	2300      	movs	r3, #0
 801d73c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d73e:	e039      	b.n	801d7b4 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 801d740:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801d742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d744:	1ad3      	subs	r3, r2, r3
 801d746:	2108      	movs	r1, #8
 801d748:	4618      	mov	r0, r3
 801d74a:	f7ff fdc4 	bl	801d2d6 <lfs_min>
 801d74e:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 801d750:	683a      	ldr	r2, [r7, #0]
 801d752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d754:	1ad1      	subs	r1, r2, r3
 801d756:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d75a:	4413      	add	r3, r2
 801d75c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d75e:	9203      	str	r2, [sp, #12]
 801d760:	f107 0214 	add.w	r2, r7, #20
 801d764:	9202      	str	r2, [sp, #8]
 801d766:	9301      	str	r3, [sp, #4]
 801d768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d76a:	9300      	str	r3, [sp, #0]
 801d76c:	460b      	mov	r3, r1
 801d76e:	687a      	ldr	r2, [r7, #4]
 801d770:	68b9      	ldr	r1, [r7, #8]
 801d772:	68f8      	ldr	r0, [r7, #12]
 801d774:	f7ff fe8a 	bl	801d48c <lfs_bd_read>
 801d778:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 801d77a:	6a3b      	ldr	r3, [r7, #32]
 801d77c:	2b00      	cmp	r3, #0
 801d77e:	d001      	beq.n	801d784 <lfs_bd_cmp+0x60>
            return err;
 801d780:	6a3b      	ldr	r3, [r7, #32]
 801d782:	e01c      	b.n	801d7be <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 801d784:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d788:	18d1      	adds	r1, r2, r3
 801d78a:	f107 0314 	add.w	r3, r7, #20
 801d78e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d790:	4618      	mov	r0, r3
 801d792:	f018 fc11 	bl	8035fb8 <memcmp>
 801d796:	61f8      	str	r0, [r7, #28]
        if (res) {
 801d798:	69fb      	ldr	r3, [r7, #28]
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	d006      	beq.n	801d7ac <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801d79e:	69fb      	ldr	r3, [r7, #28]
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	da01      	bge.n	801d7a8 <lfs_bd_cmp+0x84>
 801d7a4:	2301      	movs	r3, #1
 801d7a6:	e00a      	b.n	801d7be <lfs_bd_cmp+0x9a>
 801d7a8:	2302      	movs	r3, #2
 801d7aa:	e008      	b.n	801d7be <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801d7ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d7b0:	4413      	add	r3, r2
 801d7b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d7b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d7b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d7b8:	429a      	cmp	r2, r3
 801d7ba:	d3c1      	bcc.n	801d740 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 801d7bc:	2300      	movs	r3, #0
}
 801d7be:	4618      	mov	r0, r3
 801d7c0:	3730      	adds	r7, #48	@ 0x30
 801d7c2:	46bd      	mov	sp, r7
 801d7c4:	bd80      	pop	{r7, pc}

0801d7c6 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801d7c6:	b580      	push	{r7, lr}
 801d7c8:	b08e      	sub	sp, #56	@ 0x38
 801d7ca:	af04      	add	r7, sp, #16
 801d7cc:	60f8      	str	r0, [r7, #12]
 801d7ce:	60b9      	str	r1, [r7, #8]
 801d7d0:	607a      	str	r2, [r7, #4]
 801d7d2:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 801d7d4:	2300      	movs	r3, #0
 801d7d6:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 801d7d8:	2300      	movs	r3, #0
 801d7da:	627b      	str	r3, [r7, #36]	@ 0x24
 801d7dc:	e030      	b.n	801d840 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 801d7de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d7e2:	1ad3      	subs	r3, r2, r3
 801d7e4:	2108      	movs	r1, #8
 801d7e6:	4618      	mov	r0, r3
 801d7e8:	f7ff fd75 	bl	801d2d6 <lfs_min>
 801d7ec:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 801d7ee:	683a      	ldr	r2, [r7, #0]
 801d7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d7f2:	1ad1      	subs	r1, r2, r3
 801d7f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d7f8:	4413      	add	r3, r2
 801d7fa:	6a3a      	ldr	r2, [r7, #32]
 801d7fc:	9203      	str	r2, [sp, #12]
 801d7fe:	f107 0214 	add.w	r2, r7, #20
 801d802:	9202      	str	r2, [sp, #8]
 801d804:	9301      	str	r3, [sp, #4]
 801d806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d808:	9300      	str	r3, [sp, #0]
 801d80a:	460b      	mov	r3, r1
 801d80c:	687a      	ldr	r2, [r7, #4]
 801d80e:	68b9      	ldr	r1, [r7, #8]
 801d810:	68f8      	ldr	r0, [r7, #12]
 801d812:	f7ff fe3b 	bl	801d48c <lfs_bd_read>
 801d816:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 801d818:	69fb      	ldr	r3, [r7, #28]
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	d001      	beq.n	801d822 <lfs_bd_crc+0x5c>
            return err;
 801d81e:	69fb      	ldr	r3, [r7, #28]
 801d820:	e013      	b.n	801d84a <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 801d822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d824:	681b      	ldr	r3, [r3, #0]
 801d826:	f107 0114 	add.w	r1, r7, #20
 801d82a:	6a3a      	ldr	r2, [r7, #32]
 801d82c:	4618      	mov	r0, r3
 801d82e:	f007 fc49 	bl	80250c4 <lfs_crc>
 801d832:	4602      	mov	r2, r0
 801d834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d836:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801d838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d83a:	6a3b      	ldr	r3, [r7, #32]
 801d83c:	4413      	add	r3, r2
 801d83e:	627b      	str	r3, [r7, #36]	@ 0x24
 801d840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d844:	429a      	cmp	r2, r3
 801d846:	d3ca      	bcc.n	801d7de <lfs_bd_crc+0x18>
    }

    return 0;
 801d848:	2300      	movs	r3, #0
}
 801d84a:	4618      	mov	r0, r3
 801d84c:	3728      	adds	r7, #40	@ 0x28
 801d84e:	46bd      	mov	sp, r7
 801d850:	bd80      	pop	{r7, pc}
	...

0801d854 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801d854:	b5b0      	push	{r4, r5, r7, lr}
 801d856:	b08c      	sub	sp, #48	@ 0x30
 801d858:	af04      	add	r7, sp, #16
 801d85a:	60f8      	str	r0, [r7, #12]
 801d85c:	60b9      	str	r1, [r7, #8]
 801d85e:	607a      	str	r2, [r7, #4]
 801d860:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801d862:	68bb      	ldr	r3, [r7, #8]
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d86a:	d060      	beq.n	801d92e <lfs_bd_flush+0xda>
 801d86c:	68bb      	ldr	r3, [r7, #8]
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	f113 0f02 	cmn.w	r3, #2
 801d874:	d05b      	beq.n	801d92e <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801d876:	68bb      	ldr	r3, [r7, #8]
 801d878:	681a      	ldr	r2, [r3, #0]
 801d87a:	68fb      	ldr	r3, [r7, #12]
 801d87c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d87e:	429a      	cmp	r2, r3
 801d880:	d305      	bcc.n	801d88e <lfs_bd_flush+0x3a>
 801d882:	4b2d      	ldr	r3, [pc, #180]	@ (801d938 <lfs_bd_flush+0xe4>)
 801d884:	4a2d      	ldr	r2, [pc, #180]	@ (801d93c <lfs_bd_flush+0xe8>)
 801d886:	21b3      	movs	r1, #179	@ 0xb3
 801d888:	482d      	ldr	r0, [pc, #180]	@ (801d940 <lfs_bd_flush+0xec>)
 801d88a:	f015 fed5 	bl	8033638 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801d88e:	68bb      	ldr	r3, [r7, #8]
 801d890:	689a      	ldr	r2, [r3, #8]
 801d892:	68fb      	ldr	r3, [r7, #12]
 801d894:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d896:	6a1b      	ldr	r3, [r3, #32]
 801d898:	4619      	mov	r1, r3
 801d89a:	4610      	mov	r0, r2
 801d89c:	f7ff fd40 	bl	801d320 <lfs_alignup>
 801d8a0:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801d8a2:	68fb      	ldr	r3, [r7, #12]
 801d8a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d8a6:	689c      	ldr	r4, [r3, #8]
 801d8a8:	68fb      	ldr	r3, [r7, #12]
 801d8aa:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801d8ac:	68bb      	ldr	r3, [r7, #8]
 801d8ae:	6819      	ldr	r1, [r3, #0]
 801d8b0:	68bb      	ldr	r3, [r7, #8]
 801d8b2:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 801d8b4:	68bb      	ldr	r3, [r7, #8]
 801d8b6:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801d8b8:	69fb      	ldr	r3, [r7, #28]
 801d8ba:	9300      	str	r3, [sp, #0]
 801d8bc:	462b      	mov	r3, r5
 801d8be:	47a0      	blx	r4
 801d8c0:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 801d8c2:	69bb      	ldr	r3, [r7, #24]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	dd05      	ble.n	801d8d4 <lfs_bd_flush+0x80>
 801d8c8:	4b1e      	ldr	r3, [pc, #120]	@ (801d944 <lfs_bd_flush+0xf0>)
 801d8ca:	4a1c      	ldr	r2, [pc, #112]	@ (801d93c <lfs_bd_flush+0xe8>)
 801d8cc:	21b7      	movs	r1, #183	@ 0xb7
 801d8ce:	481c      	ldr	r0, [pc, #112]	@ (801d940 <lfs_bd_flush+0xec>)
 801d8d0:	f015 feb2 	bl	8033638 <__assert_func>
        if (err) {
 801d8d4:	69bb      	ldr	r3, [r7, #24]
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	d001      	beq.n	801d8de <lfs_bd_flush+0x8a>
            return err;
 801d8da:	69bb      	ldr	r3, [r7, #24]
 801d8dc:	e028      	b.n	801d930 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 801d8de:	78fb      	ldrb	r3, [r7, #3]
 801d8e0:	2b00      	cmp	r3, #0
 801d8e2:	d020      	beq.n	801d926 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 801d8e4:	6879      	ldr	r1, [r7, #4]
 801d8e6:	68f8      	ldr	r0, [r7, #12]
 801d8e8:	f7ff fdab 	bl	801d442 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 801d8ec:	68bb      	ldr	r3, [r7, #8]
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	68ba      	ldr	r2, [r7, #8]
 801d8f2:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 801d8f4:	68b9      	ldr	r1, [r7, #8]
 801d8f6:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 801d8f8:	69f8      	ldr	r0, [r7, #28]
 801d8fa:	9003      	str	r0, [sp, #12]
 801d8fc:	9102      	str	r1, [sp, #8]
 801d8fe:	9201      	str	r2, [sp, #4]
 801d900:	9300      	str	r3, [sp, #0]
 801d902:	69fb      	ldr	r3, [r7, #28]
 801d904:	687a      	ldr	r2, [r7, #4]
 801d906:	2100      	movs	r1, #0
 801d908:	68f8      	ldr	r0, [r7, #12]
 801d90a:	f7ff ff0b 	bl	801d724 <lfs_bd_cmp>
 801d90e:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 801d910:	697b      	ldr	r3, [r7, #20]
 801d912:	2b00      	cmp	r3, #0
 801d914:	da01      	bge.n	801d91a <lfs_bd_flush+0xc6>
                return res;
 801d916:	697b      	ldr	r3, [r7, #20]
 801d918:	e00a      	b.n	801d930 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 801d91a:	697b      	ldr	r3, [r7, #20]
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	d002      	beq.n	801d926 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 801d920:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d924:	e004      	b.n	801d930 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 801d926:	68b9      	ldr	r1, [r7, #8]
 801d928:	68f8      	ldr	r0, [r7, #12]
 801d92a:	f7ff fd99 	bl	801d460 <lfs_cache_zero>
    }

    return 0;
 801d92e:	2300      	movs	r3, #0
}
 801d930:	4618      	mov	r0, r3
 801d932:	3720      	adds	r7, #32
 801d934:	46bd      	mov	sp, r7
 801d936:	bdb0      	pop	{r4, r5, r7, pc}
 801d938:	08040e28 	.word	0x08040e28
 801d93c:	08044834 	.word	0x08044834
 801d940:	08040dec 	.word	0x08040dec
 801d944:	08040e1c 	.word	0x08040e1c

0801d948 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801d948:	b580      	push	{r7, lr}
 801d94a:	b086      	sub	sp, #24
 801d94c:	af00      	add	r7, sp, #0
 801d94e:	60f8      	str	r0, [r7, #12]
 801d950:	60b9      	str	r1, [r7, #8]
 801d952:	607a      	str	r2, [r7, #4]
 801d954:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 801d956:	6879      	ldr	r1, [r7, #4]
 801d958:	68f8      	ldr	r0, [r7, #12]
 801d95a:	f7ff fd72 	bl	801d442 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801d95e:	78fb      	ldrb	r3, [r7, #3]
 801d960:	687a      	ldr	r2, [r7, #4]
 801d962:	68b9      	ldr	r1, [r7, #8]
 801d964:	68f8      	ldr	r0, [r7, #12]
 801d966:	f7ff ff75 	bl	801d854 <lfs_bd_flush>
 801d96a:	6178      	str	r0, [r7, #20]
    if (err) {
 801d96c:	697b      	ldr	r3, [r7, #20]
 801d96e:	2b00      	cmp	r3, #0
 801d970:	d001      	beq.n	801d976 <lfs_bd_sync+0x2e>
        return err;
 801d972:	697b      	ldr	r3, [r7, #20]
 801d974:	e011      	b.n	801d99a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 801d976:	68fb      	ldr	r3, [r7, #12]
 801d978:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d97a:	691b      	ldr	r3, [r3, #16]
 801d97c:	68fa      	ldr	r2, [r7, #12]
 801d97e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801d980:	4610      	mov	r0, r2
 801d982:	4798      	blx	r3
 801d984:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 801d986:	697b      	ldr	r3, [r7, #20]
 801d988:	2b00      	cmp	r3, #0
 801d98a:	dd05      	ble.n	801d998 <lfs_bd_sync+0x50>
 801d98c:	4b05      	ldr	r3, [pc, #20]	@ (801d9a4 <lfs_bd_sync+0x5c>)
 801d98e:	4a06      	ldr	r2, [pc, #24]	@ (801d9a8 <lfs_bd_sync+0x60>)
 801d990:	21dd      	movs	r1, #221	@ 0xdd
 801d992:	4806      	ldr	r0, [pc, #24]	@ (801d9ac <lfs_bd_sync+0x64>)
 801d994:	f015 fe50 	bl	8033638 <__assert_func>
    return err;
 801d998:	697b      	ldr	r3, [r7, #20]
}
 801d99a:	4618      	mov	r0, r3
 801d99c:	3718      	adds	r7, #24
 801d99e:	46bd      	mov	sp, r7
 801d9a0:	bd80      	pop	{r7, pc}
 801d9a2:	bf00      	nop
 801d9a4:	08040e1c 	.word	0x08040e1c
 801d9a8:	08044844 	.word	0x08044844
 801d9ac:	08040dec 	.word	0x08040dec

0801d9b0 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 801d9b0:	b580      	push	{r7, lr}
 801d9b2:	b088      	sub	sp, #32
 801d9b4:	af00      	add	r7, sp, #0
 801d9b6:	60f8      	str	r0, [r7, #12]
 801d9b8:	60b9      	str	r1, [r7, #8]
 801d9ba:	607a      	str	r2, [r7, #4]
 801d9bc:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 801d9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d9c0:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801d9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9c4:	f113 0f02 	cmn.w	r3, #2
 801d9c8:	d00a      	beq.n	801d9e0 <lfs_bd_prog+0x30>
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d9ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d9d0:	429a      	cmp	r2, r3
 801d9d2:	d305      	bcc.n	801d9e0 <lfs_bd_prog+0x30>
 801d9d4:	4b48      	ldr	r3, [pc, #288]	@ (801daf8 <lfs_bd_prog+0x148>)
 801d9d6:	4a49      	ldr	r2, [pc, #292]	@ (801dafc <lfs_bd_prog+0x14c>)
 801d9d8:	21e8      	movs	r1, #232	@ 0xe8
 801d9da:	4849      	ldr	r0, [pc, #292]	@ (801db00 <lfs_bd_prog+0x150>)
 801d9dc:	f015 fe2c 	bl	8033638 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801d9e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d9e4:	441a      	add	r2, r3
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d9ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d9ec:	429a      	cmp	r2, r3
 801d9ee:	d97a      	bls.n	801dae6 <lfs_bd_prog+0x136>
 801d9f0:	4b44      	ldr	r3, [pc, #272]	@ (801db04 <lfs_bd_prog+0x154>)
 801d9f2:	4a42      	ldr	r2, [pc, #264]	@ (801dafc <lfs_bd_prog+0x14c>)
 801d9f4:	21e9      	movs	r1, #233	@ 0xe9
 801d9f6:	4842      	ldr	r0, [pc, #264]	@ (801db00 <lfs_bd_prog+0x150>)
 801d9f8:	f015 fe1e 	bl	8033638 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 801d9fc:	68bb      	ldr	r3, [r7, #8]
 801d9fe:	681b      	ldr	r3, [r3, #0]
 801da00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801da02:	429a      	cmp	r2, r3
 801da04:	d151      	bne.n	801daaa <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 801da06:	68bb      	ldr	r3, [r7, #8]
 801da08:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 801da0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801da0c:	429a      	cmp	r2, r3
 801da0e:	d34c      	bcc.n	801daaa <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 801da10:	68bb      	ldr	r3, [r7, #8]
 801da12:	685a      	ldr	r2, [r3, #4]
 801da14:	68fb      	ldr	r3, [r7, #12]
 801da16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801da18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801da1a:	4413      	add	r3, r2
                off >= pcache->off &&
 801da1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801da1e:	429a      	cmp	r2, r3
 801da20:	d243      	bcs.n	801daaa <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 801da22:	68fb      	ldr	r3, [r7, #12]
 801da24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801da26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801da28:	68bb      	ldr	r3, [r7, #8]
 801da2a:	6859      	ldr	r1, [r3, #4]
 801da2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da2e:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 801da30:	4413      	add	r3, r2
 801da32:	4619      	mov	r1, r3
 801da34:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801da36:	f7ff fc4e 	bl	801d2d6 <lfs_min>
 801da3a:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801da3c:	68bb      	ldr	r3, [r7, #8]
 801da3e:	68da      	ldr	r2, [r3, #12]
 801da40:	68bb      	ldr	r3, [r7, #8]
 801da42:	685b      	ldr	r3, [r3, #4]
 801da44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801da46:	1acb      	subs	r3, r1, r3
 801da48:	4413      	add	r3, r2
 801da4a:	69ba      	ldr	r2, [r7, #24]
 801da4c:	69f9      	ldr	r1, [r7, #28]
 801da4e:	4618      	mov	r0, r3
 801da50:	f019 fd82 	bl	8037558 <memcpy>

            data += diff;
 801da54:	69fa      	ldr	r2, [r7, #28]
 801da56:	69bb      	ldr	r3, [r7, #24]
 801da58:	4413      	add	r3, r2
 801da5a:	61fb      	str	r3, [r7, #28]
            off += diff;
 801da5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801da5e:	69bb      	ldr	r3, [r7, #24]
 801da60:	4413      	add	r3, r2
 801da62:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 801da64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801da66:	69bb      	ldr	r3, [r7, #24]
 801da68:	1ad3      	subs	r3, r2, r3
 801da6a:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801da6c:	68bb      	ldr	r3, [r7, #8]
 801da6e:	6898      	ldr	r0, [r3, #8]
 801da70:	68bb      	ldr	r3, [r7, #8]
 801da72:	685b      	ldr	r3, [r3, #4]
 801da74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801da76:	1ad3      	subs	r3, r2, r3
 801da78:	4619      	mov	r1, r3
 801da7a:	f7ff fc1c 	bl	801d2b6 <lfs_max>
 801da7e:	4602      	mov	r2, r0
 801da80:	68bb      	ldr	r3, [r7, #8]
 801da82:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801da84:	68bb      	ldr	r3, [r7, #8]
 801da86:	689a      	ldr	r2, [r3, #8]
 801da88:	68fb      	ldr	r3, [r7, #12]
 801da8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801da8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801da8e:	429a      	cmp	r2, r3
 801da90:	d128      	bne.n	801dae4 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801da92:	78fb      	ldrb	r3, [r7, #3]
 801da94:	687a      	ldr	r2, [r7, #4]
 801da96:	68b9      	ldr	r1, [r7, #8]
 801da98:	68f8      	ldr	r0, [r7, #12]
 801da9a:	f7ff fedb 	bl	801d854 <lfs_bd_flush>
 801da9e:	6178      	str	r0, [r7, #20]
                if (err) {
 801daa0:	697b      	ldr	r3, [r7, #20]
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	d01e      	beq.n	801dae4 <lfs_bd_prog+0x134>
                    return err;
 801daa6:	697b      	ldr	r3, [r7, #20]
 801daa8:	e021      	b.n	801daee <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801daaa:	68bb      	ldr	r3, [r7, #8]
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dab2:	d006      	beq.n	801dac2 <lfs_bd_prog+0x112>
 801dab4:	4b14      	ldr	r3, [pc, #80]	@ (801db08 <lfs_bd_prog+0x158>)
 801dab6:	4a11      	ldr	r2, [pc, #68]	@ (801dafc <lfs_bd_prog+0x14c>)
 801dab8:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801dabc:	4810      	ldr	r0, [pc, #64]	@ (801db00 <lfs_bd_prog+0x150>)
 801dabe:	f015 fdbb 	bl	8033638 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 801dac2:	68bb      	ldr	r3, [r7, #8]
 801dac4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801dac6:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801dac8:	68fb      	ldr	r3, [r7, #12]
 801daca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dacc:	6a1b      	ldr	r3, [r3, #32]
 801dace:	4619      	mov	r1, r3
 801dad0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801dad2:	f7ff fc10 	bl	801d2f6 <lfs_aligndown>
 801dad6:	4602      	mov	r2, r0
 801dad8:	68bb      	ldr	r3, [r7, #8]
 801dada:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 801dadc:	68bb      	ldr	r3, [r7, #8]
 801dade:	2200      	movs	r2, #0
 801dae0:	609a      	str	r2, [r3, #8]
 801dae2:	e000      	b.n	801dae6 <lfs_bd_prog+0x136>
            continue;
 801dae4:	bf00      	nop
    while (size > 0) {
 801dae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d187      	bne.n	801d9fc <lfs_bd_prog+0x4c>
    }

    return 0;
 801daec:	2300      	movs	r3, #0
}
 801daee:	4618      	mov	r0, r3
 801daf0:	3720      	adds	r7, #32
 801daf2:	46bd      	mov	sp, r7
 801daf4:	bd80      	pop	{r7, pc}
 801daf6:	bf00      	nop
 801daf8:	08040e4c 	.word	0x08040e4c
 801dafc:	08044850 	.word	0x08044850
 801db00:	08040dec 	.word	0x08040dec
 801db04:	08040e84 	.word	0x08040e84
 801db08:	08040ea8 	.word	0x08040ea8

0801db0c <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 801db0c:	b580      	push	{r7, lr}
 801db0e:	b084      	sub	sp, #16
 801db10:	af00      	add	r7, sp, #0
 801db12:	6078      	str	r0, [r7, #4]
 801db14:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801db1a:	683a      	ldr	r2, [r7, #0]
 801db1c:	429a      	cmp	r2, r3
 801db1e:	d306      	bcc.n	801db2e <lfs_bd_erase+0x22>
 801db20:	4b0f      	ldr	r3, [pc, #60]	@ (801db60 <lfs_bd_erase+0x54>)
 801db22:	4a10      	ldr	r2, [pc, #64]	@ (801db64 <lfs_bd_erase+0x58>)
 801db24:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801db28:	480f      	ldr	r0, [pc, #60]	@ (801db68 <lfs_bd_erase+0x5c>)
 801db2a:	f015 fd85 	bl	8033638 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801db32:	68db      	ldr	r3, [r3, #12]
 801db34:	687a      	ldr	r2, [r7, #4]
 801db36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801db38:	6839      	ldr	r1, [r7, #0]
 801db3a:	4610      	mov	r0, r2
 801db3c:	4798      	blx	r3
 801db3e:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 801db40:	68fb      	ldr	r3, [r7, #12]
 801db42:	2b00      	cmp	r3, #0
 801db44:	dd06      	ble.n	801db54 <lfs_bd_erase+0x48>
 801db46:	4b09      	ldr	r3, [pc, #36]	@ (801db6c <lfs_bd_erase+0x60>)
 801db48:	4a06      	ldr	r2, [pc, #24]	@ (801db64 <lfs_bd_erase+0x58>)
 801db4a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801db4e:	4806      	ldr	r0, [pc, #24]	@ (801db68 <lfs_bd_erase+0x5c>)
 801db50:	f015 fd72 	bl	8033638 <__assert_func>
    return err;
 801db54:	68fb      	ldr	r3, [r7, #12]
}
 801db56:	4618      	mov	r0, r3
 801db58:	3710      	adds	r7, #16
 801db5a:	46bd      	mov	sp, r7
 801db5c:	bd80      	pop	{r7, pc}
 801db5e:	bf00      	nop
 801db60:	08040ecc 	.word	0x08040ecc
 801db64:	0804485c 	.word	0x0804485c
 801db68:	08040dec 	.word	0x08040dec
 801db6c:	08040e1c 	.word	0x08040e1c

0801db70 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 801db70:	b480      	push	{r7}
 801db72:	b085      	sub	sp, #20
 801db74:	af00      	add	r7, sp, #0
 801db76:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	685a      	ldr	r2, [r3, #4]
 801db82:	687b      	ldr	r3, [r7, #4]
 801db84:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	3304      	adds	r3, #4
 801db8a:	68fa      	ldr	r2, [r7, #12]
 801db8c:	601a      	str	r2, [r3, #0]
}
 801db8e:	bf00      	nop
 801db90:	3714      	adds	r7, #20
 801db92:	46bd      	mov	sp, r7
 801db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db98:	4770      	bx	lr

0801db9a <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 801db9a:	b480      	push	{r7}
 801db9c:	b083      	sub	sp, #12
 801db9e:	af00      	add	r7, sp, #0
 801dba0:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dbaa:	d005      	beq.n	801dbb8 <lfs_pair_isnull+0x1e>
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	3304      	adds	r3, #4
 801dbb0:	681b      	ldr	r3, [r3, #0]
 801dbb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dbb6:	d101      	bne.n	801dbbc <lfs_pair_isnull+0x22>
 801dbb8:	2301      	movs	r3, #1
 801dbba:	e000      	b.n	801dbbe <lfs_pair_isnull+0x24>
 801dbbc:	2300      	movs	r3, #0
 801dbbe:	f003 0301 	and.w	r3, r3, #1
 801dbc2:	b2db      	uxtb	r3, r3
}
 801dbc4:	4618      	mov	r0, r3
 801dbc6:	370c      	adds	r7, #12
 801dbc8:	46bd      	mov	sp, r7
 801dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbce:	4770      	bx	lr

0801dbd0 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 801dbd0:	b480      	push	{r7}
 801dbd2:	b083      	sub	sp, #12
 801dbd4:	af00      	add	r7, sp, #0
 801dbd6:	6078      	str	r0, [r7, #4]
 801dbd8:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dbda:	687b      	ldr	r3, [r7, #4]
 801dbdc:	681a      	ldr	r2, [r3, #0]
 801dbde:	683b      	ldr	r3, [r7, #0]
 801dbe0:	681b      	ldr	r3, [r3, #0]
 801dbe2:	429a      	cmp	r2, r3
 801dbe4:	d017      	beq.n	801dc16 <lfs_pair_cmp+0x46>
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	3304      	adds	r3, #4
 801dbea:	681a      	ldr	r2, [r3, #0]
 801dbec:	683b      	ldr	r3, [r7, #0]
 801dbee:	3304      	adds	r3, #4
 801dbf0:	681b      	ldr	r3, [r3, #0]
 801dbf2:	429a      	cmp	r2, r3
 801dbf4:	d00f      	beq.n	801dc16 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	681a      	ldr	r2, [r3, #0]
 801dbfa:	683b      	ldr	r3, [r7, #0]
 801dbfc:	3304      	adds	r3, #4
 801dbfe:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dc00:	429a      	cmp	r2, r3
 801dc02:	d008      	beq.n	801dc16 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	3304      	adds	r3, #4
 801dc08:	681a      	ldr	r2, [r3, #0]
 801dc0a:	683b      	ldr	r3, [r7, #0]
 801dc0c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dc0e:	429a      	cmp	r2, r3
 801dc10:	d001      	beq.n	801dc16 <lfs_pair_cmp+0x46>
 801dc12:	2301      	movs	r3, #1
 801dc14:	e000      	b.n	801dc18 <lfs_pair_cmp+0x48>
 801dc16:	2300      	movs	r3, #0
}
 801dc18:	4618      	mov	r0, r3
 801dc1a:	370c      	adds	r7, #12
 801dc1c:	46bd      	mov	sp, r7
 801dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc22:	4770      	bx	lr

0801dc24 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 801dc24:	b480      	push	{r7}
 801dc26:	b083      	sub	sp, #12
 801dc28:	af00      	add	r7, sp, #0
 801dc2a:	6078      	str	r0, [r7, #4]
 801dc2c:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	681a      	ldr	r2, [r3, #0]
 801dc32:	683b      	ldr	r3, [r7, #0]
 801dc34:	681b      	ldr	r3, [r3, #0]
 801dc36:	429a      	cmp	r2, r3
 801dc38:	d107      	bne.n	801dc4a <lfs_pair_issync+0x26>
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	3304      	adds	r3, #4
 801dc3e:	681a      	ldr	r2, [r3, #0]
 801dc40:	683b      	ldr	r3, [r7, #0]
 801dc42:	3304      	adds	r3, #4
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	429a      	cmp	r2, r3
 801dc48:	d00d      	beq.n	801dc66 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	681a      	ldr	r2, [r3, #0]
 801dc4e:	683b      	ldr	r3, [r7, #0]
 801dc50:	3304      	adds	r3, #4
 801dc52:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801dc54:	429a      	cmp	r2, r3
 801dc56:	d108      	bne.n	801dc6a <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	3304      	adds	r3, #4
 801dc5c:	681a      	ldr	r2, [r3, #0]
 801dc5e:	683b      	ldr	r3, [r7, #0]
 801dc60:	681b      	ldr	r3, [r3, #0]
 801dc62:	429a      	cmp	r2, r3
 801dc64:	d101      	bne.n	801dc6a <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801dc66:	2301      	movs	r3, #1
 801dc68:	e000      	b.n	801dc6c <lfs_pair_issync+0x48>
 801dc6a:	2300      	movs	r3, #0
 801dc6c:	f003 0301 	and.w	r3, r3, #1
 801dc70:	b2db      	uxtb	r3, r3
}
 801dc72:	4618      	mov	r0, r3
 801dc74:	370c      	adds	r7, #12
 801dc76:	46bd      	mov	sp, r7
 801dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc7c:	4770      	bx	lr

0801dc7e <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 801dc7e:	b590      	push	{r4, r7, lr}
 801dc80:	b083      	sub	sp, #12
 801dc82:	af00      	add	r7, sp, #0
 801dc84:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	4618      	mov	r0, r3
 801dc8c:	f7ff fb93 	bl	801d3b6 <lfs_fromle32>
 801dc90:	4602      	mov	r2, r0
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	3304      	adds	r3, #4
 801dc9a:	681a      	ldr	r2, [r3, #0]
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	1d1c      	adds	r4, r3, #4
 801dca0:	4610      	mov	r0, r2
 801dca2:	f7ff fb88 	bl	801d3b6 <lfs_fromle32>
 801dca6:	4603      	mov	r3, r0
 801dca8:	6023      	str	r3, [r4, #0]
}
 801dcaa:	bf00      	nop
 801dcac:	370c      	adds	r7, #12
 801dcae:	46bd      	mov	sp, r7
 801dcb0:	bd90      	pop	{r4, r7, pc}

0801dcb2 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 801dcb2:	b590      	push	{r4, r7, lr}
 801dcb4:	b083      	sub	sp, #12
 801dcb6:	af00      	add	r7, sp, #0
 801dcb8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	681b      	ldr	r3, [r3, #0]
 801dcbe:	4618      	mov	r0, r3
 801dcc0:	f7ff fb84 	bl	801d3cc <lfs_tole32>
 801dcc4:	4602      	mov	r2, r0
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 801dcca:	687b      	ldr	r3, [r7, #4]
 801dccc:	3304      	adds	r3, #4
 801dcce:	681a      	ldr	r2, [r3, #0]
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	1d1c      	adds	r4, r3, #4
 801dcd4:	4610      	mov	r0, r2
 801dcd6:	f7ff fb79 	bl	801d3cc <lfs_tole32>
 801dcda:	4603      	mov	r3, r0
 801dcdc:	6023      	str	r3, [r4, #0]
}
 801dcde:	bf00      	nop
 801dce0:	370c      	adds	r7, #12
 801dce2:	46bd      	mov	sp, r7
 801dce4:	bd90      	pop	{r4, r7, pc}

0801dce6 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 801dce6:	b480      	push	{r7}
 801dce8:	b083      	sub	sp, #12
 801dcea:	af00      	add	r7, sp, #0
 801dcec:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	43db      	mvns	r3, r3
 801dcf2:	0fdb      	lsrs	r3, r3, #31
 801dcf4:	b2db      	uxtb	r3, r3
}
 801dcf6:	4618      	mov	r0, r3
 801dcf8:	370c      	adds	r7, #12
 801dcfa:	46bd      	mov	sp, r7
 801dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd00:	4770      	bx	lr

0801dd02 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 801dd02:	b480      	push	{r7}
 801dd04:	b083      	sub	sp, #12
 801dd06:	af00      	add	r7, sp, #0
 801dd08:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	059b      	lsls	r3, r3, #22
 801dd0e:	159b      	asrs	r3, r3, #22
 801dd10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dd14:	bf0c      	ite	eq
 801dd16:	2301      	moveq	r3, #1
 801dd18:	2300      	movne	r3, #0
 801dd1a:	b2db      	uxtb	r3, r3
}
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	370c      	adds	r7, #12
 801dd20:	46bd      	mov	sp, r7
 801dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd26:	4770      	bx	lr

0801dd28 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 801dd28:	b480      	push	{r7}
 801dd2a:	b083      	sub	sp, #12
 801dd2c:	af00      	add	r7, sp, #0
 801dd2e:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	0d1b      	lsrs	r3, r3, #20
 801dd34:	b29b      	uxth	r3, r3
 801dd36:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801dd3a:	b29b      	uxth	r3, r3
}
 801dd3c:	4618      	mov	r0, r3
 801dd3e:	370c      	adds	r7, #12
 801dd40:	46bd      	mov	sp, r7
 801dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd46:	4770      	bx	lr

0801dd48 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 801dd48:	b480      	push	{r7}
 801dd4a:	b083      	sub	sp, #12
 801dd4c:	af00      	add	r7, sp, #0
 801dd4e:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	0d1b      	lsrs	r3, r3, #20
 801dd54:	b29b      	uxth	r3, r3
 801dd56:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 801dd5a:	b29b      	uxth	r3, r3
}
 801dd5c:	4618      	mov	r0, r3
 801dd5e:	370c      	adds	r7, #12
 801dd60:	46bd      	mov	sp, r7
 801dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd66:	4770      	bx	lr

0801dd68 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 801dd68:	b480      	push	{r7}
 801dd6a:	b083      	sub	sp, #12
 801dd6c:	af00      	add	r7, sp, #0
 801dd6e:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	0d1b      	lsrs	r3, r3, #20
 801dd74:	b29b      	uxth	r3, r3
 801dd76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801dd7a:	b29b      	uxth	r3, r3
}
 801dd7c:	4618      	mov	r0, r3
 801dd7e:	370c      	adds	r7, #12
 801dd80:	46bd      	mov	sp, r7
 801dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd86:	4770      	bx	lr

0801dd88 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 801dd88:	b480      	push	{r7}
 801dd8a:	b083      	sub	sp, #12
 801dd8c:	af00      	add	r7, sp, #0
 801dd8e:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	0d1b      	lsrs	r3, r3, #20
 801dd94:	b2db      	uxtb	r3, r3
}
 801dd96:	4618      	mov	r0, r3
 801dd98:	370c      	adds	r7, #12
 801dd9a:	46bd      	mov	sp, r7
 801dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dda0:	4770      	bx	lr

0801dda2 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 801dda2:	b580      	push	{r7, lr}
 801dda4:	b082      	sub	sp, #8
 801dda6:	af00      	add	r7, sp, #0
 801dda8:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 801ddaa:	6878      	ldr	r0, [r7, #4]
 801ddac:	f7ff ffec 	bl	801dd88 <lfs_tag_chunk>
 801ddb0:	4603      	mov	r3, r0
 801ddb2:	b25b      	sxtb	r3, r3
}
 801ddb4:	4618      	mov	r0, r3
 801ddb6:	3708      	adds	r7, #8
 801ddb8:	46bd      	mov	sp, r7
 801ddba:	bd80      	pop	{r7, pc}

0801ddbc <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 801ddbc:	b480      	push	{r7}
 801ddbe:	b083      	sub	sp, #12
 801ddc0:	af00      	add	r7, sp, #0
 801ddc2:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 801ddc4:	687b      	ldr	r3, [r7, #4]
 801ddc6:	0a9b      	lsrs	r3, r3, #10
 801ddc8:	b29b      	uxth	r3, r3
 801ddca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ddce:	b29b      	uxth	r3, r3
}
 801ddd0:	4618      	mov	r0, r3
 801ddd2:	370c      	adds	r7, #12
 801ddd4:	46bd      	mov	sp, r7
 801ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddda:	4770      	bx	lr

0801dddc <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 801dddc:	b480      	push	{r7}
 801ddde:	b083      	sub	sp, #12
 801dde0:	af00      	add	r7, sp, #0
 801dde2:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 801ddea:	4618      	mov	r0, r3
 801ddec:	370c      	adds	r7, #12
 801ddee:	46bd      	mov	sp, r7
 801ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddf4:	4770      	bx	lr

0801ddf6 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 801ddf6:	b580      	push	{r7, lr}
 801ddf8:	b082      	sub	sp, #8
 801ddfa:	af00      	add	r7, sp, #0
 801ddfc:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801ddfe:	6878      	ldr	r0, [r7, #4]
 801de00:	f7ff ff7f 	bl	801dd02 <lfs_tag_isdelete>
 801de04:	4603      	mov	r3, r0
 801de06:	461a      	mov	r2, r3
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	4413      	add	r3, r2
 801de0c:	4618      	mov	r0, r3
 801de0e:	f7ff ffe5 	bl	801dddc <lfs_tag_size>
 801de12:	4603      	mov	r3, r0
 801de14:	3304      	adds	r3, #4
}
 801de16:	4618      	mov	r0, r3
 801de18:	3708      	adds	r7, #8
 801de1a:	46bd      	mov	sp, r7
 801de1c:	bd80      	pop	{r7, pc}

0801de1e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801de1e:	b480      	push	{r7}
 801de20:	b085      	sub	sp, #20
 801de22:	af00      	add	r7, sp, #0
 801de24:	6078      	str	r0, [r7, #4]
 801de26:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 801de28:	2300      	movs	r3, #0
 801de2a:	60fb      	str	r3, [r7, #12]
 801de2c:	e012      	b.n	801de54 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801de2e:	68fb      	ldr	r3, [r7, #12]
 801de30:	009b      	lsls	r3, r3, #2
 801de32:	687a      	ldr	r2, [r7, #4]
 801de34:	4413      	add	r3, r2
 801de36:	6819      	ldr	r1, [r3, #0]
 801de38:	68fb      	ldr	r3, [r7, #12]
 801de3a:	009b      	lsls	r3, r3, #2
 801de3c:	683a      	ldr	r2, [r7, #0]
 801de3e:	4413      	add	r3, r2
 801de40:	681a      	ldr	r2, [r3, #0]
 801de42:	68fb      	ldr	r3, [r7, #12]
 801de44:	009b      	lsls	r3, r3, #2
 801de46:	6878      	ldr	r0, [r7, #4]
 801de48:	4403      	add	r3, r0
 801de4a:	404a      	eors	r2, r1
 801de4c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	3301      	adds	r3, #1
 801de52:	60fb      	str	r3, [r7, #12]
 801de54:	68fb      	ldr	r3, [r7, #12]
 801de56:	2b02      	cmp	r3, #2
 801de58:	dde9      	ble.n	801de2e <lfs_gstate_xor+0x10>
    }
}
 801de5a:	bf00      	nop
 801de5c:	bf00      	nop
 801de5e:	3714      	adds	r7, #20
 801de60:	46bd      	mov	sp, r7
 801de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de66:	4770      	bx	lr

0801de68 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 801de68:	b480      	push	{r7}
 801de6a:	b085      	sub	sp, #20
 801de6c:	af00      	add	r7, sp, #0
 801de6e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 801de70:	2300      	movs	r3, #0
 801de72:	60fb      	str	r3, [r7, #12]
 801de74:	e00b      	b.n	801de8e <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 801de76:	68fb      	ldr	r3, [r7, #12]
 801de78:	009b      	lsls	r3, r3, #2
 801de7a:	687a      	ldr	r2, [r7, #4]
 801de7c:	4413      	add	r3, r2
 801de7e:	681b      	ldr	r3, [r3, #0]
 801de80:	2b00      	cmp	r3, #0
 801de82:	d001      	beq.n	801de88 <lfs_gstate_iszero+0x20>
            return false;
 801de84:	2300      	movs	r3, #0
 801de86:	e006      	b.n	801de96 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 801de88:	68fb      	ldr	r3, [r7, #12]
 801de8a:	3301      	adds	r3, #1
 801de8c:	60fb      	str	r3, [r7, #12]
 801de8e:	68fb      	ldr	r3, [r7, #12]
 801de90:	2b02      	cmp	r3, #2
 801de92:	ddf0      	ble.n	801de76 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 801de94:	2301      	movs	r3, #1
}
 801de96:	4618      	mov	r0, r3
 801de98:	3714      	adds	r7, #20
 801de9a:	46bd      	mov	sp, r7
 801de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dea0:	4770      	bx	lr

0801dea2 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 801dea2:	b580      	push	{r7, lr}
 801dea4:	b082      	sub	sp, #8
 801dea6:	af00      	add	r7, sp, #0
 801dea8:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	681b      	ldr	r3, [r3, #0]
 801deae:	4618      	mov	r0, r3
 801deb0:	f7ff ff94 	bl	801dddc <lfs_tag_size>
 801deb4:	4603      	mov	r3, r0
 801deb6:	2b00      	cmp	r3, #0
 801deb8:	bf14      	ite	ne
 801deba:	2301      	movne	r3, #1
 801debc:	2300      	moveq	r3, #0
 801debe:	b2db      	uxtb	r3, r3
}
 801dec0:	4618      	mov	r0, r3
 801dec2:	3708      	adds	r7, #8
 801dec4:	46bd      	mov	sp, r7
 801dec6:	bd80      	pop	{r7, pc}

0801dec8 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 801dec8:	b580      	push	{r7, lr}
 801deca:	b082      	sub	sp, #8
 801decc:	af00      	add	r7, sp, #0
 801dece:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 801ded0:	687b      	ldr	r3, [r7, #4]
 801ded2:	681b      	ldr	r3, [r3, #0]
 801ded4:	4618      	mov	r0, r3
 801ded6:	f7ff ff81 	bl	801dddc <lfs_tag_size>
 801deda:	4603      	mov	r3, r0
 801dedc:	b2db      	uxtb	r3, r3
}
 801dede:	4618      	mov	r0, r3
 801dee0:	3708      	adds	r7, #8
 801dee2:	46bd      	mov	sp, r7
 801dee4:	bd80      	pop	{r7, pc}

0801dee6 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 801dee6:	b580      	push	{r7, lr}
 801dee8:	b082      	sub	sp, #8
 801deea:	af00      	add	r7, sp, #0
 801deec:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 801deee:	687b      	ldr	r3, [r7, #4]
 801def0:	681b      	ldr	r3, [r3, #0]
 801def2:	4618      	mov	r0, r3
 801def4:	f7ff ff18 	bl	801dd28 <lfs_tag_type1>
 801def8:	4603      	mov	r3, r0
 801defa:	2b00      	cmp	r3, #0
 801defc:	bf14      	ite	ne
 801defe:	2301      	movne	r3, #1
 801df00:	2300      	moveq	r3, #0
 801df02:	b2db      	uxtb	r3, r3
}
 801df04:	4618      	mov	r0, r3
 801df06:	3708      	adds	r7, #8
 801df08:	46bd      	mov	sp, r7
 801df0a:	bd80      	pop	{r7, pc}

0801df0c <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 801df0c:	b580      	push	{r7, lr}
 801df0e:	b082      	sub	sp, #8
 801df10:	af00      	add	r7, sp, #0
 801df12:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	681b      	ldr	r3, [r3, #0]
 801df18:	4618      	mov	r0, r3
 801df1a:	f7ff ff5f 	bl	801dddc <lfs_tag_size>
 801df1e:	4603      	mov	r3, r0
 801df20:	0a5b      	lsrs	r3, r3, #9
 801df22:	2b00      	cmp	r3, #0
 801df24:	bf14      	ite	ne
 801df26:	2301      	movne	r3, #1
 801df28:	2300      	moveq	r3, #0
 801df2a:	b2db      	uxtb	r3, r3
}
 801df2c:	4618      	mov	r0, r3
 801df2e:	3708      	adds	r7, #8
 801df30:	46bd      	mov	sp, r7
 801df32:	bd80      	pop	{r7, pc}

0801df34 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 801df34:	b580      	push	{r7, lr}
 801df36:	b082      	sub	sp, #8
 801df38:	af00      	add	r7, sp, #0
 801df3a:	6078      	str	r0, [r7, #4]
 801df3c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	681b      	ldr	r3, [r3, #0]
 801df42:	4618      	mov	r0, r3
 801df44:	f7ff fef0 	bl	801dd28 <lfs_tag_type1>
 801df48:	4603      	mov	r3, r0
 801df4a:	2b00      	cmp	r3, #0
 801df4c:	d00a      	beq.n	801df64 <lfs_gstate_hasmovehere+0x30>
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	3304      	adds	r3, #4
 801df52:	6839      	ldr	r1, [r7, #0]
 801df54:	4618      	mov	r0, r3
 801df56:	f7ff fe3b 	bl	801dbd0 <lfs_pair_cmp>
 801df5a:	4603      	mov	r3, r0
 801df5c:	2b00      	cmp	r3, #0
 801df5e:	d101      	bne.n	801df64 <lfs_gstate_hasmovehere+0x30>
 801df60:	2301      	movs	r3, #1
 801df62:	e000      	b.n	801df66 <lfs_gstate_hasmovehere+0x32>
 801df64:	2300      	movs	r3, #0
 801df66:	f003 0301 	and.w	r3, r3, #1
 801df6a:	b2db      	uxtb	r3, r3
}
 801df6c:	4618      	mov	r0, r3
 801df6e:	3708      	adds	r7, #8
 801df70:	46bd      	mov	sp, r7
 801df72:	bd80      	pop	{r7, pc}

0801df74 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 801df74:	b580      	push	{r7, lr}
 801df76:	b082      	sub	sp, #8
 801df78:	af00      	add	r7, sp, #0
 801df7a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	681b      	ldr	r3, [r3, #0]
 801df80:	4618      	mov	r0, r3
 801df82:	f7ff fa18 	bl	801d3b6 <lfs_fromle32>
 801df86:	4602      	mov	r2, r0
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	685b      	ldr	r3, [r3, #4]
 801df90:	4618      	mov	r0, r3
 801df92:	f7ff fa10 	bl	801d3b6 <lfs_fromle32>
 801df96:	4602      	mov	r2, r0
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	689b      	ldr	r3, [r3, #8]
 801dfa0:	4618      	mov	r0, r3
 801dfa2:	f7ff fa08 	bl	801d3b6 <lfs_fromle32>
 801dfa6:	4602      	mov	r2, r0
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	609a      	str	r2, [r3, #8]
}
 801dfac:	bf00      	nop
 801dfae:	3708      	adds	r7, #8
 801dfb0:	46bd      	mov	sp, r7
 801dfb2:	bd80      	pop	{r7, pc}

0801dfb4 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 801dfb4:	b580      	push	{r7, lr}
 801dfb6:	b082      	sub	sp, #8
 801dfb8:	af00      	add	r7, sp, #0
 801dfba:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	681b      	ldr	r3, [r3, #0]
 801dfc0:	4618      	mov	r0, r3
 801dfc2:	f7ff fa03 	bl	801d3cc <lfs_tole32>
 801dfc6:	4602      	mov	r2, r0
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	685b      	ldr	r3, [r3, #4]
 801dfd0:	4618      	mov	r0, r3
 801dfd2:	f7ff f9fb 	bl	801d3cc <lfs_tole32>
 801dfd6:	4602      	mov	r2, r0
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	689b      	ldr	r3, [r3, #8]
 801dfe0:	4618      	mov	r0, r3
 801dfe2:	f7ff f9f3 	bl	801d3cc <lfs_tole32>
 801dfe6:	4602      	mov	r2, r0
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	609a      	str	r2, [r3, #8]
}
 801dfec:	bf00      	nop
 801dfee:	3708      	adds	r7, #8
 801dff0:	46bd      	mov	sp, r7
 801dff2:	bd80      	pop	{r7, pc}

0801dff4 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 801dff4:	b580      	push	{r7, lr}
 801dff6:	b082      	sub	sp, #8
 801dff8:	af00      	add	r7, sp, #0
 801dffa:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	681b      	ldr	r3, [r3, #0]
 801e000:	4618      	mov	r0, r3
 801e002:	f7ff f9d8 	bl	801d3b6 <lfs_fromle32>
 801e006:	4602      	mov	r2, r0
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	685b      	ldr	r3, [r3, #4]
 801e010:	4618      	mov	r0, r3
 801e012:	f7ff f9d0 	bl	801d3b6 <lfs_fromle32>
 801e016:	4602      	mov	r2, r0
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	605a      	str	r2, [r3, #4]
}
 801e01c:	bf00      	nop
 801e01e:	3708      	adds	r7, #8
 801e020:	46bd      	mov	sp, r7
 801e022:	bd80      	pop	{r7, pc}

0801e024 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 801e024:	b580      	push	{r7, lr}
 801e026:	b082      	sub	sp, #8
 801e028:	af00      	add	r7, sp, #0
 801e02a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	681b      	ldr	r3, [r3, #0]
 801e030:	4618      	mov	r0, r3
 801e032:	f7ff f9cb 	bl	801d3cc <lfs_tole32>
 801e036:	4602      	mov	r2, r0
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 801e03c:	687b      	ldr	r3, [r7, #4]
 801e03e:	685b      	ldr	r3, [r3, #4]
 801e040:	4618      	mov	r0, r3
 801e042:	f7ff f9c3 	bl	801d3cc <lfs_tole32>
 801e046:	4602      	mov	r2, r0
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	605a      	str	r2, [r3, #4]
}
 801e04c:	bf00      	nop
 801e04e:	3708      	adds	r7, #8
 801e050:	46bd      	mov	sp, r7
 801e052:	bd80      	pop	{r7, pc}

0801e054 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 801e054:	b580      	push	{r7, lr}
 801e056:	b082      	sub	sp, #8
 801e058:	af00      	add	r7, sp, #0
 801e05a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	681b      	ldr	r3, [r3, #0]
 801e060:	4618      	mov	r0, r3
 801e062:	f7ff f9a8 	bl	801d3b6 <lfs_fromle32>
 801e066:	4602      	mov	r2, r0
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	685b      	ldr	r3, [r3, #4]
 801e070:	4618      	mov	r0, r3
 801e072:	f7ff f9a0 	bl	801d3b6 <lfs_fromle32>
 801e076:	4602      	mov	r2, r0
 801e078:	687b      	ldr	r3, [r7, #4]
 801e07a:	605a      	str	r2, [r3, #4]
}
 801e07c:	bf00      	nop
 801e07e:	3708      	adds	r7, #8
 801e080:	46bd      	mov	sp, r7
 801e082:	bd80      	pop	{r7, pc}

0801e084 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 801e084:	b580      	push	{r7, lr}
 801e086:	b082      	sub	sp, #8
 801e088:	af00      	add	r7, sp, #0
 801e08a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	4618      	mov	r0, r3
 801e092:	f7ff f99b 	bl	801d3cc <lfs_tole32>
 801e096:	4602      	mov	r2, r0
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	685b      	ldr	r3, [r3, #4]
 801e0a0:	4618      	mov	r0, r3
 801e0a2:	f7ff f993 	bl	801d3cc <lfs_tole32>
 801e0a6:	4602      	mov	r2, r0
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	605a      	str	r2, [r3, #4]
}
 801e0ac:	bf00      	nop
 801e0ae:	3708      	adds	r7, #8
 801e0b0:	46bd      	mov	sp, r7
 801e0b2:	bd80      	pop	{r7, pc}

0801e0b4 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 801e0b4:	b580      	push	{r7, lr}
 801e0b6:	b082      	sub	sp, #8
 801e0b8:	af00      	add	r7, sp, #0
 801e0ba:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	681b      	ldr	r3, [r3, #0]
 801e0c0:	4618      	mov	r0, r3
 801e0c2:	f7ff f978 	bl	801d3b6 <lfs_fromle32>
 801e0c6:	4602      	mov	r2, r0
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	685b      	ldr	r3, [r3, #4]
 801e0d0:	4618      	mov	r0, r3
 801e0d2:	f7ff f970 	bl	801d3b6 <lfs_fromle32>
 801e0d6:	4602      	mov	r2, r0
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 801e0dc:	687b      	ldr	r3, [r7, #4]
 801e0de:	689b      	ldr	r3, [r3, #8]
 801e0e0:	4618      	mov	r0, r3
 801e0e2:	f7ff f968 	bl	801d3b6 <lfs_fromle32>
 801e0e6:	4602      	mov	r2, r0
 801e0e8:	687b      	ldr	r3, [r7, #4]
 801e0ea:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	68db      	ldr	r3, [r3, #12]
 801e0f0:	4618      	mov	r0, r3
 801e0f2:	f7ff f960 	bl	801d3b6 <lfs_fromle32>
 801e0f6:	4602      	mov	r2, r0
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	691b      	ldr	r3, [r3, #16]
 801e100:	4618      	mov	r0, r3
 801e102:	f7ff f958 	bl	801d3b6 <lfs_fromle32>
 801e106:	4602      	mov	r2, r0
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	695b      	ldr	r3, [r3, #20]
 801e110:	4618      	mov	r0, r3
 801e112:	f7ff f950 	bl	801d3b6 <lfs_fromle32>
 801e116:	4602      	mov	r2, r0
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	615a      	str	r2, [r3, #20]
}
 801e11c:	bf00      	nop
 801e11e:	3708      	adds	r7, #8
 801e120:	46bd      	mov	sp, r7
 801e122:	bd80      	pop	{r7, pc}

0801e124 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 801e124:	b580      	push	{r7, lr}
 801e126:	b082      	sub	sp, #8
 801e128:	af00      	add	r7, sp, #0
 801e12a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	681b      	ldr	r3, [r3, #0]
 801e130:	4618      	mov	r0, r3
 801e132:	f7ff f94b 	bl	801d3cc <lfs_tole32>
 801e136:	4602      	mov	r2, r0
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	685b      	ldr	r3, [r3, #4]
 801e140:	4618      	mov	r0, r3
 801e142:	f7ff f943 	bl	801d3cc <lfs_tole32>
 801e146:	4602      	mov	r2, r0
 801e148:	687b      	ldr	r3, [r7, #4]
 801e14a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	689b      	ldr	r3, [r3, #8]
 801e150:	4618      	mov	r0, r3
 801e152:	f7ff f93b 	bl	801d3cc <lfs_tole32>
 801e156:	4602      	mov	r2, r0
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	68db      	ldr	r3, [r3, #12]
 801e160:	4618      	mov	r0, r3
 801e162:	f7ff f933 	bl	801d3cc <lfs_tole32>
 801e166:	4602      	mov	r2, r0
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	691b      	ldr	r3, [r3, #16]
 801e170:	4618      	mov	r0, r3
 801e172:	f7ff f92b 	bl	801d3cc <lfs_tole32>
 801e176:	4602      	mov	r2, r0
 801e178:	687b      	ldr	r3, [r7, #4]
 801e17a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	695b      	ldr	r3, [r3, #20]
 801e180:	4618      	mov	r0, r3
 801e182:	f7ff f923 	bl	801d3cc <lfs_tole32>
 801e186:	4602      	mov	r2, r0
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	615a      	str	r2, [r3, #20]
}
 801e18c:	bf00      	nop
 801e18e:	3708      	adds	r7, #8
 801e190:	46bd      	mov	sp, r7
 801e192:	bd80      	pop	{r7, pc}

0801e194 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 801e194:	b480      	push	{r7}
 801e196:	b085      	sub	sp, #20
 801e198:	af00      	add	r7, sp, #0
 801e19a:	6078      	str	r0, [r7, #4]
 801e19c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801e19e:	1d3b      	adds	r3, r7, #4
 801e1a0:	60fb      	str	r3, [r7, #12]
 801e1a2:	e009      	b.n	801e1b8 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 801e1a4:	68fb      	ldr	r3, [r7, #12]
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	683a      	ldr	r2, [r7, #0]
 801e1aa:	429a      	cmp	r2, r3
 801e1ac:	d101      	bne.n	801e1b2 <lfs_mlist_isopen+0x1e>
            return true;
 801e1ae:	2301      	movs	r3, #1
 801e1b0:	e007      	b.n	801e1c2 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801e1b2:	68fb      	ldr	r3, [r7, #12]
 801e1b4:	681b      	ldr	r3, [r3, #0]
 801e1b6:	60fb      	str	r3, [r7, #12]
 801e1b8:	68fb      	ldr	r3, [r7, #12]
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d1f1      	bne.n	801e1a4 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 801e1c0:	2300      	movs	r3, #0
}
 801e1c2:	4618      	mov	r0, r3
 801e1c4:	3714      	adds	r7, #20
 801e1c6:	46bd      	mov	sp, r7
 801e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1cc:	4770      	bx	lr

0801e1ce <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 801e1ce:	b480      	push	{r7}
 801e1d0:	b085      	sub	sp, #20
 801e1d2:	af00      	add	r7, sp, #0
 801e1d4:	6078      	str	r0, [r7, #4]
 801e1d6:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	3328      	adds	r3, #40	@ 0x28
 801e1dc:	60fb      	str	r3, [r7, #12]
 801e1de:	e00d      	b.n	801e1fc <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 801e1e0:	68fb      	ldr	r3, [r7, #12]
 801e1e2:	681b      	ldr	r3, [r3, #0]
 801e1e4:	683a      	ldr	r2, [r7, #0]
 801e1e6:	429a      	cmp	r2, r3
 801e1e8:	d105      	bne.n	801e1f6 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	681b      	ldr	r3, [r3, #0]
 801e1ee:	681a      	ldr	r2, [r3, #0]
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	601a      	str	r2, [r3, #0]
            break;
 801e1f4:	e007      	b.n	801e206 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801e1f6:	68fb      	ldr	r3, [r7, #12]
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	60fb      	str	r3, [r7, #12]
 801e1fc:	68fb      	ldr	r3, [r7, #12]
 801e1fe:	681b      	ldr	r3, [r3, #0]
 801e200:	2b00      	cmp	r3, #0
 801e202:	d1ed      	bne.n	801e1e0 <lfs_mlist_remove+0x12>
        }
    }
}
 801e204:	bf00      	nop
 801e206:	bf00      	nop
 801e208:	3714      	adds	r7, #20
 801e20a:	46bd      	mov	sp, r7
 801e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e210:	4770      	bx	lr

0801e212 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 801e212:	b480      	push	{r7}
 801e214:	b083      	sub	sp, #12
 801e216:	af00      	add	r7, sp, #0
 801e218:	6078      	str	r0, [r7, #4]
 801e21a:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 801e21c:	687b      	ldr	r3, [r7, #4]
 801e21e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e220:	683b      	ldr	r3, [r7, #0]
 801e222:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 801e224:	687b      	ldr	r3, [r7, #4]
 801e226:	683a      	ldr	r2, [r7, #0]
 801e228:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801e22a:	bf00      	nop
 801e22c:	370c      	adds	r7, #12
 801e22e:	46bd      	mov	sp, r7
 801e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e234:	4770      	bx	lr
	...

0801e238 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 801e238:	b480      	push	{r7}
 801e23a:	b083      	sub	sp, #12
 801e23c:	af00      	add	r7, sp, #0
 801e23e:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 801e240:	4b03      	ldr	r3, [pc, #12]	@ (801e250 <lfs_fs_disk_version+0x18>)
    }
}
 801e242:	4618      	mov	r0, r3
 801e244:	370c      	adds	r7, #12
 801e246:	46bd      	mov	sp, r7
 801e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e24c:	4770      	bx	lr
 801e24e:	bf00      	nop
 801e250:	00020001 	.word	0x00020001

0801e254 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 801e254:	b580      	push	{r7, lr}
 801e256:	b082      	sub	sp, #8
 801e258:	af00      	add	r7, sp, #0
 801e25a:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 801e25c:	6878      	ldr	r0, [r7, #4]
 801e25e:	f7ff ffeb 	bl	801e238 <lfs_fs_disk_version>
 801e262:	4603      	mov	r3, r0
 801e264:	0c1b      	lsrs	r3, r3, #16
 801e266:	b29b      	uxth	r3, r3

}
 801e268:	4618      	mov	r0, r3
 801e26a:	3708      	adds	r7, #8
 801e26c:	46bd      	mov	sp, r7
 801e26e:	bd80      	pop	{r7, pc}

0801e270 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801e270:	b580      	push	{r7, lr}
 801e272:	b082      	sub	sp, #8
 801e274:	af00      	add	r7, sp, #0
 801e276:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801e278:	6878      	ldr	r0, [r7, #4]
 801e27a:	f7ff ffdd 	bl	801e238 <lfs_fs_disk_version>
 801e27e:	4603      	mov	r3, r0
 801e280:	b29b      	uxth	r3, r3
}
 801e282:	4618      	mov	r0, r3
 801e284:	3708      	adds	r7, #8
 801e286:	46bd      	mov	sp, r7
 801e288:	bd80      	pop	{r7, pc}

0801e28a <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 801e28a:	b480      	push	{r7}
 801e28c:	b083      	sub	sp, #12
 801e28e:	af00      	add	r7, sp, #0
 801e290:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 801e292:	687b      	ldr	r3, [r7, #4]
 801e294:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801e296:	687b      	ldr	r3, [r7, #4]
 801e298:	661a      	str	r2, [r3, #96]	@ 0x60
}
 801e29a:	bf00      	nop
 801e29c:	370c      	adds	r7, #12
 801e29e:	46bd      	mov	sp, r7
 801e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2a4:	4770      	bx	lr

0801e2a6 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801e2a6:	b580      	push	{r7, lr}
 801e2a8:	b082      	sub	sp, #8
 801e2aa:	af00      	add	r7, sp, #0
 801e2ac:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 801e2ae:	687b      	ldr	r3, [r7, #4]
 801e2b0:	2200      	movs	r2, #0
 801e2b2:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	2200      	movs	r2, #0
 801e2b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 801e2ba:	6878      	ldr	r0, [r7, #4]
 801e2bc:	f7ff ffe5 	bl	801e28a <lfs_alloc_ckpoint>
}
 801e2c0:	bf00      	nop
 801e2c2:	3708      	adds	r7, #8
 801e2c4:	46bd      	mov	sp, r7
 801e2c6:	bd80      	pop	{r7, pc}

0801e2c8 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801e2c8:	b480      	push	{r7}
 801e2ca:	b085      	sub	sp, #20
 801e2cc:	af00      	add	r7, sp, #0
 801e2ce:	6078      	str	r0, [r7, #4]
 801e2d0:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 801e2d2:	687b      	ldr	r3, [r7, #4]
 801e2d4:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 801e2d6:	68fb      	ldr	r3, [r7, #12]
 801e2d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e2da:	683a      	ldr	r2, [r7, #0]
 801e2dc:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 801e2de:	68fb      	ldr	r3, [r7, #12]
 801e2e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e2e2:	4413      	add	r3, r2
 801e2e4:	68fa      	ldr	r2, [r7, #12]
 801e2e6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 801e2e8:	fbb3 f1f2 	udiv	r1, r3, r2
 801e2ec:	fb01 f202 	mul.w	r2, r1, r2
 801e2f0:	1a9b      	subs	r3, r3, r2
 801e2f2:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 801e2f4:	68fb      	ldr	r3, [r7, #12]
 801e2f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e2f8:	68ba      	ldr	r2, [r7, #8]
 801e2fa:	429a      	cmp	r2, r3
 801e2fc:	d212      	bcs.n	801e324 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 801e2fe:	68fb      	ldr	r3, [r7, #12]
 801e300:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801e302:	68bb      	ldr	r3, [r7, #8]
 801e304:	08db      	lsrs	r3, r3, #3
 801e306:	441a      	add	r2, r3
 801e308:	7811      	ldrb	r1, [r2, #0]
 801e30a:	68ba      	ldr	r2, [r7, #8]
 801e30c:	f002 0207 	and.w	r2, r2, #7
 801e310:	2001      	movs	r0, #1
 801e312:	fa00 f202 	lsl.w	r2, r0, r2
 801e316:	b2d2      	uxtb	r2, r2
 801e318:	68f8      	ldr	r0, [r7, #12]
 801e31a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801e31c:	4403      	add	r3, r0
 801e31e:	430a      	orrs	r2, r1
 801e320:	b2d2      	uxtb	r2, r2
 801e322:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 801e324:	2300      	movs	r3, #0
}
 801e326:	4618      	mov	r0, r3
 801e328:	3714      	adds	r7, #20
 801e32a:	46bd      	mov	sp, r7
 801e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e330:	4770      	bx	lr
	...

0801e334 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 801e334:	b580      	push	{r7, lr}
 801e336:	b084      	sub	sp, #16
 801e338:	af00      	add	r7, sp, #0
 801e33a:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e344:	4413      	add	r3, r2
            % lfs->block_count;
 801e346:	687a      	ldr	r2, [r7, #4]
 801e348:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 801e34a:	fbb3 f1f2 	udiv	r1, r3, r2
 801e34e:	fb01 f202 	mul.w	r2, r1, r2
 801e352:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801e354:	687b      	ldr	r3, [r7, #4]
 801e356:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	2200      	movs	r2, #0
 801e35c:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801e364:	00da      	lsls	r2, r3, #3
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e36a:	4619      	mov	r1, r3
 801e36c:	4610      	mov	r0, r2
 801e36e:	f7fe ffb2 	bl	801d2d6 <lfs_min>
 801e372:	4602      	mov	r2, r0
 801e374:	687b      	ldr	r3, [r7, #4]
 801e376:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e382:	461a      	mov	r2, r3
 801e384:	2100      	movs	r1, #0
 801e386:	f017 feab 	bl	80360e0 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801e38a:	2301      	movs	r3, #1
 801e38c:	687a      	ldr	r2, [r7, #4]
 801e38e:	4909      	ldr	r1, [pc, #36]	@ (801e3b4 <lfs_alloc_scan+0x80>)
 801e390:	6878      	ldr	r0, [r7, #4]
 801e392:	f005 fdc9 	bl	8023f28 <lfs_fs_traverse_>
 801e396:	60f8      	str	r0, [r7, #12]
    if (err) {
 801e398:	68fb      	ldr	r3, [r7, #12]
 801e39a:	2b00      	cmp	r3, #0
 801e39c:	d004      	beq.n	801e3a8 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 801e39e:	6878      	ldr	r0, [r7, #4]
 801e3a0:	f7ff ff81 	bl	801e2a6 <lfs_alloc_drop>
        return err;
 801e3a4:	68fb      	ldr	r3, [r7, #12]
 801e3a6:	e000      	b.n	801e3aa <lfs_alloc_scan+0x76>
    }

    return 0;
 801e3a8:	2300      	movs	r3, #0
}
 801e3aa:	4618      	mov	r0, r3
 801e3ac:	3710      	adds	r7, #16
 801e3ae:	46bd      	mov	sp, r7
 801e3b0:	bd80      	pop	{r7, pc}
 801e3b2:	bf00      	nop
 801e3b4:	0801e2c9 	.word	0x0801e2c9

0801e3b8 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801e3b8:	b580      	push	{r7, lr}
 801e3ba:	b086      	sub	sp, #24
 801e3bc:	af02      	add	r7, sp, #8
 801e3be:	6078      	str	r0, [r7, #4]
 801e3c0:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801e3c2:	e04d      	b.n	801e460 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801e3c4:	687b      	ldr	r3, [r7, #4]
 801e3c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801e3c8:	687b      	ldr	r3, [r7, #4]
 801e3ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e3cc:	08db      	lsrs	r3, r3, #3
 801e3ce:	4413      	add	r3, r2
 801e3d0:	781b      	ldrb	r3, [r3, #0]
 801e3d2:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e3d8:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801e3dc:	fa22 f303 	lsr.w	r3, r2, r3
 801e3e0:	f003 0301 	and.w	r3, r3, #1
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d131      	bne.n	801e44c <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e3f0:	4413      	add	r3, r2
                        % lfs->block_count;
 801e3f2:	687a      	ldr	r2, [r7, #4]
 801e3f4:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 801e3f6:	fbb3 f1f2 	udiv	r1, r3, r2
 801e3fa:	fb01 f202 	mul.w	r2, r1, r2
 801e3fe:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801e400:	683b      	ldr	r3, [r7, #0]
 801e402:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e408:	1c5a      	adds	r2, r3, #1
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801e40e:	687b      	ldr	r3, [r7, #4]
 801e410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e412:	1e5a      	subs	r2, r3, #1
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801e41c:	687b      	ldr	r3, [r7, #4]
 801e41e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e420:	429a      	cmp	r2, r3
 801e422:	d211      	bcs.n	801e448 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801e428:	687b      	ldr	r3, [r7, #4]
 801e42a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e42c:	08db      	lsrs	r3, r3, #3
 801e42e:	4413      	add	r3, r2
 801e430:	781b      	ldrb	r3, [r3, #0]
 801e432:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 801e434:	687b      	ldr	r3, [r7, #4]
 801e436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e438:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801e43c:	fa22 f303 	lsr.w	r3, r2, r3
 801e440:	f003 0301 	and.w	r3, r3, #1
 801e444:	2b00      	cmp	r3, #0
 801e446:	d1dd      	bne.n	801e404 <lfs_alloc+0x4c>
                        return 0;
 801e448:	2300      	movs	r3, #0
 801e44a:	e032      	b.n	801e4b2 <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 801e44c:	687b      	ldr	r3, [r7, #4]
 801e44e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e450:	1c5a      	adds	r2, r3, #1
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e45a:	1e5a      	subs	r2, r3, #1
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801e464:	687b      	ldr	r3, [r7, #4]
 801e466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e468:	429a      	cmp	r2, r3
 801e46a:	d3ab      	bcc.n	801e3c4 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e470:	2b00      	cmp	r3, #0
 801e472:	d116      	bne.n	801e4a2 <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e47c:	4413      	add	r3, r2
 801e47e:	687a      	ldr	r2, [r7, #4]
 801e480:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 801e482:	fbb3 f1f2 	udiv	r1, r3, r2
 801e486:	fb01 f202 	mul.w	r2, r1, r2
 801e48a:	1a9b      	subs	r3, r3, r2
 801e48c:	4a0b      	ldr	r2, [pc, #44]	@ (801e4bc <lfs_alloc+0x104>)
 801e48e:	9200      	str	r2, [sp, #0]
 801e490:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801e494:	490a      	ldr	r1, [pc, #40]	@ (801e4c0 <lfs_alloc+0x108>)
 801e496:	480b      	ldr	r0, [pc, #44]	@ (801e4c4 <lfs_alloc+0x10c>)
 801e498:	f015 f902 	bl	80336a0 <printf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 801e49c:	f06f 031b 	mvn.w	r3, #27
 801e4a0:	e007      	b.n	801e4b2 <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 801e4a2:	6878      	ldr	r0, [r7, #4]
 801e4a4:	f7ff ff46 	bl	801e334 <lfs_alloc_scan>
 801e4a8:	60f8      	str	r0, [r7, #12]
        if(err) {
 801e4aa:	68fb      	ldr	r3, [r7, #12]
 801e4ac:	2b00      	cmp	r3, #0
 801e4ae:	d088      	beq.n	801e3c2 <lfs_alloc+0xa>
            return err;
 801e4b0:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 801e4b2:	4618      	mov	r0, r3
 801e4b4:	3710      	adds	r7, #16
 801e4b6:	46bd      	mov	sp, r7
 801e4b8:	bd80      	pop	{r7, pc}
 801e4ba:	bf00      	nop
 801e4bc:	08040f14 	.word	0x08040f14
 801e4c0:	08040dec 	.word	0x08040dec
 801e4c4:	08040ee8 	.word	0x08040ee8

0801e4c8 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 801e4c8:	b590      	push	{r4, r7, lr}
 801e4ca:	b08f      	sub	sp, #60	@ 0x3c
 801e4cc:	af04      	add	r7, sp, #16
 801e4ce:	60f8      	str	r0, [r7, #12]
 801e4d0:	60b9      	str	r1, [r7, #8]
 801e4d2:	607a      	str	r2, [r7, #4]
 801e4d4:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 801e4d6:	68bb      	ldr	r3, [r7, #8]
 801e4d8:	68db      	ldr	r3, [r3, #12]
 801e4da:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 801e4dc:	68bb      	ldr	r3, [r7, #8]
 801e4de:	691b      	ldr	r3, [r3, #16]
 801e4e0:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 801e4e2:	2300      	movs	r3, #0
 801e4e4:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801e4e6:	68fb      	ldr	r3, [r7, #12]
 801e4e8:	333c      	adds	r3, #60	@ 0x3c
 801e4ea:	68ba      	ldr	r2, [r7, #8]
 801e4ec:	4611      	mov	r1, r2
 801e4ee:	4618      	mov	r0, r3
 801e4f0:	f7ff fd20 	bl	801df34 <lfs_gstate_hasmovehere>
 801e4f4:	4603      	mov	r3, r0
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	f000 80ca 	beq.w	801e690 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 801e4fc:	6878      	ldr	r0, [r7, #4]
 801e4fe:	f7ff fc5d 	bl	801ddbc <lfs_tag_id>
 801e502:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801e504:	2b00      	cmp	r3, #0
 801e506:	f000 80c3 	beq.w	801e690 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801e50a:	68fb      	ldr	r3, [r7, #12]
 801e50c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e50e:	4618      	mov	r0, r3
 801e510:	f7ff fc54 	bl	801ddbc <lfs_tag_id>
 801e514:	4603      	mov	r3, r0
 801e516:	461c      	mov	r4, r3
 801e518:	6838      	ldr	r0, [r7, #0]
 801e51a:	f7ff fc4f 	bl	801ddbc <lfs_tag_id>
 801e51e:	4603      	mov	r3, r0
 801e520:	429c      	cmp	r4, r3
 801e522:	d102      	bne.n	801e52a <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 801e524:	f06f 0301 	mvn.w	r3, #1
 801e528:	e0be      	b.n	801e6a8 <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 801e52a:	68fb      	ldr	r3, [r7, #12]
 801e52c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e52e:	4618      	mov	r0, r3
 801e530:	f7ff fc44 	bl	801ddbc <lfs_tag_id>
 801e534:	4603      	mov	r3, r0
 801e536:	461c      	mov	r4, r3
 801e538:	6838      	ldr	r0, [r7, #0]
 801e53a:	f7ff fc3f 	bl	801ddbc <lfs_tag_id>
 801e53e:	4603      	mov	r3, r0
 801e540:	429c      	cmp	r4, r3
 801e542:	f080 80a5 	bcs.w	801e690 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 801e546:	6a3b      	ldr	r3, [r7, #32]
 801e548:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801e54c:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801e54e:	e09f      	b.n	801e690 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 801e550:	693b      	ldr	r3, [r7, #16]
 801e552:	4618      	mov	r0, r3
 801e554:	f7ff fc4f 	bl	801ddf6 <lfs_tag_dsize>
 801e558:	4602      	mov	r2, r0
 801e55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e55c:	1a9b      	subs	r3, r3, r2
 801e55e:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 801e560:	693b      	ldr	r3, [r7, #16]
 801e562:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 801e564:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 801e566:	68bb      	ldr	r3, [r7, #8]
 801e568:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 801e56a:	2204      	movs	r2, #4
 801e56c:	9203      	str	r2, [sp, #12]
 801e56e:	f107 0210 	add.w	r2, r7, #16
 801e572:	9202      	str	r2, [sp, #8]
 801e574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e576:	9201      	str	r2, [sp, #4]
 801e578:	9300      	str	r3, [sp, #0]
 801e57a:	2304      	movs	r3, #4
 801e57c:	460a      	mov	r2, r1
 801e57e:	2100      	movs	r1, #0
 801e580:	68f8      	ldr	r0, [r7, #12]
 801e582:	f7fe ff83 	bl	801d48c <lfs_bd_read>
 801e586:	61b8      	str	r0, [r7, #24]
        if (err) {
 801e588:	69bb      	ldr	r3, [r7, #24]
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	d001      	beq.n	801e592 <lfs_dir_getslice+0xca>
            return err;
 801e58e:	69bb      	ldr	r3, [r7, #24]
 801e590:	e08a      	b.n	801e6a8 <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 801e592:	693b      	ldr	r3, [r7, #16]
 801e594:	4618      	mov	r0, r3
 801e596:	f7fe ff25 	bl	801d3e4 <lfs_frombe32>
 801e59a:	4602      	mov	r2, r0
 801e59c:	69fb      	ldr	r3, [r7, #28]
 801e59e:	4053      	eors	r3, r2
 801e5a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e5a4:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 801e5a6:	6878      	ldr	r0, [r7, #4]
 801e5a8:	f7ff fc08 	bl	801ddbc <lfs_tag_id>
 801e5ac:	4603      	mov	r3, r0
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	d02b      	beq.n	801e60a <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801e5b2:	69f8      	ldr	r0, [r7, #28]
 801e5b4:	f7ff fbb8 	bl	801dd28 <lfs_tag_type1>
 801e5b8:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 801e5ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e5be:	d124      	bne.n	801e60a <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 801e5c0:	69f8      	ldr	r0, [r7, #28]
 801e5c2:	f7ff fbfb 	bl	801ddbc <lfs_tag_id>
 801e5c6:	4603      	mov	r3, r0
 801e5c8:	461c      	mov	r4, r3
 801e5ca:	6a3b      	ldr	r3, [r7, #32]
 801e5cc:	683a      	ldr	r2, [r7, #0]
 801e5ce:	1ad3      	subs	r3, r2, r3
 801e5d0:	4618      	mov	r0, r3
 801e5d2:	f7ff fbf3 	bl	801ddbc <lfs_tag_id>
 801e5d6:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801e5d8:	429c      	cmp	r4, r3
 801e5da:	d816      	bhi.n	801e60a <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 801e5dc:	6a3b      	ldr	r3, [r7, #32]
 801e5de:	683a      	ldr	r2, [r7, #0]
 801e5e0:	1ad2      	subs	r2, r2, r3
 801e5e2:	4b33      	ldr	r3, [pc, #204]	@ (801e6b0 <lfs_dir_getslice+0x1e8>)
 801e5e4:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 801e5e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801e5ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e5ee:	69fa      	ldr	r2, [r7, #28]
 801e5f0:	429a      	cmp	r2, r3
 801e5f2:	d102      	bne.n	801e5fa <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 801e5f4:	f06f 0301 	mvn.w	r3, #1
 801e5f8:	e056      	b.n	801e6a8 <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801e5fa:	69f8      	ldr	r0, [r7, #28]
 801e5fc:	f7ff fbd1 	bl	801dda2 <lfs_tag_splice>
 801e600:	4603      	mov	r3, r0
 801e602:	029a      	lsls	r2, r3, #10
 801e604:	6a3b      	ldr	r3, [r7, #32]
 801e606:	4413      	add	r3, r2
 801e608:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 801e60a:	687a      	ldr	r2, [r7, #4]
 801e60c:	69fb      	ldr	r3, [r7, #28]
 801e60e:	401a      	ands	r2, r3
 801e610:	6a3b      	ldr	r3, [r7, #32]
 801e612:	6839      	ldr	r1, [r7, #0]
 801e614:	1ac9      	subs	r1, r1, r3
 801e616:	687b      	ldr	r3, [r7, #4]
 801e618:	400b      	ands	r3, r1
 801e61a:	429a      	cmp	r2, r3
 801e61c:	d138      	bne.n	801e690 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 801e61e:	69f8      	ldr	r0, [r7, #28]
 801e620:	f7ff fb6f 	bl	801dd02 <lfs_tag_isdelete>
 801e624:	4603      	mov	r3, r0
 801e626:	2b00      	cmp	r3, #0
 801e628:	d002      	beq.n	801e630 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 801e62a:	f06f 0301 	mvn.w	r3, #1
 801e62e:	e03b      	b.n	801e6a8 <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 801e630:	69f8      	ldr	r0, [r7, #28]
 801e632:	f7ff fbd3 	bl	801dddc <lfs_tag_size>
 801e636:	4603      	mov	r3, r0
 801e638:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e63a:	4618      	mov	r0, r3
 801e63c:	f7fe fe4b 	bl	801d2d6 <lfs_min>
 801e640:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 801e642:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 801e644:	68bb      	ldr	r3, [r7, #8]
 801e646:	681b      	ldr	r3, [r3, #0]
 801e648:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e64a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e64c:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 801e64e:	3204      	adds	r2, #4
 801e650:	6979      	ldr	r1, [r7, #20]
 801e652:	9103      	str	r1, [sp, #12]
 801e654:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e656:	9102      	str	r1, [sp, #8]
 801e658:	9201      	str	r2, [sp, #4]
 801e65a:	9300      	str	r3, [sp, #0]
 801e65c:	697b      	ldr	r3, [r7, #20]
 801e65e:	4602      	mov	r2, r0
 801e660:	2100      	movs	r1, #0
 801e662:	68f8      	ldr	r0, [r7, #12]
 801e664:	f7fe ff12 	bl	801d48c <lfs_bd_read>
 801e668:	61b8      	str	r0, [r7, #24]
            if (err) {
 801e66a:	69bb      	ldr	r3, [r7, #24]
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d001      	beq.n	801e674 <lfs_dir_getslice+0x1ac>
                return err;
 801e670:	69bb      	ldr	r3, [r7, #24]
 801e672:	e019      	b.n	801e6a8 <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 801e674:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e676:	697b      	ldr	r3, [r7, #20]
 801e678:	18d0      	adds	r0, r2, r3
 801e67a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e67c:	697b      	ldr	r3, [r7, #20]
 801e67e:	1ad3      	subs	r3, r2, r3
 801e680:	461a      	mov	r2, r3
 801e682:	2100      	movs	r1, #0
 801e684:	f017 fd2c 	bl	80360e0 <memset>

            return tag + gdiff;
 801e688:	6a3a      	ldr	r2, [r7, #32]
 801e68a:	69fb      	ldr	r3, [r7, #28]
 801e68c:	4413      	add	r3, r2
 801e68e:	e00b      	b.n	801e6a8 <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801e690:	693b      	ldr	r3, [r7, #16]
 801e692:	4618      	mov	r0, r3
 801e694:	f7ff fbaf 	bl	801ddf6 <lfs_tag_dsize>
 801e698:	4603      	mov	r3, r0
 801e69a:	3304      	adds	r3, #4
 801e69c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e69e:	429a      	cmp	r2, r3
 801e6a0:	f4bf af56 	bcs.w	801e550 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 801e6a4:	f06f 0301 	mvn.w	r3, #1
}
 801e6a8:	4618      	mov	r0, r3
 801e6aa:	372c      	adds	r7, #44	@ 0x2c
 801e6ac:	46bd      	mov	sp, r7
 801e6ae:	bd90      	pop	{r4, r7, pc}
 801e6b0:	000ffc00 	.word	0x000ffc00

0801e6b4 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 801e6b4:	b580      	push	{r7, lr}
 801e6b6:	b088      	sub	sp, #32
 801e6b8:	af04      	add	r7, sp, #16
 801e6ba:	60f8      	str	r0, [r7, #12]
 801e6bc:	60b9      	str	r1, [r7, #8]
 801e6be:	607a      	str	r2, [r7, #4]
 801e6c0:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 801e6c2:	6838      	ldr	r0, [r7, #0]
 801e6c4:	f7ff fb8a 	bl	801dddc <lfs_tag_size>
 801e6c8:	4603      	mov	r3, r0
 801e6ca:	9302      	str	r3, [sp, #8]
 801e6cc:	69bb      	ldr	r3, [r7, #24]
 801e6ce:	9301      	str	r3, [sp, #4]
 801e6d0:	2300      	movs	r3, #0
 801e6d2:	9300      	str	r3, [sp, #0]
 801e6d4:	683b      	ldr	r3, [r7, #0]
 801e6d6:	687a      	ldr	r2, [r7, #4]
 801e6d8:	68b9      	ldr	r1, [r7, #8]
 801e6da:	68f8      	ldr	r0, [r7, #12]
 801e6dc:	f7ff fef4 	bl	801e4c8 <lfs_dir_getslice>
 801e6e0:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 801e6e2:	4618      	mov	r0, r3
 801e6e4:	3710      	adds	r7, #16
 801e6e6:	46bd      	mov	sp, r7
 801e6e8:	bd80      	pop	{r7, pc}

0801e6ea <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801e6ea:	b580      	push	{r7, lr}
 801e6ec:	b08c      	sub	sp, #48	@ 0x30
 801e6ee:	af04      	add	r7, sp, #16
 801e6f0:	60f8      	str	r0, [r7, #12]
 801e6f2:	60b9      	str	r1, [r7, #8]
 801e6f4:	607a      	str	r2, [r7, #4]
 801e6f6:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 801e6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e6fa:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 801e6fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e700:	441a      	add	r2, r3
 801e702:	68fb      	ldr	r3, [r7, #12]
 801e704:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e708:	429a      	cmp	r2, r3
 801e70a:	f240 80c0 	bls.w	801e88e <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 801e70e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801e712:	e0c1      	b.n	801e898 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 801e714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e716:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	2b00      	cmp	r3, #0
 801e71c:	d03f      	beq.n	801e79e <lfs_dir_getread+0xb4>
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	681b      	ldr	r3, [r3, #0]
 801e722:	f113 0f02 	cmn.w	r3, #2
 801e726:	d13a      	bne.n	801e79e <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 801e728:	687b      	ldr	r3, [r7, #4]
 801e72a:	685a      	ldr	r2, [r3, #4]
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	689b      	ldr	r3, [r3, #8]
 801e730:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801e732:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e734:	429a      	cmp	r2, r3
 801e736:	d232      	bcs.n	801e79e <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	685b      	ldr	r3, [r3, #4]
 801e73c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e73e:	429a      	cmp	r2, r3
 801e740:	d324      	bcc.n	801e78c <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801e742:	687b      	ldr	r3, [r7, #4]
 801e744:	689a      	ldr	r2, [r3, #8]
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	6859      	ldr	r1, [r3, #4]
 801e74a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e74c:	1acb      	subs	r3, r1, r3
 801e74e:	4413      	add	r3, r2
 801e750:	4619      	mov	r1, r3
 801e752:	69b8      	ldr	r0, [r7, #24]
 801e754:	f7fe fdbf 	bl	801d2d6 <lfs_min>
 801e758:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	68da      	ldr	r2, [r3, #12]
 801e75e:	687b      	ldr	r3, [r7, #4]
 801e760:	685b      	ldr	r3, [r3, #4]
 801e762:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e764:	1acb      	subs	r3, r1, r3
 801e766:	4413      	add	r3, r2
 801e768:	69ba      	ldr	r2, [r7, #24]
 801e76a:	4619      	mov	r1, r3
 801e76c:	69f8      	ldr	r0, [r7, #28]
 801e76e:	f018 fef3 	bl	8037558 <memcpy>

                data += diff;
 801e772:	69fa      	ldr	r2, [r7, #28]
 801e774:	69bb      	ldr	r3, [r7, #24]
 801e776:	4413      	add	r3, r2
 801e778:	61fb      	str	r3, [r7, #28]
                off += diff;
 801e77a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e77c:	69bb      	ldr	r3, [r7, #24]
 801e77e:	4413      	add	r3, r2
 801e780:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 801e782:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e784:	69bb      	ldr	r3, [r7, #24]
 801e786:	1ad3      	subs	r3, r2, r3
 801e788:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 801e78a:	e080      	b.n	801e88e <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	685a      	ldr	r2, [r3, #4]
 801e790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e792:	1ad3      	subs	r3, r2, r3
 801e794:	4619      	mov	r1, r3
 801e796:	69b8      	ldr	r0, [r7, #24]
 801e798:	f7fe fd9d 	bl	801d2d6 <lfs_min>
 801e79c:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 801e79e:	683b      	ldr	r3, [r7, #0]
 801e7a0:	681b      	ldr	r3, [r3, #0]
 801e7a2:	f113 0f02 	cmn.w	r3, #2
 801e7a6:	d13a      	bne.n	801e81e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 801e7a8:	683b      	ldr	r3, [r7, #0]
 801e7aa:	685a      	ldr	r2, [r3, #4]
 801e7ac:	683b      	ldr	r3, [r7, #0]
 801e7ae:	689b      	ldr	r3, [r3, #8]
 801e7b0:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 801e7b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e7b4:	429a      	cmp	r2, r3
 801e7b6:	d232      	bcs.n	801e81e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 801e7b8:	683b      	ldr	r3, [r7, #0]
 801e7ba:	685b      	ldr	r3, [r3, #4]
 801e7bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e7be:	429a      	cmp	r2, r3
 801e7c0:	d324      	bcc.n	801e80c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801e7c2:	683b      	ldr	r3, [r7, #0]
 801e7c4:	689a      	ldr	r2, [r3, #8]
 801e7c6:	683b      	ldr	r3, [r7, #0]
 801e7c8:	6859      	ldr	r1, [r3, #4]
 801e7ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e7cc:	1acb      	subs	r3, r1, r3
 801e7ce:	4413      	add	r3, r2
 801e7d0:	4619      	mov	r1, r3
 801e7d2:	69b8      	ldr	r0, [r7, #24]
 801e7d4:	f7fe fd7f 	bl	801d2d6 <lfs_min>
 801e7d8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801e7da:	683b      	ldr	r3, [r7, #0]
 801e7dc:	68da      	ldr	r2, [r3, #12]
 801e7de:	683b      	ldr	r3, [r7, #0]
 801e7e0:	685b      	ldr	r3, [r3, #4]
 801e7e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e7e4:	1acb      	subs	r3, r1, r3
 801e7e6:	4413      	add	r3, r2
 801e7e8:	69ba      	ldr	r2, [r7, #24]
 801e7ea:	4619      	mov	r1, r3
 801e7ec:	69f8      	ldr	r0, [r7, #28]
 801e7ee:	f018 feb3 	bl	8037558 <memcpy>

                data += diff;
 801e7f2:	69fa      	ldr	r2, [r7, #28]
 801e7f4:	69bb      	ldr	r3, [r7, #24]
 801e7f6:	4413      	add	r3, r2
 801e7f8:	61fb      	str	r3, [r7, #28]
                off += diff;
 801e7fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e7fc:	69bb      	ldr	r3, [r7, #24]
 801e7fe:	4413      	add	r3, r2
 801e800:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 801e802:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e804:	69bb      	ldr	r3, [r7, #24]
 801e806:	1ad3      	subs	r3, r2, r3
 801e808:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 801e80a:	e040      	b.n	801e88e <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 801e80c:	683b      	ldr	r3, [r7, #0]
 801e80e:	685a      	ldr	r2, [r3, #4]
 801e810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e812:	1ad3      	subs	r3, r2, r3
 801e814:	4619      	mov	r1, r3
 801e816:	69b8      	ldr	r0, [r7, #24]
 801e818:	f7fe fd5d 	bl	801d2d6 <lfs_min>
 801e81c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 801e81e:	683b      	ldr	r3, [r7, #0]
 801e820:	f06f 0201 	mvn.w	r2, #1
 801e824:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801e826:	68fb      	ldr	r3, [r7, #12]
 801e828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e82a:	69db      	ldr	r3, [r3, #28]
 801e82c:	4619      	mov	r1, r3
 801e82e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e830:	f7fe fd61 	bl	801d2f6 <lfs_aligndown>
 801e834:	4602      	mov	r2, r0
 801e836:	683b      	ldr	r3, [r7, #0]
 801e838:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801e83a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e83e:	441a      	add	r2, r3
 801e840:	68fb      	ldr	r3, [r7, #12]
 801e842:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e844:	69db      	ldr	r3, [r3, #28]
 801e846:	4619      	mov	r1, r3
 801e848:	4610      	mov	r0, r2
 801e84a:	f7fe fd69 	bl	801d320 <lfs_alignup>
 801e84e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 801e850:	68fb      	ldr	r3, [r7, #12]
 801e852:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801e856:	4619      	mov	r1, r3
 801e858:	4610      	mov	r0, r2
 801e85a:	f7fe fd3c 	bl	801d2d6 <lfs_min>
 801e85e:	4602      	mov	r2, r0
 801e860:	683b      	ldr	r3, [r7, #0]
 801e862:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801e864:	683b      	ldr	r3, [r7, #0]
 801e866:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 801e868:	683a      	ldr	r2, [r7, #0]
 801e86a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801e86c:	6839      	ldr	r1, [r7, #0]
 801e86e:	6889      	ldr	r1, [r1, #8]
 801e870:	9102      	str	r1, [sp, #8]
 801e872:	9201      	str	r2, [sp, #4]
 801e874:	9300      	str	r3, [sp, #0]
 801e876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e87a:	68b9      	ldr	r1, [r7, #8]
 801e87c:	68f8      	ldr	r0, [r7, #12]
 801e87e:	f7ff fe23 	bl	801e4c8 <lfs_dir_getslice>
 801e882:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 801e884:	697b      	ldr	r3, [r7, #20]
 801e886:	2b00      	cmp	r3, #0
 801e888:	da01      	bge.n	801e88e <lfs_dir_getread+0x1a4>
            return err;
 801e88a:	697b      	ldr	r3, [r7, #20]
 801e88c:	e004      	b.n	801e898 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 801e88e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e890:	2b00      	cmp	r3, #0
 801e892:	f47f af3f 	bne.w	801e714 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 801e896:	2300      	movs	r3, #0
}
 801e898:	4618      	mov	r0, r3
 801e89a:	3720      	adds	r7, #32
 801e89c:	46bd      	mov	sp, r7
 801e89e:	bd80      	pop	{r7, pc}

0801e8a0 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 801e8a0:	b590      	push	{r4, r7, lr}
 801e8a2:	b087      	sub	sp, #28
 801e8a4:	af00      	add	r7, sp, #0
 801e8a6:	60f8      	str	r0, [r7, #12]
 801e8a8:	60b9      	str	r1, [r7, #8]
 801e8aa:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 801e8ac:	68fb      	ldr	r3, [r7, #12]
 801e8ae:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 801e8b0:	68bb      	ldr	r3, [r7, #8]
 801e8b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801e8b6:	2b00      	cmp	r3, #0
 801e8b8:	d001      	beq.n	801e8be <lfs_dir_traverse_filter+0x1e>
 801e8ba:	4b24      	ldr	r3, [pc, #144]	@ (801e94c <lfs_dir_traverse_filter+0xac>)
 801e8bc:	e000      	b.n	801e8c0 <lfs_dir_traverse_filter+0x20>
 801e8be:	4b24      	ldr	r3, [pc, #144]	@ (801e950 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 801e8c0:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801e8c2:	697b      	ldr	r3, [r7, #20]
 801e8c4:	681a      	ldr	r2, [r3, #0]
 801e8c6:	68bb      	ldr	r3, [r7, #8]
 801e8c8:	405a      	eors	r2, r3
 801e8ca:	693b      	ldr	r3, [r7, #16]
 801e8cc:	4013      	ands	r3, r2
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	d014      	beq.n	801e8fc <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 801e8d2:	697b      	ldr	r3, [r7, #20]
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	4618      	mov	r0, r3
 801e8d8:	f7ff fa13 	bl	801dd02 <lfs_tag_isdelete>
 801e8dc:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 801e8de:	2b00      	cmp	r3, #0
 801e8e0:	d10c      	bne.n	801e8fc <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801e8e2:	68bb      	ldr	r3, [r7, #8]
 801e8e4:	4a19      	ldr	r2, [pc, #100]	@ (801e94c <lfs_dir_traverse_filter+0xac>)
 801e8e6:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 801e8e8:	697b      	ldr	r3, [r7, #20]
 801e8ea:	6819      	ldr	r1, [r3, #0]
 801e8ec:	4b19      	ldr	r3, [pc, #100]	@ (801e954 <lfs_dir_traverse_filter+0xb4>)
 801e8ee:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801e8f0:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e8f4:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801e8f8:	429a      	cmp	r2, r3
 801e8fa:	d104      	bne.n	801e906 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 801e8fc:	697b      	ldr	r3, [r7, #20]
 801e8fe:	2200      	movs	r2, #0
 801e900:	601a      	str	r2, [r3, #0]
        return true;
 801e902:	2301      	movs	r3, #1
 801e904:	e01e      	b.n	801e944 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801e906:	68b8      	ldr	r0, [r7, #8]
 801e908:	f7ff fa0e 	bl	801dd28 <lfs_tag_type1>
 801e90c:	4603      	mov	r3, r0
 801e90e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e912:	d116      	bne.n	801e942 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 801e914:	68b8      	ldr	r0, [r7, #8]
 801e916:	f7ff fa51 	bl	801ddbc <lfs_tag_id>
 801e91a:	4603      	mov	r3, r0
 801e91c:	461c      	mov	r4, r3
 801e91e:	697b      	ldr	r3, [r7, #20]
 801e920:	681b      	ldr	r3, [r3, #0]
 801e922:	4618      	mov	r0, r3
 801e924:	f7ff fa4a 	bl	801ddbc <lfs_tag_id>
 801e928:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801e92a:	429c      	cmp	r4, r3
 801e92c:	d809      	bhi.n	801e942 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801e92e:	68b8      	ldr	r0, [r7, #8]
 801e930:	f7ff fa37 	bl	801dda2 <lfs_tag_splice>
 801e934:	4603      	mov	r3, r0
 801e936:	029a      	lsls	r2, r3, #10
 801e938:	697b      	ldr	r3, [r7, #20]
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	441a      	add	r2, r3
 801e93e:	697b      	ldr	r3, [r7, #20]
 801e940:	601a      	str	r2, [r3, #0]
    }

    return false;
 801e942:	2300      	movs	r3, #0
}
 801e944:	4618      	mov	r0, r3
 801e946:	371c      	adds	r7, #28
 801e948:	46bd      	mov	sp, r7
 801e94a:	bd90      	pop	{r4, r7, pc}
 801e94c:	7ffffc00 	.word	0x7ffffc00
 801e950:	700ffc00 	.word	0x700ffc00
 801e954:	000ffc00 	.word	0x000ffc00

0801e958 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801e958:	b590      	push	{r4, r7, lr}
 801e95a:	b0c1      	sub	sp, #260	@ 0x104
 801e95c:	af04      	add	r7, sp, #16
 801e95e:	60f8      	str	r0, [r7, #12]
 801e960:	60b9      	str	r1, [r7, #8]
 801e962:	607a      	str	r2, [r7, #4]
 801e964:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 801e966:	2300      	movs	r3, #0
 801e968:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 801e96c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801e970:	2200      	movs	r2, #0
 801e972:	601a      	str	r2, [r3, #0]
 801e974:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 801e976:	6838      	ldr	r0, [r7, #0]
 801e978:	f7ff fa3d 	bl	801ddf6 <lfs_tag_dsize>
 801e97c:	4602      	mov	r2, r0
 801e97e:	687b      	ldr	r3, [r7, #4]
 801e980:	441a      	add	r2, r3
 801e982:	68bb      	ldr	r3, [r7, #8]
 801e984:	68db      	ldr	r3, [r3, #12]
 801e986:	429a      	cmp	r2, r3
 801e988:	d237      	bcs.n	801e9fa <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 801e98a:	6838      	ldr	r0, [r7, #0]
 801e98c:	f7ff fa33 	bl	801ddf6 <lfs_tag_dsize>
 801e990:	4602      	mov	r2, r0
 801e992:	687b      	ldr	r3, [r7, #4]
 801e994:	4413      	add	r3, r2
 801e996:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 801e998:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 801e99a:	68bb      	ldr	r3, [r7, #8]
 801e99c:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 801e99e:	2204      	movs	r2, #4
 801e9a0:	9203      	str	r2, [sp, #12]
 801e9a2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801e9a6:	9202      	str	r2, [sp, #8]
 801e9a8:	687a      	ldr	r2, [r7, #4]
 801e9aa:	9201      	str	r2, [sp, #4]
 801e9ac:	9300      	str	r3, [sp, #0]
 801e9ae:	2304      	movs	r3, #4
 801e9b0:	460a      	mov	r2, r1
 801e9b2:	2100      	movs	r1, #0
 801e9b4:	68f8      	ldr	r0, [r7, #12]
 801e9b6:	f7fe fd69 	bl	801d48c <lfs_bd_read>
 801e9ba:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 801e9be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	d002      	beq.n	801e9cc <lfs_dir_traverse+0x74>
                    return err;
 801e9c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801e9ca:	e3a5      	b.n	801f118 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 801e9cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e9ce:	4618      	mov	r0, r3
 801e9d0:	f7fe fd08 	bl	801d3e4 <lfs_frombe32>
 801e9d4:	4602      	mov	r2, r0
 801e9d6:	683b      	ldr	r3, [r7, #0]
 801e9d8:	4053      	eors	r3, r2
 801e9da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801e9de:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 801e9e0:	68bb      	ldr	r3, [r7, #8]
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	3304      	adds	r3, #4
 801e9ea:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 801e9ec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801e9f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 801e9f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e9f6:	603b      	str	r3, [r7, #0]
 801e9f8:	e01b      	b.n	801ea32 <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 801e9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	dd13      	ble.n	801ea2a <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 801ea02:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801ea06:	681b      	ldr	r3, [r3, #0]
 801ea08:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 801ea0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801ea0e:	685b      	ldr	r3, [r3, #4]
 801ea10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 801ea14:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801ea18:	3308      	adds	r3, #8
 801ea1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 801ea1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801ea22:	3b01      	subs	r3, #1
 801ea24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801ea28:	e003      	b.n	801ea32 <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 801ea2a:	2300      	movs	r3, #0
 801ea2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 801ea30:	e2a1      	b.n	801ef76 <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 801ea32:	4b7e      	ldr	r3, [pc, #504]	@ (801ec2c <lfs_dir_traverse+0x2d4>)
 801ea34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 801ea38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ea3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801ea3e:	405a      	eors	r2, r3
 801ea40:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 801ea44:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801ea48:	400b      	ands	r3, r1
 801ea4a:	4013      	ands	r3, r2
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	f040 8284 	bne.w	801ef5a <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 801ea52:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 801ea56:	f7ff f9b1 	bl	801ddbc <lfs_tag_id>
 801ea5a:	4603      	mov	r3, r0
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	f000 80ef 	beq.w	801ec40 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801ea62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ea66:	2b02      	cmp	r3, #2
 801ea68:	d906      	bls.n	801ea78 <lfs_dir_traverse+0x120>
 801ea6a:	4b71      	ldr	r3, [pc, #452]	@ (801ec30 <lfs_dir_traverse+0x2d8>)
 801ea6c:	4a71      	ldr	r2, [pc, #452]	@ (801ec34 <lfs_dir_traverse+0x2dc>)
 801ea6e:	f240 31b6 	movw	r1, #950	@ 0x3b6
 801ea72:	4871      	ldr	r0, [pc, #452]	@ (801ec38 <lfs_dir_traverse+0x2e0>)
 801ea74:	f014 fde0 	bl	8033638 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 801ea78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801ea7a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ea7e:	4613      	mov	r3, r2
 801ea80:	011b      	lsls	r3, r3, #4
 801ea82:	1a9b      	subs	r3, r3, r2
 801ea84:	009b      	lsls	r3, r3, #2
 801ea86:	33f0      	adds	r3, #240	@ 0xf0
 801ea88:	443b      	add	r3, r7
 801ea8a:	3b98      	subs	r3, #152	@ 0x98
 801ea8c:	68ba      	ldr	r2, [r7, #8]
 801ea8e:	601a      	str	r2, [r3, #0]
 801ea90:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ea94:	4613      	mov	r3, r2
 801ea96:	011b      	lsls	r3, r3, #4
 801ea98:	1a9b      	subs	r3, r3, r2
 801ea9a:	009b      	lsls	r3, r3, #2
 801ea9c:	33f0      	adds	r3, #240	@ 0xf0
 801ea9e:	443b      	add	r3, r7
 801eaa0:	3b94      	subs	r3, #148	@ 0x94
 801eaa2:	687a      	ldr	r2, [r7, #4]
 801eaa4:	601a      	str	r2, [r3, #0]
 801eaa6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eaaa:	4613      	mov	r3, r2
 801eaac:	011b      	lsls	r3, r3, #4
 801eaae:	1a9b      	subs	r3, r3, r2
 801eab0:	009b      	lsls	r3, r3, #2
 801eab2:	33f0      	adds	r3, #240	@ 0xf0
 801eab4:	443b      	add	r3, r7
 801eab6:	3b90      	subs	r3, #144	@ 0x90
 801eab8:	683a      	ldr	r2, [r7, #0]
 801eaba:	601a      	str	r2, [r3, #0]
 801eabc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eac0:	4613      	mov	r3, r2
 801eac2:	011b      	lsls	r3, r3, #4
 801eac4:	1a9b      	subs	r3, r3, r2
 801eac6:	009b      	lsls	r3, r3, #2
 801eac8:	33f0      	adds	r3, #240	@ 0xf0
 801eaca:	443b      	add	r3, r7
 801eacc:	3b8c      	subs	r3, #140	@ 0x8c
 801eace:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801ead2:	601a      	str	r2, [r3, #0]
 801ead4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ead8:	4613      	mov	r3, r2
 801eada:	011b      	lsls	r3, r3, #4
 801eadc:	1a9b      	subs	r3, r3, r2
 801eade:	009b      	lsls	r3, r3, #2
 801eae0:	33f0      	adds	r3, #240	@ 0xf0
 801eae2:	443b      	add	r3, r7
 801eae4:	3b88      	subs	r3, #136	@ 0x88
 801eae6:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801eaea:	601a      	str	r2, [r3, #0]
 801eaec:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eaf0:	4613      	mov	r3, r2
 801eaf2:	011b      	lsls	r3, r3, #4
 801eaf4:	1a9b      	subs	r3, r3, r2
 801eaf6:	009b      	lsls	r3, r3, #2
 801eaf8:	33f0      	adds	r3, #240	@ 0xf0
 801eafa:	443b      	add	r3, r7
 801eafc:	3b84      	subs	r3, #132	@ 0x84
 801eafe:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801eb02:	601a      	str	r2, [r3, #0]
 801eb04:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eb08:	4613      	mov	r3, r2
 801eb0a:	011b      	lsls	r3, r3, #4
 801eb0c:	1a9b      	subs	r3, r3, r2
 801eb0e:	009b      	lsls	r3, r3, #2
 801eb10:	33f0      	adds	r3, #240	@ 0xf0
 801eb12:	443b      	add	r3, r7
 801eb14:	3b80      	subs	r3, #128	@ 0x80
 801eb16:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801eb1a:	601a      	str	r2, [r3, #0]
 801eb1c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eb20:	4613      	mov	r3, r2
 801eb22:	011b      	lsls	r3, r3, #4
 801eb24:	1a9b      	subs	r3, r3, r2
 801eb26:	009b      	lsls	r3, r3, #2
 801eb28:	33f0      	adds	r3, #240	@ 0xf0
 801eb2a:	443b      	add	r3, r7
 801eb2c:	3b7c      	subs	r3, #124	@ 0x7c
 801eb2e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 801eb32:	801a      	strh	r2, [r3, #0]
 801eb34:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eb38:	4613      	mov	r3, r2
 801eb3a:	011b      	lsls	r3, r3, #4
 801eb3c:	1a9b      	subs	r3, r3, r2
 801eb3e:	009b      	lsls	r3, r3, #2
 801eb40:	33f0      	adds	r3, #240	@ 0xf0
 801eb42:	443b      	add	r3, r7
 801eb44:	3b7a      	subs	r3, #122	@ 0x7a
 801eb46:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 801eb4a:	801a      	strh	r2, [r3, #0]
 801eb4c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eb50:	4613      	mov	r3, r2
 801eb52:	011b      	lsls	r3, r3, #4
 801eb54:	1a9b      	subs	r3, r3, r2
 801eb56:	009b      	lsls	r3, r3, #2
 801eb58:	33f0      	adds	r3, #240	@ 0xf0
 801eb5a:	443b      	add	r3, r7
 801eb5c:	3b78      	subs	r3, #120	@ 0x78
 801eb5e:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 801eb62:	801a      	strh	r2, [r3, #0]
 801eb64:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eb68:	4613      	mov	r3, r2
 801eb6a:	011b      	lsls	r3, r3, #4
 801eb6c:	1a9b      	subs	r3, r3, r2
 801eb6e:	009b      	lsls	r3, r3, #2
 801eb70:	33f0      	adds	r3, #240	@ 0xf0
 801eb72:	443b      	add	r3, r7
 801eb74:	3b74      	subs	r3, #116	@ 0x74
 801eb76:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801eb7a:	601a      	str	r2, [r3, #0]
 801eb7c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eb80:	4613      	mov	r3, r2
 801eb82:	011b      	lsls	r3, r3, #4
 801eb84:	1a9b      	subs	r3, r3, r2
 801eb86:	009b      	lsls	r3, r3, #2
 801eb88:	33f0      	adds	r3, #240	@ 0xf0
 801eb8a:	443b      	add	r3, r7
 801eb8c:	3b70      	subs	r3, #112	@ 0x70
 801eb8e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801eb92:	601a      	str	r2, [r3, #0]
 801eb94:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eb98:	4613      	mov	r3, r2
 801eb9a:	011b      	lsls	r3, r3, #4
 801eb9c:	1a9b      	subs	r3, r3, r2
 801eb9e:	009b      	lsls	r3, r3, #2
 801eba0:	33f0      	adds	r3, #240	@ 0xf0
 801eba2:	443b      	add	r3, r7
 801eba4:	3b6c      	subs	r3, #108	@ 0x6c
 801eba6:	6019      	str	r1, [r3, #0]
 801eba8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ebac:	4613      	mov	r3, r2
 801ebae:	011b      	lsls	r3, r3, #4
 801ebb0:	1a9b      	subs	r3, r3, r2
 801ebb2:	009b      	lsls	r3, r3, #2
 801ebb4:	33f0      	adds	r3, #240	@ 0xf0
 801ebb6:	443b      	add	r3, r7
 801ebb8:	3b68      	subs	r3, #104	@ 0x68
 801ebba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801ebbe:	601a      	str	r2, [r3, #0]
 801ebc0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ebc4:	4613      	mov	r3, r2
 801ebc6:	011b      	lsls	r3, r3, #4
 801ebc8:	1a9b      	subs	r3, r3, r2
 801ebca:	009b      	lsls	r3, r3, #2
 801ebcc:	33f0      	adds	r3, #240	@ 0xf0
 801ebce:	443b      	add	r3, r7
 801ebd0:	3b68      	subs	r3, #104	@ 0x68
 801ebd2:	3304      	adds	r3, #4
 801ebd4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801ebd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ebdc:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 801ebe0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ebe4:	3301      	adds	r3, #1
 801ebe6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 801ebea:	2300      	movs	r3, #0
 801ebec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 801ebf0:	2300      	movs	r3, #0
 801ebf2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 801ebfc:	2300      	movs	r3, #0
 801ebfe:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 801ec02:	2300      	movs	r3, #0
 801ec04:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 801ec08:	4b0c      	ldr	r3, [pc, #48]	@ (801ec3c <lfs_dir_traverse+0x2e4>)
 801ec0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 801ec0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ec12:	1e5a      	subs	r2, r3, #1
 801ec14:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801ec18:	4613      	mov	r3, r2
 801ec1a:	011b      	lsls	r3, r3, #4
 801ec1c:	1a9b      	subs	r3, r3, r2
 801ec1e:	009b      	lsls	r3, r3, #2
 801ec20:	3328      	adds	r3, #40	@ 0x28
 801ec22:	440b      	add	r3, r1
 801ec24:	3304      	adds	r3, #4
 801ec26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 801ec2a:	e19d      	b.n	801ef68 <lfs_dir_traverse+0x610>
 801ec2c:	7ff00000 	.word	0x7ff00000
 801ec30:	08040f18 	.word	0x08040f18
 801ec34:	0804486c 	.word	0x0804486c
 801ec38:	08040dec 	.word	0x08040dec
 801ec3c:	0801e8a1 	.word	0x0801e8a1
            }
        }

popped:
 801ec40:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 801ec42:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 801ec46:	f7ff f8b9 	bl	801ddbc <lfs_tag_id>
 801ec4a:	4603      	mov	r3, r0
 801ec4c:	2b00      	cmp	r3, #0
 801ec4e:	d015      	beq.n	801ec7c <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801ec50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ec52:	4618      	mov	r0, r3
 801ec54:	f7ff f8b2 	bl	801ddbc <lfs_tag_id>
 801ec58:	4603      	mov	r3, r0
 801ec5a:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 801ec5c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 801ec60:	4293      	cmp	r3, r2
 801ec62:	f200 817c 	bhi.w	801ef5e <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801ec66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ec68:	4618      	mov	r0, r3
 801ec6a:	f7ff f8a7 	bl	801ddbc <lfs_tag_id>
 801ec6e:	4603      	mov	r3, r0
 801ec70:	461a      	mov	r2, r3
 801ec72:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 801ec76:	4293      	cmp	r3, r2
 801ec78:	f240 8171 	bls.w	801ef5e <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801ec7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ec7e:	4618      	mov	r0, r3
 801ec80:	f7ff f872 	bl	801dd68 <lfs_tag_type3>
 801ec84:	4603      	mov	r3, r0
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	f43f ae75 	beq.w	801e976 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801ec8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ec8e:	4618      	mov	r0, r3
 801ec90:	f7ff f86a 	bl	801dd68 <lfs_tag_type3>
 801ec94:	4603      	mov	r3, r0
 801ec96:	461a      	mov	r2, r3
 801ec98:	f240 1301 	movw	r3, #257	@ 0x101
 801ec9c:	429a      	cmp	r2, r3
 801ec9e:	f040 80e0 	bne.w	801ee62 <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 801eca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801eca6:	4ab1      	ldr	r2, [pc, #708]	@ (801ef6c <lfs_dir_traverse+0x614>)
 801eca8:	4293      	cmp	r3, r2
 801ecaa:	f000 815a 	beq.w	801ef62 <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 801ecae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ecb2:	4613      	mov	r3, r2
 801ecb4:	011b      	lsls	r3, r3, #4
 801ecb6:	1a9b      	subs	r3, r3, r2
 801ecb8:	009b      	lsls	r3, r3, #2
 801ecba:	33f0      	adds	r3, #240	@ 0xf0
 801ecbc:	443b      	add	r3, r7
 801ecbe:	3b98      	subs	r3, #152	@ 0x98
 801ecc0:	4618      	mov	r0, r3
 801ecc2:	233c      	movs	r3, #60	@ 0x3c
 801ecc4:	461a      	mov	r2, r3
 801ecc6:	2100      	movs	r1, #0
 801ecc8:	f017 fa0a 	bl	80360e0 <memset>
 801eccc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ecd0:	4613      	mov	r3, r2
 801ecd2:	011b      	lsls	r3, r3, #4
 801ecd4:	1a9b      	subs	r3, r3, r2
 801ecd6:	009b      	lsls	r3, r3, #2
 801ecd8:	33f0      	adds	r3, #240	@ 0xf0
 801ecda:	443b      	add	r3, r7
 801ecdc:	3b98      	subs	r3, #152	@ 0x98
 801ecde:	68ba      	ldr	r2, [r7, #8]
 801ece0:	601a      	str	r2, [r3, #0]
 801ece2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ece6:	4613      	mov	r3, r2
 801ece8:	011b      	lsls	r3, r3, #4
 801ecea:	1a9b      	subs	r3, r3, r2
 801ecec:	009b      	lsls	r3, r3, #2
 801ecee:	33f0      	adds	r3, #240	@ 0xf0
 801ecf0:	443b      	add	r3, r7
 801ecf2:	3b94      	subs	r3, #148	@ 0x94
 801ecf4:	687a      	ldr	r2, [r7, #4]
 801ecf6:	601a      	str	r2, [r3, #0]
 801ecf8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ecfc:	4613      	mov	r3, r2
 801ecfe:	011b      	lsls	r3, r3, #4
 801ed00:	1a9b      	subs	r3, r3, r2
 801ed02:	009b      	lsls	r3, r3, #2
 801ed04:	33f0      	adds	r3, #240	@ 0xf0
 801ed06:	443b      	add	r3, r7
 801ed08:	3b90      	subs	r3, #144	@ 0x90
 801ed0a:	683a      	ldr	r2, [r7, #0]
 801ed0c:	601a      	str	r2, [r3, #0]
 801ed0e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ed12:	4613      	mov	r3, r2
 801ed14:	011b      	lsls	r3, r3, #4
 801ed16:	1a9b      	subs	r3, r3, r2
 801ed18:	009b      	lsls	r3, r3, #2
 801ed1a:	33f0      	adds	r3, #240	@ 0xf0
 801ed1c:	443b      	add	r3, r7
 801ed1e:	3b8c      	subs	r3, #140	@ 0x8c
 801ed20:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801ed24:	601a      	str	r2, [r3, #0]
 801ed26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ed2a:	4613      	mov	r3, r2
 801ed2c:	011b      	lsls	r3, r3, #4
 801ed2e:	1a9b      	subs	r3, r3, r2
 801ed30:	009b      	lsls	r3, r3, #2
 801ed32:	33f0      	adds	r3, #240	@ 0xf0
 801ed34:	443b      	add	r3, r7
 801ed36:	3b88      	subs	r3, #136	@ 0x88
 801ed38:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801ed3c:	601a      	str	r2, [r3, #0]
 801ed3e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ed42:	4613      	mov	r3, r2
 801ed44:	011b      	lsls	r3, r3, #4
 801ed46:	1a9b      	subs	r3, r3, r2
 801ed48:	009b      	lsls	r3, r3, #2
 801ed4a:	33f0      	adds	r3, #240	@ 0xf0
 801ed4c:	443b      	add	r3, r7
 801ed4e:	3b84      	subs	r3, #132	@ 0x84
 801ed50:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801ed54:	601a      	str	r2, [r3, #0]
 801ed56:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ed5a:	4613      	mov	r3, r2
 801ed5c:	011b      	lsls	r3, r3, #4
 801ed5e:	1a9b      	subs	r3, r3, r2
 801ed60:	009b      	lsls	r3, r3, #2
 801ed62:	33f0      	adds	r3, #240	@ 0xf0
 801ed64:	443b      	add	r3, r7
 801ed66:	3b80      	subs	r3, #128	@ 0x80
 801ed68:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801ed6c:	601a      	str	r2, [r3, #0]
 801ed6e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ed72:	4613      	mov	r3, r2
 801ed74:	011b      	lsls	r3, r3, #4
 801ed76:	1a9b      	subs	r3, r3, r2
 801ed78:	009b      	lsls	r3, r3, #2
 801ed7a:	33f0      	adds	r3, #240	@ 0xf0
 801ed7c:	443b      	add	r3, r7
 801ed7e:	3b7c      	subs	r3, #124	@ 0x7c
 801ed80:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 801ed84:	801a      	strh	r2, [r3, #0]
 801ed86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ed8a:	4613      	mov	r3, r2
 801ed8c:	011b      	lsls	r3, r3, #4
 801ed8e:	1a9b      	subs	r3, r3, r2
 801ed90:	009b      	lsls	r3, r3, #2
 801ed92:	33f0      	adds	r3, #240	@ 0xf0
 801ed94:	443b      	add	r3, r7
 801ed96:	3b7a      	subs	r3, #122	@ 0x7a
 801ed98:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 801ed9c:	801a      	strh	r2, [r3, #0]
 801ed9e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801eda2:	4613      	mov	r3, r2
 801eda4:	011b      	lsls	r3, r3, #4
 801eda6:	1a9b      	subs	r3, r3, r2
 801eda8:	009b      	lsls	r3, r3, #2
 801edaa:	33f0      	adds	r3, #240	@ 0xf0
 801edac:	443b      	add	r3, r7
 801edae:	3b78      	subs	r3, #120	@ 0x78
 801edb0:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 801edb4:	801a      	strh	r2, [r3, #0]
 801edb6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801edba:	4613      	mov	r3, r2
 801edbc:	011b      	lsls	r3, r3, #4
 801edbe:	1a9b      	subs	r3, r3, r2
 801edc0:	009b      	lsls	r3, r3, #2
 801edc2:	33f0      	adds	r3, #240	@ 0xf0
 801edc4:	443b      	add	r3, r7
 801edc6:	3b74      	subs	r3, #116	@ 0x74
 801edc8:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801edcc:	601a      	str	r2, [r3, #0]
 801edce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801edd2:	4613      	mov	r3, r2
 801edd4:	011b      	lsls	r3, r3, #4
 801edd6:	1a9b      	subs	r3, r3, r2
 801edd8:	009b      	lsls	r3, r3, #2
 801edda:	33f0      	adds	r3, #240	@ 0xf0
 801eddc:	443b      	add	r3, r7
 801edde:	3b70      	subs	r3, #112	@ 0x70
 801ede0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801ede4:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 801ede6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801edea:	3301      	adds	r3, #1
 801edec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 801edf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801edf2:	4618      	mov	r0, r3
 801edf4:	f7fe fff2 	bl	801dddc <lfs_tag_size>
 801edf8:	4603      	mov	r3, r0
 801edfa:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 801edfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ee00:	4618      	mov	r0, r3
 801ee02:	f7fe ffdb 	bl	801ddbc <lfs_tag_id>
 801ee06:	4603      	mov	r3, r0
 801ee08:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 801ee0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ee10:	60bb      	str	r3, [r7, #8]
            off = 0;
 801ee12:	2300      	movs	r3, #0
 801ee14:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 801ee16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ee1a:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 801ee1c:	2300      	movs	r3, #0
 801ee1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 801ee22:	2300      	movs	r3, #0
 801ee24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 801ee28:	4b51      	ldr	r3, [pc, #324]	@ (801ef70 <lfs_dir_traverse+0x618>)
 801ee2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 801ee2e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801ee32:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 801ee36:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 801ee3a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 801ee3e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 801ee42:	3301      	adds	r3, #1
 801ee44:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 801ee48:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 801ee4c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 801ee50:	1ad3      	subs	r3, r2, r3
 801ee52:	b29a      	uxth	r2, r3
 801ee54:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 801ee58:	4413      	add	r3, r2
 801ee5a:	b29b      	uxth	r3, r3
 801ee5c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 801ee60:	e589      	b.n	801e976 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801ee62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ee64:	4618      	mov	r0, r3
 801ee66:	f7fe ff7f 	bl	801dd68 <lfs_tag_type3>
 801ee6a:	4603      	mov	r3, r0
 801ee6c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801ee70:	d159      	bne.n	801ef26 <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801ee72:	2300      	movs	r3, #0
 801ee74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801ee78:	e04b      	b.n	801ef12 <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 801ee7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ee7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801ee82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801ee86:	4613      	mov	r3, r2
 801ee88:	005b      	lsls	r3, r3, #1
 801ee8a:	4413      	add	r3, r2
 801ee8c:	009b      	lsls	r3, r3, #2
 801ee8e:	461a      	mov	r2, r3
 801ee90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801ee94:	4413      	add	r3, r2
 801ee96:	781b      	ldrb	r3, [r3, #0]
 801ee98:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 801ee9c:	051c      	lsls	r4, r3, #20
 801ee9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801eea0:	4618      	mov	r0, r3
 801eea2:	f7fe ff8b 	bl	801ddbc <lfs_tag_id>
 801eea6:	4603      	mov	r3, r0
 801eea8:	461a      	mov	r2, r3
 801eeaa:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 801eeae:	4413      	add	r3, r2
 801eeb0:	029b      	lsls	r3, r3, #10
 801eeb2:	ea44 0103 	orr.w	r1, r4, r3
 801eeb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801eeba:	4613      	mov	r3, r2
 801eebc:	005b      	lsls	r3, r3, #1
 801eebe:	4413      	add	r3, r2
 801eec0:	009b      	lsls	r3, r3, #2
 801eec2:	461a      	mov	r2, r3
 801eec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801eec8:	4413      	add	r3, r2
 801eeca:	689b      	ldr	r3, [r3, #8]
 801eecc:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 801eece:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801eed2:	4613      	mov	r3, r2
 801eed4:	005b      	lsls	r3, r3, #1
 801eed6:	4413      	add	r3, r2
 801eed8:	009b      	lsls	r3, r3, #2
 801eeda:	461a      	mov	r2, r3
 801eedc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801eee0:	4413      	add	r3, r2
 801eee2:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801eee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801eee8:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 801eeec:	4798      	blx	r3
 801eeee:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 801eef2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	da02      	bge.n	801ef00 <lfs_dir_traverse+0x5a8>
                    return res;
 801eefa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801eefe:	e10b      	b.n	801f118 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 801ef00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801ef04:	2b00      	cmp	r3, #0
 801ef06:	d12e      	bne.n	801ef66 <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801ef08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801ef0c:	3301      	adds	r3, #1
 801ef0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801ef12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ef14:	4618      	mov	r0, r3
 801ef16:	f7fe ff61 	bl	801dddc <lfs_tag_size>
 801ef1a:	4602      	mov	r2, r0
 801ef1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801ef20:	4293      	cmp	r3, r2
 801ef22:	d3aa      	bcc.n	801ee7a <lfs_dir_traverse+0x522>
 801ef24:	e527      	b.n	801e976 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801ef26:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 801ef2a:	029a      	lsls	r2, r3, #10
 801ef2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ef2e:	18d1      	adds	r1, r2, r3
 801ef30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801ef34:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801ef38:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 801ef3c:	4798      	blx	r3
 801ef3e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 801ef42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	da02      	bge.n	801ef50 <lfs_dir_traverse+0x5f8>
                return res;
 801ef4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801ef4e:	e0e3      	b.n	801f118 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 801ef50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	d10d      	bne.n	801ef74 <lfs_dir_traverse+0x61c>
 801ef58:	e50d      	b.n	801e976 <lfs_dir_traverse+0x1e>
                continue;
 801ef5a:	bf00      	nop
 801ef5c:	e50b      	b.n	801e976 <lfs_dir_traverse+0x1e>
            continue;
 801ef5e:	bf00      	nop
 801ef60:	e509      	b.n	801e976 <lfs_dir_traverse+0x1e>
                continue;
 801ef62:	bf00      	nop
 801ef64:	e507      	b.n	801e976 <lfs_dir_traverse+0x1e>
                    break;
 801ef66:	bf00      	nop
        {
 801ef68:	e505      	b.n	801e976 <lfs_dir_traverse+0x1e>
 801ef6a:	bf00      	nop
 801ef6c:	0801e8a1 	.word	0x0801e8a1
 801ef70:	600ffc00 	.word	0x600ffc00
                break;
 801ef74:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 801ef76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	f000 80ca 	beq.w	801f114 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 801ef80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ef84:	1e5a      	subs	r2, r3, #1
 801ef86:	4613      	mov	r3, r2
 801ef88:	011b      	lsls	r3, r3, #4
 801ef8a:	1a9b      	subs	r3, r3, r2
 801ef8c:	009b      	lsls	r3, r3, #2
 801ef8e:	33f0      	adds	r3, #240	@ 0xf0
 801ef90:	443b      	add	r3, r7
 801ef92:	3b98      	subs	r3, #152	@ 0x98
 801ef94:	681b      	ldr	r3, [r3, #0]
 801ef96:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 801ef98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801ef9c:	1e5a      	subs	r2, r3, #1
 801ef9e:	4613      	mov	r3, r2
 801efa0:	011b      	lsls	r3, r3, #4
 801efa2:	1a9b      	subs	r3, r3, r2
 801efa4:	009b      	lsls	r3, r3, #2
 801efa6:	33f0      	adds	r3, #240	@ 0xf0
 801efa8:	443b      	add	r3, r7
 801efaa:	3b94      	subs	r3, #148	@ 0x94
 801efac:	681b      	ldr	r3, [r3, #0]
 801efae:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 801efb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801efb4:	1e5a      	subs	r2, r3, #1
 801efb6:	4613      	mov	r3, r2
 801efb8:	011b      	lsls	r3, r3, #4
 801efba:	1a9b      	subs	r3, r3, r2
 801efbc:	009b      	lsls	r3, r3, #2
 801efbe:	33f0      	adds	r3, #240	@ 0xf0
 801efc0:	443b      	add	r3, r7
 801efc2:	3b90      	subs	r3, #144	@ 0x90
 801efc4:	681b      	ldr	r3, [r3, #0]
 801efc6:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 801efc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801efcc:	1e5a      	subs	r2, r3, #1
 801efce:	4613      	mov	r3, r2
 801efd0:	011b      	lsls	r3, r3, #4
 801efd2:	1a9b      	subs	r3, r3, r2
 801efd4:	009b      	lsls	r3, r3, #2
 801efd6:	33f0      	adds	r3, #240	@ 0xf0
 801efd8:	443b      	add	r3, r7
 801efda:	3b8c      	subs	r3, #140	@ 0x8c
 801efdc:	681b      	ldr	r3, [r3, #0]
 801efde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 801efe2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801efe6:	1e5a      	subs	r2, r3, #1
 801efe8:	4613      	mov	r3, r2
 801efea:	011b      	lsls	r3, r3, #4
 801efec:	1a9b      	subs	r3, r3, r2
 801efee:	009b      	lsls	r3, r3, #2
 801eff0:	33f0      	adds	r3, #240	@ 0xf0
 801eff2:	443b      	add	r3, r7
 801eff4:	3b88      	subs	r3, #136	@ 0x88
 801eff6:	681b      	ldr	r3, [r3, #0]
 801eff8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 801effc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801f000:	1e5a      	subs	r2, r3, #1
 801f002:	4613      	mov	r3, r2
 801f004:	011b      	lsls	r3, r3, #4
 801f006:	1a9b      	subs	r3, r3, r2
 801f008:	009b      	lsls	r3, r3, #2
 801f00a:	33f0      	adds	r3, #240	@ 0xf0
 801f00c:	443b      	add	r3, r7
 801f00e:	3b84      	subs	r3, #132	@ 0x84
 801f010:	681b      	ldr	r3, [r3, #0]
 801f012:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 801f016:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801f01a:	1e5a      	subs	r2, r3, #1
 801f01c:	4613      	mov	r3, r2
 801f01e:	011b      	lsls	r3, r3, #4
 801f020:	1a9b      	subs	r3, r3, r2
 801f022:	009b      	lsls	r3, r3, #2
 801f024:	33f0      	adds	r3, #240	@ 0xf0
 801f026:	443b      	add	r3, r7
 801f028:	3b80      	subs	r3, #128	@ 0x80
 801f02a:	681b      	ldr	r3, [r3, #0]
 801f02c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 801f030:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801f034:	1e5a      	subs	r2, r3, #1
 801f036:	4613      	mov	r3, r2
 801f038:	011b      	lsls	r3, r3, #4
 801f03a:	1a9b      	subs	r3, r3, r2
 801f03c:	009b      	lsls	r3, r3, #2
 801f03e:	33f0      	adds	r3, #240	@ 0xf0
 801f040:	443b      	add	r3, r7
 801f042:	3b7c      	subs	r3, #124	@ 0x7c
 801f044:	881b      	ldrh	r3, [r3, #0]
 801f046:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 801f04a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801f04e:	1e5a      	subs	r2, r3, #1
 801f050:	4613      	mov	r3, r2
 801f052:	011b      	lsls	r3, r3, #4
 801f054:	1a9b      	subs	r3, r3, r2
 801f056:	009b      	lsls	r3, r3, #2
 801f058:	33f0      	adds	r3, #240	@ 0xf0
 801f05a:	443b      	add	r3, r7
 801f05c:	3b7a      	subs	r3, #122	@ 0x7a
 801f05e:	881b      	ldrh	r3, [r3, #0]
 801f060:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 801f064:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801f068:	1e5a      	subs	r2, r3, #1
 801f06a:	4613      	mov	r3, r2
 801f06c:	011b      	lsls	r3, r3, #4
 801f06e:	1a9b      	subs	r3, r3, r2
 801f070:	009b      	lsls	r3, r3, #2
 801f072:	33f0      	adds	r3, #240	@ 0xf0
 801f074:	443b      	add	r3, r7
 801f076:	3b78      	subs	r3, #120	@ 0x78
 801f078:	881b      	ldrh	r3, [r3, #0]
 801f07a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 801f07e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801f082:	1e5a      	subs	r2, r3, #1
 801f084:	4613      	mov	r3, r2
 801f086:	011b      	lsls	r3, r3, #4
 801f088:	1a9b      	subs	r3, r3, r2
 801f08a:	009b      	lsls	r3, r3, #2
 801f08c:	33f0      	adds	r3, #240	@ 0xf0
 801f08e:	443b      	add	r3, r7
 801f090:	3b74      	subs	r3, #116	@ 0x74
 801f092:	681b      	ldr	r3, [r3, #0]
 801f094:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 801f098:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801f09c:	1e5a      	subs	r2, r3, #1
 801f09e:	4613      	mov	r3, r2
 801f0a0:	011b      	lsls	r3, r3, #4
 801f0a2:	1a9b      	subs	r3, r3, r2
 801f0a4:	009b      	lsls	r3, r3, #2
 801f0a6:	33f0      	adds	r3, #240	@ 0xf0
 801f0a8:	443b      	add	r3, r7
 801f0aa:	3b70      	subs	r3, #112	@ 0x70
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 801f0b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801f0b6:	1e5a      	subs	r2, r3, #1
 801f0b8:	4613      	mov	r3, r2
 801f0ba:	011b      	lsls	r3, r3, #4
 801f0bc:	1a9b      	subs	r3, r3, r2
 801f0be:	009b      	lsls	r3, r3, #2
 801f0c0:	33f0      	adds	r3, #240	@ 0xf0
 801f0c2:	443b      	add	r3, r7
 801f0c4:	3b6c      	subs	r3, #108	@ 0x6c
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 801f0ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801f0ce:	1e5a      	subs	r2, r3, #1
 801f0d0:	4613      	mov	r3, r2
 801f0d2:	011b      	lsls	r3, r3, #4
 801f0d4:	1a9b      	subs	r3, r3, r2
 801f0d6:	009b      	lsls	r3, r3, #2
 801f0d8:	33f0      	adds	r3, #240	@ 0xf0
 801f0da:	443b      	add	r3, r7
 801f0dc:	3b68      	subs	r3, #104	@ 0x68
 801f0de:	681b      	ldr	r3, [r3, #0]
 801f0e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 801f0e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801f0e8:	1e5a      	subs	r2, r3, #1
 801f0ea:	4613      	mov	r3, r2
 801f0ec:	011b      	lsls	r3, r3, #4
 801f0ee:	1a9b      	subs	r3, r3, r2
 801f0f0:	009b      	lsls	r3, r3, #2
 801f0f2:	33f0      	adds	r3, #240	@ 0xf0
 801f0f4:	443b      	add	r3, r7
 801f0f6:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 801f0fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801f0fe:	3204      	adds	r2, #4
 801f100:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f104:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 801f108:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801f10c:	3b01      	subs	r3, #1
 801f10e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 801f112:	e596      	b.n	801ec42 <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 801f114:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 801f118:	4618      	mov	r0, r3
 801f11a:	37f4      	adds	r7, #244	@ 0xf4
 801f11c:	46bd      	mov	sp, r7
 801f11e:	bd90      	pop	{r4, r7, pc}

0801f120 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801f120:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f122:	b0a5      	sub	sp, #148	@ 0x94
 801f124:	af04      	add	r7, sp, #16
 801f126:	6178      	str	r0, [r7, #20]
 801f128:	6139      	str	r1, [r7, #16]
 801f12a:	60fa      	str	r2, [r7, #12]
 801f12c:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 801f12e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f132:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 801f134:	697b      	ldr	r3, [r7, #20]
 801f136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f138:	2b00      	cmp	r3, #0
 801f13a:	d00f      	beq.n	801f15c <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801f13c:	68fb      	ldr	r3, [r7, #12]
 801f13e:	681a      	ldr	r2, [r3, #0]
 801f140:	697b      	ldr	r3, [r7, #20]
 801f142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f144:	429a      	cmp	r2, r3
 801f146:	d206      	bcs.n	801f156 <lfs_dir_fetchmatch+0x36>
 801f148:	68fb      	ldr	r3, [r7, #12]
 801f14a:	3304      	adds	r3, #4
 801f14c:	681a      	ldr	r2, [r3, #0]
 801f14e:	697b      	ldr	r3, [r7, #20]
 801f150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f152:	429a      	cmp	r2, r3
 801f154:	d302      	bcc.n	801f15c <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 801f156:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801f15a:	e3a4      	b.n	801f8a6 <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 801f15c:	2300      	movs	r3, #0
 801f15e:	647b      	str	r3, [r7, #68]	@ 0x44
 801f160:	2300      	movs	r3, #0
 801f162:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 801f164:	2300      	movs	r3, #0
 801f166:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 801f168:	2300      	movs	r3, #0
 801f16a:	677b      	str	r3, [r7, #116]	@ 0x74
 801f16c:	e05a      	b.n	801f224 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 801f16e:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801f170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801f172:	009b      	lsls	r3, r3, #2
 801f174:	68fa      	ldr	r2, [r7, #12]
 801f176:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 801f178:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801f17a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 801f17e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801f180:	0092      	lsls	r2, r2, #2
 801f182:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 801f184:	2104      	movs	r1, #4
 801f186:	9103      	str	r1, [sp, #12]
 801f188:	9202      	str	r2, [sp, #8]
 801f18a:	2200      	movs	r2, #0
 801f18c:	9201      	str	r2, [sp, #4]
 801f18e:	9300      	str	r3, [sp, #0]
 801f190:	2304      	movs	r3, #4
 801f192:	4602      	mov	r2, r0
 801f194:	2100      	movs	r1, #0
 801f196:	6978      	ldr	r0, [r7, #20]
 801f198:	f7fe f978 	bl	801d48c <lfs_bd_read>
 801f19c:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 801f19e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801f1a0:	009b      	lsls	r3, r3, #2
 801f1a2:	3378      	adds	r3, #120	@ 0x78
 801f1a4:	f107 0208 	add.w	r2, r7, #8
 801f1a8:	4413      	add	r3, r2
 801f1aa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801f1ae:	4618      	mov	r0, r3
 801f1b0:	f7fe f901 	bl	801d3b6 <lfs_fromle32>
 801f1b4:	4602      	mov	r2, r0
 801f1b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801f1b8:	009b      	lsls	r3, r3, #2
 801f1ba:	3378      	adds	r3, #120	@ 0x78
 801f1bc:	f107 0108 	add.w	r1, r7, #8
 801f1c0:	440b      	add	r3, r1
 801f1c2:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 801f1c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	d005      	beq.n	801f1d8 <lfs_dir_fetchmatch+0xb8>
 801f1cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f1ce:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f1d2:	d001      	beq.n	801f1d8 <lfs_dir_fetchmatch+0xb8>
            return err;
 801f1d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f1d6:	e366      	b.n	801f8a6 <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 801f1d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f1da:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f1de:	d01e      	beq.n	801f21e <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801f1e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801f1e2:	009b      	lsls	r3, r3, #2
 801f1e4:	3378      	adds	r3, #120	@ 0x78
 801f1e6:	f107 0208 	add.w	r2, r7, #8
 801f1ea:	4413      	add	r3, r2
 801f1ec:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 801f1f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801f1f2:	3301      	adds	r3, #1
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	f003 0301 	and.w	r3, r3, #1
 801f1fa:	bfb8      	it	lt
 801f1fc:	425b      	neglt	r3, r3
 801f1fe:	009b      	lsls	r3, r3, #2
 801f200:	3378      	adds	r3, #120	@ 0x78
 801f202:	f107 0108 	add.w	r1, r7, #8
 801f206:	440b      	add	r3, r1
 801f208:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801f20c:	4619      	mov	r1, r3
 801f20e:	4610      	mov	r0, r2
 801f210:	f7fe f8c3 	bl	801d39a <lfs_scmp>
 801f214:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 801f216:	2b00      	cmp	r3, #0
 801f218:	dd01      	ble.n	801f21e <lfs_dir_fetchmatch+0xfe>
            r = i;
 801f21a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801f21c:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 801f21e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801f220:	3301      	adds	r3, #1
 801f222:	677b      	str	r3, [r7, #116]	@ 0x74
 801f224:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801f226:	2b01      	cmp	r3, #1
 801f228:	dda1      	ble.n	801f16e <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 801f22a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f22c:	2b00      	cmp	r3, #0
 801f22e:	f003 0301 	and.w	r3, r3, #1
 801f232:	bfb8      	it	lt
 801f234:	425b      	neglt	r3, r3
 801f236:	009b      	lsls	r3, r3, #2
 801f238:	68fa      	ldr	r2, [r7, #12]
 801f23a:	4413      	add	r3, r2
 801f23c:	681a      	ldr	r2, [r3, #0]
 801f23e:	693b      	ldr	r3, [r7, #16]
 801f240:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 801f242:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f244:	3301      	adds	r3, #1
 801f246:	2b00      	cmp	r3, #0
 801f248:	f003 0301 	and.w	r3, r3, #1
 801f24c:	bfb8      	it	lt
 801f24e:	425b      	neglt	r3, r3
 801f250:	009b      	lsls	r3, r3, #2
 801f252:	68fa      	ldr	r2, [r7, #12]
 801f254:	4413      	add	r3, r2
 801f256:	681a      	ldr	r2, [r3, #0]
 801f258:	693b      	ldr	r3, [r7, #16]
 801f25a:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 801f25c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f25e:	2b00      	cmp	r3, #0
 801f260:	f003 0301 	and.w	r3, r3, #1
 801f264:	bfb8      	it	lt
 801f266:	425b      	neglt	r3, r3
 801f268:	009b      	lsls	r3, r3, #2
 801f26a:	3378      	adds	r3, #120	@ 0x78
 801f26c:	f107 0208 	add.w	r2, r7, #8
 801f270:	4413      	add	r3, r2
 801f272:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 801f276:	693b      	ldr	r3, [r7, #16]
 801f278:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 801f27a:	693b      	ldr	r3, [r7, #16]
 801f27c:	2200      	movs	r2, #0
 801f27e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 801f280:	2300      	movs	r3, #0
 801f282:	673b      	str	r3, [r7, #112]	@ 0x70
 801f284:	e2fb      	b.n	801f87e <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 801f286:	2300      	movs	r3, #0
 801f288:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 801f28a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f28e:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 801f290:	2300      	movs	r3, #0
 801f292:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801f296:	4aa9      	ldr	r2, [pc, #676]	@ (801f53c <lfs_dir_fetchmatch+0x41c>)
 801f298:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801f29c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f2a0:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 801f2a4:	2300      	movs	r3, #0
 801f2a6:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 801f2aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f2ac:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 801f2ae:	2300      	movs	r3, #0
 801f2b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 801f2b4:	2300      	movs	r3, #0
 801f2b6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 801f2ba:	693b      	ldr	r3, [r7, #16]
 801f2bc:	689b      	ldr	r3, [r3, #8]
 801f2be:	4618      	mov	r0, r3
 801f2c0:	f7fe f884 	bl	801d3cc <lfs_tole32>
 801f2c4:	4602      	mov	r2, r0
 801f2c6:	693b      	ldr	r3, [r7, #16]
 801f2c8:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801f2ca:	693b      	ldr	r3, [r7, #16]
 801f2cc:	3308      	adds	r3, #8
 801f2ce:	2204      	movs	r2, #4
 801f2d0:	4619      	mov	r1, r3
 801f2d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f2d6:	f005 fef5 	bl	80250c4 <lfs_crc>
 801f2da:	4603      	mov	r3, r0
 801f2dc:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 801f2de:	693b      	ldr	r3, [r7, #16]
 801f2e0:	689b      	ldr	r3, [r3, #8]
 801f2e2:	4618      	mov	r0, r3
 801f2e4:	f7fe f867 	bl	801d3b6 <lfs_fromle32>
 801f2e8:	4602      	mov	r2, r0
 801f2ea:	693b      	ldr	r3, [r7, #16]
 801f2ec:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 801f2ee:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801f2f0:	f7fe fd81 	bl	801ddf6 <lfs_tag_dsize>
 801f2f4:	4602      	mov	r2, r0
 801f2f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f2f8:	4413      	add	r3, r2
 801f2fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 801f2fc:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801f2fe:	697b      	ldr	r3, [r7, #20]
 801f300:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f302:	6a58      	ldr	r0, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801f304:	693b      	ldr	r3, [r7, #16]
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	2204      	movs	r2, #4
 801f30a:	9203      	str	r2, [sp, #12]
 801f30c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801f310:	9202      	str	r2, [sp, #8]
 801f312:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801f314:	9201      	str	r2, [sp, #4]
 801f316:	9300      	str	r3, [sp, #0]
 801f318:	4603      	mov	r3, r0
 801f31a:	460a      	mov	r2, r1
 801f31c:	2100      	movs	r1, #0
 801f31e:	6978      	ldr	r0, [r7, #20]
 801f320:	f7fe f8b4 	bl	801d48c <lfs_bd_read>
 801f324:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 801f326:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d006      	beq.n	801f33a <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 801f32c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f32e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f332:	f000 81d6 	beq.w	801f6e2 <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 801f336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f338:	e2b5      	b.n	801f8a6 <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 801f33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f33c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 801f340:	2204      	movs	r2, #4
 801f342:	4618      	mov	r0, r3
 801f344:	f005 febe 	bl	80250c4 <lfs_crc>
 801f348:	4603      	mov	r3, r0
 801f34a:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 801f34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f34e:	4618      	mov	r0, r3
 801f350:	f7fe f848 	bl	801d3e4 <lfs_frombe32>
 801f354:	4602      	mov	r2, r0
 801f356:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f358:	4053      	eors	r3, r2
 801f35a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 801f35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f35e:	4618      	mov	r0, r3
 801f360:	f7fe fcc1 	bl	801dce6 <lfs_tag_isvalid>
 801f364:	4603      	mov	r3, r0
 801f366:	f083 0301 	eor.w	r3, r3, #1
 801f36a:	b2db      	uxtb	r3, r3
 801f36c:	2b00      	cmp	r3, #0
 801f36e:	d00b      	beq.n	801f388 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801f370:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801f372:	f7fe fce9 	bl	801dd48 <lfs_tag_type2>
 801f376:	4603      	mov	r3, r0
 801f378:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801f37c:	bf0c      	ite	eq
 801f37e:	2301      	moveq	r3, #1
 801f380:	2300      	movne	r3, #0
 801f382:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 801f386:	e1bb      	b.n	801f700 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801f388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f38a:	4618      	mov	r0, r3
 801f38c:	f7fe fd33 	bl	801ddf6 <lfs_tag_dsize>
 801f390:	4602      	mov	r2, r0
 801f392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f394:	441a      	add	r2, r3
 801f396:	697b      	ldr	r3, [r7, #20]
 801f398:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f39c:	429a      	cmp	r2, r3
 801f39e:	f200 81a2 	bhi.w	801f6e6 <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 801f3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f3a4:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801f3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f3a8:	4618      	mov	r0, r3
 801f3aa:	f7fe fccd 	bl	801dd48 <lfs_tag_type2>
 801f3ae:	4603      	mov	r3, r0
 801f3b0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801f3b4:	d15e      	bne.n	801f474 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 801f3b6:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801f3b8:	697b      	ldr	r3, [r7, #20]
 801f3ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f3bc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801f3be:	693b      	ldr	r3, [r7, #16]
 801f3c0:	681b      	ldr	r3, [r3, #0]
 801f3c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801f3c4:	3204      	adds	r2, #4
 801f3c6:	2104      	movs	r1, #4
 801f3c8:	9103      	str	r1, [sp, #12]
 801f3ca:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801f3ce:	9102      	str	r1, [sp, #8]
 801f3d0:	9201      	str	r2, [sp, #4]
 801f3d2:	9300      	str	r3, [sp, #0]
 801f3d4:	4623      	mov	r3, r4
 801f3d6:	4602      	mov	r2, r0
 801f3d8:	2100      	movs	r1, #0
 801f3da:	6978      	ldr	r0, [r7, #20]
 801f3dc:	f7fe f856 	bl	801d48c <lfs_bd_read>
 801f3e0:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 801f3e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	d006      	beq.n	801f3f6 <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 801f3e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f3ea:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f3ee:	f000 817c 	beq.w	801f6ea <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 801f3f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 801f3f4:	e257      	b.n	801f8a6 <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 801f3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3f8:	4618      	mov	r0, r3
 801f3fa:	f7fd ffdc 	bl	801d3b6 <lfs_fromle32>
 801f3fe:	4603      	mov	r3, r0
 801f400:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 801f402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f406:	429a      	cmp	r2, r3
 801f408:	f040 8171 	bne.w	801f6ee <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801f40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f40e:	4618      	mov	r0, r3
 801f410:	f7fe fcba 	bl	801dd88 <lfs_tag_chunk>
 801f414:	4603      	mov	r3, r0
 801f416:	07db      	lsls	r3, r3, #31
 801f418:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801f41a:	4053      	eors	r3, r2
 801f41c:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801f41e:	697b      	ldr	r3, [r7, #20]
 801f420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f422:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801f426:	2204      	movs	r2, #4
 801f428:	4618      	mov	r0, r3
 801f42a:	f005 fe4b 	bl	80250c4 <lfs_crc>
 801f42e:	4602      	mov	r2, r0
 801f430:	697b      	ldr	r3, [r7, #20]
 801f432:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 801f434:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f436:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 801f438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f43a:	4618      	mov	r0, r3
 801f43c:	f7fe fcdb 	bl	801ddf6 <lfs_tag_dsize>
 801f440:	4602      	mov	r2, r0
 801f442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f444:	441a      	add	r2, r3
 801f446:	693b      	ldr	r3, [r7, #16]
 801f448:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 801f44a:	693b      	ldr	r3, [r7, #16]
 801f44c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801f44e:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 801f450:	693b      	ldr	r3, [r7, #16]
 801f452:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 801f456:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 801f458:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801f45a:	693b      	ldr	r3, [r7, #16]
 801f45c:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 801f45e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801f460:	693b      	ldr	r3, [r7, #16]
 801f462:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 801f464:	693b      	ldr	r3, [r7, #16]
 801f466:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 801f46a:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 801f46c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f470:	633b      	str	r3, [r7, #48]	@ 0x30
 801f472:	e73c      	b.n	801f2ee <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 801f474:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801f476:	697b      	ldr	r3, [r7, #20]
 801f478:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f47c:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 801f47e:	693b      	ldr	r3, [r7, #16]
 801f480:	681c      	ldr	r4, [r3, #0]
 801f482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f484:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 801f486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f488:	4618      	mov	r0, r3
 801f48a:	f7fe fcb4 	bl	801ddf6 <lfs_tag_dsize>
 801f48e:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 801f490:	3b04      	subs	r3, #4
 801f492:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f496:	9203      	str	r2, [sp, #12]
 801f498:	9302      	str	r3, [sp, #8]
 801f49a:	9501      	str	r5, [sp, #4]
 801f49c:	9400      	str	r4, [sp, #0]
 801f49e:	687b      	ldr	r3, [r7, #4]
 801f4a0:	4632      	mov	r2, r6
 801f4a2:	2100      	movs	r1, #0
 801f4a4:	6978      	ldr	r0, [r7, #20]
 801f4a6:	f7fe f98e 	bl	801d7c6 <lfs_bd_crc>
 801f4aa:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 801f4ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f4ae:	2b00      	cmp	r3, #0
 801f4b0:	d006      	beq.n	801f4c0 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 801f4b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f4b4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f4b8:	f000 811b 	beq.w	801f6f2 <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 801f4bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f4be:	e1f2      	b.n	801f8a6 <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801f4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4c2:	4618      	mov	r0, r3
 801f4c4:	f7fe fc30 	bl	801dd28 <lfs_tag_type1>
 801f4c8:	4603      	mov	r3, r0
 801f4ca:	2b00      	cmp	r3, #0
 801f4cc:	d113      	bne.n	801f4f6 <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 801f4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4d0:	4618      	mov	r0, r3
 801f4d2:	f7fe fc73 	bl	801ddbc <lfs_tag_id>
 801f4d6:	4603      	mov	r3, r0
 801f4d8:	461a      	mov	r2, r3
 801f4da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 801f4de:	4293      	cmp	r3, r2
 801f4e0:	f200 80b6 	bhi.w	801f650 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 801f4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4e6:	4618      	mov	r0, r3
 801f4e8:	f7fe fc68 	bl	801ddbc <lfs_tag_id>
 801f4ec:	4603      	mov	r3, r0
 801f4ee:	3301      	adds	r3, #1
 801f4f0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 801f4f4:	e0ac      	b.n	801f650 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801f4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4f8:	4618      	mov	r0, r3
 801f4fa:	f7fe fc15 	bl	801dd28 <lfs_tag_type1>
 801f4fe:	4603      	mov	r3, r0
 801f500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801f504:	d13a      	bne.n	801f57c <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 801f506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f508:	4618      	mov	r0, r3
 801f50a:	f7fe fc4a 	bl	801dda2 <lfs_tag_splice>
 801f50e:	4603      	mov	r3, r0
 801f510:	b29a      	uxth	r2, r3
 801f512:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 801f516:	4413      	add	r3, r2
 801f518:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801f51c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801f51e:	4b08      	ldr	r3, [pc, #32]	@ (801f540 <lfs_dir_fetchmatch+0x420>)
 801f520:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801f522:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f526:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f52a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f52c:	4293      	cmp	r3, r2
 801f52e:	d109      	bne.n	801f544 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 801f530:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f532:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801f536:	663b      	str	r3, [r7, #96]	@ 0x60
 801f538:	e08a      	b.n	801f650 <lfs_dir_fetchmatch+0x530>
 801f53a:	bf00      	nop
 801f53c:	08040f58 	.word	0x08040f58
 801f540:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 801f544:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f546:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f54a:	f000 8081 	beq.w	801f650 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 801f54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f550:	4618      	mov	r0, r3
 801f552:	f7fe fc33 	bl	801ddbc <lfs_tag_id>
 801f556:	4603      	mov	r3, r0
 801f558:	461c      	mov	r4, r3
 801f55a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f55c:	4618      	mov	r0, r3
 801f55e:	f7fe fc2d 	bl	801ddbc <lfs_tag_id>
 801f562:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 801f564:	429c      	cmp	r4, r3
 801f566:	d873      	bhi.n	801f650 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801f568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f56a:	4618      	mov	r0, r3
 801f56c:	f7fe fc19 	bl	801dda2 <lfs_tag_splice>
 801f570:	4603      	mov	r3, r0
 801f572:	029a      	lsls	r2, r3, #10
 801f574:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f576:	4413      	add	r3, r2
 801f578:	663b      	str	r3, [r7, #96]	@ 0x60
 801f57a:	e069      	b.n	801f650 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801f57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f57e:	4618      	mov	r0, r3
 801f580:	f7fe fbd2 	bl	801dd28 <lfs_tag_type1>
 801f584:	4603      	mov	r3, r0
 801f586:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801f58a:	d132      	bne.n	801f5f2 <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801f58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f58e:	4618      	mov	r0, r3
 801f590:	f7fe fbfa 	bl	801dd88 <lfs_tag_chunk>
 801f594:	4603      	mov	r3, r0
 801f596:	f003 0301 	and.w	r3, r3, #1
 801f59a:	2b00      	cmp	r3, #0
 801f59c:	bf14      	ite	ne
 801f59e:	2301      	movne	r3, #1
 801f5a0:	2300      	moveq	r3, #0
 801f5a2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 801f5a6:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801f5a8:	697b      	ldr	r3, [r7, #20]
 801f5aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f5ac:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801f5ae:	693b      	ldr	r3, [r7, #16]
 801f5b0:	681b      	ldr	r3, [r3, #0]
 801f5b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801f5b4:	3204      	adds	r2, #4
 801f5b6:	2108      	movs	r1, #8
 801f5b8:	9103      	str	r1, [sp, #12]
 801f5ba:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801f5be:	9102      	str	r1, [sp, #8]
 801f5c0:	9201      	str	r2, [sp, #4]
 801f5c2:	9300      	str	r3, [sp, #0]
 801f5c4:	4623      	mov	r3, r4
 801f5c6:	4602      	mov	r2, r0
 801f5c8:	2100      	movs	r1, #0
 801f5ca:	6978      	ldr	r0, [r7, #20]
 801f5cc:	f7fd ff5e 	bl	801d48c <lfs_bd_read>
 801f5d0:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 801f5d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	d006      	beq.n	801f5e6 <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 801f5d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f5da:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f5de:	f000 808a 	beq.w	801f6f6 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 801f5e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f5e4:	e15f      	b.n	801f8a6 <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 801f5e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801f5ea:	4618      	mov	r0, r3
 801f5ec:	f7fe fb47 	bl	801dc7e <lfs_pair_fromle32>
 801f5f0:	e02e      	b.n	801f650 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801f5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f5f4:	4618      	mov	r0, r3
 801f5f6:	f7fe fbb7 	bl	801dd68 <lfs_tag_type3>
 801f5fa:	4603      	mov	r3, r0
 801f5fc:	461a      	mov	r2, r3
 801f5fe:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801f602:	429a      	cmp	r2, r3
 801f604:	d124      	bne.n	801f650 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 801f606:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801f608:	697b      	ldr	r3, [r7, #20]
 801f60a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f60c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801f60e:	693b      	ldr	r3, [r7, #16]
 801f610:	681b      	ldr	r3, [r3, #0]
 801f612:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801f614:	3204      	adds	r2, #4
 801f616:	2108      	movs	r1, #8
 801f618:	9103      	str	r1, [sp, #12]
 801f61a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801f61e:	9102      	str	r1, [sp, #8]
 801f620:	9201      	str	r2, [sp, #4]
 801f622:	9300      	str	r3, [sp, #0]
 801f624:	4623      	mov	r3, r4
 801f626:	4602      	mov	r2, r0
 801f628:	2100      	movs	r1, #0
 801f62a:	6978      	ldr	r0, [r7, #20]
 801f62c:	f7fd ff2e 	bl	801d48c <lfs_bd_read>
 801f630:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 801f632:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f634:	2b00      	cmp	r3, #0
 801f636:	d003      	beq.n	801f640 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 801f638:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f63a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f63e:	d05c      	beq.n	801f6fa <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 801f640:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f644:	4618      	mov	r0, r3
 801f646:	f7fe fcd5 	bl	801dff4 <lfs_fcrc_fromle32>
                hasfcrc = true;
 801f64a:	2301      	movs	r3, #1
 801f64c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 801f650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f652:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801f656:	405a      	eors	r2, r3
 801f658:	68bb      	ldr	r3, [r7, #8]
 801f65a:	4013      	ands	r3, r2
 801f65c:	2b00      	cmp	r3, #0
 801f65e:	f47f ae46 	bne.w	801f2ee <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 801f662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 801f664:	693b      	ldr	r3, [r7, #16]
 801f666:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801f668:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 801f66a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f66c:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 801f66e:	627b      	str	r3, [r7, #36]	@ 0x24
 801f670:	f107 0220 	add.w	r2, r7, #32
 801f674:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801f678:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 801f67c:	4798      	blx	r3
 801f67e:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 801f680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f682:	2b00      	cmp	r3, #0
 801f684:	da05      	bge.n	801f692 <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 801f686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f688:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f68c:	d037      	beq.n	801f6fe <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 801f68e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 801f690:	e109      	b.n	801f8a6 <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 801f692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f694:	2b00      	cmp	r3, #0
 801f696:	d102      	bne.n	801f69e <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 801f698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f69a:	663b      	str	r3, [r7, #96]	@ 0x60
 801f69c:	e627      	b.n	801f2ee <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801f69e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f6a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f6a2:	405a      	eors	r2, r3
 801f6a4:	4b82      	ldr	r3, [pc, #520]	@ (801f8b0 <lfs_dir_fetchmatch+0x790>)
 801f6a6:	4013      	ands	r3, r2
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d103      	bne.n	801f6b4 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 801f6ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f6b0:	663b      	str	r3, [r7, #96]	@ 0x60
 801f6b2:	e61c      	b.n	801f2ee <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 801f6b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f6b6:	2b02      	cmp	r3, #2
 801f6b8:	f47f ae19 	bne.w	801f2ee <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 801f6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f6be:	4618      	mov	r0, r3
 801f6c0:	f7fe fb7c 	bl	801ddbc <lfs_tag_id>
 801f6c4:	4603      	mov	r3, r0
 801f6c6:	461c      	mov	r4, r3
 801f6c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801f6ca:	4618      	mov	r0, r3
 801f6cc:	f7fe fb76 	bl	801ddbc <lfs_tag_id>
 801f6d0:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 801f6d2:	429c      	cmp	r4, r3
 801f6d4:	f63f ae0b 	bhi.w	801f2ee <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 801f6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f6da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801f6de:	663b      	str	r3, [r7, #96]	@ 0x60
 801f6e0:	e605      	b.n	801f2ee <lfs_dir_fetchmatch+0x1ce>
                    break;
 801f6e2:	bf00      	nop
 801f6e4:	e00c      	b.n	801f700 <lfs_dir_fetchmatch+0x5e0>
                break;
 801f6e6:	bf00      	nop
 801f6e8:	e00a      	b.n	801f700 <lfs_dir_fetchmatch+0x5e0>
                        break;
 801f6ea:	bf00      	nop
 801f6ec:	e008      	b.n	801f700 <lfs_dir_fetchmatch+0x5e0>
                    break;
 801f6ee:	bf00      	nop
 801f6f0:	e006      	b.n	801f700 <lfs_dir_fetchmatch+0x5e0>
                    break;
 801f6f2:	bf00      	nop
 801f6f4:	e004      	b.n	801f700 <lfs_dir_fetchmatch+0x5e0>
                        break;
 801f6f6:	bf00      	nop
 801f6f8:	e002      	b.n	801f700 <lfs_dir_fetchmatch+0x5e0>
                        break;
 801f6fa:	bf00      	nop
 801f6fc:	e000      	b.n	801f700 <lfs_dir_fetchmatch+0x5e0>
                        break;
 801f6fe:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 801f700:	693b      	ldr	r3, [r7, #16]
 801f702:	68db      	ldr	r3, [r3, #12]
 801f704:	2b00      	cmp	r3, #0
 801f706:	d000      	beq.n	801f70a <lfs_dir_fetchmatch+0x5ea>
 801f708:	e017      	b.n	801f73a <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 801f70a:	693b      	ldr	r3, [r7, #16]
 801f70c:	4618      	mov	r0, r3
 801f70e:	f7fe fa2f 	bl	801db70 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 801f712:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f714:	3301      	adds	r3, #1
 801f716:	2b00      	cmp	r3, #0
 801f718:	f003 0301 	and.w	r3, r3, #1
 801f71c:	bfb8      	it	lt
 801f71e:	425b      	neglt	r3, r3
 801f720:	009b      	lsls	r3, r3, #2
 801f722:	3378      	adds	r3, #120	@ 0x78
 801f724:	f107 0208 	add.w	r2, r7, #8
 801f728:	4413      	add	r3, r2
 801f72a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 801f72e:	693b      	ldr	r3, [r7, #16]
 801f730:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 801f732:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f734:	3301      	adds	r3, #1
 801f736:	673b      	str	r3, [r7, #112]	@ 0x70
 801f738:	e0a1      	b.n	801f87e <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 801f73a:	693b      	ldr	r3, [r7, #16]
 801f73c:	2200      	movs	r2, #0
 801f73e:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801f740:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801f744:	2b00      	cmp	r3, #0
 801f746:	d03a      	beq.n	801f7be <lfs_dir_fetchmatch+0x69e>
 801f748:	693b      	ldr	r3, [r7, #16]
 801f74a:	68db      	ldr	r3, [r3, #12]
 801f74c:	697a      	ldr	r2, [r7, #20]
 801f74e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801f750:	6a12      	ldr	r2, [r2, #32]
 801f752:	fbb3 f1f2 	udiv	r1, r3, r2
 801f756:	fb01 f202 	mul.w	r2, r1, r2
 801f75a:	1a9b      	subs	r3, r3, r2
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	d12e      	bne.n	801f7be <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 801f760:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 801f764:	2b00      	cmp	r3, #0
 801f766:	d02a      	beq.n	801f7be <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 801f768:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f76c:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 801f76e:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801f770:	697b      	ldr	r3, [r7, #20]
 801f772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f774:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801f776:	693b      	ldr	r3, [r7, #16]
 801f778:	681b      	ldr	r3, [r3, #0]
 801f77a:	693a      	ldr	r2, [r7, #16]
 801f77c:	68d2      	ldr	r2, [r2, #12]
 801f77e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801f780:	f107 001c 	add.w	r0, r7, #28
 801f784:	9003      	str	r0, [sp, #12]
 801f786:	9102      	str	r1, [sp, #8]
 801f788:	9201      	str	r2, [sp, #4]
 801f78a:	9300      	str	r3, [sp, #0]
 801f78c:	462b      	mov	r3, r5
 801f78e:	4622      	mov	r2, r4
 801f790:	2100      	movs	r1, #0
 801f792:	6978      	ldr	r0, [r7, #20]
 801f794:	f7fe f817 	bl	801d7c6 <lfs_bd_crc>
 801f798:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 801f79a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	d005      	beq.n	801f7ac <lfs_dir_fetchmatch+0x68c>
 801f7a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f7a2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801f7a6:	d001      	beq.n	801f7ac <lfs_dir_fetchmatch+0x68c>
                    return err;
 801f7a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f7aa:	e07c      	b.n	801f8a6 <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 801f7ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801f7ae:	69fb      	ldr	r3, [r7, #28]
 801f7b0:	429a      	cmp	r2, r3
 801f7b2:	bf0c      	ite	eq
 801f7b4:	2301      	moveq	r3, #1
 801f7b6:	2300      	movne	r3, #0
 801f7b8:	b2da      	uxtb	r2, r3
 801f7ba:	693b      	ldr	r3, [r7, #16]
 801f7bc:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801f7be:	697b      	ldr	r3, [r7, #20]
 801f7c0:	333c      	adds	r3, #60	@ 0x3c
 801f7c2:	693a      	ldr	r2, [r7, #16]
 801f7c4:	4611      	mov	r1, r2
 801f7c6:	4618      	mov	r0, r3
 801f7c8:	f7fe fbb4 	bl	801df34 <lfs_gstate_hasmovehere>
 801f7cc:	4603      	mov	r3, r0
 801f7ce:	2b00      	cmp	r3, #0
 801f7d0:	d028      	beq.n	801f824 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801f7d2:	697b      	ldr	r3, [r7, #20]
 801f7d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f7d6:	4618      	mov	r0, r3
 801f7d8:	f7fe faf0 	bl	801ddbc <lfs_tag_id>
 801f7dc:	4603      	mov	r3, r0
 801f7de:	461c      	mov	r4, r3
 801f7e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f7e2:	4618      	mov	r0, r3
 801f7e4:	f7fe faea 	bl	801ddbc <lfs_tag_id>
 801f7e8:	4603      	mov	r3, r0
 801f7ea:	429c      	cmp	r4, r3
 801f7ec:	d104      	bne.n	801f7f8 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 801f7ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f7f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801f7f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f7f6:	e015      	b.n	801f824 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 801f7f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f7fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f7fe:	d011      	beq.n	801f824 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 801f800:	697b      	ldr	r3, [r7, #20]
 801f802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f804:	4618      	mov	r0, r3
 801f806:	f7fe fad9 	bl	801ddbc <lfs_tag_id>
 801f80a:	4603      	mov	r3, r0
 801f80c:	461c      	mov	r4, r3
 801f80e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f810:	4618      	mov	r0, r3
 801f812:	f7fe fad3 	bl	801ddbc <lfs_tag_id>
 801f816:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 801f818:	429c      	cmp	r4, r3
 801f81a:	d203      	bcs.n	801f824 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 801f81c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f81e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801f822:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 801f824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801f828:	2b00      	cmp	r3, #0
 801f82a:	d010      	beq.n	801f84e <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801f82c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f82e:	4618      	mov	r0, r3
 801f830:	f7fe fac4 	bl	801ddbc <lfs_tag_id>
 801f834:	4603      	mov	r3, r0
 801f836:	461a      	mov	r2, r3
 801f838:	693b      	ldr	r3, [r7, #16]
 801f83a:	8a9b      	ldrh	r3, [r3, #20]
 801f83c:	4619      	mov	r1, r3
 801f83e:	4610      	mov	r0, r2
 801f840:	f7fd fd49 	bl	801d2d6 <lfs_min>
 801f844:	4603      	mov	r3, r0
 801f846:	b29a      	uxth	r2, r3
 801f848:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801f84c:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 801f84e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f850:	4618      	mov	r0, r3
 801f852:	f7fe fa48 	bl	801dce6 <lfs_tag_isvalid>
 801f856:	4603      	mov	r3, r0
 801f858:	2b00      	cmp	r3, #0
 801f85a:	d001      	beq.n	801f860 <lfs_dir_fetchmatch+0x740>
            return besttag;
 801f85c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f85e:	e022      	b.n	801f8a6 <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 801f860:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f862:	4618      	mov	r0, r3
 801f864:	f7fe faaa 	bl	801ddbc <lfs_tag_id>
 801f868:	4603      	mov	r3, r0
 801f86a:	461a      	mov	r2, r3
 801f86c:	693b      	ldr	r3, [r7, #16]
 801f86e:	8a9b      	ldrh	r3, [r3, #20]
 801f870:	429a      	cmp	r2, r3
 801f872:	d202      	bcs.n	801f87a <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 801f874:	f06f 0301 	mvn.w	r3, #1
 801f878:	e015      	b.n	801f8a6 <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 801f87a:	2300      	movs	r3, #0
 801f87c:	e013      	b.n	801f8a6 <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 801f87e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f880:	2b01      	cmp	r3, #1
 801f882:	f77f ad00 	ble.w	801f286 <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801f886:	693b      	ldr	r3, [r7, #16]
 801f888:	681a      	ldr	r2, [r3, #0]
 801f88a:	693b      	ldr	r3, [r7, #16]
 801f88c:	685b      	ldr	r3, [r3, #4]
 801f88e:	4909      	ldr	r1, [pc, #36]	@ (801f8b4 <lfs_dir_fetchmatch+0x794>)
 801f890:	9101      	str	r1, [sp, #4]
 801f892:	9300      	str	r3, [sp, #0]
 801f894:	4613      	mov	r3, r2
 801f896:	f240 5259 	movw	r2, #1369	@ 0x559
 801f89a:	4907      	ldr	r1, [pc, #28]	@ (801f8b8 <lfs_dir_fetchmatch+0x798>)
 801f89c:	4807      	ldr	r0, [pc, #28]	@ (801f8bc <lfs_dir_fetchmatch+0x79c>)
 801f89e:	f013 feff 	bl	80336a0 <printf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 801f8a2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 801f8a6:	4618      	mov	r0, r3
 801f8a8:	3784      	adds	r7, #132	@ 0x84
 801f8aa:	46bd      	mov	sp, r7
 801f8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f8ae:	bf00      	nop
 801f8b0:	7ffffc00 	.word	0x7ffffc00
 801f8b4:	08040f14 	.word	0x08040f14
 801f8b8:	08040dec 	.word	0x08040dec
 801f8bc:	08040f20 	.word	0x08040f20

0801f8c0 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801f8c0:	b580      	push	{r7, lr}
 801f8c2:	b088      	sub	sp, #32
 801f8c4:	af04      	add	r7, sp, #16
 801f8c6:	60f8      	str	r0, [r7, #12]
 801f8c8:	60b9      	str	r1, [r7, #8]
 801f8ca:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801f8cc:	2300      	movs	r3, #0
 801f8ce:	9303      	str	r3, [sp, #12]
 801f8d0:	2300      	movs	r3, #0
 801f8d2:	9302      	str	r3, [sp, #8]
 801f8d4:	2300      	movs	r3, #0
 801f8d6:	9301      	str	r3, [sp, #4]
 801f8d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f8dc:	9300      	str	r3, [sp, #0]
 801f8de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f8e2:	687a      	ldr	r2, [r7, #4]
 801f8e4:	68b9      	ldr	r1, [r7, #8]
 801f8e6:	68f8      	ldr	r0, [r7, #12]
 801f8e8:	f7ff fc1a 	bl	801f120 <lfs_dir_fetchmatch>
 801f8ec:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 801f8ee:	4618      	mov	r0, r3
 801f8f0:	3710      	adds	r7, #16
 801f8f2:	46bd      	mov	sp, r7
 801f8f4:	bd80      	pop	{r7, pc}
	...

0801f8f8 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 801f8f8:	b580      	push	{r7, lr}
 801f8fa:	b08a      	sub	sp, #40	@ 0x28
 801f8fc:	af02      	add	r7, sp, #8
 801f8fe:	60f8      	str	r0, [r7, #12]
 801f900:	60b9      	str	r1, [r7, #8]
 801f902:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 801f904:	f107 0310 	add.w	r3, r7, #16
 801f908:	9300      	str	r3, [sp, #0]
 801f90a:	4b12      	ldr	r3, [pc, #72]	@ (801f954 <lfs_dir_getgstate+0x5c>)
 801f90c:	4a12      	ldr	r2, [pc, #72]	@ (801f958 <lfs_dir_getgstate+0x60>)
 801f90e:	68b9      	ldr	r1, [r7, #8]
 801f910:	68f8      	ldr	r0, [r7, #12]
 801f912:	f7fe fecf 	bl	801e6b4 <lfs_dir_get>
 801f916:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 801f918:	69fb      	ldr	r3, [r7, #28]
 801f91a:	2b00      	cmp	r3, #0
 801f91c:	da05      	bge.n	801f92a <lfs_dir_getgstate+0x32>
 801f91e:	69fb      	ldr	r3, [r7, #28]
 801f920:	f113 0f02 	cmn.w	r3, #2
 801f924:	d001      	beq.n	801f92a <lfs_dir_getgstate+0x32>
        return res;
 801f926:	69fb      	ldr	r3, [r7, #28]
 801f928:	e00f      	b.n	801f94a <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 801f92a:	69fb      	ldr	r3, [r7, #28]
 801f92c:	f113 0f02 	cmn.w	r3, #2
 801f930:	d00a      	beq.n	801f948 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 801f932:	f107 0310 	add.w	r3, r7, #16
 801f936:	4618      	mov	r0, r3
 801f938:	f7fe fb1c 	bl	801df74 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 801f93c:	f107 0310 	add.w	r3, r7, #16
 801f940:	4619      	mov	r1, r3
 801f942:	6878      	ldr	r0, [r7, #4]
 801f944:	f7fe fa6b 	bl	801de1e <lfs_gstate_xor>
    }

    return 0;
 801f948:	2300      	movs	r3, #0
}
 801f94a:	4618      	mov	r0, r3
 801f94c:	3720      	adds	r7, #32
 801f94e:	46bd      	mov	sp, r7
 801f950:	bd80      	pop	{r7, pc}
 801f952:	bf00      	nop
 801f954:	7ff0000c 	.word	0x7ff0000c
 801f958:	7ff00000 	.word	0x7ff00000

0801f95c <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 801f95c:	b580      	push	{r7, lr}
 801f95e:	b08a      	sub	sp, #40	@ 0x28
 801f960:	af02      	add	r7, sp, #8
 801f962:	60f8      	str	r0, [r7, #12]
 801f964:	60b9      	str	r1, [r7, #8]
 801f966:	603b      	str	r3, [r7, #0]
 801f968:	4613      	mov	r3, r2
 801f96a:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 801f96c:	88fb      	ldrh	r3, [r7, #6]
 801f96e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801f972:	4293      	cmp	r3, r2
 801f974:	d10b      	bne.n	801f98e <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 801f976:	683b      	ldr	r3, [r7, #0]
 801f978:	3308      	adds	r3, #8
 801f97a:	4932      	ldr	r1, [pc, #200]	@ (801fa44 <lfs_dir_getinfo+0xe8>)
 801f97c:	461a      	mov	r2, r3
 801f97e:	460b      	mov	r3, r1
 801f980:	881b      	ldrh	r3, [r3, #0]
 801f982:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 801f984:	683b      	ldr	r3, [r7, #0]
 801f986:	2202      	movs	r2, #2
 801f988:	701a      	strb	r2, [r3, #0]
        return 0;
 801f98a:	2300      	movs	r3, #0
 801f98c:	e055      	b.n	801fa3a <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801f98e:	88fb      	ldrh	r3, [r7, #6]
 801f990:	029a      	lsls	r2, r3, #10
 801f992:	68fb      	ldr	r3, [r7, #12]
 801f994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f996:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801f998:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801f99a:	683b      	ldr	r3, [r7, #0]
 801f99c:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801f99e:	9300      	str	r3, [sp, #0]
 801f9a0:	4613      	mov	r3, r2
 801f9a2:	4a29      	ldr	r2, [pc, #164]	@ (801fa48 <lfs_dir_getinfo+0xec>)
 801f9a4:	68b9      	ldr	r1, [r7, #8]
 801f9a6:	68f8      	ldr	r0, [r7, #12]
 801f9a8:	f7fe fe84 	bl	801e6b4 <lfs_dir_get>
 801f9ac:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 801f9ae:	69fb      	ldr	r3, [r7, #28]
 801f9b0:	2b00      	cmp	r3, #0
 801f9b2:	da01      	bge.n	801f9b8 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 801f9b4:	69fb      	ldr	r3, [r7, #28]
 801f9b6:	e040      	b.n	801fa3a <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 801f9b8:	69fb      	ldr	r3, [r7, #28]
 801f9ba:	4618      	mov	r0, r3
 801f9bc:	f7fe f9d4 	bl	801dd68 <lfs_tag_type3>
 801f9c0:	4603      	mov	r3, r0
 801f9c2:	b2da      	uxtb	r2, r3
 801f9c4:	683b      	ldr	r3, [r7, #0]
 801f9c6:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801f9c8:	88fb      	ldrh	r3, [r7, #6]
 801f9ca:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801f9cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f9d0:	f043 0308 	orr.w	r3, r3, #8
 801f9d4:	f107 0214 	add.w	r2, r7, #20
 801f9d8:	9200      	str	r2, [sp, #0]
 801f9da:	4a1c      	ldr	r2, [pc, #112]	@ (801fa4c <lfs_dir_getinfo+0xf0>)
 801f9dc:	68b9      	ldr	r1, [r7, #8]
 801f9de:	68f8      	ldr	r0, [r7, #12]
 801f9e0:	f7fe fe68 	bl	801e6b4 <lfs_dir_get>
 801f9e4:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 801f9e6:	69fb      	ldr	r3, [r7, #28]
 801f9e8:	2b00      	cmp	r3, #0
 801f9ea:	da01      	bge.n	801f9f0 <lfs_dir_getinfo+0x94>
        return (int)tag;
 801f9ec:	69fb      	ldr	r3, [r7, #28]
 801f9ee:	e024      	b.n	801fa3a <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 801f9f0:	f107 0314 	add.w	r3, r7, #20
 801f9f4:	4618      	mov	r0, r3
 801f9f6:	f7fe fb2d 	bl	801e054 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801f9fa:	69fb      	ldr	r3, [r7, #28]
 801f9fc:	4618      	mov	r0, r3
 801f9fe:	f7fe f9b3 	bl	801dd68 <lfs_tag_type3>
 801fa02:	4603      	mov	r3, r0
 801fa04:	461a      	mov	r2, r3
 801fa06:	f240 2302 	movw	r3, #514	@ 0x202
 801fa0a:	429a      	cmp	r2, r3
 801fa0c:	d103      	bne.n	801fa16 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 801fa0e:	69ba      	ldr	r2, [r7, #24]
 801fa10:	683b      	ldr	r3, [r7, #0]
 801fa12:	605a      	str	r2, [r3, #4]
 801fa14:	e010      	b.n	801fa38 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801fa16:	69fb      	ldr	r3, [r7, #28]
 801fa18:	4618      	mov	r0, r3
 801fa1a:	f7fe f9a5 	bl	801dd68 <lfs_tag_type3>
 801fa1e:	4603      	mov	r3, r0
 801fa20:	461a      	mov	r2, r3
 801fa22:	f240 2301 	movw	r3, #513	@ 0x201
 801fa26:	429a      	cmp	r2, r3
 801fa28:	d106      	bne.n	801fa38 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 801fa2a:	69fb      	ldr	r3, [r7, #28]
 801fa2c:	4618      	mov	r0, r3
 801fa2e:	f7fe f9d5 	bl	801dddc <lfs_tag_size>
 801fa32:	4602      	mov	r2, r0
 801fa34:	683b      	ldr	r3, [r7, #0]
 801fa36:	605a      	str	r2, [r3, #4]
    }

    return 0;
 801fa38:	2300      	movs	r3, #0
}
 801fa3a:	4618      	mov	r0, r3
 801fa3c:	3720      	adds	r7, #32
 801fa3e:	46bd      	mov	sp, r7
 801fa40:	bd80      	pop	{r7, pc}
 801fa42:	bf00      	nop
 801fa44:	08040f60 	.word	0x08040f60
 801fa48:	780ffc00 	.word	0x780ffc00
 801fa4c:	700ffc00 	.word	0x700ffc00

0801fa50 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 801fa50:	b590      	push	{r4, r7, lr}
 801fa52:	b08f      	sub	sp, #60	@ 0x3c
 801fa54:	af04      	add	r7, sp, #16
 801fa56:	60f8      	str	r0, [r7, #12]
 801fa58:	60b9      	str	r1, [r7, #8]
 801fa5a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 801fa5c:	68fb      	ldr	r3, [r7, #12]
 801fa5e:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 801fa60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa62:	681b      	ldr	r3, [r3, #0]
 801fa64:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801fa6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa6c:	689c      	ldr	r4, [r3, #8]
 801fa6e:	68b8      	ldr	r0, [r7, #8]
 801fa70:	f7fe f9b4 	bl	801dddc <lfs_tag_size>
 801fa74:	4603      	mov	r3, r0
 801fa76:	4619      	mov	r1, r3
 801fa78:	4620      	mov	r0, r4
 801fa7a:	f7fd fc2c 	bl	801d2d6 <lfs_min>
 801fa7e:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 801fa80:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 801fa82:	69fb      	ldr	r3, [r7, #28]
 801fa84:	681b      	ldr	r3, [r3, #0]
 801fa86:	69fa      	ldr	r2, [r7, #28]
 801fa88:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 801fa8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801fa8c:	6849      	ldr	r1, [r1, #4]
 801fa8e:	69b8      	ldr	r0, [r7, #24]
 801fa90:	9003      	str	r0, [sp, #12]
 801fa92:	9102      	str	r1, [sp, #8]
 801fa94:	9201      	str	r2, [sp, #4]
 801fa96:	9300      	str	r3, [sp, #0]
 801fa98:	69bb      	ldr	r3, [r7, #24]
 801fa9a:	4622      	mov	r2, r4
 801fa9c:	2100      	movs	r1, #0
 801fa9e:	6a38      	ldr	r0, [r7, #32]
 801faa0:	f7fd fe40 	bl	801d724 <lfs_bd_cmp>
 801faa4:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 801faa6:	697b      	ldr	r3, [r7, #20]
 801faa8:	2b00      	cmp	r3, #0
 801faaa:	d001      	beq.n	801fab0 <lfs_dir_find_match+0x60>
        return res;
 801faac:	697b      	ldr	r3, [r7, #20]
 801faae:	e014      	b.n	801fada <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 801fab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fab2:	689c      	ldr	r4, [r3, #8]
 801fab4:	68b8      	ldr	r0, [r7, #8]
 801fab6:	f7fe f991 	bl	801dddc <lfs_tag_size>
 801faba:	4603      	mov	r3, r0
 801fabc:	429c      	cmp	r4, r3
 801fabe:	d00b      	beq.n	801fad8 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801fac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fac2:	689c      	ldr	r4, [r3, #8]
 801fac4:	68b8      	ldr	r0, [r7, #8]
 801fac6:	f7fe f989 	bl	801dddc <lfs_tag_size>
 801faca:	4603      	mov	r3, r0
 801facc:	429c      	cmp	r4, r3
 801face:	d201      	bcs.n	801fad4 <lfs_dir_find_match+0x84>
 801fad0:	2301      	movs	r3, #1
 801fad2:	e002      	b.n	801fada <lfs_dir_find_match+0x8a>
 801fad4:	2302      	movs	r3, #2
 801fad6:	e000      	b.n	801fada <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 801fad8:	2300      	movs	r3, #0
}
 801fada:	4618      	mov	r0, r3
 801fadc:	372c      	adds	r7, #44	@ 0x2c
 801fade:	46bd      	mov	sp, r7
 801fae0:	bd90      	pop	{r4, r7, pc}
	...

0801fae4 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 801fae4:	b590      	push	{r4, r7, lr}
 801fae6:	b093      	sub	sp, #76	@ 0x4c
 801fae8:	af04      	add	r7, sp, #16
 801faea:	60f8      	str	r0, [r7, #12]
 801faec:	60b9      	str	r1, [r7, #8]
 801faee:	607a      	str	r2, [r7, #4]
 801faf0:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 801faf2:	687b      	ldr	r3, [r7, #4]
 801faf4:	681b      	ldr	r3, [r3, #0]
 801faf6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 801faf8:	683b      	ldr	r3, [r7, #0]
 801fafa:	2b00      	cmp	r3, #0
 801fafc:	d003      	beq.n	801fb06 <lfs_dir_find+0x22>
        *id = 0x3ff;
 801fafe:	683b      	ldr	r3, [r7, #0]
 801fb00:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801fb04:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801fb06:	4b6e      	ldr	r3, [pc, #440]	@ (801fcc0 <lfs_dir_find+0x1dc>)
 801fb08:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 801fb0a:	68fb      	ldr	r3, [r7, #12]
 801fb0c:	6a1a      	ldr	r2, [r3, #32]
 801fb0e:	68bb      	ldr	r3, [r7, #8]
 801fb10:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 801fb12:	68fb      	ldr	r3, [r7, #12]
 801fb14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801fb16:	68bb      	ldr	r3, [r7, #8]
 801fb18:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 801fb1a:	496a      	ldr	r1, [pc, #424]	@ (801fcc4 <lfs_dir_find+0x1e0>)
 801fb1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801fb1e:	f016 fb4f 	bl	80361c0 <strspn>
 801fb22:	4602      	mov	r2, r0
 801fb24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fb26:	4413      	add	r3, r2
 801fb28:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 801fb2a:	4966      	ldr	r1, [pc, #408]	@ (801fcc4 <lfs_dir_find+0x1e0>)
 801fb2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801fb2e:	f016 fafb 	bl	8036128 <strcspn>
 801fb32:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801fb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb36:	2b01      	cmp	r3, #1
 801fb38:	d105      	bne.n	801fb46 <lfs_dir_find+0x62>
 801fb3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fb3c:	781a      	ldrb	r2, [r3, #0]
 801fb3e:	4b62      	ldr	r3, [pc, #392]	@ (801fcc8 <lfs_dir_find+0x1e4>)
 801fb40:	781b      	ldrb	r3, [r3, #0]
 801fb42:	429a      	cmp	r2, r3
 801fb44:	d00a      	beq.n	801fb5c <lfs_dir_find+0x78>
 801fb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb48:	2b02      	cmp	r3, #2
 801fb4a:	d10c      	bne.n	801fb66 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801fb4c:	2202      	movs	r2, #2
 801fb4e:	495f      	ldr	r1, [pc, #380]	@ (801fccc <lfs_dir_find+0x1e8>)
 801fb50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801fb52:	f016 fa31 	bl	8035fb8 <memcmp>
 801fb56:	4603      	mov	r3, r0
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	d104      	bne.n	801fb66 <lfs_dir_find+0x82>
            name += namelen;
 801fb5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801fb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb60:	4413      	add	r3, r2
 801fb62:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 801fb64:	e7d9      	b.n	801fb1a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 801fb66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801fb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb6a:	4413      	add	r3, r2
 801fb6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 801fb6e:	2301      	movs	r3, #1
 801fb70:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 801fb72:	4954      	ldr	r1, [pc, #336]	@ (801fcc4 <lfs_dir_find+0x1e0>)
 801fb74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801fb76:	f016 fb23 	bl	80361c0 <strspn>
 801fb7a:	4602      	mov	r2, r0
 801fb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fb7e:	4413      	add	r3, r2
 801fb80:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 801fb82:	4950      	ldr	r1, [pc, #320]	@ (801fcc4 <lfs_dir_find+0x1e0>)
 801fb84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801fb86:	f016 facf 	bl	8036128 <strcspn>
 801fb8a:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 801fb8c:	6a3b      	ldr	r3, [r7, #32]
 801fb8e:	2b00      	cmp	r3, #0
 801fb90:	d01d      	beq.n	801fbce <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801fb92:	6a3b      	ldr	r3, [r7, #32]
 801fb94:	2b02      	cmp	r3, #2
 801fb96:	d112      	bne.n	801fbbe <lfs_dir_find+0xda>
 801fb98:	2202      	movs	r2, #2
 801fb9a:	494c      	ldr	r1, [pc, #304]	@ (801fccc <lfs_dir_find+0x1e8>)
 801fb9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801fb9e:	f016 fa0b 	bl	8035fb8 <memcmp>
 801fba2:	4603      	mov	r3, r0
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	d10a      	bne.n	801fbbe <lfs_dir_find+0xda>
                depth -= 1;
 801fba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fbaa:	3b01      	subs	r3, #1
 801fbac:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 801fbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fbb0:	2b00      	cmp	r3, #0
 801fbb2:	d107      	bne.n	801fbc4 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 801fbb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fbb6:	6a3b      	ldr	r3, [r7, #32]
 801fbb8:	4413      	add	r3, r2
 801fbba:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 801fbbc:	e7ad      	b.n	801fb1a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 801fbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fbc0:	3301      	adds	r3, #1
 801fbc2:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 801fbc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fbc6:	6a3b      	ldr	r3, [r7, #32]
 801fbc8:	4413      	add	r3, r2
 801fbca:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 801fbcc:	e7d1      	b.n	801fb72 <lfs_dir_find+0x8e>
                break;
 801fbce:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 801fbd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fbd2:	781b      	ldrb	r3, [r3, #0]
 801fbd4:	2b00      	cmp	r3, #0
 801fbd6:	d101      	bne.n	801fbdc <lfs_dir_find+0xf8>
            return tag;
 801fbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbda:	e06c      	b.n	801fcb6 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 801fbdc:	687b      	ldr	r3, [r7, #4]
 801fbde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801fbe0:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801fbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbe4:	4618      	mov	r0, r3
 801fbe6:	f7fe f8bf 	bl	801dd68 <lfs_tag_type3>
 801fbea:	4603      	mov	r3, r0
 801fbec:	2b02      	cmp	r3, #2
 801fbee:	d002      	beq.n	801fbf6 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 801fbf0:	f06f 0313 	mvn.w	r3, #19
 801fbf4:	e05f      	b.n	801fcb6 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 801fbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbf8:	4618      	mov	r0, r3
 801fbfa:	f7fe f8df 	bl	801ddbc <lfs_tag_id>
 801fbfe:	4603      	mov	r3, r0
 801fc00:	461a      	mov	r2, r3
 801fc02:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801fc06:	429a      	cmp	r2, r3
 801fc08:	d01c      	beq.n	801fc44 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801fc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc0c:	4618      	mov	r0, r3
 801fc0e:	f7fe f8d5 	bl	801ddbc <lfs_tag_id>
 801fc12:	4603      	mov	r3, r0
 801fc14:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801fc16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801fc1a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801fc1e:	68ba      	ldr	r2, [r7, #8]
 801fc20:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801fc22:	9200      	str	r2, [sp, #0]
 801fc24:	4a2a      	ldr	r2, [pc, #168]	@ (801fcd0 <lfs_dir_find+0x1ec>)
 801fc26:	68b9      	ldr	r1, [r7, #8]
 801fc28:	68f8      	ldr	r0, [r7, #12]
 801fc2a:	f7fe fd43 	bl	801e6b4 <lfs_dir_get>
 801fc2e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 801fc30:	69fb      	ldr	r3, [r7, #28]
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	da01      	bge.n	801fc3a <lfs_dir_find+0x156>
                return res;
 801fc36:	69fb      	ldr	r3, [r7, #28]
 801fc38:	e03d      	b.n	801fcb6 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 801fc3a:	68bb      	ldr	r3, [r7, #8]
 801fc3c:	3318      	adds	r3, #24
 801fc3e:	4618      	mov	r0, r3
 801fc40:	f7fe f81d 	bl	801dc7e <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801fc44:	68bb      	ldr	r3, [r7, #8]
 801fc46:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 801fc4a:	212f      	movs	r1, #47	@ 0x2f
 801fc4c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801fc4e:	f016 fa5e 	bl	803610e <strchr>
 801fc52:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801fc54:	2b00      	cmp	r3, #0
 801fc56:	d101      	bne.n	801fc5c <lfs_dir_find+0x178>
 801fc58:	683b      	ldr	r3, [r7, #0]
 801fc5a:	e000      	b.n	801fc5e <lfs_dir_find+0x17a>
 801fc5c:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801fc5e:	68fa      	ldr	r2, [r7, #12]
 801fc60:	613a      	str	r2, [r7, #16]
 801fc62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801fc64:	617a      	str	r2, [r7, #20]
 801fc66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fc68:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801fc6a:	f107 0210 	add.w	r2, r7, #16
 801fc6e:	9203      	str	r2, [sp, #12]
 801fc70:	4a18      	ldr	r2, [pc, #96]	@ (801fcd4 <lfs_dir_find+0x1f0>)
 801fc72:	9202      	str	r2, [sp, #8]
 801fc74:	9301      	str	r3, [sp, #4]
 801fc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fc78:	9300      	str	r3, [sp, #0]
 801fc7a:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801fc7e:	4622      	mov	r2, r4
 801fc80:	68b9      	ldr	r1, [r7, #8]
 801fc82:	68f8      	ldr	r0, [r7, #12]
 801fc84:	f7ff fa4c 	bl	801f120 <lfs_dir_fetchmatch>
 801fc88:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 801fc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc8c:	2b00      	cmp	r3, #0
 801fc8e:	da01      	bge.n	801fc94 <lfs_dir_find+0x1b0>
                return tag;
 801fc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc92:	e010      	b.n	801fcb6 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 801fc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	d004      	beq.n	801fca4 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 801fc9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801fc9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fc9e:	4413      	add	r3, r2
 801fca0:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 801fca2:	e73a      	b.n	801fb1a <lfs_dir_find+0x36>
            if (!dir->split) {
 801fca4:	68bb      	ldr	r3, [r7, #8]
 801fca6:	7ddb      	ldrb	r3, [r3, #23]
 801fca8:	f083 0301 	eor.w	r3, r3, #1
 801fcac:	b2db      	uxtb	r3, r3
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	d0c8      	beq.n	801fc44 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 801fcb2:	f06f 0301 	mvn.w	r3, #1
    }
}
 801fcb6:	4618      	mov	r0, r3
 801fcb8:	373c      	adds	r7, #60	@ 0x3c
 801fcba:	46bd      	mov	sp, r7
 801fcbc:	bd90      	pop	{r4, r7, pc}
 801fcbe:	bf00      	nop
 801fcc0:	002ffc00 	.word	0x002ffc00
 801fcc4:	08040f60 	.word	0x08040f60
 801fcc8:	08040f64 	.word	0x08040f64
 801fccc:	08040f68 	.word	0x08040f68
 801fcd0:	700ffc00 	.word	0x700ffc00
 801fcd4:	0801fa51 	.word	0x0801fa51

0801fcd8 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 801fcd8:	b590      	push	{r4, r7, lr}
 801fcda:	b08b      	sub	sp, #44	@ 0x2c
 801fcdc:	af04      	add	r7, sp, #16
 801fcde:	60f8      	str	r0, [r7, #12]
 801fce0:	60b9      	str	r1, [r7, #8]
 801fce2:	607a      	str	r2, [r7, #4]
 801fce4:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 801fce6:	68fb      	ldr	r3, [r7, #12]
 801fce8:	f103 0010 	add.w	r0, r3, #16
 801fcec:	68fc      	ldr	r4, [r7, #12]
 801fcee:	68bb      	ldr	r3, [r7, #8]
 801fcf0:	681b      	ldr	r3, [r3, #0]
 801fcf2:	68ba      	ldr	r2, [r7, #8]
 801fcf4:	6852      	ldr	r2, [r2, #4]
 801fcf6:	6839      	ldr	r1, [r7, #0]
 801fcf8:	9103      	str	r1, [sp, #12]
 801fcfa:	6879      	ldr	r1, [r7, #4]
 801fcfc:	9102      	str	r1, [sp, #8]
 801fcfe:	9201      	str	r2, [sp, #4]
 801fd00:	9300      	str	r3, [sp, #0]
 801fd02:	2300      	movs	r3, #0
 801fd04:	4622      	mov	r2, r4
 801fd06:	4601      	mov	r1, r0
 801fd08:	68f8      	ldr	r0, [r7, #12]
 801fd0a:	f7fd fe51 	bl	801d9b0 <lfs_bd_prog>
 801fd0e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 801fd10:	697b      	ldr	r3, [r7, #20]
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	d001      	beq.n	801fd1a <lfs_dir_commitprog+0x42>
        return err;
 801fd16:	697b      	ldr	r3, [r7, #20]
 801fd18:	e010      	b.n	801fd3c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 801fd1a:	68bb      	ldr	r3, [r7, #8]
 801fd1c:	68db      	ldr	r3, [r3, #12]
 801fd1e:	683a      	ldr	r2, [r7, #0]
 801fd20:	6879      	ldr	r1, [r7, #4]
 801fd22:	4618      	mov	r0, r3
 801fd24:	f005 f9ce 	bl	80250c4 <lfs_crc>
 801fd28:	4602      	mov	r2, r0
 801fd2a:	68bb      	ldr	r3, [r7, #8]
 801fd2c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 801fd2e:	68bb      	ldr	r3, [r7, #8]
 801fd30:	685a      	ldr	r2, [r3, #4]
 801fd32:	683b      	ldr	r3, [r7, #0]
 801fd34:	441a      	add	r2, r3
 801fd36:	68bb      	ldr	r3, [r7, #8]
 801fd38:	605a      	str	r2, [r3, #4]
    return 0;
 801fd3a:	2300      	movs	r3, #0
}
 801fd3c:	4618      	mov	r0, r3
 801fd3e:	371c      	adds	r7, #28
 801fd40:	46bd      	mov	sp, r7
 801fd42:	bd90      	pop	{r4, r7, pc}

0801fd44 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 801fd44:	b590      	push	{r4, r7, lr}
 801fd46:	b08f      	sub	sp, #60	@ 0x3c
 801fd48:	af04      	add	r7, sp, #16
 801fd4a:	60f8      	str	r0, [r7, #12]
 801fd4c:	60b9      	str	r1, [r7, #8]
 801fd4e:	607a      	str	r2, [r7, #4]
 801fd50:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 801fd52:	6878      	ldr	r0, [r7, #4]
 801fd54:	f7fe f84f 	bl	801ddf6 <lfs_tag_dsize>
 801fd58:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 801fd5a:	68bb      	ldr	r3, [r7, #8]
 801fd5c:	685a      	ldr	r2, [r3, #4]
 801fd5e:	6a3b      	ldr	r3, [r7, #32]
 801fd60:	441a      	add	r2, r3
 801fd62:	68bb      	ldr	r3, [r7, #8]
 801fd64:	695b      	ldr	r3, [r3, #20]
 801fd66:	429a      	cmp	r2, r3
 801fd68:	d902      	bls.n	801fd70 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 801fd6a:	f06f 031b 	mvn.w	r3, #27
 801fd6e:	e065      	b.n	801fe3c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801fd70:	687b      	ldr	r3, [r7, #4]
 801fd72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801fd76:	68bb      	ldr	r3, [r7, #8]
 801fd78:	689b      	ldr	r3, [r3, #8]
 801fd7a:	4053      	eors	r3, r2
 801fd7c:	4618      	mov	r0, r3
 801fd7e:	f7fd fb3d 	bl	801d3fc <lfs_tobe32>
 801fd82:	4603      	mov	r3, r0
 801fd84:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801fd86:	f107 0214 	add.w	r2, r7, #20
 801fd8a:	2304      	movs	r3, #4
 801fd8c:	68b9      	ldr	r1, [r7, #8]
 801fd8e:	68f8      	ldr	r0, [r7, #12]
 801fd90:	f7ff ffa2 	bl	801fcd8 <lfs_dir_commitprog>
 801fd94:	61f8      	str	r0, [r7, #28]
    if (err) {
 801fd96:	69fb      	ldr	r3, [r7, #28]
 801fd98:	2b00      	cmp	r3, #0
 801fd9a:	d001      	beq.n	801fda0 <lfs_dir_commitattr+0x5c>
        return err;
 801fd9c:	69fb      	ldr	r3, [r7, #28]
 801fd9e:	e04d      	b.n	801fe3c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 801fda0:	687b      	ldr	r3, [r7, #4]
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	db0c      	blt.n	801fdc0 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801fda6:	6a3b      	ldr	r3, [r7, #32]
 801fda8:	3b04      	subs	r3, #4
 801fdaa:	683a      	ldr	r2, [r7, #0]
 801fdac:	68b9      	ldr	r1, [r7, #8]
 801fdae:	68f8      	ldr	r0, [r7, #12]
 801fdb0:	f7ff ff92 	bl	801fcd8 <lfs_dir_commitprog>
 801fdb4:	61f8      	str	r0, [r7, #28]
        if (err) {
 801fdb6:	69fb      	ldr	r3, [r7, #28]
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d039      	beq.n	801fe30 <lfs_dir_commitattr+0xec>
            return err;
 801fdbc:	69fb      	ldr	r3, [r7, #28]
 801fdbe:	e03d      	b.n	801fe3c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 801fdc0:	683b      	ldr	r3, [r7, #0]
 801fdc2:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801fdc4:	2300      	movs	r3, #0
 801fdc6:	627b      	str	r3, [r7, #36]	@ 0x24
 801fdc8:	e02d      	b.n	801fe26 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 801fdca:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801fdcc:	6a3a      	ldr	r2, [r7, #32]
 801fdce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdd0:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 801fdd2:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 801fdd4:	69bb      	ldr	r3, [r7, #24]
 801fdd6:	681b      	ldr	r3, [r3, #0]
 801fdd8:	69ba      	ldr	r2, [r7, #24]
 801fdda:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 801fddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fdde:	440a      	add	r2, r1
 801fde0:	2101      	movs	r1, #1
 801fde2:	9103      	str	r1, [sp, #12]
 801fde4:	f107 0113 	add.w	r1, r7, #19
 801fde8:	9102      	str	r1, [sp, #8]
 801fdea:	9201      	str	r2, [sp, #4]
 801fdec:	9300      	str	r3, [sp, #0]
 801fdee:	4623      	mov	r3, r4
 801fdf0:	4602      	mov	r2, r0
 801fdf2:	2100      	movs	r1, #0
 801fdf4:	68f8      	ldr	r0, [r7, #12]
 801fdf6:	f7fd fb49 	bl	801d48c <lfs_bd_read>
 801fdfa:	61f8      	str	r0, [r7, #28]
            if (err) {
 801fdfc:	69fb      	ldr	r3, [r7, #28]
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	d001      	beq.n	801fe06 <lfs_dir_commitattr+0xc2>
                return err;
 801fe02:	69fb      	ldr	r3, [r7, #28]
 801fe04:	e01a      	b.n	801fe3c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801fe06:	f107 0213 	add.w	r2, r7, #19
 801fe0a:	2301      	movs	r3, #1
 801fe0c:	68b9      	ldr	r1, [r7, #8]
 801fe0e:	68f8      	ldr	r0, [r7, #12]
 801fe10:	f7ff ff62 	bl	801fcd8 <lfs_dir_commitprog>
 801fe14:	61f8      	str	r0, [r7, #28]
            if (err) {
 801fe16:	69fb      	ldr	r3, [r7, #28]
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	d001      	beq.n	801fe20 <lfs_dir_commitattr+0xdc>
                return err;
 801fe1c:	69fb      	ldr	r3, [r7, #28]
 801fe1e:	e00d      	b.n	801fe3c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801fe20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe22:	3301      	adds	r3, #1
 801fe24:	627b      	str	r3, [r7, #36]	@ 0x24
 801fe26:	6a3b      	ldr	r3, [r7, #32]
 801fe28:	3b04      	subs	r3, #4
 801fe2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fe2c:	429a      	cmp	r2, r3
 801fe2e:	d3cc      	bcc.n	801fdca <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801fe36:	68bb      	ldr	r3, [r7, #8]
 801fe38:	609a      	str	r2, [r3, #8]
    return 0;
 801fe3a:	2300      	movs	r3, #0
}
 801fe3c:	4618      	mov	r0, r3
 801fe3e:	372c      	adds	r7, #44	@ 0x2c
 801fe40:	46bd      	mov	sp, r7
 801fe42:	bd90      	pop	{r4, r7, pc}

0801fe44 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801fe44:	b590      	push	{r4, r7, lr}
 801fe46:	b097      	sub	sp, #92	@ 0x5c
 801fe48:	af04      	add	r7, sp, #16
 801fe4a:	6078      	str	r0, [r7, #4]
 801fe4c:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801fe4e:	683b      	ldr	r3, [r7, #0]
 801fe50:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 801fe52:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801fe56:	687b      	ldr	r3, [r7, #4]
 801fe58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fe5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    const lfs_off_t end = lfs_alignup(
 801fe5c:	4619      	mov	r1, r3
 801fe5e:	4610      	mov	r0, r2
 801fe60:	f7fd fa39 	bl	801d2d6 <lfs_min>
 801fe64:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 801fe66:	687b      	ldr	r3, [r7, #4]
 801fe68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fe6a:	6a1b      	ldr	r3, [r3, #32]
    const lfs_off_t end = lfs_alignup(
 801fe6c:	4619      	mov	r1, r3
 801fe6e:	4610      	mov	r0, r2
 801fe70:	f7fd fa56 	bl	801d320 <lfs_alignup>
 801fe74:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 801fe76:	2300      	movs	r3, #0
 801fe78:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 801fe7a:	2300      	movs	r3, #0
 801fe7c:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 801fe7e:	e0fe      	b.n	802007e <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801fe80:	683b      	ldr	r3, [r7, #0]
 801fe82:	685b      	ldr	r3, [r3, #4]
 801fe84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801fe86:	1ad3      	subs	r3, r2, r3
 801fe88:	3b04      	subs	r3, #4
 801fe8a:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801fe8e:	4618      	mov	r0, r3
 801fe90:	f7fd fa21 	bl	801d2d6 <lfs_min>
 801fe94:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 801fe96:	683b      	ldr	r3, [r7, #0]
 801fe98:	685b      	ldr	r3, [r3, #4]
 801fe9a:	4413      	add	r3, r2
        lfs_off_t noff = (
 801fe9c:	3304      	adds	r3, #4
 801fe9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 801fea0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fea4:	429a      	cmp	r2, r3
 801fea6:	d206      	bcs.n	801feb6 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801fea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801feaa:	3b14      	subs	r3, #20
 801feac:	4619      	mov	r1, r3
 801feae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801feb0:	f7fd fa11 	bl	801d2d6 <lfs_min>
 801feb4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 801feb6:	23ff      	movs	r3, #255	@ 0xff
 801feb8:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801feba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801febc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801febe:	429a      	cmp	r2, r3
 801fec0:	d35f      	bcc.n	801ff82 <lfs_dir_commitcrc+0x13e>
 801fec2:	687b      	ldr	r3, [r7, #4]
 801fec4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801fec8:	687b      	ldr	r3, [r7, #4]
 801feca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fecc:	6a1b      	ldr	r3, [r3, #32]
 801fece:	1ad3      	subs	r3, r2, r3
 801fed0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fed2:	429a      	cmp	r2, r3
 801fed4:	d855      	bhi.n	801ff82 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 801fed6:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fedc:	6a18      	ldr	r0, [r3, #32]
            int err = lfs_bd_read(lfs,
 801fede:	683b      	ldr	r3, [r7, #0]
 801fee0:	681b      	ldr	r3, [r3, #0]
 801fee2:	2201      	movs	r2, #1
 801fee4:	9203      	str	r2, [sp, #12]
 801fee6:	f107 021b 	add.w	r2, r7, #27
 801feea:	9202      	str	r2, [sp, #8]
 801feec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801feee:	9201      	str	r2, [sp, #4]
 801fef0:	9300      	str	r3, [sp, #0]
 801fef2:	4603      	mov	r3, r0
 801fef4:	460a      	mov	r2, r1
 801fef6:	2100      	movs	r1, #0
 801fef8:	6878      	ldr	r0, [r7, #4]
 801fefa:	f7fd fac7 	bl	801d48c <lfs_bd_read>
 801fefe:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 801ff00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ff02:	2b00      	cmp	r3, #0
 801ff04:	d005      	beq.n	801ff12 <lfs_dir_commitcrc+0xce>
 801ff06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ff08:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801ff0c:	d001      	beq.n	801ff12 <lfs_dir_commitcrc+0xce>
                return err;
 801ff0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ff10:	e101      	b.n	8020116 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 801ff12:	687b      	ldr	r3, [r7, #4]
 801ff14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ff16:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801ff18:	60bb      	str	r3, [r7, #8]
 801ff1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ff1e:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 801ff20:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ff26:	6a1c      	ldr	r4, [r3, #32]
                err = lfs_bd_crc(lfs,
 801ff28:	683b      	ldr	r3, [r7, #0]
 801ff2a:	681b      	ldr	r3, [r3, #0]
 801ff2c:	68ba      	ldr	r2, [r7, #8]
 801ff2e:	f107 0108 	add.w	r1, r7, #8
 801ff32:	3104      	adds	r1, #4
 801ff34:	9103      	str	r1, [sp, #12]
 801ff36:	9202      	str	r2, [sp, #8]
 801ff38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ff3a:	9201      	str	r2, [sp, #4]
 801ff3c:	9300      	str	r3, [sp, #0]
 801ff3e:	4623      	mov	r3, r4
 801ff40:	4602      	mov	r2, r0
 801ff42:	2100      	movs	r1, #0
 801ff44:	6878      	ldr	r0, [r7, #4]
 801ff46:	f7fd fc3e 	bl	801d7c6 <lfs_bd_crc>
 801ff4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 801ff4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ff4e:	2b00      	cmp	r3, #0
 801ff50:	d005      	beq.n	801ff5e <lfs_dir_commitcrc+0x11a>
 801ff52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ff54:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801ff58:	d001      	beq.n	801ff5e <lfs_dir_commitcrc+0x11a>
                    return err;
 801ff5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ff5c:	e0db      	b.n	8020116 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 801ff5e:	f107 0308 	add.w	r3, r7, #8
 801ff62:	4618      	mov	r0, r3
 801ff64:	f7fe f85e 	bl	801e024 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 801ff68:	f107 0308 	add.w	r3, r7, #8
 801ff6c:	4a6c      	ldr	r2, [pc, #432]	@ (8020120 <lfs_dir_commitcrc+0x2dc>)
 801ff6e:	6839      	ldr	r1, [r7, #0]
 801ff70:	6878      	ldr	r0, [r7, #4]
 801ff72:	f7ff fee7 	bl	801fd44 <lfs_dir_commitattr>
 801ff76:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 801ff78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ff7a:	2b00      	cmp	r3, #0
 801ff7c:	d001      	beq.n	801ff82 <lfs_dir_commitcrc+0x13e>
                    return err;
 801ff7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ff80:	e0c9      	b.n	8020116 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 801ff82:	7efb      	ldrb	r3, [r7, #27]
 801ff84:	43db      	mvns	r3, r3
 801ff86:	b2db      	uxtb	r3, r3
 801ff88:	09db      	lsrs	r3, r3, #7
 801ff8a:	b2db      	uxtb	r3, r3
 801ff8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801ff90:	051a      	lsls	r2, r3, #20
 801ff92:	683b      	ldr	r3, [r7, #0]
 801ff94:	685b      	ldr	r3, [r3, #4]
 801ff96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801ff98:	1acb      	subs	r3, r1, r3
 801ff9a:	3b04      	subs	r3, #4
 801ff9c:	4313      	orrs	r3, r2
 801ff9e:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 801ffa2:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 801ffa6:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801ffa8:	683b      	ldr	r3, [r7, #0]
 801ffaa:	689a      	ldr	r2, [r3, #8]
 801ffac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ffae:	4053      	eors	r3, r2
 801ffb0:	4618      	mov	r0, r3
 801ffb2:	f7fd fa23 	bl	801d3fc <lfs_tobe32>
 801ffb6:	4603      	mov	r3, r0
 801ffb8:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801ffba:	683b      	ldr	r3, [r7, #0]
 801ffbc:	68db      	ldr	r3, [r3, #12]
 801ffbe:	f107 0110 	add.w	r1, r7, #16
 801ffc2:	2204      	movs	r2, #4
 801ffc4:	4618      	mov	r0, r3
 801ffc6:	f005 f87d 	bl	80250c4 <lfs_crc>
 801ffca:	4602      	mov	r2, r0
 801ffcc:	683b      	ldr	r3, [r7, #0]
 801ffce:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801ffd0:	683b      	ldr	r3, [r7, #0]
 801ffd2:	68db      	ldr	r3, [r3, #12]
 801ffd4:	4618      	mov	r0, r3
 801ffd6:	f7fd f9f9 	bl	801d3cc <lfs_tole32>
 801ffda:	4603      	mov	r3, r0
 801ffdc:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 801ffde:	687b      	ldr	r3, [r7, #4]
 801ffe0:	f103 0010 	add.w	r0, r3, #16
 801ffe4:	687c      	ldr	r4, [r7, #4]
 801ffe6:	683b      	ldr	r3, [r7, #0]
 801ffe8:	681b      	ldr	r3, [r3, #0]
 801ffea:	683a      	ldr	r2, [r7, #0]
 801ffec:	6852      	ldr	r2, [r2, #4]
 801ffee:	2108      	movs	r1, #8
 801fff0:	9103      	str	r1, [sp, #12]
 801fff2:	f107 0110 	add.w	r1, r7, #16
 801fff6:	9102      	str	r1, [sp, #8]
 801fff8:	9201      	str	r2, [sp, #4]
 801fffa:	9300      	str	r3, [sp, #0]
 801fffc:	2300      	movs	r3, #0
 801fffe:	4622      	mov	r2, r4
 8020000:	4601      	mov	r1, r0
 8020002:	6878      	ldr	r0, [r7, #4]
 8020004:	f7fd fcd4 	bl	801d9b0 <lfs_bd_prog>
 8020008:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 802000a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802000c:	2b00      	cmp	r3, #0
 802000e:	d001      	beq.n	8020014 <lfs_dir_commitcrc+0x1d0>
            return err;
 8020010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020012:	e080      	b.n	8020116 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8020014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020016:	2b00      	cmp	r3, #0
 8020018:	d106      	bne.n	8020028 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 802001a:	683b      	ldr	r3, [r7, #0]
 802001c:	685b      	ldr	r3, [r3, #4]
 802001e:	3304      	adds	r3, #4
 8020020:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 8020022:	683b      	ldr	r3, [r7, #0]
 8020024:	68db      	ldr	r3, [r3, #12]
 8020026:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 8020028:	683b      	ldr	r3, [r7, #0]
 802002a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802002c:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 802002e:	7efb      	ldrb	r3, [r7, #27]
 8020030:	43db      	mvns	r3, r3
 8020032:	061b      	lsls	r3, r3, #24
 8020034:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8020038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802003a:	405a      	eors	r2, r3
 802003c:	683b      	ldr	r3, [r7, #0]
 802003e:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8020040:	683b      	ldr	r3, [r7, #0]
 8020042:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020046:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8020048:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802004a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802004c:	429a      	cmp	r2, r3
 802004e:	d208      	bcs.n	8020062 <lfs_dir_commitcrc+0x21e>
 8020050:	687b      	ldr	r3, [r7, #4]
 8020052:	695a      	ldr	r2, [r3, #20]
 8020054:	687b      	ldr	r3, [r7, #4]
 8020056:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802005a:	4413      	add	r3, r2
 802005c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802005e:	429a      	cmp	r2, r3
 8020060:	d30d      	bcc.n	802007e <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	f103 0110 	add.w	r1, r3, #16
 8020068:	687a      	ldr	r2, [r7, #4]
 802006a:	2300      	movs	r3, #0
 802006c:	6878      	ldr	r0, [r7, #4]
 802006e:	f7fd fc6b 	bl	801d948 <lfs_bd_sync>
 8020072:	6238      	str	r0, [r7, #32]
            if (err) {
 8020074:	6a3b      	ldr	r3, [r7, #32]
 8020076:	2b00      	cmp	r3, #0
 8020078:	d001      	beq.n	802007e <lfs_dir_commitcrc+0x23a>
                return err;
 802007a:	6a3b      	ldr	r3, [r7, #32]
 802007c:	e04b      	b.n	8020116 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 802007e:	683b      	ldr	r3, [r7, #0]
 8020080:	685b      	ldr	r3, [r3, #4]
 8020082:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8020084:	429a      	cmp	r2, r3
 8020086:	f63f aefb 	bhi.w	801fe80 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 802008a:	683b      	ldr	r3, [r7, #0]
 802008c:	691b      	ldr	r3, [r3, #16]
 802008e:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 8020090:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020094:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8020096:	6878      	ldr	r0, [r7, #4]
 8020098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802009a:	1d1c      	adds	r4, r3, #4
 802009c:	683b      	ldr	r3, [r7, #0]
 802009e:	681b      	ldr	r3, [r3, #0]
 80200a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80200a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80200a4:	1a8a      	subs	r2, r1, r2
 80200a6:	f107 011c 	add.w	r1, r7, #28
 80200aa:	9103      	str	r1, [sp, #12]
 80200ac:	9202      	str	r2, [sp, #8]
 80200ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80200b0:	9201      	str	r2, [sp, #4]
 80200b2:	9300      	str	r3, [sp, #0]
 80200b4:	4623      	mov	r3, r4
 80200b6:	4602      	mov	r2, r0
 80200b8:	2100      	movs	r1, #0
 80200ba:	6878      	ldr	r0, [r7, #4]
 80200bc:	f7fd fb83 	bl	801d7c6 <lfs_bd_crc>
 80200c0:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 80200c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80200c4:	2b00      	cmp	r3, #0
 80200c6:	d001      	beq.n	80200cc <lfs_dir_commitcrc+0x288>
        return err;
 80200c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80200ca:	e024      	b.n	8020116 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 80200cc:	69fb      	ldr	r3, [r7, #28]
 80200ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80200d0:	429a      	cmp	r2, r3
 80200d2:	d002      	beq.n	80200da <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 80200d4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80200d8:	e01d      	b.n	8020116 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 80200da:	6879      	ldr	r1, [r7, #4]
 80200dc:	683b      	ldr	r3, [r7, #0]
 80200de:	681b      	ldr	r3, [r3, #0]
 80200e0:	f107 021c 	add.w	r2, r7, #28
 80200e4:	9203      	str	r2, [sp, #12]
 80200e6:	2204      	movs	r2, #4
 80200e8:	9202      	str	r2, [sp, #8]
 80200ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80200ec:	9201      	str	r2, [sp, #4]
 80200ee:	9300      	str	r3, [sp, #0]
 80200f0:	2304      	movs	r3, #4
 80200f2:	460a      	mov	r2, r1
 80200f4:	2100      	movs	r1, #0
 80200f6:	6878      	ldr	r0, [r7, #4]
 80200f8:	f7fd fb65 	bl	801d7c6 <lfs_bd_crc>
 80200fc:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 80200fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020100:	2b00      	cmp	r3, #0
 8020102:	d001      	beq.n	8020108 <lfs_dir_commitcrc+0x2c4>
        return err;
 8020104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020106:	e006      	b.n	8020116 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8020108:	69fb      	ldr	r3, [r7, #28]
 802010a:	2b00      	cmp	r3, #0
 802010c:	d002      	beq.n	8020114 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 802010e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8020112:	e000      	b.n	8020116 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8020114:	2300      	movs	r3, #0
}
 8020116:	4618      	mov	r0, r3
 8020118:	374c      	adds	r7, #76	@ 0x4c
 802011a:	46bd      	mov	sp, r7
 802011c:	bd90      	pop	{r4, r7, pc}
 802011e:	bf00      	nop
 8020120:	5ffffc08 	.word	0x5ffffc08

08020124 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8020124:	b580      	push	{r7, lr}
 8020126:	b08a      	sub	sp, #40	@ 0x28
 8020128:	af04      	add	r7, sp, #16
 802012a:	6078      	str	r0, [r7, #4]
 802012c:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 802012e:	2300      	movs	r3, #0
 8020130:	617b      	str	r3, [r7, #20]
 8020132:	e016      	b.n	8020162 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8020134:	697b      	ldr	r3, [r7, #20]
 8020136:	3301      	adds	r3, #1
 8020138:	2b00      	cmp	r3, #0
 802013a:	f003 0301 	and.w	r3, r3, #1
 802013e:	bfb8      	it	lt
 8020140:	425b      	neglt	r3, r3
 8020142:	009b      	lsls	r3, r3, #2
 8020144:	683a      	ldr	r2, [r7, #0]
 8020146:	4413      	add	r3, r2
 8020148:	4619      	mov	r1, r3
 802014a:	6878      	ldr	r0, [r7, #4]
 802014c:	f7fe f934 	bl	801e3b8 <lfs_alloc>
 8020150:	60f8      	str	r0, [r7, #12]
        if (err) {
 8020152:	68fb      	ldr	r3, [r7, #12]
 8020154:	2b00      	cmp	r3, #0
 8020156:	d001      	beq.n	802015c <lfs_dir_alloc+0x38>
            return err;
 8020158:	68fb      	ldr	r3, [r7, #12]
 802015a:	e058      	b.n	802020e <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 802015c:	697b      	ldr	r3, [r7, #20]
 802015e:	3301      	adds	r3, #1
 8020160:	617b      	str	r3, [r7, #20]
 8020162:	697b      	ldr	r3, [r7, #20]
 8020164:	2b01      	cmp	r3, #1
 8020166:	dde5      	ble.n	8020134 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8020168:	683b      	ldr	r3, [r7, #0]
 802016a:	2200      	movs	r2, #0
 802016c:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 802016e:	6879      	ldr	r1, [r7, #4]
 8020170:	683b      	ldr	r3, [r7, #0]
 8020172:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8020174:	683a      	ldr	r2, [r7, #0]
 8020176:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8020178:	2004      	movs	r0, #4
 802017a:	9003      	str	r0, [sp, #12]
 802017c:	9202      	str	r2, [sp, #8]
 802017e:	2200      	movs	r2, #0
 8020180:	9201      	str	r2, [sp, #4]
 8020182:	9300      	str	r3, [sp, #0]
 8020184:	2304      	movs	r3, #4
 8020186:	460a      	mov	r2, r1
 8020188:	2100      	movs	r1, #0
 802018a:	6878      	ldr	r0, [r7, #4]
 802018c:	f7fd f97e 	bl	801d48c <lfs_bd_read>
 8020190:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8020192:	683b      	ldr	r3, [r7, #0]
 8020194:	689b      	ldr	r3, [r3, #8]
 8020196:	4618      	mov	r0, r3
 8020198:	f7fd f90d 	bl	801d3b6 <lfs_fromle32>
 802019c:	4602      	mov	r2, r0
 802019e:	683b      	ldr	r3, [r7, #0]
 80201a0:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80201a2:	693b      	ldr	r3, [r7, #16]
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	d005      	beq.n	80201b4 <lfs_dir_alloc+0x90>
 80201a8:	693b      	ldr	r3, [r7, #16]
 80201aa:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80201ae:	d001      	beq.n	80201b4 <lfs_dir_alloc+0x90>
        return err;
 80201b0:	693b      	ldr	r3, [r7, #16]
 80201b2:	e02c      	b.n	802020e <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80201b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	dd0e      	ble.n	80201dc <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80201be:	683b      	ldr	r3, [r7, #0]
 80201c0:	689a      	ldr	r2, [r3, #8]
 80201c2:	687b      	ldr	r3, [r7, #4]
 80201c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80201c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80201c8:	3301      	adds	r3, #1
 80201ca:	f043 0301 	orr.w	r3, r3, #1
 80201ce:	4619      	mov	r1, r3
 80201d0:	4610      	mov	r0, r2
 80201d2:	f7fd f8a5 	bl	801d320 <lfs_alignup>
 80201d6:	4602      	mov	r2, r0
 80201d8:	683b      	ldr	r3, [r7, #0]
 80201da:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80201dc:	683b      	ldr	r3, [r7, #0]
 80201de:	2204      	movs	r2, #4
 80201e0:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80201e2:	683b      	ldr	r3, [r7, #0]
 80201e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80201e8:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80201ea:	683b      	ldr	r3, [r7, #0]
 80201ec:	2200      	movs	r2, #0
 80201ee:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80201f0:	683b      	ldr	r3, [r7, #0]
 80201f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80201f6:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80201f8:	683b      	ldr	r3, [r7, #0]
 80201fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80201fe:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8020200:	683b      	ldr	r3, [r7, #0]
 8020202:	2200      	movs	r2, #0
 8020204:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8020206:	683b      	ldr	r3, [r7, #0]
 8020208:	2200      	movs	r2, #0
 802020a:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 802020c:	2300      	movs	r3, #0
}
 802020e:	4618      	mov	r0, r3
 8020210:	3718      	adds	r7, #24
 8020212:	46bd      	mov	sp, r7
 8020214:	bd80      	pop	{r7, pc}
	...

08020218 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 8020218:	b580      	push	{r7, lr}
 802021a:	b08a      	sub	sp, #40	@ 0x28
 802021c:	af00      	add	r7, sp, #0
 802021e:	60f8      	str	r0, [r7, #12]
 8020220:	60b9      	str	r1, [r7, #8]
 8020222:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 8020224:	68fb      	ldr	r3, [r7, #12]
 8020226:	3348      	adds	r3, #72	@ 0x48
 8020228:	461a      	mov	r2, r3
 802022a:	6879      	ldr	r1, [r7, #4]
 802022c:	68f8      	ldr	r0, [r7, #12]
 802022e:	f7ff fb63 	bl	801f8f8 <lfs_dir_getgstate>
 8020232:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 8020234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020236:	2b00      	cmp	r3, #0
 8020238:	d001      	beq.n	802023e <lfs_dir_drop+0x26>
        return err;
 802023a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802023c:	e022      	b.n	8020284 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 802023e:	687b      	ldr	r3, [r7, #4]
 8020240:	3318      	adds	r3, #24
 8020242:	4618      	mov	r0, r3
 8020244:	f7fd fd35 	bl	801dcb2 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 8020248:	687b      	ldr	r3, [r7, #4]
 802024a:	7ddb      	ldrb	r3, [r3, #23]
 802024c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8020250:	051a      	lsls	r2, r3, #20
 8020252:	4b0e      	ldr	r3, [pc, #56]	@ (802028c <lfs_dir_drop+0x74>)
 8020254:	4313      	orrs	r3, r2
 8020256:	61fb      	str	r3, [r7, #28]
 8020258:	687b      	ldr	r3, [r7, #4]
 802025a:	3318      	adds	r3, #24
 802025c:	623b      	str	r3, [r7, #32]
 802025e:	f107 021c 	add.w	r2, r7, #28
 8020262:	2301      	movs	r3, #1
 8020264:	68b9      	ldr	r1, [r7, #8]
 8020266:	68f8      	ldr	r0, [r7, #12]
 8020268:	f001 f984 	bl	8021574 <lfs_dir_commit>
 802026c:	6278      	str	r0, [r7, #36]	@ 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 802026e:	687b      	ldr	r3, [r7, #4]
 8020270:	3318      	adds	r3, #24
 8020272:	4618      	mov	r0, r3
 8020274:	f7fd fd03 	bl	801dc7e <lfs_pair_fromle32>
    if (err) {
 8020278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802027a:	2b00      	cmp	r3, #0
 802027c:	d001      	beq.n	8020282 <lfs_dir_drop+0x6a>
        return err;
 802027e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020280:	e000      	b.n	8020284 <lfs_dir_drop+0x6c>
    }

    return 0;
 8020282:	2300      	movs	r3, #0
}
 8020284:	4618      	mov	r0, r3
 8020286:	3728      	adds	r7, #40	@ 0x28
 8020288:	46bd      	mov	sp, r7
 802028a:	bd80      	pop	{r7, pc}
 802028c:	000ffc08 	.word	0x000ffc08

08020290 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8020290:	b580      	push	{r7, lr}
 8020292:	b092      	sub	sp, #72	@ 0x48
 8020294:	af04      	add	r7, sp, #16
 8020296:	60f8      	str	r0, [r7, #12]
 8020298:	60b9      	str	r1, [r7, #8]
 802029a:	607a      	str	r2, [r7, #4]
 802029c:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 802029e:	f107 0310 	add.w	r3, r7, #16
 80202a2:	4619      	mov	r1, r3
 80202a4:	68f8      	ldr	r0, [r7, #12]
 80202a6:	f7ff ff3d 	bl	8020124 <lfs_dir_alloc>
 80202aa:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 80202ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80202ae:	2b00      	cmp	r3, #0
 80202b0:	d001      	beq.n	80202b6 <lfs_dir_split+0x26>
        return err;
 80202b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80202b4:	e03c      	b.n	8020330 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80202b6:	68bb      	ldr	r3, [r7, #8]
 80202b8:	7ddb      	ldrb	r3, [r3, #23]
 80202ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 80202be:	68bb      	ldr	r3, [r7, #8]
 80202c0:	699b      	ldr	r3, [r3, #24]
 80202c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 80202c4:	68bb      	ldr	r3, [r7, #8]
 80202c6:	69db      	ldr	r3, [r3, #28]
 80202c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80202ca:	f107 0110 	add.w	r1, r7, #16
 80202ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80202d2:	9302      	str	r3, [sp, #8]
 80202d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80202d8:	9301      	str	r3, [sp, #4]
 80202da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80202dc:	9300      	str	r3, [sp, #0]
 80202de:	683b      	ldr	r3, [r7, #0]
 80202e0:	687a      	ldr	r2, [r7, #4]
 80202e2:	68f8      	ldr	r0, [r7, #12]
 80202e4:	f000 f87a 	bl	80203dc <lfs_dir_compact>
 80202e8:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 80202ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202ec:	2b00      	cmp	r3, #0
 80202ee:	da01      	bge.n	80202f4 <lfs_dir_split+0x64>
        return res;
 80202f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202f2:	e01d      	b.n	8020330 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80202f4:	693a      	ldr	r2, [r7, #16]
 80202f6:	68bb      	ldr	r3, [r7, #8]
 80202f8:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80202fa:	697a      	ldr	r2, [r7, #20]
 80202fc:	68bb      	ldr	r3, [r7, #8]
 80202fe:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8020300:	68bb      	ldr	r3, [r7, #8]
 8020302:	2201      	movs	r2, #1
 8020304:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8020306:	68ba      	ldr	r2, [r7, #8]
 8020308:	68fb      	ldr	r3, [r7, #12]
 802030a:	3320      	adds	r3, #32
 802030c:	4619      	mov	r1, r3
 802030e:	4610      	mov	r0, r2
 8020310:	f7fd fc5e 	bl	801dbd0 <lfs_pair_cmp>
 8020314:	4603      	mov	r3, r0
 8020316:	2b00      	cmp	r3, #0
 8020318:	d109      	bne.n	802032e <lfs_dir_split+0x9e>
 802031a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 802031e:	2b00      	cmp	r3, #0
 8020320:	d105      	bne.n	802032e <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8020322:	693a      	ldr	r2, [r7, #16]
 8020324:	68fb      	ldr	r3, [r7, #12]
 8020326:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8020328:	697a      	ldr	r2, [r7, #20]
 802032a:	68fb      	ldr	r3, [r7, #12]
 802032c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 802032e:	2300      	movs	r3, #0
}
 8020330:	4618      	mov	r0, r3
 8020332:	3738      	adds	r7, #56	@ 0x38
 8020334:	46bd      	mov	sp, r7
 8020336:	bd80      	pop	{r7, pc}

08020338 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8020338:	b580      	push	{r7, lr}
 802033a:	b086      	sub	sp, #24
 802033c:	af00      	add	r7, sp, #0
 802033e:	60f8      	str	r0, [r7, #12]
 8020340:	60b9      	str	r1, [r7, #8]
 8020342:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8020344:	68fb      	ldr	r3, [r7, #12]
 8020346:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8020348:	68b8      	ldr	r0, [r7, #8]
 802034a:	f7fd fd54 	bl	801ddf6 <lfs_tag_dsize>
 802034e:	4602      	mov	r2, r0
 8020350:	697b      	ldr	r3, [r7, #20]
 8020352:	681b      	ldr	r3, [r3, #0]
 8020354:	441a      	add	r2, r3
 8020356:	697b      	ldr	r3, [r7, #20]
 8020358:	601a      	str	r2, [r3, #0]
    return 0;
 802035a:	2300      	movs	r3, #0
}
 802035c:	4618      	mov	r0, r3
 802035e:	3718      	adds	r7, #24
 8020360:	46bd      	mov	sp, r7
 8020362:	bd80      	pop	{r7, pc}

08020364 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8020364:	b580      	push	{r7, lr}
 8020366:	b086      	sub	sp, #24
 8020368:	af00      	add	r7, sp, #0
 802036a:	60f8      	str	r0, [r7, #12]
 802036c:	60b9      	str	r1, [r7, #8]
 802036e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8020370:	68fb      	ldr	r3, [r7, #12]
 8020372:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8020374:	697b      	ldr	r3, [r7, #20]
 8020376:	6818      	ldr	r0, [r3, #0]
 8020378:	697b      	ldr	r3, [r7, #20]
 802037a:	6859      	ldr	r1, [r3, #4]
 802037c:	687b      	ldr	r3, [r7, #4]
 802037e:	68ba      	ldr	r2, [r7, #8]
 8020380:	f7ff fce0 	bl	801fd44 <lfs_dir_commitattr>
 8020384:	4603      	mov	r3, r0
}
 8020386:	4618      	mov	r0, r3
 8020388:	3718      	adds	r7, #24
 802038a:	46bd      	mov	sp, r7
 802038c:	bd80      	pop	{r7, pc}

0802038e <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 802038e:	b480      	push	{r7}
 8020390:	b083      	sub	sp, #12
 8020392:	af00      	add	r7, sp, #0
 8020394:	6078      	str	r0, [r7, #4]
 8020396:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802039c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 802039e:	2b00      	cmp	r3, #0
 80203a0:	dd11      	ble.n	80203c6 <lfs_dir_needsrelocation+0x38>
 80203a2:	683b      	ldr	r3, [r7, #0]
 80203a4:	689b      	ldr	r3, [r3, #8]
 80203a6:	3301      	adds	r3, #1
 80203a8:	687a      	ldr	r2, [r7, #4]
 80203aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80203ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80203ae:	3201      	adds	r2, #1
 80203b0:	f042 0201 	orr.w	r2, r2, #1
 80203b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80203b8:	fb01 f202 	mul.w	r2, r1, r2
 80203bc:	1a9b      	subs	r3, r3, r2
 80203be:	2b00      	cmp	r3, #0
 80203c0:	d101      	bne.n	80203c6 <lfs_dir_needsrelocation+0x38>
 80203c2:	2301      	movs	r3, #1
 80203c4:	e000      	b.n	80203c8 <lfs_dir_needsrelocation+0x3a>
 80203c6:	2300      	movs	r3, #0
 80203c8:	f003 0301 	and.w	r3, r3, #1
 80203cc:	b2db      	uxtb	r3, r3
}
 80203ce:	4618      	mov	r0, r3
 80203d0:	370c      	adds	r7, #12
 80203d2:	46bd      	mov	sp, r7
 80203d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203d8:	4770      	bx	lr
	...

080203dc <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80203dc:	b580      	push	{r7, lr}
 80203de:	b0a4      	sub	sp, #144	@ 0x90
 80203e0:	af0a      	add	r7, sp, #40	@ 0x28
 80203e2:	60f8      	str	r0, [r7, #12]
 80203e4:	60b9      	str	r1, [r7, #8]
 80203e6:	607a      	str	r2, [r7, #4]
 80203e8:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80203ea:	2300      	movs	r3, #0
 80203ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80203f0:	68b9      	ldr	r1, [r7, #8]
 80203f2:	68f8      	ldr	r0, [r7, #12]
 80203f4:	f7ff ffcb 	bl	802038e <lfs_dir_needsrelocation>
 80203f8:	4603      	mov	r3, r0
 80203fa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 80203fe:	68bb      	ldr	r3, [r7, #8]
 8020400:	689b      	ldr	r3, [r3, #8]
 8020402:	1c5a      	adds	r2, r3, #1
 8020404:	68bb      	ldr	r3, [r7, #8]
 8020406:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8020408:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 802040c:	2b00      	cmp	r3, #0
 802040e:	d00e      	beq.n	802042e <lfs_dir_compact+0x52>
 8020410:	68bb      	ldr	r3, [r7, #8]
 8020412:	2200      	movs	r2, #0
 8020414:	657a      	str	r2, [r7, #84]	@ 0x54
 8020416:	2201      	movs	r2, #1
 8020418:	65ba      	str	r2, [r7, #88]	@ 0x58
 802041a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 802041e:	4611      	mov	r1, r2
 8020420:	4618      	mov	r0, r3
 8020422:	f7fd fbd5 	bl	801dbd0 <lfs_pair_cmp>
 8020426:	4603      	mov	r3, r0
 8020428:	2b00      	cmp	r3, #0
 802042a:	f040 8155 	bne.w	80206d8 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 802042e:	68bb      	ldr	r3, [r7, #8]
 8020430:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8020432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020434:	2300      	movs	r3, #0
 8020436:	643b      	str	r3, [r7, #64]	@ 0x40
 8020438:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802043c:	647b      	str	r3, [r7, #68]	@ 0x44
 802043e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020444:	2300      	movs	r3, #0
 8020446:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8020448:	68fb      	ldr	r3, [r7, #12]
 802044a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802044c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 802044e:	2b00      	cmp	r3, #0
 8020450:	d004      	beq.n	802045c <lfs_dir_compact+0x80>
 8020452:	68fb      	ldr	r3, [r7, #12]
 8020454:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020458:	3b08      	subs	r3, #8
 802045a:	e003      	b.n	8020464 <lfs_dir_compact+0x88>
 802045c:	68fb      	ldr	r3, [r7, #12]
 802045e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020462:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8020464:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8020466:	68bb      	ldr	r3, [r7, #8]
 8020468:	685b      	ldr	r3, [r3, #4]
 802046a:	4619      	mov	r1, r3
 802046c:	68f8      	ldr	r0, [r7, #12]
 802046e:	f7fd fb4d 	bl	801db0c <lfs_bd_erase>
 8020472:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8020474:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020476:	2b00      	cmp	r3, #0
 8020478:	d006      	beq.n	8020488 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 802047a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802047c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020480:	f000 812c 	beq.w	80206dc <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8020484:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020486:	e188      	b.n	802079a <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8020488:	68bb      	ldr	r3, [r7, #8]
 802048a:	689b      	ldr	r3, [r3, #8]
 802048c:	4618      	mov	r0, r3
 802048e:	f7fc ff9d 	bl	801d3cc <lfs_tole32>
 8020492:	4602      	mov	r2, r0
 8020494:	68bb      	ldr	r3, [r7, #8]
 8020496:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8020498:	68bb      	ldr	r3, [r7, #8]
 802049a:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 802049e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80204a2:	2304      	movs	r3, #4
 80204a4:	68f8      	ldr	r0, [r7, #12]
 80204a6:	f7ff fc17 	bl	801fcd8 <lfs_dir_commitprog>
 80204aa:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80204ac:	68bb      	ldr	r3, [r7, #8]
 80204ae:	689b      	ldr	r3, [r3, #8]
 80204b0:	4618      	mov	r0, r3
 80204b2:	f7fc ff80 	bl	801d3b6 <lfs_fromle32>
 80204b6:	4602      	mov	r2, r0
 80204b8:	68bb      	ldr	r3, [r7, #8]
 80204ba:	609a      	str	r2, [r3, #8]
            if (err) {
 80204bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80204be:	2b00      	cmp	r3, #0
 80204c0:	d006      	beq.n	80204d0 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80204c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80204c4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80204c8:	f000 810a 	beq.w	80206e0 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80204cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80204ce:	e164      	b.n	802079a <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80204d0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80204d4:	425b      	negs	r3, r3
 80204d6:	b29b      	uxth	r3, r3
 80204d8:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80204da:	68fa      	ldr	r2, [r7, #12]
 80204dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80204de:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80204e2:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 80204e4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80204e8:	9208      	str	r2, [sp, #32]
 80204ea:	4aae      	ldr	r2, [pc, #696]	@ (80207a4 <lfs_dir_compact+0x3c8>)
 80204ec:	9207      	str	r2, [sp, #28]
 80204ee:	9306      	str	r3, [sp, #24]
 80204f0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80204f4:	9305      	str	r3, [sp, #20]
 80204f6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80204fa:	9304      	str	r3, [sp, #16]
 80204fc:	2300      	movs	r3, #0
 80204fe:	9303      	str	r3, [sp, #12]
 8020500:	4ba9      	ldr	r3, [pc, #676]	@ (80207a8 <lfs_dir_compact+0x3cc>)
 8020502:	9302      	str	r3, [sp, #8]
 8020504:	683b      	ldr	r3, [r7, #0]
 8020506:	9301      	str	r3, [sp, #4]
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	9300      	str	r3, [sp, #0]
 802050c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020510:	2200      	movs	r2, #0
 8020512:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8020514:	68f8      	ldr	r0, [r7, #12]
 8020516:	f7fe fa1f 	bl	801e958 <lfs_dir_traverse>
 802051a:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 802051c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802051e:	2b00      	cmp	r3, #0
 8020520:	d006      	beq.n	8020530 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8020522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020524:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020528:	f000 80dc 	beq.w	80206e4 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 802052c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802052e:	e134      	b.n	802079a <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8020530:	68bb      	ldr	r3, [r7, #8]
 8020532:	3318      	adds	r3, #24
 8020534:	4618      	mov	r0, r3
 8020536:	f7fd fb30 	bl	801db9a <lfs_pair_isnull>
 802053a:	4603      	mov	r3, r0
 802053c:	f083 0301 	eor.w	r3, r3, #1
 8020540:	b2db      	uxtb	r3, r3
 8020542:	2b00      	cmp	r3, #0
 8020544:	d022      	beq.n	802058c <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8020546:	68bb      	ldr	r3, [r7, #8]
 8020548:	3318      	adds	r3, #24
 802054a:	4618      	mov	r0, r3
 802054c:	f7fd fbb1 	bl	801dcb2 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8020550:	68bb      	ldr	r3, [r7, #8]
 8020552:	7ddb      	ldrb	r3, [r3, #23]
 8020554:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8020558:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 802055a:	4a94      	ldr	r2, [pc, #592]	@ (80207ac <lfs_dir_compact+0x3d0>)
 802055c:	431a      	orrs	r2, r3
                        dir->tail);
 802055e:	68bb      	ldr	r3, [r7, #8]
 8020560:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8020562:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8020566:	68f8      	ldr	r0, [r7, #12]
 8020568:	f7ff fbec 	bl	801fd44 <lfs_dir_commitattr>
 802056c:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 802056e:	68bb      	ldr	r3, [r7, #8]
 8020570:	3318      	adds	r3, #24
 8020572:	4618      	mov	r0, r3
 8020574:	f7fd fb83 	bl	801dc7e <lfs_pair_fromle32>
                if (err) {
 8020578:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802057a:	2b00      	cmp	r3, #0
 802057c:	d006      	beq.n	802058c <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 802057e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020580:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020584:	f000 80b0 	beq.w	80206e8 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8020588:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802058a:	e106      	b.n	802079a <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 802058c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8020590:	2200      	movs	r2, #0
 8020592:	601a      	str	r2, [r3, #0]
 8020594:	605a      	str	r2, [r3, #4]
 8020596:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8020598:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 802059c:	f083 0301 	eor.w	r3, r3, #1
 80205a0:	b2db      	uxtb	r3, r3
 80205a2:	2b00      	cmp	r3, #0
 80205a4:	d011      	beq.n	80205ca <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80205a6:	68fb      	ldr	r3, [r7, #12]
 80205a8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80205ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80205b0:	4611      	mov	r1, r2
 80205b2:	4618      	mov	r0, r3
 80205b4:	f7fd fc33 	bl	801de1e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80205b8:	68fb      	ldr	r3, [r7, #12]
 80205ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80205be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80205c2:	4611      	mov	r1, r2
 80205c4:	4618      	mov	r0, r3
 80205c6:	f7fd fc2a 	bl	801de1e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80205ca:	68fb      	ldr	r3, [r7, #12]
 80205cc:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80205d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80205d4:	4611      	mov	r1, r2
 80205d6:	4618      	mov	r0, r3
 80205d8:	f7fd fc21 	bl	801de1e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80205dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80205de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80205e2:	f023 0303 	bic.w	r3, r3, #3
 80205e6:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80205e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80205ec:	461a      	mov	r2, r3
 80205ee:	68b9      	ldr	r1, [r7, #8]
 80205f0:	68f8      	ldr	r0, [r7, #12]
 80205f2:	f7ff f981 	bl	801f8f8 <lfs_dir_getgstate>
 80205f6:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 80205f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80205fa:	2b00      	cmp	r3, #0
 80205fc:	d001      	beq.n	8020602 <lfs_dir_compact+0x226>
                return err;
 80205fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020600:	e0cb      	b.n	802079a <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8020602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8020606:	4618      	mov	r0, r3
 8020608:	f7fd fc2e 	bl	801de68 <lfs_gstate_iszero>
 802060c:	4603      	mov	r3, r0
 802060e:	f083 0301 	eor.w	r3, r3, #1
 8020612:	b2db      	uxtb	r3, r3
 8020614:	2b00      	cmp	r3, #0
 8020616:	d016      	beq.n	8020646 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8020618:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802061c:	4618      	mov	r0, r3
 802061e:	f7fd fcc9 	bl	801dfb4 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8020622:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8020626:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 802062a:	4a61      	ldr	r2, [pc, #388]	@ (80207b0 <lfs_dir_compact+0x3d4>)
 802062c:	68f8      	ldr	r0, [r7, #12]
 802062e:	f7ff fb89 	bl	801fd44 <lfs_dir_commitattr>
 8020632:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8020634:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020636:	2b00      	cmp	r3, #0
 8020638:	d005      	beq.n	8020646 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 802063a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802063c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020640:	d054      	beq.n	80206ec <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8020642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020644:	e0a9      	b.n	802079a <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8020646:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 802064a:	4619      	mov	r1, r3
 802064c:	68f8      	ldr	r0, [r7, #12]
 802064e:	f7ff fbf9 	bl	801fe44 <lfs_dir_commitcrc>
 8020652:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8020654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020656:	2b00      	cmp	r3, #0
 8020658:	d005      	beq.n	8020666 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 802065a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802065c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020660:	d046      	beq.n	80206f0 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8020662:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020664:	e099      	b.n	802079a <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8020666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020668:	68fa      	ldr	r2, [r7, #12]
 802066a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 802066c:	6a12      	ldr	r2, [r2, #32]
 802066e:	fbb3 f1f2 	udiv	r1, r3, r2
 8020672:	fb01 f202 	mul.w	r2, r1, r2
 8020676:	1a9b      	subs	r3, r3, r2
 8020678:	2b00      	cmp	r3, #0
 802067a:	d006      	beq.n	802068a <lfs_dir_compact+0x2ae>
 802067c:	4b4d      	ldr	r3, [pc, #308]	@ (80207b4 <lfs_dir_compact+0x3d8>)
 802067e:	4a4e      	ldr	r2, [pc, #312]	@ (80207b8 <lfs_dir_compact+0x3dc>)
 8020680:	f640 0106 	movw	r1, #2054	@ 0x806
 8020684:	484d      	ldr	r0, [pc, #308]	@ (80207bc <lfs_dir_compact+0x3e0>)
 8020686:	f012 ffd7 	bl	8033638 <__assert_func>
            lfs_pair_swap(dir->pair);
 802068a:	68bb      	ldr	r3, [r7, #8]
 802068c:	4618      	mov	r0, r3
 802068e:	f7fd fa6f 	bl	801db70 <lfs_pair_swap>
            dir->count = end - begin;
 8020692:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8020696:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 802069a:	1ad3      	subs	r3, r2, r3
 802069c:	b29a      	uxth	r2, r3
 802069e:	68bb      	ldr	r3, [r7, #8]
 80206a0:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 80206a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80206a4:	68bb      	ldr	r3, [r7, #8]
 80206a6:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80206a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80206aa:	68bb      	ldr	r3, [r7, #8]
 80206ac:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 80206ae:	68fb      	ldr	r3, [r7, #12]
 80206b0:	3348      	adds	r3, #72	@ 0x48
 80206b2:	2200      	movs	r2, #0
 80206b4:	601a      	str	r2, [r3, #0]
 80206b6:	605a      	str	r2, [r3, #4]
 80206b8:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80206ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80206be:	f083 0301 	eor.w	r3, r3, #1
 80206c2:	b2db      	uxtb	r3, r3
 80206c4:	2b00      	cmp	r3, #0
 80206c6:	d065      	beq.n	8020794 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 80206c8:	68fb      	ldr	r3, [r7, #12]
 80206ca:	68fa      	ldr	r2, [r7, #12]
 80206cc:	333c      	adds	r3, #60	@ 0x3c
 80206ce:	3230      	adds	r2, #48	@ 0x30
 80206d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80206d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80206d6:	e05d      	b.n	8020794 <lfs_dir_compact+0x3b8>
        goto relocate;
 80206d8:	bf00      	nop
 80206da:	e00a      	b.n	80206f2 <lfs_dir_compact+0x316>
                    goto relocate;
 80206dc:	bf00      	nop
 80206de:	e008      	b.n	80206f2 <lfs_dir_compact+0x316>
                    goto relocate;
 80206e0:	bf00      	nop
 80206e2:	e006      	b.n	80206f2 <lfs_dir_compact+0x316>
                    goto relocate;
 80206e4:	bf00      	nop
 80206e6:	e004      	b.n	80206f2 <lfs_dir_compact+0x316>
                        goto relocate;
 80206e8:	bf00      	nop
 80206ea:	e002      	b.n	80206f2 <lfs_dir_compact+0x316>
                        goto relocate;
 80206ec:	bf00      	nop
 80206ee:	e000      	b.n	80206f2 <lfs_dir_compact+0x316>
                    goto relocate;
 80206f0:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80206f2:	2301      	movs	r3, #1
 80206f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80206f8:	68fb      	ldr	r3, [r7, #12]
 80206fa:	3310      	adds	r3, #16
 80206fc:	4619      	mov	r1, r3
 80206fe:	68f8      	ldr	r0, [r7, #12]
 8020700:	f7fc fe9f 	bl	801d442 <lfs_cache_drop>
        if (!tired) {
 8020704:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8020708:	f083 0301 	eor.w	r3, r3, #1
 802070c:	b2db      	uxtb	r3, r3
 802070e:	2b00      	cmp	r3, #0
 8020710:	d009      	beq.n	8020726 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8020712:	68bb      	ldr	r3, [r7, #8]
 8020714:	685b      	ldr	r3, [r3, #4]
 8020716:	4a2a      	ldr	r2, [pc, #168]	@ (80207c0 <lfs_dir_compact+0x3e4>)
 8020718:	9200      	str	r2, [sp, #0]
 802071a:	f640 0218 	movw	r2, #2072	@ 0x818
 802071e:	4927      	ldr	r1, [pc, #156]	@ (80207bc <lfs_dir_compact+0x3e0>)
 8020720:	4828      	ldr	r0, [pc, #160]	@ (80207c4 <lfs_dir_compact+0x3e8>)
 8020722:	f012 ffbd 	bl	80336a0 <printf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8020726:	68bb      	ldr	r3, [r7, #8]
 8020728:	2200      	movs	r2, #0
 802072a:	617a      	str	r2, [r7, #20]
 802072c:	2201      	movs	r2, #1
 802072e:	61ba      	str	r2, [r7, #24]
 8020730:	f107 0214 	add.w	r2, r7, #20
 8020734:	4611      	mov	r1, r2
 8020736:	4618      	mov	r0, r3
 8020738:	f7fd fa4a 	bl	801dbd0 <lfs_pair_cmp>
 802073c:	4603      	mov	r3, r0
 802073e:	2b00      	cmp	r3, #0
 8020740:	d10c      	bne.n	802075c <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8020742:	68bb      	ldr	r3, [r7, #8]
 8020744:	685b      	ldr	r3, [r3, #4]
 8020746:	4a1e      	ldr	r2, [pc, #120]	@ (80207c0 <lfs_dir_compact+0x3e4>)
 8020748:	9200      	str	r2, [sp, #0]
 802074a:	f640 021d 	movw	r2, #2077	@ 0x81d
 802074e:	491b      	ldr	r1, [pc, #108]	@ (80207bc <lfs_dir_compact+0x3e0>)
 8020750:	481d      	ldr	r0, [pc, #116]	@ (80207c8 <lfs_dir_compact+0x3ec>)
 8020752:	f012 ffa5 	bl	80336a0 <printf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8020756:	f06f 031b 	mvn.w	r3, #27
 802075a:	e01e      	b.n	802079a <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 802075c:	68bb      	ldr	r3, [r7, #8]
 802075e:	3304      	adds	r3, #4
 8020760:	4619      	mov	r1, r3
 8020762:	68f8      	ldr	r0, [r7, #12]
 8020764:	f7fd fe28 	bl	801e3b8 <lfs_alloc>
 8020768:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 802076a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802076c:	2b00      	cmp	r3, #0
 802076e:	d00c      	beq.n	802078a <lfs_dir_compact+0x3ae>
 8020770:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020772:	f113 0f1c 	cmn.w	r3, #28
 8020776:	d106      	bne.n	8020786 <lfs_dir_compact+0x3aa>
 8020778:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 802077c:	f083 0301 	eor.w	r3, r3, #1
 8020780:	b2db      	uxtb	r3, r3
 8020782:	2b00      	cmp	r3, #0
 8020784:	d001      	beq.n	802078a <lfs_dir_compact+0x3ae>
            return err;
 8020786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020788:	e007      	b.n	802079a <lfs_dir_compact+0x3be>
        }

        tired = false;
 802078a:	2300      	movs	r3, #0
 802078c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 8020790:	bf00      	nop
    while (true) {
 8020792:	e64c      	b.n	802042e <lfs_dir_compact+0x52>
        break;
 8020794:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8020796:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 802079a:	4618      	mov	r0, r3
 802079c:	3768      	adds	r7, #104	@ 0x68
 802079e:	46bd      	mov	sp, r7
 80207a0:	bd80      	pop	{r7, pc}
 80207a2:	bf00      	nop
 80207a4:	08020365 	.word	0x08020365
 80207a8:	400ffc00 	.word	0x400ffc00
 80207ac:	000ffc08 	.word	0x000ffc08
 80207b0:	7ffffc0c 	.word	0x7ffffc0c
 80207b4:	08040f6c 	.word	0x08040f6c
 80207b8:	08044880 	.word	0x08044880
 80207bc:	08040dec 	.word	0x08040dec
 80207c0:	08040f14 	.word	0x08040f14
 80207c4:	08040f94 	.word	0x08040f94
 80207c8:	08040fb8 	.word	0x08040fb8

080207cc <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80207cc:	b590      	push	{r4, r7, lr}
 80207ce:	b097      	sub	sp, #92	@ 0x5c
 80207d0:	af0a      	add	r7, sp, #40	@ 0x28
 80207d2:	60f8      	str	r0, [r7, #12]
 80207d4:	60b9      	str	r1, [r7, #8]
 80207d6:	607a      	str	r2, [r7, #4]
 80207d8:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80207da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80207de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 80207e0:	e058      	b.n	8020894 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 80207e2:	2300      	movs	r3, #0
 80207e4:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 80207e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207e8:	b29b      	uxth	r3, r3
 80207ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80207ec:	b292      	uxth	r2, r2
 80207ee:	4252      	negs	r2, r2
 80207f0:	b292      	uxth	r2, r2
 80207f2:	b212      	sxth	r2, r2
 80207f4:	f107 0118 	add.w	r1, r7, #24
 80207f8:	9108      	str	r1, [sp, #32]
 80207fa:	4979      	ldr	r1, [pc, #484]	@ (80209e0 <lfs_dir_splittingcompact+0x214>)
 80207fc:	9107      	str	r1, [sp, #28]
 80207fe:	9206      	str	r2, [sp, #24]
 8020800:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8020804:	9205      	str	r2, [sp, #20]
 8020806:	9304      	str	r3, [sp, #16]
 8020808:	2300      	movs	r3, #0
 802080a:	9303      	str	r3, [sp, #12]
 802080c:	4b75      	ldr	r3, [pc, #468]	@ (80209e4 <lfs_dir_splittingcompact+0x218>)
 802080e:	9302      	str	r3, [sp, #8]
 8020810:	683b      	ldr	r3, [r7, #0]
 8020812:	9301      	str	r3, [sp, #4]
 8020814:	687b      	ldr	r3, [r7, #4]
 8020816:	9300      	str	r3, [sp, #0]
 8020818:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802081c:	2200      	movs	r2, #0
 802081e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020820:	68f8      	ldr	r0, [r7, #12]
 8020822:	f7fe f899 	bl	801e958 <lfs_dir_traverse>
 8020826:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8020828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802082a:	2b00      	cmp	r3, #0
 802082c:	d001      	beq.n	8020832 <lfs_dir_splittingcompact+0x66>
                return err;
 802082e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020830:	e0d2      	b.n	80209d8 <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8020832:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8020836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020838:	1ad3      	subs	r3, r2, r3
 802083a:	2bfe      	cmp	r3, #254	@ 0xfe
 802083c:	d822      	bhi.n	8020884 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 802083e:	68fb      	ldr	r3, [r7, #12]
 8020840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 8020844:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8020848:	68fb      	ldr	r3, [r7, #12]
 802084a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802084c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 802084e:	2b00      	cmp	r3, #0
 8020850:	d004      	beq.n	802085c <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8020852:	68fb      	ldr	r3, [r7, #12]
 8020854:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 8020858:	085b      	lsrs	r3, r3, #1
 802085a:	e003      	b.n	8020864 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 802085c:	68fb      	ldr	r3, [r7, #12]
 802085e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 8020862:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8020864:	68fa      	ldr	r2, [r7, #12]
 8020866:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8020868:	6a12      	ldr	r2, [r2, #32]
                    && size <= lfs_min(
 802086a:	4611      	mov	r1, r2
 802086c:	4618      	mov	r0, r3
 802086e:	f7fc fd57 	bl	801d320 <lfs_alignup>
 8020872:	4603      	mov	r3, r0
 8020874:	4619      	mov	r1, r3
 8020876:	4620      	mov	r0, r4
 8020878:	f7fc fd2d 	bl	801d2d6 <lfs_min>
 802087c:	4602      	mov	r2, r0
 802087e:	69bb      	ldr	r3, [r7, #24]
 8020880:	429a      	cmp	r2, r3
 8020882:	d20e      	bcs.n	80208a2 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8020884:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8020888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802088a:	1ad3      	subs	r3, r2, r3
 802088c:	085b      	lsrs	r3, r3, #1
 802088e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8020890:	4413      	add	r3, r2
 8020892:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8020894:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8020898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802089a:	1ad3      	subs	r3, r2, r3
 802089c:	2b01      	cmp	r3, #1
 802089e:	d8a0      	bhi.n	80207e2 <lfs_dir_splittingcompact+0x16>
 80208a0:	e000      	b.n	80208a4 <lfs_dir_splittingcompact+0xd8>
                break;
 80208a2:	bf00      	nop
        }

        if (split == begin) {
 80208a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80208a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80208aa:	429a      	cmp	r2, r3
 80208ac:	d02d      	beq.n	802090a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80208ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80208b0:	b29b      	uxth	r3, r3
 80208b2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80208b6:	9202      	str	r2, [sp, #8]
 80208b8:	9301      	str	r3, [sp, #4]
 80208ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80208bc:	9300      	str	r3, [sp, #0]
 80208be:	683b      	ldr	r3, [r7, #0]
 80208c0:	687a      	ldr	r2, [r7, #4]
 80208c2:	68b9      	ldr	r1, [r7, #8]
 80208c4:	68f8      	ldr	r0, [r7, #12]
 80208c6:	f7ff fce3 	bl	8020290 <lfs_dir_split>
 80208ca:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80208cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80208ce:	2b00      	cmp	r3, #0
 80208d0:	d005      	beq.n	80208de <lfs_dir_splittingcompact+0x112>
 80208d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80208d4:	f113 0f1c 	cmn.w	r3, #28
 80208d8:	d001      	beq.n	80208de <lfs_dir_splittingcompact+0x112>
            return err;
 80208da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80208dc:	e07c      	b.n	80209d8 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 80208de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80208e0:	2b00      	cmp	r3, #0
 80208e2:	d00e      	beq.n	8020902 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 80208e4:	68bb      	ldr	r3, [r7, #8]
 80208e6:	681a      	ldr	r2, [r3, #0]
 80208e8:	68bb      	ldr	r3, [r7, #8]
 80208ea:	685b      	ldr	r3, [r3, #4]
 80208ec:	493e      	ldr	r1, [pc, #248]	@ (80209e8 <lfs_dir_splittingcompact+0x21c>)
 80208ee:	9101      	str	r1, [sp, #4]
 80208f0:	9300      	str	r3, [sp, #0]
 80208f2:	4613      	mov	r3, r2
 80208f4:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 80208f8:	493c      	ldr	r1, [pc, #240]	@ (80209ec <lfs_dir_splittingcompact+0x220>)
 80208fa:	483d      	ldr	r0, [pc, #244]	@ (80209f0 <lfs_dir_splittingcompact+0x224>)
 80208fc:	f012 fed0 	bl	80336a0 <printf>
                    dir->pair[0], dir->pair[1]);
            break;
 8020900:	e004      	b.n	802090c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8020902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020904:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 8020908:	e767      	b.n	80207da <lfs_dir_splittingcompact+0xe>
            break;
 802090a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 802090c:	68b9      	ldr	r1, [r7, #8]
 802090e:	68f8      	ldr	r0, [r7, #12]
 8020910:	f7ff fd3d 	bl	802038e <lfs_dir_needsrelocation>
 8020914:	4603      	mov	r3, r0
 8020916:	2b00      	cmp	r3, #0
 8020918:	d04f      	beq.n	80209ba <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 802091a:	68bb      	ldr	r3, [r7, #8]
 802091c:	2200      	movs	r2, #0
 802091e:	613a      	str	r2, [r7, #16]
 8020920:	2201      	movs	r2, #1
 8020922:	617a      	str	r2, [r7, #20]
 8020924:	f107 0210 	add.w	r2, r7, #16
 8020928:	4611      	mov	r1, r2
 802092a:	4618      	mov	r0, r3
 802092c:	f7fd f950 	bl	801dbd0 <lfs_pair_cmp>
 8020930:	4603      	mov	r3, r0
 8020932:	2b00      	cmp	r3, #0
 8020934:	d141      	bne.n	80209ba <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8020936:	68f8      	ldr	r0, [r7, #12]
 8020938:	f004 f8ea 	bl	8024b10 <lfs_fs_size_>
 802093c:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 802093e:	6a3b      	ldr	r3, [r7, #32]
 8020940:	2b00      	cmp	r3, #0
 8020942:	da01      	bge.n	8020948 <lfs_dir_splittingcompact+0x17c>
            return size;
 8020944:	6a3b      	ldr	r3, [r7, #32]
 8020946:	e047      	b.n	80209d8 <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8020948:	68fb      	ldr	r3, [r7, #12]
 802094a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 802094c:	6a3b      	ldr	r3, [r7, #32]
 802094e:	1ad2      	subs	r2, r2, r3
 8020950:	68fb      	ldr	r3, [r7, #12]
 8020952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020954:	08db      	lsrs	r3, r3, #3
 8020956:	429a      	cmp	r2, r3
 8020958:	d92f      	bls.n	80209ba <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 802095a:	68bb      	ldr	r3, [r7, #8]
 802095c:	689b      	ldr	r3, [r3, #8]
 802095e:	4a22      	ldr	r2, [pc, #136]	@ (80209e8 <lfs_dir_splittingcompact+0x21c>)
 8020960:	9200      	str	r2, [sp, #0]
 8020962:	f640 0286 	movw	r2, #2182	@ 0x886
 8020966:	4921      	ldr	r1, [pc, #132]	@ (80209ec <lfs_dir_splittingcompact+0x220>)
 8020968:	4822      	ldr	r0, [pc, #136]	@ (80209f4 <lfs_dir_splittingcompact+0x228>)
 802096a:	f012 fe99 	bl	80336a0 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 802096e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8020972:	9302      	str	r3, [sp, #8]
 8020974:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8020978:	9301      	str	r3, [sp, #4]
 802097a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802097c:	9300      	str	r3, [sp, #0]
 802097e:	683b      	ldr	r3, [r7, #0]
 8020980:	687a      	ldr	r2, [r7, #4]
 8020982:	68b9      	ldr	r1, [r7, #8]
 8020984:	68f8      	ldr	r0, [r7, #12]
 8020986:	f7ff fc83 	bl	8020290 <lfs_dir_split>
 802098a:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 802098c:	69fb      	ldr	r3, [r7, #28]
 802098e:	2b00      	cmp	r3, #0
 8020990:	d005      	beq.n	802099e <lfs_dir_splittingcompact+0x1d2>
 8020992:	69fb      	ldr	r3, [r7, #28]
 8020994:	f113 0f1c 	cmn.w	r3, #28
 8020998:	d001      	beq.n	802099e <lfs_dir_splittingcompact+0x1d2>
                return err;
 802099a:	69fb      	ldr	r3, [r7, #28]
 802099c:	e01c      	b.n	80209d8 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 802099e:	69fb      	ldr	r3, [r7, #28]
 80209a0:	2b00      	cmp	r3, #0
 80209a2:	d007      	beq.n	80209b4 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 80209a4:	4b10      	ldr	r3, [pc, #64]	@ (80209e8 <lfs_dir_splittingcompact+0x21c>)
 80209a6:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 80209aa:	4910      	ldr	r1, [pc, #64]	@ (80209ec <lfs_dir_splittingcompact+0x220>)
 80209ac:	4812      	ldr	r0, [pc, #72]	@ (80209f8 <lfs_dir_splittingcompact+0x22c>)
 80209ae:	f012 fe77 	bl	80336a0 <printf>
 80209b2:	e002      	b.n	80209ba <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 80209b4:	2301      	movs	r3, #1
 80209b6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 80209ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80209be:	9302      	str	r3, [sp, #8]
 80209c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80209c4:	9301      	str	r3, [sp, #4]
 80209c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80209c8:	9300      	str	r3, [sp, #0]
 80209ca:	683b      	ldr	r3, [r7, #0]
 80209cc:	687a      	ldr	r2, [r7, #4]
 80209ce:	68b9      	ldr	r1, [r7, #8]
 80209d0:	68f8      	ldr	r0, [r7, #12]
 80209d2:	f7ff fd03 	bl	80203dc <lfs_dir_compact>
 80209d6:	4603      	mov	r3, r0
}
 80209d8:	4618      	mov	r0, r3
 80209da:	3734      	adds	r7, #52	@ 0x34
 80209dc:	46bd      	mov	sp, r7
 80209de:	bd90      	pop	{r4, r7, pc}
 80209e0:	08020339 	.word	0x08020339
 80209e4:	400ffc00 	.word	0x400ffc00
 80209e8:	08040f14 	.word	0x08040f14
 80209ec:	08040dec 	.word	0x08040dec
 80209f0:	08040ff0 	.word	0x08040ff0
 80209f4:	08041020 	.word	0x08041020
 80209f8:	08041050 	.word	0x08041050

080209fc <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 80209fc:	b5b0      	push	{r4, r5, r7, lr}
 80209fe:	b0a6      	sub	sp, #152	@ 0x98
 8020a00:	af0a      	add	r7, sp, #40	@ 0x28
 8020a02:	60f8      	str	r0, [r7, #12]
 8020a04:	60b9      	str	r1, [r7, #8]
 8020a06:	607a      	str	r2, [r7, #4]
 8020a08:	603b      	str	r3, [r7, #0]
    int state = 0;
 8020a0a:	2300      	movs	r3, #0
 8020a0c:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8020a0e:	2300      	movs	r3, #0
 8020a10:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 8020a14:	2300      	movs	r3, #0
 8020a16:	667b      	str	r3, [r7, #100]	@ 0x64
 8020a18:	e06d      	b.n	8020af6 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8020a1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020a1c:	00db      	lsls	r3, r3, #3
 8020a1e:	683a      	ldr	r2, [r7, #0]
 8020a20:	4413      	add	r3, r2
 8020a22:	681b      	ldr	r3, [r3, #0]
 8020a24:	4618      	mov	r0, r3
 8020a26:	f7fd f99f 	bl	801dd68 <lfs_tag_type3>
 8020a2a:	4603      	mov	r3, r0
 8020a2c:	461a      	mov	r2, r3
 8020a2e:	f240 4301 	movw	r3, #1025	@ 0x401
 8020a32:	429a      	cmp	r2, r3
 8020a34:	d106      	bne.n	8020a44 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8020a36:	68bb      	ldr	r3, [r7, #8]
 8020a38:	8a9b      	ldrh	r3, [r3, #20]
 8020a3a:	3301      	adds	r3, #1
 8020a3c:	b29a      	uxth	r2, r3
 8020a3e:	68bb      	ldr	r3, [r7, #8]
 8020a40:	829a      	strh	r2, [r3, #20]
 8020a42:	e055      	b.n	8020af0 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8020a44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020a46:	00db      	lsls	r3, r3, #3
 8020a48:	683a      	ldr	r2, [r7, #0]
 8020a4a:	4413      	add	r3, r2
 8020a4c:	681b      	ldr	r3, [r3, #0]
 8020a4e:	4618      	mov	r0, r3
 8020a50:	f7fd f98a 	bl	801dd68 <lfs_tag_type3>
 8020a54:	4603      	mov	r3, r0
 8020a56:	461a      	mov	r2, r3
 8020a58:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8020a5c:	429a      	cmp	r2, r3
 8020a5e:	d114      	bne.n	8020a8a <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8020a60:	68bb      	ldr	r3, [r7, #8]
 8020a62:	8a9b      	ldrh	r3, [r3, #20]
 8020a64:	2b00      	cmp	r3, #0
 8020a66:	d106      	bne.n	8020a76 <lfs_dir_relocatingcommit+0x7a>
 8020a68:	4ba4      	ldr	r3, [pc, #656]	@ (8020cfc <lfs_dir_relocatingcommit+0x300>)
 8020a6a:	4aa5      	ldr	r2, [pc, #660]	@ (8020d00 <lfs_dir_relocatingcommit+0x304>)
 8020a6c:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 8020a70:	48a4      	ldr	r0, [pc, #656]	@ (8020d04 <lfs_dir_relocatingcommit+0x308>)
 8020a72:	f012 fde1 	bl	8033638 <__assert_func>
            dir->count -= 1;
 8020a76:	68bb      	ldr	r3, [r7, #8]
 8020a78:	8a9b      	ldrh	r3, [r3, #20]
 8020a7a:	3b01      	subs	r3, #1
 8020a7c:	b29a      	uxth	r2, r3
 8020a7e:	68bb      	ldr	r3, [r7, #8]
 8020a80:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8020a82:	2301      	movs	r3, #1
 8020a84:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8020a88:	e032      	b.n	8020af0 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8020a8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020a8c:	00db      	lsls	r3, r3, #3
 8020a8e:	683a      	ldr	r2, [r7, #0]
 8020a90:	4413      	add	r3, r2
 8020a92:	681b      	ldr	r3, [r3, #0]
 8020a94:	4618      	mov	r0, r3
 8020a96:	f7fd f947 	bl	801dd28 <lfs_tag_type1>
 8020a9a:	4603      	mov	r3, r0
 8020a9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8020aa0:	d126      	bne.n	8020af0 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8020aa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020aa4:	00db      	lsls	r3, r3, #3
 8020aa6:	683a      	ldr	r2, [r7, #0]
 8020aa8:	4413      	add	r3, r2
 8020aaa:	685b      	ldr	r3, [r3, #4]
 8020aac:	681a      	ldr	r2, [r3, #0]
 8020aae:	68bb      	ldr	r3, [r7, #8]
 8020ab0:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8020ab2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020ab4:	00db      	lsls	r3, r3, #3
 8020ab6:	683a      	ldr	r2, [r7, #0]
 8020ab8:	4413      	add	r3, r2
 8020aba:	685b      	ldr	r3, [r3, #4]
 8020abc:	685a      	ldr	r2, [r3, #4]
 8020abe:	68bb      	ldr	r3, [r7, #8]
 8020ac0:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8020ac2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020ac4:	00db      	lsls	r3, r3, #3
 8020ac6:	683a      	ldr	r2, [r7, #0]
 8020ac8:	4413      	add	r3, r2
 8020aca:	681b      	ldr	r3, [r3, #0]
 8020acc:	4618      	mov	r0, r3
 8020ace:	f7fd f95b 	bl	801dd88 <lfs_tag_chunk>
 8020ad2:	4603      	mov	r3, r0
 8020ad4:	f003 0301 	and.w	r3, r3, #1
 8020ad8:	2b00      	cmp	r3, #0
 8020ada:	bf14      	ite	ne
 8020adc:	2301      	movne	r3, #1
 8020ade:	2300      	moveq	r3, #0
 8020ae0:	b2da      	uxtb	r2, r3
 8020ae2:	68bb      	ldr	r3, [r7, #8]
 8020ae4:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8020ae6:	68bb      	ldr	r3, [r7, #8]
 8020ae8:	3318      	adds	r3, #24
 8020aea:	4618      	mov	r0, r3
 8020aec:	f7fd f8c7 	bl	801dc7e <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8020af0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020af2:	3301      	adds	r3, #1
 8020af4:	667b      	str	r3, [r7, #100]	@ 0x64
 8020af6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8020af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8020afc:	429a      	cmp	r2, r3
 8020afe:	db8c      	blt.n	8020a1a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8020b00:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8020b04:	2b00      	cmp	r3, #0
 8020b06:	d02b      	beq.n	8020b60 <lfs_dir_relocatingcommit+0x164>
 8020b08:	68bb      	ldr	r3, [r7, #8]
 8020b0a:	8a9b      	ldrh	r3, [r3, #20]
 8020b0c:	2b00      	cmp	r3, #0
 8020b0e:	d127      	bne.n	8020b60 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8020b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	d106      	bne.n	8020b26 <lfs_dir_relocatingcommit+0x12a>
 8020b18:	4b7b      	ldr	r3, [pc, #492]	@ (8020d08 <lfs_dir_relocatingcommit+0x30c>)
 8020b1a:	4a79      	ldr	r2, [pc, #484]	@ (8020d00 <lfs_dir_relocatingcommit+0x304>)
 8020b1c:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 8020b20:	4878      	ldr	r0, [pc, #480]	@ (8020d04 <lfs_dir_relocatingcommit+0x308>)
 8020b22:	f012 fd89 	bl	8033638 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8020b26:	68bb      	ldr	r3, [r7, #8]
 8020b28:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8020b2c:	4619      	mov	r1, r3
 8020b2e:	68f8      	ldr	r0, [r7, #12]
 8020b30:	f003 fb4a 	bl	80241c8 <lfs_fs_pred>
 8020b34:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 8020b36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8020b38:	2b00      	cmp	r3, #0
 8020b3a:	d005      	beq.n	8020b48 <lfs_dir_relocatingcommit+0x14c>
 8020b3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8020b3e:	f113 0f02 	cmn.w	r3, #2
 8020b42:	d001      	beq.n	8020b48 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8020b44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8020b46:	e210      	b.n	8020f6a <lfs_dir_relocatingcommit+0x56e>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8020b48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8020b4a:	f113 0f02 	cmn.w	r3, #2
 8020b4e:	d007      	beq.n	8020b60 <lfs_dir_relocatingcommit+0x164>
 8020b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8020b54:	7ddb      	ldrb	r3, [r3, #23]
 8020b56:	2b00      	cmp	r3, #0
 8020b58:	d002      	beq.n	8020b60 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8020b5a:	2302      	movs	r3, #2
 8020b5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 8020b5e:	e121      	b.n	8020da4 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8020b60:	68bb      	ldr	r3, [r7, #8]
 8020b62:	7d9b      	ldrb	r3, [r3, #22]
 8020b64:	2b00      	cmp	r3, #0
 8020b66:	f000 80fb 	beq.w	8020d60 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8020b6a:	68bb      	ldr	r3, [r7, #8]
 8020b6c:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8020b6e:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 8020b70:	68bb      	ldr	r3, [r7, #8]
 8020b72:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8020b74:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 8020b76:	68bb      	ldr	r3, [r7, #8]
 8020b78:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8020b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020b7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8020b82:	68bb      	ldr	r3, [r7, #8]
 8020b84:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8020b86:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 8020b88:	68fb      	ldr	r3, [r7, #12]
 8020b8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8020b8e:	2b00      	cmp	r3, #0
 8020b90:	d004      	beq.n	8020b9c <lfs_dir_relocatingcommit+0x1a0>
 8020b92:	68fb      	ldr	r3, [r7, #12]
 8020b94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020b98:	3b08      	subs	r3, #8
 8020b9a:	e003      	b.n	8020ba4 <lfs_dir_relocatingcommit+0x1a8>
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020ba2:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8020ba4:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8020ba6:	68bb      	ldr	r3, [r7, #8]
 8020ba8:	3318      	adds	r3, #24
 8020baa:	4618      	mov	r0, r3
 8020bac:	f7fd f881 	bl	801dcb2 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8020bb0:	68bb      	ldr	r3, [r7, #8]
 8020bb2:	68da      	ldr	r2, [r3, #12]
 8020bb4:	68bb      	ldr	r3, [r7, #8]
 8020bb6:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8020bb8:	68fb      	ldr	r3, [r7, #12]
 8020bba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8020bbc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8020bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 8020bc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8020bc6:	9308      	str	r3, [sp, #32]
 8020bc8:	4b50      	ldr	r3, [pc, #320]	@ (8020d0c <lfs_dir_relocatingcommit+0x310>)
 8020bca:	9307      	str	r3, [sp, #28]
 8020bcc:	2300      	movs	r3, #0
 8020bce:	9306      	str	r3, [sp, #24]
 8020bd0:	2300      	movs	r3, #0
 8020bd2:	9305      	str	r3, [sp, #20]
 8020bd4:	2300      	movs	r3, #0
 8020bd6:	9304      	str	r3, [sp, #16]
 8020bd8:	2300      	movs	r3, #0
 8020bda:	9303      	str	r3, [sp, #12]
 8020bdc:	2300      	movs	r3, #0
 8020bde:	9302      	str	r3, [sp, #8]
 8020be0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8020be4:	9301      	str	r3, [sp, #4]
 8020be6:	683b      	ldr	r3, [r7, #0]
 8020be8:	9300      	str	r3, [sp, #0]
 8020bea:	460b      	mov	r3, r1
 8020bec:	68b9      	ldr	r1, [r7, #8]
 8020bee:	68f8      	ldr	r0, [r7, #12]
 8020bf0:	f7fd feb2 	bl	801e958 <lfs_dir_traverse>
 8020bf4:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8020bf6:	68bb      	ldr	r3, [r7, #8]
 8020bf8:	3318      	adds	r3, #24
 8020bfa:	4618      	mov	r0, r3
 8020bfc:	f7fd f83f 	bl	801dc7e <lfs_pair_fromle32>
        if (err) {
 8020c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020c02:	2b00      	cmp	r3, #0
 8020c04:	d00b      	beq.n	8020c1e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8020c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020c08:	f113 0f1c 	cmn.w	r3, #28
 8020c0c:	f000 80aa 	beq.w	8020d64 <lfs_dir_relocatingcommit+0x368>
 8020c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020c12:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020c16:	f000 80a5 	beq.w	8020d64 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8020c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020c1c:	e1a5      	b.n	8020f6a <lfs_dir_relocatingcommit+0x56e>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8020c1e:	f107 031c 	add.w	r3, r7, #28
 8020c22:	2200      	movs	r2, #0
 8020c24:	601a      	str	r2, [r3, #0]
 8020c26:	605a      	str	r2, [r3, #4]
 8020c28:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8020c2a:	68fb      	ldr	r3, [r7, #12]
 8020c2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8020c30:	f107 031c 	add.w	r3, r7, #28
 8020c34:	4611      	mov	r1, r2
 8020c36:	4618      	mov	r0, r3
 8020c38:	f7fd f8f1 	bl	801de1e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8020c3c:	68fb      	ldr	r3, [r7, #12]
 8020c3e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8020c42:	f107 031c 	add.w	r3, r7, #28
 8020c46:	4611      	mov	r1, r2
 8020c48:	4618      	mov	r0, r3
 8020c4a:	f7fd f8e8 	bl	801de1e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8020c4e:	68fb      	ldr	r3, [r7, #12]
 8020c50:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8020c54:	f107 031c 	add.w	r3, r7, #28
 8020c58:	4611      	mov	r1, r2
 8020c5a:	4618      	mov	r0, r3
 8020c5c:	f7fd f8df 	bl	801de1e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8020c60:	69fb      	ldr	r3, [r7, #28]
 8020c62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8020c66:	f023 0303 	bic.w	r3, r3, #3
 8020c6a:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8020c6c:	f107 031c 	add.w	r3, r7, #28
 8020c70:	4618      	mov	r0, r3
 8020c72:	f7fd f8f9 	bl	801de68 <lfs_gstate_iszero>
 8020c76:	4603      	mov	r3, r0
 8020c78:	f083 0301 	eor.w	r3, r3, #1
 8020c7c:	b2db      	uxtb	r3, r3
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	d027      	beq.n	8020cd2 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8020c82:	f107 031c 	add.w	r3, r7, #28
 8020c86:	461a      	mov	r2, r3
 8020c88:	68b9      	ldr	r1, [r7, #8]
 8020c8a:	68f8      	ldr	r0, [r7, #12]
 8020c8c:	f7fe fe34 	bl	801f8f8 <lfs_dir_getgstate>
 8020c90:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 8020c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020c94:	2b00      	cmp	r3, #0
 8020c96:	d001      	beq.n	8020c9c <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8020c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020c9a:	e166      	b.n	8020f6a <lfs_dir_relocatingcommit+0x56e>
            }

            lfs_gstate_tole32(&delta);
 8020c9c:	f107 031c 	add.w	r3, r7, #28
 8020ca0:	4618      	mov	r0, r3
 8020ca2:	f7fd f987 	bl	801dfb4 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8020ca6:	f107 031c 	add.w	r3, r7, #28
 8020caa:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8020cae:	4a18      	ldr	r2, [pc, #96]	@ (8020d10 <lfs_dir_relocatingcommit+0x314>)
 8020cb0:	68f8      	ldr	r0, [r7, #12]
 8020cb2:	f7ff f847 	bl	801fd44 <lfs_dir_commitattr>
 8020cb6:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8020cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020cba:	2b00      	cmp	r3, #0
 8020cbc:	d009      	beq.n	8020cd2 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8020cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020cc0:	f113 0f1c 	cmn.w	r3, #28
 8020cc4:	d050      	beq.n	8020d68 <lfs_dir_relocatingcommit+0x36c>
 8020cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020cc8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020ccc:	d04c      	beq.n	8020d68 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8020cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020cd0:	e14b      	b.n	8020f6a <lfs_dir_relocatingcommit+0x56e>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8020cd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8020cd6:	4619      	mov	r1, r3
 8020cd8:	68f8      	ldr	r0, [r7, #12]
 8020cda:	f7ff f8b3 	bl	801fe44 <lfs_dir_commitcrc>
 8020cde:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 8020ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020ce2:	2b00      	cmp	r3, #0
 8020ce4:	d016      	beq.n	8020d14 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8020ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020ce8:	f113 0f1c 	cmn.w	r3, #28
 8020cec:	d03e      	beq.n	8020d6c <lfs_dir_relocatingcommit+0x370>
 8020cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020cf0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8020cf4:	d03a      	beq.n	8020d6c <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8020cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020cf8:	e137      	b.n	8020f6a <lfs_dir_relocatingcommit+0x56e>
 8020cfa:	bf00      	nop
 8020cfc:	0804107c 	.word	0x0804107c
 8020d00:	08044890 	.word	0x08044890
 8020d04:	08040dec 	.word	0x08040dec
 8020d08:	0804108c 	.word	0x0804108c
 8020d0c:	08020365 	.word	0x08020365
 8020d10:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8020d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020d16:	68fa      	ldr	r2, [r7, #12]
 8020d18:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8020d1a:	6a12      	ldr	r2, [r2, #32]
 8020d1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8020d20:	fb01 f202 	mul.w	r2, r1, r2
 8020d24:	1a9b      	subs	r3, r3, r2
 8020d26:	2b00      	cmp	r3, #0
 8020d28:	d006      	beq.n	8020d38 <lfs_dir_relocatingcommit+0x33c>
 8020d2a:	4b92      	ldr	r3, [pc, #584]	@ (8020f74 <lfs_dir_relocatingcommit+0x578>)
 8020d2c:	4a92      	ldr	r2, [pc, #584]	@ (8020f78 <lfs_dir_relocatingcommit+0x57c>)
 8020d2e:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8020d32:	4892      	ldr	r0, [pc, #584]	@ (8020f7c <lfs_dir_relocatingcommit+0x580>)
 8020d34:	f012 fc80 	bl	8033638 <__assert_func>
        dir->off = commit.off;
 8020d38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8020d3a:	68bb      	ldr	r3, [r7, #8]
 8020d3c:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8020d3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8020d40:	68bb      	ldr	r3, [r7, #8]
 8020d42:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8020d44:	68fb      	ldr	r3, [r7, #12]
 8020d46:	68fa      	ldr	r2, [r7, #12]
 8020d48:	333c      	adds	r3, #60	@ 0x3c
 8020d4a:	3230      	adds	r2, #48	@ 0x30
 8020d4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8020d4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8020d52:	68fb      	ldr	r3, [r7, #12]
 8020d54:	3348      	adds	r3, #72	@ 0x48
 8020d56:	2200      	movs	r2, #0
 8020d58:	601a      	str	r2, [r3, #0]
 8020d5a:	605a      	str	r2, [r3, #4]
 8020d5c:	609a      	str	r2, [r3, #8]
 8020d5e:	e021      	b.n	8020da4 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8020d60:	bf00      	nop
 8020d62:	e004      	b.n	8020d6e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8020d64:	bf00      	nop
 8020d66:	e002      	b.n	8020d6e <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8020d68:	bf00      	nop
 8020d6a:	e000      	b.n	8020d6e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8020d6c:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8020d6e:	68fb      	ldr	r3, [r7, #12]
 8020d70:	3310      	adds	r3, #16
 8020d72:	4619      	mov	r1, r3
 8020d74:	68f8      	ldr	r0, [r7, #12]
 8020d76:	f7fc fb64 	bl	801d442 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8020d7a:	68bb      	ldr	r3, [r7, #8]
 8020d7c:	8a9b      	ldrh	r3, [r3, #20]
 8020d7e:	9302      	str	r3, [sp, #8]
 8020d80:	2300      	movs	r3, #0
 8020d82:	9301      	str	r3, [sp, #4]
 8020d84:	68bb      	ldr	r3, [r7, #8]
 8020d86:	9300      	str	r3, [sp, #0]
 8020d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8020d8c:	683a      	ldr	r2, [r7, #0]
 8020d8e:	68b9      	ldr	r1, [r7, #8]
 8020d90:	68f8      	ldr	r0, [r7, #12]
 8020d92:	f7ff fd1b 	bl	80207cc <lfs_dir_splittingcompact>
 8020d96:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8020d98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8020d9a:	2b00      	cmp	r3, #0
 8020d9c:	da01      	bge.n	8020da2 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8020d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8020da0:	e0e3      	b.n	8020f6a <lfs_dir_relocatingcommit+0x56e>
    }

    goto fixmlist;
 8020da2:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8020da4:	687b      	ldr	r3, [r7, #4]
 8020da6:	681b      	ldr	r3, [r3, #0]
 8020da8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020daa:	687b      	ldr	r3, [r7, #4]
 8020dac:	3304      	adds	r3, #4
 8020dae:	681b      	ldr	r3, [r3, #0]
 8020db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8020db2:	68fb      	ldr	r3, [r7, #12]
 8020db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020db6:	663b      	str	r3, [r7, #96]	@ 0x60
 8020db8:	e0d2      	b.n	8020f60 <lfs_dir_relocatingcommit+0x564>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8020dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020dbc:	3308      	adds	r3, #8
 8020dbe:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8020dc2:	4611      	mov	r1, r2
 8020dc4:	4618      	mov	r0, r3
 8020dc6:	f7fc ff03 	bl	801dbd0 <lfs_pair_cmp>
 8020dca:	4603      	mov	r3, r0
 8020dcc:	2b00      	cmp	r3, #0
 8020dce:	f040 80c4 	bne.w	8020f5a <lfs_dir_relocatingcommit+0x55e>
            d->m = *dir;
 8020dd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020dd4:	68ba      	ldr	r2, [r7, #8]
 8020dd6:	f103 0408 	add.w	r4, r3, #8
 8020dda:	4615      	mov	r5, r2
 8020ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020de0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8020de8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020dea:	3308      	adds	r3, #8
 8020dec:	687a      	ldr	r2, [r7, #4]
 8020dee:	429a      	cmp	r2, r3
 8020df0:	f000 80a9 	beq.w	8020f46 <lfs_dir_relocatingcommit+0x54a>
                for (int i = 0; i < attrcount; i++) {
 8020df4:	2300      	movs	r3, #0
 8020df6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020df8:	e07b      	b.n	8020ef2 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8020dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020dfc:	00db      	lsls	r3, r3, #3
 8020dfe:	683a      	ldr	r2, [r7, #0]
 8020e00:	4413      	add	r3, r2
 8020e02:	681b      	ldr	r3, [r3, #0]
 8020e04:	4618      	mov	r0, r3
 8020e06:	f7fc ffaf 	bl	801dd68 <lfs_tag_type3>
 8020e0a:	4603      	mov	r3, r0
 8020e0c:	461a      	mov	r2, r3
 8020e0e:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8020e12:	429a      	cmp	r2, r3
 8020e14:	d115      	bne.n	8020e42 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8020e16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020e18:	889c      	ldrh	r4, [r3, #4]
 8020e1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020e1c:	00db      	lsls	r3, r3, #3
 8020e1e:	683a      	ldr	r2, [r7, #0]
 8020e20:	4413      	add	r3, r2
 8020e22:	681b      	ldr	r3, [r3, #0]
 8020e24:	4618      	mov	r0, r3
 8020e26:	f7fc ffc9 	bl	801ddbc <lfs_tag_id>
 8020e2a:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8020e2c:	429c      	cmp	r4, r3
 8020e2e:	d108      	bne.n	8020e42 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8020e30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020e32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020e36:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8020e38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020e3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020e3e:	60da      	str	r2, [r3, #12]
 8020e40:	e054      	b.n	8020eec <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8020e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020e44:	00db      	lsls	r3, r3, #3
 8020e46:	683a      	ldr	r2, [r7, #0]
 8020e48:	4413      	add	r3, r2
 8020e4a:	681b      	ldr	r3, [r3, #0]
 8020e4c:	4618      	mov	r0, r3
 8020e4e:	f7fc ff8b 	bl	801dd68 <lfs_tag_type3>
 8020e52:	4603      	mov	r3, r0
 8020e54:	461a      	mov	r2, r3
 8020e56:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8020e5a:	429a      	cmp	r2, r3
 8020e5c:	d11c      	bne.n	8020e98 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8020e5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020e60:	889c      	ldrh	r4, [r3, #4]
 8020e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020e64:	00db      	lsls	r3, r3, #3
 8020e66:	683a      	ldr	r2, [r7, #0]
 8020e68:	4413      	add	r3, r2
 8020e6a:	681b      	ldr	r3, [r3, #0]
 8020e6c:	4618      	mov	r0, r3
 8020e6e:	f7fc ffa5 	bl	801ddbc <lfs_tag_id>
 8020e72:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8020e74:	429c      	cmp	r4, r3
 8020e76:	d90f      	bls.n	8020e98 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8020e78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020e7a:	889b      	ldrh	r3, [r3, #4]
 8020e7c:	3b01      	subs	r3, #1
 8020e7e:	b29a      	uxth	r2, r3
 8020e80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020e82:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8020e84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020e86:	799b      	ldrb	r3, [r3, #6]
 8020e88:	2b02      	cmp	r3, #2
 8020e8a:	d12f      	bne.n	8020eec <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8020e8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020e90:	1e5a      	subs	r2, r3, #1
 8020e92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020e94:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8020e96:	e029      	b.n	8020eec <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8020e98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020e9a:	00db      	lsls	r3, r3, #3
 8020e9c:	683a      	ldr	r2, [r7, #0]
 8020e9e:	4413      	add	r3, r2
 8020ea0:	681b      	ldr	r3, [r3, #0]
 8020ea2:	4618      	mov	r0, r3
 8020ea4:	f7fc ff60 	bl	801dd68 <lfs_tag_type3>
 8020ea8:	4603      	mov	r3, r0
 8020eaa:	461a      	mov	r2, r3
 8020eac:	f240 4301 	movw	r3, #1025	@ 0x401
 8020eb0:	429a      	cmp	r2, r3
 8020eb2:	d11b      	bne.n	8020eec <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8020eb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020eb6:	889c      	ldrh	r4, [r3, #4]
 8020eb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020eba:	00db      	lsls	r3, r3, #3
 8020ebc:	683a      	ldr	r2, [r7, #0]
 8020ebe:	4413      	add	r3, r2
 8020ec0:	681b      	ldr	r3, [r3, #0]
 8020ec2:	4618      	mov	r0, r3
 8020ec4:	f7fc ff7a 	bl	801ddbc <lfs_tag_id>
 8020ec8:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8020eca:	429c      	cmp	r4, r3
 8020ecc:	d30e      	bcc.n	8020eec <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 8020ece:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020ed0:	889b      	ldrh	r3, [r3, #4]
 8020ed2:	3301      	adds	r3, #1
 8020ed4:	b29a      	uxth	r2, r3
 8020ed6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020ed8:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8020eda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020edc:	799b      	ldrb	r3, [r3, #6]
 8020ede:	2b02      	cmp	r3, #2
 8020ee0:	d104      	bne.n	8020eec <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8020ee2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020ee6:	1c5a      	adds	r2, r3, #1
 8020ee8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020eea:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 8020eec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020eee:	3301      	adds	r3, #1
 8020ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020ef2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8020ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8020ef8:	429a      	cmp	r2, r3
 8020efa:	f6ff af7e 	blt.w	8020dfa <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8020efe:	e022      	b.n	8020f46 <lfs_dir_relocatingcommit+0x54a>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 8020f00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020f02:	f103 0220 	add.w	r2, r3, #32
 8020f06:	68fb      	ldr	r3, [r7, #12]
 8020f08:	3320      	adds	r3, #32
 8020f0a:	4619      	mov	r1, r3
 8020f0c:	4610      	mov	r0, r2
 8020f0e:	f7fc fe5f 	bl	801dbd0 <lfs_pair_cmp>
 8020f12:	4603      	mov	r3, r0
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	d007      	beq.n	8020f28 <lfs_dir_relocatingcommit+0x52c>
                    d->id -= d->m.count;
 8020f18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020f1a:	889a      	ldrh	r2, [r3, #4]
 8020f1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020f1e:	8b9b      	ldrh	r3, [r3, #28]
 8020f20:	1ad3      	subs	r3, r2, r3
 8020f22:	b29a      	uxth	r2, r3
 8020f24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020f26:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8020f28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020f2a:	f103 0108 	add.w	r1, r3, #8
 8020f2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020f30:	3320      	adds	r3, #32
 8020f32:	461a      	mov	r2, r3
 8020f34:	68f8      	ldr	r0, [r7, #12]
 8020f36:	f7fe fcc3 	bl	801f8c0 <lfs_dir_fetch>
 8020f3a:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 8020f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020f3e:	2b00      	cmp	r3, #0
 8020f40:	d001      	beq.n	8020f46 <lfs_dir_relocatingcommit+0x54a>
                    return err;
 8020f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020f44:	e011      	b.n	8020f6a <lfs_dir_relocatingcommit+0x56e>
            while (d->id >= d->m.count && d->m.split) {
 8020f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020f48:	889a      	ldrh	r2, [r3, #4]
 8020f4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020f4c:	8b9b      	ldrh	r3, [r3, #28]
 8020f4e:	429a      	cmp	r2, r3
 8020f50:	d303      	bcc.n	8020f5a <lfs_dir_relocatingcommit+0x55e>
 8020f52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020f54:	7fdb      	ldrb	r3, [r3, #31]
 8020f56:	2b00      	cmp	r3, #0
 8020f58:	d1d2      	bne.n	8020f00 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8020f5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020f5c:	681b      	ldr	r3, [r3, #0]
 8020f5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8020f60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020f62:	2b00      	cmp	r3, #0
 8020f64:	f47f af29 	bne.w	8020dba <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8020f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8020f6a:	4618      	mov	r0, r3
 8020f6c:	3770      	adds	r7, #112	@ 0x70
 8020f6e:	46bd      	mov	sp, r7
 8020f70:	bdb0      	pop	{r4, r5, r7, pc}
 8020f72:	bf00      	nop
 8020f74:	08040f6c 	.word	0x08040f6c
 8020f78:	08044890 	.word	0x08044890
 8020f7c:	08040dec 	.word	0x08040dec

08020f80 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8020f80:	b5b0      	push	{r4, r5, r7, lr}
 8020f82:	b0bc      	sub	sp, #240	@ 0xf0
 8020f84:	af04      	add	r7, sp, #16
 8020f86:	60f8      	str	r0, [r7, #12]
 8020f88:	60b9      	str	r1, [r7, #8]
 8020f8a:	607a      	str	r2, [r7, #4]
 8020f8c:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8020f8e:	68fb      	ldr	r3, [r7, #12]
 8020f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020f92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8020f96:	e045      	b.n	8021024 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8020f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020f9c:	3308      	adds	r3, #8
 8020f9e:	68ba      	ldr	r2, [r7, #8]
 8020fa0:	429a      	cmp	r2, r3
 8020fa2:	d03a      	beq.n	802101a <lfs_dir_orphaningcommit+0x9a>
 8020fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020fa8:	3308      	adds	r3, #8
 8020faa:	68ba      	ldr	r2, [r7, #8]
 8020fac:	4611      	mov	r1, r2
 8020fae:	4618      	mov	r0, r3
 8020fb0:	f7fc fe0e 	bl	801dbd0 <lfs_pair_cmp>
 8020fb4:	4603      	mov	r3, r0
 8020fb6:	2b00      	cmp	r3, #0
 8020fb8:	d12f      	bne.n	802101a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8020fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020fbe:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8020fc0:	2b01      	cmp	r3, #1
 8020fc2:	d12a      	bne.n	802101a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8020fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8020fce:	2b00      	cmp	r3, #0
 8020fd0:	d023      	beq.n	802101a <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8020fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8020fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020fd8:	68fb      	ldr	r3, [r7, #12]
 8020fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8020fde:	429a      	cmp	r2, r3
 8020fe0:	d91b      	bls.n	802101a <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8020fe2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8020fe6:	68f8      	ldr	r0, [r7, #12]
 8020fe8:	f001 fa3e 	bl	8022468 <lfs_file_outline>
 8020fec:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8020ff0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8020ff4:	2b00      	cmp	r3, #0
 8020ff6:	d002      	beq.n	8020ffe <lfs_dir_orphaningcommit+0x7e>
                return err;
 8020ff8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8020ffc:	e2ad      	b.n	802155a <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8020ffe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8021002:	68f8      	ldr	r0, [r7, #12]
 8021004:	f001 fa52 	bl	80224ac <lfs_file_flush>
 8021008:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 802100c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8021010:	2b00      	cmp	r3, #0
 8021012:	d002      	beq.n	802101a <lfs_dir_orphaningcommit+0x9a>
                return err;
 8021014:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8021018:	e29f      	b.n	802155a <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 802101a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802101e:	681b      	ldr	r3, [r3, #0]
 8021020:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8021024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021028:	2b00      	cmp	r3, #0
 802102a:	d1b5      	bne.n	8020f98 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 802102c:	68bb      	ldr	r3, [r7, #8]
 802102e:	681b      	ldr	r3, [r3, #0]
 8021030:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8021034:	68bb      	ldr	r3, [r7, #8]
 8021036:	685b      	ldr	r3, [r3, #4]
 8021038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 802103c:	68bb      	ldr	r3, [r7, #8]
 802103e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8021042:	461d      	mov	r5, r3
 8021044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021048:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802104c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8021050:	68ba      	ldr	r2, [r7, #8]
 8021052:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8021056:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 802105a:	9301      	str	r3, [sp, #4]
 802105c:	683b      	ldr	r3, [r7, #0]
 802105e:	9300      	str	r3, [sp, #0]
 8021060:	687b      	ldr	r3, [r7, #4]
 8021062:	68f8      	ldr	r0, [r7, #12]
 8021064:	f7ff fcca 	bl	80209fc <lfs_dir_relocatingcommit>
 8021068:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 802106c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021070:	2b00      	cmp	r3, #0
 8021072:	da02      	bge.n	802107a <lfs_dir_orphaningcommit+0xfa>
        return state;
 8021074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021078:	e26f      	b.n	802155a <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 802107a:	68bb      	ldr	r3, [r7, #8]
 802107c:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8021080:	4611      	mov	r1, r2
 8021082:	4618      	mov	r0, r3
 8021084:	f7fc fda4 	bl	801dbd0 <lfs_pair_cmp>
 8021088:	4603      	mov	r3, r0
 802108a:	2b00      	cmp	r3, #0
 802108c:	d109      	bne.n	80210a2 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 802108e:	68bb      	ldr	r3, [r7, #8]
 8021090:	461d      	mov	r5, r3
 8021092:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8021096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802109a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 802109e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 80210a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80210a6:	2b02      	cmp	r3, #2
 80210a8:	d14a      	bne.n	8021140 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 80210aa:	68fb      	ldr	r3, [r7, #12]
 80210ac:	3348      	adds	r3, #72	@ 0x48
 80210ae:	461a      	mov	r2, r3
 80210b0:	68b9      	ldr	r1, [r7, #8]
 80210b2:	68f8      	ldr	r0, [r7, #12]
 80210b4:	f7fe fc20 	bl	801f8f8 <lfs_dir_getgstate>
 80210b8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 80210bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80210c0:	2b00      	cmp	r3, #0
 80210c2:	d002      	beq.n	80210ca <lfs_dir_orphaningcommit+0x14a>
            return err;
 80210c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80210c8:	e247      	b.n	802155a <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80210ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80210cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 80210d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80210d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 80210d6:	68bb      	ldr	r3, [r7, #8]
 80210d8:	3318      	adds	r3, #24
 80210da:	4618      	mov	r0, r3
 80210dc:	f7fc fde9 	bl	801dcb2 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80210e0:	68bb      	ldr	r3, [r7, #8]
 80210e2:	7ddb      	ldrb	r3, [r3, #23]
 80210e4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80210e8:	051a      	lsls	r2, r3, #20
 80210ea:	4bc2      	ldr	r3, [pc, #776]	@ (80213f4 <lfs_dir_orphaningcommit+0x474>)
 80210ec:	4313      	orrs	r3, r2
 80210ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80210f0:	68bb      	ldr	r3, [r7, #8]
 80210f2:	3318      	adds	r3, #24
 80210f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80210f6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80210fa:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80210fe:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8021102:	2000      	movs	r0, #0
 8021104:	9001      	str	r0, [sp, #4]
 8021106:	2001      	movs	r0, #1
 8021108:	9000      	str	r0, [sp, #0]
 802110a:	68f8      	ldr	r0, [r7, #12]
 802110c:	f7ff fc76 	bl	80209fc <lfs_dir_relocatingcommit>
 8021110:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8021114:	68bb      	ldr	r3, [r7, #8]
 8021116:	3318      	adds	r3, #24
 8021118:	4618      	mov	r0, r3
 802111a:	f7fc fdb0 	bl	801dc7e <lfs_pair_fromle32>
        if (state < 0) {
 802111e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021122:	2b00      	cmp	r3, #0
 8021124:	da02      	bge.n	802112c <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8021126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802112a:	e216      	b.n	802155a <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 802112c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8021130:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8021134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021138:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802113c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8021140:	2300      	movs	r3, #0
 8021142:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 8021146:	e1fc      	b.n	8021542 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8021148:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 802114c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8021150:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8021154:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8021158:	4ca7      	ldr	r4, [pc, #668]	@ (80213f8 <lfs_dir_orphaningcommit+0x478>)
 802115a:	9403      	str	r4, [sp, #12]
 802115c:	9102      	str	r1, [sp, #8]
 802115e:	9201      	str	r2, [sp, #4]
 8021160:	9300      	str	r3, [sp, #0]
 8021162:	4603      	mov	r3, r0
 8021164:	f640 128c 	movw	r2, #2444	@ 0x98c
 8021168:	49a4      	ldr	r1, [pc, #656]	@ (80213fc <lfs_dir_orphaningcommit+0x47c>)
 802116a:	48a5      	ldr	r0, [pc, #660]	@ (8021400 <lfs_dir_orphaningcommit+0x480>)
 802116c:	f012 fa98 	bl	80336a0 <printf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8021170:	2300      	movs	r3, #0
 8021172:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8021176:	68fb      	ldr	r3, [r7, #12]
 8021178:	f103 0220 	add.w	r2, r3, #32
 802117c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8021180:	4611      	mov	r1, r2
 8021182:	4618      	mov	r0, r3
 8021184:	f7fc fd24 	bl	801dbd0 <lfs_pair_cmp>
 8021188:	4603      	mov	r3, r0
 802118a:	2b00      	cmp	r3, #0
 802118c:	d107      	bne.n	802119e <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 802118e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8021192:	68fb      	ldr	r3, [r7, #12]
 8021194:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8021196:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 802119a:	68fb      	ldr	r3, [r7, #12]
 802119c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 802119e:	68fb      	ldr	r3, [r7, #12]
 80211a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80211a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80211a6:	e037      	b.n	8021218 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 80211a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80211ac:	f103 0208 	add.w	r2, r3, #8
 80211b0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80211b4:	4611      	mov	r1, r2
 80211b6:	4618      	mov	r0, r3
 80211b8:	f7fc fd0a 	bl	801dbd0 <lfs_pair_cmp>
 80211bc:	4603      	mov	r3, r0
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d109      	bne.n	80211d6 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80211c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80211c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80211ca:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80211cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80211d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80211d4:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80211d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80211da:	799b      	ldrb	r3, [r3, #6]
 80211dc:	2b02      	cmp	r3, #2
 80211de:	d116      	bne.n	802120e <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80211e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80211e4:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80211e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80211ec:	4611      	mov	r1, r2
 80211ee:	4618      	mov	r0, r3
 80211f0:	f7fc fcee 	bl	801dbd0 <lfs_pair_cmp>
 80211f4:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	d109      	bne.n	802120e <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80211fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80211fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8021202:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8021204:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8021208:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 802120c:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 802120e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8021212:	681b      	ldr	r3, [r3, #0]
 8021214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8021218:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 802121c:	2b00      	cmp	r3, #0
 802121e:	d1c3      	bne.n	80211a8 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8021220:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8021224:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8021228:	4619      	mov	r1, r3
 802122a:	68f8      	ldr	r0, [r7, #12]
 802122c:	f003 f87e 	bl	802432c <lfs_fs_parent>
 8021230:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8021234:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8021238:	2b00      	cmp	r3, #0
 802123a:	da07      	bge.n	802124c <lfs_dir_orphaningcommit+0x2cc>
 802123c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8021240:	f113 0f02 	cmn.w	r3, #2
 8021244:	d002      	beq.n	802124c <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8021246:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 802124a:	e186      	b.n	802155a <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 802124c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8021250:	f113 0f02 	cmn.w	r3, #2
 8021254:	bf14      	ite	ne
 8021256:	2301      	movne	r3, #1
 8021258:	2300      	moveq	r3, #0
 802125a:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 802125e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8021262:	f113 0f02 	cmn.w	r3, #2
 8021266:	f000 809e 	beq.w	80213a6 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 802126a:	2101      	movs	r1, #1
 802126c:	68f8      	ldr	r0, [r7, #12]
 802126e:	f003 f8f5 	bl	802445c <lfs_fs_preporphans>
 8021272:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 8021276:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 802127a:	2b00      	cmp	r3, #0
 802127c:	d002      	beq.n	8021284 <lfs_dir_orphaningcommit+0x304>
                return err;
 802127e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8021282:	e16a      	b.n	802155a <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8021284:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8021288:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 802128c:	68fb      	ldr	r3, [r7, #12]
 802128e:	3330      	adds	r3, #48	@ 0x30
 8021290:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8021294:	4611      	mov	r1, r2
 8021296:	4618      	mov	r0, r3
 8021298:	f7fc fe4c 	bl	801df34 <lfs_gstate_hasmovehere>
 802129c:	4603      	mov	r3, r0
 802129e:	2b00      	cmp	r3, #0
 80212a0:	d02d      	beq.n	80212fe <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80212a2:	68fb      	ldr	r3, [r7, #12]
 80212a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80212a6:	4618      	mov	r0, r3
 80212a8:	f7fc fd88 	bl	801ddbc <lfs_tag_id>
 80212ac:	4603      	mov	r3, r0
 80212ae:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 80212b2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80212b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80212b6:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 80212ba:	484f      	ldr	r0, [pc, #316]	@ (80213f8 <lfs_dir_orphaningcommit+0x478>)
 80212bc:	9002      	str	r0, [sp, #8]
 80212be:	9201      	str	r2, [sp, #4]
 80212c0:	9300      	str	r3, [sp, #0]
 80212c2:	460b      	mov	r3, r1
 80212c4:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 80212c8:	494c      	ldr	r1, [pc, #304]	@ (80213fc <lfs_dir_orphaningcommit+0x47c>)
 80212ca:	484e      	ldr	r0, [pc, #312]	@ (8021404 <lfs_dir_orphaningcommit+0x484>)
 80212cc:	f012 f9e8 	bl	80336a0 <printf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80212d0:	2200      	movs	r2, #0
 80212d2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80212d6:	68f8      	ldr	r0, [r7, #12]
 80212d8:	f003 f910 	bl	80244fc <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80212dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80212e0:	4618      	mov	r0, r3
 80212e2:	f7fc fd6b 	bl	801ddbc <lfs_tag_id>
 80212e6:	4603      	mov	r3, r0
 80212e8:	461a      	mov	r2, r3
 80212ea:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80212ee:	4293      	cmp	r3, r2
 80212f0:	d205      	bcs.n	80212fe <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80212f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80212f6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80212fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80212fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8021300:	657b      	str	r3, [r7, #84]	@ 0x54
 8021302:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8021304:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 8021306:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802130a:	4618      	mov	r0, r3
 802130c:	f7fc fcd1 	bl	801dcb2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8021310:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8021314:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8021318:	4293      	cmp	r3, r2
 802131a:	d007      	beq.n	802132c <lfs_dir_orphaningcommit+0x3ac>
 802131c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8021320:	029b      	lsls	r3, r3, #10
 8021322:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8021326:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 802132a:	e000      	b.n	802132e <lfs_dir_orphaningcommit+0x3ae>
 802132c:	2300      	movs	r3, #0
 802132e:	647b      	str	r3, [r7, #68]	@ 0x44
 8021330:	2300      	movs	r3, #0
 8021332:	64bb      	str	r3, [r7, #72]	@ 0x48
 8021334:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8021338:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802133a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802133e:	653b      	str	r3, [r7, #80]	@ 0x50
 8021340:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8021344:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8021348:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 802134c:	2000      	movs	r0, #0
 802134e:	9001      	str	r0, [sp, #4]
 8021350:	2002      	movs	r0, #2
 8021352:	9000      	str	r0, [sp, #0]
 8021354:	68f8      	ldr	r0, [r7, #12]
 8021356:	f7ff fb51 	bl	80209fc <lfs_dir_relocatingcommit>
 802135a:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 802135e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8021362:	4618      	mov	r0, r3
 8021364:	f7fc fc8b 	bl	801dc7e <lfs_pair_fromle32>
            if (state < 0) {
 8021368:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802136c:	2b00      	cmp	r3, #0
 802136e:	da02      	bge.n	8021376 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8021370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021374:	e0f1      	b.n	802155a <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8021376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802137a:	2b01      	cmp	r3, #1
 802137c:	d113      	bne.n	80213a6 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 802137e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8021384:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021386:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 802138a:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 802138e:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8021392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021396:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802139a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 802139e:	2301      	movs	r3, #1
 80213a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80213a4:	e0cd      	b.n	8021542 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 80213a6:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80213aa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80213ae:	4619      	mov	r1, r3
 80213b0:	68f8      	ldr	r0, [r7, #12]
 80213b2:	f002 ff09 	bl	80241c8 <lfs_fs_pred>
 80213b6:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 80213ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80213be:	2b00      	cmp	r3, #0
 80213c0:	d007      	beq.n	80213d2 <lfs_dir_orphaningcommit+0x452>
 80213c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80213c6:	f113 0f02 	cmn.w	r3, #2
 80213ca:	d002      	beq.n	80213d2 <lfs_dir_orphaningcommit+0x452>
            return err;
 80213cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80213d0:	e0c3      	b.n	802155a <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80213d2:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	d01a      	beq.n	8021410 <lfs_dir_orphaningcommit+0x490>
 80213da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80213de:	f113 0f02 	cmn.w	r3, #2
 80213e2:	d115      	bne.n	8021410 <lfs_dir_orphaningcommit+0x490>
 80213e4:	4b08      	ldr	r3, [pc, #32]	@ (8021408 <lfs_dir_orphaningcommit+0x488>)
 80213e6:	4a09      	ldr	r2, [pc, #36]	@ (802140c <lfs_dir_orphaningcommit+0x48c>)
 80213e8:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 80213ec:	4803      	ldr	r0, [pc, #12]	@ (80213fc <lfs_dir_orphaningcommit+0x47c>)
 80213ee:	f012 f923 	bl	8033638 <__assert_func>
 80213f2:	bf00      	nop
 80213f4:	000ffc08 	.word	0x000ffc08
 80213f8:	08040f14 	.word	0x08040f14
 80213fc:	08040dec 	.word	0x08040dec
 8021400:	08041094 	.word	0x08041094
 8021404:	080410d0 	.word	0x080410d0
 8021408:	08041114 	.word	0x08041114
 802140c:	080448ac 	.word	0x080448ac

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8021410:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021414:	f113 0f02 	cmn.w	r3, #2
 8021418:	f000 8093 	beq.w	8021542 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 802141c:	68fb      	ldr	r3, [r7, #12]
 802141e:	3330      	adds	r3, #48	@ 0x30
 8021420:	4618      	mov	r0, r3
 8021422:	f7fc fd3e 	bl	801dea2 <lfs_gstate_hasorphans>
 8021426:	4603      	mov	r3, r0
 8021428:	2b00      	cmp	r3, #0
 802142a:	d011      	beq.n	8021450 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 802142c:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8021430:	425b      	negs	r3, r3
 8021432:	b2db      	uxtb	r3, r3
 8021434:	b25b      	sxtb	r3, r3
 8021436:	4619      	mov	r1, r3
 8021438:	68f8      	ldr	r0, [r7, #12]
 802143a:	f003 f80f 	bl	802445c <lfs_fs_preporphans>
 802143e:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 8021442:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021446:	2b00      	cmp	r3, #0
 8021448:	d002      	beq.n	8021450 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 802144a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802144e:	e084      	b.n	802155a <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8021450:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8021454:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8021458:	68fb      	ldr	r3, [r7, #12]
 802145a:	3330      	adds	r3, #48	@ 0x30
 802145c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8021460:	4611      	mov	r1, r2
 8021462:	4618      	mov	r0, r3
 8021464:	f7fc fd66 	bl	801df34 <lfs_gstate_hasmovehere>
 8021468:	4603      	mov	r3, r0
 802146a:	2b00      	cmp	r3, #0
 802146c:	d01c      	beq.n	80214a8 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 802146e:	68fb      	ldr	r3, [r7, #12]
 8021470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021472:	4618      	mov	r0, r3
 8021474:	f7fc fca2 	bl	801ddbc <lfs_tag_id>
 8021478:	4603      	mov	r3, r0
 802147a:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 802147e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8021480:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8021482:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8021486:	4837      	ldr	r0, [pc, #220]	@ (8021564 <lfs_dir_orphaningcommit+0x5e4>)
 8021488:	9002      	str	r0, [sp, #8]
 802148a:	9201      	str	r2, [sp, #4]
 802148c:	9300      	str	r3, [sp, #0]
 802148e:	460b      	mov	r3, r1
 8021490:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 8021494:	4934      	ldr	r1, [pc, #208]	@ (8021568 <lfs_dir_orphaningcommit+0x5e8>)
 8021496:	4835      	ldr	r0, [pc, #212]	@ (802156c <lfs_dir_orphaningcommit+0x5ec>)
 8021498:	f012 f902 	bl	80336a0 <printf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802149c:	2200      	movs	r2, #0
 802149e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80214a2:	68f8      	ldr	r0, [r7, #12]
 80214a4:	f003 f82a 	bl	80244fc <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 80214a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80214aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 80214ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80214b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 80214b4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80214b8:	4618      	mov	r0, r3
 80214ba:	f7fc fbfa 	bl	801dcb2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80214be:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80214c2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80214c6:	4293      	cmp	r3, r2
 80214c8:	d007      	beq.n	80214da <lfs_dir_orphaningcommit+0x55a>
 80214ca:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80214ce:	029b      	lsls	r3, r3, #10
 80214d0:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80214d4:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80214d8:	e000      	b.n	80214dc <lfs_dir_orphaningcommit+0x55c>
 80214da:	2300      	movs	r3, #0
 80214dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80214de:	2300      	movs	r3, #0
 80214e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80214e2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80214e6:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80214ea:	051a      	lsls	r2, r3, #20
 80214ec:	4b20      	ldr	r3, [pc, #128]	@ (8021570 <lfs_dir_orphaningcommit+0x5f0>)
 80214ee:	4313      	orrs	r3, r2
 80214f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80214f2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80214f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80214f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80214fc:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8021500:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8021504:	2000      	movs	r0, #0
 8021506:	9001      	str	r0, [sp, #4]
 8021508:	2002      	movs	r0, #2
 802150a:	9000      	str	r0, [sp, #0]
 802150c:	68f8      	ldr	r0, [r7, #12]
 802150e:	f7ff fa75 	bl	80209fc <lfs_dir_relocatingcommit>
 8021512:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8021516:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802151a:	4618      	mov	r0, r3
 802151c:	f7fc fbaf 	bl	801dc7e <lfs_pair_fromle32>
            if (state < 0) {
 8021520:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021524:	2b00      	cmp	r3, #0
 8021526:	da02      	bge.n	802152e <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8021528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802152c:	e015      	b.n	802155a <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 802152e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8021532:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8021536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802153a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802153e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8021542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021546:	2b01      	cmp	r3, #1
 8021548:	f43f adfe 	beq.w	8021148 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 802154c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8021550:	2b00      	cmp	r3, #0
 8021552:	d001      	beq.n	8021558 <lfs_dir_orphaningcommit+0x5d8>
 8021554:	2303      	movs	r3, #3
 8021556:	e000      	b.n	802155a <lfs_dir_orphaningcommit+0x5da>
 8021558:	2300      	movs	r3, #0
}
 802155a:	4618      	mov	r0, r3
 802155c:	37e0      	adds	r7, #224	@ 0xe0
 802155e:	46bd      	mov	sp, r7
 8021560:	bdb0      	pop	{r4, r5, r7, pc}
 8021562:	bf00      	nop
 8021564:	08040f14 	.word	0x08040f14
 8021568:	08040dec 	.word	0x08040dec
 802156c:	080410d0 	.word	0x080410d0
 8021570:	000ffc08 	.word	0x000ffc08

08021574 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8021574:	b580      	push	{r7, lr}
 8021576:	b086      	sub	sp, #24
 8021578:	af00      	add	r7, sp, #0
 802157a:	60f8      	str	r0, [r7, #12]
 802157c:	60b9      	str	r1, [r7, #8]
 802157e:	607a      	str	r2, [r7, #4]
 8021580:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8021582:	683b      	ldr	r3, [r7, #0]
 8021584:	687a      	ldr	r2, [r7, #4]
 8021586:	68b9      	ldr	r1, [r7, #8]
 8021588:	68f8      	ldr	r0, [r7, #12]
 802158a:	f7ff fcf9 	bl	8020f80 <lfs_dir_orphaningcommit>
 802158e:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8021590:	697b      	ldr	r3, [r7, #20]
 8021592:	2b00      	cmp	r3, #0
 8021594:	da01      	bge.n	802159a <lfs_dir_commit+0x26>
        return orphans;
 8021596:	697b      	ldr	r3, [r7, #20]
 8021598:	e00d      	b.n	80215b6 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 802159a:	697b      	ldr	r3, [r7, #20]
 802159c:	2b00      	cmp	r3, #0
 802159e:	d009      	beq.n	80215b4 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 80215a0:	2100      	movs	r1, #0
 80215a2:	68f8      	ldr	r0, [r7, #12]
 80215a4:	f003 f8cc 	bl	8024740 <lfs_fs_deorphan>
 80215a8:	6138      	str	r0, [r7, #16]
        if (err) {
 80215aa:	693b      	ldr	r3, [r7, #16]
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d001      	beq.n	80215b4 <lfs_dir_commit+0x40>
            return err;
 80215b0:	693b      	ldr	r3, [r7, #16]
 80215b2:	e000      	b.n	80215b6 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 80215b4:	2300      	movs	r3, #0
}
 80215b6:	4618      	mov	r0, r3
 80215b8:	3718      	adds	r7, #24
 80215ba:	46bd      	mov	sp, r7
 80215bc:	bd80      	pop	{r7, pc}
	...

080215c0 <lfs_mkdir_>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 80215c0:	b5b0      	push	{r4, r5, r7, lr}
 80215c2:	b0b8      	sub	sp, #224	@ 0xe0
 80215c4:	af00      	add	r7, sp, #0
 80215c6:	6078      	str	r0, [r7, #4]
 80215c8:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80215ca:	6878      	ldr	r0, [r7, #4]
 80215cc:	f003 fa68 	bl	8024aa0 <lfs_fs_forceconsistency>
 80215d0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 80215d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80215d8:	2b00      	cmp	r3, #0
 80215da:	d002      	beq.n	80215e2 <lfs_mkdir_+0x22>
        return err;
 80215dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80215e0:	e128      	b.n	8021834 <lfs_mkdir_+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 80215e2:	687b      	ldr	r3, [r7, #4]
 80215e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80215e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 80215ea:	f107 00ae 	add.w	r0, r7, #174	@ 0xae
 80215ee:	463a      	mov	r2, r7
 80215f0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80215f4:	f103 0108 	add.w	r1, r3, #8
 80215f8:	4603      	mov	r3, r0
 80215fa:	6878      	ldr	r0, [r7, #4]
 80215fc:	f7fe fa72 	bl	801fae4 <lfs_dir_find>
 8021600:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8021604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021608:	f113 0f02 	cmn.w	r3, #2
 802160c:	d105      	bne.n	802161a <lfs_mkdir_+0x5a>
 802160e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8021612:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8021616:	4293      	cmp	r3, r2
 8021618:	d109      	bne.n	802162e <lfs_mkdir_+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 802161a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802161e:	2b00      	cmp	r3, #0
 8021620:	da02      	bge.n	8021628 <lfs_mkdir_+0x68>
 8021622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021626:	e105      	b.n	8021834 <lfs_mkdir_+0x274>
 8021628:	f06f 0310 	mvn.w	r3, #16
 802162c:	e102      	b.n	8021834 <lfs_mkdir_+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 802162e:	683b      	ldr	r3, [r7, #0]
 8021630:	4618      	mov	r0, r3
 8021632:	f7ee fe35 	bl	80102a0 <strlen>
 8021636:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
    if (nlen > lfs->name_max) {
 802163a:	687b      	ldr	r3, [r7, #4]
 802163c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802163e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8021642:	429a      	cmp	r2, r3
 8021644:	d902      	bls.n	802164c <lfs_mkdir_+0x8c>
        return LFS_ERR_NAMETOOLONG;
 8021646:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 802164a:	e0f3      	b.n	8021834 <lfs_mkdir_+0x274>
    }

    // build up new directory
    lfs_alloc_ckpoint(lfs);
 802164c:	6878      	ldr	r0, [r7, #4]
 802164e:	f7fc fe1c 	bl	801e28a <lfs_alloc_ckpoint>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 8021652:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8021656:	4619      	mov	r1, r3
 8021658:	6878      	ldr	r0, [r7, #4]
 802165a:	f7fe fd63 	bl	8020124 <lfs_dir_alloc>
 802165e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 8021662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021666:	2b00      	cmp	r3, #0
 8021668:	d002      	beq.n	8021670 <lfs_mkdir_+0xb0>
        return err;
 802166a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802166e:	e0e1      	b.n	8021834 <lfs_mkdir_+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 8021670:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8021674:	f107 05b8 	add.w	r5, r7, #184	@ 0xb8
 8021678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802167a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802167c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8021680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8021684:	e012      	b.n	80216ac <lfs_mkdir_+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 8021686:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 802168a:	f103 0218 	add.w	r2, r3, #24
 802168e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8021692:	4619      	mov	r1, r3
 8021694:	6878      	ldr	r0, [r7, #4]
 8021696:	f7fe f913 	bl	801f8c0 <lfs_dir_fetch>
 802169a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 802169e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80216a2:	2b00      	cmp	r3, #0
 80216a4:	d002      	beq.n	80216ac <lfs_mkdir_+0xec>
            return err;
 80216a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80216aa:	e0c3      	b.n	8021834 <lfs_mkdir_+0x274>
    while (pred.split) {
 80216ac:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80216b0:	2b00      	cmp	r3, #0
 80216b2:	d1e8      	bne.n	8021686 <lfs_mkdir_+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 80216b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80216b8:	3318      	adds	r3, #24
 80216ba:	4618      	mov	r0, r3
 80216bc:	f7fc faf9 	bl	801dcb2 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 80216c0:	4b5e      	ldr	r3, [pc, #376]	@ (802183c <lfs_mkdir_+0x27c>)
 80216c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80216c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80216c8:	3318      	adds	r3, #24
 80216ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80216cc:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80216d0:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80216d4:	2301      	movs	r3, #1
 80216d6:	6878      	ldr	r0, [r7, #4]
 80216d8:	f7ff ff4c 	bl	8021574 <lfs_dir_commit>
 80216dc:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 80216e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80216e4:	3318      	adds	r3, #24
 80216e6:	4618      	mov	r0, r3
 80216e8:	f7fc fac9 	bl	801dc7e <lfs_pair_fromle32>
    if (err) {
 80216ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80216f0:	2b00      	cmp	r3, #0
 80216f2:	d002      	beq.n	80216fa <lfs_mkdir_+0x13a>
        return err;
 80216f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80216f8:	e09c      	b.n	8021834 <lfs_mkdir_+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 80216fa:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80216fe:	2b00      	cmp	r3, #0
 8021700:	d04c      	beq.n	802179c <lfs_mkdir_+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8021702:	2101      	movs	r1, #1
 8021704:	6878      	ldr	r0, [r7, #4]
 8021706:	f002 fea9 	bl	802445c <lfs_fs_preporphans>
 802170a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 802170e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021712:	2b00      	cmp	r3, #0
 8021714:	d002      	beq.n	802171c <lfs_mkdir_+0x15c>
            return err;
 8021716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802171a:	e08b      	b.n	8021834 <lfs_mkdir_+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 802171c:	2300      	movs	r3, #0
 802171e:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
        cwd.id = 0;
 8021722:	2300      	movs	r3, #0
 8021724:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
        lfs->mlist = &cwd;
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 802172e:	629a      	str	r2, [r3, #40]	@ 0x28

        lfs_pair_tole32(dir.pair);
 8021730:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8021734:	4618      	mov	r0, r3
 8021736:	f7fc fabc 	bl	801dcb2 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 802173a:	4b40      	ldr	r3, [pc, #256]	@ (802183c <lfs_mkdir_+0x27c>)
 802173c:	617b      	str	r3, [r7, #20]
 802173e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8021742:	61bb      	str	r3, [r7, #24]
 8021744:	f107 0214 	add.w	r2, r7, #20
 8021748:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 802174c:	2301      	movs	r3, #1
 802174e:	6878      	ldr	r0, [r7, #4]
 8021750:	f7ff ff10 	bl	8021574 <lfs_dir_commit>
 8021754:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 8021758:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802175c:	4618      	mov	r0, r3
 802175e:	f7fc fa8e 	bl	801dc7e <lfs_pair_fromle32>
        if (err) {
 8021762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021766:	2b00      	cmp	r3, #0
 8021768:	d006      	beq.n	8021778 <lfs_mkdir_+0x1b8>
            lfs->mlist = cwd.next;
 802176a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 802176e:	687b      	ldr	r3, [r7, #4]
 8021770:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 8021772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021776:	e05d      	b.n	8021834 <lfs_mkdir_+0x274>
        }

        lfs->mlist = cwd.next;
 8021778:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 802177c:	687b      	ldr	r3, [r7, #4]
 802177e:	629a      	str	r2, [r3, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8021780:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021784:	6878      	ldr	r0, [r7, #4]
 8021786:	f002 fe69 	bl	802445c <lfs_fs_preporphans>
 802178a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 802178e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021792:	2b00      	cmp	r3, #0
 8021794:	d002      	beq.n	802179c <lfs_mkdir_+0x1dc>
            return err;
 8021796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802179a:	e04b      	b.n	8021834 <lfs_mkdir_+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 802179c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80217a0:	4618      	mov	r0, r3
 80217a2:	f7fc fa86 	bl	801dcb2 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 80217a6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80217aa:	029b      	lsls	r3, r3, #10
 80217ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80217b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80217b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80217b6:	2300      	movs	r3, #0
 80217b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80217ba:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80217be:	029a      	lsls	r2, r3, #10
 80217c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80217c4:	4313      	orrs	r3, r2
 80217c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80217ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80217cc:	683b      	ldr	r3, [r7, #0]
 80217ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80217d0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80217d4:	029b      	lsls	r3, r3, #10
 80217d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80217da:	f043 0308 	orr.w	r3, r3, #8
 80217de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80217e0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80217e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80217e6:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80217ea:	f083 0301 	eor.w	r3, r3, #1
 80217ee:	b2db      	uxtb	r3, r3
 80217f0:	2b00      	cmp	r3, #0
 80217f2:	d001      	beq.n	80217f8 <lfs_mkdir_+0x238>
 80217f4:	4b11      	ldr	r3, [pc, #68]	@ (802183c <lfs_mkdir_+0x27c>)
 80217f6:	e000      	b.n	80217fa <lfs_mkdir_+0x23a>
 80217f8:	2300      	movs	r3, #0
 80217fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80217fc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8021800:	65bb      	str	r3, [r7, #88]	@ 0x58
 8021802:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8021806:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 802180a:	f103 0108 	add.w	r1, r3, #8
 802180e:	2304      	movs	r3, #4
 8021810:	6878      	ldr	r0, [r7, #4]
 8021812:	f7ff feaf 	bl	8021574 <lfs_dir_commit>
 8021816:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 802181a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802181e:	4618      	mov	r0, r3
 8021820:	f7fc fa2d 	bl	801dc7e <lfs_pair_fromle32>
    if (err) {
 8021824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021828:	2b00      	cmp	r3, #0
 802182a:	d002      	beq.n	8021832 <lfs_mkdir_+0x272>
        return err;
 802182c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021830:	e000      	b.n	8021834 <lfs_mkdir_+0x274>
    }

    return 0;
 8021832:	2300      	movs	r3, #0
}
 8021834:	4618      	mov	r0, r3
 8021836:	37e0      	adds	r7, #224	@ 0xe0
 8021838:	46bd      	mov	sp, r7
 802183a:	bdb0      	pop	{r4, r5, r7, pc}
 802183c:	600ffc08 	.word	0x600ffc08

08021840 <lfs_dir_open_>:
#endif

static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8021840:	b590      	push	{r4, r7, lr}
 8021842:	b08d      	sub	sp, #52	@ 0x34
 8021844:	af02      	add	r7, sp, #8
 8021846:	60f8      	str	r0, [r7, #12]
 8021848:	60b9      	str	r1, [r7, #8]
 802184a:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 802184c:	68bb      	ldr	r3, [r7, #8]
 802184e:	f103 0108 	add.w	r1, r3, #8
 8021852:	1d3a      	adds	r2, r7, #4
 8021854:	2300      	movs	r3, #0
 8021856:	68f8      	ldr	r0, [r7, #12]
 8021858:	f7fe f944 	bl	801fae4 <lfs_dir_find>
 802185c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (tag < 0) {
 802185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021860:	2b00      	cmp	r3, #0
 8021862:	da01      	bge.n	8021868 <lfs_dir_open_+0x28>
        return tag;
 8021864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021866:	e05e      	b.n	8021926 <lfs_dir_open_+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8021868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802186a:	4618      	mov	r0, r3
 802186c:	f7fc fa7c 	bl	801dd68 <lfs_tag_type3>
 8021870:	4603      	mov	r3, r0
 8021872:	2b02      	cmp	r3, #2
 8021874:	d002      	beq.n	802187c <lfs_dir_open_+0x3c>
        return LFS_ERR_NOTDIR;
 8021876:	f06f 0313 	mvn.w	r3, #19
 802187a:	e054      	b.n	8021926 <lfs_dir_open_+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 802187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802187e:	4618      	mov	r0, r3
 8021880:	f7fc fa9c 	bl	801ddbc <lfs_tag_id>
 8021884:	4603      	mov	r3, r0
 8021886:	461a      	mov	r2, r3
 8021888:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 802188c:	429a      	cmp	r2, r3
 802188e:	d106      	bne.n	802189e <lfs_dir_open_+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8021890:	68fb      	ldr	r3, [r7, #12]
 8021892:	6a1b      	ldr	r3, [r3, #32]
 8021894:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 8021896:	68fb      	ldr	r3, [r7, #12]
 8021898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802189a:	61bb      	str	r3, [r7, #24]
 802189c:	e01f      	b.n	80218de <lfs_dir_open_+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 802189e:	68bb      	ldr	r3, [r7, #8]
 80218a0:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 80218a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80218a6:	4618      	mov	r0, r3
 80218a8:	f7fc fa88 	bl	801ddbc <lfs_tag_id>
 80218ac:	4603      	mov	r3, r0
 80218ae:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80218b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80218b4:	f043 0308 	orr.w	r3, r3, #8
 80218b8:	f107 0214 	add.w	r2, r7, #20
 80218bc:	9200      	str	r2, [sp, #0]
 80218be:	4a1c      	ldr	r2, [pc, #112]	@ (8021930 <lfs_dir_open_+0xf0>)
 80218c0:	4621      	mov	r1, r4
 80218c2:	68f8      	ldr	r0, [r7, #12]
 80218c4:	f7fc fef6 	bl	801e6b4 <lfs_dir_get>
 80218c8:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 80218ca:	6a3b      	ldr	r3, [r7, #32]
 80218cc:	2b00      	cmp	r3, #0
 80218ce:	da01      	bge.n	80218d4 <lfs_dir_open_+0x94>
            return res;
 80218d0:	6a3b      	ldr	r3, [r7, #32]
 80218d2:	e028      	b.n	8021926 <lfs_dir_open_+0xe6>
        }
        lfs_pair_fromle32(pair);
 80218d4:	f107 0314 	add.w	r3, r7, #20
 80218d8:	4618      	mov	r0, r3
 80218da:	f7fc f9d0 	bl	801dc7e <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 80218de:	68bb      	ldr	r3, [r7, #8]
 80218e0:	3308      	adds	r3, #8
 80218e2:	f107 0214 	add.w	r2, r7, #20
 80218e6:	4619      	mov	r1, r3
 80218e8:	68f8      	ldr	r0, [r7, #12]
 80218ea:	f7fd ffe9 	bl	801f8c0 <lfs_dir_fetch>
 80218ee:	61f8      	str	r0, [r7, #28]
    if (err) {
 80218f0:	69fb      	ldr	r3, [r7, #28]
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	d001      	beq.n	80218fa <lfs_dir_open_+0xba>
        return err;
 80218f6:	69fb      	ldr	r3, [r7, #28]
 80218f8:	e015      	b.n	8021926 <lfs_dir_open_+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 80218fa:	68bb      	ldr	r3, [r7, #8]
 80218fc:	689a      	ldr	r2, [r3, #8]
 80218fe:	68bb      	ldr	r3, [r7, #8]
 8021900:	62da      	str	r2, [r3, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 8021902:	68bb      	ldr	r3, [r7, #8]
 8021904:	68da      	ldr	r2, [r3, #12]
 8021906:	68bb      	ldr	r3, [r7, #8]
 8021908:	631a      	str	r2, [r3, #48]	@ 0x30
    dir->id = 0;
 802190a:	68bb      	ldr	r3, [r7, #8]
 802190c:	2200      	movs	r2, #0
 802190e:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8021910:	68bb      	ldr	r3, [r7, #8]
 8021912:	2200      	movs	r2, #0
 8021914:	629a      	str	r2, [r3, #40]	@ 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8021916:	68bb      	ldr	r3, [r7, #8]
 8021918:	2202      	movs	r2, #2
 802191a:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 802191c:	68b9      	ldr	r1, [r7, #8]
 802191e:	68f8      	ldr	r0, [r7, #12]
 8021920:	f7fc fc77 	bl	801e212 <lfs_mlist_append>

    return 0;
 8021924:	2300      	movs	r3, #0
}
 8021926:	4618      	mov	r0, r3
 8021928:	372c      	adds	r7, #44	@ 0x2c
 802192a:	46bd      	mov	sp, r7
 802192c:	bd90      	pop	{r4, r7, pc}
 802192e:	bf00      	nop
 8021930:	700ffc00 	.word	0x700ffc00

08021934 <lfs_dir_close_>:

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 8021934:	b580      	push	{r7, lr}
 8021936:	b082      	sub	sp, #8
 8021938:	af00      	add	r7, sp, #0
 802193a:	6078      	str	r0, [r7, #4]
 802193c:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 802193e:	6839      	ldr	r1, [r7, #0]
 8021940:	6878      	ldr	r0, [r7, #4]
 8021942:	f7fc fc44 	bl	801e1ce <lfs_mlist_remove>

    return 0;
 8021946:	2300      	movs	r3, #0
}
 8021948:	4618      	mov	r0, r3
 802194a:	3708      	adds	r7, #8
 802194c:	46bd      	mov	sp, r7
 802194e:	bd80      	pop	{r7, pc}

08021950 <lfs_dir_read_>:

static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8021950:	b580      	push	{r7, lr}
 8021952:	b086      	sub	sp, #24
 8021954:	af00      	add	r7, sp, #0
 8021956:	60f8      	str	r0, [r7, #12]
 8021958:	60b9      	str	r1, [r7, #8]
 802195a:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 802195c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8021960:	2100      	movs	r1, #0
 8021962:	6878      	ldr	r0, [r7, #4]
 8021964:	f014 fbbc 	bl	80360e0 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 8021968:	68bb      	ldr	r3, [r7, #8]
 802196a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802196c:	2b00      	cmp	r3, #0
 802196e:	d110      	bne.n	8021992 <lfs_dir_read_+0x42>
        info->type = LFS_TYPE_DIR;
 8021970:	687b      	ldr	r3, [r7, #4]
 8021972:	2202      	movs	r2, #2
 8021974:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 8021976:	687b      	ldr	r3, [r7, #4]
 8021978:	3308      	adds	r3, #8
 802197a:	4935      	ldr	r1, [pc, #212]	@ (8021a50 <lfs_dir_read_+0x100>)
 802197c:	461a      	mov	r2, r3
 802197e:	460b      	mov	r3, r1
 8021980:	881b      	ldrh	r3, [r3, #0]
 8021982:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8021984:	68bb      	ldr	r3, [r7, #8]
 8021986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021988:	1c5a      	adds	r2, r3, #1
 802198a:	68bb      	ldr	r3, [r7, #8]
 802198c:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 802198e:	2301      	movs	r3, #1
 8021990:	e05a      	b.n	8021a48 <lfs_dir_read_+0xf8>
    } else if (dir->pos == 1) {
 8021992:	68bb      	ldr	r3, [r7, #8]
 8021994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021996:	2b01      	cmp	r3, #1
 8021998:	d110      	bne.n	80219bc <lfs_dir_read_+0x6c>
        info->type = LFS_TYPE_DIR;
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	2202      	movs	r2, #2
 802199e:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 80219a0:	687b      	ldr	r3, [r7, #4]
 80219a2:	3308      	adds	r3, #8
 80219a4:	4a2b      	ldr	r2, [pc, #172]	@ (8021a54 <lfs_dir_read_+0x104>)
 80219a6:	8811      	ldrh	r1, [r2, #0]
 80219a8:	7892      	ldrb	r2, [r2, #2]
 80219aa:	8019      	strh	r1, [r3, #0]
 80219ac:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 80219ae:	68bb      	ldr	r3, [r7, #8]
 80219b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80219b2:	1c5a      	adds	r2, r3, #1
 80219b4:	68bb      	ldr	r3, [r7, #8]
 80219b6:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 80219b8:	2301      	movs	r3, #1
 80219ba:	e045      	b.n	8021a48 <lfs_dir_read_+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 80219bc:	68bb      	ldr	r3, [r7, #8]
 80219be:	889a      	ldrh	r2, [r3, #4]
 80219c0:	68bb      	ldr	r3, [r7, #8]
 80219c2:	8b9b      	ldrh	r3, [r3, #28]
 80219c4:	429a      	cmp	r2, r3
 80219c6:	d11a      	bne.n	80219fe <lfs_dir_read_+0xae>
            if (!dir->m.split) {
 80219c8:	68bb      	ldr	r3, [r7, #8]
 80219ca:	7fdb      	ldrb	r3, [r3, #31]
 80219cc:	f083 0301 	eor.w	r3, r3, #1
 80219d0:	b2db      	uxtb	r3, r3
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	d001      	beq.n	80219da <lfs_dir_read_+0x8a>
                return false;
 80219d6:	2300      	movs	r3, #0
 80219d8:	e036      	b.n	8021a48 <lfs_dir_read_+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 80219da:	68bb      	ldr	r3, [r7, #8]
 80219dc:	f103 0108 	add.w	r1, r3, #8
 80219e0:	68bb      	ldr	r3, [r7, #8]
 80219e2:	3320      	adds	r3, #32
 80219e4:	461a      	mov	r2, r3
 80219e6:	68f8      	ldr	r0, [r7, #12]
 80219e8:	f7fd ff6a 	bl	801f8c0 <lfs_dir_fetch>
 80219ec:	6178      	str	r0, [r7, #20]
            if (err) {
 80219ee:	697b      	ldr	r3, [r7, #20]
 80219f0:	2b00      	cmp	r3, #0
 80219f2:	d001      	beq.n	80219f8 <lfs_dir_read_+0xa8>
                return err;
 80219f4:	697b      	ldr	r3, [r7, #20]
 80219f6:	e027      	b.n	8021a48 <lfs_dir_read_+0xf8>
            }

            dir->id = 0;
 80219f8:	68bb      	ldr	r3, [r7, #8]
 80219fa:	2200      	movs	r2, #0
 80219fc:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 80219fe:	68bb      	ldr	r3, [r7, #8]
 8021a00:	f103 0108 	add.w	r1, r3, #8
 8021a04:	68bb      	ldr	r3, [r7, #8]
 8021a06:	889a      	ldrh	r2, [r3, #4]
 8021a08:	687b      	ldr	r3, [r7, #4]
 8021a0a:	68f8      	ldr	r0, [r7, #12]
 8021a0c:	f7fd ffa6 	bl	801f95c <lfs_dir_getinfo>
 8021a10:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8021a12:	693b      	ldr	r3, [r7, #16]
 8021a14:	2b00      	cmp	r3, #0
 8021a16:	d005      	beq.n	8021a24 <lfs_dir_read_+0xd4>
 8021a18:	693b      	ldr	r3, [r7, #16]
 8021a1a:	f113 0f02 	cmn.w	r3, #2
 8021a1e:	d001      	beq.n	8021a24 <lfs_dir_read_+0xd4>
            return err;
 8021a20:	693b      	ldr	r3, [r7, #16]
 8021a22:	e011      	b.n	8021a48 <lfs_dir_read_+0xf8>
        }

        dir->id += 1;
 8021a24:	68bb      	ldr	r3, [r7, #8]
 8021a26:	889b      	ldrh	r3, [r3, #4]
 8021a28:	3301      	adds	r3, #1
 8021a2a:	b29a      	uxth	r2, r3
 8021a2c:	68bb      	ldr	r3, [r7, #8]
 8021a2e:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8021a30:	693b      	ldr	r3, [r7, #16]
 8021a32:	f113 0f02 	cmn.w	r3, #2
 8021a36:	d100      	bne.n	8021a3a <lfs_dir_read_+0xea>
    while (true) {
 8021a38:	e7c0      	b.n	80219bc <lfs_dir_read_+0x6c>
            break;
 8021a3a:	bf00      	nop
        }
    }

    dir->pos += 1;
 8021a3c:	68bb      	ldr	r3, [r7, #8]
 8021a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021a40:	1c5a      	adds	r2, r3, #1
 8021a42:	68bb      	ldr	r3, [r7, #8]
 8021a44:	629a      	str	r2, [r3, #40]	@ 0x28
    return true;
 8021a46:	2301      	movs	r3, #1
}
 8021a48:	4618      	mov	r0, r3
 8021a4a:	3718      	adds	r7, #24
 8021a4c:	46bd      	mov	sp, r7
 8021a4e:	bd80      	pop	{r7, pc}
 8021a50:	08040f64 	.word	0x08040f64
 8021a54:	08040f68 	.word	0x08040f68

08021a58 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8021a58:	b590      	push	{r4, r7, lr}
 8021a5a:	b087      	sub	sp, #28
 8021a5c:	af00      	add	r7, sp, #0
 8021a5e:	6078      	str	r0, [r7, #4]
 8021a60:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8021a62:	683b      	ldr	r3, [r7, #0]
 8021a64:	681b      	ldr	r3, [r3, #0]
 8021a66:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8021a68:	687b      	ldr	r3, [r7, #4]
 8021a6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021a6e:	3b08      	subs	r3, #8
 8021a70:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8021a72:	697a      	ldr	r2, [r7, #20]
 8021a74:	693b      	ldr	r3, [r7, #16]
 8021a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8021a7a:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8021a7c:	68fb      	ldr	r3, [r7, #12]
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	d101      	bne.n	8021a86 <lfs_ctz_index+0x2e>
        return 0;
 8021a82:	2300      	movs	r3, #0
 8021a84:	e01c      	b.n	8021ac0 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8021a86:	68fb      	ldr	r3, [r7, #12]
 8021a88:	3b01      	subs	r3, #1
 8021a8a:	4618      	mov	r0, r3
 8021a8c:	f7fb fc79 	bl	801d382 <lfs_popc>
 8021a90:	4603      	mov	r3, r0
 8021a92:	3302      	adds	r3, #2
 8021a94:	009b      	lsls	r3, r3, #2
 8021a96:	697a      	ldr	r2, [r7, #20]
 8021a98:	1ad2      	subs	r2, r2, r3
 8021a9a:	693b      	ldr	r3, [r7, #16]
 8021a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8021aa0:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8021aa2:	693b      	ldr	r3, [r7, #16]
 8021aa4:	68fa      	ldr	r2, [r7, #12]
 8021aa6:	fb02 f303 	mul.w	r3, r2, r3
 8021aaa:	697a      	ldr	r2, [r7, #20]
 8021aac:	1ad4      	subs	r4, r2, r3
 8021aae:	68f8      	ldr	r0, [r7, #12]
 8021ab0:	f7fb fc67 	bl	801d382 <lfs_popc>
 8021ab4:	4603      	mov	r3, r0
 8021ab6:	009b      	lsls	r3, r3, #2
 8021ab8:	1ae2      	subs	r2, r4, r3
 8021aba:	683b      	ldr	r3, [r7, #0]
 8021abc:	601a      	str	r2, [r3, #0]
    return i;
 8021abe:	68fb      	ldr	r3, [r7, #12]
}
 8021ac0:	4618      	mov	r0, r3
 8021ac2:	371c      	adds	r7, #28
 8021ac4:	46bd      	mov	sp, r7
 8021ac6:	bd90      	pop	{r4, r7, pc}

08021ac8 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8021ac8:	b590      	push	{r4, r7, lr}
 8021aca:	b08f      	sub	sp, #60	@ 0x3c
 8021acc:	af04      	add	r7, sp, #16
 8021ace:	60f8      	str	r0, [r7, #12]
 8021ad0:	60b9      	str	r1, [r7, #8]
 8021ad2:	607a      	str	r2, [r7, #4]
 8021ad4:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8021ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021ad8:	2b00      	cmp	r3, #0
 8021ada:	d108      	bne.n	8021aee <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8021adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021ade:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021ae2:	601a      	str	r2, [r3, #0]
        *off = 0;
 8021ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021ae6:	2200      	movs	r2, #0
 8021ae8:	601a      	str	r2, [r3, #0]
        return 0;
 8021aea:	2300      	movs	r3, #0
 8021aec:	e053      	b.n	8021b96 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8021aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021af0:	3b01      	subs	r3, #1
 8021af2:	617b      	str	r3, [r7, #20]
 8021af4:	f107 0314 	add.w	r3, r7, #20
 8021af8:	4619      	mov	r1, r3
 8021afa:	68f8      	ldr	r0, [r7, #12]
 8021afc:	f7ff ffac 	bl	8021a58 <lfs_ctz_index>
 8021b00:	4603      	mov	r3, r0
 8021b02:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8021b04:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8021b08:	4619      	mov	r1, r3
 8021b0a:	68f8      	ldr	r0, [r7, #12]
 8021b0c:	f7ff ffa4 	bl	8021a58 <lfs_ctz_index>
 8021b10:	4603      	mov	r3, r0
 8021b12:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8021b14:	e034      	b.n	8021b80 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8021b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021b18:	6a3b      	ldr	r3, [r7, #32]
 8021b1a:	1ad3      	subs	r3, r2, r3
 8021b1c:	3301      	adds	r3, #1
 8021b1e:	4618      	mov	r0, r3
 8021b20:	f7fb fc10 	bl	801d344 <lfs_npw2>
 8021b24:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8021b26:	1e5c      	subs	r4, r3, #1
 8021b28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8021b2a:	f7fb fc1b 	bl	801d364 <lfs_ctz>
 8021b2e:	4603      	mov	r3, r0
 8021b30:	4619      	mov	r1, r3
 8021b32:	4620      	mov	r0, r4
 8021b34:	f7fb fbcf 	bl	801d2d6 <lfs_min>
 8021b38:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8021b3a:	683b      	ldr	r3, [r7, #0]
 8021b3c:	69fa      	ldr	r2, [r7, #28]
 8021b3e:	0092      	lsls	r2, r2, #2
 8021b40:	2104      	movs	r1, #4
 8021b42:	9103      	str	r1, [sp, #12]
 8021b44:	4639      	mov	r1, r7
 8021b46:	9102      	str	r1, [sp, #8]
 8021b48:	9201      	str	r2, [sp, #4]
 8021b4a:	9300      	str	r3, [sp, #0]
 8021b4c:	2304      	movs	r3, #4
 8021b4e:	687a      	ldr	r2, [r7, #4]
 8021b50:	68b9      	ldr	r1, [r7, #8]
 8021b52:	68f8      	ldr	r0, [r7, #12]
 8021b54:	f7fb fc9a 	bl	801d48c <lfs_bd_read>
 8021b58:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8021b5a:	683b      	ldr	r3, [r7, #0]
 8021b5c:	4618      	mov	r0, r3
 8021b5e:	f7fb fc2a 	bl	801d3b6 <lfs_fromle32>
 8021b62:	4603      	mov	r3, r0
 8021b64:	603b      	str	r3, [r7, #0]
        if (err) {
 8021b66:	69bb      	ldr	r3, [r7, #24]
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d001      	beq.n	8021b70 <lfs_ctz_find+0xa8>
            return err;
 8021b6c:	69bb      	ldr	r3, [r7, #24]
 8021b6e:	e012      	b.n	8021b96 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8021b70:	2201      	movs	r2, #1
 8021b72:	69fb      	ldr	r3, [r7, #28]
 8021b74:	fa02 f303 	lsl.w	r3, r2, r3
 8021b78:	461a      	mov	r2, r3
 8021b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b7c:	1a9b      	subs	r3, r3, r2
 8021b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 8021b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021b82:	6a3b      	ldr	r3, [r7, #32]
 8021b84:	429a      	cmp	r2, r3
 8021b86:	d8c6      	bhi.n	8021b16 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8021b88:	683a      	ldr	r2, [r7, #0]
 8021b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021b8c:	601a      	str	r2, [r3, #0]
    *off = pos;
 8021b8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8021b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021b92:	601a      	str	r2, [r3, #0]
    return 0;
 8021b94:	2300      	movs	r3, #0
}
 8021b96:	4618      	mov	r0, r3
 8021b98:	372c      	adds	r7, #44	@ 0x2c
 8021b9a:	46bd      	mov	sp, r7
 8021b9c:	bd90      	pop	{r4, r7, pc}
	...

08021ba0 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8021ba0:	b580      	push	{r7, lr}
 8021ba2:	b092      	sub	sp, #72	@ 0x48
 8021ba4:	af04      	add	r7, sp, #16
 8021ba6:	60f8      	str	r0, [r7, #12]
 8021ba8:	60b9      	str	r1, [r7, #8]
 8021baa:	607a      	str	r2, [r7, #4]
 8021bac:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8021bae:	f107 0320 	add.w	r3, r7, #32
 8021bb2:	4619      	mov	r1, r3
 8021bb4:	68f8      	ldr	r0, [r7, #12]
 8021bb6:	f7fc fbff 	bl	801e3b8 <lfs_alloc>
 8021bba:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 8021bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021bbe:	2b00      	cmp	r3, #0
 8021bc0:	d001      	beq.n	8021bc6 <lfs_ctz_extend+0x26>
            return err;
 8021bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021bc4:	e0e9      	b.n	8021d9a <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8021bc6:	6a3b      	ldr	r3, [r7, #32]
 8021bc8:	4619      	mov	r1, r3
 8021bca:	68f8      	ldr	r0, [r7, #12]
 8021bcc:	f7fb ff9e 	bl	801db0c <lfs_bd_erase>
 8021bd0:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8021bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021bd4:	2b00      	cmp	r3, #0
 8021bd6:	d006      	beq.n	8021be6 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8021bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021bda:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8021bde:	f000 80cb 	beq.w	8021d78 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8021be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021be4:	e0d9      	b.n	8021d9a <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8021be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021be8:	2b00      	cmp	r3, #0
 8021bea:	d107      	bne.n	8021bfc <lfs_ctz_extend+0x5c>
                *block = nblock;
 8021bec:	6a3a      	ldr	r2, [r7, #32]
 8021bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021bf0:	601a      	str	r2, [r3, #0]
                *off = 0;
 8021bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021bf4:	2200      	movs	r2, #0
 8021bf6:	601a      	str	r2, [r3, #0]
                return 0;
 8021bf8:	2300      	movs	r3, #0
 8021bfa:	e0ce      	b.n	8021d9a <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8021bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021bfe:	3b01      	subs	r3, #1
 8021c00:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8021c02:	f107 031c 	add.w	r3, r7, #28
 8021c06:	4619      	mov	r1, r3
 8021c08:	68f8      	ldr	r0, [r7, #12]
 8021c0a:	f7ff ff25 	bl	8021a58 <lfs_ctz_index>
 8021c0e:	4603      	mov	r3, r0
 8021c10:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8021c12:	69fb      	ldr	r3, [r7, #28]
 8021c14:	3301      	adds	r3, #1
 8021c16:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8021c18:	68fb      	ldr	r3, [r7, #12]
 8021c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8021c1e:	69fb      	ldr	r3, [r7, #28]
 8021c20:	429a      	cmp	r2, r3
 8021c22:	d044      	beq.n	8021cae <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8021c24:	2300      	movs	r3, #0
 8021c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8021c28:	e035      	b.n	8021c96 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8021c2a:	69fa      	ldr	r2, [r7, #28]
 8021c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021c2e:	1ad2      	subs	r2, r2, r3
 8021c30:	2301      	movs	r3, #1
 8021c32:	9303      	str	r3, [sp, #12]
 8021c34:	f107 0317 	add.w	r3, r7, #23
 8021c38:	9302      	str	r3, [sp, #8]
 8021c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021c3c:	9301      	str	r3, [sp, #4]
 8021c3e:	683b      	ldr	r3, [r7, #0]
 8021c40:	9300      	str	r3, [sp, #0]
 8021c42:	4613      	mov	r3, r2
 8021c44:	687a      	ldr	r2, [r7, #4]
 8021c46:	2100      	movs	r1, #0
 8021c48:	68f8      	ldr	r0, [r7, #12]
 8021c4a:	f7fb fc1f 	bl	801d48c <lfs_bd_read>
 8021c4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8021c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	d001      	beq.n	8021c5a <lfs_ctz_extend+0xba>
                        return err;
 8021c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021c58:	e09f      	b.n	8021d9a <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8021c5a:	6a3b      	ldr	r3, [r7, #32]
 8021c5c:	2201      	movs	r2, #1
 8021c5e:	9203      	str	r2, [sp, #12]
 8021c60:	f107 0217 	add.w	r2, r7, #23
 8021c64:	9202      	str	r2, [sp, #8]
 8021c66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8021c68:	9201      	str	r2, [sp, #4]
 8021c6a:	9300      	str	r3, [sp, #0]
 8021c6c:	2301      	movs	r3, #1
 8021c6e:	687a      	ldr	r2, [r7, #4]
 8021c70:	68b9      	ldr	r1, [r7, #8]
 8021c72:	68f8      	ldr	r0, [r7, #12]
 8021c74:	f7fb fe9c 	bl	801d9b0 <lfs_bd_prog>
 8021c78:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8021c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	d007      	beq.n	8021c90 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8021c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021c82:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8021c86:	d101      	bne.n	8021c8c <lfs_ctz_extend+0xec>
                            goto relocate;
 8021c88:	bf00      	nop
                    goto relocate;
 8021c8a:	e075      	b.n	8021d78 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8021c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 8021c8e:	e084      	b.n	8021d9a <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8021c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021c92:	3301      	adds	r3, #1
 8021c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8021c96:	69fb      	ldr	r3, [r7, #28]
 8021c98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8021c9a:	429a      	cmp	r2, r3
 8021c9c:	d3c5      	bcc.n	8021c2a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8021c9e:	6a3a      	ldr	r2, [r7, #32]
 8021ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021ca2:	601a      	str	r2, [r3, #0]
                *off = noff;
 8021ca4:	69fa      	ldr	r2, [r7, #28]
 8021ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021ca8:	601a      	str	r2, [r3, #0]
                return 0;
 8021caa:	2300      	movs	r3, #0
 8021cac:	e075      	b.n	8021d9a <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8021cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021cb0:	3301      	adds	r3, #1
 8021cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8021cb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021cb6:	f7fb fb55 	bl	801d364 <lfs_ctz>
 8021cba:	4603      	mov	r3, r0
 8021cbc:	3301      	adds	r3, #1
 8021cbe:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 8021cc0:	683b      	ldr	r3, [r7, #0]
 8021cc2:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8021cc4:	2300      	movs	r3, #0
 8021cc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8021cc8:	e049      	b.n	8021d5e <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8021cca:	69bb      	ldr	r3, [r7, #24]
 8021ccc:	4618      	mov	r0, r3
 8021cce:	f7fb fb7d 	bl	801d3cc <lfs_tole32>
 8021cd2:	4603      	mov	r3, r0
 8021cd4:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8021cd6:	6a3b      	ldr	r3, [r7, #32]
 8021cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021cda:	0092      	lsls	r2, r2, #2
 8021cdc:	2104      	movs	r1, #4
 8021cde:	9103      	str	r1, [sp, #12]
 8021ce0:	f107 0118 	add.w	r1, r7, #24
 8021ce4:	9102      	str	r1, [sp, #8]
 8021ce6:	9201      	str	r2, [sp, #4]
 8021ce8:	9300      	str	r3, [sp, #0]
 8021cea:	2301      	movs	r3, #1
 8021cec:	687a      	ldr	r2, [r7, #4]
 8021cee:	68b9      	ldr	r1, [r7, #8]
 8021cf0:	68f8      	ldr	r0, [r7, #12]
 8021cf2:	f7fb fe5d 	bl	801d9b0 <lfs_bd_prog>
 8021cf6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8021cf8:	69bb      	ldr	r3, [r7, #24]
 8021cfa:	4618      	mov	r0, r3
 8021cfc:	f7fb fb5b 	bl	801d3b6 <lfs_fromle32>
 8021d00:	4603      	mov	r3, r0
 8021d02:	61bb      	str	r3, [r7, #24]
                if (err) {
 8021d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	d005      	beq.n	8021d16 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8021d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021d0c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8021d10:	d034      	beq.n	8021d7c <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8021d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021d14:	e041      	b.n	8021d9a <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8021d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d18:	3b01      	subs	r3, #1
 8021d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021d1c:	429a      	cmp	r2, r3
 8021d1e:	d01b      	beq.n	8021d58 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8021d20:	69bb      	ldr	r3, [r7, #24]
 8021d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021d24:	0092      	lsls	r2, r2, #2
 8021d26:	2104      	movs	r1, #4
 8021d28:	9103      	str	r1, [sp, #12]
 8021d2a:	f107 0118 	add.w	r1, r7, #24
 8021d2e:	9102      	str	r1, [sp, #8]
 8021d30:	9201      	str	r2, [sp, #4]
 8021d32:	9300      	str	r3, [sp, #0]
 8021d34:	2304      	movs	r3, #4
 8021d36:	687a      	ldr	r2, [r7, #4]
 8021d38:	2100      	movs	r1, #0
 8021d3a:	68f8      	ldr	r0, [r7, #12]
 8021d3c:	f7fb fba6 	bl	801d48c <lfs_bd_read>
 8021d40:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8021d42:	69bb      	ldr	r3, [r7, #24]
 8021d44:	4618      	mov	r0, r3
 8021d46:	f7fb fb36 	bl	801d3b6 <lfs_fromle32>
 8021d4a:	4603      	mov	r3, r0
 8021d4c:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8021d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021d50:	2b00      	cmp	r3, #0
 8021d52:	d001      	beq.n	8021d58 <lfs_ctz_extend+0x1b8>
                        return err;
 8021d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021d56:	e020      	b.n	8021d9a <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8021d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021d5a:	3301      	adds	r3, #1
 8021d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8021d5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d62:	429a      	cmp	r2, r3
 8021d64:	d3b1      	bcc.n	8021cca <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8021d66:	6a3a      	ldr	r2, [r7, #32]
 8021d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021d6a:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8021d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d6e:	009a      	lsls	r2, r3, #2
 8021d70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021d72:	601a      	str	r2, [r3, #0]
            return 0;
 8021d74:	2300      	movs	r3, #0
 8021d76:	e010      	b.n	8021d9a <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8021d78:	bf00      	nop
 8021d7a:	e000      	b.n	8021d7e <lfs_ctz_extend+0x1de>
                        goto relocate;
 8021d7c:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8021d7e:	6a3b      	ldr	r3, [r7, #32]
 8021d80:	4a08      	ldr	r2, [pc, #32]	@ (8021da4 <lfs_ctz_extend+0x204>)
 8021d82:	9200      	str	r2, [sp, #0]
 8021d84:	f640 32a6 	movw	r2, #2982	@ 0xba6
 8021d88:	4907      	ldr	r1, [pc, #28]	@ (8021da8 <lfs_ctz_extend+0x208>)
 8021d8a:	4808      	ldr	r0, [pc, #32]	@ (8021dac <lfs_ctz_extend+0x20c>)
 8021d8c:	f011 fc88 	bl	80336a0 <printf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8021d90:	68b9      	ldr	r1, [r7, #8]
 8021d92:	68f8      	ldr	r0, [r7, #12]
 8021d94:	f7fb fb55 	bl	801d442 <lfs_cache_drop>
    while (true) {
 8021d98:	e709      	b.n	8021bae <lfs_ctz_extend+0xe>
    }
}
 8021d9a:	4618      	mov	r0, r3
 8021d9c:	3738      	adds	r7, #56	@ 0x38
 8021d9e:	46bd      	mov	sp, r7
 8021da0:	bd80      	pop	{r7, pc}
 8021da2:	bf00      	nop
 8021da4:	08040f14 	.word	0x08040f14
 8021da8:	08040dec 	.word	0x08040dec
 8021dac:	08040f94 	.word	0x08040f94

08021db0 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8021db0:	b580      	push	{r7, lr}
 8021db2:	b090      	sub	sp, #64	@ 0x40
 8021db4:	af04      	add	r7, sp, #16
 8021db6:	60f8      	str	r0, [r7, #12]
 8021db8:	60b9      	str	r1, [r7, #8]
 8021dba:	607a      	str	r2, [r7, #4]
 8021dbc:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8021dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	d101      	bne.n	8021dc8 <lfs_ctz_traverse+0x18>
        return 0;
 8021dc4:	2300      	movs	r3, #0
 8021dc6:	e06b      	b.n	8021ea0 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8021dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021dca:	3b01      	subs	r3, #1
 8021dcc:	61fb      	str	r3, [r7, #28]
 8021dce:	f107 031c 	add.w	r3, r7, #28
 8021dd2:	4619      	mov	r1, r3
 8021dd4:	68f8      	ldr	r0, [r7, #12]
 8021dd6:	f7ff fe3f 	bl	8021a58 <lfs_ctz_index>
 8021dda:	4603      	mov	r3, r0
 8021ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 8021dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021de0:	6839      	ldr	r1, [r7, #0]
 8021de2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8021de4:	4798      	blx	r3
 8021de6:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8021de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021dea:	2b00      	cmp	r3, #0
 8021dec:	d001      	beq.n	8021df2 <lfs_ctz_traverse+0x42>
            return err;
 8021dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021df0:	e056      	b.n	8021ea0 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8021df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021df4:	2b00      	cmp	r3, #0
 8021df6:	d101      	bne.n	8021dfc <lfs_ctz_traverse+0x4c>
            return 0;
 8021df8:	2300      	movs	r3, #0
 8021dfa:	e051      	b.n	8021ea0 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8021dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021dfe:	f003 0301 	and.w	r3, r3, #1
 8021e02:	f1c3 0302 	rsb	r3, r3, #2
 8021e06:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8021e08:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8021e0a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8021e0c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8021e0e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8021e10:	9303      	str	r3, [sp, #12]
 8021e12:	f107 0314 	add.w	r3, r7, #20
 8021e16:	9302      	str	r3, [sp, #8]
 8021e18:	2300      	movs	r3, #0
 8021e1a:	9301      	str	r3, [sp, #4]
 8021e1c:	683b      	ldr	r3, [r7, #0]
 8021e1e:	9300      	str	r3, [sp, #0]
 8021e20:	4613      	mov	r3, r2
 8021e22:	687a      	ldr	r2, [r7, #4]
 8021e24:	68b9      	ldr	r1, [r7, #8]
 8021e26:	68f8      	ldr	r0, [r7, #12]
 8021e28:	f7fb fb30 	bl	801d48c <lfs_bd_read>
 8021e2c:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8021e2e:	697b      	ldr	r3, [r7, #20]
 8021e30:	4618      	mov	r0, r3
 8021e32:	f7fb fac0 	bl	801d3b6 <lfs_fromle32>
 8021e36:	4603      	mov	r3, r0
 8021e38:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8021e3a:	69bb      	ldr	r3, [r7, #24]
 8021e3c:	4618      	mov	r0, r3
 8021e3e:	f7fb faba 	bl	801d3b6 <lfs_fromle32>
 8021e42:	4603      	mov	r3, r0
 8021e44:	61bb      	str	r3, [r7, #24]
        if (err) {
 8021e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e48:	2b00      	cmp	r3, #0
 8021e4a:	d001      	beq.n	8021e50 <lfs_ctz_traverse+0xa0>
            return err;
 8021e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e4e:	e027      	b.n	8021ea0 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8021e50:	2300      	movs	r3, #0
 8021e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021e54:	e012      	b.n	8021e7c <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8021e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e58:	009b      	lsls	r3, r3, #2
 8021e5a:	3330      	adds	r3, #48	@ 0x30
 8021e5c:	443b      	add	r3, r7
 8021e5e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8021e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021e64:	4611      	mov	r1, r2
 8021e66:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8021e68:	4798      	blx	r3
 8021e6a:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 8021e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e6e:	2b00      	cmp	r3, #0
 8021e70:	d001      	beq.n	8021e76 <lfs_ctz_traverse+0xc6>
                return err;
 8021e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e74:	e014      	b.n	8021ea0 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8021e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e78:	3301      	adds	r3, #1
 8021e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021e7c:	6a3b      	ldr	r3, [r7, #32]
 8021e7e:	3b01      	subs	r3, #1
 8021e80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021e82:	429a      	cmp	r2, r3
 8021e84:	dbe7      	blt.n	8021e56 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8021e86:	6a3b      	ldr	r3, [r7, #32]
 8021e88:	3b01      	subs	r3, #1
 8021e8a:	009b      	lsls	r3, r3, #2
 8021e8c:	3330      	adds	r3, #48	@ 0x30
 8021e8e:	443b      	add	r3, r7
 8021e90:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8021e94:	603b      	str	r3, [r7, #0]
        index -= count;
 8021e96:	6a3b      	ldr	r3, [r7, #32]
 8021e98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021e9a:	1ad3      	subs	r3, r2, r3
 8021e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 8021e9e:	e79e      	b.n	8021dde <lfs_ctz_traverse+0x2e>
    }
}
 8021ea0:	4618      	mov	r0, r3
 8021ea2:	3730      	adds	r7, #48	@ 0x30
 8021ea4:	46bd      	mov	sp, r7
 8021ea6:	bd80      	pop	{r7, pc}

08021ea8 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8021ea8:	b5b0      	push	{r4, r5, r7, lr}
 8021eaa:	b09a      	sub	sp, #104	@ 0x68
 8021eac:	af02      	add	r7, sp, #8
 8021eae:	60f8      	str	r0, [r7, #12]
 8021eb0:	60b9      	str	r1, [r7, #8]
 8021eb2:	607a      	str	r2, [r7, #4]
 8021eb4:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8021eb6:	683b      	ldr	r3, [r7, #0]
 8021eb8:	f003 0302 	and.w	r3, r3, #2
 8021ebc:	2b00      	cmp	r3, #0
 8021ebe:	d008      	beq.n	8021ed2 <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8021ec0:	68f8      	ldr	r0, [r7, #12]
 8021ec2:	f002 fded 	bl	8024aa0 <lfs_fs_forceconsistency>
 8021ec6:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8021ec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	d001      	beq.n	8021ed2 <lfs_file_opencfg_+0x2a>
            return err;
 8021ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021ed0:	e1b0      	b.n	8022234 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8021ed2:	68bb      	ldr	r3, [r7, #8]
 8021ed4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8021ed6:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8021ed8:	683a      	ldr	r2, [r7, #0]
 8021eda:	68bb      	ldr	r3, [r7, #8]
 8021edc:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 8021ede:	68bb      	ldr	r3, [r7, #8]
 8021ee0:	2200      	movs	r2, #0
 8021ee2:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8021ee4:	68bb      	ldr	r3, [r7, #8]
 8021ee6:	2200      	movs	r2, #0
 8021ee8:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8021eea:	68bb      	ldr	r3, [r7, #8]
 8021eec:	2200      	movs	r2, #0
 8021eee:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8021ef0:	68bb      	ldr	r3, [r7, #8]
 8021ef2:	f103 0108 	add.w	r1, r3, #8
 8021ef6:	68bb      	ldr	r3, [r7, #8]
 8021ef8:	3304      	adds	r3, #4
 8021efa:	1d3a      	adds	r2, r7, #4
 8021efc:	68f8      	ldr	r0, [r7, #12]
 8021efe:	f7fd fdf1 	bl	801fae4 <lfs_dir_find>
 8021f02:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8021f04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	da0c      	bge.n	8021f24 <lfs_file_opencfg_+0x7c>
 8021f0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021f0c:	f113 0f02 	cmn.w	r3, #2
 8021f10:	d105      	bne.n	8021f1e <lfs_file_opencfg_+0x76>
 8021f12:	68bb      	ldr	r3, [r7, #8]
 8021f14:	889b      	ldrh	r3, [r3, #4]
 8021f16:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8021f1a:	4293      	cmp	r3, r2
 8021f1c:	d102      	bne.n	8021f24 <lfs_file_opencfg_+0x7c>
        err = tag;
 8021f1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8021f22:	e17c      	b.n	802221e <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8021f24:	68bb      	ldr	r3, [r7, #8]
 8021f26:	2201      	movs	r2, #1
 8021f28:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8021f2a:	68b9      	ldr	r1, [r7, #8]
 8021f2c:	68f8      	ldr	r0, [r7, #12]
 8021f2e:	f7fc f970 	bl	801e212 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8021f32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021f34:	f113 0f02 	cmn.w	r3, #2
 8021f38:	d14e      	bne.n	8021fd8 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8021f3a:	683b      	ldr	r3, [r7, #0]
 8021f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	d103      	bne.n	8021f4c <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 8021f44:	f06f 0301 	mvn.w	r3, #1
 8021f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8021f4a:	e168      	b.n	802221e <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8021f4c:	687b      	ldr	r3, [r7, #4]
 8021f4e:	4618      	mov	r0, r3
 8021f50:	f7ee f9a6 	bl	80102a0 <strlen>
 8021f54:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 8021f56:	68fb      	ldr	r3, [r7, #12]
 8021f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021f5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8021f5c:	429a      	cmp	r2, r3
 8021f5e:	d903      	bls.n	8021f68 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8021f60:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8021f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8021f66:	e15a      	b.n	802221e <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8021f68:	68bb      	ldr	r3, [r7, #8]
 8021f6a:	f103 0108 	add.w	r1, r3, #8
 8021f6e:	68bb      	ldr	r3, [r7, #8]
 8021f70:	889b      	ldrh	r3, [r3, #4]
 8021f72:	029b      	lsls	r3, r3, #10
 8021f74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8021f78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8021f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021f7e:	2300      	movs	r3, #0
 8021f80:	633b      	str	r3, [r7, #48]	@ 0x30
 8021f82:	68bb      	ldr	r3, [r7, #8]
 8021f84:	889b      	ldrh	r3, [r3, #4]
 8021f86:	029a      	lsls	r2, r3, #10
 8021f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021f8a:	4313      	orrs	r3, r2
 8021f8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8021f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8021f92:	687b      	ldr	r3, [r7, #4]
 8021f94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8021f96:	68bb      	ldr	r3, [r7, #8]
 8021f98:	889b      	ldrh	r3, [r3, #4]
 8021f9a:	029b      	lsls	r3, r3, #10
 8021f9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8021fa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8021fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021fa6:	2300      	movs	r3, #0
 8021fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8021faa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8021fae:	2303      	movs	r3, #3
 8021fb0:	68f8      	ldr	r0, [r7, #12]
 8021fb2:	f7ff fadf 	bl	8021574 <lfs_dir_commit>
 8021fb6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8021fb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8021fba:	f113 0f1c 	cmn.w	r3, #28
 8021fbe:	d001      	beq.n	8021fc4 <lfs_file_opencfg_+0x11c>
 8021fc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8021fc2:	e001      	b.n	8021fc8 <lfs_file_opencfg_+0x120>
 8021fc4:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8021fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8021fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	f040 8125 	bne.w	802221c <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8021fd2:	4b9a      	ldr	r3, [pc, #616]	@ (802223c <lfs_file_opencfg_+0x394>)
 8021fd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8021fd6:	e044      	b.n	8022062 <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8021fd8:	683b      	ldr	r3, [r7, #0]
 8021fda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d003      	beq.n	8021fea <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 8021fe2:	f06f 0310 	mvn.w	r3, #16
 8021fe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8021fe8:	e119      	b.n	802221e <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8021fea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021fec:	4618      	mov	r0, r3
 8021fee:	f7fb febb 	bl	801dd68 <lfs_tag_type3>
 8021ff2:	4603      	mov	r3, r0
 8021ff4:	2b01      	cmp	r3, #1
 8021ff6:	d003      	beq.n	8022000 <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 8021ff8:	f06f 0314 	mvn.w	r3, #20
 8021ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8021ffe:	e10e      	b.n	802221e <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8022000:	683b      	ldr	r3, [r7, #0]
 8022002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8022006:	2b00      	cmp	r3, #0
 8022008:	d00e      	beq.n	8022028 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 802200a:	68bb      	ldr	r3, [r7, #8]
 802200c:	889b      	ldrh	r3, [r3, #4]
 802200e:	029b      	lsls	r3, r3, #10
 8022010:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8022014:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8022018:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 802201a:	68bb      	ldr	r3, [r7, #8]
 802201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802201e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8022022:	68bb      	ldr	r3, [r7, #8]
 8022024:	631a      	str	r2, [r3, #48]	@ 0x30
 8022026:	e01c      	b.n	8022062 <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8022028:	68bb      	ldr	r3, [r7, #8]
 802202a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 802202e:	68bb      	ldr	r3, [r7, #8]
 8022030:	889b      	ldrh	r3, [r3, #4]
 8022032:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8022034:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8022038:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 802203c:	68ba      	ldr	r2, [r7, #8]
 802203e:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8022040:	9200      	str	r2, [sp, #0]
 8022042:	4a7f      	ldr	r2, [pc, #508]	@ (8022240 <lfs_file_opencfg_+0x398>)
 8022044:	68f8      	ldr	r0, [r7, #12]
 8022046:	f7fc fb35 	bl	801e6b4 <lfs_dir_get>
 802204a:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 802204c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802204e:	2b00      	cmp	r3, #0
 8022050:	da02      	bge.n	8022058 <lfs_file_opencfg_+0x1b0>
            err = tag;
 8022052:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8022054:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8022056:	e0e2      	b.n	802221e <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8022058:	68bb      	ldr	r3, [r7, #8]
 802205a:	3328      	adds	r3, #40	@ 0x28
 802205c:	4618      	mov	r0, r3
 802205e:	f7fb fff9 	bl	801e054 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8022062:	2300      	movs	r3, #0
 8022064:	657b      	str	r3, [r7, #84]	@ 0x54
 8022066:	e063      	b.n	8022130 <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8022068:	68bb      	ldr	r3, [r7, #8]
 802206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802206c:	f003 0301 	and.w	r3, r3, #1
 8022070:	2b00      	cmp	r3, #0
 8022072:	d03c      	beq.n	80220ee <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8022074:	68bb      	ldr	r3, [r7, #8]
 8022076:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 802207a:	68bb      	ldr	r3, [r7, #8]
 802207c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802207e:	6859      	ldr	r1, [r3, #4]
 8022080:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8022082:	4613      	mov	r3, r2
 8022084:	005b      	lsls	r3, r3, #1
 8022086:	4413      	add	r3, r2
 8022088:	009b      	lsls	r3, r3, #2
 802208a:	440b      	add	r3, r1
 802208c:	781b      	ldrb	r3, [r3, #0]
 802208e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8022092:	051a      	lsls	r2, r3, #20
 8022094:	68bb      	ldr	r3, [r7, #8]
 8022096:	889b      	ldrh	r3, [r3, #4]
 8022098:	029b      	lsls	r3, r3, #10
 802209a:	ea42 0103 	orr.w	r1, r2, r3
 802209e:	68bb      	ldr	r3, [r7, #8]
 80220a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80220a2:	6858      	ldr	r0, [r3, #4]
 80220a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80220a6:	4613      	mov	r3, r2
 80220a8:	005b      	lsls	r3, r3, #1
 80220aa:	4413      	add	r3, r2
 80220ac:	009b      	lsls	r3, r3, #2
 80220ae:	4403      	add	r3, r0
 80220b0:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80220b2:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 80220b6:	68bb      	ldr	r3, [r7, #8]
 80220b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80220ba:	6859      	ldr	r1, [r3, #4]
 80220bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80220be:	4613      	mov	r3, r2
 80220c0:	005b      	lsls	r3, r3, #1
 80220c2:	4413      	add	r3, r2
 80220c4:	009b      	lsls	r3, r3, #2
 80220c6:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80220c8:	685b      	ldr	r3, [r3, #4]
 80220ca:	9300      	str	r3, [sp, #0]
 80220cc:	4603      	mov	r3, r0
 80220ce:	4a5d      	ldr	r2, [pc, #372]	@ (8022244 <lfs_file_opencfg_+0x39c>)
 80220d0:	4621      	mov	r1, r4
 80220d2:	68f8      	ldr	r0, [r7, #12]
 80220d4:	f7fc faee 	bl	801e6b4 <lfs_dir_get>
 80220d8:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 80220da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80220dc:	2b00      	cmp	r3, #0
 80220de:	da06      	bge.n	80220ee <lfs_file_opencfg_+0x246>
 80220e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80220e2:	f113 0f02 	cmn.w	r3, #2
 80220e6:	d002      	beq.n	80220ee <lfs_file_opencfg_+0x246>
                err = res;
 80220e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80220ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80220ec:	e097      	b.n	802221e <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80220ee:	68bb      	ldr	r3, [r7, #8]
 80220f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220f2:	f003 0302 	and.w	r3, r3, #2
 80220f6:	2b00      	cmp	r3, #0
 80220f8:	d017      	beq.n	802212a <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80220fa:	68bb      	ldr	r3, [r7, #8]
 80220fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80220fe:	6859      	ldr	r1, [r3, #4]
 8022100:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8022102:	4613      	mov	r3, r2
 8022104:	005b      	lsls	r3, r3, #1
 8022106:	4413      	add	r3, r2
 8022108:	009b      	lsls	r3, r3, #2
 802210a:	440b      	add	r3, r1
 802210c:	689a      	ldr	r2, [r3, #8]
 802210e:	68fb      	ldr	r3, [r7, #12]
 8022110:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8022112:	429a      	cmp	r2, r3
 8022114:	d903      	bls.n	802211e <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 8022116:	f06f 031b 	mvn.w	r3, #27
 802211a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 802211c:	e07f      	b.n	802221e <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 802211e:	68bb      	ldr	r3, [r7, #8]
 8022120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022122:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8022126:	68bb      	ldr	r3, [r7, #8]
 8022128:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 802212a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802212c:	3301      	adds	r3, #1
 802212e:	657b      	str	r3, [r7, #84]	@ 0x54
 8022130:	68bb      	ldr	r3, [r7, #8]
 8022132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022134:	689b      	ldr	r3, [r3, #8]
 8022136:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8022138:	429a      	cmp	r2, r3
 802213a:	d395      	bcc.n	8022068 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 802213c:	68bb      	ldr	r3, [r7, #8]
 802213e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022140:	681b      	ldr	r3, [r3, #0]
 8022142:	2b00      	cmp	r3, #0
 8022144:	d005      	beq.n	8022152 <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8022146:	68bb      	ldr	r3, [r7, #8]
 8022148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802214a:	681a      	ldr	r2, [r3, #0]
 802214c:	68bb      	ldr	r3, [r7, #8]
 802214e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8022150:	e010      	b.n	8022174 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8022152:	68fb      	ldr	r3, [r7, #12]
 8022154:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022158:	4618      	mov	r0, r3
 802215a:	f7fb f95b 	bl	801d414 <lfs_malloc>
 802215e:	4602      	mov	r2, r0
 8022160:	68bb      	ldr	r3, [r7, #8]
 8022162:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8022164:	68bb      	ldr	r3, [r7, #8]
 8022166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8022168:	2b00      	cmp	r3, #0
 802216a:	d103      	bne.n	8022174 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 802216c:	f06f 030b 	mvn.w	r3, #11
 8022170:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8022172:	e054      	b.n	802221e <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8022174:	68bb      	ldr	r3, [r7, #8]
 8022176:	3340      	adds	r3, #64	@ 0x40
 8022178:	4619      	mov	r1, r3
 802217a:	68f8      	ldr	r0, [r7, #12]
 802217c:	f7fb f970 	bl	801d460 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8022180:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8022182:	4618      	mov	r0, r3
 8022184:	f7fb fdf0 	bl	801dd68 <lfs_tag_type3>
 8022188:	4603      	mov	r3, r0
 802218a:	461a      	mov	r2, r3
 802218c:	f240 2301 	movw	r3, #513	@ 0x201
 8022190:	429a      	cmp	r2, r3
 8022192:	d141      	bne.n	8022218 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8022194:	68bb      	ldr	r3, [r7, #8]
 8022196:	f06f 0201 	mvn.w	r2, #1
 802219a:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 802219c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802219e:	4618      	mov	r0, r3
 80221a0:	f7fb fe1c 	bl	801dddc <lfs_tag_size>
 80221a4:	4602      	mov	r2, r0
 80221a6:	68bb      	ldr	r3, [r7, #8]
 80221a8:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 80221aa:	68bb      	ldr	r3, [r7, #8]
 80221ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80221ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80221b2:	68bb      	ldr	r3, [r7, #8]
 80221b4:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 80221b6:	68bb      	ldr	r3, [r7, #8]
 80221b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80221ba:	68bb      	ldr	r3, [r7, #8]
 80221bc:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 80221be:	68bb      	ldr	r3, [r7, #8]
 80221c0:	2200      	movs	r2, #0
 80221c2:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 80221c4:	68fb      	ldr	r3, [r7, #12]
 80221c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80221c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80221ca:	68bb      	ldr	r3, [r7, #8]
 80221cc:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80221ce:	68bb      	ldr	r3, [r7, #8]
 80221d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80221d2:	2b00      	cmp	r3, #0
 80221d4:	d020      	beq.n	8022218 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80221d6:	68bb      	ldr	r3, [r7, #8]
 80221d8:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80221dc:	68bb      	ldr	r3, [r7, #8]
 80221de:	889b      	ldrh	r3, [r3, #4]
 80221e0:	029c      	lsls	r4, r3, #10
 80221e2:	68bb      	ldr	r3, [r7, #8]
 80221e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80221e6:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80221ea:	4618      	mov	r0, r3
 80221ec:	f7fb f873 	bl	801d2d6 <lfs_min>
 80221f0:	4603      	mov	r3, r0
 80221f2:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80221f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80221f8:	68bb      	ldr	r3, [r7, #8]
 80221fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80221fc:	9300      	str	r3, [sp, #0]
 80221fe:	4613      	mov	r3, r2
 8022200:	4a0f      	ldr	r2, [pc, #60]	@ (8022240 <lfs_file_opencfg_+0x398>)
 8022202:	4629      	mov	r1, r5
 8022204:	68f8      	ldr	r0, [r7, #12]
 8022206:	f7fc fa55 	bl	801e6b4 <lfs_dir_get>
 802220a:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 802220c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802220e:	2b00      	cmp	r3, #0
 8022210:	da02      	bge.n	8022218 <lfs_file_opencfg_+0x370>
                err = res;
 8022212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022214:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8022216:	e002      	b.n	802221e <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 8022218:	2300      	movs	r3, #0
 802221a:	e00b      	b.n	8022234 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 802221c:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 802221e:	68bb      	ldr	r3, [r7, #8]
 8022220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022222:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022226:	68bb      	ldr	r3, [r7, #8]
 8022228:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 802222a:	68b9      	ldr	r1, [r7, #8]
 802222c:	68f8      	ldr	r0, [r7, #12]
 802222e:	f000 f823 	bl	8022278 <lfs_file_close_>
    return err;
 8022232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8022234:	4618      	mov	r0, r3
 8022236:	3760      	adds	r7, #96	@ 0x60
 8022238:	46bd      	mov	sp, r7
 802223a:	bdb0      	pop	{r4, r5, r7, pc}
 802223c:	20100000 	.word	0x20100000
 8022240:	700ffc00 	.word	0x700ffc00
 8022244:	7ffffc00 	.word	0x7ffffc00

08022248 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8022248:	b580      	push	{r7, lr}
 802224a:	b088      	sub	sp, #32
 802224c:	af02      	add	r7, sp, #8
 802224e:	60f8      	str	r0, [r7, #12]
 8022250:	60b9      	str	r1, [r7, #8]
 8022252:	607a      	str	r2, [r7, #4]
 8022254:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8022256:	4b07      	ldr	r3, [pc, #28]	@ (8022274 <lfs_file_open_+0x2c>)
 8022258:	9300      	str	r3, [sp, #0]
 802225a:	683b      	ldr	r3, [r7, #0]
 802225c:	687a      	ldr	r2, [r7, #4]
 802225e:	68b9      	ldr	r1, [r7, #8]
 8022260:	68f8      	ldr	r0, [r7, #12]
 8022262:	f7ff fe21 	bl	8021ea8 <lfs_file_opencfg_>
 8022266:	6178      	str	r0, [r7, #20]
    return err;
 8022268:	697b      	ldr	r3, [r7, #20]
}
 802226a:	4618      	mov	r0, r3
 802226c:	3718      	adds	r7, #24
 802226e:	46bd      	mov	sp, r7
 8022270:	bd80      	pop	{r7, pc}
 8022272:	bf00      	nop
 8022274:	080448c4 	.word	0x080448c4

08022278 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8022278:	b580      	push	{r7, lr}
 802227a:	b084      	sub	sp, #16
 802227c:	af00      	add	r7, sp, #0
 802227e:	6078      	str	r0, [r7, #4]
 8022280:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 8022282:	6839      	ldr	r1, [r7, #0]
 8022284:	6878      	ldr	r0, [r7, #4]
 8022286:	f000 f9e5 	bl	8022654 <lfs_file_sync_>
 802228a:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 802228c:	6839      	ldr	r1, [r7, #0]
 802228e:	6878      	ldr	r0, [r7, #4]
 8022290:	f7fb ff9d 	bl	801e1ce <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8022294:	683b      	ldr	r3, [r7, #0]
 8022296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	2b00      	cmp	r3, #0
 802229c:	d104      	bne.n	80222a8 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 802229e:	683b      	ldr	r3, [r7, #0]
 80222a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80222a2:	4618      	mov	r0, r3
 80222a4:	f7fb f8c2 	bl	801d42c <lfs_free>
    }

    return err;
 80222a8:	68fb      	ldr	r3, [r7, #12]
}
 80222aa:	4618      	mov	r0, r3
 80222ac:	3710      	adds	r7, #16
 80222ae:	46bd      	mov	sp, r7
 80222b0:	bd80      	pop	{r7, pc}
	...

080222b4 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80222b4:	b590      	push	{r4, r7, lr}
 80222b6:	b08d      	sub	sp, #52	@ 0x34
 80222b8:	af06      	add	r7, sp, #24
 80222ba:	6078      	str	r0, [r7, #4]
 80222bc:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80222be:	f107 030c 	add.w	r3, r7, #12
 80222c2:	4619      	mov	r1, r3
 80222c4:	6878      	ldr	r0, [r7, #4]
 80222c6:	f7fc f877 	bl	801e3b8 <lfs_alloc>
 80222ca:	6138      	str	r0, [r7, #16]
        if (err) {
 80222cc:	693b      	ldr	r3, [r7, #16]
 80222ce:	2b00      	cmp	r3, #0
 80222d0:	d001      	beq.n	80222d6 <lfs_file_relocate+0x22>
            return err;
 80222d2:	693b      	ldr	r3, [r7, #16]
 80222d4:	e0bb      	b.n	802244e <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 80222d6:	68fb      	ldr	r3, [r7, #12]
 80222d8:	4619      	mov	r1, r3
 80222da:	6878      	ldr	r0, [r7, #4]
 80222dc:	f7fb fc16 	bl	801db0c <lfs_bd_erase>
 80222e0:	6138      	str	r0, [r7, #16]
        if (err) {
 80222e2:	693b      	ldr	r3, [r7, #16]
 80222e4:	2b00      	cmp	r3, #0
 80222e6:	d006      	beq.n	80222f6 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80222e8:	693b      	ldr	r3, [r7, #16]
 80222ea:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80222ee:	f000 809b 	beq.w	8022428 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80222f2:	693b      	ldr	r3, [r7, #16]
 80222f4:	e0ab      	b.n	802244e <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80222f6:	2300      	movs	r3, #0
 80222f8:	617b      	str	r3, [r7, #20]
 80222fa:	e069      	b.n	80223d0 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80222fc:	683b      	ldr	r3, [r7, #0]
 80222fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8022304:	2b00      	cmp	r3, #0
 8022306:	d027      	beq.n	8022358 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8022308:	683b      	ldr	r3, [r7, #0]
 802230a:	f103 0008 	add.w	r0, r3, #8
 802230e:	683b      	ldr	r3, [r7, #0]
 8022310:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8022314:	683b      	ldr	r3, [r7, #0]
 8022316:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8022318:	697b      	ldr	r3, [r7, #20]
 802231a:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 802231c:	683b      	ldr	r3, [r7, #0]
 802231e:	889b      	ldrh	r3, [r3, #4]
 8022320:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8022322:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8022326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802232a:	2101      	movs	r1, #1
 802232c:	9105      	str	r1, [sp, #20]
 802232e:	f107 010b 	add.w	r1, r7, #11
 8022332:	9104      	str	r1, [sp, #16]
 8022334:	6979      	ldr	r1, [r7, #20]
 8022336:	9103      	str	r1, [sp, #12]
 8022338:	9302      	str	r3, [sp, #8]
 802233a:	4b47      	ldr	r3, [pc, #284]	@ (8022458 <lfs_file_relocate+0x1a4>)
 802233c:	9301      	str	r3, [sp, #4]
 802233e:	9200      	str	r2, [sp, #0]
 8022340:	4623      	mov	r3, r4
 8022342:	2200      	movs	r2, #0
 8022344:	4601      	mov	r1, r0
 8022346:	6878      	ldr	r0, [r7, #4]
 8022348:	f7fc f9cf 	bl	801e6ea <lfs_dir_getread>
 802234c:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 802234e:	693b      	ldr	r3, [r7, #16]
 8022350:	2b00      	cmp	r3, #0
 8022352:	d01e      	beq.n	8022392 <lfs_file_relocate+0xde>
                    return err;
 8022354:	693b      	ldr	r3, [r7, #16]
 8022356:	e07a      	b.n	802244e <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8022358:	683b      	ldr	r3, [r7, #0]
 802235a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 802235e:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8022360:	683b      	ldr	r3, [r7, #0]
 8022362:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8022364:	697b      	ldr	r3, [r7, #20]
 8022366:	1ad4      	subs	r4, r2, r3
 8022368:	683b      	ldr	r3, [r7, #0]
 802236a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802236c:	2201      	movs	r2, #1
 802236e:	9203      	str	r2, [sp, #12]
 8022370:	f107 020b 	add.w	r2, r7, #11
 8022374:	9202      	str	r2, [sp, #8]
 8022376:	697a      	ldr	r2, [r7, #20]
 8022378:	9201      	str	r2, [sp, #4]
 802237a:	9300      	str	r3, [sp, #0]
 802237c:	4623      	mov	r3, r4
 802237e:	4602      	mov	r2, r0
 8022380:	6878      	ldr	r0, [r7, #4]
 8022382:	f7fb f883 	bl	801d48c <lfs_bd_read>
 8022386:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8022388:	693b      	ldr	r3, [r7, #16]
 802238a:	2b00      	cmp	r3, #0
 802238c:	d001      	beq.n	8022392 <lfs_file_relocate+0xde>
                    return err;
 802238e:	693b      	ldr	r3, [r7, #16]
 8022390:	e05d      	b.n	802244e <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8022392:	687b      	ldr	r3, [r7, #4]
 8022394:	f103 0110 	add.w	r1, r3, #16
 8022398:	6878      	ldr	r0, [r7, #4]
 802239a:	68fb      	ldr	r3, [r7, #12]
 802239c:	2201      	movs	r2, #1
 802239e:	9203      	str	r2, [sp, #12]
 80223a0:	f107 020b 	add.w	r2, r7, #11
 80223a4:	9202      	str	r2, [sp, #8]
 80223a6:	697a      	ldr	r2, [r7, #20]
 80223a8:	9201      	str	r2, [sp, #4]
 80223aa:	9300      	str	r3, [sp, #0]
 80223ac:	2301      	movs	r3, #1
 80223ae:	4602      	mov	r2, r0
 80223b0:	6878      	ldr	r0, [r7, #4]
 80223b2:	f7fb fafd 	bl	801d9b0 <lfs_bd_prog>
 80223b6:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80223b8:	693b      	ldr	r3, [r7, #16]
 80223ba:	2b00      	cmp	r3, #0
 80223bc:	d005      	beq.n	80223ca <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80223be:	693b      	ldr	r3, [r7, #16]
 80223c0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80223c4:	d032      	beq.n	802242c <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80223c6:	693b      	ldr	r3, [r7, #16]
 80223c8:	e041      	b.n	802244e <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80223ca:	697b      	ldr	r3, [r7, #20]
 80223cc:	3301      	adds	r3, #1
 80223ce:	617b      	str	r3, [r7, #20]
 80223d0:	683b      	ldr	r3, [r7, #0]
 80223d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80223d4:	697a      	ldr	r2, [r7, #20]
 80223d6:	429a      	cmp	r2, r3
 80223d8:	d390      	bcc.n	80222fc <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80223da:	683b      	ldr	r3, [r7, #0]
 80223dc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80223de:	687b      	ldr	r3, [r7, #4]
 80223e0:	69d9      	ldr	r1, [r3, #28]
 80223e2:	687b      	ldr	r3, [r7, #4]
 80223e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80223e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80223e8:	461a      	mov	r2, r3
 80223ea:	f015 f8b5 	bl	8037558 <memcpy>
        file->cache.block = lfs->pcache.block;
 80223ee:	687b      	ldr	r3, [r7, #4]
 80223f0:	691a      	ldr	r2, [r3, #16]
 80223f2:	683b      	ldr	r3, [r7, #0]
 80223f4:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 80223f6:	687b      	ldr	r3, [r7, #4]
 80223f8:	695a      	ldr	r2, [r3, #20]
 80223fa:	683b      	ldr	r3, [r7, #0]
 80223fc:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	699a      	ldr	r2, [r3, #24]
 8022402:	683b      	ldr	r3, [r7, #0]
 8022404:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8022406:	687b      	ldr	r3, [r7, #4]
 8022408:	3310      	adds	r3, #16
 802240a:	4619      	mov	r1, r3
 802240c:	6878      	ldr	r0, [r7, #4]
 802240e:	f7fb f827 	bl	801d460 <lfs_cache_zero>

        file->block = nblock;
 8022412:	68fa      	ldr	r2, [r7, #12]
 8022414:	683b      	ldr	r3, [r7, #0]
 8022416:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8022418:	683b      	ldr	r3, [r7, #0]
 802241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802241c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8022420:	683b      	ldr	r3, [r7, #0]
 8022422:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8022424:	2300      	movs	r3, #0
 8022426:	e012      	b.n	802244e <lfs_file_relocate+0x19a>
                goto relocate;
 8022428:	bf00      	nop
 802242a:	e000      	b.n	802242e <lfs_file_relocate+0x17a>
                    goto relocate;
 802242c:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 802242e:	68fb      	ldr	r3, [r7, #12]
 8022430:	4a0a      	ldr	r2, [pc, #40]	@ (802245c <lfs_file_relocate+0x1a8>)
 8022432:	9200      	str	r2, [sp, #0]
 8022434:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 8022438:	4909      	ldr	r1, [pc, #36]	@ (8022460 <lfs_file_relocate+0x1ac>)
 802243a:	480a      	ldr	r0, [pc, #40]	@ (8022464 <lfs_file_relocate+0x1b0>)
 802243c:	f011 f930 	bl	80336a0 <printf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8022440:	687b      	ldr	r3, [r7, #4]
 8022442:	3310      	adds	r3, #16
 8022444:	4619      	mov	r1, r3
 8022446:	6878      	ldr	r0, [r7, #4]
 8022448:	f7fa fffb 	bl	801d442 <lfs_cache_drop>
    while (true) {
 802244c:	e737      	b.n	80222be <lfs_file_relocate+0xa>
    }
}
 802244e:	4618      	mov	r0, r3
 8022450:	371c      	adds	r7, #28
 8022452:	46bd      	mov	sp, r7
 8022454:	bd90      	pop	{r4, r7, pc}
 8022456:	bf00      	nop
 8022458:	fff7fc00 	.word	0xfff7fc00
 802245c:	08040f14 	.word	0x08040f14
 8022460:	08040dec 	.word	0x08040dec
 8022464:	08040f94 	.word	0x08040f94

08022468 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8022468:	b580      	push	{r7, lr}
 802246a:	b084      	sub	sp, #16
 802246c:	af00      	add	r7, sp, #0
 802246e:	6078      	str	r0, [r7, #4]
 8022470:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8022472:	683b      	ldr	r3, [r7, #0]
 8022474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022476:	683b      	ldr	r3, [r7, #0]
 8022478:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 802247a:	6878      	ldr	r0, [r7, #4]
 802247c:	f7fb ff05 	bl	801e28a <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 8022480:	6839      	ldr	r1, [r7, #0]
 8022482:	6878      	ldr	r0, [r7, #4]
 8022484:	f7ff ff16 	bl	80222b4 <lfs_file_relocate>
 8022488:	60f8      	str	r0, [r7, #12]
    if (err) {
 802248a:	68fb      	ldr	r3, [r7, #12]
 802248c:	2b00      	cmp	r3, #0
 802248e:	d001      	beq.n	8022494 <lfs_file_outline+0x2c>
        return err;
 8022490:	68fb      	ldr	r3, [r7, #12]
 8022492:	e006      	b.n	80224a2 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8022494:	683b      	ldr	r3, [r7, #0]
 8022496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022498:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 802249c:	683b      	ldr	r3, [r7, #0]
 802249e:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 80224a0:	2300      	movs	r3, #0
}
 80224a2:	4618      	mov	r0, r3
 80224a4:	3710      	adds	r7, #16
 80224a6:	46bd      	mov	sp, r7
 80224a8:	bd80      	pop	{r7, pc}
	...

080224ac <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80224ac:	b590      	push	{r4, r7, lr}
 80224ae:	b09f      	sub	sp, #124	@ 0x7c
 80224b0:	af02      	add	r7, sp, #8
 80224b2:	6078      	str	r0, [r7, #4]
 80224b4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80224b6:	683b      	ldr	r3, [r7, #0]
 80224b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80224ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d011      	beq.n	80224e6 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80224c2:	683b      	ldr	r3, [r7, #0]
 80224c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80224c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80224ca:	2b00      	cmp	r3, #0
 80224cc:	d105      	bne.n	80224da <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80224ce:	683b      	ldr	r3, [r7, #0]
 80224d0:	3340      	adds	r3, #64	@ 0x40
 80224d2:	4619      	mov	r1, r3
 80224d4:	6878      	ldr	r0, [r7, #4]
 80224d6:	f7fa ffb4 	bl	801d442 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80224da:	683b      	ldr	r3, [r7, #0]
 80224dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80224de:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80224e2:	683b      	ldr	r3, [r7, #0]
 80224e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80224e6:	683b      	ldr	r3, [r7, #0]
 80224e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80224ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80224ee:	2b00      	cmp	r3, #0
 80224f0:	f000 80a4 	beq.w	802263c <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80224f4:	683b      	ldr	r3, [r7, #0]
 80224f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80224f8:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80224fa:	683b      	ldr	r3, [r7, #0]
 80224fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80224fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8022502:	2b00      	cmp	r3, #0
 8022504:	d176      	bne.n	80225f4 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8022506:	f107 030c 	add.w	r3, r7, #12
 802250a:	2254      	movs	r2, #84	@ 0x54
 802250c:	2100      	movs	r1, #0
 802250e:	4618      	mov	r0, r3
 8022510:	f013 fde6 	bl	80360e0 <memset>
                .ctz.head = file->ctz.head,
 8022514:	683b      	ldr	r3, [r7, #0]
 8022516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8022518:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 802251a:	683b      	ldr	r3, [r7, #0]
 802251c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 802251e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8022520:	2301      	movs	r3, #1
 8022522:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8022524:	683b      	ldr	r3, [r7, #0]
 8022526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8022528:	643b      	str	r3, [r7, #64]	@ 0x40
 802252a:	687b      	ldr	r3, [r7, #4]
 802252c:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8022530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8022532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8022536:	687b      	ldr	r3, [r7, #4]
 8022538:	4619      	mov	r1, r3
 802253a:	6878      	ldr	r0, [r7, #4]
 802253c:	f7fa ff81 	bl	801d442 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8022540:	e02b      	b.n	802259a <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8022542:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8022546:	f107 010c 	add.w	r1, r7, #12
 802254a:	2301      	movs	r3, #1
 802254c:	6878      	ldr	r0, [r7, #4]
 802254e:	f000 f921 	bl	8022794 <lfs_file_flushedread>
 8022552:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8022554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022556:	2b00      	cmp	r3, #0
 8022558:	da01      	bge.n	802255e <lfs_file_flush+0xb2>
                    return res;
 802255a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802255c:	e06f      	b.n	802263e <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 802255e:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8022562:	2301      	movs	r3, #1
 8022564:	6839      	ldr	r1, [r7, #0]
 8022566:	6878      	ldr	r0, [r7, #4]
 8022568:	f000 fa1c 	bl	80229a4 <lfs_file_flushedwrite>
 802256c:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 802256e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022570:	2b00      	cmp	r3, #0
 8022572:	da01      	bge.n	8022578 <lfs_file_flush+0xcc>
                    return res;
 8022574:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022576:	e062      	b.n	802263e <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	681b      	ldr	r3, [r3, #0]
 802257c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8022580:	d00b      	beq.n	802259a <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8022582:	f107 030c 	add.w	r3, r7, #12
 8022586:	3340      	adds	r3, #64	@ 0x40
 8022588:	4619      	mov	r1, r3
 802258a:	6878      	ldr	r0, [r7, #4]
 802258c:	f7fa ff59 	bl	801d442 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	4619      	mov	r1, r3
 8022594:	6878      	ldr	r0, [r7, #4]
 8022596:	f7fa ff54 	bl	801d442 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 802259a:	683b      	ldr	r3, [r7, #0]
 802259c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802259e:	683b      	ldr	r3, [r7, #0]
 80225a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80225a2:	429a      	cmp	r2, r3
 80225a4:	d3cd      	bcc.n	8022542 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80225a6:	683b      	ldr	r3, [r7, #0]
 80225a8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80225ac:	687a      	ldr	r2, [r7, #4]
 80225ae:	2301      	movs	r3, #1
 80225b0:	6878      	ldr	r0, [r7, #4]
 80225b2:	f7fb f94f 	bl	801d854 <lfs_bd_flush>
 80225b6:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 80225b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d026      	beq.n	802260c <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80225be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80225c0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80225c4:	d001      	beq.n	80225ca <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80225c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80225c8:	e039      	b.n	802263e <lfs_file_flush+0x192>
                        goto relocate;
 80225ca:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80225cc:	683b      	ldr	r3, [r7, #0]
 80225ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80225d0:	4a1d      	ldr	r2, [pc, #116]	@ (8022648 <lfs_file_flush+0x19c>)
 80225d2:	9200      	str	r2, [sp, #0]
 80225d4:	f640 522b 	movw	r2, #3371	@ 0xd2b
 80225d8:	491c      	ldr	r1, [pc, #112]	@ (802264c <lfs_file_flush+0x1a0>)
 80225da:	481d      	ldr	r0, [pc, #116]	@ (8022650 <lfs_file_flush+0x1a4>)
 80225dc:	f011 f860 	bl	80336a0 <printf>
                err = lfs_file_relocate(lfs, file);
 80225e0:	6839      	ldr	r1, [r7, #0]
 80225e2:	6878      	ldr	r0, [r7, #4]
 80225e4:	f7ff fe66 	bl	80222b4 <lfs_file_relocate>
 80225e8:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 80225ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80225ec:	2b00      	cmp	r3, #0
 80225ee:	d0da      	beq.n	80225a6 <lfs_file_flush+0xfa>
                    return err;
 80225f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80225f2:	e024      	b.n	802263e <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80225f4:	683b      	ldr	r3, [r7, #0]
 80225f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80225f8:	683b      	ldr	r3, [r7, #0]
 80225fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80225fc:	4619      	mov	r1, r3
 80225fe:	4610      	mov	r0, r2
 8022600:	f7fa fe59 	bl	801d2b6 <lfs_max>
 8022604:	4602      	mov	r2, r0
 8022606:	683b      	ldr	r3, [r7, #0]
 8022608:	635a      	str	r2, [r3, #52]	@ 0x34
 802260a:	e000      	b.n	802260e <lfs_file_flush+0x162>
                break;
 802260c:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 802260e:	683b      	ldr	r3, [r7, #0]
 8022610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8022612:	683b      	ldr	r3, [r7, #0]
 8022614:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 8022616:	683b      	ldr	r3, [r7, #0]
 8022618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802261a:	683b      	ldr	r3, [r7, #0]
 802261c:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 802261e:	683b      	ldr	r3, [r7, #0]
 8022620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022622:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8022626:	683b      	ldr	r3, [r7, #0]
 8022628:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 802262a:	683b      	ldr	r3, [r7, #0]
 802262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802262e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8022632:	683b      	ldr	r3, [r7, #0]
 8022634:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 8022636:	683b      	ldr	r3, [r7, #0]
 8022638:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 802263a:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 802263c:	2300      	movs	r3, #0
}
 802263e:	4618      	mov	r0, r3
 8022640:	3774      	adds	r7, #116	@ 0x74
 8022642:	46bd      	mov	sp, r7
 8022644:	bd90      	pop	{r4, r7, pc}
 8022646:	bf00      	nop
 8022648:	08040f14 	.word	0x08040f14
 802264c:	08040dec 	.word	0x08040dec
 8022650:	08040f94 	.word	0x08040f94

08022654 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8022654:	b580      	push	{r7, lr}
 8022656:	b090      	sub	sp, #64	@ 0x40
 8022658:	af00      	add	r7, sp, #0
 802265a:	6078      	str	r0, [r7, #4]
 802265c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 802265e:	683b      	ldr	r3, [r7, #0]
 8022660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022662:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8022666:	2b00      	cmp	r3, #0
 8022668:	d001      	beq.n	802266e <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 802266a:	2300      	movs	r3, #0
 802266c:	e08e      	b.n	802278c <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 802266e:	6839      	ldr	r1, [r7, #0]
 8022670:	6878      	ldr	r0, [r7, #4]
 8022672:	f7ff ff1b 	bl	80224ac <lfs_file_flush>
 8022676:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8022678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802267a:	2b00      	cmp	r3, #0
 802267c:	d007      	beq.n	802268e <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 802267e:	683b      	ldr	r3, [r7, #0]
 8022680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022682:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022686:	683b      	ldr	r3, [r7, #0]
 8022688:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 802268a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802268c:	e07e      	b.n	802278c <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 802268e:	683b      	ldr	r3, [r7, #0]
 8022690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8022696:	2b00      	cmp	r3, #0
 8022698:	d077      	beq.n	802278a <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 802269a:	683b      	ldr	r3, [r7, #0]
 802269c:	3308      	adds	r3, #8
 802269e:	4618      	mov	r0, r3
 80226a0:	f7fb fa7b 	bl	801db9a <lfs_pair_isnull>
 80226a4:	4603      	mov	r3, r0
 80226a6:	f083 0301 	eor.w	r3, r3, #1
 80226aa:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80226ac:	2b00      	cmp	r3, #0
 80226ae:	d06c      	beq.n	802278a <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 80226b0:	683b      	ldr	r3, [r7, #0]
 80226b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80226b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80226b8:	2b00      	cmp	r3, #0
 80226ba:	d10d      	bne.n	80226d8 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80226bc:	687b      	ldr	r3, [r7, #4]
 80226be:	f103 0110 	add.w	r1, r3, #16
 80226c2:	687a      	ldr	r2, [r7, #4]
 80226c4:	2300      	movs	r3, #0
 80226c6:	6878      	ldr	r0, [r7, #4]
 80226c8:	f7fb f93e 	bl	801d948 <lfs_bd_sync>
 80226cc:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 80226ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80226d0:	2b00      	cmp	r3, #0
 80226d2:	d001      	beq.n	80226d8 <lfs_file_sync_+0x84>
                return err;
 80226d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80226d6:	e059      	b.n	802278c <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80226d8:	683b      	ldr	r3, [r7, #0]
 80226da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80226dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80226e0:	2b00      	cmp	r3, #0
 80226e2:	d009      	beq.n	80226f8 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80226e4:	f240 2301 	movw	r3, #513	@ 0x201
 80226e8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 80226ea:	683b      	ldr	r3, [r7, #0]
 80226ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80226ee:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 80226f0:	683b      	ldr	r3, [r7, #0]
 80226f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80226f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80226f6:	e014      	b.n	8022722 <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80226f8:	f240 2302 	movw	r3, #514	@ 0x202
 80226fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80226fe:	683a      	ldr	r2, [r7, #0]
 8022700:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8022704:	3228      	adds	r2, #40	@ 0x28
 8022706:	e892 0003 	ldmia.w	r2, {r0, r1}
 802270a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 802270e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8022712:	4618      	mov	r0, r3
 8022714:	f7fb fcb6 	bl	801e084 <lfs_ctz_tole32>
            buffer = &ctz;
 8022718:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802271c:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 802271e:	2308      	movs	r3, #8
 8022720:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8022722:	683b      	ldr	r3, [r7, #0]
 8022724:	f103 0108 	add.w	r1, r3, #8
 8022728:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 802272a:	051a      	lsls	r2, r3, #20
 802272c:	683b      	ldr	r3, [r7, #0]
 802272e:	889b      	ldrh	r3, [r3, #4]
 8022730:	029b      	lsls	r3, r3, #10
 8022732:	431a      	orrs	r2, r3
 8022734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022736:	4313      	orrs	r3, r2
 8022738:	61bb      	str	r3, [r7, #24]
 802273a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802273c:	61fb      	str	r3, [r7, #28]
 802273e:	683b      	ldr	r3, [r7, #0]
 8022740:	889b      	ldrh	r3, [r3, #4]
 8022742:	029a      	lsls	r2, r3, #10
 8022744:	683b      	ldr	r3, [r7, #0]
 8022746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022748:	689b      	ldr	r3, [r3, #8]
 802274a:	4313      	orrs	r3, r2
 802274c:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 8022750:	623b      	str	r3, [r7, #32]
 8022752:	683b      	ldr	r3, [r7, #0]
 8022754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022756:	685b      	ldr	r3, [r3, #4]
 8022758:	627b      	str	r3, [r7, #36]	@ 0x24
 802275a:	f107 0218 	add.w	r2, r7, #24
 802275e:	2302      	movs	r3, #2
 8022760:	6878      	ldr	r0, [r7, #4]
 8022762:	f7fe ff07 	bl	8021574 <lfs_dir_commit>
 8022766:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8022768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802276a:	2b00      	cmp	r3, #0
 802276c:	d007      	beq.n	802277e <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 802276e:	683b      	ldr	r3, [r7, #0]
 8022770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022772:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022776:	683b      	ldr	r3, [r7, #0]
 8022778:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 802277a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802277c:	e006      	b.n	802278c <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 802277e:	683b      	ldr	r3, [r7, #0]
 8022780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022782:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8022786:	683b      	ldr	r3, [r7, #0]
 8022788:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 802278a:	2300      	movs	r3, #0
}
 802278c:	4618      	mov	r0, r3
 802278e:	3740      	adds	r7, #64	@ 0x40
 8022790:	46bd      	mov	sp, r7
 8022792:	bd80      	pop	{r7, pc}

08022794 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8022794:	b5b0      	push	{r4, r5, r7, lr}
 8022796:	b090      	sub	sp, #64	@ 0x40
 8022798:	af06      	add	r7, sp, #24
 802279a:	60f8      	str	r0, [r7, #12]
 802279c:	60b9      	str	r1, [r7, #8]
 802279e:	607a      	str	r2, [r7, #4]
 80227a0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80227a2:	687b      	ldr	r3, [r7, #4]
 80227a4:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 80227a6:	683b      	ldr	r3, [r7, #0]
 80227a8:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80227aa:	68bb      	ldr	r3, [r7, #8]
 80227ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80227ae:	68bb      	ldr	r3, [r7, #8]
 80227b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80227b2:	429a      	cmp	r2, r3
 80227b4:	d301      	bcc.n	80227ba <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80227b6:	2300      	movs	r3, #0
 80227b8:	e0b7      	b.n	802292a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80227ba:	68bb      	ldr	r3, [r7, #8]
 80227bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80227be:	68bb      	ldr	r3, [r7, #8]
 80227c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80227c2:	1ad3      	subs	r3, r2, r3
 80227c4:	4619      	mov	r1, r3
 80227c6:	6838      	ldr	r0, [r7, #0]
 80227c8:	f7fa fd85 	bl	801d2d6 <lfs_min>
 80227cc:	6038      	str	r0, [r7, #0]
    nsize = size;
 80227ce:	683b      	ldr	r3, [r7, #0]
 80227d0:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80227d2:	e0a5      	b.n	8022920 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80227d4:	68bb      	ldr	r3, [r7, #8]
 80227d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80227d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80227dc:	2b00      	cmp	r3, #0
 80227de:	d006      	beq.n	80227ee <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80227e0:	68bb      	ldr	r3, [r7, #8]
 80227e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80227e4:	68fb      	ldr	r3, [r7, #12]
 80227e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80227e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 80227ea:	429a      	cmp	r2, r3
 80227ec:	d130      	bne.n	8022850 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80227ee:	68bb      	ldr	r3, [r7, #8]
 80227f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80227f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80227f6:	2b00      	cmp	r3, #0
 80227f8:	d11c      	bne.n	8022834 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80227fa:	68bb      	ldr	r3, [r7, #8]
 80227fc:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8022800:	68bb      	ldr	r3, [r7, #8]
 8022802:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8022804:	68bb      	ldr	r3, [r7, #8]
 8022806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022808:	68ba      	ldr	r2, [r7, #8]
 802280a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802280c:	68b9      	ldr	r1, [r7, #8]
 802280e:	3138      	adds	r1, #56	@ 0x38
 8022810:	68b8      	ldr	r0, [r7, #8]
 8022812:	303c      	adds	r0, #60	@ 0x3c
 8022814:	9003      	str	r0, [sp, #12]
 8022816:	9102      	str	r1, [sp, #8]
 8022818:	9201      	str	r2, [sp, #4]
 802281a:	9300      	str	r3, [sp, #0]
 802281c:	462b      	mov	r3, r5
 802281e:	4622      	mov	r2, r4
 8022820:	2100      	movs	r1, #0
 8022822:	68f8      	ldr	r0, [r7, #12]
 8022824:	f7ff f950 	bl	8021ac8 <lfs_ctz_find>
 8022828:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 802282a:	69fb      	ldr	r3, [r7, #28]
 802282c:	2b00      	cmp	r3, #0
 802282e:	d009      	beq.n	8022844 <lfs_file_flushedread+0xb0>
                    return err;
 8022830:	69fb      	ldr	r3, [r7, #28]
 8022832:	e07a      	b.n	802292a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8022834:	68bb      	ldr	r3, [r7, #8]
 8022836:	f06f 0201 	mvn.w	r2, #1
 802283a:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 802283c:	68bb      	ldr	r3, [r7, #8]
 802283e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022840:	68bb      	ldr	r3, [r7, #8]
 8022842:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8022844:	68bb      	ldr	r3, [r7, #8]
 8022846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022848:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 802284c:	68bb      	ldr	r3, [r7, #8]
 802284e:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8022850:	68fb      	ldr	r3, [r7, #12]
 8022852:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8022856:	68bb      	ldr	r3, [r7, #8]
 8022858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802285a:	1ad3      	subs	r3, r2, r3
 802285c:	4619      	mov	r1, r3
 802285e:	6a38      	ldr	r0, [r7, #32]
 8022860:	f7fa fd39 	bl	801d2d6 <lfs_min>
 8022864:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8022866:	68bb      	ldr	r3, [r7, #8]
 8022868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802286a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802286e:	2b00      	cmp	r3, #0
 8022870:	d026      	beq.n	80228c0 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8022872:	68bb      	ldr	r3, [r7, #8]
 8022874:	f103 0408 	add.w	r4, r3, #8
 8022878:	68bb      	ldr	r3, [r7, #8]
 802287a:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 802287e:	68fb      	ldr	r3, [r7, #12]
 8022880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022882:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8022884:	68bb      	ldr	r3, [r7, #8]
 8022886:	889b      	ldrh	r3, [r3, #4]
 8022888:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 802288a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 802288e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8022892:	68b9      	ldr	r1, [r7, #8]
 8022894:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8022896:	69b8      	ldr	r0, [r7, #24]
 8022898:	9005      	str	r0, [sp, #20]
 802289a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802289c:	9004      	str	r0, [sp, #16]
 802289e:	9103      	str	r1, [sp, #12]
 80228a0:	9302      	str	r3, [sp, #8]
 80228a2:	4b24      	ldr	r3, [pc, #144]	@ (8022934 <lfs_file_flushedread+0x1a0>)
 80228a4:	9301      	str	r3, [sp, #4]
 80228a6:	9200      	str	r2, [sp, #0]
 80228a8:	462b      	mov	r3, r5
 80228aa:	2200      	movs	r2, #0
 80228ac:	4621      	mov	r1, r4
 80228ae:	68f8      	ldr	r0, [r7, #12]
 80228b0:	f7fb ff1b 	bl	801e6ea <lfs_dir_getread>
 80228b4:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80228b6:	693b      	ldr	r3, [r7, #16]
 80228b8:	2b00      	cmp	r3, #0
 80228ba:	d01d      	beq.n	80228f8 <lfs_file_flushedread+0x164>
                return err;
 80228bc:	693b      	ldr	r3, [r7, #16]
 80228be:	e034      	b.n	802292a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80228c0:	68bb      	ldr	r3, [r7, #8]
 80228c2:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80228c6:	68fb      	ldr	r3, [r7, #12]
 80228c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80228ca:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 80228cc:	68bb      	ldr	r3, [r7, #8]
 80228ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80228d0:	68ba      	ldr	r2, [r7, #8]
 80228d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80228d4:	69b9      	ldr	r1, [r7, #24]
 80228d6:	9103      	str	r1, [sp, #12]
 80228d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80228da:	9102      	str	r1, [sp, #8]
 80228dc:	9201      	str	r2, [sp, #4]
 80228de:	9300      	str	r3, [sp, #0]
 80228e0:	4623      	mov	r3, r4
 80228e2:	4602      	mov	r2, r0
 80228e4:	2100      	movs	r1, #0
 80228e6:	68f8      	ldr	r0, [r7, #12]
 80228e8:	f7fa fdd0 	bl	801d48c <lfs_bd_read>
 80228ec:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80228ee:	697b      	ldr	r3, [r7, #20]
 80228f0:	2b00      	cmp	r3, #0
 80228f2:	d001      	beq.n	80228f8 <lfs_file_flushedread+0x164>
                return err;
 80228f4:	697b      	ldr	r3, [r7, #20]
 80228f6:	e018      	b.n	802292a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80228f8:	68bb      	ldr	r3, [r7, #8]
 80228fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80228fc:	69bb      	ldr	r3, [r7, #24]
 80228fe:	441a      	add	r2, r3
 8022900:	68bb      	ldr	r3, [r7, #8]
 8022902:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8022904:	68bb      	ldr	r3, [r7, #8]
 8022906:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022908:	69bb      	ldr	r3, [r7, #24]
 802290a:	441a      	add	r2, r3
 802290c:	68bb      	ldr	r3, [r7, #8]
 802290e:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8022910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022912:	69bb      	ldr	r3, [r7, #24]
 8022914:	4413      	add	r3, r2
 8022916:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8022918:	6a3a      	ldr	r2, [r7, #32]
 802291a:	69bb      	ldr	r3, [r7, #24]
 802291c:	1ad3      	subs	r3, r2, r3
 802291e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8022920:	6a3b      	ldr	r3, [r7, #32]
 8022922:	2b00      	cmp	r3, #0
 8022924:	f47f af56 	bne.w	80227d4 <lfs_file_flushedread+0x40>
    }

    return size;
 8022928:	683b      	ldr	r3, [r7, #0]
}
 802292a:	4618      	mov	r0, r3
 802292c:	3728      	adds	r7, #40	@ 0x28
 802292e:	46bd      	mov	sp, r7
 8022930:	bdb0      	pop	{r4, r5, r7, pc}
 8022932:	bf00      	nop
 8022934:	fff7fc00 	.word	0xfff7fc00

08022938 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8022938:	b580      	push	{r7, lr}
 802293a:	b086      	sub	sp, #24
 802293c:	af00      	add	r7, sp, #0
 802293e:	60f8      	str	r0, [r7, #12]
 8022940:	60b9      	str	r1, [r7, #8]
 8022942:	607a      	str	r2, [r7, #4]
 8022944:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8022946:	68bb      	ldr	r3, [r7, #8]
 8022948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802294a:	f003 0301 	and.w	r3, r3, #1
 802294e:	2b00      	cmp	r3, #0
 8022950:	d106      	bne.n	8022960 <lfs_file_read_+0x28>
 8022952:	4b11      	ldr	r3, [pc, #68]	@ (8022998 <lfs_file_read_+0x60>)
 8022954:	4a11      	ldr	r2, [pc, #68]	@ (802299c <lfs_file_read_+0x64>)
 8022956:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 802295a:	4811      	ldr	r0, [pc, #68]	@ (80229a0 <lfs_file_read_+0x68>)
 802295c:	f010 fe6c 	bl	8033638 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8022960:	68bb      	ldr	r3, [r7, #8]
 8022962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022968:	2b00      	cmp	r3, #0
 802296a:	d009      	beq.n	8022980 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 802296c:	68b9      	ldr	r1, [r7, #8]
 802296e:	68f8      	ldr	r0, [r7, #12]
 8022970:	f7ff fd9c 	bl	80224ac <lfs_file_flush>
 8022974:	6178      	str	r0, [r7, #20]
        if (err) {
 8022976:	697b      	ldr	r3, [r7, #20]
 8022978:	2b00      	cmp	r3, #0
 802297a:	d001      	beq.n	8022980 <lfs_file_read_+0x48>
            return err;
 802297c:	697b      	ldr	r3, [r7, #20]
 802297e:	e006      	b.n	802298e <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8022980:	683b      	ldr	r3, [r7, #0]
 8022982:	687a      	ldr	r2, [r7, #4]
 8022984:	68b9      	ldr	r1, [r7, #8]
 8022986:	68f8      	ldr	r0, [r7, #12]
 8022988:	f7ff ff04 	bl	8022794 <lfs_file_flushedread>
 802298c:	4603      	mov	r3, r0
}
 802298e:	4618      	mov	r0, r3
 8022990:	3718      	adds	r7, #24
 8022992:	46bd      	mov	sp, r7
 8022994:	bd80      	pop	{r7, pc}
 8022996:	bf00      	nop
 8022998:	0804113c 	.word	0x0804113c
 802299c:	080448d0 	.word	0x080448d0
 80229a0:	08040dec 	.word	0x08040dec

080229a4 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80229a4:	b5b0      	push	{r4, r5, r7, lr}
 80229a6:	b090      	sub	sp, #64	@ 0x40
 80229a8:	af04      	add	r7, sp, #16
 80229aa:	60f8      	str	r0, [r7, #12]
 80229ac:	60b9      	str	r1, [r7, #8]
 80229ae:	607a      	str	r2, [r7, #4]
 80229b0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80229b2:	687b      	ldr	r3, [r7, #4]
 80229b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 80229b6:	683b      	ldr	r3, [r7, #0]
 80229b8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 80229ba:	68bb      	ldr	r3, [r7, #8]
 80229bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80229be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80229c2:	2b00      	cmp	r3, #0
 80229c4:	f000 80f4 	beq.w	8022bb0 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 80229c8:	68bb      	ldr	r3, [r7, #8]
 80229ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80229cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80229ce:	441a      	add	r2, r3
 80229d0:	68bb      	ldr	r3, [r7, #8]
 80229d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80229d4:	4619      	mov	r1, r3
 80229d6:	4610      	mov	r0, r2
 80229d8:	f7fa fc6d 	bl	801d2b6 <lfs_max>
 80229dc:	4602      	mov	r2, r0
 80229de:	68fb      	ldr	r3, [r7, #12]
 80229e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 80229e2:	429a      	cmp	r2, r3
 80229e4:	f240 80e4 	bls.w	8022bb0 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80229e8:	68b9      	ldr	r1, [r7, #8]
 80229ea:	68f8      	ldr	r0, [r7, #12]
 80229ec:	f7ff fd3c 	bl	8022468 <lfs_file_outline>
 80229f0:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 80229f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80229f4:	2b00      	cmp	r3, #0
 80229f6:	f000 80db 	beq.w	8022bb0 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 80229fa:	68bb      	ldr	r3, [r7, #8]
 80229fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80229fe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022a02:	68bb      	ldr	r3, [r7, #8]
 8022a04:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8022a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022a08:	e0d7      	b.n	8022bba <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8022a0a:	68bb      	ldr	r3, [r7, #8]
 8022a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022a12:	2b00      	cmp	r3, #0
 8022a14:	d006      	beq.n	8022a24 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8022a16:	68bb      	ldr	r3, [r7, #8]
 8022a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022a1a:	68fb      	ldr	r3, [r7, #12]
 8022a1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 8022a20:	429a      	cmp	r2, r3
 8022a22:	d16d      	bne.n	8022b00 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8022a24:	68bb      	ldr	r3, [r7, #8]
 8022a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8022a2c:	2b00      	cmp	r3, #0
 8022a2e:	d159      	bne.n	8022ae4 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8022a30:	68bb      	ldr	r3, [r7, #8]
 8022a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022a38:	2b00      	cmp	r3, #0
 8022a3a:	d12f      	bne.n	8022a9c <lfs_file_flushedwrite+0xf8>
 8022a3c:	68bb      	ldr	r3, [r7, #8]
 8022a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a40:	2b00      	cmp	r3, #0
 8022a42:	d02b      	beq.n	8022a9c <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8022a44:	68bb      	ldr	r3, [r7, #8]
 8022a46:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8022a4a:	68bb      	ldr	r3, [r7, #8]
 8022a4c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8022a4e:	68bb      	ldr	r3, [r7, #8]
 8022a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8022a52:	68ba      	ldr	r2, [r7, #8]
 8022a54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8022a56:	3a01      	subs	r2, #1
 8022a58:	68b9      	ldr	r1, [r7, #8]
 8022a5a:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8022a5c:	2000      	movs	r0, #0
 8022a5e:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8022a60:	f107 0010 	add.w	r0, r7, #16
 8022a64:	9003      	str	r0, [sp, #12]
 8022a66:	9102      	str	r1, [sp, #8]
 8022a68:	9201      	str	r2, [sp, #4]
 8022a6a:	9300      	str	r3, [sp, #0]
 8022a6c:	462b      	mov	r3, r5
 8022a6e:	4622      	mov	r2, r4
 8022a70:	2100      	movs	r1, #0
 8022a72:	68f8      	ldr	r0, [r7, #12]
 8022a74:	f7ff f828 	bl	8021ac8 <lfs_ctz_find>
 8022a78:	6238      	str	r0, [r7, #32]
                    if (err) {
 8022a7a:	6a3b      	ldr	r3, [r7, #32]
 8022a7c:	2b00      	cmp	r3, #0
 8022a7e:	d007      	beq.n	8022a90 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8022a80:	68bb      	ldr	r3, [r7, #8]
 8022a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022a84:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022a88:	68bb      	ldr	r3, [r7, #8]
 8022a8a:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8022a8c:	6a3b      	ldr	r3, [r7, #32]
 8022a8e:	e094      	b.n	8022bba <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8022a90:	68bb      	ldr	r3, [r7, #8]
 8022a92:	3340      	adds	r3, #64	@ 0x40
 8022a94:	4619      	mov	r1, r3
 8022a96:	68f8      	ldr	r0, [r7, #12]
 8022a98:	f7fa fce2 	bl	801d460 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8022a9c:	68f8      	ldr	r0, [r7, #12]
 8022a9e:	f7fb fbf4 	bl	801e28a <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8022aa2:	68bb      	ldr	r3, [r7, #8]
 8022aa4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8022aa8:	68fc      	ldr	r4, [r7, #12]
 8022aaa:	68bb      	ldr	r3, [r7, #8]
 8022aac:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 8022aae:	68bb      	ldr	r3, [r7, #8]
 8022ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022ab2:	68ba      	ldr	r2, [r7, #8]
 8022ab4:	3238      	adds	r2, #56	@ 0x38
 8022ab6:	68b9      	ldr	r1, [r7, #8]
 8022ab8:	313c      	adds	r1, #60	@ 0x3c
 8022aba:	9102      	str	r1, [sp, #8]
 8022abc:	9201      	str	r2, [sp, #4]
 8022abe:	9300      	str	r3, [sp, #0]
 8022ac0:	462b      	mov	r3, r5
 8022ac2:	4622      	mov	r2, r4
 8022ac4:	4601      	mov	r1, r0
 8022ac6:	68f8      	ldr	r0, [r7, #12]
 8022ac8:	f7ff f86a 	bl	8021ba0 <lfs_ctz_extend>
 8022acc:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8022ace:	69fb      	ldr	r3, [r7, #28]
 8022ad0:	2b00      	cmp	r3, #0
 8022ad2:	d00f      	beq.n	8022af4 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8022ad4:	68bb      	ldr	r3, [r7, #8]
 8022ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022ad8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022adc:	68bb      	ldr	r3, [r7, #8]
 8022ade:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 8022ae0:	69fb      	ldr	r3, [r7, #28]
 8022ae2:	e06a      	b.n	8022bba <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8022ae4:	68bb      	ldr	r3, [r7, #8]
 8022ae6:	f06f 0201 	mvn.w	r2, #1
 8022aea:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8022aec:	68bb      	ldr	r3, [r7, #8]
 8022aee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022af0:	68bb      	ldr	r3, [r7, #8]
 8022af2:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8022af4:	68bb      	ldr	r3, [r7, #8]
 8022af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022af8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8022afc:	68bb      	ldr	r3, [r7, #8]
 8022afe:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8022b00:	68fb      	ldr	r3, [r7, #12]
 8022b02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8022b06:	68bb      	ldr	r3, [r7, #8]
 8022b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022b0a:	1ad3      	subs	r3, r2, r3
 8022b0c:	4619      	mov	r1, r3
 8022b0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022b10:	f7fa fbe1 	bl	801d2d6 <lfs_min>
 8022b14:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8022b16:	68bb      	ldr	r3, [r7, #8]
 8022b18:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8022b1c:	68fc      	ldr	r4, [r7, #12]
 8022b1e:	68bb      	ldr	r3, [r7, #8]
 8022b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022b22:	68ba      	ldr	r2, [r7, #8]
 8022b24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8022b26:	69b9      	ldr	r1, [r7, #24]
 8022b28:	9103      	str	r1, [sp, #12]
 8022b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022b2c:	9102      	str	r1, [sp, #8]
 8022b2e:	9201      	str	r2, [sp, #4]
 8022b30:	9300      	str	r3, [sp, #0]
 8022b32:	2301      	movs	r3, #1
 8022b34:	4622      	mov	r2, r4
 8022b36:	4601      	mov	r1, r0
 8022b38:	68f8      	ldr	r0, [r7, #12]
 8022b3a:	f7fa ff39 	bl	801d9b0 <lfs_bd_prog>
 8022b3e:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8022b40:	697b      	ldr	r3, [r7, #20]
 8022b42:	2b00      	cmp	r3, #0
 8022b44:	d01c      	beq.n	8022b80 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 8022b46:	697b      	ldr	r3, [r7, #20]
 8022b48:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8022b4c:	d007      	beq.n	8022b5e <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8022b4e:	68bb      	ldr	r3, [r7, #8]
 8022b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022b52:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022b56:	68bb      	ldr	r3, [r7, #8]
 8022b58:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8022b5a:	697b      	ldr	r3, [r7, #20]
 8022b5c:	e02d      	b.n	8022bba <lfs_file_flushedwrite+0x216>
                    goto relocate;
 8022b5e:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8022b60:	68b9      	ldr	r1, [r7, #8]
 8022b62:	68f8      	ldr	r0, [r7, #12]
 8022b64:	f7ff fba6 	bl	80222b4 <lfs_file_relocate>
 8022b68:	6178      	str	r0, [r7, #20]
            if (err) {
 8022b6a:	697b      	ldr	r3, [r7, #20]
 8022b6c:	2b00      	cmp	r3, #0
 8022b6e:	d0d2      	beq.n	8022b16 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8022b70:	68bb      	ldr	r3, [r7, #8]
 8022b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022b74:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8022b78:	68bb      	ldr	r3, [r7, #8]
 8022b7a:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8022b7c:	697b      	ldr	r3, [r7, #20]
 8022b7e:	e01c      	b.n	8022bba <lfs_file_flushedwrite+0x216>
            break;
 8022b80:	bf00      	nop
            }
        }

        file->pos += diff;
 8022b82:	68bb      	ldr	r3, [r7, #8]
 8022b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022b86:	69bb      	ldr	r3, [r7, #24]
 8022b88:	441a      	add	r2, r3
 8022b8a:	68bb      	ldr	r3, [r7, #8]
 8022b8c:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8022b8e:	68bb      	ldr	r3, [r7, #8]
 8022b90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022b92:	69bb      	ldr	r3, [r7, #24]
 8022b94:	441a      	add	r2, r3
 8022b96:	68bb      	ldr	r3, [r7, #8]
 8022b98:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8022b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022b9c:	69bb      	ldr	r3, [r7, #24]
 8022b9e:	4413      	add	r3, r2
 8022ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8022ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022ba4:	69bb      	ldr	r3, [r7, #24]
 8022ba6:	1ad3      	subs	r3, r2, r3
 8022ba8:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 8022baa:	68f8      	ldr	r0, [r7, #12]
 8022bac:	f7fb fb6d 	bl	801e28a <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8022bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022bb2:	2b00      	cmp	r3, #0
 8022bb4:	f47f af29 	bne.w	8022a0a <lfs_file_flushedwrite+0x66>
    }

    return size;
 8022bb8:	683b      	ldr	r3, [r7, #0]
}
 8022bba:	4618      	mov	r0, r3
 8022bbc:	3730      	adds	r7, #48	@ 0x30
 8022bbe:	46bd      	mov	sp, r7
 8022bc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08022bc4 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8022bc4:	b580      	push	{r7, lr}
 8022bc6:	b08a      	sub	sp, #40	@ 0x28
 8022bc8:	af00      	add	r7, sp, #0
 8022bca:	60f8      	str	r0, [r7, #12]
 8022bcc:	60b9      	str	r1, [r7, #8]
 8022bce:	607a      	str	r2, [r7, #4]
 8022bd0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8022bd2:	68bb      	ldr	r3, [r7, #8]
 8022bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022bd6:	f003 0302 	and.w	r3, r3, #2
 8022bda:	2b00      	cmp	r3, #0
 8022bdc:	d106      	bne.n	8022bec <lfs_file_write_+0x28>
 8022bde:	4b38      	ldr	r3, [pc, #224]	@ (8022cc0 <lfs_file_write_+0xfc>)
 8022be0:	4a38      	ldr	r2, [pc, #224]	@ (8022cc4 <lfs_file_write_+0x100>)
 8022be2:	f640 6126 	movw	r1, #3622	@ 0xe26
 8022be6:	4838      	ldr	r0, [pc, #224]	@ (8022cc8 <lfs_file_write_+0x104>)
 8022be8:	f010 fd26 	bl	8033638 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8022bec:	68bb      	ldr	r3, [r7, #8]
 8022bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022bf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8022bf4:	2b00      	cmp	r3, #0
 8022bf6:	d009      	beq.n	8022c0c <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8022bf8:	68b9      	ldr	r1, [r7, #8]
 8022bfa:	68f8      	ldr	r0, [r7, #12]
 8022bfc:	f7ff fc56 	bl	80224ac <lfs_file_flush>
 8022c00:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8022c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022c04:	2b00      	cmp	r3, #0
 8022c06:	d001      	beq.n	8022c0c <lfs_file_write_+0x48>
            return err;
 8022c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022c0a:	e055      	b.n	8022cb8 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8022c0c:	68bb      	ldr	r3, [r7, #8]
 8022c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8022c14:	2b00      	cmp	r3, #0
 8022c16:	d009      	beq.n	8022c2c <lfs_file_write_+0x68>
 8022c18:	68bb      	ldr	r3, [r7, #8]
 8022c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022c1c:	68bb      	ldr	r3, [r7, #8]
 8022c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022c20:	429a      	cmp	r2, r3
 8022c22:	d203      	bcs.n	8022c2c <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8022c24:	68bb      	ldr	r3, [r7, #8]
 8022c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022c28:	68bb      	ldr	r3, [r7, #8]
 8022c2a:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8022c2c:	68bb      	ldr	r3, [r7, #8]
 8022c2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022c30:	683b      	ldr	r3, [r7, #0]
 8022c32:	441a      	add	r2, r3
 8022c34:	68fb      	ldr	r3, [r7, #12]
 8022c36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8022c38:	429a      	cmp	r2, r3
 8022c3a:	d902      	bls.n	8022c42 <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8022c3c:	f06f 031a 	mvn.w	r3, #26
 8022c40:	e03a      	b.n	8022cb8 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8022c42:	68bb      	ldr	r3, [r7, #8]
 8022c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022c4a:	2b00      	cmp	r3, #0
 8022c4c:	d121      	bne.n	8022c92 <lfs_file_write_+0xce>
 8022c4e:	68bb      	ldr	r3, [r7, #8]
 8022c50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022c52:	68bb      	ldr	r3, [r7, #8]
 8022c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022c56:	429a      	cmp	r2, r3
 8022c58:	d91b      	bls.n	8022c92 <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8022c5a:	68bb      	ldr	r3, [r7, #8]
 8022c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022c5e:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8022c60:	68bb      	ldr	r3, [r7, #8]
 8022c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022c64:	68bb      	ldr	r3, [r7, #8]
 8022c66:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 8022c68:	e00e      	b.n	8022c88 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8022c6a:	2300      	movs	r3, #0
 8022c6c:	75fb      	strb	r3, [r7, #23]
 8022c6e:	f107 0217 	add.w	r2, r7, #23
 8022c72:	2301      	movs	r3, #1
 8022c74:	68b9      	ldr	r1, [r7, #8]
 8022c76:	68f8      	ldr	r0, [r7, #12]
 8022c78:	f7ff fe94 	bl	80229a4 <lfs_file_flushedwrite>
 8022c7c:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8022c7e:	69fb      	ldr	r3, [r7, #28]
 8022c80:	2b00      	cmp	r3, #0
 8022c82:	da01      	bge.n	8022c88 <lfs_file_write_+0xc4>
                return res;
 8022c84:	69fb      	ldr	r3, [r7, #28]
 8022c86:	e017      	b.n	8022cb8 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8022c88:	68bb      	ldr	r3, [r7, #8]
 8022c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022c8c:	6a3a      	ldr	r2, [r7, #32]
 8022c8e:	429a      	cmp	r2, r3
 8022c90:	d8eb      	bhi.n	8022c6a <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8022c92:	683b      	ldr	r3, [r7, #0]
 8022c94:	687a      	ldr	r2, [r7, #4]
 8022c96:	68b9      	ldr	r1, [r7, #8]
 8022c98:	68f8      	ldr	r0, [r7, #12]
 8022c9a:	f7ff fe83 	bl	80229a4 <lfs_file_flushedwrite>
 8022c9e:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8022ca0:	69bb      	ldr	r3, [r7, #24]
 8022ca2:	2b00      	cmp	r3, #0
 8022ca4:	da01      	bge.n	8022caa <lfs_file_write_+0xe6>
        return nsize;
 8022ca6:	69bb      	ldr	r3, [r7, #24]
 8022ca8:	e006      	b.n	8022cb8 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8022caa:	68bb      	ldr	r3, [r7, #8]
 8022cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022cae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8022cb2:	68bb      	ldr	r3, [r7, #8]
 8022cb4:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8022cb6:	69bb      	ldr	r3, [r7, #24]
}
 8022cb8:	4618      	mov	r0, r3
 8022cba:	3728      	adds	r7, #40	@ 0x28
 8022cbc:	46bd      	mov	sp, r7
 8022cbe:	bd80      	pop	{r7, pc}
 8022cc0:	0804116c 	.word	0x0804116c
 8022cc4:	080448e0 	.word	0x080448e0
 8022cc8:	08040dec 	.word	0x08040dec

08022ccc <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8022ccc:	b580      	push	{r7, lr}
 8022cce:	b08c      	sub	sp, #48	@ 0x30
 8022cd0:	af00      	add	r7, sp, #0
 8022cd2:	60f8      	str	r0, [r7, #12]
 8022cd4:	60b9      	str	r1, [r7, #8]
 8022cd6:	607a      	str	r2, [r7, #4]
 8022cd8:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8022cda:	68bb      	ldr	r3, [r7, #8]
 8022cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 8022ce0:	683b      	ldr	r3, [r7, #0]
 8022ce2:	2b00      	cmp	r3, #0
 8022ce4:	d102      	bne.n	8022cec <lfs_file_seek_+0x20>
        npos = off;
 8022ce6:	687b      	ldr	r3, [r7, #4]
 8022ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8022cea:	e025      	b.n	8022d38 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8022cec:	683b      	ldr	r3, [r7, #0]
 8022cee:	2b01      	cmp	r3, #1
 8022cf0:	d10f      	bne.n	8022d12 <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8022cf2:	68bb      	ldr	r3, [r7, #8]
 8022cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022cf6:	461a      	mov	r2, r3
 8022cf8:	687b      	ldr	r3, [r7, #4]
 8022cfa:	4413      	add	r3, r2
 8022cfc:	2b00      	cmp	r3, #0
 8022cfe:	da02      	bge.n	8022d06 <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 8022d00:	f06f 0315 	mvn.w	r3, #21
 8022d04:	e067      	b.n	8022dd6 <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 8022d06:	68bb      	ldr	r3, [r7, #8]
 8022d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022d0a:	687b      	ldr	r3, [r7, #4]
 8022d0c:	4413      	add	r3, r2
 8022d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8022d10:	e012      	b.n	8022d38 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8022d12:	683b      	ldr	r3, [r7, #0]
 8022d14:	2b02      	cmp	r3, #2
 8022d16:	d10f      	bne.n	8022d38 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 8022d18:	68b9      	ldr	r1, [r7, #8]
 8022d1a:	68f8      	ldr	r0, [r7, #12]
 8022d1c:	f000 f86c 	bl	8022df8 <lfs_file_size_>
 8022d20:	4602      	mov	r2, r0
 8022d22:	687b      	ldr	r3, [r7, #4]
 8022d24:	4413      	add	r3, r2
 8022d26:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 8022d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022d2a:	2b00      	cmp	r3, #0
 8022d2c:	da02      	bge.n	8022d34 <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 8022d2e:	f06f 0315 	mvn.w	r3, #21
 8022d32:	e050      	b.n	8022dd6 <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 8022d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8022d38:	68fb      	ldr	r3, [r7, #12]
 8022d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8022d3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022d3e:	429a      	cmp	r2, r3
 8022d40:	d902      	bls.n	8022d48 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8022d42:	f06f 0315 	mvn.w	r3, #21
 8022d46:	e046      	b.n	8022dd6 <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 8022d48:	68bb      	ldr	r3, [r7, #8]
 8022d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022d4e:	429a      	cmp	r2, r3
 8022d50:	d101      	bne.n	8022d56 <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 8022d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022d54:	e03f      	b.n	8022dd6 <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8022d56:	68bb      	ldr	r3, [r7, #8]
 8022d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 8022d5e:	2b00      	cmp	r3, #0
 8022d60:	d12b      	bne.n	8022dba <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8022d62:	68bb      	ldr	r3, [r7, #8]
 8022d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022d66:	61bb      	str	r3, [r7, #24]
 8022d68:	f107 0318 	add.w	r3, r7, #24
 8022d6c:	4619      	mov	r1, r3
 8022d6e:	68f8      	ldr	r0, [r7, #12]
 8022d70:	f7fe fe72 	bl	8021a58 <lfs_ctz_index>
 8022d74:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 8022d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022d78:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8022d7a:	f107 0314 	add.w	r3, r7, #20
 8022d7e:	4619      	mov	r1, r3
 8022d80:	68f8      	ldr	r0, [r7, #12]
 8022d82:	f7fe fe69 	bl	8021a58 <lfs_ctz_index>
 8022d86:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8022d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022d8a:	6a3b      	ldr	r3, [r7, #32]
 8022d8c:	429a      	cmp	r2, r3
 8022d8e:	d114      	bne.n	8022dba <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 8022d90:	68bb      	ldr	r3, [r7, #8]
 8022d92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8022d94:	697b      	ldr	r3, [r7, #20]
 8022d96:	429a      	cmp	r2, r3
 8022d98:	d80f      	bhi.n	8022dba <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 8022d9a:	68bb      	ldr	r3, [r7, #8]
 8022d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8022d9e:	68bb      	ldr	r3, [r7, #8]
 8022da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022da2:	441a      	add	r2, r3
 8022da4:	697b      	ldr	r3, [r7, #20]
 8022da6:	429a      	cmp	r2, r3
 8022da8:	d907      	bls.n	8022dba <lfs_file_seek_+0xee>
            file->pos = npos;
 8022daa:	68bb      	ldr	r3, [r7, #8]
 8022dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022dae:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 8022db0:	697a      	ldr	r2, [r7, #20]
 8022db2:	68bb      	ldr	r3, [r7, #8]
 8022db4:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 8022db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022db8:	e00d      	b.n	8022dd6 <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8022dba:	68b9      	ldr	r1, [r7, #8]
 8022dbc:	68f8      	ldr	r0, [r7, #12]
 8022dbe:	f7ff fb75 	bl	80224ac <lfs_file_flush>
 8022dc2:	61f8      	str	r0, [r7, #28]
    if (err) {
 8022dc4:	69fb      	ldr	r3, [r7, #28]
 8022dc6:	2b00      	cmp	r3, #0
 8022dc8:	d001      	beq.n	8022dce <lfs_file_seek_+0x102>
        return err;
 8022dca:	69fb      	ldr	r3, [r7, #28]
 8022dcc:	e003      	b.n	8022dd6 <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 8022dce:	68bb      	ldr	r3, [r7, #8]
 8022dd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022dd2:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8022dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8022dd6:	4618      	mov	r0, r3
 8022dd8:	3730      	adds	r7, #48	@ 0x30
 8022dda:	46bd      	mov	sp, r7
 8022ddc:	bd80      	pop	{r7, pc}

08022dde <lfs_file_tell_>:

    return 0;
}
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
 8022dde:	b480      	push	{r7}
 8022de0:	b083      	sub	sp, #12
 8022de2:	af00      	add	r7, sp, #0
 8022de4:	6078      	str	r0, [r7, #4]
 8022de6:	6039      	str	r1, [r7, #0]
    (void)lfs;
    return file->pos;
 8022de8:	683b      	ldr	r3, [r7, #0]
 8022dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8022dec:	4618      	mov	r0, r3
 8022dee:	370c      	adds	r7, #12
 8022df0:	46bd      	mov	sp, r7
 8022df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022df6:	4770      	bx	lr

08022df8 <lfs_file_size_>:
    }

    return 0;
}

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 8022df8:	b580      	push	{r7, lr}
 8022dfa:	b082      	sub	sp, #8
 8022dfc:	af00      	add	r7, sp, #0
 8022dfe:	6078      	str	r0, [r7, #4]
 8022e00:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8022e02:	683b      	ldr	r3, [r7, #0]
 8022e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022e0a:	2b00      	cmp	r3, #0
 8022e0c:	d009      	beq.n	8022e22 <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8022e0e:	683b      	ldr	r3, [r7, #0]
 8022e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022e12:	683b      	ldr	r3, [r7, #0]
 8022e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022e16:	4619      	mov	r1, r3
 8022e18:	4610      	mov	r0, r2
 8022e1a:	f7fa fa4c 	bl	801d2b6 <lfs_max>
 8022e1e:	4603      	mov	r3, r0
 8022e20:	e001      	b.n	8022e26 <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 8022e22:	683b      	ldr	r3, [r7, #0]
 8022e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8022e26:	4618      	mov	r0, r3
 8022e28:	3708      	adds	r7, #8
 8022e2a:	46bd      	mov	sp, r7
 8022e2c:	bd80      	pop	{r7, pc}

08022e2e <lfs_stat_>:


/// General fs operations ///
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8022e2e:	b580      	push	{r7, lr}
 8022e30:	b08e      	sub	sp, #56	@ 0x38
 8022e32:	af00      	add	r7, sp, #0
 8022e34:	60f8      	str	r0, [r7, #12]
 8022e36:	60b9      	str	r1, [r7, #8]
 8022e38:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8022e3a:	f107 0208 	add.w	r2, r7, #8
 8022e3e:	f107 0114 	add.w	r1, r7, #20
 8022e42:	2300      	movs	r3, #0
 8022e44:	68f8      	ldr	r0, [r7, #12]
 8022e46:	f7fc fe4d 	bl	801fae4 <lfs_dir_find>
 8022e4a:	6378      	str	r0, [r7, #52]	@ 0x34
    if (tag < 0) {
 8022e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022e4e:	2b00      	cmp	r3, #0
 8022e50:	da01      	bge.n	8022e56 <lfs_stat_+0x28>
        return (int)tag;
 8022e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022e54:	e00c      	b.n	8022e70 <lfs_stat_+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8022e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022e58:	4618      	mov	r0, r3
 8022e5a:	f7fa ffaf 	bl	801ddbc <lfs_tag_id>
 8022e5e:	4603      	mov	r3, r0
 8022e60:	461a      	mov	r2, r3
 8022e62:	f107 0114 	add.w	r1, r7, #20
 8022e66:	687b      	ldr	r3, [r7, #4]
 8022e68:	68f8      	ldr	r0, [r7, #12]
 8022e6a:	f7fc fd77 	bl	801f95c <lfs_dir_getinfo>
 8022e6e:	4603      	mov	r3, r0
}
 8022e70:	4618      	mov	r0, r3
 8022e72:	3738      	adds	r7, #56	@ 0x38
 8022e74:	46bd      	mov	sp, r7
 8022e76:	bd80      	pop	{r7, pc}

08022e78 <lfs_remove_>:

#ifndef LFS_READONLY
static int lfs_remove_(lfs_t *lfs, const char *path) {
 8022e78:	b580      	push	{r7, lr}
 8022e7a:	b0a0      	sub	sp, #128	@ 0x80
 8022e7c:	af02      	add	r7, sp, #8
 8022e7e:	6078      	str	r0, [r7, #4]
 8022e80:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8022e82:	6878      	ldr	r0, [r7, #4]
 8022e84:	f001 fe0c 	bl	8024aa0 <lfs_fs_forceconsistency>
 8022e88:	6778      	str	r0, [r7, #116]	@ 0x74
    if (err) {
 8022e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022e8c:	2b00      	cmp	r3, #0
 8022e8e:	d001      	beq.n	8022e94 <lfs_remove_+0x1c>
        return err;
 8022e90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022e92:	e0bc      	b.n	802300e <lfs_remove_+0x196>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8022e94:	463a      	mov	r2, r7
 8022e96:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8022e9a:	2300      	movs	r3, #0
 8022e9c:	6878      	ldr	r0, [r7, #4]
 8022e9e:	f7fc fe21 	bl	801fae4 <lfs_dir_find>
 8022ea2:	6738      	str	r0, [r7, #112]	@ 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8022ea4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022ea6:	2b00      	cmp	r3, #0
 8022ea8:	db09      	blt.n	8022ebe <lfs_remove_+0x46>
 8022eaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022eac:	4618      	mov	r0, r3
 8022eae:	f7fa ff85 	bl	801ddbc <lfs_tag_id>
 8022eb2:	4603      	mov	r3, r0
 8022eb4:	461a      	mov	r2, r3
 8022eb6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8022eba:	429a      	cmp	r2, r3
 8022ebc:	d107      	bne.n	8022ece <lfs_remove_+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8022ebe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022ec0:	2b00      	cmp	r3, #0
 8022ec2:	da01      	bge.n	8022ec8 <lfs_remove_+0x50>
 8022ec4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022ec6:	e0a2      	b.n	802300e <lfs_remove_+0x196>
 8022ec8:	f06f 0315 	mvn.w	r3, #21
 8022ecc:	e09f      	b.n	802300e <lfs_remove_+0x196>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8022ece:	687b      	ldr	r3, [r7, #4]
 8022ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8022ed4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022ed6:	4618      	mov	r0, r3
 8022ed8:	f7fa ff46 	bl	801dd68 <lfs_tag_type3>
 8022edc:	4603      	mov	r3, r0
 8022ede:	2b02      	cmp	r3, #2
 8022ee0:	d142      	bne.n	8022f68 <lfs_remove_+0xf0>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8022ee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022ee4:	4618      	mov	r0, r3
 8022ee6:	f7fa ff69 	bl	801ddbc <lfs_tag_id>
 8022eea:	4603      	mov	r3, r0
 8022eec:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8022eee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8022ef2:	f043 0308 	orr.w	r3, r3, #8
 8022ef6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8022efa:	f107 020c 	add.w	r2, r7, #12
 8022efe:	9200      	str	r2, [sp, #0]
 8022f00:	4a45      	ldr	r2, [pc, #276]	@ (8023018 <lfs_remove_+0x1a0>)
 8022f02:	6878      	ldr	r0, [r7, #4]
 8022f04:	f7fb fbd6 	bl	801e6b4 <lfs_dir_get>
 8022f08:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (res < 0) {
 8022f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022f0c:	2b00      	cmp	r3, #0
 8022f0e:	da01      	bge.n	8022f14 <lfs_remove_+0x9c>
            return (int)res;
 8022f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8022f12:	e07c      	b.n	802300e <lfs_remove_+0x196>
        }
        lfs_pair_fromle32(pair);
 8022f14:	f107 030c 	add.w	r3, r7, #12
 8022f18:	4618      	mov	r0, r3
 8022f1a:	f7fa feb0 	bl	801dc7e <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8022f1e:	f107 020c 	add.w	r2, r7, #12
 8022f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022f26:	3308      	adds	r3, #8
 8022f28:	4619      	mov	r1, r3
 8022f2a:	6878      	ldr	r0, [r7, #4]
 8022f2c:	f7fc fcc8 	bl	801f8c0 <lfs_dir_fetch>
 8022f30:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8022f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022f34:	2b00      	cmp	r3, #0
 8022f36:	d001      	beq.n	8022f3c <lfs_remove_+0xc4>
            return err;
 8022f38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022f3a:	e068      	b.n	802300e <lfs_remove_+0x196>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8022f3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8022f40:	2b00      	cmp	r3, #0
//            return LFS_ERR_NOTEMPTY;  COMMENT make possible to remove directory iven if not epty.
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8022f42:	2101      	movs	r1, #1
 8022f44:	6878      	ldr	r0, [r7, #4]
 8022f46:	f001 fa89 	bl	802445c <lfs_fs_preporphans>
 8022f4a:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8022f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022f4e:	2b00      	cmp	r3, #0
 8022f50:	d001      	beq.n	8022f56 <lfs_remove_+0xde>
            return err;
 8022f52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022f54:	e05b      	b.n	802300e <lfs_remove_+0x196>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 8022f56:	2300      	movs	r3, #0
 8022f58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        dir.id = 0;
 8022f5c:	2300      	movs	r3, #0
 8022f5e:	853b      	strh	r3, [r7, #40]	@ 0x28
        lfs->mlist = &dir;
 8022f60:	687b      	ldr	r3, [r7, #4]
 8022f62:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8022f66:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8022f68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022f6a:	4618      	mov	r0, r3
 8022f6c:	f7fa ff26 	bl	801ddbc <lfs_tag_id>
 8022f70:	4603      	mov	r3, r0
 8022f72:	029b      	lsls	r3, r3, #10
 8022f74:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8022f78:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8022f7c:	61fb      	str	r3, [r7, #28]
 8022f7e:	2300      	movs	r3, #0
 8022f80:	623b      	str	r3, [r7, #32]
 8022f82:	f107 021c 	add.w	r2, r7, #28
 8022f86:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8022f8a:	2301      	movs	r3, #1
 8022f8c:	6878      	ldr	r0, [r7, #4]
 8022f8e:	f7fe faf1 	bl	8021574 <lfs_dir_commit>
 8022f92:	6778      	str	r0, [r7, #116]	@ 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8022f94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022f96:	2b00      	cmp	r3, #0
 8022f98:	d004      	beq.n	8022fa4 <lfs_remove_+0x12c>
        lfs->mlist = dir.next;
 8022f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022f9c:	687b      	ldr	r3, [r7, #4]
 8022f9e:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 8022fa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022fa2:	e034      	b.n	802300e <lfs_remove_+0x196>
    }

    lfs->mlist = dir.next;
 8022fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022fa6:	687b      	ldr	r3, [r7, #4]
 8022fa8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8022faa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8022fac:	4618      	mov	r0, r3
 8022fae:	f7fa fedb 	bl	801dd68 <lfs_tag_type3>
 8022fb2:	4603      	mov	r3, r0
 8022fb4:	2b02      	cmp	r3, #2
 8022fb6:	d129      	bne.n	802300c <lfs_remove_+0x194>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8022fb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8022fbc:	6878      	ldr	r0, [r7, #4]
 8022fbe:	f001 fa4d 	bl	802445c <lfs_fs_preporphans>
 8022fc2:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8022fc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022fc6:	2b00      	cmp	r3, #0
 8022fc8:	d001      	beq.n	8022fce <lfs_remove_+0x156>
            return err;
 8022fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022fcc:	e01f      	b.n	802300e <lfs_remove_+0x196>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8022fce:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8022fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022fd6:	3308      	adds	r3, #8
 8022fd8:	4619      	mov	r1, r3
 8022fda:	6878      	ldr	r0, [r7, #4]
 8022fdc:	f001 f8f4 	bl	80241c8 <lfs_fs_pred>
 8022fe0:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8022fe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022fe4:	2b00      	cmp	r3, #0
 8022fe6:	d001      	beq.n	8022fec <lfs_remove_+0x174>
            return err;
 8022fe8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8022fea:	e010      	b.n	802300e <lfs_remove_+0x196>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8022fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022ff0:	f103 0208 	add.w	r2, r3, #8
 8022ff4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8022ff8:	4619      	mov	r1, r3
 8022ffa:	6878      	ldr	r0, [r7, #4]
 8022ffc:	f7fd f90c 	bl	8020218 <lfs_dir_drop>
 8023000:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8023002:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8023004:	2b00      	cmp	r3, #0
 8023006:	d001      	beq.n	802300c <lfs_remove_+0x194>
            return err;
 8023008:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802300a:	e000      	b.n	802300e <lfs_remove_+0x196>
        }
    }

    return 0;
 802300c:	2300      	movs	r3, #0
}
 802300e:	4618      	mov	r0, r3
 8023010:	3778      	adds	r7, #120	@ 0x78
 8023012:	46bd      	mov	sp, r7
 8023014:	bd80      	pop	{r7, pc}
 8023016:	bf00      	nop
 8023018:	700ffc00 	.word	0x700ffc00

0802301c <lfs_rename_>:
#endif

#ifndef LFS_READONLY
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 802301c:	b590      	push	{r4, r7, lr}
 802301e:	b0c3      	sub	sp, #268	@ 0x10c
 8023020:	af02      	add	r7, sp, #8
 8023022:	60f8      	str	r0, [r7, #12]
 8023024:	60b9      	str	r1, [r7, #8]
 8023026:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8023028:	68f8      	ldr	r0, [r7, #12]
 802302a:	f001 fd39 	bl	8024aa0 <lfs_fs_forceconsistency>
 802302e:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
    if (err) {
 8023032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8023036:	2b00      	cmp	r3, #0
 8023038:	d002      	beq.n	8023040 <lfs_rename_+0x24>
        return err;
 802303a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802303e:	e203      	b.n	8023448 <lfs_rename_+0x42c>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 8023040:	f107 0208 	add.w	r2, r7, #8
 8023044:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8023048:	2300      	movs	r3, #0
 802304a:	68f8      	ldr	r0, [r7, #12]
 802304c:	f7fc fd4a 	bl	801fae4 <lfs_dir_find>
 8023050:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 8023054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8023058:	2b00      	cmp	r3, #0
 802305a:	db0a      	blt.n	8023072 <lfs_rename_+0x56>
 802305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8023060:	4618      	mov	r0, r3
 8023062:	f7fa feab 	bl	801ddbc <lfs_tag_id>
 8023066:	4603      	mov	r3, r0
 8023068:	461a      	mov	r2, r3
 802306a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 802306e:	429a      	cmp	r2, r3
 8023070:	d109      	bne.n	8023086 <lfs_rename_+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 8023072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8023076:	2b00      	cmp	r3, #0
 8023078:	da02      	bge.n	8023080 <lfs_rename_+0x64>
 802307a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802307e:	e1e3      	b.n	8023448 <lfs_rename_+0x42c>
 8023080:	f06f 0315 	mvn.w	r3, #21
 8023084:	e1e0      	b.n	8023448 <lfs_rename_+0x42c>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 8023086:	f107 03a2 	add.w	r3, r7, #162	@ 0xa2
 802308a:	1d3a      	adds	r2, r7, #4
 802308c:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8023090:	68f8      	ldr	r0, [r7, #12]
 8023092:	f7fc fd27 	bl	801fae4 <lfs_dir_find>
 8023096:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 802309a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 802309e:	2b00      	cmp	r3, #0
 80230a0:	db0a      	blt.n	80230b8 <lfs_rename_+0x9c>
 80230a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80230a6:	4618      	mov	r0, r3
 80230a8:	f7fa fe88 	bl	801ddbc <lfs_tag_id>
 80230ac:	4603      	mov	r3, r0
 80230ae:	461a      	mov	r2, r3
 80230b0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80230b4:	429a      	cmp	r2, r3
 80230b6:	d114      	bne.n	80230e2 <lfs_rename_+0xc6>
 80230b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80230bc:	f113 0f02 	cmn.w	r3, #2
 80230c0:	d105      	bne.n	80230ce <lfs_rename_+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 80230c2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80230c6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80230ca:	4293      	cmp	r3, r2
 80230cc:	d109      	bne.n	80230e2 <lfs_rename_+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 80230ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80230d2:	2b00      	cmp	r3, #0
 80230d4:	da02      	bge.n	80230dc <lfs_rename_+0xc0>
 80230d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80230da:	e1b5      	b.n	8023448 <lfs_rename_+0x42c>
 80230dc:	f06f 0315 	mvn.w	r3, #21
 80230e0:	e1b2      	b.n	8023448 <lfs_rename_+0x42c>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 80230e2:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80230e6:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80230ea:	4611      	mov	r1, r2
 80230ec:	4618      	mov	r0, r3
 80230ee:	f7fa fd6f 	bl	801dbd0 <lfs_pair_cmp>
 80230f2:	4603      	mov	r3, r0
 80230f4:	2b00      	cmp	r3, #0
 80230f6:	bf0c      	ite	eq
 80230f8:	2301      	moveq	r3, #1
 80230fa:	2300      	movne	r3, #0
 80230fc:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 8023100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8023104:	4618      	mov	r0, r3
 8023106:	f7fa fe59 	bl	801ddbc <lfs_tag_id>
 802310a:	4603      	mov	r3, r0
 802310c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 8023110:	68fb      	ldr	r3, [r7, #12]
 8023112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023114:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (prevtag == LFS_ERR_NOENT) {
 8023116:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 802311a:	f113 0f02 	cmn.w	r3, #2
 802311e:	d120      	bne.n	8023162 <lfs_rename_+0x146>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 8023120:	687b      	ldr	r3, [r7, #4]
 8023122:	4618      	mov	r0, r3
 8023124:	f7ed f8bc 	bl	80102a0 <strlen>
 8023128:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (nlen > lfs->name_max) {
 802312c:	68fb      	ldr	r3, [r7, #12]
 802312e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8023130:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8023134:	429a      	cmp	r2, r3
 8023136:	d902      	bls.n	802313e <lfs_rename_+0x122>
            return LFS_ERR_NAMETOOLONG;
 8023138:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 802313c:	e184      	b.n	8023448 <lfs_rename_+0x42c>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 802313e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8023142:	2b00      	cmp	r3, #0
 8023144:	f000 8090 	beq.w	8023268 <lfs_rename_+0x24c>
 8023148:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 802314c:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8023150:	429a      	cmp	r2, r3
 8023152:	f0c0 8089 	bcc.w	8023268 <lfs_rename_+0x24c>
            newoldid += 1;
 8023156:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 802315a:	3301      	adds	r3, #1
 802315c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 8023160:	e082      	b.n	8023268 <lfs_rename_+0x24c>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 8023162:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8023166:	4618      	mov	r0, r3
 8023168:	f7fa fdfe 	bl	801dd68 <lfs_tag_type3>
 802316c:	4603      	mov	r3, r0
 802316e:	461c      	mov	r4, r3
 8023170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8023174:	4618      	mov	r0, r3
 8023176:	f7fa fdf7 	bl	801dd68 <lfs_tag_type3>
 802317a:	4603      	mov	r3, r0
 802317c:	429c      	cmp	r4, r3
 802317e:	d00d      	beq.n	802319c <lfs_rename_+0x180>
        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)
 8023180:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8023184:	4618      	mov	r0, r3
 8023186:	f7fa fdef 	bl	801dd68 <lfs_tag_type3>
 802318a:	4603      	mov	r3, r0
                ? LFS_ERR_ISDIR
                : LFS_ERR_NOTDIR;
 802318c:	2b02      	cmp	r3, #2
 802318e:	d102      	bne.n	8023196 <lfs_rename_+0x17a>
 8023190:	f06f 0314 	mvn.w	r3, #20
 8023194:	e158      	b.n	8023448 <lfs_rename_+0x42c>
 8023196:	f06f 0313 	mvn.w	r3, #19
 802319a:	e155      	b.n	8023448 <lfs_rename_+0x42c>
    } else if (samepair && newid == newoldid) {
 802319c:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80231a0:	2b00      	cmp	r3, #0
 80231a2:	d007      	beq.n	80231b4 <lfs_rename_+0x198>
 80231a4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80231a8:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 80231ac:	429a      	cmp	r2, r3
 80231ae:	d101      	bne.n	80231b4 <lfs_rename_+0x198>
        // we're renaming to ourselves??
        return 0;
 80231b0:	2300      	movs	r3, #0
 80231b2:	e149      	b.n	8023448 <lfs_rename_+0x42c>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 80231b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80231b8:	4618      	mov	r0, r3
 80231ba:	f7fa fdd5 	bl	801dd68 <lfs_tag_type3>
 80231be:	4603      	mov	r3, r0
 80231c0:	2b02      	cmp	r3, #2
 80231c2:	d151      	bne.n	8023268 <lfs_rename_+0x24c>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 80231c4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80231c8:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 80231ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80231ce:	f043 0308 	orr.w	r3, r3, #8
 80231d2:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80231d6:	f107 0220 	add.w	r2, r7, #32
 80231da:	9200      	str	r2, [sp, #0]
 80231dc:	4a9d      	ldr	r2, [pc, #628]	@ (8023454 <lfs_rename_+0x438>)
 80231de:	68f8      	ldr	r0, [r7, #12]
 80231e0:	f7fb fa68 	bl	801e6b4 <lfs_dir_get>
 80231e4:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
        if (res < 0) {
 80231e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80231ec:	2b00      	cmp	r3, #0
 80231ee:	da02      	bge.n	80231f6 <lfs_rename_+0x1da>
            return (int)res;
 80231f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80231f4:	e128      	b.n	8023448 <lfs_rename_+0x42c>
        }
        lfs_pair_fromle32(prevpair);
 80231f6:	f107 0320 	add.w	r3, r7, #32
 80231fa:	4618      	mov	r0, r3
 80231fc:	f7fa fd3f 	bl	801dc7e <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 8023200:	f107 0220 	add.w	r2, r7, #32
 8023204:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8023208:	3308      	adds	r3, #8
 802320a:	4619      	mov	r1, r3
 802320c:	68f8      	ldr	r0, [r7, #12]
 802320e:	f7fc fb57 	bl	801f8c0 <lfs_dir_fetch>
 8023212:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8023216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802321a:	2b00      	cmp	r3, #0
 802321c:	d002      	beq.n	8023224 <lfs_rename_+0x208>
            return err;
 802321e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8023222:	e111      	b.n	8023448 <lfs_rename_+0x42c>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 8023224:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8023228:	2b00      	cmp	r3, #0
 802322a:	d103      	bne.n	8023234 <lfs_rename_+0x218>
 802322c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8023230:	2b00      	cmp	r3, #0
 8023232:	d002      	beq.n	802323a <lfs_rename_+0x21e>
            return LFS_ERR_NOTEMPTY;
 8023234:	f06f 0326 	mvn.w	r3, #38	@ 0x26
 8023238:	e106      	b.n	8023448 <lfs_rename_+0x42c>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 802323a:	2101      	movs	r1, #1
 802323c:	68f8      	ldr	r0, [r7, #12]
 802323e:	f001 f90d 	bl	802445c <lfs_fs_preporphans>
 8023242:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8023246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802324a:	2b00      	cmp	r3, #0
 802324c:	d002      	beq.n	8023254 <lfs_rename_+0x238>
            return err;
 802324e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8023252:	e0f9      	b.n	8023448 <lfs_rename_+0x42c>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 8023254:	2300      	movs	r3, #0
 8023256:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
        prevdir.id = 0;
 802325a:	2300      	movs	r3, #0
 802325c:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        lfs->mlist = &prevdir;
 8023260:	68fb      	ldr	r3, [r7, #12]
 8023262:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8023266:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (!samepair) {
 8023268:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 802326c:	f083 0301 	eor.w	r3, r3, #1
 8023270:	b2db      	uxtb	r3, r3
 8023272:	2b00      	cmp	r3, #0
 8023274:	d007      	beq.n	8023286 <lfs_rename_+0x26a>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 8023276:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 802327a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 802327e:	4619      	mov	r1, r3
 8023280:	68f8      	ldr	r0, [r7, #12]
 8023282:	f001 f93b 	bl	80244fc <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8023286:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 802328a:	f113 0f02 	cmn.w	r3, #2
 802328e:	d007      	beq.n	80232a0 <lfs_rename_+0x284>
 8023290:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8023294:	029b      	lsls	r3, r3, #10
 8023296:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 802329a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 802329e:	e000      	b.n	80232a2 <lfs_rename_+0x286>
 80232a0:	2300      	movs	r3, #0
 80232a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80232a4:	2300      	movs	r3, #0
 80232a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80232a8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80232ac:	029b      	lsls	r3, r3, #10
 80232ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80232b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80232b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80232b8:	2300      	movs	r3, #0
 80232ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80232bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80232c0:	4618      	mov	r0, r3
 80232c2:	f7fa fd51 	bl	801dd68 <lfs_tag_type3>
 80232c6:	4603      	mov	r3, r0
 80232c8:	051a      	lsls	r2, r3, #20
 80232ca:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80232ce:	029b      	lsls	r3, r3, #10
 80232d0:	ea42 0403 	orr.w	r4, r2, r3
 80232d4:	687b      	ldr	r3, [r7, #4]
 80232d6:	4618      	mov	r0, r3
 80232d8:	f7ec ffe2 	bl	80102a0 <strlen>
 80232dc:	4603      	mov	r3, r0
 80232de:	4323      	orrs	r3, r4
 80232e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80232e2:	687b      	ldr	r3, [r7, #4]
 80232e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80232e6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80232ea:	029c      	lsls	r4, r3, #10
 80232ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80232f0:	4618      	mov	r0, r3
 80232f2:	f7fa fd63 	bl	801ddbc <lfs_tag_id>
 80232f6:	4603      	mov	r3, r0
 80232f8:	4323      	orrs	r3, r4
 80232fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80232fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8023302:	66bb      	str	r3, [r7, #104]	@ 0x68
 8023304:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8023308:	66fb      	str	r3, [r7, #108]	@ 0x6c
 802330a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 802330e:	2b00      	cmp	r3, #0
 8023310:	d007      	beq.n	8023322 <lfs_rename_+0x306>
 8023312:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8023316:	029b      	lsls	r3, r3, #10
 8023318:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 802331c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8023320:	e000      	b.n	8023324 <lfs_rename_+0x308>
 8023322:	2300      	movs	r3, #0
 8023324:	673b      	str	r3, [r7, #112]	@ 0x70
 8023326:	2300      	movs	r3, #0
 8023328:	677b      	str	r3, [r7, #116]	@ 0x74
 802332a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 802332e:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8023332:	2305      	movs	r3, #5
 8023334:	68f8      	ldr	r0, [r7, #12]
 8023336:	f7fe f91d 	bl	8021574 <lfs_dir_commit>
 802333a:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 802333e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8023342:	2b00      	cmp	r3, #0
 8023344:	d005      	beq.n	8023352 <lfs_rename_+0x336>
        lfs->mlist = prevdir.next;
 8023346:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8023348:	68fb      	ldr	r3, [r7, #12]
 802334a:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 802334c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8023350:	e07a      	b.n	8023448 <lfs_rename_+0x42c>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 8023352:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8023356:	f083 0301 	eor.w	r3, r3, #1
 802335a:	b2db      	uxtb	r3, r3
 802335c:	2b00      	cmp	r3, #0
 802335e:	d02f      	beq.n	80233c0 <lfs_rename_+0x3a4>
 8023360:	68fb      	ldr	r3, [r7, #12]
 8023362:	3330      	adds	r3, #48	@ 0x30
 8023364:	4618      	mov	r0, r3
 8023366:	f7fa fdbe 	bl	801dee6 <lfs_gstate_hasmove>
 802336a:	4603      	mov	r3, r0
 802336c:	2b00      	cmp	r3, #0
 802336e:	d027      	beq.n	80233c0 <lfs_rename_+0x3a4>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8023370:	2200      	movs	r2, #0
 8023372:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8023376:	68f8      	ldr	r0, [r7, #12]
 8023378:	f001 f8c0 	bl	80244fc <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 802337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8023380:	4618      	mov	r0, r3
 8023382:	f7fa fd1b 	bl	801ddbc <lfs_tag_id>
 8023386:	4603      	mov	r3, r0
 8023388:	029b      	lsls	r3, r3, #10
 802338a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 802338e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8023392:	61bb      	str	r3, [r7, #24]
 8023394:	2300      	movs	r3, #0
 8023396:	61fb      	str	r3, [r7, #28]
 8023398:	f107 0218 	add.w	r2, r7, #24
 802339c:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 80233a0:	2301      	movs	r3, #1
 80233a2:	68f8      	ldr	r0, [r7, #12]
 80233a4:	f7fe f8e6 	bl	8021574 <lfs_dir_commit>
 80233a8:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 80233ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80233b0:	2b00      	cmp	r3, #0
 80233b2:	d005      	beq.n	80233c0 <lfs_rename_+0x3a4>
            lfs->mlist = prevdir.next;
 80233b4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80233b6:	68fb      	ldr	r3, [r7, #12]
 80233b8:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 80233ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80233be:	e043      	b.n	8023448 <lfs_rename_+0x42c>
        }
    }

    lfs->mlist = prevdir.next;
 80233c0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80233c2:	68fb      	ldr	r3, [r7, #12]
 80233c4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 80233c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80233ca:	f113 0f02 	cmn.w	r3, #2
 80233ce:	d03a      	beq.n	8023446 <lfs_rename_+0x42a>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 80233d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80233d4:	4618      	mov	r0, r3
 80233d6:	f7fa fcc7 	bl	801dd68 <lfs_tag_type3>
 80233da:	4603      	mov	r3, r0
 80233dc:	2b02      	cmp	r3, #2
 80233de:	d132      	bne.n	8023446 <lfs_rename_+0x42a>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 80233e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80233e4:	68f8      	ldr	r0, [r7, #12]
 80233e6:	f001 f839 	bl	802445c <lfs_fs_preporphans>
 80233ea:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 80233ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80233f2:	2b00      	cmp	r3, #0
 80233f4:	d002      	beq.n	80233fc <lfs_rename_+0x3e0>
            return err;
 80233f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80233fa:	e025      	b.n	8023448 <lfs_rename_+0x42c>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 80233fc:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8023400:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8023404:	3308      	adds	r3, #8
 8023406:	4619      	mov	r1, r3
 8023408:	68f8      	ldr	r0, [r7, #12]
 802340a:	f000 fedd 	bl	80241c8 <lfs_fs_pred>
 802340e:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8023412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8023416:	2b00      	cmp	r3, #0
 8023418:	d002      	beq.n	8023420 <lfs_rename_+0x404>
            return err;
 802341a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802341e:	e013      	b.n	8023448 <lfs_rename_+0x42c>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 8023420:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8023424:	f103 0208 	add.w	r2, r3, #8
 8023428:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 802342c:	4619      	mov	r1, r3
 802342e:	68f8      	ldr	r0, [r7, #12]
 8023430:	f7fc fef2 	bl	8020218 <lfs_dir_drop>
 8023434:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8023438:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802343c:	2b00      	cmp	r3, #0
 802343e:	d002      	beq.n	8023446 <lfs_rename_+0x42a>
            return err;
 8023440:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8023444:	e000      	b.n	8023448 <lfs_rename_+0x42c>
        }
    }

    return 0;
 8023446:	2300      	movs	r3, #0
}
 8023448:	4618      	mov	r0, r3
 802344a:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 802344e:	46bd      	mov	sp, r7
 8023450:	bd90      	pop	{r4, r7, pc}
 8023452:	bf00      	nop
 8023454:	700ffc00 	.word	0x700ffc00

08023458 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8023458:	b590      	push	{r4, r7, lr}
 802345a:	b08d      	sub	sp, #52	@ 0x34
 802345c:	af00      	add	r7, sp, #0
 802345e:	6078      	str	r0, [r7, #4]
 8023460:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8023462:	687b      	ldr	r3, [r7, #4]
 8023464:	683a      	ldr	r2, [r7, #0]
 8023466:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8023468:	683b      	ldr	r3, [r7, #0]
 802346a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 802346c:	687b      	ldr	r3, [r7, #4]
 802346e:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 8023470:	2300      	movs	r3, #0
 8023472:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8023474:	687b      	ldr	r3, [r7, #4]
 8023476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023478:	69db      	ldr	r3, [r3, #28]
 802347a:	2b00      	cmp	r3, #0
 802347c:	d106      	bne.n	802348c <lfs_init+0x34>
 802347e:	4b96      	ldr	r3, [pc, #600]	@ (80236d8 <lfs_init+0x280>)
 8023480:	4a96      	ldr	r2, [pc, #600]	@ (80236dc <lfs_init+0x284>)
 8023482:	f241 0152 	movw	r1, #4178	@ 0x1052
 8023486:	4896      	ldr	r0, [pc, #600]	@ (80236e0 <lfs_init+0x288>)
 8023488:	f010 f8d6 	bl	8033638 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 802348c:	687b      	ldr	r3, [r7, #4]
 802348e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023490:	6a1b      	ldr	r3, [r3, #32]
 8023492:	2b00      	cmp	r3, #0
 8023494:	d106      	bne.n	80234a4 <lfs_init+0x4c>
 8023496:	4b93      	ldr	r3, [pc, #588]	@ (80236e4 <lfs_init+0x28c>)
 8023498:	4a90      	ldr	r2, [pc, #576]	@ (80236dc <lfs_init+0x284>)
 802349a:	f241 0153 	movw	r1, #4179	@ 0x1053
 802349e:	4890      	ldr	r0, [pc, #576]	@ (80236e0 <lfs_init+0x288>)
 80234a0:	f010 f8ca 	bl	8033638 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80234a4:	687b      	ldr	r3, [r7, #4]
 80234a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80234a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80234aa:	2b00      	cmp	r3, #0
 80234ac:	d106      	bne.n	80234bc <lfs_init+0x64>
 80234ae:	4b8e      	ldr	r3, [pc, #568]	@ (80236e8 <lfs_init+0x290>)
 80234b0:	4a8a      	ldr	r2, [pc, #552]	@ (80236dc <lfs_init+0x284>)
 80234b2:	f241 0154 	movw	r1, #4180	@ 0x1054
 80234b6:	488a      	ldr	r0, [pc, #552]	@ (80236e0 <lfs_init+0x288>)
 80234b8:	f010 f8be 	bl	8033638 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80234bc:	687b      	ldr	r3, [r7, #4]
 80234be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80234c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80234c2:	687a      	ldr	r2, [r7, #4]
 80234c4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80234c6:	69d2      	ldr	r2, [r2, #28]
 80234c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80234cc:	fb01 f202 	mul.w	r2, r1, r2
 80234d0:	1a9b      	subs	r3, r3, r2
 80234d2:	2b00      	cmp	r3, #0
 80234d4:	d006      	beq.n	80234e4 <lfs_init+0x8c>
 80234d6:	4b85      	ldr	r3, [pc, #532]	@ (80236ec <lfs_init+0x294>)
 80234d8:	4a80      	ldr	r2, [pc, #512]	@ (80236dc <lfs_init+0x284>)
 80234da:	f241 0158 	movw	r1, #4184	@ 0x1058
 80234de:	4880      	ldr	r0, [pc, #512]	@ (80236e0 <lfs_init+0x288>)
 80234e0:	f010 f8aa 	bl	8033638 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 80234e4:	687b      	ldr	r3, [r7, #4]
 80234e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80234e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80234ea:	687a      	ldr	r2, [r7, #4]
 80234ec:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80234ee:	6a12      	ldr	r2, [r2, #32]
 80234f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80234f4:	fb01 f202 	mul.w	r2, r1, r2
 80234f8:	1a9b      	subs	r3, r3, r2
 80234fa:	2b00      	cmp	r3, #0
 80234fc:	d006      	beq.n	802350c <lfs_init+0xb4>
 80234fe:	4b7c      	ldr	r3, [pc, #496]	@ (80236f0 <lfs_init+0x298>)
 8023500:	4a76      	ldr	r2, [pc, #472]	@ (80236dc <lfs_init+0x284>)
 8023502:	f241 0159 	movw	r1, #4185	@ 0x1059
 8023506:	4876      	ldr	r0, [pc, #472]	@ (80236e0 <lfs_init+0x288>)
 8023508:	f010 f896 	bl	8033638 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 802350c:	687b      	ldr	r3, [r7, #4]
 802350e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023512:	687a      	ldr	r2, [r7, #4]
 8023514:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8023516:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8023518:	fbb3 f1f2 	udiv	r1, r3, r2
 802351c:	fb01 f202 	mul.w	r2, r1, r2
 8023520:	1a9b      	subs	r3, r3, r2
 8023522:	2b00      	cmp	r3, #0
 8023524:	d006      	beq.n	8023534 <lfs_init+0xdc>
 8023526:	4b73      	ldr	r3, [pc, #460]	@ (80236f4 <lfs_init+0x29c>)
 8023528:	4a6c      	ldr	r2, [pc, #432]	@ (80236dc <lfs_init+0x284>)
 802352a:	f241 015a 	movw	r1, #4186	@ 0x105a
 802352e:	486c      	ldr	r0, [pc, #432]	@ (80236e0 <lfs_init+0x288>)
 8023530:	f010 f882 	bl	8033638 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8023534:	687b      	ldr	r3, [r7, #4]
 8023536:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802353a:	2b7f      	cmp	r3, #127	@ 0x7f
 802353c:	d806      	bhi.n	802354c <lfs_init+0xf4>
 802353e:	4b6e      	ldr	r3, [pc, #440]	@ (80236f8 <lfs_init+0x2a0>)
 8023540:	4a66      	ldr	r2, [pc, #408]	@ (80236dc <lfs_init+0x284>)
 8023542:	f241 015d 	movw	r1, #4189	@ 0x105d
 8023546:	4866      	ldr	r0, [pc, #408]	@ (80236e0 <lfs_init+0x288>)
 8023548:	f010 f876 	bl	8033638 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 802354c:	687b      	ldr	r3, [r7, #4]
 802354e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023552:	3b08      	subs	r3, #8
 8023554:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8023558:	fbb2 f3f3 	udiv	r3, r2, r3
 802355c:	4618      	mov	r0, r3
 802355e:	f7f9 fef1 	bl	801d344 <lfs_npw2>
 8023562:	4603      	mov	r3, r0
 8023564:	009a      	lsls	r2, r3, #2
 8023566:	687b      	ldr	r3, [r7, #4]
 8023568:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802356c:	429a      	cmp	r2, r3
 802356e:	d906      	bls.n	802357e <lfs_init+0x126>
 8023570:	4b62      	ldr	r3, [pc, #392]	@ (80236fc <lfs_init+0x2a4>)
 8023572:	4a5a      	ldr	r2, [pc, #360]	@ (80236dc <lfs_init+0x284>)
 8023574:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8023578:	4859      	ldr	r0, [pc, #356]	@ (80236e0 <lfs_init+0x288>)
 802357a:	f010 f85d 	bl	8033638 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 802357e:	687b      	ldr	r3, [r7, #4]
 8023580:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023584:	2b00      	cmp	r3, #0
 8023586:	d106      	bne.n	8023596 <lfs_init+0x13e>
 8023588:	4b5d      	ldr	r3, [pc, #372]	@ (8023700 <lfs_init+0x2a8>)
 802358a:	4a54      	ldr	r2, [pc, #336]	@ (80236dc <lfs_init+0x284>)
 802358c:	f241 0169 	movw	r1, #4201	@ 0x1069
 8023590:	4853      	ldr	r0, [pc, #332]	@ (80236e0 <lfs_init+0x288>)
 8023592:	f010 f851 	bl	8033638 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8023596:	687b      	ldr	r3, [r7, #4]
 8023598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802359a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802359c:	2b00      	cmp	r3, #0
 802359e:	d00f      	beq.n	80235c0 <lfs_init+0x168>
 80235a0:	687b      	ldr	r3, [r7, #4]
 80235a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80235a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80235a6:	687b      	ldr	r3, [r7, #4]
 80235a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80235aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80235ac:	085b      	lsrs	r3, r3, #1
 80235ae:	429a      	cmp	r2, r3
 80235b0:	d206      	bcs.n	80235c0 <lfs_init+0x168>
 80235b2:	4b54      	ldr	r3, [pc, #336]	@ (8023704 <lfs_init+0x2ac>)
 80235b4:	4a49      	ldr	r2, [pc, #292]	@ (80236dc <lfs_init+0x284>)
 80235b6:	f241 016f 	movw	r1, #4207	@ 0x106f
 80235ba:	4849      	ldr	r0, [pc, #292]	@ (80236e0 <lfs_init+0x288>)
 80235bc:	f010 f83c 	bl	8033638 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 80235c0:	687b      	ldr	r3, [r7, #4]
 80235c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80235c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80235c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80235ca:	d00e      	beq.n	80235ea <lfs_init+0x192>
 80235cc:	687b      	ldr	r3, [r7, #4]
 80235ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80235d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80235d2:	687b      	ldr	r3, [r7, #4]
 80235d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80235d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80235d8:	429a      	cmp	r2, r3
 80235da:	d906      	bls.n	80235ea <lfs_init+0x192>
 80235dc:	4b4a      	ldr	r3, [pc, #296]	@ (8023708 <lfs_init+0x2b0>)
 80235de:	4a3f      	ldr	r2, [pc, #252]	@ (80236dc <lfs_init+0x284>)
 80235e0:	f241 0171 	movw	r1, #4209	@ 0x1071
 80235e4:	483e      	ldr	r0, [pc, #248]	@ (80236e0 <lfs_init+0x288>)
 80235e6:	f010 f827 	bl	8033638 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 80235ea:	687b      	ldr	r3, [r7, #4]
 80235ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80235ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d005      	beq.n	8023600 <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80235f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80235fa:	687b      	ldr	r3, [r7, #4]
 80235fc:	60da      	str	r2, [r3, #12]
 80235fe:	e010      	b.n	8023622 <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8023600:	687b      	ldr	r3, [r7, #4]
 8023602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023606:	4618      	mov	r0, r3
 8023608:	f7f9 ff04 	bl	801d414 <lfs_malloc>
 802360c:	4602      	mov	r2, r0
 802360e:	687b      	ldr	r3, [r7, #4]
 8023610:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8023612:	687b      	ldr	r3, [r7, #4]
 8023614:	68db      	ldr	r3, [r3, #12]
 8023616:	2b00      	cmp	r3, #0
 8023618:	d103      	bne.n	8023622 <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 802361a:	f06f 030b 	mvn.w	r3, #11
 802361e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8023620:	e163      	b.n	80238ea <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8023622:	687b      	ldr	r3, [r7, #4]
 8023624:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8023628:	2b00      	cmp	r3, #0
 802362a:	d005      	beq.n	8023638 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 802362c:	687b      	ldr	r3, [r7, #4]
 802362e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023630:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8023632:	687b      	ldr	r3, [r7, #4]
 8023634:	61da      	str	r2, [r3, #28]
 8023636:	e010      	b.n	802365a <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8023638:	687b      	ldr	r3, [r7, #4]
 802363a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802363e:	4618      	mov	r0, r3
 8023640:	f7f9 fee8 	bl	801d414 <lfs_malloc>
 8023644:	4602      	mov	r2, r0
 8023646:	687b      	ldr	r3, [r7, #4]
 8023648:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 802364a:	687b      	ldr	r3, [r7, #4]
 802364c:	69db      	ldr	r3, [r3, #28]
 802364e:	2b00      	cmp	r3, #0
 8023650:	d103      	bne.n	802365a <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 8023652:	f06f 030b 	mvn.w	r3, #11
 8023656:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8023658:	e147      	b.n	80238ea <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 802365a:	687b      	ldr	r3, [r7, #4]
 802365c:	4619      	mov	r1, r3
 802365e:	6878      	ldr	r0, [r7, #4]
 8023660:	f7f9 fefe 	bl	801d460 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	3310      	adds	r3, #16
 8023668:	4619      	mov	r1, r3
 802366a:	6878      	ldr	r0, [r7, #4]
 802366c:	f7f9 fef8 	bl	801d460 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8023670:	687b      	ldr	r3, [r7, #4]
 8023672:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023676:	2b00      	cmp	r3, #0
 8023678:	d106      	bne.n	8023688 <lfs_init+0x230>
 802367a:	4b24      	ldr	r3, [pc, #144]	@ (802370c <lfs_init+0x2b4>)
 802367c:	4a17      	ldr	r2, [pc, #92]	@ (80236dc <lfs_init+0x284>)
 802367e:	f241 0190 	movw	r1, #4240	@ 0x1090
 8023682:	4817      	ldr	r0, [pc, #92]	@ (80236e0 <lfs_init+0x288>)
 8023684:	f00f ffd8 	bl	8033638 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8023688:	687b      	ldr	r3, [r7, #4]
 802368a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802368e:	2b00      	cmp	r3, #0
 8023690:	d005      	beq.n	802369e <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8023692:	687b      	ldr	r3, [r7, #4]
 8023694:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023696:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8023698:	687b      	ldr	r3, [r7, #4]
 802369a:	665a      	str	r2, [r3, #100]	@ 0x64
 802369c:	e010      	b.n	80236c0 <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 802369e:	687b      	ldr	r3, [r7, #4]
 80236a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80236a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80236a4:	4618      	mov	r0, r3
 80236a6:	f7f9 feb5 	bl	801d414 <lfs_malloc>
 80236aa:	4602      	mov	r2, r0
 80236ac:	687b      	ldr	r3, [r7, #4]
 80236ae:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 80236b0:	687b      	ldr	r3, [r7, #4]
 80236b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80236b4:	2b00      	cmp	r3, #0
 80236b6:	d103      	bne.n	80236c0 <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 80236b8:	f06f 030b 	mvn.w	r3, #11
 80236bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 80236be:	e114      	b.n	80238ea <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80236c0:	687b      	ldr	r3, [r7, #4]
 80236c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80236c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80236c6:	2bff      	cmp	r3, #255	@ 0xff
 80236c8:	d924      	bls.n	8023714 <lfs_init+0x2bc>
 80236ca:	4b11      	ldr	r3, [pc, #68]	@ (8023710 <lfs_init+0x2b8>)
 80236cc:	4a03      	ldr	r2, [pc, #12]	@ (80236dc <lfs_init+0x284>)
 80236ce:	f241 019c 	movw	r1, #4252	@ 0x109c
 80236d2:	4803      	ldr	r0, [pc, #12]	@ (80236e0 <lfs_init+0x288>)
 80236d4:	f00f ffb0 	bl	8033638 <__assert_func>
 80236d8:	0804119c 	.word	0x0804119c
 80236dc:	080448f0 	.word	0x080448f0
 80236e0:	08040dec 	.word	0x08040dec
 80236e4:	080411b8 	.word	0x080411b8
 80236e8:	080411d4 	.word	0x080411d4
 80236ec:	080411f0 	.word	0x080411f0
 80236f0:	08041220 	.word	0x08041220
 80236f4:	08041250 	.word	0x08041250
 80236f8:	08041284 	.word	0x08041284
 80236fc:	080412a0 	.word	0x080412a0
 8023700:	080412ec 	.word	0x080412ec
 8023704:	08041308 	.word	0x08041308
 8023708:	0804135c 	.word	0x0804135c
 802370c:	080413bc 	.word	0x080413bc
 8023710:	080413dc 	.word	0x080413dc
    lfs->name_max = lfs->cfg->name_max;
 8023714:	687b      	ldr	r3, [r7, #4]
 8023716:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023718:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 802371a:	687b      	ldr	r3, [r7, #4]
 802371c:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 802371e:	687b      	ldr	r3, [r7, #4]
 8023720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8023722:	2b00      	cmp	r3, #0
 8023724:	d102      	bne.n	802372c <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 8023726:	687b      	ldr	r3, [r7, #4]
 8023728:	22ff      	movs	r2, #255	@ 0xff
 802372a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 802372c:	687b      	ldr	r3, [r7, #4]
 802372e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8023732:	2b00      	cmp	r3, #0
 8023734:	da06      	bge.n	8023744 <lfs_init+0x2ec>
 8023736:	4b71      	ldr	r3, [pc, #452]	@ (80238fc <lfs_init+0x4a4>)
 8023738:	4a71      	ldr	r2, [pc, #452]	@ (8023900 <lfs_init+0x4a8>)
 802373a:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 802373e:	4871      	ldr	r0, [pc, #452]	@ (8023904 <lfs_init+0x4ac>)
 8023740:	f00f ff7a 	bl	8033638 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 8023744:	687b      	ldr	r3, [r7, #4]
 8023746:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023748:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 802374a:	687b      	ldr	r3, [r7, #4]
 802374c:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 802374e:	687b      	ldr	r3, [r7, #4]
 8023750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8023752:	2b00      	cmp	r3, #0
 8023754:	d103      	bne.n	802375e <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 8023756:	687b      	ldr	r3, [r7, #4]
 8023758:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 802375c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 802375e:	687b      	ldr	r3, [r7, #4]
 8023760:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8023764:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8023768:	4293      	cmp	r3, r2
 802376a:	d906      	bls.n	802377a <lfs_init+0x322>
 802376c:	4b66      	ldr	r3, [pc, #408]	@ (8023908 <lfs_init+0x4b0>)
 802376e:	4a64      	ldr	r2, [pc, #400]	@ (8023900 <lfs_init+0x4a8>)
 8023770:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 8023774:	4863      	ldr	r0, [pc, #396]	@ (8023904 <lfs_init+0x4ac>)
 8023776:	f00f ff5f 	bl	8033638 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 802377a:	687b      	ldr	r3, [r7, #4]
 802377c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802377e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8023780:	687b      	ldr	r3, [r7, #4]
 8023782:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 8023784:	687b      	ldr	r3, [r7, #4]
 8023786:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8023788:	2b00      	cmp	r3, #0
 802378a:	d103      	bne.n	8023794 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 802378c:	687b      	ldr	r3, [r7, #4]
 802378e:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8023792:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8023794:	687b      	ldr	r3, [r7, #4]
 8023796:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023798:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 802379a:	687b      	ldr	r3, [r7, #4]
 802379c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80237a0:	429a      	cmp	r2, r3
 80237a2:	d906      	bls.n	80237b2 <lfs_init+0x35a>
 80237a4:	4b59      	ldr	r3, [pc, #356]	@ (802390c <lfs_init+0x4b4>)
 80237a6:	4a56      	ldr	r2, [pc, #344]	@ (8023900 <lfs_init+0x4a8>)
 80237a8:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 80237ac:	4855      	ldr	r0, [pc, #340]	@ (8023904 <lfs_init+0x4ac>)
 80237ae:	f00f ff43 	bl	8033638 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80237b2:	687b      	ldr	r3, [r7, #4]
 80237b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80237b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80237b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80237bc:	d00e      	beq.n	80237dc <lfs_init+0x384>
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80237c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80237c4:	687b      	ldr	r3, [r7, #4]
 80237c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80237c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80237ca:	429a      	cmp	r2, r3
 80237cc:	d906      	bls.n	80237dc <lfs_init+0x384>
 80237ce:	4b50      	ldr	r3, [pc, #320]	@ (8023910 <lfs_init+0x4b8>)
 80237d0:	4a4b      	ldr	r2, [pc, #300]	@ (8023900 <lfs_init+0x4a8>)
 80237d2:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 80237d6:	484b      	ldr	r0, [pc, #300]	@ (8023904 <lfs_init+0x4ac>)
 80237d8:	f00f ff2e 	bl	8033638 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80237dc:	687b      	ldr	r3, [r7, #4]
 80237de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80237e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80237e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80237e6:	d00d      	beq.n	8023804 <lfs_init+0x3ac>
 80237e8:	687b      	ldr	r3, [r7, #4]
 80237ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80237ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80237ee:	687b      	ldr	r3, [r7, #4]
 80237f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80237f2:	429a      	cmp	r2, r3
 80237f4:	d906      	bls.n	8023804 <lfs_init+0x3ac>
 80237f6:	4b47      	ldr	r3, [pc, #284]	@ (8023914 <lfs_init+0x4bc>)
 80237f8:	4a41      	ldr	r2, [pc, #260]	@ (8023900 <lfs_init+0x4a8>)
 80237fa:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 80237fe:	4841      	ldr	r0, [pc, #260]	@ (8023904 <lfs_init+0x4ac>)
 8023800:	f00f ff1a 	bl	8033638 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8023804:	687b      	ldr	r3, [r7, #4]
 8023806:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802380a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802380e:	d019      	beq.n	8023844 <lfs_init+0x3ec>
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023814:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8023816:	687b      	ldr	r3, [r7, #4]
 8023818:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802381a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802381c:	2b00      	cmp	r3, #0
 802381e:	d004      	beq.n	802382a <lfs_init+0x3d2>
 8023820:	687b      	ldr	r3, [r7, #4]
 8023822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8023826:	08db      	lsrs	r3, r3, #3
 8023828:	e003      	b.n	8023832 <lfs_init+0x3da>
 802382a:	687b      	ldr	r3, [r7, #4]
 802382c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023830:	08db      	lsrs	r3, r3, #3
 8023832:	4293      	cmp	r3, r2
 8023834:	d206      	bcs.n	8023844 <lfs_init+0x3ec>
 8023836:	4b38      	ldr	r3, [pc, #224]	@ (8023918 <lfs_init+0x4c0>)
 8023838:	4a31      	ldr	r2, [pc, #196]	@ (8023900 <lfs_init+0x4a8>)
 802383a:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 802383e:	4831      	ldr	r0, [pc, #196]	@ (8023904 <lfs_init+0x4ac>)
 8023840:	f00f fefa 	bl	8033638 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 8023844:	687b      	ldr	r3, [r7, #4]
 8023846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023848:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 802384a:	687b      	ldr	r3, [r7, #4]
 802384c:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 802384e:	687b      	ldr	r3, [r7, #4]
 8023850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8023852:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8023856:	d103      	bne.n	8023860 <lfs_init+0x408>
        lfs->inline_max = 0;
 8023858:	687b      	ldr	r3, [r7, #4]
 802385a:	2200      	movs	r2, #0
 802385c:	67da      	str	r2, [r3, #124]	@ 0x7c
 802385e:	e022      	b.n	80238a6 <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 8023860:	687b      	ldr	r3, [r7, #4]
 8023862:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8023864:	2b00      	cmp	r3, #0
 8023866:	d11e      	bne.n	80238a6 <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 8023868:	687b      	ldr	r3, [r7, #4]
 802386a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802386c:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 802386e:	687b      	ldr	r3, [r7, #4]
 8023870:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 8023872:	687b      	ldr	r3, [r7, #4]
 8023874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 8023878:	2b00      	cmp	r3, #0
 802387a:	d004      	beq.n	8023886 <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 802387c:	687b      	ldr	r3, [r7, #4]
 802387e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 8023882:	08db      	lsrs	r3, r3, #3
 8023884:	e003      	b.n	802388e <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 8023886:	687b      	ldr	r3, [r7, #4]
 8023888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 802388c:	08db      	lsrs	r3, r3, #3
 802388e:	4619      	mov	r1, r3
 8023890:	4610      	mov	r0, r2
 8023892:	f7f9 fd20 	bl	801d2d6 <lfs_min>
 8023896:	4603      	mov	r3, r0
 8023898:	4619      	mov	r1, r3
 802389a:	4620      	mov	r0, r4
 802389c:	f7f9 fd1b 	bl	801d2d6 <lfs_min>
 80238a0:	4602      	mov	r2, r0
 80238a2:	687b      	ldr	r3, [r7, #4]
 80238a4:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80238a6:	687b      	ldr	r3, [r7, #4]
 80238a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80238ac:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80238ae:	687b      	ldr	r3, [r7, #4]
 80238b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80238b4:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 80238b6:	687b      	ldr	r3, [r7, #4]
 80238b8:	2200      	movs	r2, #0
 80238ba:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 80238bc:	687b      	ldr	r3, [r7, #4]
 80238be:	2200      	movs	r2, #0
 80238c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80238c2:	687b      	ldr	r3, [r7, #4]
 80238c4:	333c      	adds	r3, #60	@ 0x3c
 80238c6:	2200      	movs	r2, #0
 80238c8:	601a      	str	r2, [r3, #0]
 80238ca:	605a      	str	r2, [r3, #4]
 80238cc:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80238ce:	687b      	ldr	r3, [r7, #4]
 80238d0:	3330      	adds	r3, #48	@ 0x30
 80238d2:	2200      	movs	r2, #0
 80238d4:	601a      	str	r2, [r3, #0]
 80238d6:	605a      	str	r2, [r3, #4]
 80238d8:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80238da:	687b      	ldr	r3, [r7, #4]
 80238dc:	3348      	adds	r3, #72	@ 0x48
 80238de:	2200      	movs	r2, #0
 80238e0:	601a      	str	r2, [r3, #0]
 80238e2:	605a      	str	r2, [r3, #4]
 80238e4:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80238e6:	2300      	movs	r3, #0
 80238e8:	e003      	b.n	80238f2 <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 80238ea:	6878      	ldr	r0, [r7, #4]
 80238ec:	f000 f816 	bl	802391c <lfs_deinit>
    return err;
 80238f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80238f2:	4618      	mov	r0, r3
 80238f4:	3734      	adds	r7, #52	@ 0x34
 80238f6:	46bd      	mov	sp, r7
 80238f8:	bd90      	pop	{r4, r7, pc}
 80238fa:	bf00      	nop
 80238fc:	080413f8 	.word	0x080413f8
 8023900:	080448f0 	.word	0x080448f0
 8023904:	08040dec 	.word	0x08040dec
 8023908:	0804141c 	.word	0x0804141c
 802390c:	08041438 	.word	0x08041438
 8023910:	08041468 	.word	0x08041468
 8023914:	080414c0 	.word	0x080414c0
 8023918:	08041510 	.word	0x08041510

0802391c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 802391c:	b580      	push	{r7, lr}
 802391e:	b082      	sub	sp, #8
 8023920:	af00      	add	r7, sp, #0
 8023922:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8023924:	687b      	ldr	r3, [r7, #4]
 8023926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802392a:	2b00      	cmp	r3, #0
 802392c:	d104      	bne.n	8023938 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 802392e:	687b      	ldr	r3, [r7, #4]
 8023930:	68db      	ldr	r3, [r3, #12]
 8023932:	4618      	mov	r0, r3
 8023934:	f7f9 fd7a 	bl	801d42c <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8023938:	687b      	ldr	r3, [r7, #4]
 802393a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802393e:	2b00      	cmp	r3, #0
 8023940:	d104      	bne.n	802394c <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8023942:	687b      	ldr	r3, [r7, #4]
 8023944:	69db      	ldr	r3, [r3, #28]
 8023946:	4618      	mov	r0, r3
 8023948:	f7f9 fd70 	bl	801d42c <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 802394c:	687b      	ldr	r3, [r7, #4]
 802394e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023952:	2b00      	cmp	r3, #0
 8023954:	d104      	bne.n	8023960 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8023956:	687b      	ldr	r3, [r7, #4]
 8023958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 802395a:	4618      	mov	r0, r3
 802395c:	f7f9 fd66 	bl	801d42c <lfs_free>
    }

    return 0;
 8023960:	2300      	movs	r3, #0
}
 8023962:	4618      	mov	r0, r3
 8023964:	3708      	adds	r7, #8
 8023966:	46bd      	mov	sp, r7
 8023968:	bd80      	pop	{r7, pc}
	...

0802396c <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 802396c:	b580      	push	{r7, lr}
 802396e:	b0a0      	sub	sp, #128	@ 0x80
 8023970:	af00      	add	r7, sp, #0
 8023972:	6078      	str	r0, [r7, #4]
 8023974:	6039      	str	r1, [r7, #0]
    int err = 0;
 8023976:	2300      	movs	r3, #0
 8023978:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 802397a:	6839      	ldr	r1, [r7, #0]
 802397c:	6878      	ldr	r0, [r7, #4]
 802397e:	f7ff fd6b 	bl	8023458 <lfs_init>
 8023982:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8023984:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8023986:	2b00      	cmp	r3, #0
 8023988:	d001      	beq.n	802398e <lfs_format_+0x22>
            return err;
 802398a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 802398c:	e08d      	b.n	8023aaa <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 802398e:	683b      	ldr	r3, [r7, #0]
 8023990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023992:	2b00      	cmp	r3, #0
 8023994:	d106      	bne.n	80239a4 <lfs_format_+0x38>
 8023996:	4b47      	ldr	r3, [pc, #284]	@ (8023ab4 <lfs_format_+0x148>)
 8023998:	4a47      	ldr	r2, [pc, #284]	@ (8023ab8 <lfs_format_+0x14c>)
 802399a:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 802399e:	4847      	ldr	r0, [pc, #284]	@ (8023abc <lfs_format_+0x150>)
 80239a0:	f00f fe4a 	bl	8033638 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 80239a4:	687b      	ldr	r3, [r7, #4]
 80239a6:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80239a8:	687b      	ldr	r3, [r7, #4]
 80239aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80239ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80239ae:	461a      	mov	r2, r3
 80239b0:	2100      	movs	r1, #0
 80239b2:	f012 fb95 	bl	80360e0 <memset>
        lfs->lookahead.start = 0;
 80239b6:	687b      	ldr	r3, [r7, #4]
 80239b8:	2200      	movs	r2, #0
 80239ba:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 80239bc:	687b      	ldr	r3, [r7, #4]
 80239be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80239c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80239c2:	00da      	lsls	r2, r3, #3
 80239c4:	687b      	ldr	r3, [r7, #4]
 80239c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80239c8:	4619      	mov	r1, r3
 80239ca:	4610      	mov	r0, r2
 80239cc:	f7f9 fc83 	bl	801d2d6 <lfs_min>
 80239d0:	4602      	mov	r2, r0
 80239d2:	687b      	ldr	r3, [r7, #4]
 80239d4:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 80239d6:	687b      	ldr	r3, [r7, #4]
 80239d8:	2200      	movs	r2, #0
 80239da:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 80239dc:	6878      	ldr	r0, [r7, #4]
 80239de:	f7fa fc54 	bl	801e28a <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80239e2:	f107 030c 	add.w	r3, r7, #12
 80239e6:	4619      	mov	r1, r3
 80239e8:	6878      	ldr	r0, [r7, #4]
 80239ea:	f7fc fb9b 	bl	8020124 <lfs_dir_alloc>
 80239ee:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80239f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80239f2:	2b00      	cmp	r3, #0
 80239f4:	d150      	bne.n	8023a98 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 80239f6:	6878      	ldr	r0, [r7, #4]
 80239f8:	f7fa fc1e 	bl	801e238 <lfs_fs_disk_version>
 80239fc:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 80239fe:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 8023a00:	687b      	ldr	r3, [r7, #4]
 8023a02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 8023a06:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 8023a08:	687b      	ldr	r3, [r7, #4]
 8023a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 8023a0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 8023a0e:	687b      	ldr	r3, [r7, #4]
 8023a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 8023a12:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 8023a18:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 8023a1a:	687b      	ldr	r3, [r7, #4]
 8023a1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 8023a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 8023a20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8023a24:	4618      	mov	r0, r3
 8023a26:	f7fa fb7d 	bl	801e124 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8023a2a:	4b25      	ldr	r3, [pc, #148]	@ (8023ac0 <lfs_format_+0x154>)
 8023a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8023a2e:	2300      	movs	r3, #0
 8023a30:	653b      	str	r3, [r7, #80]	@ 0x50
 8023a32:	4b24      	ldr	r3, [pc, #144]	@ (8023ac4 <lfs_format_+0x158>)
 8023a34:	657b      	str	r3, [r7, #84]	@ 0x54
 8023a36:	4b24      	ldr	r3, [pc, #144]	@ (8023ac8 <lfs_format_+0x15c>)
 8023a38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8023a3a:	4b24      	ldr	r3, [pc, #144]	@ (8023acc <lfs_format_+0x160>)
 8023a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8023a3e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8023a42:	663b      	str	r3, [r7, #96]	@ 0x60
 8023a44:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8023a48:	f107 010c 	add.w	r1, r7, #12
 8023a4c:	2303      	movs	r3, #3
 8023a4e:	6878      	ldr	r0, [r7, #4]
 8023a50:	f7fd fd90 	bl	8021574 <lfs_dir_commit>
 8023a54:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8023a56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8023a58:	2b00      	cmp	r3, #0
 8023a5a:	d11f      	bne.n	8023a9c <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8023a5c:	2300      	movs	r3, #0
 8023a5e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8023a62:	f107 010c 	add.w	r1, r7, #12
 8023a66:	2300      	movs	r3, #0
 8023a68:	2200      	movs	r2, #0
 8023a6a:	6878      	ldr	r0, [r7, #4]
 8023a6c:	f7fd fd82 	bl	8021574 <lfs_dir_commit>
 8023a70:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8023a72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8023a74:	2b00      	cmp	r3, #0
 8023a76:	d113      	bne.n	8023aa0 <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8023a78:	2300      	movs	r3, #0
 8023a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023a7c:	2301      	movs	r3, #1
 8023a7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8023a80:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8023a84:	f107 030c 	add.w	r3, r7, #12
 8023a88:	4619      	mov	r1, r3
 8023a8a:	6878      	ldr	r0, [r7, #4]
 8023a8c:	f7fb ff18 	bl	801f8c0 <lfs_dir_fetch>
 8023a90:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8023a92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8023a94:	2b00      	cmp	r3, #0
 8023a96:	e004      	b.n	8023aa2 <lfs_format_+0x136>
            goto cleanup;
 8023a98:	bf00      	nop
 8023a9a:	e002      	b.n	8023aa2 <lfs_format_+0x136>
            goto cleanup;
 8023a9c:	bf00      	nop
 8023a9e:	e000      	b.n	8023aa2 <lfs_format_+0x136>
            goto cleanup;
 8023aa0:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8023aa2:	6878      	ldr	r0, [r7, #4]
 8023aa4:	f7ff ff3a 	bl	802391c <lfs_deinit>
    return err;
 8023aa8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 8023aaa:	4618      	mov	r0, r3
 8023aac:	3780      	adds	r7, #128	@ 0x80
 8023aae:	46bd      	mov	sp, r7
 8023ab0:	bd80      	pop	{r7, pc}
 8023ab2:	bf00      	nop
 8023ab4:	080415a0 	.word	0x080415a0
 8023ab8:	080448fc 	.word	0x080448fc
 8023abc:	08040dec 	.word	0x08040dec
 8023ac0:	40100000 	.word	0x40100000
 8023ac4:	0ff00008 	.word	0x0ff00008
 8023ac8:	080415b8 	.word	0x080415b8
 8023acc:	20100018 	.word	0x20100018

08023ad0 <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8023ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023ad2:	b0a1      	sub	sp, #132	@ 0x84
 8023ad4:	af04      	add	r7, sp, #16
 8023ad6:	6078      	str	r0, [r7, #4]
 8023ad8:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8023ada:	6839      	ldr	r1, [r7, #0]
 8023adc:	6878      	ldr	r0, [r7, #4]
 8023ade:	f7ff fcbb 	bl	8023458 <lfs_init>
 8023ae2:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 8023ae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8023ae6:	2b00      	cmp	r3, #0
 8023ae8:	d001      	beq.n	8023aee <lfs_mount_+0x1e>
        return err;
 8023aea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8023aec:	e202      	b.n	8023ef4 <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8023aee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8023af2:	2220      	movs	r2, #32
 8023af4:	2100      	movs	r1, #0
 8023af6:	4618      	mov	r0, r3
 8023af8:	f012 faf2 	bl	80360e0 <memset>
 8023afc:	2301      	movs	r3, #1
 8023afe:	657b      	str	r3, [r7, #84]	@ 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8023b00:	4a9a      	ldr	r2, [pc, #616]	@ (8023d6c <lfs_mount_+0x29c>)
 8023b02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8023b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023b0a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8023b0e:	2301      	movs	r3, #1
 8023b10:	66bb      	str	r3, [r7, #104]	@ 0x68
    lfs_size_t tortoise_period = 1;
 8023b12:	2301      	movs	r3, #1
 8023b14:	667b      	str	r3, [r7, #100]	@ 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 8023b16:	e199      	b.n	8023e4c <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8023b18:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8023b1c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8023b20:	3318      	adds	r3, #24
 8023b22:	4611      	mov	r1, r2
 8023b24:	4618      	mov	r0, r3
 8023b26:	f7fa f87d 	bl	801dc24 <lfs_pair_issync>
 8023b2a:	4603      	mov	r3, r0
 8023b2c:	2b00      	cmp	r3, #0
 8023b2e:	d00a      	beq.n	8023b46 <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 8023b30:	4b8f      	ldr	r3, [pc, #572]	@ (8023d70 <lfs_mount_+0x2a0>)
 8023b32:	f241 123d 	movw	r2, #4413	@ 0x113d
 8023b36:	498f      	ldr	r1, [pc, #572]	@ (8023d74 <lfs_mount_+0x2a4>)
 8023b38:	488f      	ldr	r0, [pc, #572]	@ (8023d78 <lfs_mount_+0x2a8>)
 8023b3a:	f00f fdb1 	bl	80336a0 <printf>
            err = LFS_ERR_CORRUPT;
 8023b3e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8023b42:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 8023b44:	e1d2      	b.n	8023eec <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 8023b46:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8023b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023b4a:	429a      	cmp	r2, r3
 8023b4c:	d108      	bne.n	8023b60 <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 8023b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023b50:	633b      	str	r3, [r7, #48]	@ 0x30
            tortoise[1] = dir.tail[1];
 8023b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023b54:	637b      	str	r3, [r7, #52]	@ 0x34
            tortoise_i = 0;
 8023b56:	2300      	movs	r3, #0
 8023b58:	66bb      	str	r3, [r7, #104]	@ 0x68
            tortoise_period *= 2;
 8023b5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023b5c:	005b      	lsls	r3, r3, #1
 8023b5e:	667b      	str	r3, [r7, #100]	@ 0x64
        }
        tortoise_i += 1;
 8023b60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8023b62:	3301      	adds	r3, #1
 8023b64:	66bb      	str	r3, [r7, #104]	@ 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8023b66:	687b      	ldr	r3, [r7, #4]
 8023b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8023b6a:	4b84      	ldr	r3, [pc, #528]	@ (8023d7c <lfs_mount_+0x2ac>)
 8023b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8023b6e:	2308      	movs	r3, #8
 8023b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8023b72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8023b76:	f103 0218 	add.w	r2, r3, #24
 8023b7a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8023b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023b82:	9303      	str	r3, [sp, #12]
 8023b84:	4b7e      	ldr	r3, [pc, #504]	@ (8023d80 <lfs_mount_+0x2b0>)
 8023b86:	9302      	str	r3, [sp, #8]
 8023b88:	2300      	movs	r3, #0
 8023b8a:	9301      	str	r3, [sp, #4]
 8023b8c:	4b7d      	ldr	r3, [pc, #500]	@ (8023d84 <lfs_mount_+0x2b4>)
 8023b8e:	9300      	str	r3, [sp, #0]
 8023b90:	4b7d      	ldr	r3, [pc, #500]	@ (8023d88 <lfs_mount_+0x2b8>)
 8023b92:	6878      	ldr	r0, [r7, #4]
 8023b94:	f7fb fac4 	bl	801f120 <lfs_dir_fetchmatch>
 8023b98:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8023b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023b9c:	2b00      	cmp	r3, #0
 8023b9e:	da02      	bge.n	8023ba6 <lfs_mount_+0xd6>
            err = tag;
 8023ba0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 8023ba4:	e1a2      	b.n	8023eec <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8023ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023ba8:	2b00      	cmp	r3, #0
 8023baa:	f000 8142 	beq.w	8023e32 <lfs_mount_+0x362>
 8023bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023bb0:	4618      	mov	r0, r3
 8023bb2:	f7fa f8a6 	bl	801dd02 <lfs_tag_isdelete>
 8023bb6:	4603      	mov	r3, r0
 8023bb8:	f083 0301 	eor.w	r3, r3, #1
 8023bbc:	b2db      	uxtb	r3, r3
 8023bbe:	2b00      	cmp	r3, #0
 8023bc0:	f000 8137 	beq.w	8023e32 <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 8023bc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8023bc6:	687b      	ldr	r3, [r7, #4]
 8023bc8:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8023bca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023bcc:	687b      	ldr	r3, [r7, #4]
 8023bce:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8023bd0:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8023bd4:	f107 030c 	add.w	r3, r7, #12
 8023bd8:	9300      	str	r3, [sp, #0]
 8023bda:	4b6c      	ldr	r3, [pc, #432]	@ (8023d8c <lfs_mount_+0x2bc>)
 8023bdc:	4a6a      	ldr	r2, [pc, #424]	@ (8023d88 <lfs_mount_+0x2b8>)
 8023bde:	6878      	ldr	r0, [r7, #4]
 8023be0:	f7fa fd68 	bl	801e6b4 <lfs_dir_get>
 8023be4:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8023be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023be8:	2b00      	cmp	r3, #0
 8023bea:	da02      	bge.n	8023bf2 <lfs_mount_+0x122>
                err = tag;
 8023bec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023bee:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8023bf0:	e17c      	b.n	8023eec <lfs_mount_+0x41c>
            }
            lfs_superblock_fromle32(&superblock);
 8023bf2:	f107 030c 	add.w	r3, r7, #12
 8023bf6:	4618      	mov	r0, r3
 8023bf8:	f7fa fa5c 	bl	801e0b4 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8023bfc:	68fb      	ldr	r3, [r7, #12]
 8023bfe:	0c1b      	lsrs	r3, r3, #16
 8023c00:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8023c04:	68fb      	ldr	r3, [r7, #12]
 8023c06:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 8023c0a:	6878      	ldr	r0, [r7, #4]
 8023c0c:	f7fa fb22 	bl	801e254 <lfs_fs_disk_version_major>
 8023c10:	4603      	mov	r3, r0
 8023c12:	461a      	mov	r2, r3
 8023c14:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8023c18:	4293      	cmp	r3, r2
 8023c1a:	d108      	bne.n	8023c2e <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8023c1c:	6878      	ldr	r0, [r7, #4]
 8023c1e:	f7fa fb27 	bl	801e270 <lfs_fs_disk_version_minor>
 8023c22:	4603      	mov	r3, r0
 8023c24:	461a      	mov	r2, r3
 8023c26:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8023c2a:	4293      	cmp	r3, r2
 8023c2c:	d91d      	bls.n	8023c6a <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 8023c2e:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 8023c32:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 8023c36:	6878      	ldr	r0, [r7, #4]
 8023c38:	f7fa fb0c 	bl	801e254 <lfs_fs_disk_version_major>
 8023c3c:	4603      	mov	r3, r0
 8023c3e:	461e      	mov	r6, r3
 8023c40:	6878      	ldr	r0, [r7, #4]
 8023c42:	f7fa fb15 	bl	801e270 <lfs_fs_disk_version_minor>
 8023c46:	4603      	mov	r3, r0
 8023c48:	461a      	mov	r2, r3
 8023c4a:	4b49      	ldr	r3, [pc, #292]	@ (8023d70 <lfs_mount_+0x2a0>)
 8023c4c:	9303      	str	r3, [sp, #12]
 8023c4e:	9202      	str	r2, [sp, #8]
 8023c50:	9601      	str	r6, [sp, #4]
 8023c52:	9400      	str	r4, [sp, #0]
 8023c54:	462b      	mov	r3, r5
 8023c56:	f241 126b 	movw	r2, #4459	@ 0x116b
 8023c5a:	4946      	ldr	r1, [pc, #280]	@ (8023d74 <lfs_mount_+0x2a4>)
 8023c5c:	484c      	ldr	r0, [pc, #304]	@ (8023d90 <lfs_mount_+0x2c0>)
 8023c5e:	f00f fd1f 	bl	80336a0 <printf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 8023c62:	f06f 0315 	mvn.w	r3, #21
 8023c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8023c68:	e0e2      	b.n	8023e30 <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 8023c6a:	2300      	movs	r3, #0
 8023c6c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8023c70:	6878      	ldr	r0, [r7, #4]
 8023c72:	f7fa fafd 	bl	801e270 <lfs_fs_disk_version_minor>
 8023c76:	4603      	mov	r3, r0
 8023c78:	461a      	mov	r2, r3
 8023c7a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8023c7e:	4293      	cmp	r3, r2
 8023c80:	d21c      	bcs.n	8023cbc <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 8023c82:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 8023c86:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 8023c8a:	6878      	ldr	r0, [r7, #4]
 8023c8c:	f7fa fae2 	bl	801e254 <lfs_fs_disk_version_major>
 8023c90:	4603      	mov	r3, r0
 8023c92:	461e      	mov	r6, r3
 8023c94:	6878      	ldr	r0, [r7, #4]
 8023c96:	f7fa faeb 	bl	801e270 <lfs_fs_disk_version_minor>
 8023c9a:	4603      	mov	r3, r0
 8023c9c:	461a      	mov	r2, r3
 8023c9e:	4b34      	ldr	r3, [pc, #208]	@ (8023d70 <lfs_mount_+0x2a0>)
 8023ca0:	9303      	str	r3, [sp, #12]
 8023ca2:	9202      	str	r2, [sp, #8]
 8023ca4:	9601      	str	r6, [sp, #4]
 8023ca6:	9400      	str	r4, [sp, #0]
 8023ca8:	462b      	mov	r3, r5
 8023caa:	f241 127a 	movw	r2, #4474	@ 0x117a
 8023cae:	4931      	ldr	r1, [pc, #196]	@ (8023d74 <lfs_mount_+0x2a4>)
 8023cb0:	4838      	ldr	r0, [pc, #224]	@ (8023d94 <lfs_mount_+0x2c4>)
 8023cb2:	f00f fcf5 	bl	80336a0 <printf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 8023cb6:	2301      	movs	r3, #1
 8023cb8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 8023cbc:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8023cc0:	4619      	mov	r1, r3
 8023cc2:	6878      	ldr	r0, [r7, #4]
 8023cc4:	f000 fbb4 	bl	8024430 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 8023cc8:	69bb      	ldr	r3, [r7, #24]
 8023cca:	2b00      	cmp	r3, #0
 8023ccc:	d018      	beq.n	8023d00 <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 8023cce:	69ba      	ldr	r2, [r7, #24]
 8023cd0:	687b      	ldr	r3, [r7, #4]
 8023cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8023cd4:	429a      	cmp	r2, r3
 8023cd6:	d910      	bls.n	8023cfa <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8023cd8:	69ba      	ldr	r2, [r7, #24]
 8023cda:	687b      	ldr	r3, [r7, #4]
 8023cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8023cde:	4924      	ldr	r1, [pc, #144]	@ (8023d70 <lfs_mount_+0x2a0>)
 8023ce0:	9101      	str	r1, [sp, #4]
 8023ce2:	9300      	str	r3, [sp, #0]
 8023ce4:	4613      	mov	r3, r2
 8023ce6:	f241 1289 	movw	r2, #4489	@ 0x1189
 8023cea:	4922      	ldr	r1, [pc, #136]	@ (8023d74 <lfs_mount_+0x2a4>)
 8023cec:	482a      	ldr	r0, [pc, #168]	@ (8023d98 <lfs_mount_+0x2c8>)
 8023cee:	f00f fcd7 	bl	80336a0 <printf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8023cf2:	f06f 0315 	mvn.w	r3, #21
 8023cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8023cf8:	e09a      	b.n	8023e30 <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 8023cfa:	69ba      	ldr	r2, [r7, #24]
 8023cfc:	687b      	ldr	r3, [r7, #4]
 8023cfe:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 8023d00:	69fb      	ldr	r3, [r7, #28]
 8023d02:	2b00      	cmp	r3, #0
 8023d04:	d018      	beq.n	8023d38 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 8023d06:	69fa      	ldr	r2, [r7, #28]
 8023d08:	687b      	ldr	r3, [r7, #4]
 8023d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8023d0c:	429a      	cmp	r2, r3
 8023d0e:	d910      	bls.n	8023d32 <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8023d10:	69fa      	ldr	r2, [r7, #28]
 8023d12:	687b      	ldr	r3, [r7, #4]
 8023d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8023d16:	4916      	ldr	r1, [pc, #88]	@ (8023d70 <lfs_mount_+0x2a0>)
 8023d18:	9101      	str	r1, [sp, #4]
 8023d1a:	9300      	str	r3, [sp, #0]
 8023d1c:	4613      	mov	r3, r2
 8023d1e:	f241 1294 	movw	r2, #4500	@ 0x1194
 8023d22:	4914      	ldr	r1, [pc, #80]	@ (8023d74 <lfs_mount_+0x2a4>)
 8023d24:	481d      	ldr	r0, [pc, #116]	@ (8023d9c <lfs_mount_+0x2cc>)
 8023d26:	f00f fcbb 	bl	80336a0 <printf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8023d2a:	f06f 0315 	mvn.w	r3, #21
 8023d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8023d30:	e07e      	b.n	8023e30 <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 8023d32:	69fa      	ldr	r2, [r7, #28]
 8023d34:	687b      	ldr	r3, [r7, #4]
 8023d36:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 8023d38:	6a3b      	ldr	r3, [r7, #32]
 8023d3a:	2b00      	cmp	r3, #0
 8023d3c:	d040      	beq.n	8023dc0 <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 8023d3e:	6a3a      	ldr	r2, [r7, #32]
 8023d40:	687b      	ldr	r3, [r7, #4]
 8023d42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8023d44:	429a      	cmp	r2, r3
 8023d46:	d92d      	bls.n	8023da4 <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8023d48:	6a3a      	ldr	r2, [r7, #32]
 8023d4a:	687b      	ldr	r3, [r7, #4]
 8023d4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8023d4e:	4908      	ldr	r1, [pc, #32]	@ (8023d70 <lfs_mount_+0x2a0>)
 8023d50:	9101      	str	r1, [sp, #4]
 8023d52:	9300      	str	r3, [sp, #0]
 8023d54:	4613      	mov	r3, r2
 8023d56:	f241 129f 	movw	r2, #4511	@ 0x119f
 8023d5a:	4906      	ldr	r1, [pc, #24]	@ (8023d74 <lfs_mount_+0x2a4>)
 8023d5c:	4810      	ldr	r0, [pc, #64]	@ (8023da0 <lfs_mount_+0x2d0>)
 8023d5e:	f00f fc9f 	bl	80336a0 <printf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8023d62:	f06f 0315 	mvn.w	r3, #21
 8023d66:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8023d68:	e062      	b.n	8023e30 <lfs_mount_+0x360>
 8023d6a:	bf00      	nop
 8023d6c:	08040f58 	.word	0x08040f58
 8023d70:	08040f14 	.word	0x08040f14
 8023d74:	08040dec 	.word	0x08040dec
 8023d78:	080415c4 	.word	0x080415c4
 8023d7c:	080415b8 	.word	0x080415b8
 8023d80:	0801fa51 	.word	0x0801fa51
 8023d84:	0ff00008 	.word	0x0ff00008
 8023d88:	7ffffc00 	.word	0x7ffffc00
 8023d8c:	20100018 	.word	0x20100018
 8023d90:	080415f0 	.word	0x080415f0
 8023d94:	08041628 	.word	0x08041628
 8023d98:	08041668 	.word	0x08041668
 8023d9c:	0804169c 	.word	0x0804169c
 8023da0:	080416d0 	.word	0x080416d0
                }

                lfs->attr_max = superblock.attr_max;
 8023da4:	6a3a      	ldr	r2, [r7, #32]
 8023da6:	687b      	ldr	r3, [r7, #4]
 8023da8:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8023daa:	687b      	ldr	r3, [r7, #4]
 8023dac:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8023dae:	687b      	ldr	r3, [r7, #4]
 8023db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8023db2:	4619      	mov	r1, r3
 8023db4:	4610      	mov	r0, r2
 8023db6:	f7f9 fa8e 	bl	801d2d6 <lfs_min>
 8023dba:	4602      	mov	r2, r0
 8023dbc:	687b      	ldr	r3, [r7, #4]
 8023dbe:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8023dc0:	687b      	ldr	r3, [r7, #4]
 8023dc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023dc6:	2b00      	cmp	r3, #0
 8023dc8:	d017      	beq.n	8023dfa <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 8023dca:	697a      	ldr	r2, [r7, #20]
 8023dcc:	687b      	ldr	r3, [r7, #4]
 8023dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023dd2:	429a      	cmp	r2, r3
 8023dd4:	d011      	beq.n	8023dfa <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8023dd6:	697a      	ldr	r2, [r7, #20]
 8023dd8:	687b      	ldr	r3, [r7, #4]
 8023dda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023dde:	4947      	ldr	r1, [pc, #284]	@ (8023efc <lfs_mount_+0x42c>)
 8023de0:	9101      	str	r1, [sp, #4]
 8023de2:	9300      	str	r3, [sp, #0]
 8023de4:	4613      	mov	r3, r2
 8023de6:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 8023dea:	4945      	ldr	r1, [pc, #276]	@ (8023f00 <lfs_mount_+0x430>)
 8023dec:	4845      	ldr	r0, [pc, #276]	@ (8023f04 <lfs_mount_+0x434>)
 8023dee:	f00f fc57 	bl	80336a0 <printf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8023df2:	f06f 0315 	mvn.w	r3, #21
 8023df6:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8023df8:	e01a      	b.n	8023e30 <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 8023dfa:	697a      	ldr	r2, [r7, #20]
 8023dfc:	687b      	ldr	r3, [r7, #4]
 8023dfe:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8023e00:	693a      	ldr	r2, [r7, #16]
 8023e02:	687b      	ldr	r3, [r7, #4]
 8023e04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023e08:	429a      	cmp	r2, r3
 8023e0a:	d012      	beq.n	8023e32 <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8023e0c:	693a      	ldr	r2, [r7, #16]
 8023e0e:	687b      	ldr	r3, [r7, #4]
 8023e10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023e14:	4939      	ldr	r1, [pc, #228]	@ (8023efc <lfs_mount_+0x42c>)
 8023e16:	9101      	str	r1, [sp, #4]
 8023e18:	9300      	str	r3, [sp, #0]
 8023e1a:	4613      	mov	r3, r2
 8023e1c:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 8023e20:	4937      	ldr	r1, [pc, #220]	@ (8023f00 <lfs_mount_+0x430>)
 8023e22:	4839      	ldr	r0, [pc, #228]	@ (8023f08 <lfs_mount_+0x438>)
 8023e24:	f00f fc3c 	bl	80336a0 <printf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8023e28:	f06f 0315 	mvn.w	r3, #21
 8023e2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8023e2e:	bf00      	nop
            goto cleanup;
 8023e30:	e05c      	b.n	8023eec <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8023e32:	687b      	ldr	r3, [r7, #4]
 8023e34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8023e38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8023e3c:	4619      	mov	r1, r3
 8023e3e:	6878      	ldr	r0, [r7, #4]
 8023e40:	f7fb fd5a 	bl	801f8f8 <lfs_dir_getgstate>
 8023e44:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 8023e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8023e48:	2b00      	cmp	r3, #0
 8023e4a:	d14e      	bne.n	8023eea <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 8023e4c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8023e50:	3318      	adds	r3, #24
 8023e52:	4618      	mov	r0, r3
 8023e54:	f7f9 fea1 	bl	801db9a <lfs_pair_isnull>
 8023e58:	4603      	mov	r3, r0
 8023e5a:	f083 0301 	eor.w	r3, r3, #1
 8023e5e:	b2db      	uxtb	r3, r3
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	f47f ae59 	bne.w	8023b18 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8023e66:	687b      	ldr	r3, [r7, #4]
 8023e68:	3330      	adds	r3, #48	@ 0x30
 8023e6a:	4618      	mov	r0, r3
 8023e6c:	f7f9 fffc 	bl	801de68 <lfs_gstate_iszero>
 8023e70:	4603      	mov	r3, r0
 8023e72:	f083 0301 	eor.w	r3, r3, #1
 8023e76:	b2db      	uxtb	r3, r3
 8023e78:	2b00      	cmp	r3, #0
 8023e7a:	d010      	beq.n	8023e9e <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8023e7c:	687b      	ldr	r3, [r7, #4]
 8023e7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8023e80:	687b      	ldr	r3, [r7, #4]
 8023e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023e84:	687a      	ldr	r2, [r7, #4]
 8023e86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8023e88:	481c      	ldr	r0, [pc, #112]	@ (8023efc <lfs_mount_+0x42c>)
 8023e8a:	9002      	str	r0, [sp, #8]
 8023e8c:	9201      	str	r2, [sp, #4]
 8023e8e:	9300      	str	r3, [sp, #0]
 8023e90:	460b      	mov	r3, r1
 8023e92:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 8023e96:	491a      	ldr	r1, [pc, #104]	@ (8023f00 <lfs_mount_+0x430>)
 8023e98:	481c      	ldr	r0, [pc, #112]	@ (8023f0c <lfs_mount_+0x43c>)
 8023e9a:	f00f fc01 	bl	80336a0 <printf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8023e9e:	687b      	ldr	r3, [r7, #4]
 8023ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023ea2:	4618      	mov	r0, r3
 8023ea4:	f7f9 ff1f 	bl	801dce6 <lfs_tag_isvalid>
 8023ea8:	4603      	mov	r3, r0
 8023eaa:	f083 0301 	eor.w	r3, r3, #1
 8023eae:	b2db      	uxtb	r3, r3
 8023eb0:	461a      	mov	r2, r3
 8023eb2:	687b      	ldr	r3, [r7, #4]
 8023eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023eb6:	441a      	add	r2, r3
 8023eb8:	687b      	ldr	r3, [r7, #4]
 8023eba:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8023ebc:	687b      	ldr	r3, [r7, #4]
 8023ebe:	687a      	ldr	r2, [r7, #4]
 8023ec0:	333c      	adds	r3, #60	@ 0x3c
 8023ec2:	3230      	adds	r2, #48	@ 0x30
 8023ec4:	ca07      	ldmia	r2, {r0, r1, r2}
 8023ec6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8023eca:	687b      	ldr	r3, [r7, #4]
 8023ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023ece:	687a      	ldr	r2, [r7, #4]
 8023ed0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8023ed2:	fbb3 f1f2 	udiv	r1, r3, r2
 8023ed6:	fb01 f202 	mul.w	r2, r1, r2
 8023eda:	1a9a      	subs	r2, r3, r2
 8023edc:	687b      	ldr	r3, [r7, #4]
 8023ede:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 8023ee0:	6878      	ldr	r0, [r7, #4]
 8023ee2:	f7fa f9e0 	bl	801e2a6 <lfs_alloc_drop>

    return 0;
 8023ee6:	2300      	movs	r3, #0
 8023ee8:	e004      	b.n	8023ef4 <lfs_mount_+0x424>
            goto cleanup;
 8023eea:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8023eec:	6878      	ldr	r0, [r7, #4]
 8023eee:	f000 f80f 	bl	8023f10 <lfs_unmount_>
    return err;
 8023ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8023ef4:	4618      	mov	r0, r3
 8023ef6:	3774      	adds	r7, #116	@ 0x74
 8023ef8:	46bd      	mov	sp, r7
 8023efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023efc:	08040f14 	.word	0x08040f14
 8023f00:	08040dec 	.word	0x08040dec
 8023f04:	08041704 	.word	0x08041704
 8023f08:	08041738 	.word	0x08041738
 8023f0c:	08041768 	.word	0x08041768

08023f10 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8023f10:	b580      	push	{r7, lr}
 8023f12:	b082      	sub	sp, #8
 8023f14:	af00      	add	r7, sp, #0
 8023f16:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8023f18:	6878      	ldr	r0, [r7, #4]
 8023f1a:	f7ff fcff 	bl	802391c <lfs_deinit>
 8023f1e:	4603      	mov	r3, r0
}
 8023f20:	4618      	mov	r0, r3
 8023f22:	3708      	adds	r7, #8
 8023f24:	46bd      	mov	sp, r7
 8023f26:	bd80      	pop	{r7, pc}

08023f28 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8023f28:	b590      	push	{r4, r7, lr}
 8023f2a:	b0a1      	sub	sp, #132	@ 0x84
 8023f2c:	af04      	add	r7, sp, #16
 8023f2e:	60f8      	str	r0, [r7, #12]
 8023f30:	60b9      	str	r1, [r7, #8]
 8023f32:	607a      	str	r2, [r7, #4]
 8023f34:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8023f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023f3a:	2220      	movs	r2, #32
 8023f3c:	2100      	movs	r1, #0
 8023f3e:	4618      	mov	r0, r3
 8023f40:	f012 f8ce 	bl	80360e0 <memset>
 8023f44:	2301      	movs	r3, #1
 8023f46:	643b      	str	r3, [r7, #64]	@ 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8023f48:	4a9a      	ldr	r2, [pc, #616]	@ (80241b4 <lfs_fs_traverse_+0x28c>)
 8023f4a:	f107 031c 	add.w	r3, r7, #28
 8023f4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023f52:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8023f56:	2301      	movs	r3, #1
 8023f58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    lfs_size_t tortoise_period = 1;
 8023f5a:	2301      	movs	r3, #1
 8023f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8023f5e:	e0c0      	b.n	80240e2 <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8023f60:	f107 021c 	add.w	r2, r7, #28
 8023f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023f68:	3318      	adds	r3, #24
 8023f6a:	4611      	mov	r1, r2
 8023f6c:	4618      	mov	r0, r3
 8023f6e:	f7f9 fe59 	bl	801dc24 <lfs_pair_issync>
 8023f72:	4603      	mov	r3, r0
 8023f74:	2b00      	cmp	r3, #0
 8023f76:	d009      	beq.n	8023f8c <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 8023f78:	4b8f      	ldr	r3, [pc, #572]	@ (80241b8 <lfs_fs_traverse_+0x290>)
 8023f7a:	f241 2222 	movw	r2, #4642	@ 0x1222
 8023f7e:	498f      	ldr	r1, [pc, #572]	@ (80241bc <lfs_fs_traverse_+0x294>)
 8023f80:	488f      	ldr	r0, [pc, #572]	@ (80241c0 <lfs_fs_traverse_+0x298>)
 8023f82:	f00f fb8d 	bl	80336a0 <printf>
            return LFS_ERR_CORRUPT;
 8023f86:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8023f8a:	e10f      	b.n	80241ac <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8023f8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8023f8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8023f90:	429a      	cmp	r2, r3
 8023f92:	d108      	bne.n	8023fa6 <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 8023f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023f96:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8023f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023f9a:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8023f9c:	2300      	movs	r3, #0
 8023f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            tortoise_period *= 2;
 8023fa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8023fa2:	005b      	lsls	r3, r3, #1
 8023fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
        }
        tortoise_i += 1;
 8023fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8023fa8:	3301      	adds	r3, #1
 8023faa:	66fb      	str	r3, [r7, #108]	@ 0x6c

        for (int i = 0; i < 2; i++) {
 8023fac:	2300      	movs	r3, #0
 8023fae:	667b      	str	r3, [r7, #100]	@ 0x64
 8023fb0:	e013      	b.n	8023fda <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 8023fb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023fb4:	3306      	adds	r3, #6
 8023fb6:	009b      	lsls	r3, r3, #2
 8023fb8:	3370      	adds	r3, #112	@ 0x70
 8023fba:	443b      	add	r3, r7
 8023fbc:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8023fc0:	68bb      	ldr	r3, [r7, #8]
 8023fc2:	4611      	mov	r1, r2
 8023fc4:	6878      	ldr	r0, [r7, #4]
 8023fc6:	4798      	blx	r3
 8023fc8:	6478      	str	r0, [r7, #68]	@ 0x44
            if (err) {
 8023fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8023fcc:	2b00      	cmp	r3, #0
 8023fce:	d001      	beq.n	8023fd4 <lfs_fs_traverse_+0xac>
                return err;
 8023fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8023fd2:	e0eb      	b.n	80241ac <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 8023fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023fd6:	3301      	adds	r3, #1
 8023fd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8023fda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023fdc:	2b01      	cmp	r3, #1
 8023fde:	dde8      	ble.n	8023fb2 <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8023fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023fe4:	f103 0218 	add.w	r2, r3, #24
 8023fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023fec:	4619      	mov	r1, r3
 8023fee:	68f8      	ldr	r0, [r7, #12]
 8023ff0:	f7fb fc66 	bl	801f8c0 <lfs_dir_fetch>
 8023ff4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (err) {
 8023ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023ff8:	2b00      	cmp	r3, #0
 8023ffa:	d001      	beq.n	8024000 <lfs_fs_traverse_+0xd8>
            return err;
 8023ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023ffe:	e0d5      	b.n	80241ac <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8024000:	2300      	movs	r3, #0
 8024002:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8024006:	e067      	b.n	80240d8 <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8024008:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 802400c:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 802400e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8024012:	f043 0308 	orr.w	r3, r3, #8
 8024016:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 802401a:	f107 0214 	add.w	r2, r7, #20
 802401e:	9200      	str	r2, [sp, #0]
 8024020:	4a68      	ldr	r2, [pc, #416]	@ (80241c4 <lfs_fs_traverse_+0x29c>)
 8024022:	68f8      	ldr	r0, [r7, #12]
 8024024:	f7fa fb46 	bl	801e6b4 <lfs_dir_get>
 8024028:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (tag < 0) {
 802402a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802402c:	2b00      	cmp	r3, #0
 802402e:	da05      	bge.n	802403c <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 8024030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8024032:	f113 0f02 	cmn.w	r3, #2
 8024036:	d049      	beq.n	80240cc <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 8024038:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802403a:	e0b7      	b.n	80241ac <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 802403c:	f107 0314 	add.w	r3, r7, #20
 8024040:	4618      	mov	r0, r3
 8024042:	f7fa f807 	bl	801e054 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8024046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8024048:	4618      	mov	r0, r3
 802404a:	f7f9 fe8d 	bl	801dd68 <lfs_tag_type3>
 802404e:	4603      	mov	r3, r0
 8024050:	461a      	mov	r2, r3
 8024052:	f240 2302 	movw	r3, #514	@ 0x202
 8024056:	429a      	cmp	r2, r3
 8024058:	d113      	bne.n	8024082 <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 802405a:	68f9      	ldr	r1, [r7, #12]
 802405c:	6978      	ldr	r0, [r7, #20]
 802405e:	69bb      	ldr	r3, [r7, #24]
 8024060:	687a      	ldr	r2, [r7, #4]
 8024062:	9202      	str	r2, [sp, #8]
 8024064:	68ba      	ldr	r2, [r7, #8]
 8024066:	9201      	str	r2, [sp, #4]
 8024068:	9300      	str	r3, [sp, #0]
 802406a:	4603      	mov	r3, r0
 802406c:	460a      	mov	r2, r1
 802406e:	2100      	movs	r1, #0
 8024070:	68f8      	ldr	r0, [r7, #12]
 8024072:	f7fd fe9d 	bl	8021db0 <lfs_ctz_traverse>
 8024076:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8024078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802407a:	2b00      	cmp	r3, #0
 802407c:	d027      	beq.n	80240ce <lfs_fs_traverse_+0x1a6>
                    return err;
 802407e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024080:	e094      	b.n	80241ac <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 8024082:	78fb      	ldrb	r3, [r7, #3]
 8024084:	2b00      	cmp	r3, #0
 8024086:	d022      	beq.n	80240ce <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8024088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802408a:	4618      	mov	r0, r3
 802408c:	f7f9 fe6c 	bl	801dd68 <lfs_tag_type3>
 8024090:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8024092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024096:	d11a      	bne.n	80240ce <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 8024098:	2300      	movs	r3, #0
 802409a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802409c:	e012      	b.n	80240c4 <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 802409e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80240a0:	009b      	lsls	r3, r3, #2
 80240a2:	f107 0214 	add.w	r2, r7, #20
 80240a6:	4413      	add	r3, r2
 80240a8:	681a      	ldr	r2, [r3, #0]
 80240aa:	68bb      	ldr	r3, [r7, #8]
 80240ac:	4611      	mov	r1, r2
 80240ae:	6878      	ldr	r0, [r7, #4]
 80240b0:	4798      	blx	r3
 80240b2:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    if (err) {
 80240b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80240b6:	2b00      	cmp	r3, #0
 80240b8:	d001      	beq.n	80240be <lfs_fs_traverse_+0x196>
                        return err;
 80240ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80240bc:	e076      	b.n	80241ac <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 80240be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80240c0:	3301      	adds	r3, #1
 80240c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80240c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80240c6:	2b01      	cmp	r3, #1
 80240c8:	dde9      	ble.n	802409e <lfs_fs_traverse_+0x176>
 80240ca:	e000      	b.n	80240ce <lfs_fs_traverse_+0x1a6>
                    continue;
 80240cc:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80240ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80240d2:	3301      	adds	r3, #1
 80240d4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80240d8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80240da:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 80240de:	429a      	cmp	r2, r3
 80240e0:	d392      	bcc.n	8024008 <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 80240e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80240e6:	3318      	adds	r3, #24
 80240e8:	4618      	mov	r0, r3
 80240ea:	f7f9 fd56 	bl	801db9a <lfs_pair_isnull>
 80240ee:	4603      	mov	r3, r0
 80240f0:	f083 0301 	eor.w	r3, r3, #1
 80240f4:	b2db      	uxtb	r3, r3
 80240f6:	2b00      	cmp	r3, #0
 80240f8:	f47f af32 	bne.w	8023f60 <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80240fc:	68fb      	ldr	r3, [r7, #12]
 80240fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024100:	65bb      	str	r3, [r7, #88]	@ 0x58
 8024102:	e04f      	b.n	80241a4 <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 8024104:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8024106:	799b      	ldrb	r3, [r3, #6]
 8024108:	2b01      	cmp	r3, #1
 802410a:	d147      	bne.n	802419c <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 802410c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802410e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8024114:	2b00      	cmp	r3, #0
 8024116:	d01d      	beq.n	8024154 <lfs_fs_traverse_+0x22c>
 8024118:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802411a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802411c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8024120:	2b00      	cmp	r3, #0
 8024122:	d117      	bne.n	8024154 <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8024124:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8024126:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 802412a:	68f8      	ldr	r0, [r7, #12]
 802412c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802412e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8024130:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8024132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024134:	687a      	ldr	r2, [r7, #4]
 8024136:	9202      	str	r2, [sp, #8]
 8024138:	68ba      	ldr	r2, [r7, #8]
 802413a:	9201      	str	r2, [sp, #4]
 802413c:	9300      	str	r3, [sp, #0]
 802413e:	4623      	mov	r3, r4
 8024140:	4602      	mov	r2, r0
 8024142:	68f8      	ldr	r0, [r7, #12]
 8024144:	f7fd fe34 	bl	8021db0 <lfs_ctz_traverse>
 8024148:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 802414a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802414c:	2b00      	cmp	r3, #0
 802414e:	d001      	beq.n	8024154 <lfs_fs_traverse_+0x22c>
                return err;
 8024150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024152:	e02b      	b.n	80241ac <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8024154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8024156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802415c:	2b00      	cmp	r3, #0
 802415e:	d01e      	beq.n	802419e <lfs_fs_traverse_+0x276>
 8024160:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8024162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024164:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8024168:	2b00      	cmp	r3, #0
 802416a:	d118      	bne.n	802419e <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 802416c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802416e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8024172:	68f8      	ldr	r0, [r7, #12]
 8024174:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8024176:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8024178:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802417a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802417c:	687a      	ldr	r2, [r7, #4]
 802417e:	9202      	str	r2, [sp, #8]
 8024180:	68ba      	ldr	r2, [r7, #8]
 8024182:	9201      	str	r2, [sp, #4]
 8024184:	9300      	str	r3, [sp, #0]
 8024186:	4623      	mov	r3, r4
 8024188:	4602      	mov	r2, r0
 802418a:	68f8      	ldr	r0, [r7, #12]
 802418c:	f7fd fe10 	bl	8021db0 <lfs_ctz_traverse>
 8024190:	6538      	str	r0, [r7, #80]	@ 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8024192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8024194:	2b00      	cmp	r3, #0
 8024196:	d002      	beq.n	802419e <lfs_fs_traverse_+0x276>
                return err;
 8024198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802419a:	e007      	b.n	80241ac <lfs_fs_traverse_+0x284>
            continue;
 802419c:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 802419e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80241a0:	681b      	ldr	r3, [r3, #0]
 80241a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80241a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80241a6:	2b00      	cmp	r3, #0
 80241a8:	d1ac      	bne.n	8024104 <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 80241aa:	2300      	movs	r3, #0
}
 80241ac:	4618      	mov	r0, r3
 80241ae:	3774      	adds	r7, #116	@ 0x74
 80241b0:	46bd      	mov	sp, r7
 80241b2:	bd90      	pop	{r4, r7, pc}
 80241b4:	08040f58 	.word	0x08040f58
 80241b8:	08040f14 	.word	0x08040f14
 80241bc:	08040dec 	.word	0x08040dec
 80241c0:	080415c4 	.word	0x080415c4
 80241c4:	700ffc00 	.word	0x700ffc00

080241c8 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80241c8:	b580      	push	{r7, lr}
 80241ca:	b08a      	sub	sp, #40	@ 0x28
 80241cc:	af00      	add	r7, sp, #0
 80241ce:	60f8      	str	r0, [r7, #12]
 80241d0:	60b9      	str	r1, [r7, #8]
 80241d2:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 80241d4:	687b      	ldr	r3, [r7, #4]
 80241d6:	2200      	movs	r2, #0
 80241d8:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 80241da:	687b      	ldr	r3, [r7, #4]
 80241dc:	2201      	movs	r2, #1
 80241de:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80241e0:	4a2d      	ldr	r2, [pc, #180]	@ (8024298 <lfs_fs_pred+0xd0>)
 80241e2:	f107 0314 	add.w	r3, r7, #20
 80241e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80241ea:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80241ee:	2301      	movs	r3, #1
 80241f0:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t tortoise_period = 1;
 80241f2:	2301      	movs	r3, #1
 80241f4:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 80241f6:	e03e      	b.n	8024276 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 80241f8:	687b      	ldr	r3, [r7, #4]
 80241fa:	3318      	adds	r3, #24
 80241fc:	f107 0214 	add.w	r2, r7, #20
 8024200:	4611      	mov	r1, r2
 8024202:	4618      	mov	r0, r3
 8024204:	f7f9 fd0e 	bl	801dc24 <lfs_pair_issync>
 8024208:	4603      	mov	r3, r0
 802420a:	2b00      	cmp	r3, #0
 802420c:	d009      	beq.n	8024222 <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 802420e:	4b23      	ldr	r3, [pc, #140]	@ (802429c <lfs_fs_pred+0xd4>)
 8024210:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 8024214:	4922      	ldr	r1, [pc, #136]	@ (80242a0 <lfs_fs_pred+0xd8>)
 8024216:	4823      	ldr	r0, [pc, #140]	@ (80242a4 <lfs_fs_pred+0xdc>)
 8024218:	f00f fa42 	bl	80336a0 <printf>
            return LFS_ERR_CORRUPT;
 802421c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8024220:	e036      	b.n	8024290 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8024222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024224:	6a3b      	ldr	r3, [r7, #32]
 8024226:	429a      	cmp	r2, r3
 8024228:	d10a      	bne.n	8024240 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 802422a:	687b      	ldr	r3, [r7, #4]
 802422c:	699b      	ldr	r3, [r3, #24]
 802422e:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8024230:	687b      	ldr	r3, [r7, #4]
 8024232:	69db      	ldr	r3, [r3, #28]
 8024234:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8024236:	2300      	movs	r3, #0
 8024238:	627b      	str	r3, [r7, #36]	@ 0x24
            tortoise_period *= 2;
 802423a:	6a3b      	ldr	r3, [r7, #32]
 802423c:	005b      	lsls	r3, r3, #1
 802423e:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8024240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024242:	3301      	adds	r3, #1
 8024244:	627b      	str	r3, [r7, #36]	@ 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8024246:	687b      	ldr	r3, [r7, #4]
 8024248:	3318      	adds	r3, #24
 802424a:	68b9      	ldr	r1, [r7, #8]
 802424c:	4618      	mov	r0, r3
 802424e:	f7f9 fcbf 	bl	801dbd0 <lfs_pair_cmp>
 8024252:	4603      	mov	r3, r0
 8024254:	2b00      	cmp	r3, #0
 8024256:	d101      	bne.n	802425c <lfs_fs_pred+0x94>
            return 0;
 8024258:	2300      	movs	r3, #0
 802425a:	e019      	b.n	8024290 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 802425c:	687b      	ldr	r3, [r7, #4]
 802425e:	3318      	adds	r3, #24
 8024260:	461a      	mov	r2, r3
 8024262:	6879      	ldr	r1, [r7, #4]
 8024264:	68f8      	ldr	r0, [r7, #12]
 8024266:	f7fb fb2b 	bl	801f8c0 <lfs_dir_fetch>
 802426a:	61f8      	str	r0, [r7, #28]
        if (err) {
 802426c:	69fb      	ldr	r3, [r7, #28]
 802426e:	2b00      	cmp	r3, #0
 8024270:	d001      	beq.n	8024276 <lfs_fs_pred+0xae>
            return err;
 8024272:	69fb      	ldr	r3, [r7, #28]
 8024274:	e00c      	b.n	8024290 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	3318      	adds	r3, #24
 802427a:	4618      	mov	r0, r3
 802427c:	f7f9 fc8d 	bl	801db9a <lfs_pair_isnull>
 8024280:	4603      	mov	r3, r0
 8024282:	f083 0301 	eor.w	r3, r3, #1
 8024286:	b2db      	uxtb	r3, r3
 8024288:	2b00      	cmp	r3, #0
 802428a:	d1b5      	bne.n	80241f8 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 802428c:	f06f 0301 	mvn.w	r3, #1
}
 8024290:	4618      	mov	r0, r3
 8024292:	3728      	adds	r7, #40	@ 0x28
 8024294:	46bd      	mov	sp, r7
 8024296:	bd80      	pop	{r7, pc}
 8024298:	08040f58 	.word	0x08040f58
 802429c:	08040f14 	.word	0x08040f14
 80242a0:	08040dec 	.word	0x08040dec
 80242a4:	080415c4 	.word	0x080415c4

080242a8 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80242a8:	b5b0      	push	{r4, r5, r7, lr}
 80242aa:	b08e      	sub	sp, #56	@ 0x38
 80242ac:	af04      	add	r7, sp, #16
 80242ae:	60f8      	str	r0, [r7, #12]
 80242b0:	60b9      	str	r1, [r7, #8]
 80242b2:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80242b4:	68fb      	ldr	r3, [r7, #12]
 80242b6:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 80242b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80242ba:	681b      	ldr	r3, [r3, #0]
 80242bc:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80242be:	687b      	ldr	r3, [r7, #4]
 80242c0:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80242c2:	6a3b      	ldr	r3, [r7, #32]
 80242c4:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80242c8:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80242ca:	6a3b      	ldr	r3, [r7, #32]
 80242cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80242ce:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 80242d0:	69fb      	ldr	r3, [r7, #28]
 80242d2:	681b      	ldr	r3, [r3, #0]
 80242d4:	69fa      	ldr	r2, [r7, #28]
 80242d6:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 80242d8:	2108      	movs	r1, #8
 80242da:	9103      	str	r1, [sp, #12]
 80242dc:	f107 0110 	add.w	r1, r7, #16
 80242e0:	9102      	str	r1, [sp, #8]
 80242e2:	9201      	str	r2, [sp, #4]
 80242e4:	9300      	str	r3, [sp, #0]
 80242e6:	462b      	mov	r3, r5
 80242e8:	4622      	mov	r2, r4
 80242ea:	4601      	mov	r1, r0
 80242ec:	6a38      	ldr	r0, [r7, #32]
 80242ee:	f7f9 f8cd 	bl	801d48c <lfs_bd_read>
 80242f2:	61b8      	str	r0, [r7, #24]
    if (err) {
 80242f4:	69bb      	ldr	r3, [r7, #24]
 80242f6:	2b00      	cmp	r3, #0
 80242f8:	d001      	beq.n	80242fe <lfs_fs_parent_match+0x56>
        return err;
 80242fa:	69bb      	ldr	r3, [r7, #24]
 80242fc:	e012      	b.n	8024324 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 80242fe:	f107 0310 	add.w	r3, r7, #16
 8024302:	4618      	mov	r0, r3
 8024304:	f7f9 fcbb 	bl	801dc7e <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8024308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802430a:	1d1a      	adds	r2, r3, #4
 802430c:	f107 0310 	add.w	r3, r7, #16
 8024310:	4611      	mov	r1, r2
 8024312:	4618      	mov	r0, r3
 8024314:	f7f9 fc5c 	bl	801dbd0 <lfs_pair_cmp>
 8024318:	4603      	mov	r3, r0
 802431a:	2b00      	cmp	r3, #0
 802431c:	bf14      	ite	ne
 802431e:	2301      	movne	r3, #1
 8024320:	2300      	moveq	r3, #0
 8024322:	b2db      	uxtb	r3, r3
}
 8024324:	4618      	mov	r0, r3
 8024326:	3728      	adds	r7, #40	@ 0x28
 8024328:	46bd      	mov	sp, r7
 802432a:	bdb0      	pop	{r4, r5, r7, pc}

0802432c <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 802432c:	b580      	push	{r7, lr}
 802432e:	b090      	sub	sp, #64	@ 0x40
 8024330:	af04      	add	r7, sp, #16
 8024332:	60f8      	str	r0, [r7, #12]
 8024334:	60b9      	str	r1, [r7, #8]
 8024336:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8024338:	687b      	ldr	r3, [r7, #4]
 802433a:	2200      	movs	r2, #0
 802433c:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 802433e:	687b      	ldr	r3, [r7, #4]
 8024340:	2201      	movs	r2, #1
 8024342:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8024344:	4a33      	ldr	r2, [pc, #204]	@ (8024414 <lfs_fs_parent+0xe8>)
 8024346:	f107 031c 	add.w	r3, r7, #28
 802434a:	e892 0003 	ldmia.w	r2, {r0, r1}
 802434e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8024352:	2301      	movs	r3, #1
 8024354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t tortoise_period = 1;
 8024356:	2301      	movs	r3, #1
 8024358:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 802435a:	e04a      	b.n	80243f2 <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 802435c:	687b      	ldr	r3, [r7, #4]
 802435e:	3318      	adds	r3, #24
 8024360:	f107 021c 	add.w	r2, r7, #28
 8024364:	4611      	mov	r1, r2
 8024366:	4618      	mov	r0, r3
 8024368:	f7f9 fc5c 	bl	801dc24 <lfs_pair_issync>
 802436c:	4603      	mov	r3, r0
 802436e:	2b00      	cmp	r3, #0
 8024370:	d009      	beq.n	8024386 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8024372:	4b29      	ldr	r3, [pc, #164]	@ (8024418 <lfs_fs_parent+0xec>)
 8024374:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 8024378:	4928      	ldr	r1, [pc, #160]	@ (802441c <lfs_fs_parent+0xf0>)
 802437a:	4829      	ldr	r0, [pc, #164]	@ (8024420 <lfs_fs_parent+0xf4>)
 802437c:	f00f f990 	bl	80336a0 <printf>
            return LFS_ERR_CORRUPT;
 8024380:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8024384:	e042      	b.n	802440c <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8024386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802438a:	429a      	cmp	r2, r3
 802438c:	d10a      	bne.n	80243a4 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 802438e:	687b      	ldr	r3, [r7, #4]
 8024390:	699b      	ldr	r3, [r3, #24]
 8024392:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8024394:	687b      	ldr	r3, [r7, #4]
 8024396:	69db      	ldr	r3, [r3, #28]
 8024398:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 802439a:	2300      	movs	r3, #0
 802439c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise_period *= 2;
 802439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80243a0:	005b      	lsls	r3, r3, #1
 80243a2:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        tortoise_i += 1;
 80243a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80243a6:	3301      	adds	r3, #1
 80243a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80243aa:	687b      	ldr	r3, [r7, #4]
 80243ac:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80243b0:	68fb      	ldr	r3, [r7, #12]
 80243b2:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 80243b4:	68bb      	ldr	r3, [r7, #8]
 80243b6:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80243b8:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 80243ba:	68bb      	ldr	r3, [r7, #8]
 80243bc:	3304      	adds	r3, #4
 80243be:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80243c0:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80243c2:	f107 0310 	add.w	r3, r7, #16
 80243c6:	9303      	str	r3, [sp, #12]
 80243c8:	4b16      	ldr	r3, [pc, #88]	@ (8024424 <lfs_fs_parent+0xf8>)
 80243ca:	9302      	str	r3, [sp, #8]
 80243cc:	2300      	movs	r3, #0
 80243ce:	9301      	str	r3, [sp, #4]
 80243d0:	4b15      	ldr	r3, [pc, #84]	@ (8024428 <lfs_fs_parent+0xfc>)
 80243d2:	9300      	str	r3, [sp, #0]
 80243d4:	4b15      	ldr	r3, [pc, #84]	@ (802442c <lfs_fs_parent+0x100>)
 80243d6:	6879      	ldr	r1, [r7, #4]
 80243d8:	68f8      	ldr	r0, [r7, #12]
 80243da:	f7fa fea1 	bl	801f120 <lfs_dir_fetchmatch>
 80243de:	6278      	str	r0, [r7, #36]	@ 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 80243e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80243e2:	2b00      	cmp	r3, #0
 80243e4:	d005      	beq.n	80243f2 <lfs_fs_parent+0xc6>
 80243e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80243e8:	f113 0f02 	cmn.w	r3, #2
 80243ec:	d001      	beq.n	80243f2 <lfs_fs_parent+0xc6>
            return tag;
 80243ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80243f0:	e00c      	b.n	802440c <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 80243f2:	687b      	ldr	r3, [r7, #4]
 80243f4:	3318      	adds	r3, #24
 80243f6:	4618      	mov	r0, r3
 80243f8:	f7f9 fbcf 	bl	801db9a <lfs_pair_isnull>
 80243fc:	4603      	mov	r3, r0
 80243fe:	f083 0301 	eor.w	r3, r3, #1
 8024402:	b2db      	uxtb	r3, r3
 8024404:	2b00      	cmp	r3, #0
 8024406:	d1a9      	bne.n	802435c <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8024408:	f06f 0301 	mvn.w	r3, #1
}
 802440c:	4618      	mov	r0, r3
 802440e:	3730      	adds	r7, #48	@ 0x30
 8024410:	46bd      	mov	sp, r7
 8024412:	bd80      	pop	{r7, pc}
 8024414:	08040f58 	.word	0x08040f58
 8024418:	08040f14 	.word	0x08040f14
 802441c:	08040dec 	.word	0x08040dec
 8024420:	080415c4 	.word	0x080415c4
 8024424:	080242a9 	.word	0x080242a9
 8024428:	20000008 	.word	0x20000008
 802442c:	7ff003ff 	.word	0x7ff003ff

08024430 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8024430:	b480      	push	{r7}
 8024432:	b083      	sub	sp, #12
 8024434:	af00      	add	r7, sp, #0
 8024436:	6078      	str	r0, [r7, #4]
 8024438:	460b      	mov	r3, r1
 802443a:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 802443c:	687b      	ldr	r3, [r7, #4]
 802443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024440:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 8024444:	78fb      	ldrb	r3, [r7, #3]
 8024446:	025b      	lsls	r3, r3, #9
 8024448:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 802444a:	687b      	ldr	r3, [r7, #4]
 802444c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 802444e:	bf00      	nop
 8024450:	370c      	adds	r7, #12
 8024452:	46bd      	mov	sp, r7
 8024454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024458:	4770      	bx	lr
	...

0802445c <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 802445c:	b590      	push	{r4, r7, lr}
 802445e:	b083      	sub	sp, #12
 8024460:	af00      	add	r7, sp, #0
 8024462:	6078      	str	r0, [r7, #4]
 8024464:	460b      	mov	r3, r1
 8024466:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8024468:	687b      	ldr	r3, [r7, #4]
 802446a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802446c:	4618      	mov	r0, r3
 802446e:	f7f9 fcb5 	bl	801dddc <lfs_tag_size>
 8024472:	4603      	mov	r3, r0
 8024474:	2b00      	cmp	r3, #0
 8024476:	d10a      	bne.n	802448e <lfs_fs_preporphans+0x32>
 8024478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802447c:	2b00      	cmp	r3, #0
 802447e:	da06      	bge.n	802448e <lfs_fs_preporphans+0x32>
 8024480:	4b1a      	ldr	r3, [pc, #104]	@ (80244ec <lfs_fs_preporphans+0x90>)
 8024482:	4a1b      	ldr	r2, [pc, #108]	@ (80244f0 <lfs_fs_preporphans+0x94>)
 8024484:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 8024488:	481a      	ldr	r0, [pc, #104]	@ (80244f4 <lfs_fs_preporphans+0x98>)
 802448a:	f00f f8d5 	bl	8033638 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 802448e:	687b      	ldr	r3, [r7, #4]
 8024490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024492:	4618      	mov	r0, r3
 8024494:	f7f9 fca2 	bl	801dddc <lfs_tag_size>
 8024498:	4603      	mov	r3, r0
 802449a:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 802449e:	d90a      	bls.n	80244b6 <lfs_fs_preporphans+0x5a>
 80244a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80244a4:	2b00      	cmp	r3, #0
 80244a6:	dd06      	ble.n	80244b6 <lfs_fs_preporphans+0x5a>
 80244a8:	4b13      	ldr	r3, [pc, #76]	@ (80244f8 <lfs_fs_preporphans+0x9c>)
 80244aa:	4a11      	ldr	r2, [pc, #68]	@ (80244f0 <lfs_fs_preporphans+0x94>)
 80244ac:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 80244b0:	4810      	ldr	r0, [pc, #64]	@ (80244f4 <lfs_fs_preporphans+0x98>)
 80244b2:	f00f f8c1 	bl	8033638 <__assert_func>
    lfs->gstate.tag += orphans;
 80244b6:	687b      	ldr	r3, [r7, #4]
 80244b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80244ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80244be:	441a      	add	r2, r3
 80244c0:	687b      	ldr	r3, [r7, #4]
 80244c2:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80244c4:	687b      	ldr	r3, [r7, #4]
 80244c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80244c8:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80244cc:	687b      	ldr	r3, [r7, #4]
 80244ce:	3330      	adds	r3, #48	@ 0x30
 80244d0:	4618      	mov	r0, r3
 80244d2:	f7f9 fce6 	bl	801dea2 <lfs_gstate_hasorphans>
 80244d6:	4603      	mov	r3, r0
 80244d8:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80244da:	ea44 0203 	orr.w	r2, r4, r3
 80244de:	687b      	ldr	r3, [r7, #4]
 80244e0:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 80244e2:	2300      	movs	r3, #0
}
 80244e4:	4618      	mov	r0, r3
 80244e6:	370c      	adds	r7, #12
 80244e8:	46bd      	mov	sp, r7
 80244ea:	bd90      	pop	{r4, r7, pc}
 80244ec:	080417a0 	.word	0x080417a0
 80244f0:	08044908 	.word	0x08044908
 80244f4:	08040dec 	.word	0x08040dec
 80244f8:	080417d8 	.word	0x080417d8

080244fc <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 80244fc:	b480      	push	{r7}
 80244fe:	b085      	sub	sp, #20
 8024500:	af00      	add	r7, sp, #0
 8024502:	60f8      	str	r0, [r7, #12]
 8024504:	460b      	mov	r3, r1
 8024506:	607a      	str	r2, [r7, #4]
 8024508:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802450a:	68fb      	ldr	r3, [r7, #12]
 802450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802450e:	4a17      	ldr	r2, [pc, #92]	@ (802456c <lfs_fs_prepmove+0x70>)
 8024510:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8024512:	897b      	ldrh	r3, [r7, #10]
 8024514:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8024518:	428b      	cmp	r3, r1
 802451a:	d006      	beq.n	802452a <lfs_fs_prepmove+0x2e>
 802451c:	897b      	ldrh	r3, [r7, #10]
 802451e:	029b      	lsls	r3, r3, #10
 8024520:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8024524:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8024528:	e000      	b.n	802452c <lfs_fs_prepmove+0x30>
 802452a:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802452c:	431a      	orrs	r2, r3
 802452e:	68fb      	ldr	r3, [r7, #12]
 8024530:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8024532:	897b      	ldrh	r3, [r7, #10]
 8024534:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8024538:	4293      	cmp	r3, r2
 802453a:	d002      	beq.n	8024542 <lfs_fs_prepmove+0x46>
 802453c:	687b      	ldr	r3, [r7, #4]
 802453e:	681b      	ldr	r3, [r3, #0]
 8024540:	e000      	b.n	8024544 <lfs_fs_prepmove+0x48>
 8024542:	2300      	movs	r3, #0
 8024544:	68fa      	ldr	r2, [r7, #12]
 8024546:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8024548:	897b      	ldrh	r3, [r7, #10]
 802454a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 802454e:	4293      	cmp	r3, r2
 8024550:	d003      	beq.n	802455a <lfs_fs_prepmove+0x5e>
 8024552:	687b      	ldr	r3, [r7, #4]
 8024554:	3304      	adds	r3, #4
 8024556:	681b      	ldr	r3, [r3, #0]
 8024558:	e000      	b.n	802455c <lfs_fs_prepmove+0x60>
 802455a:	2300      	movs	r3, #0
 802455c:	68fa      	ldr	r2, [r7, #12]
 802455e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8024560:	bf00      	nop
 8024562:	3714      	adds	r7, #20
 8024564:	46bd      	mov	sp, r7
 8024566:	f85d 7b04 	ldr.w	r7, [sp], #4
 802456a:	4770      	bx	lr
 802456c:	800003ff 	.word	0x800003ff

08024570 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8024570:	b580      	push	{r7, lr}
 8024572:	b098      	sub	sp, #96	@ 0x60
 8024574:	af02      	add	r7, sp, #8
 8024576:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8024578:	687b      	ldr	r3, [r7, #4]
 802457a:	3330      	adds	r3, #48	@ 0x30
 802457c:	4618      	mov	r0, r3
 802457e:	f7f9 fcc5 	bl	801df0c <lfs_gstate_needssuperblock>
 8024582:	4603      	mov	r3, r0
 8024584:	f083 0301 	eor.w	r3, r3, #1
 8024588:	b2db      	uxtb	r3, r3
 802458a:	2b00      	cmp	r3, #0
 802458c:	d001      	beq.n	8024592 <lfs_fs_desuperblock+0x22>
        return 0;
 802458e:	2300      	movs	r3, #0
 8024590:	e04e      	b.n	8024630 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8024592:	687b      	ldr	r3, [r7, #4]
 8024594:	6a1a      	ldr	r2, [r3, #32]
 8024596:	687b      	ldr	r3, [r7, #4]
 8024598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802459a:	4927      	ldr	r1, [pc, #156]	@ (8024638 <lfs_fs_desuperblock+0xc8>)
 802459c:	9101      	str	r1, [sp, #4]
 802459e:	9300      	str	r3, [sp, #0]
 80245a0:	4613      	mov	r3, r2
 80245a2:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 80245a6:	4925      	ldr	r1, [pc, #148]	@ (802463c <lfs_fs_desuperblock+0xcc>)
 80245a8:	4825      	ldr	r0, [pc, #148]	@ (8024640 <lfs_fs_desuperblock+0xd0>)
 80245aa:	f00f f879 	bl	80336a0 <printf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 80245ae:	687b      	ldr	r3, [r7, #4]
 80245b0:	f103 0220 	add.w	r2, r3, #32
 80245b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80245b8:	4619      	mov	r1, r3
 80245ba:	6878      	ldr	r0, [r7, #4]
 80245bc:	f7fb f980 	bl	801f8c0 <lfs_dir_fetch>
 80245c0:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 80245c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80245c4:	2b00      	cmp	r3, #0
 80245c6:	d001      	beq.n	80245cc <lfs_fs_desuperblock+0x5c>
        return err;
 80245c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80245ca:	e031      	b.n	8024630 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 80245cc:	6878      	ldr	r0, [r7, #4]
 80245ce:	f7f9 fe33 	bl	801e238 <lfs_fs_disk_version>
 80245d2:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 80245d4:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 80245d6:	687b      	ldr	r3, [r7, #4]
 80245d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80245da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 80245dc:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 80245de:	687b      	ldr	r3, [r7, #4]
 80245e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 80245e2:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 80245e4:	687b      	ldr	r3, [r7, #4]
 80245e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 80245e8:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 80245ea:	687b      	ldr	r3, [r7, #4]
 80245ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 80245ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 80245f0:	687b      	ldr	r3, [r7, #4]
 80245f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 80245f4:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 80245f6:	f107 031c 	add.w	r3, r7, #28
 80245fa:	4618      	mov	r0, r3
 80245fc:	f7f9 fd92 	bl	801e124 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8024600:	4b10      	ldr	r3, [pc, #64]	@ (8024644 <lfs_fs_desuperblock+0xd4>)
 8024602:	617b      	str	r3, [r7, #20]
 8024604:	f107 031c 	add.w	r3, r7, #28
 8024608:	61bb      	str	r3, [r7, #24]
 802460a:	f107 0214 	add.w	r2, r7, #20
 802460e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8024612:	2301      	movs	r3, #1
 8024614:	6878      	ldr	r0, [r7, #4]
 8024616:	f7fc ffad 	bl	8021574 <lfs_dir_commit>
 802461a:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 802461c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802461e:	2b00      	cmp	r3, #0
 8024620:	d001      	beq.n	8024626 <lfs_fs_desuperblock+0xb6>
        return err;
 8024622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024624:	e004      	b.n	8024630 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8024626:	2100      	movs	r1, #0
 8024628:	6878      	ldr	r0, [r7, #4]
 802462a:	f7ff ff01 	bl	8024430 <lfs_fs_prepsuperblock>
    return 0;
 802462e:	2300      	movs	r3, #0
}
 8024630:	4618      	mov	r0, r3
 8024632:	3758      	adds	r7, #88	@ 0x58
 8024634:	46bd      	mov	sp, r7
 8024636:	bd80      	pop	{r7, pc}
 8024638:	08040f14 	.word	0x08040f14
 802463c:	08040dec 	.word	0x08040dec
 8024640:	08041810 	.word	0x08041810
 8024644:	20100018 	.word	0x20100018

08024648 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8024648:	b5b0      	push	{r4, r5, r7, lr}
 802464a:	b094      	sub	sp, #80	@ 0x50
 802464c:	af04      	add	r7, sp, #16
 802464e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8024650:	687b      	ldr	r3, [r7, #4]
 8024652:	333c      	adds	r3, #60	@ 0x3c
 8024654:	4618      	mov	r0, r3
 8024656:	f7f9 fc46 	bl	801dee6 <lfs_gstate_hasmove>
 802465a:	4603      	mov	r3, r0
 802465c:	f083 0301 	eor.w	r3, r3, #1
 8024660:	b2db      	uxtb	r3, r3
 8024662:	2b00      	cmp	r3, #0
 8024664:	d001      	beq.n	802466a <lfs_fs_demove+0x22>
        return 0;
 8024666:	2300      	movs	r3, #0
 8024668:	e05b      	b.n	8024722 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 802466a:	687b      	ldr	r3, [r7, #4]
 802466c:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 802466e:	687b      	ldr	r3, [r7, #4]
 8024670:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8024672:	687b      	ldr	r3, [r7, #4]
 8024674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8024676:	4618      	mov	r0, r3
 8024678:	f7f9 fba0 	bl	801ddbc <lfs_tag_id>
 802467c:	4603      	mov	r3, r0
 802467e:	461a      	mov	r2, r3
 8024680:	4b2a      	ldr	r3, [pc, #168]	@ (802472c <lfs_fs_demove+0xe4>)
 8024682:	9302      	str	r3, [sp, #8]
 8024684:	9201      	str	r2, [sp, #4]
 8024686:	9400      	str	r4, [sp, #0]
 8024688:	462b      	mov	r3, r5
 802468a:	f241 3224 	movw	r2, #4900	@ 0x1324
 802468e:	4928      	ldr	r1, [pc, #160]	@ (8024730 <lfs_fs_demove+0xe8>)
 8024690:	4828      	ldr	r0, [pc, #160]	@ (8024734 <lfs_fs_demove+0xec>)
 8024692:	f00f f805 	bl	80336a0 <printf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8024696:	687b      	ldr	r3, [r7, #4]
 8024698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802469a:	4618      	mov	r0, r3
 802469c:	f7f9 fb64 	bl	801dd68 <lfs_tag_type3>
 80246a0:	4603      	mov	r3, r0
 80246a2:	461a      	mov	r2, r3
 80246a4:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80246a8:	429a      	cmp	r2, r3
 80246aa:	d006      	beq.n	80246ba <lfs_fs_demove+0x72>
 80246ac:	4b22      	ldr	r3, [pc, #136]	@ (8024738 <lfs_fs_demove+0xf0>)
 80246ae:	4a23      	ldr	r2, [pc, #140]	@ (802473c <lfs_fs_demove+0xf4>)
 80246b0:	f241 312b 	movw	r1, #4907	@ 0x132b
 80246b4:	481e      	ldr	r0, [pc, #120]	@ (8024730 <lfs_fs_demove+0xe8>)
 80246b6:	f00e ffbf 	bl	8033638 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 80246ba:	687b      	ldr	r3, [r7, #4]
 80246bc:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80246c0:	f107 0318 	add.w	r3, r7, #24
 80246c4:	4619      	mov	r1, r3
 80246c6:	6878      	ldr	r0, [r7, #4]
 80246c8:	f7fb f8fa 	bl	801f8c0 <lfs_dir_fetch>
 80246cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 80246ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80246d0:	2b00      	cmp	r3, #0
 80246d2:	d001      	beq.n	80246d8 <lfs_fs_demove+0x90>
        return err;
 80246d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80246d6:	e024      	b.n	8024722 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 80246d8:	687b      	ldr	r3, [r7, #4]
 80246da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80246dc:	4618      	mov	r0, r3
 80246de:	f7f9 fb6d 	bl	801ddbc <lfs_tag_id>
 80246e2:	4603      	mov	r3, r0
 80246e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80246e6:	2200      	movs	r2, #0
 80246e8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80246ec:	6878      	ldr	r0, [r7, #4]
 80246ee:	f7ff ff05 	bl	80244fc <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 80246f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80246f4:	029b      	lsls	r3, r3, #10
 80246f6:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80246fa:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80246fe:	613b      	str	r3, [r7, #16]
 8024700:	2300      	movs	r3, #0
 8024702:	617b      	str	r3, [r7, #20]
 8024704:	f107 0210 	add.w	r2, r7, #16
 8024708:	f107 0118 	add.w	r1, r7, #24
 802470c:	2301      	movs	r3, #1
 802470e:	6878      	ldr	r0, [r7, #4]
 8024710:	f7fc ff30 	bl	8021574 <lfs_dir_commit>
 8024714:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8024716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024718:	2b00      	cmp	r3, #0
 802471a:	d001      	beq.n	8024720 <lfs_fs_demove+0xd8>
        return err;
 802471c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802471e:	e000      	b.n	8024722 <lfs_fs_demove+0xda>
    }

    return 0;
 8024720:	2300      	movs	r3, #0
}
 8024722:	4618      	mov	r0, r3
 8024724:	3740      	adds	r7, #64	@ 0x40
 8024726:	46bd      	mov	sp, r7
 8024728:	bdb0      	pop	{r4, r5, r7, pc}
 802472a:	bf00      	nop
 802472c:	08040f14 	.word	0x08040f14
 8024730:	08040dec 	.word	0x08040dec
 8024734:	08041844 	.word	0x08041844
 8024738:	08041878 	.word	0x08041878
 802473c:	0804491c 	.word	0x0804491c

08024740 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8024740:	b5b0      	push	{r4, r5, r7, lr}
 8024742:	b0b2      	sub	sp, #200	@ 0xc8
 8024744:	af04      	add	r7, sp, #16
 8024746:	6078      	str	r0, [r7, #4]
 8024748:	460b      	mov	r3, r1
 802474a:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 802474c:	687b      	ldr	r3, [r7, #4]
 802474e:	3330      	adds	r3, #48	@ 0x30
 8024750:	4618      	mov	r0, r3
 8024752:	f7f9 fba6 	bl	801dea2 <lfs_gstate_hasorphans>
 8024756:	4603      	mov	r3, r0
 8024758:	f083 0301 	eor.w	r3, r3, #1
 802475c:	b2db      	uxtb	r3, r3
 802475e:	2b00      	cmp	r3, #0
 8024760:	d001      	beq.n	8024766 <lfs_fs_deorphan+0x26>
        return 0;
 8024762:	2300      	movs	r3, #0
 8024764:	e187      	b.n	8024a76 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8024766:	2300      	movs	r3, #0
 8024768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 802476c:	e170      	b.n	8024a50 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 802476e:	f107 0308 	add.w	r3, r7, #8
 8024772:	2220      	movs	r2, #32
 8024774:	2100      	movs	r1, #0
 8024776:	4618      	mov	r0, r3
 8024778:	f011 fcb2 	bl	80360e0 <memset>
 802477c:	2301      	movs	r3, #1
 802477e:	77fb      	strb	r3, [r7, #31]
 8024780:	2301      	movs	r3, #1
 8024782:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8024784:	2300      	movs	r3, #0
 8024786:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 802478a:	e149      	b.n	8024a20 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 802478c:	f107 0308 	add.w	r3, r7, #8
 8024790:	f103 0218 	add.w	r2, r3, #24
 8024794:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8024798:	4619      	mov	r1, r3
 802479a:	6878      	ldr	r0, [r7, #4]
 802479c:	f7fb f890 	bl	801f8c0 <lfs_dir_fetch>
 80247a0:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 80247a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80247a8:	2b00      	cmp	r3, #0
 80247aa:	d002      	beq.n	80247b2 <lfs_fs_deorphan+0x72>
                return err;
 80247ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80247b0:	e161      	b.n	8024a76 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 80247b2:	7ffb      	ldrb	r3, [r7, #31]
 80247b4:	f083 0301 	eor.w	r3, r3, #1
 80247b8:	b2db      	uxtb	r3, r3
 80247ba:	2b00      	cmp	r3, #0
 80247bc:	f000 8124 	beq.w	8024a08 <lfs_fs_deorphan+0x2c8>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 80247c0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80247c4:	f107 0308 	add.w	r3, r7, #8
 80247c8:	3318      	adds	r3, #24
 80247ca:	4619      	mov	r1, r3
 80247cc:	6878      	ldr	r0, [r7, #4]
 80247ce:	f7ff fdad 	bl	802432c <lfs_fs_parent>
 80247d2:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 80247d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80247da:	2b00      	cmp	r3, #0
 80247dc:	da07      	bge.n	80247ee <lfs_fs_deorphan+0xae>
 80247de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80247e2:	f113 0f02 	cmn.w	r3, #2
 80247e6:	d002      	beq.n	80247ee <lfs_fs_deorphan+0xae>
                    return tag;
 80247e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80247ec:	e143      	b.n	8024a76 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 80247ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80247f2:	2b00      	cmp	r3, #0
 80247f4:	f040 80ac 	bne.w	8024950 <lfs_fs_deorphan+0x210>
 80247f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80247fc:	f113 0f02 	cmn.w	r3, #2
 8024800:	f000 80a6 	beq.w	8024950 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8024804:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8024808:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802480c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8024810:	9300      	str	r3, [sp, #0]
 8024812:	4613      	mov	r3, r2
 8024814:	4a9a      	ldr	r2, [pc, #616]	@ (8024a80 <lfs_fs_deorphan+0x340>)
 8024816:	6878      	ldr	r0, [r7, #4]
 8024818:	f7f9 ff4c 	bl	801e6b4 <lfs_dir_get>
 802481c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8024820:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8024824:	2b00      	cmp	r3, #0
 8024826:	da02      	bge.n	802482e <lfs_fs_deorphan+0xee>
                        return state;
 8024828:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 802482c:	e0eb      	b.n	8024a06 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 802482e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8024832:	4618      	mov	r0, r3
 8024834:	f7f9 fa23 	bl	801dc7e <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8024838:	f107 0308 	add.w	r3, r7, #8
 802483c:	f103 0218 	add.w	r2, r3, #24
 8024840:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8024844:	4611      	mov	r1, r2
 8024846:	4618      	mov	r0, r3
 8024848:	f7f9 f9ec 	bl	801dc24 <lfs_pair_issync>
 802484c:	4603      	mov	r3, r0
 802484e:	f083 0301 	eor.w	r3, r3, #1
 8024852:	b2db      	uxtb	r3, r3
 8024854:	2b00      	cmp	r3, #0
 8024856:	d07b      	beq.n	8024950 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8024858:	6a38      	ldr	r0, [r7, #32]
 802485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802485c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8024860:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8024864:	4c87      	ldr	r4, [pc, #540]	@ (8024a84 <lfs_fs_deorphan+0x344>)
 8024866:	9403      	str	r4, [sp, #12]
 8024868:	9102      	str	r1, [sp, #8]
 802486a:	9201      	str	r2, [sp, #4]
 802486c:	9300      	str	r3, [sp, #0]
 802486e:	4603      	mov	r3, r0
 8024870:	f241 3271 	movw	r2, #4977	@ 0x1371
 8024874:	4984      	ldr	r1, [pc, #528]	@ (8024a88 <lfs_fs_deorphan+0x348>)
 8024876:	4885      	ldr	r0, [pc, #532]	@ (8024a8c <lfs_fs_deorphan+0x34c>)
 8024878:	f00e ff12 	bl	80336a0 <printf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 802487c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8024880:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8024884:	687b      	ldr	r3, [r7, #4]
 8024886:	3330      	adds	r3, #48	@ 0x30
 8024888:	f107 0208 	add.w	r2, r7, #8
 802488c:	4611      	mov	r1, r2
 802488e:	4618      	mov	r0, r3
 8024890:	f7f9 fb50 	bl	801df34 <lfs_gstate_hasmovehere>
 8024894:	4603      	mov	r3, r0
 8024896:	2b00      	cmp	r3, #0
 8024898:	d01c      	beq.n	80248d4 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 802489a:	687b      	ldr	r3, [r7, #4]
 802489c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802489e:	4618      	mov	r0, r3
 80248a0:	f7f9 fa8c 	bl	801ddbc <lfs_tag_id>
 80248a4:	4603      	mov	r3, r0
 80248a6:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 80248aa:	68b9      	ldr	r1, [r7, #8]
 80248ac:	68fb      	ldr	r3, [r7, #12]
 80248ae:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 80248b2:	4874      	ldr	r0, [pc, #464]	@ (8024a84 <lfs_fs_deorphan+0x344>)
 80248b4:	9002      	str	r0, [sp, #8]
 80248b6:	9201      	str	r2, [sp, #4]
 80248b8:	9300      	str	r3, [sp, #0]
 80248ba:	460b      	mov	r3, r1
 80248bc:	f241 327c 	movw	r2, #4988	@ 0x137c
 80248c0:	4971      	ldr	r1, [pc, #452]	@ (8024a88 <lfs_fs_deorphan+0x348>)
 80248c2:	4873      	ldr	r0, [pc, #460]	@ (8024a90 <lfs_fs_deorphan+0x350>)
 80248c4:	f00e feec 	bl	80336a0 <printf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80248c8:	2200      	movs	r2, #0
 80248ca:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80248ce:	6878      	ldr	r0, [r7, #4]
 80248d0:	f7ff fe14 	bl	80244fc <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 80248d4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80248d8:	4618      	mov	r0, r3
 80248da:	f7f9 f9ea 	bl	801dcb2 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80248de:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80248e2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80248e6:	4293      	cmp	r3, r2
 80248e8:	d007      	beq.n	80248fa <lfs_fs_deorphan+0x1ba>
 80248ea:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80248ee:	029b      	lsls	r3, r3, #10
 80248f0:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80248f4:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80248f8:	e000      	b.n	80248fc <lfs_fs_deorphan+0x1bc>
 80248fa:	2300      	movs	r3, #0
 80248fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8024900:	2300      	movs	r3, #0
 8024902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8024906:	4b63      	ldr	r3, [pc, #396]	@ (8024a94 <lfs_fs_deorphan+0x354>)
 8024908:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 802490c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8024910:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8024914:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8024918:	f107 0108 	add.w	r1, r7, #8
 802491c:	2302      	movs	r3, #2
 802491e:	6878      	ldr	r0, [r7, #4]
 8024920:	f7fc fb2e 	bl	8020f80 <lfs_dir_orphaningcommit>
 8024924:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8024928:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 802492c:	4618      	mov	r0, r3
 802492e:	f7f9 f9a6 	bl	801dc7e <lfs_pair_fromle32>
                        if (state < 0) {
 8024932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8024936:	2b00      	cmp	r3, #0
 8024938:	da02      	bge.n	8024940 <lfs_fs_deorphan+0x200>
                            return state;
 802493a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 802493e:	e062      	b.n	8024a06 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8024940:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8024944:	2b03      	cmp	r3, #3
 8024946:	d16b      	bne.n	8024a20 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 8024948:	2301      	movs	r3, #1
 802494a:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 802494e:	e067      	b.n	8024a20 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8024950:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8024954:	2b01      	cmp	r3, #1
 8024956:	d157      	bne.n	8024a08 <lfs_fs_deorphan+0x2c8>
 8024958:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 802495c:	f113 0f02 	cmn.w	r3, #2
 8024960:	d152      	bne.n	8024a08 <lfs_fs_deorphan+0x2c8>
 8024962:	78fb      	ldrb	r3, [r7, #3]
 8024964:	2b00      	cmp	r3, #0
 8024966:	d04f      	beq.n	8024a08 <lfs_fs_deorphan+0x2c8>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8024968:	6a3a      	ldr	r2, [r7, #32]
 802496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802496c:	4945      	ldr	r1, [pc, #276]	@ (8024a84 <lfs_fs_deorphan+0x344>)
 802496e:	9101      	str	r1, [sp, #4]
 8024970:	9300      	str	r3, [sp, #0]
 8024972:	4613      	mov	r3, r2
 8024974:	f241 329c 	movw	r2, #5020	@ 0x139c
 8024978:	4943      	ldr	r1, [pc, #268]	@ (8024a88 <lfs_fs_deorphan+0x348>)
 802497a:	4847      	ldr	r0, [pc, #284]	@ (8024a98 <lfs_fs_deorphan+0x358>)
 802497c:	f00e fe90 	bl	80336a0 <printf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8024980:	687b      	ldr	r3, [r7, #4]
 8024982:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8024986:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802498a:	4619      	mov	r1, r3
 802498c:	6878      	ldr	r0, [r7, #4]
 802498e:	f7fa ffb3 	bl	801f8f8 <lfs_dir_getgstate>
 8024992:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 8024996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802499a:	2b00      	cmp	r3, #0
 802499c:	d002      	beq.n	80249a4 <lfs_fs_deorphan+0x264>
                        return err;
 802499e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80249a2:	e030      	b.n	8024a06 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 80249a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80249a8:	3318      	adds	r3, #24
 80249aa:	4618      	mov	r0, r3
 80249ac:	f7f9 f981 	bl	801dcb2 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80249b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80249b4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80249b8:	051a      	lsls	r2, r3, #20
 80249ba:	4b38      	ldr	r3, [pc, #224]	@ (8024a9c <lfs_fs_deorphan+0x35c>)
 80249bc:	4313      	orrs	r3, r2
 80249be:	673b      	str	r3, [r7, #112]	@ 0x70
 80249c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80249c4:	3318      	adds	r3, #24
 80249c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80249c8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80249cc:	f107 0108 	add.w	r1, r7, #8
 80249d0:	2301      	movs	r3, #1
 80249d2:	6878      	ldr	r0, [r7, #4]
 80249d4:	f7fc fad4 	bl	8020f80 <lfs_dir_orphaningcommit>
 80249d8:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 80249dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80249e0:	3318      	adds	r3, #24
 80249e2:	4618      	mov	r0, r3
 80249e4:	f7f9 f94b 	bl	801dc7e <lfs_pair_fromle32>
                    if (state < 0) {
 80249e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80249ec:	2b00      	cmp	r3, #0
 80249ee:	da02      	bge.n	80249f6 <lfs_fs_deorphan+0x2b6>
                        return state;
 80249f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
                    return tag;
 80249f4:	e03f      	b.n	8024a76 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 80249f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80249fa:	2b03      	cmp	r3, #3
 80249fc:	d10f      	bne.n	8024a1e <lfs_fs_deorphan+0x2de>
                        moreorphans = true;
 80249fe:	2301      	movs	r3, #1
 8024a00:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8024a04:	e00c      	b.n	8024a20 <lfs_fs_deorphan+0x2e0>
                return err;
 8024a06:	e036      	b.n	8024a76 <lfs_fs_deorphan+0x336>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 8024a08:	f107 0408 	add.w	r4, r7, #8
 8024a0c:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8024a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024a14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8024a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8024a1c:	e000      	b.n	8024a20 <lfs_fs_deorphan+0x2e0>
                    continue;
 8024a1e:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 8024a20:	f107 0308 	add.w	r3, r7, #8
 8024a24:	3318      	adds	r3, #24
 8024a26:	4618      	mov	r0, r3
 8024a28:	f7f9 f8b7 	bl	801db9a <lfs_pair_isnull>
 8024a2c:	4603      	mov	r3, r0
 8024a2e:	f083 0301 	eor.w	r3, r3, #1
 8024a32:	b2db      	uxtb	r3, r3
 8024a34:	2b00      	cmp	r3, #0
 8024a36:	f47f aea9 	bne.w	802478c <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8024a3a:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8024a3e:	2b00      	cmp	r3, #0
 8024a40:	d001      	beq.n	8024a46 <lfs_fs_deorphan+0x306>
 8024a42:	2300      	movs	r3, #0
 8024a44:	e002      	b.n	8024a4c <lfs_fs_deorphan+0x30c>
 8024a46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8024a4a:	3301      	adds	r3, #1
 8024a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8024a50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8024a54:	2b01      	cmp	r3, #1
 8024a56:	f77f ae8a 	ble.w	802476e <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8024a5a:	687b      	ldr	r3, [r7, #4]
 8024a5c:	3330      	adds	r3, #48	@ 0x30
 8024a5e:	4618      	mov	r0, r3
 8024a60:	f7f9 fa32 	bl	801dec8 <lfs_gstate_getorphans>
 8024a64:	4603      	mov	r3, r0
 8024a66:	425b      	negs	r3, r3
 8024a68:	b2db      	uxtb	r3, r3
 8024a6a:	b25b      	sxtb	r3, r3
 8024a6c:	4619      	mov	r1, r3
 8024a6e:	6878      	ldr	r0, [r7, #4]
 8024a70:	f7ff fcf4 	bl	802445c <lfs_fs_preporphans>
 8024a74:	4603      	mov	r3, r0
}
 8024a76:	4618      	mov	r0, r3
 8024a78:	37b8      	adds	r7, #184	@ 0xb8
 8024a7a:	46bd      	mov	sp, r7
 8024a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8024a7e:	bf00      	nop
 8024a80:	7ffffc00 	.word	0x7ffffc00
 8024a84:	08040f14 	.word	0x08040f14
 8024a88:	08040dec 	.word	0x08040dec
 8024a8c:	080418ac 	.word	0x080418ac
 8024a90:	080418f0 	.word	0x080418f0
 8024a94:	600ffc08 	.word	0x600ffc08
 8024a98:	08041938 	.word	0x08041938
 8024a9c:	000ffc08 	.word	0x000ffc08

08024aa0 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8024aa0:	b580      	push	{r7, lr}
 8024aa2:	b084      	sub	sp, #16
 8024aa4:	af00      	add	r7, sp, #0
 8024aa6:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8024aa8:	6878      	ldr	r0, [r7, #4]
 8024aaa:	f7ff fd61 	bl	8024570 <lfs_fs_desuperblock>
 8024aae:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024ab0:	68fb      	ldr	r3, [r7, #12]
 8024ab2:	2b00      	cmp	r3, #0
 8024ab4:	d001      	beq.n	8024aba <lfs_fs_forceconsistency+0x1a>
        return err;
 8024ab6:	68fb      	ldr	r3, [r7, #12]
 8024ab8:	e013      	b.n	8024ae2 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8024aba:	6878      	ldr	r0, [r7, #4]
 8024abc:	f7ff fdc4 	bl	8024648 <lfs_fs_demove>
 8024ac0:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024ac2:	68fb      	ldr	r3, [r7, #12]
 8024ac4:	2b00      	cmp	r3, #0
 8024ac6:	d001      	beq.n	8024acc <lfs_fs_forceconsistency+0x2c>
        return err;
 8024ac8:	68fb      	ldr	r3, [r7, #12]
 8024aca:	e00a      	b.n	8024ae2 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8024acc:	2101      	movs	r1, #1
 8024ace:	6878      	ldr	r0, [r7, #4]
 8024ad0:	f7ff fe36 	bl	8024740 <lfs_fs_deorphan>
 8024ad4:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024ad6:	68fb      	ldr	r3, [r7, #12]
 8024ad8:	2b00      	cmp	r3, #0
 8024ada:	d001      	beq.n	8024ae0 <lfs_fs_forceconsistency+0x40>
        return err;
 8024adc:	68fb      	ldr	r3, [r7, #12]
 8024ade:	e000      	b.n	8024ae2 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8024ae0:	2300      	movs	r3, #0
}
 8024ae2:	4618      	mov	r0, r3
 8024ae4:	3710      	adds	r7, #16
 8024ae6:	46bd      	mov	sp, r7
 8024ae8:	bd80      	pop	{r7, pc}

08024aea <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8024aea:	b480      	push	{r7}
 8024aec:	b085      	sub	sp, #20
 8024aee:	af00      	add	r7, sp, #0
 8024af0:	6078      	str	r0, [r7, #4]
 8024af2:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8024af4:	687b      	ldr	r3, [r7, #4]
 8024af6:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8024af8:	68fb      	ldr	r3, [r7, #12]
 8024afa:	681b      	ldr	r3, [r3, #0]
 8024afc:	1c5a      	adds	r2, r3, #1
 8024afe:	68fb      	ldr	r3, [r7, #12]
 8024b00:	601a      	str	r2, [r3, #0]
    return 0;
 8024b02:	2300      	movs	r3, #0
}
 8024b04:	4618      	mov	r0, r3
 8024b06:	3714      	adds	r7, #20
 8024b08:	46bd      	mov	sp, r7
 8024b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b0e:	4770      	bx	lr

08024b10 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8024b10:	b580      	push	{r7, lr}
 8024b12:	b084      	sub	sp, #16
 8024b14:	af00      	add	r7, sp, #0
 8024b16:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8024b18:	2300      	movs	r3, #0
 8024b1a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8024b1c:	f107 0208 	add.w	r2, r7, #8
 8024b20:	2300      	movs	r3, #0
 8024b22:	4907      	ldr	r1, [pc, #28]	@ (8024b40 <lfs_fs_size_+0x30>)
 8024b24:	6878      	ldr	r0, [r7, #4]
 8024b26:	f7ff f9ff 	bl	8023f28 <lfs_fs_traverse_>
 8024b2a:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024b2c:	68fb      	ldr	r3, [r7, #12]
 8024b2e:	2b00      	cmp	r3, #0
 8024b30:	d001      	beq.n	8024b36 <lfs_fs_size_+0x26>
        return err;
 8024b32:	68fb      	ldr	r3, [r7, #12]
 8024b34:	e000      	b.n	8024b38 <lfs_fs_size_+0x28>
    }

    return size;
 8024b36:	68bb      	ldr	r3, [r7, #8]
}
 8024b38:	4618      	mov	r0, r3
 8024b3a:	3710      	adds	r7, #16
 8024b3c:	46bd      	mov	sp, r7
 8024b3e:	bd80      	pop	{r7, pc}
 8024b40:	08024aeb 	.word	0x08024aeb

08024b44 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8024b44:	b580      	push	{r7, lr}
 8024b46:	b084      	sub	sp, #16
 8024b48:	af00      	add	r7, sp, #0
 8024b4a:	6078      	str	r0, [r7, #4]
 8024b4c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8024b4e:	683b      	ldr	r3, [r7, #0]
 8024b50:	695b      	ldr	r3, [r3, #20]
 8024b52:	6838      	ldr	r0, [r7, #0]
 8024b54:	4798      	blx	r3
 8024b56:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024b58:	68fb      	ldr	r3, [r7, #12]
 8024b5a:	2b00      	cmp	r3, #0
 8024b5c:	d001      	beq.n	8024b62 <lfs_format+0x1e>
        return err;
 8024b5e:	68fb      	ldr	r3, [r7, #12]
 8024b60:	e009      	b.n	8024b76 <lfs_format+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 8024b62:	6839      	ldr	r1, [r7, #0]
 8024b64:	6878      	ldr	r0, [r7, #4]
 8024b66:	f7fe ff01 	bl	802396c <lfs_format_>
 8024b6a:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
 8024b6c:	683b      	ldr	r3, [r7, #0]
 8024b6e:	699b      	ldr	r3, [r3, #24]
 8024b70:	6838      	ldr	r0, [r7, #0]
 8024b72:	4798      	blx	r3
    return err;
 8024b74:	68fb      	ldr	r3, [r7, #12]
}
 8024b76:	4618      	mov	r0, r3
 8024b78:	3710      	adds	r7, #16
 8024b7a:	46bd      	mov	sp, r7
 8024b7c:	bd80      	pop	{r7, pc}

08024b7e <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8024b7e:	b580      	push	{r7, lr}
 8024b80:	b084      	sub	sp, #16
 8024b82:	af00      	add	r7, sp, #0
 8024b84:	6078      	str	r0, [r7, #4]
 8024b86:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8024b88:	683b      	ldr	r3, [r7, #0]
 8024b8a:	695b      	ldr	r3, [r3, #20]
 8024b8c:	6838      	ldr	r0, [r7, #0]
 8024b8e:	4798      	blx	r3
 8024b90:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024b92:	68fb      	ldr	r3, [r7, #12]
 8024b94:	2b00      	cmp	r3, #0
 8024b96:	d001      	beq.n	8024b9c <lfs_mount+0x1e>
        return err;
 8024b98:	68fb      	ldr	r3, [r7, #12]
 8024b9a:	e009      	b.n	8024bb0 <lfs_mount+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 8024b9c:	6839      	ldr	r1, [r7, #0]
 8024b9e:	6878      	ldr	r0, [r7, #4]
 8024ba0:	f7fe ff96 	bl	8023ad0 <lfs_mount_>
 8024ba4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
 8024ba6:	683b      	ldr	r3, [r7, #0]
 8024ba8:	699b      	ldr	r3, [r3, #24]
 8024baa:	6838      	ldr	r0, [r7, #0]
 8024bac:	4798      	blx	r3
    return err;
 8024bae:	68fb      	ldr	r3, [r7, #12]
}
 8024bb0:	4618      	mov	r0, r3
 8024bb2:	3710      	adds	r7, #16
 8024bb4:	46bd      	mov	sp, r7
 8024bb6:	bd80      	pop	{r7, pc}

08024bb8 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8024bb8:	b580      	push	{r7, lr}
 8024bba:	b084      	sub	sp, #16
 8024bbc:	af00      	add	r7, sp, #0
 8024bbe:	6078      	str	r0, [r7, #4]
 8024bc0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024bc2:	687b      	ldr	r3, [r7, #4]
 8024bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024bc6:	695b      	ldr	r3, [r3, #20]
 8024bc8:	687a      	ldr	r2, [r7, #4]
 8024bca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024bcc:	4610      	mov	r0, r2
 8024bce:	4798      	blx	r3
 8024bd0:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024bd2:	68fb      	ldr	r3, [r7, #12]
 8024bd4:	2b00      	cmp	r3, #0
 8024bd6:	d001      	beq.n	8024bdc <lfs_remove+0x24>
        return err;
 8024bd8:	68fb      	ldr	r3, [r7, #12]
 8024bda:	e00c      	b.n	8024bf6 <lfs_remove+0x3e>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_remove_(lfs, path);
 8024bdc:	6839      	ldr	r1, [r7, #0]
 8024bde:	6878      	ldr	r0, [r7, #4]
 8024be0:	f7fe f94a 	bl	8022e78 <lfs_remove_>
 8024be4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8024be6:	687b      	ldr	r3, [r7, #4]
 8024be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024bea:	699b      	ldr	r3, [r3, #24]
 8024bec:	687a      	ldr	r2, [r7, #4]
 8024bee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024bf0:	4610      	mov	r0, r2
 8024bf2:	4798      	blx	r3
    return err;
 8024bf4:	68fb      	ldr	r3, [r7, #12]
}
 8024bf6:	4618      	mov	r0, r3
 8024bf8:	3710      	adds	r7, #16
 8024bfa:	46bd      	mov	sp, r7
 8024bfc:	bd80      	pop	{r7, pc}

08024bfe <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 8024bfe:	b580      	push	{r7, lr}
 8024c00:	b086      	sub	sp, #24
 8024c02:	af00      	add	r7, sp, #0
 8024c04:	60f8      	str	r0, [r7, #12]
 8024c06:	60b9      	str	r1, [r7, #8]
 8024c08:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8024c0a:	68fb      	ldr	r3, [r7, #12]
 8024c0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024c0e:	695b      	ldr	r3, [r3, #20]
 8024c10:	68fa      	ldr	r2, [r7, #12]
 8024c12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024c14:	4610      	mov	r0, r2
 8024c16:	4798      	blx	r3
 8024c18:	6178      	str	r0, [r7, #20]
    if (err) {
 8024c1a:	697b      	ldr	r3, [r7, #20]
 8024c1c:	2b00      	cmp	r3, #0
 8024c1e:	d001      	beq.n	8024c24 <lfs_rename+0x26>
        return err;
 8024c20:	697b      	ldr	r3, [r7, #20]
 8024c22:	e00d      	b.n	8024c40 <lfs_rename+0x42>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rename_(lfs, oldpath, newpath);
 8024c24:	687a      	ldr	r2, [r7, #4]
 8024c26:	68b9      	ldr	r1, [r7, #8]
 8024c28:	68f8      	ldr	r0, [r7, #12]
 8024c2a:	f7fe f9f7 	bl	802301c <lfs_rename_>
 8024c2e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8024c30:	68fb      	ldr	r3, [r7, #12]
 8024c32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024c34:	699b      	ldr	r3, [r3, #24]
 8024c36:	68fa      	ldr	r2, [r7, #12]
 8024c38:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024c3a:	4610      	mov	r0, r2
 8024c3c:	4798      	blx	r3
    return err;
 8024c3e:	697b      	ldr	r3, [r7, #20]
}
 8024c40:	4618      	mov	r0, r3
 8024c42:	3718      	adds	r7, #24
 8024c44:	46bd      	mov	sp, r7
 8024c46:	bd80      	pop	{r7, pc}

08024c48 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8024c48:	b580      	push	{r7, lr}
 8024c4a:	b086      	sub	sp, #24
 8024c4c:	af00      	add	r7, sp, #0
 8024c4e:	60f8      	str	r0, [r7, #12]
 8024c50:	60b9      	str	r1, [r7, #8]
 8024c52:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8024c54:	68fb      	ldr	r3, [r7, #12]
 8024c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024c58:	695b      	ldr	r3, [r3, #20]
 8024c5a:	68fa      	ldr	r2, [r7, #12]
 8024c5c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024c5e:	4610      	mov	r0, r2
 8024c60:	4798      	blx	r3
 8024c62:	6178      	str	r0, [r7, #20]
    if (err) {
 8024c64:	697b      	ldr	r3, [r7, #20]
 8024c66:	2b00      	cmp	r3, #0
 8024c68:	d001      	beq.n	8024c6e <lfs_stat+0x26>
        return err;
 8024c6a:	697b      	ldr	r3, [r7, #20]
 8024c6c:	e00d      	b.n	8024c8a <lfs_stat+0x42>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_stat_(lfs, path, info);
 8024c6e:	687a      	ldr	r2, [r7, #4]
 8024c70:	68b9      	ldr	r1, [r7, #8]
 8024c72:	68f8      	ldr	r0, [r7, #12]
 8024c74:	f7fe f8db 	bl	8022e2e <lfs_stat_>
 8024c78:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8024c7a:	68fb      	ldr	r3, [r7, #12]
 8024c7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024c7e:	699b      	ldr	r3, [r3, #24]
 8024c80:	68fa      	ldr	r2, [r7, #12]
 8024c82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024c84:	4610      	mov	r0, r2
 8024c86:	4798      	blx	r3
    return err;
 8024c88:	697b      	ldr	r3, [r7, #20]
}
 8024c8a:	4618      	mov	r0, r3
 8024c8c:	3718      	adds	r7, #24
 8024c8e:	46bd      	mov	sp, r7
 8024c90:	bd80      	pop	{r7, pc}
	...

08024c94 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8024c94:	b580      	push	{r7, lr}
 8024c96:	b086      	sub	sp, #24
 8024c98:	af00      	add	r7, sp, #0
 8024c9a:	60f8      	str	r0, [r7, #12]
 8024c9c:	60b9      	str	r1, [r7, #8]
 8024c9e:	607a      	str	r2, [r7, #4]
 8024ca0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024ca2:	68fb      	ldr	r3, [r7, #12]
 8024ca4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024ca6:	695b      	ldr	r3, [r3, #20]
 8024ca8:	68fa      	ldr	r2, [r7, #12]
 8024caa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024cac:	4610      	mov	r0, r2
 8024cae:	4798      	blx	r3
 8024cb0:	6178      	str	r0, [r7, #20]
    if (err) {
 8024cb2:	697b      	ldr	r3, [r7, #20]
 8024cb4:	2b00      	cmp	r3, #0
 8024cb6:	d001      	beq.n	8024cbc <lfs_file_open+0x28>
        return err;
 8024cb8:	697b      	ldr	r3, [r7, #20]
 8024cba:	e021      	b.n	8024d00 <lfs_file_open+0x6c>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8024cbc:	68fb      	ldr	r3, [r7, #12]
 8024cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024cc0:	68b9      	ldr	r1, [r7, #8]
 8024cc2:	4618      	mov	r0, r3
 8024cc4:	f7f9 fa66 	bl	801e194 <lfs_mlist_isopen>
 8024cc8:	4603      	mov	r3, r0
 8024cca:	f083 0301 	eor.w	r3, r3, #1
 8024cce:	b2db      	uxtb	r3, r3
 8024cd0:	2b00      	cmp	r3, #0
 8024cd2:	d106      	bne.n	8024ce2 <lfs_file_open+0x4e>
 8024cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8024d08 <lfs_file_open+0x74>)
 8024cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8024d0c <lfs_file_open+0x78>)
 8024cd8:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 8024cdc:	480c      	ldr	r0, [pc, #48]	@ (8024d10 <lfs_file_open+0x7c>)
 8024cde:	f00e fcab 	bl	8033638 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 8024ce2:	683b      	ldr	r3, [r7, #0]
 8024ce4:	687a      	ldr	r2, [r7, #4]
 8024ce6:	68b9      	ldr	r1, [r7, #8]
 8024ce8:	68f8      	ldr	r0, [r7, #12]
 8024cea:	f7fd faad 	bl	8022248 <lfs_file_open_>
 8024cee:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8024cf0:	68fb      	ldr	r3, [r7, #12]
 8024cf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024cf4:	699b      	ldr	r3, [r3, #24]
 8024cf6:	68fa      	ldr	r2, [r7, #12]
 8024cf8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024cfa:	4610      	mov	r0, r2
 8024cfc:	4798      	blx	r3
    return err;
 8024cfe:	697b      	ldr	r3, [r7, #20]
}
 8024d00:	4618      	mov	r0, r3
 8024d02:	3718      	adds	r7, #24
 8024d04:	46bd      	mov	sp, r7
 8024d06:	bd80      	pop	{r7, pc}
 8024d08:	08041988 	.word	0x08041988
 8024d0c:	0804492c 	.word	0x0804492c
 8024d10:	08040dec 	.word	0x08040dec

08024d14 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8024d14:	b580      	push	{r7, lr}
 8024d16:	b084      	sub	sp, #16
 8024d18:	af00      	add	r7, sp, #0
 8024d1a:	6078      	str	r0, [r7, #4]
 8024d1c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024d1e:	687b      	ldr	r3, [r7, #4]
 8024d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024d22:	695b      	ldr	r3, [r3, #20]
 8024d24:	687a      	ldr	r2, [r7, #4]
 8024d26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024d28:	4610      	mov	r0, r2
 8024d2a:	4798      	blx	r3
 8024d2c:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024d2e:	68fb      	ldr	r3, [r7, #12]
 8024d30:	2b00      	cmp	r3, #0
 8024d32:	d001      	beq.n	8024d38 <lfs_file_close+0x24>
        return err;
 8024d34:	68fb      	ldr	r3, [r7, #12]
 8024d36:	e01c      	b.n	8024d72 <lfs_file_close+0x5e>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8024d38:	687b      	ldr	r3, [r7, #4]
 8024d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024d3c:	6839      	ldr	r1, [r7, #0]
 8024d3e:	4618      	mov	r0, r3
 8024d40:	f7f9 fa28 	bl	801e194 <lfs_mlist_isopen>
 8024d44:	4603      	mov	r3, r0
 8024d46:	2b00      	cmp	r3, #0
 8024d48:	d106      	bne.n	8024d58 <lfs_file_close+0x44>
 8024d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8024d7c <lfs_file_close+0x68>)
 8024d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8024d80 <lfs_file_close+0x6c>)
 8024d4e:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 8024d52:	480c      	ldr	r0, [pc, #48]	@ (8024d84 <lfs_file_close+0x70>)
 8024d54:	f00e fc70 	bl	8033638 <__assert_func>

    err = lfs_file_close_(lfs, file);
 8024d58:	6839      	ldr	r1, [r7, #0]
 8024d5a:	6878      	ldr	r0, [r7, #4]
 8024d5c:	f7fd fa8c 	bl	8022278 <lfs_file_close_>
 8024d60:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8024d62:	687b      	ldr	r3, [r7, #4]
 8024d64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024d66:	699b      	ldr	r3, [r3, #24]
 8024d68:	687a      	ldr	r2, [r7, #4]
 8024d6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024d6c:	4610      	mov	r0, r2
 8024d6e:	4798      	blx	r3
    return err;
 8024d70:	68fb      	ldr	r3, [r7, #12]
}
 8024d72:	4618      	mov	r0, r3
 8024d74:	3710      	adds	r7, #16
 8024d76:	46bd      	mov	sp, r7
 8024d78:	bd80      	pop	{r7, pc}
 8024d7a:	bf00      	nop
 8024d7c:	080419c0 	.word	0x080419c0
 8024d80:	0804493c 	.word	0x0804493c
 8024d84:	08040dec 	.word	0x08040dec

08024d88 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8024d88:	b580      	push	{r7, lr}
 8024d8a:	b086      	sub	sp, #24
 8024d8c:	af00      	add	r7, sp, #0
 8024d8e:	60f8      	str	r0, [r7, #12]
 8024d90:	60b9      	str	r1, [r7, #8]
 8024d92:	607a      	str	r2, [r7, #4]
 8024d94:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024d96:	68fb      	ldr	r3, [r7, #12]
 8024d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024d9a:	695b      	ldr	r3, [r3, #20]
 8024d9c:	68fa      	ldr	r2, [r7, #12]
 8024d9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024da0:	4610      	mov	r0, r2
 8024da2:	4798      	blx	r3
 8024da4:	6178      	str	r0, [r7, #20]
    if (err) {
 8024da6:	697b      	ldr	r3, [r7, #20]
 8024da8:	2b00      	cmp	r3, #0
 8024daa:	d001      	beq.n	8024db0 <lfs_file_read+0x28>
        return err;
 8024dac:	697b      	ldr	r3, [r7, #20]
 8024dae:	e01e      	b.n	8024dee <lfs_file_read+0x66>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8024db0:	68fb      	ldr	r3, [r7, #12]
 8024db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024db4:	68b9      	ldr	r1, [r7, #8]
 8024db6:	4618      	mov	r0, r3
 8024db8:	f7f9 f9ec 	bl	801e194 <lfs_mlist_isopen>
 8024dbc:	4603      	mov	r3, r0
 8024dbe:	2b00      	cmp	r3, #0
 8024dc0:	d106      	bne.n	8024dd0 <lfs_file_read+0x48>
 8024dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8024df8 <lfs_file_read+0x70>)
 8024dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8024dfc <lfs_file_read+0x74>)
 8024dc6:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 8024dca:	480d      	ldr	r0, [pc, #52]	@ (8024e00 <lfs_file_read+0x78>)
 8024dcc:	f00e fc34 	bl	8033638 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8024dd0:	683b      	ldr	r3, [r7, #0]
 8024dd2:	687a      	ldr	r2, [r7, #4]
 8024dd4:	68b9      	ldr	r1, [r7, #8]
 8024dd6:	68f8      	ldr	r0, [r7, #12]
 8024dd8:	f7fd fdae 	bl	8022938 <lfs_file_read_>
 8024ddc:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8024dde:	68fb      	ldr	r3, [r7, #12]
 8024de0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024de2:	699b      	ldr	r3, [r3, #24]
 8024de4:	68fa      	ldr	r2, [r7, #12]
 8024de6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024de8:	4610      	mov	r0, r2
 8024dea:	4798      	blx	r3
    return res;
 8024dec:	693b      	ldr	r3, [r7, #16]
}
 8024dee:	4618      	mov	r0, r3
 8024df0:	3718      	adds	r7, #24
 8024df2:	46bd      	mov	sp, r7
 8024df4:	bd80      	pop	{r7, pc}
 8024df6:	bf00      	nop
 8024df8:	080419c0 	.word	0x080419c0
 8024dfc:	0804494c 	.word	0x0804494c
 8024e00:	08040dec 	.word	0x08040dec

08024e04 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8024e04:	b580      	push	{r7, lr}
 8024e06:	b086      	sub	sp, #24
 8024e08:	af00      	add	r7, sp, #0
 8024e0a:	60f8      	str	r0, [r7, #12]
 8024e0c:	60b9      	str	r1, [r7, #8]
 8024e0e:	607a      	str	r2, [r7, #4]
 8024e10:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024e12:	68fb      	ldr	r3, [r7, #12]
 8024e14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024e16:	695b      	ldr	r3, [r3, #20]
 8024e18:	68fa      	ldr	r2, [r7, #12]
 8024e1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024e1c:	4610      	mov	r0, r2
 8024e1e:	4798      	blx	r3
 8024e20:	6178      	str	r0, [r7, #20]
    if (err) {
 8024e22:	697b      	ldr	r3, [r7, #20]
 8024e24:	2b00      	cmp	r3, #0
 8024e26:	d001      	beq.n	8024e2c <lfs_file_write+0x28>
        return err;
 8024e28:	697b      	ldr	r3, [r7, #20]
 8024e2a:	e01e      	b.n	8024e6a <lfs_file_write+0x66>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8024e2c:	68fb      	ldr	r3, [r7, #12]
 8024e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024e30:	68b9      	ldr	r1, [r7, #8]
 8024e32:	4618      	mov	r0, r3
 8024e34:	f7f9 f9ae 	bl	801e194 <lfs_mlist_isopen>
 8024e38:	4603      	mov	r3, r0
 8024e3a:	2b00      	cmp	r3, #0
 8024e3c:	d106      	bne.n	8024e4c <lfs_file_write+0x48>
 8024e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8024e74 <lfs_file_write+0x70>)
 8024e40:	4a0d      	ldr	r2, [pc, #52]	@ (8024e78 <lfs_file_write+0x74>)
 8024e42:	f641 0105 	movw	r1, #6149	@ 0x1805
 8024e46:	480d      	ldr	r0, [pc, #52]	@ (8024e7c <lfs_file_write+0x78>)
 8024e48:	f00e fbf6 	bl	8033638 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8024e4c:	683b      	ldr	r3, [r7, #0]
 8024e4e:	687a      	ldr	r2, [r7, #4]
 8024e50:	68b9      	ldr	r1, [r7, #8]
 8024e52:	68f8      	ldr	r0, [r7, #12]
 8024e54:	f7fd feb6 	bl	8022bc4 <lfs_file_write_>
 8024e58:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8024e5a:	68fb      	ldr	r3, [r7, #12]
 8024e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024e5e:	699b      	ldr	r3, [r3, #24]
 8024e60:	68fa      	ldr	r2, [r7, #12]
 8024e62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024e64:	4610      	mov	r0, r2
 8024e66:	4798      	blx	r3
    return res;
 8024e68:	693b      	ldr	r3, [r7, #16]
}
 8024e6a:	4618      	mov	r0, r3
 8024e6c:	3718      	adds	r7, #24
 8024e6e:	46bd      	mov	sp, r7
 8024e70:	bd80      	pop	{r7, pc}
 8024e72:	bf00      	nop
 8024e74:	080419c0 	.word	0x080419c0
 8024e78:	0804495c 	.word	0x0804495c
 8024e7c:	08040dec 	.word	0x08040dec

08024e80 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8024e80:	b580      	push	{r7, lr}
 8024e82:	b086      	sub	sp, #24
 8024e84:	af00      	add	r7, sp, #0
 8024e86:	60f8      	str	r0, [r7, #12]
 8024e88:	60b9      	str	r1, [r7, #8]
 8024e8a:	607a      	str	r2, [r7, #4]
 8024e8c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024e8e:	68fb      	ldr	r3, [r7, #12]
 8024e90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024e92:	695b      	ldr	r3, [r3, #20]
 8024e94:	68fa      	ldr	r2, [r7, #12]
 8024e96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024e98:	4610      	mov	r0, r2
 8024e9a:	4798      	blx	r3
 8024e9c:	6178      	str	r0, [r7, #20]
    if (err) {
 8024e9e:	697b      	ldr	r3, [r7, #20]
 8024ea0:	2b00      	cmp	r3, #0
 8024ea2:	d001      	beq.n	8024ea8 <lfs_file_seek+0x28>
        return err;
 8024ea4:	697b      	ldr	r3, [r7, #20]
 8024ea6:	e01e      	b.n	8024ee6 <lfs_file_seek+0x66>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8024ea8:	68fb      	ldr	r3, [r7, #12]
 8024eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024eac:	68b9      	ldr	r1, [r7, #8]
 8024eae:	4618      	mov	r0, r3
 8024eb0:	f7f9 f970 	bl	801e194 <lfs_mlist_isopen>
 8024eb4:	4603      	mov	r3, r0
 8024eb6:	2b00      	cmp	r3, #0
 8024eb8:	d106      	bne.n	8024ec8 <lfs_file_seek+0x48>
 8024eba:	4b0d      	ldr	r3, [pc, #52]	@ (8024ef0 <lfs_file_seek+0x70>)
 8024ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8024ef4 <lfs_file_seek+0x74>)
 8024ebe:	f641 0117 	movw	r1, #6167	@ 0x1817
 8024ec2:	480d      	ldr	r0, [pc, #52]	@ (8024ef8 <lfs_file_seek+0x78>)
 8024ec4:	f00e fbb8 	bl	8033638 <__assert_func>

    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 8024ec8:	683b      	ldr	r3, [r7, #0]
 8024eca:	687a      	ldr	r2, [r7, #4]
 8024ecc:	68b9      	ldr	r1, [r7, #8]
 8024ece:	68f8      	ldr	r0, [r7, #12]
 8024ed0:	f7fd fefc 	bl	8022ccc <lfs_file_seek_>
 8024ed4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8024ed6:	68fb      	ldr	r3, [r7, #12]
 8024ed8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024eda:	699b      	ldr	r3, [r3, #24]
 8024edc:	68fa      	ldr	r2, [r7, #12]
 8024ede:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024ee0:	4610      	mov	r0, r2
 8024ee2:	4798      	blx	r3
    return res;
 8024ee4:	693b      	ldr	r3, [r7, #16]
}
 8024ee6:	4618      	mov	r0, r3
 8024ee8:	3718      	adds	r7, #24
 8024eea:	46bd      	mov	sp, r7
 8024eec:	bd80      	pop	{r7, pc}
 8024eee:	bf00      	nop
 8024ef0:	080419c0 	.word	0x080419c0
 8024ef4:	0804496c 	.word	0x0804496c
 8024ef8:	08040dec 	.word	0x08040dec

08024efc <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 8024efc:	b580      	push	{r7, lr}
 8024efe:	b084      	sub	sp, #16
 8024f00:	af00      	add	r7, sp, #0
 8024f02:	6078      	str	r0, [r7, #4]
 8024f04:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024f06:	687b      	ldr	r3, [r7, #4]
 8024f08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024f0a:	695b      	ldr	r3, [r3, #20]
 8024f0c:	687a      	ldr	r2, [r7, #4]
 8024f0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024f10:	4610      	mov	r0, r2
 8024f12:	4798      	blx	r3
 8024f14:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024f16:	68fb      	ldr	r3, [r7, #12]
 8024f18:	2b00      	cmp	r3, #0
 8024f1a:	d001      	beq.n	8024f20 <lfs_file_tell+0x24>
        return err;
 8024f1c:	68fb      	ldr	r3, [r7, #12]
 8024f1e:	e01c      	b.n	8024f5a <lfs_file_tell+0x5e>
    }
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8024f20:	687b      	ldr	r3, [r7, #4]
 8024f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024f24:	6839      	ldr	r1, [r7, #0]
 8024f26:	4618      	mov	r0, r3
 8024f28:	f7f9 f934 	bl	801e194 <lfs_mlist_isopen>
 8024f2c:	4603      	mov	r3, r0
 8024f2e:	2b00      	cmp	r3, #0
 8024f30:	d106      	bne.n	8024f40 <lfs_file_tell+0x44>
 8024f32:	4b0c      	ldr	r3, [pc, #48]	@ (8024f64 <lfs_file_tell+0x68>)
 8024f34:	4a0c      	ldr	r2, [pc, #48]	@ (8024f68 <lfs_file_tell+0x6c>)
 8024f36:	f641 0138 	movw	r1, #6200	@ 0x1838
 8024f3a:	480c      	ldr	r0, [pc, #48]	@ (8024f6c <lfs_file_tell+0x70>)
 8024f3c:	f00e fb7c 	bl	8033638 <__assert_func>

    lfs_soff_t res = lfs_file_tell_(lfs, file);
 8024f40:	6839      	ldr	r1, [r7, #0]
 8024f42:	6878      	ldr	r0, [r7, #4]
 8024f44:	f7fd ff4b 	bl	8022dde <lfs_file_tell_>
 8024f48:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8024f4a:	687b      	ldr	r3, [r7, #4]
 8024f4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024f4e:	699b      	ldr	r3, [r3, #24]
 8024f50:	687a      	ldr	r2, [r7, #4]
 8024f52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024f54:	4610      	mov	r0, r2
 8024f56:	4798      	blx	r3
    return res;
 8024f58:	68bb      	ldr	r3, [r7, #8]
}
 8024f5a:	4618      	mov	r0, r3
 8024f5c:	3710      	adds	r7, #16
 8024f5e:	46bd      	mov	sp, r7
 8024f60:	bd80      	pop	{r7, pc}
 8024f62:	bf00      	nop
 8024f64:	080419c0 	.word	0x080419c0
 8024f68:	0804497c 	.word	0x0804497c
 8024f6c:	08040dec 	.word	0x08040dec

08024f70 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 8024f70:	b580      	push	{r7, lr}
 8024f72:	b084      	sub	sp, #16
 8024f74:	af00      	add	r7, sp, #0
 8024f76:	6078      	str	r0, [r7, #4]
 8024f78:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8024f7a:	687b      	ldr	r3, [r7, #4]
 8024f7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024f7e:	695b      	ldr	r3, [r3, #20]
 8024f80:	687a      	ldr	r2, [r7, #4]
 8024f82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024f84:	4610      	mov	r0, r2
 8024f86:	4798      	blx	r3
 8024f88:	60f8      	str	r0, [r7, #12]
    if (err) {
 8024f8a:	68fb      	ldr	r3, [r7, #12]
 8024f8c:	2b00      	cmp	r3, #0
 8024f8e:	d001      	beq.n	8024f94 <lfs_mkdir+0x24>
        return err;
 8024f90:	68fb      	ldr	r3, [r7, #12]
 8024f92:	e00c      	b.n	8024fae <lfs_mkdir+0x3e>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_mkdir_(lfs, path);
 8024f94:	6839      	ldr	r1, [r7, #0]
 8024f96:	6878      	ldr	r0, [r7, #4]
 8024f98:	f7fc fb12 	bl	80215c0 <lfs_mkdir_>
 8024f9c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8024f9e:	687b      	ldr	r3, [r7, #4]
 8024fa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024fa2:	699b      	ldr	r3, [r3, #24]
 8024fa4:	687a      	ldr	r2, [r7, #4]
 8024fa6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024fa8:	4610      	mov	r0, r2
 8024faa:	4798      	blx	r3
    return err;
 8024fac:	68fb      	ldr	r3, [r7, #12]
}
 8024fae:	4618      	mov	r0, r3
 8024fb0:	3710      	adds	r7, #16
 8024fb2:	46bd      	mov	sp, r7
 8024fb4:	bd80      	pop	{r7, pc}
	...

08024fb8 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8024fb8:	b580      	push	{r7, lr}
 8024fba:	b086      	sub	sp, #24
 8024fbc:	af00      	add	r7, sp, #0
 8024fbe:	60f8      	str	r0, [r7, #12]
 8024fc0:	60b9      	str	r1, [r7, #8]
 8024fc2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8024fc4:	68fb      	ldr	r3, [r7, #12]
 8024fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024fc8:	695b      	ldr	r3, [r3, #20]
 8024fca:	68fa      	ldr	r2, [r7, #12]
 8024fcc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024fce:	4610      	mov	r0, r2
 8024fd0:	4798      	blx	r3
 8024fd2:	6178      	str	r0, [r7, #20]
    if (err) {
 8024fd4:	697b      	ldr	r3, [r7, #20]
 8024fd6:	2b00      	cmp	r3, #0
 8024fd8:	d001      	beq.n	8024fde <lfs_dir_open+0x26>
        return err;
 8024fda:	697b      	ldr	r3, [r7, #20]
 8024fdc:	e020      	b.n	8025020 <lfs_dir_open+0x68>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8024fde:	68fb      	ldr	r3, [r7, #12]
 8024fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024fe2:	68b9      	ldr	r1, [r7, #8]
 8024fe4:	4618      	mov	r0, r3
 8024fe6:	f7f9 f8d5 	bl	801e194 <lfs_mlist_isopen>
 8024fea:	4603      	mov	r3, r0
 8024fec:	f083 0301 	eor.w	r3, r3, #1
 8024ff0:	b2db      	uxtb	r3, r3
 8024ff2:	2b00      	cmp	r3, #0
 8024ff4:	d106      	bne.n	8025004 <lfs_dir_open+0x4c>
 8024ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8025028 <lfs_dir_open+0x70>)
 8024ff8:	4a0c      	ldr	r2, [pc, #48]	@ (802502c <lfs_dir_open+0x74>)
 8024ffa:	f641 0174 	movw	r1, #6260	@ 0x1874
 8024ffe:	480c      	ldr	r0, [pc, #48]	@ (8025030 <lfs_dir_open+0x78>)
 8025000:	f00e fb1a 	bl	8033638 <__assert_func>

    err = lfs_dir_open_(lfs, dir, path);
 8025004:	687a      	ldr	r2, [r7, #4]
 8025006:	68b9      	ldr	r1, [r7, #8]
 8025008:	68f8      	ldr	r0, [r7, #12]
 802500a:	f7fc fc19 	bl	8021840 <lfs_dir_open_>
 802500e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8025010:	68fb      	ldr	r3, [r7, #12]
 8025012:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8025014:	699b      	ldr	r3, [r3, #24]
 8025016:	68fa      	ldr	r2, [r7, #12]
 8025018:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 802501a:	4610      	mov	r0, r2
 802501c:	4798      	blx	r3
    return err;
 802501e:	697b      	ldr	r3, [r7, #20]
}
 8025020:	4618      	mov	r0, r3
 8025022:	3718      	adds	r7, #24
 8025024:	46bd      	mov	sp, r7
 8025026:	bd80      	pop	{r7, pc}
 8025028:	080419f8 	.word	0x080419f8
 802502c:	0804498c 	.word	0x0804498c
 8025030:	08040dec 	.word	0x08040dec

08025034 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 8025034:	b580      	push	{r7, lr}
 8025036:	b084      	sub	sp, #16
 8025038:	af00      	add	r7, sp, #0
 802503a:	6078      	str	r0, [r7, #4]
 802503c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802503e:	687b      	ldr	r3, [r7, #4]
 8025040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8025042:	695b      	ldr	r3, [r3, #20]
 8025044:	687a      	ldr	r2, [r7, #4]
 8025046:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8025048:	4610      	mov	r0, r2
 802504a:	4798      	blx	r3
 802504c:	60f8      	str	r0, [r7, #12]
    if (err) {
 802504e:	68fb      	ldr	r3, [r7, #12]
 8025050:	2b00      	cmp	r3, #0
 8025052:	d001      	beq.n	8025058 <lfs_dir_close+0x24>
        return err;
 8025054:	68fb      	ldr	r3, [r7, #12]
 8025056:	e00c      	b.n	8025072 <lfs_dir_close+0x3e>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_close_(lfs, dir);
 8025058:	6839      	ldr	r1, [r7, #0]
 802505a:	6878      	ldr	r0, [r7, #4]
 802505c:	f7fc fc6a 	bl	8021934 <lfs_dir_close_>
 8025060:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8025062:	687b      	ldr	r3, [r7, #4]
 8025064:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8025066:	699b      	ldr	r3, [r3, #24]
 8025068:	687a      	ldr	r2, [r7, #4]
 802506a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 802506c:	4610      	mov	r0, r2
 802506e:	4798      	blx	r3
    return err;
 8025070:	68fb      	ldr	r3, [r7, #12]
}
 8025072:	4618      	mov	r0, r3
 8025074:	3710      	adds	r7, #16
 8025076:	46bd      	mov	sp, r7
 8025078:	bd80      	pop	{r7, pc}

0802507a <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 802507a:	b580      	push	{r7, lr}
 802507c:	b086      	sub	sp, #24
 802507e:	af00      	add	r7, sp, #0
 8025080:	60f8      	str	r0, [r7, #12]
 8025082:	60b9      	str	r1, [r7, #8]
 8025084:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8025086:	68fb      	ldr	r3, [r7, #12]
 8025088:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802508a:	695b      	ldr	r3, [r3, #20]
 802508c:	68fa      	ldr	r2, [r7, #12]
 802508e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8025090:	4610      	mov	r0, r2
 8025092:	4798      	blx	r3
 8025094:	6178      	str	r0, [r7, #20]
    if (err) {
 8025096:	697b      	ldr	r3, [r7, #20]
 8025098:	2b00      	cmp	r3, #0
 802509a:	d001      	beq.n	80250a0 <lfs_dir_read+0x26>
        return err;
 802509c:	697b      	ldr	r3, [r7, #20]
 802509e:	e00d      	b.n	80250bc <lfs_dir_read+0x42>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_read_(lfs, dir, info);
 80250a0:	687a      	ldr	r2, [r7, #4]
 80250a2:	68b9      	ldr	r1, [r7, #8]
 80250a4:	68f8      	ldr	r0, [r7, #12]
 80250a6:	f7fc fc53 	bl	8021950 <lfs_dir_read_>
 80250aa:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80250ac:	68fb      	ldr	r3, [r7, #12]
 80250ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80250b0:	699b      	ldr	r3, [r3, #24]
 80250b2:	68fa      	ldr	r2, [r7, #12]
 80250b4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80250b6:	4610      	mov	r0, r2
 80250b8:	4798      	blx	r3
    return err;
 80250ba:	697b      	ldr	r3, [r7, #20]
}
 80250bc:	4618      	mov	r0, r3
 80250be:	3718      	adds	r7, #24
 80250c0:	46bd      	mov	sp, r7
 80250c2:	bd80      	pop	{r7, pc}

080250c4 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80250c4:	b480      	push	{r7}
 80250c6:	b087      	sub	sp, #28
 80250c8:	af00      	add	r7, sp, #0
 80250ca:	60f8      	str	r0, [r7, #12]
 80250cc:	60b9      	str	r1, [r7, #8]
 80250ce:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 80250d0:	68bb      	ldr	r3, [r7, #8]
 80250d2:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 80250d4:	2300      	movs	r3, #0
 80250d6:	617b      	str	r3, [r7, #20]
 80250d8:	e024      	b.n	8025124 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80250da:	68fb      	ldr	r3, [r7, #12]
 80250dc:	091a      	lsrs	r2, r3, #4
 80250de:	6939      	ldr	r1, [r7, #16]
 80250e0:	697b      	ldr	r3, [r7, #20]
 80250e2:	440b      	add	r3, r1
 80250e4:	781b      	ldrb	r3, [r3, #0]
 80250e6:	4619      	mov	r1, r3
 80250e8:	68fb      	ldr	r3, [r7, #12]
 80250ea:	404b      	eors	r3, r1
 80250ec:	f003 030f 	and.w	r3, r3, #15
 80250f0:	4912      	ldr	r1, [pc, #72]	@ (802513c <lfs_crc+0x78>)
 80250f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80250f6:	4053      	eors	r3, r2
 80250f8:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80250fa:	68fb      	ldr	r3, [r7, #12]
 80250fc:	091a      	lsrs	r2, r3, #4
 80250fe:	6939      	ldr	r1, [r7, #16]
 8025100:	697b      	ldr	r3, [r7, #20]
 8025102:	440b      	add	r3, r1
 8025104:	781b      	ldrb	r3, [r3, #0]
 8025106:	091b      	lsrs	r3, r3, #4
 8025108:	b2db      	uxtb	r3, r3
 802510a:	4619      	mov	r1, r3
 802510c:	68fb      	ldr	r3, [r7, #12]
 802510e:	404b      	eors	r3, r1
 8025110:	f003 030f 	and.w	r3, r3, #15
 8025114:	4909      	ldr	r1, [pc, #36]	@ (802513c <lfs_crc+0x78>)
 8025116:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802511a:	4053      	eors	r3, r2
 802511c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 802511e:	697b      	ldr	r3, [r7, #20]
 8025120:	3301      	adds	r3, #1
 8025122:	617b      	str	r3, [r7, #20]
 8025124:	697a      	ldr	r2, [r7, #20]
 8025126:	687b      	ldr	r3, [r7, #4]
 8025128:	429a      	cmp	r2, r3
 802512a:	d3d6      	bcc.n	80250da <lfs_crc+0x16>
    }

    return crc;
 802512c:	68fb      	ldr	r3, [r7, #12]
}
 802512e:	4618      	mov	r0, r3
 8025130:	371c      	adds	r7, #28
 8025132:	46bd      	mov	sp, r7
 8025134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025138:	4770      	bx	lr
 802513a:	bf00      	nop
 802513c:	0804499c 	.word	0x0804499c

08025140 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8025140:	b580      	push	{r7, lr}
 8025142:	b084      	sub	sp, #16
 8025144:	af00      	add	r7, sp, #0
 8025146:	6078      	str	r0, [r7, #4]
 8025148:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 802514a:	687b      	ldr	r3, [r7, #4]
 802514c:	683a      	ldr	r2, [r7, #0]
 802514e:	fb02 f303 	mul.w	r3, r2, r3
 8025152:	4618      	mov	r0, r3
 8025154:	f7f7 fbb2 	bl	801c8bc <pvPortMalloc>
 8025158:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 802515a:	68fb      	ldr	r3, [r7, #12]
 802515c:	2b00      	cmp	r3, #0
 802515e:	d008      	beq.n	8025172 <mg_calloc+0x32>
 8025160:	683b      	ldr	r3, [r7, #0]
 8025162:	687a      	ldr	r2, [r7, #4]
 8025164:	fb02 f303 	mul.w	r3, r2, r3
 8025168:	461a      	mov	r2, r3
 802516a:	2100      	movs	r1, #0
 802516c:	68f8      	ldr	r0, [r7, #12]
 802516e:	f010 ffb7 	bl	80360e0 <memset>
  return p;
 8025172:	68fb      	ldr	r3, [r7, #12]
}
 8025174:	4618      	mov	r0, r3
 8025176:	3710      	adds	r7, #16
 8025178:	46bd      	mov	sp, r7
 802517a:	bd80      	pop	{r7, pc}

0802517c <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 802517c:	b580      	push	{r7, lr}
 802517e:	b084      	sub	sp, #16
 8025180:	af00      	add	r7, sp, #0
 8025182:	6078      	str	r0, [r7, #4]
 8025184:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8025186:	687b      	ldr	r3, [r7, #4]
 8025188:	60fb      	str	r3, [r7, #12]
 802518a:	e002      	b.n	8025192 <mg_dns_free+0x16>
 802518c:	68fb      	ldr	r3, [r7, #12]
 802518e:	681b      	ldr	r3, [r3, #0]
 8025190:	60fb      	str	r3, [r7, #12]
 8025192:	68fb      	ldr	r3, [r7, #12]
 8025194:	681b      	ldr	r3, [r3, #0]
 8025196:	683a      	ldr	r2, [r7, #0]
 8025198:	429a      	cmp	r2, r3
 802519a:	d1f7      	bne.n	802518c <mg_dns_free+0x10>
 802519c:	683b      	ldr	r3, [r7, #0]
 802519e:	681a      	ldr	r2, [r3, #0]
 80251a0:	68fb      	ldr	r3, [r7, #12]
 80251a2:	601a      	str	r2, [r3, #0]
  free(d);
 80251a4:	6838      	ldr	r0, [r7, #0]
 80251a6:	f7f7 fc57 	bl	801ca58 <vPortFree>
}
 80251aa:	bf00      	nop
 80251ac:	3710      	adds	r7, #16
 80251ae:	46bd      	mov	sp, r7
 80251b0:	bd80      	pop	{r7, pc}

080251b2 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 80251b2:	b580      	push	{r7, lr}
 80251b4:	b086      	sub	sp, #24
 80251b6:	af00      	add	r7, sp, #0
 80251b8:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80251ba:	687b      	ldr	r3, [r7, #4]
 80251bc:	685b      	ldr	r3, [r3, #4]
 80251be:	3330      	adds	r3, #48	@ 0x30
 80251c0:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 80251c2:	693b      	ldr	r3, [r7, #16]
 80251c4:	681b      	ldr	r3, [r3, #0]
 80251c6:	617b      	str	r3, [r7, #20]
 80251c8:	e00d      	b.n	80251e6 <mg_resolve_cancel+0x34>
    tmp = d->next;
 80251ca:	697b      	ldr	r3, [r7, #20]
 80251cc:	681b      	ldr	r3, [r3, #0]
 80251ce:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 80251d0:	697b      	ldr	r3, [r7, #20]
 80251d2:	685b      	ldr	r3, [r3, #4]
 80251d4:	687a      	ldr	r2, [r7, #4]
 80251d6:	429a      	cmp	r2, r3
 80251d8:	d103      	bne.n	80251e2 <mg_resolve_cancel+0x30>
 80251da:	6979      	ldr	r1, [r7, #20]
 80251dc:	6938      	ldr	r0, [r7, #16]
 80251de:	f7ff ffcd 	bl	802517c <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 80251e2:	68fb      	ldr	r3, [r7, #12]
 80251e4:	617b      	str	r3, [r7, #20]
 80251e6:	697b      	ldr	r3, [r7, #20]
 80251e8:	2b00      	cmp	r3, #0
 80251ea:	d1ee      	bne.n	80251ca <mg_resolve_cancel+0x18>
  }
}
 80251ec:	bf00      	nop
 80251ee:	bf00      	nop
 80251f0:	3718      	adds	r7, #24
 80251f2:	46bd      	mov	sp, r7
 80251f4:	bd80      	pop	{r7, pc}

080251f6 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 80251f6:	b580      	push	{r7, lr}
 80251f8:	b08c      	sub	sp, #48	@ 0x30
 80251fa:	af04      	add	r7, sp, #16
 80251fc:	60f8      	str	r0, [r7, #12]
 80251fe:	60b9      	str	r1, [r7, #8]
 8025200:	607a      	str	r2, [r7, #4]
 8025202:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8025204:	2300      	movs	r3, #0
 8025206:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8025208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802520a:	2b00      	cmp	r3, #0
 802520c:	d005      	beq.n	802521a <mg_dns_parse_name_depth+0x24>
 802520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025210:	2b00      	cmp	r3, #0
 8025212:	d102      	bne.n	802521a <mg_dns_parse_name_depth+0x24>
 8025214:	683b      	ldr	r3, [r7, #0]
 8025216:	2200      	movs	r2, #0
 8025218:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 802521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802521c:	2b05      	cmp	r3, #5
 802521e:	f340 8084 	ble.w	802532a <mg_dns_parse_name_depth+0x134>
 8025222:	2300      	movs	r3, #0
 8025224:	e093      	b.n	802534e <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8025226:	687a      	ldr	r2, [r7, #4]
 8025228:	69fb      	ldr	r3, [r7, #28]
 802522a:	4413      	add	r3, r2
 802522c:	68fa      	ldr	r2, [r7, #12]
 802522e:	4413      	add	r3, r2
 8025230:	781b      	ldrb	r3, [r3, #0]
 8025232:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8025234:	69bb      	ldr	r3, [r7, #24]
 8025236:	2b00      	cmp	r3, #0
 8025238:	d103      	bne.n	8025242 <mg_dns_parse_name_depth+0x4c>
      i++;
 802523a:	69fb      	ldr	r3, [r7, #28]
 802523c:	3301      	adds	r3, #1
 802523e:	61fb      	str	r3, [r7, #28]
      break;
 8025240:	e07b      	b.n	802533a <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 8025242:	69bb      	ldr	r3, [r7, #24]
 8025244:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8025248:	2b00      	cmp	r3, #0
 802524a:	d02f      	beq.n	80252ac <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 802524c:	69bb      	ldr	r3, [r7, #24]
 802524e:	021b      	lsls	r3, r3, #8
 8025250:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8025254:	6879      	ldr	r1, [r7, #4]
 8025256:	69fa      	ldr	r2, [r7, #28]
 8025258:	440a      	add	r2, r1
 802525a:	3201      	adds	r2, #1
 802525c:	68f9      	ldr	r1, [r7, #12]
 802525e:	440a      	add	r2, r1
 8025260:	7812      	ldrb	r2, [r2, #0]
 8025262:	4313      	orrs	r3, r2
 8025264:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8025266:	697b      	ldr	r3, [r7, #20]
 8025268:	3301      	adds	r3, #1
 802526a:	68ba      	ldr	r2, [r7, #8]
 802526c:	429a      	cmp	r2, r3
 802526e:	d919      	bls.n	80252a4 <mg_dns_parse_name_depth+0xae>
 8025270:	68fa      	ldr	r2, [r7, #12]
 8025272:	697b      	ldr	r3, [r7, #20]
 8025274:	4413      	add	r3, r2
 8025276:	781b      	ldrb	r3, [r3, #0]
 8025278:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 802527c:	2b00      	cmp	r3, #0
 802527e:	d111      	bne.n	80252a4 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8025280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025282:	3301      	adds	r3, #1
 8025284:	9302      	str	r3, [sp, #8]
 8025286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025288:	9301      	str	r3, [sp, #4]
 802528a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802528c:	9300      	str	r3, [sp, #0]
 802528e:	683b      	ldr	r3, [r7, #0]
 8025290:	697a      	ldr	r2, [r7, #20]
 8025292:	68b9      	ldr	r1, [r7, #8]
 8025294:	68f8      	ldr	r0, [r7, #12]
 8025296:	f7ff ffae 	bl	80251f6 <mg_dns_parse_name_depth>
 802529a:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 802529c:	2b00      	cmp	r3, #0
 802529e:	d101      	bne.n	80252a4 <mg_dns_parse_name_depth+0xae>
        return 0;
 80252a0:	2300      	movs	r3, #0
 80252a2:	e054      	b.n	802534e <mg_dns_parse_name_depth+0x158>
      i += 2;
 80252a4:	69fb      	ldr	r3, [r7, #28]
 80252a6:	3302      	adds	r3, #2
 80252a8:	61fb      	str	r3, [r7, #28]
      break;
 80252aa:	e046      	b.n	802533a <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 80252ac:	687a      	ldr	r2, [r7, #4]
 80252ae:	69fb      	ldr	r3, [r7, #28]
 80252b0:	441a      	add	r2, r3
 80252b2:	69bb      	ldr	r3, [r7, #24]
 80252b4:	4413      	add	r3, r2
 80252b6:	3301      	adds	r3, #1
 80252b8:	68ba      	ldr	r2, [r7, #8]
 80252ba:	429a      	cmp	r2, r3
 80252bc:	d801      	bhi.n	80252c2 <mg_dns_parse_name_depth+0xcc>
 80252be:	2300      	movs	r3, #0
 80252c0:	e045      	b.n	802534e <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 80252c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80252c4:	2b00      	cmp	r3, #0
 80252c6:	d00b      	beq.n	80252e0 <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 80252c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80252ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80252cc:	429a      	cmp	r2, r3
 80252ce:	d204      	bcs.n	80252da <mg_dns_parse_name_depth+0xe4>
 80252d0:	683a      	ldr	r2, [r7, #0]
 80252d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80252d4:	4413      	add	r3, r2
 80252d6:	222e      	movs	r2, #46	@ 0x2e
 80252d8:	701a      	strb	r2, [r3, #0]
      j++;
 80252da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80252dc:	3301      	adds	r3, #1
 80252de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 80252e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80252e2:	69bb      	ldr	r3, [r7, #24]
 80252e4:	4413      	add	r3, r2
 80252e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80252e8:	429a      	cmp	r2, r3
 80252ea:	d90c      	bls.n	8025306 <mg_dns_parse_name_depth+0x110>
 80252ec:	683a      	ldr	r2, [r7, #0]
 80252ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80252f0:	18d0      	adds	r0, r2, r3
 80252f2:	687a      	ldr	r2, [r7, #4]
 80252f4:	69fb      	ldr	r3, [r7, #28]
 80252f6:	4413      	add	r3, r2
 80252f8:	3301      	adds	r3, #1
 80252fa:	68fa      	ldr	r2, [r7, #12]
 80252fc:	4413      	add	r3, r2
 80252fe:	69ba      	ldr	r2, [r7, #24]
 8025300:	4619      	mov	r1, r3
 8025302:	f012 f929 	bl	8037558 <memcpy>
    j += n;
 8025306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025308:	69bb      	ldr	r3, [r7, #24]
 802530a:	4413      	add	r3, r2
 802530c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 802530e:	69ba      	ldr	r2, [r7, #24]
 8025310:	69fb      	ldr	r3, [r7, #28]
 8025312:	4413      	add	r3, r2
 8025314:	3301      	adds	r3, #1
 8025316:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8025318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802531a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802531c:	429a      	cmp	r2, r3
 802531e:	d204      	bcs.n	802532a <mg_dns_parse_name_depth+0x134>
 8025320:	683a      	ldr	r2, [r7, #0]
 8025322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025324:	4413      	add	r3, r2
 8025326:	2200      	movs	r2, #0
 8025328:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 802532a:	687a      	ldr	r2, [r7, #4]
 802532c:	69fb      	ldr	r3, [r7, #28]
 802532e:	4413      	add	r3, r2
 8025330:	3301      	adds	r3, #1
 8025332:	68ba      	ldr	r2, [r7, #8]
 8025334:	429a      	cmp	r2, r3
 8025336:	f63f af76 	bhi.w	8025226 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 802533a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802533c:	2b00      	cmp	r3, #0
 802533e:	d005      	beq.n	802534c <mg_dns_parse_name_depth+0x156>
 8025340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025342:	3b01      	subs	r3, #1
 8025344:	683a      	ldr	r2, [r7, #0]
 8025346:	4413      	add	r3, r2
 8025348:	2200      	movs	r2, #0
 802534a:	701a      	strb	r2, [r3, #0]
  return i;
 802534c:	69fb      	ldr	r3, [r7, #28]
}
 802534e:	4618      	mov	r0, r3
 8025350:	3720      	adds	r7, #32
 8025352:	46bd      	mov	sp, r7
 8025354:	bd80      	pop	{r7, pc}

08025356 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8025356:	b580      	push	{r7, lr}
 8025358:	b088      	sub	sp, #32
 802535a:	af04      	add	r7, sp, #16
 802535c:	60f8      	str	r0, [r7, #12]
 802535e:	60b9      	str	r1, [r7, #8]
 8025360:	607a      	str	r2, [r7, #4]
 8025362:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8025364:	2300      	movs	r3, #0
 8025366:	9302      	str	r3, [sp, #8]
 8025368:	2300      	movs	r3, #0
 802536a:	9301      	str	r3, [sp, #4]
 802536c:	69bb      	ldr	r3, [r7, #24]
 802536e:	9300      	str	r3, [sp, #0]
 8025370:	683b      	ldr	r3, [r7, #0]
 8025372:	687a      	ldr	r2, [r7, #4]
 8025374:	68b9      	ldr	r1, [r7, #8]
 8025376:	68f8      	ldr	r0, [r7, #12]
 8025378:	f7ff ff3d 	bl	80251f6 <mg_dns_parse_name_depth>
 802537c:	4603      	mov	r3, r0
}
 802537e:	4618      	mov	r0, r3
 8025380:	3710      	adds	r7, #16
 8025382:	46bd      	mov	sp, r7
 8025384:	bd80      	pop	{r7, pc}

08025386 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8025386:	b580      	push	{r7, lr}
 8025388:	b088      	sub	sp, #32
 802538a:	af02      	add	r7, sp, #8
 802538c:	60f8      	str	r0, [r7, #12]
 802538e:	60b9      	str	r1, [r7, #8]
 8025390:	607a      	str	r2, [r7, #4]
 8025392:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8025394:	68fa      	ldr	r2, [r7, #12]
 8025396:	687b      	ldr	r3, [r7, #4]
 8025398:	4413      	add	r3, r2
 802539a:	617b      	str	r3, [r7, #20]
 802539c:	68fa      	ldr	r2, [r7, #12]
 802539e:	68bb      	ldr	r3, [r7, #8]
 80253a0:	4413      	add	r3, r2
 80253a2:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 80253a4:	2208      	movs	r2, #8
 80253a6:	2100      	movs	r1, #0
 80253a8:	6a38      	ldr	r0, [r7, #32]
 80253aa:	f010 fe99 	bl	80360e0 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80253ae:	68bb      	ldr	r3, [r7, #8]
 80253b0:	2b0b      	cmp	r3, #11
 80253b2:	d801      	bhi.n	80253b8 <mg_dns_parse_rr+0x32>
 80253b4:	2300      	movs	r3, #0
 80253b6:	e074      	b.n	80254a2 <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 80253b8:	68bb      	ldr	r3, [r7, #8]
 80253ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80253be:	d901      	bls.n	80253c4 <mg_dns_parse_rr+0x3e>
 80253c0:	2300      	movs	r3, #0
 80253c2:	e06e      	b.n	80254a2 <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 80253c4:	697a      	ldr	r2, [r7, #20]
 80253c6:	693b      	ldr	r3, [r7, #16]
 80253c8:	429a      	cmp	r2, r3
 80253ca:	d301      	bcc.n	80253d0 <mg_dns_parse_rr+0x4a>
 80253cc:	2300      	movs	r3, #0
 80253ce:	e068      	b.n	80254a2 <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 80253d0:	2300      	movs	r3, #0
 80253d2:	9300      	str	r3, [sp, #0]
 80253d4:	2300      	movs	r3, #0
 80253d6:	687a      	ldr	r2, [r7, #4]
 80253d8:	68b9      	ldr	r1, [r7, #8]
 80253da:	68f8      	ldr	r0, [r7, #12]
 80253dc:	f7ff ffbb 	bl	8025356 <mg_dns_parse_name>
 80253e0:	4603      	mov	r3, r0
 80253e2:	b29a      	uxth	r2, r3
 80253e4:	6a3b      	ldr	r3, [r7, #32]
 80253e6:	801a      	strh	r2, [r3, #0]
 80253e8:	6a3b      	ldr	r3, [r7, #32]
 80253ea:	881b      	ldrh	r3, [r3, #0]
 80253ec:	2b00      	cmp	r3, #0
 80253ee:	d101      	bne.n	80253f4 <mg_dns_parse_rr+0x6e>
    return 0;
 80253f0:	2300      	movs	r3, #0
 80253f2:	e056      	b.n	80254a2 <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 80253f4:	6a3b      	ldr	r3, [r7, #32]
 80253f6:	881b      	ldrh	r3, [r3, #0]
 80253f8:	3304      	adds	r3, #4
 80253fa:	697a      	ldr	r2, [r7, #20]
 80253fc:	4413      	add	r3, r2
 80253fe:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8025400:	697a      	ldr	r2, [r7, #20]
 8025402:	693b      	ldr	r3, [r7, #16]
 8025404:	429a      	cmp	r2, r3
 8025406:	d901      	bls.n	802540c <mg_dns_parse_rr+0x86>
 8025408:	2300      	movs	r3, #0
 802540a:	e04a      	b.n	80254a2 <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 802540c:	697b      	ldr	r3, [r7, #20]
 802540e:	3b04      	subs	r3, #4
 8025410:	781b      	ldrb	r3, [r3, #0]
 8025412:	021b      	lsls	r3, r3, #8
 8025414:	b21a      	sxth	r2, r3
 8025416:	697b      	ldr	r3, [r7, #20]
 8025418:	3b03      	subs	r3, #3
 802541a:	781b      	ldrb	r3, [r3, #0]
 802541c:	b21b      	sxth	r3, r3
 802541e:	4313      	orrs	r3, r2
 8025420:	b21b      	sxth	r3, r3
 8025422:	b29a      	uxth	r2, r3
 8025424:	6a3b      	ldr	r3, [r7, #32]
 8025426:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8025428:	697b      	ldr	r3, [r7, #20]
 802542a:	3b02      	subs	r3, #2
 802542c:	781b      	ldrb	r3, [r3, #0]
 802542e:	021b      	lsls	r3, r3, #8
 8025430:	b21a      	sxth	r2, r3
 8025432:	697b      	ldr	r3, [r7, #20]
 8025434:	3b01      	subs	r3, #1
 8025436:	781b      	ldrb	r3, [r3, #0]
 8025438:	b21b      	sxth	r3, r3
 802543a:	4313      	orrs	r3, r2
 802543c:	b21b      	sxth	r3, r3
 802543e:	b29a      	uxth	r2, r3
 8025440:	6a3b      	ldr	r3, [r7, #32]
 8025442:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8025444:	78fb      	ldrb	r3, [r7, #3]
 8025446:	2b00      	cmp	r3, #0
 8025448:	d003      	beq.n	8025452 <mg_dns_parse_rr+0xcc>
 802544a:	6a3b      	ldr	r3, [r7, #32]
 802544c:	881b      	ldrh	r3, [r3, #0]
 802544e:	3304      	adds	r3, #4
 8025450:	e027      	b.n	80254a2 <mg_dns_parse_rr+0x11c>

  s += 6;
 8025452:	697b      	ldr	r3, [r7, #20]
 8025454:	3306      	adds	r3, #6
 8025456:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8025458:	697a      	ldr	r2, [r7, #20]
 802545a:	693b      	ldr	r3, [r7, #16]
 802545c:	429a      	cmp	r2, r3
 802545e:	d901      	bls.n	8025464 <mg_dns_parse_rr+0xde>
 8025460:	2300      	movs	r3, #0
 8025462:	e01e      	b.n	80254a2 <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8025464:	697b      	ldr	r3, [r7, #20]
 8025466:	3b02      	subs	r3, #2
 8025468:	781b      	ldrb	r3, [r3, #0]
 802546a:	021b      	lsls	r3, r3, #8
 802546c:	b21a      	sxth	r2, r3
 802546e:	697b      	ldr	r3, [r7, #20]
 8025470:	3b01      	subs	r3, #1
 8025472:	781b      	ldrb	r3, [r3, #0]
 8025474:	b21b      	sxth	r3, r3
 8025476:	4313      	orrs	r3, r2
 8025478:	b21b      	sxth	r3, r3
 802547a:	b29a      	uxth	r2, r3
 802547c:	6a3b      	ldr	r3, [r7, #32]
 802547e:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 8025480:	6a3b      	ldr	r3, [r7, #32]
 8025482:	88db      	ldrh	r3, [r3, #6]
 8025484:	461a      	mov	r2, r3
 8025486:	697b      	ldr	r3, [r7, #20]
 8025488:	4413      	add	r3, r2
 802548a:	693a      	ldr	r2, [r7, #16]
 802548c:	429a      	cmp	r2, r3
 802548e:	d201      	bcs.n	8025494 <mg_dns_parse_rr+0x10e>
 8025490:	2300      	movs	r3, #0
 8025492:	e006      	b.n	80254a2 <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 8025494:	6a3b      	ldr	r3, [r7, #32]
 8025496:	881b      	ldrh	r3, [r3, #0]
 8025498:	461a      	mov	r2, r3
 802549a:	6a3b      	ldr	r3, [r7, #32]
 802549c:	88db      	ldrh	r3, [r3, #6]
 802549e:	4413      	add	r3, r2
 80254a0:	330a      	adds	r3, #10
}
 80254a2:	4618      	mov	r0, r3
 80254a4:	3718      	adds	r7, #24
 80254a6:	46bd      	mov	sp, r7
 80254a8:	bd80      	pop	{r7, pc}
	...

080254ac <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 80254ac:	b580      	push	{r7, lr}
 80254ae:	b08e      	sub	sp, #56	@ 0x38
 80254b0:	af02      	add	r7, sp, #8
 80254b2:	60f8      	str	r0, [r7, #12]
 80254b4:	60b9      	str	r1, [r7, #8]
 80254b6:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 80254b8:	68fb      	ldr	r3, [r7, #12]
 80254ba:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 80254bc:	230c      	movs	r3, #12
 80254be:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(dm, 0, sizeof(*dm));
 80254c0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80254c4:	2100      	movs	r1, #0
 80254c6:	6878      	ldr	r0, [r7, #4]
 80254c8:	f010 fe0a 	bl	80360e0 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 80254cc:	68bb      	ldr	r3, [r7, #8]
 80254ce:	2b0b      	cmp	r3, #11
 80254d0:	d801      	bhi.n	80254d6 <mg_dns_parse+0x2a>
 80254d2:	2300      	movs	r3, #0
 80254d4:	e0aa      	b.n	802562c <mg_dns_parse+0x180>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 80254d6:	6a3b      	ldr	r3, [r7, #32]
 80254d8:	889b      	ldrh	r3, [r3, #4]
 80254da:	4618      	mov	r0, r3
 80254dc:	f00d fc9d 	bl	8032e1a <mg_ntohs>
 80254e0:	4603      	mov	r3, r0
 80254e2:	2b01      	cmp	r3, #1
 80254e4:	d901      	bls.n	80254ea <mg_dns_parse+0x3e>
 80254e6:	2300      	movs	r3, #0
 80254e8:	e0a0      	b.n	802562c <mg_dns_parse+0x180>
  num_answers = mg_ntohs(h->num_answers);
 80254ea:	6a3b      	ldr	r3, [r7, #32]
 80254ec:	88db      	ldrh	r3, [r3, #6]
 80254ee:	4618      	mov	r0, r3
 80254f0:	f00d fc93 	bl	8032e1a <mg_ntohs>
 80254f4:	4603      	mov	r3, r0
 80254f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 80254f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80254fa:	2b0a      	cmp	r3, #10
 80254fc:	d910      	bls.n	8025520 <mg_dns_parse+0x74>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80254fe:	4b4d      	ldr	r3, [pc, #308]	@ (8025634 <mg_dns_parse+0x188>)
 8025500:	681b      	ldr	r3, [r3, #0]
 8025502:	2b02      	cmp	r3, #2
 8025504:	dd0a      	ble.n	802551c <mg_dns_parse+0x70>
 8025506:	4b4c      	ldr	r3, [pc, #304]	@ (8025638 <mg_dns_parse+0x18c>)
 8025508:	f240 4293 	movw	r2, #1171	@ 0x493
 802550c:	494b      	ldr	r1, [pc, #300]	@ (802563c <mg_dns_parse+0x190>)
 802550e:	2003      	movs	r0, #3
 8025510:	f005 ffdc 	bl	802b4cc <mg_log_prefix>
 8025514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8025516:	484a      	ldr	r0, [pc, #296]	@ (8025640 <mg_dns_parse+0x194>)
 8025518:	f006 f828 	bl	802b56c <mg_log>
    num_answers = 10;  // Sanity cap
 802551c:	230a      	movs	r3, #10
 802551e:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 8025520:	6a3b      	ldr	r3, [r7, #32]
 8025522:	881b      	ldrh	r3, [r3, #0]
 8025524:	4618      	mov	r0, r3
 8025526:	f00d fc78 	bl	8032e1a <mg_ntohs>
 802552a:	4603      	mov	r3, r0
 802552c:	461a      	mov	r2, r3
 802552e:	687b      	ldr	r3, [r7, #4]
 8025530:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8025532:	2300      	movs	r3, #0
 8025534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8025536:	e015      	b.n	8025564 <mg_dns_parse+0xb8>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8025538:	f107 0314 	add.w	r3, r7, #20
 802553c:	9300      	str	r3, [sp, #0]
 802553e:	2301      	movs	r3, #1
 8025540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025542:	68b9      	ldr	r1, [r7, #8]
 8025544:	68f8      	ldr	r0, [r7, #12]
 8025546:	f7ff ff1e 	bl	8025386 <mg_dns_parse_rr>
 802554a:	61f8      	str	r0, [r7, #28]
 802554c:	69fb      	ldr	r3, [r7, #28]
 802554e:	2b00      	cmp	r3, #0
 8025550:	d101      	bne.n	8025556 <mg_dns_parse+0xaa>
 8025552:	2300      	movs	r3, #0
 8025554:	e06a      	b.n	802562c <mg_dns_parse+0x180>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 8025556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025558:	69fb      	ldr	r3, [r7, #28]
 802555a:	4413      	add	r3, r2
 802555c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 802555e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025560:	3301      	adds	r3, #1
 8025562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8025564:	6a3b      	ldr	r3, [r7, #32]
 8025566:	889b      	ldrh	r3, [r3, #4]
 8025568:	4618      	mov	r0, r3
 802556a:	f00d fc56 	bl	8032e1a <mg_ntohs>
 802556e:	4603      	mov	r3, r0
 8025570:	461a      	mov	r2, r3
 8025572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025574:	4293      	cmp	r3, r2
 8025576:	d3df      	bcc.n	8025538 <mg_dns_parse+0x8c>
  }
  for (i = 0; i < num_answers; i++) {
 8025578:	2300      	movs	r3, #0
 802557a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802557c:	e051      	b.n	8025622 <mg_dns_parse+0x176>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 802557e:	f107 0314 	add.w	r3, r7, #20
 8025582:	9300      	str	r3, [sp, #0]
 8025584:	2300      	movs	r3, #0
 8025586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025588:	68b9      	ldr	r1, [r7, #8]
 802558a:	68f8      	ldr	r0, [r7, #12]
 802558c:	f7ff fefb 	bl	8025386 <mg_dns_parse_rr>
 8025590:	61f8      	str	r0, [r7, #28]
 8025592:	69fb      	ldr	r3, [r7, #28]
 8025594:	2b00      	cmp	r3, #0
 8025596:	d101      	bne.n	802559c <mg_dns_parse+0xf0>
 8025598:	2300      	movs	r3, #0
 802559a:	e047      	b.n	802562c <mg_dns_parse+0x180>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 802559c:	687b      	ldr	r3, [r7, #4]
 802559e:	3318      	adds	r3, #24
 80255a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80255a4:	9200      	str	r2, [sp, #0]
 80255a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80255a8:	68b9      	ldr	r1, [r7, #8]
 80255aa:	68f8      	ldr	r0, [r7, #12]
 80255ac:	f7ff fed3 	bl	8025356 <mg_dns_parse_name>
    ofs += n;
 80255b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80255b2:	69fb      	ldr	r3, [r7, #28]
 80255b4:	4413      	add	r3, r2
 80255b6:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80255b8:	8b7b      	ldrh	r3, [r7, #26]
 80255ba:	2b04      	cmp	r3, #4
 80255bc:	d114      	bne.n	80255e8 <mg_dns_parse+0x13c>
 80255be:	8afb      	ldrh	r3, [r7, #22]
 80255c0:	2b01      	cmp	r3, #1
 80255c2:	d111      	bne.n	80255e8 <mg_dns_parse+0x13c>
 80255c4:	8b3b      	ldrh	r3, [r7, #24]
 80255c6:	2b01      	cmp	r3, #1
 80255c8:	d10e      	bne.n	80255e8 <mg_dns_parse+0x13c>
      dm->addr.is_ip6 = false;
 80255ca:	687b      	ldr	r3, [r7, #4]
 80255cc:	2200      	movs	r2, #0
 80255ce:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 80255d0:	687b      	ldr	r3, [r7, #4]
 80255d2:	3304      	adds	r3, #4
 80255d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80255d6:	3a04      	subs	r2, #4
 80255d8:	68f9      	ldr	r1, [r7, #12]
 80255da:	440a      	add	r2, r1
 80255dc:	6812      	ldr	r2, [r2, #0]
 80255de:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 80255e0:	687b      	ldr	r3, [r7, #4]
 80255e2:	2201      	movs	r2, #1
 80255e4:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 80255e6:	e020      	b.n	802562a <mg_dns_parse+0x17e>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 80255e8:	8b7b      	ldrh	r3, [r7, #26]
 80255ea:	2b10      	cmp	r3, #16
 80255ec:	d116      	bne.n	802561c <mg_dns_parse+0x170>
 80255ee:	8afb      	ldrh	r3, [r7, #22]
 80255f0:	2b1c      	cmp	r3, #28
 80255f2:	d113      	bne.n	802561c <mg_dns_parse+0x170>
 80255f4:	8b3b      	ldrh	r3, [r7, #24]
 80255f6:	2b01      	cmp	r3, #1
 80255f8:	d110      	bne.n	802561c <mg_dns_parse+0x170>
      dm->addr.is_ip6 = true;
 80255fa:	687b      	ldr	r3, [r7, #4]
 80255fc:	2201      	movs	r2, #1
 80255fe:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8025600:	687b      	ldr	r3, [r7, #4]
 8025602:	1d18      	adds	r0, r3, #4
 8025604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025606:	3b10      	subs	r3, #16
 8025608:	68fa      	ldr	r2, [r7, #12]
 802560a:	4413      	add	r3, r2
 802560c:	2210      	movs	r2, #16
 802560e:	4619      	mov	r1, r3
 8025610:	f011 ffa2 	bl	8037558 <memcpy>
      dm->resolved = true;
 8025614:	687b      	ldr	r3, [r7, #4]
 8025616:	2201      	movs	r2, #1
 8025618:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 802561a:	e006      	b.n	802562a <mg_dns_parse+0x17e>
  for (i = 0; i < num_answers; i++) {
 802561c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802561e:	3301      	adds	r3, #1
 8025620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8025622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025626:	429a      	cmp	r2, r3
 8025628:	d3a9      	bcc.n	802557e <mg_dns_parse+0xd2>
    }
  }
  return true;
 802562a:	2301      	movs	r3, #1
}
 802562c:	4618      	mov	r0, r3
 802562e:	3730      	adds	r7, #48	@ 0x30
 8025630:	46bd      	mov	sp, r7
 8025632:	bd80      	pop	{r7, pc}
 8025634:	200002a8 	.word	0x200002a8
 8025638:	08044a1c 	.word	0x08044a1c
 802563c:	08041a30 	.word	0x08041a30
 8025640:	08041a60 	.word	0x08041a60

08025644 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8025644:	b5b0      	push	{r4, r5, r7, lr}
 8025646:	b0d2      	sub	sp, #328	@ 0x148
 8025648:	af02      	add	r7, sp, #8
 802564a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802564e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8025652:	6018      	str	r0, [r3, #0]
 8025654:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025658:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802565c:	6019      	str	r1, [r3, #0]
 802565e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025662:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8025666:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8025668:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802566c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8025670:	681b      	ldr	r3, [r3, #0]
 8025672:	685b      	ldr	r3, [r3, #4]
 8025674:	3330      	adds	r3, #48	@ 0x30
 8025676:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 802567a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802567e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8025682:	681b      	ldr	r3, [r3, #0]
 8025684:	2b02      	cmp	r3, #2
 8025686:	d12d      	bne.n	80256e4 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8025688:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802568c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8025690:	681b      	ldr	r3, [r3, #0]
 8025692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025696:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 802569a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 802569e:	681b      	ldr	r3, [r3, #0]
 80256a0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80256a4:	e019      	b.n	80256da <dns_cb+0x96>
      tmp = d->next;
 80256a6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80256aa:	681b      	ldr	r3, [r3, #0]
 80256ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 80256b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80256b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80256b8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80256bc:	4290      	cmp	r0, r2
 80256be:	eb71 0303 	sbcs.w	r3, r1, r3
 80256c2:	d206      	bcs.n	80256d2 <dns_cb+0x8e>
 80256c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80256c8:	685b      	ldr	r3, [r3, #4]
 80256ca:	4992      	ldr	r1, [pc, #584]	@ (8025914 <dns_cb+0x2d0>)
 80256cc:	4618      	mov	r0, r3
 80256ce:	f000 fb37 	bl	8025d40 <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 80256d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80256d6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80256da:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80256de:	2b00      	cmp	r3, #0
 80256e0:	d1e1      	bne.n	80256a6 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 80256e2:	e112      	b.n	802590a <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 80256e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80256e8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80256ec:	681b      	ldr	r3, [r3, #0]
 80256ee:	2b07      	cmp	r3, #7
 80256f0:	f040 80e4 	bne.w	80258bc <dns_cb+0x278>
    int resolved = 0;
 80256f4:	2300      	movs	r3, #0
 80256f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 80256fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80256fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8025702:	681b      	ldr	r3, [r3, #0]
 8025704:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8025706:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802570a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 802570e:	681b      	ldr	r3, [r3, #0]
 8025710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025712:	f107 0210 	add.w	r2, r7, #16
 8025716:	4619      	mov	r1, r3
 8025718:	f7ff fec8 	bl	80254ac <mg_dns_parse>
 802571c:	4603      	mov	r3, r0
 802571e:	f083 0301 	eor.w	r3, r3, #1
 8025722:	b2db      	uxtb	r3, r3
 8025724:	2b00      	cmp	r3, #0
 8025726:	d01e      	beq.n	8025766 <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8025728:	4b7b      	ldr	r3, [pc, #492]	@ (8025918 <dns_cb+0x2d4>)
 802572a:	681b      	ldr	r3, [r3, #0]
 802572c:	2b00      	cmp	r3, #0
 802572e:	dd09      	ble.n	8025744 <dns_cb+0x100>
 8025730:	4b7a      	ldr	r3, [pc, #488]	@ (802591c <dns_cb+0x2d8>)
 8025732:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 8025736:	497a      	ldr	r1, [pc, #488]	@ (8025920 <dns_cb+0x2dc>)
 8025738:	2001      	movs	r0, #1
 802573a:	f005 fec7 	bl	802b4cc <mg_log_prefix>
 802573e:	4879      	ldr	r0, [pc, #484]	@ (8025924 <dns_cb+0x2e0>)
 8025740:	f005 ff14 	bl	802b56c <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8025744:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025748:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 802574c:	681b      	ldr	r3, [r3, #0]
 802574e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8025750:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025754:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8025758:	681b      	ldr	r3, [r3, #0]
 802575a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802575c:	4619      	mov	r1, r3
 802575e:	4610      	mov	r0, r2
 8025760:	f005 ff3a 	bl	802b5d8 <mg_hexdump>
 8025764:	e090      	b.n	8025888 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 8025766:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 802576a:	681b      	ldr	r3, [r3, #0]
 802576c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8025770:	e085      	b.n	802587e <dns_cb+0x23a>
        tmp = d->next;
 8025772:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8025776:	681b      	ldr	r3, [r3, #0]
 8025778:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 802577c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025780:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8025784:	881a      	ldrh	r2, [r3, #0]
 8025786:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 802578a:	8a1b      	ldrh	r3, [r3, #16]
 802578c:	429a      	cmp	r2, r3
 802578e:	d171      	bne.n	8025874 <dns_cb+0x230>
        if (d->c->is_resolving) {
 8025790:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8025794:	685b      	ldr	r3, [r3, #4]
 8025796:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802579a:	f003 0308 	and.w	r3, r3, #8
 802579e:	b2db      	uxtb	r3, r3
 80257a0:	2b00      	cmp	r3, #0
 80257a2:	d04a      	beq.n	802583a <dns_cb+0x1f6>
          if (dm.resolved) {
 80257a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80257a8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80257ac:	789b      	ldrb	r3, [r3, #2]
 80257ae:	2b00      	cmp	r3, #0
 80257b0:	d038      	beq.n	8025824 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 80257b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80257b6:	685b      	ldr	r3, [r3, #4]
 80257b8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80257ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80257be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80257c2:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 80257c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80257c8:	685a      	ldr	r2, [r3, #4]
 80257ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80257ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80257d2:	f102 041c 	add.w	r4, r2, #28
 80257d6:	1d1d      	adds	r5, r3, #4
 80257d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80257da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80257dc:	682b      	ldr	r3, [r5, #0]
 80257de:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 80257e0:	4b4d      	ldr	r3, [pc, #308]	@ (8025918 <dns_cb+0x2d4>)
 80257e2:	681b      	ldr	r3, [r3, #0]
 80257e4:	2b02      	cmp	r3, #2
 80257e6:	dd16      	ble.n	8025816 <dns_cb+0x1d2>
 80257e8:	4b4c      	ldr	r3, [pc, #304]	@ (802591c <dns_cb+0x2d8>)
 80257ea:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 80257ee:	494c      	ldr	r1, [pc, #304]	@ (8025920 <dns_cb+0x2dc>)
 80257f0:	2003      	movs	r0, #3
 80257f2:	f005 fe6b 	bl	802b4cc <mg_log_prefix>
 80257f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80257fa:	685b      	ldr	r3, [r3, #4]
 80257fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80257fe:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8025802:	685b      	ldr	r3, [r3, #4]
 8025804:	331c      	adds	r3, #28
 8025806:	f107 0210 	add.w	r2, r7, #16
 802580a:	3218      	adds	r2, #24
 802580c:	9300      	str	r3, [sp, #0]
 802580e:	4b46      	ldr	r3, [pc, #280]	@ (8025928 <dns_cb+0x2e4>)
 8025810:	4846      	ldr	r0, [pc, #280]	@ (802592c <dns_cb+0x2e8>)
 8025812:	f005 feab 	bl	802b56c <mg_log>
            mg_connect_resolved(d->c);
 8025816:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 802581a:	685b      	ldr	r3, [r3, #4]
 802581c:	4618      	mov	r0, r3
 802581e:	f00b faad 	bl	8030d7c <mg_connect_resolved>
 8025822:	e01d      	b.n	8025860 <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8025824:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8025828:	6858      	ldr	r0, [r3, #4]
 802582a:	f107 0310 	add.w	r3, r7, #16
 802582e:	3318      	adds	r3, #24
 8025830:	461a      	mov	r2, r3
 8025832:	493f      	ldr	r1, [pc, #252]	@ (8025930 <dns_cb+0x2ec>)
 8025834:	f000 fa84 	bl	8025d40 <mg_error>
 8025838:	e012      	b.n	8025860 <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 802583a:	4b37      	ldr	r3, [pc, #220]	@ (8025918 <dns_cb+0x2d4>)
 802583c:	681b      	ldr	r3, [r3, #0]
 802583e:	2b00      	cmp	r3, #0
 8025840:	dd0e      	ble.n	8025860 <dns_cb+0x21c>
 8025842:	4b36      	ldr	r3, [pc, #216]	@ (802591c <dns_cb+0x2d8>)
 8025844:	f240 42da 	movw	r2, #1242	@ 0x4da
 8025848:	4935      	ldr	r1, [pc, #212]	@ (8025920 <dns_cb+0x2dc>)
 802584a:	2001      	movs	r0, #1
 802584c:	f005 fe3e 	bl	802b4cc <mg_log_prefix>
 8025850:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8025854:	685b      	ldr	r3, [r3, #4]
 8025856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025858:	4619      	mov	r1, r3
 802585a:	4836      	ldr	r0, [pc, #216]	@ (8025934 <dns_cb+0x2f0>)
 802585c:	f005 fe86 	bl	802b56c <mg_log>
        mg_dns_free(head, d);
 8025860:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8025864:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8025868:	f7ff fc88 	bl	802517c <mg_dns_free>
        resolved = 1;
 802586c:	2301      	movs	r3, #1
 802586e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8025872:	e000      	b.n	8025876 <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 8025874:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 8025876:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 802587a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 802587e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8025882:	2b00      	cmp	r3, #0
 8025884:	f47f af75 	bne.w	8025772 <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8025888:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 802588c:	2b00      	cmp	r3, #0
 802588e:	d10d      	bne.n	80258ac <dns_cb+0x268>
 8025890:	4b21      	ldr	r3, [pc, #132]	@ (8025918 <dns_cb+0x2d4>)
 8025892:	681b      	ldr	r3, [r3, #0]
 8025894:	2b00      	cmp	r3, #0
 8025896:	dd09      	ble.n	80258ac <dns_cb+0x268>
 8025898:	4b20      	ldr	r3, [pc, #128]	@ (802591c <dns_cb+0x2d8>)
 802589a:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 802589e:	4920      	ldr	r1, [pc, #128]	@ (8025920 <dns_cb+0x2dc>)
 80258a0:	2001      	movs	r0, #1
 80258a2:	f005 fe13 	bl	802b4cc <mg_log_prefix>
 80258a6:	4824      	ldr	r0, [pc, #144]	@ (8025938 <dns_cb+0x2f4>)
 80258a8:	f005 fe60 	bl	802b56c <mg_log>
    c->recv.len = 0;
 80258ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80258b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80258b4:	681b      	ldr	r3, [r3, #0]
 80258b6:	2200      	movs	r2, #0
 80258b8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80258ba:	e026      	b.n	802590a <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 80258bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80258c0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80258c4:	681b      	ldr	r3, [r3, #0]
 80258c6:	2b09      	cmp	r3, #9
 80258c8:	d11f      	bne.n	802590a <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 80258ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80258ce:	681b      	ldr	r3, [r3, #0]
 80258d0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80258d4:	e015      	b.n	8025902 <dns_cb+0x2be>
      tmp = d->next;
 80258d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80258da:	681b      	ldr	r3, [r3, #0]
 80258dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 80258e0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80258e4:	685b      	ldr	r3, [r3, #4]
 80258e6:	4915      	ldr	r1, [pc, #84]	@ (802593c <dns_cb+0x2f8>)
 80258e8:	4618      	mov	r0, r3
 80258ea:	f000 fa29 	bl	8025d40 <mg_error>
      mg_dns_free(head, d);
 80258ee:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80258f2:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80258f6:	f7ff fc41 	bl	802517c <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 80258fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80258fe:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8025902:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8025906:	2b00      	cmp	r3, #0
 8025908:	d1e5      	bne.n	80258d6 <dns_cb+0x292>
}
 802590a:	bf00      	nop
 802590c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8025910:	46bd      	mov	sp, r7
 8025912:	bdb0      	pop	{r4, r5, r7, pc}
 8025914:	08041a8c 	.word	0x08041a8c
 8025918:	200002a8 	.word	0x200002a8
 802591c:	08044a2c 	.word	0x08044a2c
 8025920:	08041a30 	.word	0x08041a30
 8025924:	08041a98 	.word	0x08041a98
 8025928:	080316eb 	.word	0x080316eb
 802592c:	08041ab4 	.word	0x08041ab4
 8025930:	08041ac4 	.word	0x08041ac4
 8025934:	08041adc 	.word	0x08041adc
 8025938:	08041af4 	.word	0x08041af4
 802593c:	08041b04 	.word	0x08041b04

08025940 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 8025940:	b590      	push	{r4, r7, lr}
 8025942:	b0cb      	sub	sp, #300	@ 0x12c
 8025944:	af00      	add	r7, sp, #0
 8025946:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 802594a:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 802594e:	6020      	str	r0, [r4, #0]
 8025950:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8025954:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8025958:	6001      	str	r1, [r0, #0]
 802595a:	4619      	mov	r1, r3
 802595c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8025960:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8025964:	801a      	strh	r2, [r3, #0]
 8025966:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802596a:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 802596e:	460a      	mov	r2, r1
 8025970:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 8025972:	f107 0314 	add.w	r3, r7, #20
 8025976:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 802597a:	2100      	movs	r1, #0
 802597c:	4618      	mov	r0, r3
 802597e:	f010 fbaf 	bl	80360e0 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8025982:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8025986:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 802598a:	881b      	ldrh	r3, [r3, #0]
 802598c:	4618      	mov	r0, r3
 802598e:	f00d fa44 	bl	8032e1a <mg_ntohs>
 8025992:	4603      	mov	r3, r0
 8025994:	461a      	mov	r2, r3
 8025996:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802599a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802599e:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 80259a0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80259a4:	f00d fa39 	bl	8032e1a <mg_ntohs>
 80259a8:	4603      	mov	r3, r0
 80259aa:	461a      	mov	r2, r3
 80259ac:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80259b0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80259b4:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 80259b6:	2001      	movs	r0, #1
 80259b8:	f00d fa2f 	bl	8032e1a <mg_ntohs>
 80259bc:	4603      	mov	r3, r0
 80259be:	461a      	mov	r2, r3
 80259c0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80259c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80259c8:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80259ca:	2300      	movs	r3, #0
 80259cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80259d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80259d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80259d8:	e054      	b.n	8025a84 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 80259da:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80259de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80259e2:	681b      	ldr	r3, [r3, #0]
 80259e4:	681a      	ldr	r2, [r3, #0]
 80259e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80259ea:	4413      	add	r3, r2
 80259ec:	781b      	ldrb	r3, [r3, #0]
 80259ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80259f0:	d009      	beq.n	8025a06 <mg_dns_send+0xc6>
 80259f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80259f6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80259fa:	681b      	ldr	r3, [r3, #0]
 80259fc:	685b      	ldr	r3, [r3, #4]
 80259fe:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8025a02:	429a      	cmp	r2, r3
 8025a04:	d32f      	bcc.n	8025a66 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8025a06:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8025a0a:	b2da      	uxtb	r2, r3
 8025a0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8025a10:	b2db      	uxtb	r3, r3
 8025a12:	1ad3      	subs	r3, r2, r3
 8025a14:	b2d9      	uxtb	r1, r3
 8025a16:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8025a1a:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8025a1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8025a22:	4413      	add	r3, r2
 8025a24:	330c      	adds	r3, #12
 8025a26:	460a      	mov	r2, r1
 8025a28:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8025a2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8025a2e:	3301      	adds	r3, #1
 8025a30:	f107 0214 	add.w	r2, r7, #20
 8025a34:	3308      	adds	r3, #8
 8025a36:	4413      	add	r3, r2
 8025a38:	1d18      	adds	r0, r3, #4
 8025a3a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8025a3e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8025a42:	681b      	ldr	r3, [r3, #0]
 8025a44:	681a      	ldr	r2, [r3, #0]
 8025a46:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8025a4a:	18d1      	adds	r1, r2, r3
 8025a4c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8025a50:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8025a54:	1ad3      	subs	r3, r2, r3
 8025a56:	461a      	mov	r2, r3
 8025a58:	f011 fd7e 	bl	8037558 <memcpy>
      n = i + 1;
 8025a5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8025a60:	3301      	adds	r3, #1
 8025a62:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 8025a66:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8025a6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8025a6e:	681b      	ldr	r3, [r3, #0]
 8025a70:	685b      	ldr	r3, [r3, #4]
 8025a72:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8025a76:	429a      	cmp	r2, r3
 8025a78:	d209      	bcs.n	8025a8e <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8025a7a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8025a7e:	3301      	adds	r3, #1
 8025a80:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8025a84:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8025a88:	2bfa      	cmp	r3, #250	@ 0xfa
 8025a8a:	d9a6      	bls.n	80259da <mg_dns_send+0x9a>
 8025a8c:	e000      	b.n	8025a90 <mg_dns_send+0x150>
    if (i >= name->len) break;
 8025a8e:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8025a90:	f107 0214 	add.w	r2, r7, #20
 8025a94:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8025a98:	3308      	adds	r3, #8
 8025a9a:	4413      	add	r3, r2
 8025a9c:	3304      	adds	r3, #4
 8025a9e:	2205      	movs	r2, #5
 8025aa0:	4916      	ldr	r1, [pc, #88]	@ (8025afc <mg_dns_send+0x1bc>)
 8025aa2:	4618      	mov	r0, r3
 8025aa4:	f011 fd58 	bl	8037558 <memcpy>
  n += 5;
 8025aa8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8025aac:	3305      	adds	r3, #5
 8025aae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8025ab2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8025ab6:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 8025aba:	781b      	ldrb	r3, [r3, #0]
 8025abc:	2b00      	cmp	r3, #0
 8025abe:	d009      	beq.n	8025ad4 <mg_dns_send+0x194>
 8025ac0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8025ac4:	3b03      	subs	r3, #3
 8025ac6:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8025aca:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8025ace:	4413      	add	r3, r2
 8025ad0:	221c      	movs	r2, #28
 8025ad2:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8025ad4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8025ad8:	f103 020c 	add.w	r2, r3, #12
 8025adc:	f107 0114 	add.w	r1, r7, #20
 8025ae0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8025ae4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8025ae8:	6818      	ldr	r0, [r3, #0]
 8025aea:	f00b fc1d 	bl	8031328 <mg_send>
 8025aee:	4603      	mov	r3, r0
}
 8025af0:	4618      	mov	r0, r3
 8025af2:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8025af6:	46bd      	mov	sp, r7
 8025af8:	bd90      	pop	{r4, r7, pc}
 8025afa:	bf00      	nop
 8025afc:	08041b10 	.word	0x08041b10

08025b00 <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8025b00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8025b04:	b088      	sub	sp, #32
 8025b06:	af02      	add	r7, sp, #8
 8025b08:	60f8      	str	r0, [r7, #12]
 8025b0a:	60b9      	str	r1, [r7, #8]
 8025b0c:	607a      	str	r2, [r7, #4]
 8025b0e:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8025b10:	2300      	movs	r3, #0
 8025b12:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8025b14:	683b      	ldr	r3, [r7, #0]
 8025b16:	681b      	ldr	r3, [r3, #0]
 8025b18:	2b00      	cmp	r3, #0
 8025b1a:	d104      	bne.n	8025b26 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8025b1c:	494d      	ldr	r1, [pc, #308]	@ (8025c54 <mg_sendnsreq+0x154>)
 8025b1e:	68f8      	ldr	r0, [r7, #12]
 8025b20:	f000 f90e 	bl	8025d40 <mg_error>
 8025b24:	e017      	b.n	8025b56 <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 8025b26:	683b      	ldr	r3, [r7, #0]
 8025b28:	685b      	ldr	r3, [r3, #4]
 8025b2a:	2b00      	cmp	r3, #0
 8025b2c:	d113      	bne.n	8025b56 <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8025b2e:	68fb      	ldr	r3, [r7, #12]
 8025b30:	6858      	ldr	r0, [r3, #4]
 8025b32:	683b      	ldr	r3, [r7, #0]
 8025b34:	6819      	ldr	r1, [r3, #0]
 8025b36:	2300      	movs	r3, #0
 8025b38:	2200      	movs	r2, #0
 8025b3a:	f008 f931 	bl	802dda0 <mg_connect>
 8025b3e:	4602      	mov	r2, r0
 8025b40:	683b      	ldr	r3, [r7, #0]
 8025b42:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 8025b44:	683b      	ldr	r3, [r7, #0]
 8025b46:	685b      	ldr	r3, [r3, #4]
 8025b48:	2b00      	cmp	r3, #0
 8025b4a:	d004      	beq.n	8025b56 <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 8025b4c:	683b      	ldr	r3, [r7, #0]
 8025b4e:	685b      	ldr	r3, [r3, #4]
 8025b50:	4a41      	ldr	r2, [pc, #260]	@ (8025c58 <mg_sendnsreq+0x158>)
 8025b52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 8025b56:	683b      	ldr	r3, [r7, #0]
 8025b58:	685b      	ldr	r3, [r3, #4]
 8025b5a:	2b00      	cmp	r3, #0
 8025b5c:	d104      	bne.n	8025b68 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 8025b5e:	493f      	ldr	r1, [pc, #252]	@ (8025c5c <mg_sendnsreq+0x15c>)
 8025b60:	68f8      	ldr	r0, [r7, #12]
 8025b62:	f000 f8ed 	bl	8025d40 <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 8025b66:	e06f      	b.n	8025c48 <mg_sendnsreq+0x148>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8025b68:	2118      	movs	r1, #24
 8025b6a:	2001      	movs	r0, #1
 8025b6c:	f7ff fae8 	bl	8025140 <mg_calloc>
 8025b70:	6178      	str	r0, [r7, #20]
 8025b72:	697b      	ldr	r3, [r7, #20]
 8025b74:	2b00      	cmp	r3, #0
 8025b76:	d104      	bne.n	8025b82 <mg_sendnsreq+0x82>
    mg_error(c, "resolve OOM");
 8025b78:	4939      	ldr	r1, [pc, #228]	@ (8025c60 <mg_sendnsreq+0x160>)
 8025b7a:	68f8      	ldr	r0, [r7, #12]
 8025b7c:	f000 f8e0 	bl	8025d40 <mg_error>
}
 8025b80:	e062      	b.n	8025c48 <mg_sendnsreq+0x148>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8025b82:	68fb      	ldr	r3, [r7, #12]
 8025b84:	685b      	ldr	r3, [r3, #4]
 8025b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025b88:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8025b8a:	693b      	ldr	r3, [r7, #16]
 8025b8c:	2b00      	cmp	r3, #0
 8025b8e:	d004      	beq.n	8025b9a <mg_sendnsreq+0x9a>
 8025b90:	693b      	ldr	r3, [r7, #16]
 8025b92:	8a1b      	ldrh	r3, [r3, #16]
 8025b94:	3301      	adds	r3, #1
 8025b96:	b29a      	uxth	r2, r3
 8025b98:	e000      	b.n	8025b9c <mg_sendnsreq+0x9c>
 8025b9a:	2201      	movs	r2, #1
 8025b9c:	697b      	ldr	r3, [r7, #20]
 8025b9e:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8025ba0:	68fb      	ldr	r3, [r7, #12]
 8025ba2:	685b      	ldr	r3, [r3, #4]
 8025ba4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8025ba6:	697b      	ldr	r3, [r7, #20]
 8025ba8:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 8025baa:	68fb      	ldr	r3, [r7, #12]
 8025bac:	685b      	ldr	r3, [r3, #4]
 8025bae:	697a      	ldr	r2, [r7, #20]
 8025bb0:	631a      	str	r2, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8025bb2:	f00d f9c3 	bl	8032f3c <mg_millis>
 8025bb6:	4602      	mov	r2, r0
 8025bb8:	460b      	mov	r3, r1
 8025bba:	6879      	ldr	r1, [r7, #4]
 8025bbc:	17c8      	asrs	r0, r1, #31
 8025bbe:	460c      	mov	r4, r1
 8025bc0:	4605      	mov	r5, r0
 8025bc2:	eb12 0804 	adds.w	r8, r2, r4
 8025bc6:	eb43 0905 	adc.w	r9, r3, r5
 8025bca:	697b      	ldr	r3, [r7, #20]
 8025bcc:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 8025bd0:	697b      	ldr	r3, [r7, #20]
 8025bd2:	68fa      	ldr	r2, [r7, #12]
 8025bd4:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8025bd6:	68fa      	ldr	r2, [r7, #12]
 8025bd8:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8025bdc:	f043 0308 	orr.w	r3, r3, #8
 8025be0:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8025be4:	4b1f      	ldr	r3, [pc, #124]	@ (8025c64 <mg_sendnsreq+0x164>)
 8025be6:	681b      	ldr	r3, [r3, #0]
 8025be8:	2b03      	cmp	r3, #3
 8025bea:	dd18      	ble.n	8025c1e <mg_sendnsreq+0x11e>
 8025bec:	4b1e      	ldr	r3, [pc, #120]	@ (8025c68 <mg_sendnsreq+0x168>)
 8025bee:	f240 521e 	movw	r2, #1310	@ 0x51e
 8025bf2:	491e      	ldr	r1, [pc, #120]	@ (8025c6c <mg_sendnsreq+0x16c>)
 8025bf4:	2004      	movs	r0, #4
 8025bf6:	f005 fc69 	bl	802b4cc <mg_log_prefix>
 8025bfa:	68fb      	ldr	r3, [r7, #12]
 8025bfc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8025bfe:	68bb      	ldr	r3, [r7, #8]
 8025c00:	685b      	ldr	r3, [r3, #4]
 8025c02:	461c      	mov	r4, r3
 8025c04:	68bb      	ldr	r3, [r7, #8]
 8025c06:	6818      	ldr	r0, [r3, #0]
 8025c08:	683b      	ldr	r3, [r7, #0]
 8025c0a:	681b      	ldr	r3, [r3, #0]
 8025c0c:	697a      	ldr	r2, [r7, #20]
 8025c0e:	8a12      	ldrh	r2, [r2, #16]
 8025c10:	9201      	str	r2, [sp, #4]
 8025c12:	9300      	str	r3, [sp, #0]
 8025c14:	4603      	mov	r3, r0
 8025c16:	4622      	mov	r2, r4
 8025c18:	4815      	ldr	r0, [pc, #84]	@ (8025c70 <mg_sendnsreq+0x170>)
 8025c1a:	f005 fca7 	bl	802b56c <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8025c1e:	683b      	ldr	r3, [r7, #0]
 8025c20:	6858      	ldr	r0, [r3, #4]
 8025c22:	697b      	ldr	r3, [r7, #20]
 8025c24:	8a1a      	ldrh	r2, [r3, #16]
 8025c26:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8025c2a:	68b9      	ldr	r1, [r7, #8]
 8025c2c:	f7ff fe88 	bl	8025940 <mg_dns_send>
 8025c30:	4603      	mov	r3, r0
 8025c32:	f083 0301 	eor.w	r3, r3, #1
 8025c36:	b2db      	uxtb	r3, r3
 8025c38:	2b00      	cmp	r3, #0
 8025c3a:	d005      	beq.n	8025c48 <mg_sendnsreq+0x148>
      mg_error(dnsc->c, "DNS send");
 8025c3c:	683b      	ldr	r3, [r7, #0]
 8025c3e:	685b      	ldr	r3, [r3, #4]
 8025c40:	490c      	ldr	r1, [pc, #48]	@ (8025c74 <mg_sendnsreq+0x174>)
 8025c42:	4618      	mov	r0, r3
 8025c44:	f000 f87c 	bl	8025d40 <mg_error>
}
 8025c48:	bf00      	nop
 8025c4a:	3718      	adds	r7, #24
 8025c4c:	46bd      	mov	sp, r7
 8025c4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8025c52:	bf00      	nop
 8025c54:	08041b18 	.word	0x08041b18
 8025c58:	08025645 	.word	0x08025645
 8025c5c:	08041b44 	.word	0x08041b44
 8025c60:	08041b50 	.word	0x08041b50
 8025c64:	200002a8 	.word	0x200002a8
 8025c68:	08044a34 	.word	0x08044a34
 8025c6c:	08041a30 	.word	0x08041a30
 8025c70:	08041b5c 	.word	0x08041b5c
 8025c74:	08041b80 	.word	0x08041b80

08025c78 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8025c78:	b580      	push	{r7, lr}
 8025c7a:	b088      	sub	sp, #32
 8025c7c:	af02      	add	r7, sp, #8
 8025c7e:	6078      	str	r0, [r7, #4]
 8025c80:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 8025c82:	f107 030c 	add.w	r3, r7, #12
 8025c86:	6839      	ldr	r1, [r7, #0]
 8025c88:	4618      	mov	r0, r3
 8025c8a:	f00c ff96 	bl	8032bba <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8025c8e:	6838      	ldr	r0, [r7, #0]
 8025c90:	f00c ffc6 	bl	8032c20 <mg_url_port>
 8025c94:	4603      	mov	r3, r0
 8025c96:	4618      	mov	r0, r3
 8025c98:	f00d f8bf 	bl	8032e1a <mg_ntohs>
 8025c9c:	4603      	mov	r3, r0
 8025c9e:	461a      	mov	r2, r3
 8025ca0:	687b      	ldr	r3, [r7, #4]
 8025ca2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8025ca4:	687b      	ldr	r3, [r7, #4]
 8025ca6:	331c      	adds	r3, #28
 8025ca8:	461a      	mov	r2, r3
 8025caa:	f107 030c 	add.w	r3, r7, #12
 8025cae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025cb2:	f007 ffa6 	bl	802dc02 <mg_aton>
 8025cb6:	4603      	mov	r3, r0
 8025cb8:	2b00      	cmp	r3, #0
 8025cba:	d003      	beq.n	8025cc4 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 8025cbc:	6878      	ldr	r0, [r7, #4]
 8025cbe:	f00b f85d 	bl	8030d7c <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 8025cc2:	e019      	b.n	8025cf8 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8025cc4:	687b      	ldr	r3, [r7, #4]
 8025cc6:	685b      	ldr	r3, [r3, #4]
 8025cc8:	7e1b      	ldrb	r3, [r3, #24]
 8025cca:	2b00      	cmp	r3, #0
 8025ccc:	d003      	beq.n	8025cd6 <mg_resolve+0x5e>
 8025cce:	687b      	ldr	r3, [r7, #4]
 8025cd0:	685b      	ldr	r3, [r3, #4]
 8025cd2:	330c      	adds	r3, #12
 8025cd4:	e002      	b.n	8025cdc <mg_resolve+0x64>
 8025cd6:	687b      	ldr	r3, [r7, #4]
 8025cd8:	685b      	ldr	r3, [r3, #4]
 8025cda:	3304      	adds	r3, #4
 8025cdc:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8025cde:	687b      	ldr	r3, [r7, #4]
 8025ce0:	685b      	ldr	r3, [r3, #4]
 8025ce2:	695a      	ldr	r2, [r3, #20]
 8025ce4:	687b      	ldr	r3, [r7, #4]
 8025ce6:	685b      	ldr	r3, [r3, #4]
 8025ce8:	7e1b      	ldrb	r3, [r3, #24]
 8025cea:	f107 010c 	add.w	r1, r7, #12
 8025cee:	9300      	str	r3, [sp, #0]
 8025cf0:	697b      	ldr	r3, [r7, #20]
 8025cf2:	6878      	ldr	r0, [r7, #4]
 8025cf4:	f7ff ff04 	bl	8025b00 <mg_sendnsreq>
}
 8025cf8:	bf00      	nop
 8025cfa:	3718      	adds	r7, #24
 8025cfc:	46bd      	mov	sp, r7
 8025cfe:	bd80      	pop	{r7, pc}

08025d00 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8025d00:	b580      	push	{r7, lr}
 8025d02:	b084      	sub	sp, #16
 8025d04:	af00      	add	r7, sp, #0
 8025d06:	60f8      	str	r0, [r7, #12]
 8025d08:	60b9      	str	r1, [r7, #8]
 8025d0a:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8025d0c:	68fb      	ldr	r3, [r7, #12]
 8025d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8025d12:	2b00      	cmp	r3, #0
 8025d14:	d006      	beq.n	8025d24 <mg_call+0x24>
 8025d16:	68fb      	ldr	r3, [r7, #12]
 8025d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8025d1c:	687a      	ldr	r2, [r7, #4]
 8025d1e:	68b9      	ldr	r1, [r7, #8]
 8025d20:	68f8      	ldr	r0, [r7, #12]
 8025d22:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8025d24:	68fb      	ldr	r3, [r7, #12]
 8025d26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8025d28:	2b00      	cmp	r3, #0
 8025d2a:	d005      	beq.n	8025d38 <mg_call+0x38>
 8025d2c:	68fb      	ldr	r3, [r7, #12]
 8025d2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8025d30:	687a      	ldr	r2, [r7, #4]
 8025d32:	68b9      	ldr	r1, [r7, #8]
 8025d34:	68f8      	ldr	r0, [r7, #12]
 8025d36:	4798      	blx	r3
}
 8025d38:	bf00      	nop
 8025d3a:	3710      	adds	r7, #16
 8025d3c:	46bd      	mov	sp, r7
 8025d3e:	bd80      	pop	{r7, pc}

08025d40 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8025d40:	b40e      	push	{r1, r2, r3}
 8025d42:	b580      	push	{r7, lr}
 8025d44:	b095      	sub	sp, #84	@ 0x54
 8025d46:	af00      	add	r7, sp, #0
 8025d48:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8025d4a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8025d4e:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8025d50:	f107 030c 	add.w	r3, r7, #12
 8025d54:	f107 0010 	add.w	r0, r7, #16
 8025d58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8025d5a:	2140      	movs	r1, #64	@ 0x40
 8025d5c:	f00b fbaa 	bl	80314b4 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8025d60:	4b14      	ldr	r3, [pc, #80]	@ (8025db4 <mg_error+0x74>)
 8025d62:	681b      	ldr	r3, [r3, #0]
 8025d64:	2b00      	cmp	r3, #0
 8025d66:	dd0f      	ble.n	8025d88 <mg_error+0x48>
 8025d68:	4b13      	ldr	r3, [pc, #76]	@ (8025db8 <mg_error+0x78>)
 8025d6a:	f240 5253 	movw	r2, #1363	@ 0x553
 8025d6e:	4913      	ldr	r1, [pc, #76]	@ (8025dbc <mg_error+0x7c>)
 8025d70:	2001      	movs	r0, #1
 8025d72:	f005 fbab 	bl	802b4cc <mg_log_prefix>
 8025d76:	687b      	ldr	r3, [r7, #4]
 8025d78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8025d7a:	687b      	ldr	r3, [r7, #4]
 8025d7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8025d7e:	f107 0310 	add.w	r3, r7, #16
 8025d82:	480f      	ldr	r0, [pc, #60]	@ (8025dc0 <mg_error+0x80>)
 8025d84:	f005 fbf2 	bl	802b56c <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8025d88:	687a      	ldr	r2, [r7, #4]
 8025d8a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8025d8e:	f043 0320 	orr.w	r3, r3, #32
 8025d92:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8025d96:	f107 0310 	add.w	r3, r7, #16
 8025d9a:	461a      	mov	r2, r3
 8025d9c:	2100      	movs	r1, #0
 8025d9e:	6878      	ldr	r0, [r7, #4]
 8025da0:	f7ff ffae 	bl	8025d00 <mg_call>
}
 8025da4:	bf00      	nop
 8025da6:	3754      	adds	r7, #84	@ 0x54
 8025da8:	46bd      	mov	sp, r7
 8025daa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8025dae:	b003      	add	sp, #12
 8025db0:	4770      	bx	lr
 8025db2:	bf00      	nop
 8025db4:	200002a8 	.word	0x200002a8
 8025db8:	08044a44 	.word	0x08044a44
 8025dbc:	08041a30 	.word	0x08041a30
 8025dc0:	08041b8c 	.word	0x08041b8c

08025dc4 <is_digit>:
#endif




static bool is_digit(int c) {
 8025dc4:	b480      	push	{r7}
 8025dc6:	b083      	sub	sp, #12
 8025dc8:	af00      	add	r7, sp, #0
 8025dca:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8025dcc:	687b      	ldr	r3, [r7, #4]
 8025dce:	2b2f      	cmp	r3, #47	@ 0x2f
 8025dd0:	dd04      	ble.n	8025ddc <is_digit+0x18>
 8025dd2:	687b      	ldr	r3, [r7, #4]
 8025dd4:	2b39      	cmp	r3, #57	@ 0x39
 8025dd6:	dc01      	bgt.n	8025ddc <is_digit+0x18>
 8025dd8:	2301      	movs	r3, #1
 8025dda:	e000      	b.n	8025dde <is_digit+0x1a>
 8025ddc:	2300      	movs	r3, #0
 8025dde:	f003 0301 	and.w	r3, r3, #1
 8025de2:	b2db      	uxtb	r3, r3
}
 8025de4:	4618      	mov	r0, r3
 8025de6:	370c      	adds	r7, #12
 8025de8:	46bd      	mov	sp, r7
 8025dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dee:	4770      	bx	lr

08025df0 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8025df0:	b480      	push	{r7}
 8025df2:	b087      	sub	sp, #28
 8025df4:	af00      	add	r7, sp, #0
 8025df6:	60f8      	str	r0, [r7, #12]
 8025df8:	60b9      	str	r1, [r7, #8]
 8025dfa:	607a      	str	r2, [r7, #4]
  int n = 0;
 8025dfc:	2300      	movs	r3, #0
 8025dfe:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8025e00:	697b      	ldr	r3, [r7, #20]
 8025e02:	1c5a      	adds	r2, r3, #1
 8025e04:	617a      	str	r2, [r7, #20]
 8025e06:	461a      	mov	r2, r3
 8025e08:	68fb      	ldr	r3, [r7, #12]
 8025e0a:	4413      	add	r3, r2
 8025e0c:	2265      	movs	r2, #101	@ 0x65
 8025e0e:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8025e10:	697b      	ldr	r3, [r7, #20]
 8025e12:	1c5a      	adds	r2, r3, #1
 8025e14:	617a      	str	r2, [r7, #20]
 8025e16:	461a      	mov	r2, r3
 8025e18:	68fb      	ldr	r3, [r7, #12]
 8025e1a:	4413      	add	r3, r2
 8025e1c:	687a      	ldr	r2, [r7, #4]
 8025e1e:	b2d2      	uxtb	r2, r2
 8025e20:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8025e22:	68bb      	ldr	r3, [r7, #8]
 8025e24:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8025e28:	dd01      	ble.n	8025e2e <addexp+0x3e>
 8025e2a:	2300      	movs	r3, #0
 8025e2c:	e057      	b.n	8025ede <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8025e2e:	68bb      	ldr	r3, [r7, #8]
 8025e30:	2b09      	cmp	r3, #9
 8025e32:	dc07      	bgt.n	8025e44 <addexp+0x54>
 8025e34:	697b      	ldr	r3, [r7, #20]
 8025e36:	1c5a      	adds	r2, r3, #1
 8025e38:	617a      	str	r2, [r7, #20]
 8025e3a:	461a      	mov	r2, r3
 8025e3c:	68fb      	ldr	r3, [r7, #12]
 8025e3e:	4413      	add	r3, r2
 8025e40:	2230      	movs	r2, #48	@ 0x30
 8025e42:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8025e44:	68bb      	ldr	r3, [r7, #8]
 8025e46:	2b63      	cmp	r3, #99	@ 0x63
 8025e48:	dd1c      	ble.n	8025e84 <addexp+0x94>
 8025e4a:	68bb      	ldr	r3, [r7, #8]
 8025e4c:	4a27      	ldr	r2, [pc, #156]	@ (8025eec <addexp+0xfc>)
 8025e4e:	fb82 1203 	smull	r1, r2, r2, r3
 8025e52:	1152      	asrs	r2, r2, #5
 8025e54:	17db      	asrs	r3, r3, #31
 8025e56:	1ad3      	subs	r3, r2, r3
 8025e58:	b2da      	uxtb	r2, r3
 8025e5a:	697b      	ldr	r3, [r7, #20]
 8025e5c:	1c59      	adds	r1, r3, #1
 8025e5e:	6179      	str	r1, [r7, #20]
 8025e60:	4619      	mov	r1, r3
 8025e62:	68fb      	ldr	r3, [r7, #12]
 8025e64:	440b      	add	r3, r1
 8025e66:	3230      	adds	r2, #48	@ 0x30
 8025e68:	b2d2      	uxtb	r2, r2
 8025e6a:	701a      	strb	r2, [r3, #0]
 8025e6c:	68bb      	ldr	r3, [r7, #8]
 8025e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8025eec <addexp+0xfc>)
 8025e70:	fb82 1203 	smull	r1, r2, r2, r3
 8025e74:	1151      	asrs	r1, r2, #5
 8025e76:	17da      	asrs	r2, r3, #31
 8025e78:	1a8a      	subs	r2, r1, r2
 8025e7a:	2164      	movs	r1, #100	@ 0x64
 8025e7c:	fb01 f202 	mul.w	r2, r1, r2
 8025e80:	1a9b      	subs	r3, r3, r2
 8025e82:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8025e84:	68bb      	ldr	r3, [r7, #8]
 8025e86:	2b09      	cmp	r3, #9
 8025e88:	dd1d      	ble.n	8025ec6 <addexp+0xd6>
 8025e8a:	68bb      	ldr	r3, [r7, #8]
 8025e8c:	4a18      	ldr	r2, [pc, #96]	@ (8025ef0 <addexp+0x100>)
 8025e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8025e92:	1092      	asrs	r2, r2, #2
 8025e94:	17db      	asrs	r3, r3, #31
 8025e96:	1ad3      	subs	r3, r2, r3
 8025e98:	b2da      	uxtb	r2, r3
 8025e9a:	697b      	ldr	r3, [r7, #20]
 8025e9c:	1c59      	adds	r1, r3, #1
 8025e9e:	6179      	str	r1, [r7, #20]
 8025ea0:	4619      	mov	r1, r3
 8025ea2:	68fb      	ldr	r3, [r7, #12]
 8025ea4:	440b      	add	r3, r1
 8025ea6:	3230      	adds	r2, #48	@ 0x30
 8025ea8:	b2d2      	uxtb	r2, r2
 8025eaa:	701a      	strb	r2, [r3, #0]
 8025eac:	68ba      	ldr	r2, [r7, #8]
 8025eae:	4b10      	ldr	r3, [pc, #64]	@ (8025ef0 <addexp+0x100>)
 8025eb0:	fb83 1302 	smull	r1, r3, r3, r2
 8025eb4:	1099      	asrs	r1, r3, #2
 8025eb6:	17d3      	asrs	r3, r2, #31
 8025eb8:	1ac9      	subs	r1, r1, r3
 8025eba:	460b      	mov	r3, r1
 8025ebc:	009b      	lsls	r3, r3, #2
 8025ebe:	440b      	add	r3, r1
 8025ec0:	005b      	lsls	r3, r3, #1
 8025ec2:	1ad3      	subs	r3, r2, r3
 8025ec4:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8025ec6:	68bb      	ldr	r3, [r7, #8]
 8025ec8:	b2da      	uxtb	r2, r3
 8025eca:	697b      	ldr	r3, [r7, #20]
 8025ecc:	1c59      	adds	r1, r3, #1
 8025ece:	6179      	str	r1, [r7, #20]
 8025ed0:	4619      	mov	r1, r3
 8025ed2:	68fb      	ldr	r3, [r7, #12]
 8025ed4:	440b      	add	r3, r1
 8025ed6:	3230      	adds	r2, #48	@ 0x30
 8025ed8:	b2d2      	uxtb	r2, r2
 8025eda:	701a      	strb	r2, [r3, #0]
  return n;
 8025edc:	697b      	ldr	r3, [r7, #20]
}
 8025ede:	4618      	mov	r0, r3
 8025ee0:	371c      	adds	r7, #28
 8025ee2:	46bd      	mov	sp, r7
 8025ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ee8:	4770      	bx	lr
 8025eea:	bf00      	nop
 8025eec:	51eb851f 	.word	0x51eb851f
 8025ef0:	66666667 	.word	0x66666667

08025ef4 <xisinf>:

static int xisinf(double x) {
 8025ef4:	b480      	push	{r7}
 8025ef6:	b085      	sub	sp, #20
 8025ef8:	af00      	add	r7, sp, #0
 8025efa:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8025efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025f02:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8025f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025f0a:	f04f 0200 	mov.w	r2, #0
 8025f0e:	f04f 0300 	mov.w	r3, #0
 8025f12:	000a      	movs	r2, r1
 8025f14:	2300      	movs	r3, #0
 8025f16:	4613      	mov	r3, r2
 8025f18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8025f1c:	4a08      	ldr	r2, [pc, #32]	@ (8025f40 <xisinf+0x4c>)
 8025f1e:	4293      	cmp	r3, r2
 8025f20:	d106      	bne.n	8025f30 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8025f22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8025f26:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8025f28:	2b00      	cmp	r3, #0
 8025f2a:	d101      	bne.n	8025f30 <xisinf+0x3c>
 8025f2c:	2301      	movs	r3, #1
 8025f2e:	e000      	b.n	8025f32 <xisinf+0x3e>
 8025f30:	2300      	movs	r3, #0
}
 8025f32:	4618      	mov	r0, r3
 8025f34:	3714      	adds	r7, #20
 8025f36:	46bd      	mov	sp, r7
 8025f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f3c:	4770      	bx	lr
 8025f3e:	bf00      	nop
 8025f40:	7ff00000 	.word	0x7ff00000

08025f44 <xisnan>:

static int xisnan(double x) {
 8025f44:	b480      	push	{r7}
 8025f46:	b085      	sub	sp, #20
 8025f48:	af00      	add	r7, sp, #0
 8025f4a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8025f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025f52:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8025f56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025f5a:	f04f 0200 	mov.w	r2, #0
 8025f5e:	f04f 0300 	mov.w	r3, #0
 8025f62:	000a      	movs	r2, r1
 8025f64:	2300      	movs	r3, #0
 8025f66:	4613      	mov	r3, r2
 8025f68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8025f6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8025f70:	4613      	mov	r3, r2
 8025f72:	2b00      	cmp	r3, #0
 8025f74:	bf14      	ite	ne
 8025f76:	2301      	movne	r3, #1
 8025f78:	2300      	moveq	r3, #0
 8025f7a:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8025f7c:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8025f7e:	4a06      	ldr	r2, [pc, #24]	@ (8025f98 <xisnan+0x54>)
 8025f80:	4293      	cmp	r3, r2
 8025f82:	bf8c      	ite	hi
 8025f84:	2301      	movhi	r3, #1
 8025f86:	2300      	movls	r3, #0
 8025f88:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8025f8a:	4618      	mov	r0, r3
 8025f8c:	3714      	adds	r7, #20
 8025f8e:	46bd      	mov	sp, r7
 8025f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f94:	4770      	bx	lr
 8025f96:	bf00      	nop
 8025f98:	7ff00000 	.word	0x7ff00000
 8025f9c:	00000000 	.word	0x00000000

08025fa0 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8025fa0:	b5b0      	push	{r4, r5, r7, lr}
 8025fa2:	b09e      	sub	sp, #120	@ 0x78
 8025fa4:	af02      	add	r7, sp, #8
 8025fa6:	6178      	str	r0, [r7, #20]
 8025fa8:	6139      	str	r1, [r7, #16]
 8025faa:	ed87 0b02 	vstr	d0, [r7, #8]
 8025fae:	607a      	str	r2, [r7, #4]
 8025fb0:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8025fb2:	2300      	movs	r3, #0
 8025fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8025fb6:	2300      	movs	r3, #0
 8025fb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8025fba:	2300      	movs	r3, #0
 8025fbc:	663b      	str	r3, [r7, #96]	@ 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8025fbe:	f04f 0200 	mov.w	r2, #0
 8025fc2:	f04f 0300 	mov.w	r3, #0
 8025fc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025fca:	f7ea fd95 	bl	8010af8 <__aeabi_dcmpeq>
 8025fce:	4603      	mov	r3, r0
 8025fd0:	2b00      	cmp	r3, #0
 8025fd2:	d007      	beq.n	8025fe4 <mg_dtoa+0x44>
 8025fd4:	4b7f      	ldr	r3, [pc, #508]	@ (80261d4 <mg_dtoa+0x234>)
 8025fd6:	4a80      	ldr	r2, [pc, #512]	@ (80261d8 <mg_dtoa+0x238>)
 8025fd8:	6939      	ldr	r1, [r7, #16]
 8025fda:	6978      	ldr	r0, [r7, #20]
 8025fdc:	f00b fa92 	bl	8031504 <mg_snprintf>
 8025fe0:	4603      	mov	r3, r0
 8025fe2:	e2c9      	b.n	8026578 <mg_dtoa+0x5d8>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8025fe4:	ed97 0b02 	vldr	d0, [r7, #8]
 8025fe8:	f7ff ff84 	bl	8025ef4 <xisinf>
 8025fec:	4603      	mov	r3, r0
 8025fee:	2b00      	cmp	r3, #0
 8025ff0:	d014      	beq.n	802601c <mg_dtoa+0x7c>
 8025ff2:	f04f 0200 	mov.w	r2, #0
 8025ff6:	f04f 0300 	mov.w	r3, #0
 8025ffa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025ffe:	f7ea fda3 	bl	8010b48 <__aeabi_dcmpgt>
 8026002:	4603      	mov	r3, r0
 8026004:	2b00      	cmp	r3, #0
 8026006:	d001      	beq.n	802600c <mg_dtoa+0x6c>
 8026008:	4b74      	ldr	r3, [pc, #464]	@ (80261dc <mg_dtoa+0x23c>)
 802600a:	e000      	b.n	802600e <mg_dtoa+0x6e>
 802600c:	4b74      	ldr	r3, [pc, #464]	@ (80261e0 <mg_dtoa+0x240>)
 802600e:	4a72      	ldr	r2, [pc, #456]	@ (80261d8 <mg_dtoa+0x238>)
 8026010:	6939      	ldr	r1, [r7, #16]
 8026012:	6978      	ldr	r0, [r7, #20]
 8026014:	f00b fa76 	bl	8031504 <mg_snprintf>
 8026018:	4603      	mov	r3, r0
 802601a:	e2ad      	b.n	8026578 <mg_dtoa+0x5d8>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 802601c:	ed97 0b02 	vldr	d0, [r7, #8]
 8026020:	f7ff ff90 	bl	8025f44 <xisnan>
 8026024:	4603      	mov	r3, r0
 8026026:	2b00      	cmp	r3, #0
 8026028:	d007      	beq.n	802603a <mg_dtoa+0x9a>
 802602a:	4b6e      	ldr	r3, [pc, #440]	@ (80261e4 <mg_dtoa+0x244>)
 802602c:	4a6a      	ldr	r2, [pc, #424]	@ (80261d8 <mg_dtoa+0x238>)
 802602e:	6939      	ldr	r1, [r7, #16]
 8026030:	6978      	ldr	r0, [r7, #20]
 8026032:	f00b fa67 	bl	8031504 <mg_snprintf>
 8026036:	4603      	mov	r3, r0
 8026038:	e29e      	b.n	8026578 <mg_dtoa+0x5d8>
  if (d < 0.0) d = -d, buf[s++] = '-';
 802603a:	f04f 0200 	mov.w	r2, #0
 802603e:	f04f 0300 	mov.w	r3, #0
 8026042:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8026046:	f7ea fd61 	bl	8010b0c <__aeabi_dcmplt>
 802604a:	4603      	mov	r3, r0
 802604c:	2b00      	cmp	r3, #0
 802604e:	d00d      	beq.n	802606c <mg_dtoa+0xcc>
 8026050:	68bc      	ldr	r4, [r7, #8]
 8026052:	68fb      	ldr	r3, [r7, #12]
 8026054:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8026058:	e9c7 4502 	strd	r4, r5, [r7, #8]
 802605c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802605e:	1c5a      	adds	r2, r3, #1
 8026060:	66ba      	str	r2, [r7, #104]	@ 0x68
 8026062:	3370      	adds	r3, #112	@ 0x70
 8026064:	443b      	add	r3, r7
 8026066:	222d      	movs	r2, #45	@ 0x2d
 8026068:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 802606c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8026070:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  mul = 1.0;
 8026074:	f04f 0200 	mov.w	r2, #0
 8026078:	4b5b      	ldr	r3, [pc, #364]	@ (80261e8 <mg_dtoa+0x248>)
 802607a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 802607e:	e00a      	b.n	8026096 <mg_dtoa+0xf6>
 8026080:	f04f 0200 	mov.w	r2, #0
 8026084:	4b59      	ldr	r3, [pc, #356]	@ (80261ec <mg_dtoa+0x24c>)
 8026086:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 802608a:	f7ea facd 	bl	8010628 <__aeabi_dmul>
 802608e:	4602      	mov	r2, r0
 8026090:	460b      	mov	r3, r1
 8026092:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8026096:	f04f 0200 	mov.w	r2, #0
 802609a:	4b54      	ldr	r3, [pc, #336]	@ (80261ec <mg_dtoa+0x24c>)
 802609c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80260a0:	f7ea fd48 	bl	8010b34 <__aeabi_dcmpge>
 80260a4:	4603      	mov	r3, r0
 80260a6:	2b00      	cmp	r3, #0
 80260a8:	d011      	beq.n	80260ce <mg_dtoa+0x12e>
 80260aa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80260ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80260b2:	f7ea fbe3 	bl	801087c <__aeabi_ddiv>
 80260b6:	4602      	mov	r2, r0
 80260b8:	460b      	mov	r3, r1
 80260ba:	4610      	mov	r0, r2
 80260bc:	4619      	mov	r1, r3
 80260be:	f04f 0200 	mov.w	r2, #0
 80260c2:	4b4a      	ldr	r3, [pc, #296]	@ (80261ec <mg_dtoa+0x24c>)
 80260c4:	f7ea fd36 	bl	8010b34 <__aeabi_dcmpge>
 80260c8:	4603      	mov	r3, r0
 80260ca:	2b00      	cmp	r3, #0
 80260cc:	d1d8      	bne.n	8026080 <mg_dtoa+0xe0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 80260ce:	e00a      	b.n	80260e6 <mg_dtoa+0x146>
 80260d0:	f04f 0200 	mov.w	r2, #0
 80260d4:	4b45      	ldr	r3, [pc, #276]	@ (80261ec <mg_dtoa+0x24c>)
 80260d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80260da:	f7ea fbcf 	bl	801087c <__aeabi_ddiv>
 80260de:	4602      	mov	r2, r0
 80260e0:	460b      	mov	r3, r1
 80260e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80260e6:	f04f 0200 	mov.w	r2, #0
 80260ea:	4b3f      	ldr	r3, [pc, #252]	@ (80261e8 <mg_dtoa+0x248>)
 80260ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80260f0:	f7ea fd16 	bl	8010b20 <__aeabi_dcmple>
 80260f4:	4603      	mov	r3, r0
 80260f6:	2b00      	cmp	r3, #0
 80260f8:	d011      	beq.n	802611e <mg_dtoa+0x17e>
 80260fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80260fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8026102:	f7ea fbbb 	bl	801087c <__aeabi_ddiv>
 8026106:	4602      	mov	r2, r0
 8026108:	460b      	mov	r3, r1
 802610a:	4610      	mov	r0, r2
 802610c:	4619      	mov	r1, r3
 802610e:	f04f 0200 	mov.w	r2, #0
 8026112:	4b35      	ldr	r3, [pc, #212]	@ (80261e8 <mg_dtoa+0x248>)
 8026114:	f7ea fd04 	bl	8010b20 <__aeabi_dcmple>
 8026118:	4603      	mov	r3, r0
 802611a:	2b00      	cmp	r3, #0
 802611c:	d1d8      	bne.n	80260d0 <mg_dtoa+0x130>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 802611e:	2300      	movs	r3, #0
 8026120:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8026122:	f04f 0200 	mov.w	r2, #0
 8026126:	4b32      	ldr	r3, [pc, #200]	@ (80261f0 <mg_dtoa+0x250>)
 8026128:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 802612c:	f7ea fa7c 	bl	8010628 <__aeabi_dmul>
 8026130:	4602      	mov	r2, r0
 8026132:	460b      	mov	r3, r1
 8026134:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8026138:	e00d      	b.n	8026156 <mg_dtoa+0x1b6>
 802613a:	f04f 0200 	mov.w	r2, #0
 802613e:	4b2b      	ldr	r3, [pc, #172]	@ (80261ec <mg_dtoa+0x24c>)
 8026140:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8026144:	f7ea fb9a 	bl	801087c <__aeabi_ddiv>
 8026148:	4602      	mov	r2, r0
 802614a:	460b      	mov	r3, r1
 802614c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8026150:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8026152:	3301      	adds	r3, #1
 8026154:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8026156:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8026158:	687b      	ldr	r3, [r7, #4]
 802615a:	429a      	cmp	r2, r3
 802615c:	dbed      	blt.n	802613a <mg_dtoa+0x19a>
  d += t;
 802615e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8026162:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8026166:	f7ea f8a9 	bl	80102bc <__adddf3>
 802616a:	4602      	mov	r2, r0
 802616c:	460b      	mov	r3, r1
 802616e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8026172:	f04f 0200 	mov.w	r2, #0
 8026176:	4b1c      	ldr	r3, [pc, #112]	@ (80261e8 <mg_dtoa+0x248>)
 8026178:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 802617c:	e00d      	b.n	802619a <mg_dtoa+0x1fa>
 802617e:	f04f 0200 	mov.w	r2, #0
 8026182:	4b1a      	ldr	r3, [pc, #104]	@ (80261ec <mg_dtoa+0x24c>)
 8026184:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8026188:	f7ea fa4e 	bl	8010628 <__aeabi_dmul>
 802618c:	4602      	mov	r2, r0
 802618e:	460b      	mov	r3, r1
 8026190:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8026194:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8026196:	3301      	adds	r3, #1
 8026198:	663b      	str	r3, [r7, #96]	@ 0x60
 802619a:	f04f 0200 	mov.w	r2, #0
 802619e:	4b13      	ldr	r3, [pc, #76]	@ (80261ec <mg_dtoa+0x24c>)
 80261a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80261a4:	f7ea fcc6 	bl	8010b34 <__aeabi_dcmpge>
 80261a8:	4603      	mov	r3, r0
 80261aa:	2b00      	cmp	r3, #0
 80261ac:	d011      	beq.n	80261d2 <mg_dtoa+0x232>
 80261ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80261b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80261b6:	f7ea fb61 	bl	801087c <__aeabi_ddiv>
 80261ba:	4602      	mov	r2, r0
 80261bc:	460b      	mov	r3, r1
 80261be:	4610      	mov	r0, r2
 80261c0:	4619      	mov	r1, r3
 80261c2:	f04f 0200 	mov.w	r2, #0
 80261c6:	4b09      	ldr	r3, [pc, #36]	@ (80261ec <mg_dtoa+0x24c>)
 80261c8:	f7ea fcb4 	bl	8010b34 <__aeabi_dcmpge>
 80261cc:	4603      	mov	r3, r0
 80261ce:	2b00      	cmp	r3, #0
 80261d0:	d1d5      	bne.n	802617e <mg_dtoa+0x1de>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 80261d2:	e01d      	b.n	8026210 <mg_dtoa+0x270>
 80261d4:	08041b98 	.word	0x08041b98
 80261d8:	08041b9c 	.word	0x08041b9c
 80261dc:	08041ba0 	.word	0x08041ba0
 80261e0:	08041ba4 	.word	0x08041ba4
 80261e4:	08041bac 	.word	0x08041bac
 80261e8:	3ff00000 	.word	0x3ff00000
 80261ec:	40240000 	.word	0x40240000
 80261f0:	40140000 	.word	0x40140000
 80261f4:	f04f 0200 	mov.w	r2, #0
 80261f8:	4b9d      	ldr	r3, [pc, #628]	@ (8026470 <mg_dtoa+0x4d0>)
 80261fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80261fe:	f7ea fb3d 	bl	801087c <__aeabi_ddiv>
 8026202:	4602      	mov	r2, r0
 8026204:	460b      	mov	r3, r1
 8026206:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 802620a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802620c:	3b01      	subs	r3, #1
 802620e:	663b      	str	r3, [r7, #96]	@ 0x60
 8026210:	f04f 0200 	mov.w	r2, #0
 8026214:	4b97      	ldr	r3, [pc, #604]	@ (8026474 <mg_dtoa+0x4d4>)
 8026216:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802621a:	f7ea fc77 	bl	8010b0c <__aeabi_dcmplt>
 802621e:	4603      	mov	r3, r0
 8026220:	2b00      	cmp	r3, #0
 8026222:	d011      	beq.n	8026248 <mg_dtoa+0x2a8>
 8026224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8026228:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802622c:	f7ea fb26 	bl	801087c <__aeabi_ddiv>
 8026230:	4602      	mov	r2, r0
 8026232:	460b      	mov	r3, r1
 8026234:	4610      	mov	r0, r2
 8026236:	4619      	mov	r1, r3
 8026238:	f04f 0200 	mov.w	r2, #0
 802623c:	4b8d      	ldr	r3, [pc, #564]	@ (8026474 <mg_dtoa+0x4d4>)
 802623e:	f7ea fc65 	bl	8010b0c <__aeabi_dcmplt>
 8026242:	4603      	mov	r3, r0
 8026244:	2b00      	cmp	r3, #0
 8026246:	d1d5      	bne.n	80261f4 <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8026248:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802624a:	687b      	ldr	r3, [r7, #4]
 802624c:	429a      	cmp	r2, r3
 802624e:	db33      	blt.n	80262b8 <mg_dtoa+0x318>
 8026250:	687b      	ldr	r3, [r7, #4]
 8026252:	2b01      	cmp	r3, #1
 8026254:	dd30      	ble.n	80262b8 <mg_dtoa+0x318>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8026256:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 802625a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 802625e:	f7ea fb0d 	bl	801087c <__aeabi_ddiv>
 8026262:	4602      	mov	r2, r0
 8026264:	460b      	mov	r3, r1
 8026266:	ec43 2b17 	vmov	d7, r2, r3
 802626a:	78fb      	ldrb	r3, [r7, #3]
 802626c:	f107 0018 	add.w	r0, r7, #24
 8026270:	687a      	ldr	r2, [r7, #4]
 8026272:	eeb0 0a47 	vmov.f32	s0, s14
 8026276:	eef0 0a67 	vmov.f32	s1, s15
 802627a:	2128      	movs	r1, #40	@ 0x28
 802627c:	f7ff fe90 	bl	8025fa0 <mg_dtoa>
 8026280:	4603      	mov	r3, r0
 8026282:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8026284:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8026286:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026288:	4413      	add	r3, r2
 802628a:	f107 0218 	add.w	r2, r7, #24
 802628e:	4413      	add	r3, r2
 8026290:	222b      	movs	r2, #43	@ 0x2b
 8026292:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8026294:	4618      	mov	r0, r3
 8026296:	f7ff fdab 	bl	8025df0 <addexp>
 802629a:	4602      	mov	r2, r0
 802629c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802629e:	4413      	add	r3, r2
 80262a0:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80262a2:	f107 0318 	add.w	r3, r7, #24
 80262a6:	9300      	str	r3, [sp, #0]
 80262a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80262aa:	4a73      	ldr	r2, [pc, #460]	@ (8026478 <mg_dtoa+0x4d8>)
 80262ac:	6939      	ldr	r1, [r7, #16]
 80262ae:	6978      	ldr	r0, [r7, #20]
 80262b0:	f00b f928 	bl	8031504 <mg_snprintf>
 80262b4:	4603      	mov	r3, r0
 80262b6:	e15f      	b.n	8026578 <mg_dtoa+0x5d8>
  } else if (e <= -width && width > 1) {
 80262b8:	687b      	ldr	r3, [r7, #4]
 80262ba:	425b      	negs	r3, r3
 80262bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80262be:	429a      	cmp	r2, r3
 80262c0:	dc34      	bgt.n	802632c <mg_dtoa+0x38c>
 80262c2:	687b      	ldr	r3, [r7, #4]
 80262c4:	2b01      	cmp	r3, #1
 80262c6:	dd31      	ble.n	802632c <mg_dtoa+0x38c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80262c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80262cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80262d0:	f7ea fad4 	bl	801087c <__aeabi_ddiv>
 80262d4:	4602      	mov	r2, r0
 80262d6:	460b      	mov	r3, r1
 80262d8:	ec43 2b17 	vmov	d7, r2, r3
 80262dc:	78fb      	ldrb	r3, [r7, #3]
 80262de:	f107 0018 	add.w	r0, r7, #24
 80262e2:	687a      	ldr	r2, [r7, #4]
 80262e4:	eeb0 0a47 	vmov.f32	s0, s14
 80262e8:	eef0 0a67 	vmov.f32	s1, s15
 80262ec:	2128      	movs	r1, #40	@ 0x28
 80262ee:	f7ff fe57 	bl	8025fa0 <mg_dtoa>
 80262f2:	4603      	mov	r3, r0
 80262f4:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 80262f6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80262f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80262fa:	4413      	add	r3, r2
 80262fc:	f107 0218 	add.w	r2, r7, #24
 8026300:	18d0      	adds	r0, r2, r3
 8026302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8026304:	425b      	negs	r3, r3
 8026306:	222d      	movs	r2, #45	@ 0x2d
 8026308:	4619      	mov	r1, r3
 802630a:	f7ff fd71 	bl	8025df0 <addexp>
 802630e:	4602      	mov	r2, r0
 8026310:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026312:	4413      	add	r3, r2
 8026314:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8026316:	f107 0318 	add.w	r3, r7, #24
 802631a:	9300      	str	r3, [sp, #0]
 802631c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802631e:	4a56      	ldr	r2, [pc, #344]	@ (8026478 <mg_dtoa+0x4d8>)
 8026320:	6939      	ldr	r1, [r7, #16]
 8026322:	6978      	ldr	r0, [r7, #20]
 8026324:	f00b f8ee 	bl	8031504 <mg_snprintf>
 8026328:	4603      	mov	r3, r0
 802632a:	e125      	b.n	8026578 <mg_dtoa+0x5d8>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 802632c:	2300      	movs	r3, #0
 802632e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8026330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8026334:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8026338:	e03f      	b.n	80263ba <mg_dtoa+0x41a>
      int ch = (int) (d / t);
 802633a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 802633e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8026342:	f7ea fa9b 	bl	801087c <__aeabi_ddiv>
 8026346:	4602      	mov	r2, r0
 8026348:	460b      	mov	r3, r1
 802634a:	4610      	mov	r0, r2
 802634c:	4619      	mov	r1, r3
 802634e:	f7ea fc1b 	bl	8010b88 <__aeabi_d2iz>
 8026352:	4603      	mov	r3, r0
 8026354:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8026356:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026358:	2b00      	cmp	r3, #0
 802635a:	dc02      	bgt.n	8026362 <mg_dtoa+0x3c2>
 802635c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802635e:	2b00      	cmp	r3, #0
 8026360:	dd0c      	ble.n	802637c <mg_dtoa+0x3dc>
 8026362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8026364:	b2da      	uxtb	r2, r3
 8026366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026368:	1c59      	adds	r1, r3, #1
 802636a:	6679      	str	r1, [r7, #100]	@ 0x64
 802636c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 802636e:	440b      	add	r3, r1
 8026370:	3230      	adds	r2, #48	@ 0x30
 8026372:	b2d2      	uxtb	r2, r2
 8026374:	3370      	adds	r3, #112	@ 0x70
 8026376:	443b      	add	r3, r7
 8026378:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 802637c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 802637e:	f7ea f8e9 	bl	8010554 <__aeabi_i2d>
 8026382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8026386:	f7ea f94f 	bl	8010628 <__aeabi_dmul>
 802638a:	4602      	mov	r2, r0
 802638c:	460b      	mov	r3, r1
 802638e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8026392:	f7e9 ff91 	bl	80102b8 <__aeabi_dsub>
 8026396:	4602      	mov	r2, r0
 8026398:	460b      	mov	r3, r1
 802639a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 802639e:	f04f 0200 	mov.w	r2, #0
 80263a2:	4b33      	ldr	r3, [pc, #204]	@ (8026470 <mg_dtoa+0x4d0>)
 80263a4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80263a8:	f7ea fa68 	bl	801087c <__aeabi_ddiv>
 80263ac:	4602      	mov	r2, r0
 80263ae:	460b      	mov	r3, r1
 80263b0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80263b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80263b6:	3301      	adds	r3, #1
 80263b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80263ba:	f04f 0200 	mov.w	r2, #0
 80263be:	4b2d      	ldr	r3, [pc, #180]	@ (8026474 <mg_dtoa+0x4d4>)
 80263c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80263c4:	f7ea fbb6 	bl	8010b34 <__aeabi_dcmpge>
 80263c8:	4603      	mov	r3, r0
 80263ca:	2b00      	cmp	r3, #0
 80263cc:	d004      	beq.n	80263d8 <mg_dtoa+0x438>
 80263ce:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80263d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80263d2:	4413      	add	r3, r2
 80263d4:	2b27      	cmp	r3, #39	@ 0x27
 80263d6:	ddb0      	ble.n	802633a <mg_dtoa+0x39a>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 80263d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80263da:	2b00      	cmp	r3, #0
 80263dc:	d11b      	bne.n	8026416 <mg_dtoa+0x476>
 80263de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80263e0:	1c5a      	adds	r2, r3, #1
 80263e2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80263e4:	3370      	adds	r3, #112	@ 0x70
 80263e6:	443b      	add	r3, r7
 80263e8:	2230      	movs	r2, #48	@ 0x30
 80263ea:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 80263ee:	e012      	b.n	8026416 <mg_dtoa+0x476>
 80263f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80263f2:	1c5a      	adds	r2, r3, #1
 80263f4:	667a      	str	r2, [r7, #100]	@ 0x64
 80263f6:	3370      	adds	r3, #112	@ 0x70
 80263f8:	443b      	add	r3, r7
 80263fa:	2230      	movs	r2, #48	@ 0x30
 80263fc:	f803 2c58 	strb.w	r2, [r3, #-88]
 8026400:	f04f 0200 	mov.w	r2, #0
 8026404:	4b1a      	ldr	r3, [pc, #104]	@ (8026470 <mg_dtoa+0x4d0>)
 8026406:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 802640a:	f7ea fa37 	bl	801087c <__aeabi_ddiv>
 802640e:	4602      	mov	r2, r0
 8026410:	460b      	mov	r3, r1
 8026412:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8026416:	f04f 0200 	mov.w	r2, #0
 802641a:	4b16      	ldr	r3, [pc, #88]	@ (8026474 <mg_dtoa+0x4d4>)
 802641c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8026420:	f7ea fb88 	bl	8010b34 <__aeabi_dcmpge>
 8026424:	4603      	mov	r3, r0
 8026426:	2b00      	cmp	r3, #0
 8026428:	d004      	beq.n	8026434 <mg_dtoa+0x494>
 802642a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802642c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802642e:	4413      	add	r3, r2
 8026430:	2b27      	cmp	r3, #39	@ 0x27
 8026432:	dddd      	ble.n	80263f0 <mg_dtoa+0x450>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8026434:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8026436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026438:	4413      	add	r3, r2
 802643a:	2b27      	cmp	r3, #39	@ 0x27
 802643c:	dc09      	bgt.n	8026452 <mg_dtoa+0x4b2>
 802643e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8026440:	1c5a      	adds	r2, r3, #1
 8026442:	66ba      	str	r2, [r7, #104]	@ 0x68
 8026444:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8026446:	4413      	add	r3, r2
 8026448:	3370      	adds	r3, #112	@ 0x70
 802644a:	443b      	add	r3, r7
 802644c:	222e      	movs	r2, #46	@ 0x2e
 802644e:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8026452:	2300      	movs	r3, #0
 8026454:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8026456:	a304      	add	r3, pc, #16	@ (adr r3, 8026468 <mg_dtoa+0x4c8>)
 8026458:	e9d3 2300 	ldrd	r2, r3, [r3]
 802645c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8026460:	e046      	b.n	80264f0 <mg_dtoa+0x550>
 8026462:	bf00      	nop
 8026464:	f3af 8000 	nop.w
 8026468:	9999999a 	.word	0x9999999a
 802646c:	3fb99999 	.word	0x3fb99999
 8026470:	40240000 	.word	0x40240000
 8026474:	3ff00000 	.word	0x3ff00000
 8026478:	08041bb0 	.word	0x08041bb0
      int ch = (int) (d / t);
 802647c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8026480:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8026484:	f7ea f9fa 	bl	801087c <__aeabi_ddiv>
 8026488:	4602      	mov	r2, r0
 802648a:	460b      	mov	r3, r1
 802648c:	4610      	mov	r0, r2
 802648e:	4619      	mov	r1, r3
 8026490:	f7ea fb7a 	bl	8010b88 <__aeabi_d2iz>
 8026494:	4603      	mov	r3, r0
 8026496:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 8026498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802649a:	b2da      	uxtb	r2, r3
 802649c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802649e:	1c59      	adds	r1, r3, #1
 80264a0:	6679      	str	r1, [r7, #100]	@ 0x64
 80264a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80264a4:	440b      	add	r3, r1
 80264a6:	3230      	adds	r2, #48	@ 0x30
 80264a8:	b2d2      	uxtb	r2, r2
 80264aa:	3370      	adds	r3, #112	@ 0x70
 80264ac:	443b      	add	r3, r7
 80264ae:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 80264b2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80264b4:	f7ea f84e 	bl	8010554 <__aeabi_i2d>
 80264b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80264bc:	f7ea f8b4 	bl	8010628 <__aeabi_dmul>
 80264c0:	4602      	mov	r2, r0
 80264c2:	460b      	mov	r3, r1
 80264c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80264c8:	f7e9 fef6 	bl	80102b8 <__aeabi_dsub>
 80264cc:	4602      	mov	r2, r0
 80264ce:	460b      	mov	r3, r1
 80264d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 80264d4:	f04f 0200 	mov.w	r2, #0
 80264d8:	4b29      	ldr	r3, [pc, #164]	@ (8026580 <mg_dtoa+0x5e0>)
 80264da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80264de:	f7ea f9cd 	bl	801087c <__aeabi_ddiv>
 80264e2:	4602      	mov	r2, r0
 80264e4:	460b      	mov	r3, r1
 80264e6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80264ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80264ec:	3301      	adds	r3, #1
 80264ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80264f0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80264f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80264f4:	4413      	add	r3, r2
 80264f6:	2b27      	cmp	r3, #39	@ 0x27
 80264f8:	dc07      	bgt.n	802650a <mg_dtoa+0x56a>
 80264fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80264fc:	687b      	ldr	r3, [r7, #4]
 80264fe:	429a      	cmp	r2, r3
 8026500:	dbbc      	blt.n	802647c <mg_dtoa+0x4dc>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8026502:	e002      	b.n	802650a <mg_dtoa+0x56a>
 8026504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026506:	3b01      	subs	r3, #1
 8026508:	667b      	str	r3, [r7, #100]	@ 0x64
 802650a:	78fb      	ldrb	r3, [r7, #3]
 802650c:	2b00      	cmp	r3, #0
 802650e:	d00c      	beq.n	802652a <mg_dtoa+0x58a>
 8026510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026512:	2b00      	cmp	r3, #0
 8026514:	dd09      	ble.n	802652a <mg_dtoa+0x58a>
 8026516:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8026518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802651a:	4413      	add	r3, r2
 802651c:	3b01      	subs	r3, #1
 802651e:	3370      	adds	r3, #112	@ 0x70
 8026520:	443b      	add	r3, r7
 8026522:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8026526:	2b30      	cmp	r3, #48	@ 0x30
 8026528:	d0ec      	beq.n	8026504 <mg_dtoa+0x564>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 802652a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802652c:	2b00      	cmp	r3, #0
 802652e:	dd0c      	ble.n	802654a <mg_dtoa+0x5aa>
 8026530:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8026532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026534:	4413      	add	r3, r2
 8026536:	3b01      	subs	r3, #1
 8026538:	3370      	adds	r3, #112	@ 0x70
 802653a:	443b      	add	r3, r7
 802653c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8026540:	2b2e      	cmp	r3, #46	@ 0x2e
 8026542:	d102      	bne.n	802654a <mg_dtoa+0x5aa>
 8026544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026546:	3b01      	subs	r3, #1
 8026548:	667b      	str	r3, [r7, #100]	@ 0x64
  n += s;
 802654a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802654c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802654e:	4413      	add	r3, r2
 8026550:	667b      	str	r3, [r7, #100]	@ 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8026552:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026554:	2b27      	cmp	r3, #39	@ 0x27
 8026556:	dd01      	ble.n	802655c <mg_dtoa+0x5bc>
 8026558:	2327      	movs	r3, #39	@ 0x27
 802655a:	667b      	str	r3, [r7, #100]	@ 0x64
  buf[n] = '\0';
 802655c:	f107 0218 	add.w	r2, r7, #24
 8026560:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026562:	4413      	add	r3, r2
 8026564:	2200      	movs	r2, #0
 8026566:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8026568:	f107 0318 	add.w	r3, r7, #24
 802656c:	4a05      	ldr	r2, [pc, #20]	@ (8026584 <mg_dtoa+0x5e4>)
 802656e:	6939      	ldr	r1, [r7, #16]
 8026570:	6978      	ldr	r0, [r7, #20]
 8026572:	f00a ffc7 	bl	8031504 <mg_snprintf>
 8026576:	4603      	mov	r3, r0
}
 8026578:	4618      	mov	r0, r3
 802657a:	3770      	adds	r7, #112	@ 0x70
 802657c:	46bd      	mov	sp, r7
 802657e:	bdb0      	pop	{r4, r5, r7, pc}
 8026580:	40240000 	.word	0x40240000
 8026584:	08041b9c 	.word	0x08041b9c

08026588 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8026588:	b5b0      	push	{r4, r5, r7, lr}
 802658a:	b08c      	sub	sp, #48	@ 0x30
 802658c:	af00      	add	r7, sp, #0
 802658e:	60f8      	str	r0, [r7, #12]
 8026590:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8026594:	4b53      	ldr	r3, [pc, #332]	@ (80266e4 <mg_lld+0x15c>)
 8026596:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8026598:	e9d7 2300 	ldrd	r2, r3, [r7]
 802659c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 80265a0:	2300      	movs	r3, #0
 80265a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 80265a4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80265a8:	2b00      	cmp	r3, #0
 80265aa:	d012      	beq.n	80265d2 <mg_lld+0x4a>
 80265ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80265b0:	2b00      	cmp	r3, #0
 80265b2:	da0e      	bge.n	80265d2 <mg_lld+0x4a>
 80265b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80265b6:	1c5a      	adds	r2, r3, #1
 80265b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80265ba:	68fa      	ldr	r2, [r7, #12]
 80265bc:	4413      	add	r3, r2
 80265be:	222d      	movs	r2, #45	@ 0x2d
 80265c0:	701a      	strb	r2, [r3, #0]
 80265c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80265c6:	2100      	movs	r1, #0
 80265c8:	4254      	negs	r4, r2
 80265ca:	eb61 0503 	sbc.w	r5, r1, r3
 80265ce:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 80265d2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80265d6:	2b00      	cmp	r3, #0
 80265d8:	d021      	beq.n	802661e <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 80265da:	2300      	movs	r3, #0
 80265dc:	623b      	str	r3, [r7, #32]
 80265de:	e019      	b.n	8026614 <mg_lld+0x8c>
 80265e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80265e2:	f003 030f 	and.w	r3, r3, #15
 80265e6:	69ba      	ldr	r2, [r7, #24]
 80265e8:	441a      	add	r2, r3
 80265ea:	6a3b      	ldr	r3, [r7, #32]
 80265ec:	1c59      	adds	r1, r3, #1
 80265ee:	6239      	str	r1, [r7, #32]
 80265f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80265f2:	440b      	add	r3, r1
 80265f4:	68f9      	ldr	r1, [r7, #12]
 80265f6:	440b      	add	r3, r1
 80265f8:	7812      	ldrb	r2, [r2, #0]
 80265fa:	701a      	strb	r2, [r3, #0]
 80265fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8026600:	f04f 0200 	mov.w	r2, #0
 8026604:	f04f 0300 	mov.w	r3, #0
 8026608:	0902      	lsrs	r2, r0, #4
 802660a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 802660e:	090b      	lsrs	r3, r1, #4
 8026610:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8026614:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8026618:	4313      	orrs	r3, r2
 802661a:	d1e1      	bne.n	80265e0 <mg_lld+0x58>
 802661c:	e025      	b.n	802666a <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 802661e:	2300      	movs	r3, #0
 8026620:	623b      	str	r3, [r7, #32]
 8026622:	e01e      	b.n	8026662 <mg_lld+0xda>
 8026624:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8026628:	f04f 020a 	mov.w	r2, #10
 802662c:	f04f 0300 	mov.w	r3, #0
 8026630:	f7ea fb92 	bl	8010d58 <__aeabi_uldivmod>
 8026634:	69bb      	ldr	r3, [r7, #24]
 8026636:	441a      	add	r2, r3
 8026638:	6a3b      	ldr	r3, [r7, #32]
 802663a:	1c59      	adds	r1, r3, #1
 802663c:	6239      	str	r1, [r7, #32]
 802663e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8026640:	440b      	add	r3, r1
 8026642:	68f9      	ldr	r1, [r7, #12]
 8026644:	440b      	add	r3, r1
 8026646:	7812      	ldrb	r2, [r2, #0]
 8026648:	701a      	strb	r2, [r3, #0]
 802664a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 802664e:	f04f 020a 	mov.w	r2, #10
 8026652:	f04f 0300 	mov.w	r3, #0
 8026656:	f7ea fb7f 	bl	8010d58 <__aeabi_uldivmod>
 802665a:	4602      	mov	r2, r0
 802665c:	460b      	mov	r3, r1
 802665e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8026662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8026666:	4313      	orrs	r3, r2
 8026668:	d1dc      	bne.n	8026624 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 802666a:	2300      	movs	r3, #0
 802666c:	61fb      	str	r3, [r7, #28]
 802666e:	e022      	b.n	80266b6 <mg_lld+0x12e>
    char t = buf[s + i];
 8026670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026672:	69fb      	ldr	r3, [r7, #28]
 8026674:	4413      	add	r3, r2
 8026676:	68fa      	ldr	r2, [r7, #12]
 8026678:	4413      	add	r3, r2
 802667a:	781b      	ldrb	r3, [r3, #0]
 802667c:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 802667e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026680:	6a3b      	ldr	r3, [r7, #32]
 8026682:	441a      	add	r2, r3
 8026684:	69fb      	ldr	r3, [r7, #28]
 8026686:	1ad3      	subs	r3, r2, r3
 8026688:	3b01      	subs	r3, #1
 802668a:	68fa      	ldr	r2, [r7, #12]
 802668c:	441a      	add	r2, r3
 802668e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8026690:	69fb      	ldr	r3, [r7, #28]
 8026692:	440b      	add	r3, r1
 8026694:	68f9      	ldr	r1, [r7, #12]
 8026696:	440b      	add	r3, r1
 8026698:	7812      	ldrb	r2, [r2, #0]
 802669a:	701a      	strb	r2, [r3, #0]
 802669c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802669e:	6a3b      	ldr	r3, [r7, #32]
 80266a0:	441a      	add	r2, r3
 80266a2:	69fb      	ldr	r3, [r7, #28]
 80266a4:	1ad3      	subs	r3, r2, r3
 80266a6:	3b01      	subs	r3, #1
 80266a8:	68fa      	ldr	r2, [r7, #12]
 80266aa:	4413      	add	r3, r2
 80266ac:	7dfa      	ldrb	r2, [r7, #23]
 80266ae:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 80266b0:	69fb      	ldr	r3, [r7, #28]
 80266b2:	3301      	adds	r3, #1
 80266b4:	61fb      	str	r3, [r7, #28]
 80266b6:	6a3b      	ldr	r3, [r7, #32]
 80266b8:	085b      	lsrs	r3, r3, #1
 80266ba:	69fa      	ldr	r2, [r7, #28]
 80266bc:	429a      	cmp	r2, r3
 80266be:	d3d7      	bcc.n	8026670 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 80266c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80266c4:	4313      	orrs	r3, r2
 80266c6:	d106      	bne.n	80266d6 <mg_lld+0x14e>
 80266c8:	6a3b      	ldr	r3, [r7, #32]
 80266ca:	1c5a      	adds	r2, r3, #1
 80266cc:	623a      	str	r2, [r7, #32]
 80266ce:	68fa      	ldr	r2, [r7, #12]
 80266d0:	4413      	add	r3, r2
 80266d2:	2230      	movs	r2, #48	@ 0x30
 80266d4:	701a      	strb	r2, [r3, #0]
  return n + s;
 80266d6:	6a3a      	ldr	r2, [r7, #32]
 80266d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80266da:	4413      	add	r3, r2
}
 80266dc:	4618      	mov	r0, r3
 80266de:	3730      	adds	r7, #48	@ 0x30
 80266e0:	46bd      	mov	sp, r7
 80266e2:	bdb0      	pop	{r4, r5, r7, pc}
 80266e4:	08041bb8 	.word	0x08041bb8

080266e8 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 80266e8:	b580      	push	{r7, lr}
 80266ea:	b086      	sub	sp, #24
 80266ec:	af00      	add	r7, sp, #0
 80266ee:	60f8      	str	r0, [r7, #12]
 80266f0:	60b9      	str	r1, [r7, #8]
 80266f2:	607a      	str	r2, [r7, #4]
 80266f4:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80266f6:	2300      	movs	r3, #0
 80266f8:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 80266fa:	e009      	b.n	8026710 <scpy+0x28>
 80266fc:	697b      	ldr	r3, [r7, #20]
 80266fe:	1c5a      	adds	r2, r3, #1
 8026700:	617a      	str	r2, [r7, #20]
 8026702:	687a      	ldr	r2, [r7, #4]
 8026704:	4413      	add	r3, r2
 8026706:	781a      	ldrb	r2, [r3, #0]
 8026708:	68fb      	ldr	r3, [r7, #12]
 802670a:	68b9      	ldr	r1, [r7, #8]
 802670c:	4610      	mov	r0, r2
 802670e:	4798      	blx	r3
 8026710:	697a      	ldr	r2, [r7, #20]
 8026712:	683b      	ldr	r3, [r7, #0]
 8026714:	429a      	cmp	r2, r3
 8026716:	d205      	bcs.n	8026724 <scpy+0x3c>
 8026718:	687a      	ldr	r2, [r7, #4]
 802671a:	697b      	ldr	r3, [r7, #20]
 802671c:	4413      	add	r3, r2
 802671e:	781b      	ldrb	r3, [r3, #0]
 8026720:	2b00      	cmp	r3, #0
 8026722:	d1eb      	bne.n	80266fc <scpy+0x14>
  return i;
 8026724:	697b      	ldr	r3, [r7, #20]
}
 8026726:	4618      	mov	r0, r3
 8026728:	3718      	adds	r7, #24
 802672a:	46bd      	mov	sp, r7
 802672c:	bd80      	pop	{r7, pc}

0802672e <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 802672e:	b40c      	push	{r2, r3}
 8026730:	b580      	push	{r7, lr}
 8026732:	b084      	sub	sp, #16
 8026734:	af00      	add	r7, sp, #0
 8026736:	6078      	str	r0, [r7, #4]
 8026738:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 802673a:	2300      	movs	r3, #0
 802673c:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 802673e:	f107 031c 	add.w	r3, r7, #28
 8026742:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8026744:	f107 0308 	add.w	r3, r7, #8
 8026748:	69ba      	ldr	r2, [r7, #24]
 802674a:	6839      	ldr	r1, [r7, #0]
 802674c:	6878      	ldr	r0, [r7, #4]
 802674e:	f000 f809 	bl	8026764 <mg_vxprintf>
 8026752:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8026754:	68fb      	ldr	r3, [r7, #12]
}
 8026756:	4618      	mov	r0, r3
 8026758:	3710      	adds	r7, #16
 802675a:	46bd      	mov	sp, r7
 802675c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8026760:	b002      	add	sp, #8
 8026762:	4770      	bx	lr

08026764 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8026764:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8026768:	b0a6      	sub	sp, #152	@ 0x98
 802676a:	af02      	add	r7, sp, #8
 802676c:	60f8      	str	r0, [r7, #12]
 802676e:	60b9      	str	r1, [r7, #8]
 8026770:	607a      	str	r2, [r7, #4]
 8026772:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8026774:	2300      	movs	r3, #0
 8026776:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 802677a:	2300      	movs	r3, #0
 802677c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 8026780:	e383      	b.n	8026e8a <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8026782:	687a      	ldr	r2, [r7, #4]
 8026784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026788:	4413      	add	r3, r2
 802678a:	781b      	ldrb	r3, [r3, #0]
 802678c:	2b25      	cmp	r3, #37	@ 0x25
 802678e:	f040 8369 	bne.w	8026e64 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8026792:	2300      	movs	r3, #0
 8026794:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8026796:	2300      	movs	r3, #0
 8026798:	67bb      	str	r3, [r7, #120]	@ 0x78
 802679a:	2300      	movs	r3, #0
 802679c:	677b      	str	r3, [r7, #116]	@ 0x74
 802679e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80267a2:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 80267a4:	2320      	movs	r3, #32
 80267a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80267aa:	2300      	movs	r3, #0
 80267ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80267b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80267b4:	3301      	adds	r3, #1
 80267b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80267ba:	687a      	ldr	r2, [r7, #4]
 80267bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80267c0:	4413      	add	r3, r2
 80267c2:	781b      	ldrb	r3, [r3, #0]
 80267c4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 80267c8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80267cc:	2b23      	cmp	r3, #35	@ 0x23
 80267ce:	d10e      	bne.n	80267ee <mg_vxprintf+0x8a>
 80267d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80267d2:	3301      	adds	r3, #1
 80267d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80267d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80267da:	3301      	adds	r3, #1
 80267dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80267e0:	687a      	ldr	r2, [r7, #4]
 80267e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80267e6:	4413      	add	r3, r2
 80267e8:	781b      	ldrb	r3, [r3, #0]
 80267ea:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 80267ee:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80267f2:	2b2d      	cmp	r3, #45	@ 0x2d
 80267f4:	d110      	bne.n	8026818 <mg_vxprintf+0xb4>
 80267f6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80267fa:	3301      	adds	r3, #1
 80267fc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8026800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026804:	3301      	adds	r3, #1
 8026806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 802680a:	687a      	ldr	r2, [r7, #4]
 802680c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026810:	4413      	add	r3, r2
 8026812:	781b      	ldrb	r3, [r3, #0]
 8026814:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8026818:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 802681c:	2b30      	cmp	r3, #48	@ 0x30
 802681e:	d127      	bne.n	8026870 <mg_vxprintf+0x10c>
 8026820:	2330      	movs	r3, #48	@ 0x30
 8026822:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8026826:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802682a:	3301      	adds	r3, #1
 802682c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026830:	687a      	ldr	r2, [r7, #4]
 8026832:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026836:	4413      	add	r3, r2
 8026838:	781b      	ldrb	r3, [r3, #0]
 802683a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 802683e:	e017      	b.n	8026870 <mg_vxprintf+0x10c>
 8026840:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8026842:	4613      	mov	r3, r2
 8026844:	009b      	lsls	r3, r3, #2
 8026846:	4413      	add	r3, r2
 8026848:	005b      	lsls	r3, r3, #1
 802684a:	677b      	str	r3, [r7, #116]	@ 0x74
 802684c:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8026850:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8026852:	4413      	add	r3, r2
 8026854:	3b30      	subs	r3, #48	@ 0x30
 8026856:	677b      	str	r3, [r7, #116]	@ 0x74
 8026858:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802685c:	3301      	adds	r3, #1
 802685e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026862:	687a      	ldr	r2, [r7, #4]
 8026864:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026868:	4413      	add	r3, r2
 802686a:	781b      	ldrb	r3, [r3, #0]
 802686c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8026870:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026874:	4618      	mov	r0, r3
 8026876:	f7ff faa5 	bl	8025dc4 <is_digit>
 802687a:	4603      	mov	r3, r0
 802687c:	2b00      	cmp	r3, #0
 802687e:	d1df      	bne.n	8026840 <mg_vxprintf+0xdc>
      if (c == '.') {
 8026880:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026884:	2b2e      	cmp	r3, #46	@ 0x2e
 8026886:	d153      	bne.n	8026930 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8026888:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802688c:	3301      	adds	r3, #1
 802688e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026892:	687a      	ldr	r2, [r7, #4]
 8026894:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026898:	4413      	add	r3, r2
 802689a:	781b      	ldrb	r3, [r3, #0]
 802689c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 80268a0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80268a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80268a6:	d113      	bne.n	80268d0 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 80268a8:	683b      	ldr	r3, [r7, #0]
 80268aa:	681b      	ldr	r3, [r3, #0]
 80268ac:	1d19      	adds	r1, r3, #4
 80268ae:	683a      	ldr	r2, [r7, #0]
 80268b0:	6011      	str	r1, [r2, #0]
 80268b2:	681b      	ldr	r3, [r3, #0]
 80268b4:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 80268b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80268ba:	3301      	adds	r3, #1
 80268bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80268c0:	687a      	ldr	r2, [r7, #4]
 80268c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80268c6:	4413      	add	r3, r2
 80268c8:	781b      	ldrb	r3, [r3, #0]
 80268ca:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80268ce:	e02f      	b.n	8026930 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 80268d0:	2300      	movs	r3, #0
 80268d2:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 80268d4:	e017      	b.n	8026906 <mg_vxprintf+0x1a2>
 80268d6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80268d8:	4613      	mov	r3, r2
 80268da:	009b      	lsls	r3, r3, #2
 80268dc:	4413      	add	r3, r2
 80268de:	005b      	lsls	r3, r3, #1
 80268e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80268e2:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80268e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80268e8:	4413      	add	r3, r2
 80268ea:	3b30      	subs	r3, #48	@ 0x30
 80268ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80268ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80268f2:	3301      	adds	r3, #1
 80268f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80268f8:	687a      	ldr	r2, [r7, #4]
 80268fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80268fe:	4413      	add	r3, r2
 8026900:	781b      	ldrb	r3, [r3, #0]
 8026902:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8026906:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 802690a:	4618      	mov	r0, r3
 802690c:	f7ff fa5a 	bl	8025dc4 <is_digit>
 8026910:	4603      	mov	r3, r0
 8026912:	2b00      	cmp	r3, #0
 8026914:	d1df      	bne.n	80268d6 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8026916:	e00b      	b.n	8026930 <mg_vxprintf+0x1cc>
 8026918:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802691c:	3301      	adds	r3, #1
 802691e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026922:	687a      	ldr	r2, [r7, #4]
 8026924:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026928:	4413      	add	r3, r2
 802692a:	781b      	ldrb	r3, [r3, #0]
 802692c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8026930:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026934:	2b68      	cmp	r3, #104	@ 0x68
 8026936:	d0ef      	beq.n	8026918 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8026938:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 802693c:	2b6c      	cmp	r3, #108	@ 0x6c
 802693e:	d121      	bne.n	8026984 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8026940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8026942:	3301      	adds	r3, #1
 8026944:	67bb      	str	r3, [r7, #120]	@ 0x78
 8026946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802694a:	3301      	adds	r3, #1
 802694c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026950:	687a      	ldr	r2, [r7, #4]
 8026952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026956:	4413      	add	r3, r2
 8026958:	781b      	ldrb	r3, [r3, #0]
 802695a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 802695e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026962:	2b6c      	cmp	r3, #108	@ 0x6c
 8026964:	d10e      	bne.n	8026984 <mg_vxprintf+0x220>
 8026966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8026968:	3301      	adds	r3, #1
 802696a:	67bb      	str	r3, [r7, #120]	@ 0x78
 802696c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026970:	3301      	adds	r3, #1
 8026972:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026976:	687a      	ldr	r2, [r7, #4]
 8026978:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802697c:	4413      	add	r3, r2
 802697e:	781b      	ldrb	r3, [r3, #0]
 8026980:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8026984:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026988:	2b70      	cmp	r3, #112	@ 0x70
 802698a:	d103      	bne.n	8026994 <mg_vxprintf+0x230>
 802698c:	2301      	movs	r3, #1
 802698e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8026990:	2301      	movs	r3, #1
 8026992:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8026994:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026998:	2b64      	cmp	r3, #100	@ 0x64
 802699a:	d018      	beq.n	80269ce <mg_vxprintf+0x26a>
 802699c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269a0:	2b75      	cmp	r3, #117	@ 0x75
 80269a2:	d014      	beq.n	80269ce <mg_vxprintf+0x26a>
 80269a4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269a8:	2b78      	cmp	r3, #120	@ 0x78
 80269aa:	d010      	beq.n	80269ce <mg_vxprintf+0x26a>
 80269ac:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269b0:	2b58      	cmp	r3, #88	@ 0x58
 80269b2:	d00c      	beq.n	80269ce <mg_vxprintf+0x26a>
 80269b4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269b8:	2b70      	cmp	r3, #112	@ 0x70
 80269ba:	d008      	beq.n	80269ce <mg_vxprintf+0x26a>
 80269bc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269c0:	2b67      	cmp	r3, #103	@ 0x67
 80269c2:	d004      	beq.n	80269ce <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 80269c4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269c8:	2b66      	cmp	r3, #102	@ 0x66
 80269ca:	f040 816c 	bne.w	8026ca6 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80269ce:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269d2:	2b64      	cmp	r3, #100	@ 0x64
 80269d4:	bf0c      	ite	eq
 80269d6:	2301      	moveq	r3, #1
 80269d8:	2300      	movne	r3, #0
 80269da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80269de:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269e2:	2b78      	cmp	r3, #120	@ 0x78
 80269e4:	d007      	beq.n	80269f6 <mg_vxprintf+0x292>
 80269e6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269ea:	2b58      	cmp	r3, #88	@ 0x58
 80269ec:	d003      	beq.n	80269f6 <mg_vxprintf+0x292>
 80269ee:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80269f2:	2b70      	cmp	r3, #112	@ 0x70
 80269f4:	d101      	bne.n	80269fa <mg_vxprintf+0x296>
 80269f6:	2301      	movs	r3, #1
 80269f8:	e000      	b.n	80269fc <mg_vxprintf+0x298>
 80269fa:	2300      	movs	r3, #0
 80269fc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8026a00:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8026a04:	f003 0301 	and.w	r3, r3, #1
 8026a08:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8026a0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8026a0e:	2b00      	cmp	r3, #0
 8026a10:	d001      	beq.n	8026a16 <mg_vxprintf+0x2b2>
 8026a12:	2302      	movs	r3, #2
 8026a14:	e000      	b.n	8026a18 <mg_vxprintf+0x2b4>
 8026a16:	2300      	movs	r3, #0
 8026a18:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 8026a1a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026a1e:	2b67      	cmp	r3, #103	@ 0x67
 8026a20:	d003      	beq.n	8026a2a <mg_vxprintf+0x2c6>
 8026a22:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026a26:	2b66      	cmp	r3, #102	@ 0x66
 8026a28:	d124      	bne.n	8026a74 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8026a2a:	683b      	ldr	r3, [r7, #0]
 8026a2c:	681b      	ldr	r3, [r3, #0]
 8026a2e:	3307      	adds	r3, #7
 8026a30:	f023 0307 	bic.w	r3, r3, #7
 8026a34:	f103 0108 	add.w	r1, r3, #8
 8026a38:	683a      	ldr	r2, [r7, #0]
 8026a3a:	6011      	str	r1, [r2, #0]
 8026a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a40:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 8026a44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8026a46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8026a4a:	d101      	bne.n	8026a50 <mg_vxprintf+0x2ec>
 8026a4c:	2306      	movs	r3, #6
 8026a4e:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8026a50:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8026a52:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026a56:	2b67      	cmp	r3, #103	@ 0x67
 8026a58:	bf0c      	ite	eq
 8026a5a:	2301      	moveq	r3, #1
 8026a5c:	2300      	movne	r3, #0
 8026a5e:	b2db      	uxtb	r3, r3
 8026a60:	f107 0014 	add.w	r0, r7, #20
 8026a64:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8026a68:	2128      	movs	r1, #40	@ 0x28
 8026a6a:	f7ff fa99 	bl	8025fa0 <mg_dtoa>
 8026a6e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 8026a72:	e069      	b.n	8026b48 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8026a74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8026a76:	2b02      	cmp	r3, #2
 8026a78:	d11c      	bne.n	8026ab4 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8026a7a:	683b      	ldr	r3, [r7, #0]
 8026a7c:	681b      	ldr	r3, [r3, #0]
 8026a7e:	3307      	adds	r3, #7
 8026a80:	f023 0307 	bic.w	r3, r3, #7
 8026a84:	f103 0108 	add.w	r1, r3, #8
 8026a88:	683a      	ldr	r2, [r7, #0]
 8026a8a:	6011      	str	r1, [r2, #0]
 8026a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a90:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8026a94:	f107 0114 	add.w	r1, r7, #20
 8026a98:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8026a9c:	9301      	str	r3, [sp, #4]
 8026a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8026aa2:	9300      	str	r3, [sp, #0]
 8026aa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8026aa8:	4608      	mov	r0, r1
 8026aaa:	f7ff fd6d 	bl	8026588 <mg_lld>
 8026aae:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8026ab2:	e049      	b.n	8026b48 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8026ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8026ab6:	2b01      	cmp	r3, #1
 8026ab8:	d123      	bne.n	8026b02 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8026aba:	683b      	ldr	r3, [r7, #0]
 8026abc:	681b      	ldr	r3, [r3, #0]
 8026abe:	1d19      	adds	r1, r3, #4
 8026ac0:	683a      	ldr	r2, [r7, #0]
 8026ac2:	6011      	str	r1, [r2, #0]
 8026ac4:	681b      	ldr	r3, [r3, #0]
 8026ac6:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8026ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8026acc:	2b00      	cmp	r3, #0
 8026ace:	d004      	beq.n	8026ada <mg_vxprintf+0x376>
 8026ad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8026ad2:	17da      	asrs	r2, r3, #31
 8026ad4:	461c      	mov	r4, r3
 8026ad6:	4615      	mov	r5, r2
 8026ad8:	e003      	b.n	8026ae2 <mg_vxprintf+0x37e>
 8026ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8026adc:	2200      	movs	r2, #0
 8026ade:	461c      	mov	r4, r3
 8026ae0:	4615      	mov	r5, r2
 8026ae2:	f107 0114 	add.w	r1, r7, #20
 8026ae6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8026aea:	9301      	str	r3, [sp, #4]
 8026aec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8026af0:	9300      	str	r3, [sp, #0]
 8026af2:	4622      	mov	r2, r4
 8026af4:	462b      	mov	r3, r5
 8026af6:	4608      	mov	r0, r1
 8026af8:	f7ff fd46 	bl	8026588 <mg_lld>
 8026afc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8026b00:	e022      	b.n	8026b48 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8026b02:	683b      	ldr	r3, [r7, #0]
 8026b04:	681b      	ldr	r3, [r3, #0]
 8026b06:	1d19      	adds	r1, r3, #4
 8026b08:	683a      	ldr	r2, [r7, #0]
 8026b0a:	6011      	str	r1, [r2, #0]
 8026b0c:	681b      	ldr	r3, [r3, #0]
 8026b0e:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8026b10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8026b14:	2b00      	cmp	r3, #0
 8026b16:	d004      	beq.n	8026b22 <mg_vxprintf+0x3be>
 8026b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8026b1a:	17da      	asrs	r2, r3, #31
 8026b1c:	4698      	mov	r8, r3
 8026b1e:	4691      	mov	r9, r2
 8026b20:	e003      	b.n	8026b2a <mg_vxprintf+0x3c6>
 8026b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8026b24:	2200      	movs	r2, #0
 8026b26:	4698      	mov	r8, r3
 8026b28:	4691      	mov	r9, r2
 8026b2a:	f107 0114 	add.w	r1, r7, #20
 8026b2e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8026b32:	9301      	str	r3, [sp, #4]
 8026b34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8026b38:	9300      	str	r3, [sp, #0]
 8026b3a:	4642      	mov	r2, r8
 8026b3c:	464b      	mov	r3, r9
 8026b3e:	4608      	mov	r0, r1
 8026b40:	f7ff fd22 	bl	8026588 <mg_lld>
 8026b44:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8026b48:	2300      	movs	r3, #0
 8026b4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026b4e:	e007      	b.n	8026b60 <mg_vxprintf+0x3fc>
 8026b50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8026b52:	3b01      	subs	r3, #1
 8026b54:	677b      	str	r3, [r7, #116]	@ 0x74
 8026b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8026b5a:	3301      	adds	r3, #1
 8026b5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026b60:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8026b64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8026b66:	429a      	cmp	r2, r3
 8026b68:	d202      	bcs.n	8026b70 <mg_vxprintf+0x40c>
 8026b6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8026b6c:	2b00      	cmp	r3, #0
 8026b6e:	d1ef      	bne.n	8026b50 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8026b70:	2300      	movs	r3, #0
 8026b72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026b76:	e011      	b.n	8026b9c <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8026b78:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8026b7c:	2301      	movs	r3, #1
 8026b7e:	68b9      	ldr	r1, [r7, #8]
 8026b80:	68f8      	ldr	r0, [r7, #12]
 8026b82:	f7ff fdb1 	bl	80266e8 <scpy>
 8026b86:	4602      	mov	r2, r0
 8026b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026b8c:	4413      	add	r3, r2
 8026b8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8026b92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8026b96:	3301      	adds	r3, #1
 8026b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026b9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8026ba0:	2b20      	cmp	r3, #32
 8026ba2:	d110      	bne.n	8026bc6 <mg_vxprintf+0x462>
 8026ba4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8026ba8:	2b00      	cmp	r3, #0
 8026baa:	d10c      	bne.n	8026bc6 <mg_vxprintf+0x462>
 8026bac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8026bb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8026bb2:	429a      	cmp	r2, r3
 8026bb4:	d207      	bcs.n	8026bc6 <mg_vxprintf+0x462>
 8026bb6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8026bba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8026bbe:	4413      	add	r3, r2
 8026bc0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8026bc2:	429a      	cmp	r2, r3
 8026bc4:	d8d8      	bhi.n	8026b78 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8026bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8026bc8:	4ab7      	ldr	r2, [pc, #732]	@ (8026ea8 <mg_vxprintf+0x744>)
 8026bca:	68b9      	ldr	r1, [r7, #8]
 8026bcc:	68f8      	ldr	r0, [r7, #12]
 8026bce:	f7ff fd8b 	bl	80266e8 <scpy>
 8026bd2:	4602      	mov	r2, r0
 8026bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026bd8:	4413      	add	r3, r2
 8026bda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8026bde:	2300      	movs	r3, #0
 8026be0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026be4:	e011      	b.n	8026c0a <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8026be6:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8026bea:	2301      	movs	r3, #1
 8026bec:	68b9      	ldr	r1, [r7, #8]
 8026bee:	68f8      	ldr	r0, [r7, #12]
 8026bf0:	f7ff fd7a 	bl	80266e8 <scpy>
 8026bf4:	4602      	mov	r2, r0
 8026bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026bfa:	4413      	add	r3, r2
 8026bfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8026c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8026c04:	3301      	adds	r3, #1
 8026c06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026c0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8026c0e:	2b30      	cmp	r3, #48	@ 0x30
 8026c10:	d10c      	bne.n	8026c2c <mg_vxprintf+0x4c8>
 8026c12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8026c16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8026c18:	429a      	cmp	r2, r3
 8026c1a:	d207      	bcs.n	8026c2c <mg_vxprintf+0x4c8>
 8026c1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8026c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8026c24:	4413      	add	r3, r2
 8026c26:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8026c28:	429a      	cmp	r2, r3
 8026c2a:	d8dc      	bhi.n	8026be6 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8026c2c:	f107 0214 	add.w	r2, r7, #20
 8026c30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8026c34:	68b9      	ldr	r1, [r7, #8]
 8026c36:	68f8      	ldr	r0, [r7, #12]
 8026c38:	f7ff fd56 	bl	80266e8 <scpy>
 8026c3c:	4602      	mov	r2, r0
 8026c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026c42:	4413      	add	r3, r2
 8026c44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8026c48:	2300      	movs	r3, #0
 8026c4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026c4e:	e011      	b.n	8026c74 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8026c50:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8026c54:	2301      	movs	r3, #1
 8026c56:	68b9      	ldr	r1, [r7, #8]
 8026c58:	68f8      	ldr	r0, [r7, #12]
 8026c5a:	f7ff fd45 	bl	80266e8 <scpy>
 8026c5e:	4602      	mov	r2, r0
 8026c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026c64:	4413      	add	r3, r2
 8026c66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8026c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8026c6e:	3301      	adds	r3, #1
 8026c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026c74:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8026c78:	2b20      	cmp	r3, #32
 8026c7a:	f040 80ea 	bne.w	8026e52 <mg_vxprintf+0x6ee>
 8026c7e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8026c82:	2b00      	cmp	r3, #0
 8026c84:	f000 80e5 	beq.w	8026e52 <mg_vxprintf+0x6ee>
 8026c88:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8026c8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8026c8e:	429a      	cmp	r2, r3
 8026c90:	f080 80df 	bcs.w	8026e52 <mg_vxprintf+0x6ee>
 8026c94:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8026c98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8026c9c:	4413      	add	r3, r2
 8026c9e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8026ca0:	429a      	cmp	r2, r3
 8026ca2:	d8d5      	bhi.n	8026c50 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8026ca4:	e0d5      	b.n	8026e52 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8026ca6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026caa:	2b6d      	cmp	r3, #109	@ 0x6d
 8026cac:	d003      	beq.n	8026cb6 <mg_vxprintf+0x552>
 8026cae:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026cb2:	2b4d      	cmp	r3, #77	@ 0x4d
 8026cb4:	d128      	bne.n	8026d08 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8026cb6:	683b      	ldr	r3, [r7, #0]
 8026cb8:	681b      	ldr	r3, [r3, #0]
 8026cba:	1d19      	adds	r1, r3, #4
 8026cbc:	683a      	ldr	r2, [r7, #0]
 8026cbe:	6011      	str	r1, [r2, #0]
 8026cc0:	681b      	ldr	r3, [r3, #0]
 8026cc2:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8026cc4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026cc8:	2b6d      	cmp	r3, #109	@ 0x6d
 8026cca:	d103      	bne.n	8026cd4 <mg_vxprintf+0x570>
 8026ccc:	68fb      	ldr	r3, [r7, #12]
 8026cce:	68b9      	ldr	r1, [r7, #8]
 8026cd0:	2022      	movs	r0, #34	@ 0x22
 8026cd2:	4798      	blx	r3
        n += f(out, param, ap);
 8026cd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8026cd6:	683a      	ldr	r2, [r7, #0]
 8026cd8:	68b9      	ldr	r1, [r7, #8]
 8026cda:	68f8      	ldr	r0, [r7, #12]
 8026cdc:	4798      	blx	r3
 8026cde:	4602      	mov	r2, r0
 8026ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026ce4:	4413      	add	r3, r2
 8026ce6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 8026cea:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026cee:	2b6d      	cmp	r3, #109	@ 0x6d
 8026cf0:	f040 80b1 	bne.w	8026e56 <mg_vxprintf+0x6f2>
 8026cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026cf8:	3302      	adds	r3, #2
 8026cfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8026cfe:	68fb      	ldr	r3, [r7, #12]
 8026d00:	68b9      	ldr	r1, [r7, #8]
 8026d02:	2022      	movs	r0, #34	@ 0x22
 8026d04:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8026d06:	e0a6      	b.n	8026e56 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8026d08:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026d0c:	2b63      	cmp	r3, #99	@ 0x63
 8026d0e:	d112      	bne.n	8026d36 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8026d10:	683b      	ldr	r3, [r7, #0]
 8026d12:	681b      	ldr	r3, [r3, #0]
 8026d14:	1d19      	adds	r1, r3, #4
 8026d16:	683a      	ldr	r2, [r7, #0]
 8026d18:	6011      	str	r1, [r2, #0]
 8026d1a:	681b      	ldr	r3, [r3, #0]
 8026d1c:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 8026d1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026d20:	b2da      	uxtb	r2, r3
 8026d22:	68fb      	ldr	r3, [r7, #12]
 8026d24:	68b9      	ldr	r1, [r7, #8]
 8026d26:	4610      	mov	r0, r2
 8026d28:	4798      	blx	r3
        n++;
 8026d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026d2e:	3301      	adds	r3, #1
 8026d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8026d34:	e090      	b.n	8026e58 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8026d36:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026d3a:	2b73      	cmp	r3, #115	@ 0x73
 8026d3c:	d16b      	bne.n	8026e16 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8026d3e:	683b      	ldr	r3, [r7, #0]
 8026d40:	681b      	ldr	r3, [r3, #0]
 8026d42:	1d19      	adds	r1, r3, #4
 8026d44:	683a      	ldr	r2, [r7, #0]
 8026d46:	6011      	str	r1, [r2, #0]
 8026d48:	681b      	ldr	r3, [r3, #0]
 8026d4a:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8026d4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8026d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8026d52:	d109      	bne.n	8026d68 <mg_vxprintf+0x604>
 8026d54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8026d56:	2b00      	cmp	r3, #0
 8026d58:	d004      	beq.n	8026d64 <mg_vxprintf+0x600>
 8026d5a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8026d5c:	f7e9 faa0 	bl	80102a0 <strlen>
 8026d60:	4603      	mov	r3, r0
 8026d62:	e000      	b.n	8026d66 <mg_vxprintf+0x602>
 8026d64:	2300      	movs	r3, #0
 8026d66:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8026d68:	2300      	movs	r3, #0
 8026d6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026d6e:	e011      	b.n	8026d94 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8026d70:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8026d74:	2301      	movs	r3, #1
 8026d76:	68b9      	ldr	r1, [r7, #8]
 8026d78:	68f8      	ldr	r0, [r7, #12]
 8026d7a:	f7ff fcb5 	bl	80266e8 <scpy>
 8026d7e:	4602      	mov	r2, r0
 8026d80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026d84:	4413      	add	r3, r2
 8026d86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8026d8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8026d8e:	3301      	adds	r3, #1
 8026d90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026d94:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8026d98:	2b00      	cmp	r3, #0
 8026d9a:	d10a      	bne.n	8026db2 <mg_vxprintf+0x64e>
 8026d9c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8026d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8026da0:	429a      	cmp	r2, r3
 8026da2:	d206      	bcs.n	8026db2 <mg_vxprintf+0x64e>
 8026da4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8026da8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8026daa:	4413      	add	r3, r2
 8026dac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8026dae:	429a      	cmp	r2, r3
 8026db0:	d8de      	bhi.n	8026d70 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8026db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8026db4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8026db6:	68b9      	ldr	r1, [r7, #8]
 8026db8:	68f8      	ldr	r0, [r7, #12]
 8026dba:	f7ff fc95 	bl	80266e8 <scpy>
 8026dbe:	4602      	mov	r2, r0
 8026dc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026dc4:	4413      	add	r3, r2
 8026dc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8026dca:	2300      	movs	r3, #0
 8026dcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026dd0:	e011      	b.n	8026df6 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8026dd2:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8026dd6:	2301      	movs	r3, #1
 8026dd8:	68b9      	ldr	r1, [r7, #8]
 8026dda:	68f8      	ldr	r0, [r7, #12]
 8026ddc:	f7ff fc84 	bl	80266e8 <scpy>
 8026de0:	4602      	mov	r2, r0
 8026de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026de6:	4413      	add	r3, r2
 8026de8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8026dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8026df0:	3301      	adds	r3, #1
 8026df2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8026df6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8026dfa:	2b00      	cmp	r3, #0
 8026dfc:	d02c      	beq.n	8026e58 <mg_vxprintf+0x6f4>
 8026dfe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8026e00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8026e02:	429a      	cmp	r2, r3
 8026e04:	d228      	bcs.n	8026e58 <mg_vxprintf+0x6f4>
 8026e06:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8026e0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8026e0c:	4413      	add	r3, r2
 8026e0e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8026e10:	429a      	cmp	r2, r3
 8026e12:	d8de      	bhi.n	8026dd2 <mg_vxprintf+0x66e>
 8026e14:	e020      	b.n	8026e58 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8026e16:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8026e1a:	2b25      	cmp	r3, #37	@ 0x25
 8026e1c:	d109      	bne.n	8026e32 <mg_vxprintf+0x6ce>
        out('%', param);
 8026e1e:	68fb      	ldr	r3, [r7, #12]
 8026e20:	68b9      	ldr	r1, [r7, #8]
 8026e22:	2025      	movs	r0, #37	@ 0x25
 8026e24:	4798      	blx	r3
        n++;
 8026e26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026e2a:	3301      	adds	r3, #1
 8026e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8026e30:	e012      	b.n	8026e58 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8026e32:	68fb      	ldr	r3, [r7, #12]
 8026e34:	68b9      	ldr	r1, [r7, #8]
 8026e36:	2025      	movs	r0, #37	@ 0x25
 8026e38:	4798      	blx	r3
        out(c, param);
 8026e3a:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8026e3e:	68fb      	ldr	r3, [r7, #12]
 8026e40:	68b9      	ldr	r1, [r7, #8]
 8026e42:	4610      	mov	r0, r2
 8026e44:	4798      	blx	r3
        n += 2;
 8026e46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026e4a:	3302      	adds	r3, #2
 8026e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8026e50:	e002      	b.n	8026e58 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8026e52:	bf00      	nop
 8026e54:	e000      	b.n	8026e58 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8026e56:	bf00      	nop
      }
      i++;
 8026e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026e5c:	3301      	adds	r3, #1
 8026e5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8026e62:	e012      	b.n	8026e8a <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8026e64:	687a      	ldr	r2, [r7, #4]
 8026e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026e6a:	4413      	add	r3, r2
 8026e6c:	781a      	ldrb	r2, [r3, #0]
 8026e6e:	68fb      	ldr	r3, [r7, #12]
 8026e70:	68b9      	ldr	r1, [r7, #8]
 8026e72:	4610      	mov	r0, r2
 8026e74:	4798      	blx	r3
 8026e76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8026e7a:	3301      	adds	r3, #1
 8026e7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8026e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026e84:	3301      	adds	r3, #1
 8026e86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 8026e8a:	687a      	ldr	r2, [r7, #4]
 8026e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8026e90:	4413      	add	r3, r2
 8026e92:	781b      	ldrb	r3, [r3, #0]
 8026e94:	2b00      	cmp	r3, #0
 8026e96:	f47f ac74 	bne.w	8026782 <mg_vxprintf+0x1e>
    }
  }
  return n;
 8026e9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8026e9e:	4618      	mov	r0, r3
 8026ea0:	3790      	adds	r7, #144	@ 0x90
 8026ea2:	46bd      	mov	sp, r7
 8026ea4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8026ea8:	08041bcc 	.word	0x08041bcc

08026eac <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8026eac:	b580      	push	{r7, lr}
 8026eae:	b086      	sub	sp, #24
 8026eb0:	af00      	add	r7, sp, #0
 8026eb2:	60f8      	str	r0, [r7, #12]
 8026eb4:	60b9      	str	r1, [r7, #8]
 8026eb6:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8026eb8:	2108      	movs	r1, #8
 8026eba:	2001      	movs	r0, #1
 8026ebc:	f7fe f940 	bl	8025140 <mg_calloc>
 8026ec0:	6178      	str	r0, [r7, #20]
  if (fd != NULL) {
 8026ec2:	697b      	ldr	r3, [r7, #20]
 8026ec4:	2b00      	cmp	r3, #0
 8026ec6:	d013      	beq.n	8026ef0 <mg_fs_open+0x44>
    fd->fd = fs->op(path, flags);
 8026ec8:	68fb      	ldr	r3, [r7, #12]
 8026eca:	689b      	ldr	r3, [r3, #8]
 8026ecc:	6879      	ldr	r1, [r7, #4]
 8026ece:	68b8      	ldr	r0, [r7, #8]
 8026ed0:	4798      	blx	r3
 8026ed2:	4602      	mov	r2, r0
 8026ed4:	697b      	ldr	r3, [r7, #20]
 8026ed6:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8026ed8:	697b      	ldr	r3, [r7, #20]
 8026eda:	68fa      	ldr	r2, [r7, #12]
 8026edc:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8026ede:	697b      	ldr	r3, [r7, #20]
 8026ee0:	681b      	ldr	r3, [r3, #0]
 8026ee2:	2b00      	cmp	r3, #0
 8026ee4:	d104      	bne.n	8026ef0 <mg_fs_open+0x44>
      free(fd);
 8026ee6:	6978      	ldr	r0, [r7, #20]
 8026ee8:	f7f5 fdb6 	bl	801ca58 <vPortFree>
      fd = NULL;
 8026eec:	2300      	movs	r3, #0
 8026eee:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8026ef0:	697b      	ldr	r3, [r7, #20]
}
 8026ef2:	4618      	mov	r0, r3
 8026ef4:	3718      	adds	r7, #24
 8026ef6:	46bd      	mov	sp, r7
 8026ef8:	bd80      	pop	{r7, pc}

08026efa <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8026efa:	b580      	push	{r7, lr}
 8026efc:	b082      	sub	sp, #8
 8026efe:	af00      	add	r7, sp, #0
 8026f00:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8026f02:	687b      	ldr	r3, [r7, #4]
 8026f04:	2b00      	cmp	r3, #0
 8026f06:	d009      	beq.n	8026f1c <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8026f08:	687b      	ldr	r3, [r7, #4]
 8026f0a:	685b      	ldr	r3, [r3, #4]
 8026f0c:	68db      	ldr	r3, [r3, #12]
 8026f0e:	687a      	ldr	r2, [r7, #4]
 8026f10:	6812      	ldr	r2, [r2, #0]
 8026f12:	4610      	mov	r0, r2
 8026f14:	4798      	blx	r3
    free(fd);
 8026f16:	6878      	ldr	r0, [r7, #4]
 8026f18:	f7f5 fd9e 	bl	801ca58 <vPortFree>
  }
}
 8026f1c:	bf00      	nop
 8026f1e:	3708      	adds	r7, #8
 8026f20:	46bd      	mov	sp, r7
 8026f22:	bd80      	pop	{r7, pc}

08026f24 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8026f24:	b480      	push	{r7}
 8026f26:	b085      	sub	sp, #20
 8026f28:	af00      	add	r7, sp, #0
 8026f2a:	60f8      	str	r0, [r7, #12]
 8026f2c:	60b9      	str	r1, [r7, #8]
 8026f2e:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8026f30:	2300      	movs	r3, #0
}
 8026f32:	4618      	mov	r0, r3
 8026f34:	3714      	adds	r7, #20
 8026f36:	46bd      	mov	sp, r7
 8026f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f3c:	4770      	bx	lr

08026f3e <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8026f3e:	b480      	push	{r7}
 8026f40:	b085      	sub	sp, #20
 8026f42:	af00      	add	r7, sp, #0
 8026f44:	60f8      	str	r0, [r7, #12]
 8026f46:	60b9      	str	r1, [r7, #8]
 8026f48:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8026f4a:	bf00      	nop
 8026f4c:	3714      	adds	r7, #20
 8026f4e:	46bd      	mov	sp, r7
 8026f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f54:	4770      	bx	lr

08026f56 <p_open>:
static void *p_open(const char *path, int flags) {
 8026f56:	b480      	push	{r7}
 8026f58:	b083      	sub	sp, #12
 8026f5a:	af00      	add	r7, sp, #0
 8026f5c:	6078      	str	r0, [r7, #4]
 8026f5e:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8026f60:	2300      	movs	r3, #0
}
 8026f62:	4618      	mov	r0, r3
 8026f64:	370c      	adds	r7, #12
 8026f66:	46bd      	mov	sp, r7
 8026f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f6c:	4770      	bx	lr

08026f6e <p_close>:
static void p_close(void *fp) {
 8026f6e:	b480      	push	{r7}
 8026f70:	b083      	sub	sp, #12
 8026f72:	af00      	add	r7, sp, #0
 8026f74:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8026f76:	bf00      	nop
 8026f78:	370c      	adds	r7, #12
 8026f7a:	46bd      	mov	sp, r7
 8026f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f80:	4770      	bx	lr

08026f82 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8026f82:	b480      	push	{r7}
 8026f84:	b085      	sub	sp, #20
 8026f86:	af00      	add	r7, sp, #0
 8026f88:	60f8      	str	r0, [r7, #12]
 8026f8a:	60b9      	str	r1, [r7, #8]
 8026f8c:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8026f8e:	2300      	movs	r3, #0
}
 8026f90:	4618      	mov	r0, r3
 8026f92:	3714      	adds	r7, #20
 8026f94:	46bd      	mov	sp, r7
 8026f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f9a:	4770      	bx	lr

08026f9c <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8026f9c:	b480      	push	{r7}
 8026f9e:	b085      	sub	sp, #20
 8026fa0:	af00      	add	r7, sp, #0
 8026fa2:	60f8      	str	r0, [r7, #12]
 8026fa4:	60b9      	str	r1, [r7, #8]
 8026fa6:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8026fa8:	2300      	movs	r3, #0
}
 8026faa:	4618      	mov	r0, r3
 8026fac:	3714      	adds	r7, #20
 8026fae:	46bd      	mov	sp, r7
 8026fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fb4:	4770      	bx	lr

08026fb6 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8026fb6:	b480      	push	{r7}
 8026fb8:	b083      	sub	sp, #12
 8026fba:	af00      	add	r7, sp, #0
 8026fbc:	6078      	str	r0, [r7, #4]
 8026fbe:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8026fc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8026fc4:	4618      	mov	r0, r3
 8026fc6:	370c      	adds	r7, #12
 8026fc8:	46bd      	mov	sp, r7
 8026fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fce:	4770      	bx	lr

08026fd0 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8026fd0:	b480      	push	{r7}
 8026fd2:	b083      	sub	sp, #12
 8026fd4:	af00      	add	r7, sp, #0
 8026fd6:	6078      	str	r0, [r7, #4]
 8026fd8:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8026fda:	2300      	movs	r3, #0
}
 8026fdc:	4618      	mov	r0, r3
 8026fde:	370c      	adds	r7, #12
 8026fe0:	46bd      	mov	sp, r7
 8026fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fe6:	4770      	bx	lr

08026fe8 <p_remove>:
static bool p_remove(const char *path) {
 8026fe8:	b480      	push	{r7}
 8026fea:	b083      	sub	sp, #12
 8026fec:	af00      	add	r7, sp, #0
 8026fee:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8026ff0:	2300      	movs	r3, #0
}
 8026ff2:	4618      	mov	r0, r3
 8026ff4:	370c      	adds	r7, #12
 8026ff6:	46bd      	mov	sp, r7
 8026ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ffc:	4770      	bx	lr

08026ffe <p_mkdir>:
static bool p_mkdir(const char *path) {
 8026ffe:	b480      	push	{r7}
 8027000:	b083      	sub	sp, #12
 8027002:	af00      	add	r7, sp, #0
 8027004:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8027006:	2300      	movs	r3, #0
}
 8027008:	4618      	mov	r0, r3
 802700a:	370c      	adds	r7, #12
 802700c:	46bd      	mov	sp, r7
 802700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027012:	4770      	bx	lr

08027014 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8027014:	b480      	push	{r7}
 8027016:	b089      	sub	sp, #36	@ 0x24
 8027018:	af00      	add	r7, sp, #0
 802701a:	60f8      	str	r0, [r7, #12]
 802701c:	60b9      	str	r1, [r7, #8]
 802701e:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8027020:	2300      	movs	r3, #0
 8027022:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 8027024:	687b      	ldr	r3, [r7, #4]
 8027026:	2b00      	cmp	r3, #0
 8027028:	d02d      	beq.n	8027086 <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 802702a:	68fb      	ldr	r3, [r7, #12]
 802702c:	1c5a      	adds	r2, r3, #1
 802702e:	60fa      	str	r2, [r7, #12]
 8027030:	781b      	ldrb	r3, [r3, #0]
 8027032:	61bb      	str	r3, [r7, #24]
 8027034:	68bb      	ldr	r3, [r7, #8]
 8027036:	1c5a      	adds	r2, r3, #1
 8027038:	60ba      	str	r2, [r7, #8]
 802703a:	781b      	ldrb	r3, [r3, #0]
 802703c:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 802703e:	69bb      	ldr	r3, [r7, #24]
 8027040:	2b40      	cmp	r3, #64	@ 0x40
 8027042:	dd05      	ble.n	8027050 <mg_ncasecmp+0x3c>
 8027044:	69bb      	ldr	r3, [r7, #24]
 8027046:	2b5a      	cmp	r3, #90	@ 0x5a
 8027048:	dc02      	bgt.n	8027050 <mg_ncasecmp+0x3c>
 802704a:	69bb      	ldr	r3, [r7, #24]
 802704c:	3320      	adds	r3, #32
 802704e:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 8027050:	697b      	ldr	r3, [r7, #20]
 8027052:	2b40      	cmp	r3, #64	@ 0x40
 8027054:	dd05      	ble.n	8027062 <mg_ncasecmp+0x4e>
 8027056:	697b      	ldr	r3, [r7, #20]
 8027058:	2b5a      	cmp	r3, #90	@ 0x5a
 802705a:	dc02      	bgt.n	8027062 <mg_ncasecmp+0x4e>
 802705c:	697b      	ldr	r3, [r7, #20]
 802705e:	3320      	adds	r3, #32
 8027060:	617b      	str	r3, [r7, #20]
      diff = c - d;
 8027062:	69ba      	ldr	r2, [r7, #24]
 8027064:	697b      	ldr	r3, [r7, #20]
 8027066:	1ad3      	subs	r3, r2, r3
 8027068:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 802706a:	69fb      	ldr	r3, [r7, #28]
 802706c:	2b00      	cmp	r3, #0
 802706e:	d10a      	bne.n	8027086 <mg_ncasecmp+0x72>
 8027070:	68fb      	ldr	r3, [r7, #12]
 8027072:	3b01      	subs	r3, #1
 8027074:	781b      	ldrb	r3, [r3, #0]
 8027076:	2b00      	cmp	r3, #0
 8027078:	d005      	beq.n	8027086 <mg_ncasecmp+0x72>
 802707a:	687b      	ldr	r3, [r7, #4]
 802707c:	3b01      	subs	r3, #1
 802707e:	607b      	str	r3, [r7, #4]
 8027080:	687b      	ldr	r3, [r7, #4]
 8027082:	2b00      	cmp	r3, #0
 8027084:	d1d1      	bne.n	802702a <mg_ncasecmp+0x16>
  return diff;
 8027086:	69fb      	ldr	r3, [r7, #28]
}
 8027088:	4618      	mov	r0, r3
 802708a:	3724      	adds	r7, #36	@ 0x24
 802708c:	46bd      	mov	sp, r7
 802708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027092:	4770      	bx	lr

08027094 <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8027094:	b480      	push	{r7}
 8027096:	b08b      	sub	sp, #44	@ 0x2c
 8027098:	af00      	add	r7, sp, #0
 802709a:	f107 0308 	add.w	r3, r7, #8
 802709e:	e883 0003 	stmia.w	r3, {r0, r1}
 80270a2:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 80270a4:	2300      	movs	r3, #0
 80270a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80270a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80270ac:	61bb      	str	r3, [r7, #24]
 80270ae:	69bb      	ldr	r3, [r7, #24]
 80270b0:	4a42      	ldr	r2, [pc, #264]	@ (80271bc <mg_to_size_t+0x128>)
 80270b2:	fba2 2303 	umull	r2, r3, r2, r3
 80270b6:	08db      	lsrs	r3, r3, #3
 80270b8:	617b      	str	r3, [r7, #20]
 80270ba:	2300      	movs	r3, #0
 80270bc:	623b      	str	r3, [r7, #32]
 80270be:	2300      	movs	r3, #0
 80270c0:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80270c2:	e002      	b.n	80270ca <mg_to_size_t+0x36>
 80270c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80270c6:	3301      	adds	r3, #1
 80270c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80270ca:	68fb      	ldr	r3, [r7, #12]
 80270cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80270ce:	429a      	cmp	r2, r3
 80270d0:	d20b      	bcs.n	80270ea <mg_to_size_t+0x56>
 80270d2:	68ba      	ldr	r2, [r7, #8]
 80270d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80270d6:	4413      	add	r3, r2
 80270d8:	781b      	ldrb	r3, [r3, #0]
 80270da:	2b20      	cmp	r3, #32
 80270dc:	d0f2      	beq.n	80270c4 <mg_to_size_t+0x30>
 80270de:	68ba      	ldr	r2, [r7, #8]
 80270e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80270e2:	4413      	add	r3, r2
 80270e4:	781b      	ldrb	r3, [r3, #0]
 80270e6:	2b09      	cmp	r3, #9
 80270e8:	d0ec      	beq.n	80270c4 <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 80270ea:	68fb      	ldr	r3, [r7, #12]
 80270ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80270ee:	429a      	cmp	r2, r3
 80270f0:	d22b      	bcs.n	802714a <mg_to_size_t+0xb6>
 80270f2:	68ba      	ldr	r2, [r7, #8]
 80270f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80270f6:	4413      	add	r3, r2
 80270f8:	781b      	ldrb	r3, [r3, #0]
 80270fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80270fc:	d125      	bne.n	802714a <mg_to_size_t+0xb6>
 80270fe:	2300      	movs	r3, #0
 8027100:	e056      	b.n	80271b0 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 8027102:	68ba      	ldr	r2, [r7, #8]
 8027104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027106:	4413      	add	r3, r2
 8027108:	781b      	ldrb	r3, [r3, #0]
 802710a:	3b30      	subs	r3, #48	@ 0x30
 802710c:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 802710e:	6a3a      	ldr	r2, [r7, #32]
 8027110:	697b      	ldr	r3, [r7, #20]
 8027112:	429a      	cmp	r2, r3
 8027114:	d901      	bls.n	802711a <mg_to_size_t+0x86>
 8027116:	2300      	movs	r3, #0
 8027118:	e04a      	b.n	80271b0 <mg_to_size_t+0x11c>
    result *= 10;
 802711a:	6a3a      	ldr	r2, [r7, #32]
 802711c:	4613      	mov	r3, r2
 802711e:	009b      	lsls	r3, r3, #2
 8027120:	4413      	add	r3, r2
 8027122:	005b      	lsls	r3, r3, #1
 8027124:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 8027126:	69ba      	ldr	r2, [r7, #24]
 8027128:	693b      	ldr	r3, [r7, #16]
 802712a:	1ad3      	subs	r3, r2, r3
 802712c:	6a3a      	ldr	r2, [r7, #32]
 802712e:	429a      	cmp	r2, r3
 8027130:	d901      	bls.n	8027136 <mg_to_size_t+0xa2>
 8027132:	2300      	movs	r3, #0
 8027134:	e03c      	b.n	80271b0 <mg_to_size_t+0x11c>
    result += digit;
 8027136:	6a3a      	ldr	r2, [r7, #32]
 8027138:	693b      	ldr	r3, [r7, #16]
 802713a:	4413      	add	r3, r2
 802713c:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 802713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027140:	3301      	adds	r3, #1
 8027142:	627b      	str	r3, [r7, #36]	@ 0x24
 8027144:	69fb      	ldr	r3, [r7, #28]
 8027146:	3301      	adds	r3, #1
 8027148:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 802714a:	68fb      	ldr	r3, [r7, #12]
 802714c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802714e:	429a      	cmp	r2, r3
 8027150:	d20f      	bcs.n	8027172 <mg_to_size_t+0xde>
 8027152:	68ba      	ldr	r2, [r7, #8]
 8027154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027156:	4413      	add	r3, r2
 8027158:	781b      	ldrb	r3, [r3, #0]
 802715a:	2b2f      	cmp	r3, #47	@ 0x2f
 802715c:	d909      	bls.n	8027172 <mg_to_size_t+0xde>
 802715e:	68ba      	ldr	r2, [r7, #8]
 8027160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027162:	4413      	add	r3, r2
 8027164:	781b      	ldrb	r3, [r3, #0]
 8027166:	2b39      	cmp	r3, #57	@ 0x39
 8027168:	d9cb      	bls.n	8027102 <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 802716a:	e002      	b.n	8027172 <mg_to_size_t+0xde>
 802716c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802716e:	3301      	adds	r3, #1
 8027170:	627b      	str	r3, [r7, #36]	@ 0x24
 8027172:	68fb      	ldr	r3, [r7, #12]
 8027174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8027176:	429a      	cmp	r2, r3
 8027178:	d20b      	bcs.n	8027192 <mg_to_size_t+0xfe>
 802717a:	68ba      	ldr	r2, [r7, #8]
 802717c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802717e:	4413      	add	r3, r2
 8027180:	781b      	ldrb	r3, [r3, #0]
 8027182:	2b20      	cmp	r3, #32
 8027184:	d0f2      	beq.n	802716c <mg_to_size_t+0xd8>
 8027186:	68ba      	ldr	r2, [r7, #8]
 8027188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802718a:	4413      	add	r3, r2
 802718c:	781b      	ldrb	r3, [r3, #0]
 802718e:	2b09      	cmp	r3, #9
 8027190:	d0ec      	beq.n	802716c <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8027192:	69fb      	ldr	r3, [r7, #28]
 8027194:	2b00      	cmp	r3, #0
 8027196:	d101      	bne.n	802719c <mg_to_size_t+0x108>
 8027198:	2300      	movs	r3, #0
 802719a:	e009      	b.n	80271b0 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 802719c:	68fb      	ldr	r3, [r7, #12]
 802719e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80271a0:	429a      	cmp	r2, r3
 80271a2:	d001      	beq.n	80271a8 <mg_to_size_t+0x114>
 80271a4:	2300      	movs	r3, #0
 80271a6:	e003      	b.n	80271b0 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 80271a8:	687b      	ldr	r3, [r7, #4]
 80271aa:	6a3a      	ldr	r2, [r7, #32]
 80271ac:	601a      	str	r2, [r3, #0]
  return true;
 80271ae:	2301      	movs	r3, #1
}
 80271b0:	4618      	mov	r0, r3
 80271b2:	372c      	adds	r7, #44	@ 0x2c
 80271b4:	46bd      	mov	sp, r7
 80271b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271ba:	4770      	bx	lr
 80271bc:	cccccccd 	.word	0xcccccccd

080271c0 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 80271c0:	b082      	sub	sp, #8
 80271c2:	b580      	push	{r7, lr}
 80271c4:	b08e      	sub	sp, #56	@ 0x38
 80271c6:	af02      	add	r7, sp, #8
 80271c8:	60f8      	str	r0, [r7, #12]
 80271ca:	1d38      	adds	r0, r7, #4
 80271cc:	e880 0006 	stmia.w	r0, {r1, r2}
 80271d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 80271d2:	f107 0310 	add.w	r3, r7, #16
 80271d6:	2200      	movs	r2, #0
 80271d8:	2100      	movs	r1, #0
 80271da:	4618      	mov	r0, r3
 80271dc:	f00a fe97 	bl	8031f0e <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 80271e0:	e023      	b.n	802722a <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 80271e2:	f107 0318 	add.w	r3, r7, #24
 80271e6:	f107 0220 	add.w	r2, r7, #32
 80271ea:	213d      	movs	r1, #61	@ 0x3d
 80271ec:	9100      	str	r1, [sp, #0]
 80271ee:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80271f2:	c903      	ldmia	r1, {r0, r1}
 80271f4:	f00b f835 	bl	8032262 <mg_span>
 80271f8:	4603      	mov	r3, r0
 80271fa:	2b00      	cmp	r3, #0
 80271fc:	d015      	beq.n	802722a <mg_http_var+0x6a>
 80271fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8027200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027202:	429a      	cmp	r2, r3
 8027204:	d111      	bne.n	802722a <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8027206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027208:	6a39      	ldr	r1, [r7, #32]
 802720a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802720c:	4618      	mov	r0, r3
 802720e:	f7ff ff01 	bl	8027014 <mg_ncasecmp>
 8027212:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8027214:	2b00      	cmp	r3, #0
 8027216:	d108      	bne.n	802722a <mg_http_var+0x6a>
      result = v;
 8027218:	f107 0310 	add.w	r3, r7, #16
 802721c:	f107 0218 	add.w	r2, r7, #24
 8027220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8027224:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8027228:	e00b      	b.n	8027242 <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 802722a:	1d3b      	adds	r3, r7, #4
 802722c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8027230:	2126      	movs	r1, #38	@ 0x26
 8027232:	9100      	str	r1, [sp, #0]
 8027234:	1d39      	adds	r1, r7, #4
 8027236:	c903      	ldmia	r1, {r0, r1}
 8027238:	f00b f813 	bl	8032262 <mg_span>
 802723c:	4603      	mov	r3, r0
 802723e:	2b00      	cmp	r3, #0
 8027240:	d1cf      	bne.n	80271e2 <mg_http_var+0x22>
    }
  }
  return result;
 8027242:	68fb      	ldr	r3, [r7, #12]
 8027244:	461a      	mov	r2, r3
 8027246:	f107 0310 	add.w	r3, r7, #16
 802724a:	e893 0003 	ldmia.w	r3, {r0, r1}
 802724e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8027252:	68f8      	ldr	r0, [r7, #12]
 8027254:	3730      	adds	r7, #48	@ 0x30
 8027256:	46bd      	mov	sp, r7
 8027258:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802725c:	b002      	add	sp, #8
 802725e:	4770      	bx	lr

08027260 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8027260:	b580      	push	{r7, lr}
 8027262:	b08c      	sub	sp, #48	@ 0x30
 8027264:	af02      	add	r7, sp, #8
 8027266:	60f8      	str	r0, [r7, #12]
 8027268:	60b9      	str	r1, [r7, #8]
 802726a:	607a      	str	r2, [r7, #4]
 802726c:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 802726e:	687b      	ldr	r3, [r7, #4]
 8027270:	2b00      	cmp	r3, #0
 8027272:	d005      	beq.n	8027280 <mg_http_get_var+0x20>
 8027274:	683b      	ldr	r3, [r7, #0]
 8027276:	2b00      	cmp	r3, #0
 8027278:	d002      	beq.n	8027280 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 802727a:	687b      	ldr	r3, [r7, #4]
 802727c:	2200      	movs	r2, #0
 802727e:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 8027280:	687b      	ldr	r3, [r7, #4]
 8027282:	2b00      	cmp	r3, #0
 8027284:	d002      	beq.n	802728c <mg_http_get_var+0x2c>
 8027286:	683b      	ldr	r3, [r7, #0]
 8027288:	2b00      	cmp	r3, #0
 802728a:	d103      	bne.n	8027294 <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 802728c:	f06f 0301 	mvn.w	r3, #1
 8027290:	627b      	str	r3, [r7, #36]	@ 0x24
 8027292:	e033      	b.n	80272fc <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8027294:	68fb      	ldr	r3, [r7, #12]
 8027296:	681b      	ldr	r3, [r3, #0]
 8027298:	2b00      	cmp	r3, #0
 802729a:	d006      	beq.n	80272aa <mg_http_get_var+0x4a>
 802729c:	68bb      	ldr	r3, [r7, #8]
 802729e:	2b00      	cmp	r3, #0
 80272a0:	d003      	beq.n	80272aa <mg_http_get_var+0x4a>
 80272a2:	68fb      	ldr	r3, [r7, #12]
 80272a4:	685b      	ldr	r3, [r3, #4]
 80272a6:	2b00      	cmp	r3, #0
 80272a8:	d103      	bne.n	80272b2 <mg_http_get_var+0x52>
    len = -1;  // Bad source
 80272aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80272ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80272b0:	e024      	b.n	80272fc <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 80272b2:	f107 031c 	add.w	r3, r7, #28
 80272b6:	68b9      	ldr	r1, [r7, #8]
 80272b8:	4618      	mov	r0, r3
 80272ba:	f00a fe0b 	bl	8031ed4 <mg_str_s>
 80272be:	f107 0014 	add.w	r0, r7, #20
 80272c2:	68fa      	ldr	r2, [r7, #12]
 80272c4:	6a3b      	ldr	r3, [r7, #32]
 80272c6:	9300      	str	r3, [sp, #0]
 80272c8:	69fb      	ldr	r3, [r7, #28]
 80272ca:	ca06      	ldmia	r2, {r1, r2}
 80272cc:	f7ff ff78 	bl	80271c0 <mg_http_var>
    if (v.buf == NULL) {
 80272d0:	697b      	ldr	r3, [r7, #20]
 80272d2:	2b00      	cmp	r3, #0
 80272d4:	d103      	bne.n	80272de <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 80272d6:	f06f 0303 	mvn.w	r3, #3
 80272da:	627b      	str	r3, [r7, #36]	@ 0x24
 80272dc:	e00e      	b.n	80272fc <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 80272de:	6978      	ldr	r0, [r7, #20]
 80272e0:	69b9      	ldr	r1, [r7, #24]
 80272e2:	2301      	movs	r3, #1
 80272e4:	9300      	str	r3, [sp, #0]
 80272e6:	683b      	ldr	r3, [r7, #0]
 80272e8:	687a      	ldr	r2, [r7, #4]
 80272ea:	f000 f82e 	bl	802734a <mg_url_decode>
 80272ee:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 80272f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80272f2:	2b00      	cmp	r3, #0
 80272f4:	da02      	bge.n	80272fc <mg_http_get_var+0x9c>
 80272f6:	f06f 0302 	mvn.w	r3, #2
 80272fa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 80272fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80272fe:	4618      	mov	r0, r3
 8027300:	3728      	adds	r7, #40	@ 0x28
 8027302:	46bd      	mov	sp, r7
 8027304:	bd80      	pop	{r7, pc}

08027306 <isx>:

static bool isx(int c) {
 8027306:	b480      	push	{r7}
 8027308:	b083      	sub	sp, #12
 802730a:	af00      	add	r7, sp, #0
 802730c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 802730e:	687b      	ldr	r3, [r7, #4]
 8027310:	2b2f      	cmp	r3, #47	@ 0x2f
 8027312:	dd02      	ble.n	802731a <isx+0x14>
 8027314:	687b      	ldr	r3, [r7, #4]
 8027316:	2b39      	cmp	r3, #57	@ 0x39
 8027318:	dd0b      	ble.n	8027332 <isx+0x2c>
 802731a:	687b      	ldr	r3, [r7, #4]
 802731c:	2b60      	cmp	r3, #96	@ 0x60
 802731e:	dd02      	ble.n	8027326 <isx+0x20>
 8027320:	687b      	ldr	r3, [r7, #4]
 8027322:	2b66      	cmp	r3, #102	@ 0x66
 8027324:	dd05      	ble.n	8027332 <isx+0x2c>
 8027326:	687b      	ldr	r3, [r7, #4]
 8027328:	2b40      	cmp	r3, #64	@ 0x40
 802732a:	dd04      	ble.n	8027336 <isx+0x30>
         (c >= 'A' && c <= 'F');
 802732c:	687b      	ldr	r3, [r7, #4]
 802732e:	2b46      	cmp	r3, #70	@ 0x46
 8027330:	dc01      	bgt.n	8027336 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8027332:	2301      	movs	r3, #1
 8027334:	e000      	b.n	8027338 <isx+0x32>
 8027336:	2300      	movs	r3, #0
 8027338:	f003 0301 	and.w	r3, r3, #1
 802733c:	b2db      	uxtb	r3, r3
}
 802733e:	4618      	mov	r0, r3
 8027340:	370c      	adds	r7, #12
 8027342:	46bd      	mov	sp, r7
 8027344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027348:	4770      	bx	lr

0802734a <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 802734a:	b580      	push	{r7, lr}
 802734c:	b08a      	sub	sp, #40	@ 0x28
 802734e:	af02      	add	r7, sp, #8
 8027350:	60f8      	str	r0, [r7, #12]
 8027352:	60b9      	str	r1, [r7, #8]
 8027354:	607a      	str	r2, [r7, #4]
 8027356:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8027358:	2300      	movs	r3, #0
 802735a:	61bb      	str	r3, [r7, #24]
 802735c:	69bb      	ldr	r3, [r7, #24]
 802735e:	61fb      	str	r3, [r7, #28]
 8027360:	e059      	b.n	8027416 <mg_url_decode+0xcc>
    if (src[i] == '%') {
 8027362:	68fa      	ldr	r2, [r7, #12]
 8027364:	69fb      	ldr	r3, [r7, #28]
 8027366:	4413      	add	r3, r2
 8027368:	781b      	ldrb	r3, [r3, #0]
 802736a:	2b25      	cmp	r3, #37	@ 0x25
 802736c:	d136      	bne.n	80273dc <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 802736e:	69fb      	ldr	r3, [r7, #28]
 8027370:	3302      	adds	r3, #2
 8027372:	68ba      	ldr	r2, [r7, #8]
 8027374:	429a      	cmp	r2, r3
 8027376:	d92e      	bls.n	80273d6 <mg_url_decode+0x8c>
 8027378:	69fb      	ldr	r3, [r7, #28]
 802737a:	3301      	adds	r3, #1
 802737c:	68fa      	ldr	r2, [r7, #12]
 802737e:	4413      	add	r3, r2
 8027380:	781b      	ldrb	r3, [r3, #0]
 8027382:	4618      	mov	r0, r3
 8027384:	f7ff ffbf 	bl	8027306 <isx>
 8027388:	4603      	mov	r3, r0
 802738a:	2b00      	cmp	r3, #0
 802738c:	d023      	beq.n	80273d6 <mg_url_decode+0x8c>
 802738e:	69fb      	ldr	r3, [r7, #28]
 8027390:	3302      	adds	r3, #2
 8027392:	68fa      	ldr	r2, [r7, #12]
 8027394:	4413      	add	r3, r2
 8027396:	781b      	ldrb	r3, [r3, #0]
 8027398:	4618      	mov	r0, r3
 802739a:	f7ff ffb4 	bl	8027306 <isx>
 802739e:	4603      	mov	r3, r0
 80273a0:	2b00      	cmp	r3, #0
 80273a2:	d018      	beq.n	80273d6 <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 80273a4:	69fb      	ldr	r3, [r7, #28]
 80273a6:	3301      	adds	r3, #1
 80273a8:	68fa      	ldr	r2, [r7, #12]
 80273aa:	18d1      	adds	r1, r2, r3
 80273ac:	f107 0310 	add.w	r3, r7, #16
 80273b0:	2202      	movs	r2, #2
 80273b2:	4618      	mov	r0, r3
 80273b4:	f00a fdab 	bl	8031f0e <mg_str_n>
 80273b8:	687a      	ldr	r2, [r7, #4]
 80273ba:	69bb      	ldr	r3, [r7, #24]
 80273bc:	4413      	add	r3, r2
 80273be:	2201      	movs	r2, #1
 80273c0:	9200      	str	r2, [sp, #0]
 80273c2:	2210      	movs	r2, #16
 80273c4:	f107 0110 	add.w	r1, r7, #16
 80273c8:	c903      	ldmia	r1, {r0, r1}
 80273ca:	f00a ffa7 	bl	803231c <mg_str_to_num>
        i += 2;
 80273ce:	69fb      	ldr	r3, [r7, #28]
 80273d0:	3302      	adds	r3, #2
 80273d2:	61fb      	str	r3, [r7, #28]
 80273d4:	e019      	b.n	802740a <mg_url_decode+0xc0>
      } else {
        return -1;
 80273d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80273da:	e03a      	b.n	8027452 <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 80273dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80273de:	2b00      	cmp	r3, #0
 80273e0:	d00b      	beq.n	80273fa <mg_url_decode+0xb0>
 80273e2:	68fa      	ldr	r2, [r7, #12]
 80273e4:	69fb      	ldr	r3, [r7, #28]
 80273e6:	4413      	add	r3, r2
 80273e8:	781b      	ldrb	r3, [r3, #0]
 80273ea:	2b2b      	cmp	r3, #43	@ 0x2b
 80273ec:	d105      	bne.n	80273fa <mg_url_decode+0xb0>
      dst[j] = ' ';
 80273ee:	687a      	ldr	r2, [r7, #4]
 80273f0:	69bb      	ldr	r3, [r7, #24]
 80273f2:	4413      	add	r3, r2
 80273f4:	2220      	movs	r2, #32
 80273f6:	701a      	strb	r2, [r3, #0]
 80273f8:	e007      	b.n	802740a <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 80273fa:	68fa      	ldr	r2, [r7, #12]
 80273fc:	69fb      	ldr	r3, [r7, #28]
 80273fe:	441a      	add	r2, r3
 8027400:	6879      	ldr	r1, [r7, #4]
 8027402:	69bb      	ldr	r3, [r7, #24]
 8027404:	440b      	add	r3, r1
 8027406:	7812      	ldrb	r2, [r2, #0]
 8027408:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 802740a:	69fb      	ldr	r3, [r7, #28]
 802740c:	3301      	adds	r3, #1
 802740e:	61fb      	str	r3, [r7, #28]
 8027410:	69bb      	ldr	r3, [r7, #24]
 8027412:	3301      	adds	r3, #1
 8027414:	61bb      	str	r3, [r7, #24]
 8027416:	69fa      	ldr	r2, [r7, #28]
 8027418:	68bb      	ldr	r3, [r7, #8]
 802741a:	429a      	cmp	r2, r3
 802741c:	d204      	bcs.n	8027428 <mg_url_decode+0xde>
 802741e:	69bb      	ldr	r3, [r7, #24]
 8027420:	3301      	adds	r3, #1
 8027422:	683a      	ldr	r2, [r7, #0]
 8027424:	429a      	cmp	r2, r3
 8027426:	d89c      	bhi.n	8027362 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8027428:	69ba      	ldr	r2, [r7, #24]
 802742a:	683b      	ldr	r3, [r7, #0]
 802742c:	429a      	cmp	r2, r3
 802742e:	d204      	bcs.n	802743a <mg_url_decode+0xf0>
 8027430:	687a      	ldr	r2, [r7, #4]
 8027432:	69bb      	ldr	r3, [r7, #24]
 8027434:	4413      	add	r3, r2
 8027436:	2200      	movs	r2, #0
 8027438:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 802743a:	69fa      	ldr	r2, [r7, #28]
 802743c:	68bb      	ldr	r3, [r7, #8]
 802743e:	429a      	cmp	r2, r3
 8027440:	d305      	bcc.n	802744e <mg_url_decode+0x104>
 8027442:	69ba      	ldr	r2, [r7, #24]
 8027444:	683b      	ldr	r3, [r7, #0]
 8027446:	429a      	cmp	r2, r3
 8027448:	d201      	bcs.n	802744e <mg_url_decode+0x104>
 802744a:	69bb      	ldr	r3, [r7, #24]
 802744c:	e001      	b.n	8027452 <mg_url_decode+0x108>
 802744e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8027452:	4618      	mov	r0, r3
 8027454:	3720      	adds	r7, #32
 8027456:	46bd      	mov	sp, r7
 8027458:	bd80      	pop	{r7, pc}

0802745a <isok>:

static bool isok(uint8_t c) {
 802745a:	b480      	push	{r7}
 802745c:	b083      	sub	sp, #12
 802745e:	af00      	add	r7, sp, #0
 8027460:	4603      	mov	r3, r0
 8027462:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 8027464:	79fb      	ldrb	r3, [r7, #7]
 8027466:	2b0a      	cmp	r3, #10
 8027468:	d008      	beq.n	802747c <isok+0x22>
 802746a:	79fb      	ldrb	r3, [r7, #7]
 802746c:	2b0d      	cmp	r3, #13
 802746e:	d005      	beq.n	802747c <isok+0x22>
 8027470:	79fb      	ldrb	r3, [r7, #7]
 8027472:	2b09      	cmp	r3, #9
 8027474:	d002      	beq.n	802747c <isok+0x22>
 8027476:	79fb      	ldrb	r3, [r7, #7]
 8027478:	2b1f      	cmp	r3, #31
 802747a:	d901      	bls.n	8027480 <isok+0x26>
 802747c:	2301      	movs	r3, #1
 802747e:	e000      	b.n	8027482 <isok+0x28>
 8027480:	2300      	movs	r3, #0
 8027482:	f003 0301 	and.w	r3, r3, #1
 8027486:	b2db      	uxtb	r3, r3
}
 8027488:	4618      	mov	r0, r3
 802748a:	370c      	adds	r7, #12
 802748c:	46bd      	mov	sp, r7
 802748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027492:	4770      	bx	lr

08027494 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8027494:	b580      	push	{r7, lr}
 8027496:	b084      	sub	sp, #16
 8027498:	af00      	add	r7, sp, #0
 802749a:	6078      	str	r0, [r7, #4]
 802749c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 802749e:	2300      	movs	r3, #0
 80274a0:	60fb      	str	r3, [r7, #12]
 80274a2:	e03c      	b.n	802751e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 80274a4:	687a      	ldr	r2, [r7, #4]
 80274a6:	68fb      	ldr	r3, [r7, #12]
 80274a8:	4413      	add	r3, r2
 80274aa:	781b      	ldrb	r3, [r3, #0]
 80274ac:	4618      	mov	r0, r3
 80274ae:	f7ff ffd4 	bl	802745a <isok>
 80274b2:	4603      	mov	r3, r0
 80274b4:	f083 0301 	eor.w	r3, r3, #1
 80274b8:	b2db      	uxtb	r3, r3
 80274ba:	2b00      	cmp	r3, #0
 80274bc:	d002      	beq.n	80274c4 <mg_http_get_request_len+0x30>
 80274be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80274c2:	e031      	b.n	8027528 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 80274c4:	68fb      	ldr	r3, [r7, #12]
 80274c6:	2b00      	cmp	r3, #0
 80274c8:	d00c      	beq.n	80274e4 <mg_http_get_request_len+0x50>
 80274ca:	687a      	ldr	r2, [r7, #4]
 80274cc:	68fb      	ldr	r3, [r7, #12]
 80274ce:	4413      	add	r3, r2
 80274d0:	781b      	ldrb	r3, [r3, #0]
 80274d2:	2b0a      	cmp	r3, #10
 80274d4:	d106      	bne.n	80274e4 <mg_http_get_request_len+0x50>
 80274d6:	68fb      	ldr	r3, [r7, #12]
 80274d8:	3b01      	subs	r3, #1
 80274da:	687a      	ldr	r2, [r7, #4]
 80274dc:	4413      	add	r3, r2
 80274de:	781b      	ldrb	r3, [r3, #0]
 80274e0:	2b0a      	cmp	r3, #10
 80274e2:	d016      	beq.n	8027512 <mg_http_get_request_len+0x7e>
 80274e4:	68fb      	ldr	r3, [r7, #12]
 80274e6:	2b03      	cmp	r3, #3
 80274e8:	d916      	bls.n	8027518 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 80274ea:	687a      	ldr	r2, [r7, #4]
 80274ec:	68fb      	ldr	r3, [r7, #12]
 80274ee:	4413      	add	r3, r2
 80274f0:	781b      	ldrb	r3, [r3, #0]
 80274f2:	2b0a      	cmp	r3, #10
 80274f4:	d110      	bne.n	8027518 <mg_http_get_request_len+0x84>
 80274f6:	68fb      	ldr	r3, [r7, #12]
 80274f8:	3b01      	subs	r3, #1
 80274fa:	687a      	ldr	r2, [r7, #4]
 80274fc:	4413      	add	r3, r2
 80274fe:	781b      	ldrb	r3, [r3, #0]
 8027500:	2b0d      	cmp	r3, #13
 8027502:	d109      	bne.n	8027518 <mg_http_get_request_len+0x84>
 8027504:	68fb      	ldr	r3, [r7, #12]
 8027506:	3b02      	subs	r3, #2
 8027508:	687a      	ldr	r2, [r7, #4]
 802750a:	4413      	add	r3, r2
 802750c:	781b      	ldrb	r3, [r3, #0]
 802750e:	2b0a      	cmp	r3, #10
 8027510:	d102      	bne.n	8027518 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8027512:	68fb      	ldr	r3, [r7, #12]
 8027514:	3301      	adds	r3, #1
 8027516:	e007      	b.n	8027528 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8027518:	68fb      	ldr	r3, [r7, #12]
 802751a:	3301      	adds	r3, #1
 802751c:	60fb      	str	r3, [r7, #12]
 802751e:	68fa      	ldr	r2, [r7, #12]
 8027520:	683b      	ldr	r3, [r7, #0]
 8027522:	429a      	cmp	r2, r3
 8027524:	d3be      	bcc.n	80274a4 <mg_http_get_request_len+0x10>
  }
  return 0;
 8027526:	2300      	movs	r3, #0
}
 8027528:	4618      	mov	r0, r3
 802752a:	3710      	adds	r7, #16
 802752c:	46bd      	mov	sp, r7
 802752e:	bd80      	pop	{r7, pc}

08027530 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8027530:	b580      	push	{r7, lr}
 8027532:	b088      	sub	sp, #32
 8027534:	af00      	add	r7, sp, #0
 8027536:	6078      	str	r0, [r7, #4]
 8027538:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 802753a:	6838      	ldr	r0, [r7, #0]
 802753c:	f7e8 feb0 	bl	80102a0 <strlen>
 8027540:	61b8      	str	r0, [r7, #24]
 8027542:	231e      	movs	r3, #30
 8027544:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8027546:	2300      	movs	r3, #0
 8027548:	61fb      	str	r3, [r7, #28]
 802754a:	e01f      	b.n	802758c <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 802754c:	69fb      	ldr	r3, [r7, #28]
 802754e:	3302      	adds	r3, #2
 8027550:	011b      	lsls	r3, r3, #4
 8027552:	687a      	ldr	r2, [r7, #4]
 8027554:	4413      	add	r3, r2
 8027556:	613b      	str	r3, [r7, #16]
 8027558:	69fb      	ldr	r3, [r7, #28]
 802755a:	011b      	lsls	r3, r3, #4
 802755c:	3328      	adds	r3, #40	@ 0x28
 802755e:	687a      	ldr	r2, [r7, #4]
 8027560:	4413      	add	r3, r2
 8027562:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8027564:	693b      	ldr	r3, [r7, #16]
 8027566:	685b      	ldr	r3, [r3, #4]
 8027568:	69ba      	ldr	r2, [r7, #24]
 802756a:	429a      	cmp	r2, r3
 802756c:	d10b      	bne.n	8027586 <mg_http_get_header+0x56>
 802756e:	693b      	ldr	r3, [r7, #16]
 8027570:	681b      	ldr	r3, [r3, #0]
 8027572:	69ba      	ldr	r2, [r7, #24]
 8027574:	6839      	ldr	r1, [r7, #0]
 8027576:	4618      	mov	r0, r3
 8027578:	f7ff fd4c 	bl	8027014 <mg_ncasecmp>
 802757c:	4603      	mov	r3, r0
 802757e:	2b00      	cmp	r3, #0
 8027580:	d101      	bne.n	8027586 <mg_http_get_header+0x56>
 8027582:	68fb      	ldr	r3, [r7, #12]
 8027584:	e010      	b.n	80275a8 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8027586:	69fb      	ldr	r3, [r7, #28]
 8027588:	3301      	adds	r3, #1
 802758a:	61fb      	str	r3, [r7, #28]
 802758c:	69fa      	ldr	r2, [r7, #28]
 802758e:	697b      	ldr	r3, [r7, #20]
 8027590:	429a      	cmp	r2, r3
 8027592:	d208      	bcs.n	80275a6 <mg_http_get_header+0x76>
 8027594:	687a      	ldr	r2, [r7, #4]
 8027596:	69fb      	ldr	r3, [r7, #28]
 8027598:	3302      	adds	r3, #2
 802759a:	011b      	lsls	r3, r3, #4
 802759c:	4413      	add	r3, r2
 802759e:	3304      	adds	r3, #4
 80275a0:	681b      	ldr	r3, [r3, #0]
 80275a2:	2b00      	cmp	r3, #0
 80275a4:	d1d2      	bne.n	802754c <mg_http_get_header+0x1c>
  }
  return NULL;
 80275a6:	2300      	movs	r3, #0
}
 80275a8:	4618      	mov	r0, r3
 80275aa:	3720      	adds	r7, #32
 80275ac:	46bd      	mov	sp, r7
 80275ae:	bd80      	pop	{r7, pc}

080275b0 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 80275b0:	b480      	push	{r7}
 80275b2:	b083      	sub	sp, #12
 80275b4:	af00      	add	r7, sp, #0
 80275b6:	4603      	mov	r3, r0
 80275b8:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 80275ba:	79fb      	ldrb	r3, [r7, #7]
 80275bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80275c0:	2b80      	cmp	r3, #128	@ 0x80
 80275c2:	bf0c      	ite	eq
 80275c4:	2301      	moveq	r3, #1
 80275c6:	2300      	movne	r3, #0
 80275c8:	b2db      	uxtb	r3, r3
}
 80275ca:	4618      	mov	r0, r3
 80275cc:	370c      	adds	r7, #12
 80275ce:	46bd      	mov	sp, r7
 80275d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275d4:	4770      	bx	lr

080275d6 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 80275d6:	b580      	push	{r7, lr}
 80275d8:	b086      	sub	sp, #24
 80275da:	af00      	add	r7, sp, #0
 80275dc:	6078      	str	r0, [r7, #4]
 80275de:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 80275e0:	687b      	ldr	r3, [r7, #4]
 80275e2:	617b      	str	r3, [r7, #20]
 80275e4:	697b      	ldr	r3, [r7, #20]
 80275e6:	781b      	ldrb	r3, [r3, #0]
 80275e8:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 80275ea:	683a      	ldr	r2, [r7, #0]
 80275ec:	687b      	ldr	r3, [r7, #4]
 80275ee:	1ad3      	subs	r3, r2, r3
 80275f0:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 80275f2:	7cfb      	ldrb	r3, [r7, #19]
 80275f4:	2b20      	cmp	r3, #32
 80275f6:	d904      	bls.n	8027602 <clen+0x2c>
 80275f8:	7cfb      	ldrb	r3, [r7, #19]
 80275fa:	2b7d      	cmp	r3, #125	@ 0x7d
 80275fc:	d801      	bhi.n	8027602 <clen+0x2c>
 80275fe:	2301      	movs	r3, #1
 8027600:	e054      	b.n	80276ac <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8027602:	7cfb      	ldrb	r3, [r7, #19]
 8027604:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8027608:	2bc0      	cmp	r3, #192	@ 0xc0
 802760a:	d10d      	bne.n	8027628 <clen+0x52>
 802760c:	68fb      	ldr	r3, [r7, #12]
 802760e:	2b01      	cmp	r3, #1
 8027610:	dd0a      	ble.n	8027628 <clen+0x52>
 8027612:	697b      	ldr	r3, [r7, #20]
 8027614:	3301      	adds	r3, #1
 8027616:	781b      	ldrb	r3, [r3, #0]
 8027618:	4618      	mov	r0, r3
 802761a:	f7ff ffc9 	bl	80275b0 <vcb>
 802761e:	4603      	mov	r3, r0
 8027620:	2b00      	cmp	r3, #0
 8027622:	d001      	beq.n	8027628 <clen+0x52>
 8027624:	2302      	movs	r3, #2
 8027626:	e041      	b.n	80276ac <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8027628:	7cfb      	ldrb	r3, [r7, #19]
 802762a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802762e:	2be0      	cmp	r3, #224	@ 0xe0
 8027630:	d116      	bne.n	8027660 <clen+0x8a>
 8027632:	68fb      	ldr	r3, [r7, #12]
 8027634:	2b02      	cmp	r3, #2
 8027636:	dd13      	ble.n	8027660 <clen+0x8a>
 8027638:	697b      	ldr	r3, [r7, #20]
 802763a:	3301      	adds	r3, #1
 802763c:	781b      	ldrb	r3, [r3, #0]
 802763e:	4618      	mov	r0, r3
 8027640:	f7ff ffb6 	bl	80275b0 <vcb>
 8027644:	4603      	mov	r3, r0
 8027646:	2b00      	cmp	r3, #0
 8027648:	d00a      	beq.n	8027660 <clen+0x8a>
 802764a:	697b      	ldr	r3, [r7, #20]
 802764c:	3302      	adds	r3, #2
 802764e:	781b      	ldrb	r3, [r3, #0]
 8027650:	4618      	mov	r0, r3
 8027652:	f7ff ffad 	bl	80275b0 <vcb>
 8027656:	4603      	mov	r3, r0
 8027658:	2b00      	cmp	r3, #0
 802765a:	d001      	beq.n	8027660 <clen+0x8a>
 802765c:	2303      	movs	r3, #3
 802765e:	e025      	b.n	80276ac <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8027660:	7cfb      	ldrb	r3, [r7, #19]
 8027662:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8027666:	2bf0      	cmp	r3, #240	@ 0xf0
 8027668:	d11f      	bne.n	80276aa <clen+0xd4>
 802766a:	68fb      	ldr	r3, [r7, #12]
 802766c:	2b03      	cmp	r3, #3
 802766e:	dd1c      	ble.n	80276aa <clen+0xd4>
 8027670:	697b      	ldr	r3, [r7, #20]
 8027672:	3301      	adds	r3, #1
 8027674:	781b      	ldrb	r3, [r3, #0]
 8027676:	4618      	mov	r0, r3
 8027678:	f7ff ff9a 	bl	80275b0 <vcb>
 802767c:	4603      	mov	r3, r0
 802767e:	2b00      	cmp	r3, #0
 8027680:	d013      	beq.n	80276aa <clen+0xd4>
 8027682:	697b      	ldr	r3, [r7, #20]
 8027684:	3302      	adds	r3, #2
 8027686:	781b      	ldrb	r3, [r3, #0]
 8027688:	4618      	mov	r0, r3
 802768a:	f7ff ff91 	bl	80275b0 <vcb>
 802768e:	4603      	mov	r3, r0
 8027690:	2b00      	cmp	r3, #0
 8027692:	d00a      	beq.n	80276aa <clen+0xd4>
 8027694:	697b      	ldr	r3, [r7, #20]
 8027696:	3303      	adds	r3, #3
 8027698:	781b      	ldrb	r3, [r3, #0]
 802769a:	4618      	mov	r0, r3
 802769c:	f7ff ff88 	bl	80275b0 <vcb>
 80276a0:	4603      	mov	r3, r0
 80276a2:	2b00      	cmp	r3, #0
 80276a4:	d001      	beq.n	80276aa <clen+0xd4>
    return 4;
 80276a6:	2304      	movs	r3, #4
 80276a8:	e000      	b.n	80276ac <clen+0xd6>
  return 0;
 80276aa:	2300      	movs	r3, #0
}
 80276ac:	4618      	mov	r0, r3
 80276ae:	3718      	adds	r7, #24
 80276b0:	46bd      	mov	sp, r7
 80276b2:	bd80      	pop	{r7, pc}

080276b4 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 80276b4:	b480      	push	{r7}
 80276b6:	b085      	sub	sp, #20
 80276b8:	af00      	add	r7, sp, #0
 80276ba:	60f8      	str	r0, [r7, #12]
 80276bc:	60b9      	str	r1, [r7, #8]
 80276be:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 80276c0:	687b      	ldr	r3, [r7, #4]
 80276c2:	68fa      	ldr	r2, [r7, #12]
 80276c4:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 80276c6:	e007      	b.n	80276d8 <skiptorn+0x24>
 80276c8:	68fb      	ldr	r3, [r7, #12]
 80276ca:	3301      	adds	r3, #1
 80276cc:	60fb      	str	r3, [r7, #12]
 80276ce:	687b      	ldr	r3, [r7, #4]
 80276d0:	685b      	ldr	r3, [r3, #4]
 80276d2:	1c5a      	adds	r2, r3, #1
 80276d4:	687b      	ldr	r3, [r7, #4]
 80276d6:	605a      	str	r2, [r3, #4]
 80276d8:	68fa      	ldr	r2, [r7, #12]
 80276da:	68bb      	ldr	r3, [r7, #8]
 80276dc:	429a      	cmp	r2, r3
 80276de:	d207      	bcs.n	80276f0 <skiptorn+0x3c>
 80276e0:	68fb      	ldr	r3, [r7, #12]
 80276e2:	781b      	ldrb	r3, [r3, #0]
 80276e4:	2b0a      	cmp	r3, #10
 80276e6:	d003      	beq.n	80276f0 <skiptorn+0x3c>
 80276e8:	68fb      	ldr	r3, [r7, #12]
 80276ea:	781b      	ldrb	r3, [r3, #0]
 80276ec:	2b0d      	cmp	r3, #13
 80276ee:	d1eb      	bne.n	80276c8 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 80276f0:	68fa      	ldr	r2, [r7, #12]
 80276f2:	68bb      	ldr	r3, [r7, #8]
 80276f4:	429a      	cmp	r2, r3
 80276f6:	d208      	bcs.n	802770a <skiptorn+0x56>
 80276f8:	68fb      	ldr	r3, [r7, #12]
 80276fa:	781b      	ldrb	r3, [r3, #0]
 80276fc:	2b0d      	cmp	r3, #13
 80276fe:	d106      	bne.n	802770e <skiptorn+0x5a>
 8027700:	68fb      	ldr	r3, [r7, #12]
 8027702:	3301      	adds	r3, #1
 8027704:	781b      	ldrb	r3, [r3, #0]
 8027706:	2b0a      	cmp	r3, #10
 8027708:	d001      	beq.n	802770e <skiptorn+0x5a>
 802770a:	2300      	movs	r3, #0
 802770c:	e017      	b.n	802773e <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 802770e:	68fa      	ldr	r2, [r7, #12]
 8027710:	68bb      	ldr	r3, [r7, #8]
 8027712:	429a      	cmp	r2, r3
 8027714:	d206      	bcs.n	8027724 <skiptorn+0x70>
 8027716:	68fb      	ldr	r3, [r7, #12]
 8027718:	781b      	ldrb	r3, [r3, #0]
 802771a:	2b0d      	cmp	r3, #13
 802771c:	d102      	bne.n	8027724 <skiptorn+0x70>
 802771e:	68fb      	ldr	r3, [r7, #12]
 8027720:	3301      	adds	r3, #1
 8027722:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8027724:	68fa      	ldr	r2, [r7, #12]
 8027726:	68bb      	ldr	r3, [r7, #8]
 8027728:	429a      	cmp	r2, r3
 802772a:	d205      	bcs.n	8027738 <skiptorn+0x84>
 802772c:	68fb      	ldr	r3, [r7, #12]
 802772e:	1c5a      	adds	r2, r3, #1
 8027730:	60fa      	str	r2, [r7, #12]
 8027732:	781b      	ldrb	r3, [r3, #0]
 8027734:	2b0a      	cmp	r3, #10
 8027736:	d001      	beq.n	802773c <skiptorn+0x88>
 8027738:	2300      	movs	r3, #0
 802773a:	e000      	b.n	802773e <skiptorn+0x8a>
  return s;
 802773c:	68fb      	ldr	r3, [r7, #12]
}
 802773e:	4618      	mov	r0, r3
 8027740:	3714      	adds	r7, #20
 8027742:	46bd      	mov	sp, r7
 8027744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027748:	4770      	bx	lr

0802774a <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 802774a:	b580      	push	{r7, lr}
 802774c:	b08a      	sub	sp, #40	@ 0x28
 802774e:	af00      	add	r7, sp, #0
 8027750:	60f8      	str	r0, [r7, #12]
 8027752:	60b9      	str	r1, [r7, #8]
 8027754:	607a      	str	r2, [r7, #4]
 8027756:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8027758:	2300      	movs	r3, #0
 802775a:	627b      	str	r3, [r7, #36]	@ 0x24
 802775c:	e09a      	b.n	8027894 <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 802775e:	2300      	movs	r3, #0
 8027760:	61bb      	str	r3, [r7, #24]
 8027762:	2300      	movs	r3, #0
 8027764:	61fb      	str	r3, [r7, #28]
 8027766:	2300      	movs	r3, #0
 8027768:	613b      	str	r3, [r7, #16]
 802776a:	2300      	movs	r3, #0
 802776c:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 802776e:	68fa      	ldr	r2, [r7, #12]
 8027770:	68bb      	ldr	r3, [r7, #8]
 8027772:	429a      	cmp	r2, r3
 8027774:	d301      	bcc.n	802777a <mg_http_parse_headers+0x30>
 8027776:	2300      	movs	r3, #0
 8027778:	e092      	b.n	80278a0 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 802777a:	68fb      	ldr	r3, [r7, #12]
 802777c:	781b      	ldrb	r3, [r3, #0]
 802777e:	2b0a      	cmp	r3, #10
 8027780:	f000 808d 	beq.w	802789e <mg_http_parse_headers+0x154>
 8027784:	68fb      	ldr	r3, [r7, #12]
 8027786:	781b      	ldrb	r3, [r3, #0]
 8027788:	2b0d      	cmp	r3, #13
 802778a:	d105      	bne.n	8027798 <mg_http_parse_headers+0x4e>
 802778c:	68fb      	ldr	r3, [r7, #12]
 802778e:	3301      	adds	r3, #1
 8027790:	781b      	ldrb	r3, [r3, #0]
 8027792:	2b0a      	cmp	r3, #10
 8027794:	f000 8083 	beq.w	802789e <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 8027798:	68fb      	ldr	r3, [r7, #12]
 802779a:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 802779c:	e007      	b.n	80277ae <mg_http_parse_headers+0x64>
 802779e:	68fa      	ldr	r2, [r7, #12]
 80277a0:	6a3b      	ldr	r3, [r7, #32]
 80277a2:	4413      	add	r3, r2
 80277a4:	60fb      	str	r3, [r7, #12]
 80277a6:	69fa      	ldr	r2, [r7, #28]
 80277a8:	6a3b      	ldr	r3, [r7, #32]
 80277aa:	4413      	add	r3, r2
 80277ac:	61fb      	str	r3, [r7, #28]
 80277ae:	68fa      	ldr	r2, [r7, #12]
 80277b0:	68bb      	ldr	r3, [r7, #8]
 80277b2:	429a      	cmp	r2, r3
 80277b4:	d20b      	bcs.n	80277ce <mg_http_parse_headers+0x84>
 80277b6:	68fb      	ldr	r3, [r7, #12]
 80277b8:	781b      	ldrb	r3, [r3, #0]
 80277ba:	2b3a      	cmp	r3, #58	@ 0x3a
 80277bc:	d007      	beq.n	80277ce <mg_http_parse_headers+0x84>
 80277be:	68b9      	ldr	r1, [r7, #8]
 80277c0:	68f8      	ldr	r0, [r7, #12]
 80277c2:	f7ff ff08 	bl	80275d6 <clen>
 80277c6:	6238      	str	r0, [r7, #32]
 80277c8:	6a3b      	ldr	r3, [r7, #32]
 80277ca:	2b00      	cmp	r3, #0
 80277cc:	d1e7      	bne.n	802779e <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 80277ce:	69fb      	ldr	r3, [r7, #28]
 80277d0:	2b00      	cmp	r3, #0
 80277d2:	d101      	bne.n	80277d8 <mg_http_parse_headers+0x8e>
 80277d4:	2300      	movs	r3, #0
 80277d6:	e063      	b.n	80278a0 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 80277d8:	68fa      	ldr	r2, [r7, #12]
 80277da:	68bb      	ldr	r3, [r7, #8]
 80277dc:	429a      	cmp	r2, r3
 80277de:	d206      	bcs.n	80277ee <mg_http_parse_headers+0xa4>
 80277e0:	68b9      	ldr	r1, [r7, #8]
 80277e2:	68f8      	ldr	r0, [r7, #12]
 80277e4:	f7ff fef7 	bl	80275d6 <clen>
 80277e8:	4603      	mov	r3, r0
 80277ea:	2b00      	cmp	r3, #0
 80277ec:	d101      	bne.n	80277f2 <mg_http_parse_headers+0xa8>
 80277ee:	2300      	movs	r3, #0
 80277f0:	e056      	b.n	80278a0 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 80277f2:	68fb      	ldr	r3, [r7, #12]
 80277f4:	1c5a      	adds	r2, r3, #1
 80277f6:	60fa      	str	r2, [r7, #12]
 80277f8:	781b      	ldrb	r3, [r3, #0]
 80277fa:	2b3a      	cmp	r3, #58	@ 0x3a
 80277fc:	d004      	beq.n	8027808 <mg_http_parse_headers+0xbe>
 80277fe:	2300      	movs	r3, #0
 8027800:	e04e      	b.n	80278a0 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8027802:	68fb      	ldr	r3, [r7, #12]
 8027804:	3301      	adds	r3, #1
 8027806:	60fb      	str	r3, [r7, #12]
 8027808:	68fa      	ldr	r2, [r7, #12]
 802780a:	68bb      	ldr	r3, [r7, #8]
 802780c:	429a      	cmp	r2, r3
 802780e:	d207      	bcs.n	8027820 <mg_http_parse_headers+0xd6>
 8027810:	68fb      	ldr	r3, [r7, #12]
 8027812:	781b      	ldrb	r3, [r3, #0]
 8027814:	2b20      	cmp	r3, #32
 8027816:	d0f4      	beq.n	8027802 <mg_http_parse_headers+0xb8>
 8027818:	68fb      	ldr	r3, [r7, #12]
 802781a:	781b      	ldrb	r3, [r3, #0]
 802781c:	2b09      	cmp	r3, #9
 802781e:	d0f0      	beq.n	8027802 <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8027820:	f107 0310 	add.w	r3, r7, #16
 8027824:	461a      	mov	r2, r3
 8027826:	68b9      	ldr	r1, [r7, #8]
 8027828:	68f8      	ldr	r0, [r7, #12]
 802782a:	f7ff ff43 	bl	80276b4 <skiptorn>
 802782e:	60f8      	str	r0, [r7, #12]
 8027830:	68fb      	ldr	r3, [r7, #12]
 8027832:	2b00      	cmp	r3, #0
 8027834:	d104      	bne.n	8027840 <mg_http_parse_headers+0xf6>
 8027836:	2300      	movs	r3, #0
 8027838:	e032      	b.n	80278a0 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 802783a:	697b      	ldr	r3, [r7, #20]
 802783c:	3b01      	subs	r3, #1
 802783e:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 8027840:	697b      	ldr	r3, [r7, #20]
 8027842:	2b00      	cmp	r3, #0
 8027844:	d00d      	beq.n	8027862 <mg_http_parse_headers+0x118>
 8027846:	693a      	ldr	r2, [r7, #16]
 8027848:	697b      	ldr	r3, [r7, #20]
 802784a:	3b01      	subs	r3, #1
 802784c:	4413      	add	r3, r2
 802784e:	781b      	ldrb	r3, [r3, #0]
 8027850:	2b20      	cmp	r3, #32
 8027852:	d0f2      	beq.n	802783a <mg_http_parse_headers+0xf0>
 8027854:	693a      	ldr	r2, [r7, #16]
 8027856:	697b      	ldr	r3, [r7, #20]
 8027858:	3b01      	subs	r3, #1
 802785a:	4413      	add	r3, r2
 802785c:	781b      	ldrb	r3, [r3, #0]
 802785e:	2b09      	cmp	r3, #9
 8027860:	d0eb      	beq.n	802783a <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 8027862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027864:	011b      	lsls	r3, r3, #4
 8027866:	687a      	ldr	r2, [r7, #4]
 8027868:	4413      	add	r3, r2
 802786a:	461a      	mov	r2, r3
 802786c:	f107 0318 	add.w	r3, r7, #24
 8027870:	e893 0003 	ldmia.w	r3, {r0, r1}
 8027874:	e882 0003 	stmia.w	r2, {r0, r1}
 8027878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802787a:	011b      	lsls	r3, r3, #4
 802787c:	687a      	ldr	r2, [r7, #4]
 802787e:	4413      	add	r3, r2
 8027880:	3308      	adds	r3, #8
 8027882:	f107 0210 	add.w	r2, r7, #16
 8027886:	e892 0003 	ldmia.w	r2, {r0, r1}
 802788a:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 802788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027890:	3301      	adds	r3, #1
 8027892:	627b      	str	r3, [r7, #36]	@ 0x24
 8027894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8027896:	683b      	ldr	r3, [r7, #0]
 8027898:	429a      	cmp	r2, r3
 802789a:	f4ff af60 	bcc.w	802775e <mg_http_parse_headers+0x14>
  }
  return true;
 802789e:	2301      	movs	r3, #1
}
 80278a0:	4618      	mov	r0, r3
 80278a2:	3728      	adds	r7, #40	@ 0x28
 80278a4:	46bd      	mov	sp, r7
 80278a6:	bd80      	pop	{r7, pc}

080278a8 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 80278a8:	b580      	push	{r7, lr}
 80278aa:	b090      	sub	sp, #64	@ 0x40
 80278ac:	af00      	add	r7, sp, #0
 80278ae:	60f8      	str	r0, [r7, #12]
 80278b0:	60b9      	str	r1, [r7, #8]
 80278b2:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 80278b4:	68b9      	ldr	r1, [r7, #8]
 80278b6:	68f8      	ldr	r0, [r7, #12]
 80278b8:	f7ff fdec 	bl	8027494 <mg_http_get_request_len>
 80278bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 80278be:	68fb      	ldr	r3, [r7, #12]
 80278c0:	2b00      	cmp	r3, #0
 80278c2:	d003      	beq.n	80278cc <mg_http_parse+0x24>
 80278c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80278c6:	68fa      	ldr	r2, [r7, #12]
 80278c8:	4413      	add	r3, r2
 80278ca:	e000      	b.n	80278ce <mg_http_parse+0x26>
 80278cc:	2300      	movs	r3, #0
 80278ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  const struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 80278d0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80278d4:	2100      	movs	r1, #0
 80278d6:	6878      	ldr	r0, [r7, #4]
 80278d8:	f00e fc02 	bl	80360e0 <memset>
  if (req_len <= 0) return req_len;
 80278dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80278de:	2b00      	cmp	r3, #0
 80278e0:	dc01      	bgt.n	80278e6 <mg_http_parse+0x3e>
 80278e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80278e4:	e13f      	b.n	8027b66 <mg_http_parse+0x2be>

  hm->message.buf = hm->head.buf = (char *) s;
 80278e6:	687b      	ldr	r3, [r7, #4]
 80278e8:	68fa      	ldr	r2, [r7, #12]
 80278ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 80278ee:	687b      	ldr	r3, [r7, #4]
 80278f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80278f4:	687b      	ldr	r3, [r7, #4]
 80278f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 80278fa:	687b      	ldr	r3, [r7, #4]
 80278fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80278fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8027902:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8027904:	687b      	ldr	r3, [r7, #4]
 8027906:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 802790a:	687b      	ldr	r3, [r7, #4]
 802790c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8027910:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8027914:	687b      	ldr	r3, [r7, #4]
 8027916:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 802791a:	687b      	ldr	r3, [r7, #4]
 802791c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8027920:	687b      	ldr	r3, [r7, #4]
 8027922:	68fa      	ldr	r2, [r7, #12]
 8027924:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8027926:	e009      	b.n	802793c <mg_http_parse+0x94>
 8027928:	68fa      	ldr	r2, [r7, #12]
 802792a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802792c:	4413      	add	r3, r2
 802792e:	60fb      	str	r3, [r7, #12]
 8027930:	687b      	ldr	r3, [r7, #4]
 8027932:	685a      	ldr	r2, [r3, #4]
 8027934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027936:	441a      	add	r2, r3
 8027938:	687b      	ldr	r3, [r7, #4]
 802793a:	605a      	str	r2, [r3, #4]
 802793c:	68fa      	ldr	r2, [r7, #12]
 802793e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027940:	429a      	cmp	r2, r3
 8027942:	d20b      	bcs.n	802795c <mg_http_parse+0xb4>
 8027944:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8027946:	68f8      	ldr	r0, [r7, #12]
 8027948:	f7ff fe45 	bl	80275d6 <clen>
 802794c:	6378      	str	r0, [r7, #52]	@ 0x34
 802794e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027950:	2b00      	cmp	r3, #0
 8027952:	d1e9      	bne.n	8027928 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8027954:	e002      	b.n	802795c <mg_http_parse+0xb4>
 8027956:	68fb      	ldr	r3, [r7, #12]
 8027958:	3301      	adds	r3, #1
 802795a:	60fb      	str	r3, [r7, #12]
 802795c:	68fa      	ldr	r2, [r7, #12]
 802795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027960:	429a      	cmp	r2, r3
 8027962:	d203      	bcs.n	802796c <mg_http_parse+0xc4>
 8027964:	68fb      	ldr	r3, [r7, #12]
 8027966:	781b      	ldrb	r3, [r3, #0]
 8027968:	2b20      	cmp	r3, #32
 802796a:	d0f4      	beq.n	8027956 <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 802796c:	687b      	ldr	r3, [r7, #4]
 802796e:	68fa      	ldr	r2, [r7, #12]
 8027970:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8027972:	e009      	b.n	8027988 <mg_http_parse+0xe0>
 8027974:	68fa      	ldr	r2, [r7, #12]
 8027976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027978:	4413      	add	r3, r2
 802797a:	60fb      	str	r3, [r7, #12]
 802797c:	687b      	ldr	r3, [r7, #4]
 802797e:	68da      	ldr	r2, [r3, #12]
 8027980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027982:	441a      	add	r2, r3
 8027984:	687b      	ldr	r3, [r7, #4]
 8027986:	60da      	str	r2, [r3, #12]
 8027988:	68fa      	ldr	r2, [r7, #12]
 802798a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802798c:	429a      	cmp	r2, r3
 802798e:	d20b      	bcs.n	80279a8 <mg_http_parse+0x100>
 8027990:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8027992:	68f8      	ldr	r0, [r7, #12]
 8027994:	f7ff fe1f 	bl	80275d6 <clen>
 8027998:	6378      	str	r0, [r7, #52]	@ 0x34
 802799a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802799c:	2b00      	cmp	r3, #0
 802799e:	d1e9      	bne.n	8027974 <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80279a0:	e002      	b.n	80279a8 <mg_http_parse+0x100>
 80279a2:	68fb      	ldr	r3, [r7, #12]
 80279a4:	3301      	adds	r3, #1
 80279a6:	60fb      	str	r3, [r7, #12]
 80279a8:	68fa      	ldr	r2, [r7, #12]
 80279aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279ac:	429a      	cmp	r2, r3
 80279ae:	d203      	bcs.n	80279b8 <mg_http_parse+0x110>
 80279b0:	68fb      	ldr	r3, [r7, #12]
 80279b2:	781b      	ldrb	r3, [r3, #0]
 80279b4:	2b20      	cmp	r3, #32
 80279b6:	d0f4      	beq.n	80279a2 <mg_http_parse+0xfa>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 80279b8:	687b      	ldr	r3, [r7, #4]
 80279ba:	3318      	adds	r3, #24
 80279bc:	461a      	mov	r2, r3
 80279be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80279c0:	68f8      	ldr	r0, [r7, #12]
 80279c2:	f7ff fe77 	bl	80276b4 <skiptorn>
 80279c6:	60f8      	str	r0, [r7, #12]
 80279c8:	68fb      	ldr	r3, [r7, #12]
 80279ca:	2b00      	cmp	r3, #0
 80279cc:	d101      	bne.n	80279d2 <mg_http_parse+0x12a>
 80279ce:	2300      	movs	r3, #0
 80279d0:	e0c9      	b.n	8027b66 <mg_http_parse+0x2be>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 80279d2:	687b      	ldr	r3, [r7, #4]
 80279d4:	6898      	ldr	r0, [r3, #8]
 80279d6:	687b      	ldr	r3, [r7, #4]
 80279d8:	68db      	ldr	r3, [r3, #12]
 80279da:	461a      	mov	r2, r3
 80279dc:	213f      	movs	r1, #63	@ 0x3f
 80279de:	f7e8 fc0f 	bl	8010200 <memchr>
 80279e2:	6338      	str	r0, [r7, #48]	@ 0x30
 80279e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80279e6:	2b00      	cmp	r3, #0
 80279e8:	d015      	beq.n	8027a16 <mg_http_parse+0x16e>
    hm->query.buf = (char *) qs + 1;
 80279ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80279ec:	1c5a      	adds	r2, r3, #1
 80279ee:	687b      	ldr	r3, [r7, #4]
 80279f0:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 80279f2:	687b      	ldr	r3, [r7, #4]
 80279f4:	689a      	ldr	r2, [r3, #8]
 80279f6:	687b      	ldr	r3, [r7, #4]
 80279f8:	68db      	ldr	r3, [r3, #12]
 80279fa:	441a      	add	r2, r3
 80279fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80279fe:	3301      	adds	r3, #1
 8027a00:	1ad3      	subs	r3, r2, r3
 8027a02:	461a      	mov	r2, r3
 8027a04:	687b      	ldr	r3, [r7, #4]
 8027a06:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8027a08:	687b      	ldr	r3, [r7, #4]
 8027a0a:	689b      	ldr	r3, [r3, #8]
 8027a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8027a0e:	1ad3      	subs	r3, r2, r3
 8027a10:	461a      	mov	r2, r3
 8027a12:	687b      	ldr	r3, [r7, #4]
 8027a14:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8027a16:	687b      	ldr	r3, [r7, #4]
 8027a18:	685b      	ldr	r3, [r3, #4]
 8027a1a:	2b00      	cmp	r3, #0
 8027a1c:	d003      	beq.n	8027a26 <mg_http_parse+0x17e>
 8027a1e:	687b      	ldr	r3, [r7, #4]
 8027a20:	68db      	ldr	r3, [r3, #12]
 8027a22:	2b00      	cmp	r3, #0
 8027a24:	d102      	bne.n	8027a2c <mg_http_parse+0x184>
 8027a26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027a2a:	e09c      	b.n	8027b66 <mg_http_parse+0x2be>

  if (!mg_http_parse_headers(s, end, hm->headers,
 8027a2c:	687b      	ldr	r3, [r7, #4]
 8027a2e:	f103 0220 	add.w	r2, r3, #32
 8027a32:	231e      	movs	r3, #30
 8027a34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8027a36:	68f8      	ldr	r0, [r7, #12]
 8027a38:	f7ff fe87 	bl	802774a <mg_http_parse_headers>
 8027a3c:	4603      	mov	r3, r0
 8027a3e:	f083 0301 	eor.w	r3, r3, #1
 8027a42:	b2db      	uxtb	r3, r3
 8027a44:	2b00      	cmp	r3, #0
 8027a46:	d002      	beq.n	8027a4e <mg_http_parse+0x1a6>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8027a48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027a4c:	e08b      	b.n	8027b66 <mg_http_parse+0x2be>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8027a4e:	4948      	ldr	r1, [pc, #288]	@ (8027b70 <mg_http_parse+0x2c8>)
 8027a50:	6878      	ldr	r0, [r7, #4]
 8027a52:	f7ff fd6d 	bl	8027530 <mg_http_get_header>
 8027a56:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8027a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027a5a:	2b00      	cmp	r3, #0
 8027a5c:	d018      	beq.n	8027a90 <mg_http_parse+0x1e8>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8027a5e:	687b      	ldr	r3, [r7, #4]
 8027a60:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 8027a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027a66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8027a6a:	f7ff fb13 	bl	8027094 <mg_to_size_t>
 8027a6e:	4603      	mov	r3, r0
 8027a70:	f083 0301 	eor.w	r3, r3, #1
 8027a74:	b2db      	uxtb	r3, r3
 8027a76:	2b00      	cmp	r3, #0
 8027a78:	d002      	beq.n	8027a80 <mg_http_parse+0x1d8>
 8027a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027a7e:	e072      	b.n	8027b66 <mg_http_parse+0x2be>
    hm->message.len = (size_t) req_len + hm->body.len;
 8027a80:	687b      	ldr	r3, [r7, #4]
 8027a82:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8027a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027a88:	441a      	add	r2, r3
 8027a8a:	687b      	ldr	r3, [r7, #4]
 8027a8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8027a90:	687b      	ldr	r3, [r7, #4]
 8027a92:	681b      	ldr	r3, [r3, #0]
 8027a94:	2205      	movs	r2, #5
 8027a96:	4937      	ldr	r1, [pc, #220]	@ (8027b74 <mg_http_parse+0x2cc>)
 8027a98:	4618      	mov	r0, r3
 8027a9a:	f7ff fabb 	bl	8027014 <mg_ncasecmp>
 8027a9e:	4603      	mov	r3, r0
 8027aa0:	2b00      	cmp	r3, #0
 8027aa2:	bf0c      	ite	eq
 8027aa4:	2301      	moveq	r3, #1
 8027aa6:	2300      	movne	r3, #0
 8027aa8:	b2db      	uxtb	r3, r3
 8027aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8027aac:	687b      	ldr	r3, [r7, #4]
 8027aae:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8027ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8027ab6:	d12a      	bne.n	8027b0e <mg_http_parse+0x266>
 8027ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027aba:	2b00      	cmp	r3, #0
 8027abc:	d127      	bne.n	8027b0e <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8027abe:	f107 0310 	add.w	r3, r7, #16
 8027ac2:	492d      	ldr	r1, [pc, #180]	@ (8027b78 <mg_http_parse+0x2d0>)
 8027ac4:	4618      	mov	r0, r3
 8027ac6:	f00a fa05 	bl	8031ed4 <mg_str_s>
 8027aca:	6879      	ldr	r1, [r7, #4]
 8027acc:	f107 0310 	add.w	r3, r7, #16
 8027ad0:	cb0c      	ldmia	r3, {r2, r3}
 8027ad2:	c903      	ldmia	r1, {r0, r1}
 8027ad4:	f00a fa8a 	bl	8031fec <mg_strcasecmp>
 8027ad8:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8027ada:	2b00      	cmp	r3, #0
 8027adc:	d017      	beq.n	8027b0e <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8027ade:	f107 0318 	add.w	r3, r7, #24
 8027ae2:	4926      	ldr	r1, [pc, #152]	@ (8027b7c <mg_http_parse+0x2d4>)
 8027ae4:	4618      	mov	r0, r3
 8027ae6:	f00a f9f5 	bl	8031ed4 <mg_str_s>
 8027aea:	6879      	ldr	r1, [r7, #4]
 8027aec:	f107 0318 	add.w	r3, r7, #24
 8027af0:	cb0c      	ldmia	r3, {r2, r3}
 8027af2:	c903      	ldmia	r1, {r0, r1}
 8027af4:	f00a fa7a 	bl	8031fec <mg_strcasecmp>
 8027af8:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8027afa:	2b00      	cmp	r3, #0
 8027afc:	d007      	beq.n	8027b0e <mg_http_parse+0x266>
    hm->body.len = 0;
 8027afe:	687b      	ldr	r3, [r7, #4]
 8027b00:	2200      	movs	r2, #0
 8027b02:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8027b06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8027b08:	687b      	ldr	r3, [r7, #4]
 8027b0a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8027b0e:	687b      	ldr	r3, [r7, #4]
 8027b10:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8027b14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8027b18:	d11b      	bne.n	8027b52 <mg_http_parse+0x2aa>
 8027b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b1c:	2b00      	cmp	r3, #0
 8027b1e:	d018      	beq.n	8027b52 <mg_http_parse+0x2aa>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8027b20:	f107 0320 	add.w	r3, r7, #32
 8027b24:	4916      	ldr	r1, [pc, #88]	@ (8027b80 <mg_http_parse+0x2d8>)
 8027b26:	4618      	mov	r0, r3
 8027b28:	f00a f9d4 	bl	8031ed4 <mg_str_s>
 8027b2c:	6879      	ldr	r1, [r7, #4]
 8027b2e:	f107 0320 	add.w	r3, r7, #32
 8027b32:	cb0c      	ldmia	r3, {r2, r3}
 8027b34:	3108      	adds	r1, #8
 8027b36:	c903      	ldmia	r1, {r0, r1}
 8027b38:	f00a fa58 	bl	8031fec <mg_strcasecmp>
 8027b3c:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8027b3e:	2b00      	cmp	r3, #0
 8027b40:	d107      	bne.n	8027b52 <mg_http_parse+0x2aa>
    hm->body.len = 0;
 8027b42:	687b      	ldr	r3, [r7, #4]
 8027b44:	2200      	movs	r2, #0
 8027b46:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8027b4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8027b4c:	687b      	ldr	r3, [r7, #4]
 8027b4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8027b52:	687b      	ldr	r3, [r7, #4]
 8027b54:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8027b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027b5a:	429a      	cmp	r2, r3
 8027b5c:	d202      	bcs.n	8027b64 <mg_http_parse+0x2bc>
 8027b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027b62:	e000      	b.n	8027b66 <mg_http_parse+0x2be>

  return req_len;
 8027b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8027b66:	4618      	mov	r0, r3
 8027b68:	3740      	adds	r7, #64	@ 0x40
 8027b6a:	46bd      	mov	sp, r7
 8027b6c:	bd80      	pop	{r7, pc}
 8027b6e:	bf00      	nop
 8027b70:	08041c2c 	.word	0x08041c2c
 8027b74:	08041c3c 	.word	0x08041c3c
 8027b78:	08041c44 	.word	0x08041c44
 8027b7c:	08041c48 	.word	0x08041c48
 8027b80:	08041c50 	.word	0x08041c50

08027b84 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8027b84:	b480      	push	{r7}
 8027b86:	b083      	sub	sp, #12
 8027b88:	af00      	add	r7, sp, #0
 8027b8a:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8027b8c:	687b      	ldr	r3, [r7, #4]
 8027b8e:	3b64      	subs	r3, #100	@ 0x64
 8027b90:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8027b94:	4293      	cmp	r3, r2
 8027b96:	f200 8469 	bhi.w	802846c <mg_http_status_code_str+0x8e8>
 8027b9a:	a101      	add	r1, pc, #4	@ (adr r1, 8027ba0 <mg_http_status_code_str+0x1c>)
 8027b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027ba0:	08028371 	.word	0x08028371
 8027ba4:	08028375 	.word	0x08028375
 8027ba8:	08028379 	.word	0x08028379
 8027bac:	0802846d 	.word	0x0802846d
 8027bb0:	0802846d 	.word	0x0802846d
 8027bb4:	0802846d 	.word	0x0802846d
 8027bb8:	0802846d 	.word	0x0802846d
 8027bbc:	0802846d 	.word	0x0802846d
 8027bc0:	0802846d 	.word	0x0802846d
 8027bc4:	0802846d 	.word	0x0802846d
 8027bc8:	0802846d 	.word	0x0802846d
 8027bcc:	0802846d 	.word	0x0802846d
 8027bd0:	0802846d 	.word	0x0802846d
 8027bd4:	0802846d 	.word	0x0802846d
 8027bd8:	0802846d 	.word	0x0802846d
 8027bdc:	0802846d 	.word	0x0802846d
 8027be0:	0802846d 	.word	0x0802846d
 8027be4:	0802846d 	.word	0x0802846d
 8027be8:	0802846d 	.word	0x0802846d
 8027bec:	0802846d 	.word	0x0802846d
 8027bf0:	0802846d 	.word	0x0802846d
 8027bf4:	0802846d 	.word	0x0802846d
 8027bf8:	0802846d 	.word	0x0802846d
 8027bfc:	0802846d 	.word	0x0802846d
 8027c00:	0802846d 	.word	0x0802846d
 8027c04:	0802846d 	.word	0x0802846d
 8027c08:	0802846d 	.word	0x0802846d
 8027c0c:	0802846d 	.word	0x0802846d
 8027c10:	0802846d 	.word	0x0802846d
 8027c14:	0802846d 	.word	0x0802846d
 8027c18:	0802846d 	.word	0x0802846d
 8027c1c:	0802846d 	.word	0x0802846d
 8027c20:	0802846d 	.word	0x0802846d
 8027c24:	0802846d 	.word	0x0802846d
 8027c28:	0802846d 	.word	0x0802846d
 8027c2c:	0802846d 	.word	0x0802846d
 8027c30:	0802846d 	.word	0x0802846d
 8027c34:	0802846d 	.word	0x0802846d
 8027c38:	0802846d 	.word	0x0802846d
 8027c3c:	0802846d 	.word	0x0802846d
 8027c40:	0802846d 	.word	0x0802846d
 8027c44:	0802846d 	.word	0x0802846d
 8027c48:	0802846d 	.word	0x0802846d
 8027c4c:	0802846d 	.word	0x0802846d
 8027c50:	0802846d 	.word	0x0802846d
 8027c54:	0802846d 	.word	0x0802846d
 8027c58:	0802846d 	.word	0x0802846d
 8027c5c:	0802846d 	.word	0x0802846d
 8027c60:	0802846d 	.word	0x0802846d
 8027c64:	0802846d 	.word	0x0802846d
 8027c68:	0802846d 	.word	0x0802846d
 8027c6c:	0802846d 	.word	0x0802846d
 8027c70:	0802846d 	.word	0x0802846d
 8027c74:	0802846d 	.word	0x0802846d
 8027c78:	0802846d 	.word	0x0802846d
 8027c7c:	0802846d 	.word	0x0802846d
 8027c80:	0802846d 	.word	0x0802846d
 8027c84:	0802846d 	.word	0x0802846d
 8027c88:	0802846d 	.word	0x0802846d
 8027c8c:	0802846d 	.word	0x0802846d
 8027c90:	0802846d 	.word	0x0802846d
 8027c94:	0802846d 	.word	0x0802846d
 8027c98:	0802846d 	.word	0x0802846d
 8027c9c:	0802846d 	.word	0x0802846d
 8027ca0:	0802846d 	.word	0x0802846d
 8027ca4:	0802846d 	.word	0x0802846d
 8027ca8:	0802846d 	.word	0x0802846d
 8027cac:	0802846d 	.word	0x0802846d
 8027cb0:	0802846d 	.word	0x0802846d
 8027cb4:	0802846d 	.word	0x0802846d
 8027cb8:	0802846d 	.word	0x0802846d
 8027cbc:	0802846d 	.word	0x0802846d
 8027cc0:	0802846d 	.word	0x0802846d
 8027cc4:	0802846d 	.word	0x0802846d
 8027cc8:	0802846d 	.word	0x0802846d
 8027ccc:	0802846d 	.word	0x0802846d
 8027cd0:	0802846d 	.word	0x0802846d
 8027cd4:	0802846d 	.word	0x0802846d
 8027cd8:	0802846d 	.word	0x0802846d
 8027cdc:	0802846d 	.word	0x0802846d
 8027ce0:	0802846d 	.word	0x0802846d
 8027ce4:	0802846d 	.word	0x0802846d
 8027ce8:	0802846d 	.word	0x0802846d
 8027cec:	0802846d 	.word	0x0802846d
 8027cf0:	0802846d 	.word	0x0802846d
 8027cf4:	0802846d 	.word	0x0802846d
 8027cf8:	0802846d 	.word	0x0802846d
 8027cfc:	0802846d 	.word	0x0802846d
 8027d00:	0802846d 	.word	0x0802846d
 8027d04:	0802846d 	.word	0x0802846d
 8027d08:	0802846d 	.word	0x0802846d
 8027d0c:	0802846d 	.word	0x0802846d
 8027d10:	0802846d 	.word	0x0802846d
 8027d14:	0802846d 	.word	0x0802846d
 8027d18:	0802846d 	.word	0x0802846d
 8027d1c:	0802846d 	.word	0x0802846d
 8027d20:	0802846d 	.word	0x0802846d
 8027d24:	0802846d 	.word	0x0802846d
 8027d28:	0802846d 	.word	0x0802846d
 8027d2c:	0802846d 	.word	0x0802846d
 8027d30:	0802837d 	.word	0x0802837d
 8027d34:	08028381 	.word	0x08028381
 8027d38:	08028385 	.word	0x08028385
 8027d3c:	08028389 	.word	0x08028389
 8027d40:	0802838d 	.word	0x0802838d
 8027d44:	08028391 	.word	0x08028391
 8027d48:	08028395 	.word	0x08028395
 8027d4c:	08028399 	.word	0x08028399
 8027d50:	0802839d 	.word	0x0802839d
 8027d54:	0802846d 	.word	0x0802846d
 8027d58:	0802846d 	.word	0x0802846d
 8027d5c:	0802846d 	.word	0x0802846d
 8027d60:	0802846d 	.word	0x0802846d
 8027d64:	0802846d 	.word	0x0802846d
 8027d68:	0802846d 	.word	0x0802846d
 8027d6c:	0802846d 	.word	0x0802846d
 8027d70:	0802846d 	.word	0x0802846d
 8027d74:	0802846d 	.word	0x0802846d
 8027d78:	0802846d 	.word	0x0802846d
 8027d7c:	0802846d 	.word	0x0802846d
 8027d80:	0802846d 	.word	0x0802846d
 8027d84:	0802846d 	.word	0x0802846d
 8027d88:	0802846d 	.word	0x0802846d
 8027d8c:	0802846d 	.word	0x0802846d
 8027d90:	0802846d 	.word	0x0802846d
 8027d94:	0802846d 	.word	0x0802846d
 8027d98:	080283a1 	.word	0x080283a1
 8027d9c:	0802846d 	.word	0x0802846d
 8027da0:	0802846d 	.word	0x0802846d
 8027da4:	0802846d 	.word	0x0802846d
 8027da8:	0802846d 	.word	0x0802846d
 8027dac:	0802846d 	.word	0x0802846d
 8027db0:	0802846d 	.word	0x0802846d
 8027db4:	0802846d 	.word	0x0802846d
 8027db8:	0802846d 	.word	0x0802846d
 8027dbc:	0802846d 	.word	0x0802846d
 8027dc0:	0802846d 	.word	0x0802846d
 8027dc4:	0802846d 	.word	0x0802846d
 8027dc8:	0802846d 	.word	0x0802846d
 8027dcc:	0802846d 	.word	0x0802846d
 8027dd0:	0802846d 	.word	0x0802846d
 8027dd4:	0802846d 	.word	0x0802846d
 8027dd8:	0802846d 	.word	0x0802846d
 8027ddc:	0802846d 	.word	0x0802846d
 8027de0:	0802846d 	.word	0x0802846d
 8027de4:	0802846d 	.word	0x0802846d
 8027de8:	0802846d 	.word	0x0802846d
 8027dec:	0802846d 	.word	0x0802846d
 8027df0:	0802846d 	.word	0x0802846d
 8027df4:	0802846d 	.word	0x0802846d
 8027df8:	0802846d 	.word	0x0802846d
 8027dfc:	0802846d 	.word	0x0802846d
 8027e00:	0802846d 	.word	0x0802846d
 8027e04:	0802846d 	.word	0x0802846d
 8027e08:	0802846d 	.word	0x0802846d
 8027e0c:	0802846d 	.word	0x0802846d
 8027e10:	0802846d 	.word	0x0802846d
 8027e14:	0802846d 	.word	0x0802846d
 8027e18:	0802846d 	.word	0x0802846d
 8027e1c:	0802846d 	.word	0x0802846d
 8027e20:	0802846d 	.word	0x0802846d
 8027e24:	0802846d 	.word	0x0802846d
 8027e28:	0802846d 	.word	0x0802846d
 8027e2c:	0802846d 	.word	0x0802846d
 8027e30:	0802846d 	.word	0x0802846d
 8027e34:	0802846d 	.word	0x0802846d
 8027e38:	0802846d 	.word	0x0802846d
 8027e3c:	0802846d 	.word	0x0802846d
 8027e40:	0802846d 	.word	0x0802846d
 8027e44:	0802846d 	.word	0x0802846d
 8027e48:	0802846d 	.word	0x0802846d
 8027e4c:	0802846d 	.word	0x0802846d
 8027e50:	0802846d 	.word	0x0802846d
 8027e54:	0802846d 	.word	0x0802846d
 8027e58:	0802846d 	.word	0x0802846d
 8027e5c:	0802846d 	.word	0x0802846d
 8027e60:	0802846d 	.word	0x0802846d
 8027e64:	0802846d 	.word	0x0802846d
 8027e68:	0802846d 	.word	0x0802846d
 8027e6c:	0802846d 	.word	0x0802846d
 8027e70:	0802846d 	.word	0x0802846d
 8027e74:	0802846d 	.word	0x0802846d
 8027e78:	0802846d 	.word	0x0802846d
 8027e7c:	0802846d 	.word	0x0802846d
 8027e80:	0802846d 	.word	0x0802846d
 8027e84:	0802846d 	.word	0x0802846d
 8027e88:	0802846d 	.word	0x0802846d
 8027e8c:	0802846d 	.word	0x0802846d
 8027e90:	0802846d 	.word	0x0802846d
 8027e94:	0802846d 	.word	0x0802846d
 8027e98:	0802846d 	.word	0x0802846d
 8027e9c:	0802846d 	.word	0x0802846d
 8027ea0:	0802846d 	.word	0x0802846d
 8027ea4:	0802846d 	.word	0x0802846d
 8027ea8:	0802846d 	.word	0x0802846d
 8027eac:	0802846d 	.word	0x0802846d
 8027eb0:	0802846d 	.word	0x0802846d
 8027eb4:	0802846d 	.word	0x0802846d
 8027eb8:	0802846d 	.word	0x0802846d
 8027ebc:	0802846d 	.word	0x0802846d
 8027ec0:	080283a5 	.word	0x080283a5
 8027ec4:	080283a9 	.word	0x080283a9
 8027ec8:	080283ad 	.word	0x080283ad
 8027ecc:	080283b1 	.word	0x080283b1
 8027ed0:	080283b5 	.word	0x080283b5
 8027ed4:	080283b9 	.word	0x080283b9
 8027ed8:	0802846d 	.word	0x0802846d
 8027edc:	080283bd 	.word	0x080283bd
 8027ee0:	080283c1 	.word	0x080283c1
 8027ee4:	0802846d 	.word	0x0802846d
 8027ee8:	0802846d 	.word	0x0802846d
 8027eec:	0802846d 	.word	0x0802846d
 8027ef0:	0802846d 	.word	0x0802846d
 8027ef4:	0802846d 	.word	0x0802846d
 8027ef8:	0802846d 	.word	0x0802846d
 8027efc:	0802846d 	.word	0x0802846d
 8027f00:	0802846d 	.word	0x0802846d
 8027f04:	0802846d 	.word	0x0802846d
 8027f08:	0802846d 	.word	0x0802846d
 8027f0c:	0802846d 	.word	0x0802846d
 8027f10:	0802846d 	.word	0x0802846d
 8027f14:	0802846d 	.word	0x0802846d
 8027f18:	0802846d 	.word	0x0802846d
 8027f1c:	0802846d 	.word	0x0802846d
 8027f20:	0802846d 	.word	0x0802846d
 8027f24:	0802846d 	.word	0x0802846d
 8027f28:	0802846d 	.word	0x0802846d
 8027f2c:	0802846d 	.word	0x0802846d
 8027f30:	0802846d 	.word	0x0802846d
 8027f34:	0802846d 	.word	0x0802846d
 8027f38:	0802846d 	.word	0x0802846d
 8027f3c:	0802846d 	.word	0x0802846d
 8027f40:	0802846d 	.word	0x0802846d
 8027f44:	0802846d 	.word	0x0802846d
 8027f48:	0802846d 	.word	0x0802846d
 8027f4c:	0802846d 	.word	0x0802846d
 8027f50:	0802846d 	.word	0x0802846d
 8027f54:	0802846d 	.word	0x0802846d
 8027f58:	0802846d 	.word	0x0802846d
 8027f5c:	0802846d 	.word	0x0802846d
 8027f60:	0802846d 	.word	0x0802846d
 8027f64:	0802846d 	.word	0x0802846d
 8027f68:	0802846d 	.word	0x0802846d
 8027f6c:	0802846d 	.word	0x0802846d
 8027f70:	0802846d 	.word	0x0802846d
 8027f74:	0802846d 	.word	0x0802846d
 8027f78:	0802846d 	.word	0x0802846d
 8027f7c:	0802846d 	.word	0x0802846d
 8027f80:	0802846d 	.word	0x0802846d
 8027f84:	0802846d 	.word	0x0802846d
 8027f88:	0802846d 	.word	0x0802846d
 8027f8c:	0802846d 	.word	0x0802846d
 8027f90:	0802846d 	.word	0x0802846d
 8027f94:	0802846d 	.word	0x0802846d
 8027f98:	0802846d 	.word	0x0802846d
 8027f9c:	0802846d 	.word	0x0802846d
 8027fa0:	0802846d 	.word	0x0802846d
 8027fa4:	0802846d 	.word	0x0802846d
 8027fa8:	0802846d 	.word	0x0802846d
 8027fac:	0802846d 	.word	0x0802846d
 8027fb0:	0802846d 	.word	0x0802846d
 8027fb4:	0802846d 	.word	0x0802846d
 8027fb8:	0802846d 	.word	0x0802846d
 8027fbc:	0802846d 	.word	0x0802846d
 8027fc0:	0802846d 	.word	0x0802846d
 8027fc4:	0802846d 	.word	0x0802846d
 8027fc8:	0802846d 	.word	0x0802846d
 8027fcc:	0802846d 	.word	0x0802846d
 8027fd0:	0802846d 	.word	0x0802846d
 8027fd4:	0802846d 	.word	0x0802846d
 8027fd8:	0802846d 	.word	0x0802846d
 8027fdc:	0802846d 	.word	0x0802846d
 8027fe0:	0802846d 	.word	0x0802846d
 8027fe4:	0802846d 	.word	0x0802846d
 8027fe8:	0802846d 	.word	0x0802846d
 8027fec:	0802846d 	.word	0x0802846d
 8027ff0:	0802846d 	.word	0x0802846d
 8027ff4:	0802846d 	.word	0x0802846d
 8027ff8:	0802846d 	.word	0x0802846d
 8027ffc:	0802846d 	.word	0x0802846d
 8028000:	0802846d 	.word	0x0802846d
 8028004:	0802846d 	.word	0x0802846d
 8028008:	0802846d 	.word	0x0802846d
 802800c:	0802846d 	.word	0x0802846d
 8028010:	0802846d 	.word	0x0802846d
 8028014:	0802846d 	.word	0x0802846d
 8028018:	0802846d 	.word	0x0802846d
 802801c:	0802846d 	.word	0x0802846d
 8028020:	0802846d 	.word	0x0802846d
 8028024:	0802846d 	.word	0x0802846d
 8028028:	0802846d 	.word	0x0802846d
 802802c:	0802846d 	.word	0x0802846d
 8028030:	0802846d 	.word	0x0802846d
 8028034:	0802846d 	.word	0x0802846d
 8028038:	0802846d 	.word	0x0802846d
 802803c:	0802846d 	.word	0x0802846d
 8028040:	0802846d 	.word	0x0802846d
 8028044:	0802846d 	.word	0x0802846d
 8028048:	0802846d 	.word	0x0802846d
 802804c:	0802846d 	.word	0x0802846d
 8028050:	080283c5 	.word	0x080283c5
 8028054:	080283c9 	.word	0x080283c9
 8028058:	080283cd 	.word	0x080283cd
 802805c:	080283d1 	.word	0x080283d1
 8028060:	080283d5 	.word	0x080283d5
 8028064:	080283d9 	.word	0x080283d9
 8028068:	080283dd 	.word	0x080283dd
 802806c:	080283e1 	.word	0x080283e1
 8028070:	080283e5 	.word	0x080283e5
 8028074:	080283e9 	.word	0x080283e9
 8028078:	080283ed 	.word	0x080283ed
 802807c:	080283f1 	.word	0x080283f1
 8028080:	080283f5 	.word	0x080283f5
 8028084:	080283f9 	.word	0x080283f9
 8028088:	080283fd 	.word	0x080283fd
 802808c:	08028401 	.word	0x08028401
 8028090:	08028405 	.word	0x08028405
 8028094:	08028409 	.word	0x08028409
 8028098:	0802840d 	.word	0x0802840d
 802809c:	0802846d 	.word	0x0802846d
 80280a0:	0802846d 	.word	0x0802846d
 80280a4:	08028411 	.word	0x08028411
 80280a8:	08028415 	.word	0x08028415
 80280ac:	08028419 	.word	0x08028419
 80280b0:	0802841d 	.word	0x0802841d
 80280b4:	0802846d 	.word	0x0802846d
 80280b8:	08028421 	.word	0x08028421
 80280bc:	0802846d 	.word	0x0802846d
 80280c0:	08028425 	.word	0x08028425
 80280c4:	08028429 	.word	0x08028429
 80280c8:	0802846d 	.word	0x0802846d
 80280cc:	0802842d 	.word	0x0802842d
 80280d0:	0802846d 	.word	0x0802846d
 80280d4:	0802846d 	.word	0x0802846d
 80280d8:	0802846d 	.word	0x0802846d
 80280dc:	0802846d 	.word	0x0802846d
 80280e0:	0802846d 	.word	0x0802846d
 80280e4:	0802846d 	.word	0x0802846d
 80280e8:	0802846d 	.word	0x0802846d
 80280ec:	0802846d 	.word	0x0802846d
 80280f0:	0802846d 	.word	0x0802846d
 80280f4:	0802846d 	.word	0x0802846d
 80280f8:	0802846d 	.word	0x0802846d
 80280fc:	0802846d 	.word	0x0802846d
 8028100:	08028431 	.word	0x08028431
 8028104:	0802846d 	.word	0x0802846d
 8028108:	0802846d 	.word	0x0802846d
 802810c:	0802846d 	.word	0x0802846d
 8028110:	0802846d 	.word	0x0802846d
 8028114:	0802846d 	.word	0x0802846d
 8028118:	0802846d 	.word	0x0802846d
 802811c:	08028435 	.word	0x08028435
 8028120:	0802846d 	.word	0x0802846d
 8028124:	0802846d 	.word	0x0802846d
 8028128:	0802846d 	.word	0x0802846d
 802812c:	0802846d 	.word	0x0802846d
 8028130:	0802846d 	.word	0x0802846d
 8028134:	0802846d 	.word	0x0802846d
 8028138:	0802846d 	.word	0x0802846d
 802813c:	0802846d 	.word	0x0802846d
 8028140:	0802846d 	.word	0x0802846d
 8028144:	0802846d 	.word	0x0802846d
 8028148:	0802846d 	.word	0x0802846d
 802814c:	0802846d 	.word	0x0802846d
 8028150:	0802846d 	.word	0x0802846d
 8028154:	0802846d 	.word	0x0802846d
 8028158:	0802846d 	.word	0x0802846d
 802815c:	0802846d 	.word	0x0802846d
 8028160:	0802846d 	.word	0x0802846d
 8028164:	0802846d 	.word	0x0802846d
 8028168:	0802846d 	.word	0x0802846d
 802816c:	0802846d 	.word	0x0802846d
 8028170:	0802846d 	.word	0x0802846d
 8028174:	0802846d 	.word	0x0802846d
 8028178:	0802846d 	.word	0x0802846d
 802817c:	0802846d 	.word	0x0802846d
 8028180:	0802846d 	.word	0x0802846d
 8028184:	0802846d 	.word	0x0802846d
 8028188:	0802846d 	.word	0x0802846d
 802818c:	0802846d 	.word	0x0802846d
 8028190:	0802846d 	.word	0x0802846d
 8028194:	0802846d 	.word	0x0802846d
 8028198:	0802846d 	.word	0x0802846d
 802819c:	0802846d 	.word	0x0802846d
 80281a0:	0802846d 	.word	0x0802846d
 80281a4:	0802846d 	.word	0x0802846d
 80281a8:	0802846d 	.word	0x0802846d
 80281ac:	0802846d 	.word	0x0802846d
 80281b0:	0802846d 	.word	0x0802846d
 80281b4:	0802846d 	.word	0x0802846d
 80281b8:	0802846d 	.word	0x0802846d
 80281bc:	0802846d 	.word	0x0802846d
 80281c0:	0802846d 	.word	0x0802846d
 80281c4:	0802846d 	.word	0x0802846d
 80281c8:	0802846d 	.word	0x0802846d
 80281cc:	0802846d 	.word	0x0802846d
 80281d0:	0802846d 	.word	0x0802846d
 80281d4:	0802846d 	.word	0x0802846d
 80281d8:	0802846d 	.word	0x0802846d
 80281dc:	08028439 	.word	0x08028439
 80281e0:	0802843d 	.word	0x0802843d
 80281e4:	08028441 	.word	0x08028441
 80281e8:	08028445 	.word	0x08028445
 80281ec:	08028449 	.word	0x08028449
 80281f0:	0802844d 	.word	0x0802844d
 80281f4:	08028451 	.word	0x08028451
 80281f8:	08028455 	.word	0x08028455
 80281fc:	08028459 	.word	0x08028459
 8028200:	0802845d 	.word	0x0802845d
 8028204:	0802846d 	.word	0x0802846d
 8028208:	08028461 	.word	0x08028461
 802820c:	08028465 	.word	0x08028465
 8028210:	0802846d 	.word	0x0802846d
 8028214:	0802846d 	.word	0x0802846d
 8028218:	0802846d 	.word	0x0802846d
 802821c:	0802846d 	.word	0x0802846d
 8028220:	0802846d 	.word	0x0802846d
 8028224:	0802846d 	.word	0x0802846d
 8028228:	0802846d 	.word	0x0802846d
 802822c:	0802846d 	.word	0x0802846d
 8028230:	0802846d 	.word	0x0802846d
 8028234:	0802846d 	.word	0x0802846d
 8028238:	0802846d 	.word	0x0802846d
 802823c:	0802846d 	.word	0x0802846d
 8028240:	0802846d 	.word	0x0802846d
 8028244:	0802846d 	.word	0x0802846d
 8028248:	0802846d 	.word	0x0802846d
 802824c:	0802846d 	.word	0x0802846d
 8028250:	0802846d 	.word	0x0802846d
 8028254:	0802846d 	.word	0x0802846d
 8028258:	0802846d 	.word	0x0802846d
 802825c:	0802846d 	.word	0x0802846d
 8028260:	0802846d 	.word	0x0802846d
 8028264:	0802846d 	.word	0x0802846d
 8028268:	0802846d 	.word	0x0802846d
 802826c:	0802846d 	.word	0x0802846d
 8028270:	0802846d 	.word	0x0802846d
 8028274:	0802846d 	.word	0x0802846d
 8028278:	0802846d 	.word	0x0802846d
 802827c:	0802846d 	.word	0x0802846d
 8028280:	0802846d 	.word	0x0802846d
 8028284:	0802846d 	.word	0x0802846d
 8028288:	0802846d 	.word	0x0802846d
 802828c:	0802846d 	.word	0x0802846d
 8028290:	0802846d 	.word	0x0802846d
 8028294:	0802846d 	.word	0x0802846d
 8028298:	0802846d 	.word	0x0802846d
 802829c:	0802846d 	.word	0x0802846d
 80282a0:	0802846d 	.word	0x0802846d
 80282a4:	0802846d 	.word	0x0802846d
 80282a8:	0802846d 	.word	0x0802846d
 80282ac:	0802846d 	.word	0x0802846d
 80282b0:	0802846d 	.word	0x0802846d
 80282b4:	0802846d 	.word	0x0802846d
 80282b8:	0802846d 	.word	0x0802846d
 80282bc:	0802846d 	.word	0x0802846d
 80282c0:	0802846d 	.word	0x0802846d
 80282c4:	0802846d 	.word	0x0802846d
 80282c8:	0802846d 	.word	0x0802846d
 80282cc:	0802846d 	.word	0x0802846d
 80282d0:	0802846d 	.word	0x0802846d
 80282d4:	0802846d 	.word	0x0802846d
 80282d8:	0802846d 	.word	0x0802846d
 80282dc:	0802846d 	.word	0x0802846d
 80282e0:	0802846d 	.word	0x0802846d
 80282e4:	0802846d 	.word	0x0802846d
 80282e8:	0802846d 	.word	0x0802846d
 80282ec:	0802846d 	.word	0x0802846d
 80282f0:	0802846d 	.word	0x0802846d
 80282f4:	0802846d 	.word	0x0802846d
 80282f8:	0802846d 	.word	0x0802846d
 80282fc:	0802846d 	.word	0x0802846d
 8028300:	0802846d 	.word	0x0802846d
 8028304:	0802846d 	.word	0x0802846d
 8028308:	0802846d 	.word	0x0802846d
 802830c:	0802846d 	.word	0x0802846d
 8028310:	0802846d 	.word	0x0802846d
 8028314:	0802846d 	.word	0x0802846d
 8028318:	0802846d 	.word	0x0802846d
 802831c:	0802846d 	.word	0x0802846d
 8028320:	0802846d 	.word	0x0802846d
 8028324:	0802846d 	.word	0x0802846d
 8028328:	0802846d 	.word	0x0802846d
 802832c:	0802846d 	.word	0x0802846d
 8028330:	0802846d 	.word	0x0802846d
 8028334:	0802846d 	.word	0x0802846d
 8028338:	0802846d 	.word	0x0802846d
 802833c:	0802846d 	.word	0x0802846d
 8028340:	0802846d 	.word	0x0802846d
 8028344:	0802846d 	.word	0x0802846d
 8028348:	0802846d 	.word	0x0802846d
 802834c:	0802846d 	.word	0x0802846d
 8028350:	0802846d 	.word	0x0802846d
 8028354:	0802846d 	.word	0x0802846d
 8028358:	0802846d 	.word	0x0802846d
 802835c:	0802846d 	.word	0x0802846d
 8028360:	0802846d 	.word	0x0802846d
 8028364:	0802846d 	.word	0x0802846d
 8028368:	0802846d 	.word	0x0802846d
 802836c:	08028469 	.word	0x08028469
    case 100: return "Continue";
 8028370:	4b42      	ldr	r3, [pc, #264]	@ (802847c <mg_http_status_code_str+0x8f8>)
 8028372:	e07c      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8028374:	4b42      	ldr	r3, [pc, #264]	@ (8028480 <mg_http_status_code_str+0x8fc>)
 8028376:	e07a      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8028378:	4b42      	ldr	r3, [pc, #264]	@ (8028484 <mg_http_status_code_str+0x900>)
 802837a:	e078      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 802837c:	4b42      	ldr	r3, [pc, #264]	@ (8028488 <mg_http_status_code_str+0x904>)
 802837e:	e076      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8028380:	4b42      	ldr	r3, [pc, #264]	@ (802848c <mg_http_status_code_str+0x908>)
 8028382:	e074      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8028384:	4b42      	ldr	r3, [pc, #264]	@ (8028490 <mg_http_status_code_str+0x90c>)
 8028386:	e072      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8028388:	4b42      	ldr	r3, [pc, #264]	@ (8028494 <mg_http_status_code_str+0x910>)
 802838a:	e070      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 802838c:	4b42      	ldr	r3, [pc, #264]	@ (8028498 <mg_http_status_code_str+0x914>)
 802838e:	e06e      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8028390:	4b42      	ldr	r3, [pc, #264]	@ (802849c <mg_http_status_code_str+0x918>)
 8028392:	e06c      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8028394:	4b42      	ldr	r3, [pc, #264]	@ (80284a0 <mg_http_status_code_str+0x91c>)
 8028396:	e06a      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8028398:	4b42      	ldr	r3, [pc, #264]	@ (80284a4 <mg_http_status_code_str+0x920>)
 802839a:	e068      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 802839c:	4b42      	ldr	r3, [pc, #264]	@ (80284a8 <mg_http_status_code_str+0x924>)
 802839e:	e066      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 80283a0:	4b42      	ldr	r3, [pc, #264]	@ (80284ac <mg_http_status_code_str+0x928>)
 80283a2:	e064      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 80283a4:	4b42      	ldr	r3, [pc, #264]	@ (80284b0 <mg_http_status_code_str+0x92c>)
 80283a6:	e062      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 80283a8:	4b42      	ldr	r3, [pc, #264]	@ (80284b4 <mg_http_status_code_str+0x930>)
 80283aa:	e060      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 80283ac:	4b42      	ldr	r3, [pc, #264]	@ (80284b8 <mg_http_status_code_str+0x934>)
 80283ae:	e05e      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 80283b0:	4b42      	ldr	r3, [pc, #264]	@ (80284bc <mg_http_status_code_str+0x938>)
 80283b2:	e05c      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 80283b4:	4b42      	ldr	r3, [pc, #264]	@ (80284c0 <mg_http_status_code_str+0x93c>)
 80283b6:	e05a      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 80283b8:	4b42      	ldr	r3, [pc, #264]	@ (80284c4 <mg_http_status_code_str+0x940>)
 80283ba:	e058      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 80283bc:	4b42      	ldr	r3, [pc, #264]	@ (80284c8 <mg_http_status_code_str+0x944>)
 80283be:	e056      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 80283c0:	4b42      	ldr	r3, [pc, #264]	@ (80284cc <mg_http_status_code_str+0x948>)
 80283c2:	e054      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 80283c4:	4b42      	ldr	r3, [pc, #264]	@ (80284d0 <mg_http_status_code_str+0x94c>)
 80283c6:	e052      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 80283c8:	4b42      	ldr	r3, [pc, #264]	@ (80284d4 <mg_http_status_code_str+0x950>)
 80283ca:	e050      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 80283cc:	4b42      	ldr	r3, [pc, #264]	@ (80284d8 <mg_http_status_code_str+0x954>)
 80283ce:	e04e      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 80283d0:	4b42      	ldr	r3, [pc, #264]	@ (80284dc <mg_http_status_code_str+0x958>)
 80283d2:	e04c      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 80283d4:	4b42      	ldr	r3, [pc, #264]	@ (80284e0 <mg_http_status_code_str+0x95c>)
 80283d6:	e04a      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 80283d8:	4b42      	ldr	r3, [pc, #264]	@ (80284e4 <mg_http_status_code_str+0x960>)
 80283da:	e048      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 80283dc:	4b42      	ldr	r3, [pc, #264]	@ (80284e8 <mg_http_status_code_str+0x964>)
 80283de:	e046      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 80283e0:	4b42      	ldr	r3, [pc, #264]	@ (80284ec <mg_http_status_code_str+0x968>)
 80283e2:	e044      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 80283e4:	4b42      	ldr	r3, [pc, #264]	@ (80284f0 <mg_http_status_code_str+0x96c>)
 80283e6:	e042      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 80283e8:	4b42      	ldr	r3, [pc, #264]	@ (80284f4 <mg_http_status_code_str+0x970>)
 80283ea:	e040      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 80283ec:	4b42      	ldr	r3, [pc, #264]	@ (80284f8 <mg_http_status_code_str+0x974>)
 80283ee:	e03e      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 80283f0:	4b42      	ldr	r3, [pc, #264]	@ (80284fc <mg_http_status_code_str+0x978>)
 80283f2:	e03c      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 80283f4:	4b42      	ldr	r3, [pc, #264]	@ (8028500 <mg_http_status_code_str+0x97c>)
 80283f6:	e03a      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 80283f8:	4b42      	ldr	r3, [pc, #264]	@ (8028504 <mg_http_status_code_str+0x980>)
 80283fa:	e038      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 80283fc:	4b42      	ldr	r3, [pc, #264]	@ (8028508 <mg_http_status_code_str+0x984>)
 80283fe:	e036      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8028400:	4b42      	ldr	r3, [pc, #264]	@ (802850c <mg_http_status_code_str+0x988>)
 8028402:	e034      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8028404:	4b42      	ldr	r3, [pc, #264]	@ (8028510 <mg_http_status_code_str+0x98c>)
 8028406:	e032      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8028408:	4b42      	ldr	r3, [pc, #264]	@ (8028514 <mg_http_status_code_str+0x990>)
 802840a:	e030      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 802840c:	4b42      	ldr	r3, [pc, #264]	@ (8028518 <mg_http_status_code_str+0x994>)
 802840e:	e02e      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8028410:	4b42      	ldr	r3, [pc, #264]	@ (802851c <mg_http_status_code_str+0x998>)
 8028412:	e02c      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8028414:	4b42      	ldr	r3, [pc, #264]	@ (8028520 <mg_http_status_code_str+0x99c>)
 8028416:	e02a      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8028418:	4b42      	ldr	r3, [pc, #264]	@ (8028524 <mg_http_status_code_str+0x9a0>)
 802841a:	e028      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 802841c:	4b42      	ldr	r3, [pc, #264]	@ (8028528 <mg_http_status_code_str+0x9a4>)
 802841e:	e026      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8028420:	4b42      	ldr	r3, [pc, #264]	@ (802852c <mg_http_status_code_str+0x9a8>)
 8028422:	e024      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 8028424:	4b42      	ldr	r3, [pc, #264]	@ (8028530 <mg_http_status_code_str+0x9ac>)
 8028426:	e022      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8028428:	4b42      	ldr	r3, [pc, #264]	@ (8028534 <mg_http_status_code_str+0x9b0>)
 802842a:	e020      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 802842c:	4b42      	ldr	r3, [pc, #264]	@ (8028538 <mg_http_status_code_str+0x9b4>)
 802842e:	e01e      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 8028430:	4b42      	ldr	r3, [pc, #264]	@ (802853c <mg_http_status_code_str+0x9b8>)
 8028432:	e01c      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 8028434:	4b42      	ldr	r3, [pc, #264]	@ (8028540 <mg_http_status_code_str+0x9bc>)
 8028436:	e01a      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 8028438:	4b42      	ldr	r3, [pc, #264]	@ (8028544 <mg_http_status_code_str+0x9c0>)
 802843a:	e018      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 802843c:	4b42      	ldr	r3, [pc, #264]	@ (8028548 <mg_http_status_code_str+0x9c4>)
 802843e:	e016      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8028440:	4b42      	ldr	r3, [pc, #264]	@ (802854c <mg_http_status_code_str+0x9c8>)
 8028442:	e014      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 8028444:	4b42      	ldr	r3, [pc, #264]	@ (8028550 <mg_http_status_code_str+0x9cc>)
 8028446:	e012      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8028448:	4b42      	ldr	r3, [pc, #264]	@ (8028554 <mg_http_status_code_str+0x9d0>)
 802844a:	e010      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 802844c:	4b42      	ldr	r3, [pc, #264]	@ (8028558 <mg_http_status_code_str+0x9d4>)
 802844e:	e00e      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8028450:	4b42      	ldr	r3, [pc, #264]	@ (802855c <mg_http_status_code_str+0x9d8>)
 8028452:	e00c      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 8028454:	4b42      	ldr	r3, [pc, #264]	@ (8028560 <mg_http_status_code_str+0x9dc>)
 8028456:	e00a      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8028458:	4b42      	ldr	r3, [pc, #264]	@ (8028564 <mg_http_status_code_str+0x9e0>)
 802845a:	e008      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 802845c:	4b42      	ldr	r3, [pc, #264]	@ (8028568 <mg_http_status_code_str+0x9e4>)
 802845e:	e006      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8028460:	4b42      	ldr	r3, [pc, #264]	@ (802856c <mg_http_status_code_str+0x9e8>)
 8028462:	e004      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 8028464:	4b42      	ldr	r3, [pc, #264]	@ (8028570 <mg_http_status_code_str+0x9ec>)
 8028466:	e002      	b.n	802846e <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8028468:	4b42      	ldr	r3, [pc, #264]	@ (8028574 <mg_http_status_code_str+0x9f0>)
 802846a:	e000      	b.n	802846e <mg_http_status_code_str+0x8ea>
    default: return "";
 802846c:	4b42      	ldr	r3, [pc, #264]	@ (8028578 <mg_http_status_code_str+0x9f4>)
  }
}
 802846e:	4618      	mov	r0, r3
 8028470:	370c      	adds	r7, #12
 8028472:	46bd      	mov	sp, r7
 8028474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028478:	4770      	bx	lr
 802847a:	bf00      	nop
 802847c:	08041c70 	.word	0x08041c70
 8028480:	08041c7c 	.word	0x08041c7c
 8028484:	08041c90 	.word	0x08041c90
 8028488:	08041c9c 	.word	0x08041c9c
 802848c:	08041ca0 	.word	0x08041ca0
 8028490:	08041ca8 	.word	0x08041ca8
 8028494:	08041cb4 	.word	0x08041cb4
 8028498:	08041cd4 	.word	0x08041cd4
 802849c:	08041ce0 	.word	0x08041ce0
 80284a0:	08041cf0 	.word	0x08041cf0
 80284a4:	08041d00 	.word	0x08041d00
 80284a8:	08041d10 	.word	0x08041d10
 80284ac:	08041d24 	.word	0x08041d24
 80284b0:	08041d2c 	.word	0x08041d2c
 80284b4:	08041d40 	.word	0x08041d40
 80284b8:	08041d54 	.word	0x08041d54
 80284bc:	08041d5c 	.word	0x08041d5c
 80284c0:	08041d68 	.word	0x08041d68
 80284c4:	08041d78 	.word	0x08041d78
 80284c8:	08041d84 	.word	0x08041d84
 80284cc:	08041d98 	.word	0x08041d98
 80284d0:	08041dac 	.word	0x08041dac
 80284d4:	08041db8 	.word	0x08041db8
 80284d8:	08041dc8 	.word	0x08041dc8
 80284dc:	08041ddc 	.word	0x08041ddc
 80284e0:	08041de8 	.word	0x08041de8
 80284e4:	08041df4 	.word	0x08041df4
 80284e8:	08041e08 	.word	0x08041e08
 80284ec:	08041e18 	.word	0x08041e18
 80284f0:	08041e38 	.word	0x08041e38
 80284f4:	08041e48 	.word	0x08041e48
 80284f8:	08041e54 	.word	0x08041e54
 80284fc:	08041e5c 	.word	0x08041e5c
 8028500:	08041e6c 	.word	0x08041e6c
 8028504:	08041e80 	.word	0x08041e80
 8028508:	08041e94 	.word	0x08041e94
 802850c:	08041eac 	.word	0x08041eac
 8028510:	08041ec4 	.word	0x08041ec4
 8028514:	08041ee4 	.word	0x08041ee4
 8028518:	08041ef8 	.word	0x08041ef8
 802851c:	08041f08 	.word	0x08041f08
 8028520:	08041f1c 	.word	0x08041f1c
 8028524:	08041f34 	.word	0x08041f34
 8028528:	08041f3c 	.word	0x08041f3c
 802852c:	08041f50 	.word	0x08041f50
 8028530:	08041f64 	.word	0x08041f64
 8028534:	08041f7c 	.word	0x08041f7c
 8028538:	08041f90 	.word	0x08041f90
 802853c:	08041fb0 	.word	0x08041fb0
 8028540:	08041fd4 	.word	0x08041fd4
 8028544:	08041ff4 	.word	0x08041ff4
 8028548:	0804200c 	.word	0x0804200c
 802854c:	08042024 	.word	0x08042024
 8028550:	08042034 	.word	0x08042034
 8028554:	08042040 	.word	0x08042040
 8028558:	08042054 	.word	0x08042054
 802855c:	08042064 	.word	0x08042064
 8028560:	08042080 	.word	0x08042080
 8028564:	08042098 	.word	0x08042098
 8028568:	080420b0 	.word	0x080420b0
 802856c:	080420c0 	.word	0x080420c0
 8028570:	080420d0 	.word	0x080420d0
 8028574:	080420f0 	.word	0x080420f0
 8028578:	08042110 	.word	0x08042110

0802857c <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 802857c:	b408      	push	{r3}
 802857e:	b580      	push	{r7, lr}
 8028580:	b08b      	sub	sp, #44	@ 0x2c
 8028582:	af02      	add	r7, sp, #8
 8028584:	60f8      	str	r0, [r7, #12]
 8028586:	60b9      	str	r1, [r7, #8]
 8028588:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 802858a:	68b8      	ldr	r0, [r7, #8]
 802858c:	f7ff fafa 	bl	8027b84 <mg_http_status_code_str>
 8028590:	4602      	mov	r2, r0
 8028592:	687b      	ldr	r3, [r7, #4]
 8028594:	2b00      	cmp	r3, #0
 8028596:	d001      	beq.n	802859c <mg_http_reply+0x20>
 8028598:	687b      	ldr	r3, [r7, #4]
 802859a:	e000      	b.n	802859e <mg_http_reply+0x22>
 802859c:	4b1f      	ldr	r3, [pc, #124]	@ (802861c <mg_http_reply+0xa0>)
 802859e:	9300      	str	r3, [sp, #0]
 80285a0:	4613      	mov	r3, r2
 80285a2:	68ba      	ldr	r2, [r7, #8]
 80285a4:	491e      	ldr	r1, [pc, #120]	@ (8028620 <mg_http_reply+0xa4>)
 80285a6:	68f8      	ldr	r0, [r7, #12]
 80285a8:	f005 f8d8 	bl	802d75c <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 80285ac:	68fb      	ldr	r3, [r7, #12]
 80285ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80285b0:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 80285b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80285b6:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 80285b8:	68fb      	ldr	r3, [r7, #12]
 80285ba:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80285be:	f107 0314 	add.w	r3, r7, #20
 80285c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80285c4:	4817      	ldr	r0, [pc, #92]	@ (8028624 <mg_http_reply+0xa8>)
 80285c6:	f7fe f8cd 	bl	8026764 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 80285ca:	68fb      	ldr	r3, [r7, #12]
 80285cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80285ce:	2b10      	cmp	r3, #16
 80285d0:	d916      	bls.n	8028600 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80285d2:	68fb      	ldr	r3, [r7, #12]
 80285d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80285d6:	69fb      	ldr	r3, [r7, #28]
 80285d8:	3b0f      	subs	r3, #15
 80285da:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 80285dc:	68fb      	ldr	r3, [r7, #12]
 80285de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80285e0:	69fb      	ldr	r3, [r7, #28]
 80285e2:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80285e4:	4a10      	ldr	r2, [pc, #64]	@ (8028628 <mg_http_reply+0xac>)
 80285e6:	210b      	movs	r1, #11
 80285e8:	f008 ff8c 	bl	8031504 <mg_snprintf>
 80285ec:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 80285ee:	68fb      	ldr	r3, [r7, #12]
 80285f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80285f2:	69f9      	ldr	r1, [r7, #28]
 80285f4:	69bb      	ldr	r3, [r7, #24]
 80285f6:	440b      	add	r3, r1
 80285f8:	3b0f      	subs	r3, #15
 80285fa:	4413      	add	r3, r2
 80285fc:	2220      	movs	r2, #32
 80285fe:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8028600:	68fa      	ldr	r2, [r7, #12]
 8028602:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8028606:	f36f 13c7 	bfc	r3, #7, #1
 802860a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 802860e:	bf00      	nop
 8028610:	3724      	adds	r7, #36	@ 0x24
 8028612:	46bd      	mov	sp, r7
 8028614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8028618:	b001      	add	sp, #4
 802861a:	4770      	bx	lr
 802861c:	08042110 	.word	0x08042110
 8028620:	08042114 	.word	0x08042114
 8028624:	08031495 	.word	0x08031495
 8028628:	08042148 	.word	0x08042148

0802862c <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 802862c:	b580      	push	{r7, lr}
 802862e:	b082      	sub	sp, #8
 8028630:	af00      	add	r7, sp, #0
 8028632:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8028634:	687b      	ldr	r3, [r7, #4]
 8028636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802863a:	4618      	mov	r0, r3
 802863c:	f7fe fc5d 	bl	8026efa <mg_fs_close>
  c->pfn_data = NULL;
 8028640:	687b      	ldr	r3, [r7, #4]
 8028642:	2200      	movs	r2, #0
 8028644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 8028648:	687b      	ldr	r3, [r7, #4]
 802864a:	4a07      	ldr	r2, [pc, #28]	@ (8028668 <restore_http_cb+0x3c>)
 802864c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 8028650:	687a      	ldr	r2, [r7, #4]
 8028652:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8028656:	f36f 13c7 	bfc	r3, #7, #1
 802865a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 802865e:	bf00      	nop
 8028660:	3708      	adds	r7, #8
 8028662:	46bd      	mov	sp, r7
 8028664:	bd80      	pop	{r7, pc}
 8028666:	bf00      	nop
 8028668:	08029de9 	.word	0x08029de9

0802866c <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 802866c:	b5b0      	push	{r4, r5, r7, lr}
 802866e:	b088      	sub	sp, #32
 8028670:	af04      	add	r7, sp, #16
 8028672:	60f8      	str	r0, [r7, #12]
 8028674:	60b9      	str	r1, [r7, #8]
 8028676:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8028678:	687b      	ldr	r3, [r7, #4]
 802867a:	2200      	movs	r2, #0
 802867c:	461c      	mov	r4, r3
 802867e:	4615      	mov	r5, r2
 8028680:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8028684:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8028688:	e9cd 2300 	strd	r2, r3, [sp]
 802868c:	4a04      	ldr	r2, [pc, #16]	@ (80286a0 <mg_http_etag+0x34>)
 802868e:	68b9      	ldr	r1, [r7, #8]
 8028690:	68f8      	ldr	r0, [r7, #12]
 8028692:	f008 ff37 	bl	8031504 <mg_snprintf>
  return buf;
 8028696:	68fb      	ldr	r3, [r7, #12]
}
 8028698:	4618      	mov	r0, r3
 802869a:	3710      	adds	r7, #16
 802869c:	46bd      	mov	sp, r7
 802869e:	bdb0      	pop	{r4, r5, r7, pc}
 80286a0:	08042150 	.word	0x08042150

080286a4 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 80286a4:	b580      	push	{r7, lr}
 80286a6:	b08a      	sub	sp, #40	@ 0x28
 80286a8:	af00      	add	r7, sp, #0
 80286aa:	60f8      	str	r0, [r7, #12]
 80286ac:	60b9      	str	r1, [r7, #8]
 80286ae:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80286b0:	68bb      	ldr	r3, [r7, #8]
 80286b2:	2b08      	cmp	r3, #8
 80286b4:	d002      	beq.n	80286bc <static_cb+0x18>
 80286b6:	68bb      	ldr	r3, [r7, #8]
 80286b8:	2b02      	cmp	r3, #2
 80286ba:	d148      	bne.n	802874e <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 80286bc:	68fb      	ldr	r3, [r7, #12]
 80286be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80286c2:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 80286c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80286c8:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 80286ca:	68fb      	ldr	r3, [r7, #12]
 80286cc:	33a4      	adds	r3, #164	@ 0xa4
 80286ce:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 80286d0:	68fb      	ldr	r3, [r7, #12]
 80286d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80286d4:	69fa      	ldr	r2, [r7, #28]
 80286d6:	429a      	cmp	r2, r3
 80286d8:	d905      	bls.n	80286e6 <static_cb+0x42>
 80286da:	68fb      	ldr	r3, [r7, #12]
 80286dc:	3348      	adds	r3, #72	@ 0x48
 80286de:	69f9      	ldr	r1, [r7, #28]
 80286e0:	4618      	mov	r0, r3
 80286e2:	f001 ff03 	bl	802a4ec <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80286e6:	68fb      	ldr	r3, [r7, #12]
 80286e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80286ea:	68fb      	ldr	r3, [r7, #12]
 80286ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80286ee:	429a      	cmp	r2, r3
 80286f0:	d234      	bcs.n	802875c <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 80286f2:	68fb      	ldr	r3, [r7, #12]
 80286f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80286f6:	68fb      	ldr	r3, [r7, #12]
 80286f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80286fa:	1ad3      	subs	r3, r2, r3
 80286fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80286fe:	69bb      	ldr	r3, [r7, #24]
 8028700:	681b      	ldr	r3, [r3, #0]
 8028702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8028704:	429a      	cmp	r2, r3
 8028706:	d902      	bls.n	802870e <static_cb+0x6a>
 8028708:	69bb      	ldr	r3, [r7, #24]
 802870a:	681b      	ldr	r3, [r3, #0]
 802870c:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 802870e:	6a3b      	ldr	r3, [r7, #32]
 8028710:	685b      	ldr	r3, [r3, #4]
 8028712:	691b      	ldr	r3, [r3, #16]
 8028714:	6a3a      	ldr	r2, [r7, #32]
 8028716:	6810      	ldr	r0, [r2, #0]
 8028718:	68fa      	ldr	r2, [r7, #12]
 802871a:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 802871c:	68fa      	ldr	r2, [r7, #12]
 802871e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8028720:	4411      	add	r1, r2
 8028722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8028724:	4798      	blx	r3
 8028726:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8028728:	68fb      	ldr	r3, [r7, #12]
 802872a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 802872c:	697b      	ldr	r3, [r7, #20]
 802872e:	441a      	add	r2, r3
 8028730:	68fb      	ldr	r3, [r7, #12]
 8028732:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 8028734:	69bb      	ldr	r3, [r7, #24]
 8028736:	681a      	ldr	r2, [r3, #0]
 8028738:	697b      	ldr	r3, [r7, #20]
 802873a:	1ad2      	subs	r2, r2, r3
 802873c:	69bb      	ldr	r3, [r7, #24]
 802873e:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 8028740:	697b      	ldr	r3, [r7, #20]
 8028742:	2b00      	cmp	r3, #0
 8028744:	d10c      	bne.n	8028760 <static_cb+0xbc>
 8028746:	68f8      	ldr	r0, [r7, #12]
 8028748:	f7ff ff70 	bl	802862c <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 802874c:	e008      	b.n	8028760 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 802874e:	68bb      	ldr	r3, [r7, #8]
 8028750:	2b09      	cmp	r3, #9
 8028752:	d106      	bne.n	8028762 <static_cb+0xbe>
    restore_http_cb(c);
 8028754:	68f8      	ldr	r0, [r7, #12]
 8028756:	f7ff ff69 	bl	802862c <restore_http_cb>
 802875a:	e002      	b.n	8028762 <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 802875c:	bf00      	nop
 802875e:	e000      	b.n	8028762 <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8028760:	bf00      	nop
  }
  (void) ev_data;
}
 8028762:	3728      	adds	r7, #40	@ 0x28
 8028764:	46bd      	mov	sp, r7
 8028766:	bd80      	pop	{r7, pc}

08028768 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8028768:	b590      	push	{r4, r7, lr}
 802876a:	b091      	sub	sp, #68	@ 0x44
 802876c:	af02      	add	r7, sp, #8
 802876e:	60f8      	str	r0, [r7, #12]
 8028770:	1d38      	adds	r0, r7, #4
 8028772:	e880 0006 	stmia.w	r0, {r1, r2}
 8028776:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra);
 8028778:	f107 0314 	add.w	r3, r7, #20
 802877c:	6839      	ldr	r1, [r7, #0]
 802877e:	4618      	mov	r0, r3
 8028780:	f009 fba8 	bl	8031ed4 <mg_str_s>
  size_t i = 0;
 8028784:	2300      	movs	r3, #0
 8028786:	637b      	str	r3, [r7, #52]	@ 0x34

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8028788:	e002      	b.n	8028790 <guess_content_type+0x28>
 802878a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802878c:	3301      	adds	r3, #1
 802878e:	637b      	str	r3, [r7, #52]	@ 0x34
 8028790:	68bb      	ldr	r3, [r7, #8]
 8028792:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8028794:	429a      	cmp	r2, r3
 8028796:	d208      	bcs.n	80287aa <guess_content_type+0x42>
 8028798:	687a      	ldr	r2, [r7, #4]
 802879a:	68b9      	ldr	r1, [r7, #8]
 802879c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802879e:	1acb      	subs	r3, r1, r3
 80287a0:	3b01      	subs	r3, #1
 80287a2:	4413      	add	r3, r2
 80287a4:	781b      	ldrb	r3, [r3, #0]
 80287a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80287a8:	d1ef      	bne.n	802878a <guess_content_type+0x22>
  path.buf += path.len - i;
 80287aa:	687a      	ldr	r2, [r7, #4]
 80287ac:	68b9      	ldr	r1, [r7, #8]
 80287ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80287b0:	1acb      	subs	r3, r1, r3
 80287b2:	4413      	add	r3, r2
 80287b4:	607b      	str	r3, [r7, #4]
  path.len = i;
 80287b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80287b8:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 80287ba:	e020      	b.n	80287fe <guess_content_type+0x96>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 80287bc:	f107 031c 	add.w	r3, r7, #28
 80287c0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80287c4:	213d      	movs	r1, #61	@ 0x3d
 80287c6:	9100      	str	r1, [sp, #0]
 80287c8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80287cc:	c903      	ldmia	r1, {r0, r1}
 80287ce:	f009 fd48 	bl	8032262 <mg_span>
 80287d2:	4603      	mov	r3, r0
 80287d4:	2b00      	cmp	r3, #0
 80287d6:	d012      	beq.n	80287fe <guess_content_type+0x96>
 80287d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80287dc:	cb0c      	ldmia	r3, {r2, r3}
 80287de:	1d39      	adds	r1, r7, #4
 80287e0:	c903      	ldmia	r1, {r0, r1}
 80287e2:	f009 fbc1 	bl	8031f68 <mg_strcmp>
 80287e6:	4603      	mov	r3, r0
 80287e8:	2b00      	cmp	r3, #0
 80287ea:	d108      	bne.n	80287fe <guess_content_type+0x96>
 80287ec:	68fb      	ldr	r3, [r7, #12]
 80287ee:	461a      	mov	r2, r3
 80287f0:	f107 031c 	add.w	r3, r7, #28
 80287f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80287f8:	e882 0003 	stmia.w	r2, {r0, r1}
 80287fc:	e036      	b.n	802886c <guess_content_type+0x104>
  while (mg_span(s, &entry, &s, ',')) {
 80287fe:	f107 0314 	add.w	r3, r7, #20
 8028802:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8028806:	212c      	movs	r1, #44	@ 0x2c
 8028808:	9100      	str	r1, [sp, #0]
 802880a:	f107 0114 	add.w	r1, r7, #20
 802880e:	c903      	ldmia	r1, {r0, r1}
 8028810:	f009 fd27 	bl	8032262 <mg_span>
 8028814:	4603      	mov	r3, r0
 8028816:	2b00      	cmp	r3, #0
 8028818:	d1d0      	bne.n	80287bc <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 802881a:	2300      	movs	r3, #0
 802881c:	637b      	str	r3, [r7, #52]	@ 0x34
 802881e:	e01a      	b.n	8028856 <guess_content_type+0xee>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8028820:	4a14      	ldr	r2, [pc, #80]	@ (8028874 <guess_content_type+0x10c>)
 8028822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8028824:	00db      	lsls	r3, r3, #3
 8028826:	4413      	add	r3, r2
 8028828:	cb0c      	ldmia	r3, {r2, r3}
 802882a:	1d39      	adds	r1, r7, #4
 802882c:	c903      	ldmia	r1, {r0, r1}
 802882e:	f009 fb9b 	bl	8031f68 <mg_strcmp>
 8028832:	4603      	mov	r3, r0
 8028834:	2b00      	cmp	r3, #0
 8028836:	d10b      	bne.n	8028850 <guess_content_type+0xe8>
 8028838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802883a:	3301      	adds	r3, #1
 802883c:	68f9      	ldr	r1, [r7, #12]
 802883e:	4a0d      	ldr	r2, [pc, #52]	@ (8028874 <guess_content_type+0x10c>)
 8028840:	460c      	mov	r4, r1
 8028842:	00db      	lsls	r3, r3, #3
 8028844:	4413      	add	r3, r2
 8028846:	e893 0003 	ldmia.w	r3, {r0, r1}
 802884a:	e884 0003 	stmia.w	r4, {r0, r1}
 802884e:	e00d      	b.n	802886c <guess_content_type+0x104>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8028850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8028852:	3302      	adds	r3, #2
 8028854:	637b      	str	r3, [r7, #52]	@ 0x34
 8028856:	4a07      	ldr	r2, [pc, #28]	@ (8028874 <guess_content_type+0x10c>)
 8028858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802885a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802885e:	2b00      	cmp	r3, #0
 8028860:	d1de      	bne.n	8028820 <guess_content_type+0xb8>
  }

  return mg_str("text/plain; charset=utf-8");
 8028862:	68fb      	ldr	r3, [r7, #12]
 8028864:	4904      	ldr	r1, [pc, #16]	@ (8028878 <guess_content_type+0x110>)
 8028866:	4618      	mov	r0, r3
 8028868:	f009 fb34 	bl	8031ed4 <mg_str_s>
}
 802886c:	68f8      	ldr	r0, [r7, #12]
 802886e:	373c      	adds	r7, #60	@ 0x3c
 8028870:	46bd      	mov	sp, r7
 8028872:	bd90      	pop	{r4, r7, pc}
 8028874:	200000c0 	.word	0x200000c0
 8028878:	08042238 	.word	0x08042238

0802887c <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 802887c:	b580      	push	{r7, lr}
 802887e:	b08c      	sub	sp, #48	@ 0x30
 8028880:	af02      	add	r7, sp, #8
 8028882:	60f8      	str	r0, [r7, #12]
 8028884:	60b9      	str	r1, [r7, #8]
 8028886:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8028888:	2300      	movs	r3, #0
 802888a:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 802888c:	2300      	movs	r3, #0
 802888e:	627b      	str	r3, [r7, #36]	@ 0x24
 8028890:	e058      	b.n	8028944 <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8028892:	68fb      	ldr	r3, [r7, #12]
 8028894:	681a      	ldr	r2, [r3, #0]
 8028896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028898:	3306      	adds	r3, #6
 802889a:	18d1      	adds	r1, r2, r3
 802889c:	68fb      	ldr	r3, [r7, #12]
 802889e:	685a      	ldr	r2, [r3, #4]
 80288a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80288a2:	1ad3      	subs	r3, r2, r3
 80288a4:	1f9a      	subs	r2, r3, #6
 80288a6:	f107 0310 	add.w	r3, r7, #16
 80288aa:	4618      	mov	r0, r3
 80288ac:	f009 fb2f 	bl	8031f0e <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 80288b0:	68fb      	ldr	r3, [r7, #12]
 80288b2:	681a      	ldr	r2, [r3, #0]
 80288b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80288b6:	4413      	add	r3, r2
 80288b8:	2206      	movs	r2, #6
 80288ba:	4929      	ldr	r1, [pc, #164]	@ (8028960 <getrange+0xe4>)
 80288bc:	4618      	mov	r0, r3
 80288be:	f00d fb7b 	bl	8035fb8 <memcmp>
 80288c2:	4603      	mov	r3, r0
 80288c4:	2b00      	cmp	r3, #0
 80288c6:	d003      	beq.n	80288d0 <getrange+0x54>
  for (i = 0; i + 6 < s->len; i++) {
 80288c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80288ca:	3301      	adds	r3, #1
 80288cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80288ce:	e039      	b.n	8028944 <getrange+0xc8>
    if (mg_span(v, &k, &v, '-')) {
 80288d0:	f107 0310 	add.w	r3, r7, #16
 80288d4:	f107 0218 	add.w	r2, r7, #24
 80288d8:	212d      	movs	r1, #45	@ 0x2d
 80288da:	9100      	str	r1, [sp, #0]
 80288dc:	f107 0110 	add.w	r1, r7, #16
 80288e0:	c903      	ldmia	r1, {r0, r1}
 80288e2:	f009 fcbe 	bl	8032262 <mg_span>
 80288e6:	4603      	mov	r3, r0
 80288e8:	2b00      	cmp	r3, #0
 80288ea:	d01d      	beq.n	8028928 <getrange+0xac>
      if (mg_to_size_t(k, a)) numparsed++;
 80288ec:	68ba      	ldr	r2, [r7, #8]
 80288ee:	f107 0318 	add.w	r3, r7, #24
 80288f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80288f6:	f7fe fbcd 	bl	8027094 <mg_to_size_t>
 80288fa:	4603      	mov	r3, r0
 80288fc:	2b00      	cmp	r3, #0
 80288fe:	d002      	beq.n	8028906 <getrange+0x8a>
 8028900:	6a3b      	ldr	r3, [r7, #32]
 8028902:	3301      	adds	r3, #1
 8028904:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8028906:	697b      	ldr	r3, [r7, #20]
 8028908:	2b00      	cmp	r3, #0
 802890a:	d022      	beq.n	8028952 <getrange+0xd6>
 802890c:	687a      	ldr	r2, [r7, #4]
 802890e:	f107 0310 	add.w	r3, r7, #16
 8028912:	e893 0003 	ldmia.w	r3, {r0, r1}
 8028916:	f7fe fbbd 	bl	8027094 <mg_to_size_t>
 802891a:	4603      	mov	r3, r0
 802891c:	2b00      	cmp	r3, #0
 802891e:	d018      	beq.n	8028952 <getrange+0xd6>
 8028920:	6a3b      	ldr	r3, [r7, #32]
 8028922:	3301      	adds	r3, #1
 8028924:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 8028926:	e014      	b.n	8028952 <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 8028928:	68ba      	ldr	r2, [r7, #8]
 802892a:	f107 0310 	add.w	r3, r7, #16
 802892e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8028932:	f7fe fbaf 	bl	8027094 <mg_to_size_t>
 8028936:	4603      	mov	r3, r0
 8028938:	2b00      	cmp	r3, #0
 802893a:	d00a      	beq.n	8028952 <getrange+0xd6>
 802893c:	6a3b      	ldr	r3, [r7, #32]
 802893e:	3301      	adds	r3, #1
 8028940:	623b      	str	r3, [r7, #32]
 8028942:	e007      	b.n	8028954 <getrange+0xd8>
  for (i = 0; i + 6 < s->len; i++) {
 8028944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028946:	1d9a      	adds	r2, r3, #6
 8028948:	68fb      	ldr	r3, [r7, #12]
 802894a:	685b      	ldr	r3, [r3, #4]
 802894c:	429a      	cmp	r2, r3
 802894e:	d3a0      	bcc.n	8028892 <getrange+0x16>
 8028950:	e000      	b.n	8028954 <getrange+0xd8>
    break;
 8028952:	bf00      	nop
  }
  return (int) numparsed;
 8028954:	6a3b      	ldr	r3, [r7, #32]
}
 8028956:	4618      	mov	r0, r3
 8028958:	3728      	adds	r7, #40	@ 0x28
 802895a:	46bd      	mov	sp, r7
 802895c:	bd80      	pop	{r7, pc}
 802895e:	bf00      	nop
 8028960:	080423bc 	.word	0x080423bc

08028964 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 8028964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028968:	b0f9      	sub	sp, #484	@ 0x1e4
 802896a:	af0a      	add	r7, sp, #40	@ 0x28
 802896c:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 8028970:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 8028974:	6020      	str	r0, [r4, #0]
 8028976:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 802897a:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 802897e:	6001      	str	r1, [r0, #0]
 8028980:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 8028984:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8028988:	600a      	str	r2, [r1, #0]
 802898a:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 802898e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8028992:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8028994:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028998:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 802899c:	681b      	ldr	r3, [r3, #0]
 802899e:	695b      	ldr	r3, [r3, #20]
 80289a0:	2b00      	cmp	r3, #0
 80289a2:	d006      	beq.n	80289b2 <mg_http_serve_file+0x4e>
 80289a4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80289a8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80289ac:	681b      	ldr	r3, [r3, #0]
 80289ae:	695b      	ldr	r3, [r3, #20]
 80289b0:	e000      	b.n	80289b4 <mg_http_serve_file+0x50>
 80289b2:	4ba7      	ldr	r3, [pc, #668]	@ (8028c50 <mg_http_serve_file+0x2ec>)
 80289b4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  struct mg_fd *fd = NULL;
 80289b8:	2300      	movs	r3, #0
 80289ba:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
  size_t size = 0;
 80289be:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80289c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80289c6:	2200      	movs	r2, #0
 80289c8:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 80289ca:	f04f 0200 	mov.w	r2, #0
 80289ce:	f04f 0300 	mov.w	r3, #0
 80289d2:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 80289d6:	2300      	movs	r3, #0
 80289d8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 80289dc:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 80289e0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80289e4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80289e8:	6819      	ldr	r1, [r3, #0]
 80289ea:	4610      	mov	r0, r2
 80289ec:	f009 fa72 	bl	8031ed4 <mg_str_s>
 80289f0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80289f4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80289f8:	681b      	ldr	r3, [r3, #0]
 80289fa:	68db      	ldr	r3, [r3, #12]
 80289fc:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8028a00:	f5a2 7090 	sub.w	r0, r2, #288	@ 0x120
 8028a04:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8028a08:	ca06      	ldmia	r2, {r1, r2}
 8028a0a:	f7ff fead 	bl	8028768 <guess_content_type>
  bool gzip = false;
 8028a0e:	2300      	movs	r3, #0
 8028a10:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3

  if (path != NULL) {
 8028a14:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028a18:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8028a1c:	681b      	ldr	r3, [r3, #0]
 8028a1e:	2b00      	cmp	r3, #0
 8028a20:	d05c      	beq.n	8028adc <mg_http_serve_file+0x178>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8028a22:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028a26:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8028a2a:	498a      	ldr	r1, [pc, #552]	@ (8028c54 <mg_http_serve_file+0x2f0>)
 8028a2c:	6818      	ldr	r0, [r3, #0]
 8028a2e:	f7fe fd7f 	bl	8027530 <mg_http_get_header>
 8028a32:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    if (ae != NULL) {
 8028a36:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8028a3a:	2b00      	cmp	r3, #0
 8028a3c:	d03e      	beq.n	8028abc <mg_http_serve_file+0x158>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8028a3e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8028a42:	6859      	ldr	r1, [r3, #4]
 8028a44:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8028a48:	681b      	ldr	r3, [r3, #0]
 8028a4a:	461a      	mov	r2, r3
 8028a4c:	4882      	ldr	r0, [pc, #520]	@ (8028c58 <mg_http_serve_file+0x2f4>)
 8028a4e:	f008 fd8f 	bl	8031570 <mg_mprintf>
 8028a52:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8028a56:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8028a5a:	2b00      	cmp	r3, #0
 8028a5c:	d02a      	beq.n	8028ab4 <mg_http_serve_file+0x150>
 8028a5e:	497f      	ldr	r1, [pc, #508]	@ (8028c5c <mg_http_serve_file+0x2f8>)
 8028a60:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8028a64:	f00d fbbc 	bl	80361e0 <strstr>
 8028a68:	4603      	mov	r3, r0
 8028a6a:	2b00      	cmp	r3, #0
 8028a6c:	d022      	beq.n	8028ab4 <mg_http_serve_file+0x150>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8028a6e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028a72:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8028a76:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8028a7a:	681b      	ldr	r3, [r3, #0]
 8028a7c:	4a78      	ldr	r2, [pc, #480]	@ (8028c60 <mg_http_serve_file+0x2fc>)
 8028a7e:	2180      	movs	r1, #128	@ 0x80
 8028a80:	f008 fd40 	bl	8031504 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8028a84:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8028a88:	2201      	movs	r2, #1
 8028a8a:	4619      	mov	r1, r3
 8028a8c:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8028a90:	f7fe fa0c 	bl	8026eac <mg_fs_open>
 8028a94:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
        if (fd != NULL) gzip = true, path = tmp;
 8028a98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8028a9c:	2b00      	cmp	r3, #0
 8028a9e:	d009      	beq.n	8028ab4 <mg_http_serve_file+0x150>
 8028aa0:	2301      	movs	r3, #1
 8028aa2:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
 8028aa6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028aaa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8028aae:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8028ab2:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 8028ab4:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8028ab8:	f7f3 ffce 	bl	801ca58 <vPortFree>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8028abc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8028ac0:	2b00      	cmp	r3, #0
 8028ac2:	d10b      	bne.n	8028adc <mg_http_serve_file+0x178>
 8028ac4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028ac8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8028acc:	2201      	movs	r2, #1
 8028ace:	6819      	ldr	r1, [r3, #0]
 8028ad0:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8028ad4:	f7fe f9ea 	bl	8026eac <mg_fs_open>
 8028ad8:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8028adc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8028ae0:	2b00      	cmp	r3, #0
 8028ae2:	d144      	bne.n	8028b6e <mg_http_serve_file+0x20a>
 8028ae4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028ae8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8028aec:	681b      	ldr	r3, [r3, #0]
 8028aee:	691b      	ldr	r3, [r3, #16]
 8028af0:	2b00      	cmp	r3, #0
 8028af2:	d03c      	beq.n	8028b6e <mg_http_serve_file+0x20a>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8028af4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028af8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8028afc:	681b      	ldr	r3, [r3, #0]
 8028afe:	691b      	ldr	r3, [r3, #16]
 8028b00:	2201      	movs	r2, #1
 8028b02:	4619      	mov	r1, r3
 8028b04:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8028b08:	f7fe f9d0 	bl	8026eac <mg_fs_open>
 8028b0c:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
    path = opts->page404;
 8028b10:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028b14:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8028b18:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8028b1c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8028b20:	6812      	ldr	r2, [r2, #0]
 8028b22:	6912      	ldr	r2, [r2, #16]
 8028b24:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8028b26:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 8028b2a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028b2e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8028b32:	6819      	ldr	r1, [r3, #0]
 8028b34:	4610      	mov	r0, r2
 8028b36:	f009 f9cd 	bl	8031ed4 <mg_str_s>
 8028b3a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028b3e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8028b42:	681b      	ldr	r3, [r3, #0]
 8028b44:	68db      	ldr	r3, [r3, #12]
 8028b46:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8028b4a:	f5a2 7490 	sub.w	r4, r2, #288	@ 0x120
 8028b4e:	f107 0010 	add.w	r0, r7, #16
 8028b52:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 8028b56:	ca06      	ldmia	r2, {r1, r2}
 8028b58:	f7ff fe06 	bl	8028768 <guess_content_type>
 8028b5c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028b60:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 8028b64:	4623      	mov	r3, r4
 8028b66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8028b6a:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8028b6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8028b72:	2b00      	cmp	r3, #0
 8028b74:	d00f      	beq.n	8028b96 <mg_http_serve_file+0x232>
 8028b76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8028b7a:	681c      	ldr	r4, [r3, #0]
 8028b7c:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8028b80:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8028b84:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028b88:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8028b8c:	6818      	ldr	r0, [r3, #0]
 8028b8e:	47a0      	blx	r4
 8028b90:	4603      	mov	r3, r0
 8028b92:	2b00      	cmp	r3, #0
 8028b94:	d114      	bne.n	8028bc0 <mg_http_serve_file+0x25c>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8028b96:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028b9a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8028b9e:	681b      	ldr	r3, [r3, #0]
 8028ba0:	689a      	ldr	r2, [r3, #8]
 8028ba2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028ba6:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 8028baa:	4b2e      	ldr	r3, [pc, #184]	@ (8028c64 <mg_http_serve_file+0x300>)
 8028bac:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8028bb0:	6800      	ldr	r0, [r0, #0]
 8028bb2:	f7ff fce3 	bl	802857c <mg_http_reply>
    mg_fs_close(fd);
 8028bb6:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8028bba:	f7fe f99e 	bl	8026efa <mg_fs_close>
 8028bbe:	e19d      	b.n	8028efc <mg_http_serve_file+0x598>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8028bc0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028bc4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8028bc8:	6819      	ldr	r1, [r3, #0]
 8028bca:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8028bce:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8028bd2:	e9cd 2300 	strd	r2, r3, [sp]
 8028bd6:	460a      	mov	r2, r1
 8028bd8:	2140      	movs	r1, #64	@ 0x40
 8028bda:	f7ff fd47 	bl	802866c <mg_http_etag>
 8028bde:	4603      	mov	r3, r0
 8028be0:	2b00      	cmp	r3, #0
 8028be2:	d045      	beq.n	8028c70 <mg_http_serve_file+0x30c>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8028be4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028be8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8028bec:	491e      	ldr	r1, [pc, #120]	@ (8028c68 <mg_http_serve_file+0x304>)
 8028bee:	6818      	ldr	r0, [r3, #0]
 8028bf0:	f7fe fc9e 	bl	8027530 <mg_http_get_header>
 8028bf4:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8028bf8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8028bfc:	2b00      	cmp	r3, #0
 8028bfe:	d037      	beq.n	8028c70 <mg_http_serve_file+0x30c>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8028c00:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8028c04:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8028c08:	4611      	mov	r1, r2
 8028c0a:	4618      	mov	r0, r3
 8028c0c:	f009 f962 	bl	8031ed4 <mg_str_s>
 8028c10:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8028c14:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8028c18:	cb0c      	ldmia	r3, {r2, r3}
 8028c1a:	c903      	ldmia	r1, {r0, r1}
 8028c1c:	f009 f9e6 	bl	8031fec <mg_strcasecmp>
 8028c20:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8028c22:	2b00      	cmp	r3, #0
 8028c24:	d124      	bne.n	8028c70 <mg_http_serve_file+0x30c>
    mg_fs_close(fd);
 8028c26:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8028c2a:	f7fe f966 	bl	8026efa <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8028c2e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028c32:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8028c36:	681b      	ldr	r3, [r3, #0]
 8028c38:	689a      	ldr	r2, [r3, #8]
 8028c3a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028c3e:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 8028c42:	4b0a      	ldr	r3, [pc, #40]	@ (8028c6c <mg_http_serve_file+0x308>)
 8028c44:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8028c48:	6800      	ldr	r0, [r0, #0]
 8028c4a:	f7ff fc97 	bl	802857c <mg_http_reply>
 8028c4e:	e155      	b.n	8028efc <mg_http_serve_file+0x598>
 8028c50:	20000098 	.word	0x20000098
 8028c54:	080423c4 	.word	0x080423c4
 8028c58:	08041bb0 	.word	0x08041bb0
 8028c5c:	080423d4 	.word	0x080423d4
 8028c60:	080423dc 	.word	0x080423dc
 8028c64:	080423e4 	.word	0x080423e4
 8028c68:	080423f0 	.word	0x080423f0
 8028c6c:	08042110 	.word	0x08042110
  } else {
    int n, status = 200;
 8028c70:	23c8      	movs	r3, #200	@ 0xc8
 8028c72:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 8028c76:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028c7a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8028c7e:	2200      	movs	r2, #0
 8028c80:	601a      	str	r2, [r3, #0]
 8028c82:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028c86:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8028c8a:	2200      	movs	r2, #0
 8028c8c:	601a      	str	r2, [r3, #0]
 8028c8e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028c92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8028c96:	681b      	ldr	r3, [r3, #0]
 8028c98:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8028c9c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028ca0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8028ca4:	4998      	ldr	r1, [pc, #608]	@ (8028f08 <mg_http_serve_file+0x5a4>)
 8028ca6:	6818      	ldr	r0, [r3, #0]
 8028ca8:	f7fe fc42 	bl	8027530 <mg_http_get_header>
 8028cac:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
    range[0] = '\0';
 8028cb0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028cb4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8028cb8:	2200      	movs	r2, #0
 8028cba:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8028cbc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8028cc0:	2b00      	cmp	r3, #0
 8028cc2:	f000 8095 	beq.w	8028df0 <mg_http_serve_file+0x48c>
 8028cc6:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8028cca:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8028cce:	4619      	mov	r1, r3
 8028cd0:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8028cd4:	f7ff fdd2 	bl	802887c <getrange>
 8028cd8:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 8028cdc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8028ce0:	2b00      	cmp	r3, #0
 8028ce2:	f340 8085 	ble.w	8028df0 <mg_http_serve_file+0x48c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8028ce6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8028cea:	2b01      	cmp	r3, #1
 8028cec:	d107      	bne.n	8028cfe <mg_http_serve_file+0x39a>
 8028cee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8028cf2:	1e5a      	subs	r2, r3, #1
 8028cf4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028cf8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8028cfc:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 8028cfe:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028d02:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8028d06:	681a      	ldr	r2, [r3, #0]
 8028d08:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028d0c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8028d10:	681b      	ldr	r3, [r3, #0]
 8028d12:	429a      	cmp	r2, r3
 8028d14:	d808      	bhi.n	8028d28 <mg_http_serve_file+0x3c4>
 8028d16:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028d1a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8028d1e:	681b      	ldr	r3, [r3, #0]
 8028d20:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8028d24:	429a      	cmp	r2, r3
 8028d26:	d81a      	bhi.n	8028d5e <mg_http_serve_file+0x3fa>
        status = 416;
 8028d28:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8028d2c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = 0;
 8028d30:	2300      	movs	r3, #0
 8028d32:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8028d36:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028d3a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8028d3e:	681b      	ldr	r3, [r3, #0]
 8028d40:	2200      	movs	r2, #0
 8028d42:	60bb      	str	r3, [r7, #8]
 8028d44:	60fa      	str	r2, [r7, #12]
 8028d46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8028d4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8028d4e:	e9cd 1200 	strd	r1, r2, [sp]
 8028d52:	4a6e      	ldr	r2, [pc, #440]	@ (8028f0c <mg_http_serve_file+0x5a8>)
 8028d54:	2164      	movs	r1, #100	@ 0x64
 8028d56:	4618      	mov	r0, r3
 8028d58:	f008 fbd4 	bl	8031504 <mg_snprintf>
 8028d5c:	e048      	b.n	8028df0 <mg_http_serve_file+0x48c>
                    (int64_t) size);
      } else {
        status = 206;
 8028d5e:	23ce      	movs	r3, #206	@ 0xce
 8028d60:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = r2 - r1 + 1;
 8028d64:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028d68:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8028d6c:	681a      	ldr	r2, [r3, #0]
 8028d6e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028d72:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8028d76:	681b      	ldr	r3, [r3, #0]
 8028d78:	1ad3      	subs	r3, r2, r3
 8028d7a:	3301      	adds	r3, #1
 8028d7c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range),
 8028d80:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028d84:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8028d88:	681b      	ldr	r3, [r3, #0]
 8028d8a:	2200      	movs	r2, #0
 8028d8c:	469a      	mov	sl, r3
 8028d8e:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8028d90:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028d94:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8028d98:	681a      	ldr	r2, [r3, #0]
 8028d9a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8028d9e:	4413      	add	r3, r2
 8028da0:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 8028da2:	2200      	movs	r2, #0
 8028da4:	461d      	mov	r5, r3
 8028da6:	4616      	mov	r6, r2
 8028da8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028dac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8028db0:	681b      	ldr	r3, [r3, #0]
 8028db2:	2200      	movs	r2, #0
 8028db4:	603b      	str	r3, [r7, #0]
 8028db6:	607a      	str	r2, [r7, #4]
 8028db8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8028dbc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8028dc0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8028dc4:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8028dc8:	e9cd ab00 	strd	sl, fp, [sp]
 8028dcc:	4a50      	ldr	r2, [pc, #320]	@ (8028f10 <mg_http_serve_file+0x5ac>)
 8028dce:	2164      	movs	r1, #100	@ 0x64
 8028dd0:	4618      	mov	r0, r3
 8028dd2:	f008 fb97 	bl	8031504 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8028dd6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8028dda:	699b      	ldr	r3, [r3, #24]
 8028ddc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8028de0:	6810      	ldr	r0, [r2, #0]
 8028de2:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8028de6:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8028dea:	6812      	ldr	r2, [r2, #0]
 8028dec:	4611      	mov	r1, r2
 8028dee:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8028df0:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 8028df4:	f7fe fec6 	bl	8027b84 <mg_http_status_code_str>
 8028df8:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8028dfa:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028dfe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8028e02:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 8028e04:	461d      	mov	r5, r3
 8028e06:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028e0a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8028e0e:	681a      	ldr	r2, [r3, #0]
 8028e10:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8028e14:	2100      	movs	r1, #0
 8028e16:	4698      	mov	r8, r3
 8028e18:	4689      	mov	r9, r1
 8028e1a:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 8028e1e:	2b00      	cmp	r3, #0
 8028e20:	d001      	beq.n	8028e26 <mg_http_serve_file+0x4c2>
 8028e22:	493c      	ldr	r1, [pc, #240]	@ (8028f14 <mg_http_serve_file+0x5b0>)
 8028e24:	e000      	b.n	8028e28 <mg_http_serve_file+0x4c4>
 8028e26:	493c      	ldr	r1, [pc, #240]	@ (8028f18 <mg_http_serve_file+0x5b4>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8028e28:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028e2c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8028e30:	681b      	ldr	r3, [r3, #0]
 8028e32:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8028e34:	2b00      	cmp	r3, #0
 8028e36:	d006      	beq.n	8028e46 <mg_http_serve_file+0x4e2>
 8028e38:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028e3c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8028e40:	681b      	ldr	r3, [r3, #0]
 8028e42:	689b      	ldr	r3, [r3, #8]
 8028e44:	e000      	b.n	8028e48 <mg_http_serve_file+0x4e4>
 8028e46:	4b34      	ldr	r3, [pc, #208]	@ (8028f18 <mg_http_serve_file+0x5b4>)
 8028e48:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 8028e4c:	f5a0 70ca 	sub.w	r0, r0, #404	@ 0x194
 8028e50:	9308      	str	r3, [sp, #32]
 8028e52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8028e56:	9307      	str	r3, [sp, #28]
 8028e58:	9106      	str	r1, [sp, #24]
 8028e5a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8028e5e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8028e62:	9302      	str	r3, [sp, #8]
 8028e64:	9201      	str	r2, [sp, #4]
 8028e66:	9500      	str	r5, [sp, #0]
 8028e68:	4623      	mov	r3, r4
 8028e6a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8028e6e:	492b      	ldr	r1, [pc, #172]	@ (8028f1c <mg_http_serve_file+0x5b8>)
 8028e70:	6800      	ldr	r0, [r0, #0]
 8028e72:	f004 fc73 	bl	802d75c <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8028e76:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8028e7a:	4929      	ldr	r1, [pc, #164]	@ (8028f20 <mg_http_serve_file+0x5bc>)
 8028e7c:	4618      	mov	r0, r3
 8028e7e:	f009 f829 	bl	8031ed4 <mg_str_s>
 8028e82:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028e86:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8028e8a:	6819      	ldr	r1, [r3, #0]
 8028e8c:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8028e90:	cb0c      	ldmia	r3, {r2, r3}
 8028e92:	c903      	ldmia	r1, {r0, r1}
 8028e94:	f009 f8aa 	bl	8031fec <mg_strcasecmp>
 8028e98:	4603      	mov	r3, r0
 8028e9a:	2b00      	cmp	r3, #0
 8028e9c:	d10f      	bne.n	8028ebe <mg_http_serve_file+0x55a>
      c->is_resp = 0;
 8028e9e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028ea2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8028ea6:	681a      	ldr	r2, [r3, #0]
 8028ea8:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8028eac:	f36f 13c7 	bfc	r3, #7, #1
 8028eb0:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_fs_close(fd);
 8028eb4:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8028eb8:	f7fe f81f 	bl	8026efa <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 8028ebc:	e01e      	b.n	8028efc <mg_http_serve_file+0x598>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8028ebe:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028ec2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8028ec6:	681b      	ldr	r3, [r3, #0]
 8028ec8:	33a4      	adds	r3, #164	@ 0xa4
 8028eca:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
      c->pfn = static_cb;
 8028ece:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028ed2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8028ed6:	681b      	ldr	r3, [r3, #0]
 8028ed8:	4a12      	ldr	r2, [pc, #72]	@ (8028f24 <mg_http_serve_file+0x5c0>)
 8028eda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 8028ede:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8028ee2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8028ee6:	681b      	ldr	r3, [r3, #0]
 8028ee8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8028eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 8028ef0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8028ef4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8028ef8:	601a      	str	r2, [r3, #0]
}
 8028efa:	e7ff      	b.n	8028efc <mg_http_serve_file+0x598>
 8028efc:	bf00      	nop
 8028efe:	f507 77de 	add.w	r7, r7, #444	@ 0x1bc
 8028f02:	46bd      	mov	sp, r7
 8028f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f08:	08042400 	.word	0x08042400
 8028f0c:	08042408 	.word	0x08042408
 8028f10:	08042428 	.word	0x08042428
 8028f14:	08042450 	.word	0x08042450
 8028f18:	08042110 	.word	0x08042110
 8028f1c:	0804246c 	.word	0x0804246c
 8028f20:	080424bc 	.word	0x080424bc
 8028f24:	080286a5 	.word	0x080286a5

08028f28 <printdirentry>:
  const struct mg_http_serve_opts *opts;
  const char *dir;
};

#if MG_ENABLE_DIRLIST
static void printdirentry(const char *name, void *userdata) {
 8028f28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8028f2c:	b0c8      	sub	sp, #288	@ 0x120
 8028f2e:	af0a      	add	r7, sp, #40	@ 0x28
 8028f30:	6078      	str	r0, [r7, #4]
 8028f32:	6039      	str	r1, [r7, #0]
  struct printdirentrydata *d = (struct printdirentrydata *) userdata;
 8028f34:	683b      	ldr	r3, [r7, #0]
 8028f36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8028f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8028f3e:	689b      	ldr	r3, [r3, #8]
 8028f40:	695b      	ldr	r3, [r3, #20]
 8028f42:	2b00      	cmp	r3, #0
 8028f44:	d004      	beq.n	8028f50 <printdirentry+0x28>
 8028f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8028f4a:	689b      	ldr	r3, [r3, #8]
 8028f4c:	695b      	ldr	r3, [r3, #20]
 8028f4e:	e000      	b.n	8028f52 <printdirentry+0x2a>
 8028f50:	4b66      	ldr	r3, [pc, #408]	@ (80290ec <printdirentry+0x1c4>)
 8028f52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  size_t size = 0;
 8028f56:	2300      	movs	r3, #0
 8028f58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  time_t t = 0;
 8028f5c:	f04f 0200 	mov.w	r2, #0
 8028f60:	f04f 0300 	mov.w	r3, #0
 8028f64:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
  char path[MG_PATH_MAX], sz[40], mod[40];
  int flags, n = 0;
 8028f68:	2300      	movs	r3, #0
 8028f6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

  // MG_DEBUG(("[%s] [%s]", d->dir, name));
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8028f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8028f72:	68da      	ldr	r2, [r3, #12]
 8028f74:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8028f78:	687b      	ldr	r3, [r7, #4]
 8028f7a:	9301      	str	r3, [sp, #4]
 8028f7c:	232f      	movs	r3, #47	@ 0x2f
 8028f7e:	9300      	str	r3, [sp, #0]
 8028f80:	4613      	mov	r3, r2
 8028f82:	4a5b      	ldr	r2, [pc, #364]	@ (80290f0 <printdirentry+0x1c8>)
 8028f84:	2180      	movs	r1, #128	@ 0x80
 8028f86:	f008 fabd 	bl	8031504 <mg_snprintf>
 8028f8a:	4603      	mov	r3, r0
 8028f8c:	2b80      	cmp	r3, #128	@ 0x80
 8028f8e:	d910      	bls.n	8028fb2 <printdirentry+0x8a>
      sizeof(path)) {
    MG_ERROR(("%s truncated", name));
 8028f90:	4b58      	ldr	r3, [pc, #352]	@ (80290f4 <printdirentry+0x1cc>)
 8028f92:	681b      	ldr	r3, [r3, #0]
 8028f94:	2b00      	cmp	r3, #0
 8028f96:	f340 80a3 	ble.w	80290e0 <printdirentry+0x1b8>
 8028f9a:	4b57      	ldr	r3, [pc, #348]	@ (80290f8 <printdirentry+0x1d0>)
 8028f9c:	f640 3248 	movw	r2, #2888	@ 0xb48
 8028fa0:	4956      	ldr	r1, [pc, #344]	@ (80290fc <printdirentry+0x1d4>)
 8028fa2:	2001      	movs	r0, #1
 8028fa4:	f002 fa92 	bl	802b4cc <mg_log_prefix>
 8028fa8:	6879      	ldr	r1, [r7, #4]
 8028faa:	4855      	ldr	r0, [pc, #340]	@ (8029100 <printdirentry+0x1d8>)
 8028fac:	f002 fade 	bl	802b56c <mg_log>
              "  <tr><td><a href=\"%.*s%s\">%s%s</a></td>"
              "<td name=%lu>%s</td><td name=%lld>%s</td></tr>\n",
              n, path, slash, name, slash, (unsigned long) t, mod,
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
  }
}
 8028fb0:	e096      	b.n	80290e0 <printdirentry+0x1b8>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8028fb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8028fb6:	681b      	ldr	r3, [r3, #0]
 8028fb8:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8028fbc:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8028fc0:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8028fc4:	4798      	blx	r3
 8028fc6:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 8028fca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8028fce:	2b00      	cmp	r3, #0
 8028fd0:	d11a      	bne.n	8029008 <printdirentry+0xe0>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8028fd2:	4b48      	ldr	r3, [pc, #288]	@ (80290f4 <printdirentry+0x1cc>)
 8028fd4:	681b      	ldr	r3, [r3, #0]
 8028fd6:	2b00      	cmp	r3, #0
 8028fd8:	f340 8082 	ble.w	80290e0 <printdirentry+0x1b8>
 8028fdc:	4b46      	ldr	r3, [pc, #280]	@ (80290f8 <printdirentry+0x1d0>)
 8028fde:	f640 324a 	movw	r2, #2890	@ 0xb4a
 8028fe2:	4946      	ldr	r1, [pc, #280]	@ (80290fc <printdirentry+0x1d4>)
 8028fe4:	2001      	movs	r0, #1
 8028fe6:	f002 fa71 	bl	802b4cc <mg_log_prefix>
 8028fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8028fee:	681b      	ldr	r3, [r3, #0]
 8028ff0:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8028ff2:	f00e fa79 	bl	80374e8 <__errno>
 8028ff6:	4603      	mov	r3, r0
 8028ff8:	681b      	ldr	r3, [r3, #0]
 8028ffa:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8028ffe:	4621      	mov	r1, r4
 8029000:	4840      	ldr	r0, [pc, #256]	@ (8029104 <printdirentry+0x1dc>)
 8029002:	f002 fab3 	bl	802b56c <mg_log>
}
 8029006:	e06b      	b.n	80290e0 <printdirentry+0x1b8>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8029008:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 802900c:	f003 0304 	and.w	r3, r3, #4
 8029010:	2b00      	cmp	r3, #0
 8029012:	d001      	beq.n	8029018 <printdirentry+0xf0>
 8029014:	4b3c      	ldr	r3, [pc, #240]	@ (8029108 <printdirentry+0x1e0>)
 8029016:	e000      	b.n	802901a <printdirentry+0xf2>
 8029018:	4b3c      	ldr	r3, [pc, #240]	@ (802910c <printdirentry+0x1e4>)
 802901a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (flags & MG_FS_DIR) {
 802901e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8029022:	f003 0304 	and.w	r3, r3, #4
 8029026:	2b00      	cmp	r3, #0
 8029028:	d007      	beq.n	802903a <printdirentry+0x112>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 802902a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 802902e:	4b38      	ldr	r3, [pc, #224]	@ (8029110 <printdirentry+0x1e8>)
 8029030:	4a38      	ldr	r2, [pc, #224]	@ (8029114 <printdirentry+0x1ec>)
 8029032:	2128      	movs	r1, #40	@ 0x28
 8029034:	f008 fa66 	bl	8031504 <mg_snprintf>
 8029038:	e00d      	b.n	8029056 <printdirentry+0x12e>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 802903a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802903e:	2200      	movs	r2, #0
 8029040:	4698      	mov	r8, r3
 8029042:	4691      	mov	r9, r2
 8029044:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8029048:	e9cd 8900 	strd	r8, r9, [sp]
 802904c:	4a32      	ldr	r2, [pc, #200]	@ (8029118 <printdirentry+0x1f0>)
 802904e:	2128      	movs	r1, #40	@ 0x28
 8029050:	4618      	mov	r0, r3
 8029052:	f008 fa57 	bl	8031504 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 8029056:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 802905a:	4613      	mov	r3, r2
 802905c:	f107 0008 	add.w	r0, r7, #8
 8029060:	4a2e      	ldr	r2, [pc, #184]	@ (802911c <printdirentry+0x1f4>)
 8029062:	2128      	movs	r1, #40	@ 0x28
 8029064:	f008 fa4e 	bl	8031504 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8029068:	6878      	ldr	r0, [r7, #4]
 802906a:	f7e7 f919 	bl	80102a0 <strlen>
 802906e:	4601      	mov	r1, r0
 8029070:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8029074:	2380      	movs	r3, #128	@ 0x80
 8029076:	6878      	ldr	r0, [r7, #4]
 8029078:	f000 fbdc 	bl	8029834 <mg_url_encode>
 802907c:	4603      	mov	r3, r0
 802907e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_printf(d->c,
 8029082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8029086:	6818      	ldr	r0, [r3, #0]
 8029088:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 802908c:	4611      	mov	r1, r2
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 802908e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8029092:	f003 0304 	and.w	r3, r3, #4
    mg_printf(d->c,
 8029096:	2b00      	cmp	r3, #0
 8029098:	d105      	bne.n	80290a6 <printdirentry+0x17e>
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 802909a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
    mg_printf(d->c,
 802909e:	2200      	movs	r2, #0
 80290a0:	461c      	mov	r4, r3
 80290a2:	4615      	mov	r5, r2
 80290a4:	e003      	b.n	80290ae <printdirentry+0x186>
 80290a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80290aa:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80290ae:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80290b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80290b6:	9308      	str	r3, [sp, #32]
 80290b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80290bc:	f107 0308 	add.w	r3, r7, #8
 80290c0:	9304      	str	r3, [sp, #16]
 80290c2:	9103      	str	r1, [sp, #12]
 80290c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80290c8:	9302      	str	r3, [sp, #8]
 80290ca:	687b      	ldr	r3, [r7, #4]
 80290cc:	9301      	str	r3, [sp, #4]
 80290ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80290d2:	9300      	str	r3, [sp, #0]
 80290d4:	4613      	mov	r3, r2
 80290d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80290da:	4911      	ldr	r1, [pc, #68]	@ (8029120 <printdirentry+0x1f8>)
 80290dc:	f004 fb3e 	bl	802d75c <mg_printf>
}
 80290e0:	bf00      	nop
 80290e2:	37f8      	adds	r7, #248	@ 0xf8
 80290e4:	46bd      	mov	sp, r7
 80290e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80290ea:	bf00      	nop
 80290ec:	20000098 	.word	0x20000098
 80290f0:	080424c4 	.word	0x080424c4
 80290f4:	200002a8 	.word	0x200002a8
 80290f8:	08044a50 	.word	0x08044a50
 80290fc:	08041a30 	.word	0x08041a30
 8029100:	080424cc 	.word	0x080424cc
 8029104:	080424dc 	.word	0x080424dc
 8029108:	080424f0 	.word	0x080424f0
 802910c:	08042110 	.word	0x08042110
 8029110:	080424f4 	.word	0x080424f4
 8029114:	08041b9c 	.word	0x08041b9c
 8029118:	080424fc 	.word	0x080424fc
 802911c:	08042504 	.word	0x08042504
 8029120:	08042508 	.word	0x08042508

08029124 <listdir>:

static void listdir(struct mg_connection *c, struct mg_http_message *hm,
                    const struct mg_http_serve_opts *opts, char *dir) {
 8029124:	b580      	push	{r7, lr}
 8029126:	b0b8      	sub	sp, #224	@ 0xe0
 8029128:	af04      	add	r7, sp, #16
 802912a:	60f8      	str	r0, [r7, #12]
 802912c:	60b9      	str	r1, [r7, #8]
 802912e:	607a      	str	r2, [r7, #4]
 8029130:	603b      	str	r3, [r7, #0]
  const char *sort_js_code =
 8029132:	4b51      	ldr	r3, [pc, #324]	@ (8029278 <listdir+0x154>)
 8029134:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      "t1 = a.cells[2].getAttribute('name'), "
      "t2 = b.cells[2].getAttribute('name'); "
      "return so * (t1 < 0 && t2 >= 0 ? -1 : t2 < 0 && t1 >= 0 ? 1 : "
      "n1 ? parseInt(n2) - parseInt(n1) : "
      "c1.textContent.trim().localeCompare(c2.textContent.trim())); });";
  const char *sort_js_code2 =
 8029138:	4b50      	ldr	r3, [pc, #320]	@ (802927c <listdir+0x158>)
 802913a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      "var c = ev.target.rel; if (c) {if (c == sc) so *= -1; srt(tb, c, so); "
      "sc = c; ev.preventDefault();}};"
      "srt(tb, sc, so, true);"
      "}"
      "</script>";
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 802913e:	687b      	ldr	r3, [r7, #4]
 8029140:	695b      	ldr	r3, [r3, #20]
 8029142:	2b00      	cmp	r3, #0
 8029144:	d002      	beq.n	802914c <listdir+0x28>
 8029146:	687b      	ldr	r3, [r7, #4]
 8029148:	695b      	ldr	r3, [r3, #20]
 802914a:	e000      	b.n	802914e <listdir+0x2a>
 802914c:	4b4c      	ldr	r3, [pc, #304]	@ (8029280 <listdir+0x15c>)
 802914e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  struct printdirentrydata d = {c, hm, opts, dir};
 8029152:	68fb      	ldr	r3, [r7, #12]
 8029154:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8029158:	68bb      	ldr	r3, [r7, #8]
 802915a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 802915e:	687b      	ldr	r3, [r7, #4]
 8029160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8029164:	683b      	ldr	r3, [r7, #0]
 8029166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  char tmp[10], buf[MG_PATH_MAX];
  size_t off, n;
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 802916a:	68bb      	ldr	r3, [r7, #8]
 802916c:	6898      	ldr	r0, [r3, #8]
 802916e:	68bb      	ldr	r3, [r7, #8]
 8029170:	68d9      	ldr	r1, [r3, #12]
 8029172:	f107 021c 	add.w	r2, r7, #28
 8029176:	2300      	movs	r3, #0
 8029178:	9300      	str	r3, [sp, #0]
 802917a:	2380      	movs	r3, #128	@ 0x80
 802917c:	f7fe f8e5 	bl	802734a <mg_url_decode>
 8029180:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8029184:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8029188:	2b00      	cmp	r3, #0
 802918a:	dd09      	ble.n	80291a0 <listdir+0x7c>
 802918c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8029190:	f107 0314 	add.w	r3, r7, #20
 8029194:	f107 011c 	add.w	r1, r7, #28
 8029198:	4618      	mov	r0, r3
 802919a:	f008 feb8 	bl	8031f0e <mg_str_n>
 802919e:	e007      	b.n	80291b0 <listdir+0x8c>
 80291a0:	68ba      	ldr	r2, [r7, #8]
 80291a2:	f107 0314 	add.w	r3, r7, #20
 80291a6:	3208      	adds	r2, #8
 80291a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80291ac:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_printf(c,
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html; charset=utf-8\r\n"
            "%s"
            "Content-Length:         \r\n\r\n",
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 80291b0:	687b      	ldr	r3, [r7, #4]
 80291b2:	689b      	ldr	r3, [r3, #8]
  mg_printf(c,
 80291b4:	2b00      	cmp	r3, #0
 80291b6:	d002      	beq.n	80291be <listdir+0x9a>
 80291b8:	687b      	ldr	r3, [r7, #4]
 80291ba:	689b      	ldr	r3, [r3, #8]
 80291bc:	e000      	b.n	80291c0 <listdir+0x9c>
 80291be:	4b31      	ldr	r3, [pc, #196]	@ (8029284 <listdir+0x160>)
 80291c0:	461a      	mov	r2, r3
 80291c2:	4931      	ldr	r1, [pc, #196]	@ (8029288 <listdir+0x164>)
 80291c4:	68f8      	ldr	r0, [r7, #12]
 80291c6:	f004 fac9 	bl	802d75c <mg_printf>
  off = c->send.len;  // Start of body
 80291ca:	68fb      	ldr	r3, [r7, #12]
 80291cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80291ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            "<a href=\"#\" rel=\"1\">Modified</a></th>"
            "<th><a href=\"#\" rel=\"2\">Size</a></th></tr>"
            "<tr><td colspan=\"3\"><hr></td></tr>"
            "</thead>"
            "<tbody id=\"tb\">\n",
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 80291d2:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 80291d4:	4618      	mov	r0, r3
 80291d6:	697a      	ldr	r2, [r7, #20]
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 80291d8:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 80291da:	4619      	mov	r1, r3
 80291dc:	697b      	ldr	r3, [r7, #20]
 80291de:	9303      	str	r3, [sp, #12]
 80291e0:	9102      	str	r1, [sp, #8]
 80291e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80291e6:	9301      	str	r3, [sp, #4]
 80291e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80291ec:	9300      	str	r3, [sp, #0]
 80291ee:	4613      	mov	r3, r2
 80291f0:	4602      	mov	r2, r0
 80291f2:	4926      	ldr	r1, [pc, #152]	@ (802928c <listdir+0x168>)
 80291f4:	68f8      	ldr	r0, [r7, #12]
 80291f6:	f004 fab1 	bl	802d75c <mg_printf>
            uri.buf);
  mg_printf(c, "%s",
 80291fa:	4a25      	ldr	r2, [pc, #148]	@ (8029290 <listdir+0x16c>)
 80291fc:	4925      	ldr	r1, [pc, #148]	@ (8029294 <listdir+0x170>)
 80291fe:	68f8      	ldr	r0, [r7, #12]
 8029200:	f004 faac 	bl	802d75c <mg_printf>
            "  <tr><td><a href=\"..\">..</a></td>"
            "<td name=-1></td><td name=-1>[DIR]</td></tr>\n");

  fs->ls(dir, printdirentry, &d);
 8029204:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8029208:	685b      	ldr	r3, [r3, #4]
 802920a:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 802920e:	4922      	ldr	r1, [pc, #136]	@ (8029298 <listdir+0x174>)
 8029210:	6838      	ldr	r0, [r7, #0]
 8029212:	4798      	blx	r3
  mg_printf(c,
 8029214:	4a21      	ldr	r2, [pc, #132]	@ (802929c <listdir+0x178>)
 8029216:	4922      	ldr	r1, [pc, #136]	@ (80292a0 <listdir+0x17c>)
 8029218:	68f8      	ldr	r0, [r7, #12]
 802921a:	f004 fa9f 	bl	802d75c <mg_printf>
            "</tbody><tfoot><tr><td colspan=\"3\"><hr></td></tr></tfoot>"
            "</table><address>Mongoose v.%s</address></body></html>\n",
            MG_VERSION);
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 802921e:	68fb      	ldr	r3, [r7, #12]
 8029220:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8029222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8029226:	1ad3      	subs	r3, r2, r3
 8029228:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 802922c:	4a1d      	ldr	r2, [pc, #116]	@ (80292a4 <listdir+0x180>)
 802922e:	210a      	movs	r1, #10
 8029230:	f008 f968 	bl	8031504 <mg_snprintf>
 8029234:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  if (n > sizeof(tmp)) n = 0;
 8029238:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 802923c:	2b0a      	cmp	r3, #10
 802923e:	d902      	bls.n	8029246 <listdir+0x122>
 8029240:	2300      	movs	r3, #0
 8029242:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 8029246:	68fb      	ldr	r3, [r7, #12]
 8029248:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 802924a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802924e:	3b0c      	subs	r3, #12
 8029250:	4413      	add	r3, r2
 8029252:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8029256:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 802925a:	4618      	mov	r0, r3
 802925c:	f00e f97c 	bl	8037558 <memcpy>
  c->is_resp = 0;                          // Mark response end
 8029260:	68fa      	ldr	r2, [r7, #12]
 8029262:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8029266:	f36f 13c7 	bfc	r3, #7, #1
 802926a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 802926e:	bf00      	nop
 8029270:	37d0      	adds	r7, #208	@ 0xd0
 8029272:	46bd      	mov	sp, r7
 8029274:	bd80      	pop	{r7, pc}
 8029276:	bf00      	nop
 8029278:	08042560 	.word	0x08042560
 802927c:	08042728 	.word	0x08042728
 8029280:	20000098 	.word	0x20000098
 8029284:	08042110 	.word	0x08042110
 8029288:	080428ec 	.word	0x080428ec
 802928c:	08042944 	.word	0x08042944
 8029290:	08042acc 	.word	0x08042acc
 8029294:	08041b9c 	.word	0x08041b9c
 8029298:	08028f29 	.word	0x08028f29
 802929c:	08042b1c 	.word	0x08042b1c
 80292a0:	08042b24 	.word	0x08042b24
 80292a4:	08042504 	.word	0x08042504

080292a8 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 80292a8:	b082      	sub	sp, #8
 80292aa:	b590      	push	{r4, r7, lr}
 80292ac:	b08f      	sub	sp, #60	@ 0x3c
 80292ae:	af02      	add	r7, sp, #8
 80292b0:	60f8      	str	r0, [r7, #12]
 80292b2:	60b9      	str	r1, [r7, #8]
 80292b4:	607a      	str	r2, [r7, #4]
 80292b6:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 80292b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80292ba:	461a      	mov	r2, r3
 80292bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80292be:	9300      	str	r3, [sp, #0]
 80292c0:	4613      	mov	r3, r2
 80292c2:	4a9c      	ldr	r2, [pc, #624]	@ (8029534 <uri_to_path2+0x28c>)
 80292c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80292c6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80292c8:	f008 f91c 	bl	8031504 <mg_snprintf>
 80292cc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 80292ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80292d0:	3302      	adds	r3, #2
 80292d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80292d4:	429a      	cmp	r2, r3
 80292d6:	d809      	bhi.n	80292ec <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 80292d8:	4b97      	ldr	r3, [pc, #604]	@ (8029538 <uri_to_path2+0x290>)
 80292da:	4a98      	ldr	r2, [pc, #608]	@ (802953c <uri_to_path2+0x294>)
 80292dc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80292e0:	68f8      	ldr	r0, [r7, #12]
 80292e2:	f7ff f94b 	bl	802857c <mg_http_reply>
    return -1;
 80292e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80292ea:	e143      	b.n	8029574 <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 80292ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80292ee:	3b01      	subs	r3, #1
 80292f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80292f2:	4413      	add	r3, r2
 80292f4:	2200      	movs	r2, #0
 80292f6:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 80292f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80292fa:	2b00      	cmp	r3, #0
 80292fc:	d012      	beq.n	8029324 <uri_to_path2+0x7c>
 80292fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029300:	3b01      	subs	r3, #1
 8029302:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8029304:	4413      	add	r3, r2
 8029306:	781b      	ldrb	r3, [r3, #0]
 8029308:	2b2f      	cmp	r3, #47	@ 0x2f
 802930a:	d00b      	beq.n	8029324 <uri_to_path2+0x7c>
 802930c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802930e:	1c5a      	adds	r2, r3, #1
 8029310:	627a      	str	r2, [r7, #36]	@ 0x24
 8029312:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8029314:	4413      	add	r3, r2
 8029316:	222f      	movs	r2, #47	@ 0x2f
 8029318:	701a      	strb	r2, [r3, #0]
 802931a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802931c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802931e:	4413      	add	r3, r2
 8029320:	2200      	movs	r2, #0
 8029322:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 8029324:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8029326:	68bb      	ldr	r3, [r7, #8]
 8029328:	68db      	ldr	r3, [r3, #12]
 802932a:	429a      	cmp	r2, r3
 802932c:	d212      	bcs.n	8029354 <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 802932e:	68bb      	ldr	r3, [r7, #8]
 8029330:	689a      	ldr	r2, [r3, #8]
 8029332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8029334:	18d0      	adds	r0, r2, r3
 8029336:	68bb      	ldr	r3, [r7, #8]
 8029338:	68da      	ldr	r2, [r3, #12]
 802933a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802933c:	1ad1      	subs	r1, r2, r3
 802933e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8029340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029342:	18d4      	adds	r4, r2, r3
 8029344:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8029346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029348:	1ad3      	subs	r3, r2, r3
 802934a:	2200      	movs	r2, #0
 802934c:	9200      	str	r2, [sp, #0]
 802934e:	4622      	mov	r2, r4
 8029350:	f7fd fffb 	bl	802734a <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 8029354:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8029356:	3b01      	subs	r3, #1
 8029358:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802935a:	4413      	add	r3, r2
 802935c:	2200      	movs	r2, #0
 802935e:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8029360:	f107 0314 	add.w	r3, r7, #20
 8029364:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8029366:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8029368:	4618      	mov	r0, r3
 802936a:	f008 fdd0 	bl	8031f0e <mg_str_n>
 802936e:	f107 0314 	add.w	r3, r7, #20
 8029372:	e893 0003 	ldmia.w	r3, {r0, r1}
 8029376:	f009 fda1 	bl	8032ebc <mg_path_is_sane>
 802937a:	4603      	mov	r3, r0
 802937c:	f083 0301 	eor.w	r3, r3, #1
 8029380:	b2db      	uxtb	r3, r3
 8029382:	2b00      	cmp	r3, #0
 8029384:	d009      	beq.n	802939a <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 8029386:	4b6e      	ldr	r3, [pc, #440]	@ (8029540 <uri_to_path2+0x298>)
 8029388:	4a6c      	ldr	r2, [pc, #432]	@ (802953c <uri_to_path2+0x294>)
 802938a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802938e:	68f8      	ldr	r0, [r7, #12]
 8029390:	f7ff f8f4 	bl	802857c <mg_http_reply>
    return -1;
 8029394:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029398:	e0ec      	b.n	8029574 <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 802939a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 802939c:	f7e6 ff80 	bl	80102a0 <strlen>
 80293a0:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 80293a2:	e007      	b.n	80293b4 <uri_to_path2+0x10c>
 80293a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80293a6:	3b01      	subs	r3, #1
 80293a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80293aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80293ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80293ae:	4413      	add	r3, r2
 80293b0:	2200      	movs	r2, #0
 80293b2:	701a      	strb	r2, [r3, #0]
 80293b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80293b6:	2b01      	cmp	r3, #1
 80293b8:	d906      	bls.n	80293c8 <uri_to_path2+0x120>
 80293ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80293bc:	3b01      	subs	r3, #1
 80293be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80293c0:	4413      	add	r3, r2
 80293c2:	781b      	ldrb	r3, [r3, #0]
 80293c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80293c6:	d0ed      	beq.n	80293a4 <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 80293c8:	f107 031c 	add.w	r3, r7, #28
 80293cc:	495d      	ldr	r1, [pc, #372]	@ (8029544 <uri_to_path2+0x29c>)
 80293ce:	4618      	mov	r0, r3
 80293d0:	f008 fd80 	bl	8031ed4 <mg_str_s>
 80293d4:	68b9      	ldr	r1, [r7, #8]
 80293d6:	f107 031c 	add.w	r3, r7, #28
 80293da:	cb0c      	ldmia	r3, {r2, r3}
 80293dc:	3108      	adds	r1, #8
 80293de:	c903      	ldmia	r1, {r0, r1}
 80293e0:	f008 fdc2 	bl	8031f68 <mg_strcmp>
 80293e4:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 80293e6:	2b00      	cmp	r3, #0
 80293e8:	d007      	beq.n	80293fa <uri_to_path2+0x152>
 80293ea:	687b      	ldr	r3, [r7, #4]
 80293ec:	681b      	ldr	r3, [r3, #0]
 80293ee:	2200      	movs	r2, #0
 80293f0:	2100      	movs	r1, #0
 80293f2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80293f4:	4798      	blx	r3
 80293f6:	4603      	mov	r3, r0
 80293f8:	e000      	b.n	80293fc <uri_to_path2+0x154>
 80293fa:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 80293fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 80293fe:	4b52      	ldr	r3, [pc, #328]	@ (8029548 <uri_to_path2+0x2a0>)
 8029400:	681b      	ldr	r3, [r3, #0]
 8029402:	2b03      	cmp	r3, #3
 8029404:	dd16      	ble.n	8029434 <uri_to_path2+0x18c>
 8029406:	4b51      	ldr	r3, [pc, #324]	@ (802954c <uri_to_path2+0x2a4>)
 8029408:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 802940c:	4950      	ldr	r1, [pc, #320]	@ (8029550 <uri_to_path2+0x2a8>)
 802940e:	2004      	movs	r0, #4
 8029410:	f002 f85c 	bl	802b4cc <mg_log_prefix>
 8029414:	68fb      	ldr	r3, [r7, #12]
 8029416:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8029418:	68bb      	ldr	r3, [r7, #8]
 802941a:	68db      	ldr	r3, [r3, #12]
 802941c:	4618      	mov	r0, r3
 802941e:	68bb      	ldr	r3, [r7, #8]
 8029420:	689a      	ldr	r2, [r3, #8]
 8029422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029424:	9301      	str	r3, [sp, #4]
 8029426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029428:	9300      	str	r3, [sp, #0]
 802942a:	4613      	mov	r3, r2
 802942c:	4602      	mov	r2, r0
 802942e:	4849      	ldr	r0, [pc, #292]	@ (8029554 <uri_to_path2+0x2ac>)
 8029430:	f002 f89c 	bl	802b56c <mg_log>
              flags));
  if (flags == 0) {
 8029434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029436:	2b00      	cmp	r3, #0
 8029438:	f000 809b 	beq.w	8029572 <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 802943c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802943e:	f003 0304 	and.w	r3, r3, #4
 8029442:	2b00      	cmp	r3, #0
 8029444:	d020      	beq.n	8029488 <uri_to_path2+0x1e0>
 8029446:	68bb      	ldr	r3, [r7, #8]
 8029448:	68db      	ldr	r3, [r3, #12]
 802944a:	2b00      	cmp	r3, #0
 802944c:	d01c      	beq.n	8029488 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 802944e:	68bb      	ldr	r3, [r7, #8]
 8029450:	689a      	ldr	r2, [r3, #8]
 8029452:	68bb      	ldr	r3, [r7, #8]
 8029454:	68db      	ldr	r3, [r3, #12]
 8029456:	3b01      	subs	r3, #1
 8029458:	4413      	add	r3, r2
 802945a:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 802945c:	2b2f      	cmp	r3, #47	@ 0x2f
 802945e:	d013      	beq.n	8029488 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 8029460:	68bb      	ldr	r3, [r7, #8]
 8029462:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8029464:	461a      	mov	r2, r3
 8029466:	68bb      	ldr	r3, [r7, #8]
 8029468:	689b      	ldr	r3, [r3, #8]
 802946a:	493b      	ldr	r1, [pc, #236]	@ (8029558 <uri_to_path2+0x2b0>)
 802946c:	68f8      	ldr	r0, [r7, #12]
 802946e:	f004 f975 	bl	802d75c <mg_printf>
    c->is_resp = 0;
 8029472:	68fa      	ldr	r2, [r7, #12]
 8029474:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8029478:	f36f 13c7 	bfc	r3, #7, #1
 802947c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    flags = -1;
 8029480:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029486:	e074      	b.n	8029572 <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 8029488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802948a:	f003 0304 	and.w	r3, r3, #4
 802948e:	2b00      	cmp	r3, #0
 8029490:	d06f      	beq.n	8029572 <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8029492:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8029494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029496:	18d0      	adds	r0, r2, r3
 8029498:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802949a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802949c:	1ad3      	subs	r3, r2, r3
 802949e:	4a2f      	ldr	r2, [pc, #188]	@ (802955c <uri_to_path2+0x2b4>)
 80294a0:	4619      	mov	r1, r3
 80294a2:	f008 f82f 	bl	8031504 <mg_snprintf>
 80294a6:	4603      	mov	r3, r0
 80294a8:	2b00      	cmp	r3, #0
 80294aa:	d009      	beq.n	80294c0 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80294ac:	687b      	ldr	r3, [r7, #4]
 80294ae:	681b      	ldr	r3, [r3, #0]
 80294b0:	2200      	movs	r2, #0
 80294b2:	2100      	movs	r1, #0
 80294b4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80294b6:	4798      	blx	r3
 80294b8:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80294ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80294bc:	2b00      	cmp	r3, #0
 80294be:	d116      	bne.n	80294ee <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80294c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80294c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80294c4:	18d0      	adds	r0, r2, r3
 80294c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80294c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80294ca:	1ad3      	subs	r3, r2, r3
 80294cc:	4a24      	ldr	r2, [pc, #144]	@ (8029560 <uri_to_path2+0x2b8>)
 80294ce:	4619      	mov	r1, r3
 80294d0:	f008 f818 	bl	8031504 <mg_snprintf>
 80294d4:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80294d6:	2b00      	cmp	r3, #0
 80294d8:	d00c      	beq.n	80294f4 <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 80294da:	687b      	ldr	r3, [r7, #4]
 80294dc:	681b      	ldr	r3, [r3, #0]
 80294de:	2200      	movs	r2, #0
 80294e0:	2100      	movs	r1, #0
 80294e2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80294e4:	4798      	blx	r3
 80294e6:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80294e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80294ea:	2b00      	cmp	r3, #0
 80294ec:	d002      	beq.n	80294f4 <uri_to_path2+0x24c>
      flags = tmp;
 80294ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80294f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80294f2:	e03e      	b.n	8029572 <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 80294f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80294f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80294f8:	18d0      	adds	r0, r2, r3
 80294fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80294fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80294fe:	1ad3      	subs	r3, r2, r3
 8029500:	4a18      	ldr	r2, [pc, #96]	@ (8029564 <uri_to_path2+0x2bc>)
 8029502:	4619      	mov	r1, r3
 8029504:	f007 fffe 	bl	8031504 <mg_snprintf>
 8029508:	4603      	mov	r3, r0
 802950a:	2b00      	cmp	r3, #0
 802950c:	d02c      	beq.n	8029568 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 802950e:	687b      	ldr	r3, [r7, #4]
 8029510:	681b      	ldr	r3, [r3, #0]
 8029512:	2200      	movs	r2, #0
 8029514:	2100      	movs	r1, #0
 8029516:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8029518:	4798      	blx	r3
 802951a:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 802951c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802951e:	2b00      	cmp	r3, #0
 8029520:	d022      	beq.n	8029568 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 8029522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029524:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8029526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029528:	330b      	adds	r3, #11
 802952a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802952c:	4413      	add	r3, r2
 802952e:	2200      	movs	r2, #0
 8029530:	701a      	strb	r2, [r3, #0]
 8029532:	e01e      	b.n	8029572 <uri_to_path2+0x2ca>
 8029534:	08041bb0 	.word	0x08041bb0
 8029538:	08042b98 	.word	0x08042b98
 802953c:	08042110 	.word	0x08042110
 8029540:	08042bac 	.word	0x08042bac
 8029544:	080424f0 	.word	0x080424f0
 8029548:	200002a8 	.word	0x200002a8
 802954c:	08044a60 	.word	0x08044a60
 8029550:	08041a30 	.word	0x08041a30
 8029554:	08042bbc 	.word	0x08042bbc
 8029558:	08042bd0 	.word	0x08042bd0
 802955c:	08042c0c 	.word	0x08042c0c
 8029560:	08042c18 	.word	0x08042c18
 8029564:	08042c28 	.word	0x08042c28
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8029568:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802956a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802956c:	4413      	add	r3, r2
 802956e:	2200      	movs	r2, #0
 8029570:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 8029572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8029574:	4618      	mov	r0, r3
 8029576:	3734      	adds	r7, #52	@ 0x34
 8029578:	46bd      	mov	sp, r7
 802957a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 802957e:	b002      	add	sp, #8
 8029580:	4770      	bx	lr
 8029582:	bf00      	nop

08029584 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 8029584:	b580      	push	{r7, lr}
 8029586:	b09c      	sub	sp, #112	@ 0x70
 8029588:	af06      	add	r7, sp, #24
 802958a:	6178      	str	r0, [r7, #20]
 802958c:	6139      	str	r1, [r7, #16]
 802958e:	60fa      	str	r2, [r7, #12]
 8029590:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8029592:	68fb      	ldr	r3, [r7, #12]
 8029594:	695b      	ldr	r3, [r3, #20]
 8029596:	2b00      	cmp	r3, #0
 8029598:	d002      	beq.n	80295a0 <uri_to_path+0x1c>
 802959a:	68fb      	ldr	r3, [r7, #12]
 802959c:	695b      	ldr	r3, [r3, #20]
 802959e:	e000      	b.n	80295a2 <uri_to_path+0x1e>
 80295a0:	4b5b      	ldr	r3, [pc, #364]	@ (8029710 <uri_to_path+0x18c>)
 80295a2:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 80295a4:	68fb      	ldr	r3, [r7, #12]
 80295a6:	681a      	ldr	r2, [r3, #0]
 80295a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80295ac:	4611      	mov	r1, r2
 80295ae:	4618      	mov	r0, r3
 80295b0:	f008 fc90 	bl	8031ed4 <mg_str_s>
 80295b4:	2300      	movs	r3, #0
 80295b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80295b8:	2300      	movs	r3, #0
 80295ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80295bc:	f107 031c 	add.w	r3, r7, #28
 80295c0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80295c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80295c8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 80295cc:	e078      	b.n	80296c0 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 80295ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80295d2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80295d6:	213d      	movs	r1, #61	@ 0x3d
 80295d8:	9100      	str	r1, [sp, #0]
 80295da:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80295de:	c903      	ldmia	r1, {r0, r1}
 80295e0:	f008 fe3f 	bl	8032262 <mg_span>
 80295e4:	4603      	mov	r3, r0
 80295e6:	f083 0301 	eor.w	r3, r3, #1
 80295ea:	b2db      	uxtb	r3, r3
 80295ec:	2b00      	cmp	r3, #0
 80295ee:	d014      	beq.n	802961a <uri_to_path+0x96>
 80295f0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80295f4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80295f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80295fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8029600:	463b      	mov	r3, r7
 8029602:	2200      	movs	r2, #0
 8029604:	2100      	movs	r1, #0
 8029606:	4618      	mov	r0, r3
 8029608:	f008 fc81 	bl	8031f0e <mg_str_n>
 802960c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8029610:	463a      	mov	r2, r7
 8029612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8029616:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 802961a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802961c:	2b00      	cmp	r3, #0
 802961e:	d123      	bne.n	8029668 <uri_to_path+0xe4>
 8029620:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8029624:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8029628:	e892 0003 	ldmia.w	r2, {r0, r1}
 802962c:	e883 0003 	stmia.w	r3, {r0, r1}
 8029630:	463b      	mov	r3, r7
 8029632:	4938      	ldr	r1, [pc, #224]	@ (8029714 <uri_to_path+0x190>)
 8029634:	4618      	mov	r0, r3
 8029636:	f008 fc4d 	bl	8031ed4 <mg_str_s>
 802963a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 802963e:	463a      	mov	r2, r7
 8029640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8029644:	e883 0003 	stmia.w	r3, {r0, r1}
 8029648:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802964c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8029650:	e892 0003 	ldmia.w	r2, {r0, r1}
 8029654:	e883 0003 	stmia.w	r3, {r0, r1}
 8029658:	f107 031c 	add.w	r3, r7, #28
 802965c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8029660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8029664:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8029668:	693b      	ldr	r3, [r7, #16]
 802966a:	68da      	ldr	r2, [r3, #12]
 802966c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802966e:	429a      	cmp	r2, r3
 8029670:	d323      	bcc.n	80296ba <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8029672:	693b      	ldr	r3, [r7, #16]
 8029674:	6899      	ldr	r1, [r3, #8]
 8029676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8029678:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 802967c:	4618      	mov	r0, r3
 802967e:	f008 fc46 	bl	8031f0e <mg_str_n>
 8029682:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8029686:	cb0c      	ldmia	r3, {r2, r3}
 8029688:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 802968c:	c903      	ldmia	r1, {r0, r1}
 802968e:	f008 fc6b 	bl	8031f68 <mg_strcmp>
 8029692:	4603      	mov	r3, r0
 8029694:	2b00      	cmp	r3, #0
 8029696:	d112      	bne.n	80296be <uri_to_path+0x13a>
    u = k, p = v;
 8029698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802969c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80296a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80296a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80296a8:	f107 031c 	add.w	r3, r7, #28
 80296ac:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80296b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80296b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80296b8:	e002      	b.n	80296c0 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 80296ba:	bf00      	nop
 80296bc:	e000      	b.n	80296c0 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 80296be:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 80296c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80296c4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80296c8:	212c      	movs	r1, #44	@ 0x2c
 80296ca:	9100      	str	r1, [sp, #0]
 80296cc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80296d0:	c903      	ldmia	r1, {r0, r1}
 80296d2:	f008 fdc6 	bl	8032262 <mg_span>
 80296d6:	4603      	mov	r3, r0
 80296d8:	2b00      	cmp	r3, #0
 80296da:	f47f af78 	bne.w	80295ce <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 80296de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80296e0:	9304      	str	r3, [sp, #16]
 80296e2:	68bb      	ldr	r3, [r7, #8]
 80296e4:	9303      	str	r3, [sp, #12]
 80296e6:	aa01      	add	r2, sp, #4
 80296e8:	f107 031c 	add.w	r3, r7, #28
 80296ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80296f0:	e882 0003 	stmia.w	r2, {r0, r1}
 80296f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80296f6:	9300      	str	r3, [sp, #0]
 80296f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80296fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80296fc:	6939      	ldr	r1, [r7, #16]
 80296fe:	6978      	ldr	r0, [r7, #20]
 8029700:	f7ff fdd2 	bl	80292a8 <uri_to_path2>
 8029704:	4603      	mov	r3, r0
}
 8029706:	4618      	mov	r0, r3
 8029708:	3758      	adds	r7, #88	@ 0x58
 802970a:	46bd      	mov	sp, r7
 802970c:	bd80      	pop	{r7, pc}
 802970e:	bf00      	nop
 8029710:	20000098 	.word	0x20000098
 8029714:	080424f0 	.word	0x080424f0

08029718 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8029718:	b580      	push	{r7, lr}
 802971a:	b0ac      	sub	sp, #176	@ 0xb0
 802971c:	af02      	add	r7, sp, #8
 802971e:	60f8      	str	r0, [r7, #12]
 8029720:	60b9      	str	r1, [r7, #8]
 8029722:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8029724:	687b      	ldr	r3, [r7, #4]
 8029726:	685b      	ldr	r3, [r3, #4]
 8029728:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 802972c:	f107 0310 	add.w	r3, r7, #16
 8029730:	2280      	movs	r2, #128	@ 0x80
 8029732:	9200      	str	r2, [sp, #0]
 8029734:	687a      	ldr	r2, [r7, #4]
 8029736:	68b9      	ldr	r1, [r7, #8]
 8029738:	68f8      	ldr	r0, [r7, #12]
 802973a:	f7ff ff23 	bl	8029584 <uri_to_path>
 802973e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  if (flags < 0) {
 8029742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8029746:	2b00      	cmp	r3, #0
 8029748:	db41      	blt.n	80297ce <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 802974a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802974e:	f003 0304 	and.w	r3, r3, #4
 8029752:	2b00      	cmp	r3, #0
 8029754:	d007      	beq.n	8029766 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
 8029756:	f107 0310 	add.w	r3, r7, #16
 802975a:	687a      	ldr	r2, [r7, #4]
 802975c:	68b9      	ldr	r1, [r7, #8]
 802975e:	68f8      	ldr	r0, [r7, #12]
 8029760:	f7ff fce0 	bl	8029124 <listdir>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 8029764:	e033      	b.n	80297ce <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8029766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802976a:	2b00      	cmp	r3, #0
 802976c:	d028      	beq.n	80297c0 <mg_http_serve_dir+0xa8>
 802976e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8029772:	2b00      	cmp	r3, #0
 8029774:	d024      	beq.n	80297c0 <mg_http_serve_dir+0xa8>
 8029776:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 802977a:	f107 0210 	add.w	r2, r7, #16
 802977e:	4611      	mov	r1, r2
 8029780:	4618      	mov	r0, r3
 8029782:	f008 fba7 	bl	8031ed4 <mg_str_s>
 8029786:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 802978a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802978e:	4618      	mov	r0, r3
 8029790:	f008 fba0 	bl	8031ed4 <mg_str_s>
 8029794:	2300      	movs	r3, #0
 8029796:	9300      	str	r3, [sp, #0]
 8029798:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 802979c:	cb0c      	ldmia	r3, {r2, r3}
 802979e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80297a2:	c903      	ldmia	r1, {r0, r1}
 80297a4:	f008 fc69 	bl	803207a <mg_match>
 80297a8:	4603      	mov	r3, r0
 80297aa:	2b00      	cmp	r3, #0
 80297ac:	d008      	beq.n	80297c0 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 80297ae:	687b      	ldr	r3, [r7, #4]
 80297b0:	681b      	ldr	r3, [r3, #0]
 80297b2:	f107 0210 	add.w	r2, r7, #16
 80297b6:	4619      	mov	r1, r3
 80297b8:	68f8      	ldr	r0, [r7, #12]
 80297ba:	f008 fb77 	bl	8031eac <mg_http_serve_ssi>
}
 80297be:	e006      	b.n	80297ce <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 80297c0:	f107 0210 	add.w	r2, r7, #16
 80297c4:	687b      	ldr	r3, [r7, #4]
 80297c6:	68b9      	ldr	r1, [r7, #8]
 80297c8:	68f8      	ldr	r0, [r7, #12]
 80297ca:	f7ff f8cb 	bl	8028964 <mg_http_serve_file>
}
 80297ce:	bf00      	nop
 80297d0:	37a8      	adds	r7, #168	@ 0xa8
 80297d2:	46bd      	mov	sp, r7
 80297d4:	bd80      	pop	{r7, pc}

080297d6 <mg_is_url_safe>:

static bool mg_is_url_safe(int c) {
 80297d6:	b480      	push	{r7}
 80297d8:	b083      	sub	sp, #12
 80297da:	af00      	add	r7, sp, #0
 80297dc:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 80297de:	687b      	ldr	r3, [r7, #4]
 80297e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80297e2:	dd02      	ble.n	80297ea <mg_is_url_safe+0x14>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 80297e4:	687b      	ldr	r3, [r7, #4]
 80297e6:	2b39      	cmp	r3, #57	@ 0x39
 80297e8:	dd17      	ble.n	802981a <mg_is_url_safe+0x44>
 80297ea:	687b      	ldr	r3, [r7, #4]
 80297ec:	2b60      	cmp	r3, #96	@ 0x60
 80297ee:	dd02      	ble.n	80297f6 <mg_is_url_safe+0x20>
 80297f0:	687b      	ldr	r3, [r7, #4]
 80297f2:	2b7a      	cmp	r3, #122	@ 0x7a
 80297f4:	dd11      	ble.n	802981a <mg_is_url_safe+0x44>
 80297f6:	687b      	ldr	r3, [r7, #4]
 80297f8:	2b40      	cmp	r3, #64	@ 0x40
 80297fa:	dd02      	ble.n	8029802 <mg_is_url_safe+0x2c>
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 80297fc:	687b      	ldr	r3, [r7, #4]
 80297fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8029800:	dd0b      	ble.n	802981a <mg_is_url_safe+0x44>
 8029802:	687b      	ldr	r3, [r7, #4]
 8029804:	2b2e      	cmp	r3, #46	@ 0x2e
 8029806:	d008      	beq.n	802981a <mg_is_url_safe+0x44>
 8029808:	687b      	ldr	r3, [r7, #4]
 802980a:	2b5f      	cmp	r3, #95	@ 0x5f
 802980c:	d005      	beq.n	802981a <mg_is_url_safe+0x44>
 802980e:	687b      	ldr	r3, [r7, #4]
 8029810:	2b2d      	cmp	r3, #45	@ 0x2d
 8029812:	d002      	beq.n	802981a <mg_is_url_safe+0x44>
 8029814:	687b      	ldr	r3, [r7, #4]
 8029816:	2b7e      	cmp	r3, #126	@ 0x7e
 8029818:	d101      	bne.n	802981e <mg_is_url_safe+0x48>
 802981a:	2301      	movs	r3, #1
 802981c:	e000      	b.n	8029820 <mg_is_url_safe+0x4a>
 802981e:	2300      	movs	r3, #0
 8029820:	f003 0301 	and.w	r3, r3, #1
 8029824:	b2db      	uxtb	r3, r3
}
 8029826:	4618      	mov	r0, r3
 8029828:	370c      	adds	r7, #12
 802982a:	46bd      	mov	sp, r7
 802982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029830:	4770      	bx	lr
	...

08029834 <mg_url_encode>:

size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 8029834:	b580      	push	{r7, lr}
 8029836:	b08a      	sub	sp, #40	@ 0x28
 8029838:	af02      	add	r7, sp, #8
 802983a:	60f8      	str	r0, [r7, #12]
 802983c:	60b9      	str	r1, [r7, #8]
 802983e:	607a      	str	r2, [r7, #4]
 8029840:	603b      	str	r3, [r7, #0]
  size_t i, n = 0;
 8029842:	2300      	movs	r3, #0
 8029844:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 8029846:	2300      	movs	r3, #0
 8029848:	61fb      	str	r3, [r7, #28]
 802984a:	e030      	b.n	80298ae <mg_url_encode+0x7a>
    int c = *(unsigned char *) &s[i];
 802984c:	68fa      	ldr	r2, [r7, #12]
 802984e:	69fb      	ldr	r3, [r7, #28]
 8029850:	4413      	add	r3, r2
 8029852:	781b      	ldrb	r3, [r3, #0]
 8029854:	617b      	str	r3, [r7, #20]
    if (n + 4 >= len) return 0;
 8029856:	69bb      	ldr	r3, [r7, #24]
 8029858:	3304      	adds	r3, #4
 802985a:	683a      	ldr	r2, [r7, #0]
 802985c:	429a      	cmp	r2, r3
 802985e:	d801      	bhi.n	8029864 <mg_url_encode+0x30>
 8029860:	2300      	movs	r3, #0
 8029862:	e03f      	b.n	80298e4 <mg_url_encode+0xb0>
    if (mg_is_url_safe(c)) {
 8029864:	6978      	ldr	r0, [r7, #20]
 8029866:	f7ff ffb6 	bl	80297d6 <mg_is_url_safe>
 802986a:	4603      	mov	r3, r0
 802986c:	2b00      	cmp	r3, #0
 802986e:	d00a      	beq.n	8029886 <mg_url_encode+0x52>
      buf[n++] = s[i];
 8029870:	68fa      	ldr	r2, [r7, #12]
 8029872:	69fb      	ldr	r3, [r7, #28]
 8029874:	441a      	add	r2, r3
 8029876:	69bb      	ldr	r3, [r7, #24]
 8029878:	1c59      	adds	r1, r3, #1
 802987a:	61b9      	str	r1, [r7, #24]
 802987c:	6879      	ldr	r1, [r7, #4]
 802987e:	440b      	add	r3, r1
 8029880:	7812      	ldrb	r2, [r2, #0]
 8029882:	701a      	strb	r2, [r3, #0]
 8029884:	e010      	b.n	80298a8 <mg_url_encode+0x74>
    } else {
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 8029886:	687a      	ldr	r2, [r7, #4]
 8029888:	69bb      	ldr	r3, [r7, #24]
 802988a:	18d0      	adds	r0, r2, r3
 802988c:	68fa      	ldr	r2, [r7, #12]
 802988e:	69fb      	ldr	r3, [r7, #28]
 8029890:	4413      	add	r3, r2
 8029892:	9301      	str	r3, [sp, #4]
 8029894:	2301      	movs	r3, #1
 8029896:	9300      	str	r3, [sp, #0]
 8029898:	4b14      	ldr	r3, [pc, #80]	@ (80298ec <mg_url_encode+0xb8>)
 802989a:	4a15      	ldr	r2, [pc, #84]	@ (80298f0 <mg_url_encode+0xbc>)
 802989c:	2104      	movs	r1, #4
 802989e:	f007 fe31 	bl	8031504 <mg_snprintf>
      n += 3;
 80298a2:	69bb      	ldr	r3, [r7, #24]
 80298a4:	3303      	adds	r3, #3
 80298a6:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 80298a8:	69fb      	ldr	r3, [r7, #28]
 80298aa:	3301      	adds	r3, #1
 80298ac:	61fb      	str	r3, [r7, #28]
 80298ae:	69fa      	ldr	r2, [r7, #28]
 80298b0:	68bb      	ldr	r3, [r7, #8]
 80298b2:	429a      	cmp	r2, r3
 80298b4:	d3ca      	bcc.n	802984c <mg_url_encode+0x18>
    }
  }
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 80298b6:	683b      	ldr	r3, [r7, #0]
 80298b8:	2b00      	cmp	r3, #0
 80298ba:	d009      	beq.n	80298d0 <mg_url_encode+0x9c>
 80298bc:	683b      	ldr	r3, [r7, #0]
 80298be:	3b01      	subs	r3, #1
 80298c0:	69ba      	ldr	r2, [r7, #24]
 80298c2:	429a      	cmp	r2, r3
 80298c4:	d204      	bcs.n	80298d0 <mg_url_encode+0x9c>
 80298c6:	687a      	ldr	r2, [r7, #4]
 80298c8:	69bb      	ldr	r3, [r7, #24]
 80298ca:	4413      	add	r3, r2
 80298cc:	2200      	movs	r2, #0
 80298ce:	701a      	strb	r2, [r3, #0]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 80298d0:	683b      	ldr	r3, [r7, #0]
 80298d2:	2b00      	cmp	r3, #0
 80298d4:	d005      	beq.n	80298e2 <mg_url_encode+0xae>
 80298d6:	683b      	ldr	r3, [r7, #0]
 80298d8:	3b01      	subs	r3, #1
 80298da:	687a      	ldr	r2, [r7, #4]
 80298dc:	4413      	add	r3, r2
 80298de:	2200      	movs	r2, #0
 80298e0:	701a      	strb	r2, [r3, #0]
  return n;
 80298e2:	69bb      	ldr	r3, [r7, #24]
}
 80298e4:	4618      	mov	r0, r3
 80298e6:	3720      	adds	r7, #32
 80298e8:	46bd      	mov	sp, r7
 80298ea:	bd80      	pop	{r7, pc}
 80298ec:	080317ed 	.word	0x080317ed
 80298f0:	08042c38 	.word	0x08042c38

080298f4 <mg_http_upload>:
#define headers_tmp     "Content-Type: application/json\r\n" "Access-Control-Allow-Origin: *\r\n" "Access-Control-Allow-Headers: Content-Type\r\n"



long mg_http_upload(struct mg_connection *c, struct mg_http_message *hm,
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 80298f4:	b590      	push	{r4, r7, lr}
 80298f6:	b0d3      	sub	sp, #332	@ 0x14c
 80298f8:	af02      	add	r7, sp, #8
 80298fa:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 80298fe:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 8029902:	6020      	str	r0, [r4, #0]
 8029904:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8029908:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 802990c:	6001      	str	r1, [r0, #0]
 802990e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8029912:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8029916:	600a      	str	r2, [r1, #0]
 8029918:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 802991c:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8029920:	6013      	str	r3, [r2, #0]
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8029922:	2330      	movs	r3, #48	@ 0x30
 8029924:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8029928:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 802992c:	2200      	movs	r2, #0
 802992e:	601a      	str	r2, [r3, #0]
 8029930:	605a      	str	r2, [r3, #4]
 8029932:	609a      	str	r2, [r3, #8]
 8029934:	60da      	str	r2, [r3, #12]
  long res = 0, offset;
 8029936:	2300      	movs	r3, #0
 8029938:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 802993c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029940:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8029944:	681b      	ldr	r3, [r3, #0]
 8029946:	f103 0010 	add.w	r0, r3, #16
 802994a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 802994e:	2314      	movs	r3, #20
 8029950:	49b5      	ldr	r1, [pc, #724]	@ (8029c28 <mg_http_upload+0x334>)
 8029952:	f7fd fc85 	bl	8027260 <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8029956:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802995a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802995e:	681b      	ldr	r3, [r3, #0]
 8029960:	f103 0010 	add.w	r0, r3, #16
 8029964:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8029968:	2380      	movs	r3, #128	@ 0x80
 802996a:	49b0      	ldr	r1, [pc, #704]	@ (8029c2c <mg_http_upload+0x338>)
 802996c:	f7fd fc78 	bl	8027260 <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8029970:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8029974:	2200      	movs	r2, #0
 8029976:	2100      	movs	r1, #0
 8029978:	4618      	mov	r0, r3
 802997a:	f00b ff37 	bl	80357ec <strtol>
 802997e:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8029982:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029986:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 802998a:	f107 0018 	add.w	r0, r7, #24
 802998e:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8029992:	9201      	str	r2, [sp, #4]
 8029994:	222f      	movs	r2, #47	@ 0x2f
 8029996:	9200      	str	r2, [sp, #0]
 8029998:	681b      	ldr	r3, [r3, #0]
 802999a:	4aa5      	ldr	r2, [pc, #660]	@ (8029c30 <mg_http_upload+0x33c>)
 802999c:	2180      	movs	r1, #128	@ 0x80
 802999e:	f007 fdb1 	bl	8031504 <mg_snprintf>
  if (hm->body.len == 0) {
 80299a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80299a6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80299aa:	681b      	ldr	r3, [r3, #0]
 80299ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80299b0:	2b00      	cmp	r3, #0
 80299b2:	d10d      	bne.n	80299d0 <mg_http_upload+0xdc>
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 80299b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80299b8:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80299bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80299c0:	9300      	str	r3, [sp, #0]
 80299c2:	4b9c      	ldr	r3, [pc, #624]	@ (8029c34 <mg_http_upload+0x340>)
 80299c4:	4a9c      	ldr	r2, [pc, #624]	@ (8029c38 <mg_http_upload+0x344>)
 80299c6:	21c8      	movs	r1, #200	@ 0xc8
 80299c8:	6800      	ldr	r0, [r0, #0]
 80299ca:	f7fe fdd7 	bl	802857c <mg_http_reply>
 80299ce:	e123      	b.n	8029c18 <mg_http_upload+0x324>
  } else if (file[0] == '\0') {
 80299d0:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80299d4:	2b00      	cmp	r3, #0
 80299d6:	d10f      	bne.n	80299f8 <mg_http_upload+0x104>
    mg_http_reply(c, 400, "", "file required");
 80299d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80299dc:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80299e0:	4b96      	ldr	r3, [pc, #600]	@ (8029c3c <mg_http_upload+0x348>)
 80299e2:	4a97      	ldr	r2, [pc, #604]	@ (8029c40 <mg_http_upload+0x34c>)
 80299e4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80299e8:	6800      	ldr	r0, [r0, #0]
 80299ea:	f7fe fdc7 	bl	802857c <mg_http_reply>
    res = -1;
 80299ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80299f2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80299f6:	e10f      	b.n	8029c18 <mg_http_upload+0x324>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 80299f8:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80299fc:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8029a00:	4611      	mov	r1, r2
 8029a02:	4618      	mov	r0, r3
 8029a04:	f008 fa66 	bl	8031ed4 <mg_str_s>
 8029a08:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8029a0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8029a10:	f009 fa54 	bl	8032ebc <mg_path_is_sane>
 8029a14:	4603      	mov	r3, r0
 8029a16:	f083 0301 	eor.w	r3, r3, #1
 8029a1a:	b2db      	uxtb	r3, r3
 8029a1c:	2b00      	cmp	r3, #0
 8029a1e:	d012      	beq.n	8029a46 <mg_http_upload+0x152>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8029a20:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029a24:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8029a28:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8029a2c:	9300      	str	r3, [sp, #0]
 8029a2e:	4b85      	ldr	r3, [pc, #532]	@ (8029c44 <mg_http_upload+0x350>)
 8029a30:	4a83      	ldr	r2, [pc, #524]	@ (8029c40 <mg_http_upload+0x34c>)
 8029a32:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8029a36:	6800      	ldr	r0, [r0, #0]
 8029a38:	f7fe fda0 	bl	802857c <mg_http_reply>
    res = -2;
 8029a3c:	f06f 0301 	mvn.w	r3, #1
 8029a40:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8029a44:	e0e8      	b.n	8029c18 <mg_http_upload+0x324>
  } else if (offset < 0) {
 8029a46:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8029a4a:	2b00      	cmp	r3, #0
 8029a4c:	da0f      	bge.n	8029a6e <mg_http_upload+0x17a>
    mg_http_reply(c, 400, "", "offset required");
 8029a4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029a52:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8029a56:	4b7c      	ldr	r3, [pc, #496]	@ (8029c48 <mg_http_upload+0x354>)
 8029a58:	4a79      	ldr	r2, [pc, #484]	@ (8029c40 <mg_http_upload+0x34c>)
 8029a5a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8029a5e:	6800      	ldr	r0, [r0, #0]
 8029a60:	f7fe fd8c 	bl	802857c <mg_http_reply>
    res = -3;
 8029a64:	f06f 0302 	mvn.w	r3, #2
 8029a68:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8029a6c:	e0d4      	b.n	8029c18 <mg_http_upload+0x324>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8029a6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029a72:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8029a76:	681b      	ldr	r3, [r3, #0]
 8029a78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8029a7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8029a80:	4413      	add	r3, r2
 8029a82:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8029a86:	429a      	cmp	r2, r3
 8029a88:	d215      	bcs.n	8029ab6 <mg_http_upload+0x1c2>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8029a8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029a8e:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8029a92:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8029a96:	9301      	str	r3, [sp, #4]
 8029a98:	f107 0318 	add.w	r3, r7, #24
 8029a9c:	9300      	str	r3, [sp, #0]
 8029a9e:	4b6b      	ldr	r3, [pc, #428]	@ (8029c4c <mg_http_upload+0x358>)
 8029aa0:	4a67      	ldr	r2, [pc, #412]	@ (8029c40 <mg_http_upload+0x34c>)
 8029aa2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8029aa6:	6800      	ldr	r0, [r0, #0]
 8029aa8:	f7fe fd68 	bl	802857c <mg_http_reply>
                  (unsigned long) max_size);
    res = -4;
 8029aac:	f06f 0303 	mvn.w	r3, #3
 8029ab0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8029ab4:	e0b0      	b.n	8029c18 <mg_http_upload+0x324>
  } else {
    struct mg_fd *fd;
    size_t current_size = 0;
 8029ab6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029aba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8029abe:	2200      	movs	r2, #0
 8029ac0:	601a      	str	r2, [r3, #0]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8029ac2:	4b63      	ldr	r3, [pc, #396]	@ (8029c50 <mg_http_upload+0x35c>)
 8029ac4:	681b      	ldr	r3, [r3, #0]
 8029ac6:	2b02      	cmp	r3, #2
 8029ac8:	dd14      	ble.n	8029af4 <mg_http_upload+0x200>
 8029aca:	4b62      	ldr	r3, [pc, #392]	@ (8029c54 <mg_http_upload+0x360>)
 8029acc:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8029ad0:	4961      	ldr	r1, [pc, #388]	@ (8029c58 <mg_http_upload+0x364>)
 8029ad2:	2003      	movs	r0, #3
 8029ad4:	f001 fcfa 	bl	802b4cc <mg_log_prefix>
 8029ad8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029adc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8029ae0:	681b      	ldr	r3, [r3, #0]
 8029ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8029ae6:	f107 0118 	add.w	r1, r7, #24
 8029aea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8029aee:	485b      	ldr	r0, [pc, #364]	@ (8029c5c <mg_http_upload+0x368>)
 8029af0:	f001 fd3c 	bl	802b56c <mg_log>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8029af4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8029af8:	2b00      	cmp	r3, #0
 8029afa:	d109      	bne.n	8029b10 <mg_http_upload+0x21c>
 8029afc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029b00:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8029b04:	681b      	ldr	r3, [r3, #0]
 8029b06:	6a1b      	ldr	r3, [r3, #32]
 8029b08:	f107 0218 	add.w	r2, r7, #24
 8029b0c:	4610      	mov	r0, r2
 8029b0e:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8029b10:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029b14:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8029b18:	681b      	ldr	r3, [r3, #0]
 8029b1a:	681b      	ldr	r3, [r3, #0]
 8029b1c:	f107 0114 	add.w	r1, r7, #20
 8029b20:	f107 0018 	add.w	r0, r7, #24
 8029b24:	2200      	movs	r2, #0
 8029b26:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8029b28:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8029b2c:	2b00      	cmp	r3, #0
 8029b2e:	dd1b      	ble.n	8029b68 <mg_http_upload+0x274>
 8029b30:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029b34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8029b38:	681a      	ldr	r2, [r3, #0]
 8029b3a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8029b3e:	429a      	cmp	r2, r3
 8029b40:	d012      	beq.n	8029b68 <mg_http_upload+0x274>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 8029b42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029b46:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8029b4a:	f107 0318 	add.w	r3, r7, #24
 8029b4e:	9300      	str	r3, [sp, #0]
 8029b50:	4b43      	ldr	r3, [pc, #268]	@ (8029c60 <mg_http_upload+0x36c>)
 8029b52:	4a3b      	ldr	r2, [pc, #236]	@ (8029c40 <mg_http_upload+0x34c>)
 8029b54:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8029b58:	6800      	ldr	r0, [r0, #0]
 8029b5a:	f7fe fd0f 	bl	802857c <mg_http_reply>
      res = -5;
 8029b5e:	f06f 0304 	mvn.w	r3, #4
 8029b62:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8029b66:	e057      	b.n	8029c18 <mg_http_upload+0x324>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8029b68:	f107 0118 	add.w	r1, r7, #24
 8029b6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029b70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8029b74:	2202      	movs	r2, #2
 8029b76:	6818      	ldr	r0, [r3, #0]
 8029b78:	f7fd f998 	bl	8026eac <mg_fs_open>
 8029b7c:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
 8029b80:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8029b84:	2b00      	cmp	r3, #0
 8029b86:	d117      	bne.n	8029bb8 <mg_http_upload+0x2c4>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8029b88:	f00d fcae 	bl	80374e8 <__errno>
 8029b8c:	4603      	mov	r3, r0
 8029b8e:	681b      	ldr	r3, [r3, #0]
 8029b90:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8029b94:	f5a2 709a 	sub.w	r0, r2, #308	@ 0x134
 8029b98:	9301      	str	r3, [sp, #4]
 8029b9a:	f107 0318 	add.w	r3, r7, #24
 8029b9e:	9300      	str	r3, [sp, #0]
 8029ba0:	4b30      	ldr	r3, [pc, #192]	@ (8029c64 <mg_http_upload+0x370>)
 8029ba2:	4a27      	ldr	r2, [pc, #156]	@ (8029c40 <mg_http_upload+0x34c>)
 8029ba4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8029ba8:	6800      	ldr	r0, [r0, #0]
 8029baa:	f7fe fce7 	bl	802857c <mg_http_reply>
      res = -6;
 8029bae:	f06f 0305 	mvn.w	r3, #5
 8029bb2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8029bb6:	e02f      	b.n	8029c18 <mg_http_upload+0x324>
    } else {
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8029bb8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029bbc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8029bc0:	681b      	ldr	r3, [r3, #0]
 8029bc2:	695b      	ldr	r3, [r3, #20]
 8029bc4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8029bc8:	6810      	ldr	r0, [r2, #0]
 8029bca:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8029bce:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8029bd2:	6812      	ldr	r2, [r2, #0]
 8029bd4:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8029bd8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8029bdc:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8029be0:	6812      	ldr	r2, [r2, #0]
 8029be2:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8029be6:	4798      	blx	r3
 8029be8:	4603      	mov	r3, r0
 8029bea:	461a      	mov	r2, r3
 8029bec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8029bf0:	4413      	add	r3, r2
 8029bf2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      mg_fs_close(fd);
 8029bf6:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8029bfa:	f7fd f97e 	bl	8026efa <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 8029bfe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8029c02:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8029c06:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8029c0a:	9300      	str	r3, [sp, #0]
 8029c0c:	4b09      	ldr	r3, [pc, #36]	@ (8029c34 <mg_http_upload+0x340>)
 8029c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8029c38 <mg_http_upload+0x344>)
 8029c10:	21c8      	movs	r1, #200	@ 0xc8
 8029c12:	6800      	ldr	r0, [r0, #0]
 8029c14:	f7fe fcb2 	bl	802857c <mg_http_reply>
    }
  }
  return res;
 8029c18:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
}
 8029c1c:	4618      	mov	r0, r3
 8029c1e:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8029c22:	46bd      	mov	sp, r7
 8029c24:	bd90      	pop	{r4, r7, pc}
 8029c26:	bf00      	nop
 8029c28:	08042c78 	.word	0x08042c78
 8029c2c:	08042c80 	.word	0x08042c80
 8029c30:	080424c4 	.word	0x080424c4
 8029c34:	08042c88 	.word	0x08042c88
 8029c38:	08042c8c 	.word	0x08042c8c
 8029c3c:	08042cfc 	.word	0x08042cfc
 8029c40:	08042110 	.word	0x08042110
 8029c44:	08042d0c 	.word	0x08042d0c
 8029c48:	08042d20 	.word	0x08042d20
 8029c4c:	08042d30 	.word	0x08042d30
 8029c50:	200002a8 	.word	0x200002a8
 8029c54:	08044a70 	.word	0x08044a70
 8029c58:	08041a30 	.word	0x08041a30
 8029c5c:	08042d4c 	.word	0x08042d4c
 8029c60:	08042d64 	.word	0x08042d64
 8029c64:	08042d78 	.word	0x08042d78

08029c68 <mg_http_status>:

int mg_http_status(const struct mg_http_message *hm) {
 8029c68:	b580      	push	{r7, lr}
 8029c6a:	b082      	sub	sp, #8
 8029c6c:	af00      	add	r7, sp, #0
 8029c6e:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 8029c70:	687b      	ldr	r3, [r7, #4]
 8029c72:	689b      	ldr	r3, [r3, #8]
 8029c74:	4618      	mov	r0, r3
 8029c76:	f009 fcfd 	bl	8033674 <atoi>
 8029c7a:	4603      	mov	r3, r0
}
 8029c7c:	4618      	mov	r0, r3
 8029c7e:	3708      	adds	r7, #8
 8029c80:	46bd      	mov	sp, r7
 8029c82:	bd80      	pop	{r7, pc}

08029c84 <is_hex_digit>:

static bool is_hex_digit(int c) {
 8029c84:	b480      	push	{r7}
 8029c86:	b083      	sub	sp, #12
 8029c88:	af00      	add	r7, sp, #0
 8029c8a:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8029c8c:	687b      	ldr	r3, [r7, #4]
 8029c8e:	2b2f      	cmp	r3, #47	@ 0x2f
 8029c90:	dd02      	ble.n	8029c98 <is_hex_digit+0x14>
 8029c92:	687b      	ldr	r3, [r7, #4]
 8029c94:	2b39      	cmp	r3, #57	@ 0x39
 8029c96:	dd0b      	ble.n	8029cb0 <is_hex_digit+0x2c>
 8029c98:	687b      	ldr	r3, [r7, #4]
 8029c9a:	2b60      	cmp	r3, #96	@ 0x60
 8029c9c:	dd02      	ble.n	8029ca4 <is_hex_digit+0x20>
 8029c9e:	687b      	ldr	r3, [r7, #4]
 8029ca0:	2b66      	cmp	r3, #102	@ 0x66
 8029ca2:	dd05      	ble.n	8029cb0 <is_hex_digit+0x2c>
 8029ca4:	687b      	ldr	r3, [r7, #4]
 8029ca6:	2b40      	cmp	r3, #64	@ 0x40
 8029ca8:	dd04      	ble.n	8029cb4 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 8029caa:	687b      	ldr	r3, [r7, #4]
 8029cac:	2b46      	cmp	r3, #70	@ 0x46
 8029cae:	dc01      	bgt.n	8029cb4 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8029cb0:	2301      	movs	r3, #1
 8029cb2:	e000      	b.n	8029cb6 <is_hex_digit+0x32>
 8029cb4:	2300      	movs	r3, #0
 8029cb6:	f003 0301 	and.w	r3, r3, #1
 8029cba:	b2db      	uxtb	r3, r3
}
 8029cbc:	4618      	mov	r0, r3
 8029cbe:	370c      	adds	r7, #12
 8029cc0:	46bd      	mov	sp, r7
 8029cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cc6:	4770      	bx	lr

08029cc8 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8029cc8:	b580      	push	{r7, lr}
 8029cca:	b08a      	sub	sp, #40	@ 0x28
 8029ccc:	af02      	add	r7, sp, #8
 8029cce:	60f8      	str	r0, [r7, #12]
 8029cd0:	60b9      	str	r1, [r7, #8]
 8029cd2:	607a      	str	r2, [r7, #4]
 8029cd4:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 8029cd6:	2300      	movs	r3, #0
 8029cd8:	61fb      	str	r3, [r7, #28]
 8029cda:	2300      	movs	r3, #0
 8029cdc:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 8029cde:	68bb      	ldr	r3, [r7, #8]
 8029ce0:	2b02      	cmp	r3, #2
 8029ce2:	dc04      	bgt.n	8029cee <skip_chunk+0x26>
 8029ce4:	2300      	movs	r3, #0
 8029ce6:	e07a      	b.n	8029dde <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 8029ce8:	69fb      	ldr	r3, [r7, #28]
 8029cea:	3301      	adds	r3, #1
 8029cec:	61fb      	str	r3, [r7, #28]
 8029cee:	69fa      	ldr	r2, [r7, #28]
 8029cf0:	68bb      	ldr	r3, [r7, #8]
 8029cf2:	429a      	cmp	r2, r3
 8029cf4:	da09      	bge.n	8029d0a <skip_chunk+0x42>
 8029cf6:	69fb      	ldr	r3, [r7, #28]
 8029cf8:	68fa      	ldr	r2, [r7, #12]
 8029cfa:	4413      	add	r3, r2
 8029cfc:	781b      	ldrb	r3, [r3, #0]
 8029cfe:	4618      	mov	r0, r3
 8029d00:	f7ff ffc0 	bl	8029c84 <is_hex_digit>
 8029d04:	4603      	mov	r3, r0
 8029d06:	2b00      	cmp	r3, #0
 8029d08:	d1ee      	bne.n	8029ce8 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 8029d0a:	69fb      	ldr	r3, [r7, #28]
 8029d0c:	2b00      	cmp	r3, #0
 8029d0e:	d102      	bne.n	8029d16 <skip_chunk+0x4e>
 8029d10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029d14:	e063      	b.n	8029dde <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8029d16:	69fb      	ldr	r3, [r7, #28]
 8029d18:	2b08      	cmp	r3, #8
 8029d1a:	dd02      	ble.n	8029d22 <skip_chunk+0x5a>
 8029d1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029d20:	e05d      	b.n	8029dde <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8029d22:	69fa      	ldr	r2, [r7, #28]
 8029d24:	68bb      	ldr	r3, [r7, #8]
 8029d26:	429a      	cmp	r2, r3
 8029d28:	da0c      	bge.n	8029d44 <skip_chunk+0x7c>
 8029d2a:	69fb      	ldr	r3, [r7, #28]
 8029d2c:	68fa      	ldr	r2, [r7, #12]
 8029d2e:	4413      	add	r3, r2
 8029d30:	781b      	ldrb	r3, [r3, #0]
 8029d32:	2b0d      	cmp	r3, #13
 8029d34:	d106      	bne.n	8029d44 <skip_chunk+0x7c>
 8029d36:	69fb      	ldr	r3, [r7, #28]
 8029d38:	3301      	adds	r3, #1
 8029d3a:	68fa      	ldr	r2, [r7, #12]
 8029d3c:	4413      	add	r3, r2
 8029d3e:	781b      	ldrb	r3, [r3, #0]
 8029d40:	2b0a      	cmp	r3, #10
 8029d42:	d002      	beq.n	8029d4a <skip_chunk+0x82>
 8029d44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029d48:	e049      	b.n	8029dde <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8029d4a:	69fa      	ldr	r2, [r7, #28]
 8029d4c:	f107 0314 	add.w	r3, r7, #20
 8029d50:	68f9      	ldr	r1, [r7, #12]
 8029d52:	4618      	mov	r0, r3
 8029d54:	f008 f8db 	bl	8031f0e <mg_str_n>
 8029d58:	f107 0310 	add.w	r3, r7, #16
 8029d5c:	2204      	movs	r2, #4
 8029d5e:	9200      	str	r2, [sp, #0]
 8029d60:	2210      	movs	r2, #16
 8029d62:	f107 0114 	add.w	r1, r7, #20
 8029d66:	c903      	ldmia	r1, {r0, r1}
 8029d68:	f008 fad8 	bl	803231c <mg_str_to_num>
 8029d6c:	4603      	mov	r3, r0
 8029d6e:	f083 0301 	eor.w	r3, r3, #1
 8029d72:	b2db      	uxtb	r3, r3
 8029d74:	2b00      	cmp	r3, #0
 8029d76:	d002      	beq.n	8029d7e <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 8029d78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029d7c:	e02f      	b.n	8029dde <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8029d7e:	693b      	ldr	r3, [r7, #16]
 8029d80:	2b00      	cmp	r3, #0
 8029d82:	da02      	bge.n	8029d8a <skip_chunk+0xc2>
 8029d84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029d88:	e029      	b.n	8029dde <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8029d8a:	68ba      	ldr	r2, [r7, #8]
 8029d8c:	69fb      	ldr	r3, [r7, #28]
 8029d8e:	1ad3      	subs	r3, r2, r3
 8029d90:	1eda      	subs	r2, r3, #3
 8029d92:	693b      	ldr	r3, [r7, #16]
 8029d94:	429a      	cmp	r2, r3
 8029d96:	dc01      	bgt.n	8029d9c <skip_chunk+0xd4>
 8029d98:	2300      	movs	r3, #0
 8029d9a:	e020      	b.n	8029dde <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8029d9c:	693a      	ldr	r2, [r7, #16]
 8029d9e:	69fb      	ldr	r3, [r7, #28]
 8029da0:	4413      	add	r3, r2
 8029da2:	3302      	adds	r3, #2
 8029da4:	68fa      	ldr	r2, [r7, #12]
 8029da6:	4413      	add	r3, r2
 8029da8:	781b      	ldrb	r3, [r3, #0]
 8029daa:	2b0d      	cmp	r3, #13
 8029dac:	d108      	bne.n	8029dc0 <skip_chunk+0xf8>
 8029dae:	693a      	ldr	r2, [r7, #16]
 8029db0:	69fb      	ldr	r3, [r7, #28]
 8029db2:	4413      	add	r3, r2
 8029db4:	3303      	adds	r3, #3
 8029db6:	68fa      	ldr	r2, [r7, #12]
 8029db8:	4413      	add	r3, r2
 8029dba:	781b      	ldrb	r3, [r3, #0]
 8029dbc:	2b0a      	cmp	r3, #10
 8029dbe:	d002      	beq.n	8029dc6 <skip_chunk+0xfe>
 8029dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029dc4:	e00b      	b.n	8029dde <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 8029dc6:	69fb      	ldr	r3, [r7, #28]
 8029dc8:	1c9a      	adds	r2, r3, #2
 8029dca:	687b      	ldr	r3, [r7, #4]
 8029dcc:	601a      	str	r2, [r3, #0]
 8029dce:	693a      	ldr	r2, [r7, #16]
 8029dd0:	683b      	ldr	r3, [r7, #0]
 8029dd2:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 8029dd4:	69fb      	ldr	r3, [r7, #28]
 8029dd6:	1c9a      	adds	r2, r3, #2
 8029dd8:	693b      	ldr	r3, [r7, #16]
 8029dda:	4413      	add	r3, r2
 8029ddc:	3302      	adds	r3, #2
}
 8029dde:	4618      	mov	r0, r3
 8029de0:	3720      	adds	r7, #32
 8029de2:	46bd      	mov	sp, r7
 8029de4:	bd80      	pop	{r7, pc}
	...

08029de8 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8029de8:	b580      	push	{r7, lr}
 8029dea:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8029dee:	af00      	add	r7, sp, #0
 8029df0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029df4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029df8:	6018      	str	r0, [r3, #0]
 8029dfa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029dfe:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8029e02:	6019      	str	r1, [r3, #0]
 8029e04:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029e08:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8029e0c:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8029e0e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029e12:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8029e16:	681b      	ldr	r3, [r3, #0]
 8029e18:	2b07      	cmp	r3, #7
 8029e1a:	d031      	beq.n	8029e80 <http_cb+0x98>
 8029e1c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029e20:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8029e24:	681b      	ldr	r3, [r3, #0]
 8029e26:	2b09      	cmp	r3, #9
 8029e28:	d02a      	beq.n	8029e80 <http_cb+0x98>
 8029e2a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029e2e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8029e32:	681b      	ldr	r3, [r3, #0]
 8029e34:	2b02      	cmp	r3, #2
 8029e36:	f040 831a 	bne.w	802a46e <http_cb+0x686>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8029e3a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029e3e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029e42:	681b      	ldr	r3, [r3, #0]
 8029e44:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8029e48:	f003 0304 	and.w	r3, r3, #4
 8029e4c:	b2db      	uxtb	r3, r3
 8029e4e:	2b00      	cmp	r3, #0
 8029e50:	f000 830d 	beq.w	802a46e <http_cb+0x686>
 8029e54:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029e58:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029e5c:	681b      	ldr	r3, [r3, #0]
 8029e5e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8029e62:	f003 0310 	and.w	r3, r3, #16
 8029e66:	b2db      	uxtb	r3, r3
 8029e68:	2b00      	cmp	r3, #0
 8029e6a:	f040 8300 	bne.w	802a46e <http_cb+0x686>
       c->recv.len > 0)) {  // see #2796
 8029e6e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029e72:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029e76:	681b      	ldr	r3, [r3, #0]
 8029e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8029e7a:	2b00      	cmp	r3, #0
 8029e7c:	f000 82f7 	beq.w	802a46e <http_cb+0x686>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 8029e80:	2300      	movs	r3, #0
 8029e82:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8029e86:	e2c5      	b.n	802a414 <http_cb+0x62c>
      const char *buf = (char *) c->recv.buf + ofs;
 8029e88:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029e8c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029e90:	681b      	ldr	r3, [r3, #0]
 8029e92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8029e94:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8029e98:	4413      	add	r3, r2
 8029e9a:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 8029e9e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029ea2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029ea6:	681b      	ldr	r3, [r3, #0]
 8029ea8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8029eaa:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8029eae:	1ad3      	subs	r3, r2, r3
 8029eb0:	f107 0214 	add.w	r2, r7, #20
 8029eb4:	4619      	mov	r1, r3
 8029eb6:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 8029eba:	f7fd fcf5 	bl	80278a8 <mg_http_parse>
 8029ebe:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 8029ec2:	2300      	movs	r3, #0
 8029ec4:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      if (n < 0) {
 8029ec8:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8029ecc:	2b00      	cmp	r3, #0
 8029ece:	da38      	bge.n	8029f42 <http_cb+0x15a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8029ed0:	4bc8      	ldr	r3, [pc, #800]	@ (802a1f4 <http_cb+0x40c>)
 8029ed2:	681b      	ldr	r3, [r3, #0]
 8029ed4:	2b00      	cmp	r3, #0
 8029ed6:	dd10      	ble.n	8029efa <http_cb+0x112>
 8029ed8:	4bc7      	ldr	r3, [pc, #796]	@ (802a1f8 <http_cb+0x410>)
 8029eda:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8029ede:	49c7      	ldr	r1, [pc, #796]	@ (802a1fc <http_cb+0x414>)
 8029ee0:	2001      	movs	r0, #1
 8029ee2:	f001 faf3 	bl	802b4cc <mg_log_prefix>
 8029ee6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029eea:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029eee:	681b      	ldr	r3, [r3, #0]
 8029ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8029ef2:	4619      	mov	r1, r3
 8029ef4:	48c2      	ldr	r0, [pc, #776]	@ (802a200 <http_cb+0x418>)
 8029ef6:	f001 fb39 	bl	802b56c <mg_log>
        c->is_draining = 1;
 8029efa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029efe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029f02:	681a      	ldr	r2, [r3, #0]
 8029f04:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8029f08:	f043 0310 	orr.w	r3, r3, #16
 8029f0c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8029f10:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029f14:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029f18:	681b      	ldr	r3, [r3, #0]
 8029f1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8029f1c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8029f20:	1ad3      	subs	r3, r2, r3
 8029f22:	2b10      	cmp	r3, #16
 8029f24:	bf28      	it	cs
 8029f26:	2310      	movcs	r3, #16
 8029f28:	4619      	mov	r1, r3
 8029f2a:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 8029f2e:	f001 fb53 	bl	802b5d8 <mg_hexdump>
        c->recv.len = 0;
 8029f32:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029f36:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029f3a:	681b      	ldr	r3, [r3, #0]
 8029f3c:	2200      	movs	r2, #0
 8029f3e:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 8029f40:	e295      	b.n	802a46e <http_cb+0x686>
      }
      if (n == 0) break;                 // Request is not buffered yet
 8029f42:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8029f46:	2b00      	cmp	r3, #0
 8029f48:	f000 827c 	beq.w	802a444 <http_cb+0x65c>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8029f4c:	f107 0214 	add.w	r2, r7, #20
 8029f50:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029f54:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029f58:	210a      	movs	r1, #10
 8029f5a:	6818      	ldr	r0, [r3, #0]
 8029f5c:	f7fb fed0 	bl	8025d00 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 8029f60:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029f64:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8029f68:	681b      	ldr	r3, [r3, #0]
 8029f6a:	2b09      	cmp	r3, #9
 8029f6c:	d128      	bne.n	8029fc0 <http_cb+0x1d8>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8029f6e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029f72:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8029f76:	681b      	ldr	r3, [r3, #0]
 8029f78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8029f7a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8029f7e:	1ad2      	subs	r2, r2, r3
 8029f80:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029f84:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029f88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8029f8c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029f90:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029f94:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8029f98:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8029f9c:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8029fa0:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8029fa4:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8029fa8:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8029fac:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 8029fb0:	1a8a      	subs	r2, r1, r2
 8029fb2:	1a9a      	subs	r2, r3, r2
 8029fb4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8029fb8:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8029fbc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8029fc0:	f107 0314 	add.w	r3, r7, #20
 8029fc4:	498f      	ldr	r1, [pc, #572]	@ (802a204 <http_cb+0x41c>)
 8029fc6:	4618      	mov	r0, r3
 8029fc8:	f7fd fab2 	bl	8027530 <mg_http_get_header>
 8029fcc:	f8c7 0270 	str.w	r0, [r7, #624]	@ 0x270
 8029fd0:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8029fd4:	2b00      	cmp	r3, #0
 8029fd6:	d01d      	beq.n	802a014 <http_cb+0x22c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8029fd8:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8029fdc:	498a      	ldr	r1, [pc, #552]	@ (802a208 <http_cb+0x420>)
 8029fde:	4618      	mov	r0, r3
 8029fe0:	f007 ff78 	bl	8031ed4 <mg_str_s>
 8029fe4:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 8029fe8:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8029fec:	cb0c      	ldmia	r3, {r2, r3}
 8029fee:	c903      	ldmia	r1, {r0, r1}
 8029ff0:	f007 fffc 	bl	8031fec <mg_strcasecmp>
 8029ff4:	4603      	mov	r3, r0
 8029ff6:	2b00      	cmp	r3, #0
 8029ff8:	d103      	bne.n	802a002 <http_cb+0x21a>
          is_chunked = true;
 8029ffa:	2301      	movs	r3, #1
 8029ffc:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 802a000:	e09f      	b.n	802a142 <http_cb+0x35a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 802a002:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a006:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a00a:	4980      	ldr	r1, [pc, #512]	@ (802a20c <http_cb+0x424>)
 802a00c:	6818      	ldr	r0, [r3, #0]
 802a00e:	f7fb fe97 	bl	8025d40 <mg_error>
          return;
 802a012:	e22c      	b.n	802a46e <http_cb+0x686>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 802a014:	f107 0314 	add.w	r3, r7, #20
 802a018:	497d      	ldr	r1, [pc, #500]	@ (802a210 <http_cb+0x428>)
 802a01a:	4618      	mov	r0, r3
 802a01c:	f7fd fa88 	bl	8027530 <mg_http_get_header>
 802a020:	4603      	mov	r3, r0
 802a022:	2b00      	cmp	r3, #0
 802a024:	f040 808d 	bne.w	802a142 <http_cb+0x35a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 802a028:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a02c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 802a030:	681b      	ldr	r3, [r3, #0]
 802a032:	2205      	movs	r2, #5
 802a034:	4977      	ldr	r1, [pc, #476]	@ (802a214 <http_cb+0x42c>)
 802a036:	4618      	mov	r0, r3
 802a038:	f7fc ffec 	bl	8027014 <mg_ncasecmp>
 802a03c:	4603      	mov	r3, r0
 802a03e:	2b00      	cmp	r3, #0
 802a040:	bf0c      	ite	eq
 802a042:	2301      	moveq	r3, #1
 802a044:	2300      	movne	r3, #0
 802a046:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
        bool require_content_len = false;
 802a04a:	2300      	movs	r3, #0
 802a04c:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 802a050:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 802a054:	f083 0301 	eor.w	r3, r3, #1
 802a058:	b2db      	uxtb	r3, r3
 802a05a:	2b00      	cmp	r3, #0
 802a05c:	d030      	beq.n	802a0c0 <http_cb+0x2d8>
 802a05e:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 802a062:	496d      	ldr	r1, [pc, #436]	@ (802a218 <http_cb+0x430>)
 802a064:	4618      	mov	r0, r3
 802a066:	f007 ff35 	bl	8031ed4 <mg_str_s>
 802a06a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a06e:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 802a072:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 802a076:	cb0c      	ldmia	r3, {r2, r3}
 802a078:	c903      	ldmia	r1, {r0, r1}
 802a07a:	f007 ffb7 	bl	8031fec <mg_strcasecmp>
 802a07e:	4603      	mov	r3, r0
 802a080:	2b00      	cmp	r3, #0
 802a082:	d012      	beq.n	802a0aa <http_cb+0x2c2>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 802a084:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 802a088:	4964      	ldr	r1, [pc, #400]	@ (802a21c <http_cb+0x434>)
 802a08a:	4618      	mov	r0, r3
 802a08c:	f007 ff22 	bl	8031ed4 <mg_str_s>
 802a090:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a094:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 802a098:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 802a09c:	cb0c      	ldmia	r3, {r2, r3}
 802a09e:	c903      	ldmia	r1, {r0, r1}
 802a0a0:	f007 ffa4 	bl	8031fec <mg_strcasecmp>
 802a0a4:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 802a0a6:	2b00      	cmp	r3, #0
 802a0a8:	d10a      	bne.n	802a0c0 <http_cb+0x2d8>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 802a0aa:	2301      	movs	r3, #1
 802a0ac:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 802a0b0:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 802a0b4:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 802a0b8:	4413      	add	r3, r2
 802a0ba:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 802a0be:	e022      	b.n	802a106 <http_cb+0x31e>
        } else if (is_response) {
 802a0c0:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 802a0c4:	2b00      	cmp	r3, #0
 802a0c6:	d01e      	beq.n	802a106 <http_cb+0x31e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 802a0c8:	f107 0314 	add.w	r3, r7, #20
 802a0cc:	4618      	mov	r0, r3
 802a0ce:	f7ff fdcb 	bl	8029c68 <mg_http_status>
 802a0d2:	f8c7 0268 	str.w	r0, [r7, #616]	@ 0x268
          require_content_len = status >= 200 && status != 204 && status != 304;
 802a0d6:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 802a0da:	2bc7      	cmp	r3, #199	@ 0xc7
 802a0dc:	dd0a      	ble.n	802a0f4 <http_cb+0x30c>
 802a0de:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 802a0e2:	2bcc      	cmp	r3, #204	@ 0xcc
 802a0e4:	d006      	beq.n	802a0f4 <http_cb+0x30c>
 802a0e6:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 802a0ea:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 802a0ee:	d001      	beq.n	802a0f4 <http_cb+0x30c>
 802a0f0:	2301      	movs	r3, #1
 802a0f2:	e000      	b.n	802a0f6 <http_cb+0x30e>
 802a0f4:	2300      	movs	r3, #0
 802a0f6:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 802a0fa:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 802a0fe:	f003 0301 	and.w	r3, r3, #1
 802a102:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 802a106:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 802a10a:	2b00      	cmp	r3, #0
 802a10c:	d019      	beq.n	802a142 <http_cb+0x35a>
          mg_http_reply(c, 411, "", "");
 802a10e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a112:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 802a116:	4b42      	ldr	r3, [pc, #264]	@ (802a220 <http_cb+0x438>)
 802a118:	4a41      	ldr	r2, [pc, #260]	@ (802a220 <http_cb+0x438>)
 802a11a:	f240 119b 	movw	r1, #411	@ 0x19b
 802a11e:	6800      	ldr	r0, [r0, #0]
 802a120:	f7fe fa2c 	bl	802857c <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 802a124:	4b33      	ldr	r3, [pc, #204]	@ (802a1f4 <http_cb+0x40c>)
 802a126:	681b      	ldr	r3, [r3, #0]
 802a128:	2b00      	cmp	r3, #0
 802a12a:	dd0a      	ble.n	802a142 <http_cb+0x35a>
 802a12c:	4b32      	ldr	r3, [pc, #200]	@ (802a1f8 <http_cb+0x410>)
 802a12e:	f640 42ca 	movw	r2, #3274	@ 0xcca
 802a132:	4932      	ldr	r1, [pc, #200]	@ (802a1fc <http_cb+0x414>)
 802a134:	2001      	movs	r0, #1
 802a136:	f001 f9c9 	bl	802b4cc <mg_log_prefix>
 802a13a:	493a      	ldr	r1, [pc, #232]	@ (802a224 <http_cb+0x43c>)
 802a13c:	483a      	ldr	r0, [pc, #232]	@ (802a228 <http_cb+0x440>)
 802a13e:	f001 fa15 	bl	802b56c <mg_log>
        }
      }

      if (is_chunked) {
 802a142:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 802a146:	2b00      	cmp	r3, #0
 802a148:	f000 80e8 	beq.w	802a31c <http_cb+0x534>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 802a14c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a150:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a154:	681b      	ldr	r3, [r3, #0]
 802a156:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802a158:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 802a15c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 802a160:	440b      	add	r3, r1
 802a162:	4413      	add	r3, r2
 802a164:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 802a168:	2300      	movs	r3, #0
 802a16a:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 802a16e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a172:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a176:	681b      	ldr	r3, [r3, #0]
 802a178:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802a17a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 802a17e:	1ad2      	subs	r2, r2, r3
 802a180:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 802a184:	1ad3      	subs	r3, r2, r3
 802a186:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 802a18a:	e006      	b.n	802a19a <http_cb+0x3b2>
 802a18c:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 802a190:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 802a194:	4413      	add	r3, r2
 802a196:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 802a19a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 802a19e:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 802a1a2:	18d0      	adds	r0, r2, r3
 802a1a4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 802a1a8:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 802a1ac:	1ad1      	subs	r1, r2, r3
 802a1ae:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 802a1b2:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 802a1b6:	f7ff fd87 	bl	8029cc8 <skip_chunk>
 802a1ba:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 802a1be:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 802a1c2:	2b00      	cmp	r3, #0
 802a1c4:	dd03      	ble.n	802a1ce <http_cb+0x3e6>
 802a1c6:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 802a1ca:	2b00      	cmp	r3, #0
 802a1cc:	d1de      	bne.n	802a18c <http_cb+0x3a4>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 802a1ce:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 802a1d2:	2b00      	cmp	r3, #0
 802a1d4:	f000 8138 	beq.w	802a448 <http_cb+0x660>
        if (cl < 0) {
 802a1d8:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 802a1dc:	2b00      	cmp	r3, #0
 802a1de:	da27      	bge.n	802a230 <http_cb+0x448>
          mg_error(c, "Invalid chunk");
 802a1e0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a1e4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a1e8:	4910      	ldr	r1, [pc, #64]	@ (802a22c <http_cb+0x444>)
 802a1ea:	6818      	ldr	r0, [r3, #0]
 802a1ec:	f7fb fda8 	bl	8025d40 <mg_error>
          break;
 802a1f0:	e12d      	b.n	802a44e <http_cb+0x666>
 802a1f2:	bf00      	nop
 802a1f4:	200002a8 	.word	0x200002a8
 802a1f8:	08044a80 	.word	0x08044a80
 802a1fc:	08041a30 	.word	0x08041a30
 802a200:	08042d88 	.word	0x08042d88
 802a204:	08042da0 	.word	0x08042da0
 802a208:	08042db4 	.word	0x08042db4
 802a20c:	08042dbc 	.word	0x08042dbc
 802a210:	08042dd8 	.word	0x08042dd8
 802a214:	08041c3c 	.word	0x08041c3c
 802a218:	08041c48 	.word	0x08041c48
 802a21c:	08041c44 	.word	0x08041c44
 802a220:	08042110 	.word	0x08042110
 802a224:	08042de8 	.word	0x08042de8
 802a228:	08041b9c 	.word	0x08041b9c
 802a22c:	08042e0c 	.word	0x08042e0c
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 802a230:	2300      	movs	r3, #0
 802a232:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 802a236:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a23a:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 802a23e:	2200      	movs	r2, #0
 802a240:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 802a244:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 802a248:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a24c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 802a250:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 802a254:	e03e      	b.n	802a2d4 <http_cb+0x4ec>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 802a256:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a25a:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 802a25e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 802a262:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 802a266:	18d0      	adds	r0, r2, r3
 802a268:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 802a26c:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 802a270:	4413      	add	r3, r2
 802a272:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 802a276:	4413      	add	r3, r2
 802a278:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 802a27c:	4619      	mov	r1, r3
 802a27e:	f00b ff15 	bl	80360ac <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 802a282:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 802a286:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 802a28a:	4413      	add	r3, r2
 802a28c:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 802a290:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a294:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 802a298:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 802a29c:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 802a2a0:	441a      	add	r2, r3
 802a2a2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a2a6:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 802a2aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 802a2ae:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a2b2:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 802a2b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 802a2ba:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 802a2be:	441a      	add	r2, r3
 802a2c0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a2c4:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 802a2c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 802a2cc:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 802a2d0:	2b00      	cmp	r3, #0
 802a2d2:	d016      	beq.n	802a302 <http_cb+0x51a>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 802a2d4:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 802a2d8:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 802a2dc:	18d0      	adds	r0, r2, r3
 802a2de:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 802a2e2:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 802a2e6:	1ad1      	subs	r1, r2, r3
 802a2e8:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 802a2ec:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 802a2f0:	f7ff fcea 	bl	8029cc8 <skip_chunk>
 802a2f4:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 802a2f8:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 802a2fc:	2b00      	cmp	r3, #0
 802a2fe:	dcaa      	bgt.n	802a256 <http_cb+0x46e>
 802a300:	e000      	b.n	802a304 <http_cb+0x51c>
          if (dl == 0) break;
 802a302:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 802a304:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 802a308:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 802a30c:	4413      	add	r3, r2
 802a30e:	461a      	mov	r2, r3
 802a310:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 802a314:	4413      	add	r3, r2
 802a316:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 802a31a:	e025      	b.n	802a368 <http_cb+0x580>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 802a31c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a320:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a324:	681b      	ldr	r3, [r3, #0]
 802a326:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802a328:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 802a32c:	1ad2      	subs	r2, r2, r3
 802a32e:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 802a332:	1ad3      	subs	r3, r2, r3
 802a334:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
        if (hm.body.len > len) break;  // Buffer more data
 802a338:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a33c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 802a340:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 802a344:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 802a348:	429a      	cmp	r2, r3
 802a34a:	d37f      	bcc.n	802a44c <http_cb+0x664>
        ofs += (size_t) n + hm.body.len;
 802a34c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a350:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 802a354:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 802a358:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 802a35c:	4413      	add	r3, r2
 802a35e:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 802a362:	4413      	add	r3, r2
 802a364:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 802a368:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a36c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a370:	681b      	ldr	r3, [r3, #0]
 802a372:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802a376:	f003 0304 	and.w	r3, r3, #4
 802a37a:	b2db      	uxtb	r3, r3
 802a37c:	2b00      	cmp	r3, #0
 802a37e:	d00a      	beq.n	802a396 <http_cb+0x5ae>
 802a380:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a384:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a388:	681a      	ldr	r2, [r3, #0]
 802a38a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802a38e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802a392:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 802a396:	f107 0214 	add.w	r2, r7, #20
 802a39a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a39e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a3a2:	210b      	movs	r1, #11
 802a3a4:	6818      	ldr	r0, [r3, #0]
 802a3a6:	f7fb fcab 	bl	8025d00 <mg_call>
      if (c->is_accepted) {
 802a3aa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a3ae:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a3b2:	681b      	ldr	r3, [r3, #0]
 802a3b4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802a3b8:	f003 0304 	and.w	r3, r3, #4
 802a3bc:	b2db      	uxtb	r3, r3
 802a3be:	2b00      	cmp	r3, #0
 802a3c0:	d028      	beq.n	802a414 <http_cb+0x62c>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 802a3c2:	f107 0314 	add.w	r3, r7, #20
 802a3c6:	492c      	ldr	r1, [pc, #176]	@ (802a478 <http_cb+0x690>)
 802a3c8:	4618      	mov	r0, r3
 802a3ca:	f7fd f8b1 	bl	8027530 <mg_http_get_header>
 802a3ce:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 802a3d2:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 802a3d6:	2b00      	cmp	r3, #0
 802a3d8:	d01c      	beq.n	802a414 <http_cb+0x62c>
 802a3da:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 802a3de:	4927      	ldr	r1, [pc, #156]	@ (802a47c <http_cb+0x694>)
 802a3e0:	4618      	mov	r0, r3
 802a3e2:	f007 fd77 	bl	8031ed4 <mg_str_s>
 802a3e6:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 802a3ea:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 802a3ee:	cb0c      	ldmia	r3, {r2, r3}
 802a3f0:	c903      	ldmia	r1, {r0, r1}
 802a3f2:	f007 fdfb 	bl	8031fec <mg_strcasecmp>
 802a3f6:	4603      	mov	r3, r0
 802a3f8:	2b00      	cmp	r3, #0
 802a3fa:	d10b      	bne.n	802a414 <http_cb+0x62c>
          c->is_draining = 1;  // honor "Connection: close"
 802a3fc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a400:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a404:	681a      	ldr	r2, [r3, #0]
 802a406:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802a40a:	f043 0310 	orr.w	r3, r3, #16
 802a40e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 802a412:	e01c      	b.n	802a44e <http_cb+0x666>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 802a414:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a418:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a41c:	681b      	ldr	r3, [r3, #0]
 802a41e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802a422:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 802a426:	b2db      	uxtb	r3, r3
 802a428:	2b00      	cmp	r3, #0
 802a42a:	d110      	bne.n	802a44e <http_cb+0x666>
 802a42c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a430:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a434:	681b      	ldr	r3, [r3, #0]
 802a436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802a438:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 802a43c:	429a      	cmp	r2, r3
 802a43e:	f4ff ad23 	bcc.w	8029e88 <http_cb+0xa0>
 802a442:	e004      	b.n	802a44e <http_cb+0x666>
      if (n == 0) break;                 // Request is not buffered yet
 802a444:	bf00      	nop
 802a446:	e002      	b.n	802a44e <http_cb+0x666>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 802a448:	bf00      	nop
 802a44a:	e000      	b.n	802a44e <http_cb+0x666>
        if (hm.body.len > len) break;  // Buffer more data
 802a44c:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 802a44e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 802a452:	2b00      	cmp	r3, #0
 802a454:	d00b      	beq.n	802a46e <http_cb+0x686>
 802a456:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 802a45a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 802a45e:	681b      	ldr	r3, [r3, #0]
 802a460:	3338      	adds	r3, #56	@ 0x38
 802a462:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 802a466:	2100      	movs	r1, #0
 802a468:	4618      	mov	r0, r3
 802a46a:	f000 f91d 	bl	802a6a8 <mg_iobuf_del>
  }
  (void) ev_data;
}
 802a46e:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 802a472:	46bd      	mov	sp, r7
 802a474:	bd80      	pop	{r7, pc}
 802a476:	bf00      	nop
 802a478:	08042e1c 	.word	0x08042e1c
 802a47c:	08042e28 	.word	0x08042e28

0802a480 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 802a480:	b580      	push	{r7, lr}
 802a482:	b086      	sub	sp, #24
 802a484:	af00      	add	r7, sp, #0
 802a486:	60f8      	str	r0, [r7, #12]
 802a488:	60b9      	str	r1, [r7, #8]
 802a48a:	607a      	str	r2, [r7, #4]
 802a48c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 802a48e:	683b      	ldr	r3, [r7, #0]
 802a490:	687a      	ldr	r2, [r7, #4]
 802a492:	68b9      	ldr	r1, [r7, #8]
 802a494:	68f8      	ldr	r0, [r7, #12]
 802a496:	f003 fd11 	bl	802debc <mg_listen>
 802a49a:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 802a49c:	697b      	ldr	r3, [r7, #20]
 802a49e:	2b00      	cmp	r3, #0
 802a4a0:	d003      	beq.n	802a4aa <mg_http_listen+0x2a>
 802a4a2:	697b      	ldr	r3, [r7, #20]
 802a4a4:	4a03      	ldr	r2, [pc, #12]	@ (802a4b4 <mg_http_listen+0x34>)
 802a4a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 802a4aa:	697b      	ldr	r3, [r7, #20]
}
 802a4ac:	4618      	mov	r0, r3
 802a4ae:	3718      	adds	r7, #24
 802a4b0:	46bd      	mov	sp, r7
 802a4b2:	bd80      	pop	{r7, pc}
 802a4b4:	08029de9 	.word	0x08029de9

0802a4b8 <roundup>:





static size_t roundup(size_t size, size_t align) {
 802a4b8:	b480      	push	{r7}
 802a4ba:	b083      	sub	sp, #12
 802a4bc:	af00      	add	r7, sp, #0
 802a4be:	6078      	str	r0, [r7, #4]
 802a4c0:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 802a4c2:	683b      	ldr	r3, [r7, #0]
 802a4c4:	2b00      	cmp	r3, #0
 802a4c6:	d00a      	beq.n	802a4de <roundup+0x26>
 802a4c8:	687a      	ldr	r2, [r7, #4]
 802a4ca:	683b      	ldr	r3, [r7, #0]
 802a4cc:	4413      	add	r3, r2
 802a4ce:	1e5a      	subs	r2, r3, #1
 802a4d0:	683b      	ldr	r3, [r7, #0]
 802a4d2:	fbb2 f3f3 	udiv	r3, r2, r3
 802a4d6:	683a      	ldr	r2, [r7, #0]
 802a4d8:	fb02 f303 	mul.w	r3, r2, r3
 802a4dc:	e000      	b.n	802a4e0 <roundup+0x28>
 802a4de:	687b      	ldr	r3, [r7, #4]
}
 802a4e0:	4618      	mov	r0, r3
 802a4e2:	370c      	adds	r7, #12
 802a4e4:	46bd      	mov	sp, r7
 802a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4ea:	4770      	bx	lr

0802a4ec <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 802a4ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 802a4f0:	b088      	sub	sp, #32
 802a4f2:	af02      	add	r7, sp, #8
 802a4f4:	6078      	str	r0, [r7, #4]
 802a4f6:	6039      	str	r1, [r7, #0]
  int ok = 1;
 802a4f8:	2301      	movs	r3, #1
 802a4fa:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 802a4fc:	687b      	ldr	r3, [r7, #4]
 802a4fe:	68db      	ldr	r3, [r3, #12]
 802a500:	4619      	mov	r1, r3
 802a502:	6838      	ldr	r0, [r7, #0]
 802a504:	f7ff ffd8 	bl	802a4b8 <roundup>
 802a508:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 802a50a:	683b      	ldr	r3, [r7, #0]
 802a50c:	2b00      	cmp	r3, #0
 802a50e:	d117      	bne.n	802a540 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 802a510:	687b      	ldr	r3, [r7, #4]
 802a512:	681a      	ldr	r2, [r3, #0]
 802a514:	687b      	ldr	r3, [r7, #4]
 802a516:	685b      	ldr	r3, [r3, #4]
 802a518:	4619      	mov	r1, r3
 802a51a:	4610      	mov	r0, r2
 802a51c:	f008 fbe4 	bl	8032ce8 <mg_bzero>
    free(io->buf);
 802a520:	687b      	ldr	r3, [r7, #4]
 802a522:	681b      	ldr	r3, [r3, #0]
 802a524:	4618      	mov	r0, r3
 802a526:	f7f2 fa97 	bl	801ca58 <vPortFree>
    io->buf = NULL;
 802a52a:	687b      	ldr	r3, [r7, #4]
 802a52c:	2200      	movs	r2, #0
 802a52e:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 802a530:	687b      	ldr	r3, [r7, #4]
 802a532:	2200      	movs	r2, #0
 802a534:	605a      	str	r2, [r3, #4]
 802a536:	687b      	ldr	r3, [r7, #4]
 802a538:	685a      	ldr	r2, [r3, #4]
 802a53a:	687b      	ldr	r3, [r7, #4]
 802a53c:	609a      	str	r2, [r3, #8]
 802a53e:	e052      	b.n	802a5e6 <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 802a540:	687b      	ldr	r3, [r7, #4]
 802a542:	685b      	ldr	r3, [r3, #4]
 802a544:	683a      	ldr	r2, [r7, #0]
 802a546:	429a      	cmp	r2, r3
 802a548:	d04d      	beq.n	802a5e6 <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 802a54a:	6839      	ldr	r1, [r7, #0]
 802a54c:	2001      	movs	r0, #1
 802a54e:	f7fa fdf7 	bl	8025140 <mg_calloc>
 802a552:	6138      	str	r0, [r7, #16]
    if (p != NULL) {
 802a554:	693b      	ldr	r3, [r7, #16]
 802a556:	2b00      	cmp	r3, #0
 802a558:	d028      	beq.n	802a5ac <mg_iobuf_resize+0xc0>
      size_t len = new_size < io->len ? new_size : io->len;
 802a55a:	687b      	ldr	r3, [r7, #4]
 802a55c:	689b      	ldr	r3, [r3, #8]
 802a55e:	683a      	ldr	r2, [r7, #0]
 802a560:	4293      	cmp	r3, r2
 802a562:	bf28      	it	cs
 802a564:	4613      	movcs	r3, r2
 802a566:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 802a568:	68fb      	ldr	r3, [r7, #12]
 802a56a:	2b00      	cmp	r3, #0
 802a56c:	d00a      	beq.n	802a584 <mg_iobuf_resize+0x98>
 802a56e:	687b      	ldr	r3, [r7, #4]
 802a570:	681b      	ldr	r3, [r3, #0]
 802a572:	2b00      	cmp	r3, #0
 802a574:	d006      	beq.n	802a584 <mg_iobuf_resize+0x98>
 802a576:	687b      	ldr	r3, [r7, #4]
 802a578:	681b      	ldr	r3, [r3, #0]
 802a57a:	68fa      	ldr	r2, [r7, #12]
 802a57c:	4619      	mov	r1, r3
 802a57e:	6938      	ldr	r0, [r7, #16]
 802a580:	f00b fd94 	bl	80360ac <memmove>
      mg_bzero(io->buf, io->size);
 802a584:	687b      	ldr	r3, [r7, #4]
 802a586:	681a      	ldr	r2, [r3, #0]
 802a588:	687b      	ldr	r3, [r7, #4]
 802a58a:	685b      	ldr	r3, [r3, #4]
 802a58c:	4619      	mov	r1, r3
 802a58e:	4610      	mov	r0, r2
 802a590:	f008 fbaa 	bl	8032ce8 <mg_bzero>
      free(io->buf);
 802a594:	687b      	ldr	r3, [r7, #4]
 802a596:	681b      	ldr	r3, [r3, #0]
 802a598:	4618      	mov	r0, r3
 802a59a:	f7f2 fa5d 	bl	801ca58 <vPortFree>
      io->buf = (unsigned char *) p;
 802a59e:	687b      	ldr	r3, [r7, #4]
 802a5a0:	693a      	ldr	r2, [r7, #16]
 802a5a2:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 802a5a4:	687b      	ldr	r3, [r7, #4]
 802a5a6:	683a      	ldr	r2, [r7, #0]
 802a5a8:	605a      	str	r2, [r3, #4]
 802a5aa:	e01c      	b.n	802a5e6 <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 802a5ac:	2300      	movs	r3, #0
 802a5ae:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 802a5b0:	4b10      	ldr	r3, [pc, #64]	@ (802a5f4 <mg_iobuf_resize+0x108>)
 802a5b2:	681b      	ldr	r3, [r3, #0]
 802a5b4:	2b00      	cmp	r3, #0
 802a5b6:	dd16      	ble.n	802a5e6 <mg_iobuf_resize+0xfa>
 802a5b8:	4b0f      	ldr	r3, [pc, #60]	@ (802a5f8 <mg_iobuf_resize+0x10c>)
 802a5ba:	f640 5244 	movw	r2, #3396	@ 0xd44
 802a5be:	490f      	ldr	r1, [pc, #60]	@ (802a5fc <mg_iobuf_resize+0x110>)
 802a5c0:	2001      	movs	r0, #1
 802a5c2:	f000 ff83 	bl	802b4cc <mg_log_prefix>
 802a5c6:	687b      	ldr	r3, [r7, #4]
 802a5c8:	685b      	ldr	r3, [r3, #4]
 802a5ca:	2200      	movs	r2, #0
 802a5cc:	4698      	mov	r8, r3
 802a5ce:	4691      	mov	r9, r2
 802a5d0:	683b      	ldr	r3, [r7, #0]
 802a5d2:	2200      	movs	r2, #0
 802a5d4:	461c      	mov	r4, r3
 802a5d6:	4615      	mov	r5, r2
 802a5d8:	e9cd 4500 	strd	r4, r5, [sp]
 802a5dc:	4642      	mov	r2, r8
 802a5de:	464b      	mov	r3, r9
 802a5e0:	4807      	ldr	r0, [pc, #28]	@ (802a600 <mg_iobuf_resize+0x114>)
 802a5e2:	f000 ffc3 	bl	802b56c <mg_log>
    }
  }
  return ok;
 802a5e6:	697b      	ldr	r3, [r7, #20]
}
 802a5e8:	4618      	mov	r0, r3
 802a5ea:	3718      	adds	r7, #24
 802a5ec:	46bd      	mov	sp, r7
 802a5ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 802a5f2:	bf00      	nop
 802a5f4:	200002a8 	.word	0x200002a8
 802a5f8:	08044a88 	.word	0x08044a88
 802a5fc:	08041a30 	.word	0x08041a30
 802a600:	08042e68 	.word	0x08042e68

0802a604 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 802a604:	b580      	push	{r7, lr}
 802a606:	b086      	sub	sp, #24
 802a608:	af00      	add	r7, sp, #0
 802a60a:	60f8      	str	r0, [r7, #12]
 802a60c:	60b9      	str	r1, [r7, #8]
 802a60e:	607a      	str	r2, [r7, #4]
 802a610:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 802a612:	68fb      	ldr	r3, [r7, #12]
 802a614:	689a      	ldr	r2, [r3, #8]
 802a616:	683b      	ldr	r3, [r7, #0]
 802a618:	441a      	add	r2, r3
 802a61a:	68fb      	ldr	r3, [r7, #12]
 802a61c:	68db      	ldr	r3, [r3, #12]
 802a61e:	4619      	mov	r1, r3
 802a620:	4610      	mov	r0, r2
 802a622:	f7ff ff49 	bl	802a4b8 <roundup>
 802a626:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 802a628:	6979      	ldr	r1, [r7, #20]
 802a62a:	68f8      	ldr	r0, [r7, #12]
 802a62c:	f7ff ff5e 	bl	802a4ec <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 802a630:	68fb      	ldr	r3, [r7, #12]
 802a632:	685b      	ldr	r3, [r3, #4]
 802a634:	697a      	ldr	r2, [r7, #20]
 802a636:	429a      	cmp	r2, r3
 802a638:	d001      	beq.n	802a63e <mg_iobuf_add+0x3a>
 802a63a:	2300      	movs	r3, #0
 802a63c:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 802a63e:	68fb      	ldr	r3, [r7, #12]
 802a640:	689b      	ldr	r3, [r3, #8]
 802a642:	68ba      	ldr	r2, [r7, #8]
 802a644:	429a      	cmp	r2, r3
 802a646:	d210      	bcs.n	802a66a <mg_iobuf_add+0x66>
 802a648:	68fb      	ldr	r3, [r7, #12]
 802a64a:	681a      	ldr	r2, [r3, #0]
 802a64c:	68b9      	ldr	r1, [r7, #8]
 802a64e:	683b      	ldr	r3, [r7, #0]
 802a650:	440b      	add	r3, r1
 802a652:	18d0      	adds	r0, r2, r3
 802a654:	68fb      	ldr	r3, [r7, #12]
 802a656:	681a      	ldr	r2, [r3, #0]
 802a658:	68bb      	ldr	r3, [r7, #8]
 802a65a:	18d1      	adds	r1, r2, r3
 802a65c:	68fb      	ldr	r3, [r7, #12]
 802a65e:	689a      	ldr	r2, [r3, #8]
 802a660:	68bb      	ldr	r3, [r7, #8]
 802a662:	1ad3      	subs	r3, r2, r3
 802a664:	461a      	mov	r2, r3
 802a666:	f00b fd21 	bl	80360ac <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 802a66a:	687b      	ldr	r3, [r7, #4]
 802a66c:	2b00      	cmp	r3, #0
 802a66e:	d008      	beq.n	802a682 <mg_iobuf_add+0x7e>
 802a670:	68fb      	ldr	r3, [r7, #12]
 802a672:	681a      	ldr	r2, [r3, #0]
 802a674:	68bb      	ldr	r3, [r7, #8]
 802a676:	4413      	add	r3, r2
 802a678:	683a      	ldr	r2, [r7, #0]
 802a67a:	6879      	ldr	r1, [r7, #4]
 802a67c:	4618      	mov	r0, r3
 802a67e:	f00b fd15 	bl	80360ac <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 802a682:	68fb      	ldr	r3, [r7, #12]
 802a684:	689b      	ldr	r3, [r3, #8]
 802a686:	68ba      	ldr	r2, [r7, #8]
 802a688:	429a      	cmp	r2, r3
 802a68a:	d902      	bls.n	802a692 <mg_iobuf_add+0x8e>
 802a68c:	68fb      	ldr	r3, [r7, #12]
 802a68e:	68ba      	ldr	r2, [r7, #8]
 802a690:	609a      	str	r2, [r3, #8]
  io->len += len;
 802a692:	68fb      	ldr	r3, [r7, #12]
 802a694:	689a      	ldr	r2, [r3, #8]
 802a696:	683b      	ldr	r3, [r7, #0]
 802a698:	441a      	add	r2, r3
 802a69a:	68fb      	ldr	r3, [r7, #12]
 802a69c:	609a      	str	r2, [r3, #8]
  return len;
 802a69e:	683b      	ldr	r3, [r7, #0]
}
 802a6a0:	4618      	mov	r0, r3
 802a6a2:	3718      	adds	r7, #24
 802a6a4:	46bd      	mov	sp, r7
 802a6a6:	bd80      	pop	{r7, pc}

0802a6a8 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 802a6a8:	b580      	push	{r7, lr}
 802a6aa:	b084      	sub	sp, #16
 802a6ac:	af00      	add	r7, sp, #0
 802a6ae:	60f8      	str	r0, [r7, #12]
 802a6b0:	60b9      	str	r1, [r7, #8]
 802a6b2:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 802a6b4:	68fb      	ldr	r3, [r7, #12]
 802a6b6:	689b      	ldr	r3, [r3, #8]
 802a6b8:	68ba      	ldr	r2, [r7, #8]
 802a6ba:	429a      	cmp	r2, r3
 802a6bc:	d902      	bls.n	802a6c4 <mg_iobuf_del+0x1c>
 802a6be:	68fb      	ldr	r3, [r7, #12]
 802a6c0:	689b      	ldr	r3, [r3, #8]
 802a6c2:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 802a6c4:	68ba      	ldr	r2, [r7, #8]
 802a6c6:	687b      	ldr	r3, [r7, #4]
 802a6c8:	441a      	add	r2, r3
 802a6ca:	68fb      	ldr	r3, [r7, #12]
 802a6cc:	689b      	ldr	r3, [r3, #8]
 802a6ce:	429a      	cmp	r2, r3
 802a6d0:	d904      	bls.n	802a6dc <mg_iobuf_del+0x34>
 802a6d2:	68fb      	ldr	r3, [r7, #12]
 802a6d4:	689a      	ldr	r2, [r3, #8]
 802a6d6:	68bb      	ldr	r3, [r7, #8]
 802a6d8:	1ad3      	subs	r3, r2, r3
 802a6da:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 802a6dc:	68fb      	ldr	r3, [r7, #12]
 802a6de:	681b      	ldr	r3, [r3, #0]
 802a6e0:	2b00      	cmp	r3, #0
 802a6e2:	d012      	beq.n	802a70a <mg_iobuf_del+0x62>
 802a6e4:	68fb      	ldr	r3, [r7, #12]
 802a6e6:	681a      	ldr	r2, [r3, #0]
 802a6e8:	68bb      	ldr	r3, [r7, #8]
 802a6ea:	18d0      	adds	r0, r2, r3
 802a6ec:	68fb      	ldr	r3, [r7, #12]
 802a6ee:	681a      	ldr	r2, [r3, #0]
 802a6f0:	68b9      	ldr	r1, [r7, #8]
 802a6f2:	687b      	ldr	r3, [r7, #4]
 802a6f4:	440b      	add	r3, r1
 802a6f6:	18d1      	adds	r1, r2, r3
 802a6f8:	68fb      	ldr	r3, [r7, #12]
 802a6fa:	689a      	ldr	r2, [r3, #8]
 802a6fc:	68bb      	ldr	r3, [r7, #8]
 802a6fe:	1ad2      	subs	r2, r2, r3
 802a700:	687b      	ldr	r3, [r7, #4]
 802a702:	1ad3      	subs	r3, r2, r3
 802a704:	461a      	mov	r2, r3
 802a706:	f00b fcd1 	bl	80360ac <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 802a70a:	68fb      	ldr	r3, [r7, #12]
 802a70c:	681b      	ldr	r3, [r3, #0]
 802a70e:	2b00      	cmp	r3, #0
 802a710:	d00a      	beq.n	802a728 <mg_iobuf_del+0x80>
 802a712:	68fb      	ldr	r3, [r7, #12]
 802a714:	681a      	ldr	r2, [r3, #0]
 802a716:	68fb      	ldr	r3, [r7, #12]
 802a718:	6899      	ldr	r1, [r3, #8]
 802a71a:	687b      	ldr	r3, [r7, #4]
 802a71c:	1acb      	subs	r3, r1, r3
 802a71e:	4413      	add	r3, r2
 802a720:	6879      	ldr	r1, [r7, #4]
 802a722:	4618      	mov	r0, r3
 802a724:	f008 fae0 	bl	8032ce8 <mg_bzero>
  io->len -= len;
 802a728:	68fb      	ldr	r3, [r7, #12]
 802a72a:	689a      	ldr	r2, [r3, #8]
 802a72c:	687b      	ldr	r3, [r7, #4]
 802a72e:	1ad2      	subs	r2, r2, r3
 802a730:	68fb      	ldr	r3, [r7, #12]
 802a732:	609a      	str	r2, [r3, #8]
  return len;
 802a734:	687b      	ldr	r3, [r7, #4]
}
 802a736:	4618      	mov	r0, r3
 802a738:	3710      	adds	r7, #16
 802a73a:	46bd      	mov	sp, r7
 802a73c:	bd80      	pop	{r7, pc}

0802a73e <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 802a73e:	b580      	push	{r7, lr}
 802a740:	b082      	sub	sp, #8
 802a742:	af00      	add	r7, sp, #0
 802a744:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 802a746:	2100      	movs	r1, #0
 802a748:	6878      	ldr	r0, [r7, #4]
 802a74a:	f7ff fecf 	bl	802a4ec <mg_iobuf_resize>
}
 802a74e:	bf00      	nop
 802a750:	3708      	adds	r7, #8
 802a752:	46bd      	mov	sp, r7
 802a754:	bd80      	pop	{r7, pc}
	...

0802a758 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 802a758:	b480      	push	{r7}
 802a75a:	b083      	sub	sp, #12
 802a75c:	af00      	add	r7, sp, #0
 802a75e:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 802a760:	687b      	ldr	r3, [r7, #4]
 802a762:	2b00      	cmp	r3, #0
 802a764:	d001      	beq.n	802a76a <escapeseq+0x12>
 802a766:	4b04      	ldr	r3, [pc, #16]	@ (802a778 <escapeseq+0x20>)
 802a768:	e000      	b.n	802a76c <escapeseq+0x14>
 802a76a:	4b04      	ldr	r3, [pc, #16]	@ (802a77c <escapeseq+0x24>)
}
 802a76c:	4618      	mov	r0, r3
 802a76e:	370c      	adds	r7, #12
 802a770:	46bd      	mov	sp, r7
 802a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a776:	4770      	bx	lr
 802a778:	08042e74 	.word	0x08042e74
 802a77c:	08042e7c 	.word	0x08042e7c

0802a780 <json_esc>:

static char json_esc(int c, int esc) {
 802a780:	b580      	push	{r7, lr}
 802a782:	b086      	sub	sp, #24
 802a784:	af00      	add	r7, sp, #0
 802a786:	6078      	str	r0, [r7, #4]
 802a788:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 802a78a:	6838      	ldr	r0, [r7, #0]
 802a78c:	f7ff ffe4 	bl	802a758 <escapeseq>
 802a790:	6138      	str	r0, [r7, #16]
 802a792:	683b      	ldr	r3, [r7, #0]
 802a794:	2b00      	cmp	r3, #0
 802a796:	bf0c      	ite	eq
 802a798:	2301      	moveq	r3, #1
 802a79a:	2300      	movne	r3, #0
 802a79c:	b2db      	uxtb	r3, r3
 802a79e:	4618      	mov	r0, r3
 802a7a0:	f7ff ffda 	bl	802a758 <escapeseq>
 802a7a4:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 802a7a6:	693b      	ldr	r3, [r7, #16]
 802a7a8:	617b      	str	r3, [r7, #20]
 802a7aa:	e010      	b.n	802a7ce <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 802a7ac:	697b      	ldr	r3, [r7, #20]
 802a7ae:	781b      	ldrb	r3, [r3, #0]
 802a7b0:	461a      	mov	r2, r3
 802a7b2:	687b      	ldr	r3, [r7, #4]
 802a7b4:	4293      	cmp	r3, r2
 802a7b6:	d107      	bne.n	802a7c8 <json_esc+0x48>
 802a7b8:	697a      	ldr	r2, [r7, #20]
 802a7ba:	693b      	ldr	r3, [r7, #16]
 802a7bc:	1ad3      	subs	r3, r2, r3
 802a7be:	461a      	mov	r2, r3
 802a7c0:	68fb      	ldr	r3, [r7, #12]
 802a7c2:	4413      	add	r3, r2
 802a7c4:	781b      	ldrb	r3, [r3, #0]
 802a7c6:	e007      	b.n	802a7d8 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 802a7c8:	697b      	ldr	r3, [r7, #20]
 802a7ca:	3301      	adds	r3, #1
 802a7cc:	617b      	str	r3, [r7, #20]
 802a7ce:	697b      	ldr	r3, [r7, #20]
 802a7d0:	781b      	ldrb	r3, [r3, #0]
 802a7d2:	2b00      	cmp	r3, #0
 802a7d4:	d1ea      	bne.n	802a7ac <json_esc+0x2c>
  }
  return 0;
 802a7d6:	2300      	movs	r3, #0
}
 802a7d8:	4618      	mov	r0, r3
 802a7da:	3718      	adds	r7, #24
 802a7dc:	46bd      	mov	sp, r7
 802a7de:	bd80      	pop	{r7, pc}

0802a7e0 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 802a7e0:	b580      	push	{r7, lr}
 802a7e2:	b084      	sub	sp, #16
 802a7e4:	af00      	add	r7, sp, #0
 802a7e6:	6078      	str	r0, [r7, #4]
 802a7e8:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 802a7ea:	2300      	movs	r3, #0
 802a7ec:	60fb      	str	r3, [r7, #12]
 802a7ee:	e02e      	b.n	802a84e <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 802a7f0:	68fb      	ldr	r3, [r7, #12]
 802a7f2:	687a      	ldr	r2, [r7, #4]
 802a7f4:	4413      	add	r3, r2
 802a7f6:	781b      	ldrb	r3, [r3, #0]
 802a7f8:	2b5c      	cmp	r3, #92	@ 0x5c
 802a7fa:	d114      	bne.n	802a826 <mg_pass_string+0x46>
 802a7fc:	68fb      	ldr	r3, [r7, #12]
 802a7fe:	3301      	adds	r3, #1
 802a800:	683a      	ldr	r2, [r7, #0]
 802a802:	429a      	cmp	r2, r3
 802a804:	dd0f      	ble.n	802a826 <mg_pass_string+0x46>
 802a806:	68fb      	ldr	r3, [r7, #12]
 802a808:	3301      	adds	r3, #1
 802a80a:	687a      	ldr	r2, [r7, #4]
 802a80c:	4413      	add	r3, r2
 802a80e:	781b      	ldrb	r3, [r3, #0]
 802a810:	2101      	movs	r1, #1
 802a812:	4618      	mov	r0, r3
 802a814:	f7ff ffb4 	bl	802a780 <json_esc>
 802a818:	4603      	mov	r3, r0
 802a81a:	2b00      	cmp	r3, #0
 802a81c:	d003      	beq.n	802a826 <mg_pass_string+0x46>
      i++;
 802a81e:	68fb      	ldr	r3, [r7, #12]
 802a820:	3301      	adds	r3, #1
 802a822:	60fb      	str	r3, [r7, #12]
 802a824:	e010      	b.n	802a848 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 802a826:	68fb      	ldr	r3, [r7, #12]
 802a828:	687a      	ldr	r2, [r7, #4]
 802a82a:	4413      	add	r3, r2
 802a82c:	781b      	ldrb	r3, [r3, #0]
 802a82e:	2b00      	cmp	r3, #0
 802a830:	d102      	bne.n	802a838 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 802a832:	f06f 0301 	mvn.w	r3, #1
 802a836:	e010      	b.n	802a85a <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 802a838:	68fb      	ldr	r3, [r7, #12]
 802a83a:	687a      	ldr	r2, [r7, #4]
 802a83c:	4413      	add	r3, r2
 802a83e:	781b      	ldrb	r3, [r3, #0]
 802a840:	2b22      	cmp	r3, #34	@ 0x22
 802a842:	d101      	bne.n	802a848 <mg_pass_string+0x68>
      return i;
 802a844:	68fb      	ldr	r3, [r7, #12]
 802a846:	e008      	b.n	802a85a <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 802a848:	68fb      	ldr	r3, [r7, #12]
 802a84a:	3301      	adds	r3, #1
 802a84c:	60fb      	str	r3, [r7, #12]
 802a84e:	68fa      	ldr	r2, [r7, #12]
 802a850:	683b      	ldr	r3, [r7, #0]
 802a852:	429a      	cmp	r2, r3
 802a854:	dbcc      	blt.n	802a7f0 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 802a856:	f06f 0301 	mvn.w	r3, #1
}
 802a85a:	4618      	mov	r0, r3
 802a85c:	3710      	adds	r7, #16
 802a85e:	46bd      	mov	sp, r7
 802a860:	bd80      	pop	{r7, pc}
 802a862:	0000      	movs	r0, r0
 802a864:	0000      	movs	r0, r0
	...

0802a868 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 802a868:	b580      	push	{r7, lr}
 802a86a:	b090      	sub	sp, #64	@ 0x40
 802a86c:	af00      	add	r7, sp, #0
 802a86e:	60f8      	str	r0, [r7, #12]
 802a870:	60b9      	str	r1, [r7, #8]
 802a872:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 802a874:	f04f 0200 	mov.w	r2, #0
 802a878:	f04f 0300 	mov.w	r3, #0
 802a87c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 802a880:	2300      	movs	r3, #0
 802a882:	637b      	str	r3, [r7, #52]	@ 0x34
 802a884:	2301      	movs	r3, #1
 802a886:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 802a888:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a88a:	68bb      	ldr	r3, [r7, #8]
 802a88c:	429a      	cmp	r2, r3
 802a88e:	da0a      	bge.n	802a8a6 <mg_atod+0x3e>
 802a890:	68fb      	ldr	r3, [r7, #12]
 802a892:	781b      	ldrb	r3, [r3, #0]
 802a894:	2b2d      	cmp	r3, #45	@ 0x2d
 802a896:	d106      	bne.n	802a8a6 <mg_atod+0x3e>
    sign = -1, i++;
 802a898:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a89c:	633b      	str	r3, [r7, #48]	@ 0x30
 802a89e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a8a0:	3301      	adds	r3, #1
 802a8a2:	637b      	str	r3, [r7, #52]	@ 0x34
 802a8a4:	e00a      	b.n	802a8bc <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 802a8a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a8a8:	68bb      	ldr	r3, [r7, #8]
 802a8aa:	429a      	cmp	r2, r3
 802a8ac:	da27      	bge.n	802a8fe <mg_atod+0x96>
 802a8ae:	68fb      	ldr	r3, [r7, #12]
 802a8b0:	781b      	ldrb	r3, [r3, #0]
 802a8b2:	2b2b      	cmp	r3, #43	@ 0x2b
 802a8b4:	d123      	bne.n	802a8fe <mg_atod+0x96>
    i++;
 802a8b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a8b8:	3301      	adds	r3, #1
 802a8ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 802a8bc:	e01f      	b.n	802a8fe <mg_atod+0x96>
    d *= 10.0;
 802a8be:	f04f 0200 	mov.w	r2, #0
 802a8c2:	4b9d      	ldr	r3, [pc, #628]	@ (802ab38 <mg_atod+0x2d0>)
 802a8c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802a8c8:	f7e5 feae 	bl	8010628 <__aeabi_dmul>
 802a8cc:	4602      	mov	r2, r0
 802a8ce:	460b      	mov	r3, r1
 802a8d0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    d += p[i] - '0';
 802a8d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a8d6:	68fa      	ldr	r2, [r7, #12]
 802a8d8:	4413      	add	r3, r2
 802a8da:	781b      	ldrb	r3, [r3, #0]
 802a8dc:	3b30      	subs	r3, #48	@ 0x30
 802a8de:	4618      	mov	r0, r3
 802a8e0:	f7e5 fe38 	bl	8010554 <__aeabi_i2d>
 802a8e4:	4602      	mov	r2, r0
 802a8e6:	460b      	mov	r3, r1
 802a8e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802a8ec:	f7e5 fce6 	bl	80102bc <__adddf3>
 802a8f0:	4602      	mov	r2, r0
 802a8f2:	460b      	mov	r3, r1
 802a8f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 802a8f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a8fa:	3301      	adds	r3, #1
 802a8fc:	637b      	str	r3, [r7, #52]	@ 0x34
 802a8fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a900:	68bb      	ldr	r3, [r7, #8]
 802a902:	429a      	cmp	r2, r3
 802a904:	da0b      	bge.n	802a91e <mg_atod+0xb6>
 802a906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a908:	68fa      	ldr	r2, [r7, #12]
 802a90a:	4413      	add	r3, r2
 802a90c:	781b      	ldrb	r3, [r3, #0]
 802a90e:	2b2f      	cmp	r3, #47	@ 0x2f
 802a910:	d905      	bls.n	802a91e <mg_atod+0xb6>
 802a912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a914:	68fa      	ldr	r2, [r7, #12]
 802a916:	4413      	add	r3, r2
 802a918:	781b      	ldrb	r3, [r3, #0]
 802a91a:	2b39      	cmp	r3, #57	@ 0x39
 802a91c:	d9cf      	bls.n	802a8be <mg_atod+0x56>
  }
  d *= sign;
 802a91e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802a920:	f7e5 fe18 	bl	8010554 <__aeabi_i2d>
 802a924:	4602      	mov	r2, r0
 802a926:	460b      	mov	r3, r1
 802a928:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802a92c:	f7e5 fe7c 	bl	8010628 <__aeabi_dmul>
 802a930:	4602      	mov	r2, r0
 802a932:	460b      	mov	r3, r1
 802a934:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 802a938:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a93a:	68bb      	ldr	r3, [r7, #8]
 802a93c:	429a      	cmp	r2, r3
 802a93e:	da59      	bge.n	802a9f4 <mg_atod+0x18c>
 802a940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a942:	68fa      	ldr	r2, [r7, #12]
 802a944:	4413      	add	r3, r2
 802a946:	781b      	ldrb	r3, [r3, #0]
 802a948:	2b2e      	cmp	r3, #46	@ 0x2e
 802a94a:	d153      	bne.n	802a9f4 <mg_atod+0x18c>
    double frac = 0.0, base = 0.1;
 802a94c:	f04f 0200 	mov.w	r2, #0
 802a950:	f04f 0300 	mov.w	r3, #0
 802a954:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 802a958:	a375      	add	r3, pc, #468	@ (adr r3, 802ab30 <mg_atod+0x2c8>)
 802a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a95e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 802a962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a964:	3301      	adds	r3, #1
 802a966:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 802a968:	e023      	b.n	802a9b2 <mg_atod+0x14a>
      frac += base * (p[i] - '0');
 802a96a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a96c:	68fa      	ldr	r2, [r7, #12]
 802a96e:	4413      	add	r3, r2
 802a970:	781b      	ldrb	r3, [r3, #0]
 802a972:	3b30      	subs	r3, #48	@ 0x30
 802a974:	4618      	mov	r0, r3
 802a976:	f7e5 fded 	bl	8010554 <__aeabi_i2d>
 802a97a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802a97e:	f7e5 fe53 	bl	8010628 <__aeabi_dmul>
 802a982:	4602      	mov	r2, r0
 802a984:	460b      	mov	r3, r1
 802a986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 802a98a:	f7e5 fc97 	bl	80102bc <__adddf3>
 802a98e:	4602      	mov	r2, r0
 802a990:	460b      	mov	r3, r1
 802a992:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      base /= 10.0;
 802a996:	f04f 0200 	mov.w	r2, #0
 802a99a:	4b67      	ldr	r3, [pc, #412]	@ (802ab38 <mg_atod+0x2d0>)
 802a99c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802a9a0:	f7e5 ff6c 	bl	801087c <__aeabi_ddiv>
 802a9a4:	4602      	mov	r2, r0
 802a9a6:	460b      	mov	r3, r1
 802a9a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 802a9ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a9ae:	3301      	adds	r3, #1
 802a9b0:	637b      	str	r3, [r7, #52]	@ 0x34
 802a9b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a9b4:	68bb      	ldr	r3, [r7, #8]
 802a9b6:	429a      	cmp	r2, r3
 802a9b8:	da0b      	bge.n	802a9d2 <mg_atod+0x16a>
 802a9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a9bc:	68fa      	ldr	r2, [r7, #12]
 802a9be:	4413      	add	r3, r2
 802a9c0:	781b      	ldrb	r3, [r3, #0]
 802a9c2:	2b2f      	cmp	r3, #47	@ 0x2f
 802a9c4:	d905      	bls.n	802a9d2 <mg_atod+0x16a>
 802a9c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802a9c8:	68fa      	ldr	r2, [r7, #12]
 802a9ca:	4413      	add	r3, r2
 802a9cc:	781b      	ldrb	r3, [r3, #0]
 802a9ce:	2b39      	cmp	r3, #57	@ 0x39
 802a9d0:	d9cb      	bls.n	802a96a <mg_atod+0x102>
    }
    d += frac * sign;
 802a9d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802a9d4:	f7e5 fdbe 	bl	8010554 <__aeabi_i2d>
 802a9d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 802a9dc:	f7e5 fe24 	bl	8010628 <__aeabi_dmul>
 802a9e0:	4602      	mov	r2, r0
 802a9e2:	460b      	mov	r3, r1
 802a9e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802a9e8:	f7e5 fc68 	bl	80102bc <__adddf3>
 802a9ec:	4602      	mov	r2, r0
 802a9ee:	460b      	mov	r3, r1
 802a9f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 802a9f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802a9f6:	68bb      	ldr	r3, [r7, #8]
 802a9f8:	429a      	cmp	r2, r3
 802a9fa:	f280 8085 	bge.w	802ab08 <mg_atod+0x2a0>
 802a9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802aa00:	68fa      	ldr	r2, [r7, #12]
 802aa02:	4413      	add	r3, r2
 802aa04:	781b      	ldrb	r3, [r3, #0]
 802aa06:	2b65      	cmp	r3, #101	@ 0x65
 802aa08:	d005      	beq.n	802aa16 <mg_atod+0x1ae>
 802aa0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802aa0c:	68fa      	ldr	r2, [r7, #12]
 802aa0e:	4413      	add	r3, r2
 802aa10:	781b      	ldrb	r3, [r3, #0]
 802aa12:	2b45      	cmp	r3, #69	@ 0x45
 802aa14:	d178      	bne.n	802ab08 <mg_atod+0x2a0>
    int j, exp = 0, minus = 0;
 802aa16:	2300      	movs	r3, #0
 802aa18:	61bb      	str	r3, [r7, #24]
 802aa1a:	2300      	movs	r3, #0
 802aa1c:	617b      	str	r3, [r7, #20]
    i++;
 802aa1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802aa20:	3301      	adds	r3, #1
 802aa22:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 802aa24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802aa26:	68bb      	ldr	r3, [r7, #8]
 802aa28:	429a      	cmp	r2, r3
 802aa2a:	da0a      	bge.n	802aa42 <mg_atod+0x1da>
 802aa2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802aa2e:	68fa      	ldr	r2, [r7, #12]
 802aa30:	4413      	add	r3, r2
 802aa32:	781b      	ldrb	r3, [r3, #0]
 802aa34:	2b2d      	cmp	r3, #45	@ 0x2d
 802aa36:	d104      	bne.n	802aa42 <mg_atod+0x1da>
 802aa38:	2301      	movs	r3, #1
 802aa3a:	617b      	str	r3, [r7, #20]
 802aa3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802aa3e:	3301      	adds	r3, #1
 802aa40:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 802aa42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802aa44:	68bb      	ldr	r3, [r7, #8]
 802aa46:	429a      	cmp	r2, r3
 802aa48:	da19      	bge.n	802aa7e <mg_atod+0x216>
 802aa4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802aa4c:	68fa      	ldr	r2, [r7, #12]
 802aa4e:	4413      	add	r3, r2
 802aa50:	781b      	ldrb	r3, [r3, #0]
 802aa52:	2b2b      	cmp	r3, #43	@ 0x2b
 802aa54:	d113      	bne.n	802aa7e <mg_atod+0x216>
 802aa56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802aa58:	3301      	adds	r3, #1
 802aa5a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 802aa5c:	e00f      	b.n	802aa7e <mg_atod+0x216>
      exp = exp * 10 + (p[i++] - '0');
 802aa5e:	69ba      	ldr	r2, [r7, #24]
 802aa60:	4613      	mov	r3, r2
 802aa62:	009b      	lsls	r3, r3, #2
 802aa64:	4413      	add	r3, r2
 802aa66:	005b      	lsls	r3, r3, #1
 802aa68:	4619      	mov	r1, r3
 802aa6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802aa6c:	1c5a      	adds	r2, r3, #1
 802aa6e:	637a      	str	r2, [r7, #52]	@ 0x34
 802aa70:	461a      	mov	r2, r3
 802aa72:	68fb      	ldr	r3, [r7, #12]
 802aa74:	4413      	add	r3, r2
 802aa76:	781b      	ldrb	r3, [r3, #0]
 802aa78:	3b30      	subs	r3, #48	@ 0x30
 802aa7a:	440b      	add	r3, r1
 802aa7c:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 802aa7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802aa80:	68bb      	ldr	r3, [r7, #8]
 802aa82:	429a      	cmp	r2, r3
 802aa84:	da0f      	bge.n	802aaa6 <mg_atod+0x23e>
 802aa86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802aa88:	68fa      	ldr	r2, [r7, #12]
 802aa8a:	4413      	add	r3, r2
 802aa8c:	781b      	ldrb	r3, [r3, #0]
 802aa8e:	2b2f      	cmp	r3, #47	@ 0x2f
 802aa90:	d909      	bls.n	802aaa6 <mg_atod+0x23e>
 802aa92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802aa94:	68fa      	ldr	r2, [r7, #12]
 802aa96:	4413      	add	r3, r2
 802aa98:	781b      	ldrb	r3, [r3, #0]
 802aa9a:	2b39      	cmp	r3, #57	@ 0x39
 802aa9c:	d803      	bhi.n	802aaa6 <mg_atod+0x23e>
 802aa9e:	69bb      	ldr	r3, [r7, #24]
 802aaa0:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 802aaa4:	dbdb      	blt.n	802aa5e <mg_atod+0x1f6>
    if (minus) exp = -exp;
 802aaa6:	697b      	ldr	r3, [r7, #20]
 802aaa8:	2b00      	cmp	r3, #0
 802aaaa:	d002      	beq.n	802aab2 <mg_atod+0x24a>
 802aaac:	69bb      	ldr	r3, [r7, #24]
 802aaae:	425b      	negs	r3, r3
 802aab0:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 802aab2:	2300      	movs	r3, #0
 802aab4:	61fb      	str	r3, [r7, #28]
 802aab6:	e00d      	b.n	802aad4 <mg_atod+0x26c>
 802aab8:	f04f 0200 	mov.w	r2, #0
 802aabc:	4b1e      	ldr	r3, [pc, #120]	@ (802ab38 <mg_atod+0x2d0>)
 802aabe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802aac2:	f7e5 fdb1 	bl	8010628 <__aeabi_dmul>
 802aac6:	4602      	mov	r2, r0
 802aac8:	460b      	mov	r3, r1
 802aaca:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 802aace:	69fb      	ldr	r3, [r7, #28]
 802aad0:	3301      	adds	r3, #1
 802aad2:	61fb      	str	r3, [r7, #28]
 802aad4:	69fa      	ldr	r2, [r7, #28]
 802aad6:	69bb      	ldr	r3, [r7, #24]
 802aad8:	429a      	cmp	r2, r3
 802aada:	dbed      	blt.n	802aab8 <mg_atod+0x250>
    for (j = 0; j < -exp; j++) d /= 10.0;
 802aadc:	2300      	movs	r3, #0
 802aade:	61fb      	str	r3, [r7, #28]
 802aae0:	e00d      	b.n	802aafe <mg_atod+0x296>
 802aae2:	f04f 0200 	mov.w	r2, #0
 802aae6:	4b14      	ldr	r3, [pc, #80]	@ (802ab38 <mg_atod+0x2d0>)
 802aae8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802aaec:	f7e5 fec6 	bl	801087c <__aeabi_ddiv>
 802aaf0:	4602      	mov	r2, r0
 802aaf2:	460b      	mov	r3, r1
 802aaf4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 802aaf8:	69fb      	ldr	r3, [r7, #28]
 802aafa:	3301      	adds	r3, #1
 802aafc:	61fb      	str	r3, [r7, #28]
 802aafe:	69bb      	ldr	r3, [r7, #24]
 802ab00:	425b      	negs	r3, r3
 802ab02:	69fa      	ldr	r2, [r7, #28]
 802ab04:	429a      	cmp	r2, r3
 802ab06:	dbec      	blt.n	802aae2 <mg_atod+0x27a>
  }

  if (numlen != NULL) *numlen = i;
 802ab08:	687b      	ldr	r3, [r7, #4]
 802ab0a:	2b00      	cmp	r3, #0
 802ab0c:	d002      	beq.n	802ab14 <mg_atod+0x2ac>
 802ab0e:	687b      	ldr	r3, [r7, #4]
 802ab10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802ab12:	601a      	str	r2, [r3, #0]
  return d;
 802ab14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 802ab18:	ec43 2b17 	vmov	d7, r2, r3
}
 802ab1c:	eeb0 0a47 	vmov.f32	s0, s14
 802ab20:	eef0 0a67 	vmov.f32	s1, s15
 802ab24:	3740      	adds	r7, #64	@ 0x40
 802ab26:	46bd      	mov	sp, r7
 802ab28:	bd80      	pop	{r7, pc}
 802ab2a:	bf00      	nop
 802ab2c:	f3af 8000 	nop.w
 802ab30:	9999999a 	.word	0x9999999a
 802ab34:	3fb99999 	.word	0x3fb99999
 802ab38:	40240000 	.word	0x40240000

0802ab3c <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 802ab3c:	b590      	push	{r4, r7, lr}
 802ab3e:	b09b      	sub	sp, #108	@ 0x6c
 802ab40:	af00      	add	r7, sp, #0
 802ab42:	f107 0408 	add.w	r4, r7, #8
 802ab46:	e884 0003 	stmia.w	r4, {r0, r1}
 802ab4a:	607a      	str	r2, [r7, #4]
 802ab4c:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 802ab4e:	68bb      	ldr	r3, [r7, #8]
 802ab50:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 802ab52:	68fb      	ldr	r3, [r7, #12]
 802ab54:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 802ab56:	2300      	movs	r3, #0
 802ab58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 802ab5c:	2300      	movs	r3, #0
 802ab5e:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 802ab60:	2300      	movs	r3, #0
 802ab62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 802ab64:	2300      	movs	r3, #0
 802ab66:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 802ab68:	2300      	movs	r3, #0
 802ab6a:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 802ab6c:	2301      	movs	r3, #1
 802ab6e:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 802ab70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802ab74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802ab76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802ab7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 802ab7c:	683b      	ldr	r3, [r7, #0]
 802ab7e:	2b00      	cmp	r3, #0
 802ab80:	d002      	beq.n	802ab88 <mg_json_get+0x4c>
 802ab82:	683b      	ldr	r3, [r7, #0]
 802ab84:	2200      	movs	r2, #0
 802ab86:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 802ab88:	687b      	ldr	r3, [r7, #4]
 802ab8a:	781b      	ldrb	r3, [r3, #0]
 802ab8c:	2b24      	cmp	r3, #36	@ 0x24
 802ab8e:	d002      	beq.n	802ab96 <mg_json_get+0x5a>
 802ab90:	f06f 0301 	mvn.w	r3, #1
 802ab94:	e308      	b.n	802b1a8 <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 802ab96:	2300      	movs	r3, #0
 802ab98:	663b      	str	r3, [r7, #96]	@ 0x60
 802ab9a:	e2fe      	b.n	802b19a <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 802ab9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ab9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802aba0:	4413      	add	r3, r2
 802aba2:	781b      	ldrb	r3, [r3, #0]
 802aba4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 802aba8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802abac:	2b20      	cmp	r3, #32
 802abae:	f000 82ee 	beq.w	802b18e <mg_json_get+0x652>
 802abb2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802abb6:	2b09      	cmp	r3, #9
 802abb8:	f000 82e9 	beq.w	802b18e <mg_json_get+0x652>
 802abbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802abc0:	2b0a      	cmp	r3, #10
 802abc2:	f000 82e4 	beq.w	802b18e <mg_json_get+0x652>
 802abc6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802abca:	2b0d      	cmp	r3, #13
 802abcc:	f000 82df 	beq.w	802b18e <mg_json_get+0x652>
    switch (expecting) {
 802abd0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 802abd4:	2b03      	cmp	r3, #3
 802abd6:	f200 82dd 	bhi.w	802b194 <mg_json_get+0x658>
 802abda:	a201      	add	r2, pc, #4	@ (adr r2, 802abe0 <mg_json_get+0xa4>)
 802abdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802abe0:	0802abf1 	.word	0x0802abf1
 802abe4:	0802aed9 	.word	0x0802aed9
 802abe8:	0802b067 	.word	0x0802b067
 802abec:	0802b07d 	.word	0x0802b07d
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 802abf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802abf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802abf4:	429a      	cmp	r2, r3
 802abf6:	d101      	bne.n	802abfc <mg_json_get+0xc0>
 802abf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802abfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 802abfc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ac00:	2b7b      	cmp	r3, #123	@ 0x7b
 802ac02:	d12b      	bne.n	802ac5c <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802ac04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802ac06:	2b1d      	cmp	r3, #29
 802ac08:	dd02      	ble.n	802ac10 <mg_json_get+0xd4>
 802ac0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802ac0e:	e2cb      	b.n	802b1a8 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 802ac10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ac12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ac14:	429a      	cmp	r2, r3
 802ac16:	d114      	bne.n	802ac42 <mg_json_get+0x106>
 802ac18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ac1a:	687a      	ldr	r2, [r7, #4]
 802ac1c:	4413      	add	r3, r2
 802ac1e:	781b      	ldrb	r3, [r3, #0]
 802ac20:	2b2e      	cmp	r3, #46	@ 0x2e
 802ac22:	d10e      	bne.n	802ac42 <mg_json_get+0x106>
 802ac24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802ac26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ac28:	429a      	cmp	r2, r3
 802ac2a:	d10a      	bne.n	802ac42 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 802ac2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ac2e:	3301      	adds	r3, #1
 802ac30:	657b      	str	r3, [r7, #84]	@ 0x54
 802ac32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ac34:	3301      	adds	r3, #1
 802ac36:	653b      	str	r3, [r7, #80]	@ 0x50
 802ac38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802ac3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802ac3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ac40:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 802ac42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802ac44:	1c5a      	adds	r2, r3, #1
 802ac46:	65ba      	str	r2, [r7, #88]	@ 0x58
 802ac48:	3368      	adds	r3, #104	@ 0x68
 802ac4a:	443b      	add	r3, r7
 802ac4c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 802ac50:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 802ac54:	2301      	movs	r3, #1
 802ac56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 802ac5a:	e29b      	b.n	802b194 <mg_json_get+0x658>
        } else if (c == '[') {
 802ac5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ac60:	2b5b      	cmp	r3, #91	@ 0x5b
 802ac62:	d14e      	bne.n	802ad02 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802ac64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802ac66:	2b1d      	cmp	r3, #29
 802ac68:	dd02      	ble.n	802ac70 <mg_json_get+0x134>
 802ac6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802ac6e:	e29b      	b.n	802b1a8 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 802ac70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ac72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ac74:	429a      	cmp	r2, r3
 802ac76:	d13a      	bne.n	802acee <mg_json_get+0x1b2>
 802ac78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ac7a:	687a      	ldr	r2, [r7, #4]
 802ac7c:	4413      	add	r3, r2
 802ac7e:	781b      	ldrb	r3, [r3, #0]
 802ac80:	2b5b      	cmp	r3, #91	@ 0x5b
 802ac82:	d134      	bne.n	802acee <mg_json_get+0x1b2>
 802ac84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802ac86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802ac88:	429a      	cmp	r2, r3
 802ac8a:	d130      	bne.n	802acee <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 802ac8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ac8e:	3301      	adds	r3, #1
 802ac90:	657b      	str	r3, [r7, #84]	@ 0x54
 802ac92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ac94:	3301      	adds	r3, #1
 802ac96:	653b      	str	r3, [r7, #80]	@ 0x50
 802ac98:	2300      	movs	r3, #0
 802ac9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 802ac9c:	2300      	movs	r3, #0
 802ac9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 802aca0:	e010      	b.n	802acc4 <mg_json_get+0x188>
              ei *= 10;
 802aca2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802aca4:	4613      	mov	r3, r2
 802aca6:	009b      	lsls	r3, r3, #2
 802aca8:	4413      	add	r3, r2
 802acaa:	005b      	lsls	r3, r3, #1
 802acac:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 802acae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802acb0:	687a      	ldr	r2, [r7, #4]
 802acb2:	4413      	add	r3, r2
 802acb4:	781b      	ldrb	r3, [r3, #0]
 802acb6:	3b30      	subs	r3, #48	@ 0x30
 802acb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802acba:	4413      	add	r3, r2
 802acbc:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 802acbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802acc0:	3301      	adds	r3, #1
 802acc2:	653b      	str	r3, [r7, #80]	@ 0x50
 802acc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802acc6:	687a      	ldr	r2, [r7, #4]
 802acc8:	4413      	add	r3, r2
 802acca:	781b      	ldrb	r3, [r3, #0]
 802accc:	2b5d      	cmp	r3, #93	@ 0x5d
 802acce:	d005      	beq.n	802acdc <mg_json_get+0x1a0>
 802acd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802acd2:	687a      	ldr	r2, [r7, #4]
 802acd4:	4413      	add	r3, r2
 802acd6:	781b      	ldrb	r3, [r3, #0]
 802acd8:	2b00      	cmp	r3, #0
 802acda:	d1e2      	bne.n	802aca2 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 802acdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802acde:	687a      	ldr	r2, [r7, #4]
 802ace0:	4413      	add	r3, r2
 802ace2:	781b      	ldrb	r3, [r3, #0]
 802ace4:	2b00      	cmp	r3, #0
 802ace6:	d002      	beq.n	802acee <mg_json_get+0x1b2>
 802ace8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802acea:	3301      	adds	r3, #1
 802acec:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 802acee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802acf0:	1c5a      	adds	r2, r3, #1
 802acf2:	65ba      	str	r2, [r7, #88]	@ 0x58
 802acf4:	3368      	adds	r3, #104	@ 0x68
 802acf6:	443b      	add	r3, r7
 802acf8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 802acfc:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 802ad00:	e248      	b.n	802b194 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 802ad02:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ad06:	2b5d      	cmp	r3, #93	@ 0x5d
 802ad08:	d13a      	bne.n	802ad80 <mg_json_get+0x244>
 802ad0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802ad0c:	2b00      	cmp	r3, #0
 802ad0e:	dd37      	ble.n	802ad80 <mg_json_get+0x244>
          MG_EOO(']');
 802ad10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ad12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ad14:	429a      	cmp	r2, r3
 802ad16:	d106      	bne.n	802ad26 <mg_json_get+0x1ea>
 802ad18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802ad1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ad1c:	429a      	cmp	r2, r3
 802ad1e:	d002      	beq.n	802ad26 <mg_json_get+0x1ea>
 802ad20:	f06f 0302 	mvn.w	r3, #2
 802ad24:	e240      	b.n	802b1a8 <mg_json_get+0x66c>
 802ad26:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 802ad2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802ad2c:	3b01      	subs	r3, #1
 802ad2e:	3368      	adds	r3, #104	@ 0x68
 802ad30:	443b      	add	r3, r7
 802ad32:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 802ad36:	3302      	adds	r3, #2
 802ad38:	429a      	cmp	r2, r3
 802ad3a:	d002      	beq.n	802ad42 <mg_json_get+0x206>
 802ad3c:	f06f 0301 	mvn.w	r3, #1
 802ad40:	e232      	b.n	802b1a8 <mg_json_get+0x66c>
 802ad42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802ad44:	3b01      	subs	r3, #1
 802ad46:	65bb      	str	r3, [r7, #88]	@ 0x58
 802ad48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ad4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ad4c:	429a      	cmp	r2, r3
 802ad4e:	f040 809c 	bne.w	802ae8a <mg_json_get+0x34e>
 802ad52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ad54:	687a      	ldr	r2, [r7, #4]
 802ad56:	4413      	add	r3, r2
 802ad58:	781b      	ldrb	r3, [r3, #0]
 802ad5a:	2b00      	cmp	r3, #0
 802ad5c:	f040 8095 	bne.w	802ae8a <mg_json_get+0x34e>
 802ad60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802ad62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ad64:	429a      	cmp	r2, r3
 802ad66:	f040 8090 	bne.w	802ae8a <mg_json_get+0x34e>
 802ad6a:	683b      	ldr	r3, [r7, #0]
 802ad6c:	2b00      	cmp	r3, #0
 802ad6e:	d005      	beq.n	802ad7c <mg_json_get+0x240>
 802ad70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802ad72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802ad74:	1ad3      	subs	r3, r2, r3
 802ad76:	1c5a      	adds	r2, r3, #1
 802ad78:	683b      	ldr	r3, [r7, #0]
 802ad7a:	601a      	str	r2, [r3, #0]
 802ad7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802ad7e:	e213      	b.n	802b1a8 <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 802ad80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ad84:	2b74      	cmp	r3, #116	@ 0x74
 802ad86:	d113      	bne.n	802adb0 <mg_json_get+0x274>
 802ad88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ad8a:	3303      	adds	r3, #3
 802ad8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802ad8e:	429a      	cmp	r2, r3
 802ad90:	dd0e      	ble.n	802adb0 <mg_json_get+0x274>
 802ad92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ad94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802ad96:	4413      	add	r3, r2
 802ad98:	2204      	movs	r2, #4
 802ad9a:	4998      	ldr	r1, [pc, #608]	@ (802affc <mg_json_get+0x4c0>)
 802ad9c:	4618      	mov	r0, r3
 802ad9e:	f00b f90b 	bl	8035fb8 <memcmp>
 802ada2:	4603      	mov	r3, r0
 802ada4:	2b00      	cmp	r3, #0
 802ada6:	d103      	bne.n	802adb0 <mg_json_get+0x274>
          i += 3;
 802ada8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802adaa:	3303      	adds	r3, #3
 802adac:	663b      	str	r3, [r7, #96]	@ 0x60
 802adae:	e06c      	b.n	802ae8a <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 802adb0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802adb4:	2b6e      	cmp	r3, #110	@ 0x6e
 802adb6:	d113      	bne.n	802ade0 <mg_json_get+0x2a4>
 802adb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802adba:	3303      	adds	r3, #3
 802adbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802adbe:	429a      	cmp	r2, r3
 802adc0:	dd0e      	ble.n	802ade0 <mg_json_get+0x2a4>
 802adc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802adc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802adc6:	4413      	add	r3, r2
 802adc8:	2204      	movs	r2, #4
 802adca:	498d      	ldr	r1, [pc, #564]	@ (802b000 <mg_json_get+0x4c4>)
 802adcc:	4618      	mov	r0, r3
 802adce:	f00b f8f3 	bl	8035fb8 <memcmp>
 802add2:	4603      	mov	r3, r0
 802add4:	2b00      	cmp	r3, #0
 802add6:	d103      	bne.n	802ade0 <mg_json_get+0x2a4>
          i += 3;
 802add8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802adda:	3303      	adds	r3, #3
 802addc:	663b      	str	r3, [r7, #96]	@ 0x60
 802adde:	e054      	b.n	802ae8a <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 802ade0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ade4:	2b66      	cmp	r3, #102	@ 0x66
 802ade6:	d113      	bne.n	802ae10 <mg_json_get+0x2d4>
 802ade8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802adea:	3304      	adds	r3, #4
 802adec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802adee:	429a      	cmp	r2, r3
 802adf0:	dd0e      	ble.n	802ae10 <mg_json_get+0x2d4>
 802adf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802adf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802adf6:	4413      	add	r3, r2
 802adf8:	2205      	movs	r2, #5
 802adfa:	4982      	ldr	r1, [pc, #520]	@ (802b004 <mg_json_get+0x4c8>)
 802adfc:	4618      	mov	r0, r3
 802adfe:	f00b f8db 	bl	8035fb8 <memcmp>
 802ae02:	4603      	mov	r3, r0
 802ae04:	2b00      	cmp	r3, #0
 802ae06:	d103      	bne.n	802ae10 <mg_json_get+0x2d4>
          i += 4;
 802ae08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ae0a:	3304      	adds	r3, #4
 802ae0c:	663b      	str	r3, [r7, #96]	@ 0x60
 802ae0e:	e03c      	b.n	802ae8a <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 802ae10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ae14:	2b2d      	cmp	r3, #45	@ 0x2d
 802ae16:	d007      	beq.n	802ae28 <mg_json_get+0x2ec>
 802ae18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ae1c:	2b2f      	cmp	r3, #47	@ 0x2f
 802ae1e:	d916      	bls.n	802ae4e <mg_json_get+0x312>
 802ae20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ae24:	2b39      	cmp	r3, #57	@ 0x39
 802ae26:	d812      	bhi.n	802ae4e <mg_json_get+0x312>
          int numlen = 0;
 802ae28:	2300      	movs	r3, #0
 802ae2a:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 802ae2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ae2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802ae30:	18d0      	adds	r0, r2, r3
 802ae32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802ae34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ae36:	1ad3      	subs	r3, r2, r3
 802ae38:	f107 0210 	add.w	r2, r7, #16
 802ae3c:	4619      	mov	r1, r3
 802ae3e:	f7ff fd13 	bl	802a868 <mg_atod>
          i += numlen - 1;
 802ae42:	693b      	ldr	r3, [r7, #16]
 802ae44:	3b01      	subs	r3, #1
 802ae46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802ae48:	4413      	add	r3, r2
 802ae4a:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 802ae4c:	e01d      	b.n	802ae8a <mg_json_get+0x34e>
        } else if (c == '"') {
 802ae4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802ae52:	2b22      	cmp	r3, #34	@ 0x22
 802ae54:	d116      	bne.n	802ae84 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 802ae56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ae58:	3301      	adds	r3, #1
 802ae5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802ae5c:	18d0      	adds	r0, r2, r3
 802ae5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802ae60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802ae62:	1ad3      	subs	r3, r2, r3
 802ae64:	3b01      	subs	r3, #1
 802ae66:	4619      	mov	r1, r3
 802ae68:	f7ff fcba 	bl	802a7e0 <mg_pass_string>
 802ae6c:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 802ae6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ae70:	2b00      	cmp	r3, #0
 802ae72:	da01      	bge.n	802ae78 <mg_json_get+0x33c>
 802ae74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ae76:	e197      	b.n	802b1a8 <mg_json_get+0x66c>
          i += n + 1;
 802ae78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ae7a:	3301      	adds	r3, #1
 802ae7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802ae7e:	4413      	add	r3, r2
 802ae80:	663b      	str	r3, [r7, #96]	@ 0x60
 802ae82:	e002      	b.n	802ae8a <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 802ae84:	f06f 0301 	mvn.w	r3, #1
 802ae88:	e18e      	b.n	802b1a8 <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 802ae8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802ae8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ae8e:	429a      	cmp	r2, r3
 802ae90:	d114      	bne.n	802aebc <mg_json_get+0x380>
 802ae92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ae94:	687a      	ldr	r2, [r7, #4]
 802ae96:	4413      	add	r3, r2
 802ae98:	781b      	ldrb	r3, [r3, #0]
 802ae9a:	2b00      	cmp	r3, #0
 802ae9c:	d10e      	bne.n	802aebc <mg_json_get+0x380>
 802ae9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802aea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802aea2:	429a      	cmp	r2, r3
 802aea4:	d10a      	bne.n	802aebc <mg_json_get+0x380>
 802aea6:	683b      	ldr	r3, [r7, #0]
 802aea8:	2b00      	cmp	r3, #0
 802aeaa:	d005      	beq.n	802aeb8 <mg_json_get+0x37c>
 802aeac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802aeae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802aeb0:	1ad3      	subs	r3, r2, r3
 802aeb2:	1c5a      	adds	r2, r3, #1
 802aeb4:	683b      	ldr	r3, [r7, #0]
 802aeb6:	601a      	str	r2, [r3, #0]
 802aeb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802aeba:	e175      	b.n	802b1a8 <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 802aebc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802aebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802aec0:	429a      	cmp	r2, r3
 802aec2:	d105      	bne.n	802aed0 <mg_json_get+0x394>
 802aec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802aec6:	2b00      	cmp	r3, #0
 802aec8:	db02      	blt.n	802aed0 <mg_json_get+0x394>
 802aeca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802aecc:	3301      	adds	r3, #1
 802aece:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 802aed0:	2303      	movs	r3, #3
 802aed2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 802aed6:	e15d      	b.n	802b194 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 802aed8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802aedc:	2b22      	cmp	r3, #34	@ 0x22
 802aede:	d170      	bne.n	802afc2 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 802aee0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802aee2:	3301      	adds	r3, #1
 802aee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802aee6:	18d0      	adds	r0, r2, r3
 802aee8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802aeea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802aeec:	1ad3      	subs	r3, r2, r3
 802aeee:	3b01      	subs	r3, #1
 802aef0:	4619      	mov	r1, r3
 802aef2:	f7ff fc75 	bl	802a7e0 <mg_pass_string>
 802aef6:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 802aef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802aefa:	2b00      	cmp	r3, #0
 802aefc:	da01      	bge.n	802af02 <mg_json_get+0x3c6>
 802aefe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802af00:	e152      	b.n	802b1a8 <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 802af02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802af04:	1c5a      	adds	r2, r3, #1
 802af06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802af08:	4413      	add	r3, r2
 802af0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802af0c:	429a      	cmp	r2, r3
 802af0e:	dc02      	bgt.n	802af16 <mg_json_get+0x3da>
 802af10:	f06f 0302 	mvn.w	r3, #2
 802af14:	e148      	b.n	802b1a8 <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 802af16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802af18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802af1a:	429a      	cmp	r2, r3
 802af1c:	da02      	bge.n	802af24 <mg_json_get+0x3e8>
 802af1e:	f06f 0302 	mvn.w	r3, #2
 802af22:	e141      	b.n	802b1a8 <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 802af24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802af26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802af28:	429a      	cmp	r2, r3
 802af2a:	d109      	bne.n	802af40 <mg_json_get+0x404>
 802af2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802af2e:	3b01      	subs	r3, #1
 802af30:	687a      	ldr	r2, [r7, #4]
 802af32:	4413      	add	r3, r2
 802af34:	781b      	ldrb	r3, [r3, #0]
 802af36:	2b2e      	cmp	r3, #46	@ 0x2e
 802af38:	d002      	beq.n	802af40 <mg_json_get+0x404>
 802af3a:	f06f 0302 	mvn.w	r3, #2
 802af3e:	e133      	b.n	802b1a8 <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 802af40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802af42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802af44:	429a      	cmp	r2, r3
 802af46:	d133      	bne.n	802afb0 <mg_json_get+0x474>
 802af48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802af4a:	3b01      	subs	r3, #1
 802af4c:	687a      	ldr	r2, [r7, #4]
 802af4e:	4413      	add	r3, r2
 802af50:	781b      	ldrb	r3, [r3, #0]
 802af52:	2b2e      	cmp	r3, #46	@ 0x2e
 802af54:	d12c      	bne.n	802afb0 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 802af56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802af58:	3301      	adds	r3, #1
 802af5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802af5c:	18d0      	adds	r0, r2, r3
 802af5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802af60:	687a      	ldr	r2, [r7, #4]
 802af62:	4413      	add	r3, r2
 802af64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802af66:	4619      	mov	r1, r3
 802af68:	f00b f8ef 	bl	803614a <strncmp>
 802af6c:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 802af6e:	2b00      	cmp	r3, #0
 802af70:	d11e      	bne.n	802afb0 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 802af72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802af74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802af76:	4413      	add	r3, r2
 802af78:	461a      	mov	r2, r3
 802af7a:	687b      	ldr	r3, [r7, #4]
 802af7c:	4413      	add	r3, r2
 802af7e:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 802af80:	2b00      	cmp	r3, #0
 802af82:	d011      	beq.n	802afa8 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 802af84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802af86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802af88:	4413      	add	r3, r2
 802af8a:	461a      	mov	r2, r3
 802af8c:	687b      	ldr	r3, [r7, #4]
 802af8e:	4413      	add	r3, r2
 802af90:	781b      	ldrb	r3, [r3, #0]
 802af92:	2b2e      	cmp	r3, #46	@ 0x2e
 802af94:	d008      	beq.n	802afa8 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 802af96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802af98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802af9a:	4413      	add	r3, r2
 802af9c:	461a      	mov	r2, r3
 802af9e:	687b      	ldr	r3, [r7, #4]
 802afa0:	4413      	add	r3, r2
 802afa2:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 802afa4:	2b5b      	cmp	r3, #91	@ 0x5b
 802afa6:	d103      	bne.n	802afb0 <mg_json_get+0x474>
            pos += n;
 802afa8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802afaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802afac:	4413      	add	r3, r2
 802afae:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 802afb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802afb2:	3301      	adds	r3, #1
 802afb4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802afb6:	4413      	add	r3, r2
 802afb8:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 802afba:	2302      	movs	r3, #2
 802afbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 802afc0:	e0e7      	b.n	802b192 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 802afc2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802afc6:	2b7d      	cmp	r3, #125	@ 0x7d
 802afc8:	d14a      	bne.n	802b060 <mg_json_get+0x524>
          MG_EOO('}');
 802afca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802afcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802afce:	429a      	cmp	r2, r3
 802afd0:	d106      	bne.n	802afe0 <mg_json_get+0x4a4>
 802afd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802afd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802afd6:	429a      	cmp	r2, r3
 802afd8:	d002      	beq.n	802afe0 <mg_json_get+0x4a4>
 802afda:	f06f 0302 	mvn.w	r3, #2
 802afde:	e0e3      	b.n	802b1a8 <mg_json_get+0x66c>
 802afe0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 802afe4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802afe6:	3b01      	subs	r3, #1
 802afe8:	3368      	adds	r3, #104	@ 0x68
 802afea:	443b      	add	r3, r7
 802afec:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 802aff0:	3302      	adds	r3, #2
 802aff2:	429a      	cmp	r2, r3
 802aff4:	d008      	beq.n	802b008 <mg_json_get+0x4cc>
 802aff6:	f06f 0301 	mvn.w	r3, #1
 802affa:	e0d5      	b.n	802b1a8 <mg_json_get+0x66c>
 802affc:	08042e88 	.word	0x08042e88
 802b000:	08042e90 	.word	0x08042e90
 802b004:	08042e98 	.word	0x08042e98
 802b008:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802b00a:	3b01      	subs	r3, #1
 802b00c:	65bb      	str	r3, [r7, #88]	@ 0x58
 802b00e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802b010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802b012:	429a      	cmp	r2, r3
 802b014:	d114      	bne.n	802b040 <mg_json_get+0x504>
 802b016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802b018:	687a      	ldr	r2, [r7, #4]
 802b01a:	4413      	add	r3, r2
 802b01c:	781b      	ldrb	r3, [r3, #0]
 802b01e:	2b00      	cmp	r3, #0
 802b020:	d10e      	bne.n	802b040 <mg_json_get+0x504>
 802b022:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802b024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802b026:	429a      	cmp	r2, r3
 802b028:	d10a      	bne.n	802b040 <mg_json_get+0x504>
 802b02a:	683b      	ldr	r3, [r7, #0]
 802b02c:	2b00      	cmp	r3, #0
 802b02e:	d005      	beq.n	802b03c <mg_json_get+0x500>
 802b030:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802b032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802b034:	1ad3      	subs	r3, r2, r3
 802b036:	1c5a      	adds	r2, r3, #1
 802b038:	683b      	ldr	r3, [r7, #0]
 802b03a:	601a      	str	r2, [r3, #0]
 802b03c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802b03e:	e0b3      	b.n	802b1a8 <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 802b040:	2303      	movs	r3, #3
 802b042:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 802b046:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802b048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802b04a:	429a      	cmp	r2, r3
 802b04c:	f040 80a1 	bne.w	802b192 <mg_json_get+0x656>
 802b050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802b052:	2b00      	cmp	r3, #0
 802b054:	f2c0 809d 	blt.w	802b192 <mg_json_get+0x656>
 802b058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802b05a:	3301      	adds	r3, #1
 802b05c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 802b05e:	e098      	b.n	802b192 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 802b060:	f06f 0301 	mvn.w	r3, #1
 802b064:	e0a0      	b.n	802b1a8 <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 802b066:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802b06a:	2b3a      	cmp	r3, #58	@ 0x3a
 802b06c:	d103      	bne.n	802b076 <mg_json_get+0x53a>
          expecting = S_VALUE;
 802b06e:	2300      	movs	r3, #0
 802b070:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 802b074:	e08e      	b.n	802b194 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 802b076:	f06f 0301 	mvn.w	r3, #1
 802b07a:	e095      	b.n	802b1a8 <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 802b07c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802b07e:	2b00      	cmp	r3, #0
 802b080:	dc02      	bgt.n	802b088 <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 802b082:	f06f 0301 	mvn.w	r3, #1
 802b086:	e08f      	b.n	802b1a8 <mg_json_get+0x66c>
        } else if (c == ',') {
 802b088:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802b08c:	2b2c      	cmp	r3, #44	@ 0x2c
 802b08e:	d10d      	bne.n	802b0ac <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 802b090:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802b092:	3b01      	subs	r3, #1
 802b094:	3368      	adds	r3, #104	@ 0x68
 802b096:	443b      	add	r3, r7
 802b098:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 802b09c:	2b7b      	cmp	r3, #123	@ 0x7b
 802b09e:	bf0c      	ite	eq
 802b0a0:	2301      	moveq	r3, #1
 802b0a2:	2300      	movne	r3, #0
 802b0a4:	b2db      	uxtb	r3, r3
 802b0a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 802b0aa:	e073      	b.n	802b194 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 802b0ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802b0b0:	2b5d      	cmp	r3, #93	@ 0x5d
 802b0b2:	d003      	beq.n	802b0bc <mg_json_get+0x580>
 802b0b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802b0b8:	2b7d      	cmp	r3, #125	@ 0x7d
 802b0ba:	d163      	bne.n	802b184 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 802b0bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802b0be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802b0c0:	429a      	cmp	r2, r3
 802b0c2:	d10d      	bne.n	802b0e0 <mg_json_get+0x5a4>
 802b0c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802b0c8:	2b7d      	cmp	r3, #125	@ 0x7d
 802b0ca:	d109      	bne.n	802b0e0 <mg_json_get+0x5a4>
 802b0cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802b0ce:	3b01      	subs	r3, #1
 802b0d0:	687a      	ldr	r2, [r7, #4]
 802b0d2:	4413      	add	r3, r2
 802b0d4:	781b      	ldrb	r3, [r3, #0]
 802b0d6:	2b2e      	cmp	r3, #46	@ 0x2e
 802b0d8:	d102      	bne.n	802b0e0 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 802b0da:	f06f 0302 	mvn.w	r3, #2
 802b0de:	e063      	b.n	802b1a8 <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 802b0e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802b0e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802b0e4:	429a      	cmp	r2, r3
 802b0e6:	d10d      	bne.n	802b104 <mg_json_get+0x5c8>
 802b0e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802b0ec:	2b5d      	cmp	r3, #93	@ 0x5d
 802b0ee:	d109      	bne.n	802b104 <mg_json_get+0x5c8>
 802b0f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802b0f2:	3b01      	subs	r3, #1
 802b0f4:	687a      	ldr	r2, [r7, #4]
 802b0f6:	4413      	add	r3, r2
 802b0f8:	781b      	ldrb	r3, [r3, #0]
 802b0fa:	2b2c      	cmp	r3, #44	@ 0x2c
 802b0fc:	d102      	bne.n	802b104 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 802b0fe:	f06f 0302 	mvn.w	r3, #2
 802b102:	e051      	b.n	802b1a8 <mg_json_get+0x66c>
          MG_EOO('O');
 802b104:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802b106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802b108:	429a      	cmp	r2, r3
 802b10a:	d106      	bne.n	802b11a <mg_json_get+0x5de>
 802b10c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802b10e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802b110:	429a      	cmp	r2, r3
 802b112:	d002      	beq.n	802b11a <mg_json_get+0x5de>
 802b114:	f06f 0302 	mvn.w	r3, #2
 802b118:	e046      	b.n	802b1a8 <mg_json_get+0x66c>
 802b11a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 802b11e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802b120:	3b01      	subs	r3, #1
 802b122:	3368      	adds	r3, #104	@ 0x68
 802b124:	443b      	add	r3, r7
 802b126:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 802b12a:	3302      	adds	r3, #2
 802b12c:	429a      	cmp	r2, r3
 802b12e:	d002      	beq.n	802b136 <mg_json_get+0x5fa>
 802b130:	f06f 0301 	mvn.w	r3, #1
 802b134:	e038      	b.n	802b1a8 <mg_json_get+0x66c>
 802b136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802b138:	3b01      	subs	r3, #1
 802b13a:	65bb      	str	r3, [r7, #88]	@ 0x58
 802b13c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802b13e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802b140:	429a      	cmp	r2, r3
 802b142:	d114      	bne.n	802b16e <mg_json_get+0x632>
 802b144:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802b146:	687a      	ldr	r2, [r7, #4]
 802b148:	4413      	add	r3, r2
 802b14a:	781b      	ldrb	r3, [r3, #0]
 802b14c:	2b00      	cmp	r3, #0
 802b14e:	d10e      	bne.n	802b16e <mg_json_get+0x632>
 802b150:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802b152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802b154:	429a      	cmp	r2, r3
 802b156:	d10a      	bne.n	802b16e <mg_json_get+0x632>
 802b158:	683b      	ldr	r3, [r7, #0]
 802b15a:	2b00      	cmp	r3, #0
 802b15c:	d005      	beq.n	802b16a <mg_json_get+0x62e>
 802b15e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802b160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802b162:	1ad3      	subs	r3, r2, r3
 802b164:	1c5a      	adds	r2, r3, #1
 802b166:	683b      	ldr	r3, [r7, #0]
 802b168:	601a      	str	r2, [r3, #0]
 802b16a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802b16c:	e01c      	b.n	802b1a8 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 802b16e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802b170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802b172:	429a      	cmp	r2, r3
 802b174:	d109      	bne.n	802b18a <mg_json_get+0x64e>
 802b176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802b178:	2b00      	cmp	r3, #0
 802b17a:	db06      	blt.n	802b18a <mg_json_get+0x64e>
 802b17c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802b17e:	3301      	adds	r3, #1
 802b180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802b182:	e002      	b.n	802b18a <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 802b184:	f06f 0301 	mvn.w	r3, #1
 802b188:	e00e      	b.n	802b1a8 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 802b18a:	bf00      	nop
        break;
 802b18c:	e002      	b.n	802b194 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 802b18e:	bf00      	nop
 802b190:	e000      	b.n	802b194 <mg_json_get+0x658>
        break;
 802b192:	bf00      	nop
  for (i = 0; i < len; i++) {
 802b194:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802b196:	3301      	adds	r3, #1
 802b198:	663b      	str	r3, [r7, #96]	@ 0x60
 802b19a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 802b19c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802b19e:	429a      	cmp	r2, r3
 802b1a0:	f6ff acfc 	blt.w	802ab9c <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 802b1a4:	f06f 0302 	mvn.w	r3, #2
}
 802b1a8:	4618      	mov	r0, r3
 802b1aa:	376c      	adds	r7, #108	@ 0x6c
 802b1ac:	46bd      	mov	sp, r7
 802b1ae:	bd90      	pop	{r4, r7, pc}

0802b1b0 <mg_json_get_num>:
  int len = 0, ofs = mg_json_get(json, path, &len);
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
                  (size_t) (len < 0 ? 0 : len));
}

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 802b1b0:	b590      	push	{r4, r7, lr}
 802b1b2:	b089      	sub	sp, #36	@ 0x24
 802b1b4:	af00      	add	r7, sp, #0
 802b1b6:	f107 0408 	add.w	r4, r7, #8
 802b1ba:	e884 0003 	stmia.w	r4, {r0, r1}
 802b1be:	607a      	str	r2, [r7, #4]
 802b1c0:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 802b1c2:	2300      	movs	r3, #0
 802b1c4:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 802b1c6:	f107 0314 	add.w	r3, r7, #20
 802b1ca:	687a      	ldr	r2, [r7, #4]
 802b1cc:	f107 0108 	add.w	r1, r7, #8
 802b1d0:	c903      	ldmia	r1, {r0, r1}
 802b1d2:	f7ff fcb3 	bl	802ab3c <mg_json_get>
 802b1d6:	61b8      	str	r0, [r7, #24]
 802b1d8:	69bb      	ldr	r3, [r7, #24]
 802b1da:	2b00      	cmp	r3, #0
 802b1dc:	db25      	blt.n	802b22a <mg_json_get_num+0x7a>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 802b1de:	68ba      	ldr	r2, [r7, #8]
 802b1e0:	69bb      	ldr	r3, [r7, #24]
 802b1e2:	4413      	add	r3, r2
 802b1e4:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 802b1e6:	2b2d      	cmp	r3, #45	@ 0x2d
 802b1e8:	d00b      	beq.n	802b202 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 802b1ea:	68ba      	ldr	r2, [r7, #8]
 802b1ec:	69bb      	ldr	r3, [r7, #24]
 802b1ee:	4413      	add	r3, r2
 802b1f0:	781b      	ldrb	r3, [r3, #0]
 802b1f2:	2b2f      	cmp	r3, #47	@ 0x2f
 802b1f4:	d919      	bls.n	802b22a <mg_json_get_num+0x7a>
 802b1f6:	68ba      	ldr	r2, [r7, #8]
 802b1f8:	69bb      	ldr	r3, [r7, #24]
 802b1fa:	4413      	add	r3, r2
 802b1fc:	781b      	ldrb	r3, [r3, #0]
 802b1fe:	2b39      	cmp	r3, #57	@ 0x39
 802b200:	d813      	bhi.n	802b22a <mg_json_get_num+0x7a>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 802b202:	683b      	ldr	r3, [r7, #0]
 802b204:	2b00      	cmp	r3, #0
 802b206:	d00e      	beq.n	802b226 <mg_json_get_num+0x76>
 802b208:	68ba      	ldr	r2, [r7, #8]
 802b20a:	69bb      	ldr	r3, [r7, #24]
 802b20c:	4413      	add	r3, r2
 802b20e:	6979      	ldr	r1, [r7, #20]
 802b210:	2200      	movs	r2, #0
 802b212:	4618      	mov	r0, r3
 802b214:	f7ff fb28 	bl	802a868 <mg_atod>
 802b218:	eeb0 7a40 	vmov.f32	s14, s0
 802b21c:	eef0 7a60 	vmov.f32	s15, s1
 802b220:	683b      	ldr	r3, [r7, #0]
 802b222:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 802b226:	2301      	movs	r3, #1
 802b228:	61fb      	str	r3, [r7, #28]
  }
  return found;
 802b22a:	69fb      	ldr	r3, [r7, #28]
 802b22c:	2b00      	cmp	r3, #0
 802b22e:	bf14      	ite	ne
 802b230:	2301      	movne	r3, #1
 802b232:	2300      	moveq	r3, #0
 802b234:	b2db      	uxtb	r3, r3
}
 802b236:	4618      	mov	r0, r3
 802b238:	3724      	adds	r7, #36	@ 0x24
 802b23a:	46bd      	mov	sp, r7
 802b23c:	bd90      	pop	{r4, r7, pc}

0802b23e <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 802b23e:	b590      	push	{r4, r7, lr}
 802b240:	b087      	sub	sp, #28
 802b242:	af00      	add	r7, sp, #0
 802b244:	f107 0408 	add.w	r4, r7, #8
 802b248:	e884 0003 	stmia.w	r4, {r0, r1}
 802b24c:	607a      	str	r2, [r7, #4]
 802b24e:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 802b250:	2300      	movs	r3, #0
 802b252:	617b      	str	r3, [r7, #20]
 802b254:	2300      	movs	r3, #0
 802b256:	687a      	ldr	r2, [r7, #4]
 802b258:	f107 0108 	add.w	r1, r7, #8
 802b25c:	c903      	ldmia	r1, {r0, r1}
 802b25e:	f7ff fc6d 	bl	802ab3c <mg_json_get>
 802b262:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 802b264:	693b      	ldr	r3, [r7, #16]
 802b266:	2b00      	cmp	r3, #0
 802b268:	db1b      	blt.n	802b2a2 <mg_json_get_bool+0x64>
 802b26a:	68ba      	ldr	r2, [r7, #8]
 802b26c:	693b      	ldr	r3, [r7, #16]
 802b26e:	4413      	add	r3, r2
 802b270:	781b      	ldrb	r3, [r3, #0]
 802b272:	2b74      	cmp	r3, #116	@ 0x74
 802b274:	d005      	beq.n	802b282 <mg_json_get_bool+0x44>
 802b276:	68ba      	ldr	r2, [r7, #8]
 802b278:	693b      	ldr	r3, [r7, #16]
 802b27a:	4413      	add	r3, r2
 802b27c:	781b      	ldrb	r3, [r3, #0]
 802b27e:	2b66      	cmp	r3, #102	@ 0x66
 802b280:	d10f      	bne.n	802b2a2 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 802b282:	683b      	ldr	r3, [r7, #0]
 802b284:	2b00      	cmp	r3, #0
 802b286:	d00a      	beq.n	802b29e <mg_json_get_bool+0x60>
 802b288:	68ba      	ldr	r2, [r7, #8]
 802b28a:	693b      	ldr	r3, [r7, #16]
 802b28c:	4413      	add	r3, r2
 802b28e:	781b      	ldrb	r3, [r3, #0]
 802b290:	2b74      	cmp	r3, #116	@ 0x74
 802b292:	bf0c      	ite	eq
 802b294:	2301      	moveq	r3, #1
 802b296:	2300      	movne	r3, #0
 802b298:	b2da      	uxtb	r2, r3
 802b29a:	683b      	ldr	r3, [r7, #0]
 802b29c:	701a      	strb	r2, [r3, #0]
    found = 1;
 802b29e:	2301      	movs	r3, #1
 802b2a0:	617b      	str	r3, [r7, #20]
  }
  return found;
 802b2a2:	697b      	ldr	r3, [r7, #20]
 802b2a4:	2b00      	cmp	r3, #0
 802b2a6:	bf14      	ite	ne
 802b2a8:	2301      	movne	r3, #1
 802b2aa:	2300      	moveq	r3, #0
 802b2ac:	b2db      	uxtb	r3, r3
}
 802b2ae:	4618      	mov	r0, r3
 802b2b0:	371c      	adds	r7, #28
 802b2b2:	46bd      	mov	sp, r7
 802b2b4:	bd90      	pop	{r4, r7, pc}

0802b2b6 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 802b2b6:	b590      	push	{r4, r7, lr}
 802b2b8:	b08d      	sub	sp, #52	@ 0x34
 802b2ba:	af02      	add	r7, sp, #8
 802b2bc:	f107 0408 	add.w	r4, r7, #8
 802b2c0:	e884 0003 	stmia.w	r4, {r0, r1}
 802b2c4:	607a      	str	r2, [r7, #4]
 802b2c6:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 802b2c8:	2300      	movs	r3, #0
 802b2ca:	627b      	str	r3, [r7, #36]	@ 0x24
 802b2cc:	2300      	movs	r3, #0
 802b2ce:	623b      	str	r3, [r7, #32]
 802b2d0:	e064      	b.n	802b39c <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 802b2d2:	68ba      	ldr	r2, [r7, #8]
 802b2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b2d6:	4413      	add	r3, r2
 802b2d8:	781b      	ldrb	r3, [r3, #0]
 802b2da:	2b5c      	cmp	r3, #92	@ 0x5c
 802b2dc:	d12c      	bne.n	802b338 <mg_json_unescape+0x82>
 802b2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b2e0:	1d5a      	adds	r2, r3, #5
 802b2e2:	68fb      	ldr	r3, [r7, #12]
 802b2e4:	429a      	cmp	r2, r3
 802b2e6:	d227      	bcs.n	802b338 <mg_json_unescape+0x82>
 802b2e8:	68ba      	ldr	r2, [r7, #8]
 802b2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b2ec:	3301      	adds	r3, #1
 802b2ee:	4413      	add	r3, r2
 802b2f0:	781b      	ldrb	r3, [r3, #0]
 802b2f2:	2b75      	cmp	r3, #117	@ 0x75
 802b2f4:	d120      	bne.n	802b338 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 802b2f6:	68ba      	ldr	r2, [r7, #8]
 802b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b2fa:	3302      	adds	r3, #2
 802b2fc:	18d1      	adds	r1, r2, r3
 802b2fe:	f107 0314 	add.w	r3, r7, #20
 802b302:	2204      	movs	r2, #4
 802b304:	4618      	mov	r0, r3
 802b306:	f006 fe02 	bl	8031f0e <mg_str_n>
 802b30a:	687a      	ldr	r2, [r7, #4]
 802b30c:	6a3b      	ldr	r3, [r7, #32]
 802b30e:	4413      	add	r3, r2
 802b310:	2201      	movs	r2, #1
 802b312:	9200      	str	r2, [sp, #0]
 802b314:	2210      	movs	r2, #16
 802b316:	f107 0114 	add.w	r1, r7, #20
 802b31a:	c903      	ldmia	r1, {r0, r1}
 802b31c:	f006 fffe 	bl	803231c <mg_str_to_num>
 802b320:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 802b322:	f083 0301 	eor.w	r3, r3, #1
 802b326:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 802b328:	2b00      	cmp	r3, #0
 802b32a:	d001      	beq.n	802b330 <mg_json_unescape+0x7a>
        return false;
 802b32c:	2300      	movs	r3, #0
 802b32e:	e04c      	b.n	802b3ca <mg_json_unescape+0x114>
      i += 5;
 802b330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b332:	3305      	adds	r3, #5
 802b334:	627b      	str	r3, [r7, #36]	@ 0x24
 802b336:	e02b      	b.n	802b390 <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 802b338:	68ba      	ldr	r2, [r7, #8]
 802b33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b33c:	4413      	add	r3, r2
 802b33e:	781b      	ldrb	r3, [r3, #0]
 802b340:	2b5c      	cmp	r3, #92	@ 0x5c
 802b342:	d11d      	bne.n	802b380 <mg_json_unescape+0xca>
 802b344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b346:	1c5a      	adds	r2, r3, #1
 802b348:	68fb      	ldr	r3, [r7, #12]
 802b34a:	429a      	cmp	r2, r3
 802b34c:	d218      	bcs.n	802b380 <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 802b34e:	68ba      	ldr	r2, [r7, #8]
 802b350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b352:	3301      	adds	r3, #1
 802b354:	4413      	add	r3, r2
 802b356:	781b      	ldrb	r3, [r3, #0]
 802b358:	2100      	movs	r1, #0
 802b35a:	4618      	mov	r0, r3
 802b35c:	f7ff fa10 	bl	802a780 <json_esc>
 802b360:	4603      	mov	r3, r0
 802b362:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 802b364:	7ffb      	ldrb	r3, [r7, #31]
 802b366:	2b00      	cmp	r3, #0
 802b368:	d101      	bne.n	802b36e <mg_json_unescape+0xb8>
 802b36a:	2300      	movs	r3, #0
 802b36c:	e02d      	b.n	802b3ca <mg_json_unescape+0x114>
      to[j] = c;
 802b36e:	687a      	ldr	r2, [r7, #4]
 802b370:	6a3b      	ldr	r3, [r7, #32]
 802b372:	4413      	add	r3, r2
 802b374:	7ffa      	ldrb	r2, [r7, #31]
 802b376:	701a      	strb	r2, [r3, #0]
      i++;
 802b378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b37a:	3301      	adds	r3, #1
 802b37c:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 802b37e:	e007      	b.n	802b390 <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 802b380:	68ba      	ldr	r2, [r7, #8]
 802b382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b384:	441a      	add	r2, r3
 802b386:	6879      	ldr	r1, [r7, #4]
 802b388:	6a3b      	ldr	r3, [r7, #32]
 802b38a:	440b      	add	r3, r1
 802b38c:	7812      	ldrb	r2, [r2, #0]
 802b38e:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 802b390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b392:	3301      	adds	r3, #1
 802b394:	627b      	str	r3, [r7, #36]	@ 0x24
 802b396:	6a3b      	ldr	r3, [r7, #32]
 802b398:	3301      	adds	r3, #1
 802b39a:	623b      	str	r3, [r7, #32]
 802b39c:	68fb      	ldr	r3, [r7, #12]
 802b39e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802b3a0:	429a      	cmp	r2, r3
 802b3a2:	d203      	bcs.n	802b3ac <mg_json_unescape+0xf6>
 802b3a4:	6a3a      	ldr	r2, [r7, #32]
 802b3a6:	683b      	ldr	r3, [r7, #0]
 802b3a8:	429a      	cmp	r2, r3
 802b3aa:	d392      	bcc.n	802b2d2 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 802b3ac:	6a3a      	ldr	r2, [r7, #32]
 802b3ae:	683b      	ldr	r3, [r7, #0]
 802b3b0:	429a      	cmp	r2, r3
 802b3b2:	d301      	bcc.n	802b3b8 <mg_json_unescape+0x102>
 802b3b4:	2300      	movs	r3, #0
 802b3b6:	e008      	b.n	802b3ca <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 802b3b8:	683b      	ldr	r3, [r7, #0]
 802b3ba:	2b00      	cmp	r3, #0
 802b3bc:	d004      	beq.n	802b3c8 <mg_json_unescape+0x112>
 802b3be:	687a      	ldr	r2, [r7, #4]
 802b3c0:	6a3b      	ldr	r3, [r7, #32]
 802b3c2:	4413      	add	r3, r2
 802b3c4:	2200      	movs	r2, #0
 802b3c6:	701a      	strb	r2, [r3, #0]
  return true;
 802b3c8:	2301      	movs	r3, #1
}
 802b3ca:	4618      	mov	r0, r3
 802b3cc:	372c      	adds	r7, #44	@ 0x2c
 802b3ce:	46bd      	mov	sp, r7
 802b3d0:	bd90      	pop	{r4, r7, pc}

0802b3d2 <mg_json_get_str>:

char *mg_json_get_str(struct mg_str json, const char *path) {
 802b3d2:	b580      	push	{r7, lr}
 802b3d4:	b08a      	sub	sp, #40	@ 0x28
 802b3d6:	af00      	add	r7, sp, #0
 802b3d8:	f107 0308 	add.w	r3, r7, #8
 802b3dc:	e883 0003 	stmia.w	r3, {r0, r1}
 802b3e0:	607a      	str	r2, [r7, #4]
  char *result = NULL;
 802b3e2:	2300      	movs	r3, #0
 802b3e4:	627b      	str	r3, [r7, #36]	@ 0x24
  int len = 0, off = mg_json_get(json, path, &len);
 802b3e6:	2300      	movs	r3, #0
 802b3e8:	617b      	str	r3, [r7, #20]
 802b3ea:	f107 0314 	add.w	r3, r7, #20
 802b3ee:	687a      	ldr	r2, [r7, #4]
 802b3f0:	f107 0108 	add.w	r1, r7, #8
 802b3f4:	c903      	ldmia	r1, {r0, r1}
 802b3f6:	f7ff fba1 	bl	802ab3c <mg_json_get>
 802b3fa:	6238      	str	r0, [r7, #32]
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 802b3fc:	6a3b      	ldr	r3, [r7, #32]
 802b3fe:	2b00      	cmp	r3, #0
 802b400:	db2f      	blt.n	802b462 <mg_json_get_str+0x90>
 802b402:	697b      	ldr	r3, [r7, #20]
 802b404:	2b01      	cmp	r3, #1
 802b406:	dd2c      	ble.n	802b462 <mg_json_get_str+0x90>
 802b408:	68ba      	ldr	r2, [r7, #8]
 802b40a:	6a3b      	ldr	r3, [r7, #32]
 802b40c:	4413      	add	r3, r2
 802b40e:	781b      	ldrb	r3, [r3, #0]
 802b410:	2b22      	cmp	r3, #34	@ 0x22
 802b412:	d126      	bne.n	802b462 <mg_json_get_str+0x90>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 802b414:	697b      	ldr	r3, [r7, #20]
 802b416:	4619      	mov	r1, r3
 802b418:	2001      	movs	r0, #1
 802b41a:	f7f9 fe91 	bl	8025140 <mg_calloc>
 802b41e:	6278      	str	r0, [r7, #36]	@ 0x24
 802b420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b422:	2b00      	cmp	r3, #0
 802b424:	d01d      	beq.n	802b462 <mg_json_get_str+0x90>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 802b426:	68ba      	ldr	r2, [r7, #8]
 802b428:	6a3b      	ldr	r3, [r7, #32]
 802b42a:	3301      	adds	r3, #1
 802b42c:	18d1      	adds	r1, r2, r3
 802b42e:	697b      	ldr	r3, [r7, #20]
 802b430:	3b02      	subs	r3, #2
 802b432:	461a      	mov	r2, r3
 802b434:	f107 0318 	add.w	r3, r7, #24
 802b438:	4618      	mov	r0, r3
 802b43a:	f006 fd68 	bl	8031f0e <mg_str_n>
 802b43e:	697b      	ldr	r3, [r7, #20]
 802b440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802b442:	f107 0118 	add.w	r1, r7, #24
 802b446:	c903      	ldmia	r1, {r0, r1}
 802b448:	f7ff ff35 	bl	802b2b6 <mg_json_unescape>
 802b44c:	4603      	mov	r3, r0
 802b44e:	f083 0301 	eor.w	r3, r3, #1
 802b452:	b2db      	uxtb	r3, r3
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 802b454:	2b00      	cmp	r3, #0
 802b456:	d004      	beq.n	802b462 <mg_json_get_str+0x90>
                          result, (size_t) len)) {
      free(result);
 802b458:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802b45a:	f7f1 fafd 	bl	801ca58 <vPortFree>
      result = NULL;
 802b45e:	2300      	movs	r3, #0
 802b460:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return result;
 802b462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 802b464:	4618      	mov	r0, r3
 802b466:	3728      	adds	r7, #40	@ 0x28
 802b468:	46bd      	mov	sp, r7
 802b46a:	bd80      	pop	{r7, pc}

0802b46c <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 802b46c:	b580      	push	{r7, lr}
 802b46e:	b082      	sub	sp, #8
 802b470:	af00      	add	r7, sp, #0
 802b472:	4603      	mov	r3, r0
 802b474:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 802b476:	4b05      	ldr	r3, [pc, #20]	@ (802b48c <logc+0x20>)
 802b478:	681b      	ldr	r3, [r3, #0]
 802b47a:	4a05      	ldr	r2, [pc, #20]	@ (802b490 <logc+0x24>)
 802b47c:	6811      	ldr	r1, [r2, #0]
 802b47e:	79fa      	ldrb	r2, [r7, #7]
 802b480:	4610      	mov	r0, r2
 802b482:	4798      	blx	r3
}
 802b484:	bf00      	nop
 802b486:	3708      	adds	r7, #8
 802b488:	46bd      	mov	sp, r7
 802b48a:	bd80      	pop	{r7, pc}
 802b48c:	200002ac 	.word	0x200002ac
 802b490:	200181d0 	.word	0x200181d0

0802b494 <logs>:

static void logs(const char *buf, size_t len) {
 802b494:	b580      	push	{r7, lr}
 802b496:	b084      	sub	sp, #16
 802b498:	af00      	add	r7, sp, #0
 802b49a:	6078      	str	r0, [r7, #4]
 802b49c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 802b49e:	2300      	movs	r3, #0
 802b4a0:	60fb      	str	r3, [r7, #12]
 802b4a2:	e009      	b.n	802b4b8 <logs+0x24>
 802b4a4:	687a      	ldr	r2, [r7, #4]
 802b4a6:	68fb      	ldr	r3, [r7, #12]
 802b4a8:	4413      	add	r3, r2
 802b4aa:	781b      	ldrb	r3, [r3, #0]
 802b4ac:	4618      	mov	r0, r3
 802b4ae:	f7ff ffdd 	bl	802b46c <logc>
 802b4b2:	68fb      	ldr	r3, [r7, #12]
 802b4b4:	3301      	adds	r3, #1
 802b4b6:	60fb      	str	r3, [r7, #12]
 802b4b8:	68fa      	ldr	r2, [r7, #12]
 802b4ba:	683b      	ldr	r3, [r7, #0]
 802b4bc:	429a      	cmp	r2, r3
 802b4be:	d3f1      	bcc.n	802b4a4 <logs+0x10>
}
 802b4c0:	bf00      	nop
 802b4c2:	bf00      	nop
 802b4c4:	3710      	adds	r7, #16
 802b4c6:	46bd      	mov	sp, r7
 802b4c8:	bd80      	pop	{r7, pc}
	...

0802b4cc <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 802b4cc:	b590      	push	{r4, r7, lr}
 802b4ce:	b099      	sub	sp, #100	@ 0x64
 802b4d0:	af06      	add	r7, sp, #24
 802b4d2:	60f8      	str	r0, [r7, #12]
 802b4d4:	60b9      	str	r1, [r7, #8]
 802b4d6:	607a      	str	r2, [r7, #4]
 802b4d8:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 802b4da:	212f      	movs	r1, #47	@ 0x2f
 802b4dc:	68b8      	ldr	r0, [r7, #8]
 802b4de:	f00a fe59 	bl	8036194 <strrchr>
 802b4e2:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 802b4e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802b4e6:	2b00      	cmp	r3, #0
 802b4e8:	d104      	bne.n	802b4f4 <mg_log_prefix+0x28>
 802b4ea:	215c      	movs	r1, #92	@ 0x5c
 802b4ec:	68b8      	ldr	r0, [r7, #8]
 802b4ee:	f00a fe51 	bl	8036194 <strrchr>
 802b4f2:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 802b4f4:	f007 fd22 	bl	8032f3c <mg_millis>
 802b4f8:	4602      	mov	r2, r0
 802b4fa:	460b      	mov	r3, r1
 802b4fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 802b4fe:	2900      	cmp	r1, #0
 802b500:	d002      	beq.n	802b508 <mg_log_prefix+0x3c>
 802b502:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 802b504:	3101      	adds	r1, #1
 802b506:	e000      	b.n	802b50a <mg_log_prefix+0x3e>
 802b508:	68b9      	ldr	r1, [r7, #8]
 802b50a:	f107 0414 	add.w	r4, r7, #20
 802b50e:	6838      	ldr	r0, [r7, #0]
 802b510:	9005      	str	r0, [sp, #20]
 802b512:	6878      	ldr	r0, [r7, #4]
 802b514:	9004      	str	r0, [sp, #16]
 802b516:	9103      	str	r1, [sp, #12]
 802b518:	68f9      	ldr	r1, [r7, #12]
 802b51a:	9102      	str	r1, [sp, #8]
 802b51c:	e9cd 2300 	strd	r2, r3, [sp]
 802b520:	4a11      	ldr	r2, [pc, #68]	@ (802b568 <mg_log_prefix+0x9c>)
 802b522:	2129      	movs	r1, #41	@ 0x29
 802b524:	4620      	mov	r0, r4
 802b526:	f005 ffed 	bl	8031504 <mg_snprintf>
 802b52a:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 802b52c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802b52e:	2b27      	cmp	r3, #39	@ 0x27
 802b530:	d90a      	bls.n	802b548 <mg_log_prefix+0x7c>
 802b532:	2327      	movs	r3, #39	@ 0x27
 802b534:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 802b536:	e007      	b.n	802b548 <mg_log_prefix+0x7c>
 802b538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802b53a:	1c5a      	adds	r2, r3, #1
 802b53c:	643a      	str	r2, [r7, #64]	@ 0x40
 802b53e:	3348      	adds	r3, #72	@ 0x48
 802b540:	443b      	add	r3, r7
 802b542:	2220      	movs	r2, #32
 802b544:	f803 2c34 	strb.w	r2, [r3, #-52]
 802b548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802b54a:	2b28      	cmp	r3, #40	@ 0x28
 802b54c:	d9f4      	bls.n	802b538 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 802b54e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802b550:	1e5a      	subs	r2, r3, #1
 802b552:	f107 0314 	add.w	r3, r7, #20
 802b556:	4611      	mov	r1, r2
 802b558:	4618      	mov	r0, r3
 802b55a:	f7ff ff9b 	bl	802b494 <logs>
}
 802b55e:	bf00      	nop
 802b560:	374c      	adds	r7, #76	@ 0x4c
 802b562:	46bd      	mov	sp, r7
 802b564:	bd90      	pop	{r4, r7, pc}
 802b566:	bf00      	nop
 802b568:	08042ea0 	.word	0x08042ea0

0802b56c <mg_log>:

void mg_log(const char *fmt, ...) {
 802b56c:	b40f      	push	{r0, r1, r2, r3}
 802b56e:	b580      	push	{r7, lr}
 802b570:	b082      	sub	sp, #8
 802b572:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 802b574:	f107 0314 	add.w	r3, r7, #20
 802b578:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 802b57a:	4b09      	ldr	r3, [pc, #36]	@ (802b5a0 <mg_log+0x34>)
 802b57c:	6818      	ldr	r0, [r3, #0]
 802b57e:	4b09      	ldr	r3, [pc, #36]	@ (802b5a4 <mg_log+0x38>)
 802b580:	6819      	ldr	r1, [r3, #0]
 802b582:	1d3b      	adds	r3, r7, #4
 802b584:	693a      	ldr	r2, [r7, #16]
 802b586:	f7fb f8ed 	bl	8026764 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 802b58a:	2102      	movs	r1, #2
 802b58c:	4806      	ldr	r0, [pc, #24]	@ (802b5a8 <mg_log+0x3c>)
 802b58e:	f7ff ff81 	bl	802b494 <logs>
}
 802b592:	bf00      	nop
 802b594:	3708      	adds	r7, #8
 802b596:	46bd      	mov	sp, r7
 802b598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802b59c:	b004      	add	sp, #16
 802b59e:	4770      	bx	lr
 802b5a0:	200002ac 	.word	0x200002ac
 802b5a4:	200181d0 	.word	0x200181d0
 802b5a8:	08041c18 	.word	0x08041c18

0802b5ac <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 802b5ac:	b480      	push	{r7}
 802b5ae:	b083      	sub	sp, #12
 802b5b0:	af00      	add	r7, sp, #0
 802b5b2:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 802b5b4:	687b      	ldr	r3, [r7, #4]
 802b5b6:	2b09      	cmp	r3, #9
 802b5b8:	d804      	bhi.n	802b5c4 <nibble+0x18>
 802b5ba:	687b      	ldr	r3, [r7, #4]
 802b5bc:	b2db      	uxtb	r3, r3
 802b5be:	3330      	adds	r3, #48	@ 0x30
 802b5c0:	b2db      	uxtb	r3, r3
 802b5c2:	e003      	b.n	802b5cc <nibble+0x20>
 802b5c4:	687b      	ldr	r3, [r7, #4]
 802b5c6:	b2db      	uxtb	r3, r3
 802b5c8:	3357      	adds	r3, #87	@ 0x57
 802b5ca:	b2db      	uxtb	r3, r3
}
 802b5cc:	4618      	mov	r0, r3
 802b5ce:	370c      	adds	r7, #12
 802b5d0:	46bd      	mov	sp, r7
 802b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b5d6:	4770      	bx	lr

0802b5d8 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 802b5d8:	b580      	push	{r7, lr}
 802b5da:	b08a      	sub	sp, #40	@ 0x28
 802b5dc:	af00      	add	r7, sp, #0
 802b5de:	6078      	str	r0, [r7, #4]
 802b5e0:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 802b5e2:	687b      	ldr	r3, [r7, #4]
 802b5e4:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 802b5e6:	2300      	movs	r3, #0
 802b5e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 802b5ec:	2300      	movs	r3, #0
 802b5ee:	623b      	str	r3, [r7, #32]
 802b5f0:	e07a      	b.n	802b6e8 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 802b5f2:	6a3b      	ldr	r3, [r7, #32]
 802b5f4:	f003 030f 	and.w	r3, r3, #15
 802b5f8:	2b00      	cmp	r3, #0
 802b5fa:	d13a      	bne.n	802b672 <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 802b5fc:	6a3b      	ldr	r3, [r7, #32]
 802b5fe:	2b00      	cmp	r3, #0
 802b600:	d00f      	beq.n	802b622 <mg_hexdump+0x4a>
 802b602:	2102      	movs	r1, #2
 802b604:	484c      	ldr	r0, [pc, #304]	@ (802b738 <mg_hexdump+0x160>)
 802b606:	f7ff ff45 	bl	802b494 <logs>
 802b60a:	f107 030c 	add.w	r3, r7, #12
 802b60e:	2110      	movs	r1, #16
 802b610:	4618      	mov	r0, r3
 802b612:	f7ff ff3f 	bl	802b494 <logs>
 802b616:	200a      	movs	r0, #10
 802b618:	f7ff ff28 	bl	802b46c <logc>
 802b61c:	2300      	movs	r3, #0
 802b61e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 802b622:	6a3b      	ldr	r3, [r7, #32]
 802b624:	0b1b      	lsrs	r3, r3, #12
 802b626:	f003 030f 	and.w	r3, r3, #15
 802b62a:	4618      	mov	r0, r3
 802b62c:	f7ff ffbe 	bl	802b5ac <nibble>
 802b630:	4603      	mov	r3, r0
 802b632:	4618      	mov	r0, r3
 802b634:	f7ff ff1a 	bl	802b46c <logc>
 802b638:	6a3b      	ldr	r3, [r7, #32]
 802b63a:	0a1b      	lsrs	r3, r3, #8
 802b63c:	f003 030f 	and.w	r3, r3, #15
 802b640:	4618      	mov	r0, r3
 802b642:	f7ff ffb3 	bl	802b5ac <nibble>
 802b646:	4603      	mov	r3, r0
 802b648:	4618      	mov	r0, r3
 802b64a:	f7ff ff0f 	bl	802b46c <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 802b64e:	6a3b      	ldr	r3, [r7, #32]
 802b650:	091b      	lsrs	r3, r3, #4
 802b652:	f003 030f 	and.w	r3, r3, #15
 802b656:	4618      	mov	r0, r3
 802b658:	f7ff ffa8 	bl	802b5ac <nibble>
 802b65c:	4603      	mov	r3, r0
 802b65e:	4618      	mov	r0, r3
 802b660:	f7ff ff04 	bl	802b46c <logc>
 802b664:	2030      	movs	r0, #48	@ 0x30
 802b666:	f7ff ff01 	bl	802b46c <logc>
 802b66a:	2103      	movs	r1, #3
 802b66c:	4833      	ldr	r0, [pc, #204]	@ (802b73c <mg_hexdump+0x164>)
 802b66e:	f7ff ff11 	bl	802b494 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 802b672:	69fa      	ldr	r2, [r7, #28]
 802b674:	6a3b      	ldr	r3, [r7, #32]
 802b676:	4413      	add	r3, r2
 802b678:	781b      	ldrb	r3, [r3, #0]
 802b67a:	091b      	lsrs	r3, r3, #4
 802b67c:	b2db      	uxtb	r3, r3
 802b67e:	4618      	mov	r0, r3
 802b680:	f7ff ff94 	bl	802b5ac <nibble>
 802b684:	4603      	mov	r3, r0
 802b686:	4618      	mov	r0, r3
 802b688:	f7ff fef0 	bl	802b46c <logc>
 802b68c:	69fa      	ldr	r2, [r7, #28]
 802b68e:	6a3b      	ldr	r3, [r7, #32]
 802b690:	4413      	add	r3, r2
 802b692:	781b      	ldrb	r3, [r3, #0]
 802b694:	f003 030f 	and.w	r3, r3, #15
 802b698:	4618      	mov	r0, r3
 802b69a:	f7ff ff87 	bl	802b5ac <nibble>
 802b69e:	4603      	mov	r3, r0
 802b6a0:	4618      	mov	r0, r3
 802b6a2:	f7ff fee3 	bl	802b46c <logc>
    logc(' ');                                         // Space after hex number
 802b6a6:	2020      	movs	r0, #32
 802b6a8:	f7ff fee0 	bl	802b46c <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 802b6ac:	69fa      	ldr	r2, [r7, #28]
 802b6ae:	6a3b      	ldr	r3, [r7, #32]
 802b6b0:	4413      	add	r3, r2
 802b6b2:	781b      	ldrb	r3, [r3, #0]
 802b6b4:	2b1f      	cmp	r3, #31
 802b6b6:	d90a      	bls.n	802b6ce <mg_hexdump+0xf6>
 802b6b8:	69fa      	ldr	r2, [r7, #28]
 802b6ba:	6a3b      	ldr	r3, [r7, #32]
 802b6bc:	4413      	add	r3, r2
 802b6be:	781b      	ldrb	r3, [r3, #0]
 802b6c0:	2b7e      	cmp	r3, #126	@ 0x7e
 802b6c2:	d804      	bhi.n	802b6ce <mg_hexdump+0xf6>
 802b6c4:	69fa      	ldr	r2, [r7, #28]
 802b6c6:	6a3b      	ldr	r3, [r7, #32]
 802b6c8:	4413      	add	r3, r2
 802b6ca:	781a      	ldrb	r2, [r3, #0]
 802b6cc:	e000      	b.n	802b6d0 <mg_hexdump+0xf8>
 802b6ce:	222e      	movs	r2, #46	@ 0x2e
 802b6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802b6d4:	1c59      	adds	r1, r3, #1
 802b6d6:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 802b6da:	3328      	adds	r3, #40	@ 0x28
 802b6dc:	443b      	add	r3, r7
 802b6de:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 802b6e2:	6a3b      	ldr	r3, [r7, #32]
 802b6e4:	3301      	adds	r3, #1
 802b6e6:	623b      	str	r3, [r7, #32]
 802b6e8:	6a3a      	ldr	r2, [r7, #32]
 802b6ea:	683b      	ldr	r3, [r7, #0]
 802b6ec:	429a      	cmp	r2, r3
 802b6ee:	d380      	bcc.n	802b5f2 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 802b6f0:	e00d      	b.n	802b70e <mg_hexdump+0x136>
 802b6f2:	2103      	movs	r1, #3
 802b6f4:	4811      	ldr	r0, [pc, #68]	@ (802b73c <mg_hexdump+0x164>)
 802b6f6:	f7ff fecd 	bl	802b494 <logs>
 802b6fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802b6fe:	1c5a      	adds	r2, r3, #1
 802b700:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 802b704:	3328      	adds	r3, #40	@ 0x28
 802b706:	443b      	add	r3, r7
 802b708:	2220      	movs	r2, #32
 802b70a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 802b70e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802b712:	2b0f      	cmp	r3, #15
 802b714:	d9ed      	bls.n	802b6f2 <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 802b716:	2102      	movs	r1, #2
 802b718:	4807      	ldr	r0, [pc, #28]	@ (802b738 <mg_hexdump+0x160>)
 802b71a:	f7ff febb 	bl	802b494 <logs>
 802b71e:	f107 030c 	add.w	r3, r7, #12
 802b722:	2110      	movs	r1, #16
 802b724:	4618      	mov	r0, r3
 802b726:	f7ff feb5 	bl	802b494 <logs>
 802b72a:	200a      	movs	r0, #10
 802b72c:	f7ff fe9e 	bl	802b46c <logc>
}
 802b730:	bf00      	nop
 802b732:	3728      	adds	r7, #40	@ 0x28
 802b734:	46bd      	mov	sp, r7
 802b736:	bd80      	pop	{r7, pc}
 802b738:	08042eb4 	.word	0x08042eb4
 802b73c:	08042eb8 	.word	0x08042eb8

0802b740 <mg_byte_reverse>:
//  needed on buffers full of bytes, and then call MD5Final, which
//  will fill a supplied 16-byte array with the digest.

#if defined(MG_ENABLE_MD5) && MG_ENABLE_MD5

static void mg_byte_reverse(unsigned char *buf, unsigned longs) {
 802b740:	b480      	push	{r7}
 802b742:	b085      	sub	sp, #20
 802b744:	af00      	add	r7, sp, #0
 802b746:	6078      	str	r0, [r7, #4]
 802b748:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 802b74a:	4b14      	ldr	r3, [pc, #80]	@ (802b79c <mg_byte_reverse+0x5c>)
 802b74c:	881b      	ldrh	r3, [r3, #0]
 802b74e:	2bff      	cmp	r3, #255	@ 0xff
 802b750:	d81d      	bhi.n	802b78e <mg_byte_reverse+0x4e>
    do {
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 802b752:	687b      	ldr	r3, [r7, #4]
 802b754:	3303      	adds	r3, #3
 802b756:	781b      	ldrb	r3, [r3, #0]
 802b758:	021b      	lsls	r3, r3, #8
 802b75a:	687a      	ldr	r2, [r7, #4]
 802b75c:	3202      	adds	r2, #2
 802b75e:	7812      	ldrb	r2, [r2, #0]
 802b760:	4313      	orrs	r3, r2
 802b762:	041a      	lsls	r2, r3, #16
                   ((unsigned) buf[1] << 8 | buf[0]);
 802b764:	687b      	ldr	r3, [r7, #4]
 802b766:	3301      	adds	r3, #1
 802b768:	781b      	ldrb	r3, [r3, #0]
 802b76a:	021b      	lsls	r3, r3, #8
 802b76c:	6879      	ldr	r1, [r7, #4]
 802b76e:	7809      	ldrb	r1, [r1, #0]
 802b770:	430b      	orrs	r3, r1
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 802b772:	4313      	orrs	r3, r2
 802b774:	60fb      	str	r3, [r7, #12]
      *(uint32_t *) buf = t;
 802b776:	687b      	ldr	r3, [r7, #4]
 802b778:	68fa      	ldr	r2, [r7, #12]
 802b77a:	601a      	str	r2, [r3, #0]
      buf += 4;
 802b77c:	687b      	ldr	r3, [r7, #4]
 802b77e:	3304      	adds	r3, #4
 802b780:	607b      	str	r3, [r7, #4]
    } while (--longs);
 802b782:	683b      	ldr	r3, [r7, #0]
 802b784:	3b01      	subs	r3, #1
 802b786:	603b      	str	r3, [r7, #0]
 802b788:	683b      	ldr	r3, [r7, #0]
 802b78a:	2b00      	cmp	r3, #0
 802b78c:	d1e1      	bne.n	802b752 <mg_byte_reverse+0x12>
  } else {
    (void) buf, (void) longs;  // Little endian. Do nothing
  }
}
 802b78e:	bf00      	nop
 802b790:	3714      	adds	r7, #20
 802b792:	46bd      	mov	sp, r7
 802b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b798:	4770      	bx	lr
 802b79a:	bf00      	nop
 802b79c:	08042ebc 	.word	0x08042ebc

0802b7a0 <mg_md5_init>:

/*
 * Start MD5 accumulation.  Set bit count to 0 and buffer to mysterious
 * initialization constants.
 */
void mg_md5_init(mg_md5_ctx *ctx) {
 802b7a0:	b480      	push	{r7}
 802b7a2:	b083      	sub	sp, #12
 802b7a4:	af00      	add	r7, sp, #0
 802b7a6:	6078      	str	r0, [r7, #4]
  ctx->buf[0] = 0x67452301;
 802b7a8:	687b      	ldr	r3, [r7, #4]
 802b7aa:	4a0b      	ldr	r2, [pc, #44]	@ (802b7d8 <mg_md5_init+0x38>)
 802b7ac:	601a      	str	r2, [r3, #0]
  ctx->buf[1] = 0xefcdab89;
 802b7ae:	687b      	ldr	r3, [r7, #4]
 802b7b0:	4a0a      	ldr	r2, [pc, #40]	@ (802b7dc <mg_md5_init+0x3c>)
 802b7b2:	605a      	str	r2, [r3, #4]
  ctx->buf[2] = 0x98badcfe;
 802b7b4:	687b      	ldr	r3, [r7, #4]
 802b7b6:	4a0a      	ldr	r2, [pc, #40]	@ (802b7e0 <mg_md5_init+0x40>)
 802b7b8:	609a      	str	r2, [r3, #8]
  ctx->buf[3] = 0x10325476;
 802b7ba:	687b      	ldr	r3, [r7, #4]
 802b7bc:	4a09      	ldr	r2, [pc, #36]	@ (802b7e4 <mg_md5_init+0x44>)
 802b7be:	60da      	str	r2, [r3, #12]

  ctx->bits[0] = 0;
 802b7c0:	687b      	ldr	r3, [r7, #4]
 802b7c2:	2200      	movs	r2, #0
 802b7c4:	611a      	str	r2, [r3, #16]
  ctx->bits[1] = 0;
 802b7c6:	687b      	ldr	r3, [r7, #4]
 802b7c8:	2200      	movs	r2, #0
 802b7ca:	615a      	str	r2, [r3, #20]
}
 802b7cc:	bf00      	nop
 802b7ce:	370c      	adds	r7, #12
 802b7d0:	46bd      	mov	sp, r7
 802b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b7d6:	4770      	bx	lr
 802b7d8:	67452301 	.word	0x67452301
 802b7dc:	efcdab89 	.word	0xefcdab89
 802b7e0:	98badcfe 	.word	0x98badcfe
 802b7e4:	10325476 	.word	0x10325476

0802b7e8 <mg_md5_transform>:

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 802b7e8:	b480      	push	{r7}
 802b7ea:	b087      	sub	sp, #28
 802b7ec:	af00      	add	r7, sp, #0
 802b7ee:	6078      	str	r0, [r7, #4]
 802b7f0:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d;

  a = buf[0];
 802b7f2:	687b      	ldr	r3, [r7, #4]
 802b7f4:	681b      	ldr	r3, [r3, #0]
 802b7f6:	617b      	str	r3, [r7, #20]
  b = buf[1];
 802b7f8:	687b      	ldr	r3, [r7, #4]
 802b7fa:	685b      	ldr	r3, [r3, #4]
 802b7fc:	613b      	str	r3, [r7, #16]
  c = buf[2];
 802b7fe:	687b      	ldr	r3, [r7, #4]
 802b800:	689b      	ldr	r3, [r3, #8]
 802b802:	60fb      	str	r3, [r7, #12]
  d = buf[3];
 802b804:	687b      	ldr	r3, [r7, #4]
 802b806:	68db      	ldr	r3, [r3, #12]
 802b808:	60bb      	str	r3, [r7, #8]

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 802b80a:	68fa      	ldr	r2, [r7, #12]
 802b80c:	68bb      	ldr	r3, [r7, #8]
 802b80e:	405a      	eors	r2, r3
 802b810:	693b      	ldr	r3, [r7, #16]
 802b812:	401a      	ands	r2, r3
 802b814:	68bb      	ldr	r3, [r7, #8]
 802b816:	405a      	eors	r2, r3
 802b818:	683b      	ldr	r3, [r7, #0]
 802b81a:	681b      	ldr	r3, [r3, #0]
 802b81c:	441a      	add	r2, r3
 802b81e:	697b      	ldr	r3, [r7, #20]
 802b820:	441a      	add	r2, r3
 802b822:	4ba1      	ldr	r3, [pc, #644]	@ (802baa8 <mg_md5_transform+0x2c0>)
 802b824:	4413      	add	r3, r2
 802b826:	617b      	str	r3, [r7, #20]
 802b828:	697b      	ldr	r3, [r7, #20]
 802b82a:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b82e:	617b      	str	r3, [r7, #20]
 802b830:	697a      	ldr	r2, [r7, #20]
 802b832:	693b      	ldr	r3, [r7, #16]
 802b834:	4413      	add	r3, r2
 802b836:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 802b838:	693a      	ldr	r2, [r7, #16]
 802b83a:	68fb      	ldr	r3, [r7, #12]
 802b83c:	405a      	eors	r2, r3
 802b83e:	697b      	ldr	r3, [r7, #20]
 802b840:	401a      	ands	r2, r3
 802b842:	68fb      	ldr	r3, [r7, #12]
 802b844:	405a      	eors	r2, r3
 802b846:	683b      	ldr	r3, [r7, #0]
 802b848:	3304      	adds	r3, #4
 802b84a:	681b      	ldr	r3, [r3, #0]
 802b84c:	441a      	add	r2, r3
 802b84e:	68bb      	ldr	r3, [r7, #8]
 802b850:	441a      	add	r2, r3
 802b852:	4b96      	ldr	r3, [pc, #600]	@ (802baac <mg_md5_transform+0x2c4>)
 802b854:	4413      	add	r3, r2
 802b856:	60bb      	str	r3, [r7, #8]
 802b858:	68bb      	ldr	r3, [r7, #8]
 802b85a:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b85e:	60bb      	str	r3, [r7, #8]
 802b860:	68ba      	ldr	r2, [r7, #8]
 802b862:	697b      	ldr	r3, [r7, #20]
 802b864:	4413      	add	r3, r2
 802b866:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 802b868:	697a      	ldr	r2, [r7, #20]
 802b86a:	693b      	ldr	r3, [r7, #16]
 802b86c:	405a      	eors	r2, r3
 802b86e:	68bb      	ldr	r3, [r7, #8]
 802b870:	401a      	ands	r2, r3
 802b872:	693b      	ldr	r3, [r7, #16]
 802b874:	405a      	eors	r2, r3
 802b876:	683b      	ldr	r3, [r7, #0]
 802b878:	3308      	adds	r3, #8
 802b87a:	681b      	ldr	r3, [r3, #0]
 802b87c:	441a      	add	r2, r3
 802b87e:	68fb      	ldr	r3, [r7, #12]
 802b880:	441a      	add	r2, r3
 802b882:	4b8b      	ldr	r3, [pc, #556]	@ (802bab0 <mg_md5_transform+0x2c8>)
 802b884:	4413      	add	r3, r2
 802b886:	60fb      	str	r3, [r7, #12]
 802b888:	68fb      	ldr	r3, [r7, #12]
 802b88a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b88e:	60fb      	str	r3, [r7, #12]
 802b890:	68fa      	ldr	r2, [r7, #12]
 802b892:	68bb      	ldr	r3, [r7, #8]
 802b894:	4413      	add	r3, r2
 802b896:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 802b898:	68ba      	ldr	r2, [r7, #8]
 802b89a:	697b      	ldr	r3, [r7, #20]
 802b89c:	405a      	eors	r2, r3
 802b89e:	68fb      	ldr	r3, [r7, #12]
 802b8a0:	401a      	ands	r2, r3
 802b8a2:	697b      	ldr	r3, [r7, #20]
 802b8a4:	405a      	eors	r2, r3
 802b8a6:	683b      	ldr	r3, [r7, #0]
 802b8a8:	330c      	adds	r3, #12
 802b8aa:	681b      	ldr	r3, [r3, #0]
 802b8ac:	441a      	add	r2, r3
 802b8ae:	693b      	ldr	r3, [r7, #16]
 802b8b0:	441a      	add	r2, r3
 802b8b2:	4b80      	ldr	r3, [pc, #512]	@ (802bab4 <mg_md5_transform+0x2cc>)
 802b8b4:	4413      	add	r3, r2
 802b8b6:	613b      	str	r3, [r7, #16]
 802b8b8:	693b      	ldr	r3, [r7, #16]
 802b8ba:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b8be:	613b      	str	r3, [r7, #16]
 802b8c0:	693a      	ldr	r2, [r7, #16]
 802b8c2:	68fb      	ldr	r3, [r7, #12]
 802b8c4:	4413      	add	r3, r2
 802b8c6:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 802b8c8:	68fa      	ldr	r2, [r7, #12]
 802b8ca:	68bb      	ldr	r3, [r7, #8]
 802b8cc:	405a      	eors	r2, r3
 802b8ce:	693b      	ldr	r3, [r7, #16]
 802b8d0:	401a      	ands	r2, r3
 802b8d2:	68bb      	ldr	r3, [r7, #8]
 802b8d4:	405a      	eors	r2, r3
 802b8d6:	683b      	ldr	r3, [r7, #0]
 802b8d8:	3310      	adds	r3, #16
 802b8da:	681b      	ldr	r3, [r3, #0]
 802b8dc:	441a      	add	r2, r3
 802b8de:	697b      	ldr	r3, [r7, #20]
 802b8e0:	441a      	add	r2, r3
 802b8e2:	4b75      	ldr	r3, [pc, #468]	@ (802bab8 <mg_md5_transform+0x2d0>)
 802b8e4:	4413      	add	r3, r2
 802b8e6:	617b      	str	r3, [r7, #20]
 802b8e8:	697b      	ldr	r3, [r7, #20]
 802b8ea:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b8ee:	617b      	str	r3, [r7, #20]
 802b8f0:	697a      	ldr	r2, [r7, #20]
 802b8f2:	693b      	ldr	r3, [r7, #16]
 802b8f4:	4413      	add	r3, r2
 802b8f6:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 802b8f8:	693a      	ldr	r2, [r7, #16]
 802b8fa:	68fb      	ldr	r3, [r7, #12]
 802b8fc:	405a      	eors	r2, r3
 802b8fe:	697b      	ldr	r3, [r7, #20]
 802b900:	401a      	ands	r2, r3
 802b902:	68fb      	ldr	r3, [r7, #12]
 802b904:	405a      	eors	r2, r3
 802b906:	683b      	ldr	r3, [r7, #0]
 802b908:	3314      	adds	r3, #20
 802b90a:	681b      	ldr	r3, [r3, #0]
 802b90c:	441a      	add	r2, r3
 802b90e:	68bb      	ldr	r3, [r7, #8]
 802b910:	441a      	add	r2, r3
 802b912:	4b6a      	ldr	r3, [pc, #424]	@ (802babc <mg_md5_transform+0x2d4>)
 802b914:	4413      	add	r3, r2
 802b916:	60bb      	str	r3, [r7, #8]
 802b918:	68bb      	ldr	r3, [r7, #8]
 802b91a:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b91e:	60bb      	str	r3, [r7, #8]
 802b920:	68ba      	ldr	r2, [r7, #8]
 802b922:	697b      	ldr	r3, [r7, #20]
 802b924:	4413      	add	r3, r2
 802b926:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 802b928:	697a      	ldr	r2, [r7, #20]
 802b92a:	693b      	ldr	r3, [r7, #16]
 802b92c:	405a      	eors	r2, r3
 802b92e:	68bb      	ldr	r3, [r7, #8]
 802b930:	401a      	ands	r2, r3
 802b932:	693b      	ldr	r3, [r7, #16]
 802b934:	405a      	eors	r2, r3
 802b936:	683b      	ldr	r3, [r7, #0]
 802b938:	3318      	adds	r3, #24
 802b93a:	681b      	ldr	r3, [r3, #0]
 802b93c:	441a      	add	r2, r3
 802b93e:	68fb      	ldr	r3, [r7, #12]
 802b940:	441a      	add	r2, r3
 802b942:	4b5f      	ldr	r3, [pc, #380]	@ (802bac0 <mg_md5_transform+0x2d8>)
 802b944:	4413      	add	r3, r2
 802b946:	60fb      	str	r3, [r7, #12]
 802b948:	68fb      	ldr	r3, [r7, #12]
 802b94a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b94e:	60fb      	str	r3, [r7, #12]
 802b950:	68fa      	ldr	r2, [r7, #12]
 802b952:	68bb      	ldr	r3, [r7, #8]
 802b954:	4413      	add	r3, r2
 802b956:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 802b958:	68ba      	ldr	r2, [r7, #8]
 802b95a:	697b      	ldr	r3, [r7, #20]
 802b95c:	405a      	eors	r2, r3
 802b95e:	68fb      	ldr	r3, [r7, #12]
 802b960:	401a      	ands	r2, r3
 802b962:	697b      	ldr	r3, [r7, #20]
 802b964:	405a      	eors	r2, r3
 802b966:	683b      	ldr	r3, [r7, #0]
 802b968:	331c      	adds	r3, #28
 802b96a:	681b      	ldr	r3, [r3, #0]
 802b96c:	441a      	add	r2, r3
 802b96e:	693b      	ldr	r3, [r7, #16]
 802b970:	441a      	add	r2, r3
 802b972:	4b54      	ldr	r3, [pc, #336]	@ (802bac4 <mg_md5_transform+0x2dc>)
 802b974:	4413      	add	r3, r2
 802b976:	613b      	str	r3, [r7, #16]
 802b978:	693b      	ldr	r3, [r7, #16]
 802b97a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b97e:	613b      	str	r3, [r7, #16]
 802b980:	693a      	ldr	r2, [r7, #16]
 802b982:	68fb      	ldr	r3, [r7, #12]
 802b984:	4413      	add	r3, r2
 802b986:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 802b988:	68fa      	ldr	r2, [r7, #12]
 802b98a:	68bb      	ldr	r3, [r7, #8]
 802b98c:	405a      	eors	r2, r3
 802b98e:	693b      	ldr	r3, [r7, #16]
 802b990:	401a      	ands	r2, r3
 802b992:	68bb      	ldr	r3, [r7, #8]
 802b994:	405a      	eors	r2, r3
 802b996:	683b      	ldr	r3, [r7, #0]
 802b998:	3320      	adds	r3, #32
 802b99a:	681b      	ldr	r3, [r3, #0]
 802b99c:	441a      	add	r2, r3
 802b99e:	697b      	ldr	r3, [r7, #20]
 802b9a0:	441a      	add	r2, r3
 802b9a2:	4b49      	ldr	r3, [pc, #292]	@ (802bac8 <mg_md5_transform+0x2e0>)
 802b9a4:	4413      	add	r3, r2
 802b9a6:	617b      	str	r3, [r7, #20]
 802b9a8:	697b      	ldr	r3, [r7, #20]
 802b9aa:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b9ae:	617b      	str	r3, [r7, #20]
 802b9b0:	697a      	ldr	r2, [r7, #20]
 802b9b2:	693b      	ldr	r3, [r7, #16]
 802b9b4:	4413      	add	r3, r2
 802b9b6:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 802b9b8:	693a      	ldr	r2, [r7, #16]
 802b9ba:	68fb      	ldr	r3, [r7, #12]
 802b9bc:	405a      	eors	r2, r3
 802b9be:	697b      	ldr	r3, [r7, #20]
 802b9c0:	401a      	ands	r2, r3
 802b9c2:	68fb      	ldr	r3, [r7, #12]
 802b9c4:	405a      	eors	r2, r3
 802b9c6:	683b      	ldr	r3, [r7, #0]
 802b9c8:	3324      	adds	r3, #36	@ 0x24
 802b9ca:	681b      	ldr	r3, [r3, #0]
 802b9cc:	441a      	add	r2, r3
 802b9ce:	68bb      	ldr	r3, [r7, #8]
 802b9d0:	441a      	add	r2, r3
 802b9d2:	4b3e      	ldr	r3, [pc, #248]	@ (802bacc <mg_md5_transform+0x2e4>)
 802b9d4:	4413      	add	r3, r2
 802b9d6:	60bb      	str	r3, [r7, #8]
 802b9d8:	68bb      	ldr	r3, [r7, #8]
 802b9da:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b9de:	60bb      	str	r3, [r7, #8]
 802b9e0:	68ba      	ldr	r2, [r7, #8]
 802b9e2:	697b      	ldr	r3, [r7, #20]
 802b9e4:	4413      	add	r3, r2
 802b9e6:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 802b9e8:	697a      	ldr	r2, [r7, #20]
 802b9ea:	693b      	ldr	r3, [r7, #16]
 802b9ec:	405a      	eors	r2, r3
 802b9ee:	68bb      	ldr	r3, [r7, #8]
 802b9f0:	401a      	ands	r2, r3
 802b9f2:	693b      	ldr	r3, [r7, #16]
 802b9f4:	405a      	eors	r2, r3
 802b9f6:	683b      	ldr	r3, [r7, #0]
 802b9f8:	3328      	adds	r3, #40	@ 0x28
 802b9fa:	681b      	ldr	r3, [r3, #0]
 802b9fc:	441a      	add	r2, r3
 802b9fe:	68fb      	ldr	r3, [r7, #12]
 802ba00:	4413      	add	r3, r2
 802ba02:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 802ba06:	3b4f      	subs	r3, #79	@ 0x4f
 802ba08:	60fb      	str	r3, [r7, #12]
 802ba0a:	68fb      	ldr	r3, [r7, #12]
 802ba0c:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802ba10:	60fb      	str	r3, [r7, #12]
 802ba12:	68fa      	ldr	r2, [r7, #12]
 802ba14:	68bb      	ldr	r3, [r7, #8]
 802ba16:	4413      	add	r3, r2
 802ba18:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 802ba1a:	68ba      	ldr	r2, [r7, #8]
 802ba1c:	697b      	ldr	r3, [r7, #20]
 802ba1e:	405a      	eors	r2, r3
 802ba20:	68fb      	ldr	r3, [r7, #12]
 802ba22:	401a      	ands	r2, r3
 802ba24:	697b      	ldr	r3, [r7, #20]
 802ba26:	405a      	eors	r2, r3
 802ba28:	683b      	ldr	r3, [r7, #0]
 802ba2a:	332c      	adds	r3, #44	@ 0x2c
 802ba2c:	681b      	ldr	r3, [r3, #0]
 802ba2e:	441a      	add	r2, r3
 802ba30:	693b      	ldr	r3, [r7, #16]
 802ba32:	441a      	add	r2, r3
 802ba34:	4b26      	ldr	r3, [pc, #152]	@ (802bad0 <mg_md5_transform+0x2e8>)
 802ba36:	4413      	add	r3, r2
 802ba38:	613b      	str	r3, [r7, #16]
 802ba3a:	693b      	ldr	r3, [r7, #16]
 802ba3c:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802ba40:	613b      	str	r3, [r7, #16]
 802ba42:	693a      	ldr	r2, [r7, #16]
 802ba44:	68fb      	ldr	r3, [r7, #12]
 802ba46:	4413      	add	r3, r2
 802ba48:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 802ba4a:	68fa      	ldr	r2, [r7, #12]
 802ba4c:	68bb      	ldr	r3, [r7, #8]
 802ba4e:	405a      	eors	r2, r3
 802ba50:	693b      	ldr	r3, [r7, #16]
 802ba52:	401a      	ands	r2, r3
 802ba54:	68bb      	ldr	r3, [r7, #8]
 802ba56:	405a      	eors	r2, r3
 802ba58:	683b      	ldr	r3, [r7, #0]
 802ba5a:	3330      	adds	r3, #48	@ 0x30
 802ba5c:	681b      	ldr	r3, [r3, #0]
 802ba5e:	441a      	add	r2, r3
 802ba60:	697b      	ldr	r3, [r7, #20]
 802ba62:	441a      	add	r2, r3
 802ba64:	4b1b      	ldr	r3, [pc, #108]	@ (802bad4 <mg_md5_transform+0x2ec>)
 802ba66:	4413      	add	r3, r2
 802ba68:	617b      	str	r3, [r7, #20]
 802ba6a:	697b      	ldr	r3, [r7, #20]
 802ba6c:	ea4f 6373 	mov.w	r3, r3, ror #25
 802ba70:	617b      	str	r3, [r7, #20]
 802ba72:	697a      	ldr	r2, [r7, #20]
 802ba74:	693b      	ldr	r3, [r7, #16]
 802ba76:	4413      	add	r3, r2
 802ba78:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 802ba7a:	693a      	ldr	r2, [r7, #16]
 802ba7c:	68fb      	ldr	r3, [r7, #12]
 802ba7e:	405a      	eors	r2, r3
 802ba80:	697b      	ldr	r3, [r7, #20]
 802ba82:	401a      	ands	r2, r3
 802ba84:	68fb      	ldr	r3, [r7, #12]
 802ba86:	405a      	eors	r2, r3
 802ba88:	683b      	ldr	r3, [r7, #0]
 802ba8a:	3334      	adds	r3, #52	@ 0x34
 802ba8c:	681b      	ldr	r3, [r3, #0]
 802ba8e:	441a      	add	r2, r3
 802ba90:	68bb      	ldr	r3, [r7, #8]
 802ba92:	441a      	add	r2, r3
 802ba94:	4b10      	ldr	r3, [pc, #64]	@ (802bad8 <mg_md5_transform+0x2f0>)
 802ba96:	4413      	add	r3, r2
 802ba98:	60bb      	str	r3, [r7, #8]
 802ba9a:	68bb      	ldr	r3, [r7, #8]
 802ba9c:	ea4f 5333 	mov.w	r3, r3, ror #20
 802baa0:	60bb      	str	r3, [r7, #8]
 802baa2:	68ba      	ldr	r2, [r7, #8]
 802baa4:	e01a      	b.n	802badc <mg_md5_transform+0x2f4>
 802baa6:	bf00      	nop
 802baa8:	d76aa478 	.word	0xd76aa478
 802baac:	e8c7b756 	.word	0xe8c7b756
 802bab0:	242070db 	.word	0x242070db
 802bab4:	c1bdceee 	.word	0xc1bdceee
 802bab8:	f57c0faf 	.word	0xf57c0faf
 802babc:	4787c62a 	.word	0x4787c62a
 802bac0:	a8304613 	.word	0xa8304613
 802bac4:	fd469501 	.word	0xfd469501
 802bac8:	698098d8 	.word	0x698098d8
 802bacc:	8b44f7af 	.word	0x8b44f7af
 802bad0:	895cd7be 	.word	0x895cd7be
 802bad4:	6b901122 	.word	0x6b901122
 802bad8:	fd987193 	.word	0xfd987193
 802badc:	697b      	ldr	r3, [r7, #20]
 802bade:	4413      	add	r3, r2
 802bae0:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 802bae2:	697a      	ldr	r2, [r7, #20]
 802bae4:	693b      	ldr	r3, [r7, #16]
 802bae6:	405a      	eors	r2, r3
 802bae8:	68bb      	ldr	r3, [r7, #8]
 802baea:	401a      	ands	r2, r3
 802baec:	693b      	ldr	r3, [r7, #16]
 802baee:	405a      	eors	r2, r3
 802baf0:	683b      	ldr	r3, [r7, #0]
 802baf2:	3338      	adds	r3, #56	@ 0x38
 802baf4:	681b      	ldr	r3, [r3, #0]
 802baf6:	441a      	add	r2, r3
 802baf8:	68fb      	ldr	r3, [r7, #12]
 802bafa:	441a      	add	r2, r3
 802bafc:	4ba0      	ldr	r3, [pc, #640]	@ (802bd80 <mg_md5_transform+0x598>)
 802bafe:	4413      	add	r3, r2
 802bb00:	60fb      	str	r3, [r7, #12]
 802bb02:	68fb      	ldr	r3, [r7, #12]
 802bb04:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802bb08:	60fb      	str	r3, [r7, #12]
 802bb0a:	68fa      	ldr	r2, [r7, #12]
 802bb0c:	68bb      	ldr	r3, [r7, #8]
 802bb0e:	4413      	add	r3, r2
 802bb10:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 802bb12:	68ba      	ldr	r2, [r7, #8]
 802bb14:	697b      	ldr	r3, [r7, #20]
 802bb16:	405a      	eors	r2, r3
 802bb18:	68fb      	ldr	r3, [r7, #12]
 802bb1a:	401a      	ands	r2, r3
 802bb1c:	697b      	ldr	r3, [r7, #20]
 802bb1e:	405a      	eors	r2, r3
 802bb20:	683b      	ldr	r3, [r7, #0]
 802bb22:	333c      	adds	r3, #60	@ 0x3c
 802bb24:	681b      	ldr	r3, [r3, #0]
 802bb26:	441a      	add	r2, r3
 802bb28:	693b      	ldr	r3, [r7, #16]
 802bb2a:	441a      	add	r2, r3
 802bb2c:	4b95      	ldr	r3, [pc, #596]	@ (802bd84 <mg_md5_transform+0x59c>)
 802bb2e:	4413      	add	r3, r2
 802bb30:	613b      	str	r3, [r7, #16]
 802bb32:	693b      	ldr	r3, [r7, #16]
 802bb34:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802bb38:	613b      	str	r3, [r7, #16]
 802bb3a:	693a      	ldr	r2, [r7, #16]
 802bb3c:	68fb      	ldr	r3, [r7, #12]
 802bb3e:	4413      	add	r3, r2
 802bb40:	613b      	str	r3, [r7, #16]

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 802bb42:	693a      	ldr	r2, [r7, #16]
 802bb44:	68fb      	ldr	r3, [r7, #12]
 802bb46:	405a      	eors	r2, r3
 802bb48:	68bb      	ldr	r3, [r7, #8]
 802bb4a:	401a      	ands	r2, r3
 802bb4c:	68fb      	ldr	r3, [r7, #12]
 802bb4e:	405a      	eors	r2, r3
 802bb50:	683b      	ldr	r3, [r7, #0]
 802bb52:	3304      	adds	r3, #4
 802bb54:	681b      	ldr	r3, [r3, #0]
 802bb56:	441a      	add	r2, r3
 802bb58:	697b      	ldr	r3, [r7, #20]
 802bb5a:	441a      	add	r2, r3
 802bb5c:	4b8a      	ldr	r3, [pc, #552]	@ (802bd88 <mg_md5_transform+0x5a0>)
 802bb5e:	4413      	add	r3, r2
 802bb60:	617b      	str	r3, [r7, #20]
 802bb62:	697b      	ldr	r3, [r7, #20]
 802bb64:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bb68:	617b      	str	r3, [r7, #20]
 802bb6a:	697a      	ldr	r2, [r7, #20]
 802bb6c:	693b      	ldr	r3, [r7, #16]
 802bb6e:	4413      	add	r3, r2
 802bb70:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 802bb72:	697a      	ldr	r2, [r7, #20]
 802bb74:	693b      	ldr	r3, [r7, #16]
 802bb76:	405a      	eors	r2, r3
 802bb78:	68fb      	ldr	r3, [r7, #12]
 802bb7a:	401a      	ands	r2, r3
 802bb7c:	693b      	ldr	r3, [r7, #16]
 802bb7e:	405a      	eors	r2, r3
 802bb80:	683b      	ldr	r3, [r7, #0]
 802bb82:	3318      	adds	r3, #24
 802bb84:	681b      	ldr	r3, [r3, #0]
 802bb86:	441a      	add	r2, r3
 802bb88:	68bb      	ldr	r3, [r7, #8]
 802bb8a:	441a      	add	r2, r3
 802bb8c:	4b7f      	ldr	r3, [pc, #508]	@ (802bd8c <mg_md5_transform+0x5a4>)
 802bb8e:	4413      	add	r3, r2
 802bb90:	60bb      	str	r3, [r7, #8]
 802bb92:	68bb      	ldr	r3, [r7, #8]
 802bb94:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bb98:	60bb      	str	r3, [r7, #8]
 802bb9a:	68ba      	ldr	r2, [r7, #8]
 802bb9c:	697b      	ldr	r3, [r7, #20]
 802bb9e:	4413      	add	r3, r2
 802bba0:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 802bba2:	68ba      	ldr	r2, [r7, #8]
 802bba4:	697b      	ldr	r3, [r7, #20]
 802bba6:	405a      	eors	r2, r3
 802bba8:	693b      	ldr	r3, [r7, #16]
 802bbaa:	401a      	ands	r2, r3
 802bbac:	697b      	ldr	r3, [r7, #20]
 802bbae:	405a      	eors	r2, r3
 802bbb0:	683b      	ldr	r3, [r7, #0]
 802bbb2:	332c      	adds	r3, #44	@ 0x2c
 802bbb4:	681b      	ldr	r3, [r3, #0]
 802bbb6:	441a      	add	r2, r3
 802bbb8:	68fb      	ldr	r3, [r7, #12]
 802bbba:	441a      	add	r2, r3
 802bbbc:	4b74      	ldr	r3, [pc, #464]	@ (802bd90 <mg_md5_transform+0x5a8>)
 802bbbe:	4413      	add	r3, r2
 802bbc0:	60fb      	str	r3, [r7, #12]
 802bbc2:	68fb      	ldr	r3, [r7, #12]
 802bbc4:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bbc8:	60fb      	str	r3, [r7, #12]
 802bbca:	68fa      	ldr	r2, [r7, #12]
 802bbcc:	68bb      	ldr	r3, [r7, #8]
 802bbce:	4413      	add	r3, r2
 802bbd0:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 802bbd2:	68fa      	ldr	r2, [r7, #12]
 802bbd4:	68bb      	ldr	r3, [r7, #8]
 802bbd6:	405a      	eors	r2, r3
 802bbd8:	697b      	ldr	r3, [r7, #20]
 802bbda:	401a      	ands	r2, r3
 802bbdc:	68bb      	ldr	r3, [r7, #8]
 802bbde:	405a      	eors	r2, r3
 802bbe0:	683b      	ldr	r3, [r7, #0]
 802bbe2:	681b      	ldr	r3, [r3, #0]
 802bbe4:	441a      	add	r2, r3
 802bbe6:	693b      	ldr	r3, [r7, #16]
 802bbe8:	441a      	add	r2, r3
 802bbea:	4b6a      	ldr	r3, [pc, #424]	@ (802bd94 <mg_md5_transform+0x5ac>)
 802bbec:	4413      	add	r3, r2
 802bbee:	613b      	str	r3, [r7, #16]
 802bbf0:	693b      	ldr	r3, [r7, #16]
 802bbf2:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bbf6:	613b      	str	r3, [r7, #16]
 802bbf8:	693a      	ldr	r2, [r7, #16]
 802bbfa:	68fb      	ldr	r3, [r7, #12]
 802bbfc:	4413      	add	r3, r2
 802bbfe:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 802bc00:	693a      	ldr	r2, [r7, #16]
 802bc02:	68fb      	ldr	r3, [r7, #12]
 802bc04:	405a      	eors	r2, r3
 802bc06:	68bb      	ldr	r3, [r7, #8]
 802bc08:	401a      	ands	r2, r3
 802bc0a:	68fb      	ldr	r3, [r7, #12]
 802bc0c:	405a      	eors	r2, r3
 802bc0e:	683b      	ldr	r3, [r7, #0]
 802bc10:	3314      	adds	r3, #20
 802bc12:	681b      	ldr	r3, [r3, #0]
 802bc14:	441a      	add	r2, r3
 802bc16:	697b      	ldr	r3, [r7, #20]
 802bc18:	441a      	add	r2, r3
 802bc1a:	4b5f      	ldr	r3, [pc, #380]	@ (802bd98 <mg_md5_transform+0x5b0>)
 802bc1c:	4413      	add	r3, r2
 802bc1e:	617b      	str	r3, [r7, #20]
 802bc20:	697b      	ldr	r3, [r7, #20]
 802bc22:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bc26:	617b      	str	r3, [r7, #20]
 802bc28:	697a      	ldr	r2, [r7, #20]
 802bc2a:	693b      	ldr	r3, [r7, #16]
 802bc2c:	4413      	add	r3, r2
 802bc2e:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 802bc30:	697a      	ldr	r2, [r7, #20]
 802bc32:	693b      	ldr	r3, [r7, #16]
 802bc34:	405a      	eors	r2, r3
 802bc36:	68fb      	ldr	r3, [r7, #12]
 802bc38:	401a      	ands	r2, r3
 802bc3a:	693b      	ldr	r3, [r7, #16]
 802bc3c:	405a      	eors	r2, r3
 802bc3e:	683b      	ldr	r3, [r7, #0]
 802bc40:	3328      	adds	r3, #40	@ 0x28
 802bc42:	681b      	ldr	r3, [r3, #0]
 802bc44:	441a      	add	r2, r3
 802bc46:	68bb      	ldr	r3, [r7, #8]
 802bc48:	441a      	add	r2, r3
 802bc4a:	4b54      	ldr	r3, [pc, #336]	@ (802bd9c <mg_md5_transform+0x5b4>)
 802bc4c:	4413      	add	r3, r2
 802bc4e:	60bb      	str	r3, [r7, #8]
 802bc50:	68bb      	ldr	r3, [r7, #8]
 802bc52:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bc56:	60bb      	str	r3, [r7, #8]
 802bc58:	68ba      	ldr	r2, [r7, #8]
 802bc5a:	697b      	ldr	r3, [r7, #20]
 802bc5c:	4413      	add	r3, r2
 802bc5e:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 802bc60:	68ba      	ldr	r2, [r7, #8]
 802bc62:	697b      	ldr	r3, [r7, #20]
 802bc64:	405a      	eors	r2, r3
 802bc66:	693b      	ldr	r3, [r7, #16]
 802bc68:	401a      	ands	r2, r3
 802bc6a:	697b      	ldr	r3, [r7, #20]
 802bc6c:	405a      	eors	r2, r3
 802bc6e:	683b      	ldr	r3, [r7, #0]
 802bc70:	333c      	adds	r3, #60	@ 0x3c
 802bc72:	681b      	ldr	r3, [r3, #0]
 802bc74:	441a      	add	r2, r3
 802bc76:	68fb      	ldr	r3, [r7, #12]
 802bc78:	441a      	add	r2, r3
 802bc7a:	4b49      	ldr	r3, [pc, #292]	@ (802bda0 <mg_md5_transform+0x5b8>)
 802bc7c:	4413      	add	r3, r2
 802bc7e:	60fb      	str	r3, [r7, #12]
 802bc80:	68fb      	ldr	r3, [r7, #12]
 802bc82:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bc86:	60fb      	str	r3, [r7, #12]
 802bc88:	68fa      	ldr	r2, [r7, #12]
 802bc8a:	68bb      	ldr	r3, [r7, #8]
 802bc8c:	4413      	add	r3, r2
 802bc8e:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 802bc90:	68fa      	ldr	r2, [r7, #12]
 802bc92:	68bb      	ldr	r3, [r7, #8]
 802bc94:	405a      	eors	r2, r3
 802bc96:	697b      	ldr	r3, [r7, #20]
 802bc98:	401a      	ands	r2, r3
 802bc9a:	68bb      	ldr	r3, [r7, #8]
 802bc9c:	405a      	eors	r2, r3
 802bc9e:	683b      	ldr	r3, [r7, #0]
 802bca0:	3310      	adds	r3, #16
 802bca2:	681b      	ldr	r3, [r3, #0]
 802bca4:	441a      	add	r2, r3
 802bca6:	693b      	ldr	r3, [r7, #16]
 802bca8:	441a      	add	r2, r3
 802bcaa:	4b3e      	ldr	r3, [pc, #248]	@ (802bda4 <mg_md5_transform+0x5bc>)
 802bcac:	4413      	add	r3, r2
 802bcae:	613b      	str	r3, [r7, #16]
 802bcb0:	693b      	ldr	r3, [r7, #16]
 802bcb2:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bcb6:	613b      	str	r3, [r7, #16]
 802bcb8:	693a      	ldr	r2, [r7, #16]
 802bcba:	68fb      	ldr	r3, [r7, #12]
 802bcbc:	4413      	add	r3, r2
 802bcbe:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 802bcc0:	693a      	ldr	r2, [r7, #16]
 802bcc2:	68fb      	ldr	r3, [r7, #12]
 802bcc4:	405a      	eors	r2, r3
 802bcc6:	68bb      	ldr	r3, [r7, #8]
 802bcc8:	401a      	ands	r2, r3
 802bcca:	68fb      	ldr	r3, [r7, #12]
 802bccc:	405a      	eors	r2, r3
 802bcce:	683b      	ldr	r3, [r7, #0]
 802bcd0:	3324      	adds	r3, #36	@ 0x24
 802bcd2:	681b      	ldr	r3, [r3, #0]
 802bcd4:	441a      	add	r2, r3
 802bcd6:	697b      	ldr	r3, [r7, #20]
 802bcd8:	441a      	add	r2, r3
 802bcda:	4b33      	ldr	r3, [pc, #204]	@ (802bda8 <mg_md5_transform+0x5c0>)
 802bcdc:	4413      	add	r3, r2
 802bcde:	617b      	str	r3, [r7, #20]
 802bce0:	697b      	ldr	r3, [r7, #20]
 802bce2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bce6:	617b      	str	r3, [r7, #20]
 802bce8:	697a      	ldr	r2, [r7, #20]
 802bcea:	693b      	ldr	r3, [r7, #16]
 802bcec:	4413      	add	r3, r2
 802bcee:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 802bcf0:	697a      	ldr	r2, [r7, #20]
 802bcf2:	693b      	ldr	r3, [r7, #16]
 802bcf4:	405a      	eors	r2, r3
 802bcf6:	68fb      	ldr	r3, [r7, #12]
 802bcf8:	401a      	ands	r2, r3
 802bcfa:	693b      	ldr	r3, [r7, #16]
 802bcfc:	405a      	eors	r2, r3
 802bcfe:	683b      	ldr	r3, [r7, #0]
 802bd00:	3338      	adds	r3, #56	@ 0x38
 802bd02:	681b      	ldr	r3, [r3, #0]
 802bd04:	441a      	add	r2, r3
 802bd06:	68bb      	ldr	r3, [r7, #8]
 802bd08:	441a      	add	r2, r3
 802bd0a:	4b28      	ldr	r3, [pc, #160]	@ (802bdac <mg_md5_transform+0x5c4>)
 802bd0c:	4413      	add	r3, r2
 802bd0e:	60bb      	str	r3, [r7, #8]
 802bd10:	68bb      	ldr	r3, [r7, #8]
 802bd12:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bd16:	60bb      	str	r3, [r7, #8]
 802bd18:	68ba      	ldr	r2, [r7, #8]
 802bd1a:	697b      	ldr	r3, [r7, #20]
 802bd1c:	4413      	add	r3, r2
 802bd1e:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 802bd20:	68ba      	ldr	r2, [r7, #8]
 802bd22:	697b      	ldr	r3, [r7, #20]
 802bd24:	405a      	eors	r2, r3
 802bd26:	693b      	ldr	r3, [r7, #16]
 802bd28:	401a      	ands	r2, r3
 802bd2a:	697b      	ldr	r3, [r7, #20]
 802bd2c:	405a      	eors	r2, r3
 802bd2e:	683b      	ldr	r3, [r7, #0]
 802bd30:	330c      	adds	r3, #12
 802bd32:	681b      	ldr	r3, [r3, #0]
 802bd34:	441a      	add	r2, r3
 802bd36:	68fb      	ldr	r3, [r7, #12]
 802bd38:	441a      	add	r2, r3
 802bd3a:	4b1d      	ldr	r3, [pc, #116]	@ (802bdb0 <mg_md5_transform+0x5c8>)
 802bd3c:	4413      	add	r3, r2
 802bd3e:	60fb      	str	r3, [r7, #12]
 802bd40:	68fb      	ldr	r3, [r7, #12]
 802bd42:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bd46:	60fb      	str	r3, [r7, #12]
 802bd48:	68fa      	ldr	r2, [r7, #12]
 802bd4a:	68bb      	ldr	r3, [r7, #8]
 802bd4c:	4413      	add	r3, r2
 802bd4e:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 802bd50:	68fa      	ldr	r2, [r7, #12]
 802bd52:	68bb      	ldr	r3, [r7, #8]
 802bd54:	405a      	eors	r2, r3
 802bd56:	697b      	ldr	r3, [r7, #20]
 802bd58:	401a      	ands	r2, r3
 802bd5a:	68bb      	ldr	r3, [r7, #8]
 802bd5c:	405a      	eors	r2, r3
 802bd5e:	683b      	ldr	r3, [r7, #0]
 802bd60:	3320      	adds	r3, #32
 802bd62:	681b      	ldr	r3, [r3, #0]
 802bd64:	441a      	add	r2, r3
 802bd66:	693b      	ldr	r3, [r7, #16]
 802bd68:	441a      	add	r2, r3
 802bd6a:	4b12      	ldr	r3, [pc, #72]	@ (802bdb4 <mg_md5_transform+0x5cc>)
 802bd6c:	4413      	add	r3, r2
 802bd6e:	613b      	str	r3, [r7, #16]
 802bd70:	693b      	ldr	r3, [r7, #16]
 802bd72:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bd76:	613b      	str	r3, [r7, #16]
 802bd78:	693a      	ldr	r2, [r7, #16]
 802bd7a:	68fb      	ldr	r3, [r7, #12]
 802bd7c:	e01c      	b.n	802bdb8 <mg_md5_transform+0x5d0>
 802bd7e:	bf00      	nop
 802bd80:	a679438e 	.word	0xa679438e
 802bd84:	49b40821 	.word	0x49b40821
 802bd88:	f61e2562 	.word	0xf61e2562
 802bd8c:	c040b340 	.word	0xc040b340
 802bd90:	265e5a51 	.word	0x265e5a51
 802bd94:	e9b6c7aa 	.word	0xe9b6c7aa
 802bd98:	d62f105d 	.word	0xd62f105d
 802bd9c:	02441453 	.word	0x02441453
 802bda0:	d8a1e681 	.word	0xd8a1e681
 802bda4:	e7d3fbc8 	.word	0xe7d3fbc8
 802bda8:	21e1cde6 	.word	0x21e1cde6
 802bdac:	c33707d6 	.word	0xc33707d6
 802bdb0:	f4d50d87 	.word	0xf4d50d87
 802bdb4:	455a14ed 	.word	0x455a14ed
 802bdb8:	4413      	add	r3, r2
 802bdba:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 802bdbc:	693a      	ldr	r2, [r7, #16]
 802bdbe:	68fb      	ldr	r3, [r7, #12]
 802bdc0:	405a      	eors	r2, r3
 802bdc2:	68bb      	ldr	r3, [r7, #8]
 802bdc4:	401a      	ands	r2, r3
 802bdc6:	68fb      	ldr	r3, [r7, #12]
 802bdc8:	405a      	eors	r2, r3
 802bdca:	683b      	ldr	r3, [r7, #0]
 802bdcc:	3334      	adds	r3, #52	@ 0x34
 802bdce:	681b      	ldr	r3, [r3, #0]
 802bdd0:	441a      	add	r2, r3
 802bdd2:	697b      	ldr	r3, [r7, #20]
 802bdd4:	441a      	add	r2, r3
 802bdd6:	4ba1      	ldr	r3, [pc, #644]	@ (802c05c <mg_md5_transform+0x874>)
 802bdd8:	4413      	add	r3, r2
 802bdda:	617b      	str	r3, [r7, #20]
 802bddc:	697b      	ldr	r3, [r7, #20]
 802bdde:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bde2:	617b      	str	r3, [r7, #20]
 802bde4:	697a      	ldr	r2, [r7, #20]
 802bde6:	693b      	ldr	r3, [r7, #16]
 802bde8:	4413      	add	r3, r2
 802bdea:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 802bdec:	697a      	ldr	r2, [r7, #20]
 802bdee:	693b      	ldr	r3, [r7, #16]
 802bdf0:	405a      	eors	r2, r3
 802bdf2:	68fb      	ldr	r3, [r7, #12]
 802bdf4:	401a      	ands	r2, r3
 802bdf6:	693b      	ldr	r3, [r7, #16]
 802bdf8:	405a      	eors	r2, r3
 802bdfa:	683b      	ldr	r3, [r7, #0]
 802bdfc:	3308      	adds	r3, #8
 802bdfe:	681b      	ldr	r3, [r3, #0]
 802be00:	441a      	add	r2, r3
 802be02:	68bb      	ldr	r3, [r7, #8]
 802be04:	441a      	add	r2, r3
 802be06:	4b96      	ldr	r3, [pc, #600]	@ (802c060 <mg_md5_transform+0x878>)
 802be08:	4413      	add	r3, r2
 802be0a:	60bb      	str	r3, [r7, #8]
 802be0c:	68bb      	ldr	r3, [r7, #8]
 802be0e:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802be12:	60bb      	str	r3, [r7, #8]
 802be14:	68ba      	ldr	r2, [r7, #8]
 802be16:	697b      	ldr	r3, [r7, #20]
 802be18:	4413      	add	r3, r2
 802be1a:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 802be1c:	68ba      	ldr	r2, [r7, #8]
 802be1e:	697b      	ldr	r3, [r7, #20]
 802be20:	405a      	eors	r2, r3
 802be22:	693b      	ldr	r3, [r7, #16]
 802be24:	401a      	ands	r2, r3
 802be26:	697b      	ldr	r3, [r7, #20]
 802be28:	405a      	eors	r2, r3
 802be2a:	683b      	ldr	r3, [r7, #0]
 802be2c:	331c      	adds	r3, #28
 802be2e:	681b      	ldr	r3, [r3, #0]
 802be30:	441a      	add	r2, r3
 802be32:	68fb      	ldr	r3, [r7, #12]
 802be34:	441a      	add	r2, r3
 802be36:	4b8b      	ldr	r3, [pc, #556]	@ (802c064 <mg_md5_transform+0x87c>)
 802be38:	4413      	add	r3, r2
 802be3a:	60fb      	str	r3, [r7, #12]
 802be3c:	68fb      	ldr	r3, [r7, #12]
 802be3e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802be42:	60fb      	str	r3, [r7, #12]
 802be44:	68fa      	ldr	r2, [r7, #12]
 802be46:	68bb      	ldr	r3, [r7, #8]
 802be48:	4413      	add	r3, r2
 802be4a:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 802be4c:	68fa      	ldr	r2, [r7, #12]
 802be4e:	68bb      	ldr	r3, [r7, #8]
 802be50:	405a      	eors	r2, r3
 802be52:	697b      	ldr	r3, [r7, #20]
 802be54:	401a      	ands	r2, r3
 802be56:	68bb      	ldr	r3, [r7, #8]
 802be58:	405a      	eors	r2, r3
 802be5a:	683b      	ldr	r3, [r7, #0]
 802be5c:	3330      	adds	r3, #48	@ 0x30
 802be5e:	681b      	ldr	r3, [r3, #0]
 802be60:	441a      	add	r2, r3
 802be62:	693b      	ldr	r3, [r7, #16]
 802be64:	441a      	add	r2, r3
 802be66:	4b80      	ldr	r3, [pc, #512]	@ (802c068 <mg_md5_transform+0x880>)
 802be68:	4413      	add	r3, r2
 802be6a:	613b      	str	r3, [r7, #16]
 802be6c:	693b      	ldr	r3, [r7, #16]
 802be6e:	ea4f 3333 	mov.w	r3, r3, ror #12
 802be72:	613b      	str	r3, [r7, #16]
 802be74:	693a      	ldr	r2, [r7, #16]
 802be76:	68fb      	ldr	r3, [r7, #12]
 802be78:	4413      	add	r3, r2
 802be7a:	613b      	str	r3, [r7, #16]

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 802be7c:	693a      	ldr	r2, [r7, #16]
 802be7e:	68fb      	ldr	r3, [r7, #12]
 802be80:	405a      	eors	r2, r3
 802be82:	68bb      	ldr	r3, [r7, #8]
 802be84:	405a      	eors	r2, r3
 802be86:	683b      	ldr	r3, [r7, #0]
 802be88:	3314      	adds	r3, #20
 802be8a:	681b      	ldr	r3, [r3, #0]
 802be8c:	441a      	add	r2, r3
 802be8e:	697b      	ldr	r3, [r7, #20]
 802be90:	4413      	add	r3, r2
 802be92:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 802be96:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 802be9a:	617b      	str	r3, [r7, #20]
 802be9c:	697b      	ldr	r3, [r7, #20]
 802be9e:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bea2:	617b      	str	r3, [r7, #20]
 802bea4:	697a      	ldr	r2, [r7, #20]
 802bea6:	693b      	ldr	r3, [r7, #16]
 802bea8:	4413      	add	r3, r2
 802beaa:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 802beac:	697a      	ldr	r2, [r7, #20]
 802beae:	693b      	ldr	r3, [r7, #16]
 802beb0:	405a      	eors	r2, r3
 802beb2:	68fb      	ldr	r3, [r7, #12]
 802beb4:	405a      	eors	r2, r3
 802beb6:	683b      	ldr	r3, [r7, #0]
 802beb8:	3320      	adds	r3, #32
 802beba:	681b      	ldr	r3, [r3, #0]
 802bebc:	441a      	add	r2, r3
 802bebe:	68bb      	ldr	r3, [r7, #8]
 802bec0:	441a      	add	r2, r3
 802bec2:	4b6a      	ldr	r3, [pc, #424]	@ (802c06c <mg_md5_transform+0x884>)
 802bec4:	4413      	add	r3, r2
 802bec6:	60bb      	str	r3, [r7, #8]
 802bec8:	68bb      	ldr	r3, [r7, #8]
 802beca:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bece:	60bb      	str	r3, [r7, #8]
 802bed0:	68ba      	ldr	r2, [r7, #8]
 802bed2:	697b      	ldr	r3, [r7, #20]
 802bed4:	4413      	add	r3, r2
 802bed6:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 802bed8:	68ba      	ldr	r2, [r7, #8]
 802beda:	697b      	ldr	r3, [r7, #20]
 802bedc:	405a      	eors	r2, r3
 802bede:	693b      	ldr	r3, [r7, #16]
 802bee0:	405a      	eors	r2, r3
 802bee2:	683b      	ldr	r3, [r7, #0]
 802bee4:	332c      	adds	r3, #44	@ 0x2c
 802bee6:	681b      	ldr	r3, [r3, #0]
 802bee8:	441a      	add	r2, r3
 802beea:	68fb      	ldr	r3, [r7, #12]
 802beec:	441a      	add	r2, r3
 802beee:	4b60      	ldr	r3, [pc, #384]	@ (802c070 <mg_md5_transform+0x888>)
 802bef0:	4413      	add	r3, r2
 802bef2:	60fb      	str	r3, [r7, #12]
 802bef4:	68fb      	ldr	r3, [r7, #12]
 802bef6:	ea4f 4333 	mov.w	r3, r3, ror #16
 802befa:	60fb      	str	r3, [r7, #12]
 802befc:	68fa      	ldr	r2, [r7, #12]
 802befe:	68bb      	ldr	r3, [r7, #8]
 802bf00:	4413      	add	r3, r2
 802bf02:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 802bf04:	68fa      	ldr	r2, [r7, #12]
 802bf06:	68bb      	ldr	r3, [r7, #8]
 802bf08:	405a      	eors	r2, r3
 802bf0a:	697b      	ldr	r3, [r7, #20]
 802bf0c:	405a      	eors	r2, r3
 802bf0e:	683b      	ldr	r3, [r7, #0]
 802bf10:	3338      	adds	r3, #56	@ 0x38
 802bf12:	681b      	ldr	r3, [r3, #0]
 802bf14:	441a      	add	r2, r3
 802bf16:	693b      	ldr	r3, [r7, #16]
 802bf18:	441a      	add	r2, r3
 802bf1a:	4b56      	ldr	r3, [pc, #344]	@ (802c074 <mg_md5_transform+0x88c>)
 802bf1c:	4413      	add	r3, r2
 802bf1e:	613b      	str	r3, [r7, #16]
 802bf20:	693b      	ldr	r3, [r7, #16]
 802bf22:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bf26:	613b      	str	r3, [r7, #16]
 802bf28:	693a      	ldr	r2, [r7, #16]
 802bf2a:	68fb      	ldr	r3, [r7, #12]
 802bf2c:	4413      	add	r3, r2
 802bf2e:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 802bf30:	693a      	ldr	r2, [r7, #16]
 802bf32:	68fb      	ldr	r3, [r7, #12]
 802bf34:	405a      	eors	r2, r3
 802bf36:	68bb      	ldr	r3, [r7, #8]
 802bf38:	405a      	eors	r2, r3
 802bf3a:	683b      	ldr	r3, [r7, #0]
 802bf3c:	3304      	adds	r3, #4
 802bf3e:	681b      	ldr	r3, [r3, #0]
 802bf40:	441a      	add	r2, r3
 802bf42:	697b      	ldr	r3, [r7, #20]
 802bf44:	441a      	add	r2, r3
 802bf46:	4b4c      	ldr	r3, [pc, #304]	@ (802c078 <mg_md5_transform+0x890>)
 802bf48:	4413      	add	r3, r2
 802bf4a:	617b      	str	r3, [r7, #20]
 802bf4c:	697b      	ldr	r3, [r7, #20]
 802bf4e:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bf52:	617b      	str	r3, [r7, #20]
 802bf54:	697a      	ldr	r2, [r7, #20]
 802bf56:	693b      	ldr	r3, [r7, #16]
 802bf58:	4413      	add	r3, r2
 802bf5a:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 802bf5c:	697a      	ldr	r2, [r7, #20]
 802bf5e:	693b      	ldr	r3, [r7, #16]
 802bf60:	405a      	eors	r2, r3
 802bf62:	68fb      	ldr	r3, [r7, #12]
 802bf64:	405a      	eors	r2, r3
 802bf66:	683b      	ldr	r3, [r7, #0]
 802bf68:	3310      	adds	r3, #16
 802bf6a:	681b      	ldr	r3, [r3, #0]
 802bf6c:	441a      	add	r2, r3
 802bf6e:	68bb      	ldr	r3, [r7, #8]
 802bf70:	441a      	add	r2, r3
 802bf72:	4b42      	ldr	r3, [pc, #264]	@ (802c07c <mg_md5_transform+0x894>)
 802bf74:	4413      	add	r3, r2
 802bf76:	60bb      	str	r3, [r7, #8]
 802bf78:	68bb      	ldr	r3, [r7, #8]
 802bf7a:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bf7e:	60bb      	str	r3, [r7, #8]
 802bf80:	68ba      	ldr	r2, [r7, #8]
 802bf82:	697b      	ldr	r3, [r7, #20]
 802bf84:	4413      	add	r3, r2
 802bf86:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 802bf88:	68ba      	ldr	r2, [r7, #8]
 802bf8a:	697b      	ldr	r3, [r7, #20]
 802bf8c:	405a      	eors	r2, r3
 802bf8e:	693b      	ldr	r3, [r7, #16]
 802bf90:	405a      	eors	r2, r3
 802bf92:	683b      	ldr	r3, [r7, #0]
 802bf94:	331c      	adds	r3, #28
 802bf96:	681b      	ldr	r3, [r3, #0]
 802bf98:	441a      	add	r2, r3
 802bf9a:	68fb      	ldr	r3, [r7, #12]
 802bf9c:	441a      	add	r2, r3
 802bf9e:	4b38      	ldr	r3, [pc, #224]	@ (802c080 <mg_md5_transform+0x898>)
 802bfa0:	4413      	add	r3, r2
 802bfa2:	60fb      	str	r3, [r7, #12]
 802bfa4:	68fb      	ldr	r3, [r7, #12]
 802bfa6:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bfaa:	60fb      	str	r3, [r7, #12]
 802bfac:	68fa      	ldr	r2, [r7, #12]
 802bfae:	68bb      	ldr	r3, [r7, #8]
 802bfb0:	4413      	add	r3, r2
 802bfb2:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 802bfb4:	68fa      	ldr	r2, [r7, #12]
 802bfb6:	68bb      	ldr	r3, [r7, #8]
 802bfb8:	405a      	eors	r2, r3
 802bfba:	697b      	ldr	r3, [r7, #20]
 802bfbc:	405a      	eors	r2, r3
 802bfbe:	683b      	ldr	r3, [r7, #0]
 802bfc0:	3328      	adds	r3, #40	@ 0x28
 802bfc2:	681b      	ldr	r3, [r3, #0]
 802bfc4:	441a      	add	r2, r3
 802bfc6:	693b      	ldr	r3, [r7, #16]
 802bfc8:	441a      	add	r2, r3
 802bfca:	4b2e      	ldr	r3, [pc, #184]	@ (802c084 <mg_md5_transform+0x89c>)
 802bfcc:	4413      	add	r3, r2
 802bfce:	613b      	str	r3, [r7, #16]
 802bfd0:	693b      	ldr	r3, [r7, #16]
 802bfd2:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bfd6:	613b      	str	r3, [r7, #16]
 802bfd8:	693a      	ldr	r2, [r7, #16]
 802bfda:	68fb      	ldr	r3, [r7, #12]
 802bfdc:	4413      	add	r3, r2
 802bfde:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 802bfe0:	693a      	ldr	r2, [r7, #16]
 802bfe2:	68fb      	ldr	r3, [r7, #12]
 802bfe4:	405a      	eors	r2, r3
 802bfe6:	68bb      	ldr	r3, [r7, #8]
 802bfe8:	405a      	eors	r2, r3
 802bfea:	683b      	ldr	r3, [r7, #0]
 802bfec:	3334      	adds	r3, #52	@ 0x34
 802bfee:	681b      	ldr	r3, [r3, #0]
 802bff0:	441a      	add	r2, r3
 802bff2:	697b      	ldr	r3, [r7, #20]
 802bff4:	441a      	add	r2, r3
 802bff6:	4b24      	ldr	r3, [pc, #144]	@ (802c088 <mg_md5_transform+0x8a0>)
 802bff8:	4413      	add	r3, r2
 802bffa:	617b      	str	r3, [r7, #20]
 802bffc:	697b      	ldr	r3, [r7, #20]
 802bffe:	ea4f 7333 	mov.w	r3, r3, ror #28
 802c002:	617b      	str	r3, [r7, #20]
 802c004:	697a      	ldr	r2, [r7, #20]
 802c006:	693b      	ldr	r3, [r7, #16]
 802c008:	4413      	add	r3, r2
 802c00a:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 802c00c:	697a      	ldr	r2, [r7, #20]
 802c00e:	693b      	ldr	r3, [r7, #16]
 802c010:	405a      	eors	r2, r3
 802c012:	68fb      	ldr	r3, [r7, #12]
 802c014:	405a      	eors	r2, r3
 802c016:	683b      	ldr	r3, [r7, #0]
 802c018:	681b      	ldr	r3, [r3, #0]
 802c01a:	441a      	add	r2, r3
 802c01c:	68bb      	ldr	r3, [r7, #8]
 802c01e:	441a      	add	r2, r3
 802c020:	4b1a      	ldr	r3, [pc, #104]	@ (802c08c <mg_md5_transform+0x8a4>)
 802c022:	4413      	add	r3, r2
 802c024:	60bb      	str	r3, [r7, #8]
 802c026:	68bb      	ldr	r3, [r7, #8]
 802c028:	ea4f 5373 	mov.w	r3, r3, ror #21
 802c02c:	60bb      	str	r3, [r7, #8]
 802c02e:	68ba      	ldr	r2, [r7, #8]
 802c030:	697b      	ldr	r3, [r7, #20]
 802c032:	4413      	add	r3, r2
 802c034:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 802c036:	68ba      	ldr	r2, [r7, #8]
 802c038:	697b      	ldr	r3, [r7, #20]
 802c03a:	405a      	eors	r2, r3
 802c03c:	693b      	ldr	r3, [r7, #16]
 802c03e:	405a      	eors	r2, r3
 802c040:	683b      	ldr	r3, [r7, #0]
 802c042:	330c      	adds	r3, #12
 802c044:	681b      	ldr	r3, [r3, #0]
 802c046:	441a      	add	r2, r3
 802c048:	68fb      	ldr	r3, [r7, #12]
 802c04a:	441a      	add	r2, r3
 802c04c:	4b10      	ldr	r3, [pc, #64]	@ (802c090 <mg_md5_transform+0x8a8>)
 802c04e:	4413      	add	r3, r2
 802c050:	60fb      	str	r3, [r7, #12]
 802c052:	68fb      	ldr	r3, [r7, #12]
 802c054:	ea4f 4333 	mov.w	r3, r3, ror #16
 802c058:	e01c      	b.n	802c094 <mg_md5_transform+0x8ac>
 802c05a:	bf00      	nop
 802c05c:	a9e3e905 	.word	0xa9e3e905
 802c060:	fcefa3f8 	.word	0xfcefa3f8
 802c064:	676f02d9 	.word	0x676f02d9
 802c068:	8d2a4c8a 	.word	0x8d2a4c8a
 802c06c:	8771f681 	.word	0x8771f681
 802c070:	6d9d6122 	.word	0x6d9d6122
 802c074:	fde5380c 	.word	0xfde5380c
 802c078:	a4beea44 	.word	0xa4beea44
 802c07c:	4bdecfa9 	.word	0x4bdecfa9
 802c080:	f6bb4b60 	.word	0xf6bb4b60
 802c084:	bebfbc70 	.word	0xbebfbc70
 802c088:	289b7ec6 	.word	0x289b7ec6
 802c08c:	eaa127fa 	.word	0xeaa127fa
 802c090:	d4ef3085 	.word	0xd4ef3085
 802c094:	60fb      	str	r3, [r7, #12]
 802c096:	68fa      	ldr	r2, [r7, #12]
 802c098:	68bb      	ldr	r3, [r7, #8]
 802c09a:	4413      	add	r3, r2
 802c09c:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 802c09e:	68fa      	ldr	r2, [r7, #12]
 802c0a0:	68bb      	ldr	r3, [r7, #8]
 802c0a2:	405a      	eors	r2, r3
 802c0a4:	697b      	ldr	r3, [r7, #20]
 802c0a6:	405a      	eors	r2, r3
 802c0a8:	683b      	ldr	r3, [r7, #0]
 802c0aa:	3318      	adds	r3, #24
 802c0ac:	681b      	ldr	r3, [r3, #0]
 802c0ae:	441a      	add	r2, r3
 802c0b0:	693b      	ldr	r3, [r7, #16]
 802c0b2:	441a      	add	r2, r3
 802c0b4:	4ba1      	ldr	r3, [pc, #644]	@ (802c33c <mg_md5_transform+0xb54>)
 802c0b6:	4413      	add	r3, r2
 802c0b8:	613b      	str	r3, [r7, #16]
 802c0ba:	693b      	ldr	r3, [r7, #16]
 802c0bc:	ea4f 2373 	mov.w	r3, r3, ror #9
 802c0c0:	613b      	str	r3, [r7, #16]
 802c0c2:	693a      	ldr	r2, [r7, #16]
 802c0c4:	68fb      	ldr	r3, [r7, #12]
 802c0c6:	4413      	add	r3, r2
 802c0c8:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 802c0ca:	693a      	ldr	r2, [r7, #16]
 802c0cc:	68fb      	ldr	r3, [r7, #12]
 802c0ce:	405a      	eors	r2, r3
 802c0d0:	68bb      	ldr	r3, [r7, #8]
 802c0d2:	405a      	eors	r2, r3
 802c0d4:	683b      	ldr	r3, [r7, #0]
 802c0d6:	3324      	adds	r3, #36	@ 0x24
 802c0d8:	681b      	ldr	r3, [r3, #0]
 802c0da:	441a      	add	r2, r3
 802c0dc:	697b      	ldr	r3, [r7, #20]
 802c0de:	441a      	add	r2, r3
 802c0e0:	4b97      	ldr	r3, [pc, #604]	@ (802c340 <mg_md5_transform+0xb58>)
 802c0e2:	4413      	add	r3, r2
 802c0e4:	617b      	str	r3, [r7, #20]
 802c0e6:	697b      	ldr	r3, [r7, #20]
 802c0e8:	ea4f 7333 	mov.w	r3, r3, ror #28
 802c0ec:	617b      	str	r3, [r7, #20]
 802c0ee:	697a      	ldr	r2, [r7, #20]
 802c0f0:	693b      	ldr	r3, [r7, #16]
 802c0f2:	4413      	add	r3, r2
 802c0f4:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 802c0f6:	697a      	ldr	r2, [r7, #20]
 802c0f8:	693b      	ldr	r3, [r7, #16]
 802c0fa:	405a      	eors	r2, r3
 802c0fc:	68fb      	ldr	r3, [r7, #12]
 802c0fe:	405a      	eors	r2, r3
 802c100:	683b      	ldr	r3, [r7, #0]
 802c102:	3330      	adds	r3, #48	@ 0x30
 802c104:	681b      	ldr	r3, [r3, #0]
 802c106:	441a      	add	r2, r3
 802c108:	68bb      	ldr	r3, [r7, #8]
 802c10a:	441a      	add	r2, r3
 802c10c:	4b8d      	ldr	r3, [pc, #564]	@ (802c344 <mg_md5_transform+0xb5c>)
 802c10e:	4413      	add	r3, r2
 802c110:	60bb      	str	r3, [r7, #8]
 802c112:	68bb      	ldr	r3, [r7, #8]
 802c114:	ea4f 5373 	mov.w	r3, r3, ror #21
 802c118:	60bb      	str	r3, [r7, #8]
 802c11a:	68ba      	ldr	r2, [r7, #8]
 802c11c:	697b      	ldr	r3, [r7, #20]
 802c11e:	4413      	add	r3, r2
 802c120:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 802c122:	68ba      	ldr	r2, [r7, #8]
 802c124:	697b      	ldr	r3, [r7, #20]
 802c126:	405a      	eors	r2, r3
 802c128:	693b      	ldr	r3, [r7, #16]
 802c12a:	405a      	eors	r2, r3
 802c12c:	683b      	ldr	r3, [r7, #0]
 802c12e:	333c      	adds	r3, #60	@ 0x3c
 802c130:	681b      	ldr	r3, [r3, #0]
 802c132:	441a      	add	r2, r3
 802c134:	68fb      	ldr	r3, [r7, #12]
 802c136:	441a      	add	r2, r3
 802c138:	4b83      	ldr	r3, [pc, #524]	@ (802c348 <mg_md5_transform+0xb60>)
 802c13a:	4413      	add	r3, r2
 802c13c:	60fb      	str	r3, [r7, #12]
 802c13e:	68fb      	ldr	r3, [r7, #12]
 802c140:	ea4f 4333 	mov.w	r3, r3, ror #16
 802c144:	60fb      	str	r3, [r7, #12]
 802c146:	68fa      	ldr	r2, [r7, #12]
 802c148:	68bb      	ldr	r3, [r7, #8]
 802c14a:	4413      	add	r3, r2
 802c14c:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 802c14e:	68fa      	ldr	r2, [r7, #12]
 802c150:	68bb      	ldr	r3, [r7, #8]
 802c152:	405a      	eors	r2, r3
 802c154:	697b      	ldr	r3, [r7, #20]
 802c156:	405a      	eors	r2, r3
 802c158:	683b      	ldr	r3, [r7, #0]
 802c15a:	3308      	adds	r3, #8
 802c15c:	681b      	ldr	r3, [r3, #0]
 802c15e:	441a      	add	r2, r3
 802c160:	693b      	ldr	r3, [r7, #16]
 802c162:	441a      	add	r2, r3
 802c164:	4b79      	ldr	r3, [pc, #484]	@ (802c34c <mg_md5_transform+0xb64>)
 802c166:	4413      	add	r3, r2
 802c168:	613b      	str	r3, [r7, #16]
 802c16a:	693b      	ldr	r3, [r7, #16]
 802c16c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802c170:	613b      	str	r3, [r7, #16]
 802c172:	693a      	ldr	r2, [r7, #16]
 802c174:	68fb      	ldr	r3, [r7, #12]
 802c176:	4413      	add	r3, r2
 802c178:	613b      	str	r3, [r7, #16]

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 802c17a:	68bb      	ldr	r3, [r7, #8]
 802c17c:	43da      	mvns	r2, r3
 802c17e:	693b      	ldr	r3, [r7, #16]
 802c180:	431a      	orrs	r2, r3
 802c182:	68fb      	ldr	r3, [r7, #12]
 802c184:	405a      	eors	r2, r3
 802c186:	683b      	ldr	r3, [r7, #0]
 802c188:	681b      	ldr	r3, [r3, #0]
 802c18a:	441a      	add	r2, r3
 802c18c:	697b      	ldr	r3, [r7, #20]
 802c18e:	441a      	add	r2, r3
 802c190:	4b6f      	ldr	r3, [pc, #444]	@ (802c350 <mg_md5_transform+0xb68>)
 802c192:	4413      	add	r3, r2
 802c194:	617b      	str	r3, [r7, #20]
 802c196:	697b      	ldr	r3, [r7, #20]
 802c198:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c19c:	617b      	str	r3, [r7, #20]
 802c19e:	697a      	ldr	r2, [r7, #20]
 802c1a0:	693b      	ldr	r3, [r7, #16]
 802c1a2:	4413      	add	r3, r2
 802c1a4:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 802c1a6:	68fb      	ldr	r3, [r7, #12]
 802c1a8:	43da      	mvns	r2, r3
 802c1aa:	697b      	ldr	r3, [r7, #20]
 802c1ac:	431a      	orrs	r2, r3
 802c1ae:	693b      	ldr	r3, [r7, #16]
 802c1b0:	405a      	eors	r2, r3
 802c1b2:	683b      	ldr	r3, [r7, #0]
 802c1b4:	331c      	adds	r3, #28
 802c1b6:	681b      	ldr	r3, [r3, #0]
 802c1b8:	441a      	add	r2, r3
 802c1ba:	68bb      	ldr	r3, [r7, #8]
 802c1bc:	441a      	add	r2, r3
 802c1be:	4b65      	ldr	r3, [pc, #404]	@ (802c354 <mg_md5_transform+0xb6c>)
 802c1c0:	4413      	add	r3, r2
 802c1c2:	60bb      	str	r3, [r7, #8]
 802c1c4:	68bb      	ldr	r3, [r7, #8]
 802c1c6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c1ca:	60bb      	str	r3, [r7, #8]
 802c1cc:	68ba      	ldr	r2, [r7, #8]
 802c1ce:	697b      	ldr	r3, [r7, #20]
 802c1d0:	4413      	add	r3, r2
 802c1d2:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 802c1d4:	693b      	ldr	r3, [r7, #16]
 802c1d6:	43da      	mvns	r2, r3
 802c1d8:	68bb      	ldr	r3, [r7, #8]
 802c1da:	431a      	orrs	r2, r3
 802c1dc:	697b      	ldr	r3, [r7, #20]
 802c1de:	405a      	eors	r2, r3
 802c1e0:	683b      	ldr	r3, [r7, #0]
 802c1e2:	3338      	adds	r3, #56	@ 0x38
 802c1e4:	681b      	ldr	r3, [r3, #0]
 802c1e6:	441a      	add	r2, r3
 802c1e8:	68fb      	ldr	r3, [r7, #12]
 802c1ea:	441a      	add	r2, r3
 802c1ec:	4b5a      	ldr	r3, [pc, #360]	@ (802c358 <mg_md5_transform+0xb70>)
 802c1ee:	4413      	add	r3, r2
 802c1f0:	60fb      	str	r3, [r7, #12]
 802c1f2:	68fb      	ldr	r3, [r7, #12]
 802c1f4:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c1f8:	60fb      	str	r3, [r7, #12]
 802c1fa:	68fa      	ldr	r2, [r7, #12]
 802c1fc:	68bb      	ldr	r3, [r7, #8]
 802c1fe:	4413      	add	r3, r2
 802c200:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 802c202:	697b      	ldr	r3, [r7, #20]
 802c204:	43da      	mvns	r2, r3
 802c206:	68fb      	ldr	r3, [r7, #12]
 802c208:	431a      	orrs	r2, r3
 802c20a:	68bb      	ldr	r3, [r7, #8]
 802c20c:	405a      	eors	r2, r3
 802c20e:	683b      	ldr	r3, [r7, #0]
 802c210:	3314      	adds	r3, #20
 802c212:	681b      	ldr	r3, [r3, #0]
 802c214:	441a      	add	r2, r3
 802c216:	693b      	ldr	r3, [r7, #16]
 802c218:	441a      	add	r2, r3
 802c21a:	4b50      	ldr	r3, [pc, #320]	@ (802c35c <mg_md5_transform+0xb74>)
 802c21c:	4413      	add	r3, r2
 802c21e:	613b      	str	r3, [r7, #16]
 802c220:	693b      	ldr	r3, [r7, #16]
 802c222:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c226:	613b      	str	r3, [r7, #16]
 802c228:	693a      	ldr	r2, [r7, #16]
 802c22a:	68fb      	ldr	r3, [r7, #12]
 802c22c:	4413      	add	r3, r2
 802c22e:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 802c230:	68bb      	ldr	r3, [r7, #8]
 802c232:	43da      	mvns	r2, r3
 802c234:	693b      	ldr	r3, [r7, #16]
 802c236:	431a      	orrs	r2, r3
 802c238:	68fb      	ldr	r3, [r7, #12]
 802c23a:	405a      	eors	r2, r3
 802c23c:	683b      	ldr	r3, [r7, #0]
 802c23e:	3330      	adds	r3, #48	@ 0x30
 802c240:	681b      	ldr	r3, [r3, #0]
 802c242:	441a      	add	r2, r3
 802c244:	697b      	ldr	r3, [r7, #20]
 802c246:	441a      	add	r2, r3
 802c248:	4b45      	ldr	r3, [pc, #276]	@ (802c360 <mg_md5_transform+0xb78>)
 802c24a:	4413      	add	r3, r2
 802c24c:	617b      	str	r3, [r7, #20]
 802c24e:	697b      	ldr	r3, [r7, #20]
 802c250:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c254:	617b      	str	r3, [r7, #20]
 802c256:	697a      	ldr	r2, [r7, #20]
 802c258:	693b      	ldr	r3, [r7, #16]
 802c25a:	4413      	add	r3, r2
 802c25c:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 802c25e:	68fb      	ldr	r3, [r7, #12]
 802c260:	43da      	mvns	r2, r3
 802c262:	697b      	ldr	r3, [r7, #20]
 802c264:	431a      	orrs	r2, r3
 802c266:	693b      	ldr	r3, [r7, #16]
 802c268:	405a      	eors	r2, r3
 802c26a:	683b      	ldr	r3, [r7, #0]
 802c26c:	330c      	adds	r3, #12
 802c26e:	681b      	ldr	r3, [r3, #0]
 802c270:	441a      	add	r2, r3
 802c272:	68bb      	ldr	r3, [r7, #8]
 802c274:	441a      	add	r2, r3
 802c276:	4b3b      	ldr	r3, [pc, #236]	@ (802c364 <mg_md5_transform+0xb7c>)
 802c278:	4413      	add	r3, r2
 802c27a:	60bb      	str	r3, [r7, #8]
 802c27c:	68bb      	ldr	r3, [r7, #8]
 802c27e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c282:	60bb      	str	r3, [r7, #8]
 802c284:	68ba      	ldr	r2, [r7, #8]
 802c286:	697b      	ldr	r3, [r7, #20]
 802c288:	4413      	add	r3, r2
 802c28a:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 802c28c:	693b      	ldr	r3, [r7, #16]
 802c28e:	43da      	mvns	r2, r3
 802c290:	68bb      	ldr	r3, [r7, #8]
 802c292:	431a      	orrs	r2, r3
 802c294:	697b      	ldr	r3, [r7, #20]
 802c296:	405a      	eors	r2, r3
 802c298:	683b      	ldr	r3, [r7, #0]
 802c29a:	3328      	adds	r3, #40	@ 0x28
 802c29c:	681b      	ldr	r3, [r3, #0]
 802c29e:	441a      	add	r2, r3
 802c2a0:	68fb      	ldr	r3, [r7, #12]
 802c2a2:	4413      	add	r3, r2
 802c2a4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802c2a8:	f6a3 3383 	subw	r3, r3, #2947	@ 0xb83
 802c2ac:	60fb      	str	r3, [r7, #12]
 802c2ae:	68fb      	ldr	r3, [r7, #12]
 802c2b0:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c2b4:	60fb      	str	r3, [r7, #12]
 802c2b6:	68fa      	ldr	r2, [r7, #12]
 802c2b8:	68bb      	ldr	r3, [r7, #8]
 802c2ba:	4413      	add	r3, r2
 802c2bc:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 802c2be:	697b      	ldr	r3, [r7, #20]
 802c2c0:	43da      	mvns	r2, r3
 802c2c2:	68fb      	ldr	r3, [r7, #12]
 802c2c4:	431a      	orrs	r2, r3
 802c2c6:	68bb      	ldr	r3, [r7, #8]
 802c2c8:	405a      	eors	r2, r3
 802c2ca:	683b      	ldr	r3, [r7, #0]
 802c2cc:	3304      	adds	r3, #4
 802c2ce:	681b      	ldr	r3, [r3, #0]
 802c2d0:	441a      	add	r2, r3
 802c2d2:	693b      	ldr	r3, [r7, #16]
 802c2d4:	441a      	add	r2, r3
 802c2d6:	4b24      	ldr	r3, [pc, #144]	@ (802c368 <mg_md5_transform+0xb80>)
 802c2d8:	4413      	add	r3, r2
 802c2da:	613b      	str	r3, [r7, #16]
 802c2dc:	693b      	ldr	r3, [r7, #16]
 802c2de:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c2e2:	613b      	str	r3, [r7, #16]
 802c2e4:	693a      	ldr	r2, [r7, #16]
 802c2e6:	68fb      	ldr	r3, [r7, #12]
 802c2e8:	4413      	add	r3, r2
 802c2ea:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 802c2ec:	68bb      	ldr	r3, [r7, #8]
 802c2ee:	43da      	mvns	r2, r3
 802c2f0:	693b      	ldr	r3, [r7, #16]
 802c2f2:	431a      	orrs	r2, r3
 802c2f4:	68fb      	ldr	r3, [r7, #12]
 802c2f6:	405a      	eors	r2, r3
 802c2f8:	683b      	ldr	r3, [r7, #0]
 802c2fa:	3320      	adds	r3, #32
 802c2fc:	681b      	ldr	r3, [r3, #0]
 802c2fe:	441a      	add	r2, r3
 802c300:	697b      	ldr	r3, [r7, #20]
 802c302:	441a      	add	r2, r3
 802c304:	4b19      	ldr	r3, [pc, #100]	@ (802c36c <mg_md5_transform+0xb84>)
 802c306:	4413      	add	r3, r2
 802c308:	617b      	str	r3, [r7, #20]
 802c30a:	697b      	ldr	r3, [r7, #20]
 802c30c:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c310:	617b      	str	r3, [r7, #20]
 802c312:	697a      	ldr	r2, [r7, #20]
 802c314:	693b      	ldr	r3, [r7, #16]
 802c316:	4413      	add	r3, r2
 802c318:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 802c31a:	68fb      	ldr	r3, [r7, #12]
 802c31c:	43da      	mvns	r2, r3
 802c31e:	697b      	ldr	r3, [r7, #20]
 802c320:	431a      	orrs	r2, r3
 802c322:	693b      	ldr	r3, [r7, #16]
 802c324:	405a      	eors	r2, r3
 802c326:	683b      	ldr	r3, [r7, #0]
 802c328:	333c      	adds	r3, #60	@ 0x3c
 802c32a:	681b      	ldr	r3, [r3, #0]
 802c32c:	441a      	add	r2, r3
 802c32e:	68bb      	ldr	r3, [r7, #8]
 802c330:	441a      	add	r2, r3
 802c332:	4b0f      	ldr	r3, [pc, #60]	@ (802c370 <mg_md5_transform+0xb88>)
 802c334:	4413      	add	r3, r2
 802c336:	60bb      	str	r3, [r7, #8]
 802c338:	68bb      	ldr	r3, [r7, #8]
 802c33a:	e01b      	b.n	802c374 <mg_md5_transform+0xb8c>
 802c33c:	04881d05 	.word	0x04881d05
 802c340:	d9d4d039 	.word	0xd9d4d039
 802c344:	e6db99e5 	.word	0xe6db99e5
 802c348:	1fa27cf8 	.word	0x1fa27cf8
 802c34c:	c4ac5665 	.word	0xc4ac5665
 802c350:	f4292244 	.word	0xf4292244
 802c354:	432aff97 	.word	0x432aff97
 802c358:	ab9423a7 	.word	0xab9423a7
 802c35c:	fc93a039 	.word	0xfc93a039
 802c360:	655b59c3 	.word	0x655b59c3
 802c364:	8f0ccc92 	.word	0x8f0ccc92
 802c368:	85845dd1 	.word	0x85845dd1
 802c36c:	6fa87e4f 	.word	0x6fa87e4f
 802c370:	fe2ce6e0 	.word	0xfe2ce6e0
 802c374:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c378:	60bb      	str	r3, [r7, #8]
 802c37a:	68ba      	ldr	r2, [r7, #8]
 802c37c:	697b      	ldr	r3, [r7, #20]
 802c37e:	4413      	add	r3, r2
 802c380:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 802c382:	693b      	ldr	r3, [r7, #16]
 802c384:	43da      	mvns	r2, r3
 802c386:	68bb      	ldr	r3, [r7, #8]
 802c388:	431a      	orrs	r2, r3
 802c38a:	697b      	ldr	r3, [r7, #20]
 802c38c:	405a      	eors	r2, r3
 802c38e:	683b      	ldr	r3, [r7, #0]
 802c390:	3318      	adds	r3, #24
 802c392:	681b      	ldr	r3, [r3, #0]
 802c394:	441a      	add	r2, r3
 802c396:	68fb      	ldr	r3, [r7, #12]
 802c398:	441a      	add	r2, r3
 802c39a:	4b51      	ldr	r3, [pc, #324]	@ (802c4e0 <mg_md5_transform+0xcf8>)
 802c39c:	4413      	add	r3, r2
 802c39e:	60fb      	str	r3, [r7, #12]
 802c3a0:	68fb      	ldr	r3, [r7, #12]
 802c3a2:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c3a6:	60fb      	str	r3, [r7, #12]
 802c3a8:	68fa      	ldr	r2, [r7, #12]
 802c3aa:	68bb      	ldr	r3, [r7, #8]
 802c3ac:	4413      	add	r3, r2
 802c3ae:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 802c3b0:	697b      	ldr	r3, [r7, #20]
 802c3b2:	43da      	mvns	r2, r3
 802c3b4:	68fb      	ldr	r3, [r7, #12]
 802c3b6:	431a      	orrs	r2, r3
 802c3b8:	68bb      	ldr	r3, [r7, #8]
 802c3ba:	405a      	eors	r2, r3
 802c3bc:	683b      	ldr	r3, [r7, #0]
 802c3be:	3334      	adds	r3, #52	@ 0x34
 802c3c0:	681b      	ldr	r3, [r3, #0]
 802c3c2:	441a      	add	r2, r3
 802c3c4:	693b      	ldr	r3, [r7, #16]
 802c3c6:	441a      	add	r2, r3
 802c3c8:	4b46      	ldr	r3, [pc, #280]	@ (802c4e4 <mg_md5_transform+0xcfc>)
 802c3ca:	4413      	add	r3, r2
 802c3cc:	613b      	str	r3, [r7, #16]
 802c3ce:	693b      	ldr	r3, [r7, #16]
 802c3d0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c3d4:	613b      	str	r3, [r7, #16]
 802c3d6:	693a      	ldr	r2, [r7, #16]
 802c3d8:	68fb      	ldr	r3, [r7, #12]
 802c3da:	4413      	add	r3, r2
 802c3dc:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 802c3de:	68bb      	ldr	r3, [r7, #8]
 802c3e0:	43da      	mvns	r2, r3
 802c3e2:	693b      	ldr	r3, [r7, #16]
 802c3e4:	431a      	orrs	r2, r3
 802c3e6:	68fb      	ldr	r3, [r7, #12]
 802c3e8:	405a      	eors	r2, r3
 802c3ea:	683b      	ldr	r3, [r7, #0]
 802c3ec:	3310      	adds	r3, #16
 802c3ee:	681b      	ldr	r3, [r3, #0]
 802c3f0:	441a      	add	r2, r3
 802c3f2:	697b      	ldr	r3, [r7, #20]
 802c3f4:	441a      	add	r2, r3
 802c3f6:	4b3c      	ldr	r3, [pc, #240]	@ (802c4e8 <mg_md5_transform+0xd00>)
 802c3f8:	4413      	add	r3, r2
 802c3fa:	617b      	str	r3, [r7, #20]
 802c3fc:	697b      	ldr	r3, [r7, #20]
 802c3fe:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c402:	617b      	str	r3, [r7, #20]
 802c404:	697a      	ldr	r2, [r7, #20]
 802c406:	693b      	ldr	r3, [r7, #16]
 802c408:	4413      	add	r3, r2
 802c40a:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 802c40c:	68fb      	ldr	r3, [r7, #12]
 802c40e:	43da      	mvns	r2, r3
 802c410:	697b      	ldr	r3, [r7, #20]
 802c412:	431a      	orrs	r2, r3
 802c414:	693b      	ldr	r3, [r7, #16]
 802c416:	405a      	eors	r2, r3
 802c418:	683b      	ldr	r3, [r7, #0]
 802c41a:	332c      	adds	r3, #44	@ 0x2c
 802c41c:	681b      	ldr	r3, [r3, #0]
 802c41e:	441a      	add	r2, r3
 802c420:	68bb      	ldr	r3, [r7, #8]
 802c422:	441a      	add	r2, r3
 802c424:	4b31      	ldr	r3, [pc, #196]	@ (802c4ec <mg_md5_transform+0xd04>)
 802c426:	4413      	add	r3, r2
 802c428:	60bb      	str	r3, [r7, #8]
 802c42a:	68bb      	ldr	r3, [r7, #8]
 802c42c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c430:	60bb      	str	r3, [r7, #8]
 802c432:	68ba      	ldr	r2, [r7, #8]
 802c434:	697b      	ldr	r3, [r7, #20]
 802c436:	4413      	add	r3, r2
 802c438:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 802c43a:	693b      	ldr	r3, [r7, #16]
 802c43c:	43da      	mvns	r2, r3
 802c43e:	68bb      	ldr	r3, [r7, #8]
 802c440:	431a      	orrs	r2, r3
 802c442:	697b      	ldr	r3, [r7, #20]
 802c444:	405a      	eors	r2, r3
 802c446:	683b      	ldr	r3, [r7, #0]
 802c448:	3308      	adds	r3, #8
 802c44a:	681b      	ldr	r3, [r3, #0]
 802c44c:	441a      	add	r2, r3
 802c44e:	68fb      	ldr	r3, [r7, #12]
 802c450:	441a      	add	r2, r3
 802c452:	4b27      	ldr	r3, [pc, #156]	@ (802c4f0 <mg_md5_transform+0xd08>)
 802c454:	4413      	add	r3, r2
 802c456:	60fb      	str	r3, [r7, #12]
 802c458:	68fb      	ldr	r3, [r7, #12]
 802c45a:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c45e:	60fb      	str	r3, [r7, #12]
 802c460:	68fa      	ldr	r2, [r7, #12]
 802c462:	68bb      	ldr	r3, [r7, #8]
 802c464:	4413      	add	r3, r2
 802c466:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 802c468:	697b      	ldr	r3, [r7, #20]
 802c46a:	43da      	mvns	r2, r3
 802c46c:	68fb      	ldr	r3, [r7, #12]
 802c46e:	431a      	orrs	r2, r3
 802c470:	68bb      	ldr	r3, [r7, #8]
 802c472:	405a      	eors	r2, r3
 802c474:	683b      	ldr	r3, [r7, #0]
 802c476:	3324      	adds	r3, #36	@ 0x24
 802c478:	681b      	ldr	r3, [r3, #0]
 802c47a:	441a      	add	r2, r3
 802c47c:	693b      	ldr	r3, [r7, #16]
 802c47e:	441a      	add	r2, r3
 802c480:	4b1c      	ldr	r3, [pc, #112]	@ (802c4f4 <mg_md5_transform+0xd0c>)
 802c482:	4413      	add	r3, r2
 802c484:	613b      	str	r3, [r7, #16]
 802c486:	693b      	ldr	r3, [r7, #16]
 802c488:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c48c:	613b      	str	r3, [r7, #16]
 802c48e:	693a      	ldr	r2, [r7, #16]
 802c490:	68fb      	ldr	r3, [r7, #12]
 802c492:	4413      	add	r3, r2
 802c494:	613b      	str	r3, [r7, #16]

  buf[0] += a;
 802c496:	687b      	ldr	r3, [r7, #4]
 802c498:	681a      	ldr	r2, [r3, #0]
 802c49a:	697b      	ldr	r3, [r7, #20]
 802c49c:	441a      	add	r2, r3
 802c49e:	687b      	ldr	r3, [r7, #4]
 802c4a0:	601a      	str	r2, [r3, #0]
  buf[1] += b;
 802c4a2:	687b      	ldr	r3, [r7, #4]
 802c4a4:	3304      	adds	r3, #4
 802c4a6:	6819      	ldr	r1, [r3, #0]
 802c4a8:	687b      	ldr	r3, [r7, #4]
 802c4aa:	3304      	adds	r3, #4
 802c4ac:	693a      	ldr	r2, [r7, #16]
 802c4ae:	440a      	add	r2, r1
 802c4b0:	601a      	str	r2, [r3, #0]
  buf[2] += c;
 802c4b2:	687b      	ldr	r3, [r7, #4]
 802c4b4:	3308      	adds	r3, #8
 802c4b6:	6819      	ldr	r1, [r3, #0]
 802c4b8:	687b      	ldr	r3, [r7, #4]
 802c4ba:	3308      	adds	r3, #8
 802c4bc:	68fa      	ldr	r2, [r7, #12]
 802c4be:	440a      	add	r2, r1
 802c4c0:	601a      	str	r2, [r3, #0]
  buf[3] += d;
 802c4c2:	687b      	ldr	r3, [r7, #4]
 802c4c4:	330c      	adds	r3, #12
 802c4c6:	6819      	ldr	r1, [r3, #0]
 802c4c8:	687b      	ldr	r3, [r7, #4]
 802c4ca:	330c      	adds	r3, #12
 802c4cc:	68ba      	ldr	r2, [r7, #8]
 802c4ce:	440a      	add	r2, r1
 802c4d0:	601a      	str	r2, [r3, #0]
}
 802c4d2:	bf00      	nop
 802c4d4:	371c      	adds	r7, #28
 802c4d6:	46bd      	mov	sp, r7
 802c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c4dc:	4770      	bx	lr
 802c4de:	bf00      	nop
 802c4e0:	a3014314 	.word	0xa3014314
 802c4e4:	4e0811a1 	.word	0x4e0811a1
 802c4e8:	f7537e82 	.word	0xf7537e82
 802c4ec:	bd3af235 	.word	0xbd3af235
 802c4f0:	2ad7d2bb 	.word	0x2ad7d2bb
 802c4f4:	eb86d391 	.word	0xeb86d391

0802c4f8 <mg_md5_update>:

void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 802c4f8:	b580      	push	{r7, lr}
 802c4fa:	b086      	sub	sp, #24
 802c4fc:	af00      	add	r7, sp, #0
 802c4fe:	60f8      	str	r0, [r7, #12]
 802c500:	60b9      	str	r1, [r7, #8]
 802c502:	607a      	str	r2, [r7, #4]
  uint32_t t;

  t = ctx->bits[0];
 802c504:	68fb      	ldr	r3, [r7, #12]
 802c506:	691b      	ldr	r3, [r3, #16]
 802c508:	617b      	str	r3, [r7, #20]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 802c50a:	687b      	ldr	r3, [r7, #4]
 802c50c:	00da      	lsls	r2, r3, #3
 802c50e:	697b      	ldr	r3, [r7, #20]
 802c510:	441a      	add	r2, r3
 802c512:	68fb      	ldr	r3, [r7, #12]
 802c514:	611a      	str	r2, [r3, #16]
 802c516:	68fb      	ldr	r3, [r7, #12]
 802c518:	691b      	ldr	r3, [r3, #16]
 802c51a:	697a      	ldr	r2, [r7, #20]
 802c51c:	429a      	cmp	r2, r3
 802c51e:	d904      	bls.n	802c52a <mg_md5_update+0x32>
 802c520:	68fb      	ldr	r3, [r7, #12]
 802c522:	695b      	ldr	r3, [r3, #20]
 802c524:	1c5a      	adds	r2, r3, #1
 802c526:	68fb      	ldr	r3, [r7, #12]
 802c528:	615a      	str	r2, [r3, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 802c52a:	68fb      	ldr	r3, [r7, #12]
 802c52c:	695a      	ldr	r2, [r3, #20]
 802c52e:	687b      	ldr	r3, [r7, #4]
 802c530:	0f5b      	lsrs	r3, r3, #29
 802c532:	441a      	add	r2, r3
 802c534:	68fb      	ldr	r3, [r7, #12]
 802c536:	615a      	str	r2, [r3, #20]

  t = (t >> 3) & 0x3f;
 802c538:	697b      	ldr	r3, [r7, #20]
 802c53a:	08db      	lsrs	r3, r3, #3
 802c53c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802c540:	617b      	str	r3, [r7, #20]

  if (t) {
 802c542:	697b      	ldr	r3, [r7, #20]
 802c544:	2b00      	cmp	r3, #0
 802c546:	d048      	beq.n	802c5da <mg_md5_update+0xe2>
    unsigned char *p = (unsigned char *) ctx->in + t;
 802c548:	68fb      	ldr	r3, [r7, #12]
 802c54a:	f103 0218 	add.w	r2, r3, #24
 802c54e:	697b      	ldr	r3, [r7, #20]
 802c550:	4413      	add	r3, r2
 802c552:	613b      	str	r3, [r7, #16]

    t = 64 - t;
 802c554:	697b      	ldr	r3, [r7, #20]
 802c556:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 802c55a:	617b      	str	r3, [r7, #20]
    if (len < t) {
 802c55c:	687a      	ldr	r2, [r7, #4]
 802c55e:	697b      	ldr	r3, [r7, #20]
 802c560:	429a      	cmp	r2, r3
 802c562:	d205      	bcs.n	802c570 <mg_md5_update+0x78>
      memcpy(p, buf, len);
 802c564:	687a      	ldr	r2, [r7, #4]
 802c566:	68b9      	ldr	r1, [r7, #8]
 802c568:	6938      	ldr	r0, [r7, #16]
 802c56a:	f00a fff5 	bl	8037558 <memcpy>
      return;
 802c56e:	e03e      	b.n	802c5ee <mg_md5_update+0xf6>
    }
    memcpy(p, buf, t);
 802c570:	697a      	ldr	r2, [r7, #20]
 802c572:	68b9      	ldr	r1, [r7, #8]
 802c574:	6938      	ldr	r0, [r7, #16]
 802c576:	f00a ffef 	bl	8037558 <memcpy>
    mg_byte_reverse(ctx->in, 16);
 802c57a:	68fb      	ldr	r3, [r7, #12]
 802c57c:	3318      	adds	r3, #24
 802c57e:	2110      	movs	r1, #16
 802c580:	4618      	mov	r0, r3
 802c582:	f7ff f8dd 	bl	802b740 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802c586:	68fa      	ldr	r2, [r7, #12]
 802c588:	68fb      	ldr	r3, [r7, #12]
 802c58a:	3318      	adds	r3, #24
 802c58c:	4619      	mov	r1, r3
 802c58e:	4610      	mov	r0, r2
 802c590:	f7ff f92a 	bl	802b7e8 <mg_md5_transform>
    buf += t;
 802c594:	68ba      	ldr	r2, [r7, #8]
 802c596:	697b      	ldr	r3, [r7, #20]
 802c598:	4413      	add	r3, r2
 802c59a:	60bb      	str	r3, [r7, #8]
    len -= t;
 802c59c:	687a      	ldr	r2, [r7, #4]
 802c59e:	697b      	ldr	r3, [r7, #20]
 802c5a0:	1ad3      	subs	r3, r2, r3
 802c5a2:	607b      	str	r3, [r7, #4]
  }

  while (len >= 64) {
 802c5a4:	e019      	b.n	802c5da <mg_md5_update+0xe2>
    memcpy(ctx->in, buf, 64);
 802c5a6:	68fb      	ldr	r3, [r7, #12]
 802c5a8:	3318      	adds	r3, #24
 802c5aa:	2240      	movs	r2, #64	@ 0x40
 802c5ac:	68b9      	ldr	r1, [r7, #8]
 802c5ae:	4618      	mov	r0, r3
 802c5b0:	f00a ffd2 	bl	8037558 <memcpy>
    mg_byte_reverse(ctx->in, 16);
 802c5b4:	68fb      	ldr	r3, [r7, #12]
 802c5b6:	3318      	adds	r3, #24
 802c5b8:	2110      	movs	r1, #16
 802c5ba:	4618      	mov	r0, r3
 802c5bc:	f7ff f8c0 	bl	802b740 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802c5c0:	68fa      	ldr	r2, [r7, #12]
 802c5c2:	68fb      	ldr	r3, [r7, #12]
 802c5c4:	3318      	adds	r3, #24
 802c5c6:	4619      	mov	r1, r3
 802c5c8:	4610      	mov	r0, r2
 802c5ca:	f7ff f90d 	bl	802b7e8 <mg_md5_transform>
    buf += 64;
 802c5ce:	68bb      	ldr	r3, [r7, #8]
 802c5d0:	3340      	adds	r3, #64	@ 0x40
 802c5d2:	60bb      	str	r3, [r7, #8]
    len -= 64;
 802c5d4:	687b      	ldr	r3, [r7, #4]
 802c5d6:	3b40      	subs	r3, #64	@ 0x40
 802c5d8:	607b      	str	r3, [r7, #4]
  while (len >= 64) {
 802c5da:	687b      	ldr	r3, [r7, #4]
 802c5dc:	2b3f      	cmp	r3, #63	@ 0x3f
 802c5de:	d8e2      	bhi.n	802c5a6 <mg_md5_update+0xae>
  }

  memcpy(ctx->in, buf, len);
 802c5e0:	68fb      	ldr	r3, [r7, #12]
 802c5e2:	3318      	adds	r3, #24
 802c5e4:	687a      	ldr	r2, [r7, #4]
 802c5e6:	68b9      	ldr	r1, [r7, #8]
 802c5e8:	4618      	mov	r0, r3
 802c5ea:	f00a ffb5 	bl	8037558 <memcpy>
}
 802c5ee:	3718      	adds	r7, #24
 802c5f0:	46bd      	mov	sp, r7
 802c5f2:	bd80      	pop	{r7, pc}

0802c5f4 <mg_md5_final>:

void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 802c5f4:	b580      	push	{r7, lr}
 802c5f6:	b086      	sub	sp, #24
 802c5f8:	af00      	add	r7, sp, #0
 802c5fa:	6078      	str	r0, [r7, #4]
 802c5fc:	6039      	str	r1, [r7, #0]
  unsigned count;
  unsigned char *p;
  uint32_t *a;

  count = (ctx->bits[0] >> 3) & 0x3F;
 802c5fe:	687b      	ldr	r3, [r7, #4]
 802c600:	691b      	ldr	r3, [r3, #16]
 802c602:	08db      	lsrs	r3, r3, #3
 802c604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802c608:	617b      	str	r3, [r7, #20]

  p = ctx->in + count;
 802c60a:	687b      	ldr	r3, [r7, #4]
 802c60c:	f103 0218 	add.w	r2, r3, #24
 802c610:	697b      	ldr	r3, [r7, #20]
 802c612:	4413      	add	r3, r2
 802c614:	613b      	str	r3, [r7, #16]
  *p++ = 0x80;
 802c616:	693b      	ldr	r3, [r7, #16]
 802c618:	1c5a      	adds	r2, r3, #1
 802c61a:	613a      	str	r2, [r7, #16]
 802c61c:	2280      	movs	r2, #128	@ 0x80
 802c61e:	701a      	strb	r2, [r3, #0]
  count = 64 - 1 - count;
 802c620:	697b      	ldr	r3, [r7, #20]
 802c622:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 802c626:	617b      	str	r3, [r7, #20]
  if (count < 8) {
 802c628:	697b      	ldr	r3, [r7, #20]
 802c62a:	2b07      	cmp	r3, #7
 802c62c:	d819      	bhi.n	802c662 <mg_md5_final+0x6e>
    memset(p, 0, count);
 802c62e:	697a      	ldr	r2, [r7, #20]
 802c630:	2100      	movs	r1, #0
 802c632:	6938      	ldr	r0, [r7, #16]
 802c634:	f009 fd54 	bl	80360e0 <memset>
    mg_byte_reverse(ctx->in, 16);
 802c638:	687b      	ldr	r3, [r7, #4]
 802c63a:	3318      	adds	r3, #24
 802c63c:	2110      	movs	r1, #16
 802c63e:	4618      	mov	r0, r3
 802c640:	f7ff f87e 	bl	802b740 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802c644:	687a      	ldr	r2, [r7, #4]
 802c646:	687b      	ldr	r3, [r7, #4]
 802c648:	3318      	adds	r3, #24
 802c64a:	4619      	mov	r1, r3
 802c64c:	4610      	mov	r0, r2
 802c64e:	f7ff f8cb 	bl	802b7e8 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 802c652:	687b      	ldr	r3, [r7, #4]
 802c654:	3318      	adds	r3, #24
 802c656:	2238      	movs	r2, #56	@ 0x38
 802c658:	2100      	movs	r1, #0
 802c65a:	4618      	mov	r0, r3
 802c65c:	f009 fd40 	bl	80360e0 <memset>
 802c660:	e006      	b.n	802c670 <mg_md5_final+0x7c>
  } else {
    memset(p, 0, count - 8);
 802c662:	697b      	ldr	r3, [r7, #20]
 802c664:	3b08      	subs	r3, #8
 802c666:	461a      	mov	r2, r3
 802c668:	2100      	movs	r1, #0
 802c66a:	6938      	ldr	r0, [r7, #16]
 802c66c:	f009 fd38 	bl	80360e0 <memset>
  }
  mg_byte_reverse(ctx->in, 14);
 802c670:	687b      	ldr	r3, [r7, #4]
 802c672:	3318      	adds	r3, #24
 802c674:	210e      	movs	r1, #14
 802c676:	4618      	mov	r0, r3
 802c678:	f7ff f862 	bl	802b740 <mg_byte_reverse>

  a = (uint32_t *) ctx->in;
 802c67c:	687b      	ldr	r3, [r7, #4]
 802c67e:	3318      	adds	r3, #24
 802c680:	60fb      	str	r3, [r7, #12]
  a[14] = ctx->bits[0];
 802c682:	68fb      	ldr	r3, [r7, #12]
 802c684:	3338      	adds	r3, #56	@ 0x38
 802c686:	687a      	ldr	r2, [r7, #4]
 802c688:	6912      	ldr	r2, [r2, #16]
 802c68a:	601a      	str	r2, [r3, #0]
  a[15] = ctx->bits[1];
 802c68c:	68fb      	ldr	r3, [r7, #12]
 802c68e:	333c      	adds	r3, #60	@ 0x3c
 802c690:	687a      	ldr	r2, [r7, #4]
 802c692:	6952      	ldr	r2, [r2, #20]
 802c694:	601a      	str	r2, [r3, #0]

  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802c696:	687a      	ldr	r2, [r7, #4]
 802c698:	687b      	ldr	r3, [r7, #4]
 802c69a:	3318      	adds	r3, #24
 802c69c:	4619      	mov	r1, r3
 802c69e:	4610      	mov	r0, r2
 802c6a0:	f7ff f8a2 	bl	802b7e8 <mg_md5_transform>
  mg_byte_reverse((unsigned char *) ctx->buf, 4);
 802c6a4:	687b      	ldr	r3, [r7, #4]
 802c6a6:	2104      	movs	r1, #4
 802c6a8:	4618      	mov	r0, r3
 802c6aa:	f7ff f849 	bl	802b740 <mg_byte_reverse>
  memcpy(digest, ctx->buf, 16);
 802c6ae:	687b      	ldr	r3, [r7, #4]
 802c6b0:	2210      	movs	r2, #16
 802c6b2:	4619      	mov	r1, r3
 802c6b4:	6838      	ldr	r0, [r7, #0]
 802c6b6:	f00a ff4f 	bl	8037558 <memcpy>
  memset((char *) ctx, 0, sizeof(*ctx));
 802c6ba:	2258      	movs	r2, #88	@ 0x58
 802c6bc:	2100      	movs	r1, #0
 802c6be:	6878      	ldr	r0, [r7, #4]
 802c6c0:	f009 fd0e 	bl	80360e0 <memset>
}
 802c6c4:	bf00      	nop
 802c6c6:	3718      	adds	r7, #24
 802c6c8:	46bd      	mov	sp, r7
 802c6ca:	bd80      	pop	{r7, pc}

0802c6cc <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 802c6cc:	b580      	push	{r7, lr}
 802c6ce:	b088      	sub	sp, #32
 802c6d0:	af00      	add	r7, sp, #0
 802c6d2:	60f8      	str	r0, [r7, #12]
 802c6d4:	607b      	str	r3, [r7, #4]
 802c6d6:	460b      	mov	r3, r1
 802c6d8:	72fb      	strb	r3, [r7, #11]
 802c6da:	4613      	mov	r3, r2
 802c6dc:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 802c6de:	f107 0314 	add.w	r3, r7, #20
 802c6e2:	3301      	adds	r3, #1
 802c6e4:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 802c6e6:	7afb      	ldrb	r3, [r7, #11]
 802c6e8:	011b      	lsls	r3, r3, #4
 802c6ea:	b25a      	sxtb	r2, r3
 802c6ec:	f997 300a 	ldrsb.w	r3, [r7, #10]
 802c6f0:	4313      	orrs	r3, r2
 802c6f2:	b25b      	sxtb	r3, r3
 802c6f4:	b2db      	uxtb	r3, r3
 802c6f6:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 802c6f8:	687b      	ldr	r3, [r7, #4]
 802c6fa:	b2db      	uxtb	r3, r3
 802c6fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802c700:	b2da      	uxtb	r2, r3
 802c702:	69fb      	ldr	r3, [r7, #28]
 802c704:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 802c706:	687b      	ldr	r3, [r7, #4]
 802c708:	09db      	lsrs	r3, r3, #7
 802c70a:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 802c70c:	687b      	ldr	r3, [r7, #4]
 802c70e:	2b00      	cmp	r3, #0
 802c710:	d006      	beq.n	802c720 <mg_mqtt_send_header+0x54>
 802c712:	69fb      	ldr	r3, [r7, #28]
 802c714:	781b      	ldrb	r3, [r3, #0]
 802c716:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 802c71a:	b2da      	uxtb	r2, r3
 802c71c:	69fb      	ldr	r3, [r7, #28]
 802c71e:	701a      	strb	r2, [r3, #0]
    vlen++;
 802c720:	69fb      	ldr	r3, [r7, #28]
 802c722:	3301      	adds	r3, #1
 802c724:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 802c726:	687b      	ldr	r3, [r7, #4]
 802c728:	2b00      	cmp	r3, #0
 802c72a:	d005      	beq.n	802c738 <mg_mqtt_send_header+0x6c>
 802c72c:	f107 0314 	add.w	r3, r7, #20
 802c730:	3305      	adds	r3, #5
 802c732:	69fa      	ldr	r2, [r7, #28]
 802c734:	429a      	cmp	r2, r3
 802c736:	d3df      	bcc.n	802c6f8 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 802c738:	f107 0314 	add.w	r3, r7, #20
 802c73c:	69fa      	ldr	r2, [r7, #28]
 802c73e:	1ad3      	subs	r3, r2, r3
 802c740:	461a      	mov	r2, r3
 802c742:	f107 0314 	add.w	r3, r7, #20
 802c746:	4619      	mov	r1, r3
 802c748:	68f8      	ldr	r0, [r7, #12]
 802c74a:	f004 fded 	bl	8031328 <mg_send>
}
 802c74e:	bf00      	nop
 802c750:	3720      	adds	r7, #32
 802c752:	46bd      	mov	sp, r7
 802c754:	bd80      	pop	{r7, pc}

0802c756 <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 802c756:	b580      	push	{r7, lr}
 802c758:	b082      	sub	sp, #8
 802c75a:	af00      	add	r7, sp, #0
 802c75c:	6078      	str	r0, [r7, #4]
 802c75e:	460b      	mov	r3, r1
 802c760:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 802c762:	1cbb      	adds	r3, r7, #2
 802c764:	2202      	movs	r2, #2
 802c766:	4619      	mov	r1, r3
 802c768:	6878      	ldr	r0, [r7, #4]
 802c76a:	f004 fddd 	bl	8031328 <mg_send>
}
 802c76e:	bf00      	nop
 802c770:	3708      	adds	r7, #8
 802c772:	46bd      	mov	sp, r7
 802c774:	bd80      	pop	{r7, pc}

0802c776 <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 802c776:	b580      	push	{r7, lr}
 802c778:	b082      	sub	sp, #8
 802c77a:	af00      	add	r7, sp, #0
 802c77c:	6078      	str	r0, [r7, #4]
 802c77e:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 802c780:	463b      	mov	r3, r7
 802c782:	2204      	movs	r2, #4
 802c784:	4619      	mov	r1, r3
 802c786:	6878      	ldr	r0, [r7, #4]
 802c788:	f004 fdce 	bl	8031328 <mg_send>
}
 802c78c:	bf00      	nop
 802c78e:	3708      	adds	r7, #8
 802c790:	46bd      	mov	sp, r7
 802c792:	bd80      	pop	{r7, pc}

0802c794 <varint_size>:

static uint8_t varint_size(size_t length) {
 802c794:	b480      	push	{r7}
 802c796:	b085      	sub	sp, #20
 802c798:	af00      	add	r7, sp, #0
 802c79a:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 802c79c:	2300      	movs	r3, #0
 802c79e:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 802c7a0:	7bfb      	ldrb	r3, [r7, #15]
 802c7a2:	3301      	adds	r3, #1
 802c7a4:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 802c7a6:	687b      	ldr	r3, [r7, #4]
 802c7a8:	09db      	lsrs	r3, r3, #7
 802c7aa:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 802c7ac:	687b      	ldr	r3, [r7, #4]
 802c7ae:	2b00      	cmp	r3, #0
 802c7b0:	d1f6      	bne.n	802c7a0 <varint_size+0xc>
  return bytes_needed;
 802c7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 802c7b4:	4618      	mov	r0, r3
 802c7b6:	3714      	adds	r7, #20
 802c7b8:	46bd      	mov	sp, r7
 802c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c7be:	4770      	bx	lr

0802c7c0 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 802c7c0:	b480      	push	{r7}
 802c7c2:	b085      	sub	sp, #20
 802c7c4:	af00      	add	r7, sp, #0
 802c7c6:	6078      	str	r0, [r7, #4]
 802c7c8:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 802c7ca:	2300      	movs	r3, #0
 802c7cc:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t b = (uint8_t) (value % 128);
 802c7ce:	683b      	ldr	r3, [r7, #0]
 802c7d0:	b2db      	uxtb	r3, r3
 802c7d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802c7d6:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 802c7d8:	683b      	ldr	r3, [r7, #0]
 802c7da:	09db      	lsrs	r3, r3, #7
 802c7dc:	603b      	str	r3, [r7, #0]
    if (value > 0) b |= 0x80;
 802c7de:	683b      	ldr	r3, [r7, #0]
 802c7e0:	2b00      	cmp	r3, #0
 802c7e2:	d003      	beq.n	802c7ec <encode_varint+0x2c>
 802c7e4:	7afb      	ldrb	r3, [r7, #11]
 802c7e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 802c7ea:	72fb      	strb	r3, [r7, #11]
    buf[len++] = b;
 802c7ec:	68fb      	ldr	r3, [r7, #12]
 802c7ee:	1c5a      	adds	r2, r3, #1
 802c7f0:	60fa      	str	r2, [r7, #12]
 802c7f2:	687a      	ldr	r2, [r7, #4]
 802c7f4:	4413      	add	r3, r2
 802c7f6:	7afa      	ldrb	r2, [r7, #11]
 802c7f8:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 802c7fa:	683b      	ldr	r3, [r7, #0]
 802c7fc:	2b00      	cmp	r3, #0
 802c7fe:	d1e6      	bne.n	802c7ce <encode_varint+0xe>

  return len;
 802c800:	68fb      	ldr	r3, [r7, #12]
}
 802c802:	4618      	mov	r0, r3
 802c804:	3714      	adds	r7, #20
 802c806:	46bd      	mov	sp, r7
 802c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c80c:	4770      	bx	lr

0802c80e <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 802c80e:	b480      	push	{r7}
 802c810:	b089      	sub	sp, #36	@ 0x24
 802c812:	af00      	add	r7, sp, #0
 802c814:	60f8      	str	r0, [r7, #12]
 802c816:	60b9      	str	r1, [r7, #8]
 802c818:	607a      	str	r2, [r7, #4]
  size_t multiplier = 1, offset;
 802c81a:	2301      	movs	r3, #1
 802c81c:	61fb      	str	r3, [r7, #28]
  *value = 0;
 802c81e:	687b      	ldr	r3, [r7, #4]
 802c820:	2200      	movs	r2, #0
 802c822:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 802c824:	2300      	movs	r3, #0
 802c826:	61bb      	str	r3, [r7, #24]
 802c828:	e01c      	b.n	802c864 <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 802c82a:	68fa      	ldr	r2, [r7, #12]
 802c82c:	69bb      	ldr	r3, [r7, #24]
 802c82e:	4413      	add	r3, r2
 802c830:	781b      	ldrb	r3, [r3, #0]
 802c832:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7f) * multiplier;
 802c834:	687b      	ldr	r3, [r7, #4]
 802c836:	681a      	ldr	r2, [r3, #0]
 802c838:	7dfb      	ldrb	r3, [r7, #23]
 802c83a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802c83e:	69f9      	ldr	r1, [r7, #28]
 802c840:	fb01 f303 	mul.w	r3, r1, r3
 802c844:	441a      	add	r2, r3
 802c846:	687b      	ldr	r3, [r7, #4]
 802c848:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 802c84a:	69fb      	ldr	r3, [r7, #28]
 802c84c:	01db      	lsls	r3, r3, #7
 802c84e:	61fb      	str	r3, [r7, #28]

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 802c850:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802c854:	2b00      	cmp	r3, #0
 802c856:	db02      	blt.n	802c85e <decode_varint+0x50>
 802c858:	69bb      	ldr	r3, [r7, #24]
 802c85a:	3301      	adds	r3, #1
 802c85c:	e00a      	b.n	802c874 <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 802c85e:	69bb      	ldr	r3, [r7, #24]
 802c860:	3301      	adds	r3, #1
 802c862:	61bb      	str	r3, [r7, #24]
 802c864:	69bb      	ldr	r3, [r7, #24]
 802c866:	2b03      	cmp	r3, #3
 802c868:	d803      	bhi.n	802c872 <decode_varint+0x64>
 802c86a:	69ba      	ldr	r2, [r7, #24]
 802c86c:	68bb      	ldr	r3, [r7, #8]
 802c86e:	429a      	cmp	r2, r3
 802c870:	d3db      	bcc.n	802c82a <decode_varint+0x1c>
  }

  return 0;
 802c872:	2300      	movs	r3, #0
}
 802c874:	4618      	mov	r0, r3
 802c876:	3724      	adds	r7, #36	@ 0x24
 802c878:	46bd      	mov	sp, r7
 802c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c87e:	4770      	bx	lr

0802c880 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 802c880:	b480      	push	{r7}
 802c882:	b085      	sub	sp, #20
 802c884:	af00      	add	r7, sp, #0
 802c886:	4603      	mov	r3, r0
 802c888:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 802c88a:	231b      	movs	r3, #27
 802c88c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 802c88e:	2300      	movs	r3, #0
 802c890:	60fb      	str	r3, [r7, #12]
 802c892:	e00f      	b.n	802c8b4 <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 802c894:	4a0d      	ldr	r2, [pc, #52]	@ (802c8cc <mqtt_prop_type_by_id+0x4c>)
 802c896:	68fb      	ldr	r3, [r7, #12]
 802c898:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 802c89c:	79fa      	ldrb	r2, [r7, #7]
 802c89e:	429a      	cmp	r2, r3
 802c8a0:	d105      	bne.n	802c8ae <mqtt_prop_type_by_id+0x2e>
 802c8a2:	4a0a      	ldr	r2, [pc, #40]	@ (802c8cc <mqtt_prop_type_by_id+0x4c>)
 802c8a4:	68fb      	ldr	r3, [r7, #12]
 802c8a6:	005b      	lsls	r3, r3, #1
 802c8a8:	4413      	add	r3, r2
 802c8aa:	785b      	ldrb	r3, [r3, #1]
 802c8ac:	e008      	b.n	802c8c0 <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 802c8ae:	68fb      	ldr	r3, [r7, #12]
 802c8b0:	3301      	adds	r3, #1
 802c8b2:	60fb      	str	r3, [r7, #12]
 802c8b4:	68fa      	ldr	r2, [r7, #12]
 802c8b6:	68bb      	ldr	r3, [r7, #8]
 802c8b8:	429a      	cmp	r2, r3
 802c8ba:	d3eb      	bcc.n	802c894 <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 802c8bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 802c8c0:	4618      	mov	r0, r3
 802c8c2:	3714      	adds	r7, #20
 802c8c4:	46bd      	mov	sp, r7
 802c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c8ca:	4770      	bx	lr
 802c8cc:	080449dc 	.word	0x080449dc

0802c8d0 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 802c8d0:	b580      	push	{r7, lr}
 802c8d2:	b084      	sub	sp, #16
 802c8d4:	af00      	add	r7, sp, #0
 802c8d6:	6078      	str	r0, [r7, #4]
 802c8d8:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 802c8da:	2300      	movs	r3, #0
 802c8dc:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 802c8de:	2300      	movs	r3, #0
 802c8e0:	60fb      	str	r3, [r7, #12]
 802c8e2:	e07a      	b.n	802c9da <get_properties_length+0x10a>
    size++;  // identifier
 802c8e4:	68bb      	ldr	r3, [r7, #8]
 802c8e6:	3301      	adds	r3, #1
 802c8e8:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802c8ea:	68fa      	ldr	r2, [r7, #12]
 802c8ec:	4613      	mov	r3, r2
 802c8ee:	005b      	lsls	r3, r3, #1
 802c8f0:	4413      	add	r3, r2
 802c8f2:	00db      	lsls	r3, r3, #3
 802c8f4:	461a      	mov	r2, r3
 802c8f6:	687b      	ldr	r3, [r7, #4]
 802c8f8:	4413      	add	r3, r2
 802c8fa:	781b      	ldrb	r3, [r3, #0]
 802c8fc:	4618      	mov	r0, r3
 802c8fe:	f7ff ffbf 	bl	802c880 <mqtt_prop_type_by_id>
 802c902:	4603      	mov	r3, r0
 802c904:	2b06      	cmp	r3, #6
 802c906:	d863      	bhi.n	802c9d0 <get_properties_length+0x100>
 802c908:	a201      	add	r2, pc, #4	@ (adr r2, 802c910 <get_properties_length+0x40>)
 802c90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c90e:	bf00      	nop
 802c910:	0802c9c9 	.word	0x0802c9c9
 802c914:	0802c95d 	.word	0x0802c95d
 802c918:	0802c92d 	.word	0x0802c92d
 802c91c:	0802c979 	.word	0x0802c979
 802c920:	0802c995 	.word	0x0802c995
 802c924:	0802c9b9 	.word	0x0802c9b9
 802c928:	0802c9c1 	.word	0x0802c9c1
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 802c92c:	68fa      	ldr	r2, [r7, #12]
 802c92e:	4613      	mov	r3, r2
 802c930:	005b      	lsls	r3, r3, #1
 802c932:	4413      	add	r3, r2
 802c934:	00db      	lsls	r3, r3, #3
 802c936:	461a      	mov	r2, r3
 802c938:	687b      	ldr	r3, [r7, #4]
 802c93a:	4413      	add	r3, r2
 802c93c:	6959      	ldr	r1, [r3, #20]
 802c93e:	68fa      	ldr	r2, [r7, #12]
 802c940:	4613      	mov	r3, r2
 802c942:	005b      	lsls	r3, r3, #1
 802c944:	4413      	add	r3, r2
 802c946:	00db      	lsls	r3, r3, #3
 802c948:	461a      	mov	r2, r3
 802c94a:	687b      	ldr	r3, [r7, #4]
 802c94c:	4413      	add	r3, r2
 802c94e:	68db      	ldr	r3, [r3, #12]
 802c950:	18ca      	adds	r2, r1, r3
 802c952:	68bb      	ldr	r3, [r7, #8]
 802c954:	4413      	add	r3, r2
 802c956:	3304      	adds	r3, #4
 802c958:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 802c95a:	e03b      	b.n	802c9d4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 802c95c:	68fa      	ldr	r2, [r7, #12]
 802c95e:	4613      	mov	r3, r2
 802c960:	005b      	lsls	r3, r3, #1
 802c962:	4413      	add	r3, r2
 802c964:	00db      	lsls	r3, r3, #3
 802c966:	461a      	mov	r2, r3
 802c968:	687b      	ldr	r3, [r7, #4]
 802c96a:	4413      	add	r3, r2
 802c96c:	695a      	ldr	r2, [r3, #20]
 802c96e:	68bb      	ldr	r3, [r7, #8]
 802c970:	4413      	add	r3, r2
 802c972:	3302      	adds	r3, #2
 802c974:	60bb      	str	r3, [r7, #8]
        break;
 802c976:	e02d      	b.n	802c9d4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 802c978:	68fa      	ldr	r2, [r7, #12]
 802c97a:	4613      	mov	r3, r2
 802c97c:	005b      	lsls	r3, r3, #1
 802c97e:	4413      	add	r3, r2
 802c980:	00db      	lsls	r3, r3, #3
 802c982:	461a      	mov	r2, r3
 802c984:	687b      	ldr	r3, [r7, #4]
 802c986:	4413      	add	r3, r2
 802c988:	695a      	ldr	r2, [r3, #20]
 802c98a:	68bb      	ldr	r3, [r7, #8]
 802c98c:	4413      	add	r3, r2
 802c98e:	3302      	adds	r3, #2
 802c990:	60bb      	str	r3, [r7, #8]
        break;
 802c992:	e01f      	b.n	802c9d4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 802c994:	68fa      	ldr	r2, [r7, #12]
 802c996:	4613      	mov	r3, r2
 802c998:	005b      	lsls	r3, r3, #1
 802c99a:	4413      	add	r3, r2
 802c99c:	00db      	lsls	r3, r3, #3
 802c99e:	461a      	mov	r2, r3
 802c9a0:	687b      	ldr	r3, [r7, #4]
 802c9a2:	4413      	add	r3, r2
 802c9a4:	685b      	ldr	r3, [r3, #4]
 802c9a6:	4618      	mov	r0, r3
 802c9a8:	f7ff fef4 	bl	802c794 <varint_size>
 802c9ac:	4603      	mov	r3, r0
 802c9ae:	461a      	mov	r2, r3
 802c9b0:	68bb      	ldr	r3, [r7, #8]
 802c9b2:	4413      	add	r3, r2
 802c9b4:	60bb      	str	r3, [r7, #8]
        break;
 802c9b6:	e00d      	b.n	802c9d4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 802c9b8:	68bb      	ldr	r3, [r7, #8]
 802c9ba:	3304      	adds	r3, #4
 802c9bc:	60bb      	str	r3, [r7, #8]
        break;
 802c9be:	e009      	b.n	802c9d4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 802c9c0:	68bb      	ldr	r3, [r7, #8]
 802c9c2:	3302      	adds	r3, #2
 802c9c4:	60bb      	str	r3, [r7, #8]
        break;
 802c9c6:	e005      	b.n	802c9d4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 802c9c8:	68bb      	ldr	r3, [r7, #8]
 802c9ca:	3301      	adds	r3, #1
 802c9cc:	60bb      	str	r3, [r7, #8]
        break;
 802c9ce:	e001      	b.n	802c9d4 <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 802c9d0:	68bb      	ldr	r3, [r7, #8]
 802c9d2:	e007      	b.n	802c9e4 <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 802c9d4:	68fb      	ldr	r3, [r7, #12]
 802c9d6:	3301      	adds	r3, #1
 802c9d8:	60fb      	str	r3, [r7, #12]
 802c9da:	68fa      	ldr	r2, [r7, #12]
 802c9dc:	683b      	ldr	r3, [r7, #0]
 802c9de:	429a      	cmp	r2, r3
 802c9e0:	d380      	bcc.n	802c8e4 <get_properties_length+0x14>
    }
  }

  return size;
 802c9e2:	68bb      	ldr	r3, [r7, #8]
}
 802c9e4:	4618      	mov	r0, r3
 802c9e6:	3710      	adds	r7, #16
 802c9e8:	46bd      	mov	sp, r7
 802c9ea:	bd80      	pop	{r7, pc}

0802c9ec <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 802c9ec:	b580      	push	{r7, lr}
 802c9ee:	b084      	sub	sp, #16
 802c9f0:	af00      	add	r7, sp, #0
 802c9f2:	6078      	str	r0, [r7, #4]
 802c9f4:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 802c9f6:	6839      	ldr	r1, [r7, #0]
 802c9f8:	6878      	ldr	r0, [r7, #4]
 802c9fa:	f7ff ff69 	bl	802c8d0 <get_properties_length>
 802c9fe:	60f8      	str	r0, [r7, #12]
  size += varint_size(size);
 802ca00:	68f8      	ldr	r0, [r7, #12]
 802ca02:	f7ff fec7 	bl	802c794 <varint_size>
 802ca06:	4603      	mov	r3, r0
 802ca08:	461a      	mov	r2, r3
 802ca0a:	68fb      	ldr	r3, [r7, #12]
 802ca0c:	4413      	add	r3, r2
 802ca0e:	60fb      	str	r3, [r7, #12]
  return size;
 802ca10:	68fb      	ldr	r3, [r7, #12]
}
 802ca12:	4618      	mov	r0, r3
 802ca14:	3710      	adds	r7, #16
 802ca16:	46bd      	mov	sp, r7
 802ca18:	bd80      	pop	{r7, pc}
	...

0802ca1c <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 802ca1c:	b580      	push	{r7, lr}
 802ca1e:	b08a      	sub	sp, #40	@ 0x28
 802ca20:	af00      	add	r7, sp, #0
 802ca22:	60f8      	str	r0, [r7, #12]
 802ca24:	60b9      	str	r1, [r7, #8]
 802ca26:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 802ca28:	6879      	ldr	r1, [r7, #4]
 802ca2a:	68b8      	ldr	r0, [r7, #8]
 802ca2c:	f7ff ff50 	bl	802c8d0 <get_properties_length>
 802ca30:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 802ca32:	2300      	movs	r3, #0
 802ca34:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 802ca36:	2300      	movs	r3, #0
 802ca38:	617b      	str	r3, [r7, #20]
  size_t i, len = encode_varint(buf, total_size);
 802ca3a:	f107 0314 	add.w	r3, r7, #20
 802ca3e:	6a39      	ldr	r1, [r7, #32]
 802ca40:	4618      	mov	r0, r3
 802ca42:	f7ff febd 	bl	802c7c0 <encode_varint>
 802ca46:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 802ca48:	f107 0314 	add.w	r3, r7, #20
 802ca4c:	69fa      	ldr	r2, [r7, #28]
 802ca4e:	4619      	mov	r1, r3
 802ca50:	68f8      	ldr	r0, [r7, #12]
 802ca52:	f004 fc69 	bl	8031328 <mg_send>
  for (i = 0; i < nprops; i++) {
 802ca56:	2300      	movs	r3, #0
 802ca58:	627b      	str	r3, [r7, #36]	@ 0x24
 802ca5a:	e11f      	b.n	802cc9c <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 802ca5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802ca5e:	4613      	mov	r3, r2
 802ca60:	005b      	lsls	r3, r3, #1
 802ca62:	4413      	add	r3, r2
 802ca64:	00db      	lsls	r3, r3, #3
 802ca66:	461a      	mov	r2, r3
 802ca68:	68bb      	ldr	r3, [r7, #8]
 802ca6a:	4413      	add	r3, r2
 802ca6c:	2201      	movs	r2, #1
 802ca6e:	4619      	mov	r1, r3
 802ca70:	68f8      	ldr	r0, [r7, #12]
 802ca72:	f004 fc59 	bl	8031328 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802ca76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802ca78:	4613      	mov	r3, r2
 802ca7a:	005b      	lsls	r3, r3, #1
 802ca7c:	4413      	add	r3, r2
 802ca7e:	00db      	lsls	r3, r3, #3
 802ca80:	461a      	mov	r2, r3
 802ca82:	68bb      	ldr	r3, [r7, #8]
 802ca84:	4413      	add	r3, r2
 802ca86:	781b      	ldrb	r3, [r3, #0]
 802ca88:	4618      	mov	r0, r3
 802ca8a:	f7ff fef9 	bl	802c880 <mqtt_prop_type_by_id>
 802ca8e:	4603      	mov	r3, r0
 802ca90:	2b06      	cmp	r3, #6
 802ca92:	f200 8100 	bhi.w	802cc96 <mg_send_mqtt_properties+0x27a>
 802ca96:	a201      	add	r2, pc, #4	@ (adr r2, 802ca9c <mg_send_mqtt_properties+0x80>)
 802ca98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ca9c:	0802cb5b 	.word	0x0802cb5b
 802caa0:	0802cbc3 	.word	0x0802cbc3
 802caa4:	0802cab9 	.word	0x0802cab9
 802caa8:	0802cc15 	.word	0x0802cc15
 802caac:	0802cc67 	.word	0x0802cc67
 802cab0:	0802cb9f 	.word	0x0802cb9f
 802cab4:	0802cb79 	.word	0x0802cb79
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 802cab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802caba:	4613      	mov	r3, r2
 802cabc:	005b      	lsls	r3, r3, #1
 802cabe:	4413      	add	r3, r2
 802cac0:	00db      	lsls	r3, r3, #3
 802cac2:	461a      	mov	r2, r3
 802cac4:	68bb      	ldr	r3, [r7, #8]
 802cac6:	4413      	add	r3, r2
 802cac8:	68db      	ldr	r3, [r3, #12]
 802caca:	b29b      	uxth	r3, r3
 802cacc:	4618      	mov	r0, r3
 802cace:	f006 f9a4 	bl	8032e1a <mg_ntohs>
 802cad2:	4603      	mov	r3, r0
 802cad4:	4619      	mov	r1, r3
 802cad6:	68f8      	ldr	r0, [r7, #12]
 802cad8:	f7ff fe3d 	bl	802c756 <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 802cadc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cade:	4613      	mov	r3, r2
 802cae0:	005b      	lsls	r3, r3, #1
 802cae2:	4413      	add	r3, r2
 802cae4:	00db      	lsls	r3, r3, #3
 802cae6:	461a      	mov	r2, r3
 802cae8:	68bb      	ldr	r3, [r7, #8]
 802caea:	4413      	add	r3, r2
 802caec:	6899      	ldr	r1, [r3, #8]
 802caee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802caf0:	4613      	mov	r3, r2
 802caf2:	005b      	lsls	r3, r3, #1
 802caf4:	4413      	add	r3, r2
 802caf6:	00db      	lsls	r3, r3, #3
 802caf8:	461a      	mov	r2, r3
 802cafa:	68bb      	ldr	r3, [r7, #8]
 802cafc:	4413      	add	r3, r2
 802cafe:	68db      	ldr	r3, [r3, #12]
 802cb00:	461a      	mov	r2, r3
 802cb02:	68f8      	ldr	r0, [r7, #12]
 802cb04:	f004 fc10 	bl	8031328 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 802cb08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cb0a:	4613      	mov	r3, r2
 802cb0c:	005b      	lsls	r3, r3, #1
 802cb0e:	4413      	add	r3, r2
 802cb10:	00db      	lsls	r3, r3, #3
 802cb12:	461a      	mov	r2, r3
 802cb14:	68bb      	ldr	r3, [r7, #8]
 802cb16:	4413      	add	r3, r2
 802cb18:	695b      	ldr	r3, [r3, #20]
 802cb1a:	b29b      	uxth	r3, r3
 802cb1c:	4618      	mov	r0, r3
 802cb1e:	f006 f97c 	bl	8032e1a <mg_ntohs>
 802cb22:	4603      	mov	r3, r0
 802cb24:	4619      	mov	r1, r3
 802cb26:	68f8      	ldr	r0, [r7, #12]
 802cb28:	f7ff fe15 	bl	802c756 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 802cb2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cb2e:	4613      	mov	r3, r2
 802cb30:	005b      	lsls	r3, r3, #1
 802cb32:	4413      	add	r3, r2
 802cb34:	00db      	lsls	r3, r3, #3
 802cb36:	461a      	mov	r2, r3
 802cb38:	68bb      	ldr	r3, [r7, #8]
 802cb3a:	4413      	add	r3, r2
 802cb3c:	6919      	ldr	r1, [r3, #16]
 802cb3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cb40:	4613      	mov	r3, r2
 802cb42:	005b      	lsls	r3, r3, #1
 802cb44:	4413      	add	r3, r2
 802cb46:	00db      	lsls	r3, r3, #3
 802cb48:	461a      	mov	r2, r3
 802cb4a:	68bb      	ldr	r3, [r7, #8]
 802cb4c:	4413      	add	r3, r2
 802cb4e:	695b      	ldr	r3, [r3, #20]
 802cb50:	461a      	mov	r2, r3
 802cb52:	68f8      	ldr	r0, [r7, #12]
 802cb54:	f004 fbe8 	bl	8031328 <mg_send>
        break;
 802cb58:	e09d      	b.n	802cc96 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 802cb5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cb5c:	4613      	mov	r3, r2
 802cb5e:	005b      	lsls	r3, r3, #1
 802cb60:	4413      	add	r3, r2
 802cb62:	00db      	lsls	r3, r3, #3
 802cb64:	461a      	mov	r2, r3
 802cb66:	68bb      	ldr	r3, [r7, #8]
 802cb68:	4413      	add	r3, r2
 802cb6a:	3304      	adds	r3, #4
 802cb6c:	2201      	movs	r2, #1
 802cb6e:	4619      	mov	r1, r3
 802cb70:	68f8      	ldr	r0, [r7, #12]
 802cb72:	f004 fbd9 	bl	8031328 <mg_send>
        break;
 802cb76:	e08e      	b.n	802cc96 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 802cb78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cb7a:	4613      	mov	r3, r2
 802cb7c:	005b      	lsls	r3, r3, #1
 802cb7e:	4413      	add	r3, r2
 802cb80:	00db      	lsls	r3, r3, #3
 802cb82:	461a      	mov	r2, r3
 802cb84:	68bb      	ldr	r3, [r7, #8]
 802cb86:	4413      	add	r3, r2
 802cb88:	685b      	ldr	r3, [r3, #4]
 802cb8a:	b29b      	uxth	r3, r3
 802cb8c:	4618      	mov	r0, r3
 802cb8e:	f006 f944 	bl	8032e1a <mg_ntohs>
 802cb92:	4603      	mov	r3, r0
 802cb94:	4619      	mov	r1, r3
 802cb96:	68f8      	ldr	r0, [r7, #12]
 802cb98:	f7ff fddd 	bl	802c756 <mg_send_u16>
        break;
 802cb9c:	e07b      	b.n	802cc96 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 802cb9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cba0:	4613      	mov	r3, r2
 802cba2:	005b      	lsls	r3, r3, #1
 802cba4:	4413      	add	r3, r2
 802cba6:	00db      	lsls	r3, r3, #3
 802cba8:	461a      	mov	r2, r3
 802cbaa:	68bb      	ldr	r3, [r7, #8]
 802cbac:	4413      	add	r3, r2
 802cbae:	685b      	ldr	r3, [r3, #4]
 802cbb0:	4618      	mov	r0, r3
 802cbb2:	f006 f919 	bl	8032de8 <mg_ntohl>
 802cbb6:	4603      	mov	r3, r0
 802cbb8:	4619      	mov	r1, r3
 802cbba:	68f8      	ldr	r0, [r7, #12]
 802cbbc:	f7ff fddb 	bl	802c776 <mg_send_u32>
        break;
 802cbc0:	e069      	b.n	802cc96 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 802cbc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cbc4:	4613      	mov	r3, r2
 802cbc6:	005b      	lsls	r3, r3, #1
 802cbc8:	4413      	add	r3, r2
 802cbca:	00db      	lsls	r3, r3, #3
 802cbcc:	461a      	mov	r2, r3
 802cbce:	68bb      	ldr	r3, [r7, #8]
 802cbd0:	4413      	add	r3, r2
 802cbd2:	695b      	ldr	r3, [r3, #20]
 802cbd4:	b29b      	uxth	r3, r3
 802cbd6:	4618      	mov	r0, r3
 802cbd8:	f006 f91f 	bl	8032e1a <mg_ntohs>
 802cbdc:	4603      	mov	r3, r0
 802cbde:	4619      	mov	r1, r3
 802cbe0:	68f8      	ldr	r0, [r7, #12]
 802cbe2:	f7ff fdb8 	bl	802c756 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 802cbe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cbe8:	4613      	mov	r3, r2
 802cbea:	005b      	lsls	r3, r3, #1
 802cbec:	4413      	add	r3, r2
 802cbee:	00db      	lsls	r3, r3, #3
 802cbf0:	461a      	mov	r2, r3
 802cbf2:	68bb      	ldr	r3, [r7, #8]
 802cbf4:	4413      	add	r3, r2
 802cbf6:	6919      	ldr	r1, [r3, #16]
 802cbf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cbfa:	4613      	mov	r3, r2
 802cbfc:	005b      	lsls	r3, r3, #1
 802cbfe:	4413      	add	r3, r2
 802cc00:	00db      	lsls	r3, r3, #3
 802cc02:	461a      	mov	r2, r3
 802cc04:	68bb      	ldr	r3, [r7, #8]
 802cc06:	4413      	add	r3, r2
 802cc08:	695b      	ldr	r3, [r3, #20]
 802cc0a:	461a      	mov	r2, r3
 802cc0c:	68f8      	ldr	r0, [r7, #12]
 802cc0e:	f004 fb8b 	bl	8031328 <mg_send>
        break;
 802cc12:	e040      	b.n	802cc96 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 802cc14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cc16:	4613      	mov	r3, r2
 802cc18:	005b      	lsls	r3, r3, #1
 802cc1a:	4413      	add	r3, r2
 802cc1c:	00db      	lsls	r3, r3, #3
 802cc1e:	461a      	mov	r2, r3
 802cc20:	68bb      	ldr	r3, [r7, #8]
 802cc22:	4413      	add	r3, r2
 802cc24:	695b      	ldr	r3, [r3, #20]
 802cc26:	b29b      	uxth	r3, r3
 802cc28:	4618      	mov	r0, r3
 802cc2a:	f006 f8f6 	bl	8032e1a <mg_ntohs>
 802cc2e:	4603      	mov	r3, r0
 802cc30:	4619      	mov	r1, r3
 802cc32:	68f8      	ldr	r0, [r7, #12]
 802cc34:	f7ff fd8f 	bl	802c756 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 802cc38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cc3a:	4613      	mov	r3, r2
 802cc3c:	005b      	lsls	r3, r3, #1
 802cc3e:	4413      	add	r3, r2
 802cc40:	00db      	lsls	r3, r3, #3
 802cc42:	461a      	mov	r2, r3
 802cc44:	68bb      	ldr	r3, [r7, #8]
 802cc46:	4413      	add	r3, r2
 802cc48:	6919      	ldr	r1, [r3, #16]
 802cc4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cc4c:	4613      	mov	r3, r2
 802cc4e:	005b      	lsls	r3, r3, #1
 802cc50:	4413      	add	r3, r2
 802cc52:	00db      	lsls	r3, r3, #3
 802cc54:	461a      	mov	r2, r3
 802cc56:	68bb      	ldr	r3, [r7, #8]
 802cc58:	4413      	add	r3, r2
 802cc5a:	695b      	ldr	r3, [r3, #20]
 802cc5c:	461a      	mov	r2, r3
 802cc5e:	68f8      	ldr	r0, [r7, #12]
 802cc60:	f004 fb62 	bl	8031328 <mg_send>
        break;
 802cc64:	e017      	b.n	802cc96 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_varint(buf_v, props[i].iv);
 802cc66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cc68:	4613      	mov	r3, r2
 802cc6a:	005b      	lsls	r3, r3, #1
 802cc6c:	4413      	add	r3, r2
 802cc6e:	00db      	lsls	r3, r3, #3
 802cc70:	461a      	mov	r2, r3
 802cc72:	68bb      	ldr	r3, [r7, #8]
 802cc74:	4413      	add	r3, r2
 802cc76:	685a      	ldr	r2, [r3, #4]
 802cc78:	f107 0318 	add.w	r3, r7, #24
 802cc7c:	4611      	mov	r1, r2
 802cc7e:	4618      	mov	r0, r3
 802cc80:	f7ff fd9e 	bl	802c7c0 <encode_varint>
 802cc84:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 802cc86:	f107 0318 	add.w	r3, r7, #24
 802cc8a:	69fa      	ldr	r2, [r7, #28]
 802cc8c:	4619      	mov	r1, r3
 802cc8e:	68f8      	ldr	r0, [r7, #12]
 802cc90:	f004 fb4a 	bl	8031328 <mg_send>
        break;
 802cc94:	bf00      	nop
  for (i = 0; i < nprops; i++) {
 802cc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802cc98:	3301      	adds	r3, #1
 802cc9a:	627b      	str	r3, [r7, #36]	@ 0x24
 802cc9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802cc9e:	687b      	ldr	r3, [r7, #4]
 802cca0:	429a      	cmp	r2, r3
 802cca2:	f4ff aedb 	bcc.w	802ca5c <mg_send_mqtt_properties+0x40>
    }
  }
}
 802cca6:	bf00      	nop
 802cca8:	bf00      	nop
 802ccaa:	3728      	adds	r7, #40	@ 0x28
 802ccac:	46bd      	mov	sp, r7
 802ccae:	bd80      	pop	{r7, pc}

0802ccb0 <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 802ccb0:	b580      	push	{r7, lr}
 802ccb2:	b08e      	sub	sp, #56	@ 0x38
 802ccb4:	af00      	add	r7, sp, #0
 802ccb6:	6078      	str	r0, [r7, #4]
 802ccb8:	6039      	str	r1, [r7, #0]
  char client_id[21];
  struct mg_str cid = opts->client_id;
 802ccba:	683a      	ldr	r2, [r7, #0]
 802ccbc:	f107 0314 	add.w	r3, r7, #20
 802ccc0:	3210      	adds	r2, #16
 802ccc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 802ccc6:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 802ccca:	230c      	movs	r3, #12
 802cccc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 802ccce:	2300      	movs	r3, #0
 802ccd0:	733b      	strb	r3, [r7, #12]
 802ccd2:	2304      	movs	r3, #4
 802ccd4:	737b      	strb	r3, [r7, #13]
 802ccd6:	234d      	movs	r3, #77	@ 0x4d
 802ccd8:	73bb      	strb	r3, [r7, #14]
 802ccda:	2351      	movs	r3, #81	@ 0x51
 802ccdc:	73fb      	strb	r3, [r7, #15]
 802ccde:	2354      	movs	r3, #84	@ 0x54
 802cce0:	743b      	strb	r3, [r7, #16]
 802cce2:	2354      	movs	r3, #84	@ 0x54
 802cce4:	747b      	strb	r3, [r7, #17]
 802cce6:	683b      	ldr	r3, [r7, #0]
 802cce8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 802ccec:	74bb      	strb	r3, [r7, #18]
 802ccee:	2300      	movs	r3, #0
 802ccf0:	74fb      	strb	r3, [r7, #19]

  if (cid.len == 0) {
 802ccf2:	69bb      	ldr	r3, [r7, #24]
 802ccf4:	2b00      	cmp	r3, #0
 802ccf6:	d110      	bne.n	802cd1a <mg_mqtt_login+0x6a>
    mg_random_str(client_id, sizeof(client_id) - 1);
 802ccf8:	f107 031c 	add.w	r3, r7, #28
 802ccfc:	2114      	movs	r1, #20
 802ccfe:	4618      	mov	r0, r3
 802cd00:	f006 f82c 	bl	8032d5c <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 802cd04:	2300      	movs	r3, #0
 802cd06:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    cid = mg_str(client_id);
 802cd0a:	f107 0314 	add.w	r3, r7, #20
 802cd0e:	f107 021c 	add.w	r2, r7, #28
 802cd12:	4611      	mov	r1, r2
 802cd14:	4618      	mov	r0, r3
 802cd16:	f005 f8dd 	bl	8031ed4 <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 802cd1a:	7cbb      	ldrb	r3, [r7, #18]
 802cd1c:	2b00      	cmp	r3, #0
 802cd1e:	d101      	bne.n	802cd24 <mg_mqtt_login+0x74>
 802cd20:	2304      	movs	r3, #4
 802cd22:	74bb      	strb	r3, [r7, #18]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 802cd24:	7cbb      	ldrb	r3, [r7, #18]
 802cd26:	2b05      	cmp	r3, #5
 802cd28:	bf0c      	ite	eq
 802cd2a:	2301      	moveq	r3, #1
 802cd2c:	2300      	movne	r3, #0
 802cd2e:	b2d9      	uxtb	r1, r3
 802cd30:	687a      	ldr	r2, [r7, #4]
 802cd32:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802cd36:	f361 0382 	bfi	r3, r1, #2, #1
 802cd3a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 802cd3e:	683b      	ldr	r3, [r7, #0]
 802cd40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802cd44:	00db      	lsls	r3, r3, #3
 802cd46:	b2db      	uxtb	r3, r3
 802cd48:	f003 0318 	and.w	r3, r3, #24
 802cd4c:	b2db      	uxtb	r3, r3
 802cd4e:	74fb      	strb	r3, [r7, #19]
  if (opts->user.len > 0) {
 802cd50:	683b      	ldr	r3, [r7, #0]
 802cd52:	685b      	ldr	r3, [r3, #4]
 802cd54:	2b00      	cmp	r3, #0
 802cd56:	d00a      	beq.n	802cd6e <mg_mqtt_login+0xbe>
    total_len += 2 + (uint32_t) opts->user.len;
 802cd58:	683b      	ldr	r3, [r7, #0]
 802cd5a:	685a      	ldr	r2, [r3, #4]
 802cd5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802cd5e:	4413      	add	r3, r2
 802cd60:	3302      	adds	r3, #2
 802cd62:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_USER_NAME;
 802cd64:	7cfb      	ldrb	r3, [r7, #19]
 802cd66:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 802cd6a:	b2db      	uxtb	r3, r3
 802cd6c:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->pass.len > 0) {
 802cd6e:	683b      	ldr	r3, [r7, #0]
 802cd70:	68db      	ldr	r3, [r3, #12]
 802cd72:	2b00      	cmp	r3, #0
 802cd74:	d00a      	beq.n	802cd8c <mg_mqtt_login+0xdc>
    total_len += 2 + (uint32_t) opts->pass.len;
 802cd76:	683b      	ldr	r3, [r7, #0]
 802cd78:	68da      	ldr	r2, [r3, #12]
 802cd7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802cd7c:	4413      	add	r3, r2
 802cd7e:	3302      	adds	r3, #2
 802cd80:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_PASSWORD;
 802cd82:	7cfb      	ldrb	r3, [r7, #19]
 802cd84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802cd88:	b2db      	uxtb	r3, r3
 802cd8a:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 802cd8c:	683b      	ldr	r3, [r7, #0]
 802cd8e:	69db      	ldr	r3, [r3, #28]
 802cd90:	2b00      	cmp	r3, #0
 802cd92:	d00d      	beq.n	802cdb0 <mg_mqtt_login+0x100>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 802cd94:	683b      	ldr	r3, [r7, #0]
 802cd96:	69da      	ldr	r2, [r3, #28]
 802cd98:	683b      	ldr	r3, [r7, #0]
 802cd9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802cd9c:	441a      	add	r2, r3
 802cd9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802cda0:	4413      	add	r3, r2
 802cda2:	3304      	adds	r3, #4
 802cda4:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_WILL;
 802cda6:	7cfb      	ldrb	r3, [r7, #19]
 802cda8:	f043 0304 	orr.w	r3, r3, #4
 802cdac:	b2db      	uxtb	r3, r3
 802cdae:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 802cdb0:	683b      	ldr	r3, [r7, #0]
 802cdb2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 802cdb6:	2b00      	cmp	r3, #0
 802cdb8:	d102      	bne.n	802cdc0 <mg_mqtt_login+0x110>
 802cdba:	69bb      	ldr	r3, [r7, #24]
 802cdbc:	2b00      	cmp	r3, #0
 802cdbe:	d104      	bne.n	802cdca <mg_mqtt_login+0x11a>
 802cdc0:	7cfb      	ldrb	r3, [r7, #19]
 802cdc2:	f043 0302 	orr.w	r3, r3, #2
 802cdc6:	b2db      	uxtb	r3, r3
 802cdc8:	74fb      	strb	r3, [r7, #19]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 802cdca:	683b      	ldr	r3, [r7, #0]
 802cdcc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 802cdd0:	2b00      	cmp	r3, #0
 802cdd2:	d004      	beq.n	802cdde <mg_mqtt_login+0x12e>
 802cdd4:	7cfb      	ldrb	r3, [r7, #19]
 802cdd6:	f043 0320 	orr.w	r3, r3, #32
 802cdda:	b2db      	uxtb	r3, r3
 802cddc:	74fb      	strb	r3, [r7, #19]
  total_len += (uint32_t) cid.len;
 802cdde:	69bb      	ldr	r3, [r7, #24]
 802cde0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802cde2:	4413      	add	r3, r2
 802cde4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (c->is_mqtt5) {
 802cde6:	687b      	ldr	r3, [r7, #4]
 802cde8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802cdec:	f003 0304 	and.w	r3, r3, #4
 802cdf0:	b2db      	uxtb	r3, r3
 802cdf2:	2b00      	cmp	r3, #0
 802cdf4:	d01c      	beq.n	802ce30 <mg_mqtt_login+0x180>
    total_len += get_props_size(opts->props, opts->num_props);
 802cdf6:	683b      	ldr	r3, [r7, #0]
 802cdf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802cdfa:	683b      	ldr	r3, [r7, #0]
 802cdfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802cdfe:	4619      	mov	r1, r3
 802ce00:	4610      	mov	r0, r2
 802ce02:	f7ff fdf3 	bl	802c9ec <get_props_size>
 802ce06:	4602      	mov	r2, r0
 802ce08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ce0a:	4413      	add	r3, r2
 802ce0c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (hdr[7] & MQTT_HAS_WILL)
 802ce0e:	7cfb      	ldrb	r3, [r7, #19]
 802ce10:	f003 0304 	and.w	r3, r3, #4
 802ce14:	2b00      	cmp	r3, #0
 802ce16:	d00b      	beq.n	802ce30 <mg_mqtt_login+0x180>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 802ce18:	683b      	ldr	r3, [r7, #0]
 802ce1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802ce1c:	683b      	ldr	r3, [r7, #0]
 802ce1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802ce20:	4619      	mov	r1, r3
 802ce22:	4610      	mov	r0, r2
 802ce24:	f7ff fde2 	bl	802c9ec <get_props_size>
 802ce28:	4602      	mov	r2, r0
 802ce2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ce2c:	4413      	add	r3, r2
 802ce2e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 802ce30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ce32:	2200      	movs	r2, #0
 802ce34:	2101      	movs	r1, #1
 802ce36:	6878      	ldr	r0, [r7, #4]
 802ce38:	f7ff fc48 	bl	802c6cc <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 802ce3c:	f107 030c 	add.w	r3, r7, #12
 802ce40:	2208      	movs	r2, #8
 802ce42:	4619      	mov	r1, r3
 802ce44:	6878      	ldr	r0, [r7, #4]
 802ce46:	f004 fa6f 	bl	8031328 <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 802ce4a:	683b      	ldr	r3, [r7, #0]
 802ce4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802ce4e:	4618      	mov	r0, r3
 802ce50:	f005 ffe3 	bl	8032e1a <mg_ntohs>
 802ce54:	4603      	mov	r3, r0
 802ce56:	4619      	mov	r1, r3
 802ce58:	6878      	ldr	r0, [r7, #4]
 802ce5a:	f7ff fc7c 	bl	802c756 <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802ce5e:	687b      	ldr	r3, [r7, #4]
 802ce60:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802ce64:	f003 0304 	and.w	r3, r3, #4
 802ce68:	b2db      	uxtb	r3, r3
 802ce6a:	2b00      	cmp	r3, #0
 802ce6c:	d007      	beq.n	802ce7e <mg_mqtt_login+0x1ce>
 802ce6e:	683b      	ldr	r3, [r7, #0]
 802ce70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 802ce72:	683b      	ldr	r3, [r7, #0]
 802ce74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802ce76:	461a      	mov	r2, r3
 802ce78:	6878      	ldr	r0, [r7, #4]
 802ce7a:	f7ff fdcf 	bl	802ca1c <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 802ce7e:	69bb      	ldr	r3, [r7, #24]
 802ce80:	b29b      	uxth	r3, r3
 802ce82:	4618      	mov	r0, r3
 802ce84:	f005 ffc9 	bl	8032e1a <mg_ntohs>
 802ce88:	4603      	mov	r3, r0
 802ce8a:	4619      	mov	r1, r3
 802ce8c:	6878      	ldr	r0, [r7, #4]
 802ce8e:	f7ff fc62 	bl	802c756 <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 802ce92:	697b      	ldr	r3, [r7, #20]
 802ce94:	69ba      	ldr	r2, [r7, #24]
 802ce96:	4619      	mov	r1, r3
 802ce98:	6878      	ldr	r0, [r7, #4]
 802ce9a:	f004 fa45 	bl	8031328 <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 802ce9e:	7cfb      	ldrb	r3, [r7, #19]
 802cea0:	f003 0304 	and.w	r3, r3, #4
 802cea4:	2b00      	cmp	r3, #0
 802cea6:	d035      	beq.n	802cf14 <mg_mqtt_login+0x264>
    if (c->is_mqtt5)
 802cea8:	687b      	ldr	r3, [r7, #4]
 802ceaa:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802ceae:	f003 0304 	and.w	r3, r3, #4
 802ceb2:	b2db      	uxtb	r3, r3
 802ceb4:	2b00      	cmp	r3, #0
 802ceb6:	d007      	beq.n	802cec8 <mg_mqtt_login+0x218>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 802ceb8:	683b      	ldr	r3, [r7, #0]
 802ceba:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 802cebc:	683b      	ldr	r3, [r7, #0]
 802cebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802cec0:	461a      	mov	r2, r3
 802cec2:	6878      	ldr	r0, [r7, #4]
 802cec4:	f7ff fdaa 	bl	802ca1c <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 802cec8:	683b      	ldr	r3, [r7, #0]
 802ceca:	69db      	ldr	r3, [r3, #28]
 802cecc:	b29b      	uxth	r3, r3
 802cece:	4618      	mov	r0, r3
 802ced0:	f005 ffa3 	bl	8032e1a <mg_ntohs>
 802ced4:	4603      	mov	r3, r0
 802ced6:	4619      	mov	r1, r3
 802ced8:	6878      	ldr	r0, [r7, #4]
 802ceda:	f7ff fc3c 	bl	802c756 <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 802cede:	683b      	ldr	r3, [r7, #0]
 802cee0:	6999      	ldr	r1, [r3, #24]
 802cee2:	683b      	ldr	r3, [r7, #0]
 802cee4:	69db      	ldr	r3, [r3, #28]
 802cee6:	461a      	mov	r2, r3
 802cee8:	6878      	ldr	r0, [r7, #4]
 802ceea:	f004 fa1d 	bl	8031328 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 802ceee:	683b      	ldr	r3, [r7, #0]
 802cef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802cef2:	b29b      	uxth	r3, r3
 802cef4:	4618      	mov	r0, r3
 802cef6:	f005 ff90 	bl	8032e1a <mg_ntohs>
 802cefa:	4603      	mov	r3, r0
 802cefc:	4619      	mov	r1, r3
 802cefe:	6878      	ldr	r0, [r7, #4]
 802cf00:	f7ff fc29 	bl	802c756 <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 802cf04:	683b      	ldr	r3, [r7, #0]
 802cf06:	6a19      	ldr	r1, [r3, #32]
 802cf08:	683b      	ldr	r3, [r7, #0]
 802cf0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802cf0c:	461a      	mov	r2, r3
 802cf0e:	6878      	ldr	r0, [r7, #4]
 802cf10:	f004 fa0a 	bl	8031328 <mg_send>
  }
  if (opts->user.len > 0) {
 802cf14:	683b      	ldr	r3, [r7, #0]
 802cf16:	685b      	ldr	r3, [r3, #4]
 802cf18:	2b00      	cmp	r3, #0
 802cf1a:	d012      	beq.n	802cf42 <mg_mqtt_login+0x292>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 802cf1c:	683b      	ldr	r3, [r7, #0]
 802cf1e:	685b      	ldr	r3, [r3, #4]
 802cf20:	b29b      	uxth	r3, r3
 802cf22:	4618      	mov	r0, r3
 802cf24:	f005 ff79 	bl	8032e1a <mg_ntohs>
 802cf28:	4603      	mov	r3, r0
 802cf2a:	4619      	mov	r1, r3
 802cf2c:	6878      	ldr	r0, [r7, #4]
 802cf2e:	f7ff fc12 	bl	802c756 <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 802cf32:	683b      	ldr	r3, [r7, #0]
 802cf34:	6819      	ldr	r1, [r3, #0]
 802cf36:	683b      	ldr	r3, [r7, #0]
 802cf38:	685b      	ldr	r3, [r3, #4]
 802cf3a:	461a      	mov	r2, r3
 802cf3c:	6878      	ldr	r0, [r7, #4]
 802cf3e:	f004 f9f3 	bl	8031328 <mg_send>
  }
  if (opts->pass.len > 0) {
 802cf42:	683b      	ldr	r3, [r7, #0]
 802cf44:	68db      	ldr	r3, [r3, #12]
 802cf46:	2b00      	cmp	r3, #0
 802cf48:	d012      	beq.n	802cf70 <mg_mqtt_login+0x2c0>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 802cf4a:	683b      	ldr	r3, [r7, #0]
 802cf4c:	68db      	ldr	r3, [r3, #12]
 802cf4e:	b29b      	uxth	r3, r3
 802cf50:	4618      	mov	r0, r3
 802cf52:	f005 ff62 	bl	8032e1a <mg_ntohs>
 802cf56:	4603      	mov	r3, r0
 802cf58:	4619      	mov	r1, r3
 802cf5a:	6878      	ldr	r0, [r7, #4]
 802cf5c:	f7ff fbfb 	bl	802c756 <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 802cf60:	683b      	ldr	r3, [r7, #0]
 802cf62:	6899      	ldr	r1, [r3, #8]
 802cf64:	683b      	ldr	r3, [r7, #0]
 802cf66:	68db      	ldr	r3, [r3, #12]
 802cf68:	461a      	mov	r2, r3
 802cf6a:	6878      	ldr	r0, [r7, #4]
 802cf6c:	f004 f9dc 	bl	8031328 <mg_send>
  }
}
 802cf70:	bf00      	nop
 802cf72:	3738      	adds	r7, #56	@ 0x38
 802cf74:	46bd      	mov	sp, r7
 802cf76:	bd80      	pop	{r7, pc}

0802cf78 <mg_mqtt_pub>:

uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 802cf78:	b590      	push	{r4, r7, lr}
 802cf7a:	b087      	sub	sp, #28
 802cf7c:	af02      	add	r7, sp, #8
 802cf7e:	6078      	str	r0, [r7, #4]
 802cf80:	6039      	str	r1, [r7, #0]
  uint16_t id = opts->retransmit_id;
 802cf82:	683b      	ldr	r3, [r7, #0]
 802cf84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802cf86:	81fb      	strh	r3, [r7, #14]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 802cf88:	683b      	ldr	r3, [r7, #0]
 802cf8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802cf8e:	005b      	lsls	r3, r3, #1
 802cf90:	b25b      	sxtb	r3, r3
 802cf92:	f003 0306 	and.w	r3, r3, #6
 802cf96:	b25b      	sxtb	r3, r3
 802cf98:	683a      	ldr	r2, [r7, #0]
 802cf9a:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 802cf9e:	2a00      	cmp	r2, #0
 802cfa0:	d001      	beq.n	802cfa6 <mg_mqtt_pub+0x2e>
 802cfa2:	2201      	movs	r2, #1
 802cfa4:	e000      	b.n	802cfa8 <mg_mqtt_pub+0x30>
 802cfa6:	2200      	movs	r2, #0
 802cfa8:	4313      	orrs	r3, r2
 802cfaa:	b25b      	sxtb	r3, r3
 802cfac:	737b      	strb	r3, [r7, #13]
  size_t len = 2 + opts->topic.len + opts->message.len;
 802cfae:	683b      	ldr	r3, [r7, #0]
 802cfb0:	69da      	ldr	r2, [r3, #28]
 802cfb2:	683b      	ldr	r3, [r7, #0]
 802cfb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802cfb6:	4413      	add	r3, r2
 802cfb8:	3302      	adds	r3, #2
 802cfba:	60bb      	str	r3, [r7, #8]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 802cfbc:	4b51      	ldr	r3, [pc, #324]	@ (802d104 <mg_mqtt_pub+0x18c>)
 802cfbe:	681b      	ldr	r3, [r3, #0]
 802cfc0:	2b02      	cmp	r3, #2
 802cfc2:	dd19      	ble.n	802cff8 <mg_mqtt_pub+0x80>
 802cfc4:	4b50      	ldr	r3, [pc, #320]	@ (802d108 <mg_mqtt_pub+0x190>)
 802cfc6:	f241 123c 	movw	r2, #4412	@ 0x113c
 802cfca:	4950      	ldr	r1, [pc, #320]	@ (802d10c <mg_mqtt_pub+0x194>)
 802cfcc:	2003      	movs	r0, #3
 802cfce:	f7fe fa7d 	bl	802b4cc <mg_log_prefix>
 802cfd2:	687b      	ldr	r3, [r7, #4]
 802cfd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802cfd6:	683b      	ldr	r3, [r7, #0]
 802cfd8:	69db      	ldr	r3, [r3, #28]
 802cfda:	461c      	mov	r4, r3
 802cfdc:	683b      	ldr	r3, [r7, #0]
 802cfde:	699a      	ldr	r2, [r3, #24]
 802cfe0:	683b      	ldr	r3, [r7, #0]
 802cfe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802cfe4:	4618      	mov	r0, r3
 802cfe6:	683b      	ldr	r3, [r7, #0]
 802cfe8:	6a1b      	ldr	r3, [r3, #32]
 802cfea:	9301      	str	r3, [sp, #4]
 802cfec:	9000      	str	r0, [sp, #0]
 802cfee:	4613      	mov	r3, r2
 802cff0:	4622      	mov	r2, r4
 802cff2:	4847      	ldr	r0, [pc, #284]	@ (802d110 <mg_mqtt_pub+0x198>)
 802cff4:	f7fe faba 	bl	802b56c <mg_log>
            (char *) opts->topic.buf, (int) opts->message.len,
            (char *) opts->message.buf));
  if (opts->qos > 0) len += 2;
 802cff8:	683b      	ldr	r3, [r7, #0]
 802cffa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802cffe:	2b00      	cmp	r3, #0
 802d000:	d002      	beq.n	802d008 <mg_mqtt_pub+0x90>
 802d002:	68bb      	ldr	r3, [r7, #8]
 802d004:	3302      	adds	r3, #2
 802d006:	60bb      	str	r3, [r7, #8]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 802d008:	687b      	ldr	r3, [r7, #4]
 802d00a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802d00e:	f003 0304 	and.w	r3, r3, #4
 802d012:	b2db      	uxtb	r3, r3
 802d014:	2b00      	cmp	r3, #0
 802d016:	d00b      	beq.n	802d030 <mg_mqtt_pub+0xb8>
 802d018:	683b      	ldr	r3, [r7, #0]
 802d01a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802d01c:	683b      	ldr	r3, [r7, #0]
 802d01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802d020:	4619      	mov	r1, r3
 802d022:	4610      	mov	r0, r2
 802d024:	f7ff fce2 	bl	802c9ec <get_props_size>
 802d028:	4602      	mov	r2, r0
 802d02a:	68bb      	ldr	r3, [r7, #8]
 802d02c:	4413      	add	r3, r2
 802d02e:	60bb      	str	r3, [r7, #8]

  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 802d030:	683b      	ldr	r3, [r7, #0]
 802d032:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802d036:	2b00      	cmp	r3, #0
 802d038:	d006      	beq.n	802d048 <mg_mqtt_pub+0xd0>
 802d03a:	89fb      	ldrh	r3, [r7, #14]
 802d03c:	2b00      	cmp	r3, #0
 802d03e:	d003      	beq.n	802d048 <mg_mqtt_pub+0xd0>
 802d040:	7b7b      	ldrb	r3, [r7, #13]
 802d042:	f043 0308 	orr.w	r3, r3, #8
 802d046:	737b      	strb	r3, [r7, #13]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 802d048:	7b7a      	ldrb	r2, [r7, #13]
 802d04a:	68bb      	ldr	r3, [r7, #8]
 802d04c:	2103      	movs	r1, #3
 802d04e:	6878      	ldr	r0, [r7, #4]
 802d050:	f7ff fb3c 	bl	802c6cc <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 802d054:	683b      	ldr	r3, [r7, #0]
 802d056:	69db      	ldr	r3, [r3, #28]
 802d058:	b29b      	uxth	r3, r3
 802d05a:	4618      	mov	r0, r3
 802d05c:	f005 fedd 	bl	8032e1a <mg_ntohs>
 802d060:	4603      	mov	r3, r0
 802d062:	4619      	mov	r1, r3
 802d064:	6878      	ldr	r0, [r7, #4]
 802d066:	f7ff fb76 	bl	802c756 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 802d06a:	683b      	ldr	r3, [r7, #0]
 802d06c:	6999      	ldr	r1, [r3, #24]
 802d06e:	683b      	ldr	r3, [r7, #0]
 802d070:	69db      	ldr	r3, [r3, #28]
 802d072:	461a      	mov	r2, r3
 802d074:	6878      	ldr	r0, [r7, #4]
 802d076:	f004 f957 	bl	8031328 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 802d07a:	683b      	ldr	r3, [r7, #0]
 802d07c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802d080:	2b00      	cmp	r3, #0
 802d082:	d01e      	beq.n	802d0c2 <mg_mqtt_pub+0x14a>
    if (id == 0) {  // generate new one if not resending
 802d084:	89fb      	ldrh	r3, [r7, #14]
 802d086:	2b00      	cmp	r3, #0
 802d088:	d112      	bne.n	802d0b0 <mg_mqtt_pub+0x138>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 802d08a:	687b      	ldr	r3, [r7, #4]
 802d08c:	685b      	ldr	r3, [r3, #4]
 802d08e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802d090:	3201      	adds	r2, #1
 802d092:	b292      	uxth	r2, r2
 802d094:	859a      	strh	r2, [r3, #44]	@ 0x2c
 802d096:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802d098:	2b00      	cmp	r3, #0
 802d09a:	d105      	bne.n	802d0a8 <mg_mqtt_pub+0x130>
 802d09c:	687b      	ldr	r3, [r7, #4]
 802d09e:	685b      	ldr	r3, [r3, #4]
 802d0a0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802d0a2:	3201      	adds	r2, #1
 802d0a4:	b292      	uxth	r2, r2
 802d0a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 802d0a8:	687b      	ldr	r3, [r7, #4]
 802d0aa:	685b      	ldr	r3, [r3, #4]
 802d0ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802d0ae:	81fb      	strh	r3, [r7, #14]
    }
    mg_send_u16(c, mg_htons(id));
 802d0b0:	89fb      	ldrh	r3, [r7, #14]
 802d0b2:	4618      	mov	r0, r3
 802d0b4:	f005 feb1 	bl	8032e1a <mg_ntohs>
 802d0b8:	4603      	mov	r3, r0
 802d0ba:	4619      	mov	r1, r3
 802d0bc:	6878      	ldr	r0, [r7, #4]
 802d0be:	f7ff fb4a 	bl	802c756 <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802d0c2:	687b      	ldr	r3, [r7, #4]
 802d0c4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802d0c8:	f003 0304 	and.w	r3, r3, #4
 802d0cc:	b2db      	uxtb	r3, r3
 802d0ce:	2b00      	cmp	r3, #0
 802d0d0:	d007      	beq.n	802d0e2 <mg_mqtt_pub+0x16a>
 802d0d2:	683b      	ldr	r3, [r7, #0]
 802d0d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 802d0d6:	683b      	ldr	r3, [r7, #0]
 802d0d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802d0da:	461a      	mov	r2, r3
 802d0dc:	6878      	ldr	r0, [r7, #4]
 802d0de:	f7ff fc9d 	bl	802ca1c <mg_send_mqtt_properties>

  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 802d0e2:	683b      	ldr	r3, [r7, #0]
 802d0e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802d0e6:	2b00      	cmp	r3, #0
 802d0e8:	d007      	beq.n	802d0fa <mg_mqtt_pub+0x182>
 802d0ea:	683b      	ldr	r3, [r7, #0]
 802d0ec:	6a19      	ldr	r1, [r3, #32]
 802d0ee:	683b      	ldr	r3, [r7, #0]
 802d0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802d0f2:	461a      	mov	r2, r3
 802d0f4:	6878      	ldr	r0, [r7, #4]
 802d0f6:	f004 f917 	bl	8031328 <mg_send>
  return id;
 802d0fa:	89fb      	ldrh	r3, [r7, #14]
}
 802d0fc:	4618      	mov	r0, r3
 802d0fe:	3714      	adds	r7, #20
 802d100:	46bd      	mov	sp, r7
 802d102:	bd90      	pop	{r4, r7, pc}
 802d104:	200002a8 	.word	0x200002a8
 802d108:	08044a98 	.word	0x08044a98
 802d10c:	08041a30 	.word	0x08041a30
 802d110:	08042ec0 	.word	0x08042ec0

0802d114 <mg_mqtt_sub>:

void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 802d114:	b580      	push	{r7, lr}
 802d116:	b086      	sub	sp, #24
 802d118:	af00      	add	r7, sp, #0
 802d11a:	6078      	str	r0, [r7, #4]
 802d11c:	6039      	str	r1, [r7, #0]
  uint8_t qos_ = opts->qos & 3;
 802d11e:	683b      	ldr	r3, [r7, #0]
 802d120:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802d124:	f003 0303 	and.w	r3, r3, #3
 802d128:	b2db      	uxtb	r3, r3
 802d12a:	73fb      	strb	r3, [r7, #15]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 802d12c:	687b      	ldr	r3, [r7, #4]
 802d12e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802d132:	f003 0304 	and.w	r3, r3, #4
 802d136:	b2db      	uxtb	r3, r3
 802d138:	2b00      	cmp	r3, #0
 802d13a:	d009      	beq.n	802d150 <mg_mqtt_sub+0x3c>
 802d13c:	683b      	ldr	r3, [r7, #0]
 802d13e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802d140:	683b      	ldr	r3, [r7, #0]
 802d142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802d144:	4619      	mov	r1, r3
 802d146:	4610      	mov	r0, r2
 802d148:	f7ff fc50 	bl	802c9ec <get_props_size>
 802d14c:	4603      	mov	r3, r0
 802d14e:	e000      	b.n	802d152 <mg_mqtt_sub+0x3e>
 802d150:	2300      	movs	r3, #0
 802d152:	617b      	str	r3, [r7, #20]
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 802d154:	683b      	ldr	r3, [r7, #0]
 802d156:	69da      	ldr	r2, [r3, #28]
 802d158:	697b      	ldr	r3, [r7, #20]
 802d15a:	4413      	add	r3, r2
 802d15c:	3305      	adds	r3, #5
 802d15e:	613b      	str	r3, [r7, #16]

  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 802d160:	693b      	ldr	r3, [r7, #16]
 802d162:	2202      	movs	r2, #2
 802d164:	2108      	movs	r1, #8
 802d166:	6878      	ldr	r0, [r7, #4]
 802d168:	f7ff fab0 	bl	802c6cc <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 802d16c:	687b      	ldr	r3, [r7, #4]
 802d16e:	685b      	ldr	r3, [r3, #4]
 802d170:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802d172:	3201      	adds	r2, #1
 802d174:	b292      	uxth	r2, r2
 802d176:	859a      	strh	r2, [r3, #44]	@ 0x2c
 802d178:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802d17a:	2b00      	cmp	r3, #0
 802d17c:	d105      	bne.n	802d18a <mg_mqtt_sub+0x76>
 802d17e:	687b      	ldr	r3, [r7, #4]
 802d180:	685b      	ldr	r3, [r3, #4]
 802d182:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802d184:	3201      	adds	r2, #1
 802d186:	b292      	uxth	r2, r2
 802d188:	859a      	strh	r2, [r3, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 802d18a:	687b      	ldr	r3, [r7, #4]
 802d18c:	685b      	ldr	r3, [r3, #4]
 802d18e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802d190:	4618      	mov	r0, r3
 802d192:	f005 fe42 	bl	8032e1a <mg_ntohs>
 802d196:	4603      	mov	r3, r0
 802d198:	4619      	mov	r1, r3
 802d19a:	6878      	ldr	r0, [r7, #4]
 802d19c:	f7ff fadb 	bl	802c756 <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802d1a0:	687b      	ldr	r3, [r7, #4]
 802d1a2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802d1a6:	f003 0304 	and.w	r3, r3, #4
 802d1aa:	b2db      	uxtb	r3, r3
 802d1ac:	2b00      	cmp	r3, #0
 802d1ae:	d007      	beq.n	802d1c0 <mg_mqtt_sub+0xac>
 802d1b0:	683b      	ldr	r3, [r7, #0]
 802d1b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 802d1b4:	683b      	ldr	r3, [r7, #0]
 802d1b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802d1b8:	461a      	mov	r2, r3
 802d1ba:	6878      	ldr	r0, [r7, #4]
 802d1bc:	f7ff fc2e 	bl	802ca1c <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 802d1c0:	683b      	ldr	r3, [r7, #0]
 802d1c2:	69db      	ldr	r3, [r3, #28]
 802d1c4:	b29b      	uxth	r3, r3
 802d1c6:	4618      	mov	r0, r3
 802d1c8:	f005 fe27 	bl	8032e1a <mg_ntohs>
 802d1cc:	4603      	mov	r3, r0
 802d1ce:	4619      	mov	r1, r3
 802d1d0:	6878      	ldr	r0, [r7, #4]
 802d1d2:	f7ff fac0 	bl	802c756 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 802d1d6:	683b      	ldr	r3, [r7, #0]
 802d1d8:	6999      	ldr	r1, [r3, #24]
 802d1da:	683b      	ldr	r3, [r7, #0]
 802d1dc:	69db      	ldr	r3, [r3, #28]
 802d1de:	461a      	mov	r2, r3
 802d1e0:	6878      	ldr	r0, [r7, #4]
 802d1e2:	f004 f8a1 	bl	8031328 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 802d1e6:	f107 030f 	add.w	r3, r7, #15
 802d1ea:	2201      	movs	r2, #1
 802d1ec:	4619      	mov	r1, r3
 802d1ee:	6878      	ldr	r0, [r7, #4]
 802d1f0:	f004 f89a 	bl	8031328 <mg_send>
}
 802d1f4:	bf00      	nop
 802d1f6:	3718      	adds	r7, #24
 802d1f8:	46bd      	mov	sp, r7
 802d1fa:	bd80      	pop	{r7, pc}

0802d1fc <mg_mqtt_parse>:

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 802d1fc:	b580      	push	{r7, lr}
 802d1fe:	b08a      	sub	sp, #40	@ 0x28
 802d200:	af00      	add	r7, sp, #0
 802d202:	60f8      	str	r0, [r7, #12]
 802d204:	60b9      	str	r1, [r7, #8]
 802d206:	603b      	str	r3, [r7, #0]
 802d208:	4613      	mov	r3, r2
 802d20a:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 802d20c:	2300      	movs	r3, #0
 802d20e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t n = 0, len_len = 0;
 802d212:	2300      	movs	r3, #0
 802d214:	61fb      	str	r3, [r7, #28]
 802d216:	2300      	movs	r3, #0
 802d218:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 802d21a:	2228      	movs	r2, #40	@ 0x28
 802d21c:	2100      	movs	r1, #0
 802d21e:	6838      	ldr	r0, [r7, #0]
 802d220:	f008 ff5e 	bl	80360e0 <memset>
  m->dgram.buf = (char *) buf;
 802d224:	683b      	ldr	r3, [r7, #0]
 802d226:	68fa      	ldr	r2, [r7, #12]
 802d228:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 802d22a:	68bb      	ldr	r3, [r7, #8]
 802d22c:	2b01      	cmp	r3, #1
 802d22e:	d801      	bhi.n	802d234 <mg_mqtt_parse+0x38>
 802d230:	2301      	movs	r3, #1
 802d232:	e104      	b.n	802d43e <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 802d234:	68fb      	ldr	r3, [r7, #12]
 802d236:	781b      	ldrb	r3, [r3, #0]
 802d238:	091b      	lsrs	r3, r3, #4
 802d23a:	b2da      	uxtb	r2, r3
 802d23c:	683b      	ldr	r3, [r7, #0]
 802d23e:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 802d240:	68fb      	ldr	r3, [r7, #12]
 802d242:	781b      	ldrb	r3, [r3, #0]
 802d244:	085b      	lsrs	r3, r3, #1
 802d246:	b2db      	uxtb	r3, r3
 802d248:	f003 0303 	and.w	r3, r3, #3
 802d24c:	b2da      	uxtb	r2, r3
 802d24e:	683b      	ldr	r3, [r7, #0]
 802d250:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 802d252:	2300      	movs	r3, #0
 802d254:	61bb      	str	r3, [r7, #24]
 802d256:	69bb      	ldr	r3, [r7, #24]
 802d258:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 802d25a:	68fb      	ldr	r3, [r7, #12]
 802d25c:	3301      	adds	r3, #1
 802d25e:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 802d260:	e01f      	b.n	802d2a2 <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 802d262:	6a3b      	ldr	r3, [r7, #32]
 802d264:	1c5a      	adds	r2, r3, #1
 802d266:	623a      	str	r2, [r7, #32]
 802d268:	781b      	ldrb	r3, [r3, #0]
 802d26a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 802d26e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802d272:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 802d276:	69ba      	ldr	r2, [r7, #24]
 802d278:	4613      	mov	r3, r2
 802d27a:	00db      	lsls	r3, r3, #3
 802d27c:	1a9b      	subs	r3, r3, r2
 802d27e:	fa01 f303 	lsl.w	r3, r1, r3
 802d282:	461a      	mov	r2, r3
 802d284:	69fb      	ldr	r3, [r7, #28]
 802d286:	4413      	add	r3, r2
 802d288:	61fb      	str	r3, [r7, #28]
    len_len++;
 802d28a:	69bb      	ldr	r3, [r7, #24]
 802d28c:	3301      	adds	r3, #1
 802d28e:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 802d290:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 802d294:	2b00      	cmp	r3, #0
 802d296:	da0c      	bge.n	802d2b2 <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 802d298:	69bb      	ldr	r3, [r7, #24]
 802d29a:	2b03      	cmp	r3, #3
 802d29c:	d901      	bls.n	802d2a2 <mg_mqtt_parse+0xa6>
 802d29e:	2302      	movs	r3, #2
 802d2a0:	e0cd      	b.n	802d43e <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 802d2a2:	6a3a      	ldr	r2, [r7, #32]
 802d2a4:	68fb      	ldr	r3, [r7, #12]
 802d2a6:	1ad3      	subs	r3, r2, r3
 802d2a8:	461a      	mov	r2, r3
 802d2aa:	68bb      	ldr	r3, [r7, #8]
 802d2ac:	4293      	cmp	r3, r2
 802d2ae:	d8d8      	bhi.n	802d262 <mg_mqtt_parse+0x66>
 802d2b0:	e000      	b.n	802d2b4 <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 802d2b2:	bf00      	nop
  }
  end = p + n;
 802d2b4:	6a3a      	ldr	r2, [r7, #32]
 802d2b6:	69fb      	ldr	r3, [r7, #28]
 802d2b8:	4413      	add	r3, r2
 802d2ba:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 802d2bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 802d2c0:	2b00      	cmp	r3, #0
 802d2c2:	db05      	blt.n	802d2d0 <mg_mqtt_parse+0xd4>
 802d2c4:	68fa      	ldr	r2, [r7, #12]
 802d2c6:	68bb      	ldr	r3, [r7, #8]
 802d2c8:	4413      	add	r3, r2
 802d2ca:	697a      	ldr	r2, [r7, #20]
 802d2cc:	429a      	cmp	r2, r3
 802d2ce:	d901      	bls.n	802d2d4 <mg_mqtt_parse+0xd8>
 802d2d0:	2301      	movs	r3, #1
 802d2d2:	e0b4      	b.n	802d43e <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 802d2d4:	697a      	ldr	r2, [r7, #20]
 802d2d6:	68fb      	ldr	r3, [r7, #12]
 802d2d8:	1ad3      	subs	r3, r2, r3
 802d2da:	461a      	mov	r2, r3
 802d2dc:	683b      	ldr	r3, [r7, #0]
 802d2de:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 802d2e0:	683b      	ldr	r3, [r7, #0]
 802d2e2:	7e9b      	ldrb	r3, [r3, #26]
 802d2e4:	2b0b      	cmp	r3, #11
 802d2e6:	f300 80a8 	bgt.w	802d43a <mg_mqtt_parse+0x23e>
 802d2ea:	2b04      	cmp	r3, #4
 802d2ec:	da10      	bge.n	802d310 <mg_mqtt_parse+0x114>
 802d2ee:	2b02      	cmp	r3, #2
 802d2f0:	d002      	beq.n	802d2f8 <mg_mqtt_parse+0xfc>
 802d2f2:	2b03      	cmp	r3, #3
 802d2f4:	d024      	beq.n	802d340 <mg_mqtt_parse+0x144>
      m->data.buf = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 802d2f6:	e0a0      	b.n	802d43a <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 802d2f8:	697a      	ldr	r2, [r7, #20]
 802d2fa:	6a3b      	ldr	r3, [r7, #32]
 802d2fc:	1ad3      	subs	r3, r2, r3
 802d2fe:	2b01      	cmp	r3, #1
 802d300:	dc01      	bgt.n	802d306 <mg_mqtt_parse+0x10a>
 802d302:	2302      	movs	r3, #2
 802d304:	e09b      	b.n	802d43e <mg_mqtt_parse+0x242>
      m->ack = p[1];
 802d306:	6a3b      	ldr	r3, [r7, #32]
 802d308:	785a      	ldrb	r2, [r3, #1]
 802d30a:	683b      	ldr	r3, [r7, #0]
 802d30c:	771a      	strb	r2, [r3, #28]
      break;
 802d30e:	e095      	b.n	802d43c <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 802d310:	6a3b      	ldr	r3, [r7, #32]
 802d312:	3302      	adds	r3, #2
 802d314:	697a      	ldr	r2, [r7, #20]
 802d316:	429a      	cmp	r2, r3
 802d318:	d201      	bcs.n	802d31e <mg_mqtt_parse+0x122>
 802d31a:	2302      	movs	r3, #2
 802d31c:	e08f      	b.n	802d43e <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 802d31e:	6a3b      	ldr	r3, [r7, #32]
 802d320:	781b      	ldrb	r3, [r3, #0]
 802d322:	021b      	lsls	r3, r3, #8
 802d324:	b21a      	sxth	r2, r3
 802d326:	6a3b      	ldr	r3, [r7, #32]
 802d328:	3301      	adds	r3, #1
 802d32a:	781b      	ldrb	r3, [r3, #0]
 802d32c:	b21b      	sxth	r3, r3
 802d32e:	4313      	orrs	r3, r2
 802d330:	b21b      	sxth	r3, r3
 802d332:	b29a      	uxth	r2, r3
 802d334:	683b      	ldr	r3, [r7, #0]
 802d336:	831a      	strh	r2, [r3, #24]
      p += 2;
 802d338:	6a3b      	ldr	r3, [r7, #32]
 802d33a:	3302      	adds	r3, #2
 802d33c:	623b      	str	r3, [r7, #32]
      break;
 802d33e:	e07d      	b.n	802d43c <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 802d340:	6a3b      	ldr	r3, [r7, #32]
 802d342:	3302      	adds	r3, #2
 802d344:	697a      	ldr	r2, [r7, #20]
 802d346:	429a      	cmp	r2, r3
 802d348:	d201      	bcs.n	802d34e <mg_mqtt_parse+0x152>
 802d34a:	2302      	movs	r3, #2
 802d34c:	e077      	b.n	802d43e <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 802d34e:	6a3b      	ldr	r3, [r7, #32]
 802d350:	781b      	ldrb	r3, [r3, #0]
 802d352:	021b      	lsls	r3, r3, #8
 802d354:	b21a      	sxth	r2, r3
 802d356:	6a3b      	ldr	r3, [r7, #32]
 802d358:	3301      	adds	r3, #1
 802d35a:	781b      	ldrb	r3, [r3, #0]
 802d35c:	b21b      	sxth	r3, r3
 802d35e:	4313      	orrs	r3, r2
 802d360:	b21b      	sxth	r3, r3
 802d362:	b29b      	uxth	r3, r3
 802d364:	461a      	mov	r2, r3
 802d366:	683b      	ldr	r3, [r7, #0]
 802d368:	605a      	str	r2, [r3, #4]
      m->topic.buf = (char *) p + 2;
 802d36a:	6a3b      	ldr	r3, [r7, #32]
 802d36c:	1c9a      	adds	r2, r3, #2
 802d36e:	683b      	ldr	r3, [r7, #0]
 802d370:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 802d372:	683b      	ldr	r3, [r7, #0]
 802d374:	685b      	ldr	r3, [r3, #4]
 802d376:	3302      	adds	r3, #2
 802d378:	6a3a      	ldr	r2, [r7, #32]
 802d37a:	4413      	add	r3, r2
 802d37c:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 802d37e:	6a3a      	ldr	r2, [r7, #32]
 802d380:	697b      	ldr	r3, [r7, #20]
 802d382:	429a      	cmp	r2, r3
 802d384:	d901      	bls.n	802d38a <mg_mqtt_parse+0x18e>
 802d386:	2302      	movs	r3, #2
 802d388:	e059      	b.n	802d43e <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 802d38a:	683b      	ldr	r3, [r7, #0]
 802d38c:	7edb      	ldrb	r3, [r3, #27]
 802d38e:	2b00      	cmp	r3, #0
 802d390:	d016      	beq.n	802d3c0 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 802d392:	6a3b      	ldr	r3, [r7, #32]
 802d394:	3302      	adds	r3, #2
 802d396:	697a      	ldr	r2, [r7, #20]
 802d398:	429a      	cmp	r2, r3
 802d39a:	d201      	bcs.n	802d3a0 <mg_mqtt_parse+0x1a4>
 802d39c:	2302      	movs	r3, #2
 802d39e:	e04e      	b.n	802d43e <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 802d3a0:	6a3b      	ldr	r3, [r7, #32]
 802d3a2:	781b      	ldrb	r3, [r3, #0]
 802d3a4:	021b      	lsls	r3, r3, #8
 802d3a6:	b21a      	sxth	r2, r3
 802d3a8:	6a3b      	ldr	r3, [r7, #32]
 802d3aa:	3301      	adds	r3, #1
 802d3ac:	781b      	ldrb	r3, [r3, #0]
 802d3ae:	b21b      	sxth	r3, r3
 802d3b0:	4313      	orrs	r3, r2
 802d3b2:	b21b      	sxth	r3, r3
 802d3b4:	b29a      	uxth	r2, r3
 802d3b6:	683b      	ldr	r3, [r7, #0]
 802d3b8:	831a      	strh	r2, [r3, #24]
        p += 2;
 802d3ba:	6a3b      	ldr	r3, [r7, #32]
 802d3bc:	3302      	adds	r3, #2
 802d3be:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 802d3c0:	6a3a      	ldr	r2, [r7, #32]
 802d3c2:	697b      	ldr	r3, [r7, #20]
 802d3c4:	429a      	cmp	r2, r3
 802d3c6:	d901      	bls.n	802d3cc <mg_mqtt_parse+0x1d0>
 802d3c8:	2302      	movs	r3, #2
 802d3ca:	e038      	b.n	802d43e <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 802d3cc:	79fb      	ldrb	r3, [r7, #7]
 802d3ce:	2b05      	cmp	r3, #5
 802d3d0:	d123      	bne.n	802d41a <mg_mqtt_parse+0x21e>
 802d3d2:	6a3b      	ldr	r3, [r7, #32]
 802d3d4:	3302      	adds	r3, #2
 802d3d6:	697a      	ldr	r2, [r7, #20]
 802d3d8:	429a      	cmp	r2, r3
 802d3da:	d91e      	bls.n	802d41a <mg_mqtt_parse+0x21e>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 802d3dc:	697a      	ldr	r2, [r7, #20]
 802d3de:	6a3b      	ldr	r3, [r7, #32]
 802d3e0:	1ad3      	subs	r3, r2, r3
 802d3e2:	4619      	mov	r1, r3
 802d3e4:	683b      	ldr	r3, [r7, #0]
 802d3e6:	3324      	adds	r3, #36	@ 0x24
 802d3e8:	461a      	mov	r2, r3
 802d3ea:	6a38      	ldr	r0, [r7, #32]
 802d3ec:	f7ff fa0f 	bl	802c80e <decode_varint>
 802d3f0:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 802d3f2:	69bb      	ldr	r3, [r7, #24]
 802d3f4:	2b00      	cmp	r3, #0
 802d3f6:	d101      	bne.n	802d3fc <mg_mqtt_parse+0x200>
 802d3f8:	2302      	movs	r3, #2
 802d3fa:	e020      	b.n	802d43e <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 802d3fc:	6a3a      	ldr	r2, [r7, #32]
 802d3fe:	69bb      	ldr	r3, [r7, #24]
 802d400:	441a      	add	r2, r3
 802d402:	68fb      	ldr	r3, [r7, #12]
 802d404:	1ad3      	subs	r3, r2, r3
 802d406:	461a      	mov	r2, r3
 802d408:	683b      	ldr	r3, [r7, #0]
 802d40a:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 802d40c:	683b      	ldr	r3, [r7, #0]
 802d40e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802d410:	69bb      	ldr	r3, [r7, #24]
 802d412:	4413      	add	r3, r2
 802d414:	6a3a      	ldr	r2, [r7, #32]
 802d416:	4413      	add	r3, r2
 802d418:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 802d41a:	6a3a      	ldr	r2, [r7, #32]
 802d41c:	697b      	ldr	r3, [r7, #20]
 802d41e:	429a      	cmp	r2, r3
 802d420:	d901      	bls.n	802d426 <mg_mqtt_parse+0x22a>
 802d422:	2302      	movs	r3, #2
 802d424:	e00b      	b.n	802d43e <mg_mqtt_parse+0x242>
      m->data.buf = (char *) p;
 802d426:	683b      	ldr	r3, [r7, #0]
 802d428:	6a3a      	ldr	r2, [r7, #32]
 802d42a:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 802d42c:	697a      	ldr	r2, [r7, #20]
 802d42e:	6a3b      	ldr	r3, [r7, #32]
 802d430:	1ad3      	subs	r3, r2, r3
 802d432:	461a      	mov	r2, r3
 802d434:	683b      	ldr	r3, [r7, #0]
 802d436:	60da      	str	r2, [r3, #12]
      break;
 802d438:	e000      	b.n	802d43c <mg_mqtt_parse+0x240>
      break;
 802d43a:	bf00      	nop
  }
  return MQTT_OK;
 802d43c:	2300      	movs	r3, #0
}
 802d43e:	4618      	mov	r0, r3
 802d440:	3728      	adds	r7, #40	@ 0x28
 802d442:	46bd      	mov	sp, r7
 802d444:	bd80      	pop	{r7, pc}
	...

0802d448 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 802d448:	b590      	push	{r4, r7, lr}
 802d44a:	b099      	sub	sp, #100	@ 0x64
 802d44c:	af02      	add	r7, sp, #8
 802d44e:	60f8      	str	r0, [r7, #12]
 802d450:	60b9      	str	r1, [r7, #8]
 802d452:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 802d454:	68bb      	ldr	r3, [r7, #8]
 802d456:	2b07      	cmp	r3, #7
 802d458:	f040 8124 	bne.w	802d6a4 <mqtt_cb+0x25c>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 802d45c:	68fb      	ldr	r3, [r7, #12]
 802d45e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802d462:	f003 0304 	and.w	r3, r3, #4
 802d466:	b2db      	uxtb	r3, r3
 802d468:	2b00      	cmp	r3, #0
 802d46a:	d001      	beq.n	802d470 <mqtt_cb+0x28>
 802d46c:	2305      	movs	r3, #5
 802d46e:	e000      	b.n	802d472 <mqtt_cb+0x2a>
 802d470:	2304      	movs	r3, #4
 802d472:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 802d476:	68fb      	ldr	r3, [r7, #12]
 802d478:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 802d47a:	68fb      	ldr	r3, [r7, #12]
 802d47c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 802d47e:	f107 0314 	add.w	r3, r7, #20
 802d482:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 802d486:	f7ff feb9 	bl	802d1fc <mg_mqtt_parse>
 802d48a:	64f8      	str	r0, [r7, #76]	@ 0x4c
      if (rc == MQTT_MALFORMED) {
 802d48c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802d48e:	2b02      	cmp	r3, #2
 802d490:	d118      	bne.n	802d4c4 <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 802d492:	4b86      	ldr	r3, [pc, #536]	@ (802d6ac <mqtt_cb+0x264>)
 802d494:	681b      	ldr	r3, [r3, #0]
 802d496:	2b00      	cmp	r3, #0
 802d498:	dd0c      	ble.n	802d4b4 <mqtt_cb+0x6c>
 802d49a:	4b85      	ldr	r3, [pc, #532]	@ (802d6b0 <mqtt_cb+0x268>)
 802d49c:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 802d4a0:	4984      	ldr	r1, [pc, #528]	@ (802d6b4 <mqtt_cb+0x26c>)
 802d4a2:	2001      	movs	r0, #1
 802d4a4:	f7fe f812 	bl	802b4cc <mg_log_prefix>
 802d4a8:	68fb      	ldr	r3, [r7, #12]
 802d4aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802d4ac:	4619      	mov	r1, r3
 802d4ae:	4882      	ldr	r0, [pc, #520]	@ (802d6b8 <mqtt_cb+0x270>)
 802d4b0:	f7fe f85c 	bl	802b56c <mg_log>
        c->is_closing = 1;
 802d4b4:	68fa      	ldr	r2, [r7, #12]
 802d4b6:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802d4ba:	f043 0320 	orr.w	r3, r3, #32
 802d4be:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        break;
 802d4c2:	e0ef      	b.n	802d6a4 <mqtt_cb+0x25c>
      } else if (rc == MQTT_OK) {
 802d4c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802d4c6:	2b00      	cmp	r3, #0
 802d4c8:	f040 80eb 	bne.w	802d6a2 <mqtt_cb+0x25a>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 802d4cc:	4b77      	ldr	r3, [pc, #476]	@ (802d6ac <mqtt_cb+0x264>)
 802d4ce:	681b      	ldr	r3, [r3, #0]
 802d4d0:	2b03      	cmp	r3, #3
 802d4d2:	dd17      	ble.n	802d504 <mqtt_cb+0xbc>
 802d4d4:	4b76      	ldr	r3, [pc, #472]	@ (802d6b0 <mqtt_cb+0x268>)
 802d4d6:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 802d4da:	4976      	ldr	r1, [pc, #472]	@ (802d6b4 <mqtt_cb+0x26c>)
 802d4dc:	2004      	movs	r0, #4
 802d4de:	f7fd fff5 	bl	802b4cc <mg_log_prefix>
 802d4e2:	68fb      	ldr	r3, [r7, #12]
 802d4e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802d4e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 802d4ea:	4618      	mov	r0, r3
 802d4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802d4ee:	461c      	mov	r4, r3
 802d4f0:	6a3b      	ldr	r3, [r7, #32]
 802d4f2:	461a      	mov	r2, r3
 802d4f4:	69fb      	ldr	r3, [r7, #28]
 802d4f6:	9301      	str	r3, [sp, #4]
 802d4f8:	9200      	str	r2, [sp, #0]
 802d4fa:	4623      	mov	r3, r4
 802d4fc:	4602      	mov	r2, r0
 802d4fe:	486f      	ldr	r0, [pc, #444]	@ (802d6bc <mqtt_cb+0x274>)
 802d500:	f7fe f834 	bl	802b56c <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.buf));
        switch (mm.cmd) {
 802d504:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 802d508:	3b02      	subs	r3, #2
 802d50a:	2b04      	cmp	r3, #4
 802d50c:	f200 80ba 	bhi.w	802d684 <mqtt_cb+0x23c>
 802d510:	a201      	add	r2, pc, #4	@ (adr r2, 802d518 <mqtt_cb+0xd0>)
 802d512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d516:	bf00      	nop
 802d518:	0802d52d 	.word	0x0802d52d
 802d51c:	0802d5a1 	.word	0x0802d5a1
 802d520:	0802d685 	.word	0x0802d685
 802d524:	0802d62b 	.word	0x0802d62b
 802d528:	0802d657 	.word	0x0802d657
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 802d52c:	f107 0314 	add.w	r3, r7, #20
 802d530:	331c      	adds	r3, #28
 802d532:	461a      	mov	r2, r3
 802d534:	2111      	movs	r1, #17
 802d536:	68f8      	ldr	r0, [r7, #12]
 802d538:	f7f8 fbe2 	bl	8025d00 <mg_call>
            if (mm.ack == 0) {
 802d53c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 802d540:	2b00      	cmp	r3, #0
 802d542:	d112      	bne.n	802d56a <mqtt_cb+0x122>
              MG_DEBUG(("%lu Connected", c->id));
 802d544:	4b59      	ldr	r3, [pc, #356]	@ (802d6ac <mqtt_cb+0x264>)
 802d546:	681b      	ldr	r3, [r3, #0]
 802d548:	2b02      	cmp	r3, #2
 802d54a:	f340 809a 	ble.w	802d682 <mqtt_cb+0x23a>
 802d54e:	4b58      	ldr	r3, [pc, #352]	@ (802d6b0 <mqtt_cb+0x268>)
 802d550:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 802d554:	4957      	ldr	r1, [pc, #348]	@ (802d6b4 <mqtt_cb+0x26c>)
 802d556:	2003      	movs	r0, #3
 802d558:	f7fd ffb8 	bl	802b4cc <mg_log_prefix>
 802d55c:	68fb      	ldr	r3, [r7, #12]
 802d55e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802d560:	4619      	mov	r1, r3
 802d562:	4857      	ldr	r0, [pc, #348]	@ (802d6c0 <mqtt_cb+0x278>)
 802d564:	f7fe f802 	bl	802b56c <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 802d568:	e08b      	b.n	802d682 <mqtt_cb+0x23a>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 802d56a:	4b50      	ldr	r3, [pc, #320]	@ (802d6ac <mqtt_cb+0x264>)
 802d56c:	681b      	ldr	r3, [r3, #0]
 802d56e:	2b00      	cmp	r3, #0
 802d570:	dd0e      	ble.n	802d590 <mqtt_cb+0x148>
 802d572:	4b4f      	ldr	r3, [pc, #316]	@ (802d6b0 <mqtt_cb+0x268>)
 802d574:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 802d578:	494e      	ldr	r1, [pc, #312]	@ (802d6b4 <mqtt_cb+0x26c>)
 802d57a:	2001      	movs	r0, #1
 802d57c:	f7fd ffa6 	bl	802b4cc <mg_log_prefix>
 802d580:	68fb      	ldr	r3, [r7, #12]
 802d582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802d584:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 802d588:	4619      	mov	r1, r3
 802d58a:	484e      	ldr	r0, [pc, #312]	@ (802d6c4 <mqtt_cb+0x27c>)
 802d58c:	f7fd ffee 	bl	802b56c <mg_log>
              c->is_closing = 1;
 802d590:	68fa      	ldr	r2, [r7, #12]
 802d592:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802d596:	f043 0320 	orr.w	r3, r3, #32
 802d59a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
            break;
 802d59e:	e070      	b.n	802d682 <mqtt_cb+0x23a>
          case MQTT_CMD_PUBLISH: {
            /*MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
                      mm.topic.buf, (int) mm.data.len, mm.data.buf));*/
            if (mm.qos > 0) {
 802d5a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802d5a4:	2b00      	cmp	r3, #0
 802d5a6:	d038      	beq.n	802d61a <mqtt_cb+0x1d2>
              uint16_t id = mg_ntohs(mm.id);
 802d5a8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802d5aa:	4618      	mov	r0, r3
 802d5ac:	f005 fc35 	bl	8032e1a <mg_ntohs>
 802d5b0:	4603      	mov	r3, r0
 802d5b2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
              uint32_t remaining_len = sizeof(id);
 802d5b6:	2302      	movs	r3, #2
 802d5b8:	657b      	str	r3, [r7, #84]	@ 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 802d5ba:	68fb      	ldr	r3, [r7, #12]
 802d5bc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802d5c0:	f003 0304 	and.w	r3, r3, #4
 802d5c4:	b2db      	uxtb	r3, r3
 802d5c6:	2b00      	cmp	r3, #0
 802d5c8:	d002      	beq.n	802d5d0 <mqtt_cb+0x188>
 802d5ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802d5cc:	3302      	adds	r3, #2
 802d5ce:	657b      	str	r3, [r7, #84]	@ 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 802d5d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
              mg_mqtt_send_header(
 802d5d4:	2b02      	cmp	r3, #2
 802d5d6:	d101      	bne.n	802d5dc <mqtt_cb+0x194>
 802d5d8:	2105      	movs	r1, #5
 802d5da:	e000      	b.n	802d5de <mqtt_cb+0x196>
 802d5dc:	2104      	movs	r1, #4
 802d5de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802d5e0:	2200      	movs	r2, #0
 802d5e2:	68f8      	ldr	r0, [r7, #12]
 802d5e4:	f7ff f872 	bl	802c6cc <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 802d5e8:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 802d5ec:	2202      	movs	r2, #2
 802d5ee:	4619      	mov	r1, r3
 802d5f0:	68f8      	ldr	r0, [r7, #12]
 802d5f2:	f003 fe99 	bl	8031328 <mg_send>

              if (c->is_mqtt5) {
 802d5f6:	68fb      	ldr	r3, [r7, #12]
 802d5f8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802d5fc:	f003 0304 	and.w	r3, r3, #4
 802d600:	b2db      	uxtb	r3, r3
 802d602:	2b00      	cmp	r3, #0
 802d604:	d009      	beq.n	802d61a <mqtt_cb+0x1d2>
                uint16_t zero = 0;
 802d606:	2300      	movs	r3, #0
 802d608:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                mg_send(c, &zero, sizeof(zero));
 802d60c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802d610:	2202      	movs	r2, #2
 802d612:	4619      	mov	r1, r3
 802d614:	68f8      	ldr	r0, [r7, #12]
 802d616:	f003 fe87 	bl	8031328 <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 802d61a:	f107 0314 	add.w	r3, r7, #20
 802d61e:	461a      	mov	r2, r3
 802d620:	2110      	movs	r1, #16
 802d622:	68f8      	ldr	r0, [r7, #12]
 802d624:	f7f8 fb6c 	bl	8025d00 <mg_call>
            break;
 802d628:	e02c      	b.n	802d684 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 802d62a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802d62c:	4618      	mov	r0, r3
 802d62e:	f005 fbf4 	bl	8032e1a <mg_ntohs>
 802d632:	4603      	mov	r3, r0
 802d634:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 802d636:	2302      	movs	r3, #2
 802d638:	647b      	str	r3, [r7, #68]	@ 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 802d63a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802d63c:	2202      	movs	r2, #2
 802d63e:	2106      	movs	r1, #6
 802d640:	68f8      	ldr	r0, [r7, #12]
 802d642:	f7ff f843 	bl	802c6cc <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 802d646:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 802d64a:	2202      	movs	r2, #2
 802d64c:	4619      	mov	r1, r3
 802d64e:	68f8      	ldr	r0, [r7, #12]
 802d650:	f003 fe6a 	bl	8031328 <mg_send>
            break;
 802d654:	e016      	b.n	802d684 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 802d656:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802d658:	4618      	mov	r0, r3
 802d65a:	f005 fbde 	bl	8032e1a <mg_ntohs>
 802d65e:	4603      	mov	r3, r0
 802d660:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 802d662:	2302      	movs	r3, #2
 802d664:	64bb      	str	r3, [r7, #72]	@ 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 802d666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802d668:	2200      	movs	r2, #0
 802d66a:	2107      	movs	r1, #7
 802d66c:	68f8      	ldr	r0, [r7, #12]
 802d66e:	f7ff f82d 	bl	802c6cc <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 802d672:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 802d676:	2202      	movs	r2, #2
 802d678:	4619      	mov	r1, r3
 802d67a:	68f8      	ldr	r0, [r7, #12]
 802d67c:	f003 fe54 	bl	8031328 <mg_send>
            break;
 802d680:	e000      	b.n	802d684 <mqtt_cb+0x23c>
            break;
 802d682:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 802d684:	f107 0314 	add.w	r3, r7, #20
 802d688:	461a      	mov	r2, r3
 802d68a:	210f      	movs	r1, #15
 802d68c:	68f8      	ldr	r0, [r7, #12]
 802d68e:	f7f8 fb37 	bl	8025d00 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 802d692:	68fb      	ldr	r3, [r7, #12]
 802d694:	3338      	adds	r3, #56	@ 0x38
 802d696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802d698:	2100      	movs	r1, #0
 802d69a:	4618      	mov	r0, r3
 802d69c:	f7fd f804 	bl	802a6a8 <mg_iobuf_del>
    for (;;) {
 802d6a0:	e6dc      	b.n	802d45c <mqtt_cb+0x14>
      } else {
        break;
 802d6a2:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 802d6a4:	bf00      	nop
 802d6a6:	375c      	adds	r7, #92	@ 0x5c
 802d6a8:	46bd      	mov	sp, r7
 802d6aa:	bd90      	pop	{r4, r7, pc}
 802d6ac:	200002a8 	.word	0x200002a8
 802d6b0:	08044aa4 	.word	0x08044aa4
 802d6b4:	08041a30 	.word	0x08041a30
 802d6b8:	08042ed8 	.word	0x08042ed8
 802d6bc:	08042ef4 	.word	0x08042ef4
 802d6c0:	08042f14 	.word	0x08042f14
 802d6c4:	08042f24 	.word	0x08042f24

0802d6c8 <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 802d6c8:	b580      	push	{r7, lr}
 802d6ca:	b096      	sub	sp, #88	@ 0x58
 802d6cc:	af00      	add	r7, sp, #0
 802d6ce:	60f8      	str	r0, [r7, #12]
 802d6d0:	60b9      	str	r1, [r7, #8]
 802d6d2:	607a      	str	r2, [r7, #4]
 802d6d4:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 802d6d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802d6d8:	683a      	ldr	r2, [r7, #0]
 802d6da:	68b9      	ldr	r1, [r7, #8]
 802d6dc:	68f8      	ldr	r0, [r7, #12]
 802d6de:	f000 fb5f 	bl	802dda0 <mg_connect>
 802d6e2:	6578      	str	r0, [r7, #84]	@ 0x54
  if (c != NULL) {
 802d6e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802d6e6:	2b00      	cmp	r3, #0
 802d6e8:	d015      	beq.n	802d716 <mg_mqtt_connect+0x4e>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 802d6ea:	f107 0314 	add.w	r3, r7, #20
 802d6ee:	2240      	movs	r2, #64	@ 0x40
 802d6f0:	2100      	movs	r1, #0
 802d6f2:	4618      	mov	r0, r3
 802d6f4:	f008 fcf4 	bl	80360e0 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 802d6f8:	687b      	ldr	r3, [r7, #4]
 802d6fa:	2b00      	cmp	r3, #0
 802d6fc:	d102      	bne.n	802d704 <mg_mqtt_connect+0x3c>
 802d6fe:	f107 0314 	add.w	r3, r7, #20
 802d702:	e000      	b.n	802d706 <mg_mqtt_connect+0x3e>
 802d704:	687b      	ldr	r3, [r7, #4]
 802d706:	4619      	mov	r1, r3
 802d708:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 802d70a:	f7ff fad1 	bl	802ccb0 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 802d70e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802d710:	4a03      	ldr	r2, [pc, #12]	@ (802d720 <mg_mqtt_connect+0x58>)
 802d712:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
  return c;
 802d716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 802d718:	4618      	mov	r0, r3
 802d71a:	3758      	adds	r7, #88	@ 0x58
 802d71c:	46bd      	mov	sp, r7
 802d71e:	bd80      	pop	{r7, pc}
 802d720:	0802d449 	.word	0x0802d449

0802d724 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 802d724:	b580      	push	{r7, lr}
 802d726:	b086      	sub	sp, #24
 802d728:	af00      	add	r7, sp, #0
 802d72a:	60f8      	str	r0, [r7, #12]
 802d72c:	60b9      	str	r1, [r7, #8]
 802d72e:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 802d730:	68fb      	ldr	r3, [r7, #12]
 802d732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802d734:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 802d736:	68fb      	ldr	r3, [r7, #12]
 802d738:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 802d73c:	687b      	ldr	r3, [r7, #4]
 802d73e:	68ba      	ldr	r2, [r7, #8]
 802d740:	4805      	ldr	r0, [pc, #20]	@ (802d758 <mg_vprintf+0x34>)
 802d742:	f7f9 f80f 	bl	8026764 <mg_vxprintf>
  return c->send.len - old;
 802d746:	68fb      	ldr	r3, [r7, #12]
 802d748:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 802d74a:	697b      	ldr	r3, [r7, #20]
 802d74c:	1ad3      	subs	r3, r2, r3
}
 802d74e:	4618      	mov	r0, r3
 802d750:	3718      	adds	r7, #24
 802d752:	46bd      	mov	sp, r7
 802d754:	bd80      	pop	{r7, pc}
 802d756:	bf00      	nop
 802d758:	08031495 	.word	0x08031495

0802d75c <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 802d75c:	b40e      	push	{r1, r2, r3}
 802d75e:	b580      	push	{r7, lr}
 802d760:	b085      	sub	sp, #20
 802d762:	af00      	add	r7, sp, #0
 802d764:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 802d766:	2300      	movs	r3, #0
 802d768:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 802d76a:	f107 0320 	add.w	r3, r7, #32
 802d76e:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 802d770:	f107 0308 	add.w	r3, r7, #8
 802d774:	461a      	mov	r2, r3
 802d776:	69f9      	ldr	r1, [r7, #28]
 802d778:	6878      	ldr	r0, [r7, #4]
 802d77a:	f7ff ffd3 	bl	802d724 <mg_vprintf>
 802d77e:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 802d780:	68fb      	ldr	r3, [r7, #12]
}
 802d782:	4618      	mov	r0, r3
 802d784:	3714      	adds	r7, #20
 802d786:	46bd      	mov	sp, r7
 802d788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802d78c:	b003      	add	sp, #12
 802d78e:	4770      	bx	lr

0802d790 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 802d790:	b580      	push	{r7, lr}
 802d792:	b088      	sub	sp, #32
 802d794:	af00      	add	r7, sp, #0
 802d796:	f107 0308 	add.w	r3, r7, #8
 802d79a:	e883 0003 	stmia.w	r3, {r0, r1}
 802d79e:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 802d7a0:	4811      	ldr	r0, [pc, #68]	@ (802d7e8 <mg_atonl+0x58>)
 802d7a2:	f005 fb21 	bl	8032de8 <mg_ntohl>
 802d7a6:	4603      	mov	r3, r0
 802d7a8:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 802d7aa:	f107 0318 	add.w	r3, r7, #24
 802d7ae:	490f      	ldr	r1, [pc, #60]	@ (802d7ec <mg_atonl+0x5c>)
 802d7b0:	4618      	mov	r0, r3
 802d7b2:	f004 fb8f 	bl	8031ed4 <mg_str_s>
 802d7b6:	f107 0318 	add.w	r3, r7, #24
 802d7ba:	cb0c      	ldmia	r3, {r2, r3}
 802d7bc:	f107 0108 	add.w	r1, r7, #8
 802d7c0:	c903      	ldmia	r1, {r0, r1}
 802d7c2:	f004 fc13 	bl	8031fec <mg_strcasecmp>
 802d7c6:	4603      	mov	r3, r0
 802d7c8:	2b00      	cmp	r3, #0
 802d7ca:	d001      	beq.n	802d7d0 <mg_atonl+0x40>
 802d7cc:	2300      	movs	r3, #0
 802d7ce:	e006      	b.n	802d7de <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 802d7d0:	687b      	ldr	r3, [r7, #4]
 802d7d2:	697a      	ldr	r2, [r7, #20]
 802d7d4:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 802d7d6:	687b      	ldr	r3, [r7, #4]
 802d7d8:	2200      	movs	r2, #0
 802d7da:	74da      	strb	r2, [r3, #19]
  return true;
 802d7dc:	2301      	movs	r3, #1
}
 802d7de:	4618      	mov	r0, r3
 802d7e0:	3720      	adds	r7, #32
 802d7e2:	46bd      	mov	sp, r7
 802d7e4:	bd80      	pop	{r7, pc}
 802d7e6:	bf00      	nop
 802d7e8:	7f000001 	.word	0x7f000001
 802d7ec:	08042f44 	.word	0x08042f44

0802d7f0 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 802d7f0:	b580      	push	{r7, lr}
 802d7f2:	b084      	sub	sp, #16
 802d7f4:	af00      	add	r7, sp, #0
 802d7f6:	f107 0308 	add.w	r3, r7, #8
 802d7fa:	e883 0003 	stmia.w	r3, {r0, r1}
 802d7fe:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 802d800:	68fb      	ldr	r3, [r7, #12]
 802d802:	2b00      	cmp	r3, #0
 802d804:	d001      	beq.n	802d80a <mg_atone+0x1a>
 802d806:	2300      	movs	r3, #0
 802d808:	e009      	b.n	802d81e <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 802d80a:	687b      	ldr	r3, [r7, #4]
 802d80c:	2210      	movs	r2, #16
 802d80e:	2100      	movs	r1, #0
 802d810:	4618      	mov	r0, r3
 802d812:	f008 fc65 	bl	80360e0 <memset>
  addr->is_ip6 = false;
 802d816:	687b      	ldr	r3, [r7, #4]
 802d818:	2200      	movs	r2, #0
 802d81a:	74da      	strb	r2, [r3, #19]
  return true;
 802d81c:	2301      	movs	r3, #1
}
 802d81e:	4618      	mov	r0, r3
 802d820:	3710      	adds	r7, #16
 802d822:	46bd      	mov	sp, r7
 802d824:	bd80      	pop	{r7, pc}

0802d826 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 802d826:	b480      	push	{r7}
 802d828:	b089      	sub	sp, #36	@ 0x24
 802d82a:	af00      	add	r7, sp, #0
 802d82c:	f107 0308 	add.w	r3, r7, #8
 802d830:	e883 0003 	stmia.w	r3, {r0, r1}
 802d834:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 802d836:	2300      	movs	r3, #0
 802d838:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 802d83a:	2300      	movs	r3, #0
 802d83c:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 802d83e:	2300      	movs	r3, #0
 802d840:	61fb      	str	r3, [r7, #28]
 802d842:	e049      	b.n	802d8d8 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 802d844:	68ba      	ldr	r2, [r7, #8]
 802d846:	69fb      	ldr	r3, [r7, #28]
 802d848:	4413      	add	r3, r2
 802d84a:	781b      	ldrb	r3, [r3, #0]
 802d84c:	2b2f      	cmp	r3, #47	@ 0x2f
 802d84e:	d925      	bls.n	802d89c <mg_aton4+0x76>
 802d850:	68ba      	ldr	r2, [r7, #8]
 802d852:	69fb      	ldr	r3, [r7, #28]
 802d854:	4413      	add	r3, r2
 802d856:	781b      	ldrb	r3, [r3, #0]
 802d858:	2b39      	cmp	r3, #57	@ 0x39
 802d85a:	d81f      	bhi.n	802d89c <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 802d85c:	f107 0210 	add.w	r2, r7, #16
 802d860:	69bb      	ldr	r3, [r7, #24]
 802d862:	4413      	add	r3, r2
 802d864:	781b      	ldrb	r3, [r3, #0]
 802d866:	461a      	mov	r2, r3
 802d868:	4613      	mov	r3, r2
 802d86a:	009b      	lsls	r3, r3, #2
 802d86c:	4413      	add	r3, r2
 802d86e:	005b      	lsls	r3, r3, #1
 802d870:	4619      	mov	r1, r3
 802d872:	68ba      	ldr	r2, [r7, #8]
 802d874:	69fb      	ldr	r3, [r7, #28]
 802d876:	4413      	add	r3, r2
 802d878:	781b      	ldrb	r3, [r3, #0]
 802d87a:	3b30      	subs	r3, #48	@ 0x30
 802d87c:	440b      	add	r3, r1
 802d87e:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 802d880:	697b      	ldr	r3, [r7, #20]
 802d882:	2bff      	cmp	r3, #255	@ 0xff
 802d884:	dd01      	ble.n	802d88a <mg_aton4+0x64>
 802d886:	2300      	movs	r3, #0
 802d888:	e03d      	b.n	802d906 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 802d88a:	697b      	ldr	r3, [r7, #20]
 802d88c:	b2d9      	uxtb	r1, r3
 802d88e:	f107 0210 	add.w	r2, r7, #16
 802d892:	69bb      	ldr	r3, [r7, #24]
 802d894:	4413      	add	r3, r2
 802d896:	460a      	mov	r2, r1
 802d898:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 802d89a:	e01a      	b.n	802d8d2 <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 802d89c:	68ba      	ldr	r2, [r7, #8]
 802d89e:	69fb      	ldr	r3, [r7, #28]
 802d8a0:	4413      	add	r3, r2
 802d8a2:	781b      	ldrb	r3, [r3, #0]
 802d8a4:	2b2e      	cmp	r3, #46	@ 0x2e
 802d8a6:	d112      	bne.n	802d8ce <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 802d8a8:	69bb      	ldr	r3, [r7, #24]
 802d8aa:	2b02      	cmp	r3, #2
 802d8ac:	d809      	bhi.n	802d8c2 <mg_aton4+0x9c>
 802d8ae:	69fb      	ldr	r3, [r7, #28]
 802d8b0:	2b00      	cmp	r3, #0
 802d8b2:	d006      	beq.n	802d8c2 <mg_aton4+0x9c>
 802d8b4:	68ba      	ldr	r2, [r7, #8]
 802d8b6:	69fb      	ldr	r3, [r7, #28]
 802d8b8:	3b01      	subs	r3, #1
 802d8ba:	4413      	add	r3, r2
 802d8bc:	781b      	ldrb	r3, [r3, #0]
 802d8be:	2b2e      	cmp	r3, #46	@ 0x2e
 802d8c0:	d101      	bne.n	802d8c6 <mg_aton4+0xa0>
 802d8c2:	2300      	movs	r3, #0
 802d8c4:	e01f      	b.n	802d906 <mg_aton4+0xe0>
      num_dots++;
 802d8c6:	69bb      	ldr	r3, [r7, #24]
 802d8c8:	3301      	adds	r3, #1
 802d8ca:	61bb      	str	r3, [r7, #24]
 802d8cc:	e001      	b.n	802d8d2 <mg_aton4+0xac>
    } else {
      return false;
 802d8ce:	2300      	movs	r3, #0
 802d8d0:	e019      	b.n	802d906 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 802d8d2:	69fb      	ldr	r3, [r7, #28]
 802d8d4:	3301      	adds	r3, #1
 802d8d6:	61fb      	str	r3, [r7, #28]
 802d8d8:	68fb      	ldr	r3, [r7, #12]
 802d8da:	69fa      	ldr	r2, [r7, #28]
 802d8dc:	429a      	cmp	r2, r3
 802d8de:	d3b1      	bcc.n	802d844 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 802d8e0:	69bb      	ldr	r3, [r7, #24]
 802d8e2:	2b03      	cmp	r3, #3
 802d8e4:	d106      	bne.n	802d8f4 <mg_aton4+0xce>
 802d8e6:	68ba      	ldr	r2, [r7, #8]
 802d8e8:	69fb      	ldr	r3, [r7, #28]
 802d8ea:	3b01      	subs	r3, #1
 802d8ec:	4413      	add	r3, r2
 802d8ee:	781b      	ldrb	r3, [r3, #0]
 802d8f0:	2b2e      	cmp	r3, #46	@ 0x2e
 802d8f2:	d101      	bne.n	802d8f8 <mg_aton4+0xd2>
 802d8f4:	2300      	movs	r3, #0
 802d8f6:	e006      	b.n	802d906 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 802d8f8:	687b      	ldr	r3, [r7, #4]
 802d8fa:	693a      	ldr	r2, [r7, #16]
 802d8fc:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 802d8fe:	687b      	ldr	r3, [r7, #4]
 802d900:	2200      	movs	r2, #0
 802d902:	74da      	strb	r2, [r3, #19]
  return true;
 802d904:	2301      	movs	r3, #1
}
 802d906:	4618      	mov	r0, r3
 802d908:	3724      	adds	r7, #36	@ 0x24
 802d90a:	46bd      	mov	sp, r7
 802d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d910:	4770      	bx	lr

0802d912 <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 802d912:	b580      	push	{r7, lr}
 802d914:	b088      	sub	sp, #32
 802d916:	af00      	add	r7, sp, #0
 802d918:	f107 0308 	add.w	r3, r7, #8
 802d91c:	e883 0003 	stmia.w	r3, {r0, r1}
 802d920:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 802d922:	68fb      	ldr	r3, [r7, #12]
 802d924:	2b0d      	cmp	r3, #13
 802d926:	d801      	bhi.n	802d92c <mg_v4mapped+0x1a>
 802d928:	2300      	movs	r3, #0
 802d92a:	e056      	b.n	802d9da <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 802d92c:	68bb      	ldr	r3, [r7, #8]
 802d92e:	781b      	ldrb	r3, [r3, #0]
 802d930:	2b3a      	cmp	r3, #58	@ 0x3a
 802d932:	d109      	bne.n	802d948 <mg_v4mapped+0x36>
 802d934:	68bb      	ldr	r3, [r7, #8]
 802d936:	3301      	adds	r3, #1
 802d938:	781b      	ldrb	r3, [r3, #0]
 802d93a:	2b3a      	cmp	r3, #58	@ 0x3a
 802d93c:	d104      	bne.n	802d948 <mg_v4mapped+0x36>
 802d93e:	68bb      	ldr	r3, [r7, #8]
 802d940:	3306      	adds	r3, #6
 802d942:	781b      	ldrb	r3, [r3, #0]
 802d944:	2b3a      	cmp	r3, #58	@ 0x3a
 802d946:	d001      	beq.n	802d94c <mg_v4mapped+0x3a>
 802d948:	2300      	movs	r3, #0
 802d94a:	e046      	b.n	802d9da <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 802d94c:	2302      	movs	r3, #2
 802d94e:	61fb      	str	r3, [r7, #28]
 802d950:	e010      	b.n	802d974 <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 802d952:	68ba      	ldr	r2, [r7, #8]
 802d954:	69fb      	ldr	r3, [r7, #28]
 802d956:	4413      	add	r3, r2
 802d958:	781b      	ldrb	r3, [r3, #0]
 802d95a:	2b66      	cmp	r3, #102	@ 0x66
 802d95c:	d007      	beq.n	802d96e <mg_v4mapped+0x5c>
 802d95e:	68ba      	ldr	r2, [r7, #8]
 802d960:	69fb      	ldr	r3, [r7, #28]
 802d962:	4413      	add	r3, r2
 802d964:	781b      	ldrb	r3, [r3, #0]
 802d966:	2b46      	cmp	r3, #70	@ 0x46
 802d968:	d001      	beq.n	802d96e <mg_v4mapped+0x5c>
 802d96a:	2300      	movs	r3, #0
 802d96c:	e035      	b.n	802d9da <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 802d96e:	69fb      	ldr	r3, [r7, #28]
 802d970:	3301      	adds	r3, #1
 802d972:	61fb      	str	r3, [r7, #28]
 802d974:	69fb      	ldr	r3, [r7, #28]
 802d976:	2b05      	cmp	r3, #5
 802d978:	ddeb      	ble.n	802d952 <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 802d97a:	68bb      	ldr	r3, [r7, #8]
 802d97c:	1dd9      	adds	r1, r3, #7
 802d97e:	68fb      	ldr	r3, [r7, #12]
 802d980:	1fda      	subs	r2, r3, #7
 802d982:	f107 0314 	add.w	r3, r7, #20
 802d986:	4618      	mov	r0, r3
 802d988:	f004 fac1 	bl	8031f0e <mg_str_n>
 802d98c:	687a      	ldr	r2, [r7, #4]
 802d98e:	f107 0314 	add.w	r3, r7, #20
 802d992:	e893 0003 	ldmia.w	r3, {r0, r1}
 802d996:	f7ff ff46 	bl	802d826 <mg_aton4>
 802d99a:	4603      	mov	r3, r0
 802d99c:	f083 0301 	eor.w	r3, r3, #1
 802d9a0:	b2db      	uxtb	r3, r3
 802d9a2:	2b00      	cmp	r3, #0
 802d9a4:	d001      	beq.n	802d9aa <mg_v4mapped+0x98>
 802d9a6:	2300      	movs	r3, #0
 802d9a8:	e017      	b.n	802d9da <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 802d9aa:	687b      	ldr	r3, [r7, #4]
 802d9ac:	681b      	ldr	r3, [r3, #0]
 802d9ae:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 802d9b0:	687b      	ldr	r3, [r7, #4]
 802d9b2:	2210      	movs	r2, #16
 802d9b4:	2100      	movs	r1, #0
 802d9b6:	4618      	mov	r0, r3
 802d9b8:	f008 fb92 	bl	80360e0 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 802d9bc:	687b      	ldr	r3, [r7, #4]
 802d9be:	22ff      	movs	r2, #255	@ 0xff
 802d9c0:	72da      	strb	r2, [r3, #11]
 802d9c2:	687b      	ldr	r3, [r7, #4]
 802d9c4:	7ada      	ldrb	r2, [r3, #11]
 802d9c6:	687b      	ldr	r3, [r7, #4]
 802d9c8:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 802d9ca:	687b      	ldr	r3, [r7, #4]
 802d9cc:	330c      	adds	r3, #12
 802d9ce:	693a      	ldr	r2, [r7, #16]
 802d9d0:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 802d9d2:	687b      	ldr	r3, [r7, #4]
 802d9d4:	2201      	movs	r2, #1
 802d9d6:	74da      	strb	r2, [r3, #19]
  return true;
 802d9d8:	2301      	movs	r3, #1
}
 802d9da:	4618      	mov	r0, r3
 802d9dc:	3720      	adds	r7, #32
 802d9de:	46bd      	mov	sp, r7
 802d9e0:	bd80      	pop	{r7, pc}

0802d9e2 <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 802d9e2:	b580      	push	{r7, lr}
 802d9e4:	b090      	sub	sp, #64	@ 0x40
 802d9e6:	af02      	add	r7, sp, #8
 802d9e8:	f107 0308 	add.w	r3, r7, #8
 802d9ec:	e883 0003 	stmia.w	r3, {r0, r1}
 802d9f0:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 802d9f2:	2300      	movs	r3, #0
 802d9f4:	633b      	str	r3, [r7, #48]	@ 0x30
 802d9f6:	2300      	movs	r3, #0
 802d9f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802d9fa:	232a      	movs	r3, #42	@ 0x2a
 802d9fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 802d9fe:	687b      	ldr	r3, [r7, #4]
 802da00:	2200      	movs	r2, #0
 802da02:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 802da04:	68fb      	ldr	r3, [r7, #12]
 802da06:	2b02      	cmp	r3, #2
 802da08:	d909      	bls.n	802da1e <mg_aton6+0x3c>
 802da0a:	68bb      	ldr	r3, [r7, #8]
 802da0c:	781b      	ldrb	r3, [r3, #0]
 802da0e:	2b5b      	cmp	r3, #91	@ 0x5b
 802da10:	d105      	bne.n	802da1e <mg_aton6+0x3c>
 802da12:	68bb      	ldr	r3, [r7, #8]
 802da14:	3301      	adds	r3, #1
 802da16:	60bb      	str	r3, [r7, #8]
 802da18:	68fb      	ldr	r3, [r7, #12]
 802da1a:	3b02      	subs	r3, #2
 802da1c:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 802da1e:	687a      	ldr	r2, [r7, #4]
 802da20:	f107 0308 	add.w	r3, r7, #8
 802da24:	e893 0003 	ldmia.w	r3, {r0, r1}
 802da28:	f7ff ff73 	bl	802d912 <mg_v4mapped>
 802da2c:	4603      	mov	r3, r0
 802da2e:	2b00      	cmp	r3, #0
 802da30:	d001      	beq.n	802da36 <mg_aton6+0x54>
 802da32:	2301      	movs	r3, #1
 802da34:	e0e1      	b.n	802dbfa <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 802da36:	2300      	movs	r3, #0
 802da38:	637b      	str	r3, [r7, #52]	@ 0x34
 802da3a:	e0b0      	b.n	802db9e <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 802da3c:	68ba      	ldr	r2, [r7, #8]
 802da3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802da40:	4413      	add	r3, r2
 802da42:	781b      	ldrb	r3, [r3, #0]
 802da44:	2b2f      	cmp	r3, #47	@ 0x2f
 802da46:	d905      	bls.n	802da54 <mg_aton6+0x72>
 802da48:	68ba      	ldr	r2, [r7, #8]
 802da4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802da4c:	4413      	add	r3, r2
 802da4e:	781b      	ldrb	r3, [r3, #0]
 802da50:	2b39      	cmp	r3, #57	@ 0x39
 802da52:	d917      	bls.n	802da84 <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 802da54:	68ba      	ldr	r2, [r7, #8]
 802da56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802da58:	4413      	add	r3, r2
 802da5a:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 802da5c:	2b60      	cmp	r3, #96	@ 0x60
 802da5e:	d905      	bls.n	802da6c <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 802da60:	68ba      	ldr	r2, [r7, #8]
 802da62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802da64:	4413      	add	r3, r2
 802da66:	781b      	ldrb	r3, [r3, #0]
 802da68:	2b66      	cmp	r3, #102	@ 0x66
 802da6a:	d90b      	bls.n	802da84 <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 802da6c:	68ba      	ldr	r2, [r7, #8]
 802da6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802da70:	4413      	add	r3, r2
 802da72:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 802da74:	2b40      	cmp	r3, #64	@ 0x40
 802da76:	d933      	bls.n	802dae0 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 802da78:	68ba      	ldr	r2, [r7, #8]
 802da7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802da7c:	4413      	add	r3, r2
 802da7e:	781b      	ldrb	r3, [r3, #0]
 802da80:	2b46      	cmp	r3, #70	@ 0x46
 802da82:	d82d      	bhi.n	802dae0 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 802da84:	2300      	movs	r3, #0
 802da86:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 802da88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802da8a:	3303      	adds	r3, #3
 802da8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802da8e:	429a      	cmp	r2, r3
 802da90:	d901      	bls.n	802da96 <mg_aton6+0xb4>
 802da92:	2300      	movs	r3, #0
 802da94:	e0b1      	b.n	802dbfa <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 802da96:	68ba      	ldr	r2, [r7, #8]
 802da98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802da9a:	18d1      	adds	r1, r2, r3
 802da9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802da9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802daa0:	1ad3      	subs	r3, r2, r3
 802daa2:	1c5a      	adds	r2, r3, #1
 802daa4:	f107 0318 	add.w	r3, r7, #24
 802daa8:	4618      	mov	r0, r3
 802daaa:	f004 fa30 	bl	8031f0e <mg_str_n>
 802daae:	f107 0314 	add.w	r3, r7, #20
 802dab2:	2204      	movs	r2, #4
 802dab4:	9200      	str	r2, [sp, #0]
 802dab6:	2210      	movs	r2, #16
 802dab8:	f107 0118 	add.w	r1, r7, #24
 802dabc:	c903      	ldmia	r1, {r0, r1}
 802dabe:	f004 fc2d 	bl	803231c <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 802dac2:	697b      	ldr	r3, [r7, #20]
 802dac4:	0a1b      	lsrs	r3, r3, #8
 802dac6:	b2d9      	uxtb	r1, r3
 802dac8:	687a      	ldr	r2, [r7, #4]
 802daca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802dacc:	4413      	add	r3, r2
 802dace:	460a      	mov	r2, r1
 802dad0:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 802dad2:	697a      	ldr	r2, [r7, #20]
 802dad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802dad6:	3301      	adds	r3, #1
 802dad8:	b2d1      	uxtb	r1, r2
 802dada:	687a      	ldr	r2, [r7, #4]
 802dadc:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 802dade:	e05b      	b.n	802db98 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 802dae0:	68ba      	ldr	r2, [r7, #8]
 802dae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802dae4:	4413      	add	r3, r2
 802dae6:	781b      	ldrb	r3, [r3, #0]
 802dae8:	2b3a      	cmp	r3, #58	@ 0x3a
 802daea:	d134      	bne.n	802db56 <mg_aton6+0x174>
      j = i + 1;
 802daec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802daee:	3301      	adds	r3, #1
 802daf0:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 802daf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802daf4:	2b00      	cmp	r3, #0
 802daf6:	d014      	beq.n	802db22 <mg_aton6+0x140>
 802daf8:	68ba      	ldr	r2, [r7, #8]
 802dafa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802dafc:	3b01      	subs	r3, #1
 802dafe:	4413      	add	r3, r2
 802db00:	781b      	ldrb	r3, [r3, #0]
 802db02:	2b3a      	cmp	r3, #58	@ 0x3a
 802db04:	d10d      	bne.n	802db22 <mg_aton6+0x140>
        dc = n;  // Double colon
 802db06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802db08:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 802db0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802db0c:	2b01      	cmp	r3, #1
 802db0e:	d90f      	bls.n	802db30 <mg_aton6+0x14e>
 802db10:	68ba      	ldr	r2, [r7, #8]
 802db12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802db14:	3b02      	subs	r3, #2
 802db16:	4413      	add	r3, r2
 802db18:	781b      	ldrb	r3, [r3, #0]
 802db1a:	2b3a      	cmp	r3, #58	@ 0x3a
 802db1c:	d108      	bne.n	802db30 <mg_aton6+0x14e>
 802db1e:	2300      	movs	r3, #0
 802db20:	e06b      	b.n	802dbfa <mg_aton6+0x218>
      } else if (i > 0) {
 802db22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802db24:	2b00      	cmp	r3, #0
 802db26:	d004      	beq.n	802db32 <mg_aton6+0x150>
        n += 2;
 802db28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802db2a:	3302      	adds	r3, #2
 802db2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802db2e:	e000      	b.n	802db32 <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 802db30:	bf00      	nop
      }
      if (n > 14) return false;
 802db32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802db34:	2b0e      	cmp	r3, #14
 802db36:	d901      	bls.n	802db3c <mg_aton6+0x15a>
 802db38:	2300      	movs	r3, #0
 802db3a:	e05e      	b.n	802dbfa <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 802db3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802db3e:	3301      	adds	r3, #1
 802db40:	687a      	ldr	r2, [r7, #4]
 802db42:	2100      	movs	r1, #0
 802db44:	54d1      	strb	r1, [r2, r3]
 802db46:	687a      	ldr	r2, [r7, #4]
 802db48:	5cd1      	ldrb	r1, [r2, r3]
 802db4a:	687a      	ldr	r2, [r7, #4]
 802db4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802db4e:	4413      	add	r3, r2
 802db50:	460a      	mov	r2, r1
 802db52:	701a      	strb	r2, [r3, #0]
 802db54:	e020      	b.n	802db98 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 802db56:	68ba      	ldr	r2, [r7, #8]
 802db58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802db5a:	4413      	add	r3, r2
 802db5c:	781b      	ldrb	r3, [r3, #0]
 802db5e:	2b25      	cmp	r3, #37	@ 0x25
 802db60:	d118      	bne.n	802db94 <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 802db62:	68ba      	ldr	r2, [r7, #8]
 802db64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802db66:	3301      	adds	r3, #1
 802db68:	18d1      	adds	r1, r2, r3
 802db6a:	68fa      	ldr	r2, [r7, #12]
 802db6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802db6e:	1ad3      	subs	r3, r2, r3
 802db70:	1e5a      	subs	r2, r3, #1
 802db72:	f107 0320 	add.w	r3, r7, #32
 802db76:	4618      	mov	r0, r3
 802db78:	f004 f9c9 	bl	8031f0e <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 802db7c:	687b      	ldr	r3, [r7, #4]
 802db7e:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 802db80:	2201      	movs	r2, #1
 802db82:	9200      	str	r2, [sp, #0]
 802db84:	220a      	movs	r2, #10
 802db86:	f107 0120 	add.w	r1, r7, #32
 802db8a:	c903      	ldmia	r1, {r0, r1}
 802db8c:	f004 fbc6 	bl	803231c <mg_str_to_num>
 802db90:	4603      	mov	r3, r0
 802db92:	e032      	b.n	802dbfa <mg_aton6+0x218>
    } else {
      return false;
 802db94:	2300      	movs	r3, #0
 802db96:	e030      	b.n	802dbfa <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 802db98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802db9a:	3301      	adds	r3, #1
 802db9c:	637b      	str	r3, [r7, #52]	@ 0x34
 802db9e:	68fb      	ldr	r3, [r7, #12]
 802dba0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802dba2:	429a      	cmp	r2, r3
 802dba4:	f4ff af4a 	bcc.w	802da3c <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 802dba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802dbaa:	2b0d      	cmp	r3, #13
 802dbac:	d804      	bhi.n	802dbb8 <mg_aton6+0x1d6>
 802dbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802dbb0:	2b2a      	cmp	r3, #42	@ 0x2a
 802dbb2:	d101      	bne.n	802dbb8 <mg_aton6+0x1d6>
 802dbb4:	2300      	movs	r3, #0
 802dbb6:	e020      	b.n	802dbfa <mg_aton6+0x218>
  if (n < 14) {
 802dbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802dbba:	2b0d      	cmp	r3, #13
 802dbbc:	d819      	bhi.n	802dbf2 <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 802dbbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802dbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802dbc2:	1ad3      	subs	r3, r2, r3
 802dbc4:	330e      	adds	r3, #14
 802dbc6:	687a      	ldr	r2, [r7, #4]
 802dbc8:	18d0      	adds	r0, r2, r3
 802dbca:	687a      	ldr	r2, [r7, #4]
 802dbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802dbce:	18d1      	adds	r1, r2, r3
 802dbd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802dbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802dbd4:	1ad3      	subs	r3, r2, r3
 802dbd6:	3302      	adds	r3, #2
 802dbd8:	461a      	mov	r2, r3
 802dbda:	f008 fa67 	bl	80360ac <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 802dbde:	687a      	ldr	r2, [r7, #4]
 802dbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802dbe2:	18d0      	adds	r0, r2, r3
 802dbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802dbe6:	f1c3 030e 	rsb	r3, r3, #14
 802dbea:	461a      	mov	r2, r3
 802dbec:	2100      	movs	r1, #0
 802dbee:	f008 fa77 	bl	80360e0 <memset>
  }

  addr->is_ip6 = true;
 802dbf2:	687b      	ldr	r3, [r7, #4]
 802dbf4:	2201      	movs	r2, #1
 802dbf6:	74da      	strb	r2, [r3, #19]
  return true;
 802dbf8:	2301      	movs	r3, #1
}
 802dbfa:	4618      	mov	r0, r3
 802dbfc:	3738      	adds	r7, #56	@ 0x38
 802dbfe:	46bd      	mov	sp, r7
 802dc00:	bd80      	pop	{r7, pc}

0802dc02 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 802dc02:	b580      	push	{r7, lr}
 802dc04:	b084      	sub	sp, #16
 802dc06:	af00      	add	r7, sp, #0
 802dc08:	f107 0308 	add.w	r3, r7, #8
 802dc0c:	e883 0003 	stmia.w	r3, {r0, r1}
 802dc10:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 802dc12:	687a      	ldr	r2, [r7, #4]
 802dc14:	f107 0308 	add.w	r3, r7, #8
 802dc18:	e893 0003 	ldmia.w	r3, {r0, r1}
 802dc1c:	f7ff fde8 	bl	802d7f0 <mg_atone>
 802dc20:	4603      	mov	r3, r0
 802dc22:	2b00      	cmp	r3, #0
 802dc24:	d11d      	bne.n	802dc62 <mg_aton+0x60>
 802dc26:	687a      	ldr	r2, [r7, #4]
 802dc28:	f107 0308 	add.w	r3, r7, #8
 802dc2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 802dc30:	f7ff fdae 	bl	802d790 <mg_atonl>
 802dc34:	4603      	mov	r3, r0
 802dc36:	2b00      	cmp	r3, #0
 802dc38:	d113      	bne.n	802dc62 <mg_aton+0x60>
 802dc3a:	687a      	ldr	r2, [r7, #4]
 802dc3c:	f107 0308 	add.w	r3, r7, #8
 802dc40:	e893 0003 	ldmia.w	r3, {r0, r1}
 802dc44:	f7ff fdef 	bl	802d826 <mg_aton4>
 802dc48:	4603      	mov	r3, r0
 802dc4a:	2b00      	cmp	r3, #0
 802dc4c:	d109      	bne.n	802dc62 <mg_aton+0x60>
         mg_aton6(str, addr);
 802dc4e:	687a      	ldr	r2, [r7, #4]
 802dc50:	f107 0308 	add.w	r3, r7, #8
 802dc54:	e893 0003 	ldmia.w	r3, {r0, r1}
 802dc58:	f7ff fec3 	bl	802d9e2 <mg_aton6>
 802dc5c:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 802dc5e:	2b00      	cmp	r3, #0
 802dc60:	d001      	beq.n	802dc66 <mg_aton+0x64>
 802dc62:	2301      	movs	r3, #1
 802dc64:	e000      	b.n	802dc68 <mg_aton+0x66>
 802dc66:	2300      	movs	r3, #0
 802dc68:	f003 0301 	and.w	r3, r3, #1
 802dc6c:	b2db      	uxtb	r3, r3
}
 802dc6e:	4618      	mov	r0, r3
 802dc70:	3710      	adds	r7, #16
 802dc72:	46bd      	mov	sp, r7
 802dc74:	bd80      	pop	{r7, pc}

0802dc76 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 802dc76:	b580      	push	{r7, lr}
 802dc78:	b084      	sub	sp, #16
 802dc7a:	af00      	add	r7, sp, #0
 802dc7c:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 802dc7e:	687b      	ldr	r3, [r7, #4]
 802dc80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802dc82:	33b0      	adds	r3, #176	@ 0xb0
 802dc84:	4619      	mov	r1, r3
 802dc86:	2001      	movs	r0, #1
 802dc88:	f7f7 fa5a 	bl	8025140 <mg_calloc>
 802dc8c:	60f8      	str	r0, [r7, #12]
  if (c != NULL) {
 802dc8e:	68fb      	ldr	r3, [r7, #12]
 802dc90:	2b00      	cmp	r3, #0
 802dc92:	d017      	beq.n	802dcc4 <mg_alloc_conn+0x4e>
    c->mgr = mgr;
 802dc94:	68fb      	ldr	r3, [r7, #12]
 802dc96:	687a      	ldr	r2, [r7, #4]
 802dc98:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 802dc9a:	68fb      	ldr	r3, [r7, #12]
 802dc9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 802dca0:	675a      	str	r2, [r3, #116]	@ 0x74
 802dca2:	68fb      	ldr	r3, [r7, #12]
 802dca4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 802dca6:	68fb      	ldr	r3, [r7, #12]
 802dca8:	645a      	str	r2, [r3, #68]	@ 0x44
 802dcaa:	68fb      	ldr	r3, [r7, #12]
 802dcac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 802dcae:	68fb      	ldr	r3, [r7, #12]
 802dcb0:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 802dcb2:	687b      	ldr	r3, [r7, #4]
 802dcb4:	69db      	ldr	r3, [r3, #28]
 802dcb6:	1c5a      	adds	r2, r3, #1
 802dcb8:	687b      	ldr	r3, [r7, #4]
 802dcba:	61da      	str	r2, [r3, #28]
 802dcbc:	687b      	ldr	r3, [r7, #4]
 802dcbe:	69da      	ldr	r2, [r3, #28]
 802dcc0:	68fb      	ldr	r3, [r7, #12]
 802dcc2:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 802dcc4:	68fb      	ldr	r3, [r7, #12]
}
 802dcc6:	4618      	mov	r0, r3
 802dcc8:	3710      	adds	r7, #16
 802dcca:	46bd      	mov	sp, r7
 802dccc:	bd80      	pop	{r7, pc}
	...

0802dcd0 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 802dcd0:	b580      	push	{r7, lr}
 802dcd2:	b084      	sub	sp, #16
 802dcd4:	af00      	add	r7, sp, #0
 802dcd6:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 802dcd8:	6878      	ldr	r0, [r7, #4]
 802dcda:	f7f7 fa6a 	bl	80251b2 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 802dcde:	687b      	ldr	r3, [r7, #4]
 802dce0:	685b      	ldr	r3, [r3, #4]
 802dce2:	60fb      	str	r3, [r7, #12]
 802dce4:	e002      	b.n	802dcec <mg_close_conn+0x1c>
 802dce6:	68fb      	ldr	r3, [r7, #12]
 802dce8:	681b      	ldr	r3, [r3, #0]
 802dcea:	60fb      	str	r3, [r7, #12]
 802dcec:	68fb      	ldr	r3, [r7, #12]
 802dcee:	681b      	ldr	r3, [r3, #0]
 802dcf0:	687a      	ldr	r2, [r7, #4]
 802dcf2:	429a      	cmp	r2, r3
 802dcf4:	d1f7      	bne.n	802dce6 <mg_close_conn+0x16>
 802dcf6:	687b      	ldr	r3, [r7, #4]
 802dcf8:	681a      	ldr	r2, [r3, #0]
 802dcfa:	68fb      	ldr	r3, [r7, #12]
 802dcfc:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 802dcfe:	687b      	ldr	r3, [r7, #4]
 802dd00:	685b      	ldr	r3, [r3, #4]
 802dd02:	689b      	ldr	r3, [r3, #8]
 802dd04:	687a      	ldr	r2, [r7, #4]
 802dd06:	429a      	cmp	r2, r3
 802dd08:	d103      	bne.n	802dd12 <mg_close_conn+0x42>
 802dd0a:	687b      	ldr	r3, [r7, #4]
 802dd0c:	685b      	ldr	r3, [r3, #4]
 802dd0e:	2200      	movs	r2, #0
 802dd10:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 802dd12:	687b      	ldr	r3, [r7, #4]
 802dd14:	685b      	ldr	r3, [r3, #4]
 802dd16:	691b      	ldr	r3, [r3, #16]
 802dd18:	687a      	ldr	r2, [r7, #4]
 802dd1a:	429a      	cmp	r2, r3
 802dd1c:	d103      	bne.n	802dd26 <mg_close_conn+0x56>
 802dd1e:	687b      	ldr	r3, [r7, #4]
 802dd20:	685b      	ldr	r3, [r3, #4]
 802dd22:	2200      	movs	r2, #0
 802dd24:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 802dd26:	2200      	movs	r2, #0
 802dd28:	2109      	movs	r1, #9
 802dd2a:	6878      	ldr	r0, [r7, #4]
 802dd2c:	f7f7 ffe8 	bl	8025d00 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802dd30:	4b17      	ldr	r3, [pc, #92]	@ (802dd90 <mg_close_conn+0xc0>)
 802dd32:	681b      	ldr	r3, [r3, #0]
 802dd34:	2b02      	cmp	r3, #2
 802dd36:	dd0e      	ble.n	802dd56 <mg_close_conn+0x86>
 802dd38:	4b16      	ldr	r3, [pc, #88]	@ (802dd94 <mg_close_conn+0xc4>)
 802dd3a:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 802dd3e:	4916      	ldr	r1, [pc, #88]	@ (802dd98 <mg_close_conn+0xc8>)
 802dd40:	2003      	movs	r0, #3
 802dd42:	f7fd fbc3 	bl	802b4cc <mg_log_prefix>
 802dd46:	687b      	ldr	r3, [r7, #4]
 802dd48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802dd4a:	687b      	ldr	r3, [r7, #4]
 802dd4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802dd4e:	461a      	mov	r2, r3
 802dd50:	4812      	ldr	r0, [pc, #72]	@ (802dd9c <mg_close_conn+0xcc>)
 802dd52:	f7fd fc0b 	bl	802b56c <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 802dd56:	6878      	ldr	r0, [r7, #4]
 802dd58:	f004 fe14 	bl	8032984 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 802dd5c:	687b      	ldr	r3, [r7, #4]
 802dd5e:	3338      	adds	r3, #56	@ 0x38
 802dd60:	4618      	mov	r0, r3
 802dd62:	f7fc fcec 	bl	802a73e <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 802dd66:	687b      	ldr	r3, [r7, #4]
 802dd68:	3348      	adds	r3, #72	@ 0x48
 802dd6a:	4618      	mov	r0, r3
 802dd6c:	f7fc fce7 	bl	802a73e <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 802dd70:	687b      	ldr	r3, [r7, #4]
 802dd72:	3368      	adds	r3, #104	@ 0x68
 802dd74:	4618      	mov	r0, r3
 802dd76:	f7fc fce2 	bl	802a73e <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 802dd7a:	21b0      	movs	r1, #176	@ 0xb0
 802dd7c:	6878      	ldr	r0, [r7, #4]
 802dd7e:	f004 ffb3 	bl	8032ce8 <mg_bzero>
  free(c);
 802dd82:	6878      	ldr	r0, [r7, #4]
 802dd84:	f7ee fe68 	bl	801ca58 <vPortFree>
}
 802dd88:	bf00      	nop
 802dd8a:	3710      	adds	r7, #16
 802dd8c:	46bd      	mov	sp, r7
 802dd8e:	bd80      	pop	{r7, pc}
 802dd90:	200002a8 	.word	0x200002a8
 802dd94:	08044aac 	.word	0x08044aac
 802dd98:	08041a30 	.word	0x08041a30
 802dd9c:	08042f50 	.word	0x08042f50

0802dda0 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 802dda0:	b580      	push	{r7, lr}
 802dda2:	b086      	sub	sp, #24
 802dda4:	af00      	add	r7, sp, #0
 802dda6:	60f8      	str	r0, [r7, #12]
 802dda8:	60b9      	str	r1, [r7, #8]
 802ddaa:	607a      	str	r2, [r7, #4]
 802ddac:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 802ddae:	2300      	movs	r3, #0
 802ddb0:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 802ddb2:	68bb      	ldr	r3, [r7, #8]
 802ddb4:	2b00      	cmp	r3, #0
 802ddb6:	d003      	beq.n	802ddc0 <mg_connect+0x20>
 802ddb8:	68bb      	ldr	r3, [r7, #8]
 802ddba:	781b      	ldrb	r3, [r3, #0]
 802ddbc:	2b00      	cmp	r3, #0
 802ddbe:	d10e      	bne.n	802ddde <mg_connect+0x3e>
    MG_ERROR(("null url"));
 802ddc0:	4b37      	ldr	r3, [pc, #220]	@ (802dea0 <mg_connect+0x100>)
 802ddc2:	681b      	ldr	r3, [r3, #0]
 802ddc4:	2b00      	cmp	r3, #0
 802ddc6:	dd66      	ble.n	802de96 <mg_connect+0xf6>
 802ddc8:	4b36      	ldr	r3, [pc, #216]	@ (802dea4 <mg_connect+0x104>)
 802ddca:	f241 22be 	movw	r2, #4798	@ 0x12be
 802ddce:	4936      	ldr	r1, [pc, #216]	@ (802dea8 <mg_connect+0x108>)
 802ddd0:	2001      	movs	r0, #1
 802ddd2:	f7fd fb7b 	bl	802b4cc <mg_log_prefix>
 802ddd6:	4835      	ldr	r0, [pc, #212]	@ (802deac <mg_connect+0x10c>)
 802ddd8:	f7fd fbc8 	bl	802b56c <mg_log>
 802dddc:	e05b      	b.n	802de96 <mg_connect+0xf6>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 802ddde:	68f8      	ldr	r0, [r7, #12]
 802dde0:	f7ff ff49 	bl	802dc76 <mg_alloc_conn>
 802dde4:	6178      	str	r0, [r7, #20]
 802dde6:	697b      	ldr	r3, [r7, #20]
 802dde8:	2b00      	cmp	r3, #0
 802ddea:	d10e      	bne.n	802de0a <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 802ddec:	4b2c      	ldr	r3, [pc, #176]	@ (802dea0 <mg_connect+0x100>)
 802ddee:	681b      	ldr	r3, [r3, #0]
 802ddf0:	2b00      	cmp	r3, #0
 802ddf2:	dd50      	ble.n	802de96 <mg_connect+0xf6>
 802ddf4:	4b2b      	ldr	r3, [pc, #172]	@ (802dea4 <mg_connect+0x104>)
 802ddf6:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 802ddfa:	492b      	ldr	r1, [pc, #172]	@ (802dea8 <mg_connect+0x108>)
 802ddfc:	2001      	movs	r0, #1
 802ddfe:	f7fd fb65 	bl	802b4cc <mg_log_prefix>
 802de02:	482b      	ldr	r0, [pc, #172]	@ (802deb0 <mg_connect+0x110>)
 802de04:	f7fd fbb2 	bl	802b56c <mg_log>
 802de08:	e045      	b.n	802de96 <mg_connect+0xf6>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 802de0a:	68fb      	ldr	r3, [r7, #12]
 802de0c:	681a      	ldr	r2, [r3, #0]
 802de0e:	697b      	ldr	r3, [r7, #20]
 802de10:	601a      	str	r2, [r3, #0]
 802de12:	68fb      	ldr	r3, [r7, #12]
 802de14:	697a      	ldr	r2, [r7, #20]
 802de16:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 802de18:	2204      	movs	r2, #4
 802de1a:	4926      	ldr	r1, [pc, #152]	@ (802deb4 <mg_connect+0x114>)
 802de1c:	68b8      	ldr	r0, [r7, #8]
 802de1e:	f008 f994 	bl	803614a <strncmp>
 802de22:	4603      	mov	r3, r0
 802de24:	2b00      	cmp	r3, #0
 802de26:	bf0c      	ite	eq
 802de28:	2301      	moveq	r3, #1
 802de2a:	2300      	movne	r3, #0
 802de2c:	b2d9      	uxtb	r1, r3
 802de2e:	697a      	ldr	r2, [r7, #20]
 802de30:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802de34:	f361 0300 	bfi	r3, r1, #0, #1
 802de38:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 802de3c:	697b      	ldr	r3, [r7, #20]
 802de3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802de42:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 802de44:	697b      	ldr	r3, [r7, #20]
 802de46:	687a      	ldr	r2, [r7, #4]
 802de48:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 802de4a:	697a      	ldr	r2, [r7, #20]
 802de4c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802de50:	f043 0302 	orr.w	r3, r3, #2
 802de54:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 802de58:	697b      	ldr	r3, [r7, #20]
 802de5a:	683a      	ldr	r2, [r7, #0]
 802de5c:	67da      	str	r2, [r3, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 802de5e:	4b10      	ldr	r3, [pc, #64]	@ (802dea0 <mg_connect+0x100>)
 802de60:	681b      	ldr	r3, [r3, #0]
 802de62:	2b02      	cmp	r3, #2
 802de64:	dd0e      	ble.n	802de84 <mg_connect+0xe4>
 802de66:	4b0f      	ldr	r3, [pc, #60]	@ (802dea4 <mg_connect+0x104>)
 802de68:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 802de6c:	490e      	ldr	r1, [pc, #56]	@ (802dea8 <mg_connect+0x108>)
 802de6e:	2003      	movs	r0, #3
 802de70:	f7fd fb2c 	bl	802b4cc <mg_log_prefix>
 802de74:	697b      	ldr	r3, [r7, #20]
 802de76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802de78:	697b      	ldr	r3, [r7, #20]
 802de7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802de7c:	68bb      	ldr	r3, [r7, #8]
 802de7e:	480e      	ldr	r0, [pc, #56]	@ (802deb8 <mg_connect+0x118>)
 802de80:	f7fd fb74 	bl	802b56c <mg_log>
    mg_call(c, MG_EV_OPEN, (void *) url);
 802de84:	68ba      	ldr	r2, [r7, #8]
 802de86:	2101      	movs	r1, #1
 802de88:	6978      	ldr	r0, [r7, #20]
 802de8a:	f7f7 ff39 	bl	8025d00 <mg_call>
    mg_resolve(c, url);
 802de8e:	68b9      	ldr	r1, [r7, #8]
 802de90:	6978      	ldr	r0, [r7, #20]
 802de92:	f7f7 fef1 	bl	8025c78 <mg_resolve>
  }
  return c;
 802de96:	697b      	ldr	r3, [r7, #20]
}
 802de98:	4618      	mov	r0, r3
 802de9a:	3718      	adds	r7, #24
 802de9c:	46bd      	mov	sp, r7
 802de9e:	bd80      	pop	{r7, pc}
 802dea0:	200002a8 	.word	0x200002a8
 802dea4:	08044abc 	.word	0x08044abc
 802dea8:	08041a30 	.word	0x08041a30
 802deac:	08042f60 	.word	0x08042f60
 802deb0:	08042f6c 	.word	0x08042f6c
 802deb4:	08042f70 	.word	0x08042f70
 802deb8:	08041b8c 	.word	0x08041b8c

0802debc <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 802debc:	b580      	push	{r7, lr}
 802debe:	b086      	sub	sp, #24
 802dec0:	af00      	add	r7, sp, #0
 802dec2:	60f8      	str	r0, [r7, #12]
 802dec4:	60b9      	str	r1, [r7, #8]
 802dec6:	607a      	str	r2, [r7, #4]
 802dec8:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 802deca:	2300      	movs	r3, #0
 802decc:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 802dece:	68f8      	ldr	r0, [r7, #12]
 802ded0:	f7ff fed1 	bl	802dc76 <mg_alloc_conn>
 802ded4:	6178      	str	r0, [r7, #20]
 802ded6:	697b      	ldr	r3, [r7, #20]
 802ded8:	2b00      	cmp	r3, #0
 802deda:	d10f      	bne.n	802defc <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 802dedc:	4b41      	ldr	r3, [pc, #260]	@ (802dfe4 <mg_listen+0x128>)
 802dede:	681b      	ldr	r3, [r3, #0]
 802dee0:	2b00      	cmp	r3, #0
 802dee2:	dd7a      	ble.n	802dfda <mg_listen+0x11e>
 802dee4:	4b40      	ldr	r3, [pc, #256]	@ (802dfe8 <mg_listen+0x12c>)
 802dee6:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 802deea:	4940      	ldr	r1, [pc, #256]	@ (802dfec <mg_listen+0x130>)
 802deec:	2001      	movs	r0, #1
 802deee:	f7fd faed 	bl	802b4cc <mg_log_prefix>
 802def2:	68b9      	ldr	r1, [r7, #8]
 802def4:	483e      	ldr	r0, [pc, #248]	@ (802dff0 <mg_listen+0x134>)
 802def6:	f7fd fb39 	bl	802b56c <mg_log>
 802defa:	e06e      	b.n	802dfda <mg_listen+0x11e>
  } else if (!mg_open_listener(c, url)) {
 802defc:	68b9      	ldr	r1, [r7, #8]
 802defe:	6978      	ldr	r0, [r7, #20]
 802df00:	f003 f852 	bl	8030fa8 <mg_open_listener>
 802df04:	4603      	mov	r3, r0
 802df06:	f083 0301 	eor.w	r3, r3, #1
 802df0a:	b2db      	uxtb	r3, r3
 802df0c:	2b00      	cmp	r3, #0
 802df0e:	d019      	beq.n	802df44 <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 802df10:	4b34      	ldr	r3, [pc, #208]	@ (802dfe4 <mg_listen+0x128>)
 802df12:	681b      	ldr	r3, [r3, #0]
 802df14:	2b00      	cmp	r3, #0
 802df16:	dd0f      	ble.n	802df38 <mg_listen+0x7c>
 802df18:	4b33      	ldr	r3, [pc, #204]	@ (802dfe8 <mg_listen+0x12c>)
 802df1a:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 802df1e:	4933      	ldr	r1, [pc, #204]	@ (802dfec <mg_listen+0x130>)
 802df20:	2001      	movs	r0, #1
 802df22:	f7fd fad3 	bl	802b4cc <mg_log_prefix>
 802df26:	f009 fadf 	bl	80374e8 <__errno>
 802df2a:	4603      	mov	r3, r0
 802df2c:	681b      	ldr	r3, [r3, #0]
 802df2e:	461a      	mov	r2, r3
 802df30:	68b9      	ldr	r1, [r7, #8]
 802df32:	4830      	ldr	r0, [pc, #192]	@ (802dff4 <mg_listen+0x138>)
 802df34:	f7fd fb1a 	bl	802b56c <mg_log>
    MG_PROF_FREE(c);
    free(c);
 802df38:	6978      	ldr	r0, [r7, #20]
 802df3a:	f7ee fd8d 	bl	801ca58 <vPortFree>
    c = NULL;
 802df3e:	2300      	movs	r3, #0
 802df40:	617b      	str	r3, [r7, #20]
 802df42:	e04a      	b.n	802dfda <mg_listen+0x11e>
  } else {
    c->is_listening = 1;
 802df44:	697a      	ldr	r2, [r7, #20]
 802df46:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802df4a:	f043 0301 	orr.w	r3, r3, #1
 802df4e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 802df52:	2204      	movs	r2, #4
 802df54:	4928      	ldr	r1, [pc, #160]	@ (802dff8 <mg_listen+0x13c>)
 802df56:	68b8      	ldr	r0, [r7, #8]
 802df58:	f008 f8f7 	bl	803614a <strncmp>
 802df5c:	4603      	mov	r3, r0
 802df5e:	2b00      	cmp	r3, #0
 802df60:	bf0c      	ite	eq
 802df62:	2301      	moveq	r3, #1
 802df64:	2300      	movne	r3, #0
 802df66:	b2d9      	uxtb	r1, r3
 802df68:	697a      	ldr	r2, [r7, #20]
 802df6a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802df6e:	f361 0300 	bfi	r3, r1, #0, #1
 802df72:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 802df76:	68fb      	ldr	r3, [r7, #12]
 802df78:	681a      	ldr	r2, [r3, #0]
 802df7a:	697b      	ldr	r3, [r7, #20]
 802df7c:	601a      	str	r2, [r3, #0]
 802df7e:	68fb      	ldr	r3, [r7, #12]
 802df80:	697a      	ldr	r2, [r7, #20]
 802df82:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 802df84:	697b      	ldr	r3, [r7, #20]
 802df86:	687a      	ldr	r2, [r7, #4]
 802df88:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 802df8a:	697b      	ldr	r3, [r7, #20]
 802df8c:	683a      	ldr	r2, [r7, #0]
 802df8e:	67da      	str	r2, [r3, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 802df90:	2200      	movs	r2, #0
 802df92:	2101      	movs	r1, #1
 802df94:	6978      	ldr	r0, [r7, #20]
 802df96:	f7f7 feb3 	bl	8025d00 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 802df9a:	68b8      	ldr	r0, [r7, #8]
 802df9c:	f004 fd44 	bl	8032a28 <mg_url_is_ssl>
 802dfa0:	4603      	mov	r3, r0
 802dfa2:	2b00      	cmp	r3, #0
 802dfa4:	d006      	beq.n	802dfb4 <mg_listen+0xf8>
 802dfa6:	697a      	ldr	r2, [r7, #20]
 802dfa8:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802dfac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802dfb0:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 802dfb4:	4b0b      	ldr	r3, [pc, #44]	@ (802dfe4 <mg_listen+0x128>)
 802dfb6:	681b      	ldr	r3, [r3, #0]
 802dfb8:	2b02      	cmp	r3, #2
 802dfba:	dd0e      	ble.n	802dfda <mg_listen+0x11e>
 802dfbc:	4b0a      	ldr	r3, [pc, #40]	@ (802dfe8 <mg_listen+0x12c>)
 802dfbe:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 802dfc2:	490a      	ldr	r1, [pc, #40]	@ (802dfec <mg_listen+0x130>)
 802dfc4:	2003      	movs	r0, #3
 802dfc6:	f7fd fa81 	bl	802b4cc <mg_log_prefix>
 802dfca:	697b      	ldr	r3, [r7, #20]
 802dfcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802dfce:	697b      	ldr	r3, [r7, #20]
 802dfd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802dfd2:	68bb      	ldr	r3, [r7, #8]
 802dfd4:	4809      	ldr	r0, [pc, #36]	@ (802dffc <mg_listen+0x140>)
 802dfd6:	f7fd fac9 	bl	802b56c <mg_log>
  }
  return c;
 802dfda:	697b      	ldr	r3, [r7, #20]
}
 802dfdc:	4618      	mov	r0, r3
 802dfde:	3718      	adds	r7, #24
 802dfe0:	46bd      	mov	sp, r7
 802dfe2:	bd80      	pop	{r7, pc}
 802dfe4:	200002a8 	.word	0x200002a8
 802dfe8:	08044ac8 	.word	0x08044ac8
 802dfec:	08041a30 	.word	0x08041a30
 802dff0:	08042f78 	.word	0x08042f78
 802dff4:	08042f80 	.word	0x08042f80
 802dff8:	08042f70 	.word	0x08042f70
 802dffc:	08041b8c 	.word	0x08041b8c

0802e000 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 802e000:	b580      	push	{r7, lr}
 802e002:	b08a      	sub	sp, #40	@ 0x28
 802e004:	af04      	add	r7, sp, #16
 802e006:	60f8      	str	r0, [r7, #12]
 802e008:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 802e00c:	2128      	movs	r1, #40	@ 0x28
 802e00e:	2001      	movs	r0, #1
 802e010:	f7f7 f896 	bl	8025140 <mg_calloc>
 802e014:	6178      	str	r0, [r7, #20]
  if (t != NULL) {
 802e016:	697b      	ldr	r3, [r7, #20]
 802e018:	2b00      	cmp	r3, #0
 802e01a:	d014      	beq.n	802e046 <mg_timer_add+0x46>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 802e01c:	68fb      	ldr	r3, [r7, #12]
 802e01e:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 802e022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802e024:	9302      	str	r3, [sp, #8]
 802e026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802e028:	9301      	str	r3, [sp, #4]
 802e02a:	6a3b      	ldr	r3, [r7, #32]
 802e02c:	9300      	str	r3, [sp, #0]
 802e02e:	e9d7 2300 	ldrd	r2, r3, [r7]
 802e032:	6979      	ldr	r1, [r7, #20]
 802e034:	f004 fba5 	bl	8032782 <mg_timer_init>
    t->id = mgr->timerid++;
 802e038:	68fb      	ldr	r3, [r7, #12]
 802e03a:	6a1b      	ldr	r3, [r3, #32]
 802e03c:	1c59      	adds	r1, r3, #1
 802e03e:	68fa      	ldr	r2, [r7, #12]
 802e040:	6211      	str	r1, [r2, #32]
 802e042:	697a      	ldr	r2, [r7, #20]
 802e044:	6013      	str	r3, [r2, #0]
  }
  return t;
 802e046:	697b      	ldr	r3, [r7, #20]
}
 802e048:	4618      	mov	r0, r3
 802e04a:	3718      	adds	r7, #24
 802e04c:	46bd      	mov	sp, r7
 802e04e:	bd80      	pop	{r7, pc}

0802e050 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 802e050:	b580      	push	{r7, lr}
 802e052:	b082      	sub	sp, #8
 802e054:	af00      	add	r7, sp, #0
 802e056:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 802e058:	2248      	movs	r2, #72	@ 0x48
 802e05a:	2100      	movs	r1, #0
 802e05c:	6878      	ldr	r0, [r7, #4]
 802e05e:	f008 f83f 	bl	80360e0 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 802e062:	687b      	ldr	r3, [r7, #4]
 802e064:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802e068:	639a      	str	r2, [r3, #56]	@ 0x38
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 802e06a:	687b      	ldr	r3, [r7, #4]
 802e06c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802e070:	645a      	str	r2, [r3, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 802e072:	687b      	ldr	r3, [r7, #4]
 802e074:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 802e078:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 802e07a:	687b      	ldr	r3, [r7, #4]
 802e07c:	4a05      	ldr	r2, [pc, #20]	@ (802e094 <mg_mgr_init+0x44>)
 802e07e:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 802e080:	687b      	ldr	r3, [r7, #4]
 802e082:	4a05      	ldr	r2, [pc, #20]	@ (802e098 <mg_mgr_init+0x48>)
 802e084:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 802e086:	6878      	ldr	r0, [r7, #4]
 802e088:	f004 fcc3 	bl	8032a12 <mg_tls_ctx_init>
}
 802e08c:	bf00      	nop
 802e08e:	3708      	adds	r7, #8
 802e090:	46bd      	mov	sp, r7
 802e092:	bd80      	pop	{r7, pc}
 802e094:	08042fb0 	.word	0x08042fb0
 802e098:	08042fc4 	.word	0x08042fc4

0802e09c <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 802e09c:	b580      	push	{r7, lr}
 802e09e:	b084      	sub	sp, #16
 802e0a0:	af00      	add	r7, sp, #0
 802e0a2:	60f8      	str	r0, [r7, #12]
 802e0a4:	60b9      	str	r1, [r7, #8]
 802e0a6:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 802e0a8:	68fb      	ldr	r3, [r7, #12]
 802e0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802e0ac:	2b00      	cmp	r3, #0
 802e0ae:	d005      	beq.n	802e0bc <mg_tcpip_call+0x20>
 802e0b0:	68fb      	ldr	r3, [r7, #12]
 802e0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802e0b4:	687a      	ldr	r2, [r7, #4]
 802e0b6:	68b9      	ldr	r1, [r7, #8]
 802e0b8:	68f8      	ldr	r0, [r7, #12]
 802e0ba:	4798      	blx	r3
}
 802e0bc:	bf00      	nop
 802e0be:	3710      	adds	r7, #16
 802e0c0:	46bd      	mov	sp, r7
 802e0c2:	bd80      	pop	{r7, pc}

0802e0c4 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 802e0c4:	b590      	push	{r4, r7, lr}
 802e0c6:	b085      	sub	sp, #20
 802e0c8:	af00      	add	r7, sp, #0
 802e0ca:	60f8      	str	r0, [r7, #12]
 802e0cc:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 802e0ce:	68fb      	ldr	r3, [r7, #12]
 802e0d0:	681a      	ldr	r2, [r3, #0]
 802e0d2:	68fb      	ldr	r3, [r7, #12]
 802e0d4:	685b      	ldr	r3, [r3, #4]
 802e0d6:	441a      	add	r2, r3
 802e0d8:	68bb      	ldr	r3, [r7, #8]
 802e0da:	1ad3      	subs	r3, r2, r3
 802e0dc:	461a      	mov	r2, r3
 802e0de:	68fc      	ldr	r4, [r7, #12]
 802e0e0:	463b      	mov	r3, r7
 802e0e2:	68b9      	ldr	r1, [r7, #8]
 802e0e4:	4618      	mov	r0, r3
 802e0e6:	f003 ff12 	bl	8031f0e <mg_str_n>
 802e0ea:	f104 0308 	add.w	r3, r4, #8
 802e0ee:	463a      	mov	r2, r7
 802e0f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 802e0f4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 802e0f8:	bf00      	nop
 802e0fa:	3714      	adds	r7, #20
 802e0fc:	46bd      	mov	sp, r7
 802e0fe:	bd90      	pop	{r4, r7, pc}

0802e100 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 802e100:	b480      	push	{r7}
 802e102:	b087      	sub	sp, #28
 802e104:	af00      	add	r7, sp, #0
 802e106:	60f8      	str	r0, [r7, #12]
 802e108:	60b9      	str	r1, [r7, #8]
 802e10a:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 802e10c:	68bb      	ldr	r3, [r7, #8]
 802e10e:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 802e110:	2300      	movs	r3, #0
 802e112:	617b      	str	r3, [r7, #20]
 802e114:	e014      	b.n	802e140 <csumup+0x40>
 802e116:	697b      	ldr	r3, [r7, #20]
 802e118:	f003 0301 	and.w	r3, r3, #1
 802e11c:	2b00      	cmp	r3, #0
 802e11e:	d004      	beq.n	802e12a <csumup+0x2a>
 802e120:	693a      	ldr	r2, [r7, #16]
 802e122:	697b      	ldr	r3, [r7, #20]
 802e124:	4413      	add	r3, r2
 802e126:	781b      	ldrb	r3, [r3, #0]
 802e128:	e004      	b.n	802e134 <csumup+0x34>
 802e12a:	693a      	ldr	r2, [r7, #16]
 802e12c:	697b      	ldr	r3, [r7, #20]
 802e12e:	4413      	add	r3, r2
 802e130:	781b      	ldrb	r3, [r3, #0]
 802e132:	021b      	lsls	r3, r3, #8
 802e134:	68fa      	ldr	r2, [r7, #12]
 802e136:	4413      	add	r3, r2
 802e138:	60fb      	str	r3, [r7, #12]
 802e13a:	697b      	ldr	r3, [r7, #20]
 802e13c:	3301      	adds	r3, #1
 802e13e:	617b      	str	r3, [r7, #20]
 802e140:	697a      	ldr	r2, [r7, #20]
 802e142:	687b      	ldr	r3, [r7, #4]
 802e144:	429a      	cmp	r2, r3
 802e146:	d3e6      	bcc.n	802e116 <csumup+0x16>
  return sum;
 802e148:	68fb      	ldr	r3, [r7, #12]
}
 802e14a:	4618      	mov	r0, r3
 802e14c:	371c      	adds	r7, #28
 802e14e:	46bd      	mov	sp, r7
 802e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e154:	4770      	bx	lr

0802e156 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 802e156:	b580      	push	{r7, lr}
 802e158:	b082      	sub	sp, #8
 802e15a:	af00      	add	r7, sp, #0
 802e15c:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 802e15e:	e005      	b.n	802e16c <csumfin+0x16>
 802e160:	687b      	ldr	r3, [r7, #4]
 802e162:	b29a      	uxth	r2, r3
 802e164:	687b      	ldr	r3, [r7, #4]
 802e166:	0c1b      	lsrs	r3, r3, #16
 802e168:	4413      	add	r3, r2
 802e16a:	607b      	str	r3, [r7, #4]
 802e16c:	687b      	ldr	r3, [r7, #4]
 802e16e:	0c1b      	lsrs	r3, r3, #16
 802e170:	2b00      	cmp	r3, #0
 802e172:	d1f5      	bne.n	802e160 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 802e174:	687b      	ldr	r3, [r7, #4]
 802e176:	b29b      	uxth	r3, r3
 802e178:	43db      	mvns	r3, r3
 802e17a:	b29b      	uxth	r3, r3
 802e17c:	4618      	mov	r0, r3
 802e17e:	f004 fe4c 	bl	8032e1a <mg_ntohs>
 802e182:	4603      	mov	r3, r0
}
 802e184:	4618      	mov	r0, r3
 802e186:	3708      	adds	r7, #8
 802e188:	46bd      	mov	sp, r7
 802e18a:	bd80      	pop	{r7, pc}

0802e18c <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 802e18c:	b580      	push	{r7, lr}
 802e18e:	b084      	sub	sp, #16
 802e190:	af00      	add	r7, sp, #0
 802e192:	6078      	str	r0, [r7, #4]
 802e194:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 802e196:	683a      	ldr	r2, [r7, #0]
 802e198:	6879      	ldr	r1, [r7, #4]
 802e19a:	2000      	movs	r0, #0
 802e19c:	f7ff ffb0 	bl	802e100 <csumup>
 802e1a0:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 802e1a2:	68f8      	ldr	r0, [r7, #12]
 802e1a4:	f7ff ffd7 	bl	802e156 <csumfin>
 802e1a8:	4603      	mov	r3, r0
}
 802e1aa:	4618      	mov	r0, r3
 802e1ac:	3710      	adds	r7, #16
 802e1ae:	46bd      	mov	sp, r7
 802e1b0:	bd80      	pop	{r7, pc}
	...

0802e1b4 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 802e1b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 802e1b8:	b088      	sub	sp, #32
 802e1ba:	af02      	add	r7, sp, #8
 802e1bc:	6078      	str	r0, [r7, #4]
 802e1be:	460b      	mov	r3, r1
 802e1c0:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802e1c2:	687b      	ldr	r3, [r7, #4]
 802e1c4:	685b      	ldr	r3, [r3, #4]
 802e1c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802e1c8:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 802e1ca:	687b      	ldr	r3, [r7, #4]
 802e1cc:	33b0      	adds	r3, #176	@ 0xb0
 802e1ce:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 802e1d0:	78fb      	ldrb	r3, [r7, #3]
 802e1d2:	2b01      	cmp	r3, #1
 802e1d4:	d013      	beq.n	802e1fe <settmout+0x4a>
 802e1d6:	78fb      	ldrb	r3, [r7, #3]
 802e1d8:	2b02      	cmp	r3, #2
 802e1da:	d00e      	beq.n	802e1fa <settmout+0x46>
 802e1dc:	78fb      	ldrb	r3, [r7, #3]
 802e1de:	2b03      	cmp	r3, #3
 802e1e0:	d008      	beq.n	802e1f4 <settmout+0x40>
 802e1e2:	78fb      	ldrb	r3, [r7, #3]
 802e1e4:	2b04      	cmp	r3, #4
 802e1e6:	d102      	bne.n	802e1ee <settmout+0x3a>
 802e1e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802e1ec:	e008      	b.n	802e200 <settmout+0x4c>
 802e1ee:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 802e1f2:	e005      	b.n	802e200 <settmout+0x4c>
 802e1f4:	f643 2398 	movw	r3, #15000	@ 0x3a98
 802e1f8:	e002      	b.n	802e200 <settmout+0x4c>
 802e1fa:	2364      	movs	r3, #100	@ 0x64
 802e1fc:	e000      	b.n	802e200 <settmout+0x4c>
 802e1fe:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 802e200:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 802e202:	697b      	ldr	r3, [r7, #20]
 802e204:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 802e208:	68f9      	ldr	r1, [r7, #12]
 802e20a:	2000      	movs	r0, #0
 802e20c:	460c      	mov	r4, r1
 802e20e:	4605      	mov	r5, r0
 802e210:	eb12 0804 	adds.w	r8, r2, r4
 802e214:	eb43 0905 	adc.w	r9, r3, r5
 802e218:	693b      	ldr	r3, [r7, #16]
 802e21a:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 802e21e:	693b      	ldr	r3, [r7, #16]
 802e220:	78fa      	ldrb	r2, [r7, #3]
 802e222:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 802e224:	4b0d      	ldr	r3, [pc, #52]	@ (802e25c <settmout+0xa8>)
 802e226:	681b      	ldr	r3, [r3, #0]
 802e228:	2b03      	cmp	r3, #3
 802e22a:	dd12      	ble.n	802e252 <settmout+0x9e>
 802e22c:	4b0c      	ldr	r3, [pc, #48]	@ (802e260 <settmout+0xac>)
 802e22e:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 802e232:	490c      	ldr	r1, [pc, #48]	@ (802e264 <settmout+0xb0>)
 802e234:	2004      	movs	r0, #4
 802e236:	f7fd f949 	bl	802b4cc <mg_log_prefix>
 802e23a:	687b      	ldr	r3, [r7, #4]
 802e23c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802e23e:	78f8      	ldrb	r0, [r7, #3]
 802e240:	693b      	ldr	r3, [r7, #16]
 802e242:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802e246:	e9cd 2300 	strd	r2, r3, [sp]
 802e24a:	4602      	mov	r2, r0
 802e24c:	4806      	ldr	r0, [pc, #24]	@ (802e268 <settmout+0xb4>)
 802e24e:	f7fd f98d 	bl	802b56c <mg_log>
}
 802e252:	bf00      	nop
 802e254:	3718      	adds	r7, #24
 802e256:	46bd      	mov	sp, r7
 802e258:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 802e25c:	200002a8 	.word	0x200002a8
 802e260:	08044ad4 	.word	0x08044ad4
 802e264:	08041a30 	.word	0x08041a30
 802e268:	08042fe4 	.word	0x08042fe4

0802e26c <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 802e26c:	b580      	push	{r7, lr}
 802e26e:	b084      	sub	sp, #16
 802e270:	af00      	add	r7, sp, #0
 802e272:	6078      	str	r0, [r7, #4]
 802e274:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 802e276:	687b      	ldr	r3, [r7, #4]
 802e278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802e27a:	685b      	ldr	r3, [r3, #4]
 802e27c:	687a      	ldr	r2, [r7, #4]
 802e27e:	6950      	ldr	r0, [r2, #20]
 802e280:	687a      	ldr	r2, [r7, #4]
 802e282:	6839      	ldr	r1, [r7, #0]
 802e284:	4798      	blx	r3
 802e286:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 802e288:	68fa      	ldr	r2, [r7, #12]
 802e28a:	683b      	ldr	r3, [r7, #0]
 802e28c:	429a      	cmp	r2, r3
 802e28e:	d104      	bne.n	802e29a <ether_output+0x2e>
 802e290:	687b      	ldr	r3, [r7, #4]
 802e292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802e294:	1c5a      	adds	r2, r3, #1
 802e296:	687b      	ldr	r3, [r7, #4]
 802e298:	675a      	str	r2, [r3, #116]	@ 0x74
  return n;
 802e29a:	68fb      	ldr	r3, [r7, #12]
}
 802e29c:	4618      	mov	r0, r3
 802e29e:	3710      	adds	r7, #16
 802e2a0:	46bd      	mov	sp, r7
 802e2a2:	bd80      	pop	{r7, pc}

0802e2a4 <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 802e2a4:	b580      	push	{r7, lr}
 802e2a6:	b084      	sub	sp, #16
 802e2a8:	af00      	add	r7, sp, #0
 802e2aa:	6078      	str	r0, [r7, #4]
 802e2ac:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 802e2ae:	687b      	ldr	r3, [r7, #4]
 802e2b0:	695b      	ldr	r3, [r3, #20]
 802e2b2:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 802e2b4:	68fb      	ldr	r3, [r7, #12]
 802e2b6:	330e      	adds	r3, #14
 802e2b8:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 802e2ba:	68fb      	ldr	r3, [r7, #12]
 802e2bc:	2206      	movs	r2, #6
 802e2be:	21ff      	movs	r1, #255	@ 0xff
 802e2c0:	4618      	mov	r0, r3
 802e2c2:	f007 ff0d 	bl	80360e0 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 802e2c6:	68fb      	ldr	r3, [r7, #12]
 802e2c8:	3306      	adds	r3, #6
 802e2ca:	6879      	ldr	r1, [r7, #4]
 802e2cc:	2206      	movs	r2, #6
 802e2ce:	4618      	mov	r0, r3
 802e2d0:	f009 f942 	bl	8037558 <memcpy>
  eth->type = mg_htons(0x806);
 802e2d4:	f640 0006 	movw	r0, #2054	@ 0x806
 802e2d8:	f004 fd9f 	bl	8032e1a <mg_ntohs>
 802e2dc:	4603      	mov	r3, r0
 802e2de:	461a      	mov	r2, r3
 802e2e0:	68fb      	ldr	r3, [r7, #12]
 802e2e2:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 802e2e4:	221c      	movs	r2, #28
 802e2e6:	2100      	movs	r1, #0
 802e2e8:	68b8      	ldr	r0, [r7, #8]
 802e2ea:	f007 fef9 	bl	80360e0 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 802e2ee:	2001      	movs	r0, #1
 802e2f0:	f004 fd93 	bl	8032e1a <mg_ntohs>
 802e2f4:	4603      	mov	r3, r0
 802e2f6:	461a      	mov	r2, r3
 802e2f8:	68bb      	ldr	r3, [r7, #8]
 802e2fa:	801a      	strh	r2, [r3, #0]
 802e2fc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802e300:	f004 fd8b 	bl	8032e1a <mg_ntohs>
 802e304:	4603      	mov	r3, r0
 802e306:	461a      	mov	r2, r3
 802e308:	68bb      	ldr	r3, [r7, #8]
 802e30a:	805a      	strh	r2, [r3, #2]
 802e30c:	68bb      	ldr	r3, [r7, #8]
 802e30e:	2206      	movs	r2, #6
 802e310:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 802e312:	68bb      	ldr	r3, [r7, #8]
 802e314:	2204      	movs	r2, #4
 802e316:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 802e318:	2001      	movs	r0, #1
 802e31a:	f004 fd7e 	bl	8032e1a <mg_ntohs>
 802e31e:	4603      	mov	r3, r0
 802e320:	461a      	mov	r2, r3
 802e322:	68bb      	ldr	r3, [r7, #8]
 802e324:	80da      	strh	r2, [r3, #6]
 802e326:	68bb      	ldr	r3, [r7, #8]
 802e328:	683a      	ldr	r2, [r7, #0]
 802e32a:	619a      	str	r2, [r3, #24]
 802e32c:	687b      	ldr	r3, [r7, #4]
 802e32e:	689a      	ldr	r2, [r3, #8]
 802e330:	68bb      	ldr	r3, [r7, #8]
 802e332:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 802e336:	68bb      	ldr	r3, [r7, #8]
 802e338:	3308      	adds	r3, #8
 802e33a:	6879      	ldr	r1, [r7, #4]
 802e33c:	2206      	movs	r2, #6
 802e33e:	4618      	mov	r0, r3
 802e340:	f009 f90a 	bl	8037558 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 802e344:	68bb      	ldr	r3, [r7, #8]
 802e346:	f103 021c 	add.w	r2, r3, #28
 802e34a:	68fb      	ldr	r3, [r7, #12]
 802e34c:	1ad3      	subs	r3, r2, r3
 802e34e:	4619      	mov	r1, r3
 802e350:	6878      	ldr	r0, [r7, #4]
 802e352:	f7ff ff8b 	bl	802e26c <ether_output>
}
 802e356:	bf00      	nop
 802e358:	3710      	adds	r7, #16
 802e35a:	46bd      	mov	sp, r7
 802e35c:	bd80      	pop	{r7, pc}
	...

0802e360 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 802e360:	b580      	push	{r7, lr}
 802e362:	b082      	sub	sp, #8
 802e364:	af00      	add	r7, sp, #0
 802e366:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 802e368:	687b      	ldr	r3, [r7, #4]
 802e36a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802e36e:	2b03      	cmp	r3, #3
 802e370:	d13b      	bne.n	802e3ea <onstatechange+0x8a>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 802e372:	4b3b      	ldr	r3, [pc, #236]	@ (802e460 <onstatechange+0x100>)
 802e374:	681b      	ldr	r3, [r3, #0]
 802e376:	2b01      	cmp	r3, #1
 802e378:	dd0d      	ble.n	802e396 <onstatechange+0x36>
 802e37a:	4b3a      	ldr	r3, [pc, #232]	@ (802e464 <onstatechange+0x104>)
 802e37c:	f241 4201 	movw	r2, #5121	@ 0x1401
 802e380:	4939      	ldr	r1, [pc, #228]	@ (802e468 <onstatechange+0x108>)
 802e382:	2002      	movs	r0, #2
 802e384:	f7fd f8a2 	bl	802b4cc <mg_log_prefix>
 802e388:	687b      	ldr	r3, [r7, #4]
 802e38a:	3308      	adds	r3, #8
 802e38c:	461a      	mov	r2, r3
 802e38e:	4937      	ldr	r1, [pc, #220]	@ (802e46c <onstatechange+0x10c>)
 802e390:	4837      	ldr	r0, [pc, #220]	@ (802e470 <onstatechange+0x110>)
 802e392:	f7fd f8eb 	bl	802b56c <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 802e396:	4b32      	ldr	r3, [pc, #200]	@ (802e460 <onstatechange+0x100>)
 802e398:	681b      	ldr	r3, [r3, #0]
 802e39a:	2b01      	cmp	r3, #1
 802e39c:	dd0d      	ble.n	802e3ba <onstatechange+0x5a>
 802e39e:	4b31      	ldr	r3, [pc, #196]	@ (802e464 <onstatechange+0x104>)
 802e3a0:	f241 4202 	movw	r2, #5122	@ 0x1402
 802e3a4:	4930      	ldr	r1, [pc, #192]	@ (802e468 <onstatechange+0x108>)
 802e3a6:	2002      	movs	r0, #2
 802e3a8:	f7fd f890 	bl	802b4cc <mg_log_prefix>
 802e3ac:	687b      	ldr	r3, [r7, #4]
 802e3ae:	3310      	adds	r3, #16
 802e3b0:	461a      	mov	r2, r3
 802e3b2:	492e      	ldr	r1, [pc, #184]	@ (802e46c <onstatechange+0x10c>)
 802e3b4:	482f      	ldr	r0, [pc, #188]	@ (802e474 <onstatechange+0x114>)
 802e3b6:	f7fd f8d9 	bl	802b56c <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 802e3ba:	4b29      	ldr	r3, [pc, #164]	@ (802e460 <onstatechange+0x100>)
 802e3bc:	681b      	ldr	r3, [r3, #0]
 802e3be:	2b01      	cmp	r3, #1
 802e3c0:	dd0c      	ble.n	802e3dc <onstatechange+0x7c>
 802e3c2:	4b28      	ldr	r3, [pc, #160]	@ (802e464 <onstatechange+0x104>)
 802e3c4:	f241 4203 	movw	r2, #5123	@ 0x1403
 802e3c8:	4927      	ldr	r1, [pc, #156]	@ (802e468 <onstatechange+0x108>)
 802e3ca:	2002      	movs	r0, #2
 802e3cc:	f7fd f87e 	bl	802b4cc <mg_log_prefix>
 802e3d0:	687b      	ldr	r3, [r7, #4]
 802e3d2:	461a      	mov	r2, r3
 802e3d4:	4928      	ldr	r1, [pc, #160]	@ (802e478 <onstatechange+0x118>)
 802e3d6:	4829      	ldr	r0, [pc, #164]	@ (802e47c <onstatechange+0x11c>)
 802e3d8:	f7fd f8c8 	bl	802b56c <mg_log>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 802e3dc:	687b      	ldr	r3, [r7, #4]
 802e3de:	691b      	ldr	r3, [r3, #16]
 802e3e0:	4619      	mov	r1, r3
 802e3e2:	6878      	ldr	r0, [r7, #4]
 802e3e4:	f7ff ff5e 	bl	802e2a4 <arp_ask>
 802e3e8:	e02e      	b.n	802e448 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 802e3ea:	687b      	ldr	r3, [r7, #4]
 802e3ec:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802e3f0:	2b01      	cmp	r3, #1
 802e3f2:	d116      	bne.n	802e422 <onstatechange+0xc2>
    MG_ERROR(("Link up"));
 802e3f4:	4b1a      	ldr	r3, [pc, #104]	@ (802e460 <onstatechange+0x100>)
 802e3f6:	681b      	ldr	r3, [r3, #0]
 802e3f8:	2b00      	cmp	r3, #0
 802e3fa:	dd09      	ble.n	802e410 <onstatechange+0xb0>
 802e3fc:	4b19      	ldr	r3, [pc, #100]	@ (802e464 <onstatechange+0x104>)
 802e3fe:	f241 4206 	movw	r2, #5126	@ 0x1406
 802e402:	4919      	ldr	r1, [pc, #100]	@ (802e468 <onstatechange+0x108>)
 802e404:	2001      	movs	r0, #1
 802e406:	f7fd f861 	bl	802b4cc <mg_log_prefix>
 802e40a:	481d      	ldr	r0, [pc, #116]	@ (802e480 <onstatechange+0x120>)
 802e40c:	f7fd f8ae 	bl	802b56c <mg_log>
    srand((unsigned int) mg_millis());
 802e410:	f004 fd94 	bl	8032f3c <mg_millis>
 802e414:	4602      	mov	r2, r0
 802e416:	460b      	mov	r3, r1
 802e418:	4613      	mov	r3, r2
 802e41a:	4618      	mov	r0, r3
 802e41c:	f007 f910 	bl	8035640 <srand>
 802e420:	e012      	b.n	802e448 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 802e422:	687b      	ldr	r3, [r7, #4]
 802e424:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802e428:	2b00      	cmp	r3, #0
 802e42a:	d10d      	bne.n	802e448 <onstatechange+0xe8>
    MG_ERROR(("Link down"));
 802e42c:	4b0c      	ldr	r3, [pc, #48]	@ (802e460 <onstatechange+0x100>)
 802e42e:	681b      	ldr	r3, [r3, #0]
 802e430:	2b00      	cmp	r3, #0
 802e432:	dd09      	ble.n	802e448 <onstatechange+0xe8>
 802e434:	4b0b      	ldr	r3, [pc, #44]	@ (802e464 <onstatechange+0x104>)
 802e436:	f241 4209 	movw	r2, #5129	@ 0x1409
 802e43a:	490b      	ldr	r1, [pc, #44]	@ (802e468 <onstatechange+0x108>)
 802e43c:	2001      	movs	r0, #1
 802e43e:	f7fd f845 	bl	802b4cc <mg_log_prefix>
 802e442:	4810      	ldr	r0, [pc, #64]	@ (802e484 <onstatechange+0x124>)
 802e444:	f7fd f892 	bl	802b56c <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 802e448:	687b      	ldr	r3, [r7, #4]
 802e44a:	337c      	adds	r3, #124	@ 0x7c
 802e44c:	461a      	mov	r2, r3
 802e44e:	2100      	movs	r1, #0
 802e450:	6878      	ldr	r0, [r7, #4]
 802e452:	f7ff fe23 	bl	802e09c <mg_tcpip_call>
}
 802e456:	bf00      	nop
 802e458:	3708      	adds	r7, #8
 802e45a:	46bd      	mov	sp, r7
 802e45c:	bd80      	pop	{r7, pc}
 802e45e:	bf00      	nop
 802e460:	200002a8 	.word	0x200002a8
 802e464:	08044ae0 	.word	0x08044ae0
 802e468:	08041a30 	.word	0x08041a30
 802e46c:	080316bd 	.word	0x080316bd
 802e470:	08042ff4 	.word	0x08042ff4
 802e474:	08043004 	.word	0x08043004
 802e478:	08031781 	.word	0x08031781
 802e47c:	08043014 	.word	0x08043014
 802e480:	08043024 	.word	0x08043024
 802e484:	0804302c 	.word	0x0804302c

0802e488 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 802e488:	b580      	push	{r7, lr}
 802e48a:	b086      	sub	sp, #24
 802e48c:	af00      	add	r7, sp, #0
 802e48e:	60f8      	str	r0, [r7, #12]
 802e490:	60b9      	str	r1, [r7, #8]
 802e492:	603b      	str	r3, [r7, #0]
 802e494:	4613      	mov	r3, r2
 802e496:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 802e498:	68fb      	ldr	r3, [r7, #12]
 802e49a:	695b      	ldr	r3, [r3, #20]
 802e49c:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 802e49e:	697b      	ldr	r3, [r7, #20]
 802e4a0:	330e      	adds	r3, #14
 802e4a2:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 802e4a4:	697b      	ldr	r3, [r7, #20]
 802e4a6:	2206      	movs	r2, #6
 802e4a8:	68b9      	ldr	r1, [r7, #8]
 802e4aa:	4618      	mov	r0, r3
 802e4ac:	f009 f854 	bl	8037558 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 802e4b0:	697b      	ldr	r3, [r7, #20]
 802e4b2:	3306      	adds	r3, #6
 802e4b4:	68f9      	ldr	r1, [r7, #12]
 802e4b6:	2206      	movs	r2, #6
 802e4b8:	4618      	mov	r0, r3
 802e4ba:	f009 f84d 	bl	8037558 <memcpy>
  eth->type = mg_htons(0x800);
 802e4be:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802e4c2:	f004 fcaa 	bl	8032e1a <mg_ntohs>
 802e4c6:	4603      	mov	r3, r0
 802e4c8:	461a      	mov	r2, r3
 802e4ca:	697b      	ldr	r3, [r7, #20]
 802e4cc:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 802e4ce:	2214      	movs	r2, #20
 802e4d0:	2100      	movs	r1, #0
 802e4d2:	6938      	ldr	r0, [r7, #16]
 802e4d4:	f007 fe04 	bl	80360e0 <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 802e4d8:	693b      	ldr	r3, [r7, #16]
 802e4da:	2245      	movs	r2, #69	@ 0x45
 802e4dc:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 802e4de:	693b      	ldr	r3, [r7, #16]
 802e4e0:	2200      	movs	r2, #0
 802e4e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802e4e6:	719a      	strb	r2, [r3, #6]
 802e4e8:	2200      	movs	r2, #0
 802e4ea:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 802e4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802e4ee:	b29b      	uxth	r3, r3
 802e4f0:	3314      	adds	r3, #20
 802e4f2:	b29b      	uxth	r3, r3
 802e4f4:	4618      	mov	r0, r3
 802e4f6:	f004 fc90 	bl	8032e1a <mg_ntohs>
 802e4fa:	4603      	mov	r3, r0
 802e4fc:	461a      	mov	r2, r3
 802e4fe:	693b      	ldr	r3, [r7, #16]
 802e500:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 802e502:	693b      	ldr	r3, [r7, #16]
 802e504:	2240      	movs	r2, #64	@ 0x40
 802e506:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 802e508:	693b      	ldr	r3, [r7, #16]
 802e50a:	79fa      	ldrb	r2, [r7, #7]
 802e50c:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 802e50e:	693b      	ldr	r3, [r7, #16]
 802e510:	683a      	ldr	r2, [r7, #0]
 802e512:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 802e514:	693b      	ldr	r3, [r7, #16]
 802e516:	6a3a      	ldr	r2, [r7, #32]
 802e518:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 802e51a:	2114      	movs	r1, #20
 802e51c:	6938      	ldr	r0, [r7, #16]
 802e51e:	f7ff fe35 	bl	802e18c <ipcsum>
 802e522:	4603      	mov	r3, r0
 802e524:	461a      	mov	r2, r3
 802e526:	693b      	ldr	r3, [r7, #16]
 802e528:	815a      	strh	r2, [r3, #10]
  return ip;
 802e52a:	693b      	ldr	r3, [r7, #16]
}
 802e52c:	4618      	mov	r0, r3
 802e52e:	3718      	adds	r7, #24
 802e530:	46bd      	mov	sp, r7
 802e532:	bd80      	pop	{r7, pc}

0802e534 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 802e534:	b580      	push	{r7, lr}
 802e536:	b08a      	sub	sp, #40	@ 0x28
 802e538:	af02      	add	r7, sp, #8
 802e53a:	60f8      	str	r0, [r7, #12]
 802e53c:	60b9      	str	r1, [r7, #8]
 802e53e:	607a      	str	r2, [r7, #4]
 802e540:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 802e542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802e544:	3308      	adds	r3, #8
 802e546:	9301      	str	r3, [sp, #4]
 802e548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802e54a:	9300      	str	r3, [sp, #0]
 802e54c:	687b      	ldr	r3, [r7, #4]
 802e54e:	2211      	movs	r2, #17
 802e550:	68b9      	ldr	r1, [r7, #8]
 802e552:	68f8      	ldr	r0, [r7, #12]
 802e554:	f7ff ff98 	bl	802e488 <tx_ip>
 802e558:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 802e55a:	69fb      	ldr	r3, [r7, #28]
 802e55c:	3314      	adds	r3, #20
 802e55e:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 802e560:	69bb      	ldr	r3, [r7, #24]
 802e562:	887a      	ldrh	r2, [r7, #2]
 802e564:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 802e566:	69bb      	ldr	r3, [r7, #24]
 802e568:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 802e56a:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 802e56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802e56e:	b29b      	uxth	r3, r3
 802e570:	3308      	adds	r3, #8
 802e572:	b29b      	uxth	r3, r3
 802e574:	4618      	mov	r0, r3
 802e576:	f004 fc50 	bl	8032e1a <mg_ntohs>
 802e57a:	4603      	mov	r3, r0
 802e57c:	461a      	mov	r2, r3
 802e57e:	69bb      	ldr	r3, [r7, #24]
 802e580:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 802e582:	69bb      	ldr	r3, [r7, #24]
 802e584:	2200      	movs	r2, #0
 802e586:	719a      	strb	r2, [r3, #6]
 802e588:	2200      	movs	r2, #0
 802e58a:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 802e58c:	2208      	movs	r2, #8
 802e58e:	69b9      	ldr	r1, [r7, #24]
 802e590:	2000      	movs	r0, #0
 802e592:	f7ff fdb5 	bl	802e100 <csumup>
 802e596:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 802e598:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802e59a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802e59c:	6978      	ldr	r0, [r7, #20]
 802e59e:	f7ff fdaf 	bl	802e100 <csumup>
 802e5a2:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 802e5a4:	69fb      	ldr	r3, [r7, #28]
 802e5a6:	330c      	adds	r3, #12
 802e5a8:	2204      	movs	r2, #4
 802e5aa:	4619      	mov	r1, r3
 802e5ac:	6978      	ldr	r0, [r7, #20]
 802e5ae:	f7ff fda7 	bl	802e100 <csumup>
 802e5b2:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 802e5b4:	69fb      	ldr	r3, [r7, #28]
 802e5b6:	3310      	adds	r3, #16
 802e5b8:	2204      	movs	r2, #4
 802e5ba:	4619      	mov	r1, r3
 802e5bc:	6978      	ldr	r0, [r7, #20]
 802e5be:	f7ff fd9f 	bl	802e100 <csumup>
 802e5c2:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 802e5c4:	69fb      	ldr	r3, [r7, #28]
 802e5c6:	7a5b      	ldrb	r3, [r3, #9]
 802e5c8:	461a      	mov	r2, r3
 802e5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802e5cc:	441a      	add	r2, r3
 802e5ce:	697b      	ldr	r3, [r7, #20]
 802e5d0:	4413      	add	r3, r2
 802e5d2:	3308      	adds	r3, #8
 802e5d4:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 802e5d6:	6978      	ldr	r0, [r7, #20]
 802e5d8:	f7ff fdbd 	bl	802e156 <csumfin>
 802e5dc:	4603      	mov	r3, r0
 802e5de:	461a      	mov	r2, r3
 802e5e0:	69bb      	ldr	r3, [r7, #24]
 802e5e2:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 802e5e4:	69bb      	ldr	r3, [r7, #24]
 802e5e6:	3308      	adds	r3, #8
 802e5e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802e5ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802e5ec:	4618      	mov	r0, r3
 802e5ee:	f007 fd5d 	bl	80360ac <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 802e5f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802e5f4:	332a      	adds	r3, #42	@ 0x2a
 802e5f6:	4619      	mov	r1, r3
 802e5f8:	68f8      	ldr	r0, [r7, #12]
 802e5fa:	f7ff fe37 	bl	802e26c <ether_output>
}
 802e5fe:	bf00      	nop
 802e600:	3720      	adds	r7, #32
 802e602:	46bd      	mov	sp, r7
 802e604:	bd80      	pop	{r7, pc}
	...

0802e608 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 802e608:	b5b0      	push	{r4, r5, r7, lr}
 802e60a:	b0cc      	sub	sp, #304	@ 0x130
 802e60c:	af04      	add	r7, sp, #16
 802e60e:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 802e612:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 802e616:	6020      	str	r0, [r4, #0]
 802e618:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 802e61c:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 802e620:	6001      	str	r1, [r0, #0]
 802e622:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 802e626:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 802e62a:	600a      	str	r2, [r1, #0]
 802e62c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 802e630:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 802e634:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 802e636:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e63a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 802e63e:	4a38      	ldr	r2, [pc, #224]	@ (802e720 <tx_dhcp+0x118>)
 802e640:	4618      	mov	r0, r3
 802e642:	4611      	mov	r1, r2
 802e644:	f44f 7388 	mov.w	r3, #272	@ 0x110
 802e648:	461a      	mov	r2, r3
 802e64a:	f008 ff85 	bl	8037558 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 802e64e:	4835      	ldr	r0, [pc, #212]	@ (802e724 <tx_dhcp+0x11c>)
 802e650:	f004 fbca 	bl	8032de8 <mg_ntohl>
 802e654:	4602      	mov	r2, r0
 802e656:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e65a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 802e65e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 802e662:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e666:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802e66a:	6819      	ldr	r1, [r3, #0]
 802e66c:	f107 0310 	add.w	r3, r7, #16
 802e670:	331c      	adds	r3, #28
 802e672:	2206      	movs	r2, #6
 802e674:	4618      	mov	r0, r3
 802e676:	f008 ff6f 	bl	8037558 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 802e67a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e67e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802e682:	681b      	ldr	r3, [r3, #0]
 802e684:	3302      	adds	r3, #2
 802e686:	681b      	ldr	r3, [r3, #0]
 802e688:	461a      	mov	r2, r3
 802e68a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e68e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 802e692:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 802e694:	f107 0310 	add.w	r3, r7, #16
 802e698:	33f0      	adds	r3, #240	@ 0xf0
 802e69a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 802e69e:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 802e6a2:	4618      	mov	r0, r3
 802e6a4:	f008 ff58 	bl	8037558 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 802e6a8:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 802e6ac:	2b00      	cmp	r3, #0
 802e6ae:	d009      	beq.n	802e6c4 <tx_dhcp+0xbc>
 802e6b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e6b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 802e6b8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 802e6bc:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 802e6c0:	6812      	ldr	r2, [r2, #0]
 802e6c2:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 802e6c4:	2044      	movs	r0, #68	@ 0x44
 802e6c6:	f004 fba8 	bl	8032e1a <mg_ntohs>
 802e6ca:	4603      	mov	r3, r0
 802e6cc:	461d      	mov	r5, r3
 802e6ce:	2043      	movs	r0, #67	@ 0x43
 802e6d0:	f004 fba3 	bl	8032e1a <mg_ntohs>
 802e6d4:	4603      	mov	r3, r0
 802e6d6:	461c      	mov	r4, r3
 802e6d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e6dc:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 802e6e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e6e4:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 802e6e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e6ec:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 802e6f0:	f44f 7388 	mov.w	r3, #272	@ 0x110
 802e6f4:	9303      	str	r3, [sp, #12]
 802e6f6:	f107 0310 	add.w	r3, r7, #16
 802e6fa:	9302      	str	r3, [sp, #8]
 802e6fc:	9401      	str	r4, [sp, #4]
 802e6fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802e702:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802e706:	681b      	ldr	r3, [r3, #0]
 802e708:	9300      	str	r3, [sp, #0]
 802e70a:	462b      	mov	r3, r5
 802e70c:	6812      	ldr	r2, [r2, #0]
 802e70e:	6809      	ldr	r1, [r1, #0]
 802e710:	6800      	ldr	r0, [r0, #0]
 802e712:	f7ff ff0f 	bl	802e534 <tx_udp>
         sizeof(dhcp));
}
 802e716:	bf00      	nop
 802e718:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 802e71c:	46bd      	mov	sp, r7
 802e71e:	bdb0      	pop	{r4, r5, r7, pc}
 802e720:	08043038 	.word	0x08043038
 802e724:	63825363 	.word	0x63825363

0802e728 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 802e728:	b5b0      	push	{r4, r5, r7, lr}
 802e72a:	b090      	sub	sp, #64	@ 0x40
 802e72c:	af04      	add	r7, sp, #16
 802e72e:	60f8      	str	r0, [r7, #12]
 802e730:	60b9      	str	r1, [r7, #8]
 802e732:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 802e734:	4b31      	ldr	r3, [pc, #196]	@ (802e7fc <tx_dhcp_request_sel+0xd4>)
 802e736:	f107 0414 	add.w	r4, r7, #20
 802e73a:	461d      	mov	r5, r3
 802e73c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802e73e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802e740:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802e744:	c403      	stmia	r4!, {r0, r1}
 802e746:	8022      	strh	r2, [r4, #0]
 802e748:	3402      	adds	r4, #2
 802e74a:	0c13      	lsrs	r3, r2, #16
 802e74c:	7023      	strb	r3, [r4, #0]
      54, 4, 0,   0,   0,   0,    // DHCP server ID
      50, 4, 0,   0,   0,   0,    // Requested IP
      55, 2, 1,   3,   255, 255,  // GW, mask [DNS] [SNTP]
      255                         // End of options
  };
  uint8_t addopts = 0;
 802e74e:	2300      	movs	r3, #0
 802e750:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 802e754:	f107 0314 	add.w	r3, r7, #20
 802e758:	330a      	adds	r3, #10
 802e75a:	687a      	ldr	r2, [r7, #4]
 802e75c:	601a      	str	r2, [r3, #0]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 802e75e:	f107 0314 	add.w	r3, r7, #20
 802e762:	3310      	adds	r3, #16
 802e764:	68ba      	ldr	r2, [r7, #8]
 802e766:	601a      	str	r2, [r3, #0]
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 802e768:	68fb      	ldr	r3, [r7, #12]
 802e76a:	7fdb      	ldrb	r3, [r3, #31]
 802e76c:	2b00      	cmp	r3, #0
 802e76e:	d00a      	beq.n	802e786 <tx_dhcp_request_sel+0x5e>
 802e770:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802e774:	1c5a      	adds	r2, r3, #1
 802e776:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 802e77a:	3318      	adds	r3, #24
 802e77c:	3330      	adds	r3, #48	@ 0x30
 802e77e:	443b      	add	r3, r7
 802e780:	2206      	movs	r2, #6
 802e782:	f803 2c1c 	strb.w	r2, [r3, #-28]
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 802e786:	68fb      	ldr	r3, [r7, #12]
 802e788:	f893 3020 	ldrb.w	r3, [r3, #32]
 802e78c:	2b00      	cmp	r3, #0
 802e78e:	d00a      	beq.n	802e7a6 <tx_dhcp_request_sel+0x7e>
 802e790:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802e794:	1c5a      	adds	r2, r3, #1
 802e796:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 802e79a:	3318      	adds	r3, #24
 802e79c:	3330      	adds	r3, #48	@ 0x30
 802e79e:	443b      	add	r3, r7
 802e7a0:	222a      	movs	r2, #42	@ 0x2a
 802e7a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
  opts[21] += addopts;
 802e7a6:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 802e7aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802e7ae:	4413      	add	r3, r2
 802e7b0:	b2db      	uxtb	r3, r3
 802e7b2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 802e7b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 802e7ba:	3319      	adds	r3, #25
 802e7bc:	2200      	movs	r2, #0
 802e7be:	9202      	str	r2, [sp, #8]
 802e7c0:	9301      	str	r3, [sp, #4]
 802e7c2:	f107 0314 	add.w	r3, r7, #20
 802e7c6:	9300      	str	r3, [sp, #0]
 802e7c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e7cc:	2200      	movs	r2, #0
 802e7ce:	490c      	ldr	r1, [pc, #48]	@ (802e800 <tx_dhcp_request_sel+0xd8>)
 802e7d0:	68f8      	ldr	r0, [r7, #12]
 802e7d2:	f7ff ff19 	bl	802e608 <tx_dhcp>
          sizeof(opts) + addopts - 2, false);
  MG_DEBUG(("DHCP req sent"));
 802e7d6:	4b0b      	ldr	r3, [pc, #44]	@ (802e804 <tx_dhcp_request_sel+0xdc>)
 802e7d8:	681b      	ldr	r3, [r3, #0]
 802e7da:	2b02      	cmp	r3, #2
 802e7dc:	dd09      	ble.n	802e7f2 <tx_dhcp_request_sel+0xca>
 802e7de:	4b0a      	ldr	r3, [pc, #40]	@ (802e808 <tx_dhcp_request_sel+0xe0>)
 802e7e0:	f241 425b 	movw	r2, #5211	@ 0x145b
 802e7e4:	4909      	ldr	r1, [pc, #36]	@ (802e80c <tx_dhcp_request_sel+0xe4>)
 802e7e6:	2003      	movs	r0, #3
 802e7e8:	f7fc fe70 	bl	802b4cc <mg_log_prefix>
 802e7ec:	4808      	ldr	r0, [pc, #32]	@ (802e810 <tx_dhcp_request_sel+0xe8>)
 802e7ee:	f7fc febd 	bl	802b56c <mg_log>
}
 802e7f2:	bf00      	nop
 802e7f4:	3730      	adds	r7, #48	@ 0x30
 802e7f6:	46bd      	mov	sp, r7
 802e7f8:	bdb0      	pop	{r4, r5, r7, pc}
 802e7fa:	bf00      	nop
 802e7fc:	08043158 	.word	0x08043158
 802e800:	08044a14 	.word	0x08044a14
 802e804:	200002a8 	.word	0x200002a8
 802e808:	08044af0 	.word	0x08044af0
 802e80c:	08041a30 	.word	0x08041a30
 802e810:	08043148 	.word	0x08043148

0802e814 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 802e814:	b580      	push	{r7, lr}
 802e816:	b08a      	sub	sp, #40	@ 0x28
 802e818:	af04      	add	r7, sp, #16
 802e81a:	60f8      	str	r0, [r7, #12]
 802e81c:	60b9      	str	r1, [r7, #8]
 802e81e:	607a      	str	r2, [r7, #4]
 802e820:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 802e822:	4b10      	ldr	r3, [pc, #64]	@ (802e864 <tx_dhcp_request_re+0x50>)
 802e824:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 802e826:	2301      	movs	r3, #1
 802e828:	9302      	str	r3, [sp, #8]
 802e82a:	2304      	movs	r3, #4
 802e82c:	9301      	str	r3, [sp, #4]
 802e82e:	f107 0314 	add.w	r3, r7, #20
 802e832:	9300      	str	r3, [sp, #0]
 802e834:	683b      	ldr	r3, [r7, #0]
 802e836:	687a      	ldr	r2, [r7, #4]
 802e838:	68b9      	ldr	r1, [r7, #8]
 802e83a:	68f8      	ldr	r0, [r7, #12]
 802e83c:	f7ff fee4 	bl	802e608 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 802e840:	4b09      	ldr	r3, [pc, #36]	@ (802e868 <tx_dhcp_request_re+0x54>)
 802e842:	681b      	ldr	r3, [r3, #0]
 802e844:	2b02      	cmp	r3, #2
 802e846:	dd09      	ble.n	802e85c <tx_dhcp_request_re+0x48>
 802e848:	4b08      	ldr	r3, [pc, #32]	@ (802e86c <tx_dhcp_request_re+0x58>)
 802e84a:	f241 4266 	movw	r2, #5222	@ 0x1466
 802e84e:	4908      	ldr	r1, [pc, #32]	@ (802e870 <tx_dhcp_request_re+0x5c>)
 802e850:	2003      	movs	r0, #3
 802e852:	f7fc fe3b 	bl	802b4cc <mg_log_prefix>
 802e856:	4807      	ldr	r0, [pc, #28]	@ (802e874 <tx_dhcp_request_re+0x60>)
 802e858:	f7fc fe88 	bl	802b56c <mg_log>
}
 802e85c:	bf00      	nop
 802e85e:	3718      	adds	r7, #24
 802e860:	46bd      	mov	sp, r7
 802e862:	bd80      	pop	{r7, pc}
 802e864:	ff030135 	.word	0xff030135
 802e868:	200002a8 	.word	0x200002a8
 802e86c:	08044b04 	.word	0x08044b04
 802e870:	08041a30 	.word	0x08041a30
 802e874:	08043148 	.word	0x08043148

0802e878 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 802e878:	b580      	push	{r7, lr}
 802e87a:	b088      	sub	sp, #32
 802e87c:	af04      	add	r7, sp, #16
 802e87e:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 802e880:	4a14      	ldr	r2, [pc, #80]	@ (802e8d4 <tx_dhcp_discover+0x5c>)
 802e882:	f107 0308 	add.w	r3, r7, #8
 802e886:	e892 0003 	ldmia.w	r2, {r0, r1}
 802e88a:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 802e88e:	2300      	movs	r3, #0
 802e890:	9302      	str	r3, [sp, #8]
 802e892:	2308      	movs	r3, #8
 802e894:	9301      	str	r3, [sp, #4]
 802e896:	f107 0308 	add.w	r3, r7, #8
 802e89a:	9300      	str	r3, [sp, #0]
 802e89c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e8a0:	2200      	movs	r2, #0
 802e8a2:	490d      	ldr	r1, [pc, #52]	@ (802e8d8 <tx_dhcp_discover+0x60>)
 802e8a4:	6878      	ldr	r0, [r7, #4]
 802e8a6:	f7ff feaf 	bl	802e608 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 802e8aa:	4b0c      	ldr	r3, [pc, #48]	@ (802e8dc <tx_dhcp_discover+0x64>)
 802e8ac:	681b      	ldr	r3, [r3, #0]
 802e8ae:	2b02      	cmp	r3, #2
 802e8b0:	dd0c      	ble.n	802e8cc <tx_dhcp_discover+0x54>
 802e8b2:	4b0b      	ldr	r3, [pc, #44]	@ (802e8e0 <tx_dhcp_discover+0x68>)
 802e8b4:	f241 4270 	movw	r2, #5232	@ 0x1470
 802e8b8:	490a      	ldr	r1, [pc, #40]	@ (802e8e4 <tx_dhcp_discover+0x6c>)
 802e8ba:	2003      	movs	r0, #3
 802e8bc:	f7fc fe06 	bl	802b4cc <mg_log_prefix>
 802e8c0:	687b      	ldr	r3, [r7, #4]
 802e8c2:	461a      	mov	r2, r3
 802e8c4:	4908      	ldr	r1, [pc, #32]	@ (802e8e8 <tx_dhcp_discover+0x70>)
 802e8c6:	4809      	ldr	r0, [pc, #36]	@ (802e8ec <tx_dhcp_discover+0x74>)
 802e8c8:	f7fc fe50 	bl	802b56c <mg_log>
}
 802e8cc:	bf00      	nop
 802e8ce:	3710      	adds	r7, #16
 802e8d0:	46bd      	mov	sp, r7
 802e8d2:	bd80      	pop	{r7, pc}
 802e8d4:	08043194 	.word	0x08043194
 802e8d8:	08044a14 	.word	0x08044a14
 802e8dc:	200002a8 	.word	0x200002a8
 802e8e0:	08044b18 	.word	0x08044b18
 802e8e4:	08041a30 	.word	0x08041a30
 802e8e8:	08031781 	.word	0x08031781
 802e8ec:	08043174 	.word	0x08043174

0802e8f0 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 802e8f0:	b580      	push	{r7, lr}
 802e8f2:	b086      	sub	sp, #24
 802e8f4:	af00      	add	r7, sp, #0
 802e8f6:	60f8      	str	r0, [r7, #12]
 802e8f8:	60b9      	str	r1, [r7, #8]
 802e8fa:	4613      	mov	r3, r2
 802e8fc:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 802e8fe:	2300      	movs	r3, #0
 802e900:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 802e902:	68fb      	ldr	r3, [r7, #12]
 802e904:	681b      	ldr	r3, [r3, #0]
 802e906:	617b      	str	r3, [r7, #20]
 802e908:	e057      	b.n	802e9ba <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 802e90a:	697b      	ldr	r3, [r7, #20]
 802e90c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802e910:	f003 0310 	and.w	r3, r3, #16
 802e914:	b2db      	uxtb	r3, r3
 802e916:	2b00      	cmp	r3, #0
 802e918:	d010      	beq.n	802e93c <getpeer+0x4c>
 802e91a:	68bb      	ldr	r3, [r7, #8]
 802e91c:	699b      	ldr	r3, [r3, #24]
 802e91e:	2b00      	cmp	r3, #0
 802e920:	d00c      	beq.n	802e93c <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 802e922:	68bb      	ldr	r3, [r7, #8]
 802e924:	699b      	ldr	r3, [r3, #24]
 802e926:	f103 000e 	add.w	r0, r3, #14
 802e92a:	697b      	ldr	r3, [r7, #20]
 802e92c:	331c      	adds	r3, #28
 802e92e:	2204      	movs	r2, #4
 802e930:	4619      	mov	r1, r3
 802e932:	f007 fb41 	bl	8035fb8 <memcmp>
 802e936:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 802e938:	2b00      	cmp	r3, #0
 802e93a:	d042      	beq.n	802e9c2 <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 802e93c:	697b      	ldr	r3, [r7, #20]
 802e93e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802e942:	f003 0301 	and.w	r3, r3, #1
 802e946:	b2db      	uxtb	r3, r3
 802e948:	2b00      	cmp	r3, #0
 802e94a:	d00b      	beq.n	802e964 <getpeer+0x74>
 802e94c:	68bb      	ldr	r3, [r7, #8]
 802e94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802e950:	2b00      	cmp	r3, #0
 802e952:	d007      	beq.n	802e964 <getpeer+0x74>
 802e954:	697b      	ldr	r3, [r7, #20]
 802e956:	8b1a      	ldrh	r2, [r3, #24]
 802e958:	68bb      	ldr	r3, [r7, #8]
 802e95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802e95c:	885b      	ldrh	r3, [r3, #2]
 802e95e:	b29b      	uxth	r3, r3
 802e960:	429a      	cmp	r2, r3
 802e962:	d030      	beq.n	802e9c6 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 802e964:	697b      	ldr	r3, [r7, #20]
 802e966:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802e96a:	f003 0301 	and.w	r3, r3, #1
 802e96e:	b2db      	uxtb	r3, r3
 802e970:	2b00      	cmp	r3, #0
 802e972:	d11f      	bne.n	802e9b4 <getpeer+0xc4>
 802e974:	68bb      	ldr	r3, [r7, #8]
 802e976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802e978:	2b00      	cmp	r3, #0
 802e97a:	d01b      	beq.n	802e9b4 <getpeer+0xc4>
 802e97c:	697b      	ldr	r3, [r7, #20]
 802e97e:	8b1a      	ldrh	r2, [r3, #24]
 802e980:	68bb      	ldr	r3, [r7, #8]
 802e982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802e984:	885b      	ldrh	r3, [r3, #2]
 802e986:	b29b      	uxth	r3, r3
 802e988:	429a      	cmp	r2, r3
 802e98a:	d113      	bne.n	802e9b4 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 802e98c:	697b      	ldr	r3, [r7, #20]
 802e98e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802e992:	f3c3 0300 	ubfx	r3, r3, #0, #1
 802e996:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 802e998:	79fa      	ldrb	r2, [r7, #7]
 802e99a:	429a      	cmp	r2, r3
 802e99c:	d10a      	bne.n	802e9b4 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 802e99e:	79fb      	ldrb	r3, [r7, #7]
 802e9a0:	2b00      	cmp	r3, #0
 802e9a2:	d111      	bne.n	802e9c8 <getpeer+0xd8>
 802e9a4:	697b      	ldr	r3, [r7, #20]
 802e9a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 802e9a8:	68bb      	ldr	r3, [r7, #8]
 802e9aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802e9ac:	881b      	ldrh	r3, [r3, #0]
 802e9ae:	b29b      	uxth	r3, r3
 802e9b0:	429a      	cmp	r2, r3
 802e9b2:	d009      	beq.n	802e9c8 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 802e9b4:	697b      	ldr	r3, [r7, #20]
 802e9b6:	681b      	ldr	r3, [r3, #0]
 802e9b8:	617b      	str	r3, [r7, #20]
 802e9ba:	697b      	ldr	r3, [r7, #20]
 802e9bc:	2b00      	cmp	r3, #0
 802e9be:	d1a4      	bne.n	802e90a <getpeer+0x1a>
 802e9c0:	e002      	b.n	802e9c8 <getpeer+0xd8>
      break;
 802e9c2:	bf00      	nop
 802e9c4:	e000      	b.n	802e9c8 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 802e9c6:	bf00      	nop
      break;
  }
  return c;
 802e9c8:	697b      	ldr	r3, [r7, #20]
}
 802e9ca:	4618      	mov	r0, r3
 802e9cc:	3718      	adds	r7, #24
 802e9ce:	46bd      	mov	sp, r7
 802e9d0:	bd80      	pop	{r7, pc}
	...

0802e9d4 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802e9d4:	b5b0      	push	{r4, r5, r7, lr}
 802e9d6:	b088      	sub	sp, #32
 802e9d8:	af02      	add	r7, sp, #8
 802e9da:	6078      	str	r0, [r7, #4]
 802e9dc:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 802e9de:	683b      	ldr	r3, [r7, #0]
 802e9e0:	699b      	ldr	r3, [r3, #24]
 802e9e2:	88db      	ldrh	r3, [r3, #6]
 802e9e4:	b29c      	uxth	r4, r3
 802e9e6:	2001      	movs	r0, #1
 802e9e8:	f004 fa17 	bl	8032e1a <mg_ntohs>
 802e9ec:	4603      	mov	r3, r0
 802e9ee:	429c      	cmp	r4, r3
 802e9f0:	d176      	bne.n	802eae0 <rx_arp+0x10c>
 802e9f2:	683b      	ldr	r3, [r7, #0]
 802e9f4:	699b      	ldr	r3, [r3, #24]
 802e9f6:	699a      	ldr	r2, [r3, #24]
 802e9f8:	687b      	ldr	r3, [r7, #4]
 802e9fa:	689b      	ldr	r3, [r3, #8]
 802e9fc:	429a      	cmp	r2, r3
 802e9fe:	d16f      	bne.n	802eae0 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 802ea00:	687b      	ldr	r3, [r7, #4]
 802ea02:	695b      	ldr	r3, [r3, #20]
 802ea04:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 802ea06:	697b      	ldr	r3, [r7, #20]
 802ea08:	330e      	adds	r3, #14
 802ea0a:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 802ea0c:	6978      	ldr	r0, [r7, #20]
 802ea0e:	683b      	ldr	r3, [r7, #0]
 802ea10:	691b      	ldr	r3, [r3, #16]
 802ea12:	3306      	adds	r3, #6
 802ea14:	2206      	movs	r2, #6
 802ea16:	4619      	mov	r1, r3
 802ea18:	f008 fd9e 	bl	8037558 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 802ea1c:	697b      	ldr	r3, [r7, #20]
 802ea1e:	3306      	adds	r3, #6
 802ea20:	6879      	ldr	r1, [r7, #4]
 802ea22:	2206      	movs	r2, #6
 802ea24:	4618      	mov	r0, r3
 802ea26:	f008 fd97 	bl	8037558 <memcpy>
    eth->type = mg_htons(0x806);
 802ea2a:	f640 0006 	movw	r0, #2054	@ 0x806
 802ea2e:	f004 f9f4 	bl	8032e1a <mg_ntohs>
 802ea32:	4603      	mov	r3, r0
 802ea34:	461a      	mov	r2, r3
 802ea36:	697b      	ldr	r3, [r7, #20]
 802ea38:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 802ea3a:	683b      	ldr	r3, [r7, #0]
 802ea3c:	699a      	ldr	r2, [r3, #24]
 802ea3e:	693b      	ldr	r3, [r7, #16]
 802ea40:	6814      	ldr	r4, [r2, #0]
 802ea42:	6850      	ldr	r0, [r2, #4]
 802ea44:	6891      	ldr	r1, [r2, #8]
 802ea46:	68d5      	ldr	r5, [r2, #12]
 802ea48:	601c      	str	r4, [r3, #0]
 802ea4a:	6058      	str	r0, [r3, #4]
 802ea4c:	6099      	str	r1, [r3, #8]
 802ea4e:	60dd      	str	r5, [r3, #12]
 802ea50:	6914      	ldr	r4, [r2, #16]
 802ea52:	6950      	ldr	r0, [r2, #20]
 802ea54:	6991      	ldr	r1, [r2, #24]
 802ea56:	611c      	str	r4, [r3, #16]
 802ea58:	6158      	str	r0, [r3, #20]
 802ea5a:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 802ea5c:	2002      	movs	r0, #2
 802ea5e:	f004 f9dc 	bl	8032e1a <mg_ntohs>
 802ea62:	4603      	mov	r3, r0
 802ea64:	461a      	mov	r2, r3
 802ea66:	693b      	ldr	r3, [r7, #16]
 802ea68:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 802ea6a:	693b      	ldr	r3, [r7, #16]
 802ea6c:	f103 0012 	add.w	r0, r3, #18
 802ea70:	683b      	ldr	r3, [r7, #0]
 802ea72:	699b      	ldr	r3, [r3, #24]
 802ea74:	3308      	adds	r3, #8
 802ea76:	2206      	movs	r2, #6
 802ea78:	4619      	mov	r1, r3
 802ea7a:	f008 fd6d 	bl	8037558 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 802ea7e:	693b      	ldr	r3, [r7, #16]
 802ea80:	3308      	adds	r3, #8
 802ea82:	6879      	ldr	r1, [r7, #4]
 802ea84:	2206      	movs	r2, #6
 802ea86:	4618      	mov	r0, r3
 802ea88:	f008 fd66 	bl	8037558 <memcpy>
    arp->tpa = pkt->arp->spa;
 802ea8c:	683b      	ldr	r3, [r7, #0]
 802ea8e:	699b      	ldr	r3, [r3, #24]
 802ea90:	f8d3 200e 	ldr.w	r2, [r3, #14]
 802ea94:	693b      	ldr	r3, [r7, #16]
 802ea96:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 802ea98:	687b      	ldr	r3, [r7, #4]
 802ea9a:	689a      	ldr	r2, [r3, #8]
 802ea9c:	693b      	ldr	r3, [r7, #16]
 802ea9e:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 802eaa2:	4b4a      	ldr	r3, [pc, #296]	@ (802ebcc <rx_arp+0x1f8>)
 802eaa4:	681b      	ldr	r3, [r3, #0]
 802eaa6:	2b02      	cmp	r3, #2
 802eaa8:	dd10      	ble.n	802eacc <rx_arp+0xf8>
 802eaaa:	4b49      	ldr	r3, [pc, #292]	@ (802ebd0 <rx_arp+0x1fc>)
 802eaac:	f241 4292 	movw	r2, #5266	@ 0x1492
 802eab0:	4948      	ldr	r1, [pc, #288]	@ (802ebd4 <rx_arp+0x200>)
 802eab2:	2003      	movs	r0, #3
 802eab4:	f7fc fd0a 	bl	802b4cc <mg_log_prefix>
 802eab8:	693b      	ldr	r3, [r7, #16]
 802eaba:	f103 0218 	add.w	r2, r3, #24
 802eabe:	687b      	ldr	r3, [r7, #4]
 802eac0:	9300      	str	r3, [sp, #0]
 802eac2:	4b45      	ldr	r3, [pc, #276]	@ (802ebd8 <rx_arp+0x204>)
 802eac4:	4945      	ldr	r1, [pc, #276]	@ (802ebdc <rx_arp+0x208>)
 802eac6:	4846      	ldr	r0, [pc, #280]	@ (802ebe0 <rx_arp+0x20c>)
 802eac8:	f7fc fd50 	bl	802b56c <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 802eacc:	693b      	ldr	r3, [r7, #16]
 802eace:	f103 021c 	add.w	r2, r3, #28
 802ead2:	697b      	ldr	r3, [r7, #20]
 802ead4:	1ad3      	subs	r3, r2, r3
 802ead6:	4619      	mov	r1, r3
 802ead8:	6878      	ldr	r0, [r7, #4]
 802eada:	f7ff fbc7 	bl	802e26c <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 802eade:	e071      	b.n	802ebc4 <rx_arp+0x1f0>
  } else if (pkt->arp->op == mg_htons(2)) {
 802eae0:	683b      	ldr	r3, [r7, #0]
 802eae2:	699b      	ldr	r3, [r3, #24]
 802eae4:	88db      	ldrh	r3, [r3, #6]
 802eae6:	b29c      	uxth	r4, r3
 802eae8:	2002      	movs	r0, #2
 802eaea:	f004 f996 	bl	8032e1a <mg_ntohs>
 802eaee:	4603      	mov	r3, r0
 802eaf0:	429c      	cmp	r4, r3
 802eaf2:	d167      	bne.n	802ebc4 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 802eaf4:	683b      	ldr	r3, [r7, #0]
 802eaf6:	699b      	ldr	r3, [r3, #24]
 802eaf8:	3312      	adds	r3, #18
 802eafa:	6879      	ldr	r1, [r7, #4]
 802eafc:	2206      	movs	r2, #6
 802eafe:	4618      	mov	r0, r3
 802eb00:	f007 fa5a 	bl	8035fb8 <memcmp>
 802eb04:	4603      	mov	r3, r0
 802eb06:	2b00      	cmp	r3, #0
 802eb08:	d15b      	bne.n	802ebc2 <rx_arp+0x1ee>
    if (pkt->arp->spa == ifp->gw) {
 802eb0a:	683b      	ldr	r3, [r7, #0]
 802eb0c:	699b      	ldr	r3, [r3, #24]
 802eb0e:	f8d3 200e 	ldr.w	r2, [r3, #14]
 802eb12:	687b      	ldr	r3, [r7, #4]
 802eb14:	691b      	ldr	r3, [r3, #16]
 802eb16:	429a      	cmp	r2, r3
 802eb18:	d10a      	bne.n	802eb30 <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 802eb1a:	687b      	ldr	r3, [r7, #4]
 802eb1c:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 802eb20:	683b      	ldr	r3, [r7, #0]
 802eb22:	699b      	ldr	r3, [r3, #24]
 802eb24:	3308      	adds	r3, #8
 802eb26:	2206      	movs	r2, #6
 802eb28:	4619      	mov	r1, r3
 802eb2a:	f008 fd15 	bl	8037558 <memcpy>
 802eb2e:	e049      	b.n	802ebc4 <rx_arp+0x1f0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802eb30:	687b      	ldr	r3, [r7, #4]
 802eb32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802eb34:	2200      	movs	r2, #0
 802eb36:	6839      	ldr	r1, [r7, #0]
 802eb38:	4618      	mov	r0, r3
 802eb3a:	f7ff fed9 	bl	802e8f0 <getpeer>
 802eb3e:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 802eb40:	68fb      	ldr	r3, [r7, #12]
 802eb42:	2b00      	cmp	r3, #0
 802eb44:	d03e      	beq.n	802ebc4 <rx_arp+0x1f0>
 802eb46:	68fb      	ldr	r3, [r7, #12]
 802eb48:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802eb4c:	f003 0310 	and.w	r3, r3, #16
 802eb50:	b2db      	uxtb	r3, r3
 802eb52:	2b00      	cmp	r3, #0
 802eb54:	d036      	beq.n	802ebc4 <rx_arp+0x1f0>
        struct connstate *s = (struct connstate *) (c + 1);
 802eb56:	68fb      	ldr	r3, [r7, #12]
 802eb58:	33b0      	adds	r3, #176	@ 0xb0
 802eb5a:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 802eb5c:	68bb      	ldr	r3, [r7, #8]
 802eb5e:	f103 0018 	add.w	r0, r3, #24
 802eb62:	683b      	ldr	r3, [r7, #0]
 802eb64:	699b      	ldr	r3, [r3, #24]
 802eb66:	3308      	adds	r3, #8
 802eb68:	2206      	movs	r2, #6
 802eb6a:	4619      	mov	r1, r3
 802eb6c:	f008 fcf4 	bl	8037558 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 802eb70:	4b16      	ldr	r3, [pc, #88]	@ (802ebcc <rx_arp+0x1f8>)
 802eb72:	681b      	ldr	r3, [r3, #0]
 802eb74:	2b02      	cmp	r3, #2
 802eb76:	dd15      	ble.n	802eba4 <rx_arp+0x1d0>
 802eb78:	4b15      	ldr	r3, [pc, #84]	@ (802ebd0 <rx_arp+0x1fc>)
 802eb7a:	f241 429f 	movw	r2, #5279	@ 0x149f
 802eb7e:	4915      	ldr	r1, [pc, #84]	@ (802ebd4 <rx_arp+0x200>)
 802eb80:	2003      	movs	r0, #3
 802eb82:	f7fc fca3 	bl	802b4cc <mg_log_prefix>
 802eb86:	68fb      	ldr	r3, [r7, #12]
 802eb88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802eb8a:	68fb      	ldr	r3, [r7, #12]
 802eb8c:	f103 021c 	add.w	r2, r3, #28
 802eb90:	68bb      	ldr	r3, [r7, #8]
 802eb92:	3318      	adds	r3, #24
 802eb94:	9301      	str	r3, [sp, #4]
 802eb96:	4b10      	ldr	r3, [pc, #64]	@ (802ebd8 <rx_arp+0x204>)
 802eb98:	9300      	str	r3, [sp, #0]
 802eb9a:	4613      	mov	r3, r2
 802eb9c:	4a0f      	ldr	r2, [pc, #60]	@ (802ebdc <rx_arp+0x208>)
 802eb9e:	4811      	ldr	r0, [pc, #68]	@ (802ebe4 <rx_arp+0x210>)
 802eba0:	f7fc fce4 	bl	802b56c <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 802eba4:	68fa      	ldr	r2, [r7, #12]
 802eba6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802ebaa:	f36f 1304 	bfc	r3, #4, #1
 802ebae:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        send_syn(c);
 802ebb2:	68f8      	ldr	r0, [r7, #12]
 802ebb4:	f002 f8ac 	bl	8030d10 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 802ebb8:	2103      	movs	r1, #3
 802ebba:	68f8      	ldr	r0, [r7, #12]
 802ebbc:	f7ff fafa 	bl	802e1b4 <settmout>
 802ebc0:	e000      	b.n	802ebc4 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 802ebc2:	bf00      	nop
      }
    }
  }
}
 802ebc4:	3718      	adds	r7, #24
 802ebc6:	46bd      	mov	sp, r7
 802ebc8:	bdb0      	pop	{r4, r5, r7, pc}
 802ebca:	bf00      	nop
 802ebcc:	200002a8 	.word	0x200002a8
 802ebd0:	08044b2c 	.word	0x08044b2c
 802ebd4:	08041a30 	.word	0x08041a30
 802ebd8:	08031781 	.word	0x08031781
 802ebdc:	080316bd 	.word	0x080316bd
 802ebe0:	0804319c 	.word	0x0804319c
 802ebe4:	080431b4 	.word	0x080431b4

0802ebe8 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802ebe8:	b580      	push	{r7, lr}
 802ebea:	b08a      	sub	sp, #40	@ 0x28
 802ebec:	af02      	add	r7, sp, #8
 802ebee:	6078      	str	r0, [r7, #4]
 802ebf0:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 802ebf2:	683b      	ldr	r3, [r7, #0]
 802ebf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802ebf6:	781b      	ldrb	r3, [r3, #0]
 802ebf8:	2b08      	cmp	r3, #8
 802ebfa:	d14d      	bne.n	802ec98 <rx_icmp+0xb0>
 802ebfc:	683b      	ldr	r3, [r7, #0]
 802ebfe:	69db      	ldr	r3, [r3, #28]
 802ec00:	2b00      	cmp	r3, #0
 802ec02:	d049      	beq.n	802ec98 <rx_icmp+0xb0>
 802ec04:	683b      	ldr	r3, [r7, #0]
 802ec06:	69db      	ldr	r3, [r3, #28]
 802ec08:	691a      	ldr	r2, [r3, #16]
 802ec0a:	687b      	ldr	r3, [r7, #4]
 802ec0c:	689b      	ldr	r3, [r3, #8]
 802ec0e:	429a      	cmp	r2, r3
 802ec10:	d142      	bne.n	802ec98 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 802ec12:	2326      	movs	r3, #38	@ 0x26
 802ec14:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 802ec16:	687b      	ldr	r3, [r7, #4]
 802ec18:	699a      	ldr	r2, [r3, #24]
 802ec1a:	69bb      	ldr	r3, [r7, #24]
 802ec1c:	1ad3      	subs	r3, r2, r3
 802ec1e:	617b      	str	r3, [r7, #20]
 802ec20:	683b      	ldr	r3, [r7, #0]
 802ec22:	68db      	ldr	r3, [r3, #12]
 802ec24:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 802ec26:	69fa      	ldr	r2, [r7, #28]
 802ec28:	697b      	ldr	r3, [r7, #20]
 802ec2a:	429a      	cmp	r2, r3
 802ec2c:	d901      	bls.n	802ec32 <rx_icmp+0x4a>
 802ec2e:	697b      	ldr	r3, [r7, #20]
 802ec30:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 802ec32:	683b      	ldr	r3, [r7, #0]
 802ec34:	691b      	ldr	r3, [r3, #16]
 802ec36:	1d99      	adds	r1, r3, #6
 802ec38:	687b      	ldr	r3, [r7, #4]
 802ec3a:	6898      	ldr	r0, [r3, #8]
 802ec3c:	683b      	ldr	r3, [r7, #0]
 802ec3e:	69db      	ldr	r3, [r3, #28]
 802ec40:	68db      	ldr	r3, [r3, #12]
 802ec42:	69fa      	ldr	r2, [r7, #28]
 802ec44:	3204      	adds	r2, #4
 802ec46:	9201      	str	r2, [sp, #4]
 802ec48:	9300      	str	r3, [sp, #0]
 802ec4a:	4603      	mov	r3, r0
 802ec4c:	2201      	movs	r2, #1
 802ec4e:	6878      	ldr	r0, [r7, #4]
 802ec50:	f7ff fc1a 	bl	802e488 <tx_ip>
 802ec54:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 802ec56:	693b      	ldr	r3, [r7, #16]
 802ec58:	3314      	adds	r3, #20
 802ec5a:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 802ec5c:	2204      	movs	r2, #4
 802ec5e:	2100      	movs	r1, #0
 802ec60:	68f8      	ldr	r0, [r7, #12]
 802ec62:	f007 fa3d 	bl	80360e0 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 802ec66:	68fb      	ldr	r3, [r7, #12]
 802ec68:	1d18      	adds	r0, r3, #4
 802ec6a:	683b      	ldr	r3, [r7, #0]
 802ec6c:	689b      	ldr	r3, [r3, #8]
 802ec6e:	69fa      	ldr	r2, [r7, #28]
 802ec70:	4619      	mov	r1, r3
 802ec72:	f008 fc71 	bl	8037558 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 802ec76:	69fb      	ldr	r3, [r7, #28]
 802ec78:	3304      	adds	r3, #4
 802ec7a:	4619      	mov	r1, r3
 802ec7c:	68f8      	ldr	r0, [r7, #12]
 802ec7e:	f7ff fa85 	bl	802e18c <ipcsum>
 802ec82:	4603      	mov	r3, r0
 802ec84:	461a      	mov	r2, r3
 802ec86:	68fb      	ldr	r3, [r7, #12]
 802ec88:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 802ec8a:	69ba      	ldr	r2, [r7, #24]
 802ec8c:	69fb      	ldr	r3, [r7, #28]
 802ec8e:	4413      	add	r3, r2
 802ec90:	4619      	mov	r1, r3
 802ec92:	6878      	ldr	r0, [r7, #4]
 802ec94:	f7ff faea 	bl	802e26c <ether_output>
  }
}
 802ec98:	bf00      	nop
 802ec9a:	3720      	adds	r7, #32
 802ec9c:	46bd      	mov	sp, r7
 802ec9e:	bd80      	pop	{r7, pc}

0802eca0 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802eca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802eca4:	b090      	sub	sp, #64	@ 0x40
 802eca6:	af00      	add	r7, sp, #0
 802eca8:	60f8      	str	r0, [r7, #12]
 802ecaa:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 802ecac:	2300      	movs	r3, #0
 802ecae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802ecb0:	2300      	movs	r3, #0
 802ecb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 802ecb4:	2300      	movs	r3, #0
 802ecb6:	627b      	str	r3, [r7, #36]	@ 0x24
 802ecb8:	2300      	movs	r3, #0
 802ecba:	623b      	str	r3, [r7, #32]
 802ecbc:	2300      	movs	r3, #0
 802ecbe:	61fb      	str	r3, [r7, #28]
 802ecc0:	2300      	movs	r3, #0
 802ecc2:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 802ecc4:	2300      	movs	r3, #0
 802ecc6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 802ecca:	68fb      	ldr	r3, [r7, #12]
 802eccc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802ecd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 802ecd4:	68bb      	ldr	r3, [r7, #8]
 802ecd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ecd8:	33f0      	adds	r3, #240	@ 0xf0
 802ecda:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 802ecdc:	68bb      	ldr	r3, [r7, #8]
 802ecde:	681a      	ldr	r2, [r3, #0]
 802ece0:	68bb      	ldr	r3, [r7, #8]
 802ece2:	685b      	ldr	r3, [r3, #4]
 802ece4:	4413      	add	r3, r2
 802ece6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 802ece8:	68bb      	ldr	r3, [r7, #8]
 802ecea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ecec:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 802ecf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ecf2:	429a      	cmp	r2, r3
 802ecf4:	f0c0 81ac 	bcc.w	802f050 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 802ecf8:	68bb      	ldr	r3, [r7, #8]
 802ecfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ecfc:	1d18      	adds	r0, r3, #4
 802ecfe:	68fb      	ldr	r3, [r7, #12]
 802ed00:	3302      	adds	r3, #2
 802ed02:	2204      	movs	r2, #4
 802ed04:	4619      	mov	r1, r3
 802ed06:	f007 f957 	bl	8035fb8 <memcmp>
 802ed0a:	4603      	mov	r3, r0
 802ed0c:	2b00      	cmp	r3, #0
 802ed0e:	f040 81a1 	bne.w	802f054 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 802ed12:	e08a      	b.n	802ee2a <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 802ed14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ed16:	781b      	ldrb	r3, [r3, #0]
 802ed18:	2b01      	cmp	r3, #1
 802ed1a:	d10e      	bne.n	802ed3a <rx_dhcp_client+0x9a>
 802ed1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ed1e:	3301      	adds	r3, #1
 802ed20:	781b      	ldrb	r3, [r3, #0]
 802ed22:	2b04      	cmp	r3, #4
 802ed24:	d109      	bne.n	802ed3a <rx_dhcp_client+0x9a>
 802ed26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ed28:	3306      	adds	r3, #6
 802ed2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ed2c:	429a      	cmp	r2, r3
 802ed2e:	d904      	bls.n	802ed3a <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 802ed30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ed32:	3302      	adds	r3, #2
 802ed34:	681b      	ldr	r3, [r3, #0]
 802ed36:	627b      	str	r3, [r7, #36]	@ 0x24
 802ed38:	e070      	b.n	802ee1c <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 802ed3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ed3c:	781b      	ldrb	r3, [r3, #0]
 802ed3e:	2b03      	cmp	r3, #3
 802ed40:	d112      	bne.n	802ed68 <rx_dhcp_client+0xc8>
 802ed42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ed44:	3301      	adds	r3, #1
 802ed46:	781b      	ldrb	r3, [r3, #0]
 802ed48:	2b04      	cmp	r3, #4
 802ed4a:	d10d      	bne.n	802ed68 <rx_dhcp_client+0xc8>
 802ed4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ed4e:	3306      	adds	r3, #6
 802ed50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ed52:	429a      	cmp	r2, r3
 802ed54:	d908      	bls.n	802ed68 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 802ed56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ed58:	3302      	adds	r3, #2
 802ed5a:	681b      	ldr	r3, [r3, #0]
 802ed5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 802ed5e:	68bb      	ldr	r3, [r7, #8]
 802ed60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ed62:	691b      	ldr	r3, [r3, #16]
 802ed64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802ed66:	e059      	b.n	802ee1c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 802ed68:	68fb      	ldr	r3, [r7, #12]
 802ed6a:	7fdb      	ldrb	r3, [r3, #31]
 802ed6c:	2b00      	cmp	r3, #0
 802ed6e:	d012      	beq.n	802ed96 <rx_dhcp_client+0xf6>
 802ed70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ed72:	781b      	ldrb	r3, [r3, #0]
 802ed74:	2b06      	cmp	r3, #6
 802ed76:	d10e      	bne.n	802ed96 <rx_dhcp_client+0xf6>
 802ed78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ed7a:	3301      	adds	r3, #1
 802ed7c:	781b      	ldrb	r3, [r3, #0]
 802ed7e:	2b04      	cmp	r3, #4
 802ed80:	d109      	bne.n	802ed96 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 802ed82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ed84:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 802ed86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ed88:	429a      	cmp	r2, r3
 802ed8a:	d904      	bls.n	802ed96 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 802ed8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ed8e:	3302      	adds	r3, #2
 802ed90:	681b      	ldr	r3, [r3, #0]
 802ed92:	61fb      	str	r3, [r7, #28]
 802ed94:	e042      	b.n	802ee1c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802ed96:	68fb      	ldr	r3, [r7, #12]
 802ed98:	f893 3020 	ldrb.w	r3, [r3, #32]
 802ed9c:	2b00      	cmp	r3, #0
 802ed9e:	d012      	beq.n	802edc6 <rx_dhcp_client+0x126>
 802eda0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802eda2:	781b      	ldrb	r3, [r3, #0]
 802eda4:	2b2a      	cmp	r3, #42	@ 0x2a
 802eda6:	d10e      	bne.n	802edc6 <rx_dhcp_client+0x126>
 802eda8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802edaa:	3301      	adds	r3, #1
 802edac:	781b      	ldrb	r3, [r3, #0]
 802edae:	2b04      	cmp	r3, #4
 802edb0:	d109      	bne.n	802edc6 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 802edb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802edb4:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802edb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802edb8:	429a      	cmp	r2, r3
 802edba:	d904      	bls.n	802edc6 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 802edbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802edbe:	3302      	adds	r3, #2
 802edc0:	681b      	ldr	r3, [r3, #0]
 802edc2:	61bb      	str	r3, [r7, #24]
 802edc4:	e02a      	b.n	802ee1c <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 802edc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802edc8:	781b      	ldrb	r3, [r3, #0]
 802edca:	2b33      	cmp	r3, #51	@ 0x33
 802edcc:	d114      	bne.n	802edf8 <rx_dhcp_client+0x158>
 802edce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802edd0:	3301      	adds	r3, #1
 802edd2:	781b      	ldrb	r3, [r3, #0]
 802edd4:	2b04      	cmp	r3, #4
 802edd6:	d10f      	bne.n	802edf8 <rx_dhcp_client+0x158>
 802edd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802edda:	3306      	adds	r3, #6
 802eddc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802edde:	429a      	cmp	r2, r3
 802ede0:	d90a      	bls.n	802edf8 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 802ede2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ede4:	3302      	adds	r3, #2
 802ede6:	681b      	ldr	r3, [r3, #0]
 802ede8:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 802edea:	6a3b      	ldr	r3, [r7, #32]
 802edec:	4618      	mov	r0, r3
 802edee:	f003 fffb 	bl	8032de8 <mg_ntohl>
 802edf2:	4603      	mov	r3, r0
 802edf4:	623b      	str	r3, [r7, #32]
 802edf6:	e011      	b.n	802ee1c <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 802edf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802edfa:	781b      	ldrb	r3, [r3, #0]
 802edfc:	2b35      	cmp	r3, #53	@ 0x35
 802edfe:	d10d      	bne.n	802ee1c <rx_dhcp_client+0x17c>
 802ee00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ee02:	3301      	adds	r3, #1
 802ee04:	781b      	ldrb	r3, [r3, #0]
 802ee06:	2b01      	cmp	r3, #1
 802ee08:	d108      	bne.n	802ee1c <rx_dhcp_client+0x17c>
 802ee0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ee0c:	3306      	adds	r3, #6
 802ee0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ee10:	429a      	cmp	r2, r3
 802ee12:	d903      	bls.n	802ee1c <rx_dhcp_client+0x17c>
      msgtype = p[2];
 802ee14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ee16:	789b      	ldrb	r3, [r3, #2]
 802ee18:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 802ee1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ee1e:	3301      	adds	r3, #1
 802ee20:	781b      	ldrb	r3, [r3, #0]
 802ee22:	3302      	adds	r3, #2
 802ee24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802ee26:	4413      	add	r3, r2
 802ee28:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 802ee2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ee2c:	3301      	adds	r3, #1
 802ee2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ee30:	429a      	cmp	r2, r3
 802ee32:	d904      	bls.n	802ee3e <rx_dhcp_client+0x19e>
 802ee34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ee36:	781b      	ldrb	r3, [r3, #0]
 802ee38:	2bff      	cmp	r3, #255	@ 0xff
 802ee3a:	f47f af6b 	bne.w	802ed14 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 802ee3e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 802ee42:	2b06      	cmp	r3, #6
 802ee44:	d10c      	bne.n	802ee60 <rx_dhcp_client+0x1c0>
 802ee46:	68fb      	ldr	r3, [r7, #12]
 802ee48:	689b      	ldr	r3, [r3, #8]
 802ee4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802ee4c:	429a      	cmp	r2, r3
 802ee4e:	d107      	bne.n	802ee60 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 802ee50:	68fb      	ldr	r3, [r7, #12]
 802ee52:	2201      	movs	r2, #1
 802ee54:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 802ee58:	68fb      	ldr	r3, [r7, #12]
 802ee5a:	2200      	movs	r2, #0
 802ee5c:	609a      	str	r2, [r3, #8]
 802ee5e:	e0ec      	b.n	802f03a <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802ee60:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 802ee64:	2b02      	cmp	r3, #2
 802ee66:	d123      	bne.n	802eeb0 <rx_dhcp_client+0x210>
 802ee68:	68fb      	ldr	r3, [r7, #12]
 802ee6a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802ee6e:	2b01      	cmp	r3, #1
 802ee70:	d11e      	bne.n	802eeb0 <rx_dhcp_client+0x210>
 802ee72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802ee74:	2b00      	cmp	r3, #0
 802ee76:	d01b      	beq.n	802eeb0 <rx_dhcp_client+0x210>
 802ee78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802ee7a:	2b00      	cmp	r3, #0
 802ee7c:	d018      	beq.n	802eeb0 <rx_dhcp_client+0x210>
 802ee7e:	6a3b      	ldr	r3, [r7, #32]
 802ee80:	2b00      	cmp	r3, #0
 802ee82:	d015      	beq.n	802eeb0 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 802ee84:	68bb      	ldr	r3, [r7, #8]
 802ee86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ee88:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 802ee8a:	2b00      	cmp	r3, #0
 802ee8c:	d003      	beq.n	802ee96 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 802ee8e:	68bb      	ldr	r3, [r7, #8]
 802ee90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 802ee92:	695b      	ldr	r3, [r3, #20]
 802ee94:	e002      	b.n	802ee9c <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 802ee96:	68bb      	ldr	r3, [r7, #8]
 802ee98:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 802ee9a:	68db      	ldr	r3, [r3, #12]
 802ee9c:	461a      	mov	r2, r3
 802ee9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802eea0:	68f8      	ldr	r0, [r7, #12]
 802eea2:	f7ff fc41 	bl	802e728 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 802eea6:	68fb      	ldr	r3, [r7, #12]
 802eea8:	2202      	movs	r2, #2
 802eeaa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 802eeae:	e0c4      	b.n	802f03a <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 802eeb0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 802eeb4:	2b05      	cmp	r3, #5
 802eeb6:	f040 80c0 	bne.w	802f03a <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802eeba:	68fb      	ldr	r3, [r7, #12]
 802eebc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802eec0:	2b02      	cmp	r3, #2
 802eec2:	f040 8081 	bne.w	802efc8 <rx_dhcp_client+0x328>
 802eec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802eec8:	2b00      	cmp	r3, #0
 802eeca:	d07d      	beq.n	802efc8 <rx_dhcp_client+0x328>
 802eecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802eece:	2b00      	cmp	r3, #0
 802eed0:	d07a      	beq.n	802efc8 <rx_dhcp_client+0x328>
 802eed2:	6a3b      	ldr	r3, [r7, #32]
 802eed4:	2b00      	cmp	r3, #0
 802eed6:	d077      	beq.n	802efc8 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 802eed8:	68fb      	ldr	r3, [r7, #12]
 802eeda:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 802eede:	6a39      	ldr	r1, [r7, #32]
 802eee0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 802eee4:	fb00 f101 	mul.w	r1, r0, r1
 802eee8:	2000      	movs	r0, #0
 802eeea:	4688      	mov	r8, r1
 802eeec:	4681      	mov	r9, r0
 802eeee:	eb12 0108 	adds.w	r1, r2, r8
 802eef2:	6039      	str	r1, [r7, #0]
 802eef4:	eb43 0309 	adc.w	r3, r3, r9
 802eef8:	607b      	str	r3, [r7, #4]
 802eefa:	68fb      	ldr	r3, [r7, #12]
 802eefc:	e9d7 1200 	ldrd	r1, r2, [r7]
 802ef00:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802ef04:	4b56      	ldr	r3, [pc, #344]	@ (802f060 <rx_dhcp_client+0x3c0>)
 802ef06:	681b      	ldr	r3, [r3, #0]
 802ef08:	2b01      	cmp	r3, #1
 802ef0a:	dd16      	ble.n	802ef3a <rx_dhcp_client+0x29a>
 802ef0c:	4b55      	ldr	r3, [pc, #340]	@ (802f064 <rx_dhcp_client+0x3c4>)
 802ef0e:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 802ef12:	4955      	ldr	r1, [pc, #340]	@ (802f068 <rx_dhcp_client+0x3c8>)
 802ef14:	2002      	movs	r0, #2
 802ef16:	f7fc fad9 	bl	802b4cc <mg_log_prefix>
 802ef1a:	6a3c      	ldr	r4, [r7, #32]
 802ef1c:	68fb      	ldr	r3, [r7, #12]
 802ef1e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 802ef22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802ef26:	f04f 0300 	mov.w	r3, #0
 802ef2a:	f7e1 ff15 	bl	8010d58 <__aeabi_uldivmod>
 802ef2e:	4602      	mov	r2, r0
 802ef30:	460b      	mov	r3, r1
 802ef32:	4621      	mov	r1, r4
 802ef34:	484d      	ldr	r0, [pc, #308]	@ (802f06c <rx_dhcp_client+0x3cc>)
 802ef36:	f7fc fb19 	bl	802b56c <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 802ef3a:	68fb      	ldr	r3, [r7, #12]
 802ef3c:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 802ef40:	68bb      	ldr	r3, [r7, #8]
 802ef42:	691b      	ldr	r3, [r3, #16]
 802ef44:	3306      	adds	r3, #6
 802ef46:	2206      	movs	r2, #6
 802ef48:	4619      	mov	r1, r3
 802ef4a:	f008 fb05 	bl	8037558 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 802ef4e:	68fb      	ldr	r3, [r7, #12]
 802ef50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802ef52:	609a      	str	r2, [r3, #8]
 802ef54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802ef56:	68fb      	ldr	r3, [r7, #12]
 802ef58:	611a      	str	r2, [r3, #16]
 802ef5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802ef5c:	68fb      	ldr	r3, [r7, #12]
 802ef5e:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 802ef60:	68fb      	ldr	r3, [r7, #12]
 802ef62:	2203      	movs	r2, #3
 802ef64:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 802ef68:	f107 0310 	add.w	r3, r7, #16
 802ef6c:	2108      	movs	r1, #8
 802ef6e:	4618      	mov	r0, r3
 802ef70:	f003 fed3 	bl	8032d1a <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 802ef74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802ef78:	4614      	mov	r4, r2
 802ef7a:	f003 ffdf 	bl	8032f3c <mg_millis>
 802ef7e:	4602      	mov	r2, r0
 802ef80:	460b      	mov	r3, r1
 802ef82:	4613      	mov	r3, r2
 802ef84:	4423      	add	r3, r4
 802ef86:	4618      	mov	r0, r3
 802ef88:	f006 fb5a 	bl	8035640 <srand>
      if (ifp->enable_req_dns && dns != 0)
 802ef8c:	68fb      	ldr	r3, [r7, #12]
 802ef8e:	7fdb      	ldrb	r3, [r3, #31]
 802ef90:	2b00      	cmp	r3, #0
 802ef92:	d009      	beq.n	802efa8 <rx_dhcp_client+0x308>
 802ef94:	69fb      	ldr	r3, [r7, #28]
 802ef96:	2b00      	cmp	r3, #0
 802ef98:	d006      	beq.n	802efa8 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 802ef9a:	f107 031c 	add.w	r3, r7, #28
 802ef9e:	461a      	mov	r2, r3
 802efa0:	2101      	movs	r1, #1
 802efa2:	68f8      	ldr	r0, [r7, #12]
 802efa4:	f7ff f87a 	bl	802e09c <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 802efa8:	68fb      	ldr	r3, [r7, #12]
 802efaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 802efae:	2b00      	cmp	r3, #0
 802efb0:	d042      	beq.n	802f038 <rx_dhcp_client+0x398>
 802efb2:	69bb      	ldr	r3, [r7, #24]
 802efb4:	2b00      	cmp	r3, #0
 802efb6:	d03f      	beq.n	802f038 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 802efb8:	f107 0318 	add.w	r3, r7, #24
 802efbc:	461a      	mov	r2, r3
 802efbe:	2102      	movs	r1, #2
 802efc0:	68f8      	ldr	r0, [r7, #12]
 802efc2:	f7ff f86b 	bl	802e09c <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802efc6:	e037      	b.n	802f038 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 802efc8:	68fb      	ldr	r3, [r7, #12]
 802efca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802efce:	2b03      	cmp	r3, #3
 802efd0:	d133      	bne.n	802f03a <rx_dhcp_client+0x39a>
 802efd2:	68fb      	ldr	r3, [r7, #12]
 802efd4:	689b      	ldr	r3, [r3, #8]
 802efd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802efd8:	429a      	cmp	r2, r3
 802efda:	d12e      	bne.n	802f03a <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 802efdc:	68fb      	ldr	r3, [r7, #12]
 802efde:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 802efe2:	6a39      	ldr	r1, [r7, #32]
 802efe4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 802efe8:	fb00 f101 	mul.w	r1, r0, r1
 802efec:	2000      	movs	r0, #0
 802efee:	460c      	mov	r4, r1
 802eff0:	4605      	mov	r5, r0
 802eff2:	eb12 0a04 	adds.w	sl, r2, r4
 802eff6:	eb43 0b05 	adc.w	fp, r3, r5
 802effa:	68fb      	ldr	r3, [r7, #12]
 802effc:	e9c3 ab18 	strd	sl, fp, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802f000:	4b17      	ldr	r3, [pc, #92]	@ (802f060 <rx_dhcp_client+0x3c0>)
 802f002:	681b      	ldr	r3, [r3, #0]
 802f004:	2b01      	cmp	r3, #1
 802f006:	dd18      	ble.n	802f03a <rx_dhcp_client+0x39a>
 802f008:	4b16      	ldr	r3, [pc, #88]	@ (802f064 <rx_dhcp_client+0x3c4>)
 802f00a:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 802f00e:	4916      	ldr	r1, [pc, #88]	@ (802f068 <rx_dhcp_client+0x3c8>)
 802f010:	2002      	movs	r0, #2
 802f012:	f7fc fa5b 	bl	802b4cc <mg_log_prefix>
 802f016:	6a3c      	ldr	r4, [r7, #32]
 802f018:	68fb      	ldr	r3, [r7, #12]
 802f01a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 802f01e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802f022:	f04f 0300 	mov.w	r3, #0
 802f026:	f7e1 fe97 	bl	8010d58 <__aeabi_uldivmod>
 802f02a:	4602      	mov	r2, r0
 802f02c:	460b      	mov	r3, r1
 802f02e:	4621      	mov	r1, r4
 802f030:	480e      	ldr	r0, [pc, #56]	@ (802f06c <rx_dhcp_client+0x3cc>)
 802f032:	f7fc fa9b 	bl	802b56c <mg_log>
 802f036:	e000      	b.n	802f03a <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802f038:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 802f03a:	68fb      	ldr	r3, [r7, #12]
 802f03c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802f040:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 802f044:	429a      	cmp	r2, r3
 802f046:	d006      	beq.n	802f056 <rx_dhcp_client+0x3b6>
 802f048:	68f8      	ldr	r0, [r7, #12]
 802f04a:	f7ff f989 	bl	802e360 <onstatechange>
 802f04e:	e002      	b.n	802f056 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 802f050:	bf00      	nop
 802f052:	e000      	b.n	802f056 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 802f054:	bf00      	nop
}
 802f056:	3740      	adds	r7, #64	@ 0x40
 802f058:	46bd      	mov	sp, r7
 802f05a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802f05e:	bf00      	nop
 802f060:	200002a8 	.word	0x200002a8
 802f064:	08044b34 	.word	0x08044b34
 802f068:	08041a30 	.word	0x08041a30
 802f06c:	080431d0 	.word	0x080431d0

0802f070 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802f070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f074:	b0d6      	sub	sp, #344	@ 0x158
 802f076:	af04      	add	r7, sp, #16
 802f078:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f07c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 802f080:	6018      	str	r0, [r3, #0]
 802f082:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f086:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f08a:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 802f08c:	2300      	movs	r3, #0
 802f08e:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 802f092:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f096:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f09a:	681b      	ldr	r3, [r3, #0]
 802f09c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f09e:	33f0      	adds	r3, #240	@ 0xf0
 802f0a0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 802f0a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f0a8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f0ac:	681b      	ldr	r3, [r3, #0]
 802f0ae:	681a      	ldr	r2, [r3, #0]
 802f0b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f0b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f0b8:	681b      	ldr	r3, [r3, #0]
 802f0ba:	685b      	ldr	r3, [r3, #4]
 802f0bc:	4413      	add	r3, r2
 802f0be:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 802f0c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f0c6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f0ca:	681b      	ldr	r3, [r3, #0]
 802f0cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f0ce:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 802f0d2:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 802f0d6:	429a      	cmp	r2, r3
 802f0d8:	f0c0 81b0 	bcc.w	802f43c <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 802f0dc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f0e0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802f0e4:	4ad8      	ldr	r2, [pc, #864]	@ (802f448 <rx_dhcp_server+0x3d8>)
 802f0e6:	4618      	mov	r0, r3
 802f0e8:	4611      	mov	r1, r2
 802f0ea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 802f0ee:	461a      	mov	r2, r3
 802f0f0:	f008 fa32 	bl	8037558 <memcpy>
  res.yiaddr = ifp->ip;
 802f0f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f0f8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 802f0fc:	681b      	ldr	r3, [r3, #0]
 802f0fe:	689a      	ldr	r2, [r3, #8]
 802f100:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f104:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802f108:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 802f10a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802f10e:	3310      	adds	r3, #16
 802f110:	3303      	adds	r3, #3
 802f112:	781a      	ldrb	r2, [r3, #0]
 802f114:	3201      	adds	r2, #1
 802f116:	b2d2      	uxtb	r2, r2
 802f118:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 802f11a:	e020      	b.n	802f15e <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 802f11c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802f120:	781b      	ldrb	r3, [r3, #0]
 802f122:	2b35      	cmp	r3, #53	@ 0x35
 802f124:	d111      	bne.n	802f14a <rx_dhcp_server+0xda>
 802f126:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802f12a:	3301      	adds	r3, #1
 802f12c:	781b      	ldrb	r3, [r3, #0]
 802f12e:	2b01      	cmp	r3, #1
 802f130:	d10b      	bne.n	802f14a <rx_dhcp_server+0xda>
 802f132:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802f136:	3302      	adds	r3, #2
 802f138:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 802f13c:	429a      	cmp	r2, r3
 802f13e:	d904      	bls.n	802f14a <rx_dhcp_server+0xda>
      op = p[2];
 802f140:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802f144:	789b      	ldrb	r3, [r3, #2]
 802f146:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    }
    p += p[1] + 2;
 802f14a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802f14e:	3301      	adds	r3, #1
 802f150:	781b      	ldrb	r3, [r3, #0]
 802f152:	3302      	adds	r3, #2
 802f154:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 802f158:	4413      	add	r3, r2
 802f15a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 802f15e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802f162:	3301      	adds	r3, #1
 802f164:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 802f168:	429a      	cmp	r2, r3
 802f16a:	d904      	bls.n	802f176 <rx_dhcp_server+0x106>
 802f16c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 802f170:	781b      	ldrb	r3, [r3, #0]
 802f172:	2bff      	cmp	r3, #255	@ 0xff
 802f174:	d1d2      	bne.n	802f11c <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 802f176:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 802f17a:	2b01      	cmp	r3, #1
 802f17c:	d004      	beq.n	802f188 <rx_dhcp_server+0x118>
 802f17e:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 802f182:	2b03      	cmp	r3, #3
 802f184:	f040 815b 	bne.w	802f43e <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 802f188:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 802f18c:	2b01      	cmp	r3, #1
 802f18e:	d101      	bne.n	802f194 <rx_dhcp_server+0x124>
 802f190:	2302      	movs	r3, #2
 802f192:	e000      	b.n	802f196 <rx_dhcp_server+0x126>
 802f194:	2305      	movs	r3, #5
 802f196:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    uint8_t opts[] = {
 802f19a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f19e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f1a2:	2235      	movs	r2, #53	@ 0x35
 802f1a4:	701a      	strb	r2, [r3, #0]
 802f1a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f1aa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f1ae:	2201      	movs	r2, #1
 802f1b0:	705a      	strb	r2, [r3, #1]
 802f1b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f1b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f1ba:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 802f1be:	709a      	strb	r2, [r3, #2]
 802f1c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f1c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f1c8:	2201      	movs	r2, #1
 802f1ca:	70da      	strb	r2, [r3, #3]
 802f1cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f1d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f1d4:	2204      	movs	r2, #4
 802f1d6:	711a      	strb	r2, [r3, #4]
 802f1d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f1dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f1e0:	2200      	movs	r2, #0
 802f1e2:	715a      	strb	r2, [r3, #5]
 802f1e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f1e8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f1ec:	2200      	movs	r2, #0
 802f1ee:	719a      	strb	r2, [r3, #6]
 802f1f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f1f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f1f8:	2200      	movs	r2, #0
 802f1fa:	71da      	strb	r2, [r3, #7]
 802f1fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f200:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f204:	2200      	movs	r2, #0
 802f206:	721a      	strb	r2, [r3, #8]
 802f208:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f20c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f210:	2236      	movs	r2, #54	@ 0x36
 802f212:	725a      	strb	r2, [r3, #9]
 802f214:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f218:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f21c:	2204      	movs	r2, #4
 802f21e:	729a      	strb	r2, [r3, #10]
 802f220:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f224:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f228:	2200      	movs	r2, #0
 802f22a:	72da      	strb	r2, [r3, #11]
 802f22c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f230:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f234:	2200      	movs	r2, #0
 802f236:	731a      	strb	r2, [r3, #12]
 802f238:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f23c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f240:	2200      	movs	r2, #0
 802f242:	735a      	strb	r2, [r3, #13]
 802f244:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f248:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f24c:	2200      	movs	r2, #0
 802f24e:	739a      	strb	r2, [r3, #14]
 802f250:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f254:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f258:	220c      	movs	r2, #12
 802f25a:	73da      	strb	r2, [r3, #15]
 802f25c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f260:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f264:	2203      	movs	r2, #3
 802f266:	741a      	strb	r2, [r3, #16]
 802f268:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f26c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f270:	226d      	movs	r2, #109	@ 0x6d
 802f272:	745a      	strb	r2, [r3, #17]
 802f274:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f278:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f27c:	2269      	movs	r2, #105	@ 0x69
 802f27e:	749a      	strb	r2, [r3, #18]
 802f280:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f284:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f288:	2270      	movs	r2, #112	@ 0x70
 802f28a:	74da      	strb	r2, [r3, #19]
 802f28c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f290:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f294:	2233      	movs	r2, #51	@ 0x33
 802f296:	751a      	strb	r2, [r3, #20]
 802f298:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f29c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f2a0:	2204      	movs	r2, #4
 802f2a2:	755a      	strb	r2, [r3, #21]
 802f2a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f2a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f2ac:	22ff      	movs	r2, #255	@ 0xff
 802f2ae:	759a      	strb	r2, [r3, #22]
 802f2b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f2b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f2b8:	22ff      	movs	r2, #255	@ 0xff
 802f2ba:	75da      	strb	r2, [r3, #23]
 802f2bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f2c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f2c4:	22ff      	movs	r2, #255	@ 0xff
 802f2c6:	761a      	strb	r2, [r3, #24]
 802f2c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f2cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f2d0:	22ff      	movs	r2, #255	@ 0xff
 802f2d2:	765a      	strb	r2, [r3, #25]
 802f2d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f2d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802f2dc:	22ff      	movs	r2, #255	@ 0xff
 802f2de:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 802f2e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f2e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f2e8:	681b      	ldr	r3, [r3, #0]
 802f2ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f2ec:	f103 011c 	add.w	r1, r3, #28
 802f2f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802f2f4:	331c      	adds	r3, #28
 802f2f6:	2206      	movs	r2, #6
 802f2f8:	4618      	mov	r0, r3
 802f2fa:	f008 f92d 	bl	8037558 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 802f2fe:	f107 030c 	add.w	r3, r7, #12
 802f302:	3305      	adds	r3, #5
 802f304:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 802f308:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 802f30c:	6812      	ldr	r2, [r2, #0]
 802f30e:	320c      	adds	r2, #12
 802f310:	6812      	ldr	r2, [r2, #0]
 802f312:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 802f314:	f107 030c 	add.w	r3, r7, #12
 802f318:	330b      	adds	r3, #11
 802f31a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 802f31e:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 802f322:	6812      	ldr	r2, [r2, #0]
 802f324:	3208      	adds	r2, #8
 802f326:	6812      	ldr	r2, [r2, #0]
 802f328:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 802f32a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f32e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802f332:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 802f336:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 802f33a:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 802f33e:	4615      	mov	r5, r2
 802f340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802f342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802f344:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802f348:	c403      	stmia	r4!, {r0, r1}
 802f34a:	8022      	strh	r2, [r4, #0]
 802f34c:	3402      	adds	r4, #2
 802f34e:	0c13      	lsrs	r3, r2, #16
 802f350:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 802f352:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f356:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f35a:	681b      	ldr	r3, [r3, #0]
 802f35c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f35e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 802f362:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f366:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802f36a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 802f36e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f372:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f376:	681b      	ldr	r3, [r3, #0]
 802f378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f37a:	685a      	ldr	r2, [r3, #4]
 802f37c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f380:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802f384:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 802f386:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f38a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 802f38e:	681b      	ldr	r3, [r3, #0]
 802f390:	7f9b      	ldrb	r3, [r3, #30]
 802f392:	2b00      	cmp	r3, #0
 802f394:	d01c      	beq.n	802f3d0 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;
 802f396:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f39a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802f39e:	691a      	ldr	r2, [r3, #16]
 802f3a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f3a4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 802f3a8:	681b      	ldr	r3, [r3, #0]
 802f3aa:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 802f3ac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f3b0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 802f3b4:	681b      	ldr	r3, [r3, #0]
 802f3b6:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 802f3ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f3be:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f3c2:	681b      	ldr	r3, [r3, #0]
 802f3c4:	691b      	ldr	r3, [r3, #16]
 802f3c6:	3306      	adds	r3, #6
 802f3c8:	2206      	movs	r2, #6
 802f3ca:	4619      	mov	r1, r3
 802f3cc:	f008 f8c4 	bl	8037558 <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 802f3d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f3d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 802f3d8:	681b      	ldr	r3, [r3, #0]
 802f3da:	691b      	ldr	r3, [r3, #16]
 802f3dc:	1d9d      	adds	r5, r3, #6
 802f3de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f3e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 802f3e6:	681b      	ldr	r3, [r3, #0]
 802f3e8:	689e      	ldr	r6, [r3, #8]
 802f3ea:	2043      	movs	r0, #67	@ 0x43
 802f3ec:	f003 fd15 	bl	8032e1a <mg_ntohs>
 802f3f0:	4603      	mov	r3, r0
 802f3f2:	4698      	mov	r8, r3
 802f3f4:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 802f3f8:	2b01      	cmp	r3, #1
 802f3fa:	d005      	beq.n	802f408 <rx_dhcp_server+0x398>
 802f3fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f400:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 802f404:	691c      	ldr	r4, [r3, #16]
 802f406:	e001      	b.n	802f40c <rx_dhcp_server+0x39c>
 802f408:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802f40c:	2044      	movs	r0, #68	@ 0x44
 802f40e:	f003 fd04 	bl	8032e1a <mg_ntohs>
 802f412:	4603      	mov	r3, r0
 802f414:	461a      	mov	r2, r3
 802f416:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 802f41a:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 802f41e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 802f422:	9303      	str	r3, [sp, #12]
 802f424:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802f428:	9302      	str	r3, [sp, #8]
 802f42a:	9201      	str	r2, [sp, #4]
 802f42c:	9400      	str	r4, [sp, #0]
 802f42e:	4643      	mov	r3, r8
 802f430:	4632      	mov	r2, r6
 802f432:	4629      	mov	r1, r5
 802f434:	6800      	ldr	r0, [r0, #0]
 802f436:	f7ff f87d 	bl	802e534 <tx_udp>
 802f43a:	e000      	b.n	802f43e <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 802f43c:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 802f43e:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 802f442:	46bd      	mov	sp, r7
 802f444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f448:	080431e8 	.word	0x080431e8

0802f44c <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802f44c:	b580      	push	{r7, lr}
 802f44e:	b084      	sub	sp, #16
 802f450:	af00      	add	r7, sp, #0
 802f452:	6078      	str	r0, [r7, #4]
 802f454:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 802f456:	687b      	ldr	r3, [r7, #4]
 802f458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f45a:	2201      	movs	r2, #1
 802f45c:	6839      	ldr	r1, [r7, #0]
 802f45e:	4618      	mov	r0, r3
 802f460:	f7ff fa46 	bl	802e8f0 <getpeer>
 802f464:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 802f466:	68fb      	ldr	r3, [r7, #12]
 802f468:	2b00      	cmp	r3, #0
 802f46a:	d059      	beq.n	802f520 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 802f46c:	683b      	ldr	r3, [r7, #0]
 802f46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802f470:	881b      	ldrh	r3, [r3, #0]
 802f472:	b29a      	uxth	r2, r3
 802f474:	68fb      	ldr	r3, [r7, #12]
 802f476:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802f478:	68fb      	ldr	r3, [r7, #12]
 802f47a:	331c      	adds	r3, #28
 802f47c:	683a      	ldr	r2, [r7, #0]
 802f47e:	69d2      	ldr	r2, [r2, #28]
 802f480:	320c      	adds	r2, #12
 802f482:	6812      	ldr	r2, [r2, #0]
 802f484:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 802f486:	68fb      	ldr	r3, [r7, #12]
 802f488:	33b0      	adds	r3, #176	@ 0xb0
 802f48a:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 802f48c:	68bb      	ldr	r3, [r7, #8]
 802f48e:	f103 0018 	add.w	r0, r3, #24
 802f492:	683b      	ldr	r3, [r7, #0]
 802f494:	691b      	ldr	r3, [r3, #16]
 802f496:	3306      	adds	r3, #6
 802f498:	2206      	movs	r2, #6
 802f49a:	4619      	mov	r1, r3
 802f49c:	f008 f85c 	bl	8037558 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 802f4a0:	68fb      	ldr	r3, [r7, #12]
 802f4a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802f4a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 802f4a8:	d304      	bcc.n	802f4b4 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 802f4aa:	491f      	ldr	r1, [pc, #124]	@ (802f528 <rx_udp+0xdc>)
 802f4ac:	68f8      	ldr	r0, [r7, #12]
 802f4ae:	f7f6 fc47 	bl	8025d40 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 802f4b2:	e035      	b.n	802f520 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802f4b4:	68fb      	ldr	r3, [r7, #12]
 802f4b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802f4b8:	68fb      	ldr	r3, [r7, #12]
 802f4ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802f4bc:	1ad2      	subs	r2, r2, r3
 802f4be:	683b      	ldr	r3, [r7, #0]
 802f4c0:	68db      	ldr	r3, [r3, #12]
 802f4c2:	429a      	cmp	r2, r3
 802f4c4:	d212      	bcs.n	802f4ec <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 802f4c6:	68fb      	ldr	r3, [r7, #12]
 802f4c8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 802f4cc:	68fb      	ldr	r3, [r7, #12]
 802f4ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802f4d0:	683b      	ldr	r3, [r7, #0]
 802f4d2:	68db      	ldr	r3, [r3, #12]
 802f4d4:	4413      	add	r3, r2
 802f4d6:	4619      	mov	r1, r3
 802f4d8:	f7fb f808 	bl	802a4ec <mg_iobuf_resize>
 802f4dc:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802f4de:	2b00      	cmp	r3, #0
 802f4e0:	d104      	bne.n	802f4ec <rx_udp+0xa0>
      mg_error(c, "oom");
 802f4e2:	4912      	ldr	r1, [pc, #72]	@ (802f52c <rx_udp+0xe0>)
 802f4e4:	68f8      	ldr	r0, [r7, #12]
 802f4e6:	f7f6 fc2b 	bl	8025d40 <mg_error>
}
 802f4ea:	e019      	b.n	802f520 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 802f4ec:	68fb      	ldr	r3, [r7, #12]
 802f4ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802f4f0:	68fb      	ldr	r3, [r7, #12]
 802f4f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802f4f4:	18d0      	adds	r0, r2, r3
 802f4f6:	683b      	ldr	r3, [r7, #0]
 802f4f8:	6899      	ldr	r1, [r3, #8]
 802f4fa:	683b      	ldr	r3, [r7, #0]
 802f4fc:	68db      	ldr	r3, [r3, #12]
 802f4fe:	461a      	mov	r2, r3
 802f500:	f008 f82a 	bl	8037558 <memcpy>
      c->recv.len += pkt->pay.len;
 802f504:	68fb      	ldr	r3, [r7, #12]
 802f506:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802f508:	683b      	ldr	r3, [r7, #0]
 802f50a:	68db      	ldr	r3, [r3, #12]
 802f50c:	441a      	add	r2, r3
 802f50e:	68fb      	ldr	r3, [r7, #12]
 802f510:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802f512:	683b      	ldr	r3, [r7, #0]
 802f514:	330c      	adds	r3, #12
 802f516:	461a      	mov	r2, r3
 802f518:	2107      	movs	r1, #7
 802f51a:	68f8      	ldr	r0, [r7, #12]
 802f51c:	f7f6 fbf0 	bl	8025d00 <mg_call>
}
 802f520:	bf00      	nop
 802f522:	3710      	adds	r7, #16
 802f524:	46bd      	mov	sp, r7
 802f526:	bd80      	pop	{r7, pc}
 802f528:	080432f8 	.word	0x080432f8
 802f52c:	08043314 	.word	0x08043314

0802f530 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 802f530:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f532:	b091      	sub	sp, #68	@ 0x44
 802f534:	af06      	add	r7, sp, #24
 802f536:	60f8      	str	r0, [r7, #12]
 802f538:	60b9      	str	r1, [r7, #8]
 802f53a:	607a      	str	r2, [r7, #4]
 802f53c:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 802f53e:	68fb      	ldr	r3, [r7, #12]
 802f540:	689a      	ldr	r2, [r3, #8]
 802f542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802f544:	3314      	adds	r3, #20
 802f546:	9301      	str	r3, [sp, #4]
 802f548:	687b      	ldr	r3, [r7, #4]
 802f54a:	9300      	str	r3, [sp, #0]
 802f54c:	4613      	mov	r3, r2
 802f54e:	2206      	movs	r2, #6
 802f550:	68b9      	ldr	r1, [r7, #8]
 802f552:	68f8      	ldr	r0, [r7, #12]
 802f554:	f7fe ff98 	bl	802e488 <tx_ip>
 802f558:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 802f55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f55c:	3314      	adds	r3, #20
 802f55e:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 802f560:	2214      	movs	r2, #20
 802f562:	2100      	movs	r1, #0
 802f564:	6a38      	ldr	r0, [r7, #32]
 802f566:	f006 fdbb 	bl	80360e0 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 802f56a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802f56c:	2b00      	cmp	r3, #0
 802f56e:	d009      	beq.n	802f584 <tx_tcp+0x54>
 802f570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802f572:	2b00      	cmp	r3, #0
 802f574:	d006      	beq.n	802f584 <tx_tcp+0x54>
 802f576:	6a3b      	ldr	r3, [r7, #32]
 802f578:	3314      	adds	r3, #20
 802f57a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802f57c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 802f57e:	4618      	mov	r0, r3
 802f580:	f006 fd94 	bl	80360ac <memmove>
  tcp->sport = sport;
 802f584:	6a3b      	ldr	r3, [r7, #32]
 802f586:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 802f58a:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 802f58c:	6a3b      	ldr	r3, [r7, #32]
 802f58e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 802f592:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 802f594:	6a3b      	ldr	r3, [r7, #32]
 802f596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802f598:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 802f59a:	6a3b      	ldr	r3, [r7, #32]
 802f59c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802f59e:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 802f5a0:	6a3b      	ldr	r3, [r7, #32]
 802f5a2:	78fa      	ldrb	r2, [r7, #3]
 802f5a4:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 802f5a6:	f241 7070 	movw	r0, #6000	@ 0x1770
 802f5aa:	f003 fc36 	bl	8032e1a <mg_ntohs>
 802f5ae:	4603      	mov	r3, r0
 802f5b0:	461a      	mov	r2, r3
 802f5b2:	6a3b      	ldr	r3, [r7, #32]
 802f5b4:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 802f5b6:	6a3b      	ldr	r3, [r7, #32]
 802f5b8:	2250      	movs	r2, #80	@ 0x50
 802f5ba:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 802f5bc:	2300      	movs	r3, #0
 802f5be:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 802f5c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802f5c2:	b29b      	uxth	r3, r3
 802f5c4:	3314      	adds	r3, #20
 802f5c6:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 802f5c8:	2300      	movs	r3, #0
 802f5ca:	753b      	strb	r3, [r7, #20]
 802f5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f5ce:	7a5b      	ldrb	r3, [r3, #9]
 802f5d0:	757b      	strb	r3, [r7, #21]
 802f5d2:	8b7b      	ldrh	r3, [r7, #26]
 802f5d4:	0a1b      	lsrs	r3, r3, #8
 802f5d6:	b29b      	uxth	r3, r3
 802f5d8:	b2db      	uxtb	r3, r3
 802f5da:	75bb      	strb	r3, [r7, #22]
 802f5dc:	8b7b      	ldrh	r3, [r7, #26]
 802f5de:	b2db      	uxtb	r3, r3
 802f5e0:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 802f5e2:	8b7b      	ldrh	r3, [r7, #26]
 802f5e4:	461a      	mov	r2, r3
 802f5e6:	6a39      	ldr	r1, [r7, #32]
 802f5e8:	69f8      	ldr	r0, [r7, #28]
 802f5ea:	f7fe fd89 	bl	802e100 <csumup>
 802f5ee:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 802f5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f5f2:	330c      	adds	r3, #12
 802f5f4:	2204      	movs	r2, #4
 802f5f6:	4619      	mov	r1, r3
 802f5f8:	69f8      	ldr	r0, [r7, #28]
 802f5fa:	f7fe fd81 	bl	802e100 <csumup>
 802f5fe:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 802f600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f602:	3310      	adds	r3, #16
 802f604:	2204      	movs	r2, #4
 802f606:	4619      	mov	r1, r3
 802f608:	69f8      	ldr	r0, [r7, #28]
 802f60a:	f7fe fd79 	bl	802e100 <csumup>
 802f60e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 802f610:	f107 0314 	add.w	r3, r7, #20
 802f614:	2204      	movs	r2, #4
 802f616:	4619      	mov	r1, r3
 802f618:	69f8      	ldr	r0, [r7, #28]
 802f61a:	f7fe fd71 	bl	802e100 <csumup>
 802f61e:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 802f620:	69f8      	ldr	r0, [r7, #28]
 802f622:	f7fe fd98 	bl	802e156 <csumfin>
 802f626:	4603      	mov	r3, r0
 802f628:	461a      	mov	r2, r3
 802f62a:	6a3b      	ldr	r3, [r7, #32]
 802f62c:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 802f62e:	4b21      	ldr	r3, [pc, #132]	@ (802f6b4 <tx_tcp+0x184>)
 802f630:	681b      	ldr	r3, [r3, #0]
 802f632:	2b03      	cmp	r3, #3
 802f634:	dd2c      	ble.n	802f690 <tx_tcp+0x160>
 802f636:	4b20      	ldr	r3, [pc, #128]	@ (802f6b8 <tx_tcp+0x188>)
 802f638:	f241 5254 	movw	r2, #5460	@ 0x1554
 802f63c:	491f      	ldr	r1, [pc, #124]	@ (802f6bc <tx_tcp+0x18c>)
 802f63e:	2004      	movs	r0, #4
 802f640:	f7fb ff44 	bl	802b4cc <mg_log_prefix>
 802f644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f646:	f103 050c 	add.w	r5, r3, #12
 802f64a:	6a3b      	ldr	r3, [r7, #32]
 802f64c:	881b      	ldrh	r3, [r3, #0]
 802f64e:	b29b      	uxth	r3, r3
 802f650:	4618      	mov	r0, r3
 802f652:	f003 fbe2 	bl	8032e1a <mg_ntohs>
 802f656:	4603      	mov	r3, r0
 802f658:	461e      	mov	r6, r3
 802f65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f65c:	f103 0410 	add.w	r4, r3, #16
 802f660:	6a3b      	ldr	r3, [r7, #32]
 802f662:	885b      	ldrh	r3, [r3, #2]
 802f664:	b29b      	uxth	r3, r3
 802f666:	4618      	mov	r0, r3
 802f668:	f003 fbd7 	bl	8032e1a <mg_ntohs>
 802f66c:	4603      	mov	r3, r0
 802f66e:	461a      	mov	r2, r3
 802f670:	6a3b      	ldr	r3, [r7, #32]
 802f672:	7b5b      	ldrb	r3, [r3, #13]
 802f674:	4619      	mov	r1, r3
 802f676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802f678:	9304      	str	r3, [sp, #16]
 802f67a:	9103      	str	r1, [sp, #12]
 802f67c:	9202      	str	r2, [sp, #8]
 802f67e:	9401      	str	r4, [sp, #4]
 802f680:	4b0f      	ldr	r3, [pc, #60]	@ (802f6c0 <tx_tcp+0x190>)
 802f682:	9300      	str	r3, [sp, #0]
 802f684:	4633      	mov	r3, r6
 802f686:	462a      	mov	r2, r5
 802f688:	490d      	ldr	r1, [pc, #52]	@ (802f6c0 <tx_tcp+0x190>)
 802f68a:	480e      	ldr	r0, [pc, #56]	@ (802f6c4 <tx_tcp+0x194>)
 802f68c:	f7fb ff6e 	bl	802b56c <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 802f690:	6a3b      	ldr	r3, [r7, #32]
 802f692:	f103 0214 	add.w	r2, r3, #20
 802f696:	68fb      	ldr	r3, [r7, #12]
 802f698:	695b      	ldr	r3, [r3, #20]
 802f69a:	1ad3      	subs	r3, r2, r3
 802f69c:	461a      	mov	r2, r3
 802f69e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802f6a0:	4413      	add	r3, r2
 802f6a2:	4619      	mov	r1, r3
 802f6a4:	68f8      	ldr	r0, [r7, #12]
 802f6a6:	f7fe fde1 	bl	802e26c <ether_output>
 802f6aa:	4603      	mov	r3, r0
}
 802f6ac:	4618      	mov	r0, r3
 802f6ae:	372c      	adds	r7, #44	@ 0x2c
 802f6b0:	46bd      	mov	sp, r7
 802f6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802f6b4:	200002a8 	.word	0x200002a8
 802f6b8:	08044b44 	.word	0x08044b44
 802f6bc:	08041a30 	.word	0x08041a30
 802f6c0:	080316bd 	.word	0x080316bd
 802f6c4:	08043318 	.word	0x08043318

0802f6c8 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 802f6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f6cc:	b08c      	sub	sp, #48	@ 0x30
 802f6ce:	af06      	add	r7, sp, #24
 802f6d0:	60f8      	str	r0, [r7, #12]
 802f6d2:	60b9      	str	r1, [r7, #8]
 802f6d4:	603b      	str	r3, [r7, #0]
 802f6d6:	4613      	mov	r3, r2
 802f6d8:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 802f6da:	68bb      	ldr	r3, [r7, #8]
 802f6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f6de:	7b5b      	ldrb	r3, [r3, #13]
 802f6e0:	f003 0303 	and.w	r3, r3, #3
 802f6e4:	2b00      	cmp	r3, #0
 802f6e6:	bf14      	ite	ne
 802f6e8:	2301      	movne	r3, #1
 802f6ea:	2300      	moveq	r3, #0
 802f6ec:	b2db      	uxtb	r3, r3
 802f6ee:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 802f6f0:	68bb      	ldr	r3, [r7, #8]
 802f6f2:	691b      	ldr	r3, [r3, #16]
 802f6f4:	1d9e      	adds	r6, r3, #6
 802f6f6:	68bb      	ldr	r3, [r7, #8]
 802f6f8:	69db      	ldr	r3, [r3, #28]
 802f6fa:	f8d3 800c 	ldr.w	r8, [r3, #12]
 802f6fe:	68bb      	ldr	r3, [r7, #8]
 802f700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f702:	885b      	ldrh	r3, [r3, #2]
 802f704:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 802f706:	68bb      	ldr	r3, [r7, #8]
 802f708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 802f70a:	881b      	ldrh	r3, [r3, #0]
 802f70c:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 802f70e:	68bb      	ldr	r3, [r7, #8]
 802f710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f712:	685b      	ldr	r3, [r3, #4]
 802f714:	4618      	mov	r0, r3
 802f716:	f003 fb67 	bl	8032de8 <mg_ntohl>
 802f71a:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 802f71c:	697b      	ldr	r3, [r7, #20]
 802f71e:	4413      	add	r3, r2
 802f720:	4618      	mov	r0, r3
 802f722:	f003 fb61 	bl	8032de8 <mg_ntohl>
 802f726:	4601      	mov	r1, r0
 802f728:	79fa      	ldrb	r2, [r7, #7]
 802f72a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f72c:	9305      	str	r3, [sp, #20]
 802f72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802f730:	9304      	str	r3, [sp, #16]
 802f732:	9103      	str	r1, [sp, #12]
 802f734:	683b      	ldr	r3, [r7, #0]
 802f736:	9302      	str	r3, [sp, #8]
 802f738:	9501      	str	r5, [sp, #4]
 802f73a:	9400      	str	r4, [sp, #0]
 802f73c:	4613      	mov	r3, r2
 802f73e:	4642      	mov	r2, r8
 802f740:	4631      	mov	r1, r6
 802f742:	68f8      	ldr	r0, [r7, #12]
 802f744:	f7ff fef4 	bl	802f530 <tx_tcp>
 802f748:	4603      	mov	r3, r0
                buf, len);
}
 802f74a:	4618      	mov	r0, r3
 802f74c:	3718      	adds	r7, #24
 802f74e:	46bd      	mov	sp, r7
 802f750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802f754 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 802f754:	b5b0      	push	{r4, r5, r7, lr}
 802f756:	b084      	sub	sp, #16
 802f758:	af00      	add	r7, sp, #0
 802f75a:	6078      	str	r0, [r7, #4]
 802f75c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 802f75e:	687b      	ldr	r3, [r7, #4]
 802f760:	685b      	ldr	r3, [r3, #4]
 802f762:	4618      	mov	r0, r3
 802f764:	f7fe fa87 	bl	802dc76 <mg_alloc_conn>
 802f768:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 802f76a:	68fb      	ldr	r3, [r7, #12]
 802f76c:	2b00      	cmp	r3, #0
 802f76e:	d10f      	bne.n	802f790 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 802f770:	4b4e      	ldr	r3, [pc, #312]	@ (802f8ac <accept_conn+0x158>)
 802f772:	681b      	ldr	r3, [r3, #0]
 802f774:	2b00      	cmp	r3, #0
 802f776:	dd09      	ble.n	802f78c <accept_conn+0x38>
 802f778:	4b4d      	ldr	r3, [pc, #308]	@ (802f8b0 <accept_conn+0x15c>)
 802f77a:	f241 5268 	movw	r2, #5480	@ 0x1568
 802f77e:	494d      	ldr	r1, [pc, #308]	@ (802f8b4 <accept_conn+0x160>)
 802f780:	2001      	movs	r0, #1
 802f782:	f7fb fea3 	bl	802b4cc <mg_log_prefix>
 802f786:	484c      	ldr	r0, [pc, #304]	@ (802f8b8 <accept_conn+0x164>)
 802f788:	f7fb fef0 	bl	802b56c <mg_log>
    return NULL;
 802f78c:	2300      	movs	r3, #0
 802f78e:	e088      	b.n	802f8a2 <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 802f790:	68fb      	ldr	r3, [r7, #12]
 802f792:	33b0      	adds	r3, #176	@ 0xb0
 802f794:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 802f796:	683b      	ldr	r3, [r7, #0]
 802f798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f79a:	689b      	ldr	r3, [r3, #8]
 802f79c:	4618      	mov	r0, r3
 802f79e:	f003 fb23 	bl	8032de8 <mg_ntohl>
 802f7a2:	4602      	mov	r2, r0
 802f7a4:	68bb      	ldr	r3, [r7, #8]
 802f7a6:	601a      	str	r2, [r3, #0]
 802f7a8:	683b      	ldr	r3, [r7, #0]
 802f7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f7ac:	685b      	ldr	r3, [r3, #4]
 802f7ae:	4618      	mov	r0, r3
 802f7b0:	f003 fb1a 	bl	8032de8 <mg_ntohl>
 802f7b4:	4602      	mov	r2, r0
 802f7b6:	68bb      	ldr	r3, [r7, #8]
 802f7b8:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 802f7ba:	68bb      	ldr	r3, [r7, #8]
 802f7bc:	f103 0018 	add.w	r0, r3, #24
 802f7c0:	683b      	ldr	r3, [r7, #0]
 802f7c2:	691b      	ldr	r3, [r3, #16]
 802f7c4:	3306      	adds	r3, #6
 802f7c6:	2206      	movs	r2, #6
 802f7c8:	4619      	mov	r1, r3
 802f7ca:	f007 fec5 	bl	8037558 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 802f7ce:	2100      	movs	r1, #0
 802f7d0:	68f8      	ldr	r0, [r7, #12]
 802f7d2:	f7fe fcef 	bl	802e1b4 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802f7d6:	68fb      	ldr	r3, [r7, #12]
 802f7d8:	331c      	adds	r3, #28
 802f7da:	683a      	ldr	r2, [r7, #0]
 802f7dc:	69d2      	ldr	r2, [r2, #28]
 802f7de:	320c      	adds	r2, #12
 802f7e0:	6812      	ldr	r2, [r2, #0]
 802f7e2:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 802f7e4:	683b      	ldr	r3, [r7, #0]
 802f7e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802f7e8:	881b      	ldrh	r3, [r3, #0]
 802f7ea:	b29a      	uxth	r2, r3
 802f7ec:	68fb      	ldr	r3, [r7, #12]
 802f7ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 802f7f0:	4b2e      	ldr	r3, [pc, #184]	@ (802f8ac <accept_conn+0x158>)
 802f7f2:	681b      	ldr	r3, [r3, #0]
 802f7f4:	2b02      	cmp	r3, #2
 802f7f6:	dd0e      	ble.n	802f816 <accept_conn+0xc2>
 802f7f8:	4b2d      	ldr	r3, [pc, #180]	@ (802f8b0 <accept_conn+0x15c>)
 802f7fa:	f241 5271 	movw	r2, #5489	@ 0x1571
 802f7fe:	492d      	ldr	r1, [pc, #180]	@ (802f8b4 <accept_conn+0x160>)
 802f800:	2003      	movs	r0, #3
 802f802:	f7fb fe63 	bl	802b4cc <mg_log_prefix>
 802f806:	68fb      	ldr	r3, [r7, #12]
 802f808:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802f80a:	68fb      	ldr	r3, [r7, #12]
 802f80c:	331c      	adds	r3, #28
 802f80e:	4a2b      	ldr	r2, [pc, #172]	@ (802f8bc <accept_conn+0x168>)
 802f810:	482b      	ldr	r0, [pc, #172]	@ (802f8c0 <accept_conn+0x16c>)
 802f812:	f7fb feab 	bl	802b56c <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 802f816:	687b      	ldr	r3, [r7, #4]
 802f818:	685b      	ldr	r3, [r3, #4]
 802f81a:	681a      	ldr	r2, [r3, #0]
 802f81c:	68fb      	ldr	r3, [r7, #12]
 802f81e:	601a      	str	r2, [r3, #0]
 802f820:	687b      	ldr	r3, [r7, #4]
 802f822:	685b      	ldr	r3, [r3, #4]
 802f824:	68fa      	ldr	r2, [r7, #12]
 802f826:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 802f828:	68fa      	ldr	r2, [r7, #12]
 802f82a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802f82e:	f043 0304 	orr.w	r3, r3, #4
 802f832:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 802f836:	687b      	ldr	r3, [r7, #4]
 802f838:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802f83c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 802f840:	b2d9      	uxtb	r1, r3
 802f842:	68fa      	ldr	r2, [r7, #12]
 802f844:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802f848:	f361 03c3 	bfi	r3, r1, #3, #1
 802f84c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 802f850:	687b      	ldr	r3, [r7, #4]
 802f852:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 802f856:	68fb      	ldr	r3, [r7, #12]
 802f858:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 802f85c:	68fa      	ldr	r2, [r7, #12]
 802f85e:	687b      	ldr	r3, [r7, #4]
 802f860:	f102 0408 	add.w	r4, r2, #8
 802f864:	f103 0508 	add.w	r5, r3, #8
 802f868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802f86a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802f86c:	682b      	ldr	r3, [r5, #0]
 802f86e:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 802f870:	687b      	ldr	r3, [r7, #4]
 802f872:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 802f876:	68fb      	ldr	r3, [r7, #12]
 802f878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 802f87c:	687b      	ldr	r3, [r7, #4]
 802f87e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 802f880:	68fb      	ldr	r3, [r7, #12]
 802f882:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 802f884:	687b      	ldr	r3, [r7, #4]
 802f886:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 802f888:	68fb      	ldr	r3, [r7, #12]
 802f88a:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 802f88c:	2200      	movs	r2, #0
 802f88e:	2101      	movs	r1, #1
 802f890:	68f8      	ldr	r0, [r7, #12]
 802f892:	f7f6 fa35 	bl	8025d00 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 802f896:	2200      	movs	r2, #0
 802f898:	2105      	movs	r1, #5
 802f89a:	68f8      	ldr	r0, [r7, #12]
 802f89c:	f7f6 fa30 	bl	8025d00 <mg_call>
  return c;
 802f8a0:	68fb      	ldr	r3, [r7, #12]
}
 802f8a2:	4618      	mov	r0, r3
 802f8a4:	3710      	adds	r7, #16
 802f8a6:	46bd      	mov	sp, r7
 802f8a8:	bdb0      	pop	{r4, r5, r7, pc}
 802f8aa:	bf00      	nop
 802f8ac:	200002a8 	.word	0x200002a8
 802f8b0:	08044b4c 	.word	0x08044b4c
 802f8b4:	08041a30 	.word	0x08041a30
 802f8b8:	08042f6c 	.word	0x08042f6c
 802f8bc:	08031735 	.word	0x08031735
 802f8c0:	0804333c 	.word	0x0804333c

0802f8c4 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 802f8c4:	b580      	push	{r7, lr}
 802f8c6:	b08a      	sub	sp, #40	@ 0x28
 802f8c8:	af00      	add	r7, sp, #0
 802f8ca:	6078      	str	r0, [r7, #4]
 802f8cc:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802f8ce:	687b      	ldr	r3, [r7, #4]
 802f8d0:	685b      	ldr	r3, [r3, #4]
 802f8d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f8d4:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 802f8d6:	230e      	movs	r3, #14
 802f8d8:	623b      	str	r3, [r7, #32]
 802f8da:	2318      	movs	r3, #24
 802f8dc:	61fb      	str	r3, [r7, #28]
 802f8de:	233c      	movs	r3, #60	@ 0x3c
 802f8e0:	61bb      	str	r3, [r7, #24]
 802f8e2:	2308      	movs	r3, #8
 802f8e4:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 802f8e6:	6a3a      	ldr	r2, [r7, #32]
 802f8e8:	69fb      	ldr	r3, [r7, #28]
 802f8ea:	441a      	add	r2, r3
 802f8ec:	687b      	ldr	r3, [r7, #4]
 802f8ee:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802f8f2:	f003 0301 	and.w	r3, r3, #1
 802f8f6:	b2db      	uxtb	r3, r3
 802f8f8:	2b00      	cmp	r3, #0
 802f8fa:	d001      	beq.n	802f900 <trim_len+0x3c>
 802f8fc:	697b      	ldr	r3, [r7, #20]
 802f8fe:	e000      	b.n	802f902 <trim_len+0x3e>
 802f900:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 802f902:	4413      	add	r3, r2
 802f904:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 802f906:	687b      	ldr	r3, [r7, #4]
 802f908:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802f90c:	f003 0301 	and.w	r3, r3, #1
 802f910:	b2db      	uxtb	r3, r3
 802f912:	2b00      	cmp	r3, #0
 802f914:	d103      	bne.n	802f91e <trim_len+0x5a>
 802f916:	693a      	ldr	r2, [r7, #16]
 802f918:	6a3b      	ldr	r3, [r7, #32]
 802f91a:	1ad3      	subs	r3, r2, r3
 802f91c:	e000      	b.n	802f920 <trim_len+0x5c>
 802f91e:	2344      	movs	r3, #68	@ 0x44
 802f920:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 802f922:	683a      	ldr	r2, [r7, #0]
 802f924:	693b      	ldr	r3, [r7, #16]
 802f926:	441a      	add	r2, r3
 802f928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f92a:	699b      	ldr	r3, [r3, #24]
 802f92c:	429a      	cmp	r2, r3
 802f92e:	d904      	bls.n	802f93a <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 802f930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f932:	699a      	ldr	r2, [r3, #24]
 802f934:	693b      	ldr	r3, [r7, #16]
 802f936:	1ad3      	subs	r3, r2, r3
 802f938:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 802f93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f93c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 802f940:	461a      	mov	r2, r3
 802f942:	68fb      	ldr	r3, [r7, #12]
 802f944:	4293      	cmp	r3, r2
 802f946:	d913      	bls.n	802f970 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802f948:	4b20      	ldr	r3, [pc, #128]	@ (802f9cc <trim_len+0x108>)
 802f94a:	681b      	ldr	r3, [r3, #0]
 802f94c:	2b00      	cmp	r3, #0
 802f94e:	dd0a      	ble.n	802f966 <trim_len+0xa2>
 802f950:	4b1f      	ldr	r3, [pc, #124]	@ (802f9d0 <trim_len+0x10c>)
 802f952:	f241 528c 	movw	r2, #5516	@ 0x158c
 802f956:	491f      	ldr	r1, [pc, #124]	@ (802f9d4 <trim_len+0x110>)
 802f958:	2001      	movs	r0, #1
 802f95a:	f7fb fdb7 	bl	802b4cc <mg_log_prefix>
 802f95e:	68f9      	ldr	r1, [r7, #12]
 802f960:	481d      	ldr	r0, [pc, #116]	@ (802f9d8 <trim_len+0x114>)
 802f962:	f7fb fe03 	bl	802b56c <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 802f966:	68fb      	ldr	r3, [r7, #12]
 802f968:	b29a      	uxth	r2, r3
 802f96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f96c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 802f970:	683a      	ldr	r2, [r7, #0]
 802f972:	693b      	ldr	r3, [r7, #16]
 802f974:	441a      	add	r2, r3
 802f976:	6a3b      	ldr	r3, [r7, #32]
 802f978:	1ad3      	subs	r3, r2, r3
 802f97a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802f97c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	@ 0x44
 802f980:	4293      	cmp	r3, r2
 802f982:	d91e      	bls.n	802f9c2 <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 802f984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f986:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 802f98a:	461a      	mov	r2, r3
 802f98c:	693b      	ldr	r3, [r7, #16]
 802f98e:	1ad3      	subs	r3, r2, r3
 802f990:	6a3a      	ldr	r2, [r7, #32]
 802f992:	4413      	add	r3, r2
 802f994:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 802f996:	687b      	ldr	r3, [r7, #4]
 802f998:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802f99c:	f003 0301 	and.w	r3, r3, #1
 802f9a0:	b2db      	uxtb	r3, r3
 802f9a2:	2b00      	cmp	r3, #0
 802f9a4:	d00d      	beq.n	802f9c2 <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 802f9a6:	4b09      	ldr	r3, [pc, #36]	@ (802f9cc <trim_len+0x108>)
 802f9a8:	681b      	ldr	r3, [r3, #0]
 802f9aa:	2b00      	cmp	r3, #0
 802f9ac:	dd09      	ble.n	802f9c2 <trim_len+0xfe>
 802f9ae:	4b08      	ldr	r3, [pc, #32]	@ (802f9d0 <trim_len+0x10c>)
 802f9b0:	f241 5293 	movw	r2, #5523	@ 0x1593
 802f9b4:	4907      	ldr	r1, [pc, #28]	@ (802f9d4 <trim_len+0x110>)
 802f9b6:	2001      	movs	r0, #1
 802f9b8:	f7fb fd88 	bl	802b4cc <mg_log_prefix>
 802f9bc:	4807      	ldr	r0, [pc, #28]	@ (802f9dc <trim_len+0x118>)
 802f9be:	f7fb fdd5 	bl	802b56c <mg_log>
    }
  }

  return len;
 802f9c2:	683b      	ldr	r3, [r7, #0]
}
 802f9c4:	4618      	mov	r0, r3
 802f9c6:	3728      	adds	r7, #40	@ 0x28
 802f9c8:	46bd      	mov	sp, r7
 802f9ca:	bd80      	pop	{r7, pc}
 802f9cc:	200002a8 	.word	0x200002a8
 802f9d0:	08044b58 	.word	0x08044b58
 802f9d4:	08041a30 	.word	0x08041a30
 802f9d8:	0804334c 	.word	0x0804334c
 802f9dc:	08043378 	.word	0x08043378

0802f9e0 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 802f9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f9e2:	b08f      	sub	sp, #60	@ 0x3c
 802f9e4:	af06      	add	r7, sp, #24
 802f9e6:	60f8      	str	r0, [r7, #12]
 802f9e8:	60b9      	str	r1, [r7, #8]
 802f9ea:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802f9ec:	68fb      	ldr	r3, [r7, #12]
 802f9ee:	685b      	ldr	r3, [r3, #4]
 802f9f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f9f2:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 802f9f4:	68fb      	ldr	r3, [r7, #12]
 802f9f6:	33b0      	adds	r3, #176	@ 0xb0
 802f9f8:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 802f9fa:	68fb      	ldr	r3, [r7, #12]
 802f9fc:	331c      	adds	r3, #28
 802f9fe:	681b      	ldr	r3, [r3, #0]
 802fa00:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 802fa02:	6879      	ldr	r1, [r7, #4]
 802fa04:	68f8      	ldr	r0, [r7, #12]
 802fa06:	f7ff ff5d 	bl	802f8c4 <trim_len>
 802fa0a:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 802fa0c:	68fb      	ldr	r3, [r7, #12]
 802fa0e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802fa12:	f003 0301 	and.w	r3, r3, #1
 802fa16:	b2db      	uxtb	r3, r3
 802fa18:	2b00      	cmp	r3, #0
 802fa1a:	d015      	beq.n	802fa48 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 802fa1c:	69bb      	ldr	r3, [r7, #24]
 802fa1e:	f103 0118 	add.w	r1, r3, #24
 802fa22:	69fb      	ldr	r3, [r7, #28]
 802fa24:	6898      	ldr	r0, [r3, #8]
 802fa26:	68fb      	ldr	r3, [r7, #12]
 802fa28:	8b1c      	ldrh	r4, [r3, #24]
 802fa2a:	68fb      	ldr	r3, [r7, #12]
 802fa2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 802fa2e:	687a      	ldr	r2, [r7, #4]
 802fa30:	9203      	str	r2, [sp, #12]
 802fa32:	68ba      	ldr	r2, [r7, #8]
 802fa34:	9202      	str	r2, [sp, #8]
 802fa36:	9301      	str	r3, [sp, #4]
 802fa38:	697b      	ldr	r3, [r7, #20]
 802fa3a:	9300      	str	r3, [sp, #0]
 802fa3c:	4623      	mov	r3, r4
 802fa3e:	4602      	mov	r2, r0
 802fa40:	69f8      	ldr	r0, [r7, #28]
 802fa42:	f7fe fd77 	bl	802e534 <tx_udp>
 802fa46:	e03d      	b.n	802fac4 <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 802fa48:	69bb      	ldr	r3, [r7, #24]
 802fa4a:	f103 0618 	add.w	r6, r3, #24
 802fa4e:	68fb      	ldr	r3, [r7, #12]
 802fa50:	8b1c      	ldrh	r4, [r3, #24]
 802fa52:	68fb      	ldr	r3, [r7, #12]
 802fa54:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 802fa56:	69bb      	ldr	r3, [r7, #24]
 802fa58:	681b      	ldr	r3, [r3, #0]
 802fa5a:	4618      	mov	r0, r3
 802fa5c:	f003 f9c4 	bl	8032de8 <mg_ntohl>
 802fa60:	6038      	str	r0, [r7, #0]
 802fa62:	69bb      	ldr	r3, [r7, #24]
 802fa64:	685b      	ldr	r3, [r3, #4]
 802fa66:	4618      	mov	r0, r3
 802fa68:	f003 f9be 	bl	8032de8 <mg_ntohl>
 802fa6c:	4602      	mov	r2, r0
 802fa6e:	687b      	ldr	r3, [r7, #4]
 802fa70:	9305      	str	r3, [sp, #20]
 802fa72:	68bb      	ldr	r3, [r7, #8]
 802fa74:	9304      	str	r3, [sp, #16]
 802fa76:	9203      	str	r2, [sp, #12]
 802fa78:	683b      	ldr	r3, [r7, #0]
 802fa7a:	9302      	str	r3, [sp, #8]
 802fa7c:	9501      	str	r5, [sp, #4]
 802fa7e:	9400      	str	r4, [sp, #0]
 802fa80:	2318      	movs	r3, #24
 802fa82:	697a      	ldr	r2, [r7, #20]
 802fa84:	4631      	mov	r1, r6
 802fa86:	69f8      	ldr	r0, [r7, #28]
 802fa88:	f7ff fd52 	bl	802f530 <tx_tcp>
 802fa8c:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 802fa8e:	693b      	ldr	r3, [r7, #16]
 802fa90:	2b00      	cmp	r3, #0
 802fa92:	d102      	bne.n	802fa9a <mg_io_send+0xba>
      return MG_IO_WAIT;
 802fa94:	f06f 0301 	mvn.w	r3, #1
 802fa98:	e015      	b.n	802fac6 <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 802fa9a:	693b      	ldr	r3, [r7, #16]
 802fa9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802faa0:	d102      	bne.n	802faa8 <mg_io_send+0xc8>
      return MG_IO_ERR;
 802faa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802faa6:	e00e      	b.n	802fac6 <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 802faa8:	69bb      	ldr	r3, [r7, #24]
 802faaa:	681a      	ldr	r2, [r3, #0]
 802faac:	687b      	ldr	r3, [r7, #4]
 802faae:	441a      	add	r2, r3
 802fab0:	69bb      	ldr	r3, [r7, #24]
 802fab2:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 802fab4:	69bb      	ldr	r3, [r7, #24]
 802fab6:	7f9b      	ldrb	r3, [r3, #30]
 802fab8:	2b01      	cmp	r3, #1
 802faba:	d103      	bne.n	802fac4 <mg_io_send+0xe4>
 802fabc:	2100      	movs	r1, #0
 802fabe:	68f8      	ldr	r0, [r7, #12]
 802fac0:	f7fe fb78 	bl	802e1b4 <settmout>
    }
  }
  return (long) len;
 802fac4:	687b      	ldr	r3, [r7, #4]
}
 802fac6:	4618      	mov	r0, r3
 802fac8:	3724      	adds	r7, #36	@ 0x24
 802faca:	46bd      	mov	sp, r7
 802facc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0802fad0 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 802fad0:	b580      	push	{r7, lr}
 802fad2:	b084      	sub	sp, #16
 802fad4:	af00      	add	r7, sp, #0
 802fad6:	6078      	str	r0, [r7, #4]
 802fad8:	6039      	str	r1, [r7, #0]
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 802fada:	683b      	ldr	r3, [r7, #0]
 802fadc:	681a      	ldr	r2, [r3, #0]
 802fade:	683b      	ldr	r3, [r7, #0]
 802fae0:	689b      	ldr	r3, [r3, #8]
 802fae2:	18d1      	adds	r1, r2, r3
 802fae4:	683b      	ldr	r3, [r7, #0]
 802fae6:	685a      	ldr	r2, [r3, #4]
 802fae8:	683b      	ldr	r3, [r7, #0]
 802faea:	689b      	ldr	r3, [r3, #8]
 802faec:	1ad3      	subs	r3, r2, r3
 802faee:	461a      	mov	r2, r3
 802faf0:	6878      	ldr	r0, [r7, #4]
 802faf2:	f002 ff51 	bl	8032998 <mg_tls_recv>
 802faf6:	4603      	mov	r3, r0
 802faf8:	60fb      	str	r3, [r7, #12]
  if (n == MG_IO_ERR) {
 802fafa:	68fb      	ldr	r3, [r7, #12]
 802fafc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802fb00:	d104      	bne.n	802fb0c <handle_tls_recv+0x3c>
    mg_error(c, "TLS recv error");
 802fb02:	490c      	ldr	r1, [pc, #48]	@ (802fb34 <handle_tls_recv+0x64>)
 802fb04:	6878      	ldr	r0, [r7, #4]
 802fb06:	f7f6 f91b 	bl	8025d40 <mg_error>
  } else if (n > 0) {
    // Decrypted successfully - trigger MG_EV_READ
    io->len += (size_t) n;
    mg_call(c, MG_EV_READ, &n);
  }
}
 802fb0a:	e00f      	b.n	802fb2c <handle_tls_recv+0x5c>
  } else if (n > 0) {
 802fb0c:	68fb      	ldr	r3, [r7, #12]
 802fb0e:	2b00      	cmp	r3, #0
 802fb10:	dd0c      	ble.n	802fb2c <handle_tls_recv+0x5c>
    io->len += (size_t) n;
 802fb12:	683b      	ldr	r3, [r7, #0]
 802fb14:	689b      	ldr	r3, [r3, #8]
 802fb16:	68fa      	ldr	r2, [r7, #12]
 802fb18:	441a      	add	r2, r3
 802fb1a:	683b      	ldr	r3, [r7, #0]
 802fb1c:	609a      	str	r2, [r3, #8]
    mg_call(c, MG_EV_READ, &n);
 802fb1e:	f107 030c 	add.w	r3, r7, #12
 802fb22:	461a      	mov	r2, r3
 802fb24:	2107      	movs	r1, #7
 802fb26:	6878      	ldr	r0, [r7, #4]
 802fb28:	f7f6 f8ea 	bl	8025d00 <mg_call>
}
 802fb2c:	bf00      	nop
 802fb2e:	3710      	adds	r7, #16
 802fb30:	46bd      	mov	sp, r7
 802fb32:	bd80      	pop	{r7, pc}
 802fb34:	080433a4 	.word	0x080433a4

0802fb38 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 802fb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802fb3c:	b090      	sub	sp, #64	@ 0x40
 802fb3e:	af06      	add	r7, sp, #24
 802fb40:	60f8      	str	r0, [r7, #12]
 802fb42:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 802fb44:	68fb      	ldr	r3, [r7, #12]
 802fb46:	33b0      	adds	r3, #176	@ 0xb0
 802fb48:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 802fb4a:	68fb      	ldr	r3, [r7, #12]
 802fb4c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802fb50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802fb54:	b2db      	uxtb	r3, r3
 802fb56:	2b00      	cmp	r3, #0
 802fb58:	d002      	beq.n	802fb60 <read_conn+0x28>
 802fb5a:	68fb      	ldr	r3, [r7, #12]
 802fb5c:	3368      	adds	r3, #104	@ 0x68
 802fb5e:	e001      	b.n	802fb64 <read_conn+0x2c>
 802fb60:	68fb      	ldr	r3, [r7, #12]
 802fb62:	3338      	adds	r3, #56	@ 0x38
 802fb64:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 802fb66:	68bb      	ldr	r3, [r7, #8]
 802fb68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fb6a:	685b      	ldr	r3, [r3, #4]
 802fb6c:	4618      	mov	r0, r3
 802fb6e:	f003 f93b 	bl	8032de8 <mg_ntohl>
 802fb72:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802fb74:	68fb      	ldr	r3, [r7, #12]
 802fb76:	331c      	adds	r3, #28
 802fb78:	681b      	ldr	r3, [r3, #0]
 802fb7a:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 802fb7c:	68bb      	ldr	r3, [r7, #8]
 802fb7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fb80:	7b5b      	ldrb	r3, [r3, #13]
 802fb82:	f003 0301 	and.w	r3, r3, #1
 802fb86:	2b00      	cmp	r3, #0
 802fb88:	d070      	beq.n	802fc6c <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 802fb8a:	2310      	movs	r3, #16
 802fb8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 802fb90:	68bb      	ldr	r3, [r7, #8]
 802fb92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fb94:	685b      	ldr	r3, [r3, #4]
 802fb96:	4618      	mov	r0, r3
 802fb98:	f003 f926 	bl	8032de8 <mg_ntohl>
 802fb9c:	4602      	mov	r2, r0
 802fb9e:	68bb      	ldr	r3, [r7, #8]
 802fba0:	68db      	ldr	r3, [r3, #12]
 802fba2:	4413      	add	r3, r2
 802fba4:	1c5a      	adds	r2, r3, #1
 802fba6:	6a3b      	ldr	r3, [r7, #32]
 802fba8:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 802fbaa:	68fb      	ldr	r3, [r7, #12]
 802fbac:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802fbb0:	f003 0310 	and.w	r3, r3, #16
 802fbb4:	b2db      	uxtb	r3, r3
 802fbb6:	2b00      	cmp	r3, #0
 802fbb8:	d01e      	beq.n	802fbf8 <read_conn+0xc0>
 802fbba:	6a3b      	ldr	r3, [r7, #32]
 802fbbc:	7f9b      	ldrb	r3, [r3, #30]
 802fbbe:	2b04      	cmp	r3, #4
 802fbc0:	d11a      	bne.n	802fbf8 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 802fbc2:	6a3b      	ldr	r3, [r7, #32]
 802fbc4:	681c      	ldr	r4, [r3, #0]
 802fbc6:	68bb      	ldr	r3, [r7, #8]
 802fbc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fbca:	689b      	ldr	r3, [r3, #8]
 802fbcc:	4618      	mov	r0, r3
 802fbce:	f003 f90b 	bl	8032de8 <mg_ntohl>
 802fbd2:	4603      	mov	r3, r0
 802fbd4:	429c      	cmp	r4, r3
 802fbd6:	d105      	bne.n	802fbe4 <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 802fbd8:	6a3b      	ldr	r3, [r7, #32]
 802fbda:	681b      	ldr	r3, [r3, #0]
 802fbdc:	1c5a      	adds	r2, r3, #1
 802fbde:	6a3b      	ldr	r3, [r7, #32]
 802fbe0:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 802fbe2:	e01a      	b.n	802fc1a <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 802fbe4:	68bb      	ldr	r3, [r7, #8]
 802fbe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fbe8:	689b      	ldr	r3, [r3, #8]
 802fbea:	4618      	mov	r0, r3
 802fbec:	f003 f8fc 	bl	8032de8 <mg_ntohl>
 802fbf0:	4602      	mov	r2, r0
 802fbf2:	6a3b      	ldr	r3, [r7, #32]
 802fbf4:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 802fbf6:	e010      	b.n	802fc1a <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 802fbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802fbfc:	f043 0301 	orr.w	r3, r3, #1
 802fc00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 802fc04:	68fa      	ldr	r2, [r7, #12]
 802fc06:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802fc0a:	f043 0310 	orr.w	r3, r3, #16
 802fc0e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 802fc12:	2104      	movs	r1, #4
 802fc14:	68f8      	ldr	r0, [r7, #12]
 802fc16:	f7fe facd 	bl	802e1b4 <settmout>
    }
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 802fc1a:	68fb      	ldr	r3, [r7, #12]
 802fc1c:	685b      	ldr	r3, [r3, #4]
 802fc1e:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 802fc20:	6a3b      	ldr	r3, [r7, #32]
 802fc22:	f103 0818 	add.w	r8, r3, #24
 802fc26:	693b      	ldr	r3, [r7, #16]
 802fc28:	607b      	str	r3, [r7, #4]
 802fc2a:	68fb      	ldr	r3, [r7, #12]
 802fc2c:	8b1c      	ldrh	r4, [r3, #24]
 802fc2e:	68fb      	ldr	r3, [r7, #12]
 802fc30:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 802fc32:	6a3b      	ldr	r3, [r7, #32]
 802fc34:	681b      	ldr	r3, [r3, #0]
 802fc36:	4618      	mov	r0, r3
 802fc38:	f003 f8d6 	bl	8032de8 <mg_ntohl>
 802fc3c:	6038      	str	r0, [r7, #0]
 802fc3e:	6a3b      	ldr	r3, [r7, #32]
 802fc40:	685b      	ldr	r3, [r3, #4]
 802fc42:	4618      	mov	r0, r3
 802fc44:	f003 f8d0 	bl	8032de8 <mg_ntohl>
 802fc48:	4602      	mov	r2, r0
 802fc4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802fc4e:	2100      	movs	r1, #0
 802fc50:	9105      	str	r1, [sp, #20]
 802fc52:	4990      	ldr	r1, [pc, #576]	@ (802fe94 <read_conn+0x35c>)
 802fc54:	9104      	str	r1, [sp, #16]
 802fc56:	9203      	str	r2, [sp, #12]
 802fc58:	6839      	ldr	r1, [r7, #0]
 802fc5a:	9102      	str	r1, [sp, #8]
 802fc5c:	9501      	str	r5, [sp, #4]
 802fc5e:	9400      	str	r4, [sp, #0]
 802fc60:	687a      	ldr	r2, [r7, #4]
 802fc62:	4641      	mov	r1, r8
 802fc64:	4630      	mov	r0, r6
 802fc66:	f7ff fc63 	bl	802f530 <tx_tcp>
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 802fc6a:	e173      	b.n	802ff54 <read_conn+0x41c>
  } else if (pkt->pay.len == 0) {
 802fc6c:	68bb      	ldr	r3, [r7, #8]
 802fc6e:	68db      	ldr	r3, [r3, #12]
 802fc70:	2b00      	cmp	r3, #0
 802fc72:	f000 816f 	beq.w	802ff54 <read_conn+0x41c>
  } else if (seq != s->ack) {
 802fc76:	6a3b      	ldr	r3, [r7, #32]
 802fc78:	685b      	ldr	r3, [r3, #4]
 802fc7a:	69ba      	ldr	r2, [r7, #24]
 802fc7c:	429a      	cmp	r2, r3
 802fc7e:	d059      	beq.n	802fd34 <read_conn+0x1fc>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 802fc80:	68bb      	ldr	r3, [r7, #8]
 802fc82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fc84:	685b      	ldr	r3, [r3, #4]
 802fc86:	4618      	mov	r0, r3
 802fc88:	f003 f8ae 	bl	8032de8 <mg_ntohl>
 802fc8c:	4602      	mov	r2, r0
 802fc8e:	68bb      	ldr	r3, [r7, #8]
 802fc90:	68db      	ldr	r3, [r3, #12]
 802fc92:	4413      	add	r3, r2
 802fc94:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 802fc96:	6a3b      	ldr	r3, [r7, #32]
 802fc98:	685b      	ldr	r3, [r3, #4]
 802fc9a:	697a      	ldr	r2, [r7, #20]
 802fc9c:	429a      	cmp	r2, r3
 802fc9e:	d10f      	bne.n	802fcc0 <read_conn+0x188>
      MG_VERBOSE(("ignoring duplicate pkt"));
 802fca0:	4b7d      	ldr	r3, [pc, #500]	@ (802fe98 <read_conn+0x360>)
 802fca2:	681b      	ldr	r3, [r3, #0]
 802fca4:	2b03      	cmp	r3, #3
 802fca6:	f340 8155 	ble.w	802ff54 <read_conn+0x41c>
 802fcaa:	4b7c      	ldr	r3, [pc, #496]	@ (802fe9c <read_conn+0x364>)
 802fcac:	f241 52da 	movw	r2, #5594	@ 0x15da
 802fcb0:	497b      	ldr	r1, [pc, #492]	@ (802fea0 <read_conn+0x368>)
 802fcb2:	2004      	movs	r0, #4
 802fcb4:	f7fb fc0a 	bl	802b4cc <mg_log_prefix>
 802fcb8:	487a      	ldr	r0, [pc, #488]	@ (802fea4 <read_conn+0x36c>)
 802fcba:	f7fb fc57 	bl	802b56c <mg_log>
}
 802fcbe:	e149      	b.n	802ff54 <read_conn+0x41c>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 802fcc0:	4b75      	ldr	r3, [pc, #468]	@ (802fe98 <read_conn+0x360>)
 802fcc2:	681b      	ldr	r3, [r3, #0]
 802fcc4:	2b03      	cmp	r3, #3
 802fcc6:	dd0d      	ble.n	802fce4 <read_conn+0x1ac>
 802fcc8:	4b74      	ldr	r3, [pc, #464]	@ (802fe9c <read_conn+0x364>)
 802fcca:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 802fcce:	4974      	ldr	r1, [pc, #464]	@ (802fea0 <read_conn+0x368>)
 802fcd0:	2004      	movs	r0, #4
 802fcd2:	f7fb fbfb 	bl	802b4cc <mg_log_prefix>
 802fcd6:	6a3b      	ldr	r3, [r7, #32]
 802fcd8:	685a      	ldr	r2, [r3, #4]
 802fcda:	697b      	ldr	r3, [r7, #20]
 802fcdc:	69b9      	ldr	r1, [r7, #24]
 802fcde:	4872      	ldr	r0, [pc, #456]	@ (802fea8 <read_conn+0x370>)
 802fce0:	f7fb fc44 	bl	802b56c <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 802fce4:	68fb      	ldr	r3, [r7, #12]
 802fce6:	685b      	ldr	r3, [r3, #4]
 802fce8:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 802fcea:	6a3b      	ldr	r3, [r7, #32]
 802fcec:	f103 0818 	add.w	r8, r3, #24
 802fcf0:	693b      	ldr	r3, [r7, #16]
 802fcf2:	607b      	str	r3, [r7, #4]
 802fcf4:	68fb      	ldr	r3, [r7, #12]
 802fcf6:	8b1c      	ldrh	r4, [r3, #24]
 802fcf8:	68fb      	ldr	r3, [r7, #12]
 802fcfa:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 802fcfc:	6a3b      	ldr	r3, [r7, #32]
 802fcfe:	681b      	ldr	r3, [r3, #0]
 802fd00:	4618      	mov	r0, r3
 802fd02:	f003 f871 	bl	8032de8 <mg_ntohl>
 802fd06:	6038      	str	r0, [r7, #0]
 802fd08:	6a3b      	ldr	r3, [r7, #32]
 802fd0a:	685b      	ldr	r3, [r3, #4]
 802fd0c:	4618      	mov	r0, r3
 802fd0e:	f003 f86b 	bl	8032de8 <mg_ntohl>
 802fd12:	4603      	mov	r3, r0
 802fd14:	2200      	movs	r2, #0
 802fd16:	9205      	str	r2, [sp, #20]
 802fd18:	4a5e      	ldr	r2, [pc, #376]	@ (802fe94 <read_conn+0x35c>)
 802fd1a:	9204      	str	r2, [sp, #16]
 802fd1c:	9303      	str	r3, [sp, #12]
 802fd1e:	6839      	ldr	r1, [r7, #0]
 802fd20:	9102      	str	r1, [sp, #8]
 802fd22:	9501      	str	r5, [sp, #4]
 802fd24:	9400      	str	r4, [sp, #0]
 802fd26:	2310      	movs	r3, #16
 802fd28:	687a      	ldr	r2, [r7, #4]
 802fd2a:	4641      	mov	r1, r8
 802fd2c:	4630      	mov	r0, r6
 802fd2e:	f7ff fbff 	bl	802f530 <tx_tcp>
}
 802fd32:	e10f      	b.n	802ff54 <read_conn+0x41c>
  } else if (io->size - io->len < pkt->pay.len &&
 802fd34:	69fb      	ldr	r3, [r7, #28]
 802fd36:	685a      	ldr	r2, [r3, #4]
 802fd38:	69fb      	ldr	r3, [r7, #28]
 802fd3a:	689b      	ldr	r3, [r3, #8]
 802fd3c:	1ad2      	subs	r2, r2, r3
 802fd3e:	68bb      	ldr	r3, [r7, #8]
 802fd40:	68db      	ldr	r3, [r3, #12]
 802fd42:	429a      	cmp	r2, r3
 802fd44:	d210      	bcs.n	802fd68 <read_conn+0x230>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 802fd46:	69fb      	ldr	r3, [r7, #28]
 802fd48:	689a      	ldr	r2, [r3, #8]
 802fd4a:	68bb      	ldr	r3, [r7, #8]
 802fd4c:	68db      	ldr	r3, [r3, #12]
 802fd4e:	4413      	add	r3, r2
 802fd50:	4619      	mov	r1, r3
 802fd52:	69f8      	ldr	r0, [r7, #28]
 802fd54:	f7fa fbca 	bl	802a4ec <mg_iobuf_resize>
 802fd58:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 802fd5a:	2b00      	cmp	r3, #0
 802fd5c:	d104      	bne.n	802fd68 <read_conn+0x230>
    mg_error(c, "oom");
 802fd5e:	4953      	ldr	r1, [pc, #332]	@ (802feac <read_conn+0x374>)
 802fd60:	68f8      	ldr	r0, [r7, #12]
 802fd62:	f7f5 ffed 	bl	8025d40 <mg_error>
 802fd66:	e0f5      	b.n	802ff54 <read_conn+0x41c>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 802fd68:	69fb      	ldr	r3, [r7, #28]
 802fd6a:	681a      	ldr	r2, [r3, #0]
 802fd6c:	69fb      	ldr	r3, [r7, #28]
 802fd6e:	689b      	ldr	r3, [r3, #8]
 802fd70:	18d0      	adds	r0, r2, r3
 802fd72:	68bb      	ldr	r3, [r7, #8]
 802fd74:	6899      	ldr	r1, [r3, #8]
 802fd76:	68bb      	ldr	r3, [r7, #8]
 802fd78:	68db      	ldr	r3, [r3, #12]
 802fd7a:	461a      	mov	r2, r3
 802fd7c:	f007 fbec 	bl	8037558 <memcpy>
    io->len += pkt->pay.len;
 802fd80:	69fb      	ldr	r3, [r7, #28]
 802fd82:	689a      	ldr	r2, [r3, #8]
 802fd84:	68bb      	ldr	r3, [r7, #8]
 802fd86:	68db      	ldr	r3, [r3, #12]
 802fd88:	441a      	add	r2, r3
 802fd8a:	69fb      	ldr	r3, [r7, #28]
 802fd8c:	609a      	str	r2, [r3, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 802fd8e:	4b42      	ldr	r3, [pc, #264]	@ (802fe98 <read_conn+0x360>)
 802fd90:	681b      	ldr	r3, [r3, #0]
 802fd92:	2b03      	cmp	r3, #3
 802fd94:	dd15      	ble.n	802fdc2 <read_conn+0x28a>
 802fd96:	4b41      	ldr	r3, [pc, #260]	@ (802fe9c <read_conn+0x364>)
 802fd98:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 802fd9c:	4940      	ldr	r1, [pc, #256]	@ (802fea0 <read_conn+0x368>)
 802fd9e:	2004      	movs	r0, #4
 802fda0:	f7fb fb94 	bl	802b4cc <mg_log_prefix>
 802fda4:	68fb      	ldr	r3, [r7, #12]
 802fda6:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 802fda8:	68bb      	ldr	r3, [r7, #8]
 802fdaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fdac:	685b      	ldr	r3, [r3, #4]
 802fdae:	4618      	mov	r0, r3
 802fdb0:	f003 f81a 	bl	8032de8 <mg_ntohl>
 802fdb4:	4602      	mov	r2, r0
 802fdb6:	6a3b      	ldr	r3, [r7, #32]
 802fdb8:	685b      	ldr	r3, [r3, #4]
 802fdba:	4621      	mov	r1, r4
 802fdbc:	483c      	ldr	r0, [pc, #240]	@ (802feb0 <read_conn+0x378>)
 802fdbe:	f7fb fbd5 	bl	802b56c <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 802fdc2:	68bb      	ldr	r3, [r7, #8]
 802fdc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802fdc6:	685b      	ldr	r3, [r3, #4]
 802fdc8:	4618      	mov	r0, r3
 802fdca:	f003 f80d 	bl	8032de8 <mg_ntohl>
 802fdce:	4602      	mov	r2, r0
 802fdd0:	68bb      	ldr	r3, [r7, #8]
 802fdd2:	68db      	ldr	r3, [r3, #12]
 802fdd4:	441a      	add	r2, r3
 802fdd6:	6a3b      	ldr	r3, [r7, #32]
 802fdd8:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 802fdda:	6a3b      	ldr	r3, [r7, #32]
 802fddc:	695a      	ldr	r2, [r3, #20]
 802fdde:	68bb      	ldr	r3, [r7, #8]
 802fde0:	68db      	ldr	r3, [r3, #12]
 802fde2:	441a      	add	r2, r3
 802fde4:	6a3b      	ldr	r3, [r7, #32]
 802fde6:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 802fde8:	6a3b      	ldr	r3, [r7, #32]
 802fdea:	695b      	ldr	r3, [r3, #20]
 802fdec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 802fdf0:	4293      	cmp	r3, r2
 802fdf2:	d961      	bls.n	802feb8 <read_conn+0x380>
 802fdf4:	6a3b      	ldr	r3, [r7, #32]
 802fdf6:	691a      	ldr	r2, [r3, #16]
 802fdf8:	6a3b      	ldr	r3, [r7, #32]
 802fdfa:	685b      	ldr	r3, [r3, #4]
 802fdfc:	429a      	cmp	r2, r3
 802fdfe:	d05b      	beq.n	802feb8 <read_conn+0x380>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 802fe00:	4b25      	ldr	r3, [pc, #148]	@ (802fe98 <read_conn+0x360>)
 802fe02:	681b      	ldr	r3, [r3, #0]
 802fe04:	2b03      	cmp	r3, #3
 802fe06:	dd0e      	ble.n	802fe26 <read_conn+0x2ee>
 802fe08:	4b24      	ldr	r3, [pc, #144]	@ (802fe9c <read_conn+0x364>)
 802fe0a:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 802fe0e:	4924      	ldr	r1, [pc, #144]	@ (802fea0 <read_conn+0x368>)
 802fe10:	2004      	movs	r0, #4
 802fe12:	f7fb fb5b 	bl	802b4cc <mg_log_prefix>
 802fe16:	68fb      	ldr	r3, [r7, #12]
 802fe18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802fe1a:	6a3b      	ldr	r3, [r7, #32]
 802fe1c:	691b      	ldr	r3, [r3, #16]
 802fe1e:	461a      	mov	r2, r3
 802fe20:	4824      	ldr	r0, [pc, #144]	@ (802feb4 <read_conn+0x37c>)
 802fe22:	f7fb fba3 	bl	802b56c <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 802fe26:	68fb      	ldr	r3, [r7, #12]
 802fe28:	685b      	ldr	r3, [r3, #4]
 802fe2a:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 802fe2c:	6a3b      	ldr	r3, [r7, #32]
 802fe2e:	f103 0818 	add.w	r8, r3, #24
 802fe32:	693b      	ldr	r3, [r7, #16]
 802fe34:	607b      	str	r3, [r7, #4]
 802fe36:	68fb      	ldr	r3, [r7, #12]
 802fe38:	8b1c      	ldrh	r4, [r3, #24]
 802fe3a:	68fb      	ldr	r3, [r7, #12]
 802fe3c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 802fe3e:	6a3b      	ldr	r3, [r7, #32]
 802fe40:	681b      	ldr	r3, [r3, #0]
 802fe42:	4618      	mov	r0, r3
 802fe44:	f002 ffd0 	bl	8032de8 <mg_ntohl>
 802fe48:	6038      	str	r0, [r7, #0]
 802fe4a:	6a3b      	ldr	r3, [r7, #32]
 802fe4c:	685b      	ldr	r3, [r3, #4]
 802fe4e:	4618      	mov	r0, r3
 802fe50:	f002 ffca 	bl	8032de8 <mg_ntohl>
 802fe54:	4603      	mov	r3, r0
 802fe56:	2200      	movs	r2, #0
 802fe58:	9205      	str	r2, [sp, #20]
 802fe5a:	2200      	movs	r2, #0
 802fe5c:	9204      	str	r2, [sp, #16]
 802fe5e:	9303      	str	r3, [sp, #12]
 802fe60:	6839      	ldr	r1, [r7, #0]
 802fe62:	9102      	str	r1, [sp, #8]
 802fe64:	9501      	str	r5, [sp, #4]
 802fe66:	9400      	str	r4, [sp, #0]
 802fe68:	2310      	movs	r3, #16
 802fe6a:	687a      	ldr	r2, [r7, #4]
 802fe6c:	4641      	mov	r1, r8
 802fe6e:	4630      	mov	r0, r6
 802fe70:	f7ff fb5e 	bl	802f530 <tx_tcp>
      s->unacked = 0;
 802fe74:	6a3b      	ldr	r3, [r7, #32]
 802fe76:	2200      	movs	r2, #0
 802fe78:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 802fe7a:	6a3b      	ldr	r3, [r7, #32]
 802fe7c:	685a      	ldr	r2, [r3, #4]
 802fe7e:	6a3b      	ldr	r3, [r7, #32]
 802fe80:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 802fe82:	6a3b      	ldr	r3, [r7, #32]
 802fe84:	7f9b      	ldrb	r3, [r3, #30]
 802fe86:	2b00      	cmp	r3, #0
 802fe88:	d01e      	beq.n	802fec8 <read_conn+0x390>
 802fe8a:	2100      	movs	r1, #0
 802fe8c:	68f8      	ldr	r0, [r7, #12]
 802fe8e:	f7fe f991 	bl	802e1b4 <settmout>
 802fe92:	e019      	b.n	802fec8 <read_conn+0x390>
 802fe94:	08042110 	.word	0x08042110
 802fe98:	200002a8 	.word	0x200002a8
 802fe9c:	08044b64 	.word	0x08044b64
 802fea0:	08041a30 	.word	0x08041a30
 802fea4:	080433b4 	.word	0x080433b4
 802fea8:	080433cc 	.word	0x080433cc
 802feac:	08043314 	.word	0x08043314
 802feb0:	080433e4 	.word	0x080433e4
 802feb4:	080433f8 	.word	0x080433f8
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 802feb8:	6a3b      	ldr	r3, [r7, #32]
 802feba:	7f9b      	ldrb	r3, [r3, #30]
 802febc:	2b01      	cmp	r3, #1
 802febe:	d003      	beq.n	802fec8 <read_conn+0x390>
 802fec0:	2101      	movs	r1, #1
 802fec2:	68f8      	ldr	r0, [r7, #12]
 802fec4:	f7fe f976 	bl	802e1b4 <settmout>
    if (c->is_tls && c->is_tls_hs) {
 802fec8:	68fb      	ldr	r3, [r7, #12]
 802feca:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802fece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802fed2:	b2db      	uxtb	r3, r3
 802fed4:	2b00      	cmp	r3, #0
 802fed6:	d00b      	beq.n	802fef0 <read_conn+0x3b8>
 802fed8:	68fb      	ldr	r3, [r7, #12]
 802feda:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802fede:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 802fee2:	b2db      	uxtb	r3, r3
 802fee4:	2b00      	cmp	r3, #0
 802fee6:	d003      	beq.n	802fef0 <read_conn+0x3b8>
      mg_tls_handshake(c);
 802fee8:	68f8      	ldr	r0, [r7, #12]
 802feea:	f002 fd41 	bl	8032970 <mg_tls_handshake>
 802feee:	e031      	b.n	802ff54 <read_conn+0x41c>
    } else if (c->is_tls) {
 802fef0:	68fb      	ldr	r3, [r7, #12]
 802fef2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802fef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802fefa:	b2db      	uxtb	r3, r3
 802fefc:	2b00      	cmp	r3, #0
 802fefe:	d021      	beq.n	802ff44 <read_conn+0x40c>
      io = &c->recv;
 802ff00:	68fb      	ldr	r3, [r7, #12]
 802ff02:	3338      	adds	r3, #56	@ 0x38
 802ff04:	61fb      	str	r3, [r7, #28]
      if (io->size - io->len < pkt->pay.len &&
 802ff06:	69fb      	ldr	r3, [r7, #28]
 802ff08:	685a      	ldr	r2, [r3, #4]
 802ff0a:	69fb      	ldr	r3, [r7, #28]
 802ff0c:	689b      	ldr	r3, [r3, #8]
 802ff0e:	1ad2      	subs	r2, r2, r3
 802ff10:	68bb      	ldr	r3, [r7, #8]
 802ff12:	68db      	ldr	r3, [r3, #12]
 802ff14:	429a      	cmp	r2, r3
 802ff16:	d210      	bcs.n	802ff3a <read_conn+0x402>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 802ff18:	69fb      	ldr	r3, [r7, #28]
 802ff1a:	689a      	ldr	r2, [r3, #8]
 802ff1c:	68bb      	ldr	r3, [r7, #8]
 802ff1e:	68db      	ldr	r3, [r3, #12]
 802ff20:	4413      	add	r3, r2
 802ff22:	4619      	mov	r1, r3
 802ff24:	69f8      	ldr	r0, [r7, #28]
 802ff26:	f7fa fae1 	bl	802a4ec <mg_iobuf_resize>
 802ff2a:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 802ff2c:	2b00      	cmp	r3, #0
 802ff2e:	d104      	bne.n	802ff3a <read_conn+0x402>
        mg_error(c, "oom");
 802ff30:	490b      	ldr	r1, [pc, #44]	@ (802ff60 <read_conn+0x428>)
 802ff32:	68f8      	ldr	r0, [r7, #12]
 802ff34:	f7f5 ff04 	bl	8025d40 <mg_error>
 802ff38:	e00c      	b.n	802ff54 <read_conn+0x41c>
        handle_tls_recv(c, io);
 802ff3a:	69f9      	ldr	r1, [r7, #28]
 802ff3c:	68f8      	ldr	r0, [r7, #12]
 802ff3e:	f7ff fdc7 	bl	802fad0 <handle_tls_recv>
}
 802ff42:	e007      	b.n	802ff54 <read_conn+0x41c>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802ff44:	68bb      	ldr	r3, [r7, #8]
 802ff46:	330c      	adds	r3, #12
 802ff48:	461a      	mov	r2, r3
 802ff4a:	2107      	movs	r1, #7
 802ff4c:	68f8      	ldr	r0, [r7, #12]
 802ff4e:	f7f5 fed7 	bl	8025d00 <mg_call>
}
 802ff52:	e7ff      	b.n	802ff54 <read_conn+0x41c>
 802ff54:	bf00      	nop
 802ff56:	3728      	adds	r7, #40	@ 0x28
 802ff58:	46bd      	mov	sp, r7
 802ff5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ff5e:	bf00      	nop
 802ff60:	08043314 	.word	0x08043314

0802ff64 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802ff64:	b590      	push	{r4, r7, lr}
 802ff66:	b089      	sub	sp, #36	@ 0x24
 802ff68:	af02      	add	r7, sp, #8
 802ff6a:	6078      	str	r0, [r7, #4]
 802ff6c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802ff6e:	687b      	ldr	r3, [r7, #4]
 802ff70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ff72:	2200      	movs	r2, #0
 802ff74:	6839      	ldr	r1, [r7, #0]
 802ff76:	4618      	mov	r0, r3
 802ff78:	f7fe fcba 	bl	802e8f0 <getpeer>
 802ff7c:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 802ff7e:	697b      	ldr	r3, [r7, #20]
 802ff80:	2b00      	cmp	r3, #0
 802ff82:	d002      	beq.n	802ff8a <rx_tcp+0x26>
 802ff84:	697b      	ldr	r3, [r7, #20]
 802ff86:	33b0      	adds	r3, #176	@ 0xb0
 802ff88:	e000      	b.n	802ff8c <rx_tcp+0x28>
 802ff8a:	2300      	movs	r3, #0
 802ff8c:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 802ff8e:	697b      	ldr	r3, [r7, #20]
 802ff90:	2b00      	cmp	r3, #0
 802ff92:	d048      	beq.n	8030026 <rx_tcp+0xc2>
 802ff94:	697b      	ldr	r3, [r7, #20]
 802ff96:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802ff9a:	f003 0320 	and.w	r3, r3, #32
 802ff9e:	b2db      	uxtb	r3, r3
 802ffa0:	2b00      	cmp	r3, #0
 802ffa2:	d040      	beq.n	8030026 <rx_tcp+0xc2>
 802ffa4:	683b      	ldr	r3, [r7, #0]
 802ffa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ffa8:	7b5b      	ldrb	r3, [r3, #13]
 802ffaa:	2b12      	cmp	r3, #18
 802ffac:	d13b      	bne.n	8030026 <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 802ffae:	683b      	ldr	r3, [r7, #0]
 802ffb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ffb2:	689b      	ldr	r3, [r3, #8]
 802ffb4:	4618      	mov	r0, r3
 802ffb6:	f002 ff17 	bl	8032de8 <mg_ntohl>
 802ffba:	4602      	mov	r2, r0
 802ffbc:	693b      	ldr	r3, [r7, #16]
 802ffbe:	601a      	str	r2, [r3, #0]
 802ffc0:	683b      	ldr	r3, [r7, #0]
 802ffc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ffc4:	685b      	ldr	r3, [r3, #4]
 802ffc6:	4618      	mov	r0, r3
 802ffc8:	f002 ff0e 	bl	8032de8 <mg_ntohl>
 802ffcc:	4603      	mov	r3, r0
 802ffce:	1c5a      	adds	r2, r3, #1
 802ffd0:	693b      	ldr	r3, [r7, #16]
 802ffd2:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 802ffd4:	683b      	ldr	r3, [r7, #0]
 802ffd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ffd8:	689b      	ldr	r3, [r3, #8]
 802ffda:	2200      	movs	r2, #0
 802ffdc:	9201      	str	r2, [sp, #4]
 802ffde:	2200      	movs	r2, #0
 802ffe0:	9200      	str	r2, [sp, #0]
 802ffe2:	2210      	movs	r2, #16
 802ffe4:	6839      	ldr	r1, [r7, #0]
 802ffe6:	6878      	ldr	r0, [r7, #4]
 802ffe8:	f7ff fb6e 	bl	802f6c8 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 802ffec:	697a      	ldr	r2, [r7, #20]
 802ffee:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 802fff2:	f36f 1345 	bfc	r3, #5, #1
 802fff6:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 802fffa:	2100      	movs	r1, #0
 802fffc:	6978      	ldr	r0, [r7, #20]
 802fffe:	f7fe f8d9 	bl	802e1b4 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8030002:	2200      	movs	r2, #0
 8030004:	2104      	movs	r1, #4
 8030006:	6978      	ldr	r0, [r7, #20]
 8030008:	f7f5 fe7a 	bl	8025d00 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 803000c:	697b      	ldr	r3, [r7, #20]
 803000e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030012:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8030016:	b2db      	uxtb	r3, r3
 8030018:	2b00      	cmp	r3, #0
 803001a:	f000 80cd 	beq.w	80301b8 <rx_tcp+0x254>
 803001e:	6978      	ldr	r0, [r7, #20]
 8030020:	f002 fca6 	bl	8032970 <mg_tls_handshake>
 8030024:	e0c8      	b.n	80301b8 <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8030026:	697b      	ldr	r3, [r7, #20]
 8030028:	2b00      	cmp	r3, #0
 803002a:	d019      	beq.n	8030060 <rx_tcp+0xfc>
 803002c:	697b      	ldr	r3, [r7, #20]
 803002e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030032:	f003 0320 	and.w	r3, r3, #32
 8030036:	b2db      	uxtb	r3, r3
 8030038:	2b00      	cmp	r3, #0
 803003a:	d011      	beq.n	8030060 <rx_tcp+0xfc>
 803003c:	683b      	ldr	r3, [r7, #0]
 803003e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8030040:	7b5b      	ldrb	r3, [r3, #13]
 8030042:	2b10      	cmp	r3, #16
 8030044:	d00c      	beq.n	8030060 <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8030046:	683b      	ldr	r3, [r7, #0]
 8030048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803004a:	689b      	ldr	r3, [r3, #8]
 803004c:	2200      	movs	r2, #0
 803004e:	9201      	str	r2, [sp, #4]
 8030050:	2200      	movs	r2, #0
 8030052:	9200      	str	r2, [sp, #0]
 8030054:	2214      	movs	r2, #20
 8030056:	6839      	ldr	r1, [r7, #0]
 8030058:	6878      	ldr	r0, [r7, #4]
 803005a:	f7ff fb35 	bl	802f6c8 <tx_tcp_pkt>
 803005e:	e0ab      	b.n	80301b8 <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8030060:	697b      	ldr	r3, [r7, #20]
 8030062:	2b00      	cmp	r3, #0
 8030064:	d00b      	beq.n	803007e <rx_tcp+0x11a>
 8030066:	683b      	ldr	r3, [r7, #0]
 8030068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803006a:	7b5b      	ldrb	r3, [r3, #13]
 803006c:	f003 0304 	and.w	r3, r3, #4
 8030070:	2b00      	cmp	r3, #0
 8030072:	d004      	beq.n	803007e <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8030074:	4952      	ldr	r1, [pc, #328]	@ (80301c0 <rx_tcp+0x25c>)
 8030076:	6978      	ldr	r0, [r7, #20]
 8030078:	f7f5 fe62 	bl	8025d40 <mg_error>
 803007c:	e09c      	b.n	80301b8 <rx_tcp+0x254>
  } else if (c != NULL) {
 803007e:	697b      	ldr	r3, [r7, #20]
 8030080:	2b00      	cmp	r3, #0
 8030082:	d00f      	beq.n	80300a4 <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8030084:	693b      	ldr	r3, [r7, #16]
 8030086:	2200      	movs	r2, #0
 8030088:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 803008a:	693b      	ldr	r3, [r7, #16]
 803008c:	7f9b      	ldrb	r3, [r3, #30]
 803008e:	2b00      	cmp	r3, #0
 8030090:	d103      	bne.n	803009a <rx_tcp+0x136>
      settmout(c,
 8030092:	2100      	movs	r1, #0
 8030094:	6978      	ldr	r0, [r7, #20]
 8030096:	f7fe f88d 	bl	802e1b4 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 803009a:	6839      	ldr	r1, [r7, #0]
 803009c:	6978      	ldr	r0, [r7, #20]
 803009e:	f7ff fd4b 	bl	802fb38 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 80300a2:	e089      	b.n	80301b8 <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 80300a4:	687b      	ldr	r3, [r7, #4]
 80300a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80300a8:	2201      	movs	r2, #1
 80300aa:	6839      	ldr	r1, [r7, #0]
 80300ac:	4618      	mov	r0, r3
 80300ae:	f7fe fc1f 	bl	802e8f0 <getpeer>
 80300b2:	6178      	str	r0, [r7, #20]
 80300b4:	697b      	ldr	r3, [r7, #20]
 80300b6:	2b00      	cmp	r3, #0
 80300b8:	d10c      	bne.n	80300d4 <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 80300ba:	683b      	ldr	r3, [r7, #0]
 80300bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80300be:	689b      	ldr	r3, [r3, #8]
 80300c0:	2200      	movs	r2, #0
 80300c2:	9201      	str	r2, [sp, #4]
 80300c4:	2200      	movs	r2, #0
 80300c6:	9200      	str	r2, [sp, #0]
 80300c8:	2214      	movs	r2, #20
 80300ca:	6839      	ldr	r1, [r7, #0]
 80300cc:	6878      	ldr	r0, [r7, #4]
 80300ce:	f7ff fafb 	bl	802f6c8 <tx_tcp_pkt>
}
 80300d2:	e071      	b.n	80301b8 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 80300d4:	683b      	ldr	r3, [r7, #0]
 80300d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80300d8:	7b5b      	ldrb	r3, [r3, #13]
 80300da:	f003 0304 	and.w	r3, r3, #4
 80300de:	2b00      	cmp	r3, #0
 80300e0:	d00c      	beq.n	80300fc <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 80300e2:	697b      	ldr	r3, [r7, #20]
 80300e4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80300e8:	f003 0304 	and.w	r3, r3, #4
 80300ec:	b2db      	uxtb	r3, r3
 80300ee:	2b00      	cmp	r3, #0
 80300f0:	d062      	beq.n	80301b8 <rx_tcp+0x254>
 80300f2:	4933      	ldr	r1, [pc, #204]	@ (80301c0 <rx_tcp+0x25c>)
 80300f4:	6978      	ldr	r0, [r7, #20]
 80300f6:	f7f5 fe23 	bl	8025d40 <mg_error>
}
 80300fa:	e05d      	b.n	80301b8 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 80300fc:	683b      	ldr	r3, [r7, #0]
 80300fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8030100:	7b5b      	ldrb	r3, [r3, #13]
 8030102:	f003 0302 	and.w	r3, r3, #2
 8030106:	2b00      	cmp	r3, #0
 8030108:	d016      	beq.n	8030138 <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 803010a:	683b      	ldr	r3, [r7, #0]
 803010c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803010e:	881b      	ldrh	r3, [r3, #0]
 8030110:	b29b      	uxth	r3, r3
 8030112:	4618      	mov	r0, r3
 8030114:	f002 fe81 	bl	8032e1a <mg_ntohs>
 8030118:	4603      	mov	r3, r0
 803011a:	4618      	mov	r0, r3
 803011c:	f002 fe64 	bl	8032de8 <mg_ntohl>
 8030120:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8030122:	2300      	movs	r3, #0
 8030124:	9301      	str	r3, [sp, #4]
 8030126:	2300      	movs	r3, #0
 8030128:	9300      	str	r3, [sp, #0]
 803012a:	68fb      	ldr	r3, [r7, #12]
 803012c:	2212      	movs	r2, #18
 803012e:	6839      	ldr	r1, [r7, #0]
 8030130:	6878      	ldr	r0, [r7, #4]
 8030132:	f7ff fac9 	bl	802f6c8 <tx_tcp_pkt>
}
 8030136:	e03f      	b.n	80301b8 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 8030138:	683b      	ldr	r3, [r7, #0]
 803013a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803013c:	7b5b      	ldrb	r3, [r3, #13]
 803013e:	f003 0301 	and.w	r3, r3, #1
 8030142:	2b00      	cmp	r3, #0
 8030144:	d00c      	beq.n	8030160 <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8030146:	683b      	ldr	r3, [r7, #0]
 8030148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803014a:	689b      	ldr	r3, [r3, #8]
 803014c:	2200      	movs	r2, #0
 803014e:	9201      	str	r2, [sp, #4]
 8030150:	2200      	movs	r2, #0
 8030152:	9200      	str	r2, [sp, #0]
 8030154:	2211      	movs	r2, #17
 8030156:	6839      	ldr	r1, [r7, #0]
 8030158:	6878      	ldr	r0, [r7, #4]
 803015a:	f7ff fab5 	bl	802f6c8 <tx_tcp_pkt>
}
 803015e:	e02b      	b.n	80301b8 <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8030160:	683b      	ldr	r3, [r7, #0]
 8030162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8030164:	689b      	ldr	r3, [r3, #8]
 8030166:	4618      	mov	r0, r3
 8030168:	f002 fe3e 	bl	8032de8 <mg_ntohl>
 803016c:	4604      	mov	r4, r0
 803016e:	683b      	ldr	r3, [r7, #0]
 8030170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8030172:	881b      	ldrh	r3, [r3, #0]
 8030174:	b29b      	uxth	r3, r3
 8030176:	4618      	mov	r0, r3
 8030178:	f002 fe4f 	bl	8032e1a <mg_ntohs>
 803017c:	4603      	mov	r3, r0
 803017e:	3301      	adds	r3, #1
 8030180:	429c      	cmp	r4, r3
 8030182:	d104      	bne.n	803018e <rx_tcp+0x22a>
    accept_conn(c, pkt);
 8030184:	6839      	ldr	r1, [r7, #0]
 8030186:	6978      	ldr	r0, [r7, #20]
 8030188:	f7ff fae4 	bl	802f754 <accept_conn>
}
 803018c:	e014      	b.n	80301b8 <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 803018e:	697b      	ldr	r3, [r7, #20]
 8030190:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030194:	f003 0304 	and.w	r3, r3, #4
 8030198:	b2db      	uxtb	r3, r3
 803019a:	2b00      	cmp	r3, #0
 803019c:	d10c      	bne.n	80301b8 <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 803019e:	683b      	ldr	r3, [r7, #0]
 80301a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80301a2:	689b      	ldr	r3, [r3, #8]
 80301a4:	2200      	movs	r2, #0
 80301a6:	9201      	str	r2, [sp, #4]
 80301a8:	2200      	movs	r2, #0
 80301aa:	9200      	str	r2, [sp, #0]
 80301ac:	2214      	movs	r2, #20
 80301ae:	6839      	ldr	r1, [r7, #0]
 80301b0:	6878      	ldr	r0, [r7, #4]
 80301b2:	f7ff fa89 	bl	802f6c8 <tx_tcp_pkt>
}
 80301b6:	e7ff      	b.n	80301b8 <rx_tcp+0x254>
 80301b8:	bf00      	nop
 80301ba:	371c      	adds	r7, #28
 80301bc:	46bd      	mov	sp, r7
 80301be:	bd90      	pop	{r4, r7, pc}
 80301c0:	08043408 	.word	0x08043408

080301c4 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80301c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80301c6:	b089      	sub	sp, #36	@ 0x24
 80301c8:	af04      	add	r7, sp, #16
 80301ca:	6078      	str	r0, [r7, #4]
 80301cc:	6039      	str	r1, [r7, #0]
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 80301ce:	683b      	ldr	r3, [r7, #0]
 80301d0:	69db      	ldr	r3, [r3, #28]
 80301d2:	88db      	ldrh	r3, [r3, #6]
 80301d4:	b29b      	uxth	r3, r3
 80301d6:	f003 0320 	and.w	r3, r3, #32
 80301da:	2b00      	cmp	r3, #0
 80301dc:	d109      	bne.n	80301f2 <rx_ip+0x2e>
 80301de:	683b      	ldr	r3, [r7, #0]
 80301e0:	69db      	ldr	r3, [r3, #28]
 80301e2:	88db      	ldrh	r3, [r3, #6]
 80301e4:	b29b      	uxth	r3, r3
 80301e6:	461a      	mov	r2, r3
 80301e8:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 80301ec:	4013      	ands	r3, r2
 80301ee:	2b00      	cmp	r3, #0
 80301f0:	d026      	beq.n	8030240 <rx_ip+0x7c>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 80301f2:	683b      	ldr	r3, [r7, #0]
 80301f4:	69db      	ldr	r3, [r3, #28]
 80301f6:	7a5b      	ldrb	r3, [r3, #9]
 80301f8:	2b11      	cmp	r3, #17
 80301fa:	d105      	bne.n	8030208 <rx_ip+0x44>
 80301fc:	683b      	ldr	r3, [r7, #0]
 80301fe:	69db      	ldr	r3, [r3, #28]
 8030200:	f103 0214 	add.w	r2, r3, #20
 8030204:	683b      	ldr	r3, [r7, #0]
 8030206:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8030208:	683b      	ldr	r3, [r7, #0]
 803020a:	69db      	ldr	r3, [r3, #28]
 803020c:	7a5b      	ldrb	r3, [r3, #9]
 803020e:	2b06      	cmp	r3, #6
 8030210:	d105      	bne.n	803021e <rx_ip+0x5a>
 8030212:	683b      	ldr	r3, [r7, #0]
 8030214:	69db      	ldr	r3, [r3, #28]
 8030216:	f103 0214 	add.w	r2, r3, #20
 803021a:	683b      	ldr	r3, [r7, #0]
 803021c:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 803021e:	687b      	ldr	r3, [r7, #4]
 8030220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8030222:	2200      	movs	r2, #0
 8030224:	6839      	ldr	r1, [r7, #0]
 8030226:	4618      	mov	r0, r3
 8030228:	f7fe fb62 	bl	802e8f0 <getpeer>
 803022c:	60b8      	str	r0, [r7, #8]
    if (c) mg_error(c, "Received fragmented packet");
 803022e:	68bb      	ldr	r3, [r7, #8]
 8030230:	2b00      	cmp	r3, #0
 8030232:	f000 811b 	beq.w	803046c <rx_ip+0x2a8>
 8030236:	4992      	ldr	r1, [pc, #584]	@ (8030480 <rx_ip+0x2bc>)
 8030238:	68b8      	ldr	r0, [r7, #8]
 803023a:	f7f5 fd81 	bl	8025d40 <mg_error>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 803023e:	e115      	b.n	803046c <rx_ip+0x2a8>
  } else if (pkt->ip->proto == 1) {
 8030240:	683b      	ldr	r3, [r7, #0]
 8030242:	69db      	ldr	r3, [r3, #28]
 8030244:	7a5b      	ldrb	r3, [r3, #9]
 8030246:	2b01      	cmp	r3, #1
 8030248:	d116      	bne.n	8030278 <rx_ip+0xb4>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 803024a:	683b      	ldr	r3, [r7, #0]
 803024c:	69db      	ldr	r3, [r3, #28]
 803024e:	f103 0214 	add.w	r2, r3, #20
 8030252:	683b      	ldr	r3, [r7, #0]
 8030254:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8030256:	683b      	ldr	r3, [r7, #0]
 8030258:	68db      	ldr	r3, [r3, #12]
 803025a:	2b03      	cmp	r3, #3
 803025c:	f240 8108 	bls.w	8030470 <rx_ip+0x2ac>
    mkpay(pkt, pkt->icmp + 1);
 8030260:	683b      	ldr	r3, [r7, #0]
 8030262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030264:	3304      	adds	r3, #4
 8030266:	4619      	mov	r1, r3
 8030268:	6838      	ldr	r0, [r7, #0]
 803026a:	f7fd ff2b 	bl	802e0c4 <mkpay>
    rx_icmp(ifp, pkt);
 803026e:	6839      	ldr	r1, [r7, #0]
 8030270:	6878      	ldr	r0, [r7, #4]
 8030272:	f7fe fcb9 	bl	802ebe8 <rx_icmp>
 8030276:	e100      	b.n	803047a <rx_ip+0x2b6>
  } else if (pkt->ip->proto == 17) {
 8030278:	683b      	ldr	r3, [r7, #0]
 803027a:	69db      	ldr	r3, [r3, #28]
 803027c:	7a5b      	ldrb	r3, [r3, #9]
 803027e:	2b11      	cmp	r3, #17
 8030280:	f040 808b 	bne.w	803039a <rx_ip+0x1d6>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 8030284:	683b      	ldr	r3, [r7, #0]
 8030286:	69db      	ldr	r3, [r3, #28]
 8030288:	f103 0214 	add.w	r2, r3, #20
 803028c:	683b      	ldr	r3, [r7, #0]
 803028e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8030290:	683b      	ldr	r3, [r7, #0]
 8030292:	68db      	ldr	r3, [r3, #12]
 8030294:	2b07      	cmp	r3, #7
 8030296:	f240 80ed 	bls.w	8030474 <rx_ip+0x2b0>
    mkpay(pkt, pkt->udp + 1);
 803029a:	683b      	ldr	r3, [r7, #0]
 803029c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 803029e:	3308      	adds	r3, #8
 80302a0:	4619      	mov	r1, r3
 80302a2:	6838      	ldr	r0, [r7, #0]
 80302a4:	f7fd ff0e 	bl	802e0c4 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80302a8:	4b76      	ldr	r3, [pc, #472]	@ (8030484 <rx_ip+0x2c0>)
 80302aa:	681b      	ldr	r3, [r3, #0]
 80302ac:	2b03      	cmp	r3, #3
 80302ae:	dd2d      	ble.n	803030c <rx_ip+0x148>
 80302b0:	4b75      	ldr	r3, [pc, #468]	@ (8030488 <rx_ip+0x2c4>)
 80302b2:	f241 6255 	movw	r2, #5717	@ 0x1655
 80302b6:	4975      	ldr	r1, [pc, #468]	@ (803048c <rx_ip+0x2c8>)
 80302b8:	2004      	movs	r0, #4
 80302ba:	f7fb f907 	bl	802b4cc <mg_log_prefix>
 80302be:	683b      	ldr	r3, [r7, #0]
 80302c0:	69db      	ldr	r3, [r3, #28]
 80302c2:	f103 050c 	add.w	r5, r3, #12
 80302c6:	683b      	ldr	r3, [r7, #0]
 80302c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80302ca:	881b      	ldrh	r3, [r3, #0]
 80302cc:	b29b      	uxth	r3, r3
 80302ce:	4618      	mov	r0, r3
 80302d0:	f002 fda3 	bl	8032e1a <mg_ntohs>
 80302d4:	4603      	mov	r3, r0
 80302d6:	461e      	mov	r6, r3
 80302d8:	683b      	ldr	r3, [r7, #0]
 80302da:	69db      	ldr	r3, [r3, #28]
 80302dc:	f103 0410 	add.w	r4, r3, #16
 80302e0:	683b      	ldr	r3, [r7, #0]
 80302e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80302e4:	885b      	ldrh	r3, [r3, #2]
 80302e6:	b29b      	uxth	r3, r3
 80302e8:	4618      	mov	r0, r3
 80302ea:	f002 fd96 	bl	8032e1a <mg_ntohs>
 80302ee:	4603      	mov	r3, r0
 80302f0:	461a      	mov	r2, r3
 80302f2:	683b      	ldr	r3, [r7, #0]
 80302f4:	68db      	ldr	r3, [r3, #12]
 80302f6:	9303      	str	r3, [sp, #12]
 80302f8:	9202      	str	r2, [sp, #8]
 80302fa:	9401      	str	r4, [sp, #4]
 80302fc:	4b64      	ldr	r3, [pc, #400]	@ (8030490 <rx_ip+0x2cc>)
 80302fe:	9300      	str	r3, [sp, #0]
 8030300:	4633      	mov	r3, r6
 8030302:	462a      	mov	r2, r5
 8030304:	4962      	ldr	r1, [pc, #392]	@ (8030490 <rx_ip+0x2cc>)
 8030306:	4863      	ldr	r0, [pc, #396]	@ (8030494 <rx_ip+0x2d0>)
 8030308:	f7fb f930 	bl	802b56c <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 803030c:	687b      	ldr	r3, [r7, #4]
 803030e:	7f1b      	ldrb	r3, [r3, #28]
 8030310:	2b00      	cmp	r3, #0
 8030312:	d01c      	beq.n	803034e <rx_ip+0x18a>
 8030314:	683b      	ldr	r3, [r7, #0]
 8030316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8030318:	885b      	ldrh	r3, [r3, #2]
 803031a:	b29c      	uxth	r4, r3
 803031c:	2044      	movs	r0, #68	@ 0x44
 803031e:	f002 fd7c 	bl	8032e1a <mg_ntohs>
 8030322:	4603      	mov	r3, r0
 8030324:	429c      	cmp	r4, r3
 8030326:	d112      	bne.n	803034e <rx_ip+0x18a>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8030328:	683b      	ldr	r3, [r7, #0]
 803032a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 803032c:	f103 0208 	add.w	r2, r3, #8
 8030330:	683b      	ldr	r3, [r7, #0]
 8030332:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8030334:	683b      	ldr	r3, [r7, #0]
 8030336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8030338:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 803033c:	4619      	mov	r1, r3
 803033e:	6838      	ldr	r0, [r7, #0]
 8030340:	f7fd fec0 	bl	802e0c4 <mkpay>
      rx_dhcp_client(ifp, pkt);
 8030344:	6839      	ldr	r1, [r7, #0]
 8030346:	6878      	ldr	r0, [r7, #4]
 8030348:	f7fe fcaa 	bl	802eca0 <rx_dhcp_client>
 803034c:	e095      	b.n	803047a <rx_ip+0x2b6>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 803034e:	687b      	ldr	r3, [r7, #4]
 8030350:	7f5b      	ldrb	r3, [r3, #29]
 8030352:	2b00      	cmp	r3, #0
 8030354:	d01c      	beq.n	8030390 <rx_ip+0x1cc>
 8030356:	683b      	ldr	r3, [r7, #0]
 8030358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 803035a:	885b      	ldrh	r3, [r3, #2]
 803035c:	b29c      	uxth	r4, r3
 803035e:	2043      	movs	r0, #67	@ 0x43
 8030360:	f002 fd5b 	bl	8032e1a <mg_ntohs>
 8030364:	4603      	mov	r3, r0
 8030366:	429c      	cmp	r4, r3
 8030368:	d112      	bne.n	8030390 <rx_ip+0x1cc>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 803036a:	683b      	ldr	r3, [r7, #0]
 803036c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 803036e:	f103 0208 	add.w	r2, r3, #8
 8030372:	683b      	ldr	r3, [r7, #0]
 8030374:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8030376:	683b      	ldr	r3, [r7, #0]
 8030378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803037a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 803037e:	4619      	mov	r1, r3
 8030380:	6838      	ldr	r0, [r7, #0]
 8030382:	f7fd fe9f 	bl	802e0c4 <mkpay>
      rx_dhcp_server(ifp, pkt);
 8030386:	6839      	ldr	r1, [r7, #0]
 8030388:	6878      	ldr	r0, [r7, #4]
 803038a:	f7fe fe71 	bl	802f070 <rx_dhcp_server>
 803038e:	e074      	b.n	803047a <rx_ip+0x2b6>
    } else {
      rx_udp(ifp, pkt);
 8030390:	6839      	ldr	r1, [r7, #0]
 8030392:	6878      	ldr	r0, [r7, #4]
 8030394:	f7ff f85a 	bl	802f44c <rx_udp>
 8030398:	e06f      	b.n	803047a <rx_ip+0x2b6>
    }
  } else if (pkt->ip->proto == 6) {
 803039a:	683b      	ldr	r3, [r7, #0]
 803039c:	69db      	ldr	r3, [r3, #28]
 803039e:	7a5b      	ldrb	r3, [r3, #9]
 80303a0:	2b06      	cmp	r3, #6
 80303a2:	d16a      	bne.n	803047a <rx_ip+0x2b6>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80303a4:	683b      	ldr	r3, [r7, #0]
 80303a6:	69db      	ldr	r3, [r3, #28]
 80303a8:	f103 0214 	add.w	r2, r3, #20
 80303ac:	683b      	ldr	r3, [r7, #0]
 80303ae:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 80303b0:	683b      	ldr	r3, [r7, #0]
 80303b2:	68db      	ldr	r3, [r3, #12]
 80303b4:	2b13      	cmp	r3, #19
 80303b6:	d95f      	bls.n	8030478 <rx_ip+0x2b4>
    mkpay(pkt, pkt->tcp + 1);
 80303b8:	683b      	ldr	r3, [r7, #0]
 80303ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80303bc:	3314      	adds	r3, #20
 80303be:	4619      	mov	r1, r3
 80303c0:	6838      	ldr	r0, [r7, #0]
 80303c2:	f7fd fe7f 	bl	802e0c4 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 80303c6:	683b      	ldr	r3, [r7, #0]
 80303c8:	69db      	ldr	r3, [r3, #28]
 80303ca:	885b      	ldrh	r3, [r3, #2]
 80303cc:	b29b      	uxth	r3, r3
 80303ce:	4618      	mov	r0, r3
 80303d0:	f002 fd23 	bl	8032e1a <mg_ntohs>
 80303d4:	4603      	mov	r3, r0
 80303d6:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 80303d8:	683b      	ldr	r3, [r7, #0]
 80303da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80303dc:	7b1b      	ldrb	r3, [r3, #12]
 80303de:	091b      	lsrs	r3, r3, #4
 80303e0:	b2db      	uxtb	r3, r3
 80303e2:	3305      	adds	r3, #5
 80303e4:	b29b      	uxth	r3, r3
 80303e6:	009b      	lsls	r3, r3, #2
 80303e8:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 80303ea:	89fa      	ldrh	r2, [r7, #14]
 80303ec:	89bb      	ldrh	r3, [r7, #12]
 80303ee:	429a      	cmp	r2, r3
 80303f0:	d305      	bcc.n	80303fe <rx_ip+0x23a>
 80303f2:	89fa      	ldrh	r2, [r7, #14]
 80303f4:	89bb      	ldrh	r3, [r7, #12]
 80303f6:	1ad3      	subs	r3, r2, r3
 80303f8:	461a      	mov	r2, r3
 80303fa:	683b      	ldr	r3, [r7, #0]
 80303fc:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80303fe:	4b21      	ldr	r3, [pc, #132]	@ (8030484 <rx_ip+0x2c0>)
 8030400:	681b      	ldr	r3, [r3, #0]
 8030402:	2b03      	cmp	r3, #3
 8030404:	dd2d      	ble.n	8030462 <rx_ip+0x29e>
 8030406:	4b20      	ldr	r3, [pc, #128]	@ (8030488 <rx_ip+0x2c4>)
 8030408:	f241 626a 	movw	r2, #5738	@ 0x166a
 803040c:	491f      	ldr	r1, [pc, #124]	@ (803048c <rx_ip+0x2c8>)
 803040e:	2004      	movs	r0, #4
 8030410:	f7fb f85c 	bl	802b4cc <mg_log_prefix>
 8030414:	683b      	ldr	r3, [r7, #0]
 8030416:	69db      	ldr	r3, [r3, #28]
 8030418:	f103 050c 	add.w	r5, r3, #12
 803041c:	683b      	ldr	r3, [r7, #0]
 803041e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8030420:	881b      	ldrh	r3, [r3, #0]
 8030422:	b29b      	uxth	r3, r3
 8030424:	4618      	mov	r0, r3
 8030426:	f002 fcf8 	bl	8032e1a <mg_ntohs>
 803042a:	4603      	mov	r3, r0
 803042c:	461e      	mov	r6, r3
 803042e:	683b      	ldr	r3, [r7, #0]
 8030430:	69db      	ldr	r3, [r3, #28]
 8030432:	f103 0410 	add.w	r4, r3, #16
 8030436:	683b      	ldr	r3, [r7, #0]
 8030438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803043a:	885b      	ldrh	r3, [r3, #2]
 803043c:	b29b      	uxth	r3, r3
 803043e:	4618      	mov	r0, r3
 8030440:	f002 fceb 	bl	8032e1a <mg_ntohs>
 8030444:	4603      	mov	r3, r0
 8030446:	461a      	mov	r2, r3
 8030448:	683b      	ldr	r3, [r7, #0]
 803044a:	68db      	ldr	r3, [r3, #12]
 803044c:	9303      	str	r3, [sp, #12]
 803044e:	9202      	str	r2, [sp, #8]
 8030450:	9401      	str	r4, [sp, #4]
 8030452:	4b0f      	ldr	r3, [pc, #60]	@ (8030490 <rx_ip+0x2cc>)
 8030454:	9300      	str	r3, [sp, #0]
 8030456:	4633      	mov	r3, r6
 8030458:	462a      	mov	r2, r5
 803045a:	490d      	ldr	r1, [pc, #52]	@ (8030490 <rx_ip+0x2cc>)
 803045c:	480e      	ldr	r0, [pc, #56]	@ (8030498 <rx_ip+0x2d4>)
 803045e:	f7fb f885 	bl	802b56c <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 8030462:	6839      	ldr	r1, [r7, #0]
 8030464:	6878      	ldr	r0, [r7, #4]
 8030466:	f7ff fd7d 	bl	802ff64 <rx_tcp>
 803046a:	e006      	b.n	803047a <rx_ip+0x2b6>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 803046c:	bf00      	nop
 803046e:	e004      	b.n	803047a <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8030470:	bf00      	nop
 8030472:	e002      	b.n	803047a <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8030474:	bf00      	nop
 8030476:	e000      	b.n	803047a <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8030478:	bf00      	nop
  }
}
 803047a:	3714      	adds	r7, #20
 803047c:	46bd      	mov	sp, r7
 803047e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8030480:	08043414 	.word	0x08043414
 8030484:	200002a8 	.word	0x200002a8
 8030488:	08044b70 	.word	0x08044b70
 803048c:	08041a30 	.word	0x08041a30
 8030490:	080316bd 	.word	0x080316bd
 8030494:	08043430 	.word	0x08043430
 8030498:	0804344c 	.word	0x0804344c

0803049c <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 803049c:	b580      	push	{r7, lr}
 803049e:	b082      	sub	sp, #8
 80304a0:	af00      	add	r7, sp, #0
 80304a2:	6078      	str	r0, [r7, #4]
 80304a4:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 80304a6:	683b      	ldr	r3, [r7, #0]
 80304a8:	6a1b      	ldr	r3, [r3, #32]
 80304aa:	799b      	ldrb	r3, [r3, #6]
 80304ac:	2b01      	cmp	r3, #1
 80304ae:	d004      	beq.n	80304ba <rx_ip6+0x1e>
 80304b0:	683b      	ldr	r3, [r7, #0]
 80304b2:	6a1b      	ldr	r3, [r3, #32]
 80304b4:	799b      	ldrb	r3, [r3, #6]
 80304b6:	2b3a      	cmp	r3, #58	@ 0x3a
 80304b8:	d115      	bne.n	80304e6 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 80304ba:	683b      	ldr	r3, [r7, #0]
 80304bc:	6a1b      	ldr	r3, [r3, #32]
 80304be:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80304c2:	683b      	ldr	r3, [r7, #0]
 80304c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 80304c6:	683b      	ldr	r3, [r7, #0]
 80304c8:	68db      	ldr	r3, [r3, #12]
 80304ca:	2b03      	cmp	r3, #3
 80304cc:	d922      	bls.n	8030514 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 80304ce:	683b      	ldr	r3, [r7, #0]
 80304d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80304d2:	3304      	adds	r3, #4
 80304d4:	4619      	mov	r1, r3
 80304d6:	6838      	ldr	r0, [r7, #0]
 80304d8:	f7fd fdf4 	bl	802e0c4 <mkpay>
    rx_icmp(ifp, pkt);
 80304dc:	6839      	ldr	r1, [r7, #0]
 80304de:	6878      	ldr	r0, [r7, #4]
 80304e0:	f7fe fb82 	bl	802ebe8 <rx_icmp>
 80304e4:	e019      	b.n	803051a <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 80304e6:	683b      	ldr	r3, [r7, #0]
 80304e8:	6a1b      	ldr	r3, [r3, #32]
 80304ea:	799b      	ldrb	r3, [r3, #6]
 80304ec:	2b11      	cmp	r3, #17
 80304ee:	d114      	bne.n	803051a <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 80304f0:	683b      	ldr	r3, [r7, #0]
 80304f2:	6a1b      	ldr	r3, [r3, #32]
 80304f4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80304f8:	683b      	ldr	r3, [r7, #0]
 80304fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 80304fc:	683b      	ldr	r3, [r7, #0]
 80304fe:	68db      	ldr	r3, [r3, #12]
 8030500:	2b07      	cmp	r3, #7
 8030502:	d909      	bls.n	8030518 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 8030504:	683b      	ldr	r3, [r7, #0]
 8030506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8030508:	3308      	adds	r3, #8
 803050a:	4619      	mov	r1, r3
 803050c:	6838      	ldr	r0, [r7, #0]
 803050e:	f7fd fdd9 	bl	802e0c4 <mkpay>
 8030512:	e002      	b.n	803051a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8030514:	bf00      	nop
 8030516:	e000      	b.n	803051a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8030518:	bf00      	nop
  }
}
 803051a:	3708      	adds	r7, #8
 803051c:	46bd      	mov	sp, r7
 803051e:	bd80      	pop	{r7, pc}

08030520 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8030520:	b590      	push	{r4, r7, lr}
 8030522:	b093      	sub	sp, #76	@ 0x4c
 8030524:	af00      	add	r7, sp, #0
 8030526:	60f8      	str	r0, [r7, #12]
 8030528:	60b9      	str	r1, [r7, #8]
 803052a:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 803052c:	f107 0314 	add.w	r3, r7, #20
 8030530:	2234      	movs	r2, #52	@ 0x34
 8030532:	2100      	movs	r1, #0
 8030534:	4618      	mov	r0, r3
 8030536:	f005 fdd3 	bl	80360e0 <memset>
  pkt.raw.buf = (char *) buf;
 803053a:	68bb      	ldr	r3, [r7, #8]
 803053c:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 803053e:	687b      	ldr	r3, [r7, #4]
 8030540:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 8030542:	68bb      	ldr	r3, [r7, #8]
 8030544:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8030546:	69bb      	ldr	r3, [r7, #24]
 8030548:	2b0d      	cmp	r3, #13
 803054a:	f240 80d8 	bls.w	80306fe <mg_tcpip_rx+0x1de>
  if (ifp->enable_mac_check &&
 803054e:	68fb      	ldr	r3, [r7, #12]
 8030550:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8030554:	2b00      	cmp	r3, #0
 8030556:	d013      	beq.n	8030580 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8030558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803055a:	4618      	mov	r0, r3
 803055c:	68fb      	ldr	r3, [r7, #12]
 803055e:	2206      	movs	r2, #6
 8030560:	4619      	mov	r1, r3
 8030562:	f005 fd29 	bl	8035fb8 <memcmp>
 8030566:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 8030568:	2b00      	cmp	r3, #0
 803056a:	d009      	beq.n	8030580 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 803056c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803056e:	2206      	movs	r2, #6
 8030570:	496d      	ldr	r1, [pc, #436]	@ (8030728 <mg_tcpip_rx+0x208>)
 8030572:	4618      	mov	r0, r3
 8030574:	f005 fd20 	bl	8035fb8 <memcmp>
 8030578:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 803057a:	2b00      	cmp	r3, #0
 803057c:	f040 80c1 	bne.w	8030702 <mg_tcpip_rx+0x1e2>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 8030580:	68fb      	ldr	r3, [r7, #12]
 8030582:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8030586:	2b00      	cmp	r3, #0
 8030588:	d01a      	beq.n	80305c0 <mg_tcpip_rx+0xa0>
 803058a:	687b      	ldr	r3, [r7, #4]
 803058c:	2b04      	cmp	r3, #4
 803058e:	d917      	bls.n	80305c0 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 8030590:	687b      	ldr	r3, [r7, #4]
 8030592:	3b04      	subs	r3, #4
 8030594:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8030596:	687a      	ldr	r2, [r7, #4]
 8030598:	68b9      	ldr	r1, [r7, #8]
 803059a:	2000      	movs	r0, #0
 803059c:	f002 fc54 	bl	8032e48 <mg_crc32>
 80305a0:	4603      	mov	r3, r0
 80305a2:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 80305a4:	68ba      	ldr	r2, [r7, #8]
 80305a6:	687b      	ldr	r3, [r7, #4]
 80305a8:	4413      	add	r3, r2
 80305aa:	4618      	mov	r0, r3
 80305ac:	f107 0310 	add.w	r3, r7, #16
 80305b0:	2204      	movs	r2, #4
 80305b2:	4619      	mov	r1, r3
 80305b4:	f005 fd00 	bl	8035fb8 <memcmp>
 80305b8:	4603      	mov	r3, r0
 80305ba:	2b00      	cmp	r3, #0
 80305bc:	f040 80a3 	bne.w	8030706 <mg_tcpip_rx+0x1e6>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 80305c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80305c2:	899b      	ldrh	r3, [r3, #12]
 80305c4:	b29c      	uxth	r4, r3
 80305c6:	f640 0006 	movw	r0, #2054	@ 0x806
 80305ca:	f002 fc26 	bl	8032e1a <mg_ntohs>
 80305ce:	4603      	mov	r3, r0
 80305d0:	429c      	cmp	r4, r3
 80305d2:	d10d      	bne.n	80305f0 <mg_tcpip_rx+0xd0>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 80305d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80305d6:	330e      	adds	r3, #14
 80305d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 80305da:	69bb      	ldr	r3, [r7, #24]
 80305dc:	2b29      	cmp	r3, #41	@ 0x29
 80305de:	f240 8094 	bls.w	803070a <mg_tcpip_rx+0x1ea>
    rx_arp(ifp, &pkt);
 80305e2:	f107 0314 	add.w	r3, r7, #20
 80305e6:	4619      	mov	r1, r3
 80305e8:	68f8      	ldr	r0, [r7, #12]
 80305ea:	f7fe f9f3 	bl	802e9d4 <rx_arp>
 80305ee:	e097      	b.n	8030720 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 80305f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80305f2:	899b      	ldrh	r3, [r3, #12]
 80305f4:	b29c      	uxth	r4, r3
 80305f6:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 80305fa:	f002 fc0e 	bl	8032e1a <mg_ntohs>
 80305fe:	4603      	mov	r3, r0
 8030600:	429c      	cmp	r4, r3
 8030602:	d11b      	bne.n	803063c <mg_tcpip_rx+0x11c>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8030604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030606:	330e      	adds	r3, #14
 8030608:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 803060a:	69bb      	ldr	r3, [r7, #24]
 803060c:	2b35      	cmp	r3, #53	@ 0x35
 803060e:	d97e      	bls.n	803070e <mg_tcpip_rx+0x1ee>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8030610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030612:	781b      	ldrb	r3, [r3, #0]
 8030614:	091b      	lsrs	r3, r3, #4
 8030616:	b2db      	uxtb	r3, r3
 8030618:	2b06      	cmp	r3, #6
 803061a:	d17a      	bne.n	8030712 <mg_tcpip_rx+0x1f2>
    mkpay(&pkt, pkt.ip6 + 1);
 803061c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803061e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8030622:	f107 0314 	add.w	r3, r7, #20
 8030626:	4611      	mov	r1, r2
 8030628:	4618      	mov	r0, r3
 803062a:	f7fd fd4b 	bl	802e0c4 <mkpay>
    rx_ip6(ifp, &pkt);
 803062e:	f107 0314 	add.w	r3, r7, #20
 8030632:	4619      	mov	r1, r3
 8030634:	68f8      	ldr	r0, [r7, #12]
 8030636:	f7ff ff31 	bl	803049c <rx_ip6>
 803063a:	e071      	b.n	8030720 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 803063c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803063e:	899b      	ldrh	r3, [r3, #12]
 8030640:	b29c      	uxth	r4, r3
 8030642:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8030646:	f002 fbe8 	bl	8032e1a <mg_ntohs>
 803064a:	4603      	mov	r3, r0
 803064c:	429c      	cmp	r4, r3
 803064e:	d133      	bne.n	80306b8 <mg_tcpip_rx+0x198>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 8030650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030652:	330e      	adds	r3, #14
 8030654:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8030656:	69bb      	ldr	r3, [r7, #24]
 8030658:	2b21      	cmp	r3, #33	@ 0x21
 803065a:	d95c      	bls.n	8030716 <mg_tcpip_rx+0x1f6>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 803065c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803065e:	885b      	ldrh	r3, [r3, #2]
 8030660:	b29b      	uxth	r3, r3
 8030662:	4618      	mov	r0, r3
 8030664:	f002 fbd9 	bl	8032e1a <mg_ntohs>
 8030668:	4603      	mov	r3, r0
 803066a:	f103 020e 	add.w	r2, r3, #14
 803066e:	69bb      	ldr	r3, [r7, #24]
 8030670:	429a      	cmp	r2, r3
 8030672:	d208      	bcs.n	8030686 <mg_tcpip_rx+0x166>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8030674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8030676:	885b      	ldrh	r3, [r3, #2]
 8030678:	b29b      	uxth	r3, r3
 803067a:	4618      	mov	r0, r3
 803067c:	f002 fbcd 	bl	8032e1a <mg_ntohs>
 8030680:	4603      	mov	r3, r0
 8030682:	330e      	adds	r3, #14
 8030684:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8030686:	69bb      	ldr	r3, [r7, #24]
 8030688:	2b21      	cmp	r3, #33	@ 0x21
 803068a:	d946      	bls.n	803071a <mg_tcpip_rx+0x1fa>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 803068c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803068e:	781b      	ldrb	r3, [r3, #0]
 8030690:	091b      	lsrs	r3, r3, #4
 8030692:	b2db      	uxtb	r3, r3
 8030694:	2b04      	cmp	r3, #4
 8030696:	d142      	bne.n	803071e <mg_tcpip_rx+0x1fe>
    mkpay(&pkt, pkt.ip + 1);
 8030698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803069a:	f103 0214 	add.w	r2, r3, #20
 803069e:	f107 0314 	add.w	r3, r7, #20
 80306a2:	4611      	mov	r1, r2
 80306a4:	4618      	mov	r0, r3
 80306a6:	f7fd fd0d 	bl	802e0c4 <mkpay>
    rx_ip(ifp, &pkt);
 80306aa:	f107 0314 	add.w	r3, r7, #20
 80306ae:	4619      	mov	r1, r3
 80306b0:	68f8      	ldr	r0, [r7, #12]
 80306b2:	f7ff fd87 	bl	80301c4 <rx_ip>
 80306b6:	e033      	b.n	8030720 <mg_tcpip_rx+0x200>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 80306b8:	4b1c      	ldr	r3, [pc, #112]	@ (803072c <mg_tcpip_rx+0x20c>)
 80306ba:	681b      	ldr	r3, [r3, #0]
 80306bc:	2b02      	cmp	r3, #2
 80306be:	dd11      	ble.n	80306e4 <mg_tcpip_rx+0x1c4>
 80306c0:	4b1b      	ldr	r3, [pc, #108]	@ (8030730 <mg_tcpip_rx+0x210>)
 80306c2:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 80306c6:	491b      	ldr	r1, [pc, #108]	@ (8030734 <mg_tcpip_rx+0x214>)
 80306c8:	2003      	movs	r0, #3
 80306ca:	f7fa feff 	bl	802b4cc <mg_log_prefix>
 80306ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80306d0:	899b      	ldrh	r3, [r3, #12]
 80306d2:	b29b      	uxth	r3, r3
 80306d4:	4618      	mov	r0, r3
 80306d6:	f002 fba0 	bl	8032e1a <mg_ntohs>
 80306da:	4603      	mov	r3, r0
 80306dc:	4619      	mov	r1, r3
 80306de:	4816      	ldr	r0, [pc, #88]	@ (8030738 <mg_tcpip_rx+0x218>)
 80306e0:	f7fa ff44 	bl	802b56c <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 80306e4:	4b11      	ldr	r3, [pc, #68]	@ (803072c <mg_tcpip_rx+0x20c>)
 80306e6:	681b      	ldr	r3, [r3, #0]
 80306e8:	2b03      	cmp	r3, #3
 80306ea:	dd19      	ble.n	8030720 <mg_tcpip_rx+0x200>
 80306ec:	687b      	ldr	r3, [r7, #4]
 80306ee:	2b20      	cmp	r3, #32
 80306f0:	bf28      	it	cs
 80306f2:	2320      	movcs	r3, #32
 80306f4:	4619      	mov	r1, r3
 80306f6:	68b8      	ldr	r0, [r7, #8]
 80306f8:	f7fa ff6e 	bl	802b5d8 <mg_hexdump>
 80306fc:	e010      	b.n	8030720 <mg_tcpip_rx+0x200>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 80306fe:	bf00      	nop
 8030700:	e00e      	b.n	8030720 <mg_tcpip_rx+0x200>
    return;
 8030702:	bf00      	nop
 8030704:	e00c      	b.n	8030720 <mg_tcpip_rx+0x200>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8030706:	bf00      	nop
 8030708:	e00a      	b.n	8030720 <mg_tcpip_rx+0x200>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 803070a:	bf00      	nop
 803070c:	e008      	b.n	8030720 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 803070e:	bf00      	nop
 8030710:	e006      	b.n	8030720 <mg_tcpip_rx+0x200>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8030712:	bf00      	nop
 8030714:	e004      	b.n	8030720 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8030716:	bf00      	nop
 8030718:	e002      	b.n	8030720 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 803071a:	bf00      	nop
 803071c:	e000      	b.n	8030720 <mg_tcpip_rx+0x200>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 803071e:	bf00      	nop
  }
}
 8030720:	374c      	adds	r7, #76	@ 0x4c
 8030722:	46bd      	mov	sp, r7
 8030724:	bd90      	pop	{r4, r7, pc}
 8030726:	bf00      	nop
 8030728:	08044a14 	.word	0x08044a14
 803072c:	200002a8 	.word	0x200002a8
 8030730:	08044b78 	.word	0x08044b78
 8030734:	08041a30 	.word	0x08041a30
 8030738:	08043468 	.word	0x08043468

0803073c <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 803073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 803073e:	b095      	sub	sp, #84	@ 0x54
 8030740:	af06      	add	r7, sp, #24
 8030742:	6178      	str	r0, [r7, #20]
 8030744:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8030748:	697b      	ldr	r3, [r7, #20]
 803074a:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 803074e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8030752:	e9cd 2300 	strd	r2, r3, [sp]
 8030756:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 803075a:	f04f 0300 	mov.w	r3, #0
 803075e:	4608      	mov	r0, r1
 8030760:	f002 f83b 	bl	80327da <mg_timer_expired>
 8030764:	4603      	mov	r3, r0
 8030766:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 803076a:	6979      	ldr	r1, [r7, #20]
 803076c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8030770:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
  }
#endif
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 8030774:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8030778:	2b00      	cmp	r3, #0
 803077a:	d052      	beq.n	8030822 <mg_tcpip_poll+0xe6>
 803077c:	697b      	ldr	r3, [r7, #20]
 803077e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030780:	68db      	ldr	r3, [r3, #12]
 8030782:	2b00      	cmp	r3, #0
 8030784:	d04d      	beq.n	8030822 <mg_tcpip_poll+0xe6>
    bool up = ifp->driver->up(ifp);
 8030786:	697b      	ldr	r3, [r7, #20]
 8030788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 803078a:	68db      	ldr	r3, [r3, #12]
 803078c:	6978      	ldr	r0, [r7, #20]
 803078e:	4798      	blx	r3
 8030790:	4603      	mov	r3, r0
 8030792:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 8030796:	697b      	ldr	r3, [r7, #20]
 8030798:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 803079c:	2b00      	cmp	r3, #0
 803079e:	bf14      	ite	ne
 80307a0:	2301      	movne	r3, #1
 80307a2:	2300      	moveq	r3, #0
 80307a4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if (up != current) {
 80307a8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80307ac:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80307b0:	429a      	cmp	r2, r3
 80307b2:	d023      	beq.n	80307fc <mg_tcpip_poll+0xc0>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80307b4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80307b8:	f083 0301 	eor.w	r3, r3, #1
 80307bc:	b2db      	uxtb	r3, r3
 80307be:	2b00      	cmp	r3, #0
 80307c0:	d001      	beq.n	80307c6 <mg_tcpip_poll+0x8a>
 80307c2:	2300      	movs	r3, #0
 80307c4:	e006      	b.n	80307d4 <mg_tcpip_poll+0x98>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 80307c6:	697b      	ldr	r3, [r7, #20]
 80307c8:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80307ca:	2b00      	cmp	r3, #0
 80307cc:	d001      	beq.n	80307d2 <mg_tcpip_poll+0x96>
 80307ce:	2301      	movs	r3, #1
 80307d0:	e000      	b.n	80307d4 <mg_tcpip_poll+0x98>
 80307d2:	2303      	movs	r3, #3
 80307d4:	697a      	ldr	r2, [r7, #20]
 80307d6:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 80307da:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80307de:	f083 0301 	eor.w	r3, r3, #1
 80307e2:	b2db      	uxtb	r3, r3
 80307e4:	2b00      	cmp	r3, #0
 80307e6:	d006      	beq.n	80307f6 <mg_tcpip_poll+0xba>
 80307e8:	697b      	ldr	r3, [r7, #20]
 80307ea:	7f1b      	ldrb	r3, [r3, #28]
 80307ec:	2b00      	cmp	r3, #0
 80307ee:	d002      	beq.n	80307f6 <mg_tcpip_poll+0xba>
 80307f0:	697b      	ldr	r3, [r7, #20]
 80307f2:	2200      	movs	r2, #0
 80307f4:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 80307f6:	6978      	ldr	r0, [r7, #20]
 80307f8:	f7fd fdb2 	bl	802e360 <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 80307fc:	697b      	ldr	r3, [r7, #20]
 80307fe:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8030802:	2b00      	cmp	r3, #0
 8030804:	d10d      	bne.n	8030822 <mg_tcpip_poll+0xe6>
 8030806:	4ba4      	ldr	r3, [pc, #656]	@ (8030a98 <mg_tcpip_poll+0x35c>)
 8030808:	681b      	ldr	r3, [r3, #0]
 803080a:	2b00      	cmp	r3, #0
 803080c:	dd09      	ble.n	8030822 <mg_tcpip_poll+0xe6>
 803080e:	4ba3      	ldr	r3, [pc, #652]	@ (8030a9c <mg_tcpip_poll+0x360>)
 8030810:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 8030814:	49a2      	ldr	r1, [pc, #648]	@ (8030aa0 <mg_tcpip_poll+0x364>)
 8030816:	2001      	movs	r0, #1
 8030818:	f7fa fe58 	bl	802b4cc <mg_log_prefix>
 803081c:	48a1      	ldr	r0, [pc, #644]	@ (8030aa4 <mg_tcpip_poll+0x368>)
 803081e:	f7fa fea5 	bl	802b56c <mg_log>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8030822:	697b      	ldr	r3, [r7, #20]
 8030824:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8030828:	2b00      	cmp	r3, #0
 803082a:	f000 818d 	beq.w	8030b48 <mg_tcpip_poll+0x40c>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 803082e:	697b      	ldr	r3, [r7, #20]
 8030830:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8030834:	2b01      	cmp	r3, #1
 8030836:	d107      	bne.n	8030848 <mg_tcpip_poll+0x10c>
 8030838:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 803083c:	2b00      	cmp	r3, #0
 803083e:	d003      	beq.n	8030848 <mg_tcpip_poll+0x10c>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8030840:	6978      	ldr	r0, [r7, #20]
 8030842:	f7fe f819 	bl	802e878 <tx_dhcp_discover>
 8030846:	e04c      	b.n	80308e2 <mg_tcpip_poll+0x1a6>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8030848:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 803084c:	2b00      	cmp	r3, #0
 803084e:	d048      	beq.n	80308e2 <mg_tcpip_poll+0x1a6>
 8030850:	697b      	ldr	r3, [r7, #20]
 8030852:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8030856:	2b03      	cmp	r3, #3
 8030858:	d143      	bne.n	80308e2 <mg_tcpip_poll+0x1a6>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 803085a:	697b      	ldr	r3, [r7, #20]
 803085c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8030860:	4313      	orrs	r3, r2
 8030862:	d03e      	beq.n	80308e2 <mg_tcpip_poll+0x1a6>
    if (ifp->now >= ifp->lease_expire) {
 8030864:	697b      	ldr	r3, [r7, #20]
 8030866:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 803086a:	697b      	ldr	r3, [r7, #20]
 803086c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8030870:	4290      	cmp	r0, r2
 8030872:	eb71 0303 	sbcs.w	r3, r1, r3
 8030876:	d30a      	bcc.n	803088e <mg_tcpip_poll+0x152>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 8030878:	697b      	ldr	r3, [r7, #20]
 803087a:	2201      	movs	r2, #1
 803087c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8030880:	697b      	ldr	r3, [r7, #20]
 8030882:	2200      	movs	r2, #0
 8030884:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 8030886:	6978      	ldr	r0, [r7, #20]
 8030888:	f7fd fd6a 	bl	802e360 <onstatechange>
 803088c:	e029      	b.n	80308e2 <mg_tcpip_poll+0x1a6>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 803088e:	697b      	ldr	r3, [r7, #20]
 8030890:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8030894:	4984      	ldr	r1, [pc, #528]	@ (8030aa8 <mg_tcpip_poll+0x36c>)
 8030896:	1854      	adds	r4, r2, r1
 8030898:	f143 0500 	adc.w	r5, r3, #0
 803089c:	697b      	ldr	r3, [r7, #20]
 803089e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80308a2:	42a2      	cmp	r2, r4
 80308a4:	41ab      	sbcs	r3, r5
 80308a6:	d21c      	bcs.n	80308e2 <mg_tcpip_poll+0x1a6>
               ((ifp->now / 1000) % 60) == 0) {
 80308a8:	697b      	ldr	r3, [r7, #20]
 80308aa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80308ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80308b2:	f04f 0300 	mov.w	r3, #0
 80308b6:	f7e0 fa4f 	bl	8010d58 <__aeabi_uldivmod>
 80308ba:	4602      	mov	r2, r0
 80308bc:	460b      	mov	r3, r1
 80308be:	4610      	mov	r0, r2
 80308c0:	4619      	mov	r1, r3
 80308c2:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 80308c6:	f04f 0300 	mov.w	r3, #0
 80308ca:	f7e0 fa45 	bl	8010d58 <__aeabi_uldivmod>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80308ce:	4313      	orrs	r3, r2
 80308d0:	d107      	bne.n	80308e2 <mg_tcpip_poll+0x1a6>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 80308d2:	697b      	ldr	r3, [r7, #20]
 80308d4:	689a      	ldr	r2, [r3, #8]
 80308d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80308da:	4974      	ldr	r1, [pc, #464]	@ (8030aac <mg_tcpip_poll+0x370>)
 80308dc:	6978      	ldr	r0, [r7, #20]
 80308de:	f7fd ff99 	bl	802e814 <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 80308e2:	697b      	ldr	r3, [r7, #20]
 80308e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80308e6:	689b      	ldr	r3, [r3, #8]
 80308e8:	2b00      	cmp	r3, #0
 80308ea:	d019      	beq.n	8030920 <mg_tcpip_poll+0x1e4>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 80308ec:	697b      	ldr	r3, [r7, #20]
 80308ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80308f0:	689b      	ldr	r3, [r3, #8]
 80308f2:	697a      	ldr	r2, [r7, #20]
 80308f4:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80308f6:	697a      	ldr	r2, [r7, #20]
 80308f8:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80308fa:	697a      	ldr	r2, [r7, #20]
 80308fc:	4798      	blx	r3
 80308fe:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 8030900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030902:	2b00      	cmp	r3, #0
 8030904:	d024      	beq.n	8030950 <mg_tcpip_poll+0x214>
      ifp->nrecv++;
 8030906:	697b      	ldr	r3, [r7, #20]
 8030908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 803090a:	1c5a      	adds	r2, r3, #1
 803090c:	697b      	ldr	r3, [r7, #20]
 803090e:	671a      	str	r2, [r3, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8030910:	697b      	ldr	r3, [r7, #20]
 8030912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8030914:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8030916:	4619      	mov	r1, r3
 8030918:	6978      	ldr	r0, [r7, #20]
 803091a:	f7ff fe01 	bl	8030520 <mg_tcpip_rx>
 803091e:	e017      	b.n	8030950 <mg_tcpip_poll+0x214>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8030920:	697b      	ldr	r3, [r7, #20]
 8030922:	3334      	adds	r3, #52	@ 0x34
 8030924:	f107 0220 	add.w	r2, r7, #32
 8030928:	4611      	mov	r1, r2
 803092a:	4618      	mov	r0, r3
 803092c:	f000 ffb8 	bl	80318a0 <mg_queue_next>
 8030930:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 8030932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030934:	2b00      	cmp	r3, #0
 8030936:	d00b      	beq.n	8030950 <mg_tcpip_poll+0x214>
      mg_tcpip_rx(ifp, buf, len);
 8030938:	6a3b      	ldr	r3, [r7, #32]
 803093a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803093c:	4619      	mov	r1, r3
 803093e:	6978      	ldr	r0, [r7, #20]
 8030940:	f7ff fdee 	bl	8030520 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 8030944:	697b      	ldr	r3, [r7, #20]
 8030946:	3334      	adds	r3, #52	@ 0x34
 8030948:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803094a:	4618      	mov	r0, r3
 803094c:	f000 ffd9 	bl	8031902 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8030950:	697b      	ldr	r3, [r7, #20]
 8030952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8030954:	681b      	ldr	r3, [r3, #0]
 8030956:	637b      	str	r3, [r7, #52]	@ 0x34
 8030958:	e0f1      	b.n	8030b3e <mg_tcpip_poll+0x402>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 803095a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803095c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8030960:	f003 0301 	and.w	r3, r3, #1
 8030964:	b2db      	uxtb	r3, r3
 8030966:	2b00      	cmp	r3, #0
 8030968:	f040 80e5 	bne.w	8030b36 <mg_tcpip_poll+0x3fa>
 803096c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803096e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030972:	f003 0301 	and.w	r3, r3, #1
 8030976:	b2db      	uxtb	r3, r3
 8030978:	2b00      	cmp	r3, #0
 803097a:	f040 80dc 	bne.w	8030b36 <mg_tcpip_poll+0x3fa>
 803097e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030980:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030984:	f003 0308 	and.w	r3, r3, #8
 8030988:	b2db      	uxtb	r3, r3
 803098a:	2b00      	cmp	r3, #0
 803098c:	f040 80d3 	bne.w	8030b36 <mg_tcpip_poll+0x3fa>
    struct connstate *s = (struct connstate *) (c + 1);
 8030990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030992:	33b0      	adds	r3, #176	@ 0xb0
 8030994:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8030996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030998:	331c      	adds	r3, #28
 803099a:	681b      	ldr	r3, [r3, #0]
 803099c:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 803099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80309a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80309a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80309a8:	4290      	cmp	r0, r2
 80309aa:	eb71 0303 	sbcs.w	r3, r1, r3
 80309ae:	f080 80c3 	bcs.w	8030b38 <mg_tcpip_poll+0x3fc>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 80309b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80309b4:	7f9b      	ldrb	r3, [r3, #30]
 80309b6:	2b01      	cmp	r3, #1
 80309b8:	d142      	bne.n	8030a40 <mg_tcpip_poll+0x304>
 80309ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80309bc:	691a      	ldr	r2, [r3, #16]
 80309be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80309c0:	685b      	ldr	r3, [r3, #4]
 80309c2:	429a      	cmp	r2, r3
 80309c4:	d03c      	beq.n	8030a40 <mg_tcpip_poll+0x304>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 80309c6:	4b34      	ldr	r3, [pc, #208]	@ (8030a98 <mg_tcpip_poll+0x35c>)
 80309c8:	681b      	ldr	r3, [r3, #0]
 80309ca:	2b03      	cmp	r3, #3
 80309cc:	dd0f      	ble.n	80309ee <mg_tcpip_poll+0x2b2>
 80309ce:	4b33      	ldr	r3, [pc, #204]	@ (8030a9c <mg_tcpip_poll+0x360>)
 80309d0:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 80309d4:	4932      	ldr	r1, [pc, #200]	@ (8030aa0 <mg_tcpip_poll+0x364>)
 80309d6:	2004      	movs	r0, #4
 80309d8:	f7fa fd78 	bl	802b4cc <mg_log_prefix>
 80309dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80309de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80309e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80309e2:	681a      	ldr	r2, [r3, #0]
 80309e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80309e6:	685b      	ldr	r3, [r3, #4]
 80309e8:	4831      	ldr	r0, [pc, #196]	@ (8030ab0 <mg_tcpip_poll+0x374>)
 80309ea:	f7fa fdbf 	bl	802b56c <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80309ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80309f0:	f103 0618 	add.w	r6, r3, #24
 80309f4:	69fb      	ldr	r3, [r7, #28]
 80309f6:	613b      	str	r3, [r7, #16]
 80309f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80309fa:	8b1c      	ldrh	r4, [r3, #24]
 80309fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80309fe:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8030a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030a02:	681b      	ldr	r3, [r3, #0]
 8030a04:	4618      	mov	r0, r3
 8030a06:	f002 f9ef 	bl	8032de8 <mg_ntohl>
 8030a0a:	6078      	str	r0, [r7, #4]
 8030a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030a0e:	685b      	ldr	r3, [r3, #4]
 8030a10:	4618      	mov	r0, r3
 8030a12:	f002 f9e9 	bl	8032de8 <mg_ntohl>
 8030a16:	4603      	mov	r3, r0
 8030a18:	2200      	movs	r2, #0
 8030a1a:	9205      	str	r2, [sp, #20]
 8030a1c:	2200      	movs	r2, #0
 8030a1e:	9204      	str	r2, [sp, #16]
 8030a20:	9303      	str	r3, [sp, #12]
 8030a22:	6879      	ldr	r1, [r7, #4]
 8030a24:	9102      	str	r1, [sp, #8]
 8030a26:	9501      	str	r5, [sp, #4]
 8030a28:	9400      	str	r4, [sp, #0]
 8030a2a:	2310      	movs	r3, #16
 8030a2c:	693a      	ldr	r2, [r7, #16]
 8030a2e:	4631      	mov	r1, r6
 8030a30:	6978      	ldr	r0, [r7, #20]
 8030a32:	f7fe fd7d 	bl	802f530 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 8030a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030a38:	685a      	ldr	r2, [r3, #4]
 8030a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030a3c:	611a      	str	r2, [r3, #16]
 8030a3e:	e075      	b.n	8030b2c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 8030a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030a42:	7f9b      	ldrb	r3, [r3, #30]
 8030a44:	2b02      	cmp	r3, #2
 8030a46:	d104      	bne.n	8030a52 <mg_tcpip_poll+0x316>
        mg_error(c, "ARP timeout");
 8030a48:	491a      	ldr	r1, [pc, #104]	@ (8030ab4 <mg_tcpip_poll+0x378>)
 8030a4a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8030a4c:	f7f5 f978 	bl	8025d40 <mg_error>
 8030a50:	e06c      	b.n	8030b2c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 8030a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030a54:	7f9b      	ldrb	r3, [r3, #30]
 8030a56:	2b03      	cmp	r3, #3
 8030a58:	d104      	bne.n	8030a64 <mg_tcpip_poll+0x328>
        mg_error(c, "Connection timeout");
 8030a5a:	4917      	ldr	r1, [pc, #92]	@ (8030ab8 <mg_tcpip_poll+0x37c>)
 8030a5c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8030a5e:	f7f5 f96f 	bl	8025d40 <mg_error>
 8030a62:	e063      	b.n	8030b2c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 8030a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030a66:	7f9b      	ldrb	r3, [r3, #30]
 8030a68:	2b04      	cmp	r3, #4
 8030a6a:	d107      	bne.n	8030a7c <mg_tcpip_poll+0x340>
        c->is_closing = 1;
 8030a6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8030a6e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8030a72:	f043 0320 	orr.w	r3, r3, #32
 8030a76:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 8030a7a:	e05d      	b.n	8030b38 <mg_tcpip_poll+0x3fc>
      } else {
        if (s->tmiss++ > 2) {
 8030a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030a7e:	7fdb      	ldrb	r3, [r3, #31]
 8030a80:	1c5a      	adds	r2, r3, #1
 8030a82:	b2d1      	uxtb	r1, r2
 8030a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8030a86:	77d1      	strb	r1, [r2, #31]
 8030a88:	2b02      	cmp	r3, #2
 8030a8a:	d919      	bls.n	8030ac0 <mg_tcpip_poll+0x384>
          mg_error(c, "keepalive");
 8030a8c:	490b      	ldr	r1, [pc, #44]	@ (8030abc <mg_tcpip_poll+0x380>)
 8030a8e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8030a90:	f7f5 f956 	bl	8025d40 <mg_error>
 8030a94:	e04a      	b.n	8030b2c <mg_tcpip_poll+0x3f0>
 8030a96:	bf00      	nop
 8030a98:	200002a8 	.word	0x200002a8
 8030a9c:	08044b84 	.word	0x08044b84
 8030aa0:	08041a30 	.word	0x08041a30
 8030aa4:	0804347c 	.word	0x0804347c
 8030aa8:	001b7740 	.word	0x001b7740
 8030aac:	08044a14 	.word	0x08044a14
 8030ab0:	0804348c 	.word	0x0804348c
 8030ab4:	0804349c 	.word	0x0804349c
 8030ab8:	080434a8 	.word	0x080434a8
 8030abc:	080434bc 	.word	0x080434bc
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 8030ac0:	4b23      	ldr	r3, [pc, #140]	@ (8030b50 <mg_tcpip_poll+0x414>)
 8030ac2:	681b      	ldr	r3, [r3, #0]
 8030ac4:	2b03      	cmp	r3, #3
 8030ac6:	dd0c      	ble.n	8030ae2 <mg_tcpip_poll+0x3a6>
 8030ac8:	4b22      	ldr	r3, [pc, #136]	@ (8030b54 <mg_tcpip_poll+0x418>)
 8030aca:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8030ace:	4922      	ldr	r1, [pc, #136]	@ (8030b58 <mg_tcpip_poll+0x41c>)
 8030ad0:	2004      	movs	r0, #4
 8030ad2:	f7fa fcfb 	bl	802b4cc <mg_log_prefix>
 8030ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8030ada:	4619      	mov	r1, r3
 8030adc:	481f      	ldr	r0, [pc, #124]	@ (8030b5c <mg_tcpip_poll+0x420>)
 8030ade:	f7fa fd45 	bl	802b56c <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8030ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030ae4:	f103 0618 	add.w	r6, r3, #24
 8030ae8:	69fb      	ldr	r3, [r7, #28]
 8030aea:	613b      	str	r3, [r7, #16]
 8030aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030aee:	8b1c      	ldrh	r4, [r3, #24]
 8030af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030af2:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 8030af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030af6:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8030af8:	3b01      	subs	r3, #1
 8030afa:	4618      	mov	r0, r3
 8030afc:	f002 f974 	bl	8032de8 <mg_ntohl>
 8030b00:	6078      	str	r0, [r7, #4]
 8030b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030b04:	685b      	ldr	r3, [r3, #4]
 8030b06:	4618      	mov	r0, r3
 8030b08:	f002 f96e 	bl	8032de8 <mg_ntohl>
 8030b0c:	4603      	mov	r3, r0
 8030b0e:	2200      	movs	r2, #0
 8030b10:	9205      	str	r2, [sp, #20]
 8030b12:	2200      	movs	r2, #0
 8030b14:	9204      	str	r2, [sp, #16]
 8030b16:	9303      	str	r3, [sp, #12]
 8030b18:	6879      	ldr	r1, [r7, #4]
 8030b1a:	9102      	str	r1, [sp, #8]
 8030b1c:	9501      	str	r5, [sp, #4]
 8030b1e:	9400      	str	r4, [sp, #0]
 8030b20:	2310      	movs	r3, #16
 8030b22:	693a      	ldr	r2, [r7, #16]
 8030b24:	4631      	mov	r1, r6
 8030b26:	6978      	ldr	r0, [r7, #20]
 8030b28:	f7fe fd02 	bl	802f530 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 8030b2c:	2100      	movs	r1, #0
 8030b2e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8030b30:	f7fd fb40 	bl	802e1b4 <settmout>
 8030b34:	e000      	b.n	8030b38 <mg_tcpip_poll+0x3fc>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 8030b36:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8030b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030b3a:	681b      	ldr	r3, [r3, #0]
 8030b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8030b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8030b40:	2b00      	cmp	r3, #0
 8030b42:	f47f af0a 	bne.w	803095a <mg_tcpip_poll+0x21e>
 8030b46:	e000      	b.n	8030b4a <mg_tcpip_poll+0x40e>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8030b48:	bf00      	nop
    }
  }
}
 8030b4a:	373c      	adds	r7, #60	@ 0x3c
 8030b4c:	46bd      	mov	sp, r7
 8030b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8030b50:	200002a8 	.word	0x200002a8
 8030b54:	08044b84 	.word	0x08044b84
 8030b58:	08041a30 	.word	0x08041a30
 8030b5c:	080434c8 	.word	0x080434c8

08030b60 <mg_tcpip_init>:
  } else {
    ifp->ndrop++;
  }
}

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8030b60:	b580      	push	{r7, lr}
 8030b62:	b084      	sub	sp, #16
 8030b64:	af00      	add	r7, sp, #0
 8030b66:	6078      	str	r0, [r7, #4]
 8030b68:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8030b6a:	683b      	ldr	r3, [r7, #0]
 8030b6c:	781b      	ldrb	r3, [r3, #0]
 8030b6e:	2b00      	cmp	r3, #0
 8030b70:	d12d      	bne.n	8030bce <mg_tcpip_init+0x6e>
 8030b72:	683b      	ldr	r3, [r7, #0]
 8030b74:	785b      	ldrb	r3, [r3, #1]
 8030b76:	2b00      	cmp	r3, #0
 8030b78:	d129      	bne.n	8030bce <mg_tcpip_init+0x6e>
 8030b7a:	683b      	ldr	r3, [r7, #0]
 8030b7c:	789b      	ldrb	r3, [r3, #2]
 8030b7e:	2b00      	cmp	r3, #0
 8030b80:	d125      	bne.n	8030bce <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 8030b82:	683b      	ldr	r3, [r7, #0]
 8030b84:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8030b86:	2b00      	cmp	r3, #0
 8030b88:	d121      	bne.n	8030bce <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 8030b8a:	683b      	ldr	r3, [r7, #0]
 8030b8c:	791b      	ldrb	r3, [r3, #4]
 8030b8e:	2b00      	cmp	r3, #0
 8030b90:	d11d      	bne.n	8030bce <mg_tcpip_init+0x6e>
 8030b92:	683b      	ldr	r3, [r7, #0]
 8030b94:	795b      	ldrb	r3, [r3, #5]
 8030b96:	2b00      	cmp	r3, #0
 8030b98:	d119      	bne.n	8030bce <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 8030b9a:	683b      	ldr	r3, [r7, #0]
 8030b9c:	2202      	movs	r2, #2
 8030b9e:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8030ba0:	683b      	ldr	r3, [r7, #0]
 8030ba2:	3301      	adds	r3, #1
 8030ba4:	2105      	movs	r1, #5
 8030ba6:	4618      	mov	r0, r3
 8030ba8:	f002 f8b7 	bl	8032d1a <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 8030bac:	4b51      	ldr	r3, [pc, #324]	@ (8030cf4 <mg_tcpip_init+0x194>)
 8030bae:	681b      	ldr	r3, [r3, #0]
 8030bb0:	2b01      	cmp	r3, #1
 8030bb2:	dd0c      	ble.n	8030bce <mg_tcpip_init+0x6e>
 8030bb4:	4b50      	ldr	r3, [pc, #320]	@ (8030cf8 <mg_tcpip_init+0x198>)
 8030bb6:	f241 721f 	movw	r2, #5919	@ 0x171f
 8030bba:	4950      	ldr	r1, [pc, #320]	@ (8030cfc <mg_tcpip_init+0x19c>)
 8030bbc:	2002      	movs	r0, #2
 8030bbe:	f7fa fc85 	bl	802b4cc <mg_log_prefix>
 8030bc2:	683b      	ldr	r3, [r7, #0]
 8030bc4:	461a      	mov	r2, r3
 8030bc6:	494e      	ldr	r1, [pc, #312]	@ (8030d00 <mg_tcpip_init+0x1a0>)
 8030bc8:	484e      	ldr	r0, [pc, #312]	@ (8030d04 <mg_tcpip_init+0x1a4>)
 8030bca:	f7fa fccf 	bl	802b56c <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 8030bce:	683b      	ldr	r3, [r7, #0]
 8030bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030bd2:	681b      	ldr	r3, [r3, #0]
 8030bd4:	2b00      	cmp	r3, #0
 8030bd6:	d019      	beq.n	8030c0c <mg_tcpip_init+0xac>
 8030bd8:	683b      	ldr	r3, [r7, #0]
 8030bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030bdc:	681b      	ldr	r3, [r3, #0]
 8030bde:	6838      	ldr	r0, [r7, #0]
 8030be0:	4798      	blx	r3
 8030be2:	4603      	mov	r3, r0
 8030be4:	f083 0301 	eor.w	r3, r3, #1
 8030be8:	b2db      	uxtb	r3, r3
 8030bea:	2b00      	cmp	r3, #0
 8030bec:	d00e      	beq.n	8030c0c <mg_tcpip_init+0xac>
    MG_ERROR(("driver init failed"));
 8030bee:	4b41      	ldr	r3, [pc, #260]	@ (8030cf4 <mg_tcpip_init+0x194>)
 8030bf0:	681b      	ldr	r3, [r3, #0]
 8030bf2:	2b00      	cmp	r3, #0
 8030bf4:	dd7a      	ble.n	8030cec <mg_tcpip_init+0x18c>
 8030bf6:	4b40      	ldr	r3, [pc, #256]	@ (8030cf8 <mg_tcpip_init+0x198>)
 8030bf8:	f241 7223 	movw	r2, #5923	@ 0x1723
 8030bfc:	493f      	ldr	r1, [pc, #252]	@ (8030cfc <mg_tcpip_init+0x19c>)
 8030bfe:	2001      	movs	r0, #1
 8030c00:	f7fa fc64 	bl	802b4cc <mg_log_prefix>
 8030c04:	4840      	ldr	r0, [pc, #256]	@ (8030d08 <mg_tcpip_init+0x1a8>)
 8030c06:	f7fa fcb1 	bl	802b56c <mg_log>
 8030c0a:	e06f      	b.n	8030cec <mg_tcpip_init+0x18c>
  } else {
    size_t framesize = 1540;
 8030c0c:	f240 6304 	movw	r3, #1540	@ 0x604
 8030c10:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8030c12:	68f9      	ldr	r1, [r7, #12]
 8030c14:	2001      	movs	r0, #1
 8030c16:	f7f4 fa93 	bl	8025140 <mg_calloc>
 8030c1a:	4602      	mov	r2, r0
 8030c1c:	683b      	ldr	r3, [r7, #0]
 8030c1e:	615a      	str	r2, [r3, #20]
 8030c20:	683b      	ldr	r3, [r7, #0]
 8030c22:	68fa      	ldr	r2, [r7, #12]
 8030c24:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 8030c26:	683b      	ldr	r3, [r7, #0]
 8030c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8030c2a:	2b00      	cmp	r3, #0
 8030c2c:	d10a      	bne.n	8030c44 <mg_tcpip_init+0xe4>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8030c2e:	683b      	ldr	r3, [r7, #0]
 8030c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030c32:	689b      	ldr	r3, [r3, #8]
 8030c34:	2b00      	cmp	r3, #0
 8030c36:	d001      	beq.n	8030c3c <mg_tcpip_init+0xdc>
 8030c38:	68fb      	ldr	r3, [r7, #12]
 8030c3a:	e001      	b.n	8030c40 <mg_tcpip_init+0xe0>
 8030c3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8030c40:	683a      	ldr	r2, [r7, #0]
 8030c42:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 8030c44:	683b      	ldr	r3, [r7, #0]
 8030c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8030c48:	4619      	mov	r1, r3
 8030c4a:	2001      	movs	r0, #1
 8030c4c:	f7f4 fa78 	bl	8025140 <mg_calloc>
 8030c50:	4602      	mov	r2, r0
 8030c52:	683b      	ldr	r3, [r7, #0]
 8030c54:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8030c56:	f002 f971 	bl	8032f3c <mg_millis>
 8030c5a:	4602      	mov	r2, r0
 8030c5c:	460b      	mov	r3, r1
 8030c5e:	6839      	ldr	r1, [r7, #0]
 8030c60:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    mgr->priv = ifp;
 8030c64:	687b      	ldr	r3, [r7, #4]
 8030c66:	683a      	ldr	r2, [r7, #0]
 8030c68:	63da      	str	r2, [r3, #60]	@ 0x3c
    ifp->mgr = mgr;
 8030c6a:	683b      	ldr	r3, [r7, #0]
 8030c6c:	687a      	ldr	r2, [r7, #4]
 8030c6e:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8030c70:	683b      	ldr	r3, [r7, #0]
 8030c72:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8030c76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 8030c7a:	687b      	ldr	r3, [r7, #4]
 8030c7c:	2230      	movs	r2, #48	@ 0x30
 8030c7e:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8030c80:	683b      	ldr	r3, [r7, #0]
 8030c82:	689b      	ldr	r3, [r3, #8]
 8030c84:	2b00      	cmp	r3, #0
 8030c86:	d102      	bne.n	8030c8e <mg_tcpip_init+0x12e>
 8030c88:	683b      	ldr	r3, [r7, #0]
 8030c8a:	2201      	movs	r2, #1
 8030c8c:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 8030c8e:	683b      	ldr	r3, [r7, #0]
 8030c90:	3346      	adds	r3, #70	@ 0x46
 8030c92:	2206      	movs	r2, #6
 8030c94:	21ff      	movs	r1, #255	@ 0xff
 8030c96:	4618      	mov	r0, r3
 8030c98:	f005 fa22 	bl	80360e0 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8030c9c:	683b      	ldr	r3, [r7, #0]
 8030c9e:	3368      	adds	r3, #104	@ 0x68
 8030ca0:	2102      	movs	r1, #2
 8030ca2:	4618      	mov	r0, r3
 8030ca4:	f002 f839 	bl	8032d1a <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8030ca8:	683b      	ldr	r3, [r7, #0]
 8030caa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8030cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8030cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8030cb6:	b29a      	uxth	r2, r3
 8030cb8:	683b      	ldr	r3, [r7, #0]
 8030cba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8030cbe:	683b      	ldr	r3, [r7, #0]
 8030cc0:	695b      	ldr	r3, [r3, #20]
 8030cc2:	2b00      	cmp	r3, #0
 8030cc4:	d003      	beq.n	8030cce <mg_tcpip_init+0x16e>
 8030cc6:	683b      	ldr	r3, [r7, #0]
 8030cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8030cca:	2b00      	cmp	r3, #0
 8030ccc:	d10e      	bne.n	8030cec <mg_tcpip_init+0x18c>
 8030cce:	4b09      	ldr	r3, [pc, #36]	@ (8030cf4 <mg_tcpip_init+0x194>)
 8030cd0:	681b      	ldr	r3, [r3, #0]
 8030cd2:	2b00      	cmp	r3, #0
 8030cd4:	dd0a      	ble.n	8030cec <mg_tcpip_init+0x18c>
 8030cd6:	4b08      	ldr	r3, [pc, #32]	@ (8030cf8 <mg_tcpip_init+0x198>)
 8030cd8:	f241 7234 	movw	r2, #5940	@ 0x1734
 8030cdc:	4907      	ldr	r1, [pc, #28]	@ (8030cfc <mg_tcpip_init+0x19c>)
 8030cde:	2001      	movs	r0, #1
 8030ce0:	f7fa fbf4 	bl	802b4cc <mg_log_prefix>
 8030ce4:	4809      	ldr	r0, [pc, #36]	@ (8030d0c <mg_tcpip_init+0x1ac>)
 8030ce6:	f7fa fc41 	bl	802b56c <mg_log>
  }
}
 8030cea:	e7ff      	b.n	8030cec <mg_tcpip_init+0x18c>
 8030cec:	bf00      	nop
 8030cee:	3710      	adds	r7, #16
 8030cf0:	46bd      	mov	sp, r7
 8030cf2:	bd80      	pop	{r7, pc}
 8030cf4:	200002a8 	.word	0x200002a8
 8030cf8:	08044b94 	.word	0x08044b94
 8030cfc:	08041a30 	.word	0x08041a30
 8030d00:	08031781 	.word	0x08031781
 8030d04:	080434d8 	.word	0x080434d8
 8030d08:	080434fc 	.word	0x080434fc
 8030d0c:	08042f6c 	.word	0x08042f6c

08030d10 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 8030d10:	b590      	push	{r4, r7, lr}
 8030d12:	b08d      	sub	sp, #52	@ 0x34
 8030d14:	af06      	add	r7, sp, #24
 8030d16:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8030d18:	687b      	ldr	r3, [r7, #4]
 8030d1a:	33b0      	adds	r3, #176	@ 0xb0
 8030d1c:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8030d1e:	687b      	ldr	r3, [r7, #4]
 8030d20:	8b1b      	ldrh	r3, [r3, #24]
 8030d22:	4618      	mov	r0, r3
 8030d24:	f002 f879 	bl	8032e1a <mg_ntohs>
 8030d28:	4603      	mov	r3, r0
 8030d2a:	4618      	mov	r0, r3
 8030d2c:	f002 f85c 	bl	8032de8 <mg_ntohl>
 8030d30:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8030d32:	687b      	ldr	r3, [r7, #4]
 8030d34:	685b      	ldr	r3, [r3, #4]
 8030d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8030d38:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8030d3a:	687b      	ldr	r3, [r7, #4]
 8030d3c:	331c      	adds	r3, #28
 8030d3e:	681b      	ldr	r3, [r3, #0]
 8030d40:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 8030d42:	697b      	ldr	r3, [r7, #20]
 8030d44:	f103 0018 	add.w	r0, r3, #24
 8030d48:	68bc      	ldr	r4, [r7, #8]
 8030d4a:	687b      	ldr	r3, [r7, #4]
 8030d4c:	8b1b      	ldrh	r3, [r3, #24]
 8030d4e:	687a      	ldr	r2, [r7, #4]
 8030d50:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8030d52:	2100      	movs	r1, #0
 8030d54:	9105      	str	r1, [sp, #20]
 8030d56:	2100      	movs	r1, #0
 8030d58:	9104      	str	r1, [sp, #16]
 8030d5a:	2100      	movs	r1, #0
 8030d5c:	9103      	str	r1, [sp, #12]
 8030d5e:	6939      	ldr	r1, [r7, #16]
 8030d60:	9102      	str	r1, [sp, #8]
 8030d62:	9201      	str	r2, [sp, #4]
 8030d64:	9300      	str	r3, [sp, #0]
 8030d66:	2302      	movs	r3, #2
 8030d68:	4622      	mov	r2, r4
 8030d6a:	4601      	mov	r1, r0
 8030d6c:	68f8      	ldr	r0, [r7, #12]
 8030d6e:	f7fe fbdf 	bl	802f530 <tx_tcp>
         0);
}
 8030d72:	bf00      	nop
 8030d74:	371c      	adds	r7, #28
 8030d76:	46bd      	mov	sp, r7
 8030d78:	bd90      	pop	{r4, r7, pc}
	...

08030d7c <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 8030d7c:	b580      	push	{r7, lr}
 8030d7e:	b08a      	sub	sp, #40	@ 0x28
 8030d80:	af02      	add	r7, sp, #8
 8030d82:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8030d84:	687b      	ldr	r3, [r7, #4]
 8030d86:	685b      	ldr	r3, [r3, #4]
 8030d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8030d8a:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8030d8c:	687b      	ldr	r3, [r7, #4]
 8030d8e:	331c      	adds	r3, #28
 8030d90:	681b      	ldr	r3, [r3, #0]
 8030d92:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 8030d94:	687a      	ldr	r2, [r7, #4]
 8030d96:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8030d9a:	f36f 03c3 	bfc	r3, #3, #1
 8030d9e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8030da2:	69fb      	ldr	r3, [r7, #28]
 8030da4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8030da8:	b21b      	sxth	r3, r3
 8030daa:	2b00      	cmp	r3, #0
 8030dac:	db04      	blt.n	8030db8 <mg_connect_resolved+0x3c>
 8030dae:	69fb      	ldr	r3, [r7, #28]
 8030db0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8030db4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8030db8:	687b      	ldr	r3, [r7, #4]
 8030dba:	3308      	adds	r3, #8
 8030dbc:	69fa      	ldr	r2, [r7, #28]
 8030dbe:	3208      	adds	r2, #8
 8030dc0:	6812      	ldr	r2, [r2, #0]
 8030dc2:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 8030dc4:	69fb      	ldr	r3, [r7, #28]
 8030dc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8030dca:	1c5a      	adds	r2, r3, #1
 8030dcc:	b291      	uxth	r1, r2
 8030dce:	69fa      	ldr	r2, [r7, #28]
 8030dd0:	f8a2 1068 	strh.w	r1, [r2, #104]	@ 0x68
 8030dd4:	4618      	mov	r0, r3
 8030dd6:	f002 f820 	bl	8032e1a <mg_ntohs>
 8030dda:	4603      	mov	r3, r0
 8030ddc:	461a      	mov	r2, r3
 8030dde:	687b      	ldr	r3, [r7, #4]
 8030de0:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8030de2:	4b6a      	ldr	r3, [pc, #424]	@ (8030f8c <mg_connect_resolved+0x210>)
 8030de4:	681b      	ldr	r3, [r3, #0]
 8030de6:	2b02      	cmp	r3, #2
 8030de8:	dd15      	ble.n	8030e16 <mg_connect_resolved+0x9a>
 8030dea:	4b69      	ldr	r3, [pc, #420]	@ (8030f90 <mg_connect_resolved+0x214>)
 8030dec:	f241 724f 	movw	r2, #5967	@ 0x174f
 8030df0:	4968      	ldr	r1, [pc, #416]	@ (8030f94 <mg_connect_resolved+0x218>)
 8030df2:	2003      	movs	r0, #3
 8030df4:	f7fa fb6a 	bl	802b4cc <mg_log_prefix>
 8030df8:	687b      	ldr	r3, [r7, #4]
 8030dfa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8030dfc:	687b      	ldr	r3, [r7, #4]
 8030dfe:	f103 0208 	add.w	r2, r3, #8
 8030e02:	687b      	ldr	r3, [r7, #4]
 8030e04:	331c      	adds	r3, #28
 8030e06:	9301      	str	r3, [sp, #4]
 8030e08:	4b63      	ldr	r3, [pc, #396]	@ (8030f98 <mg_connect_resolved+0x21c>)
 8030e0a:	9300      	str	r3, [sp, #0]
 8030e0c:	4613      	mov	r3, r2
 8030e0e:	4a62      	ldr	r2, [pc, #392]	@ (8030f98 <mg_connect_resolved+0x21c>)
 8030e10:	4862      	ldr	r0, [pc, #392]	@ (8030f9c <mg_connect_resolved+0x220>)
 8030e12:	f7fa fbab 	bl	802b56c <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 8030e16:	2200      	movs	r2, #0
 8030e18:	2103      	movs	r1, #3
 8030e1a:	6878      	ldr	r0, [r7, #4]
 8030e1c:	f7f4 ff70 	bl	8025d00 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8030e20:	687b      	ldr	r3, [r7, #4]
 8030e22:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8030e26:	f003 0301 	and.w	r3, r3, #1
 8030e2a:	b2db      	uxtb	r3, r3
 8030e2c:	2b00      	cmp	r3, #0
 8030e2e:	d017      	beq.n	8030e60 <mg_connect_resolved+0xe4>
 8030e30:	68fb      	ldr	r3, [r7, #12]
 8030e32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8030e36:	d008      	beq.n	8030e4a <mg_connect_resolved+0xce>
 8030e38:	69fb      	ldr	r3, [r7, #28]
 8030e3a:	689a      	ldr	r2, [r3, #8]
 8030e3c:	69fb      	ldr	r3, [r7, #28]
 8030e3e:	68db      	ldr	r3, [r3, #12]
 8030e40:	43db      	mvns	r3, r3
 8030e42:	431a      	orrs	r2, r3
 8030e44:	68fb      	ldr	r3, [r7, #12]
 8030e46:	429a      	cmp	r2, r3
 8030e48:	d10a      	bne.n	8030e60 <mg_connect_resolved+0xe4>
    struct connstate *s = (struct connstate *) (c + 1);
 8030e4a:	687b      	ldr	r3, [r7, #4]
 8030e4c:	33b0      	adds	r3, #176	@ 0xb0
 8030e4e:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 8030e50:	69bb      	ldr	r3, [r7, #24]
 8030e52:	3318      	adds	r3, #24
 8030e54:	2206      	movs	r2, #6
 8030e56:	21ff      	movs	r1, #255	@ 0xff
 8030e58:	4618      	mov	r0, r3
 8030e5a:	f005 f941 	bl	80360e0 <memset>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8030e5e:	e091      	b.n	8030f84 <mg_connect_resolved+0x208>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8030e60:	69fb      	ldr	r3, [r7, #28]
 8030e62:	689b      	ldr	r3, [r3, #8]
 8030e64:	2b00      	cmp	r3, #0
 8030e66:	d036      	beq.n	8030ed6 <mg_connect_resolved+0x15a>
 8030e68:	69fb      	ldr	r3, [r7, #28]
 8030e6a:	689a      	ldr	r2, [r3, #8]
 8030e6c:	68fb      	ldr	r3, [r7, #12]
 8030e6e:	405a      	eors	r2, r3
 8030e70:	69fb      	ldr	r3, [r7, #28]
 8030e72:	68db      	ldr	r3, [r3, #12]
 8030e74:	4013      	ands	r3, r2
 8030e76:	2b00      	cmp	r3, #0
 8030e78:	d12d      	bne.n	8030ed6 <mg_connect_resolved+0x15a>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8030e7a:	69fb      	ldr	r3, [r7, #28]
 8030e7c:	691a      	ldr	r2, [r3, #16]
 8030e7e:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8030e80:	429a      	cmp	r2, r3
 8030e82:	d028      	beq.n	8030ed6 <mg_connect_resolved+0x15a>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8030e84:	4b41      	ldr	r3, [pc, #260]	@ (8030f8c <mg_connect_resolved+0x210>)
 8030e86:	681b      	ldr	r3, [r3, #0]
 8030e88:	2b02      	cmp	r3, #2
 8030e8a:	dd0c      	ble.n	8030ea6 <mg_connect_resolved+0x12a>
 8030e8c:	4b40      	ldr	r3, [pc, #256]	@ (8030f90 <mg_connect_resolved+0x214>)
 8030e8e:	f241 7258 	movw	r2, #5976	@ 0x1758
 8030e92:	4940      	ldr	r1, [pc, #256]	@ (8030f94 <mg_connect_resolved+0x218>)
 8030e94:	2003      	movs	r0, #3
 8030e96:	f7fa fb19 	bl	802b4cc <mg_log_prefix>
 8030e9a:	687b      	ldr	r3, [r7, #4]
 8030e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8030e9e:	4619      	mov	r1, r3
 8030ea0:	483f      	ldr	r0, [pc, #252]	@ (8030fa0 <mg_connect_resolved+0x224>)
 8030ea2:	f7fa fb63 	bl	802b56c <mg_log>
    arp_ask(ifp, rem_ip);
 8030ea6:	68fb      	ldr	r3, [r7, #12]
 8030ea8:	4619      	mov	r1, r3
 8030eaa:	69f8      	ldr	r0, [r7, #28]
 8030eac:	f7fd f9fa 	bl	802e2a4 <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8030eb0:	2102      	movs	r1, #2
 8030eb2:	6878      	ldr	r0, [r7, #4]
 8030eb4:	f7fd f97e 	bl	802e1b4 <settmout>
    c->is_arplooking = 1;
 8030eb8:	687a      	ldr	r2, [r7, #4]
 8030eba:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8030ebe:	f043 0310 	orr.w	r3, r3, #16
 8030ec2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_connecting = 1;
 8030ec6:	687a      	ldr	r2, [r7, #4]
 8030ec8:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8030ecc:	f043 0320 	orr.w	r3, r3, #32
 8030ed0:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8030ed4:	e056      	b.n	8030f84 <mg_connect_resolved+0x208>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8030ed6:	f107 030c 	add.w	r3, r7, #12
 8030eda:	781b      	ldrb	r3, [r3, #0]
 8030edc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8030ee0:	2be0      	cmp	r3, #224	@ 0xe0
 8030ee2:	d126      	bne.n	8030f32 <mg_connect_resolved+0x1b6>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 8030ee4:	687b      	ldr	r3, [r7, #4]
 8030ee6:	33b0      	adds	r3, #176	@ 0xb0
 8030ee8:	613b      	str	r3, [r7, #16]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 8030eea:	4a2e      	ldr	r2, [pc, #184]	@ (8030fa4 <mg_connect_resolved+0x228>)
 8030eec:	f107 0308 	add.w	r3, r7, #8
 8030ef0:	6812      	ldr	r2, [r2, #0]
 8030ef2:	4611      	mov	r1, r2
 8030ef4:	8019      	strh	r1, [r3, #0]
 8030ef6:	3302      	adds	r3, #2
 8030ef8:	0c12      	lsrs	r2, r2, #16
 8030efa:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 8030efc:	693b      	ldr	r3, [r7, #16]
 8030efe:	3318      	adds	r3, #24
 8030f00:	461a      	mov	r2, r3
 8030f02:	f107 0308 	add.w	r3, r7, #8
 8030f06:	8819      	ldrh	r1, [r3, #0]
 8030f08:	789b      	ldrb	r3, [r3, #2]
 8030f0a:	8011      	strh	r1, [r2, #0]
 8030f0c:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 8030f0e:	693b      	ldr	r3, [r7, #16]
 8030f10:	3318      	adds	r3, #24
 8030f12:	1cd8      	adds	r0, r3, #3
 8030f14:	f107 030c 	add.w	r3, r7, #12
 8030f18:	3301      	adds	r3, #1
 8030f1a:	2203      	movs	r2, #3
 8030f1c:	4619      	mov	r1, r3
 8030f1e:	f006 fb1b 	bl	8037558 <memcpy>
    s->mac[3] &= 0x7F;
 8030f22:	693b      	ldr	r3, [r7, #16]
 8030f24:	7edb      	ldrb	r3, [r3, #27]
 8030f26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8030f2a:	b2da      	uxtb	r2, r3
 8030f2c:	693b      	ldr	r3, [r7, #16]
 8030f2e:	76da      	strb	r2, [r3, #27]
      send_syn(c);
      settmout(c, MIP_TTYPE_SYN);
      c->is_connecting = 1;
    }
  }
}
 8030f30:	e028      	b.n	8030f84 <mg_connect_resolved+0x208>
    struct connstate *s = (struct connstate *) (c + 1);
 8030f32:	687b      	ldr	r3, [r7, #4]
 8030f34:	33b0      	adds	r3, #176	@ 0xb0
 8030f36:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8030f38:	697b      	ldr	r3, [r7, #20]
 8030f3a:	f103 0018 	add.w	r0, r3, #24
 8030f3e:	69fb      	ldr	r3, [r7, #28]
 8030f40:	3346      	adds	r3, #70	@ 0x46
 8030f42:	2206      	movs	r2, #6
 8030f44:	4619      	mov	r1, r3
 8030f46:	f006 fb07 	bl	8037558 <memcpy>
    if (c->is_udp) {
 8030f4a:	687b      	ldr	r3, [r7, #4]
 8030f4c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8030f50:	f003 0301 	and.w	r3, r3, #1
 8030f54:	b2db      	uxtb	r3, r3
 8030f56:	2b00      	cmp	r3, #0
 8030f58:	d005      	beq.n	8030f66 <mg_connect_resolved+0x1ea>
      mg_call(c, MG_EV_CONNECT, NULL);
 8030f5a:	2200      	movs	r2, #0
 8030f5c:	2104      	movs	r1, #4
 8030f5e:	6878      	ldr	r0, [r7, #4]
 8030f60:	f7f4 fece 	bl	8025d00 <mg_call>
}
 8030f64:	e00e      	b.n	8030f84 <mg_connect_resolved+0x208>
      send_syn(c);
 8030f66:	6878      	ldr	r0, [r7, #4]
 8030f68:	f7ff fed2 	bl	8030d10 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8030f6c:	2103      	movs	r1, #3
 8030f6e:	6878      	ldr	r0, [r7, #4]
 8030f70:	f7fd f920 	bl	802e1b4 <settmout>
      c->is_connecting = 1;
 8030f74:	687a      	ldr	r2, [r7, #4]
 8030f76:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8030f7a:	f043 0320 	orr.w	r3, r3, #32
 8030f7e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
}
 8030f82:	e7ff      	b.n	8030f84 <mg_connect_resolved+0x208>
 8030f84:	bf00      	nop
 8030f86:	3720      	adds	r7, #32
 8030f88:	46bd      	mov	sp, r7
 8030f8a:	bd80      	pop	{r7, pc}
 8030f8c:	200002a8 	.word	0x200002a8
 8030f90:	08044ba4 	.word	0x08044ba4
 8030f94:	08041a30 	.word	0x08041a30
 8030f98:	08031735 	.word	0x08031735
 8030f9c:	08043510 	.word	0x08043510
 8030fa0:	08043520 	.word	0x08043520
 8030fa4:	08043534 	.word	0x08043534

08030fa8 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 8030fa8:	b580      	push	{r7, lr}
 8030faa:	b082      	sub	sp, #8
 8030fac:	af00      	add	r7, sp, #0
 8030fae:	6078      	str	r0, [r7, #4]
 8030fb0:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 8030fb2:	6838      	ldr	r0, [r7, #0]
 8030fb4:	f001 fe34 	bl	8032c20 <mg_url_port>
 8030fb8:	4603      	mov	r3, r0
 8030fba:	4618      	mov	r0, r3
 8030fbc:	f001 ff2d 	bl	8032e1a <mg_ntohs>
 8030fc0:	4603      	mov	r3, r0
 8030fc2:	461a      	mov	r2, r3
 8030fc4:	687b      	ldr	r3, [r7, #4]
 8030fc6:	831a      	strh	r2, [r3, #24]
  return true;
 8030fc8:	2301      	movs	r3, #1
}
 8030fca:	4618      	mov	r0, r3
 8030fcc:	3708      	adds	r7, #8
 8030fce:	46bd      	mov	sp, r7
 8030fd0:	bd80      	pop	{r7, pc}
	...

08030fd4 <write_conn>:

static void write_conn(struct mg_connection *c) {
 8030fd4:	b580      	push	{r7, lr}
 8030fd6:	b084      	sub	sp, #16
 8030fd8:	af00      	add	r7, sp, #0
 8030fda:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8030fdc:	687b      	ldr	r3, [r7, #4]
 8030fde:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8030fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8030fe6:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 8030fe8:	2b00      	cmp	r3, #0
 8030fea:	d009      	beq.n	8031000 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8030fec:	687b      	ldr	r3, [r7, #4]
 8030fee:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8030ff0:	687b      	ldr	r3, [r7, #4]
 8030ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8030ff4:	461a      	mov	r2, r3
 8030ff6:	6878      	ldr	r0, [r7, #4]
 8030ff8:	f001 fce7 	bl	80329ca <mg_tls_send>
 8030ffc:	4603      	mov	r3, r0
 8030ffe:	e008      	b.n	8031012 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8031000:	687b      	ldr	r3, [r7, #4]
 8031002:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8031004:	687b      	ldr	r3, [r7, #4]
 8031006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8031008:	461a      	mov	r2, r3
 803100a:	6878      	ldr	r0, [r7, #4]
 803100c:	f7fe fce8 	bl	802f9e0 <mg_io_send>
 8031010:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8031012:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 8031014:	68fb      	ldr	r3, [r7, #12]
 8031016:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 803101a:	d104      	bne.n	8031026 <write_conn+0x52>
    mg_error(c, "tx err");
 803101c:	490c      	ldr	r1, [pc, #48]	@ (8031050 <write_conn+0x7c>)
 803101e:	6878      	ldr	r0, [r7, #4]
 8031020:	f7f4 fe8e 	bl	8025d40 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 8031024:	e010      	b.n	8031048 <write_conn+0x74>
  } else if (len > 0) {
 8031026:	68fb      	ldr	r3, [r7, #12]
 8031028:	2b00      	cmp	r3, #0
 803102a:	dd0d      	ble.n	8031048 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 803102c:	687b      	ldr	r3, [r7, #4]
 803102e:	3348      	adds	r3, #72	@ 0x48
 8031030:	68fa      	ldr	r2, [r7, #12]
 8031032:	2100      	movs	r1, #0
 8031034:	4618      	mov	r0, r3
 8031036:	f7f9 fb37 	bl	802a6a8 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 803103a:	f107 030c 	add.w	r3, r7, #12
 803103e:	461a      	mov	r2, r3
 8031040:	2108      	movs	r1, #8
 8031042:	6878      	ldr	r0, [r7, #4]
 8031044:	f7f4 fe5c 	bl	8025d00 <mg_call>
}
 8031048:	bf00      	nop
 803104a:	3710      	adds	r7, #16
 803104c:	46bd      	mov	sp, r7
 803104e:	bd80      	pop	{r7, pc}
 8031050:	08043538 	.word	0x08043538

08031054 <init_closure>:

static void init_closure(struct mg_connection *c) {
 8031054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8031056:	b08f      	sub	sp, #60	@ 0x3c
 8031058:	af06      	add	r7, sp, #24
 803105a:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 803105c:	68fb      	ldr	r3, [r7, #12]
 803105e:	33b0      	adds	r3, #176	@ 0xb0
 8031060:	61fb      	str	r3, [r7, #28]
  if (c->is_udp == false && c->is_listening == false &&
 8031062:	68fb      	ldr	r3, [r7, #12]
 8031064:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8031068:	f003 0301 	and.w	r3, r3, #1
 803106c:	b2db      	uxtb	r3, r3
 803106e:	2b00      	cmp	r3, #0
 8031070:	d13f      	bne.n	80310f2 <init_closure+0x9e>
 8031072:	68fb      	ldr	r3, [r7, #12]
 8031074:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8031078:	f003 0301 	and.w	r3, r3, #1
 803107c:	b2db      	uxtb	r3, r3
 803107e:	2b00      	cmp	r3, #0
 8031080:	d137      	bne.n	80310f2 <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 8031082:	68fb      	ldr	r3, [r7, #12]
 8031084:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8031088:	f003 0320 	and.w	r3, r3, #32
 803108c:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 803108e:	2b00      	cmp	r3, #0
 8031090:	d12f      	bne.n	80310f2 <init_closure+0x9e>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8031092:	68fb      	ldr	r3, [r7, #12]
 8031094:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 8031096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8031098:	61bb      	str	r3, [r7, #24]
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 803109a:	68fb      	ldr	r3, [r7, #12]
 803109c:	331c      	adds	r3, #28
 803109e:	681b      	ldr	r3, [r3, #0]
 80310a0:	617b      	str	r3, [r7, #20]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 80310a2:	69fb      	ldr	r3, [r7, #28]
 80310a4:	f103 0618 	add.w	r6, r3, #24
 80310a8:	697b      	ldr	r3, [r7, #20]
 80310aa:	60bb      	str	r3, [r7, #8]
 80310ac:	68fb      	ldr	r3, [r7, #12]
 80310ae:	8b1c      	ldrh	r4, [r3, #24]
 80310b0:	68fb      	ldr	r3, [r7, #12]
 80310b2:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 80310b4:	69fb      	ldr	r3, [r7, #28]
 80310b6:	681b      	ldr	r3, [r3, #0]
 80310b8:	4618      	mov	r0, r3
 80310ba:	f001 fe95 	bl	8032de8 <mg_ntohl>
 80310be:	6078      	str	r0, [r7, #4]
 80310c0:	69fb      	ldr	r3, [r7, #28]
 80310c2:	685b      	ldr	r3, [r3, #4]
 80310c4:	4618      	mov	r0, r3
 80310c6:	f001 fe8f 	bl	8032de8 <mg_ntohl>
 80310ca:	4603      	mov	r3, r0
 80310cc:	2200      	movs	r2, #0
 80310ce:	9205      	str	r2, [sp, #20]
 80310d0:	2200      	movs	r2, #0
 80310d2:	9204      	str	r2, [sp, #16]
 80310d4:	9303      	str	r3, [sp, #12]
 80310d6:	6879      	ldr	r1, [r7, #4]
 80310d8:	9102      	str	r1, [sp, #8]
 80310da:	9501      	str	r5, [sp, #4]
 80310dc:	9400      	str	r4, [sp, #0]
 80310de:	2311      	movs	r3, #17
 80310e0:	68ba      	ldr	r2, [r7, #8]
 80310e2:	4631      	mov	r1, r6
 80310e4:	69b8      	ldr	r0, [r7, #24]
 80310e6:	f7fe fa23 	bl	802f530 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 80310ea:	2104      	movs	r1, #4
 80310ec:	68f8      	ldr	r0, [r7, #12]
 80310ee:	f7fd f861 	bl	802e1b4 <settmout>
  }
}
 80310f2:	bf00      	nop
 80310f4:	3724      	adds	r7, #36	@ 0x24
 80310f6:	46bd      	mov	sp, r7
 80310f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080310fa <close_conn>:

static void close_conn(struct mg_connection *c) {
 80310fa:	b580      	push	{r7, lr}
 80310fc:	b084      	sub	sp, #16
 80310fe:	af00      	add	r7, sp, #0
 8031100:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8031102:	687b      	ldr	r3, [r7, #4]
 8031104:	33b0      	adds	r3, #176	@ 0xb0
 8031106:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8031108:	68fb      	ldr	r3, [r7, #12]
 803110a:	3320      	adds	r3, #32
 803110c:	4618      	mov	r0, r3
 803110e:	f7f9 fb16 	bl	802a73e <mg_iobuf_free>
  mg_close_conn(c);
 8031112:	6878      	ldr	r0, [r7, #4]
 8031114:	f7fc fddc 	bl	802dcd0 <mg_close_conn>
}
 8031118:	bf00      	nop
 803111a:	3710      	adds	r7, #16
 803111c:	46bd      	mov	sp, r7
 803111e:	bd80      	pop	{r7, pc}

08031120 <can_write>:

static bool can_write(struct mg_connection *c) {
 8031120:	b480      	push	{r7}
 8031122:	b083      	sub	sp, #12
 8031124:	af00      	add	r7, sp, #0
 8031126:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8031128:	687b      	ldr	r3, [r7, #4]
 803112a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 803112e:	f003 0320 	and.w	r3, r3, #32
 8031132:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8031134:	2b00      	cmp	r3, #0
 8031136:	d11d      	bne.n	8031174 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8031138:	687b      	ldr	r3, [r7, #4]
 803113a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 803113e:	f003 0308 	and.w	r3, r3, #8
 8031142:	b2db      	uxtb	r3, r3
 8031144:	2b00      	cmp	r3, #0
 8031146:	d115      	bne.n	8031174 <can_write+0x54>
 8031148:	687b      	ldr	r3, [r7, #4]
 803114a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 803114c:	2b00      	cmp	r3, #0
 803114e:	d011      	beq.n	8031174 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8031150:	687b      	ldr	r3, [r7, #4]
 8031152:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8031156:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 803115a:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 803115c:	2b00      	cmp	r3, #0
 803115e:	d109      	bne.n	8031174 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8031160:	687b      	ldr	r3, [r7, #4]
 8031162:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8031166:	f003 0310 	and.w	r3, r3, #16
 803116a:	b2db      	uxtb	r3, r3
 803116c:	2b00      	cmp	r3, #0
 803116e:	d101      	bne.n	8031174 <can_write+0x54>
 8031170:	2301      	movs	r3, #1
 8031172:	e000      	b.n	8031176 <can_write+0x56>
 8031174:	2300      	movs	r3, #0
 8031176:	f003 0301 	and.w	r3, r3, #1
 803117a:	b2db      	uxtb	r3, r3
}
 803117c:	4618      	mov	r0, r3
 803117e:	370c      	adds	r7, #12
 8031180:	46bd      	mov	sp, r7
 8031182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031186:	4770      	bx	lr

08031188 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8031188:	b5b0      	push	{r4, r5, r7, lr}
 803118a:	b08c      	sub	sp, #48	@ 0x30
 803118c:	af04      	add	r7, sp, #16
 803118e:	6078      	str	r0, [r7, #4]
 8031190:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 8031192:	687b      	ldr	r3, [r7, #4]
 8031194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8031196:	61bb      	str	r3, [r7, #24]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 8031198:	f001 fed0 	bl	8032f3c <mg_millis>
 803119c:	4602      	mov	r2, r0
 803119e:	460b      	mov	r3, r1
 80311a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 80311a4:	687b      	ldr	r3, [r7, #4]
 80311a6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80311aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80311ae:	4608      	mov	r0, r1
 80311b0:	f001 fb77 	bl	80328a2 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 80311b4:	69bb      	ldr	r3, [r7, #24]
 80311b6:	2b00      	cmp	r3, #0
 80311b8:	f000 80aa 	beq.w	8031310 <mg_mgr_poll+0x188>
 80311bc:	69bb      	ldr	r3, [r7, #24]
 80311be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80311c0:	2b00      	cmp	r3, #0
 80311c2:	f000 80a5 	beq.w	8031310 <mg_mgr_poll+0x188>
  mg_tcpip_poll(ifp, now);
 80311c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80311ca:	69b8      	ldr	r0, [r7, #24]
 80311cc:	f7ff fab6 	bl	803073c <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 80311d0:	687b      	ldr	r3, [r7, #4]
 80311d2:	681b      	ldr	r3, [r3, #0]
 80311d4:	61fb      	str	r3, [r7, #28]
 80311d6:	e096      	b.n	8031306 <mg_mgr_poll+0x17e>
    tmp = c->next;
 80311d8:	69fb      	ldr	r3, [r7, #28]
 80311da:	681b      	ldr	r3, [r3, #0]
 80311dc:	617b      	str	r3, [r7, #20]
    struct connstate *s = (struct connstate *) (c + 1);
 80311de:	69fb      	ldr	r3, [r7, #28]
 80311e0:	33b0      	adds	r3, #176	@ 0xb0
 80311e2:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 80311e4:	f107 0308 	add.w	r3, r7, #8
 80311e8:	461a      	mov	r2, r3
 80311ea:	2102      	movs	r1, #2
 80311ec:	69f8      	ldr	r0, [r7, #28]
 80311ee:	f7f4 fd87 	bl	8025d00 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 80311f2:	4b49      	ldr	r3, [pc, #292]	@ (8031318 <mg_mgr_poll+0x190>)
 80311f4:	681b      	ldr	r3, [r3, #0]
 80311f6:	2b03      	cmp	r3, #3
 80311f8:	dd48      	ble.n	803128c <mg_mgr_poll+0x104>
 80311fa:	4b48      	ldr	r3, [pc, #288]	@ (803131c <mg_mgr_poll+0x194>)
 80311fc:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8031200:	4947      	ldr	r1, [pc, #284]	@ (8031320 <mg_mgr_poll+0x198>)
 8031202:	2004      	movs	r0, #4
 8031204:	f7fa f962 	bl	802b4cc <mg_log_prefix>
 8031208:	69fb      	ldr	r3, [r7, #28]
 803120a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 803120c:	69fb      	ldr	r3, [r7, #28]
 803120e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8031212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8031216:	b2db      	uxtb	r3, r3
 8031218:	2b00      	cmp	r3, #0
 803121a:	d001      	beq.n	8031220 <mg_mgr_poll+0x98>
 803121c:	2454      	movs	r4, #84	@ 0x54
 803121e:	e000      	b.n	8031222 <mg_mgr_poll+0x9a>
 8031220:	2474      	movs	r4, #116	@ 0x74
 8031222:	69fb      	ldr	r3, [r7, #28]
 8031224:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8031228:	f003 0320 	and.w	r3, r3, #32
 803122c:	b2db      	uxtb	r3, r3
 803122e:	2b00      	cmp	r3, #0
 8031230:	d001      	beq.n	8031236 <mg_mgr_poll+0xae>
 8031232:	2543      	movs	r5, #67	@ 0x43
 8031234:	e000      	b.n	8031238 <mg_mgr_poll+0xb0>
 8031236:	2563      	movs	r5, #99	@ 0x63
 8031238:	69fb      	ldr	r3, [r7, #28]
 803123a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 803123e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8031242:	b2db      	uxtb	r3, r3
 8031244:	2b00      	cmp	r3, #0
 8031246:	d001      	beq.n	803124c <mg_mgr_poll+0xc4>
 8031248:	2348      	movs	r3, #72	@ 0x48
 803124a:	e000      	b.n	803124e <mg_mgr_poll+0xc6>
 803124c:	2368      	movs	r3, #104	@ 0x68
 803124e:	69fa      	ldr	r2, [r7, #28]
 8031250:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 8031254:	f002 0208 	and.w	r2, r2, #8
 8031258:	b2d2      	uxtb	r2, r2
 803125a:	2a00      	cmp	r2, #0
 803125c:	d001      	beq.n	8031262 <mg_mgr_poll+0xda>
 803125e:	2252      	movs	r2, #82	@ 0x52
 8031260:	e000      	b.n	8031264 <mg_mgr_poll+0xdc>
 8031262:	2272      	movs	r2, #114	@ 0x72
 8031264:	69f9      	ldr	r1, [r7, #28]
 8031266:	f891 10ad 	ldrb.w	r1, [r1, #173]	@ 0xad
 803126a:	f001 0120 	and.w	r1, r1, #32
 803126e:	b2c9      	uxtb	r1, r1
 8031270:	2900      	cmp	r1, #0
 8031272:	d001      	beq.n	8031278 <mg_mgr_poll+0xf0>
 8031274:	2143      	movs	r1, #67	@ 0x43
 8031276:	e000      	b.n	803127a <mg_mgr_poll+0xf2>
 8031278:	2163      	movs	r1, #99	@ 0x63
 803127a:	9102      	str	r1, [sp, #8]
 803127c:	9201      	str	r2, [sp, #4]
 803127e:	9300      	str	r3, [sp, #0]
 8031280:	462b      	mov	r3, r5
 8031282:	4622      	mov	r2, r4
 8031284:	4601      	mov	r1, r0
 8031286:	4827      	ldr	r0, [pc, #156]	@ (8031324 <mg_mgr_poll+0x19c>)
 8031288:	f7fa f970 	bl	802b56c <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0)
 803128c:	69fb      	ldr	r3, [r7, #28]
 803128e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8031292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8031296:	b2db      	uxtb	r3, r3
 8031298:	2b00      	cmp	r3, #0
 803129a:	d00b      	beq.n	80312b4 <mg_mgr_poll+0x12c>
 803129c:	69f8      	ldr	r0, [r7, #28]
 803129e:	f001 fbad 	bl	80329fc <mg_tls_pending>
 80312a2:	4603      	mov	r3, r0
 80312a4:	2b00      	cmp	r3, #0
 80312a6:	d005      	beq.n	80312b4 <mg_mgr_poll+0x12c>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 80312a8:	69fb      	ldr	r3, [r7, #28]
 80312aa:	3368      	adds	r3, #104	@ 0x68
 80312ac:	4619      	mov	r1, r3
 80312ae:	69f8      	ldr	r0, [r7, #28]
 80312b0:	f7fe fc0e 	bl	802fad0 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 80312b4:	69f8      	ldr	r0, [r7, #28]
 80312b6:	f7ff ff33 	bl	8031120 <can_write>
 80312ba:	4603      	mov	r3, r0
 80312bc:	2b00      	cmp	r3, #0
 80312be:	d002      	beq.n	80312c6 <mg_mgr_poll+0x13e>
 80312c0:	69f8      	ldr	r0, [r7, #28]
 80312c2:	f7ff fe87 	bl	8030fd4 <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 80312c6:	69fb      	ldr	r3, [r7, #28]
 80312c8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80312cc:	f003 0310 	and.w	r3, r3, #16
 80312d0:	b2db      	uxtb	r3, r3
 80312d2:	2b00      	cmp	r3, #0
 80312d4:	d00a      	beq.n	80312ec <mg_mgr_poll+0x164>
 80312d6:	69fb      	ldr	r3, [r7, #28]
 80312d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80312da:	2b00      	cmp	r3, #0
 80312dc:	d106      	bne.n	80312ec <mg_mgr_poll+0x164>
 80312de:	693b      	ldr	r3, [r7, #16]
 80312e0:	7f9b      	ldrb	r3, [r3, #30]
 80312e2:	2b04      	cmp	r3, #4
 80312e4:	d002      	beq.n	80312ec <mg_mgr_poll+0x164>
      init_closure(c);
 80312e6:	69f8      	ldr	r0, [r7, #28]
 80312e8:	f7ff feb4 	bl	8031054 <init_closure>
    if (c->is_closing) close_conn(c);
 80312ec:	69fb      	ldr	r3, [r7, #28]
 80312ee:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80312f2:	f003 0320 	and.w	r3, r3, #32
 80312f6:	b2db      	uxtb	r3, r3
 80312f8:	2b00      	cmp	r3, #0
 80312fa:	d002      	beq.n	8031302 <mg_mgr_poll+0x17a>
 80312fc:	69f8      	ldr	r0, [r7, #28]
 80312fe:	f7ff fefc 	bl	80310fa <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8031302:	697b      	ldr	r3, [r7, #20]
 8031304:	61fb      	str	r3, [r7, #28]
 8031306:	69fb      	ldr	r3, [r7, #28]
 8031308:	2b00      	cmp	r3, #0
 803130a:	f47f af65 	bne.w	80311d8 <mg_mgr_poll+0x50>
 803130e:	e000      	b.n	8031312 <mg_mgr_poll+0x18a>
  if (ifp == NULL || ifp->driver == NULL) return;
 8031310:	bf00      	nop
  }
  (void) ms;
}
 8031312:	3720      	adds	r7, #32
 8031314:	46bd      	mov	sp, r7
 8031316:	bdb0      	pop	{r4, r5, r7, pc}
 8031318:	200002a8 	.word	0x200002a8
 803131c:	08044bb8 	.word	0x08044bb8
 8031320:	08041a30 	.word	0x08041a30
 8031324:	08043540 	.word	0x08043540

08031328 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8031328:	b5b0      	push	{r4, r5, r7, lr}
 803132a:	b08c      	sub	sp, #48	@ 0x30
 803132c:	af04      	add	r7, sp, #16
 803132e:	60f8      	str	r0, [r7, #12]
 8031330:	60b9      	str	r1, [r7, #8]
 8031332:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8031334:	68fb      	ldr	r3, [r7, #12]
 8031336:	685b      	ldr	r3, [r3, #4]
 8031338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 803133a:	61bb      	str	r3, [r7, #24]
  bool res = false;
 803133c:	2300      	movs	r3, #0
 803133e:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8031340:	68fb      	ldr	r3, [r7, #12]
 8031342:	331c      	adds	r3, #28
 8031344:	681b      	ldr	r3, [r3, #0]
 8031346:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8031348:	69bb      	ldr	r3, [r7, #24]
 803134a:	689b      	ldr	r3, [r3, #8]
 803134c:	2b00      	cmp	r3, #0
 803134e:	d004      	beq.n	803135a <mg_send+0x32>
 8031350:	69bb      	ldr	r3, [r7, #24]
 8031352:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8031356:	2b03      	cmp	r3, #3
 8031358:	d004      	beq.n	8031364 <mg_send+0x3c>
    mg_error(c, "net down");
 803135a:	4921      	ldr	r1, [pc, #132]	@ (80313e0 <mg_send+0xb8>)
 803135c:	68f8      	ldr	r0, [r7, #12]
 803135e:	f7f4 fcef 	bl	8025d40 <mg_error>
 8031362:	e037      	b.n	80313d4 <mg_send+0xac>
  } else if (c->is_udp) {
 8031364:	68fb      	ldr	r3, [r7, #12]
 8031366:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 803136a:	f003 0301 	and.w	r3, r3, #1
 803136e:	b2db      	uxtb	r3, r3
 8031370:	2b00      	cmp	r3, #0
 8031372:	d020      	beq.n	80313b6 <mg_send+0x8e>
    struct connstate *s = (struct connstate *) (c + 1);
 8031374:	68fb      	ldr	r3, [r7, #12]
 8031376:	33b0      	adds	r3, #176	@ 0xb0
 8031378:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 803137a:	6879      	ldr	r1, [r7, #4]
 803137c:	68f8      	ldr	r0, [r7, #12]
 803137e:	f7fe faa1 	bl	802f8c4 <trim_len>
 8031382:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8031384:	697b      	ldr	r3, [r7, #20]
 8031386:	f103 0018 	add.w	r0, r3, #24
 803138a:	69bb      	ldr	r3, [r7, #24]
 803138c:	689c      	ldr	r4, [r3, #8]
 803138e:	68fb      	ldr	r3, [r7, #12]
 8031390:	8b1d      	ldrh	r5, [r3, #24]
 8031392:	693b      	ldr	r3, [r7, #16]
 8031394:	68fa      	ldr	r2, [r7, #12]
 8031396:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8031398:	6879      	ldr	r1, [r7, #4]
 803139a:	9103      	str	r1, [sp, #12]
 803139c:	68b9      	ldr	r1, [r7, #8]
 803139e:	9102      	str	r1, [sp, #8]
 80313a0:	9201      	str	r2, [sp, #4]
 80313a2:	9300      	str	r3, [sp, #0]
 80313a4:	462b      	mov	r3, r5
 80313a6:	4622      	mov	r2, r4
 80313a8:	4601      	mov	r1, r0
 80313aa:	69b8      	ldr	r0, [r7, #24]
 80313ac:	f7fd f8c2 	bl	802e534 <tx_udp>
    res = true;
 80313b0:	2301      	movs	r3, #1
 80313b2:	77fb      	strb	r3, [r7, #31]
 80313b4:	e00e      	b.n	80313d4 <mg_send+0xac>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 80313b6:	68fb      	ldr	r3, [r7, #12]
 80313b8:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80313bc:	68fb      	ldr	r3, [r7, #12]
 80313be:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80313c0:	687b      	ldr	r3, [r7, #4]
 80313c2:	68ba      	ldr	r2, [r7, #8]
 80313c4:	f7f9 f91e 	bl	802a604 <mg_iobuf_add>
 80313c8:	4603      	mov	r3, r0
 80313ca:	2b00      	cmp	r3, #0
 80313cc:	bf14      	ite	ne
 80313ce:	2301      	movne	r3, #1
 80313d0:	2300      	moveq	r3, #0
 80313d2:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 80313d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80313d6:	4618      	mov	r0, r3
 80313d8:	3720      	adds	r7, #32
 80313da:	46bd      	mov	sp, r7
 80313dc:	bdb0      	pop	{r4, r5, r7, pc}
 80313de:	bf00      	nop
 80313e0:	08043554 	.word	0x08043554

080313e4 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 80313e4:	b580      	push	{r7, lr}
 80313e6:	b084      	sub	sp, #16
 80313e8:	af00      	add	r7, sp, #0
 80313ea:	4603      	mov	r3, r0
 80313ec:	6039      	str	r1, [r7, #0]
 80313ee:	71fb      	strb	r3, [r7, #7]
 80313f0:	4613      	mov	r3, r2
 80313f2:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 80313f4:	683b      	ldr	r3, [r7, #0]
 80313f6:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 80313f8:	79bb      	ldrb	r3, [r7, #6]
 80313fa:	2b00      	cmp	r3, #0
 80313fc:	d00d      	beq.n	803141a <mg_pfn_iobuf_private+0x36>
 80313fe:	68fb      	ldr	r3, [r7, #12]
 8031400:	689b      	ldr	r3, [r3, #8]
 8031402:	1c9a      	adds	r2, r3, #2
 8031404:	68fb      	ldr	r3, [r7, #12]
 8031406:	685b      	ldr	r3, [r3, #4]
 8031408:	429a      	cmp	r2, r3
 803140a:	d906      	bls.n	803141a <mg_pfn_iobuf_private+0x36>
 803140c:	68fb      	ldr	r3, [r7, #12]
 803140e:	689b      	ldr	r3, [r3, #8]
 8031410:	3302      	adds	r3, #2
 8031412:	4619      	mov	r1, r3
 8031414:	68f8      	ldr	r0, [r7, #12]
 8031416:	f7f9 f869 	bl	802a4ec <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 803141a:	68fb      	ldr	r3, [r7, #12]
 803141c:	689b      	ldr	r3, [r3, #8]
 803141e:	1c9a      	adds	r2, r3, #2
 8031420:	68fb      	ldr	r3, [r7, #12]
 8031422:	685b      	ldr	r3, [r3, #4]
 8031424:	429a      	cmp	r2, r3
 8031426:	d811      	bhi.n	803144c <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8031428:	68fb      	ldr	r3, [r7, #12]
 803142a:	681a      	ldr	r2, [r3, #0]
 803142c:	68fb      	ldr	r3, [r7, #12]
 803142e:	689b      	ldr	r3, [r3, #8]
 8031430:	1c58      	adds	r0, r3, #1
 8031432:	68f9      	ldr	r1, [r7, #12]
 8031434:	6088      	str	r0, [r1, #8]
 8031436:	4413      	add	r3, r2
 8031438:	79fa      	ldrb	r2, [r7, #7]
 803143a:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 803143c:	68fb      	ldr	r3, [r7, #12]
 803143e:	681a      	ldr	r2, [r3, #0]
 8031440:	68fb      	ldr	r3, [r7, #12]
 8031442:	689b      	ldr	r3, [r3, #8]
 8031444:	4413      	add	r3, r2
 8031446:	2200      	movs	r2, #0
 8031448:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 803144a:	e00f      	b.n	803146c <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 803144c:	68fb      	ldr	r3, [r7, #12]
 803144e:	689a      	ldr	r2, [r3, #8]
 8031450:	68fb      	ldr	r3, [r7, #12]
 8031452:	685b      	ldr	r3, [r3, #4]
 8031454:	429a      	cmp	r2, r3
 8031456:	d209      	bcs.n	803146c <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8031458:	68fb      	ldr	r3, [r7, #12]
 803145a:	681a      	ldr	r2, [r3, #0]
 803145c:	68fb      	ldr	r3, [r7, #12]
 803145e:	689b      	ldr	r3, [r3, #8]
 8031460:	1c58      	adds	r0, r3, #1
 8031462:	68f9      	ldr	r1, [r7, #12]
 8031464:	6088      	str	r0, [r1, #8]
 8031466:	4413      	add	r3, r2
 8031468:	2200      	movs	r2, #0
 803146a:	701a      	strb	r2, [r3, #0]
}
 803146c:	bf00      	nop
 803146e:	3710      	adds	r7, #16
 8031470:	46bd      	mov	sp, r7
 8031472:	bd80      	pop	{r7, pc}

08031474 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8031474:	b580      	push	{r7, lr}
 8031476:	b082      	sub	sp, #8
 8031478:	af00      	add	r7, sp, #0
 803147a:	4603      	mov	r3, r0
 803147c:	6039      	str	r1, [r7, #0]
 803147e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8031480:	79fb      	ldrb	r3, [r7, #7]
 8031482:	2200      	movs	r2, #0
 8031484:	6839      	ldr	r1, [r7, #0]
 8031486:	4618      	mov	r0, r3
 8031488:	f7ff ffac 	bl	80313e4 <mg_pfn_iobuf_private>
}
 803148c:	bf00      	nop
 803148e:	3708      	adds	r7, #8
 8031490:	46bd      	mov	sp, r7
 8031492:	bd80      	pop	{r7, pc}

08031494 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8031494:	b580      	push	{r7, lr}
 8031496:	b082      	sub	sp, #8
 8031498:	af00      	add	r7, sp, #0
 803149a:	4603      	mov	r3, r0
 803149c:	6039      	str	r1, [r7, #0]
 803149e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 80314a0:	79fb      	ldrb	r3, [r7, #7]
 80314a2:	2201      	movs	r2, #1
 80314a4:	6839      	ldr	r1, [r7, #0]
 80314a6:	4618      	mov	r0, r3
 80314a8:	f7ff ff9c 	bl	80313e4 <mg_pfn_iobuf_private>
}
 80314ac:	bf00      	nop
 80314ae:	3708      	adds	r7, #8
 80314b0:	46bd      	mov	sp, r7
 80314b2:	bd80      	pop	{r7, pc}

080314b4 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 80314b4:	b580      	push	{r7, lr}
 80314b6:	b08a      	sub	sp, #40	@ 0x28
 80314b8:	af00      	add	r7, sp, #0
 80314ba:	60f8      	str	r0, [r7, #12]
 80314bc:	60b9      	str	r1, [r7, #8]
 80314be:	607a      	str	r2, [r7, #4]
 80314c0:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 80314c2:	68fb      	ldr	r3, [r7, #12]
 80314c4:	617b      	str	r3, [r7, #20]
 80314c6:	68bb      	ldr	r3, [r7, #8]
 80314c8:	61bb      	str	r3, [r7, #24]
 80314ca:	2300      	movs	r3, #0
 80314cc:	61fb      	str	r3, [r7, #28]
 80314ce:	2300      	movs	r3, #0
 80314d0:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 80314d2:	f107 0114 	add.w	r1, r7, #20
 80314d6:	683b      	ldr	r3, [r7, #0]
 80314d8:	687a      	ldr	r2, [r7, #4]
 80314da:	4809      	ldr	r0, [pc, #36]	@ (8031500 <mg_vsnprintf+0x4c>)
 80314dc:	f7f5 f942 	bl	8026764 <mg_vxprintf>
 80314e0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 80314e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80314e4:	68bb      	ldr	r3, [r7, #8]
 80314e6:	429a      	cmp	r2, r3
 80314e8:	d204      	bcs.n	80314f4 <mg_vsnprintf+0x40>
 80314ea:	68fa      	ldr	r2, [r7, #12]
 80314ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80314ee:	4413      	add	r3, r2
 80314f0:	2200      	movs	r2, #0
 80314f2:	701a      	strb	r2, [r3, #0]
  return n;
 80314f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80314f6:	4618      	mov	r0, r3
 80314f8:	3728      	adds	r7, #40	@ 0x28
 80314fa:	46bd      	mov	sp, r7
 80314fc:	bd80      	pop	{r7, pc}
 80314fe:	bf00      	nop
 8031500:	08031475 	.word	0x08031475

08031504 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8031504:	b40c      	push	{r2, r3}
 8031506:	b580      	push	{r7, lr}
 8031508:	b084      	sub	sp, #16
 803150a:	af00      	add	r7, sp, #0
 803150c:	6078      	str	r0, [r7, #4]
 803150e:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8031510:	f107 031c 	add.w	r3, r7, #28
 8031514:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8031516:	f107 0308 	add.w	r3, r7, #8
 803151a:	69ba      	ldr	r2, [r7, #24]
 803151c:	6839      	ldr	r1, [r7, #0]
 803151e:	6878      	ldr	r0, [r7, #4]
 8031520:	f7ff ffc8 	bl	80314b4 <mg_vsnprintf>
 8031524:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8031526:	68fb      	ldr	r3, [r7, #12]
}
 8031528:	4618      	mov	r0, r3
 803152a:	3710      	adds	r7, #16
 803152c:	46bd      	mov	sp, r7
 803152e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8031532:	b002      	add	sp, #8
 8031534:	4770      	bx	lr
	...

08031538 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 8031538:	b580      	push	{r7, lr}
 803153a:	b086      	sub	sp, #24
 803153c:	af00      	add	r7, sp, #0
 803153e:	6078      	str	r0, [r7, #4]
 8031540:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 8031542:	2300      	movs	r3, #0
 8031544:	60bb      	str	r3, [r7, #8]
 8031546:	2300      	movs	r3, #0
 8031548:	60fb      	str	r3, [r7, #12]
 803154a:	2300      	movs	r3, #0
 803154c:	613b      	str	r3, [r7, #16]
 803154e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8031552:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 8031554:	f107 0108 	add.w	r1, r7, #8
 8031558:	683b      	ldr	r3, [r7, #0]
 803155a:	687a      	ldr	r2, [r7, #4]
 803155c:	4803      	ldr	r0, [pc, #12]	@ (803156c <mg_vmprintf+0x34>)
 803155e:	f7f5 f901 	bl	8026764 <mg_vxprintf>
  return (char *) io.buf;
 8031562:	68bb      	ldr	r3, [r7, #8]
}
 8031564:	4618      	mov	r0, r3
 8031566:	3718      	adds	r7, #24
 8031568:	46bd      	mov	sp, r7
 803156a:	bd80      	pop	{r7, pc}
 803156c:	08031495 	.word	0x08031495

08031570 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 8031570:	b40f      	push	{r0, r1, r2, r3}
 8031572:	b580      	push	{r7, lr}
 8031574:	b082      	sub	sp, #8
 8031576:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 8031578:	f107 0314 	add.w	r3, r7, #20
 803157c:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 803157e:	463b      	mov	r3, r7
 8031580:	4619      	mov	r1, r3
 8031582:	6938      	ldr	r0, [r7, #16]
 8031584:	f7ff ffd8 	bl	8031538 <mg_vmprintf>
 8031588:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 803158a:	687b      	ldr	r3, [r7, #4]
}
 803158c:	4618      	mov	r0, r3
 803158e:	3708      	adds	r7, #8
 8031590:	46bd      	mov	sp, r7
 8031592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8031596:	b004      	add	sp, #16
 8031598:	4770      	bx	lr

0803159a <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 803159a:	b580      	push	{r7, lr}
 803159c:	b082      	sub	sp, #8
 803159e:	af00      	add	r7, sp, #0
 80315a0:	4603      	mov	r3, r0
 80315a2:	6039      	str	r1, [r7, #0]
 80315a4:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 80315a6:	79fb      	ldrb	r3, [r7, #7]
 80315a8:	4618      	mov	r0, r3
 80315aa:	f003 fff3 	bl	8035594 <putchar>
  (void) param;
}
 80315ae:	bf00      	nop
 80315b0:	3708      	adds	r7, #8
 80315b2:	46bd      	mov	sp, r7
 80315b4:	bd80      	pop	{r7, pc}
	...

080315b8 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 80315b8:	b580      	push	{r7, lr}
 80315ba:	b088      	sub	sp, #32
 80315bc:	af04      	add	r7, sp, #16
 80315be:	60f8      	str	r0, [r7, #12]
 80315c0:	60b9      	str	r1, [r7, #8]
 80315c2:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 80315c4:	687b      	ldr	r3, [r7, #4]
 80315c6:	781b      	ldrb	r3, [r3, #0]
 80315c8:	4618      	mov	r0, r3
 80315ca:	687b      	ldr	r3, [r7, #4]
 80315cc:	3301      	adds	r3, #1
 80315ce:	781b      	ldrb	r3, [r3, #0]
 80315d0:	461a      	mov	r2, r3
 80315d2:	687b      	ldr	r3, [r7, #4]
 80315d4:	3302      	adds	r3, #2
 80315d6:	781b      	ldrb	r3, [r3, #0]
 80315d8:	4619      	mov	r1, r3
 80315da:	687b      	ldr	r3, [r7, #4]
 80315dc:	3303      	adds	r3, #3
 80315de:	781b      	ldrb	r3, [r3, #0]
 80315e0:	9302      	str	r3, [sp, #8]
 80315e2:	9101      	str	r1, [sp, #4]
 80315e4:	9200      	str	r2, [sp, #0]
 80315e6:	4603      	mov	r3, r0
 80315e8:	4a04      	ldr	r2, [pc, #16]	@ (80315fc <print_ip4+0x44>)
 80315ea:	68b9      	ldr	r1, [r7, #8]
 80315ec:	68f8      	ldr	r0, [r7, #12]
 80315ee:	f7f5 f89e 	bl	802672e <mg_xprintf>
 80315f2:	4603      	mov	r3, r0
}
 80315f4:	4618      	mov	r0, r3
 80315f6:	3710      	adds	r7, #16
 80315f8:	46bd      	mov	sp, r7
 80315fa:	bd80      	pop	{r7, pc}
 80315fc:	08043560 	.word	0x08043560

08031600 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8031600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031604:	b08e      	sub	sp, #56	@ 0x38
 8031606:	af08      	add	r7, sp, #32
 8031608:	6178      	str	r0, [r7, #20]
 803160a:	6139      	str	r1, [r7, #16]
 803160c:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803160e:	68fb      	ldr	r3, [r7, #12]
 8031610:	881b      	ldrh	r3, [r3, #0]
 8031612:	4618      	mov	r0, r3
 8031614:	f001 fc01 	bl	8032e1a <mg_ntohs>
 8031618:	4603      	mov	r3, r0
 803161a:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 803161c:	68fb      	ldr	r3, [r7, #12]
 803161e:	3302      	adds	r3, #2
 8031620:	881b      	ldrh	r3, [r3, #0]
 8031622:	4618      	mov	r0, r3
 8031624:	f001 fbf9 	bl	8032e1a <mg_ntohs>
 8031628:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803162a:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 803162c:	68fb      	ldr	r3, [r7, #12]
 803162e:	3304      	adds	r3, #4
 8031630:	881b      	ldrh	r3, [r3, #0]
 8031632:	4618      	mov	r0, r3
 8031634:	f001 fbf1 	bl	8032e1a <mg_ntohs>
 8031638:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803163a:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 803163c:	68fb      	ldr	r3, [r7, #12]
 803163e:	3306      	adds	r3, #6
 8031640:	881b      	ldrh	r3, [r3, #0]
 8031642:	4618      	mov	r0, r3
 8031644:	f001 fbe9 	bl	8032e1a <mg_ntohs>
 8031648:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803164a:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 803164c:	68fb      	ldr	r3, [r7, #12]
 803164e:	3308      	adds	r3, #8
 8031650:	881b      	ldrh	r3, [r3, #0]
 8031652:	4618      	mov	r0, r3
 8031654:	f001 fbe1 	bl	8032e1a <mg_ntohs>
 8031658:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803165a:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 803165c:	68fb      	ldr	r3, [r7, #12]
 803165e:	330a      	adds	r3, #10
 8031660:	881b      	ldrh	r3, [r3, #0]
 8031662:	4618      	mov	r0, r3
 8031664:	f001 fbd9 	bl	8032e1a <mg_ntohs>
 8031668:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803166a:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 803166c:	68fb      	ldr	r3, [r7, #12]
 803166e:	330c      	adds	r3, #12
 8031670:	881b      	ldrh	r3, [r3, #0]
 8031672:	4618      	mov	r0, r3
 8031674:	f001 fbd1 	bl	8032e1a <mg_ntohs>
 8031678:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803167a:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 803167c:	68fb      	ldr	r3, [r7, #12]
 803167e:	330e      	adds	r3, #14
 8031680:	881b      	ldrh	r3, [r3, #0]
 8031682:	4618      	mov	r0, r3
 8031684:	f001 fbc9 	bl	8032e1a <mg_ntohs>
 8031688:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 803168a:	9306      	str	r3, [sp, #24]
 803168c:	683a      	ldr	r2, [r7, #0]
 803168e:	9205      	str	r2, [sp, #20]
 8031690:	687a      	ldr	r2, [r7, #4]
 8031692:	9204      	str	r2, [sp, #16]
 8031694:	68bb      	ldr	r3, [r7, #8]
 8031696:	9303      	str	r3, [sp, #12]
 8031698:	9602      	str	r6, [sp, #8]
 803169a:	9501      	str	r5, [sp, #4]
 803169c:	9400      	str	r4, [sp, #0]
 803169e:	4643      	mov	r3, r8
 80316a0:	4a05      	ldr	r2, [pc, #20]	@ (80316b8 <print_ip6+0xb8>)
 80316a2:	6939      	ldr	r1, [r7, #16]
 80316a4:	6978      	ldr	r0, [r7, #20]
 80316a6:	f7f5 f842 	bl	802672e <mg_xprintf>
 80316aa:	4603      	mov	r3, r0
}
 80316ac:	4618      	mov	r0, r3
 80316ae:	3718      	adds	r7, #24
 80316b0:	46bd      	mov	sp, r7
 80316b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80316b6:	bf00      	nop
 80316b8:	0804356c 	.word	0x0804356c

080316bc <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 80316bc:	b580      	push	{r7, lr}
 80316be:	b086      	sub	sp, #24
 80316c0:	af00      	add	r7, sp, #0
 80316c2:	60f8      	str	r0, [r7, #12]
 80316c4:	60b9      	str	r1, [r7, #8]
 80316c6:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80316c8:	687b      	ldr	r3, [r7, #4]
 80316ca:	681b      	ldr	r3, [r3, #0]
 80316cc:	1d19      	adds	r1, r3, #4
 80316ce:	687a      	ldr	r2, [r7, #4]
 80316d0:	6011      	str	r1, [r2, #0]
 80316d2:	681b      	ldr	r3, [r3, #0]
 80316d4:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 80316d6:	697a      	ldr	r2, [r7, #20]
 80316d8:	68b9      	ldr	r1, [r7, #8]
 80316da:	68f8      	ldr	r0, [r7, #12]
 80316dc:	f7ff ff6c 	bl	80315b8 <print_ip4>
 80316e0:	4603      	mov	r3, r0
}
 80316e2:	4618      	mov	r0, r3
 80316e4:	3718      	adds	r7, #24
 80316e6:	46bd      	mov	sp, r7
 80316e8:	bd80      	pop	{r7, pc}

080316ea <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 80316ea:	b580      	push	{r7, lr}
 80316ec:	b086      	sub	sp, #24
 80316ee:	af00      	add	r7, sp, #0
 80316f0:	60f8      	str	r0, [r7, #12]
 80316f2:	60b9      	str	r1, [r7, #8]
 80316f4:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 80316f6:	687b      	ldr	r3, [r7, #4]
 80316f8:	681b      	ldr	r3, [r3, #0]
 80316fa:	1d19      	adds	r1, r3, #4
 80316fc:	687a      	ldr	r2, [r7, #4]
 80316fe:	6011      	str	r1, [r2, #0]
 8031700:	681b      	ldr	r3, [r3, #0]
 8031702:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8031704:	697b      	ldr	r3, [r7, #20]
 8031706:	7cdb      	ldrb	r3, [r3, #19]
 8031708:	2b00      	cmp	r3, #0
 803170a:	d007      	beq.n	803171c <mg_print_ip+0x32>
 803170c:	697b      	ldr	r3, [r7, #20]
 803170e:	461a      	mov	r2, r3
 8031710:	68b9      	ldr	r1, [r7, #8]
 8031712:	68f8      	ldr	r0, [r7, #12]
 8031714:	f7ff ff74 	bl	8031600 <print_ip6>
 8031718:	4603      	mov	r3, r0
 803171a:	e006      	b.n	803172a <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 803171c:	697b      	ldr	r3, [r7, #20]
 803171e:	461a      	mov	r2, r3
 8031720:	68b9      	ldr	r1, [r7, #8]
 8031722:	68f8      	ldr	r0, [r7, #12]
 8031724:	f7ff ff48 	bl	80315b8 <print_ip4>
 8031728:	4603      	mov	r3, r0
}
 803172a:	4618      	mov	r0, r3
 803172c:	3718      	adds	r7, #24
 803172e:	46bd      	mov	sp, r7
 8031730:	bd80      	pop	{r7, pc}
	...

08031734 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8031734:	b580      	push	{r7, lr}
 8031736:	b088      	sub	sp, #32
 8031738:	af02      	add	r7, sp, #8
 803173a:	60f8      	str	r0, [r7, #12]
 803173c:	60b9      	str	r1, [r7, #8]
 803173e:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8031740:	687b      	ldr	r3, [r7, #4]
 8031742:	681b      	ldr	r3, [r3, #0]
 8031744:	1d19      	adds	r1, r3, #4
 8031746:	687a      	ldr	r2, [r7, #4]
 8031748:	6011      	str	r1, [r2, #0]
 803174a:	681b      	ldr	r3, [r3, #0]
 803174c:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 803174e:	697b      	ldr	r3, [r7, #20]
 8031750:	8a1b      	ldrh	r3, [r3, #16]
 8031752:	4618      	mov	r0, r3
 8031754:	f001 fb61 	bl	8032e1a <mg_ntohs>
 8031758:	4603      	mov	r3, r0
 803175a:	9301      	str	r3, [sp, #4]
 803175c:	697b      	ldr	r3, [r7, #20]
 803175e:	9300      	str	r3, [sp, #0]
 8031760:	4b05      	ldr	r3, [pc, #20]	@ (8031778 <mg_print_ip_port+0x44>)
 8031762:	4a06      	ldr	r2, [pc, #24]	@ (803177c <mg_print_ip_port+0x48>)
 8031764:	68b9      	ldr	r1, [r7, #8]
 8031766:	68f8      	ldr	r0, [r7, #12]
 8031768:	f7f4 ffe1 	bl	802672e <mg_xprintf>
 803176c:	4603      	mov	r3, r0
}
 803176e:	4618      	mov	r0, r3
 8031770:	3718      	adds	r7, #24
 8031772:	46bd      	mov	sp, r7
 8031774:	bd80      	pop	{r7, pc}
 8031776:	bf00      	nop
 8031778:	080316eb 	.word	0x080316eb
 803177c:	08043588 	.word	0x08043588

08031780 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8031780:	b5b0      	push	{r4, r5, r7, lr}
 8031782:	b08c      	sub	sp, #48	@ 0x30
 8031784:	af06      	add	r7, sp, #24
 8031786:	60f8      	str	r0, [r7, #12]
 8031788:	60b9      	str	r1, [r7, #8]
 803178a:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 803178c:	687b      	ldr	r3, [r7, #4]
 803178e:	681b      	ldr	r3, [r3, #0]
 8031790:	1d19      	adds	r1, r3, #4
 8031792:	687a      	ldr	r2, [r7, #4]
 8031794:	6011      	str	r1, [r2, #0]
 8031796:	681b      	ldr	r3, [r3, #0]
 8031798:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 803179a:	697b      	ldr	r3, [r7, #20]
 803179c:	781b      	ldrb	r3, [r3, #0]
 803179e:	461d      	mov	r5, r3
 80317a0:	697b      	ldr	r3, [r7, #20]
 80317a2:	3301      	adds	r3, #1
 80317a4:	781b      	ldrb	r3, [r3, #0]
 80317a6:	461a      	mov	r2, r3
 80317a8:	697b      	ldr	r3, [r7, #20]
 80317aa:	3302      	adds	r3, #2
 80317ac:	781b      	ldrb	r3, [r3, #0]
 80317ae:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 80317b0:	697b      	ldr	r3, [r7, #20]
 80317b2:	3303      	adds	r3, #3
 80317b4:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80317b6:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 80317b8:	697b      	ldr	r3, [r7, #20]
 80317ba:	3304      	adds	r3, #4
 80317bc:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80317be:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 80317c0:	697b      	ldr	r3, [r7, #20]
 80317c2:	3305      	adds	r3, #5
 80317c4:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80317c6:	9304      	str	r3, [sp, #16]
 80317c8:	9403      	str	r4, [sp, #12]
 80317ca:	9002      	str	r0, [sp, #8]
 80317cc:	9101      	str	r1, [sp, #4]
 80317ce:	9200      	str	r2, [sp, #0]
 80317d0:	462b      	mov	r3, r5
 80317d2:	4a05      	ldr	r2, [pc, #20]	@ (80317e8 <mg_print_mac+0x68>)
 80317d4:	68b9      	ldr	r1, [r7, #8]
 80317d6:	68f8      	ldr	r0, [r7, #12]
 80317d8:	f7f4 ffa9 	bl	802672e <mg_xprintf>
 80317dc:	4603      	mov	r3, r0
}
 80317de:	4618      	mov	r0, r3
 80317e0:	3718      	adds	r7, #24
 80317e2:	46bd      	mov	sp, r7
 80317e4:	bdb0      	pop	{r4, r5, r7, pc}
 80317e6:	bf00      	nop
 80317e8:	08043590 	.word	0x08043590

080317ec <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 80317ec:	b580      	push	{r7, lr}
 80317ee:	b088      	sub	sp, #32
 80317f0:	af00      	add	r7, sp, #0
 80317f2:	60f8      	str	r0, [r7, #12]
 80317f4:	60b9      	str	r1, [r7, #8]
 80317f6:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 80317f8:	687b      	ldr	r3, [r7, #4]
 80317fa:	681b      	ldr	r3, [r3, #0]
 80317fc:	1d19      	adds	r1, r3, #4
 80317fe:	687a      	ldr	r2, [r7, #4]
 8031800:	6011      	str	r1, [r2, #0]
 8031802:	681b      	ldr	r3, [r3, #0]
 8031804:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8031806:	687b      	ldr	r3, [r7, #4]
 8031808:	681b      	ldr	r3, [r3, #0]
 803180a:	1d19      	adds	r1, r3, #4
 803180c:	687a      	ldr	r2, [r7, #4]
 803180e:	6011      	str	r1, [r2, #0]
 8031810:	681b      	ldr	r3, [r3, #0]
 8031812:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 8031814:	4b16      	ldr	r3, [pc, #88]	@ (8031870 <mg_print_hex+0x84>)
 8031816:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 8031818:	2300      	movs	r3, #0
 803181a:	61fb      	str	r3, [r7, #28]
 803181c:	e01e      	b.n	803185c <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 803181e:	697a      	ldr	r2, [r7, #20]
 8031820:	69fb      	ldr	r3, [r7, #28]
 8031822:	4413      	add	r3, r2
 8031824:	781b      	ldrb	r3, [r3, #0]
 8031826:	091b      	lsrs	r3, r3, #4
 8031828:	b2db      	uxtb	r3, r3
 803182a:	f003 030f 	and.w	r3, r3, #15
 803182e:	693a      	ldr	r2, [r7, #16]
 8031830:	4413      	add	r3, r2
 8031832:	781a      	ldrb	r2, [r3, #0]
 8031834:	68fb      	ldr	r3, [r7, #12]
 8031836:	68b9      	ldr	r1, [r7, #8]
 8031838:	4610      	mov	r0, r2
 803183a:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 803183c:	697a      	ldr	r2, [r7, #20]
 803183e:	69fb      	ldr	r3, [r7, #28]
 8031840:	4413      	add	r3, r2
 8031842:	781b      	ldrb	r3, [r3, #0]
 8031844:	f003 030f 	and.w	r3, r3, #15
 8031848:	693a      	ldr	r2, [r7, #16]
 803184a:	4413      	add	r3, r2
 803184c:	781a      	ldrb	r2, [r3, #0]
 803184e:	68fb      	ldr	r3, [r7, #12]
 8031850:	68b9      	ldr	r1, [r7, #8]
 8031852:	4610      	mov	r0, r2
 8031854:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 8031856:	69fb      	ldr	r3, [r7, #28]
 8031858:	3301      	adds	r3, #1
 803185a:	61fb      	str	r3, [r7, #28]
 803185c:	69fa      	ldr	r2, [r7, #28]
 803185e:	69bb      	ldr	r3, [r7, #24]
 8031860:	429a      	cmp	r2, r3
 8031862:	d3dc      	bcc.n	803181e <mg_print_hex+0x32>
  }
  return 2 * bl;
 8031864:	69bb      	ldr	r3, [r7, #24]
 8031866:	005b      	lsls	r3, r3, #1
}
 8031868:	4618      	mov	r0, r3
 803186a:	3720      	adds	r7, #32
 803186c:	46bd      	mov	sp, r7
 803186e:	bd80      	pop	{r7, pc}
 8031870:	08041bb8 	.word	0x08041bb8

08031874 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8031874:	b480      	push	{r7}
 8031876:	b085      	sub	sp, #20
 8031878:	af00      	add	r7, sp, #0
 803187a:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 803187c:	2300      	movs	r3, #0
 803187e:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8031880:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8031884:	687b      	ldr	r3, [r7, #4]
 8031886:	681a      	ldr	r2, [r3, #0]
 8031888:	687b      	ldr	r3, [r7, #4]
 803188a:	689b      	ldr	r3, [r3, #8]
 803188c:	4413      	add	r3, r2
 803188e:	681b      	ldr	r3, [r3, #0]
 8031890:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
  return n;
 8031892:	68fb      	ldr	r3, [r7, #12]
}
 8031894:	4618      	mov	r0, r3
 8031896:	3714      	adds	r7, #20
 8031898:	46bd      	mov	sp, r7
 803189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803189e:	4770      	bx	lr

080318a0 <mg_queue_next>:
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
  return space;
}

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 80318a0:	b580      	push	{r7, lr}
 80318a2:	b084      	sub	sp, #16
 80318a4:	af00      	add	r7, sp, #0
 80318a6:	6078      	str	r0, [r7, #4]
 80318a8:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80318aa:	2300      	movs	r3, #0
 80318ac:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 80318ae:	687b      	ldr	r3, [r7, #4]
 80318b0:	689a      	ldr	r2, [r3, #8]
 80318b2:	687b      	ldr	r3, [r7, #4]
 80318b4:	68db      	ldr	r3, [r3, #12]
 80318b6:	429a      	cmp	r2, r3
 80318b8:	d013      	beq.n	80318e2 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 80318ba:	6878      	ldr	r0, [r7, #4]
 80318bc:	f7ff ffda 	bl	8031874 <mg_queue_read_len>
 80318c0:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 80318c2:	68fb      	ldr	r3, [r7, #12]
 80318c4:	2b00      	cmp	r3, #0
 80318c6:	d10c      	bne.n	80318e2 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 80318c8:	687b      	ldr	r3, [r7, #4]
 80318ca:	2200      	movs	r2, #0
 80318cc:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 80318ce:	687b      	ldr	r3, [r7, #4]
 80318d0:	68da      	ldr	r2, [r3, #12]
 80318d2:	687b      	ldr	r3, [r7, #4]
 80318d4:	689b      	ldr	r3, [r3, #8]
 80318d6:	429a      	cmp	r2, r3
 80318d8:	d903      	bls.n	80318e2 <mg_queue_next+0x42>
 80318da:	6878      	ldr	r0, [r7, #4]
 80318dc:	f7ff ffca 	bl	8031874 <mg_queue_read_len>
 80318e0:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 80318e2:	683b      	ldr	r3, [r7, #0]
 80318e4:	2b00      	cmp	r3, #0
 80318e6:	d007      	beq.n	80318f8 <mg_queue_next+0x58>
 80318e8:	687b      	ldr	r3, [r7, #4]
 80318ea:	681a      	ldr	r2, [r3, #0]
 80318ec:	687b      	ldr	r3, [r7, #4]
 80318ee:	689b      	ldr	r3, [r3, #8]
 80318f0:	3304      	adds	r3, #4
 80318f2:	441a      	add	r2, r3
 80318f4:	683b      	ldr	r3, [r7, #0]
 80318f6:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
  return len;
 80318f8:	68fb      	ldr	r3, [r7, #12]
}
 80318fa:	4618      	mov	r0, r3
 80318fc:	3710      	adds	r7, #16
 80318fe:	46bd      	mov	sp, r7
 8031900:	bd80      	pop	{r7, pc}

08031902 <mg_queue_del>:
  mg_queue_write_len(q, len);
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
  q->head += len + sizeof(uint32_t);
}

void mg_queue_del(struct mg_queue *q, size_t len) {
 8031902:	b480      	push	{r7}
 8031904:	b083      	sub	sp, #12
 8031906:	af00      	add	r7, sp, #0
 8031908:	6078      	str	r0, [r7, #4]
 803190a:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 803190c:	687b      	ldr	r3, [r7, #4]
 803190e:	689a      	ldr	r2, [r3, #8]
 8031910:	683b      	ldr	r3, [r7, #0]
 8031912:	4413      	add	r3, r2
 8031914:	1d1a      	adds	r2, r3, #4
 8031916:	687b      	ldr	r3, [r7, #4]
 8031918:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
}
 803191a:	bf00      	nop
 803191c:	370c      	adds	r7, #12
 803191e:	46bd      	mov	sp, r7
 8031920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031924:	4770      	bx	lr
	...

08031928 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 8031928:	b5b0      	push	{r4, r5, r7, lr}
 803192a:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 803192c:	f001 fb06 	bl	8032f3c <mg_millis>
 8031930:	4b05      	ldr	r3, [pc, #20]	@ (8031948 <mg_now+0x20>)
 8031932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031936:	1884      	adds	r4, r0, r2
 8031938:	eb41 0503 	adc.w	r5, r1, r3
 803193c:	4622      	mov	r2, r4
 803193e:	462b      	mov	r3, r5
}
 8031940:	4610      	mov	r0, r2
 8031942:	4619      	mov	r1, r3
 8031944:	bdb0      	pop	{r4, r5, r7, pc}
 8031946:	bf00      	nop
 8031948:	200181d8 	.word	0x200181d8
 803194c:	00000000 	.word	0x00000000

08031950 <gettimestamp>:

static int64_t gettimestamp(const uint32_t *data) {
 8031950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8031954:	b086      	sub	sp, #24
 8031956:	af00      	add	r7, sp, #0
 8031958:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 803195a:	68fb      	ldr	r3, [r7, #12]
 803195c:	681b      	ldr	r3, [r3, #0]
 803195e:	4618      	mov	r0, r3
 8031960:	f001 fa42 	bl	8032de8 <mg_ntohl>
 8031964:	6178      	str	r0, [r7, #20]
 8031966:	68fb      	ldr	r3, [r7, #12]
 8031968:	3304      	adds	r3, #4
 803196a:	681b      	ldr	r3, [r3, #0]
 803196c:	4618      	mov	r0, r3
 803196e:	f001 fa3b 	bl	8032de8 <mg_ntohl>
 8031972:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 8031974:	697b      	ldr	r3, [r7, #20]
 8031976:	2b00      	cmp	r3, #0
 8031978:	d003      	beq.n	8031982 <gettimestamp+0x32>
 803197a:	697a      	ldr	r2, [r7, #20]
 803197c:	4b2e      	ldr	r3, [pc, #184]	@ (8031a38 <gettimestamp+0xe8>)
 803197e:	4413      	add	r3, r2
 8031980:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8031982:	697b      	ldr	r3, [r7, #20]
 8031984:	2200      	movs	r2, #0
 8031986:	4698      	mov	r8, r3
 8031988:	4691      	mov	r9, r2
 803198a:	4642      	mov	r2, r8
 803198c:	464b      	mov	r3, r9
 803198e:	f04f 0000 	mov.w	r0, #0
 8031992:	f04f 0100 	mov.w	r1, #0
 8031996:	0159      	lsls	r1, r3, #5
 8031998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 803199c:	0150      	lsls	r0, r2, #5
 803199e:	4602      	mov	r2, r0
 80319a0:	460b      	mov	r3, r1
 80319a2:	ebb2 0408 	subs.w	r4, r2, r8
 80319a6:	eb63 0509 	sbc.w	r5, r3, r9
 80319aa:	f04f 0200 	mov.w	r2, #0
 80319ae:	f04f 0300 	mov.w	r3, #0
 80319b2:	00ab      	lsls	r3, r5, #2
 80319b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80319b8:	00a2      	lsls	r2, r4, #2
 80319ba:	4614      	mov	r4, r2
 80319bc:	461d      	mov	r5, r3
 80319be:	eb14 0a08 	adds.w	sl, r4, r8
 80319c2:	eb45 0b09 	adc.w	fp, r5, r9
 80319c6:	f04f 0200 	mov.w	r2, #0
 80319ca:	f04f 0300 	mov.w	r3, #0
 80319ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80319d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80319d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80319da:	4692      	mov	sl, r2
 80319dc:	469b      	mov	fp, r3
 80319de:	4654      	mov	r4, sl
 80319e0:	465d      	mov	r5, fp
 80319e2:	6938      	ldr	r0, [r7, #16]
 80319e4:	f7de fda6 	bl	8010534 <__aeabi_ui2d>
 80319e8:	a311      	add	r3, pc, #68	@ (adr r3, 8031a30 <gettimestamp+0xe0>)
 80319ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80319ee:	f7de ff45 	bl	801087c <__aeabi_ddiv>
 80319f2:	4602      	mov	r2, r0
 80319f4:	460b      	mov	r3, r1
 80319f6:	4610      	mov	r0, r2
 80319f8:	4619      	mov	r1, r3
 80319fa:	f04f 0200 	mov.w	r2, #0
 80319fe:	4b0f      	ldr	r3, [pc, #60]	@ (8031a3c <gettimestamp+0xec>)
 8031a00:	f7de fe12 	bl	8010628 <__aeabi_dmul>
 8031a04:	4602      	mov	r2, r0
 8031a06:	460b      	mov	r3, r1
 8031a08:	4610      	mov	r0, r2
 8031a0a:	4619      	mov	r1, r3
 8031a0c:	f7df f9d0 	bl	8010db0 <__aeabi_d2lz>
 8031a10:	4602      	mov	r2, r0
 8031a12:	460b      	mov	r3, r1
 8031a14:	18a1      	adds	r1, r4, r2
 8031a16:	6039      	str	r1, [r7, #0]
 8031a18:	eb45 0303 	adc.w	r3, r5, r3
 8031a1c:	607b      	str	r3, [r7, #4]
 8031a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8031a22:	4610      	mov	r0, r2
 8031a24:	4619      	mov	r1, r3
 8031a26:	3718      	adds	r7, #24
 8031a28:	46bd      	mov	sp, r7
 8031a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8031a2e:	bf00      	nop
 8031a30:	ffe00000 	.word	0xffe00000
 8031a34:	41efffff 	.word	0x41efffff
 8031a38:	7c558180 	.word	0x7c558180
 8031a3c:	408f4000 	.word	0x408f4000

08031a40 <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 8031a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8031a44:	b098      	sub	sp, #96	@ 0x60
 8031a46:	af00      	add	r7, sp, #0
 8031a48:	6278      	str	r0, [r7, #36]	@ 0x24
 8031a4a:	6239      	str	r1, [r7, #32]
  int64_t epoch_milliseconds = -1;
 8031a4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8031a50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031a54:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  int mode = len > 0 ? buf[0] & 7 : 0;
 8031a58:	6a3b      	ldr	r3, [r7, #32]
 8031a5a:	2b00      	cmp	r3, #0
 8031a5c:	d004      	beq.n	8031a68 <mg_sntp_parse+0x28>
 8031a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031a60:	781b      	ldrb	r3, [r3, #0]
 8031a62:	f003 0307 	and.w	r3, r3, #7
 8031a66:	e000      	b.n	8031a6a <mg_sntp_parse+0x2a>
 8031a68:	2300      	movs	r3, #0
 8031a6a:	657b      	str	r3, [r7, #84]	@ 0x54
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8031a6c:	6a3b      	ldr	r3, [r7, #32]
 8031a6e:	2b00      	cmp	r3, #0
 8031a70:	d006      	beq.n	8031a80 <mg_sntp_parse+0x40>
 8031a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031a74:	781b      	ldrb	r3, [r3, #0]
 8031a76:	08db      	lsrs	r3, r3, #3
 8031a78:	b2db      	uxtb	r3, r3
 8031a7a:	f003 0307 	and.w	r3, r3, #7
 8031a7e:	e000      	b.n	8031a82 <mg_sntp_parse+0x42>
 8031a80:	2300      	movs	r3, #0
 8031a82:	653b      	str	r3, [r7, #80]	@ 0x50
  if (len < 48) {
 8031a84:	6a3b      	ldr	r3, [r7, #32]
 8031a86:	2b2f      	cmp	r3, #47	@ 0x2f
 8031a88:	d810      	bhi.n	8031aac <mg_sntp_parse+0x6c>
    MG_ERROR(("%s", "corrupt packet"));
 8031a8a:	4b60      	ldr	r3, [pc, #384]	@ (8031c0c <mg_sntp_parse+0x1cc>)
 8031a8c:	681b      	ldr	r3, [r3, #0]
 8031a8e:	2b00      	cmp	r3, #0
 8031a90:	f340 80b4 	ble.w	8031bfc <mg_sntp_parse+0x1bc>
 8031a94:	4b5e      	ldr	r3, [pc, #376]	@ (8031c10 <mg_sntp_parse+0x1d0>)
 8031a96:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 8031a9a:	495e      	ldr	r1, [pc, #376]	@ (8031c14 <mg_sntp_parse+0x1d4>)
 8031a9c:	2001      	movs	r0, #1
 8031a9e:	f7f9 fd15 	bl	802b4cc <mg_log_prefix>
 8031aa2:	495d      	ldr	r1, [pc, #372]	@ (8031c18 <mg_sntp_parse+0x1d8>)
 8031aa4:	485d      	ldr	r0, [pc, #372]	@ (8031c1c <mg_sntp_parse+0x1dc>)
 8031aa6:	f7f9 fd61 	bl	802b56c <mg_log>
 8031aaa:	e0a7      	b.n	8031bfc <mg_sntp_parse+0x1bc>
  } else if (mode != 4 && mode != 5) {
 8031aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8031aae:	2b04      	cmp	r3, #4
 8031ab0:	d013      	beq.n	8031ada <mg_sntp_parse+0x9a>
 8031ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8031ab4:	2b05      	cmp	r3, #5
 8031ab6:	d010      	beq.n	8031ada <mg_sntp_parse+0x9a>
    MG_ERROR(("%s", "not a server reply"));
 8031ab8:	4b54      	ldr	r3, [pc, #336]	@ (8031c0c <mg_sntp_parse+0x1cc>)
 8031aba:	681b      	ldr	r3, [r3, #0]
 8031abc:	2b00      	cmp	r3, #0
 8031abe:	f340 809d 	ble.w	8031bfc <mg_sntp_parse+0x1bc>
 8031ac2:	4b53      	ldr	r3, [pc, #332]	@ (8031c10 <mg_sntp_parse+0x1d0>)
 8031ac4:	f641 4210 	movw	r2, #7184	@ 0x1c10
 8031ac8:	4952      	ldr	r1, [pc, #328]	@ (8031c14 <mg_sntp_parse+0x1d4>)
 8031aca:	2001      	movs	r0, #1
 8031acc:	f7f9 fcfe 	bl	802b4cc <mg_log_prefix>
 8031ad0:	4953      	ldr	r1, [pc, #332]	@ (8031c20 <mg_sntp_parse+0x1e0>)
 8031ad2:	4852      	ldr	r0, [pc, #328]	@ (8031c1c <mg_sntp_parse+0x1dc>)
 8031ad4:	f7f9 fd4a 	bl	802b56c <mg_log>
 8031ad8:	e090      	b.n	8031bfc <mg_sntp_parse+0x1bc>
  } else if (buf[1] == 0) {
 8031ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031adc:	3301      	adds	r3, #1
 8031ade:	781b      	ldrb	r3, [r3, #0]
 8031ae0:	2b00      	cmp	r3, #0
 8031ae2:	d110      	bne.n	8031b06 <mg_sntp_parse+0xc6>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8031ae4:	4b49      	ldr	r3, [pc, #292]	@ (8031c0c <mg_sntp_parse+0x1cc>)
 8031ae6:	681b      	ldr	r3, [r3, #0]
 8031ae8:	2b00      	cmp	r3, #0
 8031aea:	f340 8087 	ble.w	8031bfc <mg_sntp_parse+0x1bc>
 8031aee:	4b48      	ldr	r3, [pc, #288]	@ (8031c10 <mg_sntp_parse+0x1d0>)
 8031af0:	f641 4212 	movw	r2, #7186	@ 0x1c12
 8031af4:	4947      	ldr	r1, [pc, #284]	@ (8031c14 <mg_sntp_parse+0x1d4>)
 8031af6:	2001      	movs	r0, #1
 8031af8:	f7f9 fce8 	bl	802b4cc <mg_log_prefix>
 8031afc:	4949      	ldr	r1, [pc, #292]	@ (8031c24 <mg_sntp_parse+0x1e4>)
 8031afe:	4847      	ldr	r0, [pc, #284]	@ (8031c1c <mg_sntp_parse+0x1dc>)
 8031b00:	f7f9 fd34 	bl	802b56c <mg_log>
 8031b04:	e07a      	b.n	8031bfc <mg_sntp_parse+0x1bc>
  } else if (version == 4 || version == 3) {
 8031b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8031b08:	2b04      	cmp	r3, #4
 8031b0a:	d002      	beq.n	8031b12 <mg_sntp_parse+0xd2>
 8031b0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8031b0e:	2b03      	cmp	r3, #3
 8031b10:	d165      	bne.n	8031bde <mg_sntp_parse+0x19e>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8031b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031b14:	3318      	adds	r3, #24
 8031b16:	4618      	mov	r0, r3
 8031b18:	f7ff ff1a 	bl	8031950 <gettimestamp>
 8031b1c:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 8031b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031b22:	3320      	adds	r3, #32
 8031b24:	4618      	mov	r0, r3
 8031b26:	f7ff ff13 	bl	8031950 <gettimestamp>
 8031b2a:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 8031b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031b30:	3328      	adds	r3, #40	@ 0x28
 8031b32:	4618      	mov	r0, r3
 8031b34:	f7ff ff0c 	bl	8031950 <gettimestamp>
 8031b38:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
    int64_t now = (int64_t) mg_millis();
 8031b3c:	f001 f9fe 	bl	8032f3c <mg_millis>
 8031b40:	4602      	mov	r2, r0
 8031b42:	460b      	mov	r3, r1
 8031b44:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 8031b48:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8031b4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8031b50:	ebb0 0a02 	subs.w	sl, r0, r2
 8031b54:	eb61 0b03 	sbc.w	fp, r1, r3
 8031b58:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8031b5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8031b60:	ebb0 0802 	subs.w	r8, r0, r2
 8031b64:	eb61 0903 	sbc.w	r9, r1, r3
 8031b68:	ebba 0308 	subs.w	r3, sl, r8
 8031b6c:	613b      	str	r3, [r7, #16]
 8031b6e:	eb6b 0309 	sbc.w	r3, fp, r9
 8031b72:	617b      	str	r3, [r7, #20]
 8031b74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8031b78:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    epoch_milliseconds = transmit_time + latency / 2;
 8031b7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8031b80:	0fd9      	lsrs	r1, r3, #31
 8031b82:	2000      	movs	r0, #0
 8031b84:	60b9      	str	r1, [r7, #8]
 8031b86:	60f8      	str	r0, [r7, #12]
 8031b88:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8031b8c:	4641      	mov	r1, r8
 8031b8e:	188c      	adds	r4, r1, r2
 8031b90:	4649      	mov	r1, r9
 8031b92:	eb43 0101 	adc.w	r1, r3, r1
 8031b96:	460d      	mov	r5, r1
 8031b98:	f04f 0200 	mov.w	r2, #0
 8031b9c:	f04f 0300 	mov.w	r3, #0
 8031ba0:	0862      	lsrs	r2, r4, #1
 8031ba2:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8031ba6:	106b      	asrs	r3, r5, #1
 8031ba8:	4610      	mov	r0, r2
 8031baa:	4619      	mov	r1, r3
 8031bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8031bb0:	1814      	adds	r4, r2, r0
 8031bb2:	603c      	str	r4, [r7, #0]
 8031bb4:	414b      	adcs	r3, r1
 8031bb6:	607b      	str	r3, [r7, #4]
 8031bb8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8031bbc:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 8031bc0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8031bc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8031bc8:	1a84      	subs	r4, r0, r2
 8031bca:	61bc      	str	r4, [r7, #24]
 8031bcc:	eb61 0303 	sbc.w	r3, r1, r3
 8031bd0:	61fb      	str	r3, [r7, #28]
 8031bd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8031bd6:	4914      	ldr	r1, [pc, #80]	@ (8031c28 <mg_sntp_parse+0x1e8>)
 8031bd8:	e9c1 2300 	strd	r2, r3, [r1]
  } else if (version == 4 || version == 3) {
 8031bdc:	e00e      	b.n	8031bfc <mg_sntp_parse+0x1bc>
  } else {
    MG_ERROR(("unexpected version: %d", version));
 8031bde:	4b0b      	ldr	r3, [pc, #44]	@ (8031c0c <mg_sntp_parse+0x1cc>)
 8031be0:	681b      	ldr	r3, [r3, #0]
 8031be2:	2b00      	cmp	r3, #0
 8031be4:	dd0a      	ble.n	8031bfc <mg_sntp_parse+0x1bc>
 8031be6:	4b0a      	ldr	r3, [pc, #40]	@ (8031c10 <mg_sntp_parse+0x1d0>)
 8031be8:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 8031bec:	4909      	ldr	r1, [pc, #36]	@ (8031c14 <mg_sntp_parse+0x1d4>)
 8031bee:	2001      	movs	r0, #1
 8031bf0:	f7f9 fc6c 	bl	802b4cc <mg_log_prefix>
 8031bf4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8031bf6:	480d      	ldr	r0, [pc, #52]	@ (8031c2c <mg_sntp_parse+0x1ec>)
 8031bf8:	f7f9 fcb8 	bl	802b56c <mg_log>
  }
  return epoch_milliseconds;
 8031bfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
}
 8031c00:	4610      	mov	r0, r2
 8031c02:	4619      	mov	r1, r3
 8031c04:	3760      	adds	r7, #96	@ 0x60
 8031c06:	46bd      	mov	sp, r7
 8031c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8031c0c:	200002a8 	.word	0x200002a8
 8031c10:	08044bc4 	.word	0x08044bc4
 8031c14:	08041a30 	.word	0x08041a30
 8031c18:	080436a4 	.word	0x080436a4
 8031c1c:	08041b9c 	.word	0x08041b9c
 8031c20:	080436b4 	.word	0x080436b4
 8031c24:	080436c8 	.word	0x080436c8
 8031c28:	200181d8 	.word	0x200181d8
 8031c2c:	080436e4 	.word	0x080436e4

08031c30 <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 8031c30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8031c34:	b088      	sub	sp, #32
 8031c36:	af00      	add	r7, sp, #0
 8031c38:	60f8      	str	r0, [r7, #12]
 8031c3a:	60b9      	str	r1, [r7, #8]
 8031c3c:	607a      	str	r2, [r7, #4]
  uint64_t *expiration_time = (uint64_t *) c->data;
 8031c3e:	68fb      	ldr	r3, [r7, #12]
 8031c40:	3388      	adds	r3, #136	@ 0x88
 8031c42:	61fb      	str	r3, [r7, #28]
  if (ev == MG_EV_OPEN) {
 8031c44:	68bb      	ldr	r3, [r7, #8]
 8031c46:	2b01      	cmp	r3, #1
 8031c48:	d10c      	bne.n	8031c64 <sntp_cb+0x34>
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 8031c4a:	f001 f977 	bl	8032f3c <mg_millis>
 8031c4e:	4602      	mov	r2, r0
 8031c50:	460b      	mov	r3, r1
 8031c52:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8031c56:	1854      	adds	r4, r2, r1
 8031c58:	f143 0500 	adc.w	r5, r3, #0
 8031c5c:	69fb      	ldr	r3, [r7, #28]
 8031c5e:	e9c3 4500 	strd	r4, r5, [r3]
  } else if (ev == MG_EV_POLL) {
    if (mg_millis() > *expiration_time) c->is_closing = 1;
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) ev_data;
}
 8031c62:	e05d      	b.n	8031d20 <sntp_cb+0xf0>
  } else if (ev == MG_EV_CONNECT) {
 8031c64:	68bb      	ldr	r3, [r7, #8]
 8031c66:	2b04      	cmp	r3, #4
 8031c68:	d103      	bne.n	8031c72 <sntp_cb+0x42>
    mg_sntp_request(c);
 8031c6a:	68f8      	ldr	r0, [r7, #12]
 8031c6c:	f000 f868 	bl	8031d40 <mg_sntp_request>
}
 8031c70:	e056      	b.n	8031d20 <sntp_cb+0xf0>
  } else if (ev == MG_EV_READ) {
 8031c72:	68bb      	ldr	r3, [r7, #8]
 8031c74:	2b07      	cmp	r3, #7
 8031c76:	d141      	bne.n	8031cfc <sntp_cb+0xcc>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8031c78:	68fb      	ldr	r3, [r7, #12]
 8031c7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8031c7c:	68fb      	ldr	r3, [r7, #12]
 8031c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8031c80:	4619      	mov	r1, r3
 8031c82:	4610      	mov	r0, r2
 8031c84:	f7ff fedc 	bl	8031a40 <mg_sntp_parse>
 8031c88:	4602      	mov	r2, r0
 8031c8a:	460b      	mov	r3, r1
 8031c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 8031c90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8031c94:	2a01      	cmp	r2, #1
 8031c96:	f173 0300 	sbcs.w	r3, r3, #0
 8031c9a:	db27      	blt.n	8031cec <sntp_cb+0xbc>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 8031c9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8031ca0:	4614      	mov	r4, r2
 8031ca2:	461d      	mov	r5, r3
 8031ca4:	f001 f94a 	bl	8032f3c <mg_millis>
 8031ca8:	4602      	mov	r2, r0
 8031caa:	460b      	mov	r3, r1
 8031cac:	ebb4 0802 	subs.w	r8, r4, r2
 8031cb0:	eb65 0903 	sbc.w	r9, r5, r3
 8031cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8031d2c <sntp_cb+0xfc>)
 8031cb6:	e9c3 8900 	strd	r8, r9, [r3]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 8031cba:	f107 0310 	add.w	r3, r7, #16
 8031cbe:	461a      	mov	r2, r3
 8031cc0:	2112      	movs	r1, #18
 8031cc2:	68f8      	ldr	r0, [r7, #12]
 8031cc4:	f7f4 f81c 	bl	8025d00 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8031cc8:	4b19      	ldr	r3, [pc, #100]	@ (8031d30 <sntp_cb+0x100>)
 8031cca:	681b      	ldr	r3, [r3, #0]
 8031ccc:	2b02      	cmp	r3, #2
 8031cce:	dd0d      	ble.n	8031cec <sntp_cb+0xbc>
 8031cd0:	4b18      	ldr	r3, [pc, #96]	@ (8031d34 <sntp_cb+0x104>)
 8031cd2:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 8031cd6:	4918      	ldr	r1, [pc, #96]	@ (8031d38 <sntp_cb+0x108>)
 8031cd8:	2003      	movs	r0, #3
 8031cda:	f7f9 fbf7 	bl	802b4cc <mg_log_prefix>
 8031cde:	68fb      	ldr	r3, [r7, #12]
 8031ce0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8031ce2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8031ce6:	4815      	ldr	r0, [pc, #84]	@ (8031d3c <sntp_cb+0x10c>)
 8031ce8:	f7f9 fc40 	bl	802b56c <mg_log>
    c->is_closing = 1;
 8031cec:	68fa      	ldr	r2, [r7, #12]
 8031cee:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8031cf2:	f043 0320 	orr.w	r3, r3, #32
 8031cf6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8031cfa:	e011      	b.n	8031d20 <sntp_cb+0xf0>
  } else if (ev == MG_EV_POLL) {
 8031cfc:	68bb      	ldr	r3, [r7, #8]
 8031cfe:	2b02      	cmp	r3, #2
 8031d00:	d10e      	bne.n	8031d20 <sntp_cb+0xf0>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8031d02:	f001 f91b 	bl	8032f3c <mg_millis>
 8031d06:	69fb      	ldr	r3, [r7, #28]
 8031d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031d0c:	4282      	cmp	r2, r0
 8031d0e:	418b      	sbcs	r3, r1
 8031d10:	d206      	bcs.n	8031d20 <sntp_cb+0xf0>
 8031d12:	68fa      	ldr	r2, [r7, #12]
 8031d14:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8031d18:	f043 0320 	orr.w	r3, r3, #32
 8031d1c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8031d20:	bf00      	nop
 8031d22:	3720      	adds	r7, #32
 8031d24:	46bd      	mov	sp, r7
 8031d26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8031d2a:	bf00      	nop
 8031d2c:	200181d8 	.word	0x200181d8
 8031d30:	200002a8 	.word	0x200002a8
 8031d34:	08044bd4 	.word	0x08044bd4
 8031d38:	08041a30 	.word	0x08041a30
 8031d3c:	080436fc 	.word	0x080436fc

08031d40 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 8031d40:	b590      	push	{r4, r7, lr}
 8031d42:	b095      	sub	sp, #84	@ 0x54
 8031d44:	af00      	add	r7, sp, #0
 8031d46:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 8031d48:	687b      	ldr	r3, [r7, #4]
 8031d4a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8031d4e:	f003 0308 	and.w	r3, r3, #8
 8031d52:	b2db      	uxtb	r3, r3
 8031d54:	2b00      	cmp	r3, #0
 8031d56:	d011      	beq.n	8031d7c <mg_sntp_request+0x3c>
    MG_ERROR(("%lu wait until resolved", c->id));
 8031d58:	4b39      	ldr	r3, [pc, #228]	@ (8031e40 <mg_sntp_request+0x100>)
 8031d5a:	681b      	ldr	r3, [r3, #0]
 8031d5c:	2b00      	cmp	r3, #0
 8031d5e:	dd65      	ble.n	8031e2c <mg_sntp_request+0xec>
 8031d60:	4b38      	ldr	r3, [pc, #224]	@ (8031e44 <mg_sntp_request+0x104>)
 8031d62:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 8031d66:	4938      	ldr	r1, [pc, #224]	@ (8031e48 <mg_sntp_request+0x108>)
 8031d68:	2001      	movs	r0, #1
 8031d6a:	f7f9 fbaf 	bl	802b4cc <mg_log_prefix>
 8031d6e:	687b      	ldr	r3, [r7, #4]
 8031d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8031d72:	4619      	mov	r1, r3
 8031d74:	4835      	ldr	r0, [pc, #212]	@ (8031e4c <mg_sntp_request+0x10c>)
 8031d76:	f7f9 fbf9 	bl	802b56c <mg_log>
    buf[0] = (0 << 6) | (4 << 3) | 3;
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
    t[1] = mg_htonl((uint32_t) frac);
    mg_send(c, buf, sizeof(buf));
  }
}
 8031d7a:	e057      	b.n	8031e2c <mg_sntp_request+0xec>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 8031d7c:	f001 f8de 	bl	8032f3c <mg_millis>
 8031d80:	4602      	mov	r2, r0
 8031d82:	460b      	mov	r3, r1
 8031d84:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    uint8_t buf[48] = {0};
 8031d88:	2300      	movs	r3, #0
 8031d8a:	60bb      	str	r3, [r7, #8]
 8031d8c:	f107 030c 	add.w	r3, r7, #12
 8031d90:	222c      	movs	r2, #44	@ 0x2c
 8031d92:	2100      	movs	r1, #0
 8031d94:	4618      	mov	r0, r3
 8031d96:	f004 f9a3 	bl	80360e0 <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 8031d9a:	f107 0308 	add.w	r3, r7, #8
 8031d9e:	3328      	adds	r3, #40	@ 0x28
 8031da0:	647b      	str	r3, [r7, #68]	@ 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8031da2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8031da6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8031daa:	f04f 0300 	mov.w	r3, #0
 8031dae:	f7de ff83 	bl	8010cb8 <__aeabi_ldivmod>
 8031db2:	4610      	mov	r0, r2
 8031db4:	4619      	mov	r1, r3
 8031db6:	f7de fc09 	bl	80105cc <__aeabi_l2d>
 8031dba:	f04f 0200 	mov.w	r2, #0
 8031dbe:	4b24      	ldr	r3, [pc, #144]	@ (8031e50 <mg_sntp_request+0x110>)
 8031dc0:	f7de fd5c 	bl	801087c <__aeabi_ddiv>
 8031dc4:	4602      	mov	r2, r0
 8031dc6:	460b      	mov	r3, r1
 8031dc8:	4610      	mov	r0, r2
 8031dca:	4619      	mov	r1, r3
 8031dcc:	a31a      	add	r3, pc, #104	@ (adr r3, 8031e38 <mg_sntp_request+0xf8>)
 8031dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031dd2:	f7de fc29 	bl	8010628 <__aeabi_dmul>
 8031dd6:	4602      	mov	r2, r0
 8031dd8:	460b      	mov	r3, r1
 8031dda:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8031dde:	2323      	movs	r3, #35	@ 0x23
 8031de0:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8031de2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8031de6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8031dea:	f04f 0300 	mov.w	r3, #0
 8031dee:	f7de ff63 	bl	8010cb8 <__aeabi_ldivmod>
 8031df2:	4602      	mov	r2, r0
 8031df4:	460b      	mov	r3, r1
 8031df6:	4b17      	ldr	r3, [pc, #92]	@ (8031e54 <mg_sntp_request+0x114>)
 8031df8:	4413      	add	r3, r2
 8031dfa:	4618      	mov	r0, r3
 8031dfc:	f000 fff4 	bl	8032de8 <mg_ntohl>
 8031e00:	4602      	mov	r2, r0
 8031e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8031e04:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 8031e06:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8031e0a:	f7de fee5 	bl	8010bd8 <__aeabi_d2uiz>
 8031e0e:	4602      	mov	r2, r0
 8031e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8031e12:	1d1c      	adds	r4, r3, #4
 8031e14:	4610      	mov	r0, r2
 8031e16:	f000 ffe7 	bl	8032de8 <mg_ntohl>
 8031e1a:	4603      	mov	r3, r0
 8031e1c:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 8031e1e:	f107 0308 	add.w	r3, r7, #8
 8031e22:	2230      	movs	r2, #48	@ 0x30
 8031e24:	4619      	mov	r1, r3
 8031e26:	6878      	ldr	r0, [r7, #4]
 8031e28:	f7ff fa7e 	bl	8031328 <mg_send>
}
 8031e2c:	bf00      	nop
 8031e2e:	3754      	adds	r7, #84	@ 0x54
 8031e30:	46bd      	mov	sp, r7
 8031e32:	bd90      	pop	{r4, r7, pc}
 8031e34:	f3af 8000 	nop.w
 8031e38:	ffe00000 	.word	0xffe00000
 8031e3c:	41efffff 	.word	0x41efffff
 8031e40:	200002a8 	.word	0x200002a8
 8031e44:	08044bdc 	.word	0x08044bdc
 8031e48:	08041a30 	.word	0x08041a30
 8031e4c:	08043720 	.word	0x08043720
 8031e50:	408f4000 	.word	0x408f4000
 8031e54:	83aa7e80 	.word	0x83aa7e80

08031e58 <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 8031e58:	b580      	push	{r7, lr}
 8031e5a:	b086      	sub	sp, #24
 8031e5c:	af00      	add	r7, sp, #0
 8031e5e:	60f8      	str	r0, [r7, #12]
 8031e60:	60b9      	str	r1, [r7, #8]
 8031e62:	607a      	str	r2, [r7, #4]
 8031e64:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8031e66:	2300      	movs	r3, #0
 8031e68:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 8031e6a:	68bb      	ldr	r3, [r7, #8]
 8031e6c:	2b00      	cmp	r3, #0
 8031e6e:	d101      	bne.n	8031e74 <mg_sntp_connect+0x1c>
 8031e70:	4b0c      	ldr	r3, [pc, #48]	@ (8031ea4 <mg_sntp_connect+0x4c>)
 8031e72:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 8031e74:	683b      	ldr	r3, [r7, #0]
 8031e76:	687a      	ldr	r2, [r7, #4]
 8031e78:	68b9      	ldr	r1, [r7, #8]
 8031e7a:	68f8      	ldr	r0, [r7, #12]
 8031e7c:	f7fb ff90 	bl	802dda0 <mg_connect>
 8031e80:	6178      	str	r0, [r7, #20]
 8031e82:	697b      	ldr	r3, [r7, #20]
 8031e84:	2b00      	cmp	r3, #0
 8031e86:	d008      	beq.n	8031e9a <mg_sntp_connect+0x42>
    c->pfn = sntp_cb;
 8031e88:	697b      	ldr	r3, [r7, #20]
 8031e8a:	4a07      	ldr	r2, [pc, #28]	@ (8031ea8 <mg_sntp_connect+0x50>)
 8031e8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 8031e90:	68ba      	ldr	r2, [r7, #8]
 8031e92:	2101      	movs	r1, #1
 8031e94:	6978      	ldr	r0, [r7, #20]
 8031e96:	f7ff fecb 	bl	8031c30 <sntp_cb>
  }
  return c;
 8031e9a:	697b      	ldr	r3, [r7, #20]
}
 8031e9c:	4618      	mov	r0, r3
 8031e9e:	3718      	adds	r7, #24
 8031ea0:	46bd      	mov	sp, r7
 8031ea2:	bd80      	pop	{r7, pc}
 8031ea4:	08043738 	.word	0x08043738
 8031ea8:	08031c31 	.word	0x08031c31

08031eac <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8031eac:	b580      	push	{r7, lr}
 8031eae:	b084      	sub	sp, #16
 8031eb0:	af00      	add	r7, sp, #0
 8031eb2:	60f8      	str	r0, [r7, #12]
 8031eb4:	60b9      	str	r1, [r7, #8]
 8031eb6:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8031eb8:	4b05      	ldr	r3, [pc, #20]	@ (8031ed0 <mg_http_serve_ssi+0x24>)
 8031eba:	2200      	movs	r2, #0
 8031ebc:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8031ec0:	68f8      	ldr	r0, [r7, #12]
 8031ec2:	f7f6 fb5b 	bl	802857c <mg_http_reply>
  (void) root, (void) fullpath;
}
 8031ec6:	bf00      	nop
 8031ec8:	3710      	adds	r7, #16
 8031eca:	46bd      	mov	sp, r7
 8031ecc:	bd80      	pop	{r7, pc}
 8031ece:	bf00      	nop
 8031ed0:	08043754 	.word	0x08043754

08031ed4 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8031ed4:	b580      	push	{r7, lr}
 8031ed6:	b084      	sub	sp, #16
 8031ed8:	af00      	add	r7, sp, #0
 8031eda:	6078      	str	r0, [r7, #4]
 8031edc:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8031ede:	683b      	ldr	r3, [r7, #0]
 8031ee0:	60bb      	str	r3, [r7, #8]
 8031ee2:	683b      	ldr	r3, [r7, #0]
 8031ee4:	2b00      	cmp	r3, #0
 8031ee6:	d004      	beq.n	8031ef2 <mg_str_s+0x1e>
 8031ee8:	6838      	ldr	r0, [r7, #0]
 8031eea:	f7de f9d9 	bl	80102a0 <strlen>
 8031eee:	4603      	mov	r3, r0
 8031ef0:	e000      	b.n	8031ef4 <mg_str_s+0x20>
 8031ef2:	2300      	movs	r3, #0
 8031ef4:	60fb      	str	r3, [r7, #12]
  return str;
 8031ef6:	687b      	ldr	r3, [r7, #4]
 8031ef8:	461a      	mov	r2, r3
 8031efa:	f107 0308 	add.w	r3, r7, #8
 8031efe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8031f02:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8031f06:	6878      	ldr	r0, [r7, #4]
 8031f08:	3710      	adds	r7, #16
 8031f0a:	46bd      	mov	sp, r7
 8031f0c:	bd80      	pop	{r7, pc}

08031f0e <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 8031f0e:	b480      	push	{r7}
 8031f10:	b087      	sub	sp, #28
 8031f12:	af00      	add	r7, sp, #0
 8031f14:	60f8      	str	r0, [r7, #12]
 8031f16:	60b9      	str	r1, [r7, #8]
 8031f18:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 8031f1a:	68bb      	ldr	r3, [r7, #8]
 8031f1c:	613b      	str	r3, [r7, #16]
 8031f1e:	687b      	ldr	r3, [r7, #4]
 8031f20:	617b      	str	r3, [r7, #20]
  return str;
 8031f22:	68fb      	ldr	r3, [r7, #12]
 8031f24:	461a      	mov	r2, r3
 8031f26:	f107 0310 	add.w	r3, r7, #16
 8031f2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8031f2e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8031f32:	68f8      	ldr	r0, [r7, #12]
 8031f34:	371c      	adds	r7, #28
 8031f36:	46bd      	mov	sp, r7
 8031f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031f3c:	4770      	bx	lr

08031f3e <mg_tolc>:

static int mg_tolc(char c) {
 8031f3e:	b480      	push	{r7}
 8031f40:	b083      	sub	sp, #12
 8031f42:	af00      	add	r7, sp, #0
 8031f44:	4603      	mov	r3, r0
 8031f46:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8031f48:	79fb      	ldrb	r3, [r7, #7]
 8031f4a:	2b40      	cmp	r3, #64	@ 0x40
 8031f4c:	d905      	bls.n	8031f5a <mg_tolc+0x1c>
 8031f4e:	79fb      	ldrb	r3, [r7, #7]
 8031f50:	2b5a      	cmp	r3, #90	@ 0x5a
 8031f52:	d802      	bhi.n	8031f5a <mg_tolc+0x1c>
 8031f54:	79fb      	ldrb	r3, [r7, #7]
 8031f56:	3320      	adds	r3, #32
 8031f58:	e000      	b.n	8031f5c <mg_tolc+0x1e>
 8031f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8031f5c:	4618      	mov	r0, r3
 8031f5e:	370c      	adds	r7, #12
 8031f60:	46bd      	mov	sp, r7
 8031f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031f66:	4770      	bx	lr

08031f68 <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8031f68:	b490      	push	{r4, r7}
 8031f6a:	b088      	sub	sp, #32
 8031f6c:	af00      	add	r7, sp, #0
 8031f6e:	f107 0408 	add.w	r4, r7, #8
 8031f72:	e884 0003 	stmia.w	r4, {r0, r1}
 8031f76:	4639      	mov	r1, r7
 8031f78:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8031f7c:	2300      	movs	r3, #0
 8031f7e:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8031f80:	e019      	b.n	8031fb6 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 8031f82:	68ba      	ldr	r2, [r7, #8]
 8031f84:	69fb      	ldr	r3, [r7, #28]
 8031f86:	4413      	add	r3, r2
 8031f88:	781b      	ldrb	r3, [r3, #0]
 8031f8a:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 8031f8c:	683a      	ldr	r2, [r7, #0]
 8031f8e:	69fb      	ldr	r3, [r7, #28]
 8031f90:	4413      	add	r3, r2
 8031f92:	781b      	ldrb	r3, [r3, #0]
 8031f94:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8031f96:	69ba      	ldr	r2, [r7, #24]
 8031f98:	697b      	ldr	r3, [r7, #20]
 8031f9a:	429a      	cmp	r2, r3
 8031f9c:	da02      	bge.n	8031fa4 <mg_strcmp+0x3c>
 8031f9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031fa2:	e01e      	b.n	8031fe2 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8031fa4:	69ba      	ldr	r2, [r7, #24]
 8031fa6:	697b      	ldr	r3, [r7, #20]
 8031fa8:	429a      	cmp	r2, r3
 8031faa:	dd01      	ble.n	8031fb0 <mg_strcmp+0x48>
 8031fac:	2301      	movs	r3, #1
 8031fae:	e018      	b.n	8031fe2 <mg_strcmp+0x7a>
    i++;
 8031fb0:	69fb      	ldr	r3, [r7, #28]
 8031fb2:	3301      	adds	r3, #1
 8031fb4:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8031fb6:	68fb      	ldr	r3, [r7, #12]
 8031fb8:	69fa      	ldr	r2, [r7, #28]
 8031fba:	429a      	cmp	r2, r3
 8031fbc:	d203      	bcs.n	8031fc6 <mg_strcmp+0x5e>
 8031fbe:	687b      	ldr	r3, [r7, #4]
 8031fc0:	69fa      	ldr	r2, [r7, #28]
 8031fc2:	429a      	cmp	r2, r3
 8031fc4:	d3dd      	bcc.n	8031f82 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8031fc6:	68fb      	ldr	r3, [r7, #12]
 8031fc8:	69fa      	ldr	r2, [r7, #28]
 8031fca:	429a      	cmp	r2, r3
 8031fcc:	d201      	bcs.n	8031fd2 <mg_strcmp+0x6a>
 8031fce:	2301      	movs	r3, #1
 8031fd0:	e007      	b.n	8031fe2 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8031fd2:	687b      	ldr	r3, [r7, #4]
 8031fd4:	69fa      	ldr	r2, [r7, #28]
 8031fd6:	429a      	cmp	r2, r3
 8031fd8:	d202      	bcs.n	8031fe0 <mg_strcmp+0x78>
 8031fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031fde:	e000      	b.n	8031fe2 <mg_strcmp+0x7a>
  return 0;
 8031fe0:	2300      	movs	r3, #0
}
 8031fe2:	4618      	mov	r0, r3
 8031fe4:	3720      	adds	r7, #32
 8031fe6:	46bd      	mov	sp, r7
 8031fe8:	bc90      	pop	{r4, r7}
 8031fea:	4770      	bx	lr

08031fec <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8031fec:	b590      	push	{r4, r7, lr}
 8031fee:	b089      	sub	sp, #36	@ 0x24
 8031ff0:	af00      	add	r7, sp, #0
 8031ff2:	f107 0408 	add.w	r4, r7, #8
 8031ff6:	e884 0003 	stmia.w	r4, {r0, r1}
 8031ffa:	4639      	mov	r1, r7
 8031ffc:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8032000:	2300      	movs	r3, #0
 8032002:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8032004:	e01f      	b.n	8032046 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 8032006:	68ba      	ldr	r2, [r7, #8]
 8032008:	69fb      	ldr	r3, [r7, #28]
 803200a:	4413      	add	r3, r2
 803200c:	781b      	ldrb	r3, [r3, #0]
 803200e:	4618      	mov	r0, r3
 8032010:	f7ff ff95 	bl	8031f3e <mg_tolc>
 8032014:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 8032016:	683a      	ldr	r2, [r7, #0]
 8032018:	69fb      	ldr	r3, [r7, #28]
 803201a:	4413      	add	r3, r2
 803201c:	781b      	ldrb	r3, [r3, #0]
 803201e:	4618      	mov	r0, r3
 8032020:	f7ff ff8d 	bl	8031f3e <mg_tolc>
 8032024:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8032026:	69ba      	ldr	r2, [r7, #24]
 8032028:	697b      	ldr	r3, [r7, #20]
 803202a:	429a      	cmp	r2, r3
 803202c:	da02      	bge.n	8032034 <mg_strcasecmp+0x48>
 803202e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8032032:	e01e      	b.n	8032072 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 8032034:	69ba      	ldr	r2, [r7, #24]
 8032036:	697b      	ldr	r3, [r7, #20]
 8032038:	429a      	cmp	r2, r3
 803203a:	dd01      	ble.n	8032040 <mg_strcasecmp+0x54>
 803203c:	2301      	movs	r3, #1
 803203e:	e018      	b.n	8032072 <mg_strcasecmp+0x86>
    i++;
 8032040:	69fb      	ldr	r3, [r7, #28]
 8032042:	3301      	adds	r3, #1
 8032044:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8032046:	68fb      	ldr	r3, [r7, #12]
 8032048:	69fa      	ldr	r2, [r7, #28]
 803204a:	429a      	cmp	r2, r3
 803204c:	d203      	bcs.n	8032056 <mg_strcasecmp+0x6a>
 803204e:	687b      	ldr	r3, [r7, #4]
 8032050:	69fa      	ldr	r2, [r7, #28]
 8032052:	429a      	cmp	r2, r3
 8032054:	d3d7      	bcc.n	8032006 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 8032056:	68fb      	ldr	r3, [r7, #12]
 8032058:	69fa      	ldr	r2, [r7, #28]
 803205a:	429a      	cmp	r2, r3
 803205c:	d201      	bcs.n	8032062 <mg_strcasecmp+0x76>
 803205e:	2301      	movs	r3, #1
 8032060:	e007      	b.n	8032072 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 8032062:	687b      	ldr	r3, [r7, #4]
 8032064:	69fa      	ldr	r2, [r7, #28]
 8032066:	429a      	cmp	r2, r3
 8032068:	d202      	bcs.n	8032070 <mg_strcasecmp+0x84>
 803206a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803206e:	e000      	b.n	8032072 <mg_strcasecmp+0x86>
  return 0;
 8032070:	2300      	movs	r3, #0
}
 8032072:	4618      	mov	r0, r3
 8032074:	3724      	adds	r7, #36	@ 0x24
 8032076:	46bd      	mov	sp, r7
 8032078:	bd90      	pop	{r4, r7, pc}

0803207a <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 803207a:	b490      	push	{r4, r7}
 803207c:	b088      	sub	sp, #32
 803207e:	af00      	add	r7, sp, #0
 8032080:	f107 0408 	add.w	r4, r7, #8
 8032084:	e884 0003 	stmia.w	r4, {r0, r1}
 8032088:	4639      	mov	r1, r7
 803208a:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 803208e:	2300      	movs	r3, #0
 8032090:	61fb      	str	r3, [r7, #28]
 8032092:	2300      	movs	r3, #0
 8032094:	61bb      	str	r3, [r7, #24]
 8032096:	2300      	movs	r3, #0
 8032098:	617b      	str	r3, [r7, #20]
 803209a:	2300      	movs	r3, #0
 803209c:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 803209e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80320a0:	2b00      	cmp	r3, #0
 80320a2:	f000 80ba 	beq.w	803221a <mg_match+0x1a0>
 80320a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80320a8:	2200      	movs	r2, #0
 80320aa:	601a      	str	r2, [r3, #0]
 80320ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80320ae:	2200      	movs	r2, #0
 80320b0:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 80320b2:	e0b2      	b.n	803221a <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 80320b4:	687b      	ldr	r3, [r7, #4]
 80320b6:	69fa      	ldr	r2, [r7, #28]
 80320b8:	429a      	cmp	r2, r3
 80320ba:	d25b      	bcs.n	8032174 <mg_match+0xfa>
 80320bc:	68fb      	ldr	r3, [r7, #12]
 80320be:	69ba      	ldr	r2, [r7, #24]
 80320c0:	429a      	cmp	r2, r3
 80320c2:	d257      	bcs.n	8032174 <mg_match+0xfa>
        (p.buf[i] == '?' ||
 80320c4:	683a      	ldr	r2, [r7, #0]
 80320c6:	69fb      	ldr	r3, [r7, #28]
 80320c8:	4413      	add	r3, r2
 80320ca:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 80320cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80320ce:	d015      	beq.n	80320fc <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 80320d0:	683a      	ldr	r2, [r7, #0]
 80320d2:	69fb      	ldr	r3, [r7, #28]
 80320d4:	4413      	add	r3, r2
 80320d6:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 80320d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80320da:	d04b      	beq.n	8032174 <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 80320dc:	683a      	ldr	r2, [r7, #0]
 80320de:	69fb      	ldr	r3, [r7, #28]
 80320e0:	4413      	add	r3, r2
 80320e2:	781b      	ldrb	r3, [r3, #0]
 80320e4:	2b23      	cmp	r3, #35	@ 0x23
 80320e6:	d045      	beq.n	8032174 <mg_match+0xfa>
 80320e8:	68ba      	ldr	r2, [r7, #8]
 80320ea:	69bb      	ldr	r3, [r7, #24]
 80320ec:	4413      	add	r3, r2
 80320ee:	781a      	ldrb	r2, [r3, #0]
 80320f0:	6839      	ldr	r1, [r7, #0]
 80320f2:	69fb      	ldr	r3, [r7, #28]
 80320f4:	440b      	add	r3, r1
 80320f6:	781b      	ldrb	r3, [r3, #0]
 80320f8:	429a      	cmp	r2, r3
 80320fa:	d13b      	bne.n	8032174 <mg_match+0xfa>
      if (caps == NULL) {
 80320fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80320fe:	2b00      	cmp	r3, #0
 8032100:	d031      	beq.n	8032166 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 8032102:	683a      	ldr	r2, [r7, #0]
 8032104:	69fb      	ldr	r3, [r7, #28]
 8032106:	4413      	add	r3, r2
 8032108:	781b      	ldrb	r3, [r3, #0]
 803210a:	2b3f      	cmp	r3, #63	@ 0x3f
 803210c:	d111      	bne.n	8032132 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 803210e:	68ba      	ldr	r2, [r7, #8]
 8032110:	69bb      	ldr	r3, [r7, #24]
 8032112:	441a      	add	r2, r3
 8032114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032116:	601a      	str	r2, [r3, #0]
 8032118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803211a:	2201      	movs	r2, #1
 803211c:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 803211e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032120:	3308      	adds	r3, #8
 8032122:	62bb      	str	r3, [r7, #40]	@ 0x28
 8032124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032126:	2200      	movs	r2, #0
 8032128:	601a      	str	r2, [r3, #0]
 803212a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803212c:	2200      	movs	r2, #0
 803212e:	605a      	str	r2, [r3, #4]
 8032130:	e019      	b.n	8032166 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8032132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032134:	681b      	ldr	r3, [r3, #0]
 8032136:	2b00      	cmp	r3, #0
 8032138:	d015      	beq.n	8032166 <mg_match+0xec>
 803213a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803213c:	685b      	ldr	r3, [r3, #4]
 803213e:	2b00      	cmp	r3, #0
 8032140:	d111      	bne.n	8032166 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8032142:	68ba      	ldr	r2, [r7, #8]
 8032144:	69bb      	ldr	r3, [r7, #24]
 8032146:	441a      	add	r2, r3
 8032148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803214a:	681b      	ldr	r3, [r3, #0]
 803214c:	1ad3      	subs	r3, r2, r3
 803214e:	461a      	mov	r2, r3
 8032150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032152:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8032154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032156:	3308      	adds	r3, #8
 8032158:	62bb      	str	r3, [r7, #40]	@ 0x28
 803215a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803215c:	2200      	movs	r2, #0
 803215e:	605a      	str	r2, [r3, #4]
 8032160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032162:	2200      	movs	r2, #0
 8032164:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8032166:	69fb      	ldr	r3, [r7, #28]
 8032168:	3301      	adds	r3, #1
 803216a:	61fb      	str	r3, [r7, #28]
 803216c:	69bb      	ldr	r3, [r7, #24]
 803216e:	3301      	adds	r3, #1
 8032170:	61bb      	str	r3, [r7, #24]
 8032172:	e052      	b.n	803221a <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8032174:	687b      	ldr	r3, [r7, #4]
 8032176:	69fa      	ldr	r2, [r7, #28]
 8032178:	429a      	cmp	r2, r3
 803217a:	d222      	bcs.n	80321c2 <mg_match+0x148>
 803217c:	683a      	ldr	r2, [r7, #0]
 803217e:	69fb      	ldr	r3, [r7, #28]
 8032180:	4413      	add	r3, r2
 8032182:	781b      	ldrb	r3, [r3, #0]
 8032184:	2b2a      	cmp	r3, #42	@ 0x2a
 8032186:	d005      	beq.n	8032194 <mg_match+0x11a>
 8032188:	683a      	ldr	r2, [r7, #0]
 803218a:	69fb      	ldr	r3, [r7, #28]
 803218c:	4413      	add	r3, r2
 803218e:	781b      	ldrb	r3, [r3, #0]
 8032190:	2b23      	cmp	r3, #35	@ 0x23
 8032192:	d116      	bne.n	80321c2 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8032194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032196:	2b00      	cmp	r3, #0
 8032198:	d00b      	beq.n	80321b2 <mg_match+0x138>
 803219a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803219c:	681b      	ldr	r3, [r3, #0]
 803219e:	2b00      	cmp	r3, #0
 80321a0:	d107      	bne.n	80321b2 <mg_match+0x138>
 80321a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80321a4:	2200      	movs	r2, #0
 80321a6:	605a      	str	r2, [r3, #4]
 80321a8:	68ba      	ldr	r2, [r7, #8]
 80321aa:	69bb      	ldr	r3, [r7, #24]
 80321ac:	441a      	add	r2, r3
 80321ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80321b0:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 80321b2:	69fb      	ldr	r3, [r7, #28]
 80321b4:	1c5a      	adds	r2, r3, #1
 80321b6:	61fa      	str	r2, [r7, #28]
 80321b8:	617b      	str	r3, [r7, #20]
 80321ba:	69bb      	ldr	r3, [r7, #24]
 80321bc:	3301      	adds	r3, #1
 80321be:	613b      	str	r3, [r7, #16]
 80321c0:	e02b      	b.n	803221a <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 80321c2:	693b      	ldr	r3, [r7, #16]
 80321c4:	2b00      	cmp	r3, #0
 80321c6:	d025      	beq.n	8032214 <mg_match+0x19a>
 80321c8:	68fb      	ldr	r3, [r7, #12]
 80321ca:	693a      	ldr	r2, [r7, #16]
 80321cc:	429a      	cmp	r2, r3
 80321ce:	d821      	bhi.n	8032214 <mg_match+0x19a>
 80321d0:	683a      	ldr	r2, [r7, #0]
 80321d2:	697b      	ldr	r3, [r7, #20]
 80321d4:	4413      	add	r3, r2
 80321d6:	781b      	ldrb	r3, [r3, #0]
 80321d8:	2b23      	cmp	r3, #35	@ 0x23
 80321da:	d005      	beq.n	80321e8 <mg_match+0x16e>
 80321dc:	68ba      	ldr	r2, [r7, #8]
 80321de:	69bb      	ldr	r3, [r7, #24]
 80321e0:	4413      	add	r3, r2
 80321e2:	781b      	ldrb	r3, [r3, #0]
 80321e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80321e6:	d015      	beq.n	8032214 <mg_match+0x19a>
      i = ni, j = nj;
 80321e8:	697b      	ldr	r3, [r7, #20]
 80321ea:	61fb      	str	r3, [r7, #28]
 80321ec:	693b      	ldr	r3, [r7, #16]
 80321ee:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 80321f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80321f2:	2b00      	cmp	r3, #0
 80321f4:	d010      	beq.n	8032218 <mg_match+0x19e>
 80321f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80321f8:	681b      	ldr	r3, [r3, #0]
 80321fa:	2b00      	cmp	r3, #0
 80321fc:	d10c      	bne.n	8032218 <mg_match+0x19e>
 80321fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032200:	685b      	ldr	r3, [r3, #4]
 8032202:	2b00      	cmp	r3, #0
 8032204:	d108      	bne.n	8032218 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 8032206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032208:	3b08      	subs	r3, #8
 803220a:	62bb      	str	r3, [r7, #40]	@ 0x28
 803220c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803220e:	2200      	movs	r2, #0
 8032210:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8032212:	e001      	b.n	8032218 <mg_match+0x19e>
      }
    } else {
      return false;
 8032214:	2300      	movs	r3, #0
 8032216:	e01f      	b.n	8032258 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8032218:	bf00      	nop
  while (i < p.len || j < s.len) {
 803221a:	687b      	ldr	r3, [r7, #4]
 803221c:	69fa      	ldr	r2, [r7, #28]
 803221e:	429a      	cmp	r2, r3
 8032220:	f4ff af48 	bcc.w	80320b4 <mg_match+0x3a>
 8032224:	68fb      	ldr	r3, [r7, #12]
 8032226:	69ba      	ldr	r2, [r7, #24]
 8032228:	429a      	cmp	r2, r3
 803222a:	f4ff af43 	bcc.w	80320b4 <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 803222e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032230:	2b00      	cmp	r3, #0
 8032232:	d010      	beq.n	8032256 <mg_match+0x1dc>
 8032234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032236:	681b      	ldr	r3, [r3, #0]
 8032238:	2b00      	cmp	r3, #0
 803223a:	d00c      	beq.n	8032256 <mg_match+0x1dc>
 803223c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803223e:	685b      	ldr	r3, [r3, #4]
 8032240:	2b00      	cmp	r3, #0
 8032242:	d108      	bne.n	8032256 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8032244:	68ba      	ldr	r2, [r7, #8]
 8032246:	69bb      	ldr	r3, [r7, #24]
 8032248:	441a      	add	r2, r3
 803224a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803224c:	681b      	ldr	r3, [r3, #0]
 803224e:	1ad3      	subs	r3, r2, r3
 8032250:	461a      	mov	r2, r3
 8032252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8032254:	605a      	str	r2, [r3, #4]
  }
  return true;
 8032256:	2301      	movs	r3, #1
}
 8032258:	4618      	mov	r0, r3
 803225a:	3720      	adds	r7, #32
 803225c:	46bd      	mov	sp, r7
 803225e:	bc90      	pop	{r4, r7}
 8032260:	4770      	bx	lr

08032262 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8032262:	b590      	push	{r4, r7, lr}
 8032264:	b089      	sub	sp, #36	@ 0x24
 8032266:	af00      	add	r7, sp, #0
 8032268:	f107 0410 	add.w	r4, r7, #16
 803226c:	e884 0003 	stmia.w	r4, {r0, r1}
 8032270:	60fa      	str	r2, [r7, #12]
 8032272:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 8032274:	697b      	ldr	r3, [r7, #20]
 8032276:	2b00      	cmp	r3, #0
 8032278:	d002      	beq.n	8032280 <mg_span+0x1e>
 803227a:	693b      	ldr	r3, [r7, #16]
 803227c:	2b00      	cmp	r3, #0
 803227e:	d101      	bne.n	8032284 <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 8032280:	2300      	movs	r3, #0
 8032282:	e047      	b.n	8032314 <mg_span+0xb2>
  } else {
    size_t len = 0;
 8032284:	2300      	movs	r3, #0
 8032286:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8032288:	e002      	b.n	8032290 <mg_span+0x2e>
 803228a:	69fb      	ldr	r3, [r7, #28]
 803228c:	3301      	adds	r3, #1
 803228e:	61fb      	str	r3, [r7, #28]
 8032290:	697b      	ldr	r3, [r7, #20]
 8032292:	69fa      	ldr	r2, [r7, #28]
 8032294:	429a      	cmp	r2, r3
 8032296:	d207      	bcs.n	80322a8 <mg_span+0x46>
 8032298:	693a      	ldr	r2, [r7, #16]
 803229a:	69fb      	ldr	r3, [r7, #28]
 803229c:	4413      	add	r3, r2
 803229e:	781b      	ldrb	r3, [r3, #0]
 80322a0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80322a4:	429a      	cmp	r2, r3
 80322a6:	d1f0      	bne.n	803228a <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 80322a8:	68fb      	ldr	r3, [r7, #12]
 80322aa:	2b00      	cmp	r3, #0
 80322ac:	d00c      	beq.n	80322c8 <mg_span+0x66>
 80322ae:	6939      	ldr	r1, [r7, #16]
 80322b0:	68fc      	ldr	r4, [r7, #12]
 80322b2:	463b      	mov	r3, r7
 80322b4:	69fa      	ldr	r2, [r7, #28]
 80322b6:	4618      	mov	r0, r3
 80322b8:	f7ff fe29 	bl	8031f0e <mg_str_n>
 80322bc:	4622      	mov	r2, r4
 80322be:	463b      	mov	r3, r7
 80322c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80322c4:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 80322c8:	68bb      	ldr	r3, [r7, #8]
 80322ca:	2b00      	cmp	r3, #0
 80322cc:	d010      	beq.n	80322f0 <mg_span+0x8e>
 80322ce:	693a      	ldr	r2, [r7, #16]
 80322d0:	69fb      	ldr	r3, [r7, #28]
 80322d2:	18d1      	adds	r1, r2, r3
 80322d4:	697a      	ldr	r2, [r7, #20]
 80322d6:	69fb      	ldr	r3, [r7, #28]
 80322d8:	1ad2      	subs	r2, r2, r3
 80322da:	68bc      	ldr	r4, [r7, #8]
 80322dc:	463b      	mov	r3, r7
 80322de:	4618      	mov	r0, r3
 80322e0:	f7ff fe15 	bl	8031f0e <mg_str_n>
 80322e4:	4622      	mov	r2, r4
 80322e6:	463b      	mov	r3, r7
 80322e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80322ec:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 80322f0:	68bb      	ldr	r3, [r7, #8]
 80322f2:	2b00      	cmp	r3, #0
 80322f4:	d00d      	beq.n	8032312 <mg_span+0xb0>
 80322f6:	697b      	ldr	r3, [r7, #20]
 80322f8:	69fa      	ldr	r2, [r7, #28]
 80322fa:	429a      	cmp	r2, r3
 80322fc:	d209      	bcs.n	8032312 <mg_span+0xb0>
 80322fe:	68bb      	ldr	r3, [r7, #8]
 8032300:	681b      	ldr	r3, [r3, #0]
 8032302:	1c5a      	adds	r2, r3, #1
 8032304:	68bb      	ldr	r3, [r7, #8]
 8032306:	601a      	str	r2, [r3, #0]
 8032308:	68bb      	ldr	r3, [r7, #8]
 803230a:	685b      	ldr	r3, [r3, #4]
 803230c:	1e5a      	subs	r2, r3, #1
 803230e:	68bb      	ldr	r3, [r7, #8]
 8032310:	605a      	str	r2, [r3, #4]
    return true;
 8032312:	2301      	movs	r3, #1
  }
}
 8032314:	4618      	mov	r0, r3
 8032316:	3724      	adds	r7, #36	@ 0x24
 8032318:	46bd      	mov	sp, r7
 803231a:	bd90      	pop	{r4, r7, pc}

0803231c <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 803231c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032320:	b0a5      	sub	sp, #148	@ 0x94
 8032322:	af00      	add	r7, sp, #0
 8032324:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8032328:	e884 0003 	stmia.w	r4, {r0, r1}
 803232c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 803232e:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 8032330:	2300      	movs	r3, #0
 8032332:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8032336:	2300      	movs	r3, #0
 8032338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 803233c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8032340:	2b01      	cmp	r3, #1
 8032342:	d016      	beq.n	8032372 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8032344:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8032348:	2b02      	cmp	r3, #2
 803234a:	d00d      	beq.n	8032368 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 803234c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8032350:	2b04      	cmp	r3, #4
 8032352:	d104      	bne.n	803235e <mg_str_to_num+0x42>
 8032354:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8032358:	f04f 0300 	mov.w	r3, #0
 803235c:	e00d      	b.n	803237a <mg_str_to_num+0x5e>
 803235e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8032362:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8032366:	e008      	b.n	803237a <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8032368:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 803236c:	f04f 0300 	mov.w	r3, #0
 8032370:	e003      	b.n	803237a <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8032372:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8032376:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 803237a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 803237e:	f04f 0200 	mov.w	r2, #0
 8032382:	f04f 0300 	mov.w	r3, #0
 8032386:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 803238a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 803238e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8032392:	bf08      	it	eq
 8032394:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8032398:	d105      	bne.n	80323a6 <mg_str_to_num+0x8a>
 803239a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 803239e:	2b08      	cmp	r3, #8
 80323a0:	d001      	beq.n	80323a6 <mg_str_to_num+0x8a>
 80323a2:	2300      	movs	r3, #0
 80323a4:	e1e8      	b.n	8032778 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 80323a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80323a8:	2b00      	cmp	r3, #0
 80323aa:	d12d      	bne.n	8032408 <mg_str_to_num+0xec>
 80323ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80323ae:	2b01      	cmp	r3, #1
 80323b0:	d92a      	bls.n	8032408 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 80323b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80323b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80323b8:	4413      	add	r3, r2
 80323ba:	781b      	ldrb	r3, [r3, #0]
 80323bc:	2b30      	cmp	r3, #48	@ 0x30
 80323be:	d121      	bne.n	8032404 <mg_str_to_num+0xe8>
      i++;
 80323c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80323c4:	3301      	adds	r3, #1
 80323c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80323ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80323cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80323d0:	4413      	add	r3, r2
 80323d2:	781b      	ldrb	r3, [r3, #0]
 80323d4:	2b62      	cmp	r3, #98	@ 0x62
 80323d6:	d00a      	beq.n	80323ee <mg_str_to_num+0xd2>
 80323d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80323da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80323de:	4413      	add	r3, r2
 80323e0:	781b      	ldrb	r3, [r3, #0]
 80323e2:	2b78      	cmp	r3, #120	@ 0x78
 80323e4:	d101      	bne.n	80323ea <mg_str_to_num+0xce>
 80323e6:	2310      	movs	r3, #16
 80323e8:	e002      	b.n	80323f0 <mg_str_to_num+0xd4>
 80323ea:	230a      	movs	r3, #10
 80323ec:	e000      	b.n	80323f0 <mg_str_to_num+0xd4>
 80323ee:	2302      	movs	r3, #2
 80323f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 80323f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80323f4:	2b0a      	cmp	r3, #10
 80323f6:	d007      	beq.n	8032408 <mg_str_to_num+0xec>
 80323f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80323fc:	3301      	adds	r3, #1
 80323fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8032402:	e001      	b.n	8032408 <mg_str_to_num+0xec>
    } else {
      base = 10;
 8032404:	230a      	movs	r3, #10
 8032406:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 8032408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 803240a:	2b10      	cmp	r3, #16
 803240c:	f000 8178 	beq.w	8032700 <mg_str_to_num+0x3e4>
 8032410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8032412:	2b10      	cmp	r3, #16
 8032414:	f300 817d 	bgt.w	8032712 <mg_str_to_num+0x3f6>
 8032418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 803241a:	2b02      	cmp	r3, #2
 803241c:	d052      	beq.n	80324c4 <mg_str_to_num+0x1a8>
 803241e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8032420:	2b0a      	cmp	r3, #10
 8032422:	f000 80cd 	beq.w	80325c0 <mg_str_to_num+0x2a4>
 8032426:	e174      	b.n	8032712 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8032428:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 803242a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 803242e:	4413      	add	r3, r2
 8032430:	781b      	ldrb	r3, [r3, #0]
 8032432:	3b30      	subs	r3, #48	@ 0x30
 8032434:	17da      	asrs	r2, r3, #31
 8032436:	633b      	str	r3, [r7, #48]	@ 0x30
 8032438:	637a      	str	r2, [r7, #52]	@ 0x34
 803243a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 803243e:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 8032442:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8032446:	f04f 0200 	mov.w	r2, #0
 803244a:	f04f 0300 	mov.w	r3, #0
 803244e:	0842      	lsrs	r2, r0, #1
 8032450:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8032454:	084b      	lsrs	r3, r1, #1
 8032456:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 803245a:	4282      	cmp	r2, r0
 803245c:	418b      	sbcs	r3, r1
 803245e:	d201      	bcs.n	8032464 <mg_str_to_num+0x148>
 8032460:	2300      	movs	r3, #0
 8032462:	e189      	b.n	8032778 <mg_str_to_num+0x45c>
        result *= 2;
 8032464:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8032468:	1891      	adds	r1, r2, r2
 803246a:	62b9      	str	r1, [r7, #40]	@ 0x28
 803246c:	415b      	adcs	r3, r3
 803246e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032470:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8032474:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8032478:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 803247c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8032480:	1a85      	subs	r5, r0, r2
 8032482:	eb61 0603 	sbc.w	r6, r1, r3
 8032486:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 803248a:	4295      	cmp	r5, r2
 803248c:	eb76 0303 	sbcs.w	r3, r6, r3
 8032490:	d201      	bcs.n	8032496 <mg_str_to_num+0x17a>
 8032492:	2300      	movs	r3, #0
 8032494:	e170      	b.n	8032778 <mg_str_to_num+0x45c>
        result += digit;
 8032496:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 803249a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 803249e:	1884      	adds	r4, r0, r2
 80324a0:	623c      	str	r4, [r7, #32]
 80324a2:	eb41 0303 	adc.w	r3, r1, r3
 80324a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80324a8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80324ac:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 80324b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80324b4:	3301      	adds	r3, #1
 80324b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80324ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80324be:	3301      	adds	r3, #1
 80324c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 80324c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80324c6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80324ca:	429a      	cmp	r2, r3
 80324cc:	f080 8123 	bcs.w	8032716 <mg_str_to_num+0x3fa>
 80324d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80324d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80324d6:	4413      	add	r3, r2
 80324d8:	781b      	ldrb	r3, [r3, #0]
 80324da:	2b30      	cmp	r3, #48	@ 0x30
 80324dc:	d0a4      	beq.n	8032428 <mg_str_to_num+0x10c>
 80324de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80324e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80324e4:	4413      	add	r3, r2
 80324e6:	781b      	ldrb	r3, [r3, #0]
 80324e8:	2b31      	cmp	r3, #49	@ 0x31
 80324ea:	d09d      	beq.n	8032428 <mg_str_to_num+0x10c>
      }
      break;
 80324ec:	e113      	b.n	8032716 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 80324ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80324f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80324f4:	4413      	add	r3, r2
 80324f6:	781b      	ldrb	r3, [r3, #0]
 80324f8:	3b30      	subs	r3, #48	@ 0x30
 80324fa:	17da      	asrs	r2, r3, #31
 80324fc:	61bb      	str	r3, [r7, #24]
 80324fe:	61fa      	str	r2, [r7, #28]
 8032500:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8032504:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 8032508:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 803250c:	f04f 020a 	mov.w	r2, #10
 8032510:	f04f 0300 	mov.w	r3, #0
 8032514:	f7de fc20 	bl	8010d58 <__aeabi_uldivmod>
 8032518:	4602      	mov	r2, r0
 803251a:	460b      	mov	r3, r1
 803251c:	4610      	mov	r0, r2
 803251e:	4619      	mov	r1, r3
 8032520:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8032524:	4290      	cmp	r0, r2
 8032526:	eb71 0303 	sbcs.w	r3, r1, r3
 803252a:	d201      	bcs.n	8032530 <mg_str_to_num+0x214>
 803252c:	2300      	movs	r3, #0
 803252e:	e123      	b.n	8032778 <mg_str_to_num+0x45c>
        result *= 10;
 8032530:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8032534:	4622      	mov	r2, r4
 8032536:	462b      	mov	r3, r5
 8032538:	f04f 0000 	mov.w	r0, #0
 803253c:	f04f 0100 	mov.w	r1, #0
 8032540:	0099      	lsls	r1, r3, #2
 8032542:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8032546:	0090      	lsls	r0, r2, #2
 8032548:	4602      	mov	r2, r0
 803254a:	460b      	mov	r3, r1
 803254c:	eb12 0804 	adds.w	r8, r2, r4
 8032550:	eb43 0905 	adc.w	r9, r3, r5
 8032554:	eb18 0308 	adds.w	r3, r8, r8
 8032558:	613b      	str	r3, [r7, #16]
 803255a:	eb49 0309 	adc.w	r3, r9, r9
 803255e:	617b      	str	r3, [r7, #20]
 8032560:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8032564:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8032568:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 803256c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8032570:	1a84      	subs	r4, r0, r2
 8032572:	63bc      	str	r4, [r7, #56]	@ 0x38
 8032574:	eb61 0303 	sbc.w	r3, r1, r3
 8032578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 803257a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 803257e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8032582:	4621      	mov	r1, r4
 8032584:	4291      	cmp	r1, r2
 8032586:	4629      	mov	r1, r5
 8032588:	eb71 0303 	sbcs.w	r3, r1, r3
 803258c:	d201      	bcs.n	8032592 <mg_str_to_num+0x276>
 803258e:	2300      	movs	r3, #0
 8032590:	e0f2      	b.n	8032778 <mg_str_to_num+0x45c>
        result += digit;
 8032592:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8032596:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 803259a:	1884      	adds	r4, r0, r2
 803259c:	60bc      	str	r4, [r7, #8]
 803259e:	eb41 0303 	adc.w	r3, r1, r3
 80325a2:	60fb      	str	r3, [r7, #12]
 80325a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80325a8:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 80325ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80325b0:	3301      	adds	r3, #1
 80325b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80325b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80325ba:	3301      	adds	r3, #1
 80325bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80325c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80325c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80325c6:	429a      	cmp	r2, r3
 80325c8:	f080 80a7 	bcs.w	803271a <mg_str_to_num+0x3fe>
 80325cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80325ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80325d2:	4413      	add	r3, r2
 80325d4:	781b      	ldrb	r3, [r3, #0]
 80325d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80325d8:	f240 809f 	bls.w	803271a <mg_str_to_num+0x3fe>
 80325dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80325de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80325e2:	4413      	add	r3, r2
 80325e4:	781b      	ldrb	r3, [r3, #0]
 80325e6:	2b39      	cmp	r3, #57	@ 0x39
 80325e8:	d981      	bls.n	80324ee <mg_str_to_num+0x1d2>
      }
      break;
 80325ea:	e096      	b.n	803271a <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 80325ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80325ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80325f2:	4413      	add	r3, r2
 80325f4:	781b      	ldrb	r3, [r3, #0]
 80325f6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80325fa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80325fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8032600:	d90a      	bls.n	8032618 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8032602:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8032606:	2b39      	cmp	r3, #57	@ 0x39
 8032608:	d806      	bhi.n	8032618 <mg_str_to_num+0x2fc>
 803260a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 803260e:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8032610:	17da      	asrs	r2, r3, #31
 8032612:	643b      	str	r3, [r7, #64]	@ 0x40
 8032614:	647a      	str	r2, [r7, #68]	@ 0x44
 8032616:	e023      	b.n	8032660 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8032618:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 803261c:	2b40      	cmp	r3, #64	@ 0x40
 803261e:	d90a      	bls.n	8032636 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8032620:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8032624:	2b46      	cmp	r3, #70	@ 0x46
 8032626:	d806      	bhi.n	8032636 <mg_str_to_num+0x31a>
 8032628:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 803262c:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 803262e:	17da      	asrs	r2, r3, #31
 8032630:	643b      	str	r3, [r7, #64]	@ 0x40
 8032632:	647a      	str	r2, [r7, #68]	@ 0x44
 8032634:	e014      	b.n	8032660 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 8032636:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 803263a:	2b60      	cmp	r3, #96	@ 0x60
 803263c:	d90a      	bls.n	8032654 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 803263e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8032642:	2b66      	cmp	r3, #102	@ 0x66
 8032644:	d806      	bhi.n	8032654 <mg_str_to_num+0x338>
 8032646:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 803264a:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 803264c:	17da      	asrs	r2, r3, #31
 803264e:	643b      	str	r3, [r7, #64]	@ 0x40
 8032650:	647a      	str	r2, [r7, #68]	@ 0x44
 8032652:	e005      	b.n	8032660 <mg_str_to_num+0x344>
 8032654:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8032658:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 803265c:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8032660:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8032664:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 8032668:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 803266c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8032670:	bf08      	it	eq
 8032672:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8032676:	d04a      	beq.n	803270e <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 8032678:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 803267c:	f04f 0200 	mov.w	r2, #0
 8032680:	f04f 0300 	mov.w	r3, #0
 8032684:	0902      	lsrs	r2, r0, #4
 8032686:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 803268a:	090b      	lsrs	r3, r1, #4
 803268c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8032690:	4282      	cmp	r2, r0
 8032692:	418b      	sbcs	r3, r1
 8032694:	d201      	bcs.n	803269a <mg_str_to_num+0x37e>
 8032696:	2300      	movs	r3, #0
 8032698:	e06e      	b.n	8032778 <mg_str_to_num+0x45c>
        result *= 16;
 803269a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 803269e:	f04f 0200 	mov.w	r2, #0
 80326a2:	f04f 0300 	mov.w	r3, #0
 80326a6:	010b      	lsls	r3, r1, #4
 80326a8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80326ac:	0102      	lsls	r2, r0, #4
 80326ae:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 80326b2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80326b6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80326ba:	ebb0 0a02 	subs.w	sl, r0, r2
 80326be:	eb61 0b03 	sbc.w	fp, r1, r3
 80326c2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80326c6:	4592      	cmp	sl, r2
 80326c8:	eb7b 0303 	sbcs.w	r3, fp, r3
 80326cc:	d201      	bcs.n	80326d2 <mg_str_to_num+0x3b6>
 80326ce:	2300      	movs	r3, #0
 80326d0:	e052      	b.n	8032778 <mg_str_to_num+0x45c>
        result += digit;
 80326d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80326d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80326da:	1884      	adds	r4, r0, r2
 80326dc:	603c      	str	r4, [r7, #0]
 80326de:	eb41 0303 	adc.w	r3, r1, r3
 80326e2:	607b      	str	r3, [r7, #4]
 80326e4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80326e8:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 80326ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80326f0:	3301      	adds	r3, #1
 80326f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80326f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80326fa:	3301      	adds	r3, #1
 80326fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 8032700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8032702:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8032706:	429a      	cmp	r2, r3
 8032708:	f4ff af70 	bcc.w	80325ec <mg_str_to_num+0x2d0>
      }
      break;
 803270c:	e006      	b.n	803271c <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 803270e:	bf00      	nop
      break;
 8032710:	e004      	b.n	803271c <mg_str_to_num+0x400>
    default:
      return false;
 8032712:	2300      	movs	r3, #0
 8032714:	e030      	b.n	8032778 <mg_str_to_num+0x45c>
      break;
 8032716:	bf00      	nop
 8032718:	e000      	b.n	803271c <mg_str_to_num+0x400>
      break;
 803271a:	bf00      	nop
  }
  if (ndigits == 0) return false;
 803271c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8032720:	2b00      	cmp	r3, #0
 8032722:	d101      	bne.n	8032728 <mg_str_to_num+0x40c>
 8032724:	2300      	movs	r3, #0
 8032726:	e027      	b.n	8032778 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 8032728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 803272a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 803272e:	429a      	cmp	r2, r3
 8032730:	d001      	beq.n	8032736 <mg_str_to_num+0x41a>
 8032732:	2300      	movs	r3, #0
 8032734:	e020      	b.n	8032778 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 8032736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 803273a:	2b01      	cmp	r3, #1
 803273c:	d104      	bne.n	8032748 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 803273e:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 8032742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8032744:	701a      	strb	r2, [r3, #0]
 8032746:	e016      	b.n	8032776 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 8032748:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 803274c:	2b02      	cmp	r3, #2
 803274e:	d104      	bne.n	803275a <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 8032750:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8032754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8032756:	801a      	strh	r2, [r3, #0]
 8032758:	e00d      	b.n	8032776 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 803275a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 803275e:	2b04      	cmp	r3, #4
 8032760:	d104      	bne.n	803276c <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 8032762:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8032766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8032768:	601a      	str	r2, [r3, #0]
 803276a:	e004      	b.n	8032776 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 803276c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 803276e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8032772:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 8032776:	2301      	movs	r3, #1
}
 8032778:	4618      	mov	r0, r3
 803277a:	3794      	adds	r7, #148	@ 0x94
 803277c:	46bd      	mov	sp, r7
 803277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08032782 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 8032782:	b480      	push	{r7}
 8032784:	b085      	sub	sp, #20
 8032786:	af00      	add	r7, sp, #0
 8032788:	60f8      	str	r0, [r7, #12]
 803278a:	60b9      	str	r1, [r7, #8]
 803278c:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8032790:	68bb      	ldr	r3, [r7, #8]
 8032792:	2200      	movs	r2, #0
 8032794:	601a      	str	r2, [r3, #0]
 8032796:	68b9      	ldr	r1, [r7, #8]
 8032798:	e9d7 2300 	ldrd	r2, r3, [r7]
 803279c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80327a0:	68b9      	ldr	r1, [r7, #8]
 80327a2:	f04f 0200 	mov.w	r2, #0
 80327a6:	f04f 0300 	mov.w	r3, #0
 80327aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 80327ae:	68bb      	ldr	r3, [r7, #8]
 80327b0:	69ba      	ldr	r2, [r7, #24]
 80327b2:	619a      	str	r2, [r3, #24]
 80327b4:	68bb      	ldr	r3, [r7, #8]
 80327b6:	69fa      	ldr	r2, [r7, #28]
 80327b8:	61da      	str	r2, [r3, #28]
 80327ba:	68bb      	ldr	r3, [r7, #8]
 80327bc:	6a3a      	ldr	r2, [r7, #32]
 80327be:	621a      	str	r2, [r3, #32]
 80327c0:	68fb      	ldr	r3, [r7, #12]
 80327c2:	681a      	ldr	r2, [r3, #0]
 80327c4:	68bb      	ldr	r3, [r7, #8]
 80327c6:	625a      	str	r2, [r3, #36]	@ 0x24
  *head = t;
 80327c8:	68fb      	ldr	r3, [r7, #12]
 80327ca:	68ba      	ldr	r2, [r7, #8]
 80327cc:	601a      	str	r2, [r3, #0]
}
 80327ce:	bf00      	nop
 80327d0:	3714      	adds	r7, #20
 80327d2:	46bd      	mov	sp, r7
 80327d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80327d8:	4770      	bx	lr

080327da <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 80327da:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80327de:	b086      	sub	sp, #24
 80327e0:	af00      	add	r7, sp, #0
 80327e2:	6178      	str	r0, [r7, #20]
 80327e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 80327e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80327ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80327f0:	eb10 0a02 	adds.w	sl, r0, r2
 80327f4:	eb41 0b03 	adc.w	fp, r1, r3
 80327f8:	697b      	ldr	r3, [r7, #20]
 80327fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80327fe:	4592      	cmp	sl, r2
 8032800:	eb7b 0303 	sbcs.w	r3, fp, r3
 8032804:	d206      	bcs.n	8032814 <mg_timer_expired+0x3a>
 8032806:	6979      	ldr	r1, [r7, #20]
 8032808:	f04f 0200 	mov.w	r2, #0
 803280c:	f04f 0300 	mov.w	r3, #0
 8032810:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8032814:	697b      	ldr	r3, [r7, #20]
 8032816:	e9d3 2300 	ldrd	r2, r3, [r3]
 803281a:	4313      	orrs	r3, r2
 803281c:	d10d      	bne.n	803283a <mg_timer_expired+0x60>
 803281e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8032822:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8032826:	1886      	adds	r6, r0, r2
 8032828:	603e      	str	r6, [r7, #0]
 803282a:	eb41 0303 	adc.w	r3, r1, r3
 803282e:	607b      	str	r3, [r7, #4]
 8032830:	697b      	ldr	r3, [r7, #20]
 8032832:	e9d7 1200 	ldrd	r1, r2, [r7]
 8032836:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 803283a:	697b      	ldr	r3, [r7, #20]
 803283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032840:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8032844:	4290      	cmp	r0, r2
 8032846:	eb71 0303 	sbcs.w	r3, r1, r3
 803284a:	d201      	bcs.n	8032850 <mg_timer_expired+0x76>
 803284c:	2300      	movs	r3, #0
 803284e:	e022      	b.n	8032896 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8032850:	697b      	ldr	r3, [r7, #20]
 8032852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8032856:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 803285a:	ebb0 0802 	subs.w	r8, r0, r2
 803285e:	eb61 0903 	sbc.w	r9, r1, r3
 8032862:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8032866:	4542      	cmp	r2, r8
 8032868:	eb73 0309 	sbcs.w	r3, r3, r9
 803286c:	d207      	bcs.n	803287e <mg_timer_expired+0xa4>
 803286e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8032872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8032876:	1884      	adds	r4, r0, r2
 8032878:	eb41 0503 	adc.w	r5, r1, r3
 803287c:	e007      	b.n	803288e <mg_timer_expired+0xb4>
 803287e:	697b      	ldr	r3, [r7, #20]
 8032880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8032884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8032888:	1884      	adds	r4, r0, r2
 803288a:	eb41 0503 	adc.w	r5, r1, r3
 803288e:	697b      	ldr	r3, [r7, #20]
 8032890:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8032894:	2301      	movs	r3, #1
}
 8032896:	4618      	mov	r0, r3
 8032898:	3718      	adds	r7, #24
 803289a:	46bd      	mov	sp, r7
 803289c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80328a0:	4770      	bx	lr

080328a2 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 80328a2:	b590      	push	{r4, r7, lr}
 80328a4:	b08b      	sub	sp, #44	@ 0x2c
 80328a6:	af02      	add	r7, sp, #8
 80328a8:	60f8      	str	r0, [r7, #12]
 80328aa:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 80328ae:	68fb      	ldr	r3, [r7, #12]
 80328b0:	681b      	ldr	r3, [r3, #0]
 80328b2:	61fb      	str	r3, [r7, #28]
 80328b4:	e054      	b.n	8032960 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80328b6:	69fb      	ldr	r3, [r7, #28]
 80328b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80328bc:	4313      	orrs	r3, r2
 80328be:	d10d      	bne.n	80328dc <mg_timer_poll+0x3a>
 80328c0:	69fb      	ldr	r3, [r7, #28]
 80328c2:	699b      	ldr	r3, [r3, #24]
 80328c4:	f003 0302 	and.w	r3, r3, #2
 80328c8:	2b00      	cmp	r3, #0
 80328ca:	d007      	beq.n	80328dc <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 80328cc:	69fb      	ldr	r3, [r7, #28]
 80328ce:	699b      	ldr	r3, [r3, #24]
 80328d0:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80328d4:	2b00      	cmp	r3, #0
 80328d6:	d101      	bne.n	80328dc <mg_timer_poll+0x3a>
 80328d8:	2301      	movs	r3, #1
 80328da:	e000      	b.n	80328de <mg_timer_poll+0x3c>
 80328dc:	2300      	movs	r3, #0
 80328de:	76fb      	strb	r3, [r7, #27]
 80328e0:	7efb      	ldrb	r3, [r7, #27]
 80328e2:	f003 0301 	and.w	r3, r3, #1
 80328e6:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 80328e8:	69fb      	ldr	r3, [r7, #28]
 80328ea:	f103 0410 	add.w	r4, r3, #16
 80328ee:	69fb      	ldr	r3, [r7, #28]
 80328f0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80328f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80328f8:	e9cd 2300 	strd	r2, r3, [sp]
 80328fc:	4602      	mov	r2, r0
 80328fe:	460b      	mov	r3, r1
 8032900:	4620      	mov	r0, r4
 8032902:	f7ff ff6a 	bl	80327da <mg_timer_expired>
 8032906:	4603      	mov	r3, r0
 8032908:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 803290a:	69fb      	ldr	r3, [r7, #28]
 803290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 803290e:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8032910:	7efb      	ldrb	r3, [r7, #27]
 8032912:	f083 0301 	eor.w	r3, r3, #1
 8032916:	b2db      	uxtb	r3, r3
 8032918:	2b00      	cmp	r3, #0
 803291a:	d005      	beq.n	8032928 <mg_timer_poll+0x86>
 803291c:	7ebb      	ldrb	r3, [r7, #26]
 803291e:	f083 0301 	eor.w	r3, r3, #1
 8032922:	b2db      	uxtb	r3, r3
 8032924:	2b00      	cmp	r3, #0
 8032926:	d118      	bne.n	803295a <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8032928:	69fb      	ldr	r3, [r7, #28]
 803292a:	699b      	ldr	r3, [r3, #24]
 803292c:	f003 0301 	and.w	r3, r3, #1
 8032930:	2b00      	cmp	r3, #0
 8032932:	d105      	bne.n	8032940 <mg_timer_poll+0x9e>
 8032934:	69fb      	ldr	r3, [r7, #28]
 8032936:	699b      	ldr	r3, [r3, #24]
 8032938:	f003 0304 	and.w	r3, r3, #4
 803293c:	2b00      	cmp	r3, #0
 803293e:	d105      	bne.n	803294c <mg_timer_poll+0xaa>
      t->fn(t->arg);
 8032940:	69fb      	ldr	r3, [r7, #28]
 8032942:	69db      	ldr	r3, [r3, #28]
 8032944:	69fa      	ldr	r2, [r7, #28]
 8032946:	6a12      	ldr	r2, [r2, #32]
 8032948:	4610      	mov	r0, r2
 803294a:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 803294c:	69fb      	ldr	r3, [r7, #28]
 803294e:	699b      	ldr	r3, [r3, #24]
 8032950:	f043 0204 	orr.w	r2, r3, #4
 8032954:	69fb      	ldr	r3, [r7, #28]
 8032956:	619a      	str	r2, [r3, #24]
 8032958:	e000      	b.n	803295c <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 803295a:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 803295c:	697b      	ldr	r3, [r7, #20]
 803295e:	61fb      	str	r3, [r7, #28]
 8032960:	69fb      	ldr	r3, [r7, #28]
 8032962:	2b00      	cmp	r3, #0
 8032964:	d1a7      	bne.n	80328b6 <mg_timer_poll+0x14>
  }
}
 8032966:	bf00      	nop
 8032968:	bf00      	nop
 803296a:	3724      	adds	r7, #36	@ 0x24
 803296c:	46bd      	mov	sp, r7
 803296e:	bd90      	pop	{r4, r7, pc}

08032970 <mg_tls_handshake>:
#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
  (void) opts;
  mg_error(c, "TLS is not enabled");
}
void mg_tls_handshake(struct mg_connection *c) {
 8032970:	b480      	push	{r7}
 8032972:	b083      	sub	sp, #12
 8032974:	af00      	add	r7, sp, #0
 8032976:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8032978:	bf00      	nop
 803297a:	370c      	adds	r7, #12
 803297c:	46bd      	mov	sp, r7
 803297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032982:	4770      	bx	lr

08032984 <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 8032984:	b480      	push	{r7}
 8032986:	b083      	sub	sp, #12
 8032988:	af00      	add	r7, sp, #0
 803298a:	6078      	str	r0, [r7, #4]
  (void) c;
}
 803298c:	bf00      	nop
 803298e:	370c      	adds	r7, #12
 8032990:	46bd      	mov	sp, r7
 8032992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032996:	4770      	bx	lr

08032998 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8032998:	b480      	push	{r7}
 803299a:	b085      	sub	sp, #20
 803299c:	af00      	add	r7, sp, #0
 803299e:	60f8      	str	r0, [r7, #12]
 80329a0:	60b9      	str	r1, [r7, #8]
 80329a2:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 80329a4:	68fb      	ldr	r3, [r7, #12]
 80329a6:	2b00      	cmp	r3, #0
 80329a8:	d005      	beq.n	80329b6 <mg_tls_recv+0x1e>
 80329aa:	68bb      	ldr	r3, [r7, #8]
 80329ac:	2b00      	cmp	r3, #0
 80329ae:	d002      	beq.n	80329b6 <mg_tls_recv+0x1e>
 80329b0:	687b      	ldr	r3, [r7, #4]
 80329b2:	2b00      	cmp	r3, #0
 80329b4:	d101      	bne.n	80329ba <mg_tls_recv+0x22>
 80329b6:	2300      	movs	r3, #0
 80329b8:	e001      	b.n	80329be <mg_tls_recv+0x26>
 80329ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80329be:	4618      	mov	r0, r3
 80329c0:	3714      	adds	r7, #20
 80329c2:	46bd      	mov	sp, r7
 80329c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80329c8:	4770      	bx	lr

080329ca <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 80329ca:	b480      	push	{r7}
 80329cc:	b085      	sub	sp, #20
 80329ce:	af00      	add	r7, sp, #0
 80329d0:	60f8      	str	r0, [r7, #12]
 80329d2:	60b9      	str	r1, [r7, #8]
 80329d4:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 80329d6:	68fb      	ldr	r3, [r7, #12]
 80329d8:	2b00      	cmp	r3, #0
 80329da:	d005      	beq.n	80329e8 <mg_tls_send+0x1e>
 80329dc:	68bb      	ldr	r3, [r7, #8]
 80329de:	2b00      	cmp	r3, #0
 80329e0:	d002      	beq.n	80329e8 <mg_tls_send+0x1e>
 80329e2:	687b      	ldr	r3, [r7, #4]
 80329e4:	2b00      	cmp	r3, #0
 80329e6:	d101      	bne.n	80329ec <mg_tls_send+0x22>
 80329e8:	2300      	movs	r3, #0
 80329ea:	e001      	b.n	80329f0 <mg_tls_send+0x26>
 80329ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80329f0:	4618      	mov	r0, r3
 80329f2:	3714      	adds	r7, #20
 80329f4:	46bd      	mov	sp, r7
 80329f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80329fa:	4770      	bx	lr

080329fc <mg_tls_pending>:
size_t mg_tls_pending(struct mg_connection *c) {
 80329fc:	b480      	push	{r7}
 80329fe:	b083      	sub	sp, #12
 8032a00:	af00      	add	r7, sp, #0
 8032a02:	6078      	str	r0, [r7, #4]
  (void) c;
  return 0;
 8032a04:	2300      	movs	r3, #0
}
 8032a06:	4618      	mov	r0, r3
 8032a08:	370c      	adds	r7, #12
 8032a0a:	46bd      	mov	sp, r7
 8032a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a10:	4770      	bx	lr

08032a12 <mg_tls_ctx_init>:
void mg_tls_ctx_init(struct mg_mgr *mgr) {
 8032a12:	b480      	push	{r7}
 8032a14:	b083      	sub	sp, #12
 8032a16:	af00      	add	r7, sp, #0
 8032a18:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 8032a1a:	bf00      	nop
 8032a1c:	370c      	adds	r7, #12
 8032a1e:	46bd      	mov	sp, r7
 8032a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a24:	4770      	bx	lr
	...

08032a28 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8032a28:	b580      	push	{r7, lr}
 8032a2a:	b082      	sub	sp, #8
 8032a2c:	af00      	add	r7, sp, #0
 8032a2e:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8032a30:	2204      	movs	r2, #4
 8032a32:	491b      	ldr	r1, [pc, #108]	@ (8032aa0 <mg_url_is_ssl+0x78>)
 8032a34:	6878      	ldr	r0, [r7, #4]
 8032a36:	f003 fb88 	bl	803614a <strncmp>
 8032a3a:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8032a3c:	2b00      	cmp	r3, #0
 8032a3e:	d027      	beq.n	8032a90 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8032a40:	2206      	movs	r2, #6
 8032a42:	4918      	ldr	r1, [pc, #96]	@ (8032aa4 <mg_url_is_ssl+0x7c>)
 8032a44:	6878      	ldr	r0, [r7, #4]
 8032a46:	f003 fb80 	bl	803614a <strncmp>
 8032a4a:	4603      	mov	r3, r0
 8032a4c:	2b00      	cmp	r3, #0
 8032a4e:	d01f      	beq.n	8032a90 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8032a50:	2206      	movs	r2, #6
 8032a52:	4915      	ldr	r1, [pc, #84]	@ (8032aa8 <mg_url_is_ssl+0x80>)
 8032a54:	6878      	ldr	r0, [r7, #4]
 8032a56:	f003 fb78 	bl	803614a <strncmp>
 8032a5a:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8032a5c:	2b00      	cmp	r3, #0
 8032a5e:	d017      	beq.n	8032a90 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8032a60:	2204      	movs	r2, #4
 8032a62:	4912      	ldr	r1, [pc, #72]	@ (8032aac <mg_url_is_ssl+0x84>)
 8032a64:	6878      	ldr	r0, [r7, #4]
 8032a66:	f003 fb70 	bl	803614a <strncmp>
 8032a6a:	4603      	mov	r3, r0
 8032a6c:	2b00      	cmp	r3, #0
 8032a6e:	d00f      	beq.n	8032a90 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8032a70:	2204      	movs	r2, #4
 8032a72:	490f      	ldr	r1, [pc, #60]	@ (8032ab0 <mg_url_is_ssl+0x88>)
 8032a74:	6878      	ldr	r0, [r7, #4]
 8032a76:	f003 fb68 	bl	803614a <strncmp>
 8032a7a:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8032a7c:	2b00      	cmp	r3, #0
 8032a7e:	d007      	beq.n	8032a90 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8032a80:	2205      	movs	r2, #5
 8032a82:	490c      	ldr	r1, [pc, #48]	@ (8032ab4 <mg_url_is_ssl+0x8c>)
 8032a84:	6878      	ldr	r0, [r7, #4]
 8032a86:	f003 fb60 	bl	803614a <strncmp>
 8032a8a:	4603      	mov	r3, r0
 8032a8c:	2b00      	cmp	r3, #0
 8032a8e:	d101      	bne.n	8032a94 <mg_url_is_ssl+0x6c>
 8032a90:	2301      	movs	r3, #1
 8032a92:	e000      	b.n	8032a96 <mg_url_is_ssl+0x6e>
 8032a94:	2300      	movs	r3, #0
}
 8032a96:	4618      	mov	r0, r3
 8032a98:	3708      	adds	r7, #8
 8032a9a:	46bd      	mov	sp, r7
 8032a9c:	bd80      	pop	{r7, pc}
 8032a9e:	bf00      	nop
 8032aa0:	08043778 	.word	0x08043778
 8032aa4:	08043780 	.word	0x08043780
 8032aa8:	08043788 	.word	0x08043788
 8032aac:	08043790 	.word	0x08043790
 8032ab0:	08043798 	.word	0x08043798
 8032ab4:	080437a0 	.word	0x080437a0

08032ab8 <urlparse>:

static struct url urlparse(const char *url) {
 8032ab8:	b5b0      	push	{r4, r5, r7, lr}
 8032aba:	b08a      	sub	sp, #40	@ 0x28
 8032abc:	af00      	add	r7, sp, #0
 8032abe:	6078      	str	r0, [r7, #4]
 8032ac0:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8032ac2:	f107 0308 	add.w	r3, r7, #8
 8032ac6:	221c      	movs	r2, #28
 8032ac8:	2100      	movs	r1, #0
 8032aca:	4618      	mov	r0, r3
 8032acc:	f003 fb08 	bl	80360e0 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8032ad0:	2300      	movs	r3, #0
 8032ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8032ad4:	e05b      	b.n	8032b8e <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8032ad6:	683a      	ldr	r2, [r7, #0]
 8032ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032ada:	4413      	add	r3, r2
 8032adc:	781b      	ldrb	r3, [r3, #0]
 8032ade:	2b2f      	cmp	r3, #47	@ 0x2f
 8032ae0:	d112      	bne.n	8032b08 <urlparse+0x50>
 8032ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032ae4:	2b00      	cmp	r3, #0
 8032ae6:	d00f      	beq.n	8032b08 <urlparse+0x50>
 8032ae8:	697b      	ldr	r3, [r7, #20]
 8032aea:	2b00      	cmp	r3, #0
 8032aec:	d10c      	bne.n	8032b08 <urlparse+0x50>
 8032aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032af0:	3b01      	subs	r3, #1
 8032af2:	683a      	ldr	r2, [r7, #0]
 8032af4:	4413      	add	r3, r2
 8032af6:	781b      	ldrb	r3, [r3, #0]
 8032af8:	2b2f      	cmp	r3, #47	@ 0x2f
 8032afa:	d105      	bne.n	8032b08 <urlparse+0x50>
      u.host = i + 1;
 8032afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032afe:	3301      	adds	r3, #1
 8032b00:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8032b02:	2300      	movs	r3, #0
 8032b04:	61bb      	str	r3, [r7, #24]
 8032b06:	e03f      	b.n	8032b88 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8032b08:	683a      	ldr	r2, [r7, #0]
 8032b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032b0c:	4413      	add	r3, r2
 8032b0e:	781b      	ldrb	r3, [r3, #0]
 8032b10:	2b5d      	cmp	r3, #93	@ 0x5d
 8032b12:	d102      	bne.n	8032b1a <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8032b14:	2300      	movs	r3, #0
 8032b16:	61bb      	str	r3, [r7, #24]
 8032b18:	e036      	b.n	8032b88 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8032b1a:	683a      	ldr	r2, [r7, #0]
 8032b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032b1e:	4413      	add	r3, r2
 8032b20:	781b      	ldrb	r3, [r3, #0]
 8032b22:	2b3a      	cmp	r3, #58	@ 0x3a
 8032b24:	d109      	bne.n	8032b3a <urlparse+0x82>
 8032b26:	69bb      	ldr	r3, [r7, #24]
 8032b28:	2b00      	cmp	r3, #0
 8032b2a:	d106      	bne.n	8032b3a <urlparse+0x82>
 8032b2c:	69fb      	ldr	r3, [r7, #28]
 8032b2e:	2b00      	cmp	r3, #0
 8032b30:	d103      	bne.n	8032b3a <urlparse+0x82>
      u.port = i + 1;
 8032b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032b34:	3301      	adds	r3, #1
 8032b36:	61bb      	str	r3, [r7, #24]
 8032b38:	e026      	b.n	8032b88 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8032b3a:	683a      	ldr	r2, [r7, #0]
 8032b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032b3e:	4413      	add	r3, r2
 8032b40:	781b      	ldrb	r3, [r3, #0]
 8032b42:	2b40      	cmp	r3, #64	@ 0x40
 8032b44:	d112      	bne.n	8032b6c <urlparse+0xb4>
 8032b46:	68fb      	ldr	r3, [r7, #12]
 8032b48:	2b00      	cmp	r3, #0
 8032b4a:	d10f      	bne.n	8032b6c <urlparse+0xb4>
 8032b4c:	693b      	ldr	r3, [r7, #16]
 8032b4e:	2b00      	cmp	r3, #0
 8032b50:	d10c      	bne.n	8032b6c <urlparse+0xb4>
 8032b52:	69fb      	ldr	r3, [r7, #28]
 8032b54:	2b00      	cmp	r3, #0
 8032b56:	d109      	bne.n	8032b6c <urlparse+0xb4>
      u.user = u.host;
 8032b58:	697b      	ldr	r3, [r7, #20]
 8032b5a:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8032b5c:	69bb      	ldr	r3, [r7, #24]
 8032b5e:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8032b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032b62:	3301      	adds	r3, #1
 8032b64:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8032b66:	2300      	movs	r3, #0
 8032b68:	61bb      	str	r3, [r7, #24]
 8032b6a:	e00d      	b.n	8032b88 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8032b6c:	683a      	ldr	r2, [r7, #0]
 8032b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032b70:	4413      	add	r3, r2
 8032b72:	781b      	ldrb	r3, [r3, #0]
 8032b74:	2b2f      	cmp	r3, #47	@ 0x2f
 8032b76:	d107      	bne.n	8032b88 <urlparse+0xd0>
 8032b78:	697b      	ldr	r3, [r7, #20]
 8032b7a:	2b00      	cmp	r3, #0
 8032b7c:	d004      	beq.n	8032b88 <urlparse+0xd0>
 8032b7e:	69fb      	ldr	r3, [r7, #28]
 8032b80:	2b00      	cmp	r3, #0
 8032b82:	d101      	bne.n	8032b88 <urlparse+0xd0>
      u.uri = i;
 8032b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032b86:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8032b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032b8a:	3301      	adds	r3, #1
 8032b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8032b8e:	683a      	ldr	r2, [r7, #0]
 8032b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032b92:	4413      	add	r3, r2
 8032b94:	781b      	ldrb	r3, [r3, #0]
 8032b96:	2b00      	cmp	r3, #0
 8032b98:	d19d      	bne.n	8032ad6 <urlparse+0x1e>
    }
  }
  u.end = i;
 8032b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032b9c:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8032b9e:	687b      	ldr	r3, [r7, #4]
 8032ba0:	461d      	mov	r5, r3
 8032ba2:	f107 0408 	add.w	r4, r7, #8
 8032ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8032ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8032baa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8032bae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8032bb2:	6878      	ldr	r0, [r7, #4]
 8032bb4:	3728      	adds	r7, #40	@ 0x28
 8032bb6:	46bd      	mov	sp, r7
 8032bb8:	bdb0      	pop	{r4, r5, r7, pc}

08032bba <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 8032bba:	b580      	push	{r7, lr}
 8032bbc:	b08c      	sub	sp, #48	@ 0x30
 8032bbe:	af00      	add	r7, sp, #0
 8032bc0:	6078      	str	r0, [r7, #4]
 8032bc2:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8032bc4:	f107 0310 	add.w	r3, r7, #16
 8032bc8:	6839      	ldr	r1, [r7, #0]
 8032bca:	4618      	mov	r0, r3
 8032bcc:	f7ff ff74 	bl	8032ab8 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8032bd0:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 8032bd2:	2b00      	cmp	r3, #0
 8032bd4:	d004      	beq.n	8032be0 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 8032bd6:	6a3a      	ldr	r2, [r7, #32]
 8032bd8:	69fb      	ldr	r3, [r7, #28]
 8032bda:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 8032bdc:	3b01      	subs	r3, #1
 8032bde:	e009      	b.n	8032bf4 <mg_url_host+0x3a>
 8032be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 8032be2:	2b00      	cmp	r3, #0
 8032be4:	d003      	beq.n	8032bee <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 8032be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8032be8:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 8032bea:	1ad3      	subs	r3, r2, r3
 8032bec:	e002      	b.n	8032bf4 <mg_url_host+0x3a>
 8032bee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8032bf0:	69fb      	ldr	r3, [r7, #28]
 8032bf2:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8032bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 8032bf6:	69fb      	ldr	r3, [r7, #28]
 8032bf8:	683a      	ldr	r2, [r7, #0]
 8032bfa:	18d1      	adds	r1, r2, r3
 8032bfc:	f107 0308 	add.w	r3, r7, #8
 8032c00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032c02:	4618      	mov	r0, r3
 8032c04:	f7ff f983 	bl	8031f0e <mg_str_n>
  return s;
 8032c08:	687b      	ldr	r3, [r7, #4]
 8032c0a:	461a      	mov	r2, r3
 8032c0c:	f107 0308 	add.w	r3, r7, #8
 8032c10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8032c14:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8032c18:	6878      	ldr	r0, [r7, #4]
 8032c1a:	3730      	adds	r7, #48	@ 0x30
 8032c1c:	46bd      	mov	sp, r7
 8032c1e:	bd80      	pop	{r7, pc}

08032c20 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8032c20:	b580      	push	{r7, lr}
 8032c22:	b08a      	sub	sp, #40	@ 0x28
 8032c24:	af00      	add	r7, sp, #0
 8032c26:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8032c28:	f107 0308 	add.w	r3, r7, #8
 8032c2c:	6879      	ldr	r1, [r7, #4]
 8032c2e:	4618      	mov	r0, r3
 8032c30:	f7ff ff42 	bl	8032ab8 <urlparse>
  unsigned short port = 0;
 8032c34:	2300      	movs	r3, #0
 8032c36:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8032c38:	2205      	movs	r2, #5
 8032c3a:	4925      	ldr	r1, [pc, #148]	@ (8032cd0 <mg_url_port+0xb0>)
 8032c3c:	6878      	ldr	r0, [r7, #4]
 8032c3e:	f003 fa84 	bl	803614a <strncmp>
 8032c42:	4603      	mov	r3, r0
 8032c44:	2b00      	cmp	r3, #0
 8032c46:	d007      	beq.n	8032c58 <mg_url_port+0x38>
 8032c48:	2203      	movs	r2, #3
 8032c4a:	4922      	ldr	r1, [pc, #136]	@ (8032cd4 <mg_url_port+0xb4>)
 8032c4c:	6878      	ldr	r0, [r7, #4]
 8032c4e:	f003 fa7c 	bl	803614a <strncmp>
 8032c52:	4603      	mov	r3, r0
 8032c54:	2b00      	cmp	r3, #0
 8032c56:	d101      	bne.n	8032c5c <mg_url_port+0x3c>
 8032c58:	2350      	movs	r3, #80	@ 0x50
 8032c5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8032c5c:	2204      	movs	r2, #4
 8032c5e:	491e      	ldr	r1, [pc, #120]	@ (8032cd8 <mg_url_port+0xb8>)
 8032c60:	6878      	ldr	r0, [r7, #4]
 8032c62:	f003 fa72 	bl	803614a <strncmp>
 8032c66:	4603      	mov	r3, r0
 8032c68:	2b00      	cmp	r3, #0
 8032c6a:	d007      	beq.n	8032c7c <mg_url_port+0x5c>
 8032c6c:	2206      	movs	r2, #6
 8032c6e:	491b      	ldr	r1, [pc, #108]	@ (8032cdc <mg_url_port+0xbc>)
 8032c70:	6878      	ldr	r0, [r7, #4]
 8032c72:	f003 fa6a 	bl	803614a <strncmp>
 8032c76:	4603      	mov	r3, r0
 8032c78:	2b00      	cmp	r3, #0
 8032c7a:	d102      	bne.n	8032c82 <mg_url_port+0x62>
    port = 443;
 8032c7c:	f240 13bb 	movw	r3, #443	@ 0x1bb
 8032c80:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8032c82:	2205      	movs	r2, #5
 8032c84:	4916      	ldr	r1, [pc, #88]	@ (8032ce0 <mg_url_port+0xc0>)
 8032c86:	6878      	ldr	r0, [r7, #4]
 8032c88:	f003 fa5f 	bl	803614a <strncmp>
 8032c8c:	4603      	mov	r3, r0
 8032c8e:	2b00      	cmp	r3, #0
 8032c90:	d102      	bne.n	8032c98 <mg_url_port+0x78>
 8032c92:	f240 735b 	movw	r3, #1883	@ 0x75b
 8032c96:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8032c98:	2206      	movs	r2, #6
 8032c9a:	4912      	ldr	r1, [pc, #72]	@ (8032ce4 <mg_url_port+0xc4>)
 8032c9c:	6878      	ldr	r0, [r7, #4]
 8032c9e:	f003 fa54 	bl	803614a <strncmp>
 8032ca2:	4603      	mov	r3, r0
 8032ca4:	2b00      	cmp	r3, #0
 8032ca6:	d102      	bne.n	8032cae <mg_url_port+0x8e>
 8032ca8:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8032cac:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8032cae:	69bb      	ldr	r3, [r7, #24]
 8032cb0:	2b00      	cmp	r3, #0
 8032cb2:	d007      	beq.n	8032cc4 <mg_url_port+0xa4>
 8032cb4:	69bb      	ldr	r3, [r7, #24]
 8032cb6:	687a      	ldr	r2, [r7, #4]
 8032cb8:	4413      	add	r3, r2
 8032cba:	4618      	mov	r0, r3
 8032cbc:	f000 fcda 	bl	8033674 <atoi>
 8032cc0:	4603      	mov	r3, r0
 8032cc2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8032cc4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8032cc6:	4618      	mov	r0, r3
 8032cc8:	3728      	adds	r7, #40	@ 0x28
 8032cca:	46bd      	mov	sp, r7
 8032ccc:	bd80      	pop	{r7, pc}
 8032cce:	bf00      	nop
 8032cd0:	080437a8 	.word	0x080437a8
 8032cd4:	080437b0 	.word	0x080437b0
 8032cd8:	08043778 	.word	0x08043778
 8032cdc:	08043780 	.word	0x08043780
 8032ce0:	080437b4 	.word	0x080437b4
 8032ce4:	08043788 	.word	0x08043788

08032ce8 <mg_bzero>:
#endif


// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8032ce8:	b480      	push	{r7}
 8032cea:	b083      	sub	sp, #12
 8032cec:	af00      	add	r7, sp, #0
 8032cee:	6078      	str	r0, [r7, #4]
 8032cf0:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8032cf2:	687b      	ldr	r3, [r7, #4]
 8032cf4:	2b00      	cmp	r3, #0
 8032cf6:	d00a      	beq.n	8032d0e <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8032cf8:	e004      	b.n	8032d04 <mg_bzero+0x1c>
 8032cfa:	687b      	ldr	r3, [r7, #4]
 8032cfc:	1c5a      	adds	r2, r3, #1
 8032cfe:	607a      	str	r2, [r7, #4]
 8032d00:	2200      	movs	r2, #0
 8032d02:	701a      	strb	r2, [r3, #0]
 8032d04:	683b      	ldr	r3, [r7, #0]
 8032d06:	1e5a      	subs	r2, r3, #1
 8032d08:	603a      	str	r2, [r7, #0]
 8032d0a:	2b00      	cmp	r3, #0
 8032d0c:	d1f5      	bne.n	8032cfa <mg_bzero+0x12>
  }
}
 8032d0e:	bf00      	nop
 8032d10:	370c      	adds	r7, #12
 8032d12:	46bd      	mov	sp, r7
 8032d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d18:	4770      	bx	lr

08032d1a <mg_random>:

#if MG_ENABLE_CUSTOM_RANDOM
#else
void mg_random(void *buf, size_t len) {
 8032d1a:	b580      	push	{r7, lr}
 8032d1c:	b084      	sub	sp, #16
 8032d1e:	af00      	add	r7, sp, #0
 8032d20:	6078      	str	r0, [r7, #4]
 8032d22:	6039      	str	r1, [r7, #0]
  bool done = false;
 8032d24:	2300      	movs	r3, #0
 8032d26:	72fb      	strb	r3, [r7, #11]
  unsigned char *p = (unsigned char *) buf;
 8032d28:	687b      	ldr	r3, [r7, #4]
 8032d2a:	60fb      	str	r3, [r7, #12]
    if (fread(buf, 1, len, fp) == len) done = true;
    fclose(fp);
  }
#endif
  // If everything above did not work, fallback to a pseudo random generator
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 8032d2c:	e007      	b.n	8032d3e <mg_random+0x24>
 8032d2e:	f002 fc91 	bl	8035654 <rand>
 8032d32:	4601      	mov	r1, r0
 8032d34:	68fb      	ldr	r3, [r7, #12]
 8032d36:	1c5a      	adds	r2, r3, #1
 8032d38:	60fa      	str	r2, [r7, #12]
 8032d3a:	b2ca      	uxtb	r2, r1
 8032d3c:	701a      	strb	r2, [r3, #0]
 8032d3e:	7afb      	ldrb	r3, [r7, #11]
 8032d40:	f083 0301 	eor.w	r3, r3, #1
 8032d44:	b2db      	uxtb	r3, r3
 8032d46:	2b00      	cmp	r3, #0
 8032d48:	d004      	beq.n	8032d54 <mg_random+0x3a>
 8032d4a:	683b      	ldr	r3, [r7, #0]
 8032d4c:	1e5a      	subs	r2, r3, #1
 8032d4e:	603a      	str	r2, [r7, #0]
 8032d50:	2b00      	cmp	r3, #0
 8032d52:	d1ec      	bne.n	8032d2e <mg_random+0x14>
}
 8032d54:	bf00      	nop
 8032d56:	3710      	adds	r7, #16
 8032d58:	46bd      	mov	sp, r7
 8032d5a:	bd80      	pop	{r7, pc}

08032d5c <mg_random_str>:
#endif

char *mg_random_str(char *buf, size_t len) {
 8032d5c:	b580      	push	{r7, lr}
 8032d5e:	b084      	sub	sp, #16
 8032d60:	af00      	add	r7, sp, #0
 8032d62:	6078      	str	r0, [r7, #4]
 8032d64:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 8032d66:	6839      	ldr	r1, [r7, #0]
 8032d68:	6878      	ldr	r0, [r7, #4]
 8032d6a:	f7ff ffd6 	bl	8032d1a <mg_random>
  for (i = 0; i < len; i++) {
 8032d6e:	2300      	movs	r3, #0
 8032d70:	60fb      	str	r3, [r7, #12]
 8032d72:	e02d      	b.n	8032dd0 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8032d74:	687a      	ldr	r2, [r7, #4]
 8032d76:	68fb      	ldr	r3, [r7, #12]
 8032d78:	4413      	add	r3, r2
 8032d7a:	781a      	ldrb	r2, [r3, #0]
 8032d7c:	0853      	lsrs	r3, r2, #1
 8032d7e:	4919      	ldr	r1, [pc, #100]	@ (8032de4 <mg_random_str+0x88>)
 8032d80:	fba1 1303 	umull	r1, r3, r1, r3
 8032d84:	0919      	lsrs	r1, r3, #4
 8032d86:	460b      	mov	r3, r1
 8032d88:	015b      	lsls	r3, r3, #5
 8032d8a:	1a5b      	subs	r3, r3, r1
 8032d8c:	005b      	lsls	r3, r3, #1
 8032d8e:	1ad3      	subs	r3, r2, r3
 8032d90:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8032d92:	683b      	ldr	r3, [r7, #0]
 8032d94:	3b01      	subs	r3, #1
 8032d96:	68fa      	ldr	r2, [r7, #12]
 8032d98:	429a      	cmp	r2, r3
 8032d9a:	d011      	beq.n	8032dc0 <mg_random_str+0x64>
 8032d9c:	7afb      	ldrb	r3, [r7, #11]
 8032d9e:	2b19      	cmp	r3, #25
 8032da0:	d803      	bhi.n	8032daa <mg_random_str+0x4e>
 8032da2:	7afb      	ldrb	r3, [r7, #11]
 8032da4:	3361      	adds	r3, #97	@ 0x61
 8032da6:	b2db      	uxtb	r3, r3
 8032da8:	e00b      	b.n	8032dc2 <mg_random_str+0x66>
 8032daa:	7afb      	ldrb	r3, [r7, #11]
 8032dac:	2b33      	cmp	r3, #51	@ 0x33
 8032dae:	d803      	bhi.n	8032db8 <mg_random_str+0x5c>
 8032db0:	7afb      	ldrb	r3, [r7, #11]
 8032db2:	3327      	adds	r3, #39	@ 0x27
 8032db4:	b2db      	uxtb	r3, r3
 8032db6:	e004      	b.n	8032dc2 <mg_random_str+0x66>
 8032db8:	7afb      	ldrb	r3, [r7, #11]
 8032dba:	3b04      	subs	r3, #4
 8032dbc:	b2db      	uxtb	r3, r3
 8032dbe:	e000      	b.n	8032dc2 <mg_random_str+0x66>
 8032dc0:	2300      	movs	r3, #0
 8032dc2:	6879      	ldr	r1, [r7, #4]
 8032dc4:	68fa      	ldr	r2, [r7, #12]
 8032dc6:	440a      	add	r2, r1
 8032dc8:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 8032dca:	68fb      	ldr	r3, [r7, #12]
 8032dcc:	3301      	adds	r3, #1
 8032dce:	60fb      	str	r3, [r7, #12]
 8032dd0:	68fa      	ldr	r2, [r7, #12]
 8032dd2:	683b      	ldr	r3, [r7, #0]
 8032dd4:	429a      	cmp	r2, r3
 8032dd6:	d3cd      	bcc.n	8032d74 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8032dd8:	687b      	ldr	r3, [r7, #4]
}
 8032dda:	4618      	mov	r0, r3
 8032ddc:	3710      	adds	r7, #16
 8032dde:	46bd      	mov	sp, r7
 8032de0:	bd80      	pop	{r7, pc}
 8032de2:	bf00      	nop
 8032de4:	84210843 	.word	0x84210843

08032de8 <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8032de8:	b480      	push	{r7}
 8032dea:	b085      	sub	sp, #20
 8032dec:	af00      	add	r7, sp, #0
 8032dee:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8032df0:	2300      	movs	r3, #0
 8032df2:	60fb      	str	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8032df4:	687b      	ldr	r3, [r7, #4]
 8032df6:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8032df8:	7bfb      	ldrb	r3, [r7, #15]
 8032dfa:	461a      	mov	r2, r3
 8032dfc:	7bbb      	ldrb	r3, [r7, #14]
 8032dfe:	021b      	lsls	r3, r3, #8
 8032e00:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8032e02:	7b7b      	ldrb	r3, [r7, #13]
 8032e04:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8032e06:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8032e08:	7b3b      	ldrb	r3, [r7, #12]
 8032e0a:	061b      	lsls	r3, r3, #24
 8032e0c:	4313      	orrs	r3, r2
}
 8032e0e:	4618      	mov	r0, r3
 8032e10:	3714      	adds	r7, #20
 8032e12:	46bd      	mov	sp, r7
 8032e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032e18:	4770      	bx	lr

08032e1a <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8032e1a:	b480      	push	{r7}
 8032e1c:	b085      	sub	sp, #20
 8032e1e:	af00      	add	r7, sp, #0
 8032e20:	4603      	mov	r3, r0
 8032e22:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8032e24:	2300      	movs	r3, #0
 8032e26:	81bb      	strh	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8032e28:	88fb      	ldrh	r3, [r7, #6]
 8032e2a:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8032e2c:	7b7b      	ldrb	r3, [r7, #13]
 8032e2e:	b21a      	sxth	r2, r3
 8032e30:	7b3b      	ldrb	r3, [r7, #12]
 8032e32:	021b      	lsls	r3, r3, #8
 8032e34:	b21b      	sxth	r3, r3
 8032e36:	4313      	orrs	r3, r2
 8032e38:	b21b      	sxth	r3, r3
 8032e3a:	b29b      	uxth	r3, r3
}
 8032e3c:	4618      	mov	r0, r3
 8032e3e:	3714      	adds	r7, #20
 8032e40:	46bd      	mov	sp, r7
 8032e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032e46:	4770      	bx	lr

08032e48 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8032e48:	b480      	push	{r7}
 8032e4a:	b087      	sub	sp, #28
 8032e4c:	af00      	add	r7, sp, #0
 8032e4e:	60f8      	str	r0, [r7, #12]
 8032e50:	60b9      	str	r1, [r7, #8]
 8032e52:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8032e54:	68fb      	ldr	r3, [r7, #12]
 8032e56:	43db      	mvns	r3, r3
 8032e58:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8032e5a:	e01f      	b.n	8032e9c <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 8032e5c:	68bb      	ldr	r3, [r7, #8]
 8032e5e:	1c5a      	adds	r2, r3, #1
 8032e60:	60ba      	str	r2, [r7, #8]
 8032e62:	781b      	ldrb	r3, [r3, #0]
 8032e64:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8032e66:	7dfa      	ldrb	r2, [r7, #23]
 8032e68:	68fb      	ldr	r3, [r7, #12]
 8032e6a:	4053      	eors	r3, r2
 8032e6c:	f003 030f 	and.w	r3, r3, #15
 8032e70:	4a11      	ldr	r2, [pc, #68]	@ (8032eb8 <mg_crc32+0x70>)
 8032e72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8032e76:	68fb      	ldr	r3, [r7, #12]
 8032e78:	091b      	lsrs	r3, r3, #4
 8032e7a:	4053      	eors	r3, r2
 8032e7c:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8032e7e:	7dfb      	ldrb	r3, [r7, #23]
 8032e80:	091b      	lsrs	r3, r3, #4
 8032e82:	b2db      	uxtb	r3, r3
 8032e84:	461a      	mov	r2, r3
 8032e86:	68fb      	ldr	r3, [r7, #12]
 8032e88:	4053      	eors	r3, r2
 8032e8a:	f003 030f 	and.w	r3, r3, #15
 8032e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8032eb8 <mg_crc32+0x70>)
 8032e90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8032e94:	68fb      	ldr	r3, [r7, #12]
 8032e96:	091b      	lsrs	r3, r3, #4
 8032e98:	4053      	eors	r3, r2
 8032e9a:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8032e9c:	687b      	ldr	r3, [r7, #4]
 8032e9e:	1e5a      	subs	r2, r3, #1
 8032ea0:	607a      	str	r2, [r7, #4]
 8032ea2:	2b00      	cmp	r3, #0
 8032ea4:	d1da      	bne.n	8032e5c <mg_crc32+0x14>
  }
  return ~crc;
 8032ea6:	68fb      	ldr	r3, [r7, #12]
 8032ea8:	43db      	mvns	r3, r3
}
 8032eaa:	4618      	mov	r0, r3
 8032eac:	371c      	adds	r7, #28
 8032eae:	46bd      	mov	sp, r7
 8032eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032eb4:	4770      	bx	lr
 8032eb6:	bf00      	nop
 8032eb8:	08044bec 	.word	0x08044bec

08032ebc <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 8032ebc:	b480      	push	{r7}
 8032ebe:	b085      	sub	sp, #20
 8032ec0:	af00      	add	r7, sp, #0
 8032ec2:	463b      	mov	r3, r7
 8032ec4:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8032ec8:	683b      	ldr	r3, [r7, #0]
 8032eca:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 8032ecc:	687b      	ldr	r3, [r7, #4]
 8032ece:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8032ed0:	683b      	ldr	r3, [r7, #0]
 8032ed2:	781b      	ldrb	r3, [r3, #0]
 8032ed4:	2b2e      	cmp	r3, #46	@ 0x2e
 8032ed6:	d123      	bne.n	8032f20 <mg_path_is_sane+0x64>
 8032ed8:	683b      	ldr	r3, [r7, #0]
 8032eda:	3301      	adds	r3, #1
 8032edc:	781b      	ldrb	r3, [r3, #0]
 8032ede:	2b2e      	cmp	r3, #46	@ 0x2e
 8032ee0:	d11e      	bne.n	8032f20 <mg_path_is_sane+0x64>
 8032ee2:	2300      	movs	r3, #0
 8032ee4:	e024      	b.n	8032f30 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8032ee6:	68fb      	ldr	r3, [r7, #12]
 8032ee8:	781b      	ldrb	r3, [r3, #0]
 8032eea:	2b2f      	cmp	r3, #47	@ 0x2f
 8032eec:	d003      	beq.n	8032ef6 <mg_path_is_sane+0x3a>
 8032eee:	68fb      	ldr	r3, [r7, #12]
 8032ef0:	781b      	ldrb	r3, [r3, #0]
 8032ef2:	2b5c      	cmp	r3, #92	@ 0x5c
 8032ef4:	d10e      	bne.n	8032f14 <mg_path_is_sane+0x58>
 8032ef6:	68bb      	ldr	r3, [r7, #8]
 8032ef8:	2b01      	cmp	r3, #1
 8032efa:	d90b      	bls.n	8032f14 <mg_path_is_sane+0x58>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8032efc:	68fb      	ldr	r3, [r7, #12]
 8032efe:	3301      	adds	r3, #1
 8032f00:	781b      	ldrb	r3, [r3, #0]
 8032f02:	2b2e      	cmp	r3, #46	@ 0x2e
 8032f04:	d106      	bne.n	8032f14 <mg_path_is_sane+0x58>
 8032f06:	68fb      	ldr	r3, [r7, #12]
 8032f08:	3302      	adds	r3, #2
 8032f0a:	781b      	ldrb	r3, [r3, #0]
 8032f0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8032f0e:	d101      	bne.n	8032f14 <mg_path_is_sane+0x58>
 8032f10:	2300      	movs	r3, #0
 8032f12:	e00d      	b.n	8032f30 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8032f14:	68fb      	ldr	r3, [r7, #12]
 8032f16:	3301      	adds	r3, #1
 8032f18:	60fb      	str	r3, [r7, #12]
 8032f1a:	68bb      	ldr	r3, [r7, #8]
 8032f1c:	3b01      	subs	r3, #1
 8032f1e:	60bb      	str	r3, [r7, #8]
 8032f20:	68fb      	ldr	r3, [r7, #12]
 8032f22:	781b      	ldrb	r3, [r3, #0]
 8032f24:	2b00      	cmp	r3, #0
 8032f26:	d002      	beq.n	8032f2e <mg_path_is_sane+0x72>
 8032f28:	68bb      	ldr	r3, [r7, #8]
 8032f2a:	2b00      	cmp	r3, #0
 8032f2c:	d1db      	bne.n	8032ee6 <mg_path_is_sane+0x2a>
    }
  }
  return true;
 8032f2e:	2301      	movs	r3, #1
}
 8032f30:	4618      	mov	r0, r3
 8032f32:	3714      	adds	r7, #20
 8032f34:	46bd      	mov	sp, r7
 8032f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032f3a:	4770      	bx	lr

08032f3c <mg_millis>:

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 8032f3c:	b5b0      	push	{r4, r5, r7, lr}
 8032f3e:	af00      	add	r7, sp, #0
  return GetTickCount();
#elif MG_ARCH == MG_ARCH_RP2040
  return time_us_64() / 1000;
#elif MG_ARCH == MG_ARCH_ESP8266 || MG_ARCH == MG_ARCH_ESP32 || \
    MG_ARCH == MG_ARCH_FREERTOS
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 8032f40:	f7e8 f9d4 	bl	801b2ec <xTaskGetTickCount>
 8032f44:	4603      	mov	r3, r0
 8032f46:	2200      	movs	r2, #0
 8032f48:	461c      	mov	r4, r3
 8032f4a:	4615      	mov	r5, r2
 8032f4c:	4622      	mov	r2, r4
 8032f4e:	462b      	mov	r3, r5
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 8032f50:	4610      	mov	r0, r2
 8032f52:	4619      	mov	r1, r3
 8032f54:	bdb0      	pop	{r4, r5, r7, pc}

08032f56 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 8032f56:	b580      	push	{r7, lr}
 8032f58:	b086      	sub	sp, #24
 8032f5a:	af00      	add	r7, sp, #0
 8032f5c:	6078      	str	r0, [r7, #4]
 8032f5e:	4608      	mov	r0, r1
 8032f60:	4611      	mov	r1, r2
 8032f62:	461a      	mov	r2, r3
 8032f64:	4603      	mov	r3, r0
 8032f66:	70fb      	strb	r3, [r7, #3]
 8032f68:	460b      	mov	r3, r1
 8032f6a:	803b      	strh	r3, [r7, #0]
 8032f6c:	4613      	mov	r3, r2
 8032f6e:	70bb      	strb	r3, [r7, #2]
  size_t i;
  uint8_t *p = (uint8_t *) buf;
 8032f70:	6a3b      	ldr	r3, [r7, #32]
 8032f72:	613b      	str	r3, [r7, #16]
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8032f74:	883b      	ldrh	r3, [r7, #0]
 8032f76:	0a1b      	lsrs	r3, r3, #8
 8032f78:	b29b      	uxth	r3, r3
 8032f7a:	b2db      	uxtb	r3, r3
 8032f7c:	733b      	strb	r3, [r7, #12]
 8032f7e:	883b      	ldrh	r3, [r7, #0]
 8032f80:	b2db      	uxtb	r3, r3
 8032f82:	737b      	strb	r3, [r7, #13]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8032f84:	78fb      	ldrb	r3, [r7, #3]
 8032f86:	00db      	lsls	r3, r3, #3
 8032f88:	b25b      	sxtb	r3, r3
 8032f8a:	78ba      	ldrb	r2, [r7, #2]
 8032f8c:	2a00      	cmp	r2, #0
 8032f8e:	d001      	beq.n	8032f94 <w5500_txn+0x3e>
 8032f90:	2204      	movs	r2, #4
 8032f92:	e000      	b.n	8032f96 <w5500_txn+0x40>
 8032f94:	2200      	movs	r2, #0
 8032f96:	4313      	orrs	r3, r2
 8032f98:	b25b      	sxtb	r3, r3
 8032f9a:	b2db      	uxtb	r3, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8032f9c:	73bb      	strb	r3, [r7, #14]
  s->begin(s->spi);
 8032f9e:	687b      	ldr	r3, [r7, #4]
 8032fa0:	685b      	ldr	r3, [r3, #4]
 8032fa2:	687a      	ldr	r2, [r7, #4]
 8032fa4:	6812      	ldr	r2, [r2, #0]
 8032fa6:	4610      	mov	r0, r2
 8032fa8:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8032faa:	2300      	movs	r3, #0
 8032fac:	617b      	str	r3, [r7, #20]
 8032fae:	e00d      	b.n	8032fcc <w5500_txn+0x76>
 8032fb0:	687b      	ldr	r3, [r7, #4]
 8032fb2:	68db      	ldr	r3, [r3, #12]
 8032fb4:	687a      	ldr	r2, [r7, #4]
 8032fb6:	6810      	ldr	r0, [r2, #0]
 8032fb8:	f107 010c 	add.w	r1, r7, #12
 8032fbc:	697a      	ldr	r2, [r7, #20]
 8032fbe:	440a      	add	r2, r1
 8032fc0:	7812      	ldrb	r2, [r2, #0]
 8032fc2:	4611      	mov	r1, r2
 8032fc4:	4798      	blx	r3
 8032fc6:	697b      	ldr	r3, [r7, #20]
 8032fc8:	3301      	adds	r3, #1
 8032fca:	617b      	str	r3, [r7, #20]
 8032fcc:	697b      	ldr	r3, [r7, #20]
 8032fce:	2b02      	cmp	r3, #2
 8032fd0:	d9ee      	bls.n	8032fb0 <w5500_txn+0x5a>
  for (i = 0; i < len; i++) {
 8032fd2:	2300      	movs	r3, #0
 8032fd4:	617b      	str	r3, [r7, #20]
 8032fd6:	e019      	b.n	803300c <w5500_txn+0xb6>
    uint8_t r = s->txn(s->spi, p[i]);
 8032fd8:	687b      	ldr	r3, [r7, #4]
 8032fda:	68db      	ldr	r3, [r3, #12]
 8032fdc:	687a      	ldr	r2, [r7, #4]
 8032fde:	6810      	ldr	r0, [r2, #0]
 8032fe0:	6939      	ldr	r1, [r7, #16]
 8032fe2:	697a      	ldr	r2, [r7, #20]
 8032fe4:	440a      	add	r2, r1
 8032fe6:	7812      	ldrb	r2, [r2, #0]
 8032fe8:	4611      	mov	r1, r2
 8032fea:	4798      	blx	r3
 8032fec:	4603      	mov	r3, r0
 8032fee:	73fb      	strb	r3, [r7, #15]
    if (!wr) p[i] = r;
 8032ff0:	78bb      	ldrb	r3, [r7, #2]
 8032ff2:	f083 0301 	eor.w	r3, r3, #1
 8032ff6:	b2db      	uxtb	r3, r3
 8032ff8:	2b00      	cmp	r3, #0
 8032ffa:	d004      	beq.n	8033006 <w5500_txn+0xb0>
 8032ffc:	693a      	ldr	r2, [r7, #16]
 8032ffe:	697b      	ldr	r3, [r7, #20]
 8033000:	4413      	add	r3, r2
 8033002:	7bfa      	ldrb	r2, [r7, #15]
 8033004:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++) {
 8033006:	697b      	ldr	r3, [r7, #20]
 8033008:	3301      	adds	r3, #1
 803300a:	617b      	str	r3, [r7, #20]
 803300c:	697a      	ldr	r2, [r7, #20]
 803300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033010:	429a      	cmp	r2, r3
 8033012:	d3e1      	bcc.n	8032fd8 <w5500_txn+0x82>
  }
  s->end(s->spi);
 8033014:	687b      	ldr	r3, [r7, #4]
 8033016:	689b      	ldr	r3, [r3, #8]
 8033018:	687a      	ldr	r2, [r7, #4]
 803301a:	6812      	ldr	r2, [r2, #0]
 803301c:	4610      	mov	r0, r2
 803301e:	4798      	blx	r3
}
 8033020:	bf00      	nop
 8033022:	3718      	adds	r7, #24
 8033024:	46bd      	mov	sp, r7
 8033026:	bd80      	pop	{r7, pc}

08033028 <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 8033028:	b580      	push	{r7, lr}
 803302a:	b086      	sub	sp, #24
 803302c:	af02      	add	r7, sp, #8
 803302e:	60f8      	str	r0, [r7, #12]
 8033030:	607b      	str	r3, [r7, #4]
 8033032:	460b      	mov	r3, r1
 8033034:	72fb      	strb	r3, [r7, #11]
 8033036:	4613      	mov	r3, r2
 8033038:	813b      	strh	r3, [r7, #8]
 803303a:	893a      	ldrh	r2, [r7, #8]
 803303c:	7af9      	ldrb	r1, [r7, #11]
 803303e:	69bb      	ldr	r3, [r7, #24]
 8033040:	9301      	str	r3, [sp, #4]
 8033042:	687b      	ldr	r3, [r7, #4]
 8033044:	9300      	str	r3, [sp, #0]
 8033046:	2301      	movs	r3, #1
 8033048:	68f8      	ldr	r0, [r7, #12]
 803304a:	f7ff ff84 	bl	8032f56 <w5500_txn>
 803304e:	bf00      	nop
 8033050:	3710      	adds	r7, #16
 8033052:	46bd      	mov	sp, r7
 8033054:	bd80      	pop	{r7, pc}

08033056 <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 8033056:	b580      	push	{r7, lr}
 8033058:	b084      	sub	sp, #16
 803305a:	af02      	add	r7, sp, #8
 803305c:	6078      	str	r0, [r7, #4]
 803305e:	4608      	mov	r0, r1
 8033060:	4611      	mov	r1, r2
 8033062:	461a      	mov	r2, r3
 8033064:	4603      	mov	r3, r0
 8033066:	70fb      	strb	r3, [r7, #3]
 8033068:	460b      	mov	r3, r1
 803306a:	803b      	strh	r3, [r7, #0]
 803306c:	4613      	mov	r3, r2
 803306e:	70bb      	strb	r3, [r7, #2]
 8033070:	1cbb      	adds	r3, r7, #2
 8033072:	883a      	ldrh	r2, [r7, #0]
 8033074:	78f9      	ldrb	r1, [r7, #3]
 8033076:	2001      	movs	r0, #1
 8033078:	9000      	str	r0, [sp, #0]
 803307a:	6878      	ldr	r0, [r7, #4]
 803307c:	f7ff ffd4 	bl	8033028 <w5500_wn>
 8033080:	bf00      	nop
 8033082:	3708      	adds	r7, #8
 8033084:	46bd      	mov	sp, r7
 8033086:	bd80      	pop	{r7, pc}

08033088 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 8033088:	b580      	push	{r7, lr}
 803308a:	b088      	sub	sp, #32
 803308c:	af02      	add	r7, sp, #8
 803308e:	60f8      	str	r0, [r7, #12]
 8033090:	4608      	mov	r0, r1
 8033092:	4611      	mov	r1, r2
 8033094:	461a      	mov	r2, r3
 8033096:	4603      	mov	r3, r0
 8033098:	72fb      	strb	r3, [r7, #11]
 803309a:	460b      	mov	r3, r1
 803309c:	813b      	strh	r3, [r7, #8]
 803309e:	4613      	mov	r3, r2
 80330a0:	80fb      	strh	r3, [r7, #6]
 80330a2:	88fb      	ldrh	r3, [r7, #6]
 80330a4:	0a1b      	lsrs	r3, r3, #8
 80330a6:	b29b      	uxth	r3, r3
 80330a8:	b2db      	uxtb	r3, r3
 80330aa:	753b      	strb	r3, [r7, #20]
 80330ac:	88fb      	ldrh	r3, [r7, #6]
 80330ae:	b2db      	uxtb	r3, r3
 80330b0:	757b      	strb	r3, [r7, #21]
 80330b2:	f107 0314 	add.w	r3, r7, #20
 80330b6:	893a      	ldrh	r2, [r7, #8]
 80330b8:	7af9      	ldrb	r1, [r7, #11]
 80330ba:	2002      	movs	r0, #2
 80330bc:	9000      	str	r0, [sp, #0]
 80330be:	68f8      	ldr	r0, [r7, #12]
 80330c0:	f7ff ffb2 	bl	8033028 <w5500_wn>
 80330c4:	bf00      	nop
 80330c6:	3718      	adds	r7, #24
 80330c8:	46bd      	mov	sp, r7
 80330ca:	bd80      	pop	{r7, pc}

080330cc <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 80330cc:	b580      	push	{r7, lr}
 80330ce:	b086      	sub	sp, #24
 80330d0:	af02      	add	r7, sp, #8
 80330d2:	60f8      	str	r0, [r7, #12]
 80330d4:	607b      	str	r3, [r7, #4]
 80330d6:	460b      	mov	r3, r1
 80330d8:	72fb      	strb	r3, [r7, #11]
 80330da:	4613      	mov	r3, r2
 80330dc:	813b      	strh	r3, [r7, #8]
 80330de:	893a      	ldrh	r2, [r7, #8]
 80330e0:	7af9      	ldrb	r1, [r7, #11]
 80330e2:	69bb      	ldr	r3, [r7, #24]
 80330e4:	9301      	str	r3, [sp, #4]
 80330e6:	687b      	ldr	r3, [r7, #4]
 80330e8:	9300      	str	r3, [sp, #0]
 80330ea:	2300      	movs	r3, #0
 80330ec:	68f8      	ldr	r0, [r7, #12]
 80330ee:	f7ff ff32 	bl	8032f56 <w5500_txn>
 80330f2:	bf00      	nop
 80330f4:	3710      	adds	r7, #16
 80330f6:	46bd      	mov	sp, r7
 80330f8:	bd80      	pop	{r7, pc}

080330fa <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 80330fa:	b580      	push	{r7, lr}
 80330fc:	b086      	sub	sp, #24
 80330fe:	af02      	add	r7, sp, #8
 8033100:	6078      	str	r0, [r7, #4]
 8033102:	460b      	mov	r3, r1
 8033104:	70fb      	strb	r3, [r7, #3]
 8033106:	4613      	mov	r3, r2
 8033108:	803b      	strh	r3, [r7, #0]
 803310a:	2300      	movs	r3, #0
 803310c:	73fb      	strb	r3, [r7, #15]
 803310e:	f107 030f 	add.w	r3, r7, #15
 8033112:	883a      	ldrh	r2, [r7, #0]
 8033114:	78f9      	ldrb	r1, [r7, #3]
 8033116:	2001      	movs	r0, #1
 8033118:	9000      	str	r0, [sp, #0]
 803311a:	6878      	ldr	r0, [r7, #4]
 803311c:	f7ff ffd6 	bl	80330cc <w5500_rn>
 8033120:	7bfb      	ldrb	r3, [r7, #15]
 8033122:	4618      	mov	r0, r3
 8033124:	3710      	adds	r7, #16
 8033126:	46bd      	mov	sp, r7
 8033128:	bd80      	pop	{r7, pc}

0803312a <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 803312a:	b580      	push	{r7, lr}
 803312c:	b086      	sub	sp, #24
 803312e:	af02      	add	r7, sp, #8
 8033130:	6078      	str	r0, [r7, #4]
 8033132:	460b      	mov	r3, r1
 8033134:	70fb      	strb	r3, [r7, #3]
 8033136:	4613      	mov	r3, r2
 8033138:	803b      	strh	r3, [r7, #0]
 803313a:	2300      	movs	r3, #0
 803313c:	81bb      	strh	r3, [r7, #12]
 803313e:	f107 030c 	add.w	r3, r7, #12
 8033142:	883a      	ldrh	r2, [r7, #0]
 8033144:	78f9      	ldrb	r1, [r7, #3]
 8033146:	2002      	movs	r0, #2
 8033148:	9000      	str	r0, [sp, #0]
 803314a:	6878      	ldr	r0, [r7, #4]
 803314c:	f7ff ffbe 	bl	80330cc <w5500_rn>
 8033150:	7b3b      	ldrb	r3, [r7, #12]
 8033152:	021b      	lsls	r3, r3, #8
 8033154:	b21a      	sxth	r2, r3
 8033156:	7b7b      	ldrb	r3, [r7, #13]
 8033158:	b21b      	sxth	r3, r3
 803315a:	4313      	orrs	r3, r2
 803315c:	b21b      	sxth	r3, r3
 803315e:	b29b      	uxth	r3, r3
 8033160:	4618      	mov	r0, r3
 8033162:	3710      	adds	r7, #16
 8033164:	46bd      	mov	sp, r7
 8033166:	bd80      	pop	{r7, pc}

08033168 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8033168:	b580      	push	{r7, lr}
 803316a:	b08a      	sub	sp, #40	@ 0x28
 803316c:	af02      	add	r7, sp, #8
 803316e:	60f8      	str	r0, [r7, #12]
 8033170:	60b9      	str	r1, [r7, #8]
 8033172:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8033174:	687b      	ldr	r3, [r7, #4]
 8033176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8033178:	61bb      	str	r3, [r7, #24]
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 803317a:	2300      	movs	r3, #0
 803317c:	83fb      	strh	r3, [r7, #30]
 803317e:	2300      	movs	r3, #0
 8033180:	83bb      	strh	r3, [r7, #28]
 8033182:	68bb      	ldr	r3, [r7, #8]
 8033184:	82fb      	strh	r3, [r7, #22]
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8033186:	e001      	b.n	803318c <w5500_rx+0x24>
 8033188:	8abb      	ldrh	r3, [r7, #20]
 803318a:	83bb      	strh	r3, [r7, #28]
 803318c:	2226      	movs	r2, #38	@ 0x26
 803318e:	2101      	movs	r1, #1
 8033190:	69b8      	ldr	r0, [r7, #24]
 8033192:	f7ff ffca 	bl	803312a <w5500_r2>
 8033196:	4603      	mov	r3, r0
 8033198:	82bb      	strh	r3, [r7, #20]
 803319a:	8aba      	ldrh	r2, [r7, #20]
 803319c:	8bbb      	ldrh	r3, [r7, #28]
 803319e:	429a      	cmp	r2, r3
 80331a0:	d8f2      	bhi.n	8033188 <w5500_rx+0x20>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 80331a2:	8bbb      	ldrh	r3, [r7, #28]
 80331a4:	2b00      	cmp	r3, #0
 80331a6:	d032      	beq.n	803320e <w5500_rx+0xa6>
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 80331a8:	2228      	movs	r2, #40	@ 0x28
 80331aa:	2101      	movs	r1, #1
 80331ac:	69b8      	ldr	r0, [r7, #24]
 80331ae:	f7ff ffbc 	bl	803312a <w5500_r2>
 80331b2:	4603      	mov	r3, r0
 80331b4:	827b      	strh	r3, [r7, #18]
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 80331b6:	8a7b      	ldrh	r3, [r7, #18]
 80331b8:	461a      	mov	r2, r3
 80331ba:	2103      	movs	r1, #3
 80331bc:	69b8      	ldr	r0, [r7, #24]
 80331be:	f7ff ffb4 	bl	803312a <w5500_r2>
 80331c2:	4603      	mov	r3, r0
 80331c4:	83bb      	strh	r3, [r7, #28]
    if (n <= len + 2 && n > 1) {
 80331c6:	8bba      	ldrh	r2, [r7, #28]
 80331c8:	8afb      	ldrh	r3, [r7, #22]
 80331ca:	3302      	adds	r3, #2
 80331cc:	429a      	cmp	r2, r3
 80331ce:	dc0f      	bgt.n	80331f0 <w5500_rx+0x88>
 80331d0:	8bbb      	ldrh	r3, [r7, #28]
 80331d2:	2b01      	cmp	r3, #1
 80331d4:	d90c      	bls.n	80331f0 <w5500_rx+0x88>
      r = (uint16_t) (n - 2);
 80331d6:	8bbb      	ldrh	r3, [r7, #28]
 80331d8:	3b02      	subs	r3, #2
 80331da:	83fb      	strh	r3, [r7, #30]
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 80331dc:	8a7b      	ldrh	r3, [r7, #18]
 80331de:	3302      	adds	r3, #2
 80331e0:	b29a      	uxth	r2, r3
 80331e2:	8bfb      	ldrh	r3, [r7, #30]
 80331e4:	9300      	str	r3, [sp, #0]
 80331e6:	68fb      	ldr	r3, [r7, #12]
 80331e8:	2103      	movs	r1, #3
 80331ea:	69b8      	ldr	r0, [r7, #24]
 80331ec:	f7ff ff6e 	bl	80330cc <w5500_rn>
    }
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 80331f0:	8a7a      	ldrh	r2, [r7, #18]
 80331f2:	8bbb      	ldrh	r3, [r7, #28]
 80331f4:	4413      	add	r3, r2
 80331f6:	b29b      	uxth	r3, r3
 80331f8:	2228      	movs	r2, #40	@ 0x28
 80331fa:	2101      	movs	r1, #1
 80331fc:	69b8      	ldr	r0, [r7, #24]
 80331fe:	f7ff ff43 	bl	8033088 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 8033202:	2340      	movs	r3, #64	@ 0x40
 8033204:	2201      	movs	r2, #1
 8033206:	2101      	movs	r1, #1
 8033208:	69b8      	ldr	r0, [r7, #24]
 803320a:	f7ff ff24 	bl	8033056 <w5500_w1>
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
 803320e:	8bfb      	ldrh	r3, [r7, #30]
}
 8033210:	4618      	mov	r0, r3
 8033212:	3720      	adds	r7, #32
 8033214:	46bd      	mov	sp, r7
 8033216:	bd80      	pop	{r7, pc}

08033218 <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 8033218:	b580      	push	{r7, lr}
 803321a:	b08a      	sub	sp, #40	@ 0x28
 803321c:	af02      	add	r7, sp, #8
 803321e:	60f8      	str	r0, [r7, #12]
 8033220:	60b9      	str	r1, [r7, #8]
 8033222:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8033224:	687b      	ldr	r3, [r7, #4]
 8033226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8033228:	617b      	str	r3, [r7, #20]
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 803322a:	2300      	movs	r3, #0
 803322c:	83bb      	strh	r3, [r7, #28]
 803322e:	68bb      	ldr	r3, [r7, #8]
 8033230:	837b      	strh	r3, [r7, #26]
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 8033232:	e006      	b.n	8033242 <w5500_tx+0x2a>
 8033234:	2220      	movs	r2, #32
 8033236:	2101      	movs	r1, #1
 8033238:	6978      	ldr	r0, [r7, #20]
 803323a:	f7ff ff76 	bl	803312a <w5500_r2>
 803323e:	4603      	mov	r3, r0
 8033240:	83bb      	strh	r3, [r7, #28]
 8033242:	8bba      	ldrh	r2, [r7, #28]
 8033244:	8b7b      	ldrh	r3, [r7, #26]
 8033246:	429a      	cmp	r2, r3
 8033248:	d3f4      	bcc.n	8033234 <w5500_tx+0x1c>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 803324a:	2224      	movs	r2, #36	@ 0x24
 803324c:	2101      	movs	r1, #1
 803324e:	6978      	ldr	r0, [r7, #20]
 8033250:	f7ff ff6b 	bl	803312a <w5500_r2>
 8033254:	4603      	mov	r3, r0
 8033256:	827b      	strh	r3, [r7, #18]
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 8033258:	8b7b      	ldrh	r3, [r7, #26]
 803325a:	8a7a      	ldrh	r2, [r7, #18]
 803325c:	9300      	str	r3, [sp, #0]
 803325e:	68fb      	ldr	r3, [r7, #12]
 8033260:	2102      	movs	r1, #2
 8033262:	6978      	ldr	r0, [r7, #20]
 8033264:	f7ff fee0 	bl	8033028 <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 8033268:	8a7a      	ldrh	r2, [r7, #18]
 803326a:	8b7b      	ldrh	r3, [r7, #26]
 803326c:	4413      	add	r3, r2
 803326e:	b29b      	uxth	r3, r3
 8033270:	2224      	movs	r2, #36	@ 0x24
 8033272:	2101      	movs	r1, #1
 8033274:	6978      	ldr	r0, [r7, #20]
 8033276:	f7ff ff07 	bl	8033088 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 803327a:	2320      	movs	r3, #32
 803327c:	2201      	movs	r2, #1
 803327e:	2101      	movs	r1, #1
 8033280:	6978      	ldr	r0, [r7, #20]
 8033282:	f7ff fee8 	bl	8033056 <w5500_w1>
  for (i = 0; i < 40; i++) {
 8033286:	2300      	movs	r3, #0
 8033288:	83fb      	strh	r3, [r7, #30]
 803328a:	e020      	b.n	80332ce <w5500_tx+0xb6>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 803328c:	2202      	movs	r2, #2
 803328e:	2101      	movs	r1, #1
 8033290:	6978      	ldr	r0, [r7, #20]
 8033292:	f7ff ff32 	bl	80330fa <w5500_r1>
 8033296:	4603      	mov	r3, r0
 8033298:	747b      	strb	r3, [r7, #17]
    if (ir == 0) continue;
 803329a:	7c7b      	ldrb	r3, [r7, #17]
 803329c:	2b00      	cmp	r3, #0
 803329e:	d012      	beq.n	80332c6 <w5500_tx+0xae>
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 80332a0:	7c7b      	ldrb	r3, [r7, #17]
 80332a2:	2202      	movs	r2, #2
 80332a4:	2101      	movs	r1, #1
 80332a6:	6978      	ldr	r0, [r7, #20]
 80332a8:	f7ff fed5 	bl	8033056 <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 80332ac:	7c7b      	ldrb	r3, [r7, #17]
 80332ae:	f003 0308 	and.w	r3, r3, #8
 80332b2:	2b00      	cmp	r3, #0
 80332b4:	d001      	beq.n	80332ba <w5500_tx+0xa2>
 80332b6:	2300      	movs	r3, #0
 80332b8:	837b      	strh	r3, [r7, #26]
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 80332ba:	7c7b      	ldrb	r3, [r7, #17]
 80332bc:	f003 0318 	and.w	r3, r3, #24
 80332c0:	2b00      	cmp	r3, #0
 80332c2:	d108      	bne.n	80332d6 <w5500_tx+0xbe>
 80332c4:	e000      	b.n	80332c8 <w5500_tx+0xb0>
    if (ir == 0) continue;
 80332c6:	bf00      	nop
  for (i = 0; i < 40; i++) {
 80332c8:	8bfb      	ldrh	r3, [r7, #30]
 80332ca:	3301      	adds	r3, #1
 80332cc:	83fb      	strh	r3, [r7, #30]
 80332ce:	8bfb      	ldrh	r3, [r7, #30]
 80332d0:	2b27      	cmp	r3, #39	@ 0x27
 80332d2:	d9db      	bls.n	803328c <w5500_tx+0x74>
 80332d4:	e000      	b.n	80332d8 <w5500_tx+0xc0>
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 80332d6:	bf00      	nop
  }
  return len;
 80332d8:	8b7b      	ldrh	r3, [r7, #26]
}
 80332da:	4618      	mov	r0, r3
 80332dc:	3720      	adds	r7, #32
 80332de:	46bd      	mov	sp, r7
 80332e0:	bd80      	pop	{r7, pc}

080332e2 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 80332e2:	b580      	push	{r7, lr}
 80332e4:	b084      	sub	sp, #16
 80332e6:	af00      	add	r7, sp, #0
 80332e8:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 80332ea:	687b      	ldr	r3, [r7, #4]
 80332ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80332ee:	60fb      	str	r3, [r7, #12]
  s->end(s->spi);
 80332f0:	68fb      	ldr	r3, [r7, #12]
 80332f2:	689b      	ldr	r3, [r3, #8]
 80332f4:	68fa      	ldr	r2, [r7, #12]
 80332f6:	6812      	ldr	r2, [r2, #0]
 80332f8:	4610      	mov	r0, r2
 80332fa:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 80332fc:	2380      	movs	r3, #128	@ 0x80
 80332fe:	2200      	movs	r2, #0
 8033300:	2100      	movs	r1, #0
 8033302:	68f8      	ldr	r0, [r7, #12]
 8033304:	f7ff fea7 	bl	8033056 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8033308:	2300      	movs	r3, #0
 803330a:	222e      	movs	r2, #46	@ 0x2e
 803330c:	2100      	movs	r1, #0
 803330e:	68f8      	ldr	r0, [r7, #12]
 8033310:	f7ff fea1 	bl	8033056 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8033314:	23f8      	movs	r3, #248	@ 0xf8
 8033316:	222e      	movs	r2, #46	@ 0x2e
 8033318:	2100      	movs	r1, #0
 803331a:	68f8      	ldr	r0, [r7, #12]
 803331c:	f7ff fe9b 	bl	8033056 <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 8033320:	2310      	movs	r3, #16
 8033322:	221e      	movs	r2, #30
 8033324:	2101      	movs	r1, #1
 8033326:	68f8      	ldr	r0, [r7, #12]
 8033328:	f7ff fe95 	bl	8033056 <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 803332c:	2310      	movs	r3, #16
 803332e:	221f      	movs	r2, #31
 8033330:	2101      	movs	r1, #1
 8033332:	68f8      	ldr	r0, [r7, #12]
 8033334:	f7ff fe8f 	bl	8033056 <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 8033338:	2304      	movs	r3, #4
 803333a:	2200      	movs	r2, #0
 803333c:	2101      	movs	r1, #1
 803333e:	68f8      	ldr	r0, [r7, #12]
 8033340:	f7ff fe89 	bl	8033056 <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8033344:	2301      	movs	r3, #1
 8033346:	2201      	movs	r2, #1
 8033348:	2101      	movs	r1, #1
 803334a:	68f8      	ldr	r0, [r7, #12]
 803334c:	f7ff fe83 	bl	8033056 <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 8033350:	2203      	movs	r2, #3
 8033352:	2101      	movs	r1, #1
 8033354:	68f8      	ldr	r0, [r7, #12]
 8033356:	f7ff fed0 	bl	80330fa <w5500_r1>
 803335a:	4603      	mov	r3, r0
 803335c:	2b42      	cmp	r3, #66	@ 0x42
 803335e:	bf0c      	ite	eq
 8033360:	2301      	moveq	r3, #1
 8033362:	2300      	movne	r3, #0
 8033364:	b2db      	uxtb	r3, r3
}
 8033366:	4618      	mov	r0, r3
 8033368:	3710      	adds	r7, #16
 803336a:	46bd      	mov	sp, r7
 803336c:	bd80      	pop	{r7, pc}

0803336e <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 803336e:	b580      	push	{r7, lr}
 8033370:	b084      	sub	sp, #16
 8033372:	af00      	add	r7, sp, #0
 8033374:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
 8033376:	687b      	ldr	r3, [r7, #4]
 8033378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803337a:	60fb      	str	r3, [r7, #12]
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 803337c:	222e      	movs	r2, #46	@ 0x2e
 803337e:	2100      	movs	r1, #0
 8033380:	68f8      	ldr	r0, [r7, #12]
 8033382:	f7ff feba 	bl	80330fa <w5500_r1>
 8033386:	4603      	mov	r3, r0
 8033388:	72fb      	strb	r3, [r7, #11]
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
 803338a:	7afb      	ldrb	r3, [r7, #11]
 803338c:	f003 0301 	and.w	r3, r3, #1
 8033390:	2b00      	cmp	r3, #0
 8033392:	bf14      	ite	ne
 8033394:	2301      	movne	r3, #1
 8033396:	2300      	moveq	r3, #0
 8033398:	b2db      	uxtb	r3, r3
}
 803339a:	4618      	mov	r0, r3
 803339c:	3710      	adds	r7, #16
 803339e:	46bd      	mov	sp, r7
 80333a0:	bd80      	pop	{r7, pc}
	...

080333a4 <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 80333a4:	b580      	push	{r7, lr}
 80333a6:	b082      	sub	sp, #8
 80333a8:	af00      	add	r7, sp, #0
 80333aa:	6078      	str	r0, [r7, #4]
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 80333ac:	2207      	movs	r2, #7
 80333ae:	4907      	ldr	r1, [pc, #28]	@ (80333cc <has_mqtt_prefix+0x28>)
 80333b0:	6878      	ldr	r0, [r7, #4]
 80333b2:	f002 feca 	bl	803614a <strncmp>
 80333b6:	4603      	mov	r3, r0
 80333b8:	2b00      	cmp	r3, #0
 80333ba:	bf0c      	ite	eq
 80333bc:	2301      	moveq	r3, #1
 80333be:	2300      	movne	r3, #0
 80333c0:	b2db      	uxtb	r3, r3
}
 80333c2:	4618      	mov	r0, r3
 80333c4:	3708      	adds	r7, #8
 80333c6:	46bd      	mov	sp, r7
 80333c8:	bd80      	pop	{r7, pc}
 80333ca:	bf00      	nop
 80333cc:	08043a00 	.word	0x08043a00

080333d0 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 80333d0:	b580      	push	{r7, lr}
 80333d2:	b08a      	sub	sp, #40	@ 0x28
 80333d4:	af00      	add	r7, sp, #0
 80333d6:	6078      	str	r0, [r7, #4]
    int dot_count = 0;
 80333d8:	2300      	movs	r3, #0
 80333da:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_ip_format = 1;
 80333dc:	2301      	movs	r3, #1
 80333de:	623b      	str	r3, [r7, #32]

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 80333e0:	2300      	movs	r3, #0
 80333e2:	61fb      	str	r3, [r7, #28]
 80333e4:	e01b      	b.n	803341e <is_valid_ip_or_domain+0x4e>
        if (host[i] == '.') {
 80333e6:	69fb      	ldr	r3, [r7, #28]
 80333e8:	687a      	ldr	r2, [r7, #4]
 80333ea:	4413      	add	r3, r2
 80333ec:	781b      	ldrb	r3, [r3, #0]
 80333ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80333f0:	d103      	bne.n	80333fa <is_valid_ip_or_domain+0x2a>
            dot_count++;
 80333f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80333f4:	3301      	adds	r3, #1
 80333f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80333f8:	e00e      	b.n	8033418 <is_valid_ip_or_domain+0x48>
        } else if (!isdigit(host[i])) {
 80333fa:	69fb      	ldr	r3, [r7, #28]
 80333fc:	687a      	ldr	r2, [r7, #4]
 80333fe:	4413      	add	r3, r2
 8033400:	781b      	ldrb	r3, [r3, #0]
 8033402:	3301      	adds	r3, #1
 8033404:	4a39      	ldr	r2, [pc, #228]	@ (80334ec <is_valid_ip_or_domain+0x11c>)
 8033406:	4413      	add	r3, r2
 8033408:	781b      	ldrb	r3, [r3, #0]
 803340a:	f003 0304 	and.w	r3, r3, #4
 803340e:	2b00      	cmp	r3, #0
 8033410:	d102      	bne.n	8033418 <is_valid_ip_or_domain+0x48>
            is_ip_format = 0;
 8033412:	2300      	movs	r3, #0
 8033414:	623b      	str	r3, [r7, #32]
            break;
 8033416:	e008      	b.n	803342a <is_valid_ip_or_domain+0x5a>
    for (int i = 0; host[i] != '\0'; i++) {
 8033418:	69fb      	ldr	r3, [r7, #28]
 803341a:	3301      	adds	r3, #1
 803341c:	61fb      	str	r3, [r7, #28]
 803341e:	69fb      	ldr	r3, [r7, #28]
 8033420:	687a      	ldr	r2, [r7, #4]
 8033422:	4413      	add	r3, r2
 8033424:	781b      	ldrb	r3, [r3, #0]
 8033426:	2b00      	cmp	r3, #0
 8033428:	d1dd      	bne.n	80333e6 <is_valid_ip_or_domain+0x16>
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 803342a:	6a3b      	ldr	r3, [r7, #32]
 803342c:	2b00      	cmp	r3, #0
 803342e:	d026      	beq.n	803347e <is_valid_ip_or_domain+0xae>
 8033430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033432:	2b03      	cmp	r3, #3
 8033434:	d123      	bne.n	803347e <is_valid_ip_or_domain+0xae>
        int octet;
        const char *ptr = host;
 8033436:	687b      	ldr	r3, [r7, #4]
 8033438:	61bb      	str	r3, [r7, #24]

        for (int i = 0; i < 4; i++) {
 803343a:	2300      	movs	r3, #0
 803343c:	617b      	str	r3, [r7, #20]
 803343e:	e019      	b.n	8033474 <is_valid_ip_or_domain+0xa4>
            octet = atoi(ptr);
 8033440:	69b8      	ldr	r0, [r7, #24]
 8033442:	f000 f917 	bl	8033674 <atoi>
 8033446:	60f8      	str	r0, [r7, #12]
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8033448:	68fb      	ldr	r3, [r7, #12]
 803344a:	2b00      	cmp	r3, #0
 803344c:	db02      	blt.n	8033454 <is_valid_ip_or_domain+0x84>
 803344e:	68fb      	ldr	r3, [r7, #12]
 8033450:	2bff      	cmp	r3, #255	@ 0xff
 8033452:	dd01      	ble.n	8033458 <is_valid_ip_or_domain+0x88>
 8033454:	2300      	movs	r3, #0
 8033456:	e044      	b.n	80334e2 <is_valid_ip_or_domain+0x112>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 8033458:	212e      	movs	r1, #46	@ 0x2e
 803345a:	69b8      	ldr	r0, [r7, #24]
 803345c:	f002 fe57 	bl	803610e <strchr>
 8033460:	61b8      	str	r0, [r7, #24]
            if (ptr != NULL) ptr++;
 8033462:	69bb      	ldr	r3, [r7, #24]
 8033464:	2b00      	cmp	r3, #0
 8033466:	d002      	beq.n	803346e <is_valid_ip_or_domain+0x9e>
 8033468:	69bb      	ldr	r3, [r7, #24]
 803346a:	3301      	adds	r3, #1
 803346c:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < 4; i++) {
 803346e:	697b      	ldr	r3, [r7, #20]
 8033470:	3301      	adds	r3, #1
 8033472:	617b      	str	r3, [r7, #20]
 8033474:	697b      	ldr	r3, [r7, #20]
 8033476:	2b03      	cmp	r3, #3
 8033478:	dde2      	ble.n	8033440 <is_valid_ip_or_domain+0x70>
        }
        return 1;  // Строка - корректный IP-адрес
 803347a:	2301      	movs	r3, #1
 803347c:	e031      	b.n	80334e2 <is_valid_ip_or_domain+0x112>
    }

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
 803347e:	2300      	movs	r3, #0
 8033480:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; host[i] != '\0'; i++) {
 8033482:	2300      	movs	r3, #0
 8033484:	613b      	str	r3, [r7, #16]
 8033486:	e020      	b.n	80334ca <is_valid_ip_or_domain+0xfa>
        if (host[i] == '.') {
 8033488:	693b      	ldr	r3, [r7, #16]
 803348a:	687a      	ldr	r2, [r7, #4]
 803348c:	4413      	add	r3, r2
 803348e:	781b      	ldrb	r3, [r3, #0]
 8033490:	2b2e      	cmp	r3, #46	@ 0x2e
 8033492:	d103      	bne.n	803349c <is_valid_ip_or_domain+0xcc>
            dot_count++;
 8033494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033496:	3301      	adds	r3, #1
 8033498:	627b      	str	r3, [r7, #36]	@ 0x24
 803349a:	e013      	b.n	80334c4 <is_valid_ip_or_domain+0xf4>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 803349c:	693b      	ldr	r3, [r7, #16]
 803349e:	687a      	ldr	r2, [r7, #4]
 80334a0:	4413      	add	r3, r2
 80334a2:	781b      	ldrb	r3, [r3, #0]
 80334a4:	3301      	adds	r3, #1
 80334a6:	4a11      	ldr	r2, [pc, #68]	@ (80334ec <is_valid_ip_or_domain+0x11c>)
 80334a8:	4413      	add	r3, r2
 80334aa:	781b      	ldrb	r3, [r3, #0]
 80334ac:	f003 0307 	and.w	r3, r3, #7
 80334b0:	2b00      	cmp	r3, #0
 80334b2:	d107      	bne.n	80334c4 <is_valid_ip_or_domain+0xf4>
 80334b4:	693b      	ldr	r3, [r7, #16]
 80334b6:	687a      	ldr	r2, [r7, #4]
 80334b8:	4413      	add	r3, r2
 80334ba:	781b      	ldrb	r3, [r3, #0]
 80334bc:	2b2d      	cmp	r3, #45	@ 0x2d
 80334be:	d001      	beq.n	80334c4 <is_valid_ip_or_domain+0xf4>
            return 0;  // Некорректный символ для доменного имени
 80334c0:	2300      	movs	r3, #0
 80334c2:	e00e      	b.n	80334e2 <is_valid_ip_or_domain+0x112>
    for (int i = 0; host[i] != '\0'; i++) {
 80334c4:	693b      	ldr	r3, [r7, #16]
 80334c6:	3301      	adds	r3, #1
 80334c8:	613b      	str	r3, [r7, #16]
 80334ca:	693b      	ldr	r3, [r7, #16]
 80334cc:	687a      	ldr	r2, [r7, #4]
 80334ce:	4413      	add	r3, r2
 80334d0:	781b      	ldrb	r3, [r3, #0]
 80334d2:	2b00      	cmp	r3, #0
 80334d4:	d1d8      	bne.n	8033488 <is_valid_ip_or_domain+0xb8>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 80334d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80334d8:	2b00      	cmp	r3, #0
 80334da:	bfcc      	ite	gt
 80334dc:	2301      	movgt	r3, #1
 80334de:	2300      	movle	r3, #0
 80334e0:	b2db      	uxtb	r3, r3
}
 80334e2:	4618      	mov	r0, r3
 80334e4:	3728      	adds	r7, #40	@ 0x28
 80334e6:	46bd      	mov	sp, r7
 80334e8:	bd80      	pop	{r7, pc}
 80334ea:	bf00      	nop
 80334ec:	08045024 	.word	0x08045024

080334f0 <is_valid_port>:

int is_valid_port(const char *port_str) {
 80334f0:	b580      	push	{r7, lr}
 80334f2:	b084      	sub	sp, #16
 80334f4:	af00      	add	r7, sp, #0
 80334f6:	6078      	str	r0, [r7, #4]
    int port = atoi(port_str);
 80334f8:	6878      	ldr	r0, [r7, #4]
 80334fa:	f000 f8bb 	bl	8033674 <atoi>
 80334fe:	60f8      	str	r0, [r7, #12]
    if (port < 1 || port > MAX_PORT) {
 8033500:	68fb      	ldr	r3, [r7, #12]
 8033502:	2b00      	cmp	r3, #0
 8033504:	dd03      	ble.n	803350e <is_valid_port+0x1e>
 8033506:	68fb      	ldr	r3, [r7, #12]
 8033508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 803350c:	db10      	blt.n	8033530 <is_valid_port+0x40>
        return 0; // Порт вне диапазона
 803350e:	2300      	movs	r3, #0
 8033510:	e013      	b.n	803353a <is_valid_port+0x4a>
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
        if (!isdigit(*port_str)) {
 8033512:	687b      	ldr	r3, [r7, #4]
 8033514:	781b      	ldrb	r3, [r3, #0]
 8033516:	3301      	adds	r3, #1
 8033518:	4a0a      	ldr	r2, [pc, #40]	@ (8033544 <is_valid_port+0x54>)
 803351a:	4413      	add	r3, r2
 803351c:	781b      	ldrb	r3, [r3, #0]
 803351e:	f003 0304 	and.w	r3, r3, #4
 8033522:	2b00      	cmp	r3, #0
 8033524:	d101      	bne.n	803352a <is_valid_port+0x3a>
            return 0;
 8033526:	2300      	movs	r3, #0
 8033528:	e007      	b.n	803353a <is_valid_port+0x4a>
        }
        port_str++;
 803352a:	687b      	ldr	r3, [r7, #4]
 803352c:	3301      	adds	r3, #1
 803352e:	607b      	str	r3, [r7, #4]
    while (*port_str) {
 8033530:	687b      	ldr	r3, [r7, #4]
 8033532:	781b      	ldrb	r3, [r3, #0]
 8033534:	2b00      	cmp	r3, #0
 8033536:	d1ec      	bne.n	8033512 <is_valid_port+0x22>
    }
    return 1;
 8033538:	2301      	movs	r3, #1
}
 803353a:	4618      	mov	r0, r3
 803353c:	3710      	adds	r7, #16
 803353e:	46bd      	mov	sp, r7
 8033540:	bd80      	pop	{r7, pc}
 8033542:	bf00      	nop
 8033544:	08045024 	.word	0x08045024

08033548 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 8033548:	b580      	push	{r7, lr}
 803354a:	b0c6      	sub	sp, #280	@ 0x118
 803354c:	af00      	add	r7, sp, #0
 803354e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8033552:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8033556:	6018      	str	r0, [r3, #0]
    if (!has_mqtt_prefix(url)) {
 8033558:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 803355c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8033560:	6818      	ldr	r0, [r3, #0]
 8033562:	f7ff ff1f 	bl	80333a4 <has_mqtt_prefix>
 8033566:	4603      	mov	r3, r0
 8033568:	2b00      	cmp	r3, #0
 803356a:	d105      	bne.n	8033578 <is_valid_mqtt_url+0x30>
        printf("Error: URL does not start with 'mqtt://'\n");
 803356c:	482e      	ldr	r0, [pc, #184]	@ (8033628 <is_valid_mqtt_url+0xe0>)
 803356e:	f002 f85f 	bl	8035630 <puts>
        return -1;
 8033572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8033576:	e051      	b.n	803361c <is_valid_mqtt_url+0xd4>
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 8033578:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 803357c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8033580:	681b      	ldr	r3, [r3, #0]
 8033582:	3307      	adds	r3, #7
 8033584:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    const char *colon = strchr(host_start, ':');
 8033588:	213a      	movs	r1, #58	@ 0x3a
 803358a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 803358e:	f002 fdbe 	bl	803610e <strchr>
 8033592:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    if (!colon) {
 8033596:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 803359a:	2b00      	cmp	r3, #0
 803359c:	d105      	bne.n	80335aa <is_valid_mqtt_url+0x62>
        printf("Error: URL does not contain a port separator ':'\n");
 803359e:	4823      	ldr	r0, [pc, #140]	@ (803362c <is_valid_mqtt_url+0xe4>)
 80335a0:	f002 f846 	bl	8035630 <puts>
        return -2;
 80335a4:	f06f 0301 	mvn.w	r3, #1
 80335a8:	e038      	b.n	803361c <is_valid_mqtt_url+0xd4>
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 80335aa:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80335ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80335b2:	1ad3      	subs	r3, r2, r3
 80335b4:	461a      	mov	r2, r3
 80335b6:	f107 030c 	add.w	r3, r7, #12
 80335ba:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80335be:	4618      	mov	r0, r3
 80335c0:	f002 fdd5 	bl	803616e <strncpy>
    host[colon - host_start] = '\0';
 80335c4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80335c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80335cc:	1ad3      	subs	r3, r2, r3
 80335ce:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80335d2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80335d6:	2100      	movs	r1, #0
 80335d8:	54d1      	strb	r1, [r2, r3]

    if (!is_valid_ip_or_domain(host)) {
 80335da:	f107 030c 	add.w	r3, r7, #12
 80335de:	4618      	mov	r0, r3
 80335e0:	f7ff fef6 	bl	80333d0 <is_valid_ip_or_domain>
 80335e4:	4603      	mov	r3, r0
 80335e6:	2b00      	cmp	r3, #0
 80335e8:	d105      	bne.n	80335f6 <is_valid_mqtt_url+0xae>
        printf("Error: Invalid domain or IP address\n");
 80335ea:	4811      	ldr	r0, [pc, #68]	@ (8033630 <is_valid_mqtt_url+0xe8>)
 80335ec:	f002 f820 	bl	8035630 <puts>
        return -3;
 80335f0:	f06f 0302 	mvn.w	r3, #2
 80335f4:	e012      	b.n	803361c <is_valid_mqtt_url+0xd4>
    }

    // Проверить порт
    const char *port_str = colon + 1;
 80335f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80335fa:	3301      	adds	r3, #1
 80335fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (!is_valid_port(port_str)) {
 8033600:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8033604:	f7ff ff74 	bl	80334f0 <is_valid_port>
 8033608:	4603      	mov	r3, r0
 803360a:	2b00      	cmp	r3, #0
 803360c:	d105      	bne.n	803361a <is_valid_mqtt_url+0xd2>
        printf("Error: Invalid port number\n");
 803360e:	4809      	ldr	r0, [pc, #36]	@ (8033634 <is_valid_mqtt_url+0xec>)
 8033610:	f002 f80e 	bl	8035630 <puts>
        return -4;
 8033614:	f06f 0303 	mvn.w	r3, #3
 8033618:	e000      	b.n	803361c <is_valid_mqtt_url+0xd4>
    }

    return 0; // URL прошел все проверки
 803361a:	2300      	movs	r3, #0
}
 803361c:	4618      	mov	r0, r3
 803361e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8033622:	46bd      	mov	sp, r7
 8033624:	bd80      	pop	{r7, pc}
 8033626:	bf00      	nop
 8033628:	08043a08 	.word	0x08043a08
 803362c:	08043a34 	.word	0x08043a34
 8033630:	08043a68 	.word	0x08043a68
 8033634:	08043a8c 	.word	0x08043a8c

08033638 <__assert_func>:
 8033638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803363a:	4614      	mov	r4, r2
 803363c:	461a      	mov	r2, r3
 803363e:	4b09      	ldr	r3, [pc, #36]	@ (8033664 <__assert_func+0x2c>)
 8033640:	681b      	ldr	r3, [r3, #0]
 8033642:	4605      	mov	r5, r0
 8033644:	68d8      	ldr	r0, [r3, #12]
 8033646:	b954      	cbnz	r4, 803365e <__assert_func+0x26>
 8033648:	4b07      	ldr	r3, [pc, #28]	@ (8033668 <__assert_func+0x30>)
 803364a:	461c      	mov	r4, r3
 803364c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8033650:	9100      	str	r1, [sp, #0]
 8033652:	462b      	mov	r3, r5
 8033654:	4905      	ldr	r1, [pc, #20]	@ (803366c <__assert_func+0x34>)
 8033656:	f000 f811 	bl	803367c <fiprintf>
 803365a:	f003 ffe1 	bl	8037620 <abort>
 803365e:	4b04      	ldr	r3, [pc, #16]	@ (8033670 <__assert_func+0x38>)
 8033660:	e7f4      	b.n	803364c <__assert_func+0x14>
 8033662:	bf00      	nop
 8033664:	20000440 	.word	0x20000440
 8033668:	08044c67 	.word	0x08044c67
 803366c:	08044c39 	.word	0x08044c39
 8033670:	08044c2c 	.word	0x08044c2c

08033674 <atoi>:
 8033674:	220a      	movs	r2, #10
 8033676:	2100      	movs	r1, #0
 8033678:	f002 b8b8 	b.w	80357ec <strtol>

0803367c <fiprintf>:
 803367c:	b40e      	push	{r1, r2, r3}
 803367e:	b503      	push	{r0, r1, lr}
 8033680:	4601      	mov	r1, r0
 8033682:	ab03      	add	r3, sp, #12
 8033684:	4805      	ldr	r0, [pc, #20]	@ (803369c <fiprintf+0x20>)
 8033686:	f853 2b04 	ldr.w	r2, [r3], #4
 803368a:	6800      	ldr	r0, [r0, #0]
 803368c:	9301      	str	r3, [sp, #4]
 803368e:	f001 fab9 	bl	8034c04 <_vfiprintf_r>
 8033692:	b002      	add	sp, #8
 8033694:	f85d eb04 	ldr.w	lr, [sp], #4
 8033698:	b003      	add	sp, #12
 803369a:	4770      	bx	lr
 803369c:	20000440 	.word	0x20000440

080336a0 <printf>:
 80336a0:	b40f      	push	{r0, r1, r2, r3}
 80336a2:	b507      	push	{r0, r1, r2, lr}
 80336a4:	4906      	ldr	r1, [pc, #24]	@ (80336c0 <printf+0x20>)
 80336a6:	ab04      	add	r3, sp, #16
 80336a8:	6808      	ldr	r0, [r1, #0]
 80336aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80336ae:	6881      	ldr	r1, [r0, #8]
 80336b0:	9301      	str	r3, [sp, #4]
 80336b2:	f000 f809 	bl	80336c8 <_vfprintf_r>
 80336b6:	b003      	add	sp, #12
 80336b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80336bc:	b004      	add	sp, #16
 80336be:	4770      	bx	lr
 80336c0:	20000440 	.word	0x20000440
 80336c4:	00000000 	.word	0x00000000

080336c8 <_vfprintf_r>:
 80336c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80336cc:	b0d3      	sub	sp, #332	@ 0x14c
 80336ce:	468b      	mov	fp, r1
 80336d0:	4690      	mov	r8, r2
 80336d2:	461c      	mov	r4, r3
 80336d4:	461e      	mov	r6, r3
 80336d6:	9003      	str	r0, [sp, #12]
 80336d8:	f003 fe90 	bl	80373fc <_localeconv_r>
 80336dc:	6803      	ldr	r3, [r0, #0]
 80336de:	9316      	str	r3, [sp, #88]	@ 0x58
 80336e0:	4618      	mov	r0, r3
 80336e2:	f7dc fddd 	bl	80102a0 <strlen>
 80336e6:	9b03      	ldr	r3, [sp, #12]
 80336e8:	900d      	str	r0, [sp, #52]	@ 0x34
 80336ea:	b123      	cbz	r3, 80336f6 <_vfprintf_r+0x2e>
 80336ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80336ee:	b913      	cbnz	r3, 80336f6 <_vfprintf_r+0x2e>
 80336f0:	9803      	ldr	r0, [sp, #12]
 80336f2:	f002 fa4f 	bl	8035b94 <__sinit>
 80336f6:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80336fa:	07da      	lsls	r2, r3, #31
 80336fc:	d407      	bmi.n	803370e <_vfprintf_r+0x46>
 80336fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8033702:	059b      	lsls	r3, r3, #22
 8033704:	d403      	bmi.n	803370e <_vfprintf_r+0x46>
 8033706:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 803370a:	f003 ff22 	bl	8037552 <__retarget_lock_acquire_recursive>
 803370e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8033712:	049f      	lsls	r7, r3, #18
 8033714:	d409      	bmi.n	803372a <_vfprintf_r+0x62>
 8033716:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 803371a:	f8ab 300c 	strh.w	r3, [fp, #12]
 803371e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8033722:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8033726:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 803372a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803372e:	071d      	lsls	r5, r3, #28
 8033730:	d502      	bpl.n	8033738 <_vfprintf_r+0x70>
 8033732:	f8db 3010 	ldr.w	r3, [fp, #16]
 8033736:	b9c3      	cbnz	r3, 803376a <_vfprintf_r+0xa2>
 8033738:	9803      	ldr	r0, [sp, #12]
 803373a:	4659      	mov	r1, fp
 803373c:	f002 fbe6 	bl	8035f0c <__swsetup_r>
 8033740:	b198      	cbz	r0, 803376a <_vfprintf_r+0xa2>
 8033742:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8033746:	07d8      	lsls	r0, r3, #31
 8033748:	d506      	bpl.n	8033758 <_vfprintf_r+0x90>
 803374a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803374e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8033750:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8033752:	b053      	add	sp, #332	@ 0x14c
 8033754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033758:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803375c:	0599      	lsls	r1, r3, #22
 803375e:	d4f4      	bmi.n	803374a <_vfprintf_r+0x82>
 8033760:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8033764:	f003 fef7 	bl	8037556 <__retarget_lock_release_recursive>
 8033768:	e7ef      	b.n	803374a <_vfprintf_r+0x82>
 803376a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 803376e:	f003 021a 	and.w	r2, r3, #26
 8033772:	2a0a      	cmp	r2, #10
 8033774:	d116      	bne.n	80337a4 <_vfprintf_r+0xdc>
 8033776:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 803377a:	2a00      	cmp	r2, #0
 803377c:	db12      	blt.n	80337a4 <_vfprintf_r+0xdc>
 803377e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 8033782:	07d2      	lsls	r2, r2, #31
 8033784:	d405      	bmi.n	8033792 <_vfprintf_r+0xca>
 8033786:	059b      	lsls	r3, r3, #22
 8033788:	d403      	bmi.n	8033792 <_vfprintf_r+0xca>
 803378a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 803378e:	f003 fee2 	bl	8037556 <__retarget_lock_release_recursive>
 8033792:	9803      	ldr	r0, [sp, #12]
 8033794:	4623      	mov	r3, r4
 8033796:	4642      	mov	r2, r8
 8033798:	4659      	mov	r1, fp
 803379a:	b053      	add	sp, #332	@ 0x14c
 803379c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80337a0:	f001 b9be 	b.w	8034b20 <__sbprintf>
 80337a4:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 80339f0 <_vfprintf_r+0x328>
 80337a8:	2300      	movs	r3, #0
 80337aa:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 80337ae:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80337b2:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 80337b6:	ac29      	add	r4, sp, #164	@ 0xa4
 80337b8:	9426      	str	r4, [sp, #152]	@ 0x98
 80337ba:	9304      	str	r3, [sp, #16]
 80337bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80337be:	9312      	str	r3, [sp, #72]	@ 0x48
 80337c0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80337c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80337c4:	4643      	mov	r3, r8
 80337c6:	461d      	mov	r5, r3
 80337c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80337cc:	b10a      	cbz	r2, 80337d2 <_vfprintf_r+0x10a>
 80337ce:	2a25      	cmp	r2, #37	@ 0x25
 80337d0:	d1f9      	bne.n	80337c6 <_vfprintf_r+0xfe>
 80337d2:	ebb5 0708 	subs.w	r7, r5, r8
 80337d6:	d00d      	beq.n	80337f4 <_vfprintf_r+0x12c>
 80337d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80337da:	443b      	add	r3, r7
 80337dc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80337de:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80337e0:	3301      	adds	r3, #1
 80337e2:	2b07      	cmp	r3, #7
 80337e4:	e9c4 8700 	strd	r8, r7, [r4]
 80337e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80337ea:	dc75      	bgt.n	80338d8 <_vfprintf_r+0x210>
 80337ec:	3408      	adds	r4, #8
 80337ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80337f0:	443b      	add	r3, r7
 80337f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80337f4:	782b      	ldrb	r3, [r5, #0]
 80337f6:	2b00      	cmp	r3, #0
 80337f8:	f001 814f 	beq.w	8034a9a <_vfprintf_r+0x13d2>
 80337fc:	2200      	movs	r2, #0
 80337fe:	1c6b      	adds	r3, r5, #1
 8033800:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8033804:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8033808:	920e      	str	r2, [sp, #56]	@ 0x38
 803380a:	4615      	mov	r5, r2
 803380c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8033810:	9206      	str	r2, [sp, #24]
 8033812:	930c      	str	r3, [sp, #48]	@ 0x30
 8033814:	9b06      	ldr	r3, [sp, #24]
 8033816:	3b20      	subs	r3, #32
 8033818:	2b5a      	cmp	r3, #90	@ 0x5a
 803381a:	f200 85aa 	bhi.w	8034372 <_vfprintf_r+0xcaa>
 803381e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8033822:	009d      	.short	0x009d
 8033824:	05a805a8 	.word	0x05a805a8
 8033828:	05a800a5 	.word	0x05a800a5
 803382c:	05a805a8 	.word	0x05a805a8
 8033830:	05a80085 	.word	0x05a80085
 8033834:	00a805a8 	.word	0x00a805a8
 8033838:	05a800b2 	.word	0x05a800b2
 803383c:	00b400af 	.word	0x00b400af
 8033840:	00ce05a8 	.word	0x00ce05a8
 8033844:	00d100d1 	.word	0x00d100d1
 8033848:	00d100d1 	.word	0x00d100d1
 803384c:	00d100d1 	.word	0x00d100d1
 8033850:	00d100d1 	.word	0x00d100d1
 8033854:	05a800d1 	.word	0x05a800d1
 8033858:	05a805a8 	.word	0x05a805a8
 803385c:	05a805a8 	.word	0x05a805a8
 8033860:	05a805a8 	.word	0x05a805a8
 8033864:	05a80146 	.word	0x05a80146
 8033868:	011a0107 	.word	0x011a0107
 803386c:	01460146 	.word	0x01460146
 8033870:	05a80146 	.word	0x05a80146
 8033874:	05a805a8 	.word	0x05a805a8
 8033878:	00e205a8 	.word	0x00e205a8
 803387c:	05a805a8 	.word	0x05a805a8
 8033880:	05a804a3 	.word	0x05a804a3
 8033884:	05a805a8 	.word	0x05a805a8
 8033888:	05a804ed 	.word	0x05a804ed
 803388c:	05a8050e 	.word	0x05a8050e
 8033890:	053005a8 	.word	0x053005a8
 8033894:	05a805a8 	.word	0x05a805a8
 8033898:	05a805a8 	.word	0x05a805a8
 803389c:	05a805a8 	.word	0x05a805a8
 80338a0:	05a805a8 	.word	0x05a805a8
 80338a4:	05a80146 	.word	0x05a80146
 80338a8:	011c0107 	.word	0x011c0107
 80338ac:	01460146 	.word	0x01460146
 80338b0:	00ed0146 	.word	0x00ed0146
 80338b4:	0101011c 	.word	0x0101011c
 80338b8:	00fa05a8 	.word	0x00fa05a8
 80338bc:	048705a8 	.word	0x048705a8
 80338c0:	04dc04a5 	.word	0x04dc04a5
 80338c4:	05a80101 	.word	0x05a80101
 80338c8:	009b04ed 	.word	0x009b04ed
 80338cc:	05a80510 	.word	0x05a80510
 80338d0:	006505a8 	.word	0x006505a8
 80338d4:	009b05a8 	.word	0x009b05a8
 80338d8:	9803      	ldr	r0, [sp, #12]
 80338da:	aa26      	add	r2, sp, #152	@ 0x98
 80338dc:	4659      	mov	r1, fp
 80338de:	f001 f95f 	bl	8034ba0 <__sprint_r>
 80338e2:	2800      	cmp	r0, #0
 80338e4:	f040 814d 	bne.w	8033b82 <_vfprintf_r+0x4ba>
 80338e8:	ac29      	add	r4, sp, #164	@ 0xa4
 80338ea:	e780      	b.n	80337ee <_vfprintf_r+0x126>
 80338ec:	4b42      	ldr	r3, [pc, #264]	@ (80339f8 <_vfprintf_r+0x330>)
 80338ee:	9319      	str	r3, [sp, #100]	@ 0x64
 80338f0:	f015 0320 	ands.w	r3, r5, #32
 80338f4:	f000 84c8 	beq.w	8034288 <_vfprintf_r+0xbc0>
 80338f8:	3607      	adds	r6, #7
 80338fa:	f026 0307 	bic.w	r3, r6, #7
 80338fe:	461a      	mov	r2, r3
 8033900:	685f      	ldr	r7, [r3, #4]
 8033902:	f852 6b08 	ldr.w	r6, [r2], #8
 8033906:	9207      	str	r2, [sp, #28]
 8033908:	07eb      	lsls	r3, r5, #31
 803390a:	d50a      	bpl.n	8033922 <_vfprintf_r+0x25a>
 803390c:	ea56 0307 	orrs.w	r3, r6, r7
 8033910:	d007      	beq.n	8033922 <_vfprintf_r+0x25a>
 8033912:	2330      	movs	r3, #48	@ 0x30
 8033914:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8033918:	9b06      	ldr	r3, [sp, #24]
 803391a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803391e:	f045 0502 	orr.w	r5, r5, #2
 8033922:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8033926:	2302      	movs	r3, #2
 8033928:	f000 bc2e 	b.w	8034188 <_vfprintf_r+0xac0>
 803392c:	9803      	ldr	r0, [sp, #12]
 803392e:	f003 fd65 	bl	80373fc <_localeconv_r>
 8033932:	6843      	ldr	r3, [r0, #4]
 8033934:	9317      	str	r3, [sp, #92]	@ 0x5c
 8033936:	4618      	mov	r0, r3
 8033938:	f7dc fcb2 	bl	80102a0 <strlen>
 803393c:	9012      	str	r0, [sp, #72]	@ 0x48
 803393e:	9803      	ldr	r0, [sp, #12]
 8033940:	f003 fd5c 	bl	80373fc <_localeconv_r>
 8033944:	6883      	ldr	r3, [r0, #8]
 8033946:	9309      	str	r3, [sp, #36]	@ 0x24
 8033948:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803394a:	b12b      	cbz	r3, 8033958 <_vfprintf_r+0x290>
 803394c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803394e:	b11b      	cbz	r3, 8033958 <_vfprintf_r+0x290>
 8033950:	781b      	ldrb	r3, [r3, #0]
 8033952:	b10b      	cbz	r3, 8033958 <_vfprintf_r+0x290>
 8033954:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8033958:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803395a:	e757      	b.n	803380c <_vfprintf_r+0x144>
 803395c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8033960:	2b00      	cmp	r3, #0
 8033962:	d1f9      	bne.n	8033958 <_vfprintf_r+0x290>
 8033964:	2320      	movs	r3, #32
 8033966:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803396a:	e7f5      	b.n	8033958 <_vfprintf_r+0x290>
 803396c:	f045 0501 	orr.w	r5, r5, #1
 8033970:	e7f2      	b.n	8033958 <_vfprintf_r+0x290>
 8033972:	f856 3b04 	ldr.w	r3, [r6], #4
 8033976:	930e      	str	r3, [sp, #56]	@ 0x38
 8033978:	2b00      	cmp	r3, #0
 803397a:	daed      	bge.n	8033958 <_vfprintf_r+0x290>
 803397c:	425b      	negs	r3, r3
 803397e:	930e      	str	r3, [sp, #56]	@ 0x38
 8033980:	f045 0504 	orr.w	r5, r5, #4
 8033984:	e7e8      	b.n	8033958 <_vfprintf_r+0x290>
 8033986:	232b      	movs	r3, #43	@ 0x2b
 8033988:	e7ed      	b.n	8033966 <_vfprintf_r+0x29e>
 803398a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803398c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8033990:	9206      	str	r2, [sp, #24]
 8033992:	2a2a      	cmp	r2, #42	@ 0x2a
 8033994:	d10f      	bne.n	80339b6 <_vfprintf_r+0x2ee>
 8033996:	f856 2b04 	ldr.w	r2, [r6], #4
 803399a:	930c      	str	r3, [sp, #48]	@ 0x30
 803399c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 80339a0:	e7da      	b.n	8033958 <_vfprintf_r+0x290>
 80339a2:	fb01 2909 	mla	r9, r1, r9, r2
 80339a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80339aa:	9206      	str	r2, [sp, #24]
 80339ac:	9a06      	ldr	r2, [sp, #24]
 80339ae:	3a30      	subs	r2, #48	@ 0x30
 80339b0:	2a09      	cmp	r2, #9
 80339b2:	d9f6      	bls.n	80339a2 <_vfprintf_r+0x2da>
 80339b4:	e72d      	b.n	8033812 <_vfprintf_r+0x14a>
 80339b6:	f04f 0900 	mov.w	r9, #0
 80339ba:	210a      	movs	r1, #10
 80339bc:	e7f6      	b.n	80339ac <_vfprintf_r+0x2e4>
 80339be:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80339c2:	e7c9      	b.n	8033958 <_vfprintf_r+0x290>
 80339c4:	2200      	movs	r2, #0
 80339c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80339c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80339ca:	210a      	movs	r1, #10
 80339cc:	9a06      	ldr	r2, [sp, #24]
 80339ce:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80339d0:	3a30      	subs	r2, #48	@ 0x30
 80339d2:	fb01 2200 	mla	r2, r1, r0, r2
 80339d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80339d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80339dc:	9206      	str	r2, [sp, #24]
 80339de:	3a30      	subs	r2, #48	@ 0x30
 80339e0:	2a09      	cmp	r2, #9
 80339e2:	d9f3      	bls.n	80339cc <_vfprintf_r+0x304>
 80339e4:	e715      	b.n	8033812 <_vfprintf_r+0x14a>
 80339e6:	f045 0508 	orr.w	r5, r5, #8
 80339ea:	e7b5      	b.n	8033958 <_vfprintf_r+0x290>
 80339ec:	f3af 8000 	nop.w
	...
 80339f8:	08044c78 	.word	0x08044c78
 80339fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80339fe:	781b      	ldrb	r3, [r3, #0]
 8033a00:	2b68      	cmp	r3, #104	@ 0x68
 8033a02:	bf01      	itttt	eq
 8033a04:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8033a06:	3301      	addeq	r3, #1
 8033a08:	930c      	streq	r3, [sp, #48]	@ 0x30
 8033a0a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8033a0e:	bf18      	it	ne
 8033a10:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8033a14:	e7a0      	b.n	8033958 <_vfprintf_r+0x290>
 8033a16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8033a18:	781b      	ldrb	r3, [r3, #0]
 8033a1a:	2b6c      	cmp	r3, #108	@ 0x6c
 8033a1c:	d105      	bne.n	8033a2a <_vfprintf_r+0x362>
 8033a1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8033a20:	3301      	adds	r3, #1
 8033a22:	930c      	str	r3, [sp, #48]	@ 0x30
 8033a24:	f045 0520 	orr.w	r5, r5, #32
 8033a28:	e796      	b.n	8033958 <_vfprintf_r+0x290>
 8033a2a:	f045 0510 	orr.w	r5, r5, #16
 8033a2e:	e793      	b.n	8033958 <_vfprintf_r+0x290>
 8033a30:	4632      	mov	r2, r6
 8033a32:	f852 3b04 	ldr.w	r3, [r2], #4
 8033a36:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8033a3a:	2300      	movs	r3, #0
 8033a3c:	9207      	str	r2, [sp, #28]
 8033a3e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8033a42:	469a      	mov	sl, r3
 8033a44:	f04f 0901 	mov.w	r9, #1
 8033a48:	9310      	str	r3, [sp, #64]	@ 0x40
 8033a4a:	461f      	mov	r7, r3
 8033a4c:	9308      	str	r3, [sp, #32]
 8033a4e:	461e      	mov	r6, r3
 8033a50:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8033a54:	e1da      	b.n	8033e0c <_vfprintf_r+0x744>
 8033a56:	f045 0510 	orr.w	r5, r5, #16
 8033a5a:	06af      	lsls	r7, r5, #26
 8033a5c:	d512      	bpl.n	8033a84 <_vfprintf_r+0x3bc>
 8033a5e:	3607      	adds	r6, #7
 8033a60:	f026 0307 	bic.w	r3, r6, #7
 8033a64:	461a      	mov	r2, r3
 8033a66:	685f      	ldr	r7, [r3, #4]
 8033a68:	f852 6b08 	ldr.w	r6, [r2], #8
 8033a6c:	9207      	str	r2, [sp, #28]
 8033a6e:	2f00      	cmp	r7, #0
 8033a70:	da06      	bge.n	8033a80 <_vfprintf_r+0x3b8>
 8033a72:	4276      	negs	r6, r6
 8033a74:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8033a78:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8033a7c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8033a80:	2301      	movs	r3, #1
 8033a82:	e384      	b.n	803418e <_vfprintf_r+0xac6>
 8033a84:	4633      	mov	r3, r6
 8033a86:	06ee      	lsls	r6, r5, #27
 8033a88:	f853 7b04 	ldr.w	r7, [r3], #4
 8033a8c:	9307      	str	r3, [sp, #28]
 8033a8e:	d502      	bpl.n	8033a96 <_vfprintf_r+0x3ce>
 8033a90:	463e      	mov	r6, r7
 8033a92:	17ff      	asrs	r7, r7, #31
 8033a94:	e7eb      	b.n	8033a6e <_vfprintf_r+0x3a6>
 8033a96:	0668      	lsls	r0, r5, #25
 8033a98:	d503      	bpl.n	8033aa2 <_vfprintf_r+0x3da>
 8033a9a:	b23e      	sxth	r6, r7
 8033a9c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8033aa0:	e7e5      	b.n	8033a6e <_vfprintf_r+0x3a6>
 8033aa2:	05a9      	lsls	r1, r5, #22
 8033aa4:	d5f4      	bpl.n	8033a90 <_vfprintf_r+0x3c8>
 8033aa6:	b27e      	sxtb	r6, r7
 8033aa8:	f347 17c0 	sbfx	r7, r7, #7, #1
 8033aac:	e7df      	b.n	8033a6e <_vfprintf_r+0x3a6>
 8033aae:	3607      	adds	r6, #7
 8033ab0:	f026 0307 	bic.w	r3, r6, #7
 8033ab4:	ecb3 7b02 	vldmia	r3!, {d7}
 8033ab8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8033abc:	9307      	str	r3, [sp, #28]
 8033abe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8033ac0:	931a      	str	r3, [sp, #104]	@ 0x68
 8033ac2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8033ac4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8033ac8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8033aca:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8033ace:	4b85      	ldr	r3, [pc, #532]	@ (8033ce4 <_vfprintf_r+0x61c>)
 8033ad0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8033ad4:	f7dd f842 	bl	8010b5c <__aeabi_dcmpun>
 8033ad8:	bb10      	cbnz	r0, 8033b20 <_vfprintf_r+0x458>
 8033ada:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8033ade:	4b81      	ldr	r3, [pc, #516]	@ (8033ce4 <_vfprintf_r+0x61c>)
 8033ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8033ae4:	f7dd f81c 	bl	8010b20 <__aeabi_dcmple>
 8033ae8:	b9d0      	cbnz	r0, 8033b20 <_vfprintf_r+0x458>
 8033aea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8033aee:	2200      	movs	r2, #0
 8033af0:	2300      	movs	r3, #0
 8033af2:	f7dd f80b 	bl	8010b0c <__aeabi_dcmplt>
 8033af6:	b110      	cbz	r0, 8033afe <_vfprintf_r+0x436>
 8033af8:	232d      	movs	r3, #45	@ 0x2d
 8033afa:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8033afe:	4a7a      	ldr	r2, [pc, #488]	@ (8033ce8 <_vfprintf_r+0x620>)
 8033b00:	4b7a      	ldr	r3, [pc, #488]	@ (8033cec <_vfprintf_r+0x624>)
 8033b02:	9906      	ldr	r1, [sp, #24]
 8033b04:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8033b08:	2947      	cmp	r1, #71	@ 0x47
 8033b0a:	bfd4      	ite	le
 8033b0c:	4690      	movle	r8, r2
 8033b0e:	4698      	movgt	r8, r3
 8033b10:	f04f 0a00 	mov.w	sl, #0
 8033b14:	f04f 0903 	mov.w	r9, #3
 8033b18:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 8033b1c:	f000 bff8 	b.w	8034b10 <_vfprintf_r+0x1448>
 8033b20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8033b24:	4610      	mov	r0, r2
 8033b26:	4619      	mov	r1, r3
 8033b28:	f7dd f818 	bl	8010b5c <__aeabi_dcmpun>
 8033b2c:	4682      	mov	sl, r0
 8033b2e:	b140      	cbz	r0, 8033b42 <_vfprintf_r+0x47a>
 8033b30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8033b32:	4a6f      	ldr	r2, [pc, #444]	@ (8033cf0 <_vfprintf_r+0x628>)
 8033b34:	2b00      	cmp	r3, #0
 8033b36:	bfbc      	itt	lt
 8033b38:	232d      	movlt	r3, #45	@ 0x2d
 8033b3a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 8033b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8033cf4 <_vfprintf_r+0x62c>)
 8033b40:	e7df      	b.n	8033b02 <_vfprintf_r+0x43a>
 8033b42:	9b06      	ldr	r3, [sp, #24]
 8033b44:	2b61      	cmp	r3, #97	@ 0x61
 8033b46:	d02e      	beq.n	8033ba6 <_vfprintf_r+0x4de>
 8033b48:	2b41      	cmp	r3, #65	@ 0x41
 8033b4a:	d12e      	bne.n	8033baa <_vfprintf_r+0x4e2>
 8033b4c:	2358      	movs	r3, #88	@ 0x58
 8033b4e:	2230      	movs	r2, #48	@ 0x30
 8033b50:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8033b54:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8033b58:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8033b5c:	f045 0502 	orr.w	r5, r5, #2
 8033b60:	f340 80ae 	ble.w	8033cc0 <_vfprintf_r+0x5f8>
 8033b64:	9803      	ldr	r0, [sp, #12]
 8033b66:	f109 0101 	add.w	r1, r9, #1
 8033b6a:	f004 fd0f 	bl	803858c <_malloc_r>
 8033b6e:	4680      	mov	r8, r0
 8033b70:	2800      	cmp	r0, #0
 8033b72:	f040 80aa 	bne.w	8033cca <_vfprintf_r+0x602>
 8033b76:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8033b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8033b7e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8033b82:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8033b86:	07d9      	lsls	r1, r3, #31
 8033b88:	d407      	bmi.n	8033b9a <_vfprintf_r+0x4d2>
 8033b8a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8033b8e:	059a      	lsls	r2, r3, #22
 8033b90:	d403      	bmi.n	8033b9a <_vfprintf_r+0x4d2>
 8033b92:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8033b96:	f003 fcde 	bl	8037556 <__retarget_lock_release_recursive>
 8033b9a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8033b9e:	065b      	lsls	r3, r3, #25
 8033ba0:	f57f add6 	bpl.w	8033750 <_vfprintf_r+0x88>
 8033ba4:	e5d1      	b.n	803374a <_vfprintf_r+0x82>
 8033ba6:	2378      	movs	r3, #120	@ 0x78
 8033ba8:	e7d1      	b.n	8033b4e <_vfprintf_r+0x486>
 8033baa:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8033bae:	f000 808e 	beq.w	8033cce <_vfprintf_r+0x606>
 8033bb2:	9b06      	ldr	r3, [sp, #24]
 8033bb4:	f023 0320 	bic.w	r3, r3, #32
 8033bb8:	2b47      	cmp	r3, #71	@ 0x47
 8033bba:	d105      	bne.n	8033bc8 <_vfprintf_r+0x500>
 8033bbc:	f1b9 0f00 	cmp.w	r9, #0
 8033bc0:	d102      	bne.n	8033bc8 <_vfprintf_r+0x500>
 8033bc2:	46ca      	mov	sl, r9
 8033bc4:	f04f 0901 	mov.w	r9, #1
 8033bc8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8033bcc:	9311      	str	r3, [sp, #68]	@ 0x44
 8033bce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8033bd0:	2b00      	cmp	r3, #0
 8033bd2:	da7f      	bge.n	8033cd4 <_vfprintf_r+0x60c>
 8033bd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8033bd6:	9314      	str	r3, [sp, #80]	@ 0x50
 8033bd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8033bda:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8033bde:	9315      	str	r3, [sp, #84]	@ 0x54
 8033be0:	232d      	movs	r3, #45	@ 0x2d
 8033be2:	931c      	str	r3, [sp, #112]	@ 0x70
 8033be4:	9b06      	ldr	r3, [sp, #24]
 8033be6:	f023 0320 	bic.w	r3, r3, #32
 8033bea:	2b41      	cmp	r3, #65	@ 0x41
 8033bec:	9308      	str	r3, [sp, #32]
 8033bee:	f040 81e7 	bne.w	8033fc0 <_vfprintf_r+0x8f8>
 8033bf2:	a820      	add	r0, sp, #128	@ 0x80
 8033bf4:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8033bf8:	f003 fcd2 	bl	80375a0 <frexp>
 8033bfc:	2200      	movs	r2, #0
 8033bfe:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8033c02:	ec51 0b10 	vmov	r0, r1, d0
 8033c06:	f7dc fd0f 	bl	8010628 <__aeabi_dmul>
 8033c0a:	4602      	mov	r2, r0
 8033c0c:	460b      	mov	r3, r1
 8033c0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8033c12:	2200      	movs	r2, #0
 8033c14:	2300      	movs	r3, #0
 8033c16:	f7dc ff6f 	bl	8010af8 <__aeabi_dcmpeq>
 8033c1a:	b108      	cbz	r0, 8033c20 <_vfprintf_r+0x558>
 8033c1c:	2301      	movs	r3, #1
 8033c1e:	9320      	str	r3, [sp, #128]	@ 0x80
 8033c20:	4a35      	ldr	r2, [pc, #212]	@ (8033cf8 <_vfprintf_r+0x630>)
 8033c22:	4b36      	ldr	r3, [pc, #216]	@ (8033cfc <_vfprintf_r+0x634>)
 8033c24:	9906      	ldr	r1, [sp, #24]
 8033c26:	2961      	cmp	r1, #97	@ 0x61
 8033c28:	bf18      	it	ne
 8033c2a:	461a      	movne	r2, r3
 8033c2c:	9210      	str	r2, [sp, #64]	@ 0x40
 8033c2e:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 8033c32:	4646      	mov	r6, r8
 8033c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8033c38:	4b31      	ldr	r3, [pc, #196]	@ (8033d00 <_vfprintf_r+0x638>)
 8033c3a:	2200      	movs	r2, #0
 8033c3c:	f7dc fcf4 	bl	8010628 <__aeabi_dmul>
 8033c40:	4602      	mov	r2, r0
 8033c42:	460b      	mov	r3, r1
 8033c44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8033c48:	f7dc ff9e 	bl	8010b88 <__aeabi_d2iz>
 8033c4c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8033c4e:	f7dc fc81 	bl	8010554 <__aeabi_i2d>
 8033c52:	4602      	mov	r2, r0
 8033c54:	460b      	mov	r3, r1
 8033c56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8033c5a:	f7dc fb2d 	bl	80102b8 <__aeabi_dsub>
 8033c5e:	4602      	mov	r2, r0
 8033c60:	460b      	mov	r3, r1
 8033c62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8033c66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8033c68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8033c6a:	5c9b      	ldrb	r3, [r3, r2]
 8033c6c:	f806 3b01 	strb.w	r3, [r6], #1
 8033c70:	1c7a      	adds	r2, r7, #1
 8033c72:	d006      	beq.n	8033c82 <_vfprintf_r+0x5ba>
 8033c74:	1e7b      	subs	r3, r7, #1
 8033c76:	931d      	str	r3, [sp, #116]	@ 0x74
 8033c78:	2200      	movs	r2, #0
 8033c7a:	2300      	movs	r3, #0
 8033c7c:	f7dc ff3c 	bl	8010af8 <__aeabi_dcmpeq>
 8033c80:	b370      	cbz	r0, 8033ce0 <_vfprintf_r+0x618>
 8033c82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8033c86:	4b1f      	ldr	r3, [pc, #124]	@ (8033d04 <_vfprintf_r+0x63c>)
 8033c88:	2200      	movs	r2, #0
 8033c8a:	f7dc ff5d 	bl	8010b48 <__aeabi_dcmpgt>
 8033c8e:	2800      	cmp	r0, #0
 8033c90:	d13a      	bne.n	8033d08 <_vfprintf_r+0x640>
 8033c92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8033c96:	4b1b      	ldr	r3, [pc, #108]	@ (8033d04 <_vfprintf_r+0x63c>)
 8033c98:	2200      	movs	r2, #0
 8033c9a:	f7dc ff2d 	bl	8010af8 <__aeabi_dcmpeq>
 8033c9e:	b110      	cbz	r0, 8033ca6 <_vfprintf_r+0x5de>
 8033ca0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8033ca2:	07db      	lsls	r3, r3, #31
 8033ca4:	d430      	bmi.n	8033d08 <_vfprintf_r+0x640>
 8033ca6:	4633      	mov	r3, r6
 8033ca8:	19f1      	adds	r1, r6, r7
 8033caa:	2030      	movs	r0, #48	@ 0x30
 8033cac:	1aca      	subs	r2, r1, r3
 8033cae:	2a00      	cmp	r2, #0
 8033cb0:	f280 8183 	bge.w	8033fba <_vfprintf_r+0x8f2>
 8033cb4:	1c7b      	adds	r3, r7, #1
 8033cb6:	3701      	adds	r7, #1
 8033cb8:	bfb8      	it	lt
 8033cba:	2300      	movlt	r3, #0
 8033cbc:	441e      	add	r6, r3
 8033cbe:	e037      	b.n	8033d30 <_vfprintf_r+0x668>
 8033cc0:	f04f 0a00 	mov.w	sl, #0
 8033cc4:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8033cc8:	e77e      	b.n	8033bc8 <_vfprintf_r+0x500>
 8033cca:	4682      	mov	sl, r0
 8033ccc:	e77c      	b.n	8033bc8 <_vfprintf_r+0x500>
 8033cce:	f04f 0906 	mov.w	r9, #6
 8033cd2:	e779      	b.n	8033bc8 <_vfprintf_r+0x500>
 8033cd4:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8033cd8:	2300      	movs	r3, #0
 8033cda:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8033cde:	e780      	b.n	8033be2 <_vfprintf_r+0x51a>
 8033ce0:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8033ce2:	e7a7      	b.n	8033c34 <_vfprintf_r+0x56c>
 8033ce4:	7fefffff 	.word	0x7fefffff
 8033ce8:	08044c68 	.word	0x08044c68
 8033cec:	08044c6c 	.word	0x08044c6c
 8033cf0:	08044c70 	.word	0x08044c70
 8033cf4:	08044c74 	.word	0x08044c74
 8033cf8:	08044c78 	.word	0x08044c78
 8033cfc:	08044c89 	.word	0x08044c89
 8033d00:	40300000 	.word	0x40300000
 8033d04:	3fe00000 	.word	0x3fe00000
 8033d08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8033d0a:	9624      	str	r6, [sp, #144]	@ 0x90
 8033d0c:	7bd9      	ldrb	r1, [r3, #15]
 8033d0e:	2030      	movs	r0, #48	@ 0x30
 8033d10:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8033d12:	1e53      	subs	r3, r2, #1
 8033d14:	9324      	str	r3, [sp, #144]	@ 0x90
 8033d16:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8033d1a:	428b      	cmp	r3, r1
 8033d1c:	f000 814a 	beq.w	8033fb4 <_vfprintf_r+0x8ec>
 8033d20:	2b39      	cmp	r3, #57	@ 0x39
 8033d22:	bf0b      	itete	eq
 8033d24:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8033d26:	3301      	addne	r3, #1
 8033d28:	7a9b      	ldrbeq	r3, [r3, #10]
 8033d2a:	b2db      	uxtbne	r3, r3
 8033d2c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8033d30:	eba6 0308 	sub.w	r3, r6, r8
 8033d34:	9304      	str	r3, [sp, #16]
 8033d36:	9b08      	ldr	r3, [sp, #32]
 8033d38:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8033d3a:	2b47      	cmp	r3, #71	@ 0x47
 8033d3c:	f040 8189 	bne.w	8034052 <_vfprintf_r+0x98a>
 8033d40:	1cf1      	adds	r1, r6, #3
 8033d42:	db02      	blt.n	8033d4a <_vfprintf_r+0x682>
 8033d44:	45b1      	cmp	r9, r6
 8033d46:	f280 81a7 	bge.w	8034098 <_vfprintf_r+0x9d0>
 8033d4a:	9b06      	ldr	r3, [sp, #24]
 8033d4c:	3b02      	subs	r3, #2
 8033d4e:	9306      	str	r3, [sp, #24]
 8033d50:	9906      	ldr	r1, [sp, #24]
 8033d52:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8033d56:	f021 0120 	bic.w	r1, r1, #32
 8033d5a:	2941      	cmp	r1, #65	@ 0x41
 8033d5c:	bf08      	it	eq
 8033d5e:	320f      	addeq	r2, #15
 8033d60:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8033d64:	bf06      	itte	eq
 8033d66:	b2d2      	uxtbeq	r2, r2
 8033d68:	2101      	moveq	r1, #1
 8033d6a:	2100      	movne	r1, #0
 8033d6c:	2b00      	cmp	r3, #0
 8033d6e:	9320      	str	r3, [sp, #128]	@ 0x80
 8033d70:	bfb8      	it	lt
 8033d72:	f1c6 0301 	rsblt	r3, r6, #1
 8033d76:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8033d7a:	bfb4      	ite	lt
 8033d7c:	222d      	movlt	r2, #45	@ 0x2d
 8033d7e:	222b      	movge	r2, #43	@ 0x2b
 8033d80:	2b09      	cmp	r3, #9
 8033d82:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8033d86:	f340 817a 	ble.w	803407e <_vfprintf_r+0x9b6>
 8033d8a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8033d8e:	270a      	movs	r7, #10
 8033d90:	4602      	mov	r2, r0
 8033d92:	fbb3 f6f7 	udiv	r6, r3, r7
 8033d96:	fb07 3116 	mls	r1, r7, r6, r3
 8033d9a:	3130      	adds	r1, #48	@ 0x30
 8033d9c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8033da0:	4619      	mov	r1, r3
 8033da2:	2963      	cmp	r1, #99	@ 0x63
 8033da4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8033da8:	4633      	mov	r3, r6
 8033daa:	dcf1      	bgt.n	8033d90 <_vfprintf_r+0x6c8>
 8033dac:	3330      	adds	r3, #48	@ 0x30
 8033dae:	1e91      	subs	r1, r2, #2
 8033db0:	f800 3c01 	strb.w	r3, [r0, #-1]
 8033db4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8033db8:	460b      	mov	r3, r1
 8033dba:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8033dbe:	4283      	cmp	r3, r0
 8033dc0:	f0c0 8158 	bcc.w	8034074 <_vfprintf_r+0x9ac>
 8033dc4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8033dc8:	1a9b      	subs	r3, r3, r2
 8033dca:	4281      	cmp	r1, r0
 8033dcc:	bf88      	it	hi
 8033dce:	2300      	movhi	r3, #0
 8033dd0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8033dd4:	441a      	add	r2, r3
 8033dd6:	ab22      	add	r3, sp, #136	@ 0x88
 8033dd8:	1ad3      	subs	r3, r2, r3
 8033dda:	9a04      	ldr	r2, [sp, #16]
 8033ddc:	9318      	str	r3, [sp, #96]	@ 0x60
 8033dde:	2a01      	cmp	r2, #1
 8033de0:	eb03 0902 	add.w	r9, r3, r2
 8033de4:	dc01      	bgt.n	8033dea <_vfprintf_r+0x722>
 8033de6:	07ea      	lsls	r2, r5, #31
 8033de8:	d501      	bpl.n	8033dee <_vfprintf_r+0x726>
 8033dea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033dec:	4499      	add	r9, r3
 8033dee:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8033df2:	2700      	movs	r7, #0
 8033df4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8033df8:	9311      	str	r3, [sp, #68]	@ 0x44
 8033dfa:	9708      	str	r7, [sp, #32]
 8033dfc:	463e      	mov	r6, r7
 8033dfe:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8033e00:	2b00      	cmp	r3, #0
 8033e02:	f040 8191 	bne.w	8034128 <_vfprintf_r+0xa60>
 8033e06:	2300      	movs	r3, #0
 8033e08:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8033e0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8033e0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8033e0e:	454b      	cmp	r3, r9
 8033e10:	bfb8      	it	lt
 8033e12:	464b      	movlt	r3, r9
 8033e14:	9311      	str	r3, [sp, #68]	@ 0x44
 8033e16:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8033e1a:	b113      	cbz	r3, 8033e22 <_vfprintf_r+0x75a>
 8033e1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8033e1e:	3301      	adds	r3, #1
 8033e20:	9311      	str	r3, [sp, #68]	@ 0x44
 8033e22:	f015 0302 	ands.w	r3, r5, #2
 8033e26:	931c      	str	r3, [sp, #112]	@ 0x70
 8033e28:	bf1e      	ittt	ne
 8033e2a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8033e2c:	3302      	addne	r3, #2
 8033e2e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8033e30:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8033e34:	931d      	str	r3, [sp, #116]	@ 0x74
 8033e36:	d122      	bne.n	8033e7e <_vfprintf_r+0x7b6>
 8033e38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8033e3a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8033e3c:	1a9b      	subs	r3, r3, r2
 8033e3e:	2b00      	cmp	r3, #0
 8033e40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8033e42:	dd1c      	ble.n	8033e7e <_vfprintf_r+0x7b6>
 8033e44:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8033e46:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8033e4a:	2810      	cmp	r0, #16
 8033e4c:	489f      	ldr	r0, [pc, #636]	@ (80340cc <_vfprintf_r+0xa04>)
 8033e4e:	6020      	str	r0, [r4, #0]
 8033e50:	f102 0201 	add.w	r2, r2, #1
 8033e54:	f104 0108 	add.w	r1, r4, #8
 8033e58:	f300 8297 	bgt.w	803438a <_vfprintf_r+0xcc2>
 8033e5c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8033e5e:	6060      	str	r0, [r4, #4]
 8033e60:	4403      	add	r3, r0
 8033e62:	2a07      	cmp	r2, #7
 8033e64:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8033e68:	f340 82a4 	ble.w	80343b4 <_vfprintf_r+0xcec>
 8033e6c:	9803      	ldr	r0, [sp, #12]
 8033e6e:	aa26      	add	r2, sp, #152	@ 0x98
 8033e70:	4659      	mov	r1, fp
 8033e72:	f000 fe95 	bl	8034ba0 <__sprint_r>
 8033e76:	2800      	cmp	r0, #0
 8033e78:	f040 85ed 	bne.w	8034a56 <_vfprintf_r+0x138e>
 8033e7c:	ac29      	add	r4, sp, #164	@ 0xa4
 8033e7e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8033e82:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033e84:	b16a      	cbz	r2, 8033ea2 <_vfprintf_r+0x7da>
 8033e86:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8033e8a:	6022      	str	r2, [r4, #0]
 8033e8c:	2201      	movs	r2, #1
 8033e8e:	4413      	add	r3, r2
 8033e90:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033e92:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033e94:	6062      	str	r2, [r4, #4]
 8033e96:	4413      	add	r3, r2
 8033e98:	2b07      	cmp	r3, #7
 8033e9a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033e9c:	f300 828c 	bgt.w	80343b8 <_vfprintf_r+0xcf0>
 8033ea0:	3408      	adds	r4, #8
 8033ea2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8033ea4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033ea6:	b162      	cbz	r2, 8033ec2 <_vfprintf_r+0x7fa>
 8033ea8:	aa1f      	add	r2, sp, #124	@ 0x7c
 8033eaa:	6022      	str	r2, [r4, #0]
 8033eac:	2202      	movs	r2, #2
 8033eae:	4413      	add	r3, r2
 8033eb0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033eb2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033eb4:	6062      	str	r2, [r4, #4]
 8033eb6:	3301      	adds	r3, #1
 8033eb8:	2b07      	cmp	r3, #7
 8033eba:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033ebc:	f300 8286 	bgt.w	80343cc <_vfprintf_r+0xd04>
 8033ec0:	3408      	adds	r4, #8
 8033ec2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8033ec4:	2b80      	cmp	r3, #128	@ 0x80
 8033ec6:	d122      	bne.n	8033f0e <_vfprintf_r+0x846>
 8033ec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8033eca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8033ecc:	1a9b      	subs	r3, r3, r2
 8033ece:	2b00      	cmp	r3, #0
 8033ed0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8033ed2:	dd1c      	ble.n	8033f0e <_vfprintf_r+0x846>
 8033ed4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8033ed6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8033eda:	2810      	cmp	r0, #16
 8033edc:	487c      	ldr	r0, [pc, #496]	@ (80340d0 <_vfprintf_r+0xa08>)
 8033ede:	6020      	str	r0, [r4, #0]
 8033ee0:	f102 0201 	add.w	r2, r2, #1
 8033ee4:	f104 0108 	add.w	r1, r4, #8
 8033ee8:	f300 827a 	bgt.w	80343e0 <_vfprintf_r+0xd18>
 8033eec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8033eee:	6060      	str	r0, [r4, #4]
 8033ef0:	4403      	add	r3, r0
 8033ef2:	2a07      	cmp	r2, #7
 8033ef4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8033ef8:	f340 8287 	ble.w	803440a <_vfprintf_r+0xd42>
 8033efc:	9803      	ldr	r0, [sp, #12]
 8033efe:	aa26      	add	r2, sp, #152	@ 0x98
 8033f00:	4659      	mov	r1, fp
 8033f02:	f000 fe4d 	bl	8034ba0 <__sprint_r>
 8033f06:	2800      	cmp	r0, #0
 8033f08:	f040 85a5 	bne.w	8034a56 <_vfprintf_r+0x138e>
 8033f0c:	ac29      	add	r4, sp, #164	@ 0xa4
 8033f0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8033f10:	eba3 0309 	sub.w	r3, r3, r9
 8033f14:	2b00      	cmp	r3, #0
 8033f16:	9310      	str	r3, [sp, #64]	@ 0x40
 8033f18:	dd1c      	ble.n	8033f54 <_vfprintf_r+0x88c>
 8033f1a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8033f1c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8033f20:	2810      	cmp	r0, #16
 8033f22:	486b      	ldr	r0, [pc, #428]	@ (80340d0 <_vfprintf_r+0xa08>)
 8033f24:	6020      	str	r0, [r4, #0]
 8033f26:	f102 0201 	add.w	r2, r2, #1
 8033f2a:	f104 0108 	add.w	r1, r4, #8
 8033f2e:	f300 826e 	bgt.w	803440e <_vfprintf_r+0xd46>
 8033f32:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8033f34:	6060      	str	r0, [r4, #4]
 8033f36:	4403      	add	r3, r0
 8033f38:	2a07      	cmp	r2, #7
 8033f3a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8033f3e:	f340 827b 	ble.w	8034438 <_vfprintf_r+0xd70>
 8033f42:	9803      	ldr	r0, [sp, #12]
 8033f44:	aa26      	add	r2, sp, #152	@ 0x98
 8033f46:	4659      	mov	r1, fp
 8033f48:	f000 fe2a 	bl	8034ba0 <__sprint_r>
 8033f4c:	2800      	cmp	r0, #0
 8033f4e:	f040 8582 	bne.w	8034a56 <_vfprintf_r+0x138e>
 8033f52:	ac29      	add	r4, sp, #164	@ 0xa4
 8033f54:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033f56:	9310      	str	r3, [sp, #64]	@ 0x40
 8033f58:	05e8      	lsls	r0, r5, #23
 8033f5a:	f100 8273 	bmi.w	8034444 <_vfprintf_r+0xd7c>
 8033f5e:	444b      	add	r3, r9
 8033f60:	9328      	str	r3, [sp, #160]	@ 0xa0
 8033f62:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8033f64:	3301      	adds	r3, #1
 8033f66:	2b07      	cmp	r3, #7
 8033f68:	e9c4 8900 	strd	r8, r9, [r4]
 8033f6c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033f6e:	f300 82af 	bgt.w	80344d0 <_vfprintf_r+0xe08>
 8033f72:	3408      	adds	r4, #8
 8033f74:	0768      	lsls	r0, r5, #29
 8033f76:	f100 8550 	bmi.w	8034a1a <_vfprintf_r+0x1352>
 8033f7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8033f7e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8033f80:	428a      	cmp	r2, r1
 8033f82:	bfac      	ite	ge
 8033f84:	189b      	addge	r3, r3, r2
 8033f86:	185b      	addlt	r3, r3, r1
 8033f88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8033f8a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8033f8c:	b13b      	cbz	r3, 8033f9e <_vfprintf_r+0x8d6>
 8033f8e:	9803      	ldr	r0, [sp, #12]
 8033f90:	aa26      	add	r2, sp, #152	@ 0x98
 8033f92:	4659      	mov	r1, fp
 8033f94:	f000 fe04 	bl	8034ba0 <__sprint_r>
 8033f98:	2800      	cmp	r0, #0
 8033f9a:	f040 855c 	bne.w	8034a56 <_vfprintf_r+0x138e>
 8033f9e:	2300      	movs	r3, #0
 8033fa0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8033fa2:	f1ba 0f00 	cmp.w	sl, #0
 8033fa6:	f040 8572 	bne.w	8034a8e <_vfprintf_r+0x13c6>
 8033faa:	9e07      	ldr	r6, [sp, #28]
 8033fac:	ac29      	add	r4, sp, #164	@ 0xa4
 8033fae:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8033fb2:	e407      	b.n	80337c4 <_vfprintf_r+0xfc>
 8033fb4:	f802 0c01 	strb.w	r0, [r2, #-1]
 8033fb8:	e6aa      	b.n	8033d10 <_vfprintf_r+0x648>
 8033fba:	f803 0b01 	strb.w	r0, [r3], #1
 8033fbe:	e675      	b.n	8033cac <_vfprintf_r+0x5e4>
 8033fc0:	9b08      	ldr	r3, [sp, #32]
 8033fc2:	2b46      	cmp	r3, #70	@ 0x46
 8033fc4:	d005      	beq.n	8033fd2 <_vfprintf_r+0x90a>
 8033fc6:	2b45      	cmp	r3, #69	@ 0x45
 8033fc8:	d11a      	bne.n	8034000 <_vfprintf_r+0x938>
 8033fca:	f109 0601 	add.w	r6, r9, #1
 8033fce:	2102      	movs	r1, #2
 8033fd0:	e001      	b.n	8033fd6 <_vfprintf_r+0x90e>
 8033fd2:	464e      	mov	r6, r9
 8033fd4:	2103      	movs	r1, #3
 8033fd6:	ab24      	add	r3, sp, #144	@ 0x90
 8033fd8:	9301      	str	r3, [sp, #4]
 8033fda:	ab21      	add	r3, sp, #132	@ 0x84
 8033fdc:	9300      	str	r3, [sp, #0]
 8033fde:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8033fe2:	ab20      	add	r3, sp, #128	@ 0x80
 8033fe4:	9803      	ldr	r0, [sp, #12]
 8033fe6:	4632      	mov	r2, r6
 8033fe8:	f003 fbb6 	bl	8037758 <_dtoa_r>
 8033fec:	9b08      	ldr	r3, [sp, #32]
 8033fee:	2b47      	cmp	r3, #71	@ 0x47
 8033ff0:	4680      	mov	r8, r0
 8033ff2:	d119      	bne.n	8034028 <_vfprintf_r+0x960>
 8033ff4:	07e8      	lsls	r0, r5, #31
 8033ff6:	d405      	bmi.n	8034004 <_vfprintf_r+0x93c>
 8033ff8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8033ffa:	eba3 0308 	sub.w	r3, r3, r8
 8033ffe:	e699      	b.n	8033d34 <_vfprintf_r+0x66c>
 8034000:	464e      	mov	r6, r9
 8034002:	e7e4      	b.n	8033fce <_vfprintf_r+0x906>
 8034004:	eb08 0706 	add.w	r7, r8, r6
 8034008:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 803400c:	2200      	movs	r2, #0
 803400e:	2300      	movs	r3, #0
 8034010:	f7dc fd72 	bl	8010af8 <__aeabi_dcmpeq>
 8034014:	b100      	cbz	r0, 8034018 <_vfprintf_r+0x950>
 8034016:	9724      	str	r7, [sp, #144]	@ 0x90
 8034018:	2230      	movs	r2, #48	@ 0x30
 803401a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 803401c:	429f      	cmp	r7, r3
 803401e:	d9eb      	bls.n	8033ff8 <_vfprintf_r+0x930>
 8034020:	1c59      	adds	r1, r3, #1
 8034022:	9124      	str	r1, [sp, #144]	@ 0x90
 8034024:	701a      	strb	r2, [r3, #0]
 8034026:	e7f8      	b.n	803401a <_vfprintf_r+0x952>
 8034028:	9b08      	ldr	r3, [sp, #32]
 803402a:	2b46      	cmp	r3, #70	@ 0x46
 803402c:	eb00 0706 	add.w	r7, r0, r6
 8034030:	d1ea      	bne.n	8034008 <_vfprintf_r+0x940>
 8034032:	7803      	ldrb	r3, [r0, #0]
 8034034:	2b30      	cmp	r3, #48	@ 0x30
 8034036:	d109      	bne.n	803404c <_vfprintf_r+0x984>
 8034038:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 803403c:	2200      	movs	r2, #0
 803403e:	2300      	movs	r3, #0
 8034040:	f7dc fd5a 	bl	8010af8 <__aeabi_dcmpeq>
 8034044:	b910      	cbnz	r0, 803404c <_vfprintf_r+0x984>
 8034046:	f1c6 0601 	rsb	r6, r6, #1
 803404a:	9620      	str	r6, [sp, #128]	@ 0x80
 803404c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803404e:	441f      	add	r7, r3
 8034050:	e7da      	b.n	8034008 <_vfprintf_r+0x940>
 8034052:	9b08      	ldr	r3, [sp, #32]
 8034054:	2b46      	cmp	r3, #70	@ 0x46
 8034056:	f47f ae7b 	bne.w	8033d50 <_vfprintf_r+0x688>
 803405a:	f005 0301 	and.w	r3, r5, #1
 803405e:	2e00      	cmp	r6, #0
 8034060:	ea43 0309 	orr.w	r3, r3, r9
 8034064:	dd25      	ble.n	80340b2 <_vfprintf_r+0x9ea>
 8034066:	b37b      	cbz	r3, 80340c8 <_vfprintf_r+0xa00>
 8034068:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803406a:	18f3      	adds	r3, r6, r3
 803406c:	4499      	add	r9, r3
 803406e:	2366      	movs	r3, #102	@ 0x66
 8034070:	9306      	str	r3, [sp, #24]
 8034072:	e033      	b.n	80340dc <_vfprintf_r+0xa14>
 8034074:	f813 7b01 	ldrb.w	r7, [r3], #1
 8034078:	f806 7f01 	strb.w	r7, [r6, #1]!
 803407c:	e69f      	b.n	8033dbe <_vfprintf_r+0x6f6>
 803407e:	b941      	cbnz	r1, 8034092 <_vfprintf_r+0x9ca>
 8034080:	2230      	movs	r2, #48	@ 0x30
 8034082:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8034086:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 803408a:	3330      	adds	r3, #48	@ 0x30
 803408c:	f802 3b01 	strb.w	r3, [r2], #1
 8034090:	e6a1      	b.n	8033dd6 <_vfprintf_r+0x70e>
 8034092:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8034096:	e7f8      	b.n	803408a <_vfprintf_r+0x9c2>
 8034098:	9b04      	ldr	r3, [sp, #16]
 803409a:	42b3      	cmp	r3, r6
 803409c:	dd0d      	ble.n	80340ba <_vfprintf_r+0x9f2>
 803409e:	9b04      	ldr	r3, [sp, #16]
 80340a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80340a2:	2e00      	cmp	r6, #0
 80340a4:	eb03 0902 	add.w	r9, r3, r2
 80340a8:	dc0c      	bgt.n	80340c4 <_vfprintf_r+0x9fc>
 80340aa:	f1c6 0301 	rsb	r3, r6, #1
 80340ae:	4499      	add	r9, r3
 80340b0:	e008      	b.n	80340c4 <_vfprintf_r+0x9fc>
 80340b2:	b17b      	cbz	r3, 80340d4 <_vfprintf_r+0xa0c>
 80340b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80340b6:	3301      	adds	r3, #1
 80340b8:	e7d8      	b.n	803406c <_vfprintf_r+0x9a4>
 80340ba:	07eb      	lsls	r3, r5, #31
 80340bc:	d521      	bpl.n	8034102 <_vfprintf_r+0xa3a>
 80340be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80340c0:	eb06 0903 	add.w	r9, r6, r3
 80340c4:	2367      	movs	r3, #103	@ 0x67
 80340c6:	e7d3      	b.n	8034070 <_vfprintf_r+0x9a8>
 80340c8:	46b1      	mov	r9, r6
 80340ca:	e7d0      	b.n	803406e <_vfprintf_r+0x9a6>
 80340cc:	08044cac 	.word	0x08044cac
 80340d0:	08044c9c 	.word	0x08044c9c
 80340d4:	2366      	movs	r3, #102	@ 0x66
 80340d6:	9306      	str	r3, [sp, #24]
 80340d8:	f04f 0901 	mov.w	r9, #1
 80340dc:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 80340e0:	9308      	str	r3, [sp, #32]
 80340e2:	d01f      	beq.n	8034124 <_vfprintf_r+0xa5c>
 80340e4:	2700      	movs	r7, #0
 80340e6:	2e00      	cmp	r6, #0
 80340e8:	9708      	str	r7, [sp, #32]
 80340ea:	f77f ae88 	ble.w	8033dfe <_vfprintf_r+0x736>
 80340ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80340f0:	781b      	ldrb	r3, [r3, #0]
 80340f2:	2bff      	cmp	r3, #255	@ 0xff
 80340f4:	d107      	bne.n	8034106 <_vfprintf_r+0xa3e>
 80340f6:	9b08      	ldr	r3, [sp, #32]
 80340f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80340fa:	443b      	add	r3, r7
 80340fc:	fb02 9903 	mla	r9, r2, r3, r9
 8034100:	e67d      	b.n	8033dfe <_vfprintf_r+0x736>
 8034102:	46b1      	mov	r9, r6
 8034104:	e7de      	b.n	80340c4 <_vfprintf_r+0x9fc>
 8034106:	42b3      	cmp	r3, r6
 8034108:	daf5      	bge.n	80340f6 <_vfprintf_r+0xa2e>
 803410a:	1af6      	subs	r6, r6, r3
 803410c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803410e:	785b      	ldrb	r3, [r3, #1]
 8034110:	b133      	cbz	r3, 8034120 <_vfprintf_r+0xa58>
 8034112:	9b08      	ldr	r3, [sp, #32]
 8034114:	3301      	adds	r3, #1
 8034116:	9308      	str	r3, [sp, #32]
 8034118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803411a:	3301      	adds	r3, #1
 803411c:	9309      	str	r3, [sp, #36]	@ 0x24
 803411e:	e7e6      	b.n	80340ee <_vfprintf_r+0xa26>
 8034120:	3701      	adds	r7, #1
 8034122:	e7e4      	b.n	80340ee <_vfprintf_r+0xa26>
 8034124:	9f08      	ldr	r7, [sp, #32]
 8034126:	e66a      	b.n	8033dfe <_vfprintf_r+0x736>
 8034128:	232d      	movs	r3, #45	@ 0x2d
 803412a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803412e:	e66a      	b.n	8033e06 <_vfprintf_r+0x73e>
 8034130:	06af      	lsls	r7, r5, #26
 8034132:	d507      	bpl.n	8034144 <_vfprintf_r+0xa7c>
 8034134:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8034136:	6833      	ldr	r3, [r6, #0]
 8034138:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 803413a:	17d2      	asrs	r2, r2, #31
 803413c:	e9c3 1200 	strd	r1, r2, [r3]
 8034140:	3604      	adds	r6, #4
 8034142:	e734      	b.n	8033fae <_vfprintf_r+0x8e6>
 8034144:	06e8      	lsls	r0, r5, #27
 8034146:	d503      	bpl.n	8034150 <_vfprintf_r+0xa88>
 8034148:	6833      	ldr	r3, [r6, #0]
 803414a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803414c:	601a      	str	r2, [r3, #0]
 803414e:	e7f7      	b.n	8034140 <_vfprintf_r+0xa78>
 8034150:	0669      	lsls	r1, r5, #25
 8034152:	d503      	bpl.n	803415c <_vfprintf_r+0xa94>
 8034154:	6833      	ldr	r3, [r6, #0]
 8034156:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8034158:	801a      	strh	r2, [r3, #0]
 803415a:	e7f1      	b.n	8034140 <_vfprintf_r+0xa78>
 803415c:	05aa      	lsls	r2, r5, #22
 803415e:	d5f3      	bpl.n	8034148 <_vfprintf_r+0xa80>
 8034160:	6833      	ldr	r3, [r6, #0]
 8034162:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8034164:	701a      	strb	r2, [r3, #0]
 8034166:	e7eb      	b.n	8034140 <_vfprintf_r+0xa78>
 8034168:	f045 0510 	orr.w	r5, r5, #16
 803416c:	f015 0320 	ands.w	r3, r5, #32
 8034170:	d020      	beq.n	80341b4 <_vfprintf_r+0xaec>
 8034172:	3607      	adds	r6, #7
 8034174:	f026 0307 	bic.w	r3, r6, #7
 8034178:	461a      	mov	r2, r3
 803417a:	685f      	ldr	r7, [r3, #4]
 803417c:	f852 6b08 	ldr.w	r6, [r2], #8
 8034180:	9207      	str	r2, [sp, #28]
 8034182:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8034186:	2300      	movs	r3, #0
 8034188:	2200      	movs	r2, #0
 803418a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 803418e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8034192:	f000 8491 	beq.w	8034ab8 <_vfprintf_r+0x13f0>
 8034196:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 803419a:	9208      	str	r2, [sp, #32]
 803419c:	ea56 0207 	orrs.w	r2, r6, r7
 80341a0:	f040 848f 	bne.w	8034ac2 <_vfprintf_r+0x13fa>
 80341a4:	f1b9 0f00 	cmp.w	r9, #0
 80341a8:	f000 80db 	beq.w	8034362 <_vfprintf_r+0xc9a>
 80341ac:	2b01      	cmp	r3, #1
 80341ae:	f040 848b 	bne.w	8034ac8 <_vfprintf_r+0x1400>
 80341b2:	e083      	b.n	80342bc <_vfprintf_r+0xbf4>
 80341b4:	4632      	mov	r2, r6
 80341b6:	f015 0710 	ands.w	r7, r5, #16
 80341ba:	f852 6b04 	ldr.w	r6, [r2], #4
 80341be:	9207      	str	r2, [sp, #28]
 80341c0:	d001      	beq.n	80341c6 <_vfprintf_r+0xafe>
 80341c2:	461f      	mov	r7, r3
 80341c4:	e7dd      	b.n	8034182 <_vfprintf_r+0xaba>
 80341c6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80341ca:	d001      	beq.n	80341d0 <_vfprintf_r+0xb08>
 80341cc:	b2b6      	uxth	r6, r6
 80341ce:	e7d8      	b.n	8034182 <_vfprintf_r+0xaba>
 80341d0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80341d4:	d0d5      	beq.n	8034182 <_vfprintf_r+0xaba>
 80341d6:	b2f6      	uxtb	r6, r6
 80341d8:	e7f3      	b.n	80341c2 <_vfprintf_r+0xafa>
 80341da:	4633      	mov	r3, r6
 80341dc:	2278      	movs	r2, #120	@ 0x78
 80341de:	f853 6b04 	ldr.w	r6, [r3], #4
 80341e2:	9307      	str	r3, [sp, #28]
 80341e4:	f647 0330 	movw	r3, #30768	@ 0x7830
 80341e8:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 80341ec:	4b93      	ldr	r3, [pc, #588]	@ (803443c <_vfprintf_r+0xd74>)
 80341ee:	9319      	str	r3, [sp, #100]	@ 0x64
 80341f0:	2700      	movs	r7, #0
 80341f2:	f045 0502 	orr.w	r5, r5, #2
 80341f6:	2302      	movs	r3, #2
 80341f8:	9206      	str	r2, [sp, #24]
 80341fa:	e7c5      	b.n	8034188 <_vfprintf_r+0xac0>
 80341fc:	4633      	mov	r3, r6
 80341fe:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8034202:	f853 8b04 	ldr.w	r8, [r3], #4
 8034206:	9307      	str	r3, [sp, #28]
 8034208:	f04f 0600 	mov.w	r6, #0
 803420c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8034210:	d00f      	beq.n	8034232 <_vfprintf_r+0xb6a>
 8034212:	464a      	mov	r2, r9
 8034214:	4631      	mov	r1, r6
 8034216:	4640      	mov	r0, r8
 8034218:	f7db fff2 	bl	8010200 <memchr>
 803421c:	4682      	mov	sl, r0
 803421e:	2800      	cmp	r0, #0
 8034220:	f43f ac7a 	beq.w	8033b18 <_vfprintf_r+0x450>
 8034224:	eba0 0908 	sub.w	r9, r0, r8
 8034228:	46b2      	mov	sl, r6
 803422a:	9610      	str	r6, [sp, #64]	@ 0x40
 803422c:	4637      	mov	r7, r6
 803422e:	9608      	str	r6, [sp, #32]
 8034230:	e5ec      	b.n	8033e0c <_vfprintf_r+0x744>
 8034232:	4640      	mov	r0, r8
 8034234:	f7dc f834 	bl	80102a0 <strlen>
 8034238:	46b2      	mov	sl, r6
 803423a:	4681      	mov	r9, r0
 803423c:	e46c      	b.n	8033b18 <_vfprintf_r+0x450>
 803423e:	f045 0510 	orr.w	r5, r5, #16
 8034242:	f015 0320 	ands.w	r3, r5, #32
 8034246:	d009      	beq.n	803425c <_vfprintf_r+0xb94>
 8034248:	3607      	adds	r6, #7
 803424a:	f026 0307 	bic.w	r3, r6, #7
 803424e:	461a      	mov	r2, r3
 8034250:	685f      	ldr	r7, [r3, #4]
 8034252:	f852 6b08 	ldr.w	r6, [r2], #8
 8034256:	9207      	str	r2, [sp, #28]
 8034258:	2301      	movs	r3, #1
 803425a:	e795      	b.n	8034188 <_vfprintf_r+0xac0>
 803425c:	4632      	mov	r2, r6
 803425e:	f015 0710 	ands.w	r7, r5, #16
 8034262:	f852 6b04 	ldr.w	r6, [r2], #4
 8034266:	9207      	str	r2, [sp, #28]
 8034268:	d001      	beq.n	803426e <_vfprintf_r+0xba6>
 803426a:	461f      	mov	r7, r3
 803426c:	e7f4      	b.n	8034258 <_vfprintf_r+0xb90>
 803426e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8034272:	d001      	beq.n	8034278 <_vfprintf_r+0xbb0>
 8034274:	b2b6      	uxth	r6, r6
 8034276:	e7ef      	b.n	8034258 <_vfprintf_r+0xb90>
 8034278:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 803427c:	d0ec      	beq.n	8034258 <_vfprintf_r+0xb90>
 803427e:	b2f6      	uxtb	r6, r6
 8034280:	e7f3      	b.n	803426a <_vfprintf_r+0xba2>
 8034282:	4b6f      	ldr	r3, [pc, #444]	@ (8034440 <_vfprintf_r+0xd78>)
 8034284:	f7ff bb33 	b.w	80338ee <_vfprintf_r+0x226>
 8034288:	4632      	mov	r2, r6
 803428a:	f015 0710 	ands.w	r7, r5, #16
 803428e:	f852 6b04 	ldr.w	r6, [r2], #4
 8034292:	9207      	str	r2, [sp, #28]
 8034294:	d002      	beq.n	803429c <_vfprintf_r+0xbd4>
 8034296:	461f      	mov	r7, r3
 8034298:	f7ff bb36 	b.w	8033908 <_vfprintf_r+0x240>
 803429c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80342a0:	d002      	beq.n	80342a8 <_vfprintf_r+0xbe0>
 80342a2:	b2b6      	uxth	r6, r6
 80342a4:	f7ff bb30 	b.w	8033908 <_vfprintf_r+0x240>
 80342a8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80342ac:	f43f ab2c 	beq.w	8033908 <_vfprintf_r+0x240>
 80342b0:	b2f6      	uxtb	r6, r6
 80342b2:	e7f0      	b.n	8034296 <_vfprintf_r+0xbce>
 80342b4:	2e0a      	cmp	r6, #10
 80342b6:	f177 0300 	sbcs.w	r3, r7, #0
 80342ba:	d207      	bcs.n	80342cc <_vfprintf_r+0xc04>
 80342bc:	3630      	adds	r6, #48	@ 0x30
 80342be:	b2f6      	uxtb	r6, r6
 80342c0:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 80342c4:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 80342c8:	f000 bc1a 	b.w	8034b00 <_vfprintf_r+0x1438>
 80342cc:	2300      	movs	r3, #0
 80342ce:	9304      	str	r3, [sp, #16]
 80342d0:	9b08      	ldr	r3, [sp, #32]
 80342d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80342d6:	ad52      	add	r5, sp, #328	@ 0x148
 80342d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80342da:	220a      	movs	r2, #10
 80342dc:	2300      	movs	r3, #0
 80342de:	4630      	mov	r0, r6
 80342e0:	4639      	mov	r1, r7
 80342e2:	f7dc fd39 	bl	8010d58 <__aeabi_uldivmod>
 80342e6:	9b04      	ldr	r3, [sp, #16]
 80342e8:	9011      	str	r0, [sp, #68]	@ 0x44
 80342ea:	3301      	adds	r3, #1
 80342ec:	9304      	str	r3, [sp, #16]
 80342ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80342f0:	3230      	adds	r2, #48	@ 0x30
 80342f2:	468a      	mov	sl, r1
 80342f4:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 80342f8:	f805 2c01 	strb.w	r2, [r5, #-1]
 80342fc:	b1d3      	cbz	r3, 8034334 <_vfprintf_r+0xc6c>
 80342fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034300:	9a04      	ldr	r2, [sp, #16]
 8034302:	781b      	ldrb	r3, [r3, #0]
 8034304:	429a      	cmp	r2, r3
 8034306:	d115      	bne.n	8034334 <_vfprintf_r+0xc6c>
 8034308:	2aff      	cmp	r2, #255	@ 0xff
 803430a:	d013      	beq.n	8034334 <_vfprintf_r+0xc6c>
 803430c:	2e0a      	cmp	r6, #10
 803430e:	f177 0300 	sbcs.w	r3, r7, #0
 8034312:	d30f      	bcc.n	8034334 <_vfprintf_r+0xc6c>
 8034314:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8034316:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8034318:	eba8 0803 	sub.w	r8, r8, r3
 803431c:	461a      	mov	r2, r3
 803431e:	4640      	mov	r0, r8
 8034320:	f001 ff25 	bl	803616e <strncpy>
 8034324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034326:	785b      	ldrb	r3, [r3, #1]
 8034328:	b11b      	cbz	r3, 8034332 <_vfprintf_r+0xc6a>
 803432a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803432c:	3301      	adds	r3, #1
 803432e:	9309      	str	r3, [sp, #36]	@ 0x24
 8034330:	2300      	movs	r3, #0
 8034332:	9304      	str	r3, [sp, #16]
 8034334:	2e0a      	cmp	r6, #10
 8034336:	f177 0700 	sbcs.w	r7, r7, #0
 803433a:	f0c0 83e1 	bcc.w	8034b00 <_vfprintf_r+0x1438>
 803433e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8034340:	4657      	mov	r7, sl
 8034342:	4645      	mov	r5, r8
 8034344:	e7c9      	b.n	80342da <_vfprintf_r+0xc12>
 8034346:	f006 030f 	and.w	r3, r6, #15
 803434a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803434c:	0936      	lsrs	r6, r6, #4
 803434e:	5cd3      	ldrb	r3, [r2, r3]
 8034350:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8034354:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8034358:	093f      	lsrs	r7, r7, #4
 803435a:	ea56 0307 	orrs.w	r3, r6, r7
 803435e:	d1f2      	bne.n	8034346 <_vfprintf_r+0xc7e>
 8034360:	e3ce      	b.n	8034b00 <_vfprintf_r+0x1438>
 8034362:	b91b      	cbnz	r3, 803436c <_vfprintf_r+0xca4>
 8034364:	07ed      	lsls	r5, r5, #31
 8034366:	d501      	bpl.n	803436c <_vfprintf_r+0xca4>
 8034368:	2630      	movs	r6, #48	@ 0x30
 803436a:	e7a9      	b.n	80342c0 <_vfprintf_r+0xbf8>
 803436c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8034370:	e3c6      	b.n	8034b00 <_vfprintf_r+0x1438>
 8034372:	9b06      	ldr	r3, [sp, #24]
 8034374:	2b00      	cmp	r3, #0
 8034376:	f000 8390 	beq.w	8034a9a <_vfprintf_r+0x13d2>
 803437a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 803437e:	2300      	movs	r3, #0
 8034380:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8034384:	9607      	str	r6, [sp, #28]
 8034386:	f7ff bb5c 	b.w	8033a42 <_vfprintf_r+0x37a>
 803438a:	2010      	movs	r0, #16
 803438c:	4403      	add	r3, r0
 803438e:	2a07      	cmp	r2, #7
 8034390:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8034394:	6060      	str	r0, [r4, #4]
 8034396:	dd08      	ble.n	80343aa <_vfprintf_r+0xce2>
 8034398:	9803      	ldr	r0, [sp, #12]
 803439a:	aa26      	add	r2, sp, #152	@ 0x98
 803439c:	4659      	mov	r1, fp
 803439e:	f000 fbff 	bl	8034ba0 <__sprint_r>
 80343a2:	2800      	cmp	r0, #0
 80343a4:	f040 8357 	bne.w	8034a56 <_vfprintf_r+0x138e>
 80343a8:	a929      	add	r1, sp, #164	@ 0xa4
 80343aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80343ac:	3b10      	subs	r3, #16
 80343ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 80343b0:	460c      	mov	r4, r1
 80343b2:	e547      	b.n	8033e44 <_vfprintf_r+0x77c>
 80343b4:	460c      	mov	r4, r1
 80343b6:	e562      	b.n	8033e7e <_vfprintf_r+0x7b6>
 80343b8:	9803      	ldr	r0, [sp, #12]
 80343ba:	aa26      	add	r2, sp, #152	@ 0x98
 80343bc:	4659      	mov	r1, fp
 80343be:	f000 fbef 	bl	8034ba0 <__sprint_r>
 80343c2:	2800      	cmp	r0, #0
 80343c4:	f040 8347 	bne.w	8034a56 <_vfprintf_r+0x138e>
 80343c8:	ac29      	add	r4, sp, #164	@ 0xa4
 80343ca:	e56a      	b.n	8033ea2 <_vfprintf_r+0x7da>
 80343cc:	9803      	ldr	r0, [sp, #12]
 80343ce:	aa26      	add	r2, sp, #152	@ 0x98
 80343d0:	4659      	mov	r1, fp
 80343d2:	f000 fbe5 	bl	8034ba0 <__sprint_r>
 80343d6:	2800      	cmp	r0, #0
 80343d8:	f040 833d 	bne.w	8034a56 <_vfprintf_r+0x138e>
 80343dc:	ac29      	add	r4, sp, #164	@ 0xa4
 80343de:	e570      	b.n	8033ec2 <_vfprintf_r+0x7fa>
 80343e0:	2010      	movs	r0, #16
 80343e2:	4403      	add	r3, r0
 80343e4:	2a07      	cmp	r2, #7
 80343e6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80343ea:	6060      	str	r0, [r4, #4]
 80343ec:	dd08      	ble.n	8034400 <_vfprintf_r+0xd38>
 80343ee:	9803      	ldr	r0, [sp, #12]
 80343f0:	aa26      	add	r2, sp, #152	@ 0x98
 80343f2:	4659      	mov	r1, fp
 80343f4:	f000 fbd4 	bl	8034ba0 <__sprint_r>
 80343f8:	2800      	cmp	r0, #0
 80343fa:	f040 832c 	bne.w	8034a56 <_vfprintf_r+0x138e>
 80343fe:	a929      	add	r1, sp, #164	@ 0xa4
 8034400:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8034402:	3b10      	subs	r3, #16
 8034404:	9313      	str	r3, [sp, #76]	@ 0x4c
 8034406:	460c      	mov	r4, r1
 8034408:	e564      	b.n	8033ed4 <_vfprintf_r+0x80c>
 803440a:	460c      	mov	r4, r1
 803440c:	e57f      	b.n	8033f0e <_vfprintf_r+0x846>
 803440e:	2010      	movs	r0, #16
 8034410:	4403      	add	r3, r0
 8034412:	2a07      	cmp	r2, #7
 8034414:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8034418:	6060      	str	r0, [r4, #4]
 803441a:	dd08      	ble.n	803442e <_vfprintf_r+0xd66>
 803441c:	9803      	ldr	r0, [sp, #12]
 803441e:	aa26      	add	r2, sp, #152	@ 0x98
 8034420:	4659      	mov	r1, fp
 8034422:	f000 fbbd 	bl	8034ba0 <__sprint_r>
 8034426:	2800      	cmp	r0, #0
 8034428:	f040 8315 	bne.w	8034a56 <_vfprintf_r+0x138e>
 803442c:	a929      	add	r1, sp, #164	@ 0xa4
 803442e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034430:	3b10      	subs	r3, #16
 8034432:	9310      	str	r3, [sp, #64]	@ 0x40
 8034434:	460c      	mov	r4, r1
 8034436:	e570      	b.n	8033f1a <_vfprintf_r+0x852>
 8034438:	460c      	mov	r4, r1
 803443a:	e58b      	b.n	8033f54 <_vfprintf_r+0x88c>
 803443c:	08044c78 	.word	0x08044c78
 8034440:	08044c89 	.word	0x08044c89
 8034444:	9b06      	ldr	r3, [sp, #24]
 8034446:	2b65      	cmp	r3, #101	@ 0x65
 8034448:	f340 8245 	ble.w	80348d6 <_vfprintf_r+0x120e>
 803444c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8034450:	2200      	movs	r2, #0
 8034452:	2300      	movs	r3, #0
 8034454:	f7dc fb50 	bl	8010af8 <__aeabi_dcmpeq>
 8034458:	2800      	cmp	r0, #0
 803445a:	d06a      	beq.n	8034532 <_vfprintf_r+0xe6a>
 803445c:	4b73      	ldr	r3, [pc, #460]	@ (803462c <_vfprintf_r+0xf64>)
 803445e:	6023      	str	r3, [r4, #0]
 8034460:	2301      	movs	r3, #1
 8034462:	6063      	str	r3, [r4, #4]
 8034464:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034466:	3301      	adds	r3, #1
 8034468:	9328      	str	r3, [sp, #160]	@ 0xa0
 803446a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803446c:	3301      	adds	r3, #1
 803446e:	2b07      	cmp	r3, #7
 8034470:	9327      	str	r3, [sp, #156]	@ 0x9c
 8034472:	dc37      	bgt.n	80344e4 <_vfprintf_r+0xe1c>
 8034474:	3408      	adds	r4, #8
 8034476:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8034478:	9a04      	ldr	r2, [sp, #16]
 803447a:	4293      	cmp	r3, r2
 803447c:	db02      	blt.n	8034484 <_vfprintf_r+0xdbc>
 803447e:	07e9      	lsls	r1, r5, #31
 8034480:	f57f ad78 	bpl.w	8033f74 <_vfprintf_r+0x8ac>
 8034484:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8034486:	6023      	str	r3, [r4, #0]
 8034488:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803448a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803448c:	6063      	str	r3, [r4, #4]
 803448e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8034490:	4413      	add	r3, r2
 8034492:	9328      	str	r3, [sp, #160]	@ 0xa0
 8034494:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8034496:	3301      	adds	r3, #1
 8034498:	2b07      	cmp	r3, #7
 803449a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803449c:	dc2c      	bgt.n	80344f8 <_vfprintf_r+0xe30>
 803449e:	3408      	adds	r4, #8
 80344a0:	9b04      	ldr	r3, [sp, #16]
 80344a2:	1e5e      	subs	r6, r3, #1
 80344a4:	2e00      	cmp	r6, #0
 80344a6:	f77f ad65 	ble.w	8033f74 <_vfprintf_r+0x8ac>
 80344aa:	4f61      	ldr	r7, [pc, #388]	@ (8034630 <_vfprintf_r+0xf68>)
 80344ac:	f04f 0810 	mov.w	r8, #16
 80344b0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80344b4:	2e10      	cmp	r6, #16
 80344b6:	f103 0301 	add.w	r3, r3, #1
 80344ba:	f104 0108 	add.w	r1, r4, #8
 80344be:	6027      	str	r7, [r4, #0]
 80344c0:	dc24      	bgt.n	803450c <_vfprintf_r+0xe44>
 80344c2:	6066      	str	r6, [r4, #4]
 80344c4:	2b07      	cmp	r3, #7
 80344c6:	4416      	add	r6, r2
 80344c8:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80344cc:	f340 82a2 	ble.w	8034a14 <_vfprintf_r+0x134c>
 80344d0:	9803      	ldr	r0, [sp, #12]
 80344d2:	aa26      	add	r2, sp, #152	@ 0x98
 80344d4:	4659      	mov	r1, fp
 80344d6:	f000 fb63 	bl	8034ba0 <__sprint_r>
 80344da:	2800      	cmp	r0, #0
 80344dc:	f040 82bb 	bne.w	8034a56 <_vfprintf_r+0x138e>
 80344e0:	ac29      	add	r4, sp, #164	@ 0xa4
 80344e2:	e547      	b.n	8033f74 <_vfprintf_r+0x8ac>
 80344e4:	9803      	ldr	r0, [sp, #12]
 80344e6:	aa26      	add	r2, sp, #152	@ 0x98
 80344e8:	4659      	mov	r1, fp
 80344ea:	f000 fb59 	bl	8034ba0 <__sprint_r>
 80344ee:	2800      	cmp	r0, #0
 80344f0:	f040 82b1 	bne.w	8034a56 <_vfprintf_r+0x138e>
 80344f4:	ac29      	add	r4, sp, #164	@ 0xa4
 80344f6:	e7be      	b.n	8034476 <_vfprintf_r+0xdae>
 80344f8:	9803      	ldr	r0, [sp, #12]
 80344fa:	aa26      	add	r2, sp, #152	@ 0x98
 80344fc:	4659      	mov	r1, fp
 80344fe:	f000 fb4f 	bl	8034ba0 <__sprint_r>
 8034502:	2800      	cmp	r0, #0
 8034504:	f040 82a7 	bne.w	8034a56 <_vfprintf_r+0x138e>
 8034508:	ac29      	add	r4, sp, #164	@ 0xa4
 803450a:	e7c9      	b.n	80344a0 <_vfprintf_r+0xdd8>
 803450c:	3210      	adds	r2, #16
 803450e:	2b07      	cmp	r3, #7
 8034510:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8034514:	f8c4 8004 	str.w	r8, [r4, #4]
 8034518:	dd08      	ble.n	803452c <_vfprintf_r+0xe64>
 803451a:	9803      	ldr	r0, [sp, #12]
 803451c:	aa26      	add	r2, sp, #152	@ 0x98
 803451e:	4659      	mov	r1, fp
 8034520:	f000 fb3e 	bl	8034ba0 <__sprint_r>
 8034524:	2800      	cmp	r0, #0
 8034526:	f040 8296 	bne.w	8034a56 <_vfprintf_r+0x138e>
 803452a:	a929      	add	r1, sp, #164	@ 0xa4
 803452c:	3e10      	subs	r6, #16
 803452e:	460c      	mov	r4, r1
 8034530:	e7be      	b.n	80344b0 <_vfprintf_r+0xde8>
 8034532:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8034534:	2b00      	cmp	r3, #0
 8034536:	dc7d      	bgt.n	8034634 <_vfprintf_r+0xf6c>
 8034538:	4b3c      	ldr	r3, [pc, #240]	@ (803462c <_vfprintf_r+0xf64>)
 803453a:	6023      	str	r3, [r4, #0]
 803453c:	2301      	movs	r3, #1
 803453e:	6063      	str	r3, [r4, #4]
 8034540:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034542:	3301      	adds	r3, #1
 8034544:	9328      	str	r3, [sp, #160]	@ 0xa0
 8034546:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8034548:	3301      	adds	r3, #1
 803454a:	2b07      	cmp	r3, #7
 803454c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803454e:	dc46      	bgt.n	80345de <_vfprintf_r+0xf16>
 8034550:	3408      	adds	r4, #8
 8034552:	9904      	ldr	r1, [sp, #16]
 8034554:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8034556:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8034558:	430b      	orrs	r3, r1
 803455a:	f005 0101 	and.w	r1, r5, #1
 803455e:	430b      	orrs	r3, r1
 8034560:	f43f ad08 	beq.w	8033f74 <_vfprintf_r+0x8ac>
 8034564:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8034566:	6023      	str	r3, [r4, #0]
 8034568:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803456a:	6063      	str	r3, [r4, #4]
 803456c:	441a      	add	r2, r3
 803456e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8034570:	9228      	str	r2, [sp, #160]	@ 0xa0
 8034572:	3301      	adds	r3, #1
 8034574:	2b07      	cmp	r3, #7
 8034576:	9327      	str	r3, [sp, #156]	@ 0x9c
 8034578:	dc3b      	bgt.n	80345f2 <_vfprintf_r+0xf2a>
 803457a:	f104 0308 	add.w	r3, r4, #8
 803457e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8034580:	2e00      	cmp	r6, #0
 8034582:	da1b      	bge.n	80345bc <_vfprintf_r+0xef4>
 8034584:	4f2a      	ldr	r7, [pc, #168]	@ (8034630 <_vfprintf_r+0xf68>)
 8034586:	4276      	negs	r6, r6
 8034588:	461a      	mov	r2, r3
 803458a:	2410      	movs	r4, #16
 803458c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8034590:	2e10      	cmp	r6, #16
 8034592:	f101 0101 	add.w	r1, r1, #1
 8034596:	f103 0308 	add.w	r3, r3, #8
 803459a:	6017      	str	r7, [r2, #0]
 803459c:	dc33      	bgt.n	8034606 <_vfprintf_r+0xf3e>
 803459e:	6056      	str	r6, [r2, #4]
 80345a0:	2907      	cmp	r1, #7
 80345a2:	4406      	add	r6, r0
 80345a4:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 80345a8:	dd08      	ble.n	80345bc <_vfprintf_r+0xef4>
 80345aa:	9803      	ldr	r0, [sp, #12]
 80345ac:	aa26      	add	r2, sp, #152	@ 0x98
 80345ae:	4659      	mov	r1, fp
 80345b0:	f000 faf6 	bl	8034ba0 <__sprint_r>
 80345b4:	2800      	cmp	r0, #0
 80345b6:	f040 824e 	bne.w	8034a56 <_vfprintf_r+0x138e>
 80345ba:	ab29      	add	r3, sp, #164	@ 0xa4
 80345bc:	9a04      	ldr	r2, [sp, #16]
 80345be:	9904      	ldr	r1, [sp, #16]
 80345c0:	605a      	str	r2, [r3, #4]
 80345c2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80345c4:	f8c3 8000 	str.w	r8, [r3]
 80345c8:	440a      	add	r2, r1
 80345ca:	9228      	str	r2, [sp, #160]	@ 0xa0
 80345cc:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80345ce:	3201      	adds	r2, #1
 80345d0:	2a07      	cmp	r2, #7
 80345d2:	9227      	str	r2, [sp, #156]	@ 0x9c
 80345d4:	f73f af7c 	bgt.w	80344d0 <_vfprintf_r+0xe08>
 80345d8:	f103 0408 	add.w	r4, r3, #8
 80345dc:	e4ca      	b.n	8033f74 <_vfprintf_r+0x8ac>
 80345de:	9803      	ldr	r0, [sp, #12]
 80345e0:	aa26      	add	r2, sp, #152	@ 0x98
 80345e2:	4659      	mov	r1, fp
 80345e4:	f000 fadc 	bl	8034ba0 <__sprint_r>
 80345e8:	2800      	cmp	r0, #0
 80345ea:	f040 8234 	bne.w	8034a56 <_vfprintf_r+0x138e>
 80345ee:	ac29      	add	r4, sp, #164	@ 0xa4
 80345f0:	e7af      	b.n	8034552 <_vfprintf_r+0xe8a>
 80345f2:	9803      	ldr	r0, [sp, #12]
 80345f4:	aa26      	add	r2, sp, #152	@ 0x98
 80345f6:	4659      	mov	r1, fp
 80345f8:	f000 fad2 	bl	8034ba0 <__sprint_r>
 80345fc:	2800      	cmp	r0, #0
 80345fe:	f040 822a 	bne.w	8034a56 <_vfprintf_r+0x138e>
 8034602:	ab29      	add	r3, sp, #164	@ 0xa4
 8034604:	e7bb      	b.n	803457e <_vfprintf_r+0xeb6>
 8034606:	3010      	adds	r0, #16
 8034608:	2907      	cmp	r1, #7
 803460a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 803460e:	6054      	str	r4, [r2, #4]
 8034610:	dd08      	ble.n	8034624 <_vfprintf_r+0xf5c>
 8034612:	9803      	ldr	r0, [sp, #12]
 8034614:	aa26      	add	r2, sp, #152	@ 0x98
 8034616:	4659      	mov	r1, fp
 8034618:	f000 fac2 	bl	8034ba0 <__sprint_r>
 803461c:	2800      	cmp	r0, #0
 803461e:	f040 821a 	bne.w	8034a56 <_vfprintf_r+0x138e>
 8034622:	ab29      	add	r3, sp, #164	@ 0xa4
 8034624:	3e10      	subs	r6, #16
 8034626:	461a      	mov	r2, r3
 8034628:	e7b0      	b.n	803458c <_vfprintf_r+0xec4>
 803462a:	bf00      	nop
 803462c:	08044c9a 	.word	0x08044c9a
 8034630:	08044c9c 	.word	0x08044c9c
 8034634:	9b04      	ldr	r3, [sp, #16]
 8034636:	4443      	add	r3, r8
 8034638:	9313      	str	r3, [sp, #76]	@ 0x4c
 803463a:	9b04      	ldr	r3, [sp, #16]
 803463c:	42b3      	cmp	r3, r6
 803463e:	bfa8      	it	ge
 8034640:	4633      	movge	r3, r6
 8034642:	2b00      	cmp	r3, #0
 8034644:	4699      	mov	r9, r3
 8034646:	dd0b      	ble.n	8034660 <_vfprintf_r+0xf98>
 8034648:	e9c4 8300 	strd	r8, r3, [r4]
 803464c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803464e:	444b      	add	r3, r9
 8034650:	9328      	str	r3, [sp, #160]	@ 0xa0
 8034652:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8034654:	3301      	adds	r3, #1
 8034656:	2b07      	cmp	r3, #7
 8034658:	9327      	str	r3, [sp, #156]	@ 0x9c
 803465a:	f300 8089 	bgt.w	8034770 <_vfprintf_r+0x10a8>
 803465e:	3408      	adds	r4, #8
 8034660:	f1b9 0f00 	cmp.w	r9, #0
 8034664:	bfac      	ite	ge
 8034666:	eba6 0309 	subge.w	r3, r6, r9
 803466a:	4633      	movlt	r3, r6
 803466c:	2b00      	cmp	r3, #0
 803466e:	9306      	str	r3, [sp, #24]
 8034670:	dd1c      	ble.n	80346ac <_vfprintf_r+0xfe4>
 8034672:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 80349d8 <_vfprintf_r+0x1310>
 8034676:	9806      	ldr	r0, [sp, #24]
 8034678:	f8c4 9000 	str.w	r9, [r4]
 803467c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8034680:	2810      	cmp	r0, #16
 8034682:	f102 0201 	add.w	r2, r2, #1
 8034686:	f104 0108 	add.w	r1, r4, #8
 803468a:	dc7b      	bgt.n	8034784 <_vfprintf_r+0x10bc>
 803468c:	4403      	add	r3, r0
 803468e:	2a07      	cmp	r2, #7
 8034690:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8034694:	6060      	str	r0, [r4, #4]
 8034696:	f340 808a 	ble.w	80347ae <_vfprintf_r+0x10e6>
 803469a:	9803      	ldr	r0, [sp, #12]
 803469c:	aa26      	add	r2, sp, #152	@ 0x98
 803469e:	4659      	mov	r1, fp
 80346a0:	f000 fa7e 	bl	8034ba0 <__sprint_r>
 80346a4:	2800      	cmp	r0, #0
 80346a6:	f040 81d6 	bne.w	8034a56 <_vfprintf_r+0x138e>
 80346aa:	ac29      	add	r4, sp, #164	@ 0xa4
 80346ac:	056a      	lsls	r2, r5, #21
 80346ae:	44b0      	add	r8, r6
 80346b0:	d508      	bpl.n	80346c4 <_vfprintf_r+0xffc>
 80346b2:	9b08      	ldr	r3, [sp, #32]
 80346b4:	2b00      	cmp	r3, #0
 80346b6:	d17c      	bne.n	80347b2 <_vfprintf_r+0x10ea>
 80346b8:	2f00      	cmp	r7, #0
 80346ba:	d17c      	bne.n	80347b6 <_vfprintf_r+0x10ee>
 80346bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80346be:	4598      	cmp	r8, r3
 80346c0:	bf28      	it	cs
 80346c2:	4698      	movcs	r8, r3
 80346c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80346c6:	9a04      	ldr	r2, [sp, #16]
 80346c8:	4293      	cmp	r3, r2
 80346ca:	db01      	blt.n	80346d0 <_vfprintf_r+0x1008>
 80346cc:	07eb      	lsls	r3, r5, #31
 80346ce:	d50e      	bpl.n	80346ee <_vfprintf_r+0x1026>
 80346d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80346d2:	6023      	str	r3, [r4, #0]
 80346d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80346d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80346d8:	6063      	str	r3, [r4, #4]
 80346da:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80346dc:	4413      	add	r3, r2
 80346de:	9328      	str	r3, [sp, #160]	@ 0xa0
 80346e0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80346e2:	3301      	adds	r3, #1
 80346e4:	2b07      	cmp	r3, #7
 80346e6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80346e8:	f300 80e1 	bgt.w	80348ae <_vfprintf_r+0x11e6>
 80346ec:	3408      	adds	r4, #8
 80346ee:	9b04      	ldr	r3, [sp, #16]
 80346f0:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 80346f2:	1bdf      	subs	r7, r3, r7
 80346f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80346f6:	eba3 0308 	sub.w	r3, r3, r8
 80346fa:	429f      	cmp	r7, r3
 80346fc:	bfa8      	it	ge
 80346fe:	461f      	movge	r7, r3
 8034700:	2f00      	cmp	r7, #0
 8034702:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8034704:	dd0a      	ble.n	803471c <_vfprintf_r+0x1054>
 8034706:	443b      	add	r3, r7
 8034708:	9328      	str	r3, [sp, #160]	@ 0xa0
 803470a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803470c:	3301      	adds	r3, #1
 803470e:	2b07      	cmp	r3, #7
 8034710:	e9c4 8700 	strd	r8, r7, [r4]
 8034714:	9327      	str	r3, [sp, #156]	@ 0x9c
 8034716:	f300 80d4 	bgt.w	80348c2 <_vfprintf_r+0x11fa>
 803471a:	3408      	adds	r4, #8
 803471c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803471e:	9b04      	ldr	r3, [sp, #16]
 8034720:	2f00      	cmp	r7, #0
 8034722:	eba3 0606 	sub.w	r6, r3, r6
 8034726:	bfa8      	it	ge
 8034728:	1bf6      	subge	r6, r6, r7
 803472a:	2e00      	cmp	r6, #0
 803472c:	f77f ac22 	ble.w	8033f74 <_vfprintf_r+0x8ac>
 8034730:	4fa9      	ldr	r7, [pc, #676]	@ (80349d8 <_vfprintf_r+0x1310>)
 8034732:	f04f 0810 	mov.w	r8, #16
 8034736:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803473a:	2e10      	cmp	r6, #16
 803473c:	f103 0301 	add.w	r3, r3, #1
 8034740:	f104 0108 	add.w	r1, r4, #8
 8034744:	6027      	str	r7, [r4, #0]
 8034746:	f77f aebc 	ble.w	80344c2 <_vfprintf_r+0xdfa>
 803474a:	3210      	adds	r2, #16
 803474c:	2b07      	cmp	r3, #7
 803474e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8034752:	f8c4 8004 	str.w	r8, [r4, #4]
 8034756:	dd08      	ble.n	803476a <_vfprintf_r+0x10a2>
 8034758:	9803      	ldr	r0, [sp, #12]
 803475a:	aa26      	add	r2, sp, #152	@ 0x98
 803475c:	4659      	mov	r1, fp
 803475e:	f000 fa1f 	bl	8034ba0 <__sprint_r>
 8034762:	2800      	cmp	r0, #0
 8034764:	f040 8177 	bne.w	8034a56 <_vfprintf_r+0x138e>
 8034768:	a929      	add	r1, sp, #164	@ 0xa4
 803476a:	3e10      	subs	r6, #16
 803476c:	460c      	mov	r4, r1
 803476e:	e7e2      	b.n	8034736 <_vfprintf_r+0x106e>
 8034770:	9803      	ldr	r0, [sp, #12]
 8034772:	aa26      	add	r2, sp, #152	@ 0x98
 8034774:	4659      	mov	r1, fp
 8034776:	f000 fa13 	bl	8034ba0 <__sprint_r>
 803477a:	2800      	cmp	r0, #0
 803477c:	f040 816b 	bne.w	8034a56 <_vfprintf_r+0x138e>
 8034780:	ac29      	add	r4, sp, #164	@ 0xa4
 8034782:	e76d      	b.n	8034660 <_vfprintf_r+0xf98>
 8034784:	2010      	movs	r0, #16
 8034786:	4403      	add	r3, r0
 8034788:	2a07      	cmp	r2, #7
 803478a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803478e:	6060      	str	r0, [r4, #4]
 8034790:	dd08      	ble.n	80347a4 <_vfprintf_r+0x10dc>
 8034792:	9803      	ldr	r0, [sp, #12]
 8034794:	aa26      	add	r2, sp, #152	@ 0x98
 8034796:	4659      	mov	r1, fp
 8034798:	f000 fa02 	bl	8034ba0 <__sprint_r>
 803479c:	2800      	cmp	r0, #0
 803479e:	f040 815a 	bne.w	8034a56 <_vfprintf_r+0x138e>
 80347a2:	a929      	add	r1, sp, #164	@ 0xa4
 80347a4:	9b06      	ldr	r3, [sp, #24]
 80347a6:	3b10      	subs	r3, #16
 80347a8:	9306      	str	r3, [sp, #24]
 80347aa:	460c      	mov	r4, r1
 80347ac:	e763      	b.n	8034676 <_vfprintf_r+0xfae>
 80347ae:	460c      	mov	r4, r1
 80347b0:	e77c      	b.n	80346ac <_vfprintf_r+0xfe4>
 80347b2:	2f00      	cmp	r7, #0
 80347b4:	d04b      	beq.n	803484e <_vfprintf_r+0x1186>
 80347b6:	3f01      	subs	r7, #1
 80347b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80347ba:	6023      	str	r3, [r4, #0]
 80347bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80347be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80347c0:	6063      	str	r3, [r4, #4]
 80347c2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80347c4:	4413      	add	r3, r2
 80347c6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80347c8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80347ca:	3301      	adds	r3, #1
 80347cc:	2b07      	cmp	r3, #7
 80347ce:	9327      	str	r3, [sp, #156]	@ 0x9c
 80347d0:	dc44      	bgt.n	803485c <_vfprintf_r+0x1194>
 80347d2:	3408      	adds	r4, #8
 80347d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80347d6:	f893 9000 	ldrb.w	r9, [r3]
 80347da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80347dc:	eba3 0308 	sub.w	r3, r3, r8
 80347e0:	4599      	cmp	r9, r3
 80347e2:	bfa8      	it	ge
 80347e4:	4699      	movge	r9, r3
 80347e6:	f1b9 0f00 	cmp.w	r9, #0
 80347ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80347ec:	dd09      	ble.n	8034802 <_vfprintf_r+0x113a>
 80347ee:	444b      	add	r3, r9
 80347f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80347f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80347f4:	3301      	adds	r3, #1
 80347f6:	2b07      	cmp	r3, #7
 80347f8:	e9c4 8900 	strd	r8, r9, [r4]
 80347fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80347fe:	dc37      	bgt.n	8034870 <_vfprintf_r+0x11a8>
 8034800:	3408      	adds	r4, #8
 8034802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034804:	781e      	ldrb	r6, [r3, #0]
 8034806:	f1b9 0f00 	cmp.w	r9, #0
 803480a:	bfa8      	it	ge
 803480c:	eba6 0609 	subge.w	r6, r6, r9
 8034810:	2e00      	cmp	r6, #0
 8034812:	dd18      	ble.n	8034846 <_vfprintf_r+0x117e>
 8034814:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8034818:	486f      	ldr	r0, [pc, #444]	@ (80349d8 <_vfprintf_r+0x1310>)
 803481a:	6020      	str	r0, [r4, #0]
 803481c:	2e10      	cmp	r6, #16
 803481e:	f103 0301 	add.w	r3, r3, #1
 8034822:	f104 0108 	add.w	r1, r4, #8
 8034826:	dc2d      	bgt.n	8034884 <_vfprintf_r+0x11bc>
 8034828:	6066      	str	r6, [r4, #4]
 803482a:	2b07      	cmp	r3, #7
 803482c:	4416      	add	r6, r2
 803482e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8034832:	dd3a      	ble.n	80348aa <_vfprintf_r+0x11e2>
 8034834:	9803      	ldr	r0, [sp, #12]
 8034836:	aa26      	add	r2, sp, #152	@ 0x98
 8034838:	4659      	mov	r1, fp
 803483a:	f000 f9b1 	bl	8034ba0 <__sprint_r>
 803483e:	2800      	cmp	r0, #0
 8034840:	f040 8109 	bne.w	8034a56 <_vfprintf_r+0x138e>
 8034844:	ac29      	add	r4, sp, #164	@ 0xa4
 8034846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034848:	781b      	ldrb	r3, [r3, #0]
 803484a:	4498      	add	r8, r3
 803484c:	e731      	b.n	80346b2 <_vfprintf_r+0xfea>
 803484e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034850:	3b01      	subs	r3, #1
 8034852:	9309      	str	r3, [sp, #36]	@ 0x24
 8034854:	9b08      	ldr	r3, [sp, #32]
 8034856:	3b01      	subs	r3, #1
 8034858:	9308      	str	r3, [sp, #32]
 803485a:	e7ad      	b.n	80347b8 <_vfprintf_r+0x10f0>
 803485c:	9803      	ldr	r0, [sp, #12]
 803485e:	aa26      	add	r2, sp, #152	@ 0x98
 8034860:	4659      	mov	r1, fp
 8034862:	f000 f99d 	bl	8034ba0 <__sprint_r>
 8034866:	2800      	cmp	r0, #0
 8034868:	f040 80f5 	bne.w	8034a56 <_vfprintf_r+0x138e>
 803486c:	ac29      	add	r4, sp, #164	@ 0xa4
 803486e:	e7b1      	b.n	80347d4 <_vfprintf_r+0x110c>
 8034870:	9803      	ldr	r0, [sp, #12]
 8034872:	aa26      	add	r2, sp, #152	@ 0x98
 8034874:	4659      	mov	r1, fp
 8034876:	f000 f993 	bl	8034ba0 <__sprint_r>
 803487a:	2800      	cmp	r0, #0
 803487c:	f040 80eb 	bne.w	8034a56 <_vfprintf_r+0x138e>
 8034880:	ac29      	add	r4, sp, #164	@ 0xa4
 8034882:	e7be      	b.n	8034802 <_vfprintf_r+0x113a>
 8034884:	2010      	movs	r0, #16
 8034886:	4402      	add	r2, r0
 8034888:	2b07      	cmp	r3, #7
 803488a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803488e:	6060      	str	r0, [r4, #4]
 8034890:	dd08      	ble.n	80348a4 <_vfprintf_r+0x11dc>
 8034892:	9803      	ldr	r0, [sp, #12]
 8034894:	aa26      	add	r2, sp, #152	@ 0x98
 8034896:	4659      	mov	r1, fp
 8034898:	f000 f982 	bl	8034ba0 <__sprint_r>
 803489c:	2800      	cmp	r0, #0
 803489e:	f040 80da 	bne.w	8034a56 <_vfprintf_r+0x138e>
 80348a2:	a929      	add	r1, sp, #164	@ 0xa4
 80348a4:	3e10      	subs	r6, #16
 80348a6:	460c      	mov	r4, r1
 80348a8:	e7b4      	b.n	8034814 <_vfprintf_r+0x114c>
 80348aa:	460c      	mov	r4, r1
 80348ac:	e7cb      	b.n	8034846 <_vfprintf_r+0x117e>
 80348ae:	9803      	ldr	r0, [sp, #12]
 80348b0:	aa26      	add	r2, sp, #152	@ 0x98
 80348b2:	4659      	mov	r1, fp
 80348b4:	f000 f974 	bl	8034ba0 <__sprint_r>
 80348b8:	2800      	cmp	r0, #0
 80348ba:	f040 80cc 	bne.w	8034a56 <_vfprintf_r+0x138e>
 80348be:	ac29      	add	r4, sp, #164	@ 0xa4
 80348c0:	e715      	b.n	80346ee <_vfprintf_r+0x1026>
 80348c2:	9803      	ldr	r0, [sp, #12]
 80348c4:	aa26      	add	r2, sp, #152	@ 0x98
 80348c6:	4659      	mov	r1, fp
 80348c8:	f000 f96a 	bl	8034ba0 <__sprint_r>
 80348cc:	2800      	cmp	r0, #0
 80348ce:	f040 80c2 	bne.w	8034a56 <_vfprintf_r+0x138e>
 80348d2:	ac29      	add	r4, sp, #164	@ 0xa4
 80348d4:	e722      	b.n	803471c <_vfprintf_r+0x1054>
 80348d6:	9904      	ldr	r1, [sp, #16]
 80348d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80348da:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80348dc:	2901      	cmp	r1, #1
 80348de:	f103 0301 	add.w	r3, r3, #1
 80348e2:	f102 0201 	add.w	r2, r2, #1
 80348e6:	f104 0608 	add.w	r6, r4, #8
 80348ea:	dc02      	bgt.n	80348f2 <_vfprintf_r+0x122a>
 80348ec:	07ef      	lsls	r7, r5, #31
 80348ee:	f140 8086 	bpl.w	80349fe <_vfprintf_r+0x1336>
 80348f2:	2101      	movs	r1, #1
 80348f4:	2a07      	cmp	r2, #7
 80348f6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80348fa:	f8c4 8000 	str.w	r8, [r4]
 80348fe:	6061      	str	r1, [r4, #4]
 8034900:	dd08      	ble.n	8034914 <_vfprintf_r+0x124c>
 8034902:	9803      	ldr	r0, [sp, #12]
 8034904:	aa26      	add	r2, sp, #152	@ 0x98
 8034906:	4659      	mov	r1, fp
 8034908:	f000 f94a 	bl	8034ba0 <__sprint_r>
 803490c:	2800      	cmp	r0, #0
 803490e:	f040 80a2 	bne.w	8034a56 <_vfprintf_r+0x138e>
 8034912:	ae29      	add	r6, sp, #164	@ 0xa4
 8034914:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8034916:	6033      	str	r3, [r6, #0]
 8034918:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803491a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803491c:	6073      	str	r3, [r6, #4]
 803491e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8034920:	4413      	add	r3, r2
 8034922:	9328      	str	r3, [sp, #160]	@ 0xa0
 8034924:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8034926:	3301      	adds	r3, #1
 8034928:	2b07      	cmp	r3, #7
 803492a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803492c:	dc33      	bgt.n	8034996 <_vfprintf_r+0x12ce>
 803492e:	3608      	adds	r6, #8
 8034930:	9b04      	ldr	r3, [sp, #16]
 8034932:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8034936:	1e5c      	subs	r4, r3, #1
 8034938:	2200      	movs	r2, #0
 803493a:	2300      	movs	r3, #0
 803493c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 8034940:	f7dc f8da 	bl	8010af8 <__aeabi_dcmpeq>
 8034944:	2800      	cmp	r0, #0
 8034946:	d12f      	bne.n	80349a8 <_vfprintf_r+0x12e0>
 8034948:	f108 0201 	add.w	r2, r8, #1
 803494c:	e9c6 2400 	strd	r2, r4, [r6]
 8034950:	9a04      	ldr	r2, [sp, #16]
 8034952:	f109 0301 	add.w	r3, r9, #1
 8034956:	3f01      	subs	r7, #1
 8034958:	4417      	add	r7, r2
 803495a:	2b07      	cmp	r3, #7
 803495c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8034960:	dd56      	ble.n	8034a10 <_vfprintf_r+0x1348>
 8034962:	9803      	ldr	r0, [sp, #12]
 8034964:	aa26      	add	r2, sp, #152	@ 0x98
 8034966:	4659      	mov	r1, fp
 8034968:	f000 f91a 	bl	8034ba0 <__sprint_r>
 803496c:	2800      	cmp	r0, #0
 803496e:	d172      	bne.n	8034a56 <_vfprintf_r+0x138e>
 8034970:	ae29      	add	r6, sp, #164	@ 0xa4
 8034972:	ab22      	add	r3, sp, #136	@ 0x88
 8034974:	6033      	str	r3, [r6, #0]
 8034976:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8034978:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 803497a:	6073      	str	r3, [r6, #4]
 803497c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803497e:	4413      	add	r3, r2
 8034980:	9328      	str	r3, [sp, #160]	@ 0xa0
 8034982:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8034984:	3301      	adds	r3, #1
 8034986:	2b07      	cmp	r3, #7
 8034988:	9327      	str	r3, [sp, #156]	@ 0x9c
 803498a:	f73f ada1 	bgt.w	80344d0 <_vfprintf_r+0xe08>
 803498e:	f106 0408 	add.w	r4, r6, #8
 8034992:	f7ff baef 	b.w	8033f74 <_vfprintf_r+0x8ac>
 8034996:	9803      	ldr	r0, [sp, #12]
 8034998:	aa26      	add	r2, sp, #152	@ 0x98
 803499a:	4659      	mov	r1, fp
 803499c:	f000 f900 	bl	8034ba0 <__sprint_r>
 80349a0:	2800      	cmp	r0, #0
 80349a2:	d158      	bne.n	8034a56 <_vfprintf_r+0x138e>
 80349a4:	ae29      	add	r6, sp, #164	@ 0xa4
 80349a6:	e7c3      	b.n	8034930 <_vfprintf_r+0x1268>
 80349a8:	9b04      	ldr	r3, [sp, #16]
 80349aa:	2b01      	cmp	r3, #1
 80349ac:	dde1      	ble.n	8034972 <_vfprintf_r+0x12aa>
 80349ae:	4f0a      	ldr	r7, [pc, #40]	@ (80349d8 <_vfprintf_r+0x1310>)
 80349b0:	f04f 0810 	mov.w	r8, #16
 80349b4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80349b8:	2c10      	cmp	r4, #16
 80349ba:	f103 0301 	add.w	r3, r3, #1
 80349be:	f106 0108 	add.w	r1, r6, #8
 80349c2:	6037      	str	r7, [r6, #0]
 80349c4:	dc0a      	bgt.n	80349dc <_vfprintf_r+0x1314>
 80349c6:	6074      	str	r4, [r6, #4]
 80349c8:	2b07      	cmp	r3, #7
 80349ca:	4414      	add	r4, r2
 80349cc:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 80349d0:	dcc7      	bgt.n	8034962 <_vfprintf_r+0x129a>
 80349d2:	460e      	mov	r6, r1
 80349d4:	e7cd      	b.n	8034972 <_vfprintf_r+0x12aa>
 80349d6:	bf00      	nop
 80349d8:	08044c9c 	.word	0x08044c9c
 80349dc:	3210      	adds	r2, #16
 80349de:	2b07      	cmp	r3, #7
 80349e0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80349e4:	f8c6 8004 	str.w	r8, [r6, #4]
 80349e8:	dd06      	ble.n	80349f8 <_vfprintf_r+0x1330>
 80349ea:	9803      	ldr	r0, [sp, #12]
 80349ec:	aa26      	add	r2, sp, #152	@ 0x98
 80349ee:	4659      	mov	r1, fp
 80349f0:	f000 f8d6 	bl	8034ba0 <__sprint_r>
 80349f4:	bb78      	cbnz	r0, 8034a56 <_vfprintf_r+0x138e>
 80349f6:	a929      	add	r1, sp, #164	@ 0xa4
 80349f8:	3c10      	subs	r4, #16
 80349fa:	460e      	mov	r6, r1
 80349fc:	e7da      	b.n	80349b4 <_vfprintf_r+0x12ec>
 80349fe:	2101      	movs	r1, #1
 8034a00:	2a07      	cmp	r2, #7
 8034a02:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8034a06:	f8c4 8000 	str.w	r8, [r4]
 8034a0a:	6061      	str	r1, [r4, #4]
 8034a0c:	ddb1      	ble.n	8034972 <_vfprintf_r+0x12aa>
 8034a0e:	e7a8      	b.n	8034962 <_vfprintf_r+0x129a>
 8034a10:	3608      	adds	r6, #8
 8034a12:	e7ae      	b.n	8034972 <_vfprintf_r+0x12aa>
 8034a14:	460c      	mov	r4, r1
 8034a16:	f7ff baad 	b.w	8033f74 <_vfprintf_r+0x8ac>
 8034a1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034a1c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8034a1e:	1a9d      	subs	r5, r3, r2
 8034a20:	2d00      	cmp	r5, #0
 8034a22:	f77f aaaa 	ble.w	8033f7a <_vfprintf_r+0x8b2>
 8034a26:	4e3d      	ldr	r6, [pc, #244]	@ (8034b1c <_vfprintf_r+0x1454>)
 8034a28:	2710      	movs	r7, #16
 8034a2a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8034a2e:	2d10      	cmp	r5, #16
 8034a30:	f103 0301 	add.w	r3, r3, #1
 8034a34:	6026      	str	r6, [r4, #0]
 8034a36:	dc18      	bgt.n	8034a6a <_vfprintf_r+0x13a2>
 8034a38:	6065      	str	r5, [r4, #4]
 8034a3a:	2b07      	cmp	r3, #7
 8034a3c:	4415      	add	r5, r2
 8034a3e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 8034a42:	f77f aa9a 	ble.w	8033f7a <_vfprintf_r+0x8b2>
 8034a46:	9803      	ldr	r0, [sp, #12]
 8034a48:	aa26      	add	r2, sp, #152	@ 0x98
 8034a4a:	4659      	mov	r1, fp
 8034a4c:	f000 f8a8 	bl	8034ba0 <__sprint_r>
 8034a50:	2800      	cmp	r0, #0
 8034a52:	f43f aa92 	beq.w	8033f7a <_vfprintf_r+0x8b2>
 8034a56:	f1ba 0f00 	cmp.w	sl, #0
 8034a5a:	f43f a892 	beq.w	8033b82 <_vfprintf_r+0x4ba>
 8034a5e:	9803      	ldr	r0, [sp, #12]
 8034a60:	4651      	mov	r1, sl
 8034a62:	f003 fc7b 	bl	803835c <_free_r>
 8034a66:	f7ff b88c 	b.w	8033b82 <_vfprintf_r+0x4ba>
 8034a6a:	3210      	adds	r2, #16
 8034a6c:	2b07      	cmp	r3, #7
 8034a6e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8034a72:	6067      	str	r7, [r4, #4]
 8034a74:	dc02      	bgt.n	8034a7c <_vfprintf_r+0x13b4>
 8034a76:	3408      	adds	r4, #8
 8034a78:	3d10      	subs	r5, #16
 8034a7a:	e7d6      	b.n	8034a2a <_vfprintf_r+0x1362>
 8034a7c:	9803      	ldr	r0, [sp, #12]
 8034a7e:	aa26      	add	r2, sp, #152	@ 0x98
 8034a80:	4659      	mov	r1, fp
 8034a82:	f000 f88d 	bl	8034ba0 <__sprint_r>
 8034a86:	2800      	cmp	r0, #0
 8034a88:	d1e5      	bne.n	8034a56 <_vfprintf_r+0x138e>
 8034a8a:	ac29      	add	r4, sp, #164	@ 0xa4
 8034a8c:	e7f4      	b.n	8034a78 <_vfprintf_r+0x13b0>
 8034a8e:	9803      	ldr	r0, [sp, #12]
 8034a90:	4651      	mov	r1, sl
 8034a92:	f003 fc63 	bl	803835c <_free_r>
 8034a96:	f7ff ba88 	b.w	8033faa <_vfprintf_r+0x8e2>
 8034a9a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8034a9c:	b91b      	cbnz	r3, 8034aa6 <_vfprintf_r+0x13de>
 8034a9e:	2300      	movs	r3, #0
 8034aa0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8034aa2:	f7ff b86e 	b.w	8033b82 <_vfprintf_r+0x4ba>
 8034aa6:	9803      	ldr	r0, [sp, #12]
 8034aa8:	aa26      	add	r2, sp, #152	@ 0x98
 8034aaa:	4659      	mov	r1, fp
 8034aac:	f000 f878 	bl	8034ba0 <__sprint_r>
 8034ab0:	2800      	cmp	r0, #0
 8034ab2:	d0f4      	beq.n	8034a9e <_vfprintf_r+0x13d6>
 8034ab4:	f7ff b865 	b.w	8033b82 <_vfprintf_r+0x4ba>
 8034ab8:	ea56 0207 	orrs.w	r2, r6, r7
 8034abc:	9508      	str	r5, [sp, #32]
 8034abe:	f43f ab75 	beq.w	80341ac <_vfprintf_r+0xae4>
 8034ac2:	2b01      	cmp	r3, #1
 8034ac4:	f43f abf6 	beq.w	80342b4 <_vfprintf_r+0xbec>
 8034ac8:	2b02      	cmp	r3, #2
 8034aca:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8034ace:	f43f ac3a 	beq.w	8034346 <_vfprintf_r+0xc7e>
 8034ad2:	f006 0307 	and.w	r3, r6, #7
 8034ad6:	08f6      	lsrs	r6, r6, #3
 8034ad8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8034adc:	08ff      	lsrs	r7, r7, #3
 8034ade:	3330      	adds	r3, #48	@ 0x30
 8034ae0:	ea56 0107 	orrs.w	r1, r6, r7
 8034ae4:	4642      	mov	r2, r8
 8034ae6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8034aea:	d1f2      	bne.n	8034ad2 <_vfprintf_r+0x140a>
 8034aec:	9908      	ldr	r1, [sp, #32]
 8034aee:	07ce      	lsls	r6, r1, #31
 8034af0:	d506      	bpl.n	8034b00 <_vfprintf_r+0x1438>
 8034af2:	2b30      	cmp	r3, #48	@ 0x30
 8034af4:	d004      	beq.n	8034b00 <_vfprintf_r+0x1438>
 8034af6:	2330      	movs	r3, #48	@ 0x30
 8034af8:	f808 3c01 	strb.w	r3, [r8, #-1]
 8034afc:	f1a2 0802 	sub.w	r8, r2, #2
 8034b00:	ab52      	add	r3, sp, #328	@ 0x148
 8034b02:	9d08      	ldr	r5, [sp, #32]
 8034b04:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8034b08:	f04f 0a00 	mov.w	sl, #0
 8034b0c:	eba3 0908 	sub.w	r9, r3, r8
 8034b10:	4657      	mov	r7, sl
 8034b12:	f8cd a020 	str.w	sl, [sp, #32]
 8034b16:	4656      	mov	r6, sl
 8034b18:	f7ff b978 	b.w	8033e0c <_vfprintf_r+0x744>
 8034b1c:	08044cac 	.word	0x08044cac

08034b20 <__sbprintf>:
 8034b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8034b22:	461f      	mov	r7, r3
 8034b24:	898b      	ldrh	r3, [r1, #12]
 8034b26:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8034b2a:	f023 0302 	bic.w	r3, r3, #2
 8034b2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8034b32:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8034b34:	9319      	str	r3, [sp, #100]	@ 0x64
 8034b36:	89cb      	ldrh	r3, [r1, #14]
 8034b38:	f8ad 300e 	strh.w	r3, [sp, #14]
 8034b3c:	69cb      	ldr	r3, [r1, #28]
 8034b3e:	9307      	str	r3, [sp, #28]
 8034b40:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8034b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8034b44:	ab1a      	add	r3, sp, #104	@ 0x68
 8034b46:	9300      	str	r3, [sp, #0]
 8034b48:	9304      	str	r3, [sp, #16]
 8034b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8034b4e:	4615      	mov	r5, r2
 8034b50:	4606      	mov	r6, r0
 8034b52:	9302      	str	r3, [sp, #8]
 8034b54:	9305      	str	r3, [sp, #20]
 8034b56:	a816      	add	r0, sp, #88	@ 0x58
 8034b58:	2300      	movs	r3, #0
 8034b5a:	460c      	mov	r4, r1
 8034b5c:	9306      	str	r3, [sp, #24]
 8034b5e:	f002 fcf5 	bl	803754c <__retarget_lock_init_recursive>
 8034b62:	462a      	mov	r2, r5
 8034b64:	463b      	mov	r3, r7
 8034b66:	4669      	mov	r1, sp
 8034b68:	4630      	mov	r0, r6
 8034b6a:	f7fe fdad 	bl	80336c8 <_vfprintf_r>
 8034b6e:	1e05      	subs	r5, r0, #0
 8034b70:	db07      	blt.n	8034b82 <__sbprintf+0x62>
 8034b72:	4669      	mov	r1, sp
 8034b74:	4630      	mov	r0, r6
 8034b76:	f000 fecb 	bl	8035910 <_fflush_r>
 8034b7a:	2800      	cmp	r0, #0
 8034b7c:	bf18      	it	ne
 8034b7e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8034b82:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8034b86:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8034b88:	065b      	lsls	r3, r3, #25
 8034b8a:	bf42      	ittt	mi
 8034b8c:	89a3      	ldrhmi	r3, [r4, #12]
 8034b8e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8034b92:	81a3      	strhmi	r3, [r4, #12]
 8034b94:	f002 fcdb 	bl	803754e <__retarget_lock_close_recursive>
 8034b98:	4628      	mov	r0, r5
 8034b9a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8034b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08034ba0 <__sprint_r>:
 8034ba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034ba4:	6893      	ldr	r3, [r2, #8]
 8034ba6:	4680      	mov	r8, r0
 8034ba8:	460e      	mov	r6, r1
 8034baa:	4614      	mov	r4, r2
 8034bac:	b343      	cbz	r3, 8034c00 <__sprint_r+0x60>
 8034bae:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8034bb0:	049d      	lsls	r5, r3, #18
 8034bb2:	d522      	bpl.n	8034bfa <__sprint_r+0x5a>
 8034bb4:	6815      	ldr	r5, [r2, #0]
 8034bb6:	68a0      	ldr	r0, [r4, #8]
 8034bb8:	3508      	adds	r5, #8
 8034bba:	b928      	cbnz	r0, 8034bc8 <__sprint_r+0x28>
 8034bbc:	2300      	movs	r3, #0
 8034bbe:	60a3      	str	r3, [r4, #8]
 8034bc0:	2300      	movs	r3, #0
 8034bc2:	6063      	str	r3, [r4, #4]
 8034bc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034bc8:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8034bcc:	f04f 0900 	mov.w	r9, #0
 8034bd0:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8034bd4:	45ca      	cmp	sl, r9
 8034bd6:	dc05      	bgt.n	8034be4 <__sprint_r+0x44>
 8034bd8:	68a3      	ldr	r3, [r4, #8]
 8034bda:	f027 0703 	bic.w	r7, r7, #3
 8034bde:	1bdb      	subs	r3, r3, r7
 8034be0:	60a3      	str	r3, [r4, #8]
 8034be2:	e7e8      	b.n	8034bb6 <__sprint_r+0x16>
 8034be4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8034be8:	4632      	mov	r2, r6
 8034bea:	4640      	mov	r0, r8
 8034bec:	f001 fa35 	bl	803605a <_fputwc_r>
 8034bf0:	1c43      	adds	r3, r0, #1
 8034bf2:	d0e3      	beq.n	8034bbc <__sprint_r+0x1c>
 8034bf4:	f109 0901 	add.w	r9, r9, #1
 8034bf8:	e7ec      	b.n	8034bd4 <__sprint_r+0x34>
 8034bfa:	f001 f81d 	bl	8035c38 <__sfvwrite_r>
 8034bfe:	e7dd      	b.n	8034bbc <__sprint_r+0x1c>
 8034c00:	4618      	mov	r0, r3
 8034c02:	e7dd      	b.n	8034bc0 <__sprint_r+0x20>

08034c04 <_vfiprintf_r>:
 8034c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034c08:	b0bb      	sub	sp, #236	@ 0xec
 8034c0a:	460f      	mov	r7, r1
 8034c0c:	4693      	mov	fp, r2
 8034c0e:	461c      	mov	r4, r3
 8034c10:	461d      	mov	r5, r3
 8034c12:	9000      	str	r0, [sp, #0]
 8034c14:	b118      	cbz	r0, 8034c1e <_vfiprintf_r+0x1a>
 8034c16:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8034c18:	b90b      	cbnz	r3, 8034c1e <_vfiprintf_r+0x1a>
 8034c1a:	f000 ffbb 	bl	8035b94 <__sinit>
 8034c1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8034c20:	07db      	lsls	r3, r3, #31
 8034c22:	d405      	bmi.n	8034c30 <_vfiprintf_r+0x2c>
 8034c24:	89bb      	ldrh	r3, [r7, #12]
 8034c26:	059e      	lsls	r6, r3, #22
 8034c28:	d402      	bmi.n	8034c30 <_vfiprintf_r+0x2c>
 8034c2a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8034c2c:	f002 fc91 	bl	8037552 <__retarget_lock_acquire_recursive>
 8034c30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8034c34:	0498      	lsls	r0, r3, #18
 8034c36:	d406      	bmi.n	8034c46 <_vfiprintf_r+0x42>
 8034c38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8034c3c:	81bb      	strh	r3, [r7, #12]
 8034c3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8034c40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8034c44:	667b      	str	r3, [r7, #100]	@ 0x64
 8034c46:	89bb      	ldrh	r3, [r7, #12]
 8034c48:	0719      	lsls	r1, r3, #28
 8034c4a:	d501      	bpl.n	8034c50 <_vfiprintf_r+0x4c>
 8034c4c:	693b      	ldr	r3, [r7, #16]
 8034c4e:	b9ab      	cbnz	r3, 8034c7c <_vfiprintf_r+0x78>
 8034c50:	9800      	ldr	r0, [sp, #0]
 8034c52:	4639      	mov	r1, r7
 8034c54:	f001 f95a 	bl	8035f0c <__swsetup_r>
 8034c58:	b180      	cbz	r0, 8034c7c <_vfiprintf_r+0x78>
 8034c5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8034c5c:	07da      	lsls	r2, r3, #31
 8034c5e:	d506      	bpl.n	8034c6e <_vfiprintf_r+0x6a>
 8034c60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8034c64:	9303      	str	r3, [sp, #12]
 8034c66:	9803      	ldr	r0, [sp, #12]
 8034c68:	b03b      	add	sp, #236	@ 0xec
 8034c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034c6e:	89bb      	ldrh	r3, [r7, #12]
 8034c70:	059b      	lsls	r3, r3, #22
 8034c72:	d4f5      	bmi.n	8034c60 <_vfiprintf_r+0x5c>
 8034c74:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8034c76:	f002 fc6e 	bl	8037556 <__retarget_lock_release_recursive>
 8034c7a:	e7f1      	b.n	8034c60 <_vfiprintf_r+0x5c>
 8034c7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8034c80:	f003 021a 	and.w	r2, r3, #26
 8034c84:	2a0a      	cmp	r2, #10
 8034c86:	d114      	bne.n	8034cb2 <_vfiprintf_r+0xae>
 8034c88:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8034c8c:	2a00      	cmp	r2, #0
 8034c8e:	db10      	blt.n	8034cb2 <_vfiprintf_r+0xae>
 8034c90:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8034c92:	07d6      	lsls	r6, r2, #31
 8034c94:	d404      	bmi.n	8034ca0 <_vfiprintf_r+0x9c>
 8034c96:	059d      	lsls	r5, r3, #22
 8034c98:	d402      	bmi.n	8034ca0 <_vfiprintf_r+0x9c>
 8034c9a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8034c9c:	f002 fc5b 	bl	8037556 <__retarget_lock_release_recursive>
 8034ca0:	9800      	ldr	r0, [sp, #0]
 8034ca2:	4623      	mov	r3, r4
 8034ca4:	465a      	mov	r2, fp
 8034ca6:	4639      	mov	r1, r7
 8034ca8:	b03b      	add	sp, #236	@ 0xec
 8034caa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034cae:	f000 bc31 	b.w	8035514 <__sbprintf>
 8034cb2:	2300      	movs	r3, #0
 8034cb4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8034cb8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8034cbc:	ae11      	add	r6, sp, #68	@ 0x44
 8034cbe:	960e      	str	r6, [sp, #56]	@ 0x38
 8034cc0:	9307      	str	r3, [sp, #28]
 8034cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8034cc4:	9303      	str	r3, [sp, #12]
 8034cc6:	465b      	mov	r3, fp
 8034cc8:	461c      	mov	r4, r3
 8034cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8034cce:	b10a      	cbz	r2, 8034cd4 <_vfiprintf_r+0xd0>
 8034cd0:	2a25      	cmp	r2, #37	@ 0x25
 8034cd2:	d1f9      	bne.n	8034cc8 <_vfiprintf_r+0xc4>
 8034cd4:	ebb4 080b 	subs.w	r8, r4, fp
 8034cd8:	d00d      	beq.n	8034cf6 <_vfiprintf_r+0xf2>
 8034cda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034cdc:	4443      	add	r3, r8
 8034cde:	9310      	str	r3, [sp, #64]	@ 0x40
 8034ce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034ce2:	3301      	adds	r3, #1
 8034ce4:	2b07      	cmp	r3, #7
 8034ce6:	e9c6 b800 	strd	fp, r8, [r6]
 8034cea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8034cec:	dc75      	bgt.n	8034dda <_vfiprintf_r+0x1d6>
 8034cee:	3608      	adds	r6, #8
 8034cf0:	9b03      	ldr	r3, [sp, #12]
 8034cf2:	4443      	add	r3, r8
 8034cf4:	9303      	str	r3, [sp, #12]
 8034cf6:	7823      	ldrb	r3, [r4, #0]
 8034cf8:	2b00      	cmp	r3, #0
 8034cfa:	f000 83cd 	beq.w	8035498 <_vfiprintf_r+0x894>
 8034cfe:	2300      	movs	r3, #0
 8034d00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034d04:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8034d08:	3401      	adds	r4, #1
 8034d0a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8034d0e:	469a      	mov	sl, r3
 8034d10:	46a3      	mov	fp, r4
 8034d12:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8034d16:	f1a3 0220 	sub.w	r2, r3, #32
 8034d1a:	2a5a      	cmp	r2, #90	@ 0x5a
 8034d1c:	f200 8316 	bhi.w	803534c <_vfiprintf_r+0x748>
 8034d20:	e8df f012 	tbh	[pc, r2, lsl #1]
 8034d24:	0314009a 	.word	0x0314009a
 8034d28:	00a20314 	.word	0x00a20314
 8034d2c:	03140314 	.word	0x03140314
 8034d30:	00820314 	.word	0x00820314
 8034d34:	03140314 	.word	0x03140314
 8034d38:	00af00a5 	.word	0x00af00a5
 8034d3c:	00ac0314 	.word	0x00ac0314
 8034d40:	031400b1 	.word	0x031400b1
 8034d44:	00d000cd 	.word	0x00d000cd
 8034d48:	00d000d0 	.word	0x00d000d0
 8034d4c:	00d000d0 	.word	0x00d000d0
 8034d50:	00d000d0 	.word	0x00d000d0
 8034d54:	00d000d0 	.word	0x00d000d0
 8034d58:	03140314 	.word	0x03140314
 8034d5c:	03140314 	.word	0x03140314
 8034d60:	03140314 	.word	0x03140314
 8034d64:	03140314 	.word	0x03140314
 8034d68:	00f70314 	.word	0x00f70314
 8034d6c:	03140104 	.word	0x03140104
 8034d70:	03140314 	.word	0x03140314
 8034d74:	03140314 	.word	0x03140314
 8034d78:	03140314 	.word	0x03140314
 8034d7c:	03140314 	.word	0x03140314
 8034d80:	01520314 	.word	0x01520314
 8034d84:	03140314 	.word	0x03140314
 8034d88:	019a0314 	.word	0x019a0314
 8034d8c:	027a0314 	.word	0x027a0314
 8034d90:	03140314 	.word	0x03140314
 8034d94:	0314029a 	.word	0x0314029a
 8034d98:	03140314 	.word	0x03140314
 8034d9c:	03140314 	.word	0x03140314
 8034da0:	03140314 	.word	0x03140314
 8034da4:	03140314 	.word	0x03140314
 8034da8:	00f70314 	.word	0x00f70314
 8034dac:	03140106 	.word	0x03140106
 8034db0:	03140314 	.word	0x03140314
 8034db4:	010600e0 	.word	0x010600e0
 8034db8:	031400f1 	.word	0x031400f1
 8034dbc:	031400eb 	.word	0x031400eb
 8034dc0:	01540132 	.word	0x01540132
 8034dc4:	00f10189 	.word	0x00f10189
 8034dc8:	019a0314 	.word	0x019a0314
 8034dcc:	027c0098 	.word	0x027c0098
 8034dd0:	03140314 	.word	0x03140314
 8034dd4:	03140065 	.word	0x03140065
 8034dd8:	0098      	.short	0x0098
 8034dda:	9800      	ldr	r0, [sp, #0]
 8034ddc:	aa0e      	add	r2, sp, #56	@ 0x38
 8034dde:	4639      	mov	r1, r7
 8034de0:	f7ff fede 	bl	8034ba0 <__sprint_r>
 8034de4:	2800      	cmp	r0, #0
 8034de6:	f040 8336 	bne.w	8035456 <_vfiprintf_r+0x852>
 8034dea:	ae11      	add	r6, sp, #68	@ 0x44
 8034dec:	e780      	b.n	8034cf0 <_vfiprintf_r+0xec>
 8034dee:	4a99      	ldr	r2, [pc, #612]	@ (8035054 <_vfiprintf_r+0x450>)
 8034df0:	9205      	str	r2, [sp, #20]
 8034df2:	f01a 0220 	ands.w	r2, sl, #32
 8034df6:	f000 8231 	beq.w	803525c <_vfiprintf_r+0x658>
 8034dfa:	3507      	adds	r5, #7
 8034dfc:	f025 0507 	bic.w	r5, r5, #7
 8034e00:	46a8      	mov	r8, r5
 8034e02:	686d      	ldr	r5, [r5, #4]
 8034e04:	f858 4b08 	ldr.w	r4, [r8], #8
 8034e08:	f01a 0f01 	tst.w	sl, #1
 8034e0c:	d009      	beq.n	8034e22 <_vfiprintf_r+0x21e>
 8034e0e:	ea54 0205 	orrs.w	r2, r4, r5
 8034e12:	bf1f      	itttt	ne
 8034e14:	2230      	movne	r2, #48	@ 0x30
 8034e16:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8034e1a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8034e1e:	f04a 0a02 	orrne.w	sl, sl, #2
 8034e22:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8034e26:	e112      	b.n	803504e <_vfiprintf_r+0x44a>
 8034e28:	9800      	ldr	r0, [sp, #0]
 8034e2a:	f002 fae7 	bl	80373fc <_localeconv_r>
 8034e2e:	6843      	ldr	r3, [r0, #4]
 8034e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8034e32:	4618      	mov	r0, r3
 8034e34:	f7db fa34 	bl	80102a0 <strlen>
 8034e38:	9007      	str	r0, [sp, #28]
 8034e3a:	9800      	ldr	r0, [sp, #0]
 8034e3c:	f002 fade 	bl	80373fc <_localeconv_r>
 8034e40:	6883      	ldr	r3, [r0, #8]
 8034e42:	9306      	str	r3, [sp, #24]
 8034e44:	9b07      	ldr	r3, [sp, #28]
 8034e46:	b12b      	cbz	r3, 8034e54 <_vfiprintf_r+0x250>
 8034e48:	9b06      	ldr	r3, [sp, #24]
 8034e4a:	b11b      	cbz	r3, 8034e54 <_vfiprintf_r+0x250>
 8034e4c:	781b      	ldrb	r3, [r3, #0]
 8034e4e:	b10b      	cbz	r3, 8034e54 <_vfiprintf_r+0x250>
 8034e50:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8034e54:	465c      	mov	r4, fp
 8034e56:	e75b      	b.n	8034d10 <_vfiprintf_r+0x10c>
 8034e58:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8034e5c:	2b00      	cmp	r3, #0
 8034e5e:	d1f9      	bne.n	8034e54 <_vfiprintf_r+0x250>
 8034e60:	2320      	movs	r3, #32
 8034e62:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8034e66:	e7f5      	b.n	8034e54 <_vfiprintf_r+0x250>
 8034e68:	f04a 0a01 	orr.w	sl, sl, #1
 8034e6c:	e7f2      	b.n	8034e54 <_vfiprintf_r+0x250>
 8034e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8034e72:	9302      	str	r3, [sp, #8]
 8034e74:	2b00      	cmp	r3, #0
 8034e76:	daed      	bge.n	8034e54 <_vfiprintf_r+0x250>
 8034e78:	425b      	negs	r3, r3
 8034e7a:	9302      	str	r3, [sp, #8]
 8034e7c:	f04a 0a04 	orr.w	sl, sl, #4
 8034e80:	e7e8      	b.n	8034e54 <_vfiprintf_r+0x250>
 8034e82:	232b      	movs	r3, #43	@ 0x2b
 8034e84:	e7ed      	b.n	8034e62 <_vfiprintf_r+0x25e>
 8034e86:	465a      	mov	r2, fp
 8034e88:	f812 3b01 	ldrb.w	r3, [r2], #1
 8034e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8034e8e:	d112      	bne.n	8034eb6 <_vfiprintf_r+0x2b2>
 8034e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8034e94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8034e98:	9301      	str	r3, [sp, #4]
 8034e9a:	4693      	mov	fp, r2
 8034e9c:	e7da      	b.n	8034e54 <_vfiprintf_r+0x250>
 8034e9e:	9b01      	ldr	r3, [sp, #4]
 8034ea0:	fb00 1303 	mla	r3, r0, r3, r1
 8034ea4:	9301      	str	r3, [sp, #4]
 8034ea6:	f812 3b01 	ldrb.w	r3, [r2], #1
 8034eaa:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8034eae:	2909      	cmp	r1, #9
 8034eb0:	d9f5      	bls.n	8034e9e <_vfiprintf_r+0x29a>
 8034eb2:	4693      	mov	fp, r2
 8034eb4:	e72f      	b.n	8034d16 <_vfiprintf_r+0x112>
 8034eb6:	2100      	movs	r1, #0
 8034eb8:	9101      	str	r1, [sp, #4]
 8034eba:	200a      	movs	r0, #10
 8034ebc:	e7f5      	b.n	8034eaa <_vfiprintf_r+0x2a6>
 8034ebe:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8034ec2:	e7c7      	b.n	8034e54 <_vfiprintf_r+0x250>
 8034ec4:	2100      	movs	r1, #0
 8034ec6:	465a      	mov	r2, fp
 8034ec8:	9102      	str	r1, [sp, #8]
 8034eca:	200a      	movs	r0, #10
 8034ecc:	9902      	ldr	r1, [sp, #8]
 8034ece:	3b30      	subs	r3, #48	@ 0x30
 8034ed0:	fb00 3301 	mla	r3, r0, r1, r3
 8034ed4:	9302      	str	r3, [sp, #8]
 8034ed6:	f812 3b01 	ldrb.w	r3, [r2], #1
 8034eda:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8034ede:	2909      	cmp	r1, #9
 8034ee0:	d9f4      	bls.n	8034ecc <_vfiprintf_r+0x2c8>
 8034ee2:	e7e6      	b.n	8034eb2 <_vfiprintf_r+0x2ae>
 8034ee4:	f89b 3000 	ldrb.w	r3, [fp]
 8034ee8:	2b68      	cmp	r3, #104	@ 0x68
 8034eea:	bf06      	itte	eq
 8034eec:	f10b 0b01 	addeq.w	fp, fp, #1
 8034ef0:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8034ef4:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8034ef8:	e7ac      	b.n	8034e54 <_vfiprintf_r+0x250>
 8034efa:	f89b 3000 	ldrb.w	r3, [fp]
 8034efe:	2b6c      	cmp	r3, #108	@ 0x6c
 8034f00:	d104      	bne.n	8034f0c <_vfiprintf_r+0x308>
 8034f02:	f10b 0b01 	add.w	fp, fp, #1
 8034f06:	f04a 0a20 	orr.w	sl, sl, #32
 8034f0a:	e7a3      	b.n	8034e54 <_vfiprintf_r+0x250>
 8034f0c:	f04a 0a10 	orr.w	sl, sl, #16
 8034f10:	e7a0      	b.n	8034e54 <_vfiprintf_r+0x250>
 8034f12:	46a8      	mov	r8, r5
 8034f14:	2400      	movs	r4, #0
 8034f16:	f858 3b04 	ldr.w	r3, [r8], #4
 8034f1a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8034f1e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8034f22:	2301      	movs	r3, #1
 8034f24:	9301      	str	r3, [sp, #4]
 8034f26:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8034f2a:	e0ab      	b.n	8035084 <_vfiprintf_r+0x480>
 8034f2c:	f04a 0a10 	orr.w	sl, sl, #16
 8034f30:	f01a 0f20 	tst.w	sl, #32
 8034f34:	d011      	beq.n	8034f5a <_vfiprintf_r+0x356>
 8034f36:	3507      	adds	r5, #7
 8034f38:	f025 0507 	bic.w	r5, r5, #7
 8034f3c:	46a8      	mov	r8, r5
 8034f3e:	686d      	ldr	r5, [r5, #4]
 8034f40:	f858 4b08 	ldr.w	r4, [r8], #8
 8034f44:	2d00      	cmp	r5, #0
 8034f46:	da06      	bge.n	8034f56 <_vfiprintf_r+0x352>
 8034f48:	4264      	negs	r4, r4
 8034f4a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8034f4e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8034f52:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8034f56:	2301      	movs	r3, #1
 8034f58:	e048      	b.n	8034fec <_vfiprintf_r+0x3e8>
 8034f5a:	46a8      	mov	r8, r5
 8034f5c:	f01a 0f10 	tst.w	sl, #16
 8034f60:	f858 5b04 	ldr.w	r5, [r8], #4
 8034f64:	d002      	beq.n	8034f6c <_vfiprintf_r+0x368>
 8034f66:	462c      	mov	r4, r5
 8034f68:	17ed      	asrs	r5, r5, #31
 8034f6a:	e7eb      	b.n	8034f44 <_vfiprintf_r+0x340>
 8034f6c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8034f70:	d003      	beq.n	8034f7a <_vfiprintf_r+0x376>
 8034f72:	b22c      	sxth	r4, r5
 8034f74:	f345 35c0 	sbfx	r5, r5, #15, #1
 8034f78:	e7e4      	b.n	8034f44 <_vfiprintf_r+0x340>
 8034f7a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8034f7e:	d0f2      	beq.n	8034f66 <_vfiprintf_r+0x362>
 8034f80:	b26c      	sxtb	r4, r5
 8034f82:	f345 15c0 	sbfx	r5, r5, #7, #1
 8034f86:	e7dd      	b.n	8034f44 <_vfiprintf_r+0x340>
 8034f88:	f01a 0f20 	tst.w	sl, #32
 8034f8c:	d007      	beq.n	8034f9e <_vfiprintf_r+0x39a>
 8034f8e:	9a03      	ldr	r2, [sp, #12]
 8034f90:	682b      	ldr	r3, [r5, #0]
 8034f92:	9903      	ldr	r1, [sp, #12]
 8034f94:	17d2      	asrs	r2, r2, #31
 8034f96:	e9c3 1200 	strd	r1, r2, [r3]
 8034f9a:	3504      	adds	r5, #4
 8034f9c:	e693      	b.n	8034cc6 <_vfiprintf_r+0xc2>
 8034f9e:	f01a 0f10 	tst.w	sl, #16
 8034fa2:	d003      	beq.n	8034fac <_vfiprintf_r+0x3a8>
 8034fa4:	682b      	ldr	r3, [r5, #0]
 8034fa6:	9a03      	ldr	r2, [sp, #12]
 8034fa8:	601a      	str	r2, [r3, #0]
 8034faa:	e7f6      	b.n	8034f9a <_vfiprintf_r+0x396>
 8034fac:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8034fb0:	d003      	beq.n	8034fba <_vfiprintf_r+0x3b6>
 8034fb2:	682b      	ldr	r3, [r5, #0]
 8034fb4:	9a03      	ldr	r2, [sp, #12]
 8034fb6:	801a      	strh	r2, [r3, #0]
 8034fb8:	e7ef      	b.n	8034f9a <_vfiprintf_r+0x396>
 8034fba:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8034fbe:	d0f1      	beq.n	8034fa4 <_vfiprintf_r+0x3a0>
 8034fc0:	682b      	ldr	r3, [r5, #0]
 8034fc2:	9a03      	ldr	r2, [sp, #12]
 8034fc4:	701a      	strb	r2, [r3, #0]
 8034fc6:	e7e8      	b.n	8034f9a <_vfiprintf_r+0x396>
 8034fc8:	f04a 0a10 	orr.w	sl, sl, #16
 8034fcc:	f01a 0320 	ands.w	r3, sl, #32
 8034fd0:	d01f      	beq.n	8035012 <_vfiprintf_r+0x40e>
 8034fd2:	3507      	adds	r5, #7
 8034fd4:	f025 0507 	bic.w	r5, r5, #7
 8034fd8:	46a8      	mov	r8, r5
 8034fda:	686d      	ldr	r5, [r5, #4]
 8034fdc:	f858 4b08 	ldr.w	r4, [r8], #8
 8034fe0:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8034fe4:	2300      	movs	r3, #0
 8034fe6:	2200      	movs	r2, #0
 8034fe8:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8034fec:	9a01      	ldr	r2, [sp, #4]
 8034fee:	3201      	adds	r2, #1
 8034ff0:	f000 825f 	beq.w	80354b2 <_vfiprintf_r+0x8ae>
 8034ff4:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8034ff8:	9204      	str	r2, [sp, #16]
 8034ffa:	ea54 0205 	orrs.w	r2, r4, r5
 8034ffe:	f040 825e 	bne.w	80354be <_vfiprintf_r+0x8ba>
 8035002:	9a01      	ldr	r2, [sp, #4]
 8035004:	2a00      	cmp	r2, #0
 8035006:	f000 8198 	beq.w	803533a <_vfiprintf_r+0x736>
 803500a:	2b01      	cmp	r3, #1
 803500c:	f040 825a 	bne.w	80354c4 <_vfiprintf_r+0x8c0>
 8035010:	e13b      	b.n	803528a <_vfiprintf_r+0x686>
 8035012:	46a8      	mov	r8, r5
 8035014:	f01a 0510 	ands.w	r5, sl, #16
 8035018:	f858 4b04 	ldr.w	r4, [r8], #4
 803501c:	d001      	beq.n	8035022 <_vfiprintf_r+0x41e>
 803501e:	461d      	mov	r5, r3
 8035020:	e7de      	b.n	8034fe0 <_vfiprintf_r+0x3dc>
 8035022:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8035026:	d001      	beq.n	803502c <_vfiprintf_r+0x428>
 8035028:	b2a4      	uxth	r4, r4
 803502a:	e7d9      	b.n	8034fe0 <_vfiprintf_r+0x3dc>
 803502c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8035030:	d0d6      	beq.n	8034fe0 <_vfiprintf_r+0x3dc>
 8035032:	b2e4      	uxtb	r4, r4
 8035034:	e7f3      	b.n	803501e <_vfiprintf_r+0x41a>
 8035036:	46a8      	mov	r8, r5
 8035038:	f647 0330 	movw	r3, #30768	@ 0x7830
 803503c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8035040:	f858 4b04 	ldr.w	r4, [r8], #4
 8035044:	4b03      	ldr	r3, [pc, #12]	@ (8035054 <_vfiprintf_r+0x450>)
 8035046:	9305      	str	r3, [sp, #20]
 8035048:	2500      	movs	r5, #0
 803504a:	f04a 0a02 	orr.w	sl, sl, #2
 803504e:	2302      	movs	r3, #2
 8035050:	e7c9      	b.n	8034fe6 <_vfiprintf_r+0x3e2>
 8035052:	bf00      	nop
 8035054:	08044c78 	.word	0x08044c78
 8035058:	9b01      	ldr	r3, [sp, #4]
 803505a:	46a8      	mov	r8, r5
 803505c:	1c5c      	adds	r4, r3, #1
 803505e:	f04f 0500 	mov.w	r5, #0
 8035062:	f858 9b04 	ldr.w	r9, [r8], #4
 8035066:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 803506a:	f000 80d0 	beq.w	803520e <_vfiprintf_r+0x60a>
 803506e:	461a      	mov	r2, r3
 8035070:	4629      	mov	r1, r5
 8035072:	4648      	mov	r0, r9
 8035074:	f7db f8c4 	bl	8010200 <memchr>
 8035078:	4604      	mov	r4, r0
 803507a:	b118      	cbz	r0, 8035084 <_vfiprintf_r+0x480>
 803507c:	eba0 0309 	sub.w	r3, r0, r9
 8035080:	9301      	str	r3, [sp, #4]
 8035082:	462c      	mov	r4, r5
 8035084:	9b01      	ldr	r3, [sp, #4]
 8035086:	42a3      	cmp	r3, r4
 8035088:	bfb8      	it	lt
 803508a:	4623      	movlt	r3, r4
 803508c:	9304      	str	r3, [sp, #16]
 803508e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8035092:	b113      	cbz	r3, 803509a <_vfiprintf_r+0x496>
 8035094:	9b04      	ldr	r3, [sp, #16]
 8035096:	3301      	adds	r3, #1
 8035098:	9304      	str	r3, [sp, #16]
 803509a:	f01a 0302 	ands.w	r3, sl, #2
 803509e:	9308      	str	r3, [sp, #32]
 80350a0:	bf1e      	ittt	ne
 80350a2:	9b04      	ldrne	r3, [sp, #16]
 80350a4:	3302      	addne	r3, #2
 80350a6:	9304      	strne	r3, [sp, #16]
 80350a8:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 80350ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80350ae:	d11f      	bne.n	80350f0 <_vfiprintf_r+0x4ec>
 80350b0:	9b02      	ldr	r3, [sp, #8]
 80350b2:	9a04      	ldr	r2, [sp, #16]
 80350b4:	1a9d      	subs	r5, r3, r2
 80350b6:	2d00      	cmp	r5, #0
 80350b8:	dd1a      	ble.n	80350f0 <_vfiprintf_r+0x4ec>
 80350ba:	4ba9      	ldr	r3, [pc, #676]	@ (8035360 <_vfiprintf_r+0x75c>)
 80350bc:	6033      	str	r3, [r6, #0]
 80350be:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80350c2:	2d10      	cmp	r5, #16
 80350c4:	f102 0201 	add.w	r2, r2, #1
 80350c8:	f106 0008 	add.w	r0, r6, #8
 80350cc:	f300 814e 	bgt.w	803536c <_vfiprintf_r+0x768>
 80350d0:	6075      	str	r5, [r6, #4]
 80350d2:	2a07      	cmp	r2, #7
 80350d4:	4465      	add	r5, ip
 80350d6:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80350da:	f340 815a 	ble.w	8035392 <_vfiprintf_r+0x78e>
 80350de:	9800      	ldr	r0, [sp, #0]
 80350e0:	aa0e      	add	r2, sp, #56	@ 0x38
 80350e2:	4639      	mov	r1, r7
 80350e4:	f7ff fd5c 	bl	8034ba0 <__sprint_r>
 80350e8:	2800      	cmp	r0, #0
 80350ea:	f040 81b4 	bne.w	8035456 <_vfiprintf_r+0x852>
 80350ee:	ae11      	add	r6, sp, #68	@ 0x44
 80350f0:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 80350f4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80350f8:	b161      	cbz	r1, 8035114 <_vfiprintf_r+0x510>
 80350fa:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 80350fe:	3301      	adds	r3, #1
 8035100:	6031      	str	r1, [r6, #0]
 8035102:	2101      	movs	r1, #1
 8035104:	440a      	add	r2, r1
 8035106:	2b07      	cmp	r3, #7
 8035108:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 803510c:	6071      	str	r1, [r6, #4]
 803510e:	f300 8142 	bgt.w	8035396 <_vfiprintf_r+0x792>
 8035112:	3608      	adds	r6, #8
 8035114:	9908      	ldr	r1, [sp, #32]
 8035116:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 803511a:	b159      	cbz	r1, 8035134 <_vfiprintf_r+0x530>
 803511c:	a90d      	add	r1, sp, #52	@ 0x34
 803511e:	3301      	adds	r3, #1
 8035120:	6031      	str	r1, [r6, #0]
 8035122:	2102      	movs	r1, #2
 8035124:	440a      	add	r2, r1
 8035126:	2b07      	cmp	r3, #7
 8035128:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 803512c:	6071      	str	r1, [r6, #4]
 803512e:	f300 813b 	bgt.w	80353a8 <_vfiprintf_r+0x7a4>
 8035132:	3608      	adds	r6, #8
 8035134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8035136:	2b80      	cmp	r3, #128	@ 0x80
 8035138:	d11f      	bne.n	803517a <_vfiprintf_r+0x576>
 803513a:	9b02      	ldr	r3, [sp, #8]
 803513c:	9a04      	ldr	r2, [sp, #16]
 803513e:	1a9d      	subs	r5, r3, r2
 8035140:	2d00      	cmp	r5, #0
 8035142:	dd1a      	ble.n	803517a <_vfiprintf_r+0x576>
 8035144:	4b87      	ldr	r3, [pc, #540]	@ (8035364 <_vfiprintf_r+0x760>)
 8035146:	6033      	str	r3, [r6, #0]
 8035148:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 803514c:	2d10      	cmp	r5, #16
 803514e:	f102 0201 	add.w	r2, r2, #1
 8035152:	f106 0008 	add.w	r0, r6, #8
 8035156:	f300 8130 	bgt.w	80353ba <_vfiprintf_r+0x7b6>
 803515a:	6075      	str	r5, [r6, #4]
 803515c:	2a07      	cmp	r2, #7
 803515e:	4465      	add	r5, ip
 8035160:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8035164:	f340 813c 	ble.w	80353e0 <_vfiprintf_r+0x7dc>
 8035168:	9800      	ldr	r0, [sp, #0]
 803516a:	aa0e      	add	r2, sp, #56	@ 0x38
 803516c:	4639      	mov	r1, r7
 803516e:	f7ff fd17 	bl	8034ba0 <__sprint_r>
 8035172:	2800      	cmp	r0, #0
 8035174:	f040 816f 	bne.w	8035456 <_vfiprintf_r+0x852>
 8035178:	ae11      	add	r6, sp, #68	@ 0x44
 803517a:	9b01      	ldr	r3, [sp, #4]
 803517c:	1ae4      	subs	r4, r4, r3
 803517e:	2c00      	cmp	r4, #0
 8035180:	dd1a      	ble.n	80351b8 <_vfiprintf_r+0x5b4>
 8035182:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8035186:	4877      	ldr	r0, [pc, #476]	@ (8035364 <_vfiprintf_r+0x760>)
 8035188:	6030      	str	r0, [r6, #0]
 803518a:	2c10      	cmp	r4, #16
 803518c:	f103 0301 	add.w	r3, r3, #1
 8035190:	f106 0108 	add.w	r1, r6, #8
 8035194:	f300 8126 	bgt.w	80353e4 <_vfiprintf_r+0x7e0>
 8035198:	6074      	str	r4, [r6, #4]
 803519a:	2b07      	cmp	r3, #7
 803519c:	4414      	add	r4, r2
 803519e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 80351a2:	f340 8130 	ble.w	8035406 <_vfiprintf_r+0x802>
 80351a6:	9800      	ldr	r0, [sp, #0]
 80351a8:	aa0e      	add	r2, sp, #56	@ 0x38
 80351aa:	4639      	mov	r1, r7
 80351ac:	f7ff fcf8 	bl	8034ba0 <__sprint_r>
 80351b0:	2800      	cmp	r0, #0
 80351b2:	f040 8150 	bne.w	8035456 <_vfiprintf_r+0x852>
 80351b6:	ae11      	add	r6, sp, #68	@ 0x44
 80351b8:	9b01      	ldr	r3, [sp, #4]
 80351ba:	9a01      	ldr	r2, [sp, #4]
 80351bc:	6073      	str	r3, [r6, #4]
 80351be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80351c0:	f8c6 9000 	str.w	r9, [r6]
 80351c4:	4413      	add	r3, r2
 80351c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80351c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80351ca:	3301      	adds	r3, #1
 80351cc:	2b07      	cmp	r3, #7
 80351ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80351d0:	f300 811b 	bgt.w	803540a <_vfiprintf_r+0x806>
 80351d4:	f106 0308 	add.w	r3, r6, #8
 80351d8:	f01a 0f04 	tst.w	sl, #4
 80351dc:	f040 811d 	bne.w	803541a <_vfiprintf_r+0x816>
 80351e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80351e4:	9904      	ldr	r1, [sp, #16]
 80351e6:	428a      	cmp	r2, r1
 80351e8:	bfac      	ite	ge
 80351ea:	189b      	addge	r3, r3, r2
 80351ec:	185b      	addlt	r3, r3, r1
 80351ee:	9303      	str	r3, [sp, #12]
 80351f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80351f2:	b13b      	cbz	r3, 8035204 <_vfiprintf_r+0x600>
 80351f4:	9800      	ldr	r0, [sp, #0]
 80351f6:	aa0e      	add	r2, sp, #56	@ 0x38
 80351f8:	4639      	mov	r1, r7
 80351fa:	f7ff fcd1 	bl	8034ba0 <__sprint_r>
 80351fe:	2800      	cmp	r0, #0
 8035200:	f040 8129 	bne.w	8035456 <_vfiprintf_r+0x852>
 8035204:	2300      	movs	r3, #0
 8035206:	930f      	str	r3, [sp, #60]	@ 0x3c
 8035208:	4645      	mov	r5, r8
 803520a:	ae11      	add	r6, sp, #68	@ 0x44
 803520c:	e55b      	b.n	8034cc6 <_vfiprintf_r+0xc2>
 803520e:	4648      	mov	r0, r9
 8035210:	f7db f846 	bl	80102a0 <strlen>
 8035214:	9001      	str	r0, [sp, #4]
 8035216:	e734      	b.n	8035082 <_vfiprintf_r+0x47e>
 8035218:	f04a 0a10 	orr.w	sl, sl, #16
 803521c:	f01a 0320 	ands.w	r3, sl, #32
 8035220:	d008      	beq.n	8035234 <_vfiprintf_r+0x630>
 8035222:	3507      	adds	r5, #7
 8035224:	f025 0507 	bic.w	r5, r5, #7
 8035228:	46a8      	mov	r8, r5
 803522a:	686d      	ldr	r5, [r5, #4]
 803522c:	f858 4b08 	ldr.w	r4, [r8], #8
 8035230:	2301      	movs	r3, #1
 8035232:	e6d8      	b.n	8034fe6 <_vfiprintf_r+0x3e2>
 8035234:	46a8      	mov	r8, r5
 8035236:	f01a 0510 	ands.w	r5, sl, #16
 803523a:	f858 4b04 	ldr.w	r4, [r8], #4
 803523e:	d001      	beq.n	8035244 <_vfiprintf_r+0x640>
 8035240:	461d      	mov	r5, r3
 8035242:	e7f5      	b.n	8035230 <_vfiprintf_r+0x62c>
 8035244:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8035248:	d001      	beq.n	803524e <_vfiprintf_r+0x64a>
 803524a:	b2a4      	uxth	r4, r4
 803524c:	e7f0      	b.n	8035230 <_vfiprintf_r+0x62c>
 803524e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8035252:	d0ed      	beq.n	8035230 <_vfiprintf_r+0x62c>
 8035254:	b2e4      	uxtb	r4, r4
 8035256:	e7f3      	b.n	8035240 <_vfiprintf_r+0x63c>
 8035258:	4a43      	ldr	r2, [pc, #268]	@ (8035368 <_vfiprintf_r+0x764>)
 803525a:	e5c9      	b.n	8034df0 <_vfiprintf_r+0x1ec>
 803525c:	46a8      	mov	r8, r5
 803525e:	f01a 0510 	ands.w	r5, sl, #16
 8035262:	f858 4b04 	ldr.w	r4, [r8], #4
 8035266:	d001      	beq.n	803526c <_vfiprintf_r+0x668>
 8035268:	4615      	mov	r5, r2
 803526a:	e5cd      	b.n	8034e08 <_vfiprintf_r+0x204>
 803526c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8035270:	d001      	beq.n	8035276 <_vfiprintf_r+0x672>
 8035272:	b2a4      	uxth	r4, r4
 8035274:	e5c8      	b.n	8034e08 <_vfiprintf_r+0x204>
 8035276:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 803527a:	f43f adc5 	beq.w	8034e08 <_vfiprintf_r+0x204>
 803527e:	b2e4      	uxtb	r4, r4
 8035280:	e7f2      	b.n	8035268 <_vfiprintf_r+0x664>
 8035282:	2c0a      	cmp	r4, #10
 8035284:	f175 0300 	sbcs.w	r3, r5, #0
 8035288:	d206      	bcs.n	8035298 <_vfiprintf_r+0x694>
 803528a:	3430      	adds	r4, #48	@ 0x30
 803528c:	b2e4      	uxtb	r4, r4
 803528e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8035292:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8035296:	e131      	b.n	80354fc <_vfiprintf_r+0x8f8>
 8035298:	ab3a      	add	r3, sp, #232	@ 0xe8
 803529a:	9308      	str	r3, [sp, #32]
 803529c:	9b04      	ldr	r3, [sp, #16]
 803529e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80352a2:	f04f 0a00 	mov.w	sl, #0
 80352a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80352a8:	220a      	movs	r2, #10
 80352aa:	2300      	movs	r3, #0
 80352ac:	4620      	mov	r0, r4
 80352ae:	4629      	mov	r1, r5
 80352b0:	f7db fd52 	bl	8010d58 <__aeabi_uldivmod>
 80352b4:	460b      	mov	r3, r1
 80352b6:	9908      	ldr	r1, [sp, #32]
 80352b8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80352ba:	3230      	adds	r2, #48	@ 0x30
 80352bc:	f801 2c01 	strb.w	r2, [r1, #-1]
 80352c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80352c2:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 80352c6:	f10a 0a01 	add.w	sl, sl, #1
 80352ca:	b1e2      	cbz	r2, 8035306 <_vfiprintf_r+0x702>
 80352cc:	9a06      	ldr	r2, [sp, #24]
 80352ce:	7812      	ldrb	r2, [r2, #0]
 80352d0:	4552      	cmp	r2, sl
 80352d2:	d118      	bne.n	8035306 <_vfiprintf_r+0x702>
 80352d4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80352d8:	d015      	beq.n	8035306 <_vfiprintf_r+0x702>
 80352da:	2c0a      	cmp	r4, #10
 80352dc:	f175 0200 	sbcs.w	r2, r5, #0
 80352e0:	d311      	bcc.n	8035306 <_vfiprintf_r+0x702>
 80352e2:	9308      	str	r3, [sp, #32]
 80352e4:	9b07      	ldr	r3, [sp, #28]
 80352e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80352e8:	eba9 0903 	sub.w	r9, r9, r3
 80352ec:	461a      	mov	r2, r3
 80352ee:	4648      	mov	r0, r9
 80352f0:	f000 ff3d 	bl	803616e <strncpy>
 80352f4:	9b06      	ldr	r3, [sp, #24]
 80352f6:	785a      	ldrb	r2, [r3, #1]
 80352f8:	9b08      	ldr	r3, [sp, #32]
 80352fa:	b172      	cbz	r2, 803531a <_vfiprintf_r+0x716>
 80352fc:	9a06      	ldr	r2, [sp, #24]
 80352fe:	3201      	adds	r2, #1
 8035300:	9206      	str	r2, [sp, #24]
 8035302:	f04f 0a00 	mov.w	sl, #0
 8035306:	2c0a      	cmp	r4, #10
 8035308:	f175 0500 	sbcs.w	r5, r5, #0
 803530c:	f0c0 80f6 	bcc.w	80354fc <_vfiprintf_r+0x8f8>
 8035310:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8035312:	f8cd 9020 	str.w	r9, [sp, #32]
 8035316:	461d      	mov	r5, r3
 8035318:	e7c6      	b.n	80352a8 <_vfiprintf_r+0x6a4>
 803531a:	4692      	mov	sl, r2
 803531c:	e7f3      	b.n	8035306 <_vfiprintf_r+0x702>
 803531e:	f004 030f 	and.w	r3, r4, #15
 8035322:	9a05      	ldr	r2, [sp, #20]
 8035324:	0924      	lsrs	r4, r4, #4
 8035326:	5cd3      	ldrb	r3, [r2, r3]
 8035328:	f809 3d01 	strb.w	r3, [r9, #-1]!
 803532c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8035330:	092d      	lsrs	r5, r5, #4
 8035332:	ea54 0305 	orrs.w	r3, r4, r5
 8035336:	d1f2      	bne.n	803531e <_vfiprintf_r+0x71a>
 8035338:	e0e0      	b.n	80354fc <_vfiprintf_r+0x8f8>
 803533a:	b923      	cbnz	r3, 8035346 <_vfiprintf_r+0x742>
 803533c:	f01a 0f01 	tst.w	sl, #1
 8035340:	d001      	beq.n	8035346 <_vfiprintf_r+0x742>
 8035342:	2430      	movs	r4, #48	@ 0x30
 8035344:	e7a3      	b.n	803528e <_vfiprintf_r+0x68a>
 8035346:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 803534a:	e0d7      	b.n	80354fc <_vfiprintf_r+0x8f8>
 803534c:	2b00      	cmp	r3, #0
 803534e:	f000 80a3 	beq.w	8035498 <_vfiprintf_r+0x894>
 8035352:	2400      	movs	r4, #0
 8035354:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8035358:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 803535c:	46a8      	mov	r8, r5
 803535e:	e5e0      	b.n	8034f22 <_vfiprintf_r+0x31e>
 8035360:	08044ccc 	.word	0x08044ccc
 8035364:	08044cbc 	.word	0x08044cbc
 8035368:	08044c89 	.word	0x08044c89
 803536c:	2110      	movs	r1, #16
 803536e:	6071      	str	r1, [r6, #4]
 8035370:	2a07      	cmp	r2, #7
 8035372:	4461      	add	r1, ip
 8035374:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8035378:	dd08      	ble.n	803538c <_vfiprintf_r+0x788>
 803537a:	9800      	ldr	r0, [sp, #0]
 803537c:	aa0e      	add	r2, sp, #56	@ 0x38
 803537e:	4639      	mov	r1, r7
 8035380:	f7ff fc0e 	bl	8034ba0 <__sprint_r>
 8035384:	2800      	cmp	r0, #0
 8035386:	d166      	bne.n	8035456 <_vfiprintf_r+0x852>
 8035388:	4b60      	ldr	r3, [pc, #384]	@ (803550c <_vfiprintf_r+0x908>)
 803538a:	a811      	add	r0, sp, #68	@ 0x44
 803538c:	3d10      	subs	r5, #16
 803538e:	4606      	mov	r6, r0
 8035390:	e694      	b.n	80350bc <_vfiprintf_r+0x4b8>
 8035392:	4606      	mov	r6, r0
 8035394:	e6ac      	b.n	80350f0 <_vfiprintf_r+0x4ec>
 8035396:	9800      	ldr	r0, [sp, #0]
 8035398:	aa0e      	add	r2, sp, #56	@ 0x38
 803539a:	4639      	mov	r1, r7
 803539c:	f7ff fc00 	bl	8034ba0 <__sprint_r>
 80353a0:	2800      	cmp	r0, #0
 80353a2:	d158      	bne.n	8035456 <_vfiprintf_r+0x852>
 80353a4:	ae11      	add	r6, sp, #68	@ 0x44
 80353a6:	e6b5      	b.n	8035114 <_vfiprintf_r+0x510>
 80353a8:	9800      	ldr	r0, [sp, #0]
 80353aa:	aa0e      	add	r2, sp, #56	@ 0x38
 80353ac:	4639      	mov	r1, r7
 80353ae:	f7ff fbf7 	bl	8034ba0 <__sprint_r>
 80353b2:	2800      	cmp	r0, #0
 80353b4:	d14f      	bne.n	8035456 <_vfiprintf_r+0x852>
 80353b6:	ae11      	add	r6, sp, #68	@ 0x44
 80353b8:	e6bc      	b.n	8035134 <_vfiprintf_r+0x530>
 80353ba:	2110      	movs	r1, #16
 80353bc:	6071      	str	r1, [r6, #4]
 80353be:	2a07      	cmp	r2, #7
 80353c0:	4461      	add	r1, ip
 80353c2:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80353c6:	dd08      	ble.n	80353da <_vfiprintf_r+0x7d6>
 80353c8:	9800      	ldr	r0, [sp, #0]
 80353ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80353cc:	4639      	mov	r1, r7
 80353ce:	f7ff fbe7 	bl	8034ba0 <__sprint_r>
 80353d2:	2800      	cmp	r0, #0
 80353d4:	d13f      	bne.n	8035456 <_vfiprintf_r+0x852>
 80353d6:	4b4e      	ldr	r3, [pc, #312]	@ (8035510 <_vfiprintf_r+0x90c>)
 80353d8:	a811      	add	r0, sp, #68	@ 0x44
 80353da:	3d10      	subs	r5, #16
 80353dc:	4606      	mov	r6, r0
 80353de:	e6b2      	b.n	8035146 <_vfiprintf_r+0x542>
 80353e0:	4606      	mov	r6, r0
 80353e2:	e6ca      	b.n	803517a <_vfiprintf_r+0x576>
 80353e4:	2010      	movs	r0, #16
 80353e6:	4402      	add	r2, r0
 80353e8:	2b07      	cmp	r3, #7
 80353ea:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80353ee:	6070      	str	r0, [r6, #4]
 80353f0:	dd06      	ble.n	8035400 <_vfiprintf_r+0x7fc>
 80353f2:	9800      	ldr	r0, [sp, #0]
 80353f4:	aa0e      	add	r2, sp, #56	@ 0x38
 80353f6:	4639      	mov	r1, r7
 80353f8:	f7ff fbd2 	bl	8034ba0 <__sprint_r>
 80353fc:	bb58      	cbnz	r0, 8035456 <_vfiprintf_r+0x852>
 80353fe:	a911      	add	r1, sp, #68	@ 0x44
 8035400:	3c10      	subs	r4, #16
 8035402:	460e      	mov	r6, r1
 8035404:	e6bd      	b.n	8035182 <_vfiprintf_r+0x57e>
 8035406:	460e      	mov	r6, r1
 8035408:	e6d6      	b.n	80351b8 <_vfiprintf_r+0x5b4>
 803540a:	9800      	ldr	r0, [sp, #0]
 803540c:	aa0e      	add	r2, sp, #56	@ 0x38
 803540e:	4639      	mov	r1, r7
 8035410:	f7ff fbc6 	bl	8034ba0 <__sprint_r>
 8035414:	b9f8      	cbnz	r0, 8035456 <_vfiprintf_r+0x852>
 8035416:	ab11      	add	r3, sp, #68	@ 0x44
 8035418:	e6de      	b.n	80351d8 <_vfiprintf_r+0x5d4>
 803541a:	9a02      	ldr	r2, [sp, #8]
 803541c:	9904      	ldr	r1, [sp, #16]
 803541e:	1a54      	subs	r4, r2, r1
 8035420:	2c00      	cmp	r4, #0
 8035422:	f77f aedd 	ble.w	80351e0 <_vfiprintf_r+0x5dc>
 8035426:	4d39      	ldr	r5, [pc, #228]	@ (803550c <_vfiprintf_r+0x908>)
 8035428:	2610      	movs	r6, #16
 803542a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 803542e:	2c10      	cmp	r4, #16
 8035430:	f102 0201 	add.w	r2, r2, #1
 8035434:	601d      	str	r5, [r3, #0]
 8035436:	dc1d      	bgt.n	8035474 <_vfiprintf_r+0x870>
 8035438:	605c      	str	r4, [r3, #4]
 803543a:	2a07      	cmp	r2, #7
 803543c:	440c      	add	r4, r1
 803543e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8035442:	f77f aecd 	ble.w	80351e0 <_vfiprintf_r+0x5dc>
 8035446:	9800      	ldr	r0, [sp, #0]
 8035448:	aa0e      	add	r2, sp, #56	@ 0x38
 803544a:	4639      	mov	r1, r7
 803544c:	f7ff fba8 	bl	8034ba0 <__sprint_r>
 8035450:	2800      	cmp	r0, #0
 8035452:	f43f aec5 	beq.w	80351e0 <_vfiprintf_r+0x5dc>
 8035456:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8035458:	07d9      	lsls	r1, r3, #31
 803545a:	d405      	bmi.n	8035468 <_vfiprintf_r+0x864>
 803545c:	89bb      	ldrh	r3, [r7, #12]
 803545e:	059a      	lsls	r2, r3, #22
 8035460:	d402      	bmi.n	8035468 <_vfiprintf_r+0x864>
 8035462:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8035464:	f002 f877 	bl	8037556 <__retarget_lock_release_recursive>
 8035468:	89bb      	ldrh	r3, [r7, #12]
 803546a:	065b      	lsls	r3, r3, #25
 803546c:	f57f abfb 	bpl.w	8034c66 <_vfiprintf_r+0x62>
 8035470:	f7ff bbf6 	b.w	8034c60 <_vfiprintf_r+0x5c>
 8035474:	3110      	adds	r1, #16
 8035476:	2a07      	cmp	r2, #7
 8035478:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 803547c:	605e      	str	r6, [r3, #4]
 803547e:	dc02      	bgt.n	8035486 <_vfiprintf_r+0x882>
 8035480:	3308      	adds	r3, #8
 8035482:	3c10      	subs	r4, #16
 8035484:	e7d1      	b.n	803542a <_vfiprintf_r+0x826>
 8035486:	9800      	ldr	r0, [sp, #0]
 8035488:	aa0e      	add	r2, sp, #56	@ 0x38
 803548a:	4639      	mov	r1, r7
 803548c:	f7ff fb88 	bl	8034ba0 <__sprint_r>
 8035490:	2800      	cmp	r0, #0
 8035492:	d1e0      	bne.n	8035456 <_vfiprintf_r+0x852>
 8035494:	ab11      	add	r3, sp, #68	@ 0x44
 8035496:	e7f4      	b.n	8035482 <_vfiprintf_r+0x87e>
 8035498:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803549a:	b913      	cbnz	r3, 80354a2 <_vfiprintf_r+0x89e>
 803549c:	2300      	movs	r3, #0
 803549e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80354a0:	e7d9      	b.n	8035456 <_vfiprintf_r+0x852>
 80354a2:	9800      	ldr	r0, [sp, #0]
 80354a4:	aa0e      	add	r2, sp, #56	@ 0x38
 80354a6:	4639      	mov	r1, r7
 80354a8:	f7ff fb7a 	bl	8034ba0 <__sprint_r>
 80354ac:	2800      	cmp	r0, #0
 80354ae:	d0f5      	beq.n	803549c <_vfiprintf_r+0x898>
 80354b0:	e7d1      	b.n	8035456 <_vfiprintf_r+0x852>
 80354b2:	ea54 0205 	orrs.w	r2, r4, r5
 80354b6:	f8cd a010 	str.w	sl, [sp, #16]
 80354ba:	f43f ada6 	beq.w	803500a <_vfiprintf_r+0x406>
 80354be:	2b01      	cmp	r3, #1
 80354c0:	f43f aedf 	beq.w	8035282 <_vfiprintf_r+0x67e>
 80354c4:	2b02      	cmp	r3, #2
 80354c6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80354ca:	f43f af28 	beq.w	803531e <_vfiprintf_r+0x71a>
 80354ce:	f004 0307 	and.w	r3, r4, #7
 80354d2:	08e4      	lsrs	r4, r4, #3
 80354d4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80354d8:	08ed      	lsrs	r5, r5, #3
 80354da:	3330      	adds	r3, #48	@ 0x30
 80354dc:	ea54 0105 	orrs.w	r1, r4, r5
 80354e0:	464a      	mov	r2, r9
 80354e2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80354e6:	d1f2      	bne.n	80354ce <_vfiprintf_r+0x8ca>
 80354e8:	9904      	ldr	r1, [sp, #16]
 80354ea:	07c8      	lsls	r0, r1, #31
 80354ec:	d506      	bpl.n	80354fc <_vfiprintf_r+0x8f8>
 80354ee:	2b30      	cmp	r3, #48	@ 0x30
 80354f0:	d004      	beq.n	80354fc <_vfiprintf_r+0x8f8>
 80354f2:	2330      	movs	r3, #48	@ 0x30
 80354f4:	f809 3c01 	strb.w	r3, [r9, #-1]
 80354f8:	f1a2 0902 	sub.w	r9, r2, #2
 80354fc:	ab3a      	add	r3, sp, #232	@ 0xe8
 80354fe:	eba3 0309 	sub.w	r3, r3, r9
 8035502:	9c01      	ldr	r4, [sp, #4]
 8035504:	f8dd a010 	ldr.w	sl, [sp, #16]
 8035508:	9301      	str	r3, [sp, #4]
 803550a:	e5bb      	b.n	8035084 <_vfiprintf_r+0x480>
 803550c:	08044ccc 	.word	0x08044ccc
 8035510:	08044cbc 	.word	0x08044cbc

08035514 <__sbprintf>:
 8035514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8035516:	461f      	mov	r7, r3
 8035518:	898b      	ldrh	r3, [r1, #12]
 803551a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 803551e:	f023 0302 	bic.w	r3, r3, #2
 8035522:	f8ad 300c 	strh.w	r3, [sp, #12]
 8035526:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8035528:	9319      	str	r3, [sp, #100]	@ 0x64
 803552a:	89cb      	ldrh	r3, [r1, #14]
 803552c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8035530:	69cb      	ldr	r3, [r1, #28]
 8035532:	9307      	str	r3, [sp, #28]
 8035534:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8035536:	9309      	str	r3, [sp, #36]	@ 0x24
 8035538:	ab1a      	add	r3, sp, #104	@ 0x68
 803553a:	9300      	str	r3, [sp, #0]
 803553c:	9304      	str	r3, [sp, #16]
 803553e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8035542:	4615      	mov	r5, r2
 8035544:	4606      	mov	r6, r0
 8035546:	9302      	str	r3, [sp, #8]
 8035548:	9305      	str	r3, [sp, #20]
 803554a:	a816      	add	r0, sp, #88	@ 0x58
 803554c:	2300      	movs	r3, #0
 803554e:	460c      	mov	r4, r1
 8035550:	9306      	str	r3, [sp, #24]
 8035552:	f001 fffb 	bl	803754c <__retarget_lock_init_recursive>
 8035556:	462a      	mov	r2, r5
 8035558:	463b      	mov	r3, r7
 803555a:	4669      	mov	r1, sp
 803555c:	4630      	mov	r0, r6
 803555e:	f7ff fb51 	bl	8034c04 <_vfiprintf_r>
 8035562:	1e05      	subs	r5, r0, #0
 8035564:	db07      	blt.n	8035576 <__sbprintf+0x62>
 8035566:	4669      	mov	r1, sp
 8035568:	4630      	mov	r0, r6
 803556a:	f000 f9d1 	bl	8035910 <_fflush_r>
 803556e:	2800      	cmp	r0, #0
 8035570:	bf18      	it	ne
 8035572:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8035576:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 803557a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 803557c:	065b      	lsls	r3, r3, #25
 803557e:	bf42      	ittt	mi
 8035580:	89a3      	ldrhmi	r3, [r4, #12]
 8035582:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8035586:	81a3      	strhmi	r3, [r4, #12]
 8035588:	f001 ffe1 	bl	803754e <__retarget_lock_close_recursive>
 803558c:	4628      	mov	r0, r5
 803558e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8035592:	bdf0      	pop	{r4, r5, r6, r7, pc}

08035594 <putchar>:
 8035594:	4b02      	ldr	r3, [pc, #8]	@ (80355a0 <putchar+0xc>)
 8035596:	4601      	mov	r1, r0
 8035598:	6818      	ldr	r0, [r3, #0]
 803559a:	6882      	ldr	r2, [r0, #8]
 803559c:	f007 bacc 	b.w	803cb38 <_putc_r>
 80355a0:	20000440 	.word	0x20000440

080355a4 <_puts_r>:
 80355a4:	b530      	push	{r4, r5, lr}
 80355a6:	4605      	mov	r5, r0
 80355a8:	b089      	sub	sp, #36	@ 0x24
 80355aa:	4608      	mov	r0, r1
 80355ac:	460c      	mov	r4, r1
 80355ae:	f7da fe77 	bl	80102a0 <strlen>
 80355b2:	4b1e      	ldr	r3, [pc, #120]	@ (803562c <_puts_r+0x88>)
 80355b4:	9306      	str	r3, [sp, #24]
 80355b6:	2301      	movs	r3, #1
 80355b8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 80355bc:	9307      	str	r3, [sp, #28]
 80355be:	4418      	add	r0, r3
 80355c0:	ab04      	add	r3, sp, #16
 80355c2:	9301      	str	r3, [sp, #4]
 80355c4:	2302      	movs	r3, #2
 80355c6:	9302      	str	r3, [sp, #8]
 80355c8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80355ca:	68ac      	ldr	r4, [r5, #8]
 80355cc:	9003      	str	r0, [sp, #12]
 80355ce:	b913      	cbnz	r3, 80355d6 <_puts_r+0x32>
 80355d0:	4628      	mov	r0, r5
 80355d2:	f000 fadf 	bl	8035b94 <__sinit>
 80355d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80355d8:	07db      	lsls	r3, r3, #31
 80355da:	d405      	bmi.n	80355e8 <_puts_r+0x44>
 80355dc:	89a3      	ldrh	r3, [r4, #12]
 80355de:	0598      	lsls	r0, r3, #22
 80355e0:	d402      	bmi.n	80355e8 <_puts_r+0x44>
 80355e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80355e4:	f001 ffb5 	bl	8037552 <__retarget_lock_acquire_recursive>
 80355e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80355ec:	0499      	lsls	r1, r3, #18
 80355ee:	d406      	bmi.n	80355fe <_puts_r+0x5a>
 80355f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80355f4:	81a3      	strh	r3, [r4, #12]
 80355f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80355f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80355fc:	6663      	str	r3, [r4, #100]	@ 0x64
 80355fe:	4628      	mov	r0, r5
 8035600:	aa01      	add	r2, sp, #4
 8035602:	4621      	mov	r1, r4
 8035604:	f000 fb18 	bl	8035c38 <__sfvwrite_r>
 8035608:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803560a:	2800      	cmp	r0, #0
 803560c:	bf0c      	ite	eq
 803560e:	250a      	moveq	r5, #10
 8035610:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8035614:	07da      	lsls	r2, r3, #31
 8035616:	d405      	bmi.n	8035624 <_puts_r+0x80>
 8035618:	89a3      	ldrh	r3, [r4, #12]
 803561a:	059b      	lsls	r3, r3, #22
 803561c:	d402      	bmi.n	8035624 <_puts_r+0x80>
 803561e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8035620:	f001 ff99 	bl	8037556 <__retarget_lock_release_recursive>
 8035624:	4628      	mov	r0, r5
 8035626:	b009      	add	sp, #36	@ 0x24
 8035628:	bd30      	pop	{r4, r5, pc}
 803562a:	bf00      	nop
 803562c:	08044c66 	.word	0x08044c66

08035630 <puts>:
 8035630:	4b02      	ldr	r3, [pc, #8]	@ (803563c <puts+0xc>)
 8035632:	4601      	mov	r1, r0
 8035634:	6818      	ldr	r0, [r3, #0]
 8035636:	f7ff bfb5 	b.w	80355a4 <_puts_r>
 803563a:	bf00      	nop
 803563c:	20000440 	.word	0x20000440

08035640 <srand>:
 8035640:	4b03      	ldr	r3, [pc, #12]	@ (8035650 <srand+0x10>)
 8035642:	681b      	ldr	r3, [r3, #0]
 8035644:	2200      	movs	r2, #0
 8035646:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 803564a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 803564e:	4770      	bx	lr
 8035650:	20000440 	.word	0x20000440

08035654 <rand>:
 8035654:	4b0a      	ldr	r3, [pc, #40]	@ (8035680 <rand+0x2c>)
 8035656:	480b      	ldr	r0, [pc, #44]	@ (8035684 <rand+0x30>)
 8035658:	6819      	ldr	r1, [r3, #0]
 803565a:	4a0b      	ldr	r2, [pc, #44]	@ (8035688 <rand+0x34>)
 803565c:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 8035660:	b510      	push	{r4, lr}
 8035662:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 8035666:	4358      	muls	r0, r3
 8035668:	fb02 0004 	mla	r0, r2, r4, r0
 803566c:	fba3 3202 	umull	r3, r2, r3, r2
 8035670:	3301      	adds	r3, #1
 8035672:	eb40 0002 	adc.w	r0, r0, r2
 8035676:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 803567a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 803567e:	bd10      	pop	{r4, pc}
 8035680:	20000440 	.word	0x20000440
 8035684:	5851f42d 	.word	0x5851f42d
 8035688:	4c957f2d 	.word	0x4c957f2d

0803568c <snprintf>:
 803568c:	b40c      	push	{r2, r3}
 803568e:	b530      	push	{r4, r5, lr}
 8035690:	4b17      	ldr	r3, [pc, #92]	@ (80356f0 <snprintf+0x64>)
 8035692:	1e0c      	subs	r4, r1, #0
 8035694:	681d      	ldr	r5, [r3, #0]
 8035696:	b09d      	sub	sp, #116	@ 0x74
 8035698:	da08      	bge.n	80356ac <snprintf+0x20>
 803569a:	238b      	movs	r3, #139	@ 0x8b
 803569c:	602b      	str	r3, [r5, #0]
 803569e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80356a2:	b01d      	add	sp, #116	@ 0x74
 80356a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80356a8:	b002      	add	sp, #8
 80356aa:	4770      	bx	lr
 80356ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80356b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80356b4:	bf14      	ite	ne
 80356b6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80356ba:	4623      	moveq	r3, r4
 80356bc:	9304      	str	r3, [sp, #16]
 80356be:	9307      	str	r3, [sp, #28]
 80356c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80356c4:	9002      	str	r0, [sp, #8]
 80356c6:	9006      	str	r0, [sp, #24]
 80356c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80356cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80356ce:	ab21      	add	r3, sp, #132	@ 0x84
 80356d0:	a902      	add	r1, sp, #8
 80356d2:	4628      	mov	r0, r5
 80356d4:	9301      	str	r3, [sp, #4]
 80356d6:	f004 fe7b 	bl	803a3d0 <_svfprintf_r>
 80356da:	1c43      	adds	r3, r0, #1
 80356dc:	bfbc      	itt	lt
 80356de:	238b      	movlt	r3, #139	@ 0x8b
 80356e0:	602b      	strlt	r3, [r5, #0]
 80356e2:	2c00      	cmp	r4, #0
 80356e4:	d0dd      	beq.n	80356a2 <snprintf+0x16>
 80356e6:	9b02      	ldr	r3, [sp, #8]
 80356e8:	2200      	movs	r2, #0
 80356ea:	701a      	strb	r2, [r3, #0]
 80356ec:	e7d9      	b.n	80356a2 <snprintf+0x16>
 80356ee:	bf00      	nop
 80356f0:	20000440 	.word	0x20000440

080356f4 <_strtol_l.constprop.0>:
 80356f4:	2b24      	cmp	r3, #36	@ 0x24
 80356f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80356fa:	4686      	mov	lr, r0
 80356fc:	4690      	mov	r8, r2
 80356fe:	d801      	bhi.n	8035704 <_strtol_l.constprop.0+0x10>
 8035700:	2b01      	cmp	r3, #1
 8035702:	d106      	bne.n	8035712 <_strtol_l.constprop.0+0x1e>
 8035704:	f001 fef0 	bl	80374e8 <__errno>
 8035708:	2316      	movs	r3, #22
 803570a:	6003      	str	r3, [r0, #0]
 803570c:	2000      	movs	r0, #0
 803570e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8035712:	4834      	ldr	r0, [pc, #208]	@ (80357e4 <_strtol_l.constprop.0+0xf0>)
 8035714:	460d      	mov	r5, r1
 8035716:	462a      	mov	r2, r5
 8035718:	f815 4b01 	ldrb.w	r4, [r5], #1
 803571c:	5d06      	ldrb	r6, [r0, r4]
 803571e:	f016 0608 	ands.w	r6, r6, #8
 8035722:	d1f8      	bne.n	8035716 <_strtol_l.constprop.0+0x22>
 8035724:	2c2d      	cmp	r4, #45	@ 0x2d
 8035726:	d12d      	bne.n	8035784 <_strtol_l.constprop.0+0x90>
 8035728:	782c      	ldrb	r4, [r5, #0]
 803572a:	2601      	movs	r6, #1
 803572c:	1c95      	adds	r5, r2, #2
 803572e:	f033 0210 	bics.w	r2, r3, #16
 8035732:	d109      	bne.n	8035748 <_strtol_l.constprop.0+0x54>
 8035734:	2c30      	cmp	r4, #48	@ 0x30
 8035736:	d12a      	bne.n	803578e <_strtol_l.constprop.0+0x9a>
 8035738:	782a      	ldrb	r2, [r5, #0]
 803573a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803573e:	2a58      	cmp	r2, #88	@ 0x58
 8035740:	d125      	bne.n	803578e <_strtol_l.constprop.0+0x9a>
 8035742:	786c      	ldrb	r4, [r5, #1]
 8035744:	2310      	movs	r3, #16
 8035746:	3502      	adds	r5, #2
 8035748:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 803574c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8035750:	2200      	movs	r2, #0
 8035752:	fbbc f9f3 	udiv	r9, ip, r3
 8035756:	4610      	mov	r0, r2
 8035758:	fb03 ca19 	mls	sl, r3, r9, ip
 803575c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8035760:	2f09      	cmp	r7, #9
 8035762:	d81b      	bhi.n	803579c <_strtol_l.constprop.0+0xa8>
 8035764:	463c      	mov	r4, r7
 8035766:	42a3      	cmp	r3, r4
 8035768:	dd27      	ble.n	80357ba <_strtol_l.constprop.0+0xc6>
 803576a:	1c57      	adds	r7, r2, #1
 803576c:	d007      	beq.n	803577e <_strtol_l.constprop.0+0x8a>
 803576e:	4581      	cmp	r9, r0
 8035770:	d320      	bcc.n	80357b4 <_strtol_l.constprop.0+0xc0>
 8035772:	d101      	bne.n	8035778 <_strtol_l.constprop.0+0x84>
 8035774:	45a2      	cmp	sl, r4
 8035776:	db1d      	blt.n	80357b4 <_strtol_l.constprop.0+0xc0>
 8035778:	fb00 4003 	mla	r0, r0, r3, r4
 803577c:	2201      	movs	r2, #1
 803577e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035782:	e7eb      	b.n	803575c <_strtol_l.constprop.0+0x68>
 8035784:	2c2b      	cmp	r4, #43	@ 0x2b
 8035786:	bf04      	itt	eq
 8035788:	782c      	ldrbeq	r4, [r5, #0]
 803578a:	1c95      	addeq	r5, r2, #2
 803578c:	e7cf      	b.n	803572e <_strtol_l.constprop.0+0x3a>
 803578e:	2b00      	cmp	r3, #0
 8035790:	d1da      	bne.n	8035748 <_strtol_l.constprop.0+0x54>
 8035792:	2c30      	cmp	r4, #48	@ 0x30
 8035794:	bf0c      	ite	eq
 8035796:	2308      	moveq	r3, #8
 8035798:	230a      	movne	r3, #10
 803579a:	e7d5      	b.n	8035748 <_strtol_l.constprop.0+0x54>
 803579c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80357a0:	2f19      	cmp	r7, #25
 80357a2:	d801      	bhi.n	80357a8 <_strtol_l.constprop.0+0xb4>
 80357a4:	3c37      	subs	r4, #55	@ 0x37
 80357a6:	e7de      	b.n	8035766 <_strtol_l.constprop.0+0x72>
 80357a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80357ac:	2f19      	cmp	r7, #25
 80357ae:	d804      	bhi.n	80357ba <_strtol_l.constprop.0+0xc6>
 80357b0:	3c57      	subs	r4, #87	@ 0x57
 80357b2:	e7d8      	b.n	8035766 <_strtol_l.constprop.0+0x72>
 80357b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80357b8:	e7e1      	b.n	803577e <_strtol_l.constprop.0+0x8a>
 80357ba:	1c53      	adds	r3, r2, #1
 80357bc:	d108      	bne.n	80357d0 <_strtol_l.constprop.0+0xdc>
 80357be:	2322      	movs	r3, #34	@ 0x22
 80357c0:	f8ce 3000 	str.w	r3, [lr]
 80357c4:	4660      	mov	r0, ip
 80357c6:	f1b8 0f00 	cmp.w	r8, #0
 80357ca:	d0a0      	beq.n	803570e <_strtol_l.constprop.0+0x1a>
 80357cc:	1e69      	subs	r1, r5, #1
 80357ce:	e006      	b.n	80357de <_strtol_l.constprop.0+0xea>
 80357d0:	b106      	cbz	r6, 80357d4 <_strtol_l.constprop.0+0xe0>
 80357d2:	4240      	negs	r0, r0
 80357d4:	f1b8 0f00 	cmp.w	r8, #0
 80357d8:	d099      	beq.n	803570e <_strtol_l.constprop.0+0x1a>
 80357da:	2a00      	cmp	r2, #0
 80357dc:	d1f6      	bne.n	80357cc <_strtol_l.constprop.0+0xd8>
 80357de:	f8c8 1000 	str.w	r1, [r8]
 80357e2:	e794      	b.n	803570e <_strtol_l.constprop.0+0x1a>
 80357e4:	08045025 	.word	0x08045025

080357e8 <_strtol_r>:
 80357e8:	f7ff bf84 	b.w	80356f4 <_strtol_l.constprop.0>

080357ec <strtol>:
 80357ec:	4613      	mov	r3, r2
 80357ee:	460a      	mov	r2, r1
 80357f0:	4601      	mov	r1, r0
 80357f2:	4802      	ldr	r0, [pc, #8]	@ (80357fc <strtol+0x10>)
 80357f4:	6800      	ldr	r0, [r0, #0]
 80357f6:	f7ff bf7d 	b.w	80356f4 <_strtol_l.constprop.0>
 80357fa:	bf00      	nop
 80357fc:	20000440 	.word	0x20000440

08035800 <__sflush_r>:
 8035800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035804:	4605      	mov	r5, r0
 8035806:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 803580a:	0706      	lsls	r6, r0, #28
 803580c:	460c      	mov	r4, r1
 803580e:	d457      	bmi.n	80358c0 <__sflush_r+0xc0>
 8035810:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8035814:	818b      	strh	r3, [r1, #12]
 8035816:	684b      	ldr	r3, [r1, #4]
 8035818:	2b00      	cmp	r3, #0
 803581a:	dc02      	bgt.n	8035822 <__sflush_r+0x22>
 803581c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 803581e:	2b00      	cmp	r3, #0
 8035820:	dd4c      	ble.n	80358bc <__sflush_r+0xbc>
 8035822:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8035824:	2e00      	cmp	r6, #0
 8035826:	d049      	beq.n	80358bc <__sflush_r+0xbc>
 8035828:	2300      	movs	r3, #0
 803582a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 803582e:	682f      	ldr	r7, [r5, #0]
 8035830:	69e1      	ldr	r1, [r4, #28]
 8035832:	602b      	str	r3, [r5, #0]
 8035834:	d034      	beq.n	80358a0 <__sflush_r+0xa0>
 8035836:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8035838:	89a3      	ldrh	r3, [r4, #12]
 803583a:	0759      	lsls	r1, r3, #29
 803583c:	d505      	bpl.n	803584a <__sflush_r+0x4a>
 803583e:	6863      	ldr	r3, [r4, #4]
 8035840:	1ad2      	subs	r2, r2, r3
 8035842:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8035844:	b10b      	cbz	r3, 803584a <__sflush_r+0x4a>
 8035846:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8035848:	1ad2      	subs	r2, r2, r3
 803584a:	2300      	movs	r3, #0
 803584c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 803584e:	69e1      	ldr	r1, [r4, #28]
 8035850:	4628      	mov	r0, r5
 8035852:	47b0      	blx	r6
 8035854:	1c43      	adds	r3, r0, #1
 8035856:	d106      	bne.n	8035866 <__sflush_r+0x66>
 8035858:	682a      	ldr	r2, [r5, #0]
 803585a:	2a1d      	cmp	r2, #29
 803585c:	d848      	bhi.n	80358f0 <__sflush_r+0xf0>
 803585e:	4b2b      	ldr	r3, [pc, #172]	@ (803590c <__sflush_r+0x10c>)
 8035860:	4113      	asrs	r3, r2
 8035862:	07de      	lsls	r6, r3, #31
 8035864:	d444      	bmi.n	80358f0 <__sflush_r+0xf0>
 8035866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803586a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 803586e:	81a2      	strh	r2, [r4, #12]
 8035870:	2200      	movs	r2, #0
 8035872:	6062      	str	r2, [r4, #4]
 8035874:	04d9      	lsls	r1, r3, #19
 8035876:	6922      	ldr	r2, [r4, #16]
 8035878:	6022      	str	r2, [r4, #0]
 803587a:	d504      	bpl.n	8035886 <__sflush_r+0x86>
 803587c:	1c42      	adds	r2, r0, #1
 803587e:	d101      	bne.n	8035884 <__sflush_r+0x84>
 8035880:	682b      	ldr	r3, [r5, #0]
 8035882:	b903      	cbnz	r3, 8035886 <__sflush_r+0x86>
 8035884:	6520      	str	r0, [r4, #80]	@ 0x50
 8035886:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8035888:	602f      	str	r7, [r5, #0]
 803588a:	b1b9      	cbz	r1, 80358bc <__sflush_r+0xbc>
 803588c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8035890:	4299      	cmp	r1, r3
 8035892:	d002      	beq.n	803589a <__sflush_r+0x9a>
 8035894:	4628      	mov	r0, r5
 8035896:	f002 fd61 	bl	803835c <_free_r>
 803589a:	2300      	movs	r3, #0
 803589c:	6323      	str	r3, [r4, #48]	@ 0x30
 803589e:	e00d      	b.n	80358bc <__sflush_r+0xbc>
 80358a0:	2301      	movs	r3, #1
 80358a2:	4628      	mov	r0, r5
 80358a4:	47b0      	blx	r6
 80358a6:	4602      	mov	r2, r0
 80358a8:	1c50      	adds	r0, r2, #1
 80358aa:	d1c5      	bne.n	8035838 <__sflush_r+0x38>
 80358ac:	682b      	ldr	r3, [r5, #0]
 80358ae:	2b00      	cmp	r3, #0
 80358b0:	d0c2      	beq.n	8035838 <__sflush_r+0x38>
 80358b2:	2b1d      	cmp	r3, #29
 80358b4:	d001      	beq.n	80358ba <__sflush_r+0xba>
 80358b6:	2b16      	cmp	r3, #22
 80358b8:	d11a      	bne.n	80358f0 <__sflush_r+0xf0>
 80358ba:	602f      	str	r7, [r5, #0]
 80358bc:	2000      	movs	r0, #0
 80358be:	e01e      	b.n	80358fe <__sflush_r+0xfe>
 80358c0:	690f      	ldr	r7, [r1, #16]
 80358c2:	2f00      	cmp	r7, #0
 80358c4:	d0fa      	beq.n	80358bc <__sflush_r+0xbc>
 80358c6:	0783      	lsls	r3, r0, #30
 80358c8:	680e      	ldr	r6, [r1, #0]
 80358ca:	bf08      	it	eq
 80358cc:	694b      	ldreq	r3, [r1, #20]
 80358ce:	600f      	str	r7, [r1, #0]
 80358d0:	bf18      	it	ne
 80358d2:	2300      	movne	r3, #0
 80358d4:	eba6 0807 	sub.w	r8, r6, r7
 80358d8:	608b      	str	r3, [r1, #8]
 80358da:	f1b8 0f00 	cmp.w	r8, #0
 80358de:	dded      	ble.n	80358bc <__sflush_r+0xbc>
 80358e0:	69e1      	ldr	r1, [r4, #28]
 80358e2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80358e4:	4643      	mov	r3, r8
 80358e6:	463a      	mov	r2, r7
 80358e8:	4628      	mov	r0, r5
 80358ea:	47b0      	blx	r6
 80358ec:	2800      	cmp	r0, #0
 80358ee:	dc08      	bgt.n	8035902 <__sflush_r+0x102>
 80358f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80358f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80358f8:	81a3      	strh	r3, [r4, #12]
 80358fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80358fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8035902:	4407      	add	r7, r0
 8035904:	eba8 0800 	sub.w	r8, r8, r0
 8035908:	e7e7      	b.n	80358da <__sflush_r+0xda>
 803590a:	bf00      	nop
 803590c:	dfbffffe 	.word	0xdfbffffe

08035910 <_fflush_r>:
 8035910:	b538      	push	{r3, r4, r5, lr}
 8035912:	460c      	mov	r4, r1
 8035914:	4605      	mov	r5, r0
 8035916:	b118      	cbz	r0, 8035920 <_fflush_r+0x10>
 8035918:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803591a:	b90b      	cbnz	r3, 8035920 <_fflush_r+0x10>
 803591c:	f000 f93a 	bl	8035b94 <__sinit>
 8035920:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8035924:	b1b8      	cbz	r0, 8035956 <_fflush_r+0x46>
 8035926:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8035928:	07db      	lsls	r3, r3, #31
 803592a:	d404      	bmi.n	8035936 <_fflush_r+0x26>
 803592c:	0581      	lsls	r1, r0, #22
 803592e:	d402      	bmi.n	8035936 <_fflush_r+0x26>
 8035930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8035932:	f001 fe0e 	bl	8037552 <__retarget_lock_acquire_recursive>
 8035936:	4628      	mov	r0, r5
 8035938:	4621      	mov	r1, r4
 803593a:	f7ff ff61 	bl	8035800 <__sflush_r>
 803593e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8035940:	07da      	lsls	r2, r3, #31
 8035942:	4605      	mov	r5, r0
 8035944:	d405      	bmi.n	8035952 <_fflush_r+0x42>
 8035946:	89a3      	ldrh	r3, [r4, #12]
 8035948:	059b      	lsls	r3, r3, #22
 803594a:	d402      	bmi.n	8035952 <_fflush_r+0x42>
 803594c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803594e:	f001 fe02 	bl	8037556 <__retarget_lock_release_recursive>
 8035952:	4628      	mov	r0, r5
 8035954:	bd38      	pop	{r3, r4, r5, pc}
 8035956:	4605      	mov	r5, r0
 8035958:	e7fb      	b.n	8035952 <_fflush_r+0x42>
	...

0803595c <sprintf>:
 803595c:	b40e      	push	{r1, r2, r3}
 803595e:	b500      	push	{lr}
 8035960:	b09c      	sub	sp, #112	@ 0x70
 8035962:	ab1d      	add	r3, sp, #116	@ 0x74
 8035964:	9002      	str	r0, [sp, #8]
 8035966:	9006      	str	r0, [sp, #24]
 8035968:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 803596c:	4809      	ldr	r0, [pc, #36]	@ (8035994 <sprintf+0x38>)
 803596e:	9107      	str	r1, [sp, #28]
 8035970:	9104      	str	r1, [sp, #16]
 8035972:	4909      	ldr	r1, [pc, #36]	@ (8035998 <sprintf+0x3c>)
 8035974:	f853 2b04 	ldr.w	r2, [r3], #4
 8035978:	9105      	str	r1, [sp, #20]
 803597a:	6800      	ldr	r0, [r0, #0]
 803597c:	9301      	str	r3, [sp, #4]
 803597e:	a902      	add	r1, sp, #8
 8035980:	f004 fd26 	bl	803a3d0 <_svfprintf_r>
 8035984:	9b02      	ldr	r3, [sp, #8]
 8035986:	2200      	movs	r2, #0
 8035988:	701a      	strb	r2, [r3, #0]
 803598a:	b01c      	add	sp, #112	@ 0x70
 803598c:	f85d eb04 	ldr.w	lr, [sp], #4
 8035990:	b003      	add	sp, #12
 8035992:	4770      	bx	lr
 8035994:	20000440 	.word	0x20000440
 8035998:	ffff0208 	.word	0xffff0208

0803599c <sscanf>:
 803599c:	b40e      	push	{r1, r2, r3}
 803599e:	b530      	push	{r4, r5, lr}
 80359a0:	b09c      	sub	sp, #112	@ 0x70
 80359a2:	ac1f      	add	r4, sp, #124	@ 0x7c
 80359a4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80359a8:	f854 5b04 	ldr.w	r5, [r4], #4
 80359ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80359b0:	9002      	str	r0, [sp, #8]
 80359b2:	9006      	str	r0, [sp, #24]
 80359b4:	f7da fc74 	bl	80102a0 <strlen>
 80359b8:	4b0b      	ldr	r3, [pc, #44]	@ (80359e8 <sscanf+0x4c>)
 80359ba:	9003      	str	r0, [sp, #12]
 80359bc:	9007      	str	r0, [sp, #28]
 80359be:	930a      	str	r3, [sp, #40]	@ 0x28
 80359c0:	480a      	ldr	r0, [pc, #40]	@ (80359ec <sscanf+0x50>)
 80359c2:	9401      	str	r4, [sp, #4]
 80359c4:	2300      	movs	r3, #0
 80359c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80359c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80359ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80359ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80359d2:	462a      	mov	r2, r5
 80359d4:	4623      	mov	r3, r4
 80359d6:	a902      	add	r1, sp, #8
 80359d8:	6800      	ldr	r0, [r0, #0]
 80359da:	f005 ff3b 	bl	803b854 <__ssvfscanf_r>
 80359de:	b01c      	add	sp, #112	@ 0x70
 80359e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80359e4:	b003      	add	sp, #12
 80359e6:	4770      	bx	lr
 80359e8:	08035a13 	.word	0x08035a13
 80359ec:	20000440 	.word	0x20000440

080359f0 <__sread>:
 80359f0:	b510      	push	{r4, lr}
 80359f2:	460c      	mov	r4, r1
 80359f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80359f8:	f001 fd52 	bl	80374a0 <_read_r>
 80359fc:	2800      	cmp	r0, #0
 80359fe:	bfab      	itete	ge
 8035a00:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8035a02:	89a3      	ldrhlt	r3, [r4, #12]
 8035a04:	181b      	addge	r3, r3, r0
 8035a06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8035a0a:	bfac      	ite	ge
 8035a0c:	6523      	strge	r3, [r4, #80]	@ 0x50
 8035a0e:	81a3      	strhlt	r3, [r4, #12]
 8035a10:	bd10      	pop	{r4, pc}

08035a12 <__seofread>:
 8035a12:	2000      	movs	r0, #0
 8035a14:	4770      	bx	lr

08035a16 <__swrite>:
 8035a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035a1a:	461f      	mov	r7, r3
 8035a1c:	898b      	ldrh	r3, [r1, #12]
 8035a1e:	05db      	lsls	r3, r3, #23
 8035a20:	4605      	mov	r5, r0
 8035a22:	460c      	mov	r4, r1
 8035a24:	4616      	mov	r6, r2
 8035a26:	d505      	bpl.n	8035a34 <__swrite+0x1e>
 8035a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8035a2c:	2302      	movs	r3, #2
 8035a2e:	2200      	movs	r2, #0
 8035a30:	f001 fd24 	bl	803747c <_lseek_r>
 8035a34:	89a3      	ldrh	r3, [r4, #12]
 8035a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8035a3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8035a3e:	81a3      	strh	r3, [r4, #12]
 8035a40:	4632      	mov	r2, r6
 8035a42:	463b      	mov	r3, r7
 8035a44:	4628      	mov	r0, r5
 8035a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8035a4a:	f001 bd3b 	b.w	80374c4 <_write_r>

08035a4e <__sseek>:
 8035a4e:	b510      	push	{r4, lr}
 8035a50:	460c      	mov	r4, r1
 8035a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8035a56:	f001 fd11 	bl	803747c <_lseek_r>
 8035a5a:	1c43      	adds	r3, r0, #1
 8035a5c:	89a3      	ldrh	r3, [r4, #12]
 8035a5e:	bf15      	itete	ne
 8035a60:	6520      	strne	r0, [r4, #80]	@ 0x50
 8035a62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8035a66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8035a6a:	81a3      	strheq	r3, [r4, #12]
 8035a6c:	bf18      	it	ne
 8035a6e:	81a3      	strhne	r3, [r4, #12]
 8035a70:	bd10      	pop	{r4, pc}

08035a72 <__sclose>:
 8035a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8035a76:	f001 bcc5 	b.w	8037404 <_close_r>
	...

08035a7c <std>:
 8035a7c:	2300      	movs	r3, #0
 8035a7e:	b510      	push	{r4, lr}
 8035a80:	4604      	mov	r4, r0
 8035a82:	e9c0 3300 	strd	r3, r3, [r0]
 8035a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8035a8a:	6083      	str	r3, [r0, #8]
 8035a8c:	8181      	strh	r1, [r0, #12]
 8035a8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8035a90:	81c2      	strh	r2, [r0, #14]
 8035a92:	6183      	str	r3, [r0, #24]
 8035a94:	4619      	mov	r1, r3
 8035a96:	2208      	movs	r2, #8
 8035a98:	305c      	adds	r0, #92	@ 0x5c
 8035a9a:	f000 fb21 	bl	80360e0 <memset>
 8035a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8035ad4 <std+0x58>)
 8035aa0:	6223      	str	r3, [r4, #32]
 8035aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8035ad8 <std+0x5c>)
 8035aa4:	6263      	str	r3, [r4, #36]	@ 0x24
 8035aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8035adc <std+0x60>)
 8035aa8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8035aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8035ae0 <std+0x64>)
 8035aac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8035aae:	4b0d      	ldr	r3, [pc, #52]	@ (8035ae4 <std+0x68>)
 8035ab0:	61e4      	str	r4, [r4, #28]
 8035ab2:	429c      	cmp	r4, r3
 8035ab4:	d006      	beq.n	8035ac4 <std+0x48>
 8035ab6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8035aba:	4294      	cmp	r4, r2
 8035abc:	d002      	beq.n	8035ac4 <std+0x48>
 8035abe:	33d0      	adds	r3, #208	@ 0xd0
 8035ac0:	429c      	cmp	r4, r3
 8035ac2:	d105      	bne.n	8035ad0 <std+0x54>
 8035ac4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8035ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8035acc:	f001 bd3e 	b.w	803754c <__retarget_lock_init_recursive>
 8035ad0:	bd10      	pop	{r4, pc}
 8035ad2:	bf00      	nop
 8035ad4:	080359f1 	.word	0x080359f1
 8035ad8:	08035a17 	.word	0x08035a17
 8035adc:	08035a4f 	.word	0x08035a4f
 8035ae0:	08035a73 	.word	0x08035a73
 8035ae4:	200181e0 	.word	0x200181e0

08035ae8 <stdio_exit_handler>:
 8035ae8:	4a02      	ldr	r2, [pc, #8]	@ (8035af4 <stdio_exit_handler+0xc>)
 8035aea:	4903      	ldr	r1, [pc, #12]	@ (8035af8 <stdio_exit_handler+0x10>)
 8035aec:	4803      	ldr	r0, [pc, #12]	@ (8035afc <stdio_exit_handler+0x14>)
 8035aee:	f000 b9ef 	b.w	8035ed0 <_fwalk_sglue>
 8035af2:	bf00      	nop
 8035af4:	200002c0 	.word	0x200002c0
 8035af8:	0803d491 	.word	0x0803d491
 8035afc:	20000448 	.word	0x20000448

08035b00 <cleanup_stdio>:
 8035b00:	6841      	ldr	r1, [r0, #4]
 8035b02:	4b0c      	ldr	r3, [pc, #48]	@ (8035b34 <cleanup_stdio+0x34>)
 8035b04:	4299      	cmp	r1, r3
 8035b06:	b510      	push	{r4, lr}
 8035b08:	4604      	mov	r4, r0
 8035b0a:	d001      	beq.n	8035b10 <cleanup_stdio+0x10>
 8035b0c:	f007 fcc0 	bl	803d490 <_fclose_r>
 8035b10:	68a1      	ldr	r1, [r4, #8]
 8035b12:	4b09      	ldr	r3, [pc, #36]	@ (8035b38 <cleanup_stdio+0x38>)
 8035b14:	4299      	cmp	r1, r3
 8035b16:	d002      	beq.n	8035b1e <cleanup_stdio+0x1e>
 8035b18:	4620      	mov	r0, r4
 8035b1a:	f007 fcb9 	bl	803d490 <_fclose_r>
 8035b1e:	68e1      	ldr	r1, [r4, #12]
 8035b20:	4b06      	ldr	r3, [pc, #24]	@ (8035b3c <cleanup_stdio+0x3c>)
 8035b22:	4299      	cmp	r1, r3
 8035b24:	d004      	beq.n	8035b30 <cleanup_stdio+0x30>
 8035b26:	4620      	mov	r0, r4
 8035b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8035b2c:	f007 bcb0 	b.w	803d490 <_fclose_r>
 8035b30:	bd10      	pop	{r4, pc}
 8035b32:	bf00      	nop
 8035b34:	200181e0 	.word	0x200181e0
 8035b38:	20018248 	.word	0x20018248
 8035b3c:	200182b0 	.word	0x200182b0

08035b40 <global_stdio_init.part.0>:
 8035b40:	b510      	push	{r4, lr}
 8035b42:	4b0b      	ldr	r3, [pc, #44]	@ (8035b70 <global_stdio_init.part.0+0x30>)
 8035b44:	4c0b      	ldr	r4, [pc, #44]	@ (8035b74 <global_stdio_init.part.0+0x34>)
 8035b46:	4a0c      	ldr	r2, [pc, #48]	@ (8035b78 <global_stdio_init.part.0+0x38>)
 8035b48:	601a      	str	r2, [r3, #0]
 8035b4a:	4620      	mov	r0, r4
 8035b4c:	2200      	movs	r2, #0
 8035b4e:	2104      	movs	r1, #4
 8035b50:	f7ff ff94 	bl	8035a7c <std>
 8035b54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8035b58:	2201      	movs	r2, #1
 8035b5a:	2109      	movs	r1, #9
 8035b5c:	f7ff ff8e 	bl	8035a7c <std>
 8035b60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8035b64:	2202      	movs	r2, #2
 8035b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8035b6a:	2112      	movs	r1, #18
 8035b6c:	f7ff bf86 	b.w	8035a7c <std>
 8035b70:	20018318 	.word	0x20018318
 8035b74:	200181e0 	.word	0x200181e0
 8035b78:	08035ae9 	.word	0x08035ae9

08035b7c <__sfp_lock_acquire>:
 8035b7c:	4801      	ldr	r0, [pc, #4]	@ (8035b84 <__sfp_lock_acquire+0x8>)
 8035b7e:	f001 bce8 	b.w	8037552 <__retarget_lock_acquire_recursive>
 8035b82:	bf00      	nop
 8035b84:	20018348 	.word	0x20018348

08035b88 <__sfp_lock_release>:
 8035b88:	4801      	ldr	r0, [pc, #4]	@ (8035b90 <__sfp_lock_release+0x8>)
 8035b8a:	f001 bce4 	b.w	8037556 <__retarget_lock_release_recursive>
 8035b8e:	bf00      	nop
 8035b90:	20018348 	.word	0x20018348

08035b94 <__sinit>:
 8035b94:	b510      	push	{r4, lr}
 8035b96:	4604      	mov	r4, r0
 8035b98:	f7ff fff0 	bl	8035b7c <__sfp_lock_acquire>
 8035b9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8035b9e:	b11b      	cbz	r3, 8035ba8 <__sinit+0x14>
 8035ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8035ba4:	f7ff bff0 	b.w	8035b88 <__sfp_lock_release>
 8035ba8:	4b04      	ldr	r3, [pc, #16]	@ (8035bbc <__sinit+0x28>)
 8035baa:	6363      	str	r3, [r4, #52]	@ 0x34
 8035bac:	4b04      	ldr	r3, [pc, #16]	@ (8035bc0 <__sinit+0x2c>)
 8035bae:	681b      	ldr	r3, [r3, #0]
 8035bb0:	2b00      	cmp	r3, #0
 8035bb2:	d1f5      	bne.n	8035ba0 <__sinit+0xc>
 8035bb4:	f7ff ffc4 	bl	8035b40 <global_stdio_init.part.0>
 8035bb8:	e7f2      	b.n	8035ba0 <__sinit+0xc>
 8035bba:	bf00      	nop
 8035bbc:	08035b01 	.word	0x08035b01
 8035bc0:	20018318 	.word	0x20018318

08035bc4 <_vsnprintf_r>:
 8035bc4:	b530      	push	{r4, r5, lr}
 8035bc6:	4614      	mov	r4, r2
 8035bc8:	2c00      	cmp	r4, #0
 8035bca:	b09b      	sub	sp, #108	@ 0x6c
 8035bcc:	4605      	mov	r5, r0
 8035bce:	461a      	mov	r2, r3
 8035bd0:	da05      	bge.n	8035bde <_vsnprintf_r+0x1a>
 8035bd2:	238b      	movs	r3, #139	@ 0x8b
 8035bd4:	6003      	str	r3, [r0, #0]
 8035bd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035bda:	b01b      	add	sp, #108	@ 0x6c
 8035bdc:	bd30      	pop	{r4, r5, pc}
 8035bde:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8035be2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8035be6:	bf14      	ite	ne
 8035be8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8035bec:	4623      	moveq	r3, r4
 8035bee:	9302      	str	r3, [sp, #8]
 8035bf0:	9305      	str	r3, [sp, #20]
 8035bf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8035bf6:	9100      	str	r1, [sp, #0]
 8035bf8:	9104      	str	r1, [sp, #16]
 8035bfa:	f8ad 300e 	strh.w	r3, [sp, #14]
 8035bfe:	4669      	mov	r1, sp
 8035c00:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8035c02:	f004 fbe5 	bl	803a3d0 <_svfprintf_r>
 8035c06:	1c43      	adds	r3, r0, #1
 8035c08:	bfbc      	itt	lt
 8035c0a:	238b      	movlt	r3, #139	@ 0x8b
 8035c0c:	602b      	strlt	r3, [r5, #0]
 8035c0e:	2c00      	cmp	r4, #0
 8035c10:	d0e3      	beq.n	8035bda <_vsnprintf_r+0x16>
 8035c12:	9b00      	ldr	r3, [sp, #0]
 8035c14:	2200      	movs	r2, #0
 8035c16:	701a      	strb	r2, [r3, #0]
 8035c18:	e7df      	b.n	8035bda <_vsnprintf_r+0x16>
	...

08035c1c <vsnprintf>:
 8035c1c:	b507      	push	{r0, r1, r2, lr}
 8035c1e:	9300      	str	r3, [sp, #0]
 8035c20:	4613      	mov	r3, r2
 8035c22:	460a      	mov	r2, r1
 8035c24:	4601      	mov	r1, r0
 8035c26:	4803      	ldr	r0, [pc, #12]	@ (8035c34 <vsnprintf+0x18>)
 8035c28:	6800      	ldr	r0, [r0, #0]
 8035c2a:	f7ff ffcb 	bl	8035bc4 <_vsnprintf_r>
 8035c2e:	b003      	add	sp, #12
 8035c30:	f85d fb04 	ldr.w	pc, [sp], #4
 8035c34:	20000440 	.word	0x20000440

08035c38 <__sfvwrite_r>:
 8035c38:	6893      	ldr	r3, [r2, #8]
 8035c3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035c3e:	4606      	mov	r6, r0
 8035c40:	460c      	mov	r4, r1
 8035c42:	4691      	mov	r9, r2
 8035c44:	b91b      	cbnz	r3, 8035c4e <__sfvwrite_r+0x16>
 8035c46:	2000      	movs	r0, #0
 8035c48:	b003      	add	sp, #12
 8035c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035c4e:	898b      	ldrh	r3, [r1, #12]
 8035c50:	0718      	lsls	r0, r3, #28
 8035c52:	d550      	bpl.n	8035cf6 <__sfvwrite_r+0xbe>
 8035c54:	690b      	ldr	r3, [r1, #16]
 8035c56:	2b00      	cmp	r3, #0
 8035c58:	d04d      	beq.n	8035cf6 <__sfvwrite_r+0xbe>
 8035c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035c5e:	f8d9 8000 	ldr.w	r8, [r9]
 8035c62:	f013 0702 	ands.w	r7, r3, #2
 8035c66:	d16b      	bne.n	8035d40 <__sfvwrite_r+0x108>
 8035c68:	f013 0301 	ands.w	r3, r3, #1
 8035c6c:	f000 809c 	beq.w	8035da8 <__sfvwrite_r+0x170>
 8035c70:	4638      	mov	r0, r7
 8035c72:	46ba      	mov	sl, r7
 8035c74:	46bb      	mov	fp, r7
 8035c76:	f1bb 0f00 	cmp.w	fp, #0
 8035c7a:	f000 8103 	beq.w	8035e84 <__sfvwrite_r+0x24c>
 8035c7e:	b950      	cbnz	r0, 8035c96 <__sfvwrite_r+0x5e>
 8035c80:	465a      	mov	r2, fp
 8035c82:	210a      	movs	r1, #10
 8035c84:	4650      	mov	r0, sl
 8035c86:	f7da fabb 	bl	8010200 <memchr>
 8035c8a:	2800      	cmp	r0, #0
 8035c8c:	f000 8100 	beq.w	8035e90 <__sfvwrite_r+0x258>
 8035c90:	3001      	adds	r0, #1
 8035c92:	eba0 070a 	sub.w	r7, r0, sl
 8035c96:	6820      	ldr	r0, [r4, #0]
 8035c98:	6921      	ldr	r1, [r4, #16]
 8035c9a:	68a5      	ldr	r5, [r4, #8]
 8035c9c:	6963      	ldr	r3, [r4, #20]
 8035c9e:	455f      	cmp	r7, fp
 8035ca0:	463a      	mov	r2, r7
 8035ca2:	bf28      	it	cs
 8035ca4:	465a      	movcs	r2, fp
 8035ca6:	4288      	cmp	r0, r1
 8035ca8:	f240 80f5 	bls.w	8035e96 <__sfvwrite_r+0x25e>
 8035cac:	441d      	add	r5, r3
 8035cae:	42aa      	cmp	r2, r5
 8035cb0:	f340 80f1 	ble.w	8035e96 <__sfvwrite_r+0x25e>
 8035cb4:	4651      	mov	r1, sl
 8035cb6:	462a      	mov	r2, r5
 8035cb8:	f000 f9f8 	bl	80360ac <memmove>
 8035cbc:	6823      	ldr	r3, [r4, #0]
 8035cbe:	442b      	add	r3, r5
 8035cc0:	6023      	str	r3, [r4, #0]
 8035cc2:	4621      	mov	r1, r4
 8035cc4:	4630      	mov	r0, r6
 8035cc6:	f7ff fe23 	bl	8035910 <_fflush_r>
 8035cca:	2800      	cmp	r0, #0
 8035ccc:	d167      	bne.n	8035d9e <__sfvwrite_r+0x166>
 8035cce:	1b7f      	subs	r7, r7, r5
 8035cd0:	f040 80f9 	bne.w	8035ec6 <__sfvwrite_r+0x28e>
 8035cd4:	4621      	mov	r1, r4
 8035cd6:	4630      	mov	r0, r6
 8035cd8:	f7ff fe1a 	bl	8035910 <_fflush_r>
 8035cdc:	2800      	cmp	r0, #0
 8035cde:	d15e      	bne.n	8035d9e <__sfvwrite_r+0x166>
 8035ce0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8035ce4:	1b5b      	subs	r3, r3, r5
 8035ce6:	44aa      	add	sl, r5
 8035ce8:	ebab 0b05 	sub.w	fp, fp, r5
 8035cec:	f8c9 3008 	str.w	r3, [r9, #8]
 8035cf0:	2b00      	cmp	r3, #0
 8035cf2:	d1c0      	bne.n	8035c76 <__sfvwrite_r+0x3e>
 8035cf4:	e7a7      	b.n	8035c46 <__sfvwrite_r+0xe>
 8035cf6:	4621      	mov	r1, r4
 8035cf8:	4630      	mov	r0, r6
 8035cfa:	f000 f907 	bl	8035f0c <__swsetup_r>
 8035cfe:	2800      	cmp	r0, #0
 8035d00:	d0ab      	beq.n	8035c5a <__sfvwrite_r+0x22>
 8035d02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035d06:	e79f      	b.n	8035c48 <__sfvwrite_r+0x10>
 8035d08:	e9d8 a500 	ldrd	sl, r5, [r8]
 8035d0c:	f108 0808 	add.w	r8, r8, #8
 8035d10:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8035d14:	69e1      	ldr	r1, [r4, #28]
 8035d16:	2d00      	cmp	r5, #0
 8035d18:	d0f6      	beq.n	8035d08 <__sfvwrite_r+0xd0>
 8035d1a:	42bd      	cmp	r5, r7
 8035d1c:	462b      	mov	r3, r5
 8035d1e:	4652      	mov	r2, sl
 8035d20:	bf28      	it	cs
 8035d22:	463b      	movcs	r3, r7
 8035d24:	4630      	mov	r0, r6
 8035d26:	47d8      	blx	fp
 8035d28:	2800      	cmp	r0, #0
 8035d2a:	dd38      	ble.n	8035d9e <__sfvwrite_r+0x166>
 8035d2c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8035d30:	1a1b      	subs	r3, r3, r0
 8035d32:	4482      	add	sl, r0
 8035d34:	1a2d      	subs	r5, r5, r0
 8035d36:	f8c9 3008 	str.w	r3, [r9, #8]
 8035d3a:	2b00      	cmp	r3, #0
 8035d3c:	d1e8      	bne.n	8035d10 <__sfvwrite_r+0xd8>
 8035d3e:	e782      	b.n	8035c46 <__sfvwrite_r+0xe>
 8035d40:	f04f 0a00 	mov.w	sl, #0
 8035d44:	4f61      	ldr	r7, [pc, #388]	@ (8035ecc <__sfvwrite_r+0x294>)
 8035d46:	4655      	mov	r5, sl
 8035d48:	e7e2      	b.n	8035d10 <__sfvwrite_r+0xd8>
 8035d4a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8035d4e:	f108 0808 	add.w	r8, r8, #8
 8035d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035d56:	6820      	ldr	r0, [r4, #0]
 8035d58:	68a2      	ldr	r2, [r4, #8]
 8035d5a:	f1ba 0f00 	cmp.w	sl, #0
 8035d5e:	d0f4      	beq.n	8035d4a <__sfvwrite_r+0x112>
 8035d60:	0599      	lsls	r1, r3, #22
 8035d62:	d563      	bpl.n	8035e2c <__sfvwrite_r+0x1f4>
 8035d64:	4552      	cmp	r2, sl
 8035d66:	d836      	bhi.n	8035dd6 <__sfvwrite_r+0x19e>
 8035d68:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8035d6c:	d033      	beq.n	8035dd6 <__sfvwrite_r+0x19e>
 8035d6e:	6921      	ldr	r1, [r4, #16]
 8035d70:	6965      	ldr	r5, [r4, #20]
 8035d72:	eba0 0b01 	sub.w	fp, r0, r1
 8035d76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8035d7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8035d7e:	f10b 0201 	add.w	r2, fp, #1
 8035d82:	106d      	asrs	r5, r5, #1
 8035d84:	4452      	add	r2, sl
 8035d86:	4295      	cmp	r5, r2
 8035d88:	bf38      	it	cc
 8035d8a:	4615      	movcc	r5, r2
 8035d8c:	055b      	lsls	r3, r3, #21
 8035d8e:	d53d      	bpl.n	8035e0c <__sfvwrite_r+0x1d4>
 8035d90:	4629      	mov	r1, r5
 8035d92:	4630      	mov	r0, r6
 8035d94:	f002 fbfa 	bl	803858c <_malloc_r>
 8035d98:	b948      	cbnz	r0, 8035dae <__sfvwrite_r+0x176>
 8035d9a:	230c      	movs	r3, #12
 8035d9c:	6033      	str	r3, [r6, #0]
 8035d9e:	89a3      	ldrh	r3, [r4, #12]
 8035da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8035da4:	81a3      	strh	r3, [r4, #12]
 8035da6:	e7ac      	b.n	8035d02 <__sfvwrite_r+0xca>
 8035da8:	461f      	mov	r7, r3
 8035daa:	469a      	mov	sl, r3
 8035dac:	e7d1      	b.n	8035d52 <__sfvwrite_r+0x11a>
 8035dae:	465a      	mov	r2, fp
 8035db0:	6921      	ldr	r1, [r4, #16]
 8035db2:	9001      	str	r0, [sp, #4]
 8035db4:	f001 fbd0 	bl	8037558 <memcpy>
 8035db8:	89a2      	ldrh	r2, [r4, #12]
 8035dba:	9b01      	ldr	r3, [sp, #4]
 8035dbc:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8035dc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8035dc4:	81a2      	strh	r2, [r4, #12]
 8035dc6:	6123      	str	r3, [r4, #16]
 8035dc8:	6165      	str	r5, [r4, #20]
 8035dca:	445b      	add	r3, fp
 8035dcc:	eba5 050b 	sub.w	r5, r5, fp
 8035dd0:	6023      	str	r3, [r4, #0]
 8035dd2:	4652      	mov	r2, sl
 8035dd4:	60a5      	str	r5, [r4, #8]
 8035dd6:	4552      	cmp	r2, sl
 8035dd8:	bf28      	it	cs
 8035dda:	4652      	movcs	r2, sl
 8035ddc:	6820      	ldr	r0, [r4, #0]
 8035dde:	9201      	str	r2, [sp, #4]
 8035de0:	4639      	mov	r1, r7
 8035de2:	f000 f963 	bl	80360ac <memmove>
 8035de6:	68a3      	ldr	r3, [r4, #8]
 8035de8:	9a01      	ldr	r2, [sp, #4]
 8035dea:	1a9b      	subs	r3, r3, r2
 8035dec:	60a3      	str	r3, [r4, #8]
 8035dee:	6823      	ldr	r3, [r4, #0]
 8035df0:	4413      	add	r3, r2
 8035df2:	4655      	mov	r5, sl
 8035df4:	6023      	str	r3, [r4, #0]
 8035df6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8035dfa:	1b5b      	subs	r3, r3, r5
 8035dfc:	442f      	add	r7, r5
 8035dfe:	ebaa 0a05 	sub.w	sl, sl, r5
 8035e02:	f8c9 3008 	str.w	r3, [r9, #8]
 8035e06:	2b00      	cmp	r3, #0
 8035e08:	d1a3      	bne.n	8035d52 <__sfvwrite_r+0x11a>
 8035e0a:	e71c      	b.n	8035c46 <__sfvwrite_r+0xe>
 8035e0c:	462a      	mov	r2, r5
 8035e0e:	4630      	mov	r0, r6
 8035e10:	f007 fbcc 	bl	803d5ac <_realloc_r>
 8035e14:	4603      	mov	r3, r0
 8035e16:	2800      	cmp	r0, #0
 8035e18:	d1d5      	bne.n	8035dc6 <__sfvwrite_r+0x18e>
 8035e1a:	6921      	ldr	r1, [r4, #16]
 8035e1c:	4630      	mov	r0, r6
 8035e1e:	f002 fa9d 	bl	803835c <_free_r>
 8035e22:	89a3      	ldrh	r3, [r4, #12]
 8035e24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8035e28:	81a3      	strh	r3, [r4, #12]
 8035e2a:	e7b6      	b.n	8035d9a <__sfvwrite_r+0x162>
 8035e2c:	6923      	ldr	r3, [r4, #16]
 8035e2e:	4283      	cmp	r3, r0
 8035e30:	d302      	bcc.n	8035e38 <__sfvwrite_r+0x200>
 8035e32:	6961      	ldr	r1, [r4, #20]
 8035e34:	4551      	cmp	r1, sl
 8035e36:	d915      	bls.n	8035e64 <__sfvwrite_r+0x22c>
 8035e38:	4552      	cmp	r2, sl
 8035e3a:	bf28      	it	cs
 8035e3c:	4652      	movcs	r2, sl
 8035e3e:	4639      	mov	r1, r7
 8035e40:	4615      	mov	r5, r2
 8035e42:	f000 f933 	bl	80360ac <memmove>
 8035e46:	68a3      	ldr	r3, [r4, #8]
 8035e48:	6822      	ldr	r2, [r4, #0]
 8035e4a:	1b5b      	subs	r3, r3, r5
 8035e4c:	442a      	add	r2, r5
 8035e4e:	60a3      	str	r3, [r4, #8]
 8035e50:	6022      	str	r2, [r4, #0]
 8035e52:	2b00      	cmp	r3, #0
 8035e54:	d1cf      	bne.n	8035df6 <__sfvwrite_r+0x1be>
 8035e56:	4621      	mov	r1, r4
 8035e58:	4630      	mov	r0, r6
 8035e5a:	f7ff fd59 	bl	8035910 <_fflush_r>
 8035e5e:	2800      	cmp	r0, #0
 8035e60:	d0c9      	beq.n	8035df6 <__sfvwrite_r+0x1be>
 8035e62:	e79c      	b.n	8035d9e <__sfvwrite_r+0x166>
 8035e64:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8035e68:	4553      	cmp	r3, sl
 8035e6a:	bf28      	it	cs
 8035e6c:	4653      	movcs	r3, sl
 8035e6e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8035e70:	fb93 f3f1 	sdiv	r3, r3, r1
 8035e74:	463a      	mov	r2, r7
 8035e76:	434b      	muls	r3, r1
 8035e78:	4630      	mov	r0, r6
 8035e7a:	69e1      	ldr	r1, [r4, #28]
 8035e7c:	47a8      	blx	r5
 8035e7e:	1e05      	subs	r5, r0, #0
 8035e80:	dcb9      	bgt.n	8035df6 <__sfvwrite_r+0x1be>
 8035e82:	e78c      	b.n	8035d9e <__sfvwrite_r+0x166>
 8035e84:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8035e88:	2000      	movs	r0, #0
 8035e8a:	f108 0808 	add.w	r8, r8, #8
 8035e8e:	e6f2      	b.n	8035c76 <__sfvwrite_r+0x3e>
 8035e90:	f10b 0701 	add.w	r7, fp, #1
 8035e94:	e6ff      	b.n	8035c96 <__sfvwrite_r+0x5e>
 8035e96:	4293      	cmp	r3, r2
 8035e98:	dc08      	bgt.n	8035eac <__sfvwrite_r+0x274>
 8035e9a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8035e9c:	69e1      	ldr	r1, [r4, #28]
 8035e9e:	4652      	mov	r2, sl
 8035ea0:	4630      	mov	r0, r6
 8035ea2:	47a8      	blx	r5
 8035ea4:	1e05      	subs	r5, r0, #0
 8035ea6:	f73f af12 	bgt.w	8035cce <__sfvwrite_r+0x96>
 8035eaa:	e778      	b.n	8035d9e <__sfvwrite_r+0x166>
 8035eac:	4651      	mov	r1, sl
 8035eae:	9201      	str	r2, [sp, #4]
 8035eb0:	f000 f8fc 	bl	80360ac <memmove>
 8035eb4:	9a01      	ldr	r2, [sp, #4]
 8035eb6:	68a3      	ldr	r3, [r4, #8]
 8035eb8:	1a9b      	subs	r3, r3, r2
 8035eba:	60a3      	str	r3, [r4, #8]
 8035ebc:	6823      	ldr	r3, [r4, #0]
 8035ebe:	4413      	add	r3, r2
 8035ec0:	6023      	str	r3, [r4, #0]
 8035ec2:	4615      	mov	r5, r2
 8035ec4:	e703      	b.n	8035cce <__sfvwrite_r+0x96>
 8035ec6:	2001      	movs	r0, #1
 8035ec8:	e70a      	b.n	8035ce0 <__sfvwrite_r+0xa8>
 8035eca:	bf00      	nop
 8035ecc:	7ffffc00 	.word	0x7ffffc00

08035ed0 <_fwalk_sglue>:
 8035ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8035ed4:	4607      	mov	r7, r0
 8035ed6:	4688      	mov	r8, r1
 8035ed8:	4614      	mov	r4, r2
 8035eda:	2600      	movs	r6, #0
 8035edc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8035ee0:	f1b9 0901 	subs.w	r9, r9, #1
 8035ee4:	d505      	bpl.n	8035ef2 <_fwalk_sglue+0x22>
 8035ee6:	6824      	ldr	r4, [r4, #0]
 8035ee8:	2c00      	cmp	r4, #0
 8035eea:	d1f7      	bne.n	8035edc <_fwalk_sglue+0xc>
 8035eec:	4630      	mov	r0, r6
 8035eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8035ef2:	89ab      	ldrh	r3, [r5, #12]
 8035ef4:	2b01      	cmp	r3, #1
 8035ef6:	d907      	bls.n	8035f08 <_fwalk_sglue+0x38>
 8035ef8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8035efc:	3301      	adds	r3, #1
 8035efe:	d003      	beq.n	8035f08 <_fwalk_sglue+0x38>
 8035f00:	4629      	mov	r1, r5
 8035f02:	4638      	mov	r0, r7
 8035f04:	47c0      	blx	r8
 8035f06:	4306      	orrs	r6, r0
 8035f08:	3568      	adds	r5, #104	@ 0x68
 8035f0a:	e7e9      	b.n	8035ee0 <_fwalk_sglue+0x10>

08035f0c <__swsetup_r>:
 8035f0c:	b538      	push	{r3, r4, r5, lr}
 8035f0e:	4b29      	ldr	r3, [pc, #164]	@ (8035fb4 <__swsetup_r+0xa8>)
 8035f10:	4605      	mov	r5, r0
 8035f12:	6818      	ldr	r0, [r3, #0]
 8035f14:	460c      	mov	r4, r1
 8035f16:	b118      	cbz	r0, 8035f20 <__swsetup_r+0x14>
 8035f18:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8035f1a:	b90b      	cbnz	r3, 8035f20 <__swsetup_r+0x14>
 8035f1c:	f7ff fe3a 	bl	8035b94 <__sinit>
 8035f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035f24:	0719      	lsls	r1, r3, #28
 8035f26:	d422      	bmi.n	8035f6e <__swsetup_r+0x62>
 8035f28:	06da      	lsls	r2, r3, #27
 8035f2a:	d407      	bmi.n	8035f3c <__swsetup_r+0x30>
 8035f2c:	2209      	movs	r2, #9
 8035f2e:	602a      	str	r2, [r5, #0]
 8035f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8035f34:	81a3      	strh	r3, [r4, #12]
 8035f36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035f3a:	e033      	b.n	8035fa4 <__swsetup_r+0x98>
 8035f3c:	0758      	lsls	r0, r3, #29
 8035f3e:	d512      	bpl.n	8035f66 <__swsetup_r+0x5a>
 8035f40:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8035f42:	b141      	cbz	r1, 8035f56 <__swsetup_r+0x4a>
 8035f44:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8035f48:	4299      	cmp	r1, r3
 8035f4a:	d002      	beq.n	8035f52 <__swsetup_r+0x46>
 8035f4c:	4628      	mov	r0, r5
 8035f4e:	f002 fa05 	bl	803835c <_free_r>
 8035f52:	2300      	movs	r3, #0
 8035f54:	6323      	str	r3, [r4, #48]	@ 0x30
 8035f56:	89a3      	ldrh	r3, [r4, #12]
 8035f58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8035f5c:	81a3      	strh	r3, [r4, #12]
 8035f5e:	2300      	movs	r3, #0
 8035f60:	6063      	str	r3, [r4, #4]
 8035f62:	6923      	ldr	r3, [r4, #16]
 8035f64:	6023      	str	r3, [r4, #0]
 8035f66:	89a3      	ldrh	r3, [r4, #12]
 8035f68:	f043 0308 	orr.w	r3, r3, #8
 8035f6c:	81a3      	strh	r3, [r4, #12]
 8035f6e:	6923      	ldr	r3, [r4, #16]
 8035f70:	b94b      	cbnz	r3, 8035f86 <__swsetup_r+0x7a>
 8035f72:	89a3      	ldrh	r3, [r4, #12]
 8035f74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8035f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8035f7c:	d003      	beq.n	8035f86 <__swsetup_r+0x7a>
 8035f7e:	4621      	mov	r1, r4
 8035f80:	4628      	mov	r0, r5
 8035f82:	f005 fc2b 	bl	803b7dc <__smakebuf_r>
 8035f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035f8a:	f013 0201 	ands.w	r2, r3, #1
 8035f8e:	d00a      	beq.n	8035fa6 <__swsetup_r+0x9a>
 8035f90:	2200      	movs	r2, #0
 8035f92:	60a2      	str	r2, [r4, #8]
 8035f94:	6962      	ldr	r2, [r4, #20]
 8035f96:	4252      	negs	r2, r2
 8035f98:	61a2      	str	r2, [r4, #24]
 8035f9a:	6922      	ldr	r2, [r4, #16]
 8035f9c:	b942      	cbnz	r2, 8035fb0 <__swsetup_r+0xa4>
 8035f9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8035fa2:	d1c5      	bne.n	8035f30 <__swsetup_r+0x24>
 8035fa4:	bd38      	pop	{r3, r4, r5, pc}
 8035fa6:	0799      	lsls	r1, r3, #30
 8035fa8:	bf58      	it	pl
 8035faa:	6962      	ldrpl	r2, [r4, #20]
 8035fac:	60a2      	str	r2, [r4, #8]
 8035fae:	e7f4      	b.n	8035f9a <__swsetup_r+0x8e>
 8035fb0:	2000      	movs	r0, #0
 8035fb2:	e7f7      	b.n	8035fa4 <__swsetup_r+0x98>
 8035fb4:	20000440 	.word	0x20000440

08035fb8 <memcmp>:
 8035fb8:	b510      	push	{r4, lr}
 8035fba:	3901      	subs	r1, #1
 8035fbc:	4402      	add	r2, r0
 8035fbe:	4290      	cmp	r0, r2
 8035fc0:	d101      	bne.n	8035fc6 <memcmp+0xe>
 8035fc2:	2000      	movs	r0, #0
 8035fc4:	e005      	b.n	8035fd2 <memcmp+0x1a>
 8035fc6:	7803      	ldrb	r3, [r0, #0]
 8035fc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8035fcc:	42a3      	cmp	r3, r4
 8035fce:	d001      	beq.n	8035fd4 <memcmp+0x1c>
 8035fd0:	1b18      	subs	r0, r3, r4
 8035fd2:	bd10      	pop	{r4, pc}
 8035fd4:	3001      	adds	r0, #1
 8035fd6:	e7f2      	b.n	8035fbe <memcmp+0x6>

08035fd8 <__fputwc>:
 8035fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8035fdc:	4680      	mov	r8, r0
 8035fde:	460f      	mov	r7, r1
 8035fe0:	4614      	mov	r4, r2
 8035fe2:	f001 fa05 	bl	80373f0 <__locale_mb_cur_max>
 8035fe6:	2801      	cmp	r0, #1
 8035fe8:	4605      	mov	r5, r0
 8035fea:	d11b      	bne.n	8036024 <__fputwc+0x4c>
 8035fec:	1e7b      	subs	r3, r7, #1
 8035fee:	2bfe      	cmp	r3, #254	@ 0xfe
 8035ff0:	d818      	bhi.n	8036024 <__fputwc+0x4c>
 8035ff2:	f88d 7004 	strb.w	r7, [sp, #4]
 8035ff6:	2600      	movs	r6, #0
 8035ff8:	f10d 0904 	add.w	r9, sp, #4
 8035ffc:	42ae      	cmp	r6, r5
 8035ffe:	d021      	beq.n	8036044 <__fputwc+0x6c>
 8036000:	68a3      	ldr	r3, [r4, #8]
 8036002:	f816 1009 	ldrb.w	r1, [r6, r9]
 8036006:	3b01      	subs	r3, #1
 8036008:	2b00      	cmp	r3, #0
 803600a:	60a3      	str	r3, [r4, #8]
 803600c:	da04      	bge.n	8036018 <__fputwc+0x40>
 803600e:	69a2      	ldr	r2, [r4, #24]
 8036010:	4293      	cmp	r3, r2
 8036012:	db1b      	blt.n	803604c <__fputwc+0x74>
 8036014:	290a      	cmp	r1, #10
 8036016:	d019      	beq.n	803604c <__fputwc+0x74>
 8036018:	6823      	ldr	r3, [r4, #0]
 803601a:	1c5a      	adds	r2, r3, #1
 803601c:	6022      	str	r2, [r4, #0]
 803601e:	7019      	strb	r1, [r3, #0]
 8036020:	3601      	adds	r6, #1
 8036022:	e7eb      	b.n	8035ffc <__fputwc+0x24>
 8036024:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8036028:	463a      	mov	r2, r7
 803602a:	a901      	add	r1, sp, #4
 803602c:	4640      	mov	r0, r8
 803602e:	f001 faa1 	bl	8037574 <_wcrtomb_r>
 8036032:	1c43      	adds	r3, r0, #1
 8036034:	4605      	mov	r5, r0
 8036036:	d1de      	bne.n	8035ff6 <__fputwc+0x1e>
 8036038:	89a3      	ldrh	r3, [r4, #12]
 803603a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803603e:	81a3      	strh	r3, [r4, #12]
 8036040:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8036044:	4638      	mov	r0, r7
 8036046:	b003      	add	sp, #12
 8036048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803604c:	4622      	mov	r2, r4
 803604e:	4640      	mov	r0, r8
 8036050:	f008 fb1d 	bl	803e68e <__swbuf_r>
 8036054:	3001      	adds	r0, #1
 8036056:	d1e3      	bne.n	8036020 <__fputwc+0x48>
 8036058:	e7f2      	b.n	8036040 <__fputwc+0x68>

0803605a <_fputwc_r>:
 803605a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 803605c:	07db      	lsls	r3, r3, #31
 803605e:	b570      	push	{r4, r5, r6, lr}
 8036060:	4605      	mov	r5, r0
 8036062:	460e      	mov	r6, r1
 8036064:	4614      	mov	r4, r2
 8036066:	d405      	bmi.n	8036074 <_fputwc_r+0x1a>
 8036068:	8993      	ldrh	r3, [r2, #12]
 803606a:	0598      	lsls	r0, r3, #22
 803606c:	d402      	bmi.n	8036074 <_fputwc_r+0x1a>
 803606e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8036070:	f001 fa6f 	bl	8037552 <__retarget_lock_acquire_recursive>
 8036074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8036078:	0499      	lsls	r1, r3, #18
 803607a:	d406      	bmi.n	803608a <_fputwc_r+0x30>
 803607c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8036080:	81a3      	strh	r3, [r4, #12]
 8036082:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8036084:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8036088:	6663      	str	r3, [r4, #100]	@ 0x64
 803608a:	4622      	mov	r2, r4
 803608c:	4628      	mov	r0, r5
 803608e:	4631      	mov	r1, r6
 8036090:	f7ff ffa2 	bl	8035fd8 <__fputwc>
 8036094:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8036096:	07da      	lsls	r2, r3, #31
 8036098:	4605      	mov	r5, r0
 803609a:	d405      	bmi.n	80360a8 <_fputwc_r+0x4e>
 803609c:	89a3      	ldrh	r3, [r4, #12]
 803609e:	059b      	lsls	r3, r3, #22
 80360a0:	d402      	bmi.n	80360a8 <_fputwc_r+0x4e>
 80360a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80360a4:	f001 fa57 	bl	8037556 <__retarget_lock_release_recursive>
 80360a8:	4628      	mov	r0, r5
 80360aa:	bd70      	pop	{r4, r5, r6, pc}

080360ac <memmove>:
 80360ac:	4288      	cmp	r0, r1
 80360ae:	b510      	push	{r4, lr}
 80360b0:	eb01 0402 	add.w	r4, r1, r2
 80360b4:	d902      	bls.n	80360bc <memmove+0x10>
 80360b6:	4284      	cmp	r4, r0
 80360b8:	4623      	mov	r3, r4
 80360ba:	d807      	bhi.n	80360cc <memmove+0x20>
 80360bc:	1e43      	subs	r3, r0, #1
 80360be:	42a1      	cmp	r1, r4
 80360c0:	d008      	beq.n	80360d4 <memmove+0x28>
 80360c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80360c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80360ca:	e7f8      	b.n	80360be <memmove+0x12>
 80360cc:	4402      	add	r2, r0
 80360ce:	4601      	mov	r1, r0
 80360d0:	428a      	cmp	r2, r1
 80360d2:	d100      	bne.n	80360d6 <memmove+0x2a>
 80360d4:	bd10      	pop	{r4, pc}
 80360d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80360da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80360de:	e7f7      	b.n	80360d0 <memmove+0x24>

080360e0 <memset>:
 80360e0:	4402      	add	r2, r0
 80360e2:	4603      	mov	r3, r0
 80360e4:	4293      	cmp	r3, r2
 80360e6:	d100      	bne.n	80360ea <memset+0xa>
 80360e8:	4770      	bx	lr
 80360ea:	f803 1b01 	strb.w	r1, [r3], #1
 80360ee:	e7f9      	b.n	80360e4 <memset+0x4>

080360f0 <strcat>:
 80360f0:	b510      	push	{r4, lr}
 80360f2:	4602      	mov	r2, r0
 80360f4:	7814      	ldrb	r4, [r2, #0]
 80360f6:	4613      	mov	r3, r2
 80360f8:	3201      	adds	r2, #1
 80360fa:	2c00      	cmp	r4, #0
 80360fc:	d1fa      	bne.n	80360f4 <strcat+0x4>
 80360fe:	3b01      	subs	r3, #1
 8036100:	f811 2b01 	ldrb.w	r2, [r1], #1
 8036104:	f803 2f01 	strb.w	r2, [r3, #1]!
 8036108:	2a00      	cmp	r2, #0
 803610a:	d1f9      	bne.n	8036100 <strcat+0x10>
 803610c:	bd10      	pop	{r4, pc}

0803610e <strchr>:
 803610e:	b2c9      	uxtb	r1, r1
 8036110:	4603      	mov	r3, r0
 8036112:	4618      	mov	r0, r3
 8036114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8036118:	b112      	cbz	r2, 8036120 <strchr+0x12>
 803611a:	428a      	cmp	r2, r1
 803611c:	d1f9      	bne.n	8036112 <strchr+0x4>
 803611e:	4770      	bx	lr
 8036120:	2900      	cmp	r1, #0
 8036122:	bf18      	it	ne
 8036124:	2000      	movne	r0, #0
 8036126:	4770      	bx	lr

08036128 <strcspn>:
 8036128:	b570      	push	{r4, r5, r6, lr}
 803612a:	4603      	mov	r3, r0
 803612c:	461e      	mov	r6, r3
 803612e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8036132:	b144      	cbz	r4, 8036146 <strcspn+0x1e>
 8036134:	1e4a      	subs	r2, r1, #1
 8036136:	e001      	b.n	803613c <strcspn+0x14>
 8036138:	42a5      	cmp	r5, r4
 803613a:	d004      	beq.n	8036146 <strcspn+0x1e>
 803613c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8036140:	2d00      	cmp	r5, #0
 8036142:	d1f9      	bne.n	8036138 <strcspn+0x10>
 8036144:	e7f2      	b.n	803612c <strcspn+0x4>
 8036146:	1a30      	subs	r0, r6, r0
 8036148:	bd70      	pop	{r4, r5, r6, pc}

0803614a <strncmp>:
 803614a:	b510      	push	{r4, lr}
 803614c:	b16a      	cbz	r2, 803616a <strncmp+0x20>
 803614e:	3901      	subs	r1, #1
 8036150:	1884      	adds	r4, r0, r2
 8036152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8036156:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 803615a:	429a      	cmp	r2, r3
 803615c:	d103      	bne.n	8036166 <strncmp+0x1c>
 803615e:	42a0      	cmp	r0, r4
 8036160:	d001      	beq.n	8036166 <strncmp+0x1c>
 8036162:	2a00      	cmp	r2, #0
 8036164:	d1f5      	bne.n	8036152 <strncmp+0x8>
 8036166:	1ad0      	subs	r0, r2, r3
 8036168:	bd10      	pop	{r4, pc}
 803616a:	4610      	mov	r0, r2
 803616c:	e7fc      	b.n	8036168 <strncmp+0x1e>

0803616e <strncpy>:
 803616e:	b510      	push	{r4, lr}
 8036170:	3901      	subs	r1, #1
 8036172:	4603      	mov	r3, r0
 8036174:	b132      	cbz	r2, 8036184 <strncpy+0x16>
 8036176:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 803617a:	f803 4b01 	strb.w	r4, [r3], #1
 803617e:	3a01      	subs	r2, #1
 8036180:	2c00      	cmp	r4, #0
 8036182:	d1f7      	bne.n	8036174 <strncpy+0x6>
 8036184:	441a      	add	r2, r3
 8036186:	2100      	movs	r1, #0
 8036188:	4293      	cmp	r3, r2
 803618a:	d100      	bne.n	803618e <strncpy+0x20>
 803618c:	bd10      	pop	{r4, pc}
 803618e:	f803 1b01 	strb.w	r1, [r3], #1
 8036192:	e7f9      	b.n	8036188 <strncpy+0x1a>

08036194 <strrchr>:
 8036194:	b538      	push	{r3, r4, r5, lr}
 8036196:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 803619a:	4603      	mov	r3, r0
 803619c:	d10e      	bne.n	80361bc <strrchr+0x28>
 803619e:	4621      	mov	r1, r4
 80361a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80361a4:	f7ff bfb3 	b.w	803610e <strchr>
 80361a8:	1c43      	adds	r3, r0, #1
 80361aa:	4605      	mov	r5, r0
 80361ac:	4621      	mov	r1, r4
 80361ae:	4618      	mov	r0, r3
 80361b0:	f7ff ffad 	bl	803610e <strchr>
 80361b4:	2800      	cmp	r0, #0
 80361b6:	d1f7      	bne.n	80361a8 <strrchr+0x14>
 80361b8:	4628      	mov	r0, r5
 80361ba:	bd38      	pop	{r3, r4, r5, pc}
 80361bc:	2500      	movs	r5, #0
 80361be:	e7f5      	b.n	80361ac <strrchr+0x18>

080361c0 <strspn>:
 80361c0:	b570      	push	{r4, r5, r6, lr}
 80361c2:	4603      	mov	r3, r0
 80361c4:	461e      	mov	r6, r3
 80361c6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80361ca:	b13c      	cbz	r4, 80361dc <strspn+0x1c>
 80361cc:	1e4a      	subs	r2, r1, #1
 80361ce:	e001      	b.n	80361d4 <strspn+0x14>
 80361d0:	42a5      	cmp	r5, r4
 80361d2:	d0f7      	beq.n	80361c4 <strspn+0x4>
 80361d4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80361d8:	2d00      	cmp	r5, #0
 80361da:	d1f9      	bne.n	80361d0 <strspn+0x10>
 80361dc:	1a30      	subs	r0, r6, r0
 80361de:	bd70      	pop	{r4, r5, r6, pc}

080361e0 <strstr>:
 80361e0:	780a      	ldrb	r2, [r1, #0]
 80361e2:	b570      	push	{r4, r5, r6, lr}
 80361e4:	b96a      	cbnz	r2, 8036202 <strstr+0x22>
 80361e6:	bd70      	pop	{r4, r5, r6, pc}
 80361e8:	429a      	cmp	r2, r3
 80361ea:	d109      	bne.n	8036200 <strstr+0x20>
 80361ec:	460c      	mov	r4, r1
 80361ee:	4605      	mov	r5, r0
 80361f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80361f4:	2b00      	cmp	r3, #0
 80361f6:	d0f6      	beq.n	80361e6 <strstr+0x6>
 80361f8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80361fc:	429e      	cmp	r6, r3
 80361fe:	d0f7      	beq.n	80361f0 <strstr+0x10>
 8036200:	3001      	adds	r0, #1
 8036202:	7803      	ldrb	r3, [r0, #0]
 8036204:	2b00      	cmp	r3, #0
 8036206:	d1ef      	bne.n	80361e8 <strstr+0x8>
 8036208:	4618      	mov	r0, r3
 803620a:	e7ec      	b.n	80361e6 <strstr+0x6>

0803620c <localtime_r>:
 803620c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8036210:	460c      	mov	r4, r1
 8036212:	4680      	mov	r8, r0
 8036214:	f008 fab6 	bl	803e784 <__gettzinfo>
 8036218:	4621      	mov	r1, r4
 803621a:	4605      	mov	r5, r0
 803621c:	4640      	mov	r0, r8
 803621e:	f008 fab5 	bl	803e78c <gmtime_r>
 8036222:	6943      	ldr	r3, [r0, #20]
 8036224:	0799      	lsls	r1, r3, #30
 8036226:	4604      	mov	r4, r0
 8036228:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 803622c:	d106      	bne.n	803623c <localtime_r+0x30>
 803622e:	2264      	movs	r2, #100	@ 0x64
 8036230:	fb97 f3f2 	sdiv	r3, r7, r2
 8036234:	fb02 7313 	mls	r3, r2, r3, r7
 8036238:	2b00      	cmp	r3, #0
 803623a:	d170      	bne.n	803631e <localtime_r+0x112>
 803623c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8036240:	fb97 f3f2 	sdiv	r3, r7, r2
 8036244:	fb02 7313 	mls	r3, r2, r3, r7
 8036248:	fab3 f383 	clz	r3, r3
 803624c:	095b      	lsrs	r3, r3, #5
 803624e:	4e64      	ldr	r6, [pc, #400]	@ (80363e0 <localtime_r+0x1d4>)
 8036250:	2230      	movs	r2, #48	@ 0x30
 8036252:	fb02 6603 	mla	r6, r2, r3, r6
 8036256:	f000 fe97 	bl	8036f88 <__tz_lock>
 803625a:	f000 fea1 	bl	8036fa0 <_tzset_unlocked>
 803625e:	4b61      	ldr	r3, [pc, #388]	@ (80363e4 <localtime_r+0x1d8>)
 8036260:	681b      	ldr	r3, [r3, #0]
 8036262:	2b00      	cmp	r3, #0
 8036264:	d06a      	beq.n	803633c <localtime_r+0x130>
 8036266:	686b      	ldr	r3, [r5, #4]
 8036268:	42bb      	cmp	r3, r7
 803626a:	d15a      	bne.n	8036322 <localtime_r+0x116>
 803626c:	682f      	ldr	r7, [r5, #0]
 803626e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8036272:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8036276:	2f00      	cmp	r7, #0
 8036278:	d15b      	bne.n	8036332 <localtime_r+0x126>
 803627a:	4282      	cmp	r2, r0
 803627c:	eb73 0101 	sbcs.w	r1, r3, r1
 8036280:	db5e      	blt.n	8036340 <localtime_r+0x134>
 8036282:	2301      	movs	r3, #1
 8036284:	6223      	str	r3, [r4, #32]
 8036286:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8036288:	6861      	ldr	r1, [r4, #4]
 803628a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 803628e:	fb93 f0f2 	sdiv	r0, r3, r2
 8036292:	fb02 3310 	mls	r3, r2, r0, r3
 8036296:	223c      	movs	r2, #60	@ 0x3c
 8036298:	fb93 f5f2 	sdiv	r5, r3, r2
 803629c:	fb02 3215 	mls	r2, r2, r5, r3
 80362a0:	6823      	ldr	r3, [r4, #0]
 80362a2:	1a9b      	subs	r3, r3, r2
 80362a4:	68a2      	ldr	r2, [r4, #8]
 80362a6:	6023      	str	r3, [r4, #0]
 80362a8:	1b49      	subs	r1, r1, r5
 80362aa:	1a12      	subs	r2, r2, r0
 80362ac:	2b3b      	cmp	r3, #59	@ 0x3b
 80362ae:	6061      	str	r1, [r4, #4]
 80362b0:	60a2      	str	r2, [r4, #8]
 80362b2:	dd51      	ble.n	8036358 <localtime_r+0x14c>
 80362b4:	3101      	adds	r1, #1
 80362b6:	6061      	str	r1, [r4, #4]
 80362b8:	3b3c      	subs	r3, #60	@ 0x3c
 80362ba:	6023      	str	r3, [r4, #0]
 80362bc:	6863      	ldr	r3, [r4, #4]
 80362be:	2b3b      	cmp	r3, #59	@ 0x3b
 80362c0:	dd50      	ble.n	8036364 <localtime_r+0x158>
 80362c2:	3201      	adds	r2, #1
 80362c4:	60a2      	str	r2, [r4, #8]
 80362c6:	3b3c      	subs	r3, #60	@ 0x3c
 80362c8:	6063      	str	r3, [r4, #4]
 80362ca:	68a3      	ldr	r3, [r4, #8]
 80362cc:	2b17      	cmp	r3, #23
 80362ce:	dd4f      	ble.n	8036370 <localtime_r+0x164>
 80362d0:	69e2      	ldr	r2, [r4, #28]
 80362d2:	3201      	adds	r2, #1
 80362d4:	61e2      	str	r2, [r4, #28]
 80362d6:	69a2      	ldr	r2, [r4, #24]
 80362d8:	3201      	adds	r2, #1
 80362da:	2a07      	cmp	r2, #7
 80362dc:	bfa8      	it	ge
 80362de:	2200      	movge	r2, #0
 80362e0:	61a2      	str	r2, [r4, #24]
 80362e2:	68e2      	ldr	r2, [r4, #12]
 80362e4:	3b18      	subs	r3, #24
 80362e6:	3201      	adds	r2, #1
 80362e8:	60a3      	str	r3, [r4, #8]
 80362ea:	6923      	ldr	r3, [r4, #16]
 80362ec:	60e2      	str	r2, [r4, #12]
 80362ee:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80362f2:	428a      	cmp	r2, r1
 80362f4:	dd0e      	ble.n	8036314 <localtime_r+0x108>
 80362f6:	2b0b      	cmp	r3, #11
 80362f8:	eba2 0201 	sub.w	r2, r2, r1
 80362fc:	60e2      	str	r2, [r4, #12]
 80362fe:	f103 0201 	add.w	r2, r3, #1
 8036302:	bf09      	itett	eq
 8036304:	6963      	ldreq	r3, [r4, #20]
 8036306:	6122      	strne	r2, [r4, #16]
 8036308:	2200      	moveq	r2, #0
 803630a:	3301      	addeq	r3, #1
 803630c:	bf02      	ittt	eq
 803630e:	6122      	streq	r2, [r4, #16]
 8036310:	6163      	streq	r3, [r4, #20]
 8036312:	61e2      	streq	r2, [r4, #28]
 8036314:	f000 fe3e 	bl	8036f94 <__tz_unlock>
 8036318:	4620      	mov	r0, r4
 803631a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803631e:	2301      	movs	r3, #1
 8036320:	e795      	b.n	803624e <localtime_r+0x42>
 8036322:	4638      	mov	r0, r7
 8036324:	f000 fd86 	bl	8036e34 <__tzcalc_limits>
 8036328:	2800      	cmp	r0, #0
 803632a:	d19f      	bne.n	803626c <localtime_r+0x60>
 803632c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8036330:	e004      	b.n	803633c <localtime_r+0x130>
 8036332:	4282      	cmp	r2, r0
 8036334:	eb73 0101 	sbcs.w	r1, r3, r1
 8036338:	da02      	bge.n	8036340 <localtime_r+0x134>
 803633a:	2300      	movs	r3, #0
 803633c:	6223      	str	r3, [r4, #32]
 803633e:	e009      	b.n	8036354 <localtime_r+0x148>
 8036340:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8036344:	4282      	cmp	r2, r0
 8036346:	418b      	sbcs	r3, r1
 8036348:	bfb4      	ite	lt
 803634a:	2301      	movlt	r3, #1
 803634c:	2300      	movge	r3, #0
 803634e:	6223      	str	r3, [r4, #32]
 8036350:	2b00      	cmp	r3, #0
 8036352:	d198      	bne.n	8036286 <localtime_r+0x7a>
 8036354:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8036356:	e797      	b.n	8036288 <localtime_r+0x7c>
 8036358:	2b00      	cmp	r3, #0
 803635a:	daaf      	bge.n	80362bc <localtime_r+0xb0>
 803635c:	3901      	subs	r1, #1
 803635e:	6061      	str	r1, [r4, #4]
 8036360:	333c      	adds	r3, #60	@ 0x3c
 8036362:	e7aa      	b.n	80362ba <localtime_r+0xae>
 8036364:	2b00      	cmp	r3, #0
 8036366:	dab0      	bge.n	80362ca <localtime_r+0xbe>
 8036368:	3a01      	subs	r2, #1
 803636a:	60a2      	str	r2, [r4, #8]
 803636c:	333c      	adds	r3, #60	@ 0x3c
 803636e:	e7ab      	b.n	80362c8 <localtime_r+0xbc>
 8036370:	2b00      	cmp	r3, #0
 8036372:	dacf      	bge.n	8036314 <localtime_r+0x108>
 8036374:	69e2      	ldr	r2, [r4, #28]
 8036376:	3a01      	subs	r2, #1
 8036378:	61e2      	str	r2, [r4, #28]
 803637a:	69a2      	ldr	r2, [r4, #24]
 803637c:	3a01      	subs	r2, #1
 803637e:	bf48      	it	mi
 8036380:	2206      	movmi	r2, #6
 8036382:	61a2      	str	r2, [r4, #24]
 8036384:	68e2      	ldr	r2, [r4, #12]
 8036386:	3318      	adds	r3, #24
 8036388:	3a01      	subs	r2, #1
 803638a:	60e2      	str	r2, [r4, #12]
 803638c:	60a3      	str	r3, [r4, #8]
 803638e:	2a00      	cmp	r2, #0
 8036390:	d1c0      	bne.n	8036314 <localtime_r+0x108>
 8036392:	6923      	ldr	r3, [r4, #16]
 8036394:	3b01      	subs	r3, #1
 8036396:	d405      	bmi.n	80363a4 <localtime_r+0x198>
 8036398:	6123      	str	r3, [r4, #16]
 803639a:	6923      	ldr	r3, [r4, #16]
 803639c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80363a0:	60e3      	str	r3, [r4, #12]
 80363a2:	e7b7      	b.n	8036314 <localtime_r+0x108>
 80363a4:	230b      	movs	r3, #11
 80363a6:	6123      	str	r3, [r4, #16]
 80363a8:	6963      	ldr	r3, [r4, #20]
 80363aa:	1e5a      	subs	r2, r3, #1
 80363ac:	6162      	str	r2, [r4, #20]
 80363ae:	0792      	lsls	r2, r2, #30
 80363b0:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 80363b4:	d105      	bne.n	80363c2 <localtime_r+0x1b6>
 80363b6:	2164      	movs	r1, #100	@ 0x64
 80363b8:	fb93 f2f1 	sdiv	r2, r3, r1
 80363bc:	fb01 3212 	mls	r2, r1, r2, r3
 80363c0:	b962      	cbnz	r2, 80363dc <localtime_r+0x1d0>
 80363c2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80363c6:	fb93 f1f2 	sdiv	r1, r3, r2
 80363ca:	fb02 3311 	mls	r3, r2, r1, r3
 80363ce:	fab3 f383 	clz	r3, r3
 80363d2:	095b      	lsrs	r3, r3, #5
 80363d4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80363d8:	61e3      	str	r3, [r4, #28]
 80363da:	e7de      	b.n	803639a <localtime_r+0x18e>
 80363dc:	2301      	movs	r3, #1
 80363de:	e7f9      	b.n	80363d4 <localtime_r+0x1c8>
 80363e0:	08044cdc 	.word	0x08044cdc
 80363e4:	2001833c 	.word	0x2001833c

080363e8 <iso_year_adjust>:
 80363e8:	6942      	ldr	r2, [r0, #20]
 80363ea:	2a00      	cmp	r2, #0
 80363ec:	f240 736c 	movw	r3, #1900	@ 0x76c
 80363f0:	bfa8      	it	ge
 80363f2:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 80363f6:	4413      	add	r3, r2
 80363f8:	0792      	lsls	r2, r2, #30
 80363fa:	d105      	bne.n	8036408 <iso_year_adjust+0x20>
 80363fc:	2164      	movs	r1, #100	@ 0x64
 80363fe:	fb93 f2f1 	sdiv	r2, r3, r1
 8036402:	fb01 3212 	mls	r2, r1, r2, r3
 8036406:	b9ca      	cbnz	r2, 803643c <iso_year_adjust+0x54>
 8036408:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 803640c:	fb93 f1f2 	sdiv	r1, r3, r2
 8036410:	fb02 3311 	mls	r3, r2, r1, r3
 8036414:	fab3 f383 	clz	r3, r3
 8036418:	095b      	lsrs	r3, r3, #5
 803641a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 803641e:	0040      	lsls	r0, r0, #1
 8036420:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8036424:	4418      	add	r0, r3
 8036426:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 803642a:	4298      	cmp	r0, r3
 803642c:	d027      	beq.n	803647e <iso_year_adjust+0x96>
 803642e:	dc11      	bgt.n	8036454 <iso_year_adjust+0x6c>
 8036430:	2801      	cmp	r0, #1
 8036432:	dc0a      	bgt.n	803644a <iso_year_adjust+0x62>
 8036434:	43c0      	mvns	r0, r0
 8036436:	0fc0      	lsrs	r0, r0, #31
 8036438:	4240      	negs	r0, r0
 803643a:	4770      	bx	lr
 803643c:	2301      	movs	r3, #1
 803643e:	e7ec      	b.n	803641a <iso_year_adjust+0x32>
 8036440:	4b10      	ldr	r3, [pc, #64]	@ (8036484 <iso_year_adjust+0x9c>)
 8036442:	40c3      	lsrs	r3, r0
 8036444:	f343 0000 	sbfx	r0, r3, #0, #1
 8036448:	4770      	bx	lr
 803644a:	380a      	subs	r0, #10
 803644c:	2817      	cmp	r0, #23
 803644e:	d9f7      	bls.n	8036440 <iso_year_adjust+0x58>
 8036450:	2000      	movs	r0, #0
 8036452:	4770      	bx	lr
 8036454:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 8036458:	4298      	cmp	r0, r3
 803645a:	dc06      	bgt.n	803646a <iso_year_adjust+0x82>
 803645c:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 8036460:	4298      	cmp	r0, r3
 8036462:	bfd4      	ite	le
 8036464:	2000      	movle	r0, #0
 8036466:	2001      	movgt	r0, #1
 8036468:	4770      	bx	lr
 803646a:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 803646e:	3802      	subs	r0, #2
 8036470:	2815      	cmp	r0, #21
 8036472:	d8ed      	bhi.n	8036450 <iso_year_adjust+0x68>
 8036474:	4b04      	ldr	r3, [pc, #16]	@ (8036488 <iso_year_adjust+0xa0>)
 8036476:	40c3      	lsrs	r3, r0
 8036478:	f003 0001 	and.w	r0, r3, #1
 803647c:	4770      	bx	lr
 803647e:	2001      	movs	r0, #1
 8036480:	4770      	bx	lr
 8036482:	bf00      	nop
 8036484:	00cc00cf 	.word	0x00cc00cf
 8036488:	002a001f 	.word	0x002a001f

0803648c <__strftime.isra.0>:
 803648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036490:	b08f      	sub	sp, #60	@ 0x3c
 8036492:	461e      	mov	r6, r3
 8036494:	2300      	movs	r3, #0
 8036496:	4607      	mov	r7, r0
 8036498:	460d      	mov	r5, r1
 803649a:	9302      	str	r3, [sp, #8]
 803649c:	461c      	mov	r4, r3
 803649e:	7813      	ldrb	r3, [r2, #0]
 80364a0:	2b00      	cmp	r3, #0
 80364a2:	f000 84ae 	beq.w	8036e02 <__strftime.isra.0+0x976>
 80364a6:	2b25      	cmp	r3, #37	@ 0x25
 80364a8:	d11f      	bne.n	80364ea <__strftime.isra.0+0x5e>
 80364aa:	f892 9001 	ldrb.w	r9, [r2, #1]
 80364ae:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 80364b2:	d024      	beq.n	80364fe <__strftime.isra.0+0x72>
 80364b4:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 80364b8:	d021      	beq.n	80364fe <__strftime.isra.0+0x72>
 80364ba:	f102 0801 	add.w	r8, r2, #1
 80364be:	f04f 0900 	mov.w	r9, #0
 80364c2:	f898 2000 	ldrb.w	r2, [r8]
 80364c6:	3a31      	subs	r2, #49	@ 0x31
 80364c8:	2a08      	cmp	r2, #8
 80364ca:	d81b      	bhi.n	8036504 <__strftime.isra.0+0x78>
 80364cc:	220a      	movs	r2, #10
 80364ce:	4640      	mov	r0, r8
 80364d0:	a906      	add	r1, sp, #24
 80364d2:	f008 f88b 	bl	803e5ec <strtoul>
 80364d6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80364da:	4602      	mov	r2, r0
 80364dc:	f898 1000 	ldrb.w	r1, [r8]
 80364e0:	2945      	cmp	r1, #69	@ 0x45
 80364e2:	d111      	bne.n	8036508 <__strftime.isra.0+0x7c>
 80364e4:	f108 0801 	add.w	r8, r8, #1
 80364e8:	e010      	b.n	803650c <__strftime.isra.0+0x80>
 80364ea:	1e69      	subs	r1, r5, #1
 80364ec:	42a1      	cmp	r1, r4
 80364ee:	f240 815d 	bls.w	80367ac <__strftime.isra.0+0x320>
 80364f2:	553b      	strb	r3, [r7, r4]
 80364f4:	3201      	adds	r2, #1
 80364f6:	f104 0a01 	add.w	sl, r4, #1
 80364fa:	4654      	mov	r4, sl
 80364fc:	e7cf      	b.n	803649e <__strftime.isra.0+0x12>
 80364fe:	f102 0802 	add.w	r8, r2, #2
 8036502:	e7de      	b.n	80364c2 <__strftime.isra.0+0x36>
 8036504:	2200      	movs	r2, #0
 8036506:	e7e9      	b.n	80364dc <__strftime.isra.0+0x50>
 8036508:	294f      	cmp	r1, #79	@ 0x4f
 803650a:	d0eb      	beq.n	80364e4 <__strftime.isra.0+0x58>
 803650c:	f898 0000 	ldrb.w	r0, [r8]
 8036510:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 8036514:	2955      	cmp	r1, #85	@ 0x55
 8036516:	f200 8149 	bhi.w	80367ac <__strftime.isra.0+0x320>
 803651a:	e8df f011 	tbh	[pc, r1, lsl #1]
 803651e:	046a      	.short	0x046a
 8036520:	01470147 	.word	0x01470147
 8036524:	01470147 	.word	0x01470147
 8036528:	01470147 	.word	0x01470147
 803652c:	01470147 	.word	0x01470147
 8036530:	01470147 	.word	0x01470147
 8036534:	01470147 	.word	0x01470147
 8036538:	01470147 	.word	0x01470147
 803653c:	01470147 	.word	0x01470147
 8036540:	01470147 	.word	0x01470147
 8036544:	01470147 	.word	0x01470147
 8036548:	01470147 	.word	0x01470147
 803654c:	01470147 	.word	0x01470147
 8036550:	01470147 	.word	0x01470147
 8036554:	00750147 	.word	0x00750147
 8036558:	00dc00a3 	.word	0x00dc00a3
 803655c:	01470128 	.word	0x01470128
 8036560:	01cb0159 	.word	0x01cb0159
 8036564:	02590252 	.word	0x02590252
 8036568:	01470147 	.word	0x01470147
 803656c:	02710147 	.word	0x02710147
 8036570:	01470147 	.word	0x01470147
 8036574:	0147027c 	.word	0x0147027c
 8036578:	033402ac 	.word	0x033402ac
 803657c:	036a033e 	.word	0x036a033e
 8036580:	03d80372 	.word	0x03d80372
 8036584:	03ee00d8 	.word	0x03ee00d8
 8036588:	01470440 	.word	0x01470440
 803658c:	01470147 	.word	0x01470147
 8036590:	01470147 	.word	0x01470147
 8036594:	00560147 	.word	0x00560147
 8036598:	00ba008d 	.word	0x00ba008d
 803659c:	011d011d 	.word	0x011d011d
 80365a0:	017e0147 	.word	0x017e0147
 80365a4:	0147008d 	.word	0x0147008d
 80365a8:	0252026a 	.word	0x0252026a
 80365ac:	026e0259 	.word	0x026e0259
 80365b0:	01470273 	.word	0x01470273
 80365b4:	02a5027c 	.word	0x02a5027c
 80365b8:	02b500d0 	.word	0x02b500d0
 80365bc:	035d0336 	.word	0x035d0336
 80365c0:	03cf03a4 	.word	0x03cf03a4
 80365c4:	03e000d4 	.word	0x03e000d4
 80365c8:	0403      	.short	0x0403
 80365ca:	69b3      	ldr	r3, [r6, #24]
 80365cc:	4aad      	ldr	r2, [pc, #692]	@ (8036884 <__strftime.isra.0+0x3f8>)
 80365ce:	3318      	adds	r3, #24
 80365d0:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 80365d4:	4658      	mov	r0, fp
 80365d6:	f7d9 fe63 	bl	80102a0 <strlen>
 80365da:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80365de:	eb04 0a00 	add.w	sl, r4, r0
 80365e2:	1e6b      	subs	r3, r5, #1
 80365e4:	45a2      	cmp	sl, r4
 80365e6:	d107      	bne.n	80365f8 <__strftime.isra.0+0x16c>
 80365e8:	f898 3000 	ldrb.w	r3, [r8]
 80365ec:	2b00      	cmp	r3, #0
 80365ee:	f000 8409 	beq.w	8036e04 <__strftime.isra.0+0x978>
 80365f2:	f108 0201 	add.w	r2, r8, #1
 80365f6:	e780      	b.n	80364fa <__strftime.isra.0+0x6e>
 80365f8:	42a3      	cmp	r3, r4
 80365fa:	f240 80d7 	bls.w	80367ac <__strftime.isra.0+0x320>
 80365fe:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8036602:	553a      	strb	r2, [r7, r4]
 8036604:	3401      	adds	r4, #1
 8036606:	e7ed      	b.n	80365e4 <__strftime.isra.0+0x158>
 8036608:	69b2      	ldr	r2, [r6, #24]
 803660a:	4b9e      	ldr	r3, [pc, #632]	@ (8036884 <__strftime.isra.0+0x3f8>)
 803660c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8036610:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 8036614:	4658      	mov	r0, fp
 8036616:	f7d9 fe43 	bl	80102a0 <strlen>
 803661a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803661e:	eb04 0a00 	add.w	sl, r4, r0
 8036622:	1e6b      	subs	r3, r5, #1
 8036624:	4554      	cmp	r4, sl
 8036626:	d0df      	beq.n	80365e8 <__strftime.isra.0+0x15c>
 8036628:	42a3      	cmp	r3, r4
 803662a:	f240 80bf 	bls.w	80367ac <__strftime.isra.0+0x320>
 803662e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8036632:	553a      	strb	r2, [r7, r4]
 8036634:	3401      	adds	r4, #1
 8036636:	e7f5      	b.n	8036624 <__strftime.isra.0+0x198>
 8036638:	4b92      	ldr	r3, [pc, #584]	@ (8036884 <__strftime.isra.0+0x3f8>)
 803663a:	6932      	ldr	r2, [r6, #16]
 803663c:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8036640:	4658      	mov	r0, fp
 8036642:	f7d9 fe2d 	bl	80102a0 <strlen>
 8036646:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803664a:	eb04 0a00 	add.w	sl, r4, r0
 803664e:	1e6b      	subs	r3, r5, #1
 8036650:	45a2      	cmp	sl, r4
 8036652:	d0c9      	beq.n	80365e8 <__strftime.isra.0+0x15c>
 8036654:	42a3      	cmp	r3, r4
 8036656:	f240 80a9 	bls.w	80367ac <__strftime.isra.0+0x320>
 803665a:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 803665e:	553a      	strb	r2, [r7, r4]
 8036660:	3401      	adds	r4, #1
 8036662:	e7f5      	b.n	8036650 <__strftime.isra.0+0x1c4>
 8036664:	6933      	ldr	r3, [r6, #16]
 8036666:	4a87      	ldr	r2, [pc, #540]	@ (8036884 <__strftime.isra.0+0x3f8>)
 8036668:	330c      	adds	r3, #12
 803666a:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 803666e:	4658      	mov	r0, fp
 8036670:	f7d9 fe16 	bl	80102a0 <strlen>
 8036674:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8036678:	eb04 0a00 	add.w	sl, r4, r0
 803667c:	1e6b      	subs	r3, r5, #1
 803667e:	45a2      	cmp	sl, r4
 8036680:	d0b2      	beq.n	80365e8 <__strftime.isra.0+0x15c>
 8036682:	42a3      	cmp	r3, r4
 8036684:	f240 8092 	bls.w	80367ac <__strftime.isra.0+0x320>
 8036688:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 803668c:	553a      	strb	r2, [r7, r4]
 803668e:	3401      	adds	r4, #1
 8036690:	e7f5      	b.n	803667e <__strftime.isra.0+0x1f2>
 8036692:	4b7c      	ldr	r3, [pc, #496]	@ (8036884 <__strftime.isra.0+0x3f8>)
 8036694:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 8036698:	4650      	mov	r0, sl
 803669a:	f7d9 fe01 	bl	80102a0 <strlen>
 803669e:	f89a 3000 	ldrb.w	r3, [sl]
 80366a2:	2b00      	cmp	r3, #0
 80366a4:	f000 8341 	beq.w	8036d2a <__strftime.isra.0+0x89e>
 80366a8:	4633      	mov	r3, r6
 80366aa:	4652      	mov	r2, sl
 80366ac:	1b29      	subs	r1, r5, r4
 80366ae:	1938      	adds	r0, r7, r4
 80366b0:	f7ff feec 	bl	803648c <__strftime.isra.0>
 80366b4:	2800      	cmp	r0, #0
 80366b6:	dd79      	ble.n	80367ac <__strftime.isra.0+0x320>
 80366b8:	eb04 0a00 	add.w	sl, r4, r0
 80366bc:	e794      	b.n	80365e8 <__strftime.isra.0+0x15c>
 80366be:	4b71      	ldr	r3, [pc, #452]	@ (8036884 <__strftime.isra.0+0x3f8>)
 80366c0:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 80366c4:	e7e8      	b.n	8036698 <__strftime.isra.0+0x20c>
 80366c6:	4b6f      	ldr	r3, [pc, #444]	@ (8036884 <__strftime.isra.0+0x3f8>)
 80366c8:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 80366cc:	e7e4      	b.n	8036698 <__strftime.isra.0+0x20c>
 80366ce:	4b6d      	ldr	r3, [pc, #436]	@ (8036884 <__strftime.isra.0+0x3f8>)
 80366d0:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 80366d4:	e7e0      	b.n	8036698 <__strftime.isra.0+0x20c>
 80366d6:	f8d6 a014 	ldr.w	sl, [r6, #20]
 80366da:	496b      	ldr	r1, [pc, #428]	@ (8036888 <__strftime.isra.0+0x3fc>)
 80366dc:	458a      	cmp	sl, r1
 80366de:	bfac      	ite	ge
 80366e0:	f04f 0b00 	movge.w	fp, #0
 80366e4:	f04f 0b01 	movlt.w	fp, #1
 80366e8:	f1ba 0f00 	cmp.w	sl, #0
 80366ec:	db12      	blt.n	8036714 <__strftime.isra.0+0x288>
 80366ee:	2064      	movs	r0, #100	@ 0x64
 80366f0:	fb9a f0f0 	sdiv	r0, sl, r0
 80366f4:	3013      	adds	r0, #19
 80366f6:	f1b9 0f00 	cmp.w	r9, #0
 80366fa:	d015      	beq.n	8036728 <__strftime.isra.0+0x29c>
 80366fc:	2863      	cmp	r0, #99	@ 0x63
 80366fe:	dd28      	ble.n	8036752 <__strftime.isra.0+0x2c6>
 8036700:	4b62      	ldr	r3, [pc, #392]	@ (803688c <__strftime.isra.0+0x400>)
 8036702:	4963      	ldr	r1, [pc, #396]	@ (8036890 <__strftime.isra.0+0x404>)
 8036704:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8036708:	bf0c      	ite	eq
 803670a:	469c      	moveq	ip, r3
 803670c:	468c      	movne	ip, r1
 803670e:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 80368ac <__strftime.isra.0+0x420>
 8036712:	e00d      	b.n	8036730 <__strftime.isra.0+0x2a4>
 8036714:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 8036718:	9203      	str	r2, [sp, #12]
 803671a:	f000 ff88 	bl	803762e <abs>
 803671e:	2164      	movs	r1, #100	@ 0x64
 8036720:	9a03      	ldr	r2, [sp, #12]
 8036722:	fb90 f0f1 	sdiv	r0, r0, r1
 8036726:	e7e6      	b.n	80366f6 <__strftime.isra.0+0x26a>
 8036728:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8036890 <__strftime.isra.0+0x404>
 803672c:	f8df e180 	ldr.w	lr, [pc, #384]	@ 80368b0 <__strftime.isra.0+0x424>
 8036730:	4b58      	ldr	r3, [pc, #352]	@ (8036894 <__strftime.isra.0+0x408>)
 8036732:	9001      	str	r0, [sp, #4]
 8036734:	2a02      	cmp	r2, #2
 8036736:	bf2c      	ite	cs
 8036738:	ebcb 0102 	rsbcs	r1, fp, r2
 803673c:	f1cb 0102 	rsbcc	r1, fp, #2
 8036740:	4a51      	ldr	r2, [pc, #324]	@ (8036888 <__strftime.isra.0+0x3fc>)
 8036742:	9100      	str	r1, [sp, #0]
 8036744:	4592      	cmp	sl, r2
 8036746:	bfa8      	it	ge
 8036748:	4663      	movge	r3, ip
 803674a:	4672      	mov	r2, lr
 803674c:	1b29      	subs	r1, r5, r4
 803674e:	1938      	adds	r0, r7, r4
 8036750:	e023      	b.n	803679a <__strftime.isra.0+0x30e>
 8036752:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 8036890 <__strftime.isra.0+0x404>
 8036756:	e7da      	b.n	803670e <__strftime.isra.0+0x282>
 8036758:	494f      	ldr	r1, [pc, #316]	@ (8036898 <__strftime.isra.0+0x40c>)
 803675a:	4a50      	ldr	r2, [pc, #320]	@ (803689c <__strftime.isra.0+0x410>)
 803675c:	68f3      	ldr	r3, [r6, #12]
 803675e:	2864      	cmp	r0, #100	@ 0x64
 8036760:	bf18      	it	ne
 8036762:	460a      	movne	r2, r1
 8036764:	1b29      	subs	r1, r5, r4
 8036766:	1938      	adds	r0, r7, r4
 8036768:	f002 f986 	bl	8038a78 <sniprintf>
 803676c:	e017      	b.n	803679e <__strftime.isra.0+0x312>
 803676e:	6970      	ldr	r0, [r6, #20]
 8036770:	6933      	ldr	r3, [r6, #16]
 8036772:	2800      	cmp	r0, #0
 8036774:	f103 0a01 	add.w	sl, r3, #1
 8036778:	eb07 0b04 	add.w	fp, r7, r4
 803677c:	68f3      	ldr	r3, [r6, #12]
 803677e:	eba5 0904 	sub.w	r9, r5, r4
 8036782:	db19      	blt.n	80367b8 <__strftime.isra.0+0x32c>
 8036784:	2264      	movs	r2, #100	@ 0x64
 8036786:	fb90 fcf2 	sdiv	ip, r0, r2
 803678a:	fb02 001c 	mls	r0, r2, ip, r0
 803678e:	4a44      	ldr	r2, [pc, #272]	@ (80368a0 <__strftime.isra.0+0x414>)
 8036790:	e9cd 3000 	strd	r3, r0, [sp]
 8036794:	4649      	mov	r1, r9
 8036796:	4653      	mov	r3, sl
 8036798:	4658      	mov	r0, fp
 803679a:	f002 f96d 	bl	8038a78 <sniprintf>
 803679e:	2800      	cmp	r0, #0
 80367a0:	db04      	blt.n	80367ac <__strftime.isra.0+0x320>
 80367a2:	eb00 0a04 	add.w	sl, r0, r4
 80367a6:	4555      	cmp	r5, sl
 80367a8:	f63f af1e 	bhi.w	80365e8 <__strftime.isra.0+0x15c>
 80367ac:	f04f 0a00 	mov.w	sl, #0
 80367b0:	4650      	mov	r0, sl
 80367b2:	b00f      	add	sp, #60	@ 0x3c
 80367b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80367b8:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80367bc:	9303      	str	r3, [sp, #12]
 80367be:	f000 ff36 	bl	803762e <abs>
 80367c2:	2264      	movs	r2, #100	@ 0x64
 80367c4:	9b03      	ldr	r3, [sp, #12]
 80367c6:	fb90 fcf2 	sdiv	ip, r0, r2
 80367ca:	fb0c 0012 	mls	r0, ip, r2, r0
 80367ce:	e7de      	b.n	803678e <__strftime.isra.0+0x302>
 80367d0:	2125      	movs	r1, #37	@ 0x25
 80367d2:	f88d 1018 	strb.w	r1, [sp, #24]
 80367d6:	f1b9 0f00 	cmp.w	r9, #0
 80367da:	d00b      	beq.n	80367f4 <__strftime.isra.0+0x368>
 80367dc:	2a05      	cmp	r2, #5
 80367de:	f88d 9019 	strb.w	r9, [sp, #25]
 80367e2:	d817      	bhi.n	8036814 <__strftime.isra.0+0x388>
 80367e4:	f10d 001a 	add.w	r0, sp, #26
 80367e8:	492e      	ldr	r1, [pc, #184]	@ (80368a4 <__strftime.isra.0+0x418>)
 80367ea:	f000 fe83 	bl	80374f4 <strcpy>
 80367ee:	4633      	mov	r3, r6
 80367f0:	aa06      	add	r2, sp, #24
 80367f2:	e75b      	b.n	80366ac <__strftime.isra.0+0x220>
 80367f4:	232b      	movs	r3, #43	@ 0x2b
 80367f6:	f88d 3019 	strb.w	r3, [sp, #25]
 80367fa:	2304      	movs	r3, #4
 80367fc:	4a2a      	ldr	r2, [pc, #168]	@ (80368a8 <__strftime.isra.0+0x41c>)
 80367fe:	211e      	movs	r1, #30
 8036800:	f10d 001a 	add.w	r0, sp, #26
 8036804:	f002 f938 	bl	8038a78 <sniprintf>
 8036808:	2800      	cmp	r0, #0
 803680a:	ddeb      	ble.n	80367e4 <__strftime.isra.0+0x358>
 803680c:	f10d 031a 	add.w	r3, sp, #26
 8036810:	4418      	add	r0, r3
 8036812:	e7e9      	b.n	80367e8 <__strftime.isra.0+0x35c>
 8036814:	1f93      	subs	r3, r2, #6
 8036816:	d0e5      	beq.n	80367e4 <__strftime.isra.0+0x358>
 8036818:	e7f0      	b.n	80367fc <__strftime.isra.0+0x370>
 803681a:	4630      	mov	r0, r6
 803681c:	f7ff fde4 	bl	80363e8 <iso_year_adjust>
 8036820:	4682      	mov	sl, r0
 8036822:	6970      	ldr	r0, [r6, #20]
 8036824:	2800      	cmp	r0, #0
 8036826:	db11      	blt.n	803684c <__strftime.isra.0+0x3c0>
 8036828:	2364      	movs	r3, #100	@ 0x64
 803682a:	fb90 f2f3 	sdiv	r2, r0, r3
 803682e:	fb03 0012 	mls	r0, r3, r2, r0
 8036832:	2364      	movs	r3, #100	@ 0x64
 8036834:	4482      	add	sl, r0
 8036836:	fb9a f2f3 	sdiv	r2, sl, r3
 803683a:	fb03 aa12 	mls	sl, r3, r2, sl
 803683e:	449a      	add	sl, r3
 8036840:	fbba f2f3 	udiv	r2, sl, r3
 8036844:	fb03 a312 	mls	r3, r3, r2, sl
 8036848:	4a14      	ldr	r2, [pc, #80]	@ (803689c <__strftime.isra.0+0x410>)
 803684a:	e78b      	b.n	8036764 <__strftime.isra.0+0x2d8>
 803684c:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8036850:	f000 feed 	bl	803762e <abs>
 8036854:	2364      	movs	r3, #100	@ 0x64
 8036856:	f1ba 0f00 	cmp.w	sl, #0
 803685a:	fb90 f2f3 	sdiv	r2, r0, r3
 803685e:	fb02 0013 	mls	r0, r2, r3, r0
 8036862:	da07      	bge.n	8036874 <__strftime.isra.0+0x3e8>
 8036864:	6972      	ldr	r2, [r6, #20]
 8036866:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 803686a:	429a      	cmp	r2, r3
 803686c:	bfb8      	it	lt
 803686e:	f04f 0a01 	movlt.w	sl, #1
 8036872:	e7de      	b.n	8036832 <__strftime.isra.0+0x3a6>
 8036874:	d0dd      	beq.n	8036832 <__strftime.isra.0+0x3a6>
 8036876:	6972      	ldr	r2, [r6, #20]
 8036878:	4b03      	ldr	r3, [pc, #12]	@ (8036888 <__strftime.isra.0+0x3fc>)
 803687a:	429a      	cmp	r2, r3
 803687c:	bfb8      	it	lt
 803687e:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 8036882:	e7d6      	b.n	8036832 <__strftime.isra.0+0x3a6>
 8036884:	08044f28 	.word	0x08044f28
 8036888:	fffff894 	.word	0xfffff894
 803688c:	08044d4b 	.word	0x08044d4b
 8036890:	08044c67 	.word	0x08044c67
 8036894:	08044d4d 	.word	0x08044d4d
 8036898:	08044d4f 	.word	0x08044d4f
 803689c:	08044d5d 	.word	0x08044d5d
 80368a0:	08044d53 	.word	0x08044d53
 80368a4:	08044d66 	.word	0x08044d66
 80368a8:	08044d62 	.word	0x08044d62
 80368ac:	08044d43 	.word	0x08044d43
 80368b0:	08044d3c 	.word	0x08044d3c
 80368b4:	6971      	ldr	r1, [r6, #20]
 80368b6:	48bc      	ldr	r0, [pc, #752]	@ (8036ba8 <__strftime.isra.0+0x71c>)
 80368b8:	9205      	str	r2, [sp, #20]
 80368ba:	4281      	cmp	r1, r0
 80368bc:	bfac      	ite	ge
 80368be:	2300      	movge	r3, #0
 80368c0:	2301      	movlt	r3, #1
 80368c2:	4630      	mov	r0, r6
 80368c4:	e9cd 3103 	strd	r3, r1, [sp, #12]
 80368c8:	f7ff fd8e 	bl	80363e8 <iso_year_adjust>
 80368cc:	9904      	ldr	r1, [sp, #16]
 80368ce:	9a05      	ldr	r2, [sp, #20]
 80368d0:	2900      	cmp	r1, #0
 80368d2:	4682      	mov	sl, r0
 80368d4:	db3a      	blt.n	803694c <__strftime.isra.0+0x4c0>
 80368d6:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 80368da:	fb91 fbfb 	sdiv	fp, r1, fp
 80368de:	f10b 0b13 	add.w	fp, fp, #19
 80368e2:	6970      	ldr	r0, [r6, #20]
 80368e4:	2800      	cmp	r0, #0
 80368e6:	db3e      	blt.n	8036966 <__strftime.isra.0+0x4da>
 80368e8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80368ec:	f1ba 0f00 	cmp.w	sl, #0
 80368f0:	fb90 fefc 	sdiv	lr, r0, ip
 80368f4:	fb0c 001e 	mls	r0, ip, lr, r0
 80368f8:	da4f      	bge.n	803699a <__strftime.isra.0+0x50e>
 80368fa:	4482      	add	sl, r0
 80368fc:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8036900:	d157      	bne.n	80369b2 <__strftime.isra.0+0x526>
 8036902:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8036906:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 803690a:	9b03      	ldr	r3, [sp, #12]
 803690c:	2164      	movs	r1, #100	@ 0x64
 803690e:	fb01 aa0b 	mla	sl, r1, fp, sl
 8036912:	2b00      	cmp	r3, #0
 8036914:	f040 81f7 	bne.w	8036d06 <__strftime.isra.0+0x87a>
 8036918:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 803691c:	d104      	bne.n	8036928 <__strftime.isra.0+0x49c>
 803691e:	f242 710f 	movw	r1, #9999	@ 0x270f
 8036922:	458a      	cmp	sl, r1
 8036924:	f200 8275 	bhi.w	8036e12 <__strftime.isra.0+0x986>
 8036928:	a906      	add	r1, sp, #24
 803692a:	2025      	movs	r0, #37	@ 0x25
 803692c:	7008      	strb	r0, [r1, #0]
 803692e:	f1b9 0f00 	cmp.w	r9, #0
 8036932:	f040 81f3 	bne.w	8036d1c <__strftime.isra.0+0x890>
 8036936:	1c48      	adds	r0, r1, #1
 8036938:	499c      	ldr	r1, [pc, #624]	@ (8036bac <__strftime.isra.0+0x720>)
 803693a:	9203      	str	r2, [sp, #12]
 803693c:	f000 fdda 	bl	80374f4 <strcpy>
 8036940:	9a03      	ldr	r2, [sp, #12]
 8036942:	f8cd a000 	str.w	sl, [sp]
 8036946:	4613      	mov	r3, r2
 8036948:	aa06      	add	r2, sp, #24
 803694a:	e098      	b.n	8036a7e <__strftime.isra.0+0x5f2>
 803694c:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 8036950:	9205      	str	r2, [sp, #20]
 8036952:	9104      	str	r1, [sp, #16]
 8036954:	f000 fe6b 	bl	803762e <abs>
 8036958:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 803695c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8036960:	fb90 fbfc 	sdiv	fp, r0, ip
 8036964:	e7bd      	b.n	80368e2 <__strftime.isra.0+0x456>
 8036966:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 803696a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 803696e:	f000 fe5e 	bl	803762e <abs>
 8036972:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8036976:	f1ba 0f00 	cmp.w	sl, #0
 803697a:	fb90 fefc 	sdiv	lr, r0, ip
 803697e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8036982:	fb0e 001c 	mls	r0, lr, ip, r0
 8036986:	da08      	bge.n	803699a <__strftime.isra.0+0x50e>
 8036988:	6971      	ldr	r1, [r6, #20]
 803698a:	4b89      	ldr	r3, [pc, #548]	@ (8036bb0 <__strftime.isra.0+0x724>)
 803698c:	4299      	cmp	r1, r3
 803698e:	dab4      	bge.n	80368fa <__strftime.isra.0+0x46e>
 8036990:	f04f 0a01 	mov.w	sl, #1
 8036994:	f8cd a00c 	str.w	sl, [sp, #12]
 8036998:	e7af      	b.n	80368fa <__strftime.isra.0+0x46e>
 803699a:	f1ba 0f00 	cmp.w	sl, #0
 803699e:	d0ac      	beq.n	80368fa <__strftime.isra.0+0x46e>
 80369a0:	4b81      	ldr	r3, [pc, #516]	@ (8036ba8 <__strftime.isra.0+0x71c>)
 80369a2:	4299      	cmp	r1, r3
 80369a4:	9b03      	ldr	r3, [sp, #12]
 80369a6:	bfbc      	itt	lt
 80369a8:	2301      	movlt	r3, #1
 80369aa:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 80369ae:	9303      	str	r3, [sp, #12]
 80369b0:	e7a3      	b.n	80368fa <__strftime.isra.0+0x46e>
 80369b2:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 80369b6:	bf04      	itt	eq
 80369b8:	f10b 0b01 	addeq.w	fp, fp, #1
 80369bc:	f04f 0a00 	moveq.w	sl, #0
 80369c0:	e7a3      	b.n	803690a <__strftime.isra.0+0x47e>
 80369c2:	497c      	ldr	r1, [pc, #496]	@ (8036bb4 <__strftime.isra.0+0x728>)
 80369c4:	4a7c      	ldr	r2, [pc, #496]	@ (8036bb8 <__strftime.isra.0+0x72c>)
 80369c6:	68b3      	ldr	r3, [r6, #8]
 80369c8:	286b      	cmp	r0, #107	@ 0x6b
 80369ca:	bf18      	it	ne
 80369cc:	460a      	movne	r2, r1
 80369ce:	e6c9      	b.n	8036764 <__strftime.isra.0+0x2d8>
 80369d0:	68b3      	ldr	r3, [r6, #8]
 80369d2:	b163      	cbz	r3, 80369ee <__strftime.isra.0+0x562>
 80369d4:	2b0c      	cmp	r3, #12
 80369d6:	d004      	beq.n	80369e2 <__strftime.isra.0+0x556>
 80369d8:	210c      	movs	r1, #12
 80369da:	fb93 f2f1 	sdiv	r2, r3, r1
 80369de:	fb01 3312 	mls	r3, r1, r2, r3
 80369e2:	4975      	ldr	r1, [pc, #468]	@ (8036bb8 <__strftime.isra.0+0x72c>)
 80369e4:	4a73      	ldr	r2, [pc, #460]	@ (8036bb4 <__strftime.isra.0+0x728>)
 80369e6:	2849      	cmp	r0, #73	@ 0x49
 80369e8:	bf18      	it	ne
 80369ea:	460a      	movne	r2, r1
 80369ec:	e6ba      	b.n	8036764 <__strftime.isra.0+0x2d8>
 80369ee:	230c      	movs	r3, #12
 80369f0:	e7f7      	b.n	80369e2 <__strftime.isra.0+0x556>
 80369f2:	69f3      	ldr	r3, [r6, #28]
 80369f4:	4a71      	ldr	r2, [pc, #452]	@ (8036bbc <__strftime.isra.0+0x730>)
 80369f6:	3301      	adds	r3, #1
 80369f8:	e6b4      	b.n	8036764 <__strftime.isra.0+0x2d8>
 80369fa:	6933      	ldr	r3, [r6, #16]
 80369fc:	3301      	adds	r3, #1
 80369fe:	e723      	b.n	8036848 <__strftime.isra.0+0x3bc>
 8036a00:	6873      	ldr	r3, [r6, #4]
 8036a02:	e721      	b.n	8036848 <__strftime.isra.0+0x3bc>
 8036a04:	1e6b      	subs	r3, r5, #1
 8036a06:	429c      	cmp	r4, r3
 8036a08:	f4bf aed0 	bcs.w	80367ac <__strftime.isra.0+0x320>
 8036a0c:	f104 0a01 	add.w	sl, r4, #1
 8036a10:	230a      	movs	r3, #10
 8036a12:	553b      	strb	r3, [r7, r4]
 8036a14:	e5e8      	b.n	80365e8 <__strftime.isra.0+0x15c>
 8036a16:	68b3      	ldr	r3, [r6, #8]
 8036a18:	2b0b      	cmp	r3, #11
 8036a1a:	4b69      	ldr	r3, [pc, #420]	@ (8036bc0 <__strftime.isra.0+0x734>)
 8036a1c:	bfd4      	ite	le
 8036a1e:	2200      	movle	r2, #0
 8036a20:	2201      	movgt	r2, #1
 8036a22:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8036a26:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 8036a2a:	4658      	mov	r0, fp
 8036a2c:	f7d9 fc38 	bl	80102a0 <strlen>
 8036a30:	eb04 0a00 	add.w	sl, r4, r0
 8036a34:	4863      	ldr	r0, [pc, #396]	@ (8036bc4 <__strftime.isra.0+0x738>)
 8036a36:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8036a3a:	1e69      	subs	r1, r5, #1
 8036a3c:	45a2      	cmp	sl, r4
 8036a3e:	f43f add3 	beq.w	80365e8 <__strftime.isra.0+0x15c>
 8036a42:	42a1      	cmp	r1, r4
 8036a44:	f67f aeb2 	bls.w	80367ac <__strftime.isra.0+0x320>
 8036a48:	f898 2000 	ldrb.w	r2, [r8]
 8036a4c:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 8036a50:	2a50      	cmp	r2, #80	@ 0x50
 8036a52:	d106      	bne.n	8036a62 <__strftime.isra.0+0x5d6>
 8036a54:	5cc2      	ldrb	r2, [r0, r3]
 8036a56:	f002 0203 	and.w	r2, r2, #3
 8036a5a:	2a01      	cmp	r2, #1
 8036a5c:	bf08      	it	eq
 8036a5e:	3320      	addeq	r3, #32
 8036a60:	b2db      	uxtb	r3, r3
 8036a62:	553b      	strb	r3, [r7, r4]
 8036a64:	3401      	adds	r4, #1
 8036a66:	e7e9      	b.n	8036a3c <__strftime.isra.0+0x5b0>
 8036a68:	2203      	movs	r2, #3
 8036a6a:	6933      	ldr	r3, [r6, #16]
 8036a6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8036a70:	4a55      	ldr	r2, [pc, #340]	@ (8036bc8 <__strftime.isra.0+0x73c>)
 8036a72:	3301      	adds	r3, #1
 8036a74:	e676      	b.n	8036764 <__strftime.isra.0+0x2d8>
 8036a76:	6873      	ldr	r3, [r6, #4]
 8036a78:	9300      	str	r3, [sp, #0]
 8036a7a:	68b3      	ldr	r3, [r6, #8]
 8036a7c:	4a53      	ldr	r2, [pc, #332]	@ (8036bcc <__strftime.isra.0+0x740>)
 8036a7e:	1b29      	subs	r1, r5, r4
 8036a80:	1938      	adds	r0, r7, r4
 8036a82:	f001 fff9 	bl	8038a78 <sniprintf>
 8036a86:	e68a      	b.n	803679e <__strftime.isra.0+0x312>
 8036a88:	6a33      	ldr	r3, [r6, #32]
 8036a8a:	2b00      	cmp	r3, #0
 8036a8c:	db78      	blt.n	8036b80 <__strftime.isra.0+0x6f4>
 8036a8e:	f000 fa7b 	bl	8036f88 <__tz_lock>
 8036a92:	9b02      	ldr	r3, [sp, #8]
 8036a94:	b90b      	cbnz	r3, 8036a9a <__strftime.isra.0+0x60e>
 8036a96:	f000 fa83 	bl	8036fa0 <_tzset_unlocked>
 8036a9a:	f007 fe73 	bl	803e784 <__gettzinfo>
 8036a9e:	6a33      	ldr	r3, [r6, #32]
 8036aa0:	2b00      	cmp	r3, #0
 8036aa2:	bfd4      	ite	le
 8036aa4:	2200      	movle	r2, #0
 8036aa6:	2201      	movgt	r2, #1
 8036aa8:	2328      	movs	r3, #40	@ 0x28
 8036aaa:	fb02 3303 	mla	r3, r2, r3, r3
 8036aae:	58c3      	ldr	r3, [r0, r3]
 8036ab0:	f1c3 0a00 	rsb	sl, r3, #0
 8036ab4:	f000 fa6e 	bl	8036f94 <__tz_unlock>
 8036ab8:	2301      	movs	r3, #1
 8036aba:	9302      	str	r3, [sp, #8]
 8036abc:	6972      	ldr	r2, [r6, #20]
 8036abe:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 8036ac2:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8036ac6:	f16c 0c00 	sbc.w	ip, ip, #0
 8036aca:	f1bc 0f00 	cmp.w	ip, #0
 8036ace:	eba5 0104 	sub.w	r1, r5, r4
 8036ad2:	eb07 0004 	add.w	r0, r7, r4
 8036ad6:	da02      	bge.n	8036ade <__strftime.isra.0+0x652>
 8036ad8:	3303      	adds	r3, #3
 8036ada:	f14c 0c00 	adc.w	ip, ip, #0
 8036ade:	089b      	lsrs	r3, r3, #2
 8036ae0:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8036ae4:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 8036ae8:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 8036aec:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8036af0:	fb9e fefb 	sdiv	lr, lr, fp
 8036af4:	ebb3 030e 	subs.w	r3, r3, lr
 8036af8:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8036afc:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 8036b00:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 8036b04:	fb9e fefb 	sdiv	lr, lr, fp
 8036b08:	eb13 030e 	adds.w	r3, r3, lr
 8036b0c:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 8036b10:	3a46      	subs	r2, #70	@ 0x46
 8036b12:	f240 1e6d 	movw	lr, #365	@ 0x16d
 8036b16:	fb0e f202 	mul.w	r2, lr, r2
 8036b1a:	189b      	adds	r3, r3, r2
 8036b1c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 8036b20:	69f2      	ldr	r2, [r6, #28]
 8036b22:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8036b26:	189b      	adds	r3, r3, r2
 8036b28:	f04f 0e18 	mov.w	lr, #24
 8036b2c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 8036b30:	fba3 230e 	umull	r2, r3, r3, lr
 8036b34:	fb0e 330c 	mla	r3, lr, ip, r3
 8036b38:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8036b3c:	eb12 020c 	adds.w	r2, r2, ip
 8036b40:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 8036b44:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 8036b48:	fba2 2e0c 	umull	r2, lr, r2, ip
 8036b4c:	fb0c ee03 	mla	lr, ip, r3, lr
 8036b50:	eb12 030b 	adds.w	r3, r2, fp
 8036b54:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 8036b58:	fba3 e30c 	umull	lr, r3, r3, ip
 8036b5c:	fb0c 3302 	mla	r3, ip, r2, r3
 8036b60:	f8d6 c000 	ldr.w	ip, [r6]
 8036b64:	eb1e 020c 	adds.w	r2, lr, ip
 8036b68:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 8036b6c:	ebb2 020a 	subs.w	r2, r2, sl
 8036b70:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8036b74:	e9cd 2300 	strd	r2, r3, [sp]
 8036b78:	4a15      	ldr	r2, [pc, #84]	@ (8036bd0 <__strftime.isra.0+0x744>)
 8036b7a:	f001 ff7d 	bl	8038a78 <sniprintf>
 8036b7e:	e60e      	b.n	803679e <__strftime.isra.0+0x312>
 8036b80:	f04f 0a00 	mov.w	sl, #0
 8036b84:	e79a      	b.n	8036abc <__strftime.isra.0+0x630>
 8036b86:	6833      	ldr	r3, [r6, #0]
 8036b88:	e65e      	b.n	8036848 <__strftime.isra.0+0x3bc>
 8036b8a:	1e6b      	subs	r3, r5, #1
 8036b8c:	429c      	cmp	r4, r3
 8036b8e:	f4bf ae0d 	bcs.w	80367ac <__strftime.isra.0+0x320>
 8036b92:	f104 0a01 	add.w	sl, r4, #1
 8036b96:	2309      	movs	r3, #9
 8036b98:	e73b      	b.n	8036a12 <__strftime.isra.0+0x586>
 8036b9a:	6833      	ldr	r3, [r6, #0]
 8036b9c:	9301      	str	r3, [sp, #4]
 8036b9e:	6873      	ldr	r3, [r6, #4]
 8036ba0:	9300      	str	r3, [sp, #0]
 8036ba2:	68b3      	ldr	r3, [r6, #8]
 8036ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8036bd4 <__strftime.isra.0+0x748>)
 8036ba6:	e5d1      	b.n	803674c <__strftime.isra.0+0x2c0>
 8036ba8:	fffff894 	.word	0xfffff894
 8036bac:	08044d6e 	.word	0x08044d6e
 8036bb0:	fffff895 	.word	0xfffff895
 8036bb4:	08044d5d 	.word	0x08044d5d
 8036bb8:	08044d4f 	.word	0x08044d4f
 8036bbc:	08044d72 	.word	0x08044d72
 8036bc0:	08044f28 	.word	0x08044f28
 8036bc4:	08045025 	.word	0x08045025
 8036bc8:	08044d77 	.word	0x08044d77
 8036bcc:	08044d86 	.word	0x08044d86
 8036bd0:	08044d7c 	.word	0x08044d7c
 8036bd4:	08044d81 	.word	0x08044d81
 8036bd8:	1e6b      	subs	r3, r5, #1
 8036bda:	429c      	cmp	r4, r3
 8036bdc:	f4bf ade6 	bcs.w	80367ac <__strftime.isra.0+0x320>
 8036be0:	69b3      	ldr	r3, [r6, #24]
 8036be2:	b91b      	cbnz	r3, 8036bec <__strftime.isra.0+0x760>
 8036be4:	2337      	movs	r3, #55	@ 0x37
 8036be6:	f104 0a01 	add.w	sl, r4, #1
 8036bea:	e712      	b.n	8036a12 <__strftime.isra.0+0x586>
 8036bec:	3330      	adds	r3, #48	@ 0x30
 8036bee:	b2db      	uxtb	r3, r3
 8036bf0:	e7f9      	b.n	8036be6 <__strftime.isra.0+0x75a>
 8036bf2:	69f3      	ldr	r3, [r6, #28]
 8036bf4:	69b2      	ldr	r2, [r6, #24]
 8036bf6:	3307      	adds	r3, #7
 8036bf8:	1a9b      	subs	r3, r3, r2
 8036bfa:	2207      	movs	r2, #7
 8036bfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8036c00:	e622      	b.n	8036848 <__strftime.isra.0+0x3bc>
 8036c02:	4630      	mov	r0, r6
 8036c04:	f7ff fbf0 	bl	80363e8 <iso_year_adjust>
 8036c08:	69b2      	ldr	r2, [r6, #24]
 8036c0a:	b132      	cbz	r2, 8036c1a <__strftime.isra.0+0x78e>
 8036c0c:	3a01      	subs	r2, #1
 8036c0e:	2800      	cmp	r0, #0
 8036c10:	69f3      	ldr	r3, [r6, #28]
 8036c12:	dc26      	bgt.n	8036c62 <__strftime.isra.0+0x7d6>
 8036c14:	d103      	bne.n	8036c1e <__strftime.isra.0+0x792>
 8036c16:	330a      	adds	r3, #10
 8036c18:	e7ee      	b.n	8036bf8 <__strftime.isra.0+0x76c>
 8036c1a:	2206      	movs	r2, #6
 8036c1c:	e7f7      	b.n	8036c0e <__strftime.isra.0+0x782>
 8036c1e:	1ad2      	subs	r2, r2, r3
 8036c20:	6973      	ldr	r3, [r6, #20]
 8036c22:	2b00      	cmp	r3, #0
 8036c24:	f240 716b 	movw	r1, #1899	@ 0x76b
 8036c28:	bfa8      	it	ge
 8036c2a:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 8036c2e:	440b      	add	r3, r1
 8036c30:	0799      	lsls	r1, r3, #30
 8036c32:	d105      	bne.n	8036c40 <__strftime.isra.0+0x7b4>
 8036c34:	2064      	movs	r0, #100	@ 0x64
 8036c36:	fb93 f1f0 	sdiv	r1, r3, r0
 8036c3a:	fb00 3111 	mls	r1, r0, r1, r3
 8036c3e:	b971      	cbnz	r1, 8036c5e <__strftime.isra.0+0x7d2>
 8036c40:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8036c44:	fb93 f0f1 	sdiv	r0, r3, r1
 8036c48:	fb01 3310 	mls	r3, r1, r0, r3
 8036c4c:	fab3 f383 	clz	r3, r3
 8036c50:	095b      	lsrs	r3, r3, #5
 8036c52:	1ad2      	subs	r2, r2, r3
 8036c54:	2a04      	cmp	r2, #4
 8036c56:	bfcc      	ite	gt
 8036c58:	2334      	movgt	r3, #52	@ 0x34
 8036c5a:	2335      	movle	r3, #53	@ 0x35
 8036c5c:	e5f4      	b.n	8036848 <__strftime.isra.0+0x3bc>
 8036c5e:	2301      	movs	r3, #1
 8036c60:	e7f7      	b.n	8036c52 <__strftime.isra.0+0x7c6>
 8036c62:	2301      	movs	r3, #1
 8036c64:	e5f0      	b.n	8036848 <__strftime.isra.0+0x3bc>
 8036c66:	496c      	ldr	r1, [pc, #432]	@ (8036e18 <__strftime.isra.0+0x98c>)
 8036c68:	9203      	str	r2, [sp, #12]
 8036c6a:	a806      	add	r0, sp, #24
 8036c6c:	f000 fc42 	bl	80374f4 <strcpy>
 8036c70:	a806      	add	r0, sp, #24
 8036c72:	f7d9 fb15 	bl	80102a0 <strlen>
 8036c76:	ab06      	add	r3, sp, #24
 8036c78:	eb03 0a00 	add.w	sl, r3, r0
 8036c7c:	f10a 0a01 	add.w	sl, sl, #1
 8036c80:	46d3      	mov	fp, sl
 8036c82:	f1b9 0f00 	cmp.w	r9, #0
 8036c86:	d009      	beq.n	8036c9c <__strftime.isra.0+0x810>
 8036c88:	9a03      	ldr	r2, [sp, #12]
 8036c8a:	f803 9000 	strb.w	r9, [r3, r0]
 8036c8e:	2a05      	cmp	r2, #5
 8036c90:	d901      	bls.n	8036c96 <__strftime.isra.0+0x80a>
 8036c92:	1f93      	subs	r3, r2, #6
 8036c94:	d106      	bne.n	8036ca4 <__strftime.isra.0+0x818>
 8036c96:	4961      	ldr	r1, [pc, #388]	@ (8036e1c <__strftime.isra.0+0x990>)
 8036c98:	4658      	mov	r0, fp
 8036c9a:	e5a6      	b.n	80367ea <__strftime.isra.0+0x35e>
 8036c9c:	aa06      	add	r2, sp, #24
 8036c9e:	232b      	movs	r3, #43	@ 0x2b
 8036ca0:	5413      	strb	r3, [r2, r0]
 8036ca2:	2304      	movs	r3, #4
 8036ca4:	a90e      	add	r1, sp, #56	@ 0x38
 8036ca6:	4a5e      	ldr	r2, [pc, #376]	@ (8036e20 <__strftime.isra.0+0x994>)
 8036ca8:	eba1 010a 	sub.w	r1, r1, sl
 8036cac:	4650      	mov	r0, sl
 8036cae:	f001 fee3 	bl	8038a78 <sniprintf>
 8036cb2:	2800      	cmp	r0, #0
 8036cb4:	bfc8      	it	gt
 8036cb6:	eb0a 0b00 	addgt.w	fp, sl, r0
 8036cba:	e7ec      	b.n	8036c96 <__strftime.isra.0+0x80a>
 8036cbc:	1e6b      	subs	r3, r5, #1
 8036cbe:	429c      	cmp	r4, r3
 8036cc0:	f4bf ad74 	bcs.w	80367ac <__strftime.isra.0+0x320>
 8036cc4:	69b3      	ldr	r3, [r6, #24]
 8036cc6:	f104 0a01 	add.w	sl, r4, #1
 8036cca:	3330      	adds	r3, #48	@ 0x30
 8036ccc:	e6a1      	b.n	8036a12 <__strftime.isra.0+0x586>
 8036cce:	69b2      	ldr	r2, [r6, #24]
 8036cd0:	b11a      	cbz	r2, 8036cda <__strftime.isra.0+0x84e>
 8036cd2:	3a01      	subs	r2, #1
 8036cd4:	69f3      	ldr	r3, [r6, #28]
 8036cd6:	3307      	adds	r3, #7
 8036cd8:	e78e      	b.n	8036bf8 <__strftime.isra.0+0x76c>
 8036cda:	2206      	movs	r2, #6
 8036cdc:	e7fa      	b.n	8036cd4 <__strftime.isra.0+0x848>
 8036cde:	6970      	ldr	r0, [r6, #20]
 8036ce0:	2800      	cmp	r0, #0
 8036ce2:	db05      	blt.n	8036cf0 <__strftime.isra.0+0x864>
 8036ce4:	2364      	movs	r3, #100	@ 0x64
 8036ce6:	fb90 f2f3 	sdiv	r2, r0, r3
 8036cea:	fb02 0313 	mls	r3, r2, r3, r0
 8036cee:	e5ab      	b.n	8036848 <__strftime.isra.0+0x3bc>
 8036cf0:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8036cf4:	f000 fc9b 	bl	803762e <abs>
 8036cf8:	e7f4      	b.n	8036ce4 <__strftime.isra.0+0x858>
 8036cfa:	6971      	ldr	r1, [r6, #20]
 8036cfc:	4849      	ldr	r0, [pc, #292]	@ (8036e24 <__strftime.isra.0+0x998>)
 8036cfe:	4281      	cmp	r1, r0
 8036d00:	da09      	bge.n	8036d16 <__strftime.isra.0+0x88a>
 8036d02:	eba0 0a01 	sub.w	sl, r0, r1
 8036d06:	212d      	movs	r1, #45	@ 0x2d
 8036d08:	f88d 1018 	strb.w	r1, [sp, #24]
 8036d0c:	b102      	cbz	r2, 8036d10 <__strftime.isra.0+0x884>
 8036d0e:	3a01      	subs	r2, #1
 8036d10:	f10d 0119 	add.w	r1, sp, #25
 8036d14:	e609      	b.n	803692a <__strftime.isra.0+0x49e>
 8036d16:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 8036d1a:	e5fd      	b.n	8036918 <__strftime.isra.0+0x48c>
 8036d1c:	2330      	movs	r3, #48	@ 0x30
 8036d1e:	1c88      	adds	r0, r1, #2
 8036d20:	704b      	strb	r3, [r1, #1]
 8036d22:	e609      	b.n	8036938 <__strftime.isra.0+0x4ac>
 8036d24:	6a33      	ldr	r3, [r6, #32]
 8036d26:	2b00      	cmp	r3, #0
 8036d28:	da01      	bge.n	8036d2e <__strftime.isra.0+0x8a2>
 8036d2a:	46a2      	mov	sl, r4
 8036d2c:	e45c      	b.n	80365e8 <__strftime.isra.0+0x15c>
 8036d2e:	f000 f92b 	bl	8036f88 <__tz_lock>
 8036d32:	9b02      	ldr	r3, [sp, #8]
 8036d34:	b90b      	cbnz	r3, 8036d3a <__strftime.isra.0+0x8ae>
 8036d36:	f000 f933 	bl	8036fa0 <_tzset_unlocked>
 8036d3a:	f007 fd23 	bl	803e784 <__gettzinfo>
 8036d3e:	6a33      	ldr	r3, [r6, #32]
 8036d40:	2b00      	cmp	r3, #0
 8036d42:	bfd4      	ite	le
 8036d44:	2200      	movle	r2, #0
 8036d46:	2201      	movgt	r2, #1
 8036d48:	2328      	movs	r3, #40	@ 0x28
 8036d4a:	fb02 3303 	mla	r3, r2, r3, r3
 8036d4e:	eb07 0a04 	add.w	sl, r7, r4
 8036d52:	58c3      	ldr	r3, [r0, r3]
 8036d54:	f1c3 0900 	rsb	r9, r3, #0
 8036d58:	f000 f91c 	bl	8036f94 <__tz_unlock>
 8036d5c:	233c      	movs	r3, #60	@ 0x3c
 8036d5e:	fb99 f0f3 	sdiv	r0, r9, r3
 8036d62:	f001 fbfe 	bl	8038562 <labs>
 8036d66:	233c      	movs	r3, #60	@ 0x3c
 8036d68:	eba5 0b04 	sub.w	fp, r5, r4
 8036d6c:	fb90 f2f3 	sdiv	r2, r0, r3
 8036d70:	fb02 0013 	mls	r0, r2, r3, r0
 8036d74:	9000      	str	r0, [sp, #0]
 8036d76:	4a2c      	ldr	r2, [pc, #176]	@ (8036e28 <__strftime.isra.0+0x99c>)
 8036d78:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8036d7c:	4659      	mov	r1, fp
 8036d7e:	4650      	mov	r0, sl
 8036d80:	fb99 f3f3 	sdiv	r3, r9, r3
 8036d84:	f001 fe78 	bl	8038a78 <sniprintf>
 8036d88:	2800      	cmp	r0, #0
 8036d8a:	f6ff ad0f 	blt.w	80367ac <__strftime.isra.0+0x320>
 8036d8e:	eb00 0a04 	add.w	sl, r0, r4
 8036d92:	4555      	cmp	r5, sl
 8036d94:	f67f ad0a 	bls.w	80367ac <__strftime.isra.0+0x320>
 8036d98:	2301      	movs	r3, #1
 8036d9a:	9302      	str	r3, [sp, #8]
 8036d9c:	e424      	b.n	80365e8 <__strftime.isra.0+0x15c>
 8036d9e:	6a33      	ldr	r3, [r6, #32]
 8036da0:	2b00      	cmp	r3, #0
 8036da2:	dbc2      	blt.n	8036d2a <__strftime.isra.0+0x89e>
 8036da4:	f000 f8f0 	bl	8036f88 <__tz_lock>
 8036da8:	9b02      	ldr	r3, [sp, #8]
 8036daa:	b90b      	cbnz	r3, 8036db0 <__strftime.isra.0+0x924>
 8036dac:	f000 f8f8 	bl	8036fa0 <_tzset_unlocked>
 8036db0:	6a33      	ldr	r3, [r6, #32]
 8036db2:	4a1e      	ldr	r2, [pc, #120]	@ (8036e2c <__strftime.isra.0+0x9a0>)
 8036db4:	2b00      	cmp	r3, #0
 8036db6:	bfd4      	ite	le
 8036db8:	2300      	movle	r3, #0
 8036dba:	2301      	movgt	r3, #1
 8036dbc:	46a2      	mov	sl, r4
 8036dbe:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8036dc2:	4648      	mov	r0, r9
 8036dc4:	f7d9 fa6c 	bl	80102a0 <strlen>
 8036dc8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8036dcc:	4420      	add	r0, r4
 8036dce:	1e6b      	subs	r3, r5, #1
 8036dd0:	4550      	cmp	r0, sl
 8036dd2:	d102      	bne.n	8036dda <__strftime.isra.0+0x94e>
 8036dd4:	f000 f8de 	bl	8036f94 <__tz_unlock>
 8036dd8:	e7de      	b.n	8036d98 <__strftime.isra.0+0x90c>
 8036dda:	4553      	cmp	r3, sl
 8036ddc:	d906      	bls.n	8036dec <__strftime.isra.0+0x960>
 8036dde:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8036de2:	f807 200a 	strb.w	r2, [r7, sl]
 8036de6:	f10a 0a01 	add.w	sl, sl, #1
 8036dea:	e7f1      	b.n	8036dd0 <__strftime.isra.0+0x944>
 8036dec:	f000 f8d2 	bl	8036f94 <__tz_unlock>
 8036df0:	e4dc      	b.n	80367ac <__strftime.isra.0+0x320>
 8036df2:	1e6b      	subs	r3, r5, #1
 8036df4:	429c      	cmp	r4, r3
 8036df6:	f4bf acd9 	bcs.w	80367ac <__strftime.isra.0+0x320>
 8036dfa:	f104 0a01 	add.w	sl, r4, #1
 8036dfe:	2325      	movs	r3, #37	@ 0x25
 8036e00:	e607      	b.n	8036a12 <__strftime.isra.0+0x586>
 8036e02:	46a2      	mov	sl, r4
 8036e04:	2d00      	cmp	r5, #0
 8036e06:	f43f acd3 	beq.w	80367b0 <__strftime.isra.0+0x324>
 8036e0a:	2300      	movs	r3, #0
 8036e0c:	f807 300a 	strb.w	r3, [r7, sl]
 8036e10:	e4ce      	b.n	80367b0 <__strftime.isra.0+0x324>
 8036e12:	4649      	mov	r1, r9
 8036e14:	e778      	b.n	8036d08 <__strftime.isra.0+0x87c>
 8036e16:	bf00      	nop
 8036e18:	08044d90 	.word	0x08044d90
 8036e1c:	08044ef8 	.word	0x08044ef8
 8036e20:	08044d62 	.word	0x08044d62
 8036e24:	fffff894 	.word	0xfffff894
 8036e28:	08044d98 	.word	0x08044d98
 8036e2c:	200002cc 	.word	0x200002cc

08036e30 <strftime>:
 8036e30:	f7ff bb2c 	b.w	803648c <__strftime.isra.0>

08036e34 <__tzcalc_limits>:
 8036e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8036e38:	4604      	mov	r4, r0
 8036e3a:	f007 fca3 	bl	803e784 <__gettzinfo>
 8036e3e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8036e42:	429c      	cmp	r4, r3
 8036e44:	f340 8099 	ble.w	8036f7a <__tzcalc_limits+0x146>
 8036e48:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8036e4c:	19e5      	adds	r5, r4, r7
 8036e4e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8036e52:	f240 126d 	movw	r2, #365	@ 0x16d
 8036e56:	10ad      	asrs	r5, r5, #2
 8036e58:	fb02 5503 	mla	r5, r2, r3, r5
 8036e5c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8036e60:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8036e64:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8036e68:	4f45      	ldr	r7, [pc, #276]	@ (8036f80 <__tzcalc_limits+0x14c>)
 8036e6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8036e6e:	441d      	add	r5, r3
 8036e70:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8036e74:	eb04 030c 	add.w	r3, r4, ip
 8036e78:	6044      	str	r4, [r0, #4]
 8036e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8036e7e:	4601      	mov	r1, r0
 8036e80:	441d      	add	r5, r3
 8036e82:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8036e86:	7a0b      	ldrb	r3, [r1, #8]
 8036e88:	694a      	ldr	r2, [r1, #20]
 8036e8a:	2b4a      	cmp	r3, #74	@ 0x4a
 8036e8c:	d133      	bne.n	8036ef6 <__tzcalc_limits+0xc2>
 8036e8e:	07a6      	lsls	r6, r4, #30
 8036e90:	eb05 0302 	add.w	r3, r5, r2
 8036e94:	d106      	bne.n	8036ea4 <__tzcalc_limits+0x70>
 8036e96:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8036e9a:	fb94 f6fe 	sdiv	r6, r4, lr
 8036e9e:	fb0e 4616 	mls	r6, lr, r6, r4
 8036ea2:	b936      	cbnz	r6, 8036eb2 <__tzcalc_limits+0x7e>
 8036ea4:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8036ea8:	fb94 f6fe 	sdiv	r6, r4, lr
 8036eac:	fb0e 4616 	mls	r6, lr, r6, r4
 8036eb0:	b9fe      	cbnz	r6, 8036ef2 <__tzcalc_limits+0xbe>
 8036eb2:	2a3b      	cmp	r2, #59	@ 0x3b
 8036eb4:	bfd4      	ite	le
 8036eb6:	2200      	movle	r2, #0
 8036eb8:	2201      	movgt	r2, #1
 8036eba:	4413      	add	r3, r2
 8036ebc:	3b01      	subs	r3, #1
 8036ebe:	698a      	ldr	r2, [r1, #24]
 8036ec0:	17d6      	asrs	r6, r2, #31
 8036ec2:	fbc3 2607 	smlal	r2, r6, r3, r7
 8036ec6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8036ec8:	18d2      	adds	r2, r2, r3
 8036eca:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 8036ece:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8036ed2:	3128      	adds	r1, #40	@ 0x28
 8036ed4:	458c      	cmp	ip, r1
 8036ed6:	d1d6      	bne.n	8036e86 <__tzcalc_limits+0x52>
 8036ed8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8036edc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8036ee0:	428c      	cmp	r4, r1
 8036ee2:	4193      	sbcs	r3, r2
 8036ee4:	bfb4      	ite	lt
 8036ee6:	2301      	movlt	r3, #1
 8036ee8:	2300      	movge	r3, #0
 8036eea:	6003      	str	r3, [r0, #0]
 8036eec:	2001      	movs	r0, #1
 8036eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8036ef2:	2200      	movs	r2, #0
 8036ef4:	e7e1      	b.n	8036eba <__tzcalc_limits+0x86>
 8036ef6:	2b44      	cmp	r3, #68	@ 0x44
 8036ef8:	d101      	bne.n	8036efe <__tzcalc_limits+0xca>
 8036efa:	18ab      	adds	r3, r5, r2
 8036efc:	e7df      	b.n	8036ebe <__tzcalc_limits+0x8a>
 8036efe:	07a3      	lsls	r3, r4, #30
 8036f00:	d105      	bne.n	8036f0e <__tzcalc_limits+0xda>
 8036f02:	2664      	movs	r6, #100	@ 0x64
 8036f04:	fb94 f3f6 	sdiv	r3, r4, r6
 8036f08:	fb06 4313 	mls	r3, r6, r3, r4
 8036f0c:	bb7b      	cbnz	r3, 8036f6e <__tzcalc_limits+0x13a>
 8036f0e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8036f12:	fb94 f6f3 	sdiv	r6, r4, r3
 8036f16:	fb03 4616 	mls	r6, r3, r6, r4
 8036f1a:	fab6 f686 	clz	r6, r6
 8036f1e:	0976      	lsrs	r6, r6, #5
 8036f20:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8036f84 <__tzcalc_limits+0x150>
 8036f24:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8036f28:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8036f2c:	462b      	mov	r3, r5
 8036f2e:	f04f 0800 	mov.w	r8, #0
 8036f32:	fb0a e606 	mla	r6, sl, r6, lr
 8036f36:	f108 0801 	add.w	r8, r8, #1
 8036f3a:	45c1      	cmp	r9, r8
 8036f3c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8036f40:	dc17      	bgt.n	8036f72 <__tzcalc_limits+0x13e>
 8036f42:	f103 0804 	add.w	r8, r3, #4
 8036f46:	2607      	movs	r6, #7
 8036f48:	fb98 f6f6 	sdiv	r6, r8, r6
 8036f4c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8036f50:	eba8 0606 	sub.w	r6, r8, r6
 8036f54:	1b92      	subs	r2, r2, r6
 8036f56:	690e      	ldr	r6, [r1, #16]
 8036f58:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 8036f5c:	bf48      	it	mi
 8036f5e:	3207      	addmi	r2, #7
 8036f60:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8036f64:	4432      	add	r2, r6
 8036f66:	4572      	cmp	r2, lr
 8036f68:	da05      	bge.n	8036f76 <__tzcalc_limits+0x142>
 8036f6a:	4413      	add	r3, r2
 8036f6c:	e7a7      	b.n	8036ebe <__tzcalc_limits+0x8a>
 8036f6e:	2601      	movs	r6, #1
 8036f70:	e7d6      	b.n	8036f20 <__tzcalc_limits+0xec>
 8036f72:	4473      	add	r3, lr
 8036f74:	e7df      	b.n	8036f36 <__tzcalc_limits+0x102>
 8036f76:	3a07      	subs	r2, #7
 8036f78:	e7f5      	b.n	8036f66 <__tzcalc_limits+0x132>
 8036f7a:	2000      	movs	r0, #0
 8036f7c:	e7b7      	b.n	8036eee <__tzcalc_limits+0xba>
 8036f7e:	bf00      	nop
 8036f80:	00015180 	.word	0x00015180
 8036f84:	08044cd8 	.word	0x08044cd8

08036f88 <__tz_lock>:
 8036f88:	4801      	ldr	r0, [pc, #4]	@ (8036f90 <__tz_lock+0x8>)
 8036f8a:	f000 bae1 	b.w	8037550 <__retarget_lock_acquire>
 8036f8e:	bf00      	nop
 8036f90:	20018344 	.word	0x20018344

08036f94 <__tz_unlock>:
 8036f94:	4801      	ldr	r0, [pc, #4]	@ (8036f9c <__tz_unlock+0x8>)
 8036f96:	f000 badd 	b.w	8037554 <__retarget_lock_release>
 8036f9a:	bf00      	nop
 8036f9c:	20018344 	.word	0x20018344

08036fa0 <_tzset_unlocked>:
 8036fa0:	4b01      	ldr	r3, [pc, #4]	@ (8036fa8 <_tzset_unlocked+0x8>)
 8036fa2:	6818      	ldr	r0, [r3, #0]
 8036fa4:	f000 b802 	b.w	8036fac <_tzset_unlocked_r>
 8036fa8:	20000440 	.word	0x20000440

08036fac <_tzset_unlocked_r>:
 8036fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036fb0:	b08d      	sub	sp, #52	@ 0x34
 8036fb2:	4607      	mov	r7, r0
 8036fb4:	f007 fbe6 	bl	803e784 <__gettzinfo>
 8036fb8:	49bc      	ldr	r1, [pc, #752]	@ (80372ac <_tzset_unlocked_r+0x300>)
 8036fba:	4dbd      	ldr	r5, [pc, #756]	@ (80372b0 <_tzset_unlocked_r+0x304>)
 8036fbc:	4604      	mov	r4, r0
 8036fbe:	4638      	mov	r0, r7
 8036fc0:	f001 fac8 	bl	8038554 <_getenv_r>
 8036fc4:	4606      	mov	r6, r0
 8036fc6:	bb10      	cbnz	r0, 803700e <_tzset_unlocked_r+0x62>
 8036fc8:	4bba      	ldr	r3, [pc, #744]	@ (80372b4 <_tzset_unlocked_r+0x308>)
 8036fca:	4abb      	ldr	r2, [pc, #748]	@ (80372b8 <_tzset_unlocked_r+0x30c>)
 8036fcc:	6018      	str	r0, [r3, #0]
 8036fce:	4bbb      	ldr	r3, [pc, #748]	@ (80372bc <_tzset_unlocked_r+0x310>)
 8036fd0:	62a0      	str	r0, [r4, #40]	@ 0x28
 8036fd2:	6018      	str	r0, [r3, #0]
 8036fd4:	4bba      	ldr	r3, [pc, #744]	@ (80372c0 <_tzset_unlocked_r+0x314>)
 8036fd6:	6520      	str	r0, [r4, #80]	@ 0x50
 8036fd8:	e9c3 2200 	strd	r2, r2, [r3]
 8036fdc:	214a      	movs	r1, #74	@ 0x4a
 8036fde:	2200      	movs	r2, #0
 8036fe0:	2300      	movs	r3, #0
 8036fe2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8036fe6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8036fea:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8036fee:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8036ff2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8036ff6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8036ffa:	6828      	ldr	r0, [r5, #0]
 8036ffc:	7221      	strb	r1, [r4, #8]
 8036ffe:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8037002:	f001 fabb 	bl	803857c <free>
 8037006:	602e      	str	r6, [r5, #0]
 8037008:	b00d      	add	sp, #52	@ 0x34
 803700a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803700e:	6829      	ldr	r1, [r5, #0]
 8037010:	2900      	cmp	r1, #0
 8037012:	f040 808e 	bne.w	8037132 <_tzset_unlocked_r+0x186>
 8037016:	6828      	ldr	r0, [r5, #0]
 8037018:	f001 fab0 	bl	803857c <free>
 803701c:	4630      	mov	r0, r6
 803701e:	f7d9 f93f 	bl	80102a0 <strlen>
 8037022:	1c41      	adds	r1, r0, #1
 8037024:	4638      	mov	r0, r7
 8037026:	f001 fab1 	bl	803858c <_malloc_r>
 803702a:	6028      	str	r0, [r5, #0]
 803702c:	2800      	cmp	r0, #0
 803702e:	f040 8086 	bne.w	803713e <_tzset_unlocked_r+0x192>
 8037032:	4aa2      	ldr	r2, [pc, #648]	@ (80372bc <_tzset_unlocked_r+0x310>)
 8037034:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 80372c0 <_tzset_unlocked_r+0x314>
 8037038:	f8df a278 	ldr.w	sl, [pc, #632]	@ 80372b4 <_tzset_unlocked_r+0x308>
 803703c:	2300      	movs	r3, #0
 803703e:	6013      	str	r3, [r2, #0]
 8037040:	4aa0      	ldr	r2, [pc, #640]	@ (80372c4 <_tzset_unlocked_r+0x318>)
 8037042:	f8ca 3000 	str.w	r3, [sl]
 8037046:	2000      	movs	r0, #0
 8037048:	2100      	movs	r1, #0
 803704a:	e9c8 2200 	strd	r2, r2, [r8]
 803704e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8037052:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8037056:	e9c4 0108 	strd	r0, r1, [r4, #32]
 803705a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 803705e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8037062:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8037066:	224a      	movs	r2, #74	@ 0x4a
 8037068:	7222      	strb	r2, [r4, #8]
 803706a:	62a3      	str	r3, [r4, #40]	@ 0x28
 803706c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8037070:	6523      	str	r3, [r4, #80]	@ 0x50
 8037072:	7833      	ldrb	r3, [r6, #0]
 8037074:	2b3a      	cmp	r3, #58	@ 0x3a
 8037076:	bf08      	it	eq
 8037078:	3601      	addeq	r6, #1
 803707a:	7833      	ldrb	r3, [r6, #0]
 803707c:	2b3c      	cmp	r3, #60	@ 0x3c
 803707e:	d162      	bne.n	8037146 <_tzset_unlocked_r+0x19a>
 8037080:	1c75      	adds	r5, r6, #1
 8037082:	4a91      	ldr	r2, [pc, #580]	@ (80372c8 <_tzset_unlocked_r+0x31c>)
 8037084:	4991      	ldr	r1, [pc, #580]	@ (80372cc <_tzset_unlocked_r+0x320>)
 8037086:	ab0a      	add	r3, sp, #40	@ 0x28
 8037088:	4628      	mov	r0, r5
 803708a:	f001 fccb 	bl	8038a24 <siscanf>
 803708e:	2800      	cmp	r0, #0
 8037090:	ddba      	ble.n	8037008 <_tzset_unlocked_r+0x5c>
 8037092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8037094:	1eda      	subs	r2, r3, #3
 8037096:	2a07      	cmp	r2, #7
 8037098:	d8b6      	bhi.n	8037008 <_tzset_unlocked_r+0x5c>
 803709a:	5ceb      	ldrb	r3, [r5, r3]
 803709c:	2b3e      	cmp	r3, #62	@ 0x3e
 803709e:	d1b3      	bne.n	8037008 <_tzset_unlocked_r+0x5c>
 80370a0:	3602      	adds	r6, #2
 80370a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80370a4:	18f5      	adds	r5, r6, r3
 80370a6:	5cf3      	ldrb	r3, [r6, r3]
 80370a8:	2b2d      	cmp	r3, #45	@ 0x2d
 80370aa:	d15a      	bne.n	8037162 <_tzset_unlocked_r+0x1b6>
 80370ac:	3501      	adds	r5, #1
 80370ae:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 80370b2:	2300      	movs	r3, #0
 80370b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80370b8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80370bc:	af08      	add	r7, sp, #32
 80370be:	ab0a      	add	r3, sp, #40	@ 0x28
 80370c0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80370c4:	9303      	str	r3, [sp, #12]
 80370c6:	f10d 031e 	add.w	r3, sp, #30
 80370ca:	9300      	str	r3, [sp, #0]
 80370cc:	4980      	ldr	r1, [pc, #512]	@ (80372d0 <_tzset_unlocked_r+0x324>)
 80370ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80370d0:	aa07      	add	r2, sp, #28
 80370d2:	4628      	mov	r0, r5
 80370d4:	f001 fca6 	bl	8038a24 <siscanf>
 80370d8:	2800      	cmp	r0, #0
 80370da:	dd95      	ble.n	8037008 <_tzset_unlocked_r+0x5c>
 80370dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80370e0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80370e4:	223c      	movs	r2, #60	@ 0x3c
 80370e6:	fb02 6603 	mla	r6, r2, r3, r6
 80370ea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80370ee:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80370f2:	fb02 6603 	mla	r6, r2, r3, r6
 80370f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80370f8:	fb09 f606 	mul.w	r6, r9, r6
 80370fc:	eb05 0903 	add.w	r9, r5, r3
 8037100:	5ceb      	ldrb	r3, [r5, r3]
 8037102:	2b3c      	cmp	r3, #60	@ 0x3c
 8037104:	f040 80ee 	bne.w	80372e4 <_tzset_unlocked_r+0x338>
 8037108:	f109 0501 	add.w	r5, r9, #1
 803710c:	4a71      	ldr	r2, [pc, #452]	@ (80372d4 <_tzset_unlocked_r+0x328>)
 803710e:	496f      	ldr	r1, [pc, #444]	@ (80372cc <_tzset_unlocked_r+0x320>)
 8037110:	ab0a      	add	r3, sp, #40	@ 0x28
 8037112:	4628      	mov	r0, r5
 8037114:	f001 fc86 	bl	8038a24 <siscanf>
 8037118:	2800      	cmp	r0, #0
 803711a:	dc28      	bgt.n	803716e <_tzset_unlocked_r+0x1c2>
 803711c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8037120:	2b3e      	cmp	r3, #62	@ 0x3e
 8037122:	d124      	bne.n	803716e <_tzset_unlocked_r+0x1c2>
 8037124:	4b68      	ldr	r3, [pc, #416]	@ (80372c8 <_tzset_unlocked_r+0x31c>)
 8037126:	62a6      	str	r6, [r4, #40]	@ 0x28
 8037128:	e9c8 3300 	strd	r3, r3, [r8]
 803712c:	f8ca 6000 	str.w	r6, [sl]
 8037130:	e76a      	b.n	8037008 <_tzset_unlocked_r+0x5c>
 8037132:	f7d9 f855 	bl	80101e0 <strcmp>
 8037136:	2800      	cmp	r0, #0
 8037138:	f47f af6d 	bne.w	8037016 <_tzset_unlocked_r+0x6a>
 803713c:	e764      	b.n	8037008 <_tzset_unlocked_r+0x5c>
 803713e:	4631      	mov	r1, r6
 8037140:	f000 f9d8 	bl	80374f4 <strcpy>
 8037144:	e775      	b.n	8037032 <_tzset_unlocked_r+0x86>
 8037146:	4a60      	ldr	r2, [pc, #384]	@ (80372c8 <_tzset_unlocked_r+0x31c>)
 8037148:	4963      	ldr	r1, [pc, #396]	@ (80372d8 <_tzset_unlocked_r+0x32c>)
 803714a:	ab0a      	add	r3, sp, #40	@ 0x28
 803714c:	4630      	mov	r0, r6
 803714e:	f001 fc69 	bl	8038a24 <siscanf>
 8037152:	2800      	cmp	r0, #0
 8037154:	f77f af58 	ble.w	8037008 <_tzset_unlocked_r+0x5c>
 8037158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803715a:	3b03      	subs	r3, #3
 803715c:	2b07      	cmp	r3, #7
 803715e:	d9a0      	bls.n	80370a2 <_tzset_unlocked_r+0xf6>
 8037160:	e752      	b.n	8037008 <_tzset_unlocked_r+0x5c>
 8037162:	2b2b      	cmp	r3, #43	@ 0x2b
 8037164:	bf08      	it	eq
 8037166:	3501      	addeq	r5, #1
 8037168:	f04f 0901 	mov.w	r9, #1
 803716c:	e7a1      	b.n	80370b2 <_tzset_unlocked_r+0x106>
 803716e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8037170:	1eda      	subs	r2, r3, #3
 8037172:	2a07      	cmp	r2, #7
 8037174:	f63f af48 	bhi.w	8037008 <_tzset_unlocked_r+0x5c>
 8037178:	5ceb      	ldrb	r3, [r5, r3]
 803717a:	2b3e      	cmp	r3, #62	@ 0x3e
 803717c:	f47f af44 	bne.w	8037008 <_tzset_unlocked_r+0x5c>
 8037180:	f109 0902 	add.w	r9, r9, #2
 8037184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8037186:	eb09 0503 	add.w	r5, r9, r3
 803718a:	f819 3003 	ldrb.w	r3, [r9, r3]
 803718e:	2b2d      	cmp	r3, #45	@ 0x2d
 8037190:	f040 80b7 	bne.w	8037302 <_tzset_unlocked_r+0x356>
 8037194:	3501      	adds	r5, #1
 8037196:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 803719a:	2300      	movs	r3, #0
 803719c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80371a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80371a4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80371a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80371aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80371ac:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80371b0:	9301      	str	r3, [sp, #4]
 80371b2:	f10d 031e 	add.w	r3, sp, #30
 80371b6:	9300      	str	r3, [sp, #0]
 80371b8:	4945      	ldr	r1, [pc, #276]	@ (80372d0 <_tzset_unlocked_r+0x324>)
 80371ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80371bc:	aa07      	add	r2, sp, #28
 80371be:	4628      	mov	r0, r5
 80371c0:	f001 fc30 	bl	8038a24 <siscanf>
 80371c4:	2800      	cmp	r0, #0
 80371c6:	f300 80a2 	bgt.w	803730e <_tzset_unlocked_r+0x362>
 80371ca:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 80371ce:	9304      	str	r3, [sp, #16]
 80371d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80371d2:	4627      	mov	r7, r4
 80371d4:	441d      	add	r5, r3
 80371d6:	f04f 0b00 	mov.w	fp, #0
 80371da:	782b      	ldrb	r3, [r5, #0]
 80371dc:	2b2c      	cmp	r3, #44	@ 0x2c
 80371de:	bf08      	it	eq
 80371e0:	3501      	addeq	r5, #1
 80371e2:	f895 9000 	ldrb.w	r9, [r5]
 80371e6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 80371ea:	f040 80a3 	bne.w	8037334 <_tzset_unlocked_r+0x388>
 80371ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80371f0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 80371f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80371f8:	aa09      	add	r2, sp, #36	@ 0x24
 80371fa:	9200      	str	r2, [sp, #0]
 80371fc:	4937      	ldr	r1, [pc, #220]	@ (80372dc <_tzset_unlocked_r+0x330>)
 80371fe:	9303      	str	r3, [sp, #12]
 8037200:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8037204:	4628      	mov	r0, r5
 8037206:	f001 fc0d 	bl	8038a24 <siscanf>
 803720a:	2803      	cmp	r0, #3
 803720c:	f47f aefc 	bne.w	8037008 <_tzset_unlocked_r+0x5c>
 8037210:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8037214:	1e4b      	subs	r3, r1, #1
 8037216:	2b0b      	cmp	r3, #11
 8037218:	f63f aef6 	bhi.w	8037008 <_tzset_unlocked_r+0x5c>
 803721c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8037220:	1e53      	subs	r3, r2, #1
 8037222:	2b04      	cmp	r3, #4
 8037224:	f63f aef0 	bhi.w	8037008 <_tzset_unlocked_r+0x5c>
 8037228:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 803722c:	2b06      	cmp	r3, #6
 803722e:	f63f aeeb 	bhi.w	8037008 <_tzset_unlocked_r+0x5c>
 8037232:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8037236:	f887 9008 	strb.w	r9, [r7, #8]
 803723a:	617b      	str	r3, [r7, #20]
 803723c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803723e:	eb05 0903 	add.w	r9, r5, r3
 8037242:	2500      	movs	r5, #0
 8037244:	f04f 0302 	mov.w	r3, #2
 8037248:	f8ad 301c 	strh.w	r3, [sp, #28]
 803724c:	f8ad 501e 	strh.w	r5, [sp, #30]
 8037250:	f8ad 5020 	strh.w	r5, [sp, #32]
 8037254:	950a      	str	r5, [sp, #40]	@ 0x28
 8037256:	f899 3000 	ldrb.w	r3, [r9]
 803725a:	2b2f      	cmp	r3, #47	@ 0x2f
 803725c:	f040 8096 	bne.w	803738c <_tzset_unlocked_r+0x3e0>
 8037260:	ab0a      	add	r3, sp, #40	@ 0x28
 8037262:	aa08      	add	r2, sp, #32
 8037264:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8037268:	f10d 021e 	add.w	r2, sp, #30
 803726c:	9200      	str	r2, [sp, #0]
 803726e:	491c      	ldr	r1, [pc, #112]	@ (80372e0 <_tzset_unlocked_r+0x334>)
 8037270:	9303      	str	r3, [sp, #12]
 8037272:	aa07      	add	r2, sp, #28
 8037274:	4648      	mov	r0, r9
 8037276:	f001 fbd5 	bl	8038a24 <siscanf>
 803727a:	42a8      	cmp	r0, r5
 803727c:	f300 8086 	bgt.w	803738c <_tzset_unlocked_r+0x3e0>
 8037280:	214a      	movs	r1, #74	@ 0x4a
 8037282:	2200      	movs	r2, #0
 8037284:	2300      	movs	r3, #0
 8037286:	e9c4 5503 	strd	r5, r5, [r4, #12]
 803728a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 803728e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8037292:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8037296:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 803729a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 803729e:	7221      	strb	r1, [r4, #8]
 80372a0:	62a5      	str	r5, [r4, #40]	@ 0x28
 80372a2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80372a6:	6525      	str	r5, [r4, #80]	@ 0x50
 80372a8:	e6ae      	b.n	8037008 <_tzset_unlocked_r+0x5c>
 80372aa:	bf00      	nop
 80372ac:	08044da4 	.word	0x08044da4
 80372b0:	2001831c 	.word	0x2001831c
 80372b4:	20018338 	.word	0x20018338
 80372b8:	08044da7 	.word	0x08044da7
 80372bc:	2001833c 	.word	0x2001833c
 80372c0:	200002cc 	.word	0x200002cc
 80372c4:	08044c67 	.word	0x08044c67
 80372c8:	2001832c 	.word	0x2001832c
 80372cc:	08044dab 	.word	0x08044dab
 80372d0:	08044de0 	.word	0x08044de0
 80372d4:	20018320 	.word	0x20018320
 80372d8:	08044dbe 	.word	0x08044dbe
 80372dc:	08044dcc 	.word	0x08044dcc
 80372e0:	08044ddf 	.word	0x08044ddf
 80372e4:	4a3e      	ldr	r2, [pc, #248]	@ (80373e0 <_tzset_unlocked_r+0x434>)
 80372e6:	493f      	ldr	r1, [pc, #252]	@ (80373e4 <_tzset_unlocked_r+0x438>)
 80372e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80372ea:	4648      	mov	r0, r9
 80372ec:	f001 fb9a 	bl	8038a24 <siscanf>
 80372f0:	2800      	cmp	r0, #0
 80372f2:	f77f af17 	ble.w	8037124 <_tzset_unlocked_r+0x178>
 80372f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80372f8:	3b03      	subs	r3, #3
 80372fa:	2b07      	cmp	r3, #7
 80372fc:	f67f af42 	bls.w	8037184 <_tzset_unlocked_r+0x1d8>
 8037300:	e682      	b.n	8037008 <_tzset_unlocked_r+0x5c>
 8037302:	2b2b      	cmp	r3, #43	@ 0x2b
 8037304:	bf08      	it	eq
 8037306:	3501      	addeq	r5, #1
 8037308:	f04f 0901 	mov.w	r9, #1
 803730c:	e745      	b.n	803719a <_tzset_unlocked_r+0x1ee>
 803730e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8037312:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8037316:	213c      	movs	r1, #60	@ 0x3c
 8037318:	fb01 3302 	mla	r3, r1, r2, r3
 803731c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8037320:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8037324:	fb01 3302 	mla	r3, r1, r2, r3
 8037328:	fb09 f303 	mul.w	r3, r9, r3
 803732c:	e74f      	b.n	80371ce <_tzset_unlocked_r+0x222>
 803732e:	f04f 0b01 	mov.w	fp, #1
 8037332:	e752      	b.n	80371da <_tzset_unlocked_r+0x22e>
 8037334:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8037338:	bf06      	itte	eq
 803733a:	3501      	addeq	r5, #1
 803733c:	464b      	moveq	r3, r9
 803733e:	2344      	movne	r3, #68	@ 0x44
 8037340:	220a      	movs	r2, #10
 8037342:	a90b      	add	r1, sp, #44	@ 0x2c
 8037344:	4628      	mov	r0, r5
 8037346:	9305      	str	r3, [sp, #20]
 8037348:	f007 f950 	bl	803e5ec <strtoul>
 803734c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8037350:	9b05      	ldr	r3, [sp, #20]
 8037352:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8037356:	45a9      	cmp	r9, r5
 8037358:	d114      	bne.n	8037384 <_tzset_unlocked_r+0x3d8>
 803735a:	234d      	movs	r3, #77	@ 0x4d
 803735c:	f1bb 0f00 	cmp.w	fp, #0
 8037360:	d107      	bne.n	8037372 <_tzset_unlocked_r+0x3c6>
 8037362:	7223      	strb	r3, [r4, #8]
 8037364:	2103      	movs	r1, #3
 8037366:	2302      	movs	r3, #2
 8037368:	e9c4 1303 	strd	r1, r3, [r4, #12]
 803736c:	f8c4 b014 	str.w	fp, [r4, #20]
 8037370:	e767      	b.n	8037242 <_tzset_unlocked_r+0x296>
 8037372:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8037376:	220b      	movs	r2, #11
 8037378:	2301      	movs	r3, #1
 803737a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 803737e:	2300      	movs	r3, #0
 8037380:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8037382:	e75e      	b.n	8037242 <_tzset_unlocked_r+0x296>
 8037384:	b280      	uxth	r0, r0
 8037386:	723b      	strb	r3, [r7, #8]
 8037388:	6178      	str	r0, [r7, #20]
 803738a:	e75a      	b.n	8037242 <_tzset_unlocked_r+0x296>
 803738c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8037390:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8037394:	213c      	movs	r1, #60	@ 0x3c
 8037396:	fb01 3302 	mla	r3, r1, r2, r3
 803739a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 803739e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80373a2:	fb01 3302 	mla	r3, r1, r2, r3
 80373a6:	61bb      	str	r3, [r7, #24]
 80373a8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80373aa:	3728      	adds	r7, #40	@ 0x28
 80373ac:	444d      	add	r5, r9
 80373ae:	f1bb 0f00 	cmp.w	fp, #0
 80373b2:	d0bc      	beq.n	803732e <_tzset_unlocked_r+0x382>
 80373b4:	9b04      	ldr	r3, [sp, #16]
 80373b6:	6523      	str	r3, [r4, #80]	@ 0x50
 80373b8:	4b0b      	ldr	r3, [pc, #44]	@ (80373e8 <_tzset_unlocked_r+0x43c>)
 80373ba:	f8c8 3000 	str.w	r3, [r8]
 80373be:	6860      	ldr	r0, [r4, #4]
 80373c0:	4b07      	ldr	r3, [pc, #28]	@ (80373e0 <_tzset_unlocked_r+0x434>)
 80373c2:	62a6      	str	r6, [r4, #40]	@ 0x28
 80373c4:	f8c8 3004 	str.w	r3, [r8, #4]
 80373c8:	f7ff fd34 	bl	8036e34 <__tzcalc_limits>
 80373cc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80373ce:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80373d0:	f8ca 2000 	str.w	r2, [sl]
 80373d4:	1a9b      	subs	r3, r3, r2
 80373d6:	4a05      	ldr	r2, [pc, #20]	@ (80373ec <_tzset_unlocked_r+0x440>)
 80373d8:	bf18      	it	ne
 80373da:	2301      	movne	r3, #1
 80373dc:	6013      	str	r3, [r2, #0]
 80373de:	e613      	b.n	8037008 <_tzset_unlocked_r+0x5c>
 80373e0:	20018320 	.word	0x20018320
 80373e4:	08044dbe 	.word	0x08044dbe
 80373e8:	2001832c 	.word	0x2001832c
 80373ec:	2001833c 	.word	0x2001833c

080373f0 <__locale_mb_cur_max>:
 80373f0:	4b01      	ldr	r3, [pc, #4]	@ (80373f8 <__locale_mb_cur_max+0x8>)
 80373f2:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 80373f6:	4770      	bx	lr
 80373f8:	200002d4 	.word	0x200002d4

080373fc <_localeconv_r>:
 80373fc:	4800      	ldr	r0, [pc, #0]	@ (8037400 <_localeconv_r+0x4>)
 80373fe:	4770      	bx	lr
 8037400:	200003c4 	.word	0x200003c4

08037404 <_close_r>:
 8037404:	b538      	push	{r3, r4, r5, lr}
 8037406:	4d06      	ldr	r5, [pc, #24]	@ (8037420 <_close_r+0x1c>)
 8037408:	2300      	movs	r3, #0
 803740a:	4604      	mov	r4, r0
 803740c:	4608      	mov	r0, r1
 803740e:	602b      	str	r3, [r5, #0]
 8037410:	f7db fa92 	bl	8012938 <_close>
 8037414:	1c43      	adds	r3, r0, #1
 8037416:	d102      	bne.n	803741e <_close_r+0x1a>
 8037418:	682b      	ldr	r3, [r5, #0]
 803741a:	b103      	cbz	r3, 803741e <_close_r+0x1a>
 803741c:	6023      	str	r3, [r4, #0]
 803741e:	bd38      	pop	{r3, r4, r5, pc}
 8037420:	20018340 	.word	0x20018340

08037424 <_reclaim_reent>:
 8037424:	4b14      	ldr	r3, [pc, #80]	@ (8037478 <_reclaim_reent+0x54>)
 8037426:	681b      	ldr	r3, [r3, #0]
 8037428:	4283      	cmp	r3, r0
 803742a:	b570      	push	{r4, r5, r6, lr}
 803742c:	4604      	mov	r4, r0
 803742e:	d022      	beq.n	8037476 <_reclaim_reent+0x52>
 8037430:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8037432:	b153      	cbz	r3, 803744a <_reclaim_reent+0x26>
 8037434:	2500      	movs	r5, #0
 8037436:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8037438:	5959      	ldr	r1, [r3, r5]
 803743a:	b9b1      	cbnz	r1, 803746a <_reclaim_reent+0x46>
 803743c:	3504      	adds	r5, #4
 803743e:	2d80      	cmp	r5, #128	@ 0x80
 8037440:	d1f9      	bne.n	8037436 <_reclaim_reent+0x12>
 8037442:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8037444:	4620      	mov	r0, r4
 8037446:	f000 ff89 	bl	803835c <_free_r>
 803744a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 803744c:	b111      	cbz	r1, 8037454 <_reclaim_reent+0x30>
 803744e:	4620      	mov	r0, r4
 8037450:	f000 ff84 	bl	803835c <_free_r>
 8037454:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8037456:	b111      	cbz	r1, 803745e <_reclaim_reent+0x3a>
 8037458:	4620      	mov	r0, r4
 803745a:	f000 ff7f 	bl	803835c <_free_r>
 803745e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8037460:	b14b      	cbz	r3, 8037476 <_reclaim_reent+0x52>
 8037462:	4620      	mov	r0, r4
 8037464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8037468:	4718      	bx	r3
 803746a:	680e      	ldr	r6, [r1, #0]
 803746c:	4620      	mov	r0, r4
 803746e:	f000 ff75 	bl	803835c <_free_r>
 8037472:	4631      	mov	r1, r6
 8037474:	e7e1      	b.n	803743a <_reclaim_reent+0x16>
 8037476:	bd70      	pop	{r4, r5, r6, pc}
 8037478:	20000440 	.word	0x20000440

0803747c <_lseek_r>:
 803747c:	b538      	push	{r3, r4, r5, lr}
 803747e:	4d07      	ldr	r5, [pc, #28]	@ (803749c <_lseek_r+0x20>)
 8037480:	4604      	mov	r4, r0
 8037482:	4608      	mov	r0, r1
 8037484:	4611      	mov	r1, r2
 8037486:	2200      	movs	r2, #0
 8037488:	602a      	str	r2, [r5, #0]
 803748a:	461a      	mov	r2, r3
 803748c:	f7db fa7b 	bl	8012986 <_lseek>
 8037490:	1c43      	adds	r3, r0, #1
 8037492:	d102      	bne.n	803749a <_lseek_r+0x1e>
 8037494:	682b      	ldr	r3, [r5, #0]
 8037496:	b103      	cbz	r3, 803749a <_lseek_r+0x1e>
 8037498:	6023      	str	r3, [r4, #0]
 803749a:	bd38      	pop	{r3, r4, r5, pc}
 803749c:	20018340 	.word	0x20018340

080374a0 <_read_r>:
 80374a0:	b538      	push	{r3, r4, r5, lr}
 80374a2:	4d07      	ldr	r5, [pc, #28]	@ (80374c0 <_read_r+0x20>)
 80374a4:	4604      	mov	r4, r0
 80374a6:	4608      	mov	r0, r1
 80374a8:	4611      	mov	r1, r2
 80374aa:	2200      	movs	r2, #0
 80374ac:	602a      	str	r2, [r5, #0]
 80374ae:	461a      	mov	r2, r3
 80374b0:	f7db fa09 	bl	80128c6 <_read>
 80374b4:	1c43      	adds	r3, r0, #1
 80374b6:	d102      	bne.n	80374be <_read_r+0x1e>
 80374b8:	682b      	ldr	r3, [r5, #0]
 80374ba:	b103      	cbz	r3, 80374be <_read_r+0x1e>
 80374bc:	6023      	str	r3, [r4, #0]
 80374be:	bd38      	pop	{r3, r4, r5, pc}
 80374c0:	20018340 	.word	0x20018340

080374c4 <_write_r>:
 80374c4:	b538      	push	{r3, r4, r5, lr}
 80374c6:	4d07      	ldr	r5, [pc, #28]	@ (80374e4 <_write_r+0x20>)
 80374c8:	4604      	mov	r4, r0
 80374ca:	4608      	mov	r0, r1
 80374cc:	4611      	mov	r1, r2
 80374ce:	2200      	movs	r2, #0
 80374d0:	602a      	str	r2, [r5, #0]
 80374d2:	461a      	mov	r2, r3
 80374d4:	f7db fa14 	bl	8012900 <_write>
 80374d8:	1c43      	adds	r3, r0, #1
 80374da:	d102      	bne.n	80374e2 <_write_r+0x1e>
 80374dc:	682b      	ldr	r3, [r5, #0]
 80374de:	b103      	cbz	r3, 80374e2 <_write_r+0x1e>
 80374e0:	6023      	str	r3, [r4, #0]
 80374e2:	bd38      	pop	{r3, r4, r5, pc}
 80374e4:	20018340 	.word	0x20018340

080374e8 <__errno>:
 80374e8:	4b01      	ldr	r3, [pc, #4]	@ (80374f0 <__errno+0x8>)
 80374ea:	6818      	ldr	r0, [r3, #0]
 80374ec:	4770      	bx	lr
 80374ee:	bf00      	nop
 80374f0:	20000440 	.word	0x20000440

080374f4 <strcpy>:
 80374f4:	4603      	mov	r3, r0
 80374f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80374fa:	f803 2b01 	strb.w	r2, [r3], #1
 80374fe:	2a00      	cmp	r2, #0
 8037500:	d1f9      	bne.n	80374f6 <strcpy+0x2>
 8037502:	4770      	bx	lr

08037504 <__libc_init_array>:
 8037504:	b570      	push	{r4, r5, r6, lr}
 8037506:	4d0d      	ldr	r5, [pc, #52]	@ (803753c <__libc_init_array+0x38>)
 8037508:	4c0d      	ldr	r4, [pc, #52]	@ (8037540 <__libc_init_array+0x3c>)
 803750a:	1b64      	subs	r4, r4, r5
 803750c:	10a4      	asrs	r4, r4, #2
 803750e:	2600      	movs	r6, #0
 8037510:	42a6      	cmp	r6, r4
 8037512:	d109      	bne.n	8037528 <__libc_init_array+0x24>
 8037514:	4d0b      	ldr	r5, [pc, #44]	@ (8037544 <__libc_init_array+0x40>)
 8037516:	4c0c      	ldr	r4, [pc, #48]	@ (8037548 <__libc_init_array+0x44>)
 8037518:	f007 ff60 	bl	803f3dc <_init>
 803751c:	1b64      	subs	r4, r4, r5
 803751e:	10a4      	asrs	r4, r4, #2
 8037520:	2600      	movs	r6, #0
 8037522:	42a6      	cmp	r6, r4
 8037524:	d105      	bne.n	8037532 <__libc_init_array+0x2e>
 8037526:	bd70      	pop	{r4, r5, r6, pc}
 8037528:	f855 3b04 	ldr.w	r3, [r5], #4
 803752c:	4798      	blx	r3
 803752e:	3601      	adds	r6, #1
 8037530:	e7ee      	b.n	8037510 <__libc_init_array+0xc>
 8037532:	f855 3b04 	ldr.w	r3, [r5], #4
 8037536:	4798      	blx	r3
 8037538:	3601      	adds	r6, #1
 803753a:	e7f2      	b.n	8037522 <__libc_init_array+0x1e>
 803753c:	08045438 	.word	0x08045438
 8037540:	08045438 	.word	0x08045438
 8037544:	08045438 	.word	0x08045438
 8037548:	08045440 	.word	0x08045440

0803754c <__retarget_lock_init_recursive>:
 803754c:	4770      	bx	lr

0803754e <__retarget_lock_close_recursive>:
 803754e:	4770      	bx	lr

08037550 <__retarget_lock_acquire>:
 8037550:	4770      	bx	lr

08037552 <__retarget_lock_acquire_recursive>:
 8037552:	4770      	bx	lr

08037554 <__retarget_lock_release>:
 8037554:	4770      	bx	lr

08037556 <__retarget_lock_release_recursive>:
 8037556:	4770      	bx	lr

08037558 <memcpy>:
 8037558:	440a      	add	r2, r1
 803755a:	4291      	cmp	r1, r2
 803755c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8037560:	d100      	bne.n	8037564 <memcpy+0xc>
 8037562:	4770      	bx	lr
 8037564:	b510      	push	{r4, lr}
 8037566:	f811 4b01 	ldrb.w	r4, [r1], #1
 803756a:	f803 4f01 	strb.w	r4, [r3, #1]!
 803756e:	4291      	cmp	r1, r2
 8037570:	d1f9      	bne.n	8037566 <memcpy+0xe>
 8037572:	bd10      	pop	{r4, pc}

08037574 <_wcrtomb_r>:
 8037574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8037576:	4c09      	ldr	r4, [pc, #36]	@ (803759c <_wcrtomb_r+0x28>)
 8037578:	b085      	sub	sp, #20
 803757a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 803757e:	4605      	mov	r5, r0
 8037580:	461e      	mov	r6, r3
 8037582:	b909      	cbnz	r1, 8037588 <_wcrtomb_r+0x14>
 8037584:	460a      	mov	r2, r1
 8037586:	a901      	add	r1, sp, #4
 8037588:	47b8      	blx	r7
 803758a:	1c43      	adds	r3, r0, #1
 803758c:	bf01      	itttt	eq
 803758e:	2300      	moveq	r3, #0
 8037590:	6033      	streq	r3, [r6, #0]
 8037592:	238a      	moveq	r3, #138	@ 0x8a
 8037594:	602b      	streq	r3, [r5, #0]
 8037596:	b005      	add	sp, #20
 8037598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803759a:	bf00      	nop
 803759c:	200002d4 	.word	0x200002d4

080375a0 <frexp>:
 80375a0:	b570      	push	{r4, r5, r6, lr}
 80375a2:	2100      	movs	r1, #0
 80375a4:	ec55 4b10 	vmov	r4, r5, d0
 80375a8:	6001      	str	r1, [r0, #0]
 80375aa:	4915      	ldr	r1, [pc, #84]	@ (8037600 <frexp+0x60>)
 80375ac:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80375b0:	428a      	cmp	r2, r1
 80375b2:	4606      	mov	r6, r0
 80375b4:	462b      	mov	r3, r5
 80375b6:	d820      	bhi.n	80375fa <frexp+0x5a>
 80375b8:	4621      	mov	r1, r4
 80375ba:	4311      	orrs	r1, r2
 80375bc:	d01d      	beq.n	80375fa <frexp+0x5a>
 80375be:	4911      	ldr	r1, [pc, #68]	@ (8037604 <frexp+0x64>)
 80375c0:	4029      	ands	r1, r5
 80375c2:	b961      	cbnz	r1, 80375de <frexp+0x3e>
 80375c4:	4b10      	ldr	r3, [pc, #64]	@ (8037608 <frexp+0x68>)
 80375c6:	2200      	movs	r2, #0
 80375c8:	4620      	mov	r0, r4
 80375ca:	4629      	mov	r1, r5
 80375cc:	f7d9 f82c 	bl	8010628 <__aeabi_dmul>
 80375d0:	460b      	mov	r3, r1
 80375d2:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80375d6:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 80375da:	4604      	mov	r4, r0
 80375dc:	6031      	str	r1, [r6, #0]
 80375de:	6831      	ldr	r1, [r6, #0]
 80375e0:	1512      	asrs	r2, r2, #20
 80375e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80375e6:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 80375ea:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80375ee:	4411      	add	r1, r2
 80375f0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80375f4:	6031      	str	r1, [r6, #0]
 80375f6:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 80375fa:	ec45 4b10 	vmov	d0, r4, r5
 80375fe:	bd70      	pop	{r4, r5, r6, pc}
 8037600:	7fefffff 	.word	0x7fefffff
 8037604:	7ff00000 	.word	0x7ff00000
 8037608:	43500000 	.word	0x43500000

0803760c <register_fini>:
 803760c:	4b02      	ldr	r3, [pc, #8]	@ (8037618 <register_fini+0xc>)
 803760e:	b113      	cbz	r3, 8037616 <register_fini+0xa>
 8037610:	4802      	ldr	r0, [pc, #8]	@ (803761c <register_fini+0x10>)
 8037612:	f000 b810 	b.w	8037636 <atexit>
 8037616:	4770      	bx	lr
 8037618:	00000000 	.word	0x00000000
 803761c:	0803ea9d 	.word	0x0803ea9d

08037620 <abort>:
 8037620:	b508      	push	{r3, lr}
 8037622:	2006      	movs	r0, #6
 8037624:	f007 f8a6 	bl	803e774 <raise>
 8037628:	2001      	movs	r0, #1
 803762a:	f7db f941 	bl	80128b0 <_exit>

0803762e <abs>:
 803762e:	2800      	cmp	r0, #0
 8037630:	bfb8      	it	lt
 8037632:	4240      	neglt	r0, r0
 8037634:	4770      	bx	lr

08037636 <atexit>:
 8037636:	2300      	movs	r3, #0
 8037638:	4601      	mov	r1, r0
 803763a:	461a      	mov	r2, r3
 803763c:	4618      	mov	r0, r3
 803763e:	f007 bb01 	b.w	803ec44 <__register_exitproc>

08037642 <quorem>:
 8037642:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8037646:	6903      	ldr	r3, [r0, #16]
 8037648:	690c      	ldr	r4, [r1, #16]
 803764a:	42a3      	cmp	r3, r4
 803764c:	4607      	mov	r7, r0
 803764e:	db7e      	blt.n	803774e <quorem+0x10c>
 8037650:	3c01      	subs	r4, #1
 8037652:	f101 0814 	add.w	r8, r1, #20
 8037656:	00a3      	lsls	r3, r4, #2
 8037658:	f100 0514 	add.w	r5, r0, #20
 803765c:	9300      	str	r3, [sp, #0]
 803765e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8037662:	9301      	str	r3, [sp, #4]
 8037664:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8037668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803766c:	3301      	adds	r3, #1
 803766e:	429a      	cmp	r2, r3
 8037670:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8037674:	fbb2 f6f3 	udiv	r6, r2, r3
 8037678:	d32e      	bcc.n	80376d8 <quorem+0x96>
 803767a:	f04f 0a00 	mov.w	sl, #0
 803767e:	46c4      	mov	ip, r8
 8037680:	46ae      	mov	lr, r5
 8037682:	46d3      	mov	fp, sl
 8037684:	f85c 3b04 	ldr.w	r3, [ip], #4
 8037688:	b298      	uxth	r0, r3
 803768a:	fb06 a000 	mla	r0, r6, r0, sl
 803768e:	0c02      	lsrs	r2, r0, #16
 8037690:	0c1b      	lsrs	r3, r3, #16
 8037692:	fb06 2303 	mla	r3, r6, r3, r2
 8037696:	f8de 2000 	ldr.w	r2, [lr]
 803769a:	b280      	uxth	r0, r0
 803769c:	b292      	uxth	r2, r2
 803769e:	1a12      	subs	r2, r2, r0
 80376a0:	445a      	add	r2, fp
 80376a2:	f8de 0000 	ldr.w	r0, [lr]
 80376a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80376aa:	b29b      	uxth	r3, r3
 80376ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80376b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80376b4:	b292      	uxth	r2, r2
 80376b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80376ba:	45e1      	cmp	r9, ip
 80376bc:	f84e 2b04 	str.w	r2, [lr], #4
 80376c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80376c4:	d2de      	bcs.n	8037684 <quorem+0x42>
 80376c6:	9b00      	ldr	r3, [sp, #0]
 80376c8:	58eb      	ldr	r3, [r5, r3]
 80376ca:	b92b      	cbnz	r3, 80376d8 <quorem+0x96>
 80376cc:	9b01      	ldr	r3, [sp, #4]
 80376ce:	3b04      	subs	r3, #4
 80376d0:	429d      	cmp	r5, r3
 80376d2:	461a      	mov	r2, r3
 80376d4:	d32f      	bcc.n	8037736 <quorem+0xf4>
 80376d6:	613c      	str	r4, [r7, #16]
 80376d8:	4638      	mov	r0, r7
 80376da:	f005 fce3 	bl	803d0a4 <__mcmp>
 80376de:	2800      	cmp	r0, #0
 80376e0:	db25      	blt.n	803772e <quorem+0xec>
 80376e2:	4629      	mov	r1, r5
 80376e4:	2000      	movs	r0, #0
 80376e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80376ea:	f8d1 c000 	ldr.w	ip, [r1]
 80376ee:	fa1f fe82 	uxth.w	lr, r2
 80376f2:	fa1f f38c 	uxth.w	r3, ip
 80376f6:	eba3 030e 	sub.w	r3, r3, lr
 80376fa:	4403      	add	r3, r0
 80376fc:	0c12      	lsrs	r2, r2, #16
 80376fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8037702:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8037706:	b29b      	uxth	r3, r3
 8037708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 803770c:	45c1      	cmp	r9, r8
 803770e:	f841 3b04 	str.w	r3, [r1], #4
 8037712:	ea4f 4022 	mov.w	r0, r2, asr #16
 8037716:	d2e6      	bcs.n	80376e6 <quorem+0xa4>
 8037718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803771c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8037720:	b922      	cbnz	r2, 803772c <quorem+0xea>
 8037722:	3b04      	subs	r3, #4
 8037724:	429d      	cmp	r5, r3
 8037726:	461a      	mov	r2, r3
 8037728:	d30b      	bcc.n	8037742 <quorem+0x100>
 803772a:	613c      	str	r4, [r7, #16]
 803772c:	3601      	adds	r6, #1
 803772e:	4630      	mov	r0, r6
 8037730:	b003      	add	sp, #12
 8037732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8037736:	6812      	ldr	r2, [r2, #0]
 8037738:	3b04      	subs	r3, #4
 803773a:	2a00      	cmp	r2, #0
 803773c:	d1cb      	bne.n	80376d6 <quorem+0x94>
 803773e:	3c01      	subs	r4, #1
 8037740:	e7c6      	b.n	80376d0 <quorem+0x8e>
 8037742:	6812      	ldr	r2, [r2, #0]
 8037744:	3b04      	subs	r3, #4
 8037746:	2a00      	cmp	r2, #0
 8037748:	d1ef      	bne.n	803772a <quorem+0xe8>
 803774a:	3c01      	subs	r4, #1
 803774c:	e7ea      	b.n	8037724 <quorem+0xe2>
 803774e:	2000      	movs	r0, #0
 8037750:	e7ee      	b.n	8037730 <quorem+0xee>
 8037752:	0000      	movs	r0, r0
 8037754:	0000      	movs	r0, r0
	...

08037758 <_dtoa_r>:
 8037758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803775c:	b099      	sub	sp, #100	@ 0x64
 803775e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8037762:	9109      	str	r1, [sp, #36]	@ 0x24
 8037764:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8037766:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8037768:	920e      	str	r2, [sp, #56]	@ 0x38
 803776a:	ec55 4b10 	vmov	r4, r5, d0
 803776e:	4683      	mov	fp, r0
 8037770:	9313      	str	r3, [sp, #76]	@ 0x4c
 8037772:	b149      	cbz	r1, 8037788 <_dtoa_r+0x30>
 8037774:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8037776:	604a      	str	r2, [r1, #4]
 8037778:	2301      	movs	r3, #1
 803777a:	4093      	lsls	r3, r2
 803777c:	608b      	str	r3, [r1, #8]
 803777e:	f005 fa40 	bl	803cc02 <_Bfree>
 8037782:	2300      	movs	r3, #0
 8037784:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8037788:	1e2b      	subs	r3, r5, #0
 803778a:	bfb9      	ittee	lt
 803778c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8037790:	9303      	strlt	r3, [sp, #12]
 8037792:	2300      	movge	r3, #0
 8037794:	6033      	strge	r3, [r6, #0]
 8037796:	9f03      	ldr	r7, [sp, #12]
 8037798:	4b97      	ldr	r3, [pc, #604]	@ (80379f8 <_dtoa_r+0x2a0>)
 803779a:	bfbc      	itt	lt
 803779c:	2201      	movlt	r2, #1
 803779e:	6032      	strlt	r2, [r6, #0]
 80377a0:	43bb      	bics	r3, r7
 80377a2:	d114      	bne.n	80377ce <_dtoa_r+0x76>
 80377a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80377a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80377aa:	6013      	str	r3, [r2, #0]
 80377ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80377b0:	4323      	orrs	r3, r4
 80377b2:	f000 854c 	beq.w	803824e <_dtoa_r+0xaf6>
 80377b6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80377b8:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8037a10 <_dtoa_r+0x2b8>
 80377bc:	b11b      	cbz	r3, 80377c6 <_dtoa_r+0x6e>
 80377be:	f10a 0303 	add.w	r3, sl, #3
 80377c2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80377c4:	6013      	str	r3, [r2, #0]
 80377c6:	4650      	mov	r0, sl
 80377c8:	b019      	add	sp, #100	@ 0x64
 80377ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80377ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80377d2:	2200      	movs	r2, #0
 80377d4:	ec51 0b17 	vmov	r0, r1, d7
 80377d8:	2300      	movs	r3, #0
 80377da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80377de:	f7d9 f98b 	bl	8010af8 <__aeabi_dcmpeq>
 80377e2:	4680      	mov	r8, r0
 80377e4:	b150      	cbz	r0, 80377fc <_dtoa_r+0xa4>
 80377e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80377e8:	2301      	movs	r3, #1
 80377ea:	6013      	str	r3, [r2, #0]
 80377ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80377ee:	b113      	cbz	r3, 80377f6 <_dtoa_r+0x9e>
 80377f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80377f2:	4b82      	ldr	r3, [pc, #520]	@ (80379fc <_dtoa_r+0x2a4>)
 80377f4:	6013      	str	r3, [r2, #0]
 80377f6:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8037a14 <_dtoa_r+0x2bc>
 80377fa:	e7e4      	b.n	80377c6 <_dtoa_r+0x6e>
 80377fc:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8037800:	aa16      	add	r2, sp, #88	@ 0x58
 8037802:	a917      	add	r1, sp, #92	@ 0x5c
 8037804:	4658      	mov	r0, fp
 8037806:	f005 fd6d 	bl	803d2e4 <__d2b>
 803780a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 803780e:	4681      	mov	r9, r0
 8037810:	2e00      	cmp	r6, #0
 8037812:	d077      	beq.n	8037904 <_dtoa_r+0x1ac>
 8037814:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8037816:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 803781a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803781e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8037822:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8037826:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 803782a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 803782e:	4619      	mov	r1, r3
 8037830:	2200      	movs	r2, #0
 8037832:	4b73      	ldr	r3, [pc, #460]	@ (8037a00 <_dtoa_r+0x2a8>)
 8037834:	f7d8 fd40 	bl	80102b8 <__aeabi_dsub>
 8037838:	a369      	add	r3, pc, #420	@ (adr r3, 80379e0 <_dtoa_r+0x288>)
 803783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803783e:	f7d8 fef3 	bl	8010628 <__aeabi_dmul>
 8037842:	a369      	add	r3, pc, #420	@ (adr r3, 80379e8 <_dtoa_r+0x290>)
 8037844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8037848:	f7d8 fd38 	bl	80102bc <__adddf3>
 803784c:	4604      	mov	r4, r0
 803784e:	4630      	mov	r0, r6
 8037850:	460d      	mov	r5, r1
 8037852:	f7d8 fe7f 	bl	8010554 <__aeabi_i2d>
 8037856:	a366      	add	r3, pc, #408	@ (adr r3, 80379f0 <_dtoa_r+0x298>)
 8037858:	e9d3 2300 	ldrd	r2, r3, [r3]
 803785c:	f7d8 fee4 	bl	8010628 <__aeabi_dmul>
 8037860:	4602      	mov	r2, r0
 8037862:	460b      	mov	r3, r1
 8037864:	4620      	mov	r0, r4
 8037866:	4629      	mov	r1, r5
 8037868:	f7d8 fd28 	bl	80102bc <__adddf3>
 803786c:	4604      	mov	r4, r0
 803786e:	460d      	mov	r5, r1
 8037870:	f7d9 f98a 	bl	8010b88 <__aeabi_d2iz>
 8037874:	2200      	movs	r2, #0
 8037876:	4607      	mov	r7, r0
 8037878:	2300      	movs	r3, #0
 803787a:	4620      	mov	r0, r4
 803787c:	4629      	mov	r1, r5
 803787e:	f7d9 f945 	bl	8010b0c <__aeabi_dcmplt>
 8037882:	b140      	cbz	r0, 8037896 <_dtoa_r+0x13e>
 8037884:	4638      	mov	r0, r7
 8037886:	f7d8 fe65 	bl	8010554 <__aeabi_i2d>
 803788a:	4622      	mov	r2, r4
 803788c:	462b      	mov	r3, r5
 803788e:	f7d9 f933 	bl	8010af8 <__aeabi_dcmpeq>
 8037892:	b900      	cbnz	r0, 8037896 <_dtoa_r+0x13e>
 8037894:	3f01      	subs	r7, #1
 8037896:	2f16      	cmp	r7, #22
 8037898:	d851      	bhi.n	803793e <_dtoa_r+0x1e6>
 803789a:	4b5a      	ldr	r3, [pc, #360]	@ (8037a04 <_dtoa_r+0x2ac>)
 803789c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80378a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80378a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80378a8:	f7d9 f930 	bl	8010b0c <__aeabi_dcmplt>
 80378ac:	2800      	cmp	r0, #0
 80378ae:	d048      	beq.n	8037942 <_dtoa_r+0x1ea>
 80378b0:	3f01      	subs	r7, #1
 80378b2:	2300      	movs	r3, #0
 80378b4:	9312      	str	r3, [sp, #72]	@ 0x48
 80378b6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80378b8:	1b9b      	subs	r3, r3, r6
 80378ba:	1e5a      	subs	r2, r3, #1
 80378bc:	bf44      	itt	mi
 80378be:	f1c3 0801 	rsbmi	r8, r3, #1
 80378c2:	2300      	movmi	r3, #0
 80378c4:	9208      	str	r2, [sp, #32]
 80378c6:	bf54      	ite	pl
 80378c8:	f04f 0800 	movpl.w	r8, #0
 80378cc:	9308      	strmi	r3, [sp, #32]
 80378ce:	2f00      	cmp	r7, #0
 80378d0:	db39      	blt.n	8037946 <_dtoa_r+0x1ee>
 80378d2:	9b08      	ldr	r3, [sp, #32]
 80378d4:	970f      	str	r7, [sp, #60]	@ 0x3c
 80378d6:	443b      	add	r3, r7
 80378d8:	9308      	str	r3, [sp, #32]
 80378da:	2300      	movs	r3, #0
 80378dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80378de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80378e0:	2b09      	cmp	r3, #9
 80378e2:	d865      	bhi.n	80379b0 <_dtoa_r+0x258>
 80378e4:	2b05      	cmp	r3, #5
 80378e6:	bfc4      	itt	gt
 80378e8:	3b04      	subgt	r3, #4
 80378ea:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80378ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80378ee:	f1a3 0302 	sub.w	r3, r3, #2
 80378f2:	bfcc      	ite	gt
 80378f4:	2400      	movgt	r4, #0
 80378f6:	2401      	movle	r4, #1
 80378f8:	2b03      	cmp	r3, #3
 80378fa:	d864      	bhi.n	80379c6 <_dtoa_r+0x26e>
 80378fc:	e8df f003 	tbb	[pc, r3]
 8037900:	5635372a 	.word	0x5635372a
 8037904:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8037908:	441e      	add	r6, r3
 803790a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 803790e:	2b20      	cmp	r3, #32
 8037910:	bfc1      	itttt	gt
 8037912:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8037916:	409f      	lslgt	r7, r3
 8037918:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 803791c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8037920:	bfd6      	itet	le
 8037922:	f1c3 0320 	rsble	r3, r3, #32
 8037926:	ea47 0003 	orrgt.w	r0, r7, r3
 803792a:	fa04 f003 	lslle.w	r0, r4, r3
 803792e:	f7d8 fe01 	bl	8010534 <__aeabi_ui2d>
 8037932:	2201      	movs	r2, #1
 8037934:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8037938:	3e01      	subs	r6, #1
 803793a:	9214      	str	r2, [sp, #80]	@ 0x50
 803793c:	e777      	b.n	803782e <_dtoa_r+0xd6>
 803793e:	2301      	movs	r3, #1
 8037940:	e7b8      	b.n	80378b4 <_dtoa_r+0x15c>
 8037942:	9012      	str	r0, [sp, #72]	@ 0x48
 8037944:	e7b7      	b.n	80378b6 <_dtoa_r+0x15e>
 8037946:	427b      	negs	r3, r7
 8037948:	930a      	str	r3, [sp, #40]	@ 0x28
 803794a:	2300      	movs	r3, #0
 803794c:	eba8 0807 	sub.w	r8, r8, r7
 8037950:	930f      	str	r3, [sp, #60]	@ 0x3c
 8037952:	e7c4      	b.n	80378de <_dtoa_r+0x186>
 8037954:	2300      	movs	r3, #0
 8037956:	930b      	str	r3, [sp, #44]	@ 0x2c
 8037958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803795a:	2b00      	cmp	r3, #0
 803795c:	dc36      	bgt.n	80379cc <_dtoa_r+0x274>
 803795e:	2301      	movs	r3, #1
 8037960:	9300      	str	r3, [sp, #0]
 8037962:	9307      	str	r3, [sp, #28]
 8037964:	461a      	mov	r2, r3
 8037966:	920e      	str	r2, [sp, #56]	@ 0x38
 8037968:	e00b      	b.n	8037982 <_dtoa_r+0x22a>
 803796a:	2301      	movs	r3, #1
 803796c:	e7f3      	b.n	8037956 <_dtoa_r+0x1fe>
 803796e:	2300      	movs	r3, #0
 8037970:	930b      	str	r3, [sp, #44]	@ 0x2c
 8037972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8037974:	18fb      	adds	r3, r7, r3
 8037976:	9300      	str	r3, [sp, #0]
 8037978:	3301      	adds	r3, #1
 803797a:	2b01      	cmp	r3, #1
 803797c:	9307      	str	r3, [sp, #28]
 803797e:	bfb8      	it	lt
 8037980:	2301      	movlt	r3, #1
 8037982:	2100      	movs	r1, #0
 8037984:	2204      	movs	r2, #4
 8037986:	f102 0014 	add.w	r0, r2, #20
 803798a:	4298      	cmp	r0, r3
 803798c:	d922      	bls.n	80379d4 <_dtoa_r+0x27c>
 803798e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 8037992:	4658      	mov	r0, fp
 8037994:	f005 f910 	bl	803cbb8 <_Balloc>
 8037998:	4682      	mov	sl, r0
 803799a:	2800      	cmp	r0, #0
 803799c:	d13c      	bne.n	8037a18 <_dtoa_r+0x2c0>
 803799e:	4b1a      	ldr	r3, [pc, #104]	@ (8037a08 <_dtoa_r+0x2b0>)
 80379a0:	4602      	mov	r2, r0
 80379a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80379a6:	4819      	ldr	r0, [pc, #100]	@ (8037a0c <_dtoa_r+0x2b4>)
 80379a8:	f7fb fe46 	bl	8033638 <__assert_func>
 80379ac:	2301      	movs	r3, #1
 80379ae:	e7df      	b.n	8037970 <_dtoa_r+0x218>
 80379b0:	2401      	movs	r4, #1
 80379b2:	2300      	movs	r3, #0
 80379b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80379b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80379b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80379bc:	9300      	str	r3, [sp, #0]
 80379be:	9307      	str	r3, [sp, #28]
 80379c0:	2200      	movs	r2, #0
 80379c2:	2312      	movs	r3, #18
 80379c4:	e7cf      	b.n	8037966 <_dtoa_r+0x20e>
 80379c6:	2301      	movs	r3, #1
 80379c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80379ca:	e7f5      	b.n	80379b8 <_dtoa_r+0x260>
 80379cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80379ce:	9300      	str	r3, [sp, #0]
 80379d0:	9307      	str	r3, [sp, #28]
 80379d2:	e7d6      	b.n	8037982 <_dtoa_r+0x22a>
 80379d4:	3101      	adds	r1, #1
 80379d6:	0052      	lsls	r2, r2, #1
 80379d8:	e7d5      	b.n	8037986 <_dtoa_r+0x22e>
 80379da:	bf00      	nop
 80379dc:	f3af 8000 	nop.w
 80379e0:	636f4361 	.word	0x636f4361
 80379e4:	3fd287a7 	.word	0x3fd287a7
 80379e8:	8b60c8b3 	.word	0x8b60c8b3
 80379ec:	3fc68a28 	.word	0x3fc68a28
 80379f0:	509f79fb 	.word	0x509f79fb
 80379f4:	3fd34413 	.word	0x3fd34413
 80379f8:	7ff00000 	.word	0x7ff00000
 80379fc:	08044c9b 	.word	0x08044c9b
 8037a00:	3ff80000 	.word	0x3ff80000
 8037a04:	080452b8 	.word	0x080452b8
 8037a08:	08045132 	.word	0x08045132
 8037a0c:	08045143 	.word	0x08045143
 8037a10:	0804512e 	.word	0x0804512e
 8037a14:	08044c9a 	.word	0x08044c9a
 8037a18:	9b07      	ldr	r3, [sp, #28]
 8037a1a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 8037a1e:	2b0e      	cmp	r3, #14
 8037a20:	f200 80a4 	bhi.w	8037b6c <_dtoa_r+0x414>
 8037a24:	2c00      	cmp	r4, #0
 8037a26:	f000 80a1 	beq.w	8037b6c <_dtoa_r+0x414>
 8037a2a:	2f00      	cmp	r7, #0
 8037a2c:	dd33      	ble.n	8037a96 <_dtoa_r+0x33e>
 8037a2e:	4bae      	ldr	r3, [pc, #696]	@ (8037ce8 <_dtoa_r+0x590>)
 8037a30:	f007 020f 	and.w	r2, r7, #15
 8037a34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8037a38:	ed93 7b00 	vldr	d7, [r3]
 8037a3c:	05f8      	lsls	r0, r7, #23
 8037a3e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8037a42:	ea4f 1427 	mov.w	r4, r7, asr #4
 8037a46:	d516      	bpl.n	8037a76 <_dtoa_r+0x31e>
 8037a48:	4ba8      	ldr	r3, [pc, #672]	@ (8037cec <_dtoa_r+0x594>)
 8037a4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8037a4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8037a52:	f7d8 ff13 	bl	801087c <__aeabi_ddiv>
 8037a56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8037a5a:	f004 040f 	and.w	r4, r4, #15
 8037a5e:	2603      	movs	r6, #3
 8037a60:	4da2      	ldr	r5, [pc, #648]	@ (8037cec <_dtoa_r+0x594>)
 8037a62:	b954      	cbnz	r4, 8037a7a <_dtoa_r+0x322>
 8037a64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8037a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037a6c:	f7d8 ff06 	bl	801087c <__aeabi_ddiv>
 8037a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8037a74:	e028      	b.n	8037ac8 <_dtoa_r+0x370>
 8037a76:	2602      	movs	r6, #2
 8037a78:	e7f2      	b.n	8037a60 <_dtoa_r+0x308>
 8037a7a:	07e1      	lsls	r1, r4, #31
 8037a7c:	d508      	bpl.n	8037a90 <_dtoa_r+0x338>
 8037a7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8037a82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8037a86:	f7d8 fdcf 	bl	8010628 <__aeabi_dmul>
 8037a8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8037a8e:	3601      	adds	r6, #1
 8037a90:	1064      	asrs	r4, r4, #1
 8037a92:	3508      	adds	r5, #8
 8037a94:	e7e5      	b.n	8037a62 <_dtoa_r+0x30a>
 8037a96:	f000 80d2 	beq.w	8037c3e <_dtoa_r+0x4e6>
 8037a9a:	427c      	negs	r4, r7
 8037a9c:	4b92      	ldr	r3, [pc, #584]	@ (8037ce8 <_dtoa_r+0x590>)
 8037a9e:	4d93      	ldr	r5, [pc, #588]	@ (8037cec <_dtoa_r+0x594>)
 8037aa0:	f004 020f 	and.w	r2, r4, #15
 8037aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8037aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8037aac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8037ab0:	f7d8 fdba 	bl	8010628 <__aeabi_dmul>
 8037ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8037ab8:	1124      	asrs	r4, r4, #4
 8037aba:	2300      	movs	r3, #0
 8037abc:	2602      	movs	r6, #2
 8037abe:	2c00      	cmp	r4, #0
 8037ac0:	f040 80b2 	bne.w	8037c28 <_dtoa_r+0x4d0>
 8037ac4:	2b00      	cmp	r3, #0
 8037ac6:	d1d3      	bne.n	8037a70 <_dtoa_r+0x318>
 8037ac8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8037aca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8037ace:	2b00      	cmp	r3, #0
 8037ad0:	f000 80b7 	beq.w	8037c42 <_dtoa_r+0x4ea>
 8037ad4:	4b86      	ldr	r3, [pc, #536]	@ (8037cf0 <_dtoa_r+0x598>)
 8037ad6:	2200      	movs	r2, #0
 8037ad8:	4620      	mov	r0, r4
 8037ada:	4629      	mov	r1, r5
 8037adc:	f7d9 f816 	bl	8010b0c <__aeabi_dcmplt>
 8037ae0:	2800      	cmp	r0, #0
 8037ae2:	f000 80ae 	beq.w	8037c42 <_dtoa_r+0x4ea>
 8037ae6:	9b07      	ldr	r3, [sp, #28]
 8037ae8:	2b00      	cmp	r3, #0
 8037aea:	f000 80aa 	beq.w	8037c42 <_dtoa_r+0x4ea>
 8037aee:	9b00      	ldr	r3, [sp, #0]
 8037af0:	2b00      	cmp	r3, #0
 8037af2:	dd37      	ble.n	8037b64 <_dtoa_r+0x40c>
 8037af4:	1e7b      	subs	r3, r7, #1
 8037af6:	9304      	str	r3, [sp, #16]
 8037af8:	4620      	mov	r0, r4
 8037afa:	4b7e      	ldr	r3, [pc, #504]	@ (8037cf4 <_dtoa_r+0x59c>)
 8037afc:	2200      	movs	r2, #0
 8037afe:	4629      	mov	r1, r5
 8037b00:	f7d8 fd92 	bl	8010628 <__aeabi_dmul>
 8037b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8037b08:	9c00      	ldr	r4, [sp, #0]
 8037b0a:	3601      	adds	r6, #1
 8037b0c:	4630      	mov	r0, r6
 8037b0e:	f7d8 fd21 	bl	8010554 <__aeabi_i2d>
 8037b12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8037b16:	f7d8 fd87 	bl	8010628 <__aeabi_dmul>
 8037b1a:	4b77      	ldr	r3, [pc, #476]	@ (8037cf8 <_dtoa_r+0x5a0>)
 8037b1c:	2200      	movs	r2, #0
 8037b1e:	f7d8 fbcd 	bl	80102bc <__adddf3>
 8037b22:	4605      	mov	r5, r0
 8037b24:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8037b28:	2c00      	cmp	r4, #0
 8037b2a:	f040 808d 	bne.w	8037c48 <_dtoa_r+0x4f0>
 8037b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037b32:	4b72      	ldr	r3, [pc, #456]	@ (8037cfc <_dtoa_r+0x5a4>)
 8037b34:	2200      	movs	r2, #0
 8037b36:	f7d8 fbbf 	bl	80102b8 <__aeabi_dsub>
 8037b3a:	4602      	mov	r2, r0
 8037b3c:	460b      	mov	r3, r1
 8037b3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8037b42:	462a      	mov	r2, r5
 8037b44:	4633      	mov	r3, r6
 8037b46:	f7d8 ffff 	bl	8010b48 <__aeabi_dcmpgt>
 8037b4a:	2800      	cmp	r0, #0
 8037b4c:	f040 828c 	bne.w	8038068 <_dtoa_r+0x910>
 8037b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037b54:	462a      	mov	r2, r5
 8037b56:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8037b5a:	f7d8 ffd7 	bl	8010b0c <__aeabi_dcmplt>
 8037b5e:	2800      	cmp	r0, #0
 8037b60:	f040 8129 	bne.w	8037db6 <_dtoa_r+0x65e>
 8037b64:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8037b68:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8037b6c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8037b6e:	2b00      	cmp	r3, #0
 8037b70:	f2c0 815b 	blt.w	8037e2a <_dtoa_r+0x6d2>
 8037b74:	2f0e      	cmp	r7, #14
 8037b76:	f300 8158 	bgt.w	8037e2a <_dtoa_r+0x6d2>
 8037b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8037ce8 <_dtoa_r+0x590>)
 8037b7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8037b80:	ed93 7b00 	vldr	d7, [r3]
 8037b84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8037b86:	2b00      	cmp	r3, #0
 8037b88:	ed8d 7b00 	vstr	d7, [sp]
 8037b8c:	da03      	bge.n	8037b96 <_dtoa_r+0x43e>
 8037b8e:	9b07      	ldr	r3, [sp, #28]
 8037b90:	2b00      	cmp	r3, #0
 8037b92:	f340 8102 	ble.w	8037d9a <_dtoa_r+0x642>
 8037b96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8037b9a:	4656      	mov	r6, sl
 8037b9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8037ba0:	4620      	mov	r0, r4
 8037ba2:	4629      	mov	r1, r5
 8037ba4:	f7d8 fe6a 	bl	801087c <__aeabi_ddiv>
 8037ba8:	f7d8 ffee 	bl	8010b88 <__aeabi_d2iz>
 8037bac:	4680      	mov	r8, r0
 8037bae:	f7d8 fcd1 	bl	8010554 <__aeabi_i2d>
 8037bb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8037bb6:	f7d8 fd37 	bl	8010628 <__aeabi_dmul>
 8037bba:	4602      	mov	r2, r0
 8037bbc:	460b      	mov	r3, r1
 8037bbe:	4620      	mov	r0, r4
 8037bc0:	4629      	mov	r1, r5
 8037bc2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8037bc6:	f7d8 fb77 	bl	80102b8 <__aeabi_dsub>
 8037bca:	f806 4b01 	strb.w	r4, [r6], #1
 8037bce:	9d07      	ldr	r5, [sp, #28]
 8037bd0:	eba6 040a 	sub.w	r4, r6, sl
 8037bd4:	42a5      	cmp	r5, r4
 8037bd6:	4602      	mov	r2, r0
 8037bd8:	460b      	mov	r3, r1
 8037bda:	f040 8118 	bne.w	8037e0e <_dtoa_r+0x6b6>
 8037bde:	f7d8 fb6d 	bl	80102bc <__adddf3>
 8037be2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8037be6:	4604      	mov	r4, r0
 8037be8:	460d      	mov	r5, r1
 8037bea:	f7d8 ffad 	bl	8010b48 <__aeabi_dcmpgt>
 8037bee:	2800      	cmp	r0, #0
 8037bf0:	f040 80fa 	bne.w	8037de8 <_dtoa_r+0x690>
 8037bf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8037bf8:	4620      	mov	r0, r4
 8037bfa:	4629      	mov	r1, r5
 8037bfc:	f7d8 ff7c 	bl	8010af8 <__aeabi_dcmpeq>
 8037c00:	b118      	cbz	r0, 8037c0a <_dtoa_r+0x4b2>
 8037c02:	f018 0f01 	tst.w	r8, #1
 8037c06:	f040 80ef 	bne.w	8037de8 <_dtoa_r+0x690>
 8037c0a:	4649      	mov	r1, r9
 8037c0c:	4658      	mov	r0, fp
 8037c0e:	f004 fff8 	bl	803cc02 <_Bfree>
 8037c12:	2300      	movs	r3, #0
 8037c14:	7033      	strb	r3, [r6, #0]
 8037c16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8037c18:	3701      	adds	r7, #1
 8037c1a:	601f      	str	r7, [r3, #0]
 8037c1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8037c1e:	2b00      	cmp	r3, #0
 8037c20:	f43f add1 	beq.w	80377c6 <_dtoa_r+0x6e>
 8037c24:	601e      	str	r6, [r3, #0]
 8037c26:	e5ce      	b.n	80377c6 <_dtoa_r+0x6e>
 8037c28:	07e2      	lsls	r2, r4, #31
 8037c2a:	d505      	bpl.n	8037c38 <_dtoa_r+0x4e0>
 8037c2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8037c30:	f7d8 fcfa 	bl	8010628 <__aeabi_dmul>
 8037c34:	3601      	adds	r6, #1
 8037c36:	2301      	movs	r3, #1
 8037c38:	1064      	asrs	r4, r4, #1
 8037c3a:	3508      	adds	r5, #8
 8037c3c:	e73f      	b.n	8037abe <_dtoa_r+0x366>
 8037c3e:	2602      	movs	r6, #2
 8037c40:	e742      	b.n	8037ac8 <_dtoa_r+0x370>
 8037c42:	9c07      	ldr	r4, [sp, #28]
 8037c44:	9704      	str	r7, [sp, #16]
 8037c46:	e761      	b.n	8037b0c <_dtoa_r+0x3b4>
 8037c48:	4b27      	ldr	r3, [pc, #156]	@ (8037ce8 <_dtoa_r+0x590>)
 8037c4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8037c4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8037c50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8037c54:	4454      	add	r4, sl
 8037c56:	2900      	cmp	r1, #0
 8037c58:	d054      	beq.n	8037d04 <_dtoa_r+0x5ac>
 8037c5a:	4929      	ldr	r1, [pc, #164]	@ (8037d00 <_dtoa_r+0x5a8>)
 8037c5c:	2000      	movs	r0, #0
 8037c5e:	f7d8 fe0d 	bl	801087c <__aeabi_ddiv>
 8037c62:	4633      	mov	r3, r6
 8037c64:	462a      	mov	r2, r5
 8037c66:	f7d8 fb27 	bl	80102b8 <__aeabi_dsub>
 8037c6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8037c6e:	4656      	mov	r6, sl
 8037c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037c74:	f7d8 ff88 	bl	8010b88 <__aeabi_d2iz>
 8037c78:	4605      	mov	r5, r0
 8037c7a:	f7d8 fc6b 	bl	8010554 <__aeabi_i2d>
 8037c7e:	4602      	mov	r2, r0
 8037c80:	460b      	mov	r3, r1
 8037c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037c86:	f7d8 fb17 	bl	80102b8 <__aeabi_dsub>
 8037c8a:	3530      	adds	r5, #48	@ 0x30
 8037c8c:	4602      	mov	r2, r0
 8037c8e:	460b      	mov	r3, r1
 8037c90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8037c94:	f806 5b01 	strb.w	r5, [r6], #1
 8037c98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8037c9c:	f7d8 ff36 	bl	8010b0c <__aeabi_dcmplt>
 8037ca0:	2800      	cmp	r0, #0
 8037ca2:	d172      	bne.n	8037d8a <_dtoa_r+0x632>
 8037ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8037ca8:	4911      	ldr	r1, [pc, #68]	@ (8037cf0 <_dtoa_r+0x598>)
 8037caa:	2000      	movs	r0, #0
 8037cac:	f7d8 fb04 	bl	80102b8 <__aeabi_dsub>
 8037cb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8037cb4:	f7d8 ff2a 	bl	8010b0c <__aeabi_dcmplt>
 8037cb8:	2800      	cmp	r0, #0
 8037cba:	f040 8096 	bne.w	8037dea <_dtoa_r+0x692>
 8037cbe:	42a6      	cmp	r6, r4
 8037cc0:	f43f af50 	beq.w	8037b64 <_dtoa_r+0x40c>
 8037cc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8037cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8037cf4 <_dtoa_r+0x59c>)
 8037cca:	2200      	movs	r2, #0
 8037ccc:	f7d8 fcac 	bl	8010628 <__aeabi_dmul>
 8037cd0:	4b08      	ldr	r3, [pc, #32]	@ (8037cf4 <_dtoa_r+0x59c>)
 8037cd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8037cd6:	2200      	movs	r2, #0
 8037cd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037cdc:	f7d8 fca4 	bl	8010628 <__aeabi_dmul>
 8037ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8037ce4:	e7c4      	b.n	8037c70 <_dtoa_r+0x518>
 8037ce6:	bf00      	nop
 8037ce8:	080452b8 	.word	0x080452b8
 8037cec:	08045290 	.word	0x08045290
 8037cf0:	3ff00000 	.word	0x3ff00000
 8037cf4:	40240000 	.word	0x40240000
 8037cf8:	401c0000 	.word	0x401c0000
 8037cfc:	40140000 	.word	0x40140000
 8037d00:	3fe00000 	.word	0x3fe00000
 8037d04:	4631      	mov	r1, r6
 8037d06:	4628      	mov	r0, r5
 8037d08:	f7d8 fc8e 	bl	8010628 <__aeabi_dmul>
 8037d0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8037d10:	9415      	str	r4, [sp, #84]	@ 0x54
 8037d12:	4656      	mov	r6, sl
 8037d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037d18:	f7d8 ff36 	bl	8010b88 <__aeabi_d2iz>
 8037d1c:	4605      	mov	r5, r0
 8037d1e:	f7d8 fc19 	bl	8010554 <__aeabi_i2d>
 8037d22:	4602      	mov	r2, r0
 8037d24:	460b      	mov	r3, r1
 8037d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037d2a:	f7d8 fac5 	bl	80102b8 <__aeabi_dsub>
 8037d2e:	3530      	adds	r5, #48	@ 0x30
 8037d30:	f806 5b01 	strb.w	r5, [r6], #1
 8037d34:	4602      	mov	r2, r0
 8037d36:	460b      	mov	r3, r1
 8037d38:	42a6      	cmp	r6, r4
 8037d3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8037d3e:	f04f 0200 	mov.w	r2, #0
 8037d42:	d124      	bne.n	8037d8e <_dtoa_r+0x636>
 8037d44:	4bac      	ldr	r3, [pc, #688]	@ (8037ff8 <_dtoa_r+0x8a0>)
 8037d46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8037d4a:	f7d8 fab7 	bl	80102bc <__adddf3>
 8037d4e:	4602      	mov	r2, r0
 8037d50:	460b      	mov	r3, r1
 8037d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037d56:	f7d8 fef7 	bl	8010b48 <__aeabi_dcmpgt>
 8037d5a:	2800      	cmp	r0, #0
 8037d5c:	d145      	bne.n	8037dea <_dtoa_r+0x692>
 8037d5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8037d62:	49a5      	ldr	r1, [pc, #660]	@ (8037ff8 <_dtoa_r+0x8a0>)
 8037d64:	2000      	movs	r0, #0
 8037d66:	f7d8 faa7 	bl	80102b8 <__aeabi_dsub>
 8037d6a:	4602      	mov	r2, r0
 8037d6c:	460b      	mov	r3, r1
 8037d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8037d72:	f7d8 fecb 	bl	8010b0c <__aeabi_dcmplt>
 8037d76:	2800      	cmp	r0, #0
 8037d78:	f43f aef4 	beq.w	8037b64 <_dtoa_r+0x40c>
 8037d7c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8037d7e:	1e73      	subs	r3, r6, #1
 8037d80:	9315      	str	r3, [sp, #84]	@ 0x54
 8037d82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8037d86:	2b30      	cmp	r3, #48	@ 0x30
 8037d88:	d0f8      	beq.n	8037d7c <_dtoa_r+0x624>
 8037d8a:	9f04      	ldr	r7, [sp, #16]
 8037d8c:	e73d      	b.n	8037c0a <_dtoa_r+0x4b2>
 8037d8e:	4b9b      	ldr	r3, [pc, #620]	@ (8037ffc <_dtoa_r+0x8a4>)
 8037d90:	f7d8 fc4a 	bl	8010628 <__aeabi_dmul>
 8037d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8037d98:	e7bc      	b.n	8037d14 <_dtoa_r+0x5bc>
 8037d9a:	d10c      	bne.n	8037db6 <_dtoa_r+0x65e>
 8037d9c:	4b98      	ldr	r3, [pc, #608]	@ (8038000 <_dtoa_r+0x8a8>)
 8037d9e:	2200      	movs	r2, #0
 8037da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8037da4:	f7d8 fc40 	bl	8010628 <__aeabi_dmul>
 8037da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8037dac:	f7d8 fec2 	bl	8010b34 <__aeabi_dcmpge>
 8037db0:	2800      	cmp	r0, #0
 8037db2:	f000 8157 	beq.w	8038064 <_dtoa_r+0x90c>
 8037db6:	2400      	movs	r4, #0
 8037db8:	4625      	mov	r5, r4
 8037dba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8037dbc:	43db      	mvns	r3, r3
 8037dbe:	9304      	str	r3, [sp, #16]
 8037dc0:	4656      	mov	r6, sl
 8037dc2:	2700      	movs	r7, #0
 8037dc4:	4621      	mov	r1, r4
 8037dc6:	4658      	mov	r0, fp
 8037dc8:	f004 ff1b 	bl	803cc02 <_Bfree>
 8037dcc:	2d00      	cmp	r5, #0
 8037dce:	d0dc      	beq.n	8037d8a <_dtoa_r+0x632>
 8037dd0:	b12f      	cbz	r7, 8037dde <_dtoa_r+0x686>
 8037dd2:	42af      	cmp	r7, r5
 8037dd4:	d003      	beq.n	8037dde <_dtoa_r+0x686>
 8037dd6:	4639      	mov	r1, r7
 8037dd8:	4658      	mov	r0, fp
 8037dda:	f004 ff12 	bl	803cc02 <_Bfree>
 8037dde:	4629      	mov	r1, r5
 8037de0:	4658      	mov	r0, fp
 8037de2:	f004 ff0e 	bl	803cc02 <_Bfree>
 8037de6:	e7d0      	b.n	8037d8a <_dtoa_r+0x632>
 8037de8:	9704      	str	r7, [sp, #16]
 8037dea:	4633      	mov	r3, r6
 8037dec:	461e      	mov	r6, r3
 8037dee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8037df2:	2a39      	cmp	r2, #57	@ 0x39
 8037df4:	d107      	bne.n	8037e06 <_dtoa_r+0x6ae>
 8037df6:	459a      	cmp	sl, r3
 8037df8:	d1f8      	bne.n	8037dec <_dtoa_r+0x694>
 8037dfa:	9a04      	ldr	r2, [sp, #16]
 8037dfc:	3201      	adds	r2, #1
 8037dfe:	9204      	str	r2, [sp, #16]
 8037e00:	2230      	movs	r2, #48	@ 0x30
 8037e02:	f88a 2000 	strb.w	r2, [sl]
 8037e06:	781a      	ldrb	r2, [r3, #0]
 8037e08:	3201      	adds	r2, #1
 8037e0a:	701a      	strb	r2, [r3, #0]
 8037e0c:	e7bd      	b.n	8037d8a <_dtoa_r+0x632>
 8037e0e:	4b7b      	ldr	r3, [pc, #492]	@ (8037ffc <_dtoa_r+0x8a4>)
 8037e10:	2200      	movs	r2, #0
 8037e12:	f7d8 fc09 	bl	8010628 <__aeabi_dmul>
 8037e16:	2200      	movs	r2, #0
 8037e18:	2300      	movs	r3, #0
 8037e1a:	4604      	mov	r4, r0
 8037e1c:	460d      	mov	r5, r1
 8037e1e:	f7d8 fe6b 	bl	8010af8 <__aeabi_dcmpeq>
 8037e22:	2800      	cmp	r0, #0
 8037e24:	f43f aeba 	beq.w	8037b9c <_dtoa_r+0x444>
 8037e28:	e6ef      	b.n	8037c0a <_dtoa_r+0x4b2>
 8037e2a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8037e2c:	2a00      	cmp	r2, #0
 8037e2e:	f000 80db 	beq.w	8037fe8 <_dtoa_r+0x890>
 8037e32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8037e34:	2a01      	cmp	r2, #1
 8037e36:	f300 80bf 	bgt.w	8037fb8 <_dtoa_r+0x860>
 8037e3a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8037e3c:	2a00      	cmp	r2, #0
 8037e3e:	f000 80b7 	beq.w	8037fb0 <_dtoa_r+0x858>
 8037e42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8037e46:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8037e48:	4646      	mov	r6, r8
 8037e4a:	9a08      	ldr	r2, [sp, #32]
 8037e4c:	2101      	movs	r1, #1
 8037e4e:	441a      	add	r2, r3
 8037e50:	4658      	mov	r0, fp
 8037e52:	4498      	add	r8, r3
 8037e54:	9208      	str	r2, [sp, #32]
 8037e56:	f004 ffb9 	bl	803cdcc <__i2b>
 8037e5a:	4605      	mov	r5, r0
 8037e5c:	b15e      	cbz	r6, 8037e76 <_dtoa_r+0x71e>
 8037e5e:	9b08      	ldr	r3, [sp, #32]
 8037e60:	2b00      	cmp	r3, #0
 8037e62:	dd08      	ble.n	8037e76 <_dtoa_r+0x71e>
 8037e64:	42b3      	cmp	r3, r6
 8037e66:	9a08      	ldr	r2, [sp, #32]
 8037e68:	bfa8      	it	ge
 8037e6a:	4633      	movge	r3, r6
 8037e6c:	eba8 0803 	sub.w	r8, r8, r3
 8037e70:	1af6      	subs	r6, r6, r3
 8037e72:	1ad3      	subs	r3, r2, r3
 8037e74:	9308      	str	r3, [sp, #32]
 8037e76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8037e78:	b1f3      	cbz	r3, 8037eb8 <_dtoa_r+0x760>
 8037e7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8037e7c:	2b00      	cmp	r3, #0
 8037e7e:	f000 80b7 	beq.w	8037ff0 <_dtoa_r+0x898>
 8037e82:	b18c      	cbz	r4, 8037ea8 <_dtoa_r+0x750>
 8037e84:	4629      	mov	r1, r5
 8037e86:	4622      	mov	r2, r4
 8037e88:	4658      	mov	r0, fp
 8037e8a:	f005 f85f 	bl	803cf4c <__pow5mult>
 8037e8e:	464a      	mov	r2, r9
 8037e90:	4601      	mov	r1, r0
 8037e92:	4605      	mov	r5, r0
 8037e94:	4658      	mov	r0, fp
 8037e96:	f004 ffaf 	bl	803cdf8 <__multiply>
 8037e9a:	4649      	mov	r1, r9
 8037e9c:	9004      	str	r0, [sp, #16]
 8037e9e:	4658      	mov	r0, fp
 8037ea0:	f004 feaf 	bl	803cc02 <_Bfree>
 8037ea4:	9b04      	ldr	r3, [sp, #16]
 8037ea6:	4699      	mov	r9, r3
 8037ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8037eaa:	1b1a      	subs	r2, r3, r4
 8037eac:	d004      	beq.n	8037eb8 <_dtoa_r+0x760>
 8037eae:	4649      	mov	r1, r9
 8037eb0:	4658      	mov	r0, fp
 8037eb2:	f005 f84b 	bl	803cf4c <__pow5mult>
 8037eb6:	4681      	mov	r9, r0
 8037eb8:	2101      	movs	r1, #1
 8037eba:	4658      	mov	r0, fp
 8037ebc:	f004 ff86 	bl	803cdcc <__i2b>
 8037ec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8037ec2:	4604      	mov	r4, r0
 8037ec4:	2b00      	cmp	r3, #0
 8037ec6:	f000 81cc 	beq.w	8038262 <_dtoa_r+0xb0a>
 8037eca:	461a      	mov	r2, r3
 8037ecc:	4601      	mov	r1, r0
 8037ece:	4658      	mov	r0, fp
 8037ed0:	f005 f83c 	bl	803cf4c <__pow5mult>
 8037ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8037ed6:	2b01      	cmp	r3, #1
 8037ed8:	4604      	mov	r4, r0
 8037eda:	f300 8095 	bgt.w	8038008 <_dtoa_r+0x8b0>
 8037ede:	9b02      	ldr	r3, [sp, #8]
 8037ee0:	2b00      	cmp	r3, #0
 8037ee2:	f040 8087 	bne.w	8037ff4 <_dtoa_r+0x89c>
 8037ee6:	9b03      	ldr	r3, [sp, #12]
 8037ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8037eec:	2b00      	cmp	r3, #0
 8037eee:	f040 8089 	bne.w	8038004 <_dtoa_r+0x8ac>
 8037ef2:	9b03      	ldr	r3, [sp, #12]
 8037ef4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8037ef8:	0d1b      	lsrs	r3, r3, #20
 8037efa:	051b      	lsls	r3, r3, #20
 8037efc:	b12b      	cbz	r3, 8037f0a <_dtoa_r+0x7b2>
 8037efe:	9b08      	ldr	r3, [sp, #32]
 8037f00:	3301      	adds	r3, #1
 8037f02:	9308      	str	r3, [sp, #32]
 8037f04:	f108 0801 	add.w	r8, r8, #1
 8037f08:	2301      	movs	r3, #1
 8037f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8037f0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8037f0e:	2b00      	cmp	r3, #0
 8037f10:	f000 81ad 	beq.w	803826e <_dtoa_r+0xb16>
 8037f14:	6923      	ldr	r3, [r4, #16]
 8037f16:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8037f1a:	6918      	ldr	r0, [r3, #16]
 8037f1c:	f004 ff0a 	bl	803cd34 <__hi0bits>
 8037f20:	f1c0 0020 	rsb	r0, r0, #32
 8037f24:	9b08      	ldr	r3, [sp, #32]
 8037f26:	4418      	add	r0, r3
 8037f28:	f010 001f 	ands.w	r0, r0, #31
 8037f2c:	d077      	beq.n	803801e <_dtoa_r+0x8c6>
 8037f2e:	f1c0 0320 	rsb	r3, r0, #32
 8037f32:	2b04      	cmp	r3, #4
 8037f34:	dd6b      	ble.n	803800e <_dtoa_r+0x8b6>
 8037f36:	9b08      	ldr	r3, [sp, #32]
 8037f38:	f1c0 001c 	rsb	r0, r0, #28
 8037f3c:	4403      	add	r3, r0
 8037f3e:	4480      	add	r8, r0
 8037f40:	4406      	add	r6, r0
 8037f42:	9308      	str	r3, [sp, #32]
 8037f44:	f1b8 0f00 	cmp.w	r8, #0
 8037f48:	dd05      	ble.n	8037f56 <_dtoa_r+0x7fe>
 8037f4a:	4649      	mov	r1, r9
 8037f4c:	4642      	mov	r2, r8
 8037f4e:	4658      	mov	r0, fp
 8037f50:	f005 f83c 	bl	803cfcc <__lshift>
 8037f54:	4681      	mov	r9, r0
 8037f56:	9b08      	ldr	r3, [sp, #32]
 8037f58:	2b00      	cmp	r3, #0
 8037f5a:	dd05      	ble.n	8037f68 <_dtoa_r+0x810>
 8037f5c:	4621      	mov	r1, r4
 8037f5e:	461a      	mov	r2, r3
 8037f60:	4658      	mov	r0, fp
 8037f62:	f005 f833 	bl	803cfcc <__lshift>
 8037f66:	4604      	mov	r4, r0
 8037f68:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8037f6a:	2b00      	cmp	r3, #0
 8037f6c:	d059      	beq.n	8038022 <_dtoa_r+0x8ca>
 8037f6e:	4621      	mov	r1, r4
 8037f70:	4648      	mov	r0, r9
 8037f72:	f005 f897 	bl	803d0a4 <__mcmp>
 8037f76:	2800      	cmp	r0, #0
 8037f78:	da53      	bge.n	8038022 <_dtoa_r+0x8ca>
 8037f7a:	1e7b      	subs	r3, r7, #1
 8037f7c:	9304      	str	r3, [sp, #16]
 8037f7e:	4649      	mov	r1, r9
 8037f80:	2300      	movs	r3, #0
 8037f82:	220a      	movs	r2, #10
 8037f84:	4658      	mov	r0, fp
 8037f86:	f004 fe45 	bl	803cc14 <__multadd>
 8037f8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8037f8c:	4681      	mov	r9, r0
 8037f8e:	2b00      	cmp	r3, #0
 8037f90:	f000 816f 	beq.w	8038272 <_dtoa_r+0xb1a>
 8037f94:	2300      	movs	r3, #0
 8037f96:	4629      	mov	r1, r5
 8037f98:	220a      	movs	r2, #10
 8037f9a:	4658      	mov	r0, fp
 8037f9c:	f004 fe3a 	bl	803cc14 <__multadd>
 8037fa0:	9b00      	ldr	r3, [sp, #0]
 8037fa2:	2b00      	cmp	r3, #0
 8037fa4:	4605      	mov	r5, r0
 8037fa6:	dc67      	bgt.n	8038078 <_dtoa_r+0x920>
 8037fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8037faa:	2b02      	cmp	r3, #2
 8037fac:	dc41      	bgt.n	8038032 <_dtoa_r+0x8da>
 8037fae:	e063      	b.n	8038078 <_dtoa_r+0x920>
 8037fb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8037fb2:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8037fb6:	e746      	b.n	8037e46 <_dtoa_r+0x6ee>
 8037fb8:	9b07      	ldr	r3, [sp, #28]
 8037fba:	1e5c      	subs	r4, r3, #1
 8037fbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8037fbe:	42a3      	cmp	r3, r4
 8037fc0:	bfbf      	itttt	lt
 8037fc2:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8037fc4:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8037fc6:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8037fc8:	1ae3      	sublt	r3, r4, r3
 8037fca:	bfb4      	ite	lt
 8037fcc:	18d2      	addlt	r2, r2, r3
 8037fce:	1b1c      	subge	r4, r3, r4
 8037fd0:	9b07      	ldr	r3, [sp, #28]
 8037fd2:	bfbc      	itt	lt
 8037fd4:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8037fd6:	2400      	movlt	r4, #0
 8037fd8:	2b00      	cmp	r3, #0
 8037fda:	bfb5      	itete	lt
 8037fdc:	eba8 0603 	sublt.w	r6, r8, r3
 8037fe0:	9b07      	ldrge	r3, [sp, #28]
 8037fe2:	2300      	movlt	r3, #0
 8037fe4:	4646      	movge	r6, r8
 8037fe6:	e730      	b.n	8037e4a <_dtoa_r+0x6f2>
 8037fe8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8037fea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8037fec:	4646      	mov	r6, r8
 8037fee:	e735      	b.n	8037e5c <_dtoa_r+0x704>
 8037ff0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8037ff2:	e75c      	b.n	8037eae <_dtoa_r+0x756>
 8037ff4:	2300      	movs	r3, #0
 8037ff6:	e788      	b.n	8037f0a <_dtoa_r+0x7b2>
 8037ff8:	3fe00000 	.word	0x3fe00000
 8037ffc:	40240000 	.word	0x40240000
 8038000:	40140000 	.word	0x40140000
 8038004:	9b02      	ldr	r3, [sp, #8]
 8038006:	e780      	b.n	8037f0a <_dtoa_r+0x7b2>
 8038008:	2300      	movs	r3, #0
 803800a:	930a      	str	r3, [sp, #40]	@ 0x28
 803800c:	e782      	b.n	8037f14 <_dtoa_r+0x7bc>
 803800e:	d099      	beq.n	8037f44 <_dtoa_r+0x7ec>
 8038010:	9a08      	ldr	r2, [sp, #32]
 8038012:	331c      	adds	r3, #28
 8038014:	441a      	add	r2, r3
 8038016:	4498      	add	r8, r3
 8038018:	441e      	add	r6, r3
 803801a:	9208      	str	r2, [sp, #32]
 803801c:	e792      	b.n	8037f44 <_dtoa_r+0x7ec>
 803801e:	4603      	mov	r3, r0
 8038020:	e7f6      	b.n	8038010 <_dtoa_r+0x8b8>
 8038022:	9b07      	ldr	r3, [sp, #28]
 8038024:	9704      	str	r7, [sp, #16]
 8038026:	2b00      	cmp	r3, #0
 8038028:	dc20      	bgt.n	803806c <_dtoa_r+0x914>
 803802a:	9300      	str	r3, [sp, #0]
 803802c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803802e:	2b02      	cmp	r3, #2
 8038030:	dd1e      	ble.n	8038070 <_dtoa_r+0x918>
 8038032:	9b00      	ldr	r3, [sp, #0]
 8038034:	2b00      	cmp	r3, #0
 8038036:	f47f aec0 	bne.w	8037dba <_dtoa_r+0x662>
 803803a:	4621      	mov	r1, r4
 803803c:	2205      	movs	r2, #5
 803803e:	4658      	mov	r0, fp
 8038040:	f004 fde8 	bl	803cc14 <__multadd>
 8038044:	4601      	mov	r1, r0
 8038046:	4604      	mov	r4, r0
 8038048:	4648      	mov	r0, r9
 803804a:	f005 f82b 	bl	803d0a4 <__mcmp>
 803804e:	2800      	cmp	r0, #0
 8038050:	f77f aeb3 	ble.w	8037dba <_dtoa_r+0x662>
 8038054:	4656      	mov	r6, sl
 8038056:	2331      	movs	r3, #49	@ 0x31
 8038058:	f806 3b01 	strb.w	r3, [r6], #1
 803805c:	9b04      	ldr	r3, [sp, #16]
 803805e:	3301      	adds	r3, #1
 8038060:	9304      	str	r3, [sp, #16]
 8038062:	e6ae      	b.n	8037dc2 <_dtoa_r+0x66a>
 8038064:	9c07      	ldr	r4, [sp, #28]
 8038066:	9704      	str	r7, [sp, #16]
 8038068:	4625      	mov	r5, r4
 803806a:	e7f3      	b.n	8038054 <_dtoa_r+0x8fc>
 803806c:	9b07      	ldr	r3, [sp, #28]
 803806e:	9300      	str	r3, [sp, #0]
 8038070:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8038072:	2b00      	cmp	r3, #0
 8038074:	f000 8101 	beq.w	803827a <_dtoa_r+0xb22>
 8038078:	2e00      	cmp	r6, #0
 803807a:	dd05      	ble.n	8038088 <_dtoa_r+0x930>
 803807c:	4629      	mov	r1, r5
 803807e:	4632      	mov	r2, r6
 8038080:	4658      	mov	r0, fp
 8038082:	f004 ffa3 	bl	803cfcc <__lshift>
 8038086:	4605      	mov	r5, r0
 8038088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803808a:	2b00      	cmp	r3, #0
 803808c:	d059      	beq.n	8038142 <_dtoa_r+0x9ea>
 803808e:	6869      	ldr	r1, [r5, #4]
 8038090:	4658      	mov	r0, fp
 8038092:	f004 fd91 	bl	803cbb8 <_Balloc>
 8038096:	4606      	mov	r6, r0
 8038098:	b920      	cbnz	r0, 80380a4 <_dtoa_r+0x94c>
 803809a:	4b83      	ldr	r3, [pc, #524]	@ (80382a8 <_dtoa_r+0xb50>)
 803809c:	4602      	mov	r2, r0
 803809e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80380a2:	e480      	b.n	80379a6 <_dtoa_r+0x24e>
 80380a4:	692a      	ldr	r2, [r5, #16]
 80380a6:	3202      	adds	r2, #2
 80380a8:	0092      	lsls	r2, r2, #2
 80380aa:	f105 010c 	add.w	r1, r5, #12
 80380ae:	300c      	adds	r0, #12
 80380b0:	f7ff fa52 	bl	8037558 <memcpy>
 80380b4:	2201      	movs	r2, #1
 80380b6:	4631      	mov	r1, r6
 80380b8:	4658      	mov	r0, fp
 80380ba:	f004 ff87 	bl	803cfcc <__lshift>
 80380be:	f10a 0301 	add.w	r3, sl, #1
 80380c2:	9307      	str	r3, [sp, #28]
 80380c4:	9b00      	ldr	r3, [sp, #0]
 80380c6:	4453      	add	r3, sl
 80380c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80380ca:	9b02      	ldr	r3, [sp, #8]
 80380cc:	f003 0301 	and.w	r3, r3, #1
 80380d0:	462f      	mov	r7, r5
 80380d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80380d4:	4605      	mov	r5, r0
 80380d6:	9b07      	ldr	r3, [sp, #28]
 80380d8:	4621      	mov	r1, r4
 80380da:	3b01      	subs	r3, #1
 80380dc:	4648      	mov	r0, r9
 80380de:	9300      	str	r3, [sp, #0]
 80380e0:	f7ff faaf 	bl	8037642 <quorem>
 80380e4:	4639      	mov	r1, r7
 80380e6:	9002      	str	r0, [sp, #8]
 80380e8:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80380ec:	4648      	mov	r0, r9
 80380ee:	f004 ffd9 	bl	803d0a4 <__mcmp>
 80380f2:	462a      	mov	r2, r5
 80380f4:	9008      	str	r0, [sp, #32]
 80380f6:	4621      	mov	r1, r4
 80380f8:	4658      	mov	r0, fp
 80380fa:	f004 ffef 	bl	803d0dc <__mdiff>
 80380fe:	68c2      	ldr	r2, [r0, #12]
 8038100:	4606      	mov	r6, r0
 8038102:	bb02      	cbnz	r2, 8038146 <_dtoa_r+0x9ee>
 8038104:	4601      	mov	r1, r0
 8038106:	4648      	mov	r0, r9
 8038108:	f004 ffcc 	bl	803d0a4 <__mcmp>
 803810c:	4602      	mov	r2, r0
 803810e:	4631      	mov	r1, r6
 8038110:	4658      	mov	r0, fp
 8038112:	920e      	str	r2, [sp, #56]	@ 0x38
 8038114:	f004 fd75 	bl	803cc02 <_Bfree>
 8038118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803811a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803811c:	9e07      	ldr	r6, [sp, #28]
 803811e:	ea43 0102 	orr.w	r1, r3, r2
 8038122:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8038124:	4319      	orrs	r1, r3
 8038126:	d110      	bne.n	803814a <_dtoa_r+0x9f2>
 8038128:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 803812c:	d029      	beq.n	8038182 <_dtoa_r+0xa2a>
 803812e:	9b08      	ldr	r3, [sp, #32]
 8038130:	2b00      	cmp	r3, #0
 8038132:	dd02      	ble.n	803813a <_dtoa_r+0x9e2>
 8038134:	9b02      	ldr	r3, [sp, #8]
 8038136:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 803813a:	9b00      	ldr	r3, [sp, #0]
 803813c:	f883 8000 	strb.w	r8, [r3]
 8038140:	e640      	b.n	8037dc4 <_dtoa_r+0x66c>
 8038142:	4628      	mov	r0, r5
 8038144:	e7bb      	b.n	80380be <_dtoa_r+0x966>
 8038146:	2201      	movs	r2, #1
 8038148:	e7e1      	b.n	803810e <_dtoa_r+0x9b6>
 803814a:	9b08      	ldr	r3, [sp, #32]
 803814c:	2b00      	cmp	r3, #0
 803814e:	db04      	blt.n	803815a <_dtoa_r+0xa02>
 8038150:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8038152:	430b      	orrs	r3, r1
 8038154:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8038156:	430b      	orrs	r3, r1
 8038158:	d120      	bne.n	803819c <_dtoa_r+0xa44>
 803815a:	2a00      	cmp	r2, #0
 803815c:	dded      	ble.n	803813a <_dtoa_r+0x9e2>
 803815e:	4649      	mov	r1, r9
 8038160:	2201      	movs	r2, #1
 8038162:	4658      	mov	r0, fp
 8038164:	f004 ff32 	bl	803cfcc <__lshift>
 8038168:	4621      	mov	r1, r4
 803816a:	4681      	mov	r9, r0
 803816c:	f004 ff9a 	bl	803d0a4 <__mcmp>
 8038170:	2800      	cmp	r0, #0
 8038172:	dc03      	bgt.n	803817c <_dtoa_r+0xa24>
 8038174:	d1e1      	bne.n	803813a <_dtoa_r+0x9e2>
 8038176:	f018 0f01 	tst.w	r8, #1
 803817a:	d0de      	beq.n	803813a <_dtoa_r+0x9e2>
 803817c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8038180:	d1d8      	bne.n	8038134 <_dtoa_r+0x9dc>
 8038182:	9a00      	ldr	r2, [sp, #0]
 8038184:	2339      	movs	r3, #57	@ 0x39
 8038186:	7013      	strb	r3, [r2, #0]
 8038188:	4633      	mov	r3, r6
 803818a:	461e      	mov	r6, r3
 803818c:	3b01      	subs	r3, #1
 803818e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8038192:	2a39      	cmp	r2, #57	@ 0x39
 8038194:	d052      	beq.n	803823c <_dtoa_r+0xae4>
 8038196:	3201      	adds	r2, #1
 8038198:	701a      	strb	r2, [r3, #0]
 803819a:	e613      	b.n	8037dc4 <_dtoa_r+0x66c>
 803819c:	2a00      	cmp	r2, #0
 803819e:	dd07      	ble.n	80381b0 <_dtoa_r+0xa58>
 80381a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80381a4:	d0ed      	beq.n	8038182 <_dtoa_r+0xa2a>
 80381a6:	9a00      	ldr	r2, [sp, #0]
 80381a8:	f108 0301 	add.w	r3, r8, #1
 80381ac:	7013      	strb	r3, [r2, #0]
 80381ae:	e609      	b.n	8037dc4 <_dtoa_r+0x66c>
 80381b0:	9b07      	ldr	r3, [sp, #28]
 80381b2:	9a07      	ldr	r2, [sp, #28]
 80381b4:	f803 8c01 	strb.w	r8, [r3, #-1]
 80381b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80381ba:	4293      	cmp	r3, r2
 80381bc:	d028      	beq.n	8038210 <_dtoa_r+0xab8>
 80381be:	4649      	mov	r1, r9
 80381c0:	2300      	movs	r3, #0
 80381c2:	220a      	movs	r2, #10
 80381c4:	4658      	mov	r0, fp
 80381c6:	f004 fd25 	bl	803cc14 <__multadd>
 80381ca:	42af      	cmp	r7, r5
 80381cc:	4681      	mov	r9, r0
 80381ce:	f04f 0300 	mov.w	r3, #0
 80381d2:	f04f 020a 	mov.w	r2, #10
 80381d6:	4639      	mov	r1, r7
 80381d8:	4658      	mov	r0, fp
 80381da:	d107      	bne.n	80381ec <_dtoa_r+0xa94>
 80381dc:	f004 fd1a 	bl	803cc14 <__multadd>
 80381e0:	4607      	mov	r7, r0
 80381e2:	4605      	mov	r5, r0
 80381e4:	9b07      	ldr	r3, [sp, #28]
 80381e6:	3301      	adds	r3, #1
 80381e8:	9307      	str	r3, [sp, #28]
 80381ea:	e774      	b.n	80380d6 <_dtoa_r+0x97e>
 80381ec:	f004 fd12 	bl	803cc14 <__multadd>
 80381f0:	4629      	mov	r1, r5
 80381f2:	4607      	mov	r7, r0
 80381f4:	2300      	movs	r3, #0
 80381f6:	220a      	movs	r2, #10
 80381f8:	4658      	mov	r0, fp
 80381fa:	f004 fd0b 	bl	803cc14 <__multadd>
 80381fe:	4605      	mov	r5, r0
 8038200:	e7f0      	b.n	80381e4 <_dtoa_r+0xa8c>
 8038202:	9b00      	ldr	r3, [sp, #0]
 8038204:	2b00      	cmp	r3, #0
 8038206:	bfcc      	ite	gt
 8038208:	461e      	movgt	r6, r3
 803820a:	2601      	movle	r6, #1
 803820c:	4456      	add	r6, sl
 803820e:	2700      	movs	r7, #0
 8038210:	4649      	mov	r1, r9
 8038212:	2201      	movs	r2, #1
 8038214:	4658      	mov	r0, fp
 8038216:	f004 fed9 	bl	803cfcc <__lshift>
 803821a:	4621      	mov	r1, r4
 803821c:	4681      	mov	r9, r0
 803821e:	f004 ff41 	bl	803d0a4 <__mcmp>
 8038222:	2800      	cmp	r0, #0
 8038224:	dcb0      	bgt.n	8038188 <_dtoa_r+0xa30>
 8038226:	d102      	bne.n	803822e <_dtoa_r+0xad6>
 8038228:	f018 0f01 	tst.w	r8, #1
 803822c:	d1ac      	bne.n	8038188 <_dtoa_r+0xa30>
 803822e:	4633      	mov	r3, r6
 8038230:	461e      	mov	r6, r3
 8038232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8038236:	2a30      	cmp	r2, #48	@ 0x30
 8038238:	d0fa      	beq.n	8038230 <_dtoa_r+0xad8>
 803823a:	e5c3      	b.n	8037dc4 <_dtoa_r+0x66c>
 803823c:	459a      	cmp	sl, r3
 803823e:	d1a4      	bne.n	803818a <_dtoa_r+0xa32>
 8038240:	9b04      	ldr	r3, [sp, #16]
 8038242:	3301      	adds	r3, #1
 8038244:	9304      	str	r3, [sp, #16]
 8038246:	2331      	movs	r3, #49	@ 0x31
 8038248:	f88a 3000 	strb.w	r3, [sl]
 803824c:	e5ba      	b.n	8037dc4 <_dtoa_r+0x66c>
 803824e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8038250:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80382ac <_dtoa_r+0xb54>
 8038254:	2b00      	cmp	r3, #0
 8038256:	f43f aab6 	beq.w	80377c6 <_dtoa_r+0x6e>
 803825a:	f10a 0308 	add.w	r3, sl, #8
 803825e:	f7ff bab0 	b.w	80377c2 <_dtoa_r+0x6a>
 8038262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8038264:	2b01      	cmp	r3, #1
 8038266:	f77f ae3a 	ble.w	8037ede <_dtoa_r+0x786>
 803826a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803826c:	930a      	str	r3, [sp, #40]	@ 0x28
 803826e:	2001      	movs	r0, #1
 8038270:	e658      	b.n	8037f24 <_dtoa_r+0x7cc>
 8038272:	9b00      	ldr	r3, [sp, #0]
 8038274:	2b00      	cmp	r3, #0
 8038276:	f77f aed9 	ble.w	803802c <_dtoa_r+0x8d4>
 803827a:	4656      	mov	r6, sl
 803827c:	4621      	mov	r1, r4
 803827e:	4648      	mov	r0, r9
 8038280:	f7ff f9df 	bl	8037642 <quorem>
 8038284:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8038288:	f806 8b01 	strb.w	r8, [r6], #1
 803828c:	9b00      	ldr	r3, [sp, #0]
 803828e:	eba6 020a 	sub.w	r2, r6, sl
 8038292:	4293      	cmp	r3, r2
 8038294:	ddb5      	ble.n	8038202 <_dtoa_r+0xaaa>
 8038296:	4649      	mov	r1, r9
 8038298:	2300      	movs	r3, #0
 803829a:	220a      	movs	r2, #10
 803829c:	4658      	mov	r0, fp
 803829e:	f004 fcb9 	bl	803cc14 <__multadd>
 80382a2:	4681      	mov	r9, r0
 80382a4:	e7ea      	b.n	803827c <_dtoa_r+0xb24>
 80382a6:	bf00      	nop
 80382a8:	08045132 	.word	0x08045132
 80382ac:	08045125 	.word	0x08045125

080382b0 <_malloc_trim_r>:
 80382b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80382b4:	4606      	mov	r6, r0
 80382b6:	2008      	movs	r0, #8
 80382b8:	4689      	mov	r9, r1
 80382ba:	f006 fb53 	bl	803e964 <sysconf>
 80382be:	4f24      	ldr	r7, [pc, #144]	@ (8038350 <_malloc_trim_r+0xa0>)
 80382c0:	4680      	mov	r8, r0
 80382c2:	4630      	mov	r0, r6
 80382c4:	f004 fc6c 	bl	803cba0 <__malloc_lock>
 80382c8:	68bb      	ldr	r3, [r7, #8]
 80382ca:	685d      	ldr	r5, [r3, #4]
 80382cc:	f025 0503 	bic.w	r5, r5, #3
 80382d0:	f1a5 0411 	sub.w	r4, r5, #17
 80382d4:	eba4 0409 	sub.w	r4, r4, r9
 80382d8:	4444      	add	r4, r8
 80382da:	fbb4 f4f8 	udiv	r4, r4, r8
 80382de:	3c01      	subs	r4, #1
 80382e0:	fb08 f404 	mul.w	r4, r8, r4
 80382e4:	45a0      	cmp	r8, r4
 80382e6:	dd05      	ble.n	80382f4 <_malloc_trim_r+0x44>
 80382e8:	4630      	mov	r0, r6
 80382ea:	f004 fc5f 	bl	803cbac <__malloc_unlock>
 80382ee:	2000      	movs	r0, #0
 80382f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80382f4:	2100      	movs	r1, #0
 80382f6:	4630      	mov	r0, r6
 80382f8:	f006 fb24 	bl	803e944 <_sbrk_r>
 80382fc:	68bb      	ldr	r3, [r7, #8]
 80382fe:	442b      	add	r3, r5
 8038300:	4298      	cmp	r0, r3
 8038302:	d1f1      	bne.n	80382e8 <_malloc_trim_r+0x38>
 8038304:	4261      	negs	r1, r4
 8038306:	4630      	mov	r0, r6
 8038308:	f006 fb1c 	bl	803e944 <_sbrk_r>
 803830c:	3001      	adds	r0, #1
 803830e:	d110      	bne.n	8038332 <_malloc_trim_r+0x82>
 8038310:	2100      	movs	r1, #0
 8038312:	4630      	mov	r0, r6
 8038314:	f006 fb16 	bl	803e944 <_sbrk_r>
 8038318:	68ba      	ldr	r2, [r7, #8]
 803831a:	1a83      	subs	r3, r0, r2
 803831c:	2b0f      	cmp	r3, #15
 803831e:	dde3      	ble.n	80382e8 <_malloc_trim_r+0x38>
 8038320:	490c      	ldr	r1, [pc, #48]	@ (8038354 <_malloc_trim_r+0xa4>)
 8038322:	6809      	ldr	r1, [r1, #0]
 8038324:	1a40      	subs	r0, r0, r1
 8038326:	490c      	ldr	r1, [pc, #48]	@ (8038358 <_malloc_trim_r+0xa8>)
 8038328:	f043 0301 	orr.w	r3, r3, #1
 803832c:	6008      	str	r0, [r1, #0]
 803832e:	6053      	str	r3, [r2, #4]
 8038330:	e7da      	b.n	80382e8 <_malloc_trim_r+0x38>
 8038332:	68bb      	ldr	r3, [r7, #8]
 8038334:	4a08      	ldr	r2, [pc, #32]	@ (8038358 <_malloc_trim_r+0xa8>)
 8038336:	1b2d      	subs	r5, r5, r4
 8038338:	f045 0501 	orr.w	r5, r5, #1
 803833c:	605d      	str	r5, [r3, #4]
 803833e:	6813      	ldr	r3, [r2, #0]
 8038340:	4630      	mov	r0, r6
 8038342:	1b1b      	subs	r3, r3, r4
 8038344:	6013      	str	r3, [r2, #0]
 8038346:	f004 fc31 	bl	803cbac <__malloc_unlock>
 803834a:	2001      	movs	r0, #1
 803834c:	e7d0      	b.n	80382f0 <_malloc_trim_r+0x40>
 803834e:	bf00      	nop
 8038350:	20000574 	.word	0x20000574
 8038354:	2000056c 	.word	0x2000056c
 8038358:	20018350 	.word	0x20018350

0803835c <_free_r>:
 803835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803835e:	4604      	mov	r4, r0
 8038360:	460f      	mov	r7, r1
 8038362:	2900      	cmp	r1, #0
 8038364:	f000 80b1 	beq.w	80384ca <_free_r+0x16e>
 8038368:	f004 fc1a 	bl	803cba0 <__malloc_lock>
 803836c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8038370:	4d56      	ldr	r5, [pc, #344]	@ (80384cc <_free_r+0x170>)
 8038372:	f022 0001 	bic.w	r0, r2, #1
 8038376:	f1a7 0308 	sub.w	r3, r7, #8
 803837a:	eb03 0c00 	add.w	ip, r3, r0
 803837e:	68a9      	ldr	r1, [r5, #8]
 8038380:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8038384:	4561      	cmp	r1, ip
 8038386:	f026 0603 	bic.w	r6, r6, #3
 803838a:	f002 0201 	and.w	r2, r2, #1
 803838e:	d11b      	bne.n	80383c8 <_free_r+0x6c>
 8038390:	4406      	add	r6, r0
 8038392:	b93a      	cbnz	r2, 80383a4 <_free_r+0x48>
 8038394:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8038398:	1a9b      	subs	r3, r3, r2
 803839a:	4416      	add	r6, r2
 803839c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80383a0:	60ca      	str	r2, [r1, #12]
 80383a2:	6091      	str	r1, [r2, #8]
 80383a4:	f046 0201 	orr.w	r2, r6, #1
 80383a8:	605a      	str	r2, [r3, #4]
 80383aa:	60ab      	str	r3, [r5, #8]
 80383ac:	4b48      	ldr	r3, [pc, #288]	@ (80384d0 <_free_r+0x174>)
 80383ae:	681b      	ldr	r3, [r3, #0]
 80383b0:	42b3      	cmp	r3, r6
 80383b2:	d804      	bhi.n	80383be <_free_r+0x62>
 80383b4:	4b47      	ldr	r3, [pc, #284]	@ (80384d4 <_free_r+0x178>)
 80383b6:	4620      	mov	r0, r4
 80383b8:	6819      	ldr	r1, [r3, #0]
 80383ba:	f7ff ff79 	bl	80382b0 <_malloc_trim_r>
 80383be:	4620      	mov	r0, r4
 80383c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80383c4:	f004 bbf2 	b.w	803cbac <__malloc_unlock>
 80383c8:	f8cc 6004 	str.w	r6, [ip, #4]
 80383cc:	2a00      	cmp	r2, #0
 80383ce:	d138      	bne.n	8038442 <_free_r+0xe6>
 80383d0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80383d4:	1a5b      	subs	r3, r3, r1
 80383d6:	4408      	add	r0, r1
 80383d8:	6899      	ldr	r1, [r3, #8]
 80383da:	f105 0708 	add.w	r7, r5, #8
 80383de:	42b9      	cmp	r1, r7
 80383e0:	d031      	beq.n	8038446 <_free_r+0xea>
 80383e2:	68df      	ldr	r7, [r3, #12]
 80383e4:	60cf      	str	r7, [r1, #12]
 80383e6:	60b9      	str	r1, [r7, #8]
 80383e8:	eb0c 0106 	add.w	r1, ip, r6
 80383ec:	6849      	ldr	r1, [r1, #4]
 80383ee:	07c9      	lsls	r1, r1, #31
 80383f0:	d40b      	bmi.n	803840a <_free_r+0xae>
 80383f2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80383f6:	4430      	add	r0, r6
 80383f8:	bb3a      	cbnz	r2, 803844a <_free_r+0xee>
 80383fa:	4e37      	ldr	r6, [pc, #220]	@ (80384d8 <_free_r+0x17c>)
 80383fc:	42b1      	cmp	r1, r6
 80383fe:	d124      	bne.n	803844a <_free_r+0xee>
 8038400:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8038404:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8038408:	2201      	movs	r2, #1
 803840a:	f040 0101 	orr.w	r1, r0, #1
 803840e:	6059      	str	r1, [r3, #4]
 8038410:	5018      	str	r0, [r3, r0]
 8038412:	2a00      	cmp	r2, #0
 8038414:	d1d3      	bne.n	80383be <_free_r+0x62>
 8038416:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 803841a:	d21b      	bcs.n	8038454 <_free_r+0xf8>
 803841c:	08c2      	lsrs	r2, r0, #3
 803841e:	2101      	movs	r1, #1
 8038420:	0940      	lsrs	r0, r0, #5
 8038422:	4081      	lsls	r1, r0
 8038424:	6868      	ldr	r0, [r5, #4]
 8038426:	3201      	adds	r2, #1
 8038428:	4301      	orrs	r1, r0
 803842a:	6069      	str	r1, [r5, #4]
 803842c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8038430:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8038434:	3908      	subs	r1, #8
 8038436:	e9c3 0102 	strd	r0, r1, [r3, #8]
 803843a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 803843e:	60c3      	str	r3, [r0, #12]
 8038440:	e7bd      	b.n	80383be <_free_r+0x62>
 8038442:	2200      	movs	r2, #0
 8038444:	e7d0      	b.n	80383e8 <_free_r+0x8c>
 8038446:	2201      	movs	r2, #1
 8038448:	e7ce      	b.n	80383e8 <_free_r+0x8c>
 803844a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 803844e:	60ce      	str	r6, [r1, #12]
 8038450:	60b1      	str	r1, [r6, #8]
 8038452:	e7da      	b.n	803840a <_free_r+0xae>
 8038454:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8038458:	ea4f 2250 	mov.w	r2, r0, lsr #9
 803845c:	d214      	bcs.n	8038488 <_free_r+0x12c>
 803845e:	0982      	lsrs	r2, r0, #6
 8038460:	3238      	adds	r2, #56	@ 0x38
 8038462:	1c51      	adds	r1, r2, #1
 8038464:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8038468:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 803846c:	428e      	cmp	r6, r1
 803846e:	d125      	bne.n	80384bc <_free_r+0x160>
 8038470:	2001      	movs	r0, #1
 8038472:	1092      	asrs	r2, r2, #2
 8038474:	fa00 f202 	lsl.w	r2, r0, r2
 8038478:	6868      	ldr	r0, [r5, #4]
 803847a:	4302      	orrs	r2, r0
 803847c:	606a      	str	r2, [r5, #4]
 803847e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8038482:	60b3      	str	r3, [r6, #8]
 8038484:	60cb      	str	r3, [r1, #12]
 8038486:	e79a      	b.n	80383be <_free_r+0x62>
 8038488:	2a14      	cmp	r2, #20
 803848a:	d801      	bhi.n	8038490 <_free_r+0x134>
 803848c:	325b      	adds	r2, #91	@ 0x5b
 803848e:	e7e8      	b.n	8038462 <_free_r+0x106>
 8038490:	2a54      	cmp	r2, #84	@ 0x54
 8038492:	d802      	bhi.n	803849a <_free_r+0x13e>
 8038494:	0b02      	lsrs	r2, r0, #12
 8038496:	326e      	adds	r2, #110	@ 0x6e
 8038498:	e7e3      	b.n	8038462 <_free_r+0x106>
 803849a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 803849e:	d802      	bhi.n	80384a6 <_free_r+0x14a>
 80384a0:	0bc2      	lsrs	r2, r0, #15
 80384a2:	3277      	adds	r2, #119	@ 0x77
 80384a4:	e7dd      	b.n	8038462 <_free_r+0x106>
 80384a6:	f240 5154 	movw	r1, #1364	@ 0x554
 80384aa:	428a      	cmp	r2, r1
 80384ac:	bf9a      	itte	ls
 80384ae:	0c82      	lsrls	r2, r0, #18
 80384b0:	327c      	addls	r2, #124	@ 0x7c
 80384b2:	227e      	movhi	r2, #126	@ 0x7e
 80384b4:	e7d5      	b.n	8038462 <_free_r+0x106>
 80384b6:	6889      	ldr	r1, [r1, #8]
 80384b8:	428e      	cmp	r6, r1
 80384ba:	d004      	beq.n	80384c6 <_free_r+0x16a>
 80384bc:	684a      	ldr	r2, [r1, #4]
 80384be:	f022 0203 	bic.w	r2, r2, #3
 80384c2:	4282      	cmp	r2, r0
 80384c4:	d8f7      	bhi.n	80384b6 <_free_r+0x15a>
 80384c6:	68ce      	ldr	r6, [r1, #12]
 80384c8:	e7d9      	b.n	803847e <_free_r+0x122>
 80384ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80384cc:	20000574 	.word	0x20000574
 80384d0:	20000570 	.word	0x20000570
 80384d4:	20018380 	.word	0x20018380
 80384d8:	2000057c 	.word	0x2000057c

080384dc <_findenv_r>:
 80384dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80384e0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8038550 <_findenv_r+0x74>
 80384e4:	4606      	mov	r6, r0
 80384e6:	4689      	mov	r9, r1
 80384e8:	4617      	mov	r7, r2
 80384ea:	f006 fc31 	bl	803ed50 <__env_lock>
 80384ee:	f8da 4000 	ldr.w	r4, [sl]
 80384f2:	b134      	cbz	r4, 8038502 <_findenv_r+0x26>
 80384f4:	464b      	mov	r3, r9
 80384f6:	4698      	mov	r8, r3
 80384f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80384fc:	b13a      	cbz	r2, 803850e <_findenv_r+0x32>
 80384fe:	2a3d      	cmp	r2, #61	@ 0x3d
 8038500:	d1f9      	bne.n	80384f6 <_findenv_r+0x1a>
 8038502:	4630      	mov	r0, r6
 8038504:	f006 fc2a 	bl	803ed5c <__env_unlock>
 8038508:	2000      	movs	r0, #0
 803850a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803850e:	eba8 0809 	sub.w	r8, r8, r9
 8038512:	46a3      	mov	fp, r4
 8038514:	f854 0b04 	ldr.w	r0, [r4], #4
 8038518:	2800      	cmp	r0, #0
 803851a:	d0f2      	beq.n	8038502 <_findenv_r+0x26>
 803851c:	4642      	mov	r2, r8
 803851e:	4649      	mov	r1, r9
 8038520:	f7fd fe13 	bl	803614a <strncmp>
 8038524:	2800      	cmp	r0, #0
 8038526:	d1f4      	bne.n	8038512 <_findenv_r+0x36>
 8038528:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803852c:	eb03 0508 	add.w	r5, r3, r8
 8038530:	f813 3008 	ldrb.w	r3, [r3, r8]
 8038534:	2b3d      	cmp	r3, #61	@ 0x3d
 8038536:	d1ec      	bne.n	8038512 <_findenv_r+0x36>
 8038538:	f8da 3000 	ldr.w	r3, [sl]
 803853c:	ebab 0303 	sub.w	r3, fp, r3
 8038540:	109b      	asrs	r3, r3, #2
 8038542:	4630      	mov	r0, r6
 8038544:	603b      	str	r3, [r7, #0]
 8038546:	f006 fc09 	bl	803ed5c <__env_unlock>
 803854a:	1c68      	adds	r0, r5, #1
 803854c:	e7dd      	b.n	803850a <_findenv_r+0x2e>
 803854e:	bf00      	nop
 8038550:	20000014 	.word	0x20000014

08038554 <_getenv_r>:
 8038554:	b507      	push	{r0, r1, r2, lr}
 8038556:	aa01      	add	r2, sp, #4
 8038558:	f7ff ffc0 	bl	80384dc <_findenv_r>
 803855c:	b003      	add	sp, #12
 803855e:	f85d fb04 	ldr.w	pc, [sp], #4

08038562 <labs>:
 8038562:	2800      	cmp	r0, #0
 8038564:	bfb8      	it	lt
 8038566:	4240      	neglt	r0, r0
 8038568:	4770      	bx	lr
	...

0803856c <malloc>:
 803856c:	4b02      	ldr	r3, [pc, #8]	@ (8038578 <malloc+0xc>)
 803856e:	4601      	mov	r1, r0
 8038570:	6818      	ldr	r0, [r3, #0]
 8038572:	f000 b80b 	b.w	803858c <_malloc_r>
 8038576:	bf00      	nop
 8038578:	20000440 	.word	0x20000440

0803857c <free>:
 803857c:	4b02      	ldr	r3, [pc, #8]	@ (8038588 <free+0xc>)
 803857e:	4601      	mov	r1, r0
 8038580:	6818      	ldr	r0, [r3, #0]
 8038582:	f7ff beeb 	b.w	803835c <_free_r>
 8038586:	bf00      	nop
 8038588:	20000440 	.word	0x20000440

0803858c <_malloc_r>:
 803858c:	f101 030b 	add.w	r3, r1, #11
 8038590:	2b16      	cmp	r3, #22
 8038592:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8038596:	4605      	mov	r5, r0
 8038598:	d906      	bls.n	80385a8 <_malloc_r+0x1c>
 803859a:	f033 0707 	bics.w	r7, r3, #7
 803859e:	d504      	bpl.n	80385aa <_malloc_r+0x1e>
 80385a0:	230c      	movs	r3, #12
 80385a2:	602b      	str	r3, [r5, #0]
 80385a4:	2400      	movs	r4, #0
 80385a6:	e1a3      	b.n	80388f0 <_malloc_r+0x364>
 80385a8:	2710      	movs	r7, #16
 80385aa:	42b9      	cmp	r1, r7
 80385ac:	d8f8      	bhi.n	80385a0 <_malloc_r+0x14>
 80385ae:	4628      	mov	r0, r5
 80385b0:	f004 faf6 	bl	803cba0 <__malloc_lock>
 80385b4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 80385b8:	4eaf      	ldr	r6, [pc, #700]	@ (8038878 <_malloc_r+0x2ec>)
 80385ba:	d237      	bcs.n	803862c <_malloc_r+0xa0>
 80385bc:	f107 0208 	add.w	r2, r7, #8
 80385c0:	4432      	add	r2, r6
 80385c2:	f1a2 0108 	sub.w	r1, r2, #8
 80385c6:	6854      	ldr	r4, [r2, #4]
 80385c8:	428c      	cmp	r4, r1
 80385ca:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80385ce:	d102      	bne.n	80385d6 <_malloc_r+0x4a>
 80385d0:	68d4      	ldr	r4, [r2, #12]
 80385d2:	42a2      	cmp	r2, r4
 80385d4:	d010      	beq.n	80385f8 <_malloc_r+0x6c>
 80385d6:	6863      	ldr	r3, [r4, #4]
 80385d8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80385dc:	f023 0303 	bic.w	r3, r3, #3
 80385e0:	60ca      	str	r2, [r1, #12]
 80385e2:	4423      	add	r3, r4
 80385e4:	6091      	str	r1, [r2, #8]
 80385e6:	685a      	ldr	r2, [r3, #4]
 80385e8:	f042 0201 	orr.w	r2, r2, #1
 80385ec:	605a      	str	r2, [r3, #4]
 80385ee:	4628      	mov	r0, r5
 80385f0:	f004 fadc 	bl	803cbac <__malloc_unlock>
 80385f4:	3408      	adds	r4, #8
 80385f6:	e17b      	b.n	80388f0 <_malloc_r+0x364>
 80385f8:	3302      	adds	r3, #2
 80385fa:	6934      	ldr	r4, [r6, #16]
 80385fc:	499f      	ldr	r1, [pc, #636]	@ (803887c <_malloc_r+0x2f0>)
 80385fe:	428c      	cmp	r4, r1
 8038600:	d077      	beq.n	80386f2 <_malloc_r+0x166>
 8038602:	6862      	ldr	r2, [r4, #4]
 8038604:	f022 0c03 	bic.w	ip, r2, #3
 8038608:	ebac 0007 	sub.w	r0, ip, r7
 803860c:	280f      	cmp	r0, #15
 803860e:	dd48      	ble.n	80386a2 <_malloc_r+0x116>
 8038610:	19e2      	adds	r2, r4, r7
 8038612:	f040 0301 	orr.w	r3, r0, #1
 8038616:	f047 0701 	orr.w	r7, r7, #1
 803861a:	6067      	str	r7, [r4, #4]
 803861c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8038620:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8038624:	6053      	str	r3, [r2, #4]
 8038626:	f844 000c 	str.w	r0, [r4, ip]
 803862a:	e7e0      	b.n	80385ee <_malloc_r+0x62>
 803862c:	0a7b      	lsrs	r3, r7, #9
 803862e:	d02a      	beq.n	8038686 <_malloc_r+0xfa>
 8038630:	2b04      	cmp	r3, #4
 8038632:	d812      	bhi.n	803865a <_malloc_r+0xce>
 8038634:	09bb      	lsrs	r3, r7, #6
 8038636:	3338      	adds	r3, #56	@ 0x38
 8038638:	1c5a      	adds	r2, r3, #1
 803863a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 803863e:	f1a2 0c08 	sub.w	ip, r2, #8
 8038642:	6854      	ldr	r4, [r2, #4]
 8038644:	4564      	cmp	r4, ip
 8038646:	d006      	beq.n	8038656 <_malloc_r+0xca>
 8038648:	6862      	ldr	r2, [r4, #4]
 803864a:	f022 0203 	bic.w	r2, r2, #3
 803864e:	1bd0      	subs	r0, r2, r7
 8038650:	280f      	cmp	r0, #15
 8038652:	dd1c      	ble.n	803868e <_malloc_r+0x102>
 8038654:	3b01      	subs	r3, #1
 8038656:	3301      	adds	r3, #1
 8038658:	e7cf      	b.n	80385fa <_malloc_r+0x6e>
 803865a:	2b14      	cmp	r3, #20
 803865c:	d801      	bhi.n	8038662 <_malloc_r+0xd6>
 803865e:	335b      	adds	r3, #91	@ 0x5b
 8038660:	e7ea      	b.n	8038638 <_malloc_r+0xac>
 8038662:	2b54      	cmp	r3, #84	@ 0x54
 8038664:	d802      	bhi.n	803866c <_malloc_r+0xe0>
 8038666:	0b3b      	lsrs	r3, r7, #12
 8038668:	336e      	adds	r3, #110	@ 0x6e
 803866a:	e7e5      	b.n	8038638 <_malloc_r+0xac>
 803866c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8038670:	d802      	bhi.n	8038678 <_malloc_r+0xec>
 8038672:	0bfb      	lsrs	r3, r7, #15
 8038674:	3377      	adds	r3, #119	@ 0x77
 8038676:	e7df      	b.n	8038638 <_malloc_r+0xac>
 8038678:	f240 5254 	movw	r2, #1364	@ 0x554
 803867c:	4293      	cmp	r3, r2
 803867e:	d804      	bhi.n	803868a <_malloc_r+0xfe>
 8038680:	0cbb      	lsrs	r3, r7, #18
 8038682:	337c      	adds	r3, #124	@ 0x7c
 8038684:	e7d8      	b.n	8038638 <_malloc_r+0xac>
 8038686:	233f      	movs	r3, #63	@ 0x3f
 8038688:	e7d6      	b.n	8038638 <_malloc_r+0xac>
 803868a:	237e      	movs	r3, #126	@ 0x7e
 803868c:	e7d4      	b.n	8038638 <_malloc_r+0xac>
 803868e:	2800      	cmp	r0, #0
 8038690:	68e1      	ldr	r1, [r4, #12]
 8038692:	db04      	blt.n	803869e <_malloc_r+0x112>
 8038694:	68a3      	ldr	r3, [r4, #8]
 8038696:	60d9      	str	r1, [r3, #12]
 8038698:	608b      	str	r3, [r1, #8]
 803869a:	18a3      	adds	r3, r4, r2
 803869c:	e7a3      	b.n	80385e6 <_malloc_r+0x5a>
 803869e:	460c      	mov	r4, r1
 80386a0:	e7d0      	b.n	8038644 <_malloc_r+0xb8>
 80386a2:	2800      	cmp	r0, #0
 80386a4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80386a8:	db07      	blt.n	80386ba <_malloc_r+0x12e>
 80386aa:	44a4      	add	ip, r4
 80386ac:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80386b0:	f043 0301 	orr.w	r3, r3, #1
 80386b4:	f8cc 3004 	str.w	r3, [ip, #4]
 80386b8:	e799      	b.n	80385ee <_malloc_r+0x62>
 80386ba:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 80386be:	6870      	ldr	r0, [r6, #4]
 80386c0:	f080 8095 	bcs.w	80387ee <_malloc_r+0x262>
 80386c4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80386c8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80386cc:	f04f 0c01 	mov.w	ip, #1
 80386d0:	3201      	adds	r2, #1
 80386d2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80386d6:	ea4c 0000 	orr.w	r0, ip, r0
 80386da:	6070      	str	r0, [r6, #4]
 80386dc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80386e0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80386e4:	3808      	subs	r0, #8
 80386e6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80386ea:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80386ee:	f8cc 400c 	str.w	r4, [ip, #12]
 80386f2:	1098      	asrs	r0, r3, #2
 80386f4:	2201      	movs	r2, #1
 80386f6:	4082      	lsls	r2, r0
 80386f8:	6870      	ldr	r0, [r6, #4]
 80386fa:	4290      	cmp	r0, r2
 80386fc:	d326      	bcc.n	803874c <_malloc_r+0x1c0>
 80386fe:	4210      	tst	r0, r2
 8038700:	d106      	bne.n	8038710 <_malloc_r+0x184>
 8038702:	f023 0303 	bic.w	r3, r3, #3
 8038706:	0052      	lsls	r2, r2, #1
 8038708:	4210      	tst	r0, r2
 803870a:	f103 0304 	add.w	r3, r3, #4
 803870e:	d0fa      	beq.n	8038706 <_malloc_r+0x17a>
 8038710:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8038714:	46c1      	mov	r9, r8
 8038716:	469e      	mov	lr, r3
 8038718:	f8d9 400c 	ldr.w	r4, [r9, #12]
 803871c:	454c      	cmp	r4, r9
 803871e:	f040 80b9 	bne.w	8038894 <_malloc_r+0x308>
 8038722:	f10e 0e01 	add.w	lr, lr, #1
 8038726:	f01e 0f03 	tst.w	lr, #3
 803872a:	f109 0908 	add.w	r9, r9, #8
 803872e:	d1f3      	bne.n	8038718 <_malloc_r+0x18c>
 8038730:	0798      	lsls	r0, r3, #30
 8038732:	f040 80e3 	bne.w	80388fc <_malloc_r+0x370>
 8038736:	6873      	ldr	r3, [r6, #4]
 8038738:	ea23 0302 	bic.w	r3, r3, r2
 803873c:	6073      	str	r3, [r6, #4]
 803873e:	6870      	ldr	r0, [r6, #4]
 8038740:	0052      	lsls	r2, r2, #1
 8038742:	4290      	cmp	r0, r2
 8038744:	d302      	bcc.n	803874c <_malloc_r+0x1c0>
 8038746:	2a00      	cmp	r2, #0
 8038748:	f040 80e5 	bne.w	8038916 <_malloc_r+0x38a>
 803874c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8038750:	f8da 3004 	ldr.w	r3, [sl, #4]
 8038754:	f023 0903 	bic.w	r9, r3, #3
 8038758:	45b9      	cmp	r9, r7
 803875a:	d304      	bcc.n	8038766 <_malloc_r+0x1da>
 803875c:	eba9 0207 	sub.w	r2, r9, r7
 8038760:	2a0f      	cmp	r2, #15
 8038762:	f300 8141 	bgt.w	80389e8 <_malloc_r+0x45c>
 8038766:	4b46      	ldr	r3, [pc, #280]	@ (8038880 <_malloc_r+0x2f4>)
 8038768:	6819      	ldr	r1, [r3, #0]
 803876a:	3110      	adds	r1, #16
 803876c:	4439      	add	r1, r7
 803876e:	2008      	movs	r0, #8
 8038770:	9101      	str	r1, [sp, #4]
 8038772:	f006 f8f7 	bl	803e964 <sysconf>
 8038776:	4a43      	ldr	r2, [pc, #268]	@ (8038884 <_malloc_r+0x2f8>)
 8038778:	9901      	ldr	r1, [sp, #4]
 803877a:	6813      	ldr	r3, [r2, #0]
 803877c:	3301      	adds	r3, #1
 803877e:	bf1f      	itttt	ne
 8038780:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 8038784:	1809      	addne	r1, r1, r0
 8038786:	4243      	negne	r3, r0
 8038788:	4019      	andne	r1, r3
 803878a:	4680      	mov	r8, r0
 803878c:	4628      	mov	r0, r5
 803878e:	9101      	str	r1, [sp, #4]
 8038790:	f006 f8d8 	bl	803e944 <_sbrk_r>
 8038794:	1c42      	adds	r2, r0, #1
 8038796:	eb0a 0b09 	add.w	fp, sl, r9
 803879a:	4604      	mov	r4, r0
 803879c:	f000 80f7 	beq.w	803898e <_malloc_r+0x402>
 80387a0:	4583      	cmp	fp, r0
 80387a2:	9901      	ldr	r1, [sp, #4]
 80387a4:	4a37      	ldr	r2, [pc, #220]	@ (8038884 <_malloc_r+0x2f8>)
 80387a6:	d902      	bls.n	80387ae <_malloc_r+0x222>
 80387a8:	45b2      	cmp	sl, r6
 80387aa:	f040 80f0 	bne.w	803898e <_malloc_r+0x402>
 80387ae:	4b36      	ldr	r3, [pc, #216]	@ (8038888 <_malloc_r+0x2fc>)
 80387b0:	6818      	ldr	r0, [r3, #0]
 80387b2:	45a3      	cmp	fp, r4
 80387b4:	eb00 0e01 	add.w	lr, r0, r1
 80387b8:	f8c3 e000 	str.w	lr, [r3]
 80387bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80387c0:	f040 80ab 	bne.w	803891a <_malloc_r+0x38e>
 80387c4:	ea1b 0f0c 	tst.w	fp, ip
 80387c8:	f040 80a7 	bne.w	803891a <_malloc_r+0x38e>
 80387cc:	68b2      	ldr	r2, [r6, #8]
 80387ce:	4449      	add	r1, r9
 80387d0:	f041 0101 	orr.w	r1, r1, #1
 80387d4:	6051      	str	r1, [r2, #4]
 80387d6:	4a2d      	ldr	r2, [pc, #180]	@ (803888c <_malloc_r+0x300>)
 80387d8:	681b      	ldr	r3, [r3, #0]
 80387da:	6811      	ldr	r1, [r2, #0]
 80387dc:	428b      	cmp	r3, r1
 80387de:	bf88      	it	hi
 80387e0:	6013      	strhi	r3, [r2, #0]
 80387e2:	4a2b      	ldr	r2, [pc, #172]	@ (8038890 <_malloc_r+0x304>)
 80387e4:	6811      	ldr	r1, [r2, #0]
 80387e6:	428b      	cmp	r3, r1
 80387e8:	bf88      	it	hi
 80387ea:	6013      	strhi	r3, [r2, #0]
 80387ec:	e0cf      	b.n	803898e <_malloc_r+0x402>
 80387ee:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 80387f2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80387f6:	d218      	bcs.n	803882a <_malloc_r+0x29e>
 80387f8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80387fc:	3238      	adds	r2, #56	@ 0x38
 80387fe:	f102 0e01 	add.w	lr, r2, #1
 8038802:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8038806:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 803880a:	45f0      	cmp	r8, lr
 803880c:	d12b      	bne.n	8038866 <_malloc_r+0x2da>
 803880e:	1092      	asrs	r2, r2, #2
 8038810:	f04f 0c01 	mov.w	ip, #1
 8038814:	fa0c f202 	lsl.w	r2, ip, r2
 8038818:	4302      	orrs	r2, r0
 803881a:	6072      	str	r2, [r6, #4]
 803881c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8038820:	f8c8 4008 	str.w	r4, [r8, #8]
 8038824:	f8ce 400c 	str.w	r4, [lr, #12]
 8038828:	e763      	b.n	80386f2 <_malloc_r+0x166>
 803882a:	2a14      	cmp	r2, #20
 803882c:	d801      	bhi.n	8038832 <_malloc_r+0x2a6>
 803882e:	325b      	adds	r2, #91	@ 0x5b
 8038830:	e7e5      	b.n	80387fe <_malloc_r+0x272>
 8038832:	2a54      	cmp	r2, #84	@ 0x54
 8038834:	d803      	bhi.n	803883e <_malloc_r+0x2b2>
 8038836:	ea4f 321c 	mov.w	r2, ip, lsr #12
 803883a:	326e      	adds	r2, #110	@ 0x6e
 803883c:	e7df      	b.n	80387fe <_malloc_r+0x272>
 803883e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8038842:	d803      	bhi.n	803884c <_malloc_r+0x2c0>
 8038844:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8038848:	3277      	adds	r2, #119	@ 0x77
 803884a:	e7d8      	b.n	80387fe <_malloc_r+0x272>
 803884c:	f240 5e54 	movw	lr, #1364	@ 0x554
 8038850:	4572      	cmp	r2, lr
 8038852:	bf9a      	itte	ls
 8038854:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8038858:	327c      	addls	r2, #124	@ 0x7c
 803885a:	227e      	movhi	r2, #126	@ 0x7e
 803885c:	e7cf      	b.n	80387fe <_malloc_r+0x272>
 803885e:	f8de e008 	ldr.w	lr, [lr, #8]
 8038862:	45f0      	cmp	r8, lr
 8038864:	d005      	beq.n	8038872 <_malloc_r+0x2e6>
 8038866:	f8de 2004 	ldr.w	r2, [lr, #4]
 803886a:	f022 0203 	bic.w	r2, r2, #3
 803886e:	4562      	cmp	r2, ip
 8038870:	d8f5      	bhi.n	803885e <_malloc_r+0x2d2>
 8038872:	f8de 800c 	ldr.w	r8, [lr, #12]
 8038876:	e7d1      	b.n	803881c <_malloc_r+0x290>
 8038878:	20000574 	.word	0x20000574
 803887c:	2000057c 	.word	0x2000057c
 8038880:	20018380 	.word	0x20018380
 8038884:	2000056c 	.word	0x2000056c
 8038888:	20018350 	.word	0x20018350
 803888c:	2001837c 	.word	0x2001837c
 8038890:	20018378 	.word	0x20018378
 8038894:	6860      	ldr	r0, [r4, #4]
 8038896:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 803889a:	f020 0003 	bic.w	r0, r0, #3
 803889e:	eba0 0a07 	sub.w	sl, r0, r7
 80388a2:	f1ba 0f0f 	cmp.w	sl, #15
 80388a6:	dd12      	ble.n	80388ce <_malloc_r+0x342>
 80388a8:	68a3      	ldr	r3, [r4, #8]
 80388aa:	19e2      	adds	r2, r4, r7
 80388ac:	f047 0701 	orr.w	r7, r7, #1
 80388b0:	6067      	str	r7, [r4, #4]
 80388b2:	f8c3 c00c 	str.w	ip, [r3, #12]
 80388b6:	f8cc 3008 	str.w	r3, [ip, #8]
 80388ba:	f04a 0301 	orr.w	r3, sl, #1
 80388be:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80388c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80388c6:	6053      	str	r3, [r2, #4]
 80388c8:	f844 a000 	str.w	sl, [r4, r0]
 80388cc:	e68f      	b.n	80385ee <_malloc_r+0x62>
 80388ce:	f1ba 0f00 	cmp.w	sl, #0
 80388d2:	db11      	blt.n	80388f8 <_malloc_r+0x36c>
 80388d4:	4420      	add	r0, r4
 80388d6:	6843      	ldr	r3, [r0, #4]
 80388d8:	f043 0301 	orr.w	r3, r3, #1
 80388dc:	6043      	str	r3, [r0, #4]
 80388de:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80388e2:	4628      	mov	r0, r5
 80388e4:	f8c3 c00c 	str.w	ip, [r3, #12]
 80388e8:	f8cc 3008 	str.w	r3, [ip, #8]
 80388ec:	f004 f95e 	bl	803cbac <__malloc_unlock>
 80388f0:	4620      	mov	r0, r4
 80388f2:	b003      	add	sp, #12
 80388f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80388f8:	4664      	mov	r4, ip
 80388fa:	e70f      	b.n	803871c <_malloc_r+0x190>
 80388fc:	f858 0908 	ldr.w	r0, [r8], #-8
 8038900:	4540      	cmp	r0, r8
 8038902:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8038906:	f43f af13 	beq.w	8038730 <_malloc_r+0x1a4>
 803890a:	e718      	b.n	803873e <_malloc_r+0x1b2>
 803890c:	3304      	adds	r3, #4
 803890e:	0052      	lsls	r2, r2, #1
 8038910:	4210      	tst	r0, r2
 8038912:	d0fb      	beq.n	803890c <_malloc_r+0x380>
 8038914:	e6fc      	b.n	8038710 <_malloc_r+0x184>
 8038916:	4673      	mov	r3, lr
 8038918:	e7fa      	b.n	8038910 <_malloc_r+0x384>
 803891a:	6810      	ldr	r0, [r2, #0]
 803891c:	3001      	adds	r0, #1
 803891e:	bf1b      	ittet	ne
 8038920:	eba4 0b0b 	subne.w	fp, r4, fp
 8038924:	eb0b 020e 	addne.w	r2, fp, lr
 8038928:	6014      	streq	r4, [r2, #0]
 803892a:	601a      	strne	r2, [r3, #0]
 803892c:	f014 0b07 	ands.w	fp, r4, #7
 8038930:	bf1a      	itte	ne
 8038932:	f1cb 0008 	rsbne	r0, fp, #8
 8038936:	1824      	addne	r4, r4, r0
 8038938:	4658      	moveq	r0, fp
 803893a:	1862      	adds	r2, r4, r1
 803893c:	ea02 010c 	and.w	r1, r2, ip
 8038940:	4480      	add	r8, r0
 8038942:	eba8 0801 	sub.w	r8, r8, r1
 8038946:	ea08 080c 	and.w	r8, r8, ip
 803894a:	4641      	mov	r1, r8
 803894c:	4628      	mov	r0, r5
 803894e:	9201      	str	r2, [sp, #4]
 8038950:	f005 fff8 	bl	803e944 <_sbrk_r>
 8038954:	1c43      	adds	r3, r0, #1
 8038956:	9a01      	ldr	r2, [sp, #4]
 8038958:	4b28      	ldr	r3, [pc, #160]	@ (80389fc <_malloc_r+0x470>)
 803895a:	d107      	bne.n	803896c <_malloc_r+0x3e0>
 803895c:	f1bb 0f00 	cmp.w	fp, #0
 8038960:	d023      	beq.n	80389aa <_malloc_r+0x41e>
 8038962:	f1ab 0008 	sub.w	r0, fp, #8
 8038966:	4410      	add	r0, r2
 8038968:	f04f 0800 	mov.w	r8, #0
 803896c:	681a      	ldr	r2, [r3, #0]
 803896e:	60b4      	str	r4, [r6, #8]
 8038970:	1b00      	subs	r0, r0, r4
 8038972:	4440      	add	r0, r8
 8038974:	4442      	add	r2, r8
 8038976:	f040 0001 	orr.w	r0, r0, #1
 803897a:	45b2      	cmp	sl, r6
 803897c:	601a      	str	r2, [r3, #0]
 803897e:	6060      	str	r0, [r4, #4]
 8038980:	f43f af29 	beq.w	80387d6 <_malloc_r+0x24a>
 8038984:	f1b9 0f0f 	cmp.w	r9, #15
 8038988:	d812      	bhi.n	80389b0 <_malloc_r+0x424>
 803898a:	2301      	movs	r3, #1
 803898c:	6063      	str	r3, [r4, #4]
 803898e:	68b3      	ldr	r3, [r6, #8]
 8038990:	685b      	ldr	r3, [r3, #4]
 8038992:	f023 0303 	bic.w	r3, r3, #3
 8038996:	42bb      	cmp	r3, r7
 8038998:	eba3 0207 	sub.w	r2, r3, r7
 803899c:	d301      	bcc.n	80389a2 <_malloc_r+0x416>
 803899e:	2a0f      	cmp	r2, #15
 80389a0:	dc22      	bgt.n	80389e8 <_malloc_r+0x45c>
 80389a2:	4628      	mov	r0, r5
 80389a4:	f004 f902 	bl	803cbac <__malloc_unlock>
 80389a8:	e5fc      	b.n	80385a4 <_malloc_r+0x18>
 80389aa:	4610      	mov	r0, r2
 80389ac:	46d8      	mov	r8, fp
 80389ae:	e7dd      	b.n	803896c <_malloc_r+0x3e0>
 80389b0:	f8da 2004 	ldr.w	r2, [sl, #4]
 80389b4:	f1a9 090c 	sub.w	r9, r9, #12
 80389b8:	f029 0907 	bic.w	r9, r9, #7
 80389bc:	f002 0201 	and.w	r2, r2, #1
 80389c0:	ea42 0209 	orr.w	r2, r2, r9
 80389c4:	f8ca 2004 	str.w	r2, [sl, #4]
 80389c8:	2105      	movs	r1, #5
 80389ca:	eb0a 0209 	add.w	r2, sl, r9
 80389ce:	f1b9 0f0f 	cmp.w	r9, #15
 80389d2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80389d6:	f67f aefe 	bls.w	80387d6 <_malloc_r+0x24a>
 80389da:	f10a 0108 	add.w	r1, sl, #8
 80389de:	4628      	mov	r0, r5
 80389e0:	f7ff fcbc 	bl	803835c <_free_r>
 80389e4:	4b05      	ldr	r3, [pc, #20]	@ (80389fc <_malloc_r+0x470>)
 80389e6:	e6f6      	b.n	80387d6 <_malloc_r+0x24a>
 80389e8:	68b4      	ldr	r4, [r6, #8]
 80389ea:	f047 0301 	orr.w	r3, r7, #1
 80389ee:	4427      	add	r7, r4
 80389f0:	f042 0201 	orr.w	r2, r2, #1
 80389f4:	6063      	str	r3, [r4, #4]
 80389f6:	60b7      	str	r7, [r6, #8]
 80389f8:	607a      	str	r2, [r7, #4]
 80389fa:	e5f8      	b.n	80385ee <_malloc_r+0x62>
 80389fc:	20018350 	.word	0x20018350

08038a00 <__ascii_mbtowc>:
 8038a00:	b082      	sub	sp, #8
 8038a02:	b901      	cbnz	r1, 8038a06 <__ascii_mbtowc+0x6>
 8038a04:	a901      	add	r1, sp, #4
 8038a06:	b142      	cbz	r2, 8038a1a <__ascii_mbtowc+0x1a>
 8038a08:	b14b      	cbz	r3, 8038a1e <__ascii_mbtowc+0x1e>
 8038a0a:	7813      	ldrb	r3, [r2, #0]
 8038a0c:	600b      	str	r3, [r1, #0]
 8038a0e:	7812      	ldrb	r2, [r2, #0]
 8038a10:	1e10      	subs	r0, r2, #0
 8038a12:	bf18      	it	ne
 8038a14:	2001      	movne	r0, #1
 8038a16:	b002      	add	sp, #8
 8038a18:	4770      	bx	lr
 8038a1a:	4610      	mov	r0, r2
 8038a1c:	e7fb      	b.n	8038a16 <__ascii_mbtowc+0x16>
 8038a1e:	f06f 0001 	mvn.w	r0, #1
 8038a22:	e7f8      	b.n	8038a16 <__ascii_mbtowc+0x16>

08038a24 <siscanf>:
 8038a24:	b40e      	push	{r1, r2, r3}
 8038a26:	b530      	push	{r4, r5, lr}
 8038a28:	b09c      	sub	sp, #112	@ 0x70
 8038a2a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8038a2c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8038a30:	f854 5b04 	ldr.w	r5, [r4], #4
 8038a34:	f8ad 2014 	strh.w	r2, [sp, #20]
 8038a38:	9002      	str	r0, [sp, #8]
 8038a3a:	9006      	str	r0, [sp, #24]
 8038a3c:	f7d7 fc30 	bl	80102a0 <strlen>
 8038a40:	4b0b      	ldr	r3, [pc, #44]	@ (8038a70 <siscanf+0x4c>)
 8038a42:	9003      	str	r0, [sp, #12]
 8038a44:	9007      	str	r0, [sp, #28]
 8038a46:	930a      	str	r3, [sp, #40]	@ 0x28
 8038a48:	480a      	ldr	r0, [pc, #40]	@ (8038a74 <siscanf+0x50>)
 8038a4a:	9401      	str	r4, [sp, #4]
 8038a4c:	2300      	movs	r3, #0
 8038a4e:	930e      	str	r3, [sp, #56]	@ 0x38
 8038a50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8038a52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8038a56:	f8ad 3016 	strh.w	r3, [sp, #22]
 8038a5a:	462a      	mov	r2, r5
 8038a5c:	4623      	mov	r3, r4
 8038a5e:	a902      	add	r1, sp, #8
 8038a60:	6800      	ldr	r0, [r0, #0]
 8038a62:	f000 fd99 	bl	8039598 <__ssvfiscanf_r>
 8038a66:	b01c      	add	sp, #112	@ 0x70
 8038a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8038a6c:	b003      	add	sp, #12
 8038a6e:	4770      	bx	lr
 8038a70:	08035a13 	.word	0x08035a13
 8038a74:	20000440 	.word	0x20000440

08038a78 <sniprintf>:
 8038a78:	b40c      	push	{r2, r3}
 8038a7a:	b530      	push	{r4, r5, lr}
 8038a7c:	4b17      	ldr	r3, [pc, #92]	@ (8038adc <sniprintf+0x64>)
 8038a7e:	1e0c      	subs	r4, r1, #0
 8038a80:	681d      	ldr	r5, [r3, #0]
 8038a82:	b09d      	sub	sp, #116	@ 0x74
 8038a84:	da08      	bge.n	8038a98 <sniprintf+0x20>
 8038a86:	238b      	movs	r3, #139	@ 0x8b
 8038a88:	602b      	str	r3, [r5, #0]
 8038a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8038a8e:	b01d      	add	sp, #116	@ 0x74
 8038a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8038a94:	b002      	add	sp, #8
 8038a96:	4770      	bx	lr
 8038a98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8038a9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8038aa0:	bf14      	ite	ne
 8038aa2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8038aa6:	4623      	moveq	r3, r4
 8038aa8:	9304      	str	r3, [sp, #16]
 8038aaa:	9307      	str	r3, [sp, #28]
 8038aac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8038ab0:	9002      	str	r0, [sp, #8]
 8038ab2:	9006      	str	r0, [sp, #24]
 8038ab4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8038ab8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8038aba:	ab21      	add	r3, sp, #132	@ 0x84
 8038abc:	a902      	add	r1, sp, #8
 8038abe:	4628      	mov	r0, r5
 8038ac0:	9301      	str	r3, [sp, #4]
 8038ac2:	f000 f88b 	bl	8038bdc <_svfiprintf_r>
 8038ac6:	1c43      	adds	r3, r0, #1
 8038ac8:	bfbc      	itt	lt
 8038aca:	238b      	movlt	r3, #139	@ 0x8b
 8038acc:	602b      	strlt	r3, [r5, #0]
 8038ace:	2c00      	cmp	r4, #0
 8038ad0:	d0dd      	beq.n	8038a8e <sniprintf+0x16>
 8038ad2:	9b02      	ldr	r3, [sp, #8]
 8038ad4:	2200      	movs	r2, #0
 8038ad6:	701a      	strb	r2, [r3, #0]
 8038ad8:	e7d9      	b.n	8038a8e <sniprintf+0x16>
 8038ada:	bf00      	nop
 8038adc:	20000440 	.word	0x20000440

08038ae0 <__ssprint_r>:
 8038ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8038ae4:	6893      	ldr	r3, [r2, #8]
 8038ae6:	f8d2 b000 	ldr.w	fp, [r2]
 8038aea:	9001      	str	r0, [sp, #4]
 8038aec:	460c      	mov	r4, r1
 8038aee:	4617      	mov	r7, r2
 8038af0:	2b00      	cmp	r3, #0
 8038af2:	d157      	bne.n	8038ba4 <__ssprint_r+0xc4>
 8038af4:	2000      	movs	r0, #0
 8038af6:	2300      	movs	r3, #0
 8038af8:	607b      	str	r3, [r7, #4]
 8038afa:	b003      	add	sp, #12
 8038afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8038b00:	e9db a800 	ldrd	sl, r8, [fp]
 8038b04:	f10b 0b08 	add.w	fp, fp, #8
 8038b08:	68a6      	ldr	r6, [r4, #8]
 8038b0a:	6820      	ldr	r0, [r4, #0]
 8038b0c:	f1b8 0f00 	cmp.w	r8, #0
 8038b10:	d0f6      	beq.n	8038b00 <__ssprint_r+0x20>
 8038b12:	45b0      	cmp	r8, r6
 8038b14:	d32e      	bcc.n	8038b74 <__ssprint_r+0x94>
 8038b16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8038b1a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8038b1e:	d029      	beq.n	8038b74 <__ssprint_r+0x94>
 8038b20:	6921      	ldr	r1, [r4, #16]
 8038b22:	6965      	ldr	r5, [r4, #20]
 8038b24:	eba0 0901 	sub.w	r9, r0, r1
 8038b28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8038b2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8038b30:	f109 0001 	add.w	r0, r9, #1
 8038b34:	106d      	asrs	r5, r5, #1
 8038b36:	4440      	add	r0, r8
 8038b38:	4285      	cmp	r5, r0
 8038b3a:	bf38      	it	cc
 8038b3c:	4605      	movcc	r5, r0
 8038b3e:	0553      	lsls	r3, r2, #21
 8038b40:	d534      	bpl.n	8038bac <__ssprint_r+0xcc>
 8038b42:	9801      	ldr	r0, [sp, #4]
 8038b44:	4629      	mov	r1, r5
 8038b46:	f7ff fd21 	bl	803858c <_malloc_r>
 8038b4a:	4606      	mov	r6, r0
 8038b4c:	2800      	cmp	r0, #0
 8038b4e:	d038      	beq.n	8038bc2 <__ssprint_r+0xe2>
 8038b50:	464a      	mov	r2, r9
 8038b52:	6921      	ldr	r1, [r4, #16]
 8038b54:	f7fe fd00 	bl	8037558 <memcpy>
 8038b58:	89a2      	ldrh	r2, [r4, #12]
 8038b5a:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8038b5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8038b62:	81a2      	strh	r2, [r4, #12]
 8038b64:	6126      	str	r6, [r4, #16]
 8038b66:	6165      	str	r5, [r4, #20]
 8038b68:	444e      	add	r6, r9
 8038b6a:	eba5 0509 	sub.w	r5, r5, r9
 8038b6e:	6026      	str	r6, [r4, #0]
 8038b70:	60a5      	str	r5, [r4, #8]
 8038b72:	4646      	mov	r6, r8
 8038b74:	4546      	cmp	r6, r8
 8038b76:	bf28      	it	cs
 8038b78:	4646      	movcs	r6, r8
 8038b7a:	4632      	mov	r2, r6
 8038b7c:	4651      	mov	r1, sl
 8038b7e:	6820      	ldr	r0, [r4, #0]
 8038b80:	f7fd fa94 	bl	80360ac <memmove>
 8038b84:	68a2      	ldr	r2, [r4, #8]
 8038b86:	1b92      	subs	r2, r2, r6
 8038b88:	60a2      	str	r2, [r4, #8]
 8038b8a:	6822      	ldr	r2, [r4, #0]
 8038b8c:	4432      	add	r2, r6
 8038b8e:	6022      	str	r2, [r4, #0]
 8038b90:	68ba      	ldr	r2, [r7, #8]
 8038b92:	eba2 0308 	sub.w	r3, r2, r8
 8038b96:	44c2      	add	sl, r8
 8038b98:	60bb      	str	r3, [r7, #8]
 8038b9a:	2b00      	cmp	r3, #0
 8038b9c:	d0aa      	beq.n	8038af4 <__ssprint_r+0x14>
 8038b9e:	f04f 0800 	mov.w	r8, #0
 8038ba2:	e7b1      	b.n	8038b08 <__ssprint_r+0x28>
 8038ba4:	f04f 0a00 	mov.w	sl, #0
 8038ba8:	46d0      	mov	r8, sl
 8038baa:	e7ad      	b.n	8038b08 <__ssprint_r+0x28>
 8038bac:	9801      	ldr	r0, [sp, #4]
 8038bae:	462a      	mov	r2, r5
 8038bb0:	f004 fcfc 	bl	803d5ac <_realloc_r>
 8038bb4:	4606      	mov	r6, r0
 8038bb6:	2800      	cmp	r0, #0
 8038bb8:	d1d4      	bne.n	8038b64 <__ssprint_r+0x84>
 8038bba:	6921      	ldr	r1, [r4, #16]
 8038bbc:	9801      	ldr	r0, [sp, #4]
 8038bbe:	f7ff fbcd 	bl	803835c <_free_r>
 8038bc2:	9a01      	ldr	r2, [sp, #4]
 8038bc4:	230c      	movs	r3, #12
 8038bc6:	6013      	str	r3, [r2, #0]
 8038bc8:	89a3      	ldrh	r3, [r4, #12]
 8038bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8038bce:	81a3      	strh	r3, [r4, #12]
 8038bd0:	2300      	movs	r3, #0
 8038bd2:	60bb      	str	r3, [r7, #8]
 8038bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8038bd8:	e78d      	b.n	8038af6 <__ssprint_r+0x16>
	...

08038bdc <_svfiprintf_r>:
 8038bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8038be0:	461d      	mov	r5, r3
 8038be2:	898b      	ldrh	r3, [r1, #12]
 8038be4:	b0bb      	sub	sp, #236	@ 0xec
 8038be6:	468b      	mov	fp, r1
 8038be8:	0619      	lsls	r1, r3, #24
 8038bea:	9001      	str	r0, [sp, #4]
 8038bec:	9202      	str	r2, [sp, #8]
 8038bee:	d514      	bpl.n	8038c1a <_svfiprintf_r+0x3e>
 8038bf0:	f8db 3010 	ldr.w	r3, [fp, #16]
 8038bf4:	b98b      	cbnz	r3, 8038c1a <_svfiprintf_r+0x3e>
 8038bf6:	2140      	movs	r1, #64	@ 0x40
 8038bf8:	f7ff fcc8 	bl	803858c <_malloc_r>
 8038bfc:	f8cb 0000 	str.w	r0, [fp]
 8038c00:	f8cb 0010 	str.w	r0, [fp, #16]
 8038c04:	b930      	cbnz	r0, 8038c14 <_svfiprintf_r+0x38>
 8038c06:	9a01      	ldr	r2, [sp, #4]
 8038c08:	230c      	movs	r3, #12
 8038c0a:	6013      	str	r3, [r2, #0]
 8038c0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8038c10:	9304      	str	r3, [sp, #16]
 8038c12:	e3df      	b.n	80393d4 <_svfiprintf_r+0x7f8>
 8038c14:	2340      	movs	r3, #64	@ 0x40
 8038c16:	f8cb 3014 	str.w	r3, [fp, #20]
 8038c1a:	2300      	movs	r3, #0
 8038c1c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8038c20:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8038c24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8038c28:	ae11      	add	r6, sp, #68	@ 0x44
 8038c2a:	960e      	str	r6, [sp, #56]	@ 0x38
 8038c2c:	9304      	str	r3, [sp, #16]
 8038c2e:	9b02      	ldr	r3, [sp, #8]
 8038c30:	461c      	mov	r4, r3
 8038c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8038c36:	b10a      	cbz	r2, 8038c3c <_svfiprintf_r+0x60>
 8038c38:	2a25      	cmp	r2, #37	@ 0x25
 8038c3a:	d1f9      	bne.n	8038c30 <_svfiprintf_r+0x54>
 8038c3c:	9a02      	ldr	r2, [sp, #8]
 8038c3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8038c40:	1aa7      	subs	r7, r4, r2
 8038c42:	d00c      	beq.n	8038c5e <_svfiprintf_r+0x82>
 8038c44:	443b      	add	r3, r7
 8038c46:	9310      	str	r3, [sp, #64]	@ 0x40
 8038c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8038c4a:	3301      	adds	r3, #1
 8038c4c:	2b07      	cmp	r3, #7
 8038c4e:	e9c6 2700 	strd	r2, r7, [r6]
 8038c52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8038c54:	dc76      	bgt.n	8038d44 <_svfiprintf_r+0x168>
 8038c56:	3608      	adds	r6, #8
 8038c58:	9b04      	ldr	r3, [sp, #16]
 8038c5a:	443b      	add	r3, r7
 8038c5c:	9304      	str	r3, [sp, #16]
 8038c5e:	7823      	ldrb	r3, [r4, #0]
 8038c60:	2b00      	cmp	r3, #0
 8038c62:	f000 83ce 	beq.w	8039402 <_svfiprintf_r+0x826>
 8038c66:	2300      	movs	r3, #0
 8038c68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8038c6c:	3401      	adds	r4, #1
 8038c6e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8038c72:	9200      	str	r2, [sp, #0]
 8038c74:	9303      	str	r3, [sp, #12]
 8038c76:	4699      	mov	r9, r3
 8038c78:	4622      	mov	r2, r4
 8038c7a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8038c7e:	9202      	str	r2, [sp, #8]
 8038c80:	f1a3 0220 	sub.w	r2, r3, #32
 8038c84:	2a5a      	cmp	r2, #90	@ 0x5a
 8038c86:	f200 8318 	bhi.w	80392ba <_svfiprintf_r+0x6de>
 8038c8a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8038c8e:	009a      	.short	0x009a
 8038c90:	03160316 	.word	0x03160316
 8038c94:	031600a2 	.word	0x031600a2
 8038c98:	03160316 	.word	0x03160316
 8038c9c:	03160082 	.word	0x03160082
 8038ca0:	00a50316 	.word	0x00a50316
 8038ca4:	031600af 	.word	0x031600af
 8038ca8:	00b100ac 	.word	0x00b100ac
 8038cac:	00cc0316 	.word	0x00cc0316
 8038cb0:	00cf00cf 	.word	0x00cf00cf
 8038cb4:	00cf00cf 	.word	0x00cf00cf
 8038cb8:	00cf00cf 	.word	0x00cf00cf
 8038cbc:	00cf00cf 	.word	0x00cf00cf
 8038cc0:	031600cf 	.word	0x031600cf
 8038cc4:	03160316 	.word	0x03160316
 8038cc8:	03160316 	.word	0x03160316
 8038ccc:	03160316 	.word	0x03160316
 8038cd0:	03160316 	.word	0x03160316
 8038cd4:	010600f9 	.word	0x010600f9
 8038cd8:	03160316 	.word	0x03160316
 8038cdc:	03160316 	.word	0x03160316
 8038ce0:	03160316 	.word	0x03160316
 8038ce4:	03160316 	.word	0x03160316
 8038ce8:	03160316 	.word	0x03160316
 8038cec:	03160154 	.word	0x03160154
 8038cf0:	03160316 	.word	0x03160316
 8038cf4:	0316019b 	.word	0x0316019b
 8038cf8:	0316027d 	.word	0x0316027d
 8038cfc:	029d0316 	.word	0x029d0316
 8038d00:	03160316 	.word	0x03160316
 8038d04:	03160316 	.word	0x03160316
 8038d08:	03160316 	.word	0x03160316
 8038d0c:	03160316 	.word	0x03160316
 8038d10:	03160316 	.word	0x03160316
 8038d14:	010800f9 	.word	0x010800f9
 8038d18:	03160316 	.word	0x03160316
 8038d1c:	00df0316 	.word	0x00df0316
 8038d20:	00f30108 	.word	0x00f30108
 8038d24:	00ec0316 	.word	0x00ec0316
 8038d28:	01340316 	.word	0x01340316
 8038d2c:	018a0156 	.word	0x018a0156
 8038d30:	031600f3 	.word	0x031600f3
 8038d34:	0098019b 	.word	0x0098019b
 8038d38:	0316027f 	.word	0x0316027f
 8038d3c:	00650316 	.word	0x00650316
 8038d40:	00980316 	.word	0x00980316
 8038d44:	9801      	ldr	r0, [sp, #4]
 8038d46:	aa0e      	add	r2, sp, #56	@ 0x38
 8038d48:	4659      	mov	r1, fp
 8038d4a:	f7ff fec9 	bl	8038ae0 <__ssprint_r>
 8038d4e:	2800      	cmp	r0, #0
 8038d50:	f040 833b 	bne.w	80393ca <_svfiprintf_r+0x7ee>
 8038d54:	ae11      	add	r6, sp, #68	@ 0x44
 8038d56:	e77f      	b.n	8038c58 <_svfiprintf_r+0x7c>
 8038d58:	4a99      	ldr	r2, [pc, #612]	@ (8038fc0 <_svfiprintf_r+0x3e4>)
 8038d5a:	9205      	str	r2, [sp, #20]
 8038d5c:	f019 0220 	ands.w	r2, r9, #32
 8038d60:	f000 8234 	beq.w	80391cc <_svfiprintf_r+0x5f0>
 8038d64:	3507      	adds	r5, #7
 8038d66:	f025 0507 	bic.w	r5, r5, #7
 8038d6a:	462f      	mov	r7, r5
 8038d6c:	686d      	ldr	r5, [r5, #4]
 8038d6e:	f857 4b08 	ldr.w	r4, [r7], #8
 8038d72:	f019 0f01 	tst.w	r9, #1
 8038d76:	d009      	beq.n	8038d8c <_svfiprintf_r+0x1b0>
 8038d78:	ea54 0205 	orrs.w	r2, r4, r5
 8038d7c:	bf1f      	itttt	ne
 8038d7e:	2230      	movne	r2, #48	@ 0x30
 8038d80:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8038d84:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8038d88:	f049 0902 	orrne.w	r9, r9, #2
 8038d8c:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 8038d90:	e113      	b.n	8038fba <_svfiprintf_r+0x3de>
 8038d92:	9801      	ldr	r0, [sp, #4]
 8038d94:	f7fe fb32 	bl	80373fc <_localeconv_r>
 8038d98:	6843      	ldr	r3, [r0, #4]
 8038d9a:	9308      	str	r3, [sp, #32]
 8038d9c:	4618      	mov	r0, r3
 8038d9e:	f7d7 fa7f 	bl	80102a0 <strlen>
 8038da2:	9007      	str	r0, [sp, #28]
 8038da4:	9801      	ldr	r0, [sp, #4]
 8038da6:	f7fe fb29 	bl	80373fc <_localeconv_r>
 8038daa:	6883      	ldr	r3, [r0, #8]
 8038dac:	9306      	str	r3, [sp, #24]
 8038dae:	9b07      	ldr	r3, [sp, #28]
 8038db0:	b12b      	cbz	r3, 8038dbe <_svfiprintf_r+0x1e2>
 8038db2:	9b06      	ldr	r3, [sp, #24]
 8038db4:	b11b      	cbz	r3, 8038dbe <_svfiprintf_r+0x1e2>
 8038db6:	781b      	ldrb	r3, [r3, #0]
 8038db8:	b10b      	cbz	r3, 8038dbe <_svfiprintf_r+0x1e2>
 8038dba:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 8038dbe:	9c02      	ldr	r4, [sp, #8]
 8038dc0:	e75a      	b.n	8038c78 <_svfiprintf_r+0x9c>
 8038dc2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8038dc6:	2b00      	cmp	r3, #0
 8038dc8:	d1f9      	bne.n	8038dbe <_svfiprintf_r+0x1e2>
 8038dca:	2320      	movs	r3, #32
 8038dcc:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8038dd0:	e7f5      	b.n	8038dbe <_svfiprintf_r+0x1e2>
 8038dd2:	f049 0901 	orr.w	r9, r9, #1
 8038dd6:	e7f2      	b.n	8038dbe <_svfiprintf_r+0x1e2>
 8038dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8038ddc:	9303      	str	r3, [sp, #12]
 8038dde:	2b00      	cmp	r3, #0
 8038de0:	daed      	bge.n	8038dbe <_svfiprintf_r+0x1e2>
 8038de2:	425b      	negs	r3, r3
 8038de4:	9303      	str	r3, [sp, #12]
 8038de6:	f049 0904 	orr.w	r9, r9, #4
 8038dea:	e7e8      	b.n	8038dbe <_svfiprintf_r+0x1e2>
 8038dec:	232b      	movs	r3, #43	@ 0x2b
 8038dee:	e7ed      	b.n	8038dcc <_svfiprintf_r+0x1f0>
 8038df0:	9a02      	ldr	r2, [sp, #8]
 8038df2:	f812 3b01 	ldrb.w	r3, [r2], #1
 8038df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8038df8:	d111      	bne.n	8038e1e <_svfiprintf_r+0x242>
 8038dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8038dfe:	9202      	str	r2, [sp, #8]
 8038e00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8038e04:	9300      	str	r3, [sp, #0]
 8038e06:	e7da      	b.n	8038dbe <_svfiprintf_r+0x1e2>
 8038e08:	9b00      	ldr	r3, [sp, #0]
 8038e0a:	fb00 1303 	mla	r3, r0, r3, r1
 8038e0e:	9300      	str	r3, [sp, #0]
 8038e10:	f812 3b01 	ldrb.w	r3, [r2], #1
 8038e14:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8038e18:	2909      	cmp	r1, #9
 8038e1a:	d9f5      	bls.n	8038e08 <_svfiprintf_r+0x22c>
 8038e1c:	e72f      	b.n	8038c7e <_svfiprintf_r+0xa2>
 8038e1e:	2100      	movs	r1, #0
 8038e20:	9100      	str	r1, [sp, #0]
 8038e22:	200a      	movs	r0, #10
 8038e24:	e7f6      	b.n	8038e14 <_svfiprintf_r+0x238>
 8038e26:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 8038e2a:	e7c8      	b.n	8038dbe <_svfiprintf_r+0x1e2>
 8038e2c:	2100      	movs	r1, #0
 8038e2e:	9a02      	ldr	r2, [sp, #8]
 8038e30:	9103      	str	r1, [sp, #12]
 8038e32:	200a      	movs	r0, #10
 8038e34:	9903      	ldr	r1, [sp, #12]
 8038e36:	3b30      	subs	r3, #48	@ 0x30
 8038e38:	fb00 3301 	mla	r3, r0, r1, r3
 8038e3c:	9303      	str	r3, [sp, #12]
 8038e3e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8038e42:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8038e46:	2909      	cmp	r1, #9
 8038e48:	d9f4      	bls.n	8038e34 <_svfiprintf_r+0x258>
 8038e4a:	e718      	b.n	8038c7e <_svfiprintf_r+0xa2>
 8038e4c:	9b02      	ldr	r3, [sp, #8]
 8038e4e:	781b      	ldrb	r3, [r3, #0]
 8038e50:	2b68      	cmp	r3, #104	@ 0x68
 8038e52:	bf01      	itttt	eq
 8038e54:	9b02      	ldreq	r3, [sp, #8]
 8038e56:	3301      	addeq	r3, #1
 8038e58:	9302      	streq	r3, [sp, #8]
 8038e5a:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 8038e5e:	bf18      	it	ne
 8038e60:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 8038e64:	e7ab      	b.n	8038dbe <_svfiprintf_r+0x1e2>
 8038e66:	9b02      	ldr	r3, [sp, #8]
 8038e68:	781b      	ldrb	r3, [r3, #0]
 8038e6a:	2b6c      	cmp	r3, #108	@ 0x6c
 8038e6c:	d105      	bne.n	8038e7a <_svfiprintf_r+0x29e>
 8038e6e:	9b02      	ldr	r3, [sp, #8]
 8038e70:	3301      	adds	r3, #1
 8038e72:	9302      	str	r3, [sp, #8]
 8038e74:	f049 0920 	orr.w	r9, r9, #32
 8038e78:	e7a1      	b.n	8038dbe <_svfiprintf_r+0x1e2>
 8038e7a:	f049 0910 	orr.w	r9, r9, #16
 8038e7e:	e79e      	b.n	8038dbe <_svfiprintf_r+0x1e2>
 8038e80:	462f      	mov	r7, r5
 8038e82:	2400      	movs	r4, #0
 8038e84:	f857 3b04 	ldr.w	r3, [r7], #4
 8038e88:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8038e8c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8038e90:	2301      	movs	r3, #1
 8038e92:	9300      	str	r3, [sp, #0]
 8038e94:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 8038e98:	e0aa      	b.n	8038ff0 <_svfiprintf_r+0x414>
 8038e9a:	f049 0910 	orr.w	r9, r9, #16
 8038e9e:	f019 0f20 	tst.w	r9, #32
 8038ea2:	d011      	beq.n	8038ec8 <_svfiprintf_r+0x2ec>
 8038ea4:	3507      	adds	r5, #7
 8038ea6:	f025 0507 	bic.w	r5, r5, #7
 8038eaa:	462f      	mov	r7, r5
 8038eac:	686d      	ldr	r5, [r5, #4]
 8038eae:	f857 4b08 	ldr.w	r4, [r7], #8
 8038eb2:	2d00      	cmp	r5, #0
 8038eb4:	da06      	bge.n	8038ec4 <_svfiprintf_r+0x2e8>
 8038eb6:	4264      	negs	r4, r4
 8038eb8:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8038ebc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8038ec0:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8038ec4:	2301      	movs	r3, #1
 8038ec6:	e048      	b.n	8038f5a <_svfiprintf_r+0x37e>
 8038ec8:	462f      	mov	r7, r5
 8038eca:	f019 0f10 	tst.w	r9, #16
 8038ece:	f857 5b04 	ldr.w	r5, [r7], #4
 8038ed2:	d002      	beq.n	8038eda <_svfiprintf_r+0x2fe>
 8038ed4:	462c      	mov	r4, r5
 8038ed6:	17ed      	asrs	r5, r5, #31
 8038ed8:	e7eb      	b.n	8038eb2 <_svfiprintf_r+0x2d6>
 8038eda:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8038ede:	d003      	beq.n	8038ee8 <_svfiprintf_r+0x30c>
 8038ee0:	b22c      	sxth	r4, r5
 8038ee2:	f345 35c0 	sbfx	r5, r5, #15, #1
 8038ee6:	e7e4      	b.n	8038eb2 <_svfiprintf_r+0x2d6>
 8038ee8:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8038eec:	d0f2      	beq.n	8038ed4 <_svfiprintf_r+0x2f8>
 8038eee:	b26c      	sxtb	r4, r5
 8038ef0:	f345 15c0 	sbfx	r5, r5, #7, #1
 8038ef4:	e7dd      	b.n	8038eb2 <_svfiprintf_r+0x2d6>
 8038ef6:	f019 0f20 	tst.w	r9, #32
 8038efa:	d007      	beq.n	8038f0c <_svfiprintf_r+0x330>
 8038efc:	9a04      	ldr	r2, [sp, #16]
 8038efe:	682b      	ldr	r3, [r5, #0]
 8038f00:	9904      	ldr	r1, [sp, #16]
 8038f02:	17d2      	asrs	r2, r2, #31
 8038f04:	e9c3 1200 	strd	r1, r2, [r3]
 8038f08:	3504      	adds	r5, #4
 8038f0a:	e690      	b.n	8038c2e <_svfiprintf_r+0x52>
 8038f0c:	f019 0f10 	tst.w	r9, #16
 8038f10:	d003      	beq.n	8038f1a <_svfiprintf_r+0x33e>
 8038f12:	682b      	ldr	r3, [r5, #0]
 8038f14:	9a04      	ldr	r2, [sp, #16]
 8038f16:	601a      	str	r2, [r3, #0]
 8038f18:	e7f6      	b.n	8038f08 <_svfiprintf_r+0x32c>
 8038f1a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8038f1e:	d003      	beq.n	8038f28 <_svfiprintf_r+0x34c>
 8038f20:	682b      	ldr	r3, [r5, #0]
 8038f22:	9a04      	ldr	r2, [sp, #16]
 8038f24:	801a      	strh	r2, [r3, #0]
 8038f26:	e7ef      	b.n	8038f08 <_svfiprintf_r+0x32c>
 8038f28:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8038f2c:	d0f1      	beq.n	8038f12 <_svfiprintf_r+0x336>
 8038f2e:	682b      	ldr	r3, [r5, #0]
 8038f30:	9a04      	ldr	r2, [sp, #16]
 8038f32:	701a      	strb	r2, [r3, #0]
 8038f34:	e7e8      	b.n	8038f08 <_svfiprintf_r+0x32c>
 8038f36:	f049 0910 	orr.w	r9, r9, #16
 8038f3a:	f019 0320 	ands.w	r3, r9, #32
 8038f3e:	d01e      	beq.n	8038f7e <_svfiprintf_r+0x3a2>
 8038f40:	3507      	adds	r5, #7
 8038f42:	f025 0507 	bic.w	r5, r5, #7
 8038f46:	462f      	mov	r7, r5
 8038f48:	686d      	ldr	r5, [r5, #4]
 8038f4a:	f857 4b08 	ldr.w	r4, [r7], #8
 8038f4e:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 8038f52:	2300      	movs	r3, #0
 8038f54:	2200      	movs	r2, #0
 8038f56:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8038f5a:	9a00      	ldr	r2, [sp, #0]
 8038f5c:	3201      	adds	r2, #1
 8038f5e:	f000 8259 	beq.w	8039414 <_svfiprintf_r+0x838>
 8038f62:	ea54 0205 	orrs.w	r2, r4, r5
 8038f66:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 8038f6a:	f040 8258 	bne.w	803941e <_svfiprintf_r+0x842>
 8038f6e:	9a00      	ldr	r2, [sp, #0]
 8038f70:	2a00      	cmp	r2, #0
 8038f72:	f000 8199 	beq.w	80392a8 <_svfiprintf_r+0x6cc>
 8038f76:	2b01      	cmp	r3, #1
 8038f78:	f040 8254 	bne.w	8039424 <_svfiprintf_r+0x848>
 8038f7c:	e13d      	b.n	80391fa <_svfiprintf_r+0x61e>
 8038f7e:	462f      	mov	r7, r5
 8038f80:	f019 0510 	ands.w	r5, r9, #16
 8038f84:	f857 4b04 	ldr.w	r4, [r7], #4
 8038f88:	d001      	beq.n	8038f8e <_svfiprintf_r+0x3b2>
 8038f8a:	461d      	mov	r5, r3
 8038f8c:	e7df      	b.n	8038f4e <_svfiprintf_r+0x372>
 8038f8e:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8038f92:	d001      	beq.n	8038f98 <_svfiprintf_r+0x3bc>
 8038f94:	b2a4      	uxth	r4, r4
 8038f96:	e7da      	b.n	8038f4e <_svfiprintf_r+0x372>
 8038f98:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8038f9c:	d0d7      	beq.n	8038f4e <_svfiprintf_r+0x372>
 8038f9e:	b2e4      	uxtb	r4, r4
 8038fa0:	e7f3      	b.n	8038f8a <_svfiprintf_r+0x3ae>
 8038fa2:	462f      	mov	r7, r5
 8038fa4:	f647 0330 	movw	r3, #30768	@ 0x7830
 8038fa8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8038fac:	f857 4b04 	ldr.w	r4, [r7], #4
 8038fb0:	4b03      	ldr	r3, [pc, #12]	@ (8038fc0 <_svfiprintf_r+0x3e4>)
 8038fb2:	9305      	str	r3, [sp, #20]
 8038fb4:	2500      	movs	r5, #0
 8038fb6:	f049 0902 	orr.w	r9, r9, #2
 8038fba:	2302      	movs	r3, #2
 8038fbc:	e7ca      	b.n	8038f54 <_svfiprintf_r+0x378>
 8038fbe:	bf00      	nop
 8038fc0:	08044c78 	.word	0x08044c78
 8038fc4:	9b00      	ldr	r3, [sp, #0]
 8038fc6:	462f      	mov	r7, r5
 8038fc8:	1c5a      	adds	r2, r3, #1
 8038fca:	f04f 0500 	mov.w	r5, #0
 8038fce:	f857 8b04 	ldr.w	r8, [r7], #4
 8038fd2:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8038fd6:	f000 80d2 	beq.w	803917e <_svfiprintf_r+0x5a2>
 8038fda:	461a      	mov	r2, r3
 8038fdc:	4629      	mov	r1, r5
 8038fde:	4640      	mov	r0, r8
 8038fe0:	f7d7 f90e 	bl	8010200 <memchr>
 8038fe4:	4604      	mov	r4, r0
 8038fe6:	b118      	cbz	r0, 8038ff0 <_svfiprintf_r+0x414>
 8038fe8:	eba0 0308 	sub.w	r3, r0, r8
 8038fec:	9300      	str	r3, [sp, #0]
 8038fee:	462c      	mov	r4, r5
 8038ff0:	9d00      	ldr	r5, [sp, #0]
 8038ff2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8038ff6:	42a5      	cmp	r5, r4
 8038ff8:	bfb8      	it	lt
 8038ffa:	4625      	movlt	r5, r4
 8038ffc:	b103      	cbz	r3, 8039000 <_svfiprintf_r+0x424>
 8038ffe:	3501      	adds	r5, #1
 8039000:	f019 0302 	ands.w	r3, r9, #2
 8039004:	9309      	str	r3, [sp, #36]	@ 0x24
 8039006:	bf18      	it	ne
 8039008:	3502      	addne	r5, #2
 803900a:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 803900e:	930a      	str	r3, [sp, #40]	@ 0x28
 8039010:	d123      	bne.n	803905a <_svfiprintf_r+0x47e>
 8039012:	9b03      	ldr	r3, [sp, #12]
 8039014:	eba3 0a05 	sub.w	sl, r3, r5
 8039018:	f1ba 0f00 	cmp.w	sl, #0
 803901c:	dd1d      	ble.n	803905a <_svfiprintf_r+0x47e>
 803901e:	4bac      	ldr	r3, [pc, #688]	@ (80392d0 <_svfiprintf_r+0x6f4>)
 8039020:	6033      	str	r3, [r6, #0]
 8039022:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8039026:	f1ba 0f10 	cmp.w	sl, #16
 803902a:	f102 0201 	add.w	r2, r2, #1
 803902e:	f106 0008 	add.w	r0, r6, #8
 8039032:	f300 8153 	bgt.w	80392dc <_svfiprintf_r+0x700>
 8039036:	eb0c 010a 	add.w	r1, ip, sl
 803903a:	2a07      	cmp	r2, #7
 803903c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8039040:	f8c6 a004 	str.w	sl, [r6, #4]
 8039044:	f340 815e 	ble.w	8039304 <_svfiprintf_r+0x728>
 8039048:	9801      	ldr	r0, [sp, #4]
 803904a:	aa0e      	add	r2, sp, #56	@ 0x38
 803904c:	4659      	mov	r1, fp
 803904e:	f7ff fd47 	bl	8038ae0 <__ssprint_r>
 8039052:	2800      	cmp	r0, #0
 8039054:	f040 81b9 	bne.w	80393ca <_svfiprintf_r+0x7ee>
 8039058:	ae11      	add	r6, sp, #68	@ 0x44
 803905a:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 803905e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8039062:	b161      	cbz	r1, 803907e <_svfiprintf_r+0x4a2>
 8039064:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8039068:	3301      	adds	r3, #1
 803906a:	6031      	str	r1, [r6, #0]
 803906c:	2101      	movs	r1, #1
 803906e:	440a      	add	r2, r1
 8039070:	2b07      	cmp	r3, #7
 8039072:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8039076:	6071      	str	r1, [r6, #4]
 8039078:	f300 8146 	bgt.w	8039308 <_svfiprintf_r+0x72c>
 803907c:	3608      	adds	r6, #8
 803907e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8039080:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8039084:	b159      	cbz	r1, 803909e <_svfiprintf_r+0x4c2>
 8039086:	a90d      	add	r1, sp, #52	@ 0x34
 8039088:	3301      	adds	r3, #1
 803908a:	6031      	str	r1, [r6, #0]
 803908c:	2102      	movs	r1, #2
 803908e:	440a      	add	r2, r1
 8039090:	2b07      	cmp	r3, #7
 8039092:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8039096:	6071      	str	r1, [r6, #4]
 8039098:	f300 813f 	bgt.w	803931a <_svfiprintf_r+0x73e>
 803909c:	3608      	adds	r6, #8
 803909e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80390a0:	2b80      	cmp	r3, #128	@ 0x80
 80390a2:	d123      	bne.n	80390ec <_svfiprintf_r+0x510>
 80390a4:	9b03      	ldr	r3, [sp, #12]
 80390a6:	eba3 0a05 	sub.w	sl, r3, r5
 80390aa:	f1ba 0f00 	cmp.w	sl, #0
 80390ae:	dd1d      	ble.n	80390ec <_svfiprintf_r+0x510>
 80390b0:	4b88      	ldr	r3, [pc, #544]	@ (80392d4 <_svfiprintf_r+0x6f8>)
 80390b2:	6033      	str	r3, [r6, #0]
 80390b4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80390b8:	f1ba 0f10 	cmp.w	sl, #16
 80390bc:	f102 0201 	add.w	r2, r2, #1
 80390c0:	f106 0008 	add.w	r0, r6, #8
 80390c4:	f300 8132 	bgt.w	803932c <_svfiprintf_r+0x750>
 80390c8:	eb0c 010a 	add.w	r1, ip, sl
 80390cc:	2a07      	cmp	r2, #7
 80390ce:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80390d2:	f8c6 a004 	str.w	sl, [r6, #4]
 80390d6:	f340 813d 	ble.w	8039354 <_svfiprintf_r+0x778>
 80390da:	9801      	ldr	r0, [sp, #4]
 80390dc:	aa0e      	add	r2, sp, #56	@ 0x38
 80390de:	4659      	mov	r1, fp
 80390e0:	f7ff fcfe 	bl	8038ae0 <__ssprint_r>
 80390e4:	2800      	cmp	r0, #0
 80390e6:	f040 8170 	bne.w	80393ca <_svfiprintf_r+0x7ee>
 80390ea:	ae11      	add	r6, sp, #68	@ 0x44
 80390ec:	9b00      	ldr	r3, [sp, #0]
 80390ee:	1ae4      	subs	r4, r4, r3
 80390f0:	2c00      	cmp	r4, #0
 80390f2:	dd1a      	ble.n	803912a <_svfiprintf_r+0x54e>
 80390f4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80390f8:	4876      	ldr	r0, [pc, #472]	@ (80392d4 <_svfiprintf_r+0x6f8>)
 80390fa:	6030      	str	r0, [r6, #0]
 80390fc:	2c10      	cmp	r4, #16
 80390fe:	f103 0301 	add.w	r3, r3, #1
 8039102:	f106 0108 	add.w	r1, r6, #8
 8039106:	f300 8127 	bgt.w	8039358 <_svfiprintf_r+0x77c>
 803910a:	6074      	str	r4, [r6, #4]
 803910c:	2b07      	cmp	r3, #7
 803910e:	4414      	add	r4, r2
 8039110:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8039114:	f340 8131 	ble.w	803937a <_svfiprintf_r+0x79e>
 8039118:	9801      	ldr	r0, [sp, #4]
 803911a:	aa0e      	add	r2, sp, #56	@ 0x38
 803911c:	4659      	mov	r1, fp
 803911e:	f7ff fcdf 	bl	8038ae0 <__ssprint_r>
 8039122:	2800      	cmp	r0, #0
 8039124:	f040 8151 	bne.w	80393ca <_svfiprintf_r+0x7ee>
 8039128:	ae11      	add	r6, sp, #68	@ 0x44
 803912a:	9b00      	ldr	r3, [sp, #0]
 803912c:	9a00      	ldr	r2, [sp, #0]
 803912e:	6073      	str	r3, [r6, #4]
 8039130:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8039132:	f8c6 8000 	str.w	r8, [r6]
 8039136:	4413      	add	r3, r2
 8039138:	9310      	str	r3, [sp, #64]	@ 0x40
 803913a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803913c:	3301      	adds	r3, #1
 803913e:	2b07      	cmp	r3, #7
 8039140:	930f      	str	r3, [sp, #60]	@ 0x3c
 8039142:	f300 811c 	bgt.w	803937e <_svfiprintf_r+0x7a2>
 8039146:	f106 0308 	add.w	r3, r6, #8
 803914a:	f019 0f04 	tst.w	r9, #4
 803914e:	f040 811e 	bne.w	803938e <_svfiprintf_r+0x7b2>
 8039152:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8039156:	42aa      	cmp	r2, r5
 8039158:	bfac      	ite	ge
 803915a:	189b      	addge	r3, r3, r2
 803915c:	195b      	addlt	r3, r3, r5
 803915e:	9304      	str	r3, [sp, #16]
 8039160:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8039162:	b13b      	cbz	r3, 8039174 <_svfiprintf_r+0x598>
 8039164:	9801      	ldr	r0, [sp, #4]
 8039166:	aa0e      	add	r2, sp, #56	@ 0x38
 8039168:	4659      	mov	r1, fp
 803916a:	f7ff fcb9 	bl	8038ae0 <__ssprint_r>
 803916e:	2800      	cmp	r0, #0
 8039170:	f040 812b 	bne.w	80393ca <_svfiprintf_r+0x7ee>
 8039174:	2300      	movs	r3, #0
 8039176:	930f      	str	r3, [sp, #60]	@ 0x3c
 8039178:	463d      	mov	r5, r7
 803917a:	ae11      	add	r6, sp, #68	@ 0x44
 803917c:	e557      	b.n	8038c2e <_svfiprintf_r+0x52>
 803917e:	4640      	mov	r0, r8
 8039180:	f7d7 f88e 	bl	80102a0 <strlen>
 8039184:	9000      	str	r0, [sp, #0]
 8039186:	e732      	b.n	8038fee <_svfiprintf_r+0x412>
 8039188:	f049 0910 	orr.w	r9, r9, #16
 803918c:	f019 0320 	ands.w	r3, r9, #32
 8039190:	d008      	beq.n	80391a4 <_svfiprintf_r+0x5c8>
 8039192:	3507      	adds	r5, #7
 8039194:	f025 0507 	bic.w	r5, r5, #7
 8039198:	462f      	mov	r7, r5
 803919a:	686d      	ldr	r5, [r5, #4]
 803919c:	f857 4b08 	ldr.w	r4, [r7], #8
 80391a0:	2301      	movs	r3, #1
 80391a2:	e6d7      	b.n	8038f54 <_svfiprintf_r+0x378>
 80391a4:	462f      	mov	r7, r5
 80391a6:	f019 0510 	ands.w	r5, r9, #16
 80391aa:	f857 4b04 	ldr.w	r4, [r7], #4
 80391ae:	d001      	beq.n	80391b4 <_svfiprintf_r+0x5d8>
 80391b0:	461d      	mov	r5, r3
 80391b2:	e7f5      	b.n	80391a0 <_svfiprintf_r+0x5c4>
 80391b4:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 80391b8:	d001      	beq.n	80391be <_svfiprintf_r+0x5e2>
 80391ba:	b2a4      	uxth	r4, r4
 80391bc:	e7f0      	b.n	80391a0 <_svfiprintf_r+0x5c4>
 80391be:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 80391c2:	d0ed      	beq.n	80391a0 <_svfiprintf_r+0x5c4>
 80391c4:	b2e4      	uxtb	r4, r4
 80391c6:	e7f3      	b.n	80391b0 <_svfiprintf_r+0x5d4>
 80391c8:	4a43      	ldr	r2, [pc, #268]	@ (80392d8 <_svfiprintf_r+0x6fc>)
 80391ca:	e5c6      	b.n	8038d5a <_svfiprintf_r+0x17e>
 80391cc:	462f      	mov	r7, r5
 80391ce:	f019 0510 	ands.w	r5, r9, #16
 80391d2:	f857 4b04 	ldr.w	r4, [r7], #4
 80391d6:	d001      	beq.n	80391dc <_svfiprintf_r+0x600>
 80391d8:	4615      	mov	r5, r2
 80391da:	e5ca      	b.n	8038d72 <_svfiprintf_r+0x196>
 80391dc:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 80391e0:	d001      	beq.n	80391e6 <_svfiprintf_r+0x60a>
 80391e2:	b2a4      	uxth	r4, r4
 80391e4:	e5c5      	b.n	8038d72 <_svfiprintf_r+0x196>
 80391e6:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 80391ea:	f43f adc2 	beq.w	8038d72 <_svfiprintf_r+0x196>
 80391ee:	b2e4      	uxtb	r4, r4
 80391f0:	e7f2      	b.n	80391d8 <_svfiprintf_r+0x5fc>
 80391f2:	2c0a      	cmp	r4, #10
 80391f4:	f175 0300 	sbcs.w	r3, r5, #0
 80391f8:	d206      	bcs.n	8039208 <_svfiprintf_r+0x62c>
 80391fa:	3430      	adds	r4, #48	@ 0x30
 80391fc:	b2e4      	uxtb	r4, r4
 80391fe:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8039202:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 8039206:	e129      	b.n	803945c <_svfiprintf_r+0x880>
 8039208:	ab3a      	add	r3, sp, #232	@ 0xe8
 803920a:	9309      	str	r3, [sp, #36]	@ 0x24
 803920c:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 8039210:	f04f 0900 	mov.w	r9, #0
 8039214:	930a      	str	r3, [sp, #40]	@ 0x28
 8039216:	220a      	movs	r2, #10
 8039218:	2300      	movs	r3, #0
 803921a:	4620      	mov	r0, r4
 803921c:	4629      	mov	r1, r5
 803921e:	f7d7 fd9b 	bl	8010d58 <__aeabi_uldivmod>
 8039222:	460b      	mov	r3, r1
 8039224:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8039226:	900b      	str	r0, [sp, #44]	@ 0x2c
 8039228:	3230      	adds	r2, #48	@ 0x30
 803922a:	f801 2c01 	strb.w	r2, [r1, #-1]
 803922e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8039230:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8039234:	f109 0901 	add.w	r9, r9, #1
 8039238:	b1e2      	cbz	r2, 8039274 <_svfiprintf_r+0x698>
 803923a:	9a06      	ldr	r2, [sp, #24]
 803923c:	7812      	ldrb	r2, [r2, #0]
 803923e:	454a      	cmp	r2, r9
 8039240:	d118      	bne.n	8039274 <_svfiprintf_r+0x698>
 8039242:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8039246:	d015      	beq.n	8039274 <_svfiprintf_r+0x698>
 8039248:	2c0a      	cmp	r4, #10
 803924a:	f175 0200 	sbcs.w	r2, r5, #0
 803924e:	d311      	bcc.n	8039274 <_svfiprintf_r+0x698>
 8039250:	9309      	str	r3, [sp, #36]	@ 0x24
 8039252:	9b07      	ldr	r3, [sp, #28]
 8039254:	9908      	ldr	r1, [sp, #32]
 8039256:	eba8 0803 	sub.w	r8, r8, r3
 803925a:	461a      	mov	r2, r3
 803925c:	4640      	mov	r0, r8
 803925e:	f7fc ff86 	bl	803616e <strncpy>
 8039262:	9b06      	ldr	r3, [sp, #24]
 8039264:	785a      	ldrb	r2, [r3, #1]
 8039266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8039268:	b172      	cbz	r2, 8039288 <_svfiprintf_r+0x6ac>
 803926a:	9a06      	ldr	r2, [sp, #24]
 803926c:	3201      	adds	r2, #1
 803926e:	9206      	str	r2, [sp, #24]
 8039270:	f04f 0900 	mov.w	r9, #0
 8039274:	2c0a      	cmp	r4, #10
 8039276:	f175 0500 	sbcs.w	r5, r5, #0
 803927a:	f0c0 80ef 	bcc.w	803945c <_svfiprintf_r+0x880>
 803927e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8039280:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8039284:	461d      	mov	r5, r3
 8039286:	e7c6      	b.n	8039216 <_svfiprintf_r+0x63a>
 8039288:	4691      	mov	r9, r2
 803928a:	e7f3      	b.n	8039274 <_svfiprintf_r+0x698>
 803928c:	f004 030f 	and.w	r3, r4, #15
 8039290:	9a05      	ldr	r2, [sp, #20]
 8039292:	0924      	lsrs	r4, r4, #4
 8039294:	5cd3      	ldrb	r3, [r2, r3]
 8039296:	f808 3d01 	strb.w	r3, [r8, #-1]!
 803929a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 803929e:	092d      	lsrs	r5, r5, #4
 80392a0:	ea54 0305 	orrs.w	r3, r4, r5
 80392a4:	d1f2      	bne.n	803928c <_svfiprintf_r+0x6b0>
 80392a6:	e0d9      	b.n	803945c <_svfiprintf_r+0x880>
 80392a8:	b923      	cbnz	r3, 80392b4 <_svfiprintf_r+0x6d8>
 80392aa:	f019 0f01 	tst.w	r9, #1
 80392ae:	d001      	beq.n	80392b4 <_svfiprintf_r+0x6d8>
 80392b0:	2430      	movs	r4, #48	@ 0x30
 80392b2:	e7a4      	b.n	80391fe <_svfiprintf_r+0x622>
 80392b4:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 80392b8:	e0d0      	b.n	803945c <_svfiprintf_r+0x880>
 80392ba:	2b00      	cmp	r3, #0
 80392bc:	f000 80a1 	beq.w	8039402 <_svfiprintf_r+0x826>
 80392c0:	2400      	movs	r4, #0
 80392c2:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80392c6:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80392ca:	462f      	mov	r7, r5
 80392cc:	e5e0      	b.n	8038e90 <_svfiprintf_r+0x2b4>
 80392ce:	bf00      	nop
 80392d0:	080451ab 	.word	0x080451ab
 80392d4:	0804519b 	.word	0x0804519b
 80392d8:	08044c89 	.word	0x08044c89
 80392dc:	2110      	movs	r1, #16
 80392de:	6071      	str	r1, [r6, #4]
 80392e0:	2a07      	cmp	r2, #7
 80392e2:	4461      	add	r1, ip
 80392e4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80392e8:	dd08      	ble.n	80392fc <_svfiprintf_r+0x720>
 80392ea:	9801      	ldr	r0, [sp, #4]
 80392ec:	aa0e      	add	r2, sp, #56	@ 0x38
 80392ee:	4659      	mov	r1, fp
 80392f0:	f7ff fbf6 	bl	8038ae0 <__ssprint_r>
 80392f4:	2800      	cmp	r0, #0
 80392f6:	d168      	bne.n	80393ca <_svfiprintf_r+0x7ee>
 80392f8:	4b5c      	ldr	r3, [pc, #368]	@ (803946c <_svfiprintf_r+0x890>)
 80392fa:	a811      	add	r0, sp, #68	@ 0x44
 80392fc:	f1aa 0a10 	sub.w	sl, sl, #16
 8039300:	4606      	mov	r6, r0
 8039302:	e68d      	b.n	8039020 <_svfiprintf_r+0x444>
 8039304:	4606      	mov	r6, r0
 8039306:	e6a8      	b.n	803905a <_svfiprintf_r+0x47e>
 8039308:	9801      	ldr	r0, [sp, #4]
 803930a:	aa0e      	add	r2, sp, #56	@ 0x38
 803930c:	4659      	mov	r1, fp
 803930e:	f7ff fbe7 	bl	8038ae0 <__ssprint_r>
 8039312:	2800      	cmp	r0, #0
 8039314:	d159      	bne.n	80393ca <_svfiprintf_r+0x7ee>
 8039316:	ae11      	add	r6, sp, #68	@ 0x44
 8039318:	e6b1      	b.n	803907e <_svfiprintf_r+0x4a2>
 803931a:	9801      	ldr	r0, [sp, #4]
 803931c:	aa0e      	add	r2, sp, #56	@ 0x38
 803931e:	4659      	mov	r1, fp
 8039320:	f7ff fbde 	bl	8038ae0 <__ssprint_r>
 8039324:	2800      	cmp	r0, #0
 8039326:	d150      	bne.n	80393ca <_svfiprintf_r+0x7ee>
 8039328:	ae11      	add	r6, sp, #68	@ 0x44
 803932a:	e6b8      	b.n	803909e <_svfiprintf_r+0x4c2>
 803932c:	2110      	movs	r1, #16
 803932e:	6071      	str	r1, [r6, #4]
 8039330:	2a07      	cmp	r2, #7
 8039332:	4461      	add	r1, ip
 8039334:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8039338:	dd08      	ble.n	803934c <_svfiprintf_r+0x770>
 803933a:	9801      	ldr	r0, [sp, #4]
 803933c:	aa0e      	add	r2, sp, #56	@ 0x38
 803933e:	4659      	mov	r1, fp
 8039340:	f7ff fbce 	bl	8038ae0 <__ssprint_r>
 8039344:	2800      	cmp	r0, #0
 8039346:	d140      	bne.n	80393ca <_svfiprintf_r+0x7ee>
 8039348:	4b49      	ldr	r3, [pc, #292]	@ (8039470 <_svfiprintf_r+0x894>)
 803934a:	a811      	add	r0, sp, #68	@ 0x44
 803934c:	f1aa 0a10 	sub.w	sl, sl, #16
 8039350:	4606      	mov	r6, r0
 8039352:	e6ae      	b.n	80390b2 <_svfiprintf_r+0x4d6>
 8039354:	4606      	mov	r6, r0
 8039356:	e6c9      	b.n	80390ec <_svfiprintf_r+0x510>
 8039358:	2010      	movs	r0, #16
 803935a:	4402      	add	r2, r0
 803935c:	2b07      	cmp	r3, #7
 803935e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8039362:	6070      	str	r0, [r6, #4]
 8039364:	dd06      	ble.n	8039374 <_svfiprintf_r+0x798>
 8039366:	9801      	ldr	r0, [sp, #4]
 8039368:	aa0e      	add	r2, sp, #56	@ 0x38
 803936a:	4659      	mov	r1, fp
 803936c:	f7ff fbb8 	bl	8038ae0 <__ssprint_r>
 8039370:	bb58      	cbnz	r0, 80393ca <_svfiprintf_r+0x7ee>
 8039372:	a911      	add	r1, sp, #68	@ 0x44
 8039374:	3c10      	subs	r4, #16
 8039376:	460e      	mov	r6, r1
 8039378:	e6bc      	b.n	80390f4 <_svfiprintf_r+0x518>
 803937a:	460e      	mov	r6, r1
 803937c:	e6d5      	b.n	803912a <_svfiprintf_r+0x54e>
 803937e:	9801      	ldr	r0, [sp, #4]
 8039380:	aa0e      	add	r2, sp, #56	@ 0x38
 8039382:	4659      	mov	r1, fp
 8039384:	f7ff fbac 	bl	8038ae0 <__ssprint_r>
 8039388:	b9f8      	cbnz	r0, 80393ca <_svfiprintf_r+0x7ee>
 803938a:	ab11      	add	r3, sp, #68	@ 0x44
 803938c:	e6dd      	b.n	803914a <_svfiprintf_r+0x56e>
 803938e:	9a03      	ldr	r2, [sp, #12]
 8039390:	1b54      	subs	r4, r2, r5
 8039392:	2c00      	cmp	r4, #0
 8039394:	f77f aedd 	ble.w	8039152 <_svfiprintf_r+0x576>
 8039398:	4e34      	ldr	r6, [pc, #208]	@ (803946c <_svfiprintf_r+0x890>)
 803939a:	f04f 0810 	mov.w	r8, #16
 803939e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 80393a2:	2c10      	cmp	r4, #16
 80393a4:	f102 0201 	add.w	r2, r2, #1
 80393a8:	601e      	str	r6, [r3, #0]
 80393aa:	dc17      	bgt.n	80393dc <_svfiprintf_r+0x800>
 80393ac:	605c      	str	r4, [r3, #4]
 80393ae:	2a07      	cmp	r2, #7
 80393b0:	440c      	add	r4, r1
 80393b2:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 80393b6:	f77f aecc 	ble.w	8039152 <_svfiprintf_r+0x576>
 80393ba:	9801      	ldr	r0, [sp, #4]
 80393bc:	aa0e      	add	r2, sp, #56	@ 0x38
 80393be:	4659      	mov	r1, fp
 80393c0:	f7ff fb8e 	bl	8038ae0 <__ssprint_r>
 80393c4:	2800      	cmp	r0, #0
 80393c6:	f43f aec4 	beq.w	8039152 <_svfiprintf_r+0x576>
 80393ca:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80393ce:	065b      	lsls	r3, r3, #25
 80393d0:	f53f ac1c 	bmi.w	8038c0c <_svfiprintf_r+0x30>
 80393d4:	9804      	ldr	r0, [sp, #16]
 80393d6:	b03b      	add	sp, #236	@ 0xec
 80393d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80393dc:	3110      	adds	r1, #16
 80393de:	2a07      	cmp	r2, #7
 80393e0:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80393e4:	f8c3 8004 	str.w	r8, [r3, #4]
 80393e8:	dc02      	bgt.n	80393f0 <_svfiprintf_r+0x814>
 80393ea:	3308      	adds	r3, #8
 80393ec:	3c10      	subs	r4, #16
 80393ee:	e7d6      	b.n	803939e <_svfiprintf_r+0x7c2>
 80393f0:	9801      	ldr	r0, [sp, #4]
 80393f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80393f4:	4659      	mov	r1, fp
 80393f6:	f7ff fb73 	bl	8038ae0 <__ssprint_r>
 80393fa:	2800      	cmp	r0, #0
 80393fc:	d1e5      	bne.n	80393ca <_svfiprintf_r+0x7ee>
 80393fe:	ab11      	add	r3, sp, #68	@ 0x44
 8039400:	e7f4      	b.n	80393ec <_svfiprintf_r+0x810>
 8039402:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8039404:	2b00      	cmp	r3, #0
 8039406:	d0e0      	beq.n	80393ca <_svfiprintf_r+0x7ee>
 8039408:	9801      	ldr	r0, [sp, #4]
 803940a:	aa0e      	add	r2, sp, #56	@ 0x38
 803940c:	4659      	mov	r1, fp
 803940e:	f7ff fb67 	bl	8038ae0 <__ssprint_r>
 8039412:	e7da      	b.n	80393ca <_svfiprintf_r+0x7ee>
 8039414:	ea54 0205 	orrs.w	r2, r4, r5
 8039418:	46ca      	mov	sl, r9
 803941a:	f43f adac 	beq.w	8038f76 <_svfiprintf_r+0x39a>
 803941e:	2b01      	cmp	r3, #1
 8039420:	f43f aee7 	beq.w	80391f2 <_svfiprintf_r+0x616>
 8039424:	2b02      	cmp	r3, #2
 8039426:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 803942a:	f43f af2f 	beq.w	803928c <_svfiprintf_r+0x6b0>
 803942e:	f004 0307 	and.w	r3, r4, #7
 8039432:	08e4      	lsrs	r4, r4, #3
 8039434:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8039438:	08ed      	lsrs	r5, r5, #3
 803943a:	3330      	adds	r3, #48	@ 0x30
 803943c:	ea54 0105 	orrs.w	r1, r4, r5
 8039440:	4642      	mov	r2, r8
 8039442:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8039446:	d1f2      	bne.n	803942e <_svfiprintf_r+0x852>
 8039448:	f01a 0f01 	tst.w	sl, #1
 803944c:	d006      	beq.n	803945c <_svfiprintf_r+0x880>
 803944e:	2b30      	cmp	r3, #48	@ 0x30
 8039450:	d004      	beq.n	803945c <_svfiprintf_r+0x880>
 8039452:	2330      	movs	r3, #48	@ 0x30
 8039454:	f808 3c01 	strb.w	r3, [r8, #-1]
 8039458:	f1a2 0802 	sub.w	r8, r2, #2
 803945c:	ab3a      	add	r3, sp, #232	@ 0xe8
 803945e:	eba3 0308 	sub.w	r3, r3, r8
 8039462:	9c00      	ldr	r4, [sp, #0]
 8039464:	9300      	str	r3, [sp, #0]
 8039466:	46d1      	mov	r9, sl
 8039468:	e5c2      	b.n	8038ff0 <_svfiprintf_r+0x414>
 803946a:	bf00      	nop
 803946c:	080451ab 	.word	0x080451ab
 8039470:	0804519b 	.word	0x0804519b

08039474 <_sungetc_r>:
 8039474:	b538      	push	{r3, r4, r5, lr}
 8039476:	1c4b      	adds	r3, r1, #1
 8039478:	4614      	mov	r4, r2
 803947a:	d103      	bne.n	8039484 <_sungetc_r+0x10>
 803947c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8039480:	4628      	mov	r0, r5
 8039482:	bd38      	pop	{r3, r4, r5, pc}
 8039484:	8993      	ldrh	r3, [r2, #12]
 8039486:	f023 0320 	bic.w	r3, r3, #32
 803948a:	8193      	strh	r3, [r2, #12]
 803948c:	6853      	ldr	r3, [r2, #4]
 803948e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8039490:	b2cd      	uxtb	r5, r1
 8039492:	b18a      	cbz	r2, 80394b8 <_sungetc_r+0x44>
 8039494:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8039496:	429a      	cmp	r2, r3
 8039498:	dd08      	ble.n	80394ac <_sungetc_r+0x38>
 803949a:	6823      	ldr	r3, [r4, #0]
 803949c:	1e5a      	subs	r2, r3, #1
 803949e:	6022      	str	r2, [r4, #0]
 80394a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80394a4:	6863      	ldr	r3, [r4, #4]
 80394a6:	3301      	adds	r3, #1
 80394a8:	6063      	str	r3, [r4, #4]
 80394aa:	e7e9      	b.n	8039480 <_sungetc_r+0xc>
 80394ac:	4621      	mov	r1, r4
 80394ae:	f005 f8a7 	bl	803e600 <__submore>
 80394b2:	2800      	cmp	r0, #0
 80394b4:	d0f1      	beq.n	803949a <_sungetc_r+0x26>
 80394b6:	e7e1      	b.n	803947c <_sungetc_r+0x8>
 80394b8:	6921      	ldr	r1, [r4, #16]
 80394ba:	6822      	ldr	r2, [r4, #0]
 80394bc:	b141      	cbz	r1, 80394d0 <_sungetc_r+0x5c>
 80394be:	4291      	cmp	r1, r2
 80394c0:	d206      	bcs.n	80394d0 <_sungetc_r+0x5c>
 80394c2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80394c6:	42a9      	cmp	r1, r5
 80394c8:	d102      	bne.n	80394d0 <_sungetc_r+0x5c>
 80394ca:	3a01      	subs	r2, #1
 80394cc:	6022      	str	r2, [r4, #0]
 80394ce:	e7ea      	b.n	80394a6 <_sungetc_r+0x32>
 80394d0:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 80394d4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80394d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80394da:	2303      	movs	r3, #3
 80394dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80394de:	4623      	mov	r3, r4
 80394e0:	f803 5f42 	strb.w	r5, [r3, #66]!
 80394e4:	6023      	str	r3, [r4, #0]
 80394e6:	2301      	movs	r3, #1
 80394e8:	e7de      	b.n	80394a8 <_sungetc_r+0x34>

080394ea <__ssrefill_r>:
 80394ea:	b510      	push	{r4, lr}
 80394ec:	460c      	mov	r4, r1
 80394ee:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 80394f0:	b169      	cbz	r1, 803950e <__ssrefill_r+0x24>
 80394f2:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80394f6:	4299      	cmp	r1, r3
 80394f8:	d001      	beq.n	80394fe <__ssrefill_r+0x14>
 80394fa:	f7fe ff2f 	bl	803835c <_free_r>
 80394fe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8039500:	6063      	str	r3, [r4, #4]
 8039502:	2000      	movs	r0, #0
 8039504:	6320      	str	r0, [r4, #48]	@ 0x30
 8039506:	b113      	cbz	r3, 803950e <__ssrefill_r+0x24>
 8039508:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 803950a:	6023      	str	r3, [r4, #0]
 803950c:	bd10      	pop	{r4, pc}
 803950e:	6923      	ldr	r3, [r4, #16]
 8039510:	6023      	str	r3, [r4, #0]
 8039512:	2300      	movs	r3, #0
 8039514:	6063      	str	r3, [r4, #4]
 8039516:	89a3      	ldrh	r3, [r4, #12]
 8039518:	f043 0320 	orr.w	r3, r3, #32
 803951c:	81a3      	strh	r3, [r4, #12]
 803951e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8039522:	e7f3      	b.n	803950c <__ssrefill_r+0x22>

08039524 <_sfread_r>:
 8039524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8039528:	461f      	mov	r7, r3
 803952a:	4613      	mov	r3, r2
 803952c:	437b      	muls	r3, r7
 803952e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8039530:	9000      	str	r0, [sp, #0]
 8039532:	4688      	mov	r8, r1
 8039534:	4691      	mov	r9, r2
 8039536:	d028      	beq.n	803958a <_sfread_r+0x66>
 8039538:	461e      	mov	r6, r3
 803953a:	f04f 0b00 	mov.w	fp, #0
 803953e:	e9d4 1500 	ldrd	r1, r5, [r4]
 8039542:	42b5      	cmp	r5, r6
 8039544:	d30b      	bcc.n	803955e <_sfread_r+0x3a>
 8039546:	4632      	mov	r2, r6
 8039548:	4640      	mov	r0, r8
 803954a:	f7fe f805 	bl	8037558 <memcpy>
 803954e:	6862      	ldr	r2, [r4, #4]
 8039550:	6821      	ldr	r1, [r4, #0]
 8039552:	1b92      	subs	r2, r2, r6
 8039554:	4431      	add	r1, r6
 8039556:	6062      	str	r2, [r4, #4]
 8039558:	6021      	str	r1, [r4, #0]
 803955a:	463b      	mov	r3, r7
 803955c:	e015      	b.n	803958a <_sfread_r+0x66>
 803955e:	462a      	mov	r2, r5
 8039560:	4640      	mov	r0, r8
 8039562:	9301      	str	r3, [sp, #4]
 8039564:	f7fd fff8 	bl	8037558 <memcpy>
 8039568:	6822      	ldr	r2, [r4, #0]
 803956a:	9800      	ldr	r0, [sp, #0]
 803956c:	442a      	add	r2, r5
 803956e:	e9c4 2b00 	strd	r2, fp, [r4]
 8039572:	4621      	mov	r1, r4
 8039574:	f7ff ffb9 	bl	80394ea <__ssrefill_r>
 8039578:	44a8      	add	r8, r5
 803957a:	9b01      	ldr	r3, [sp, #4]
 803957c:	eba6 0a05 	sub.w	sl, r6, r5
 8039580:	b138      	cbz	r0, 8039592 <_sfread_r+0x6e>
 8039582:	441d      	add	r5, r3
 8039584:	1bad      	subs	r5, r5, r6
 8039586:	fbb5 f3f9 	udiv	r3, r5, r9
 803958a:	4618      	mov	r0, r3
 803958c:	b003      	add	sp, #12
 803958e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8039592:	4656      	mov	r6, sl
 8039594:	e7d3      	b.n	803953e <_sfread_r+0x1a>
	...

08039598 <__ssvfiscanf_r>:
 8039598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803959c:	b0df      	sub	sp, #380	@ 0x17c
 803959e:	af02      	add	r7, sp, #8
 80395a0:	460c      	mov	r4, r1
 80395a2:	623b      	str	r3, [r7, #32]
 80395a4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80395a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80395aa:	049d      	lsls	r5, r3, #18
 80395ac:	60ba      	str	r2, [r7, #8]
 80395ae:	d406      	bmi.n	80395be <__ssvfiscanf_r+0x26>
 80395b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80395b4:	818b      	strh	r3, [r1, #12]
 80395b6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80395b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80395bc:	664b      	str	r3, [r1, #100]	@ 0x64
 80395be:	2300      	movs	r3, #0
 80395c0:	e9c7 3305 	strd	r3, r3, [r7, #20]
 80395c4:	60fb      	str	r3, [r7, #12]
 80395c6:	469b      	mov	fp, r3
 80395c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80395ca:	61fb      	str	r3, [r7, #28]
 80395cc:	e005      	b.n	80395da <__ssvfiscanf_r+0x42>
 80395ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80395d0:	4621      	mov	r1, r4
 80395d2:	f7ff ff8a 	bl	80394ea <__ssrefill_r>
 80395d6:	b168      	cbz	r0, 80395f4 <__ssvfiscanf_r+0x5c>
 80395d8:	60bd      	str	r5, [r7, #8]
 80395da:	68bd      	ldr	r5, [r7, #8]
 80395dc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80395e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80395e2:	b333      	cbz	r3, 8039632 <__ssvfiscanf_r+0x9a>
 80395e4:	4a75      	ldr	r2, [pc, #468]	@ (80397bc <__ssvfiscanf_r+0x224>)
 80395e6:	5cd6      	ldrb	r6, [r2, r3]
 80395e8:	f016 0608 	ands.w	r6, r6, #8
 80395ec:	d011      	beq.n	8039612 <__ssvfiscanf_r+0x7a>
 80395ee:	6863      	ldr	r3, [r4, #4]
 80395f0:	2b00      	cmp	r3, #0
 80395f2:	ddec      	ble.n	80395ce <__ssvfiscanf_r+0x36>
 80395f4:	6823      	ldr	r3, [r4, #0]
 80395f6:	4971      	ldr	r1, [pc, #452]	@ (80397bc <__ssvfiscanf_r+0x224>)
 80395f8:	781a      	ldrb	r2, [r3, #0]
 80395fa:	5c8a      	ldrb	r2, [r1, r2]
 80395fc:	0710      	lsls	r0, r2, #28
 80395fe:	d5eb      	bpl.n	80395d8 <__ssvfiscanf_r+0x40>
 8039600:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8039602:	3201      	adds	r2, #1
 8039604:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8039606:	6862      	ldr	r2, [r4, #4]
 8039608:	3301      	adds	r3, #1
 803960a:	3a01      	subs	r2, #1
 803960c:	6062      	str	r2, [r4, #4]
 803960e:	6023      	str	r3, [r4, #0]
 8039610:	e7ed      	b.n	80395ee <__ssvfiscanf_r+0x56>
 8039612:	2b25      	cmp	r3, #37	@ 0x25
 8039614:	d15f      	bne.n	80396d6 <__ssvfiscanf_r+0x13e>
 8039616:	62be      	str	r6, [r7, #40]	@ 0x28
 8039618:	462a      	mov	r2, r5
 803961a:	f812 3b01 	ldrb.w	r3, [r2], #1
 803961e:	60ba      	str	r2, [r7, #8]
 8039620:	2b7a      	cmp	r3, #122	@ 0x7a
 8039622:	d806      	bhi.n	8039632 <__ssvfiscanf_r+0x9a>
 8039624:	2b42      	cmp	r3, #66	@ 0x42
 8039626:	d809      	bhi.n	803963c <__ssvfiscanf_r+0xa4>
 8039628:	2b2a      	cmp	r3, #42	@ 0x2a
 803962a:	d079      	beq.n	8039720 <__ssvfiscanf_r+0x188>
 803962c:	d844      	bhi.n	80396b8 <__ssvfiscanf_r+0x120>
 803962e:	2b25      	cmp	r3, #37	@ 0x25
 8039630:	d050      	beq.n	80396d4 <__ssvfiscanf_r+0x13c>
 8039632:	f1bb 0f00 	cmp.w	fp, #0
 8039636:	f000 810e 	beq.w	8039856 <__ssvfiscanf_r+0x2be>
 803963a:	e107      	b.n	803984c <__ssvfiscanf_r+0x2b4>
 803963c:	3b43      	subs	r3, #67	@ 0x43
 803963e:	2b37      	cmp	r3, #55	@ 0x37
 8039640:	f200 80fd 	bhi.w	803983e <__ssvfiscanf_r+0x2a6>
 8039644:	e8df f013 	tbh	[pc, r3, lsl #1]
 8039648:	00a40117 	.word	0x00a40117
 803964c:	00fb00fb 	.word	0x00fb00fb
 8039650:	00fb00fb 	.word	0x00fb00fb
 8039654:	00fb00fb 	.word	0x00fb00fb
 8039658:	008e00fb 	.word	0x008e00fb
 803965c:	00fb00fb 	.word	0x00fb00fb
 8039660:	00fb00a8 	.word	0x00fb00a8
 8039664:	00fb00fb 	.word	0x00fb00fb
 8039668:	00fb00c0 	.word	0x00fb00c0
 803966c:	00fb00fb 	.word	0x00fb00fb
 8039670:	00b400fb 	.word	0x00b400fb
 8039674:	00fb00fb 	.word	0x00fb00fb
 8039678:	00fb010d 	.word	0x00fb010d
 803967c:	00fb00fb 	.word	0x00fb00fb
 8039680:	00fb00fb 	.word	0x00fb00fb
 8039684:	00fb00fb 	.word	0x00fb00fb
 8039688:	00a60119 	.word	0x00a60119
 803968c:	00fb00fb 	.word	0x00fb00fb
 8039690:	008100fb 	.word	0x008100fb
 8039694:	008e013e 	.word	0x008e013e
 8039698:	007300fb 	.word	0x007300fb
 803969c:	01200095 	.word	0x01200095
 80396a0:	011d00aa 	.word	0x011d00aa
 80396a4:	00fb00fb 	.word	0x00fb00fb
 80396a8:	009200c2 	.word	0x009200c2
 80396ac:	00fb00b0 	.word	0x00fb00b0
 80396b0:	00b400fb 	.word	0x00b400fb
 80396b4:	009200fb 	.word	0x009200fb
 80396b8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80396bc:	2a09      	cmp	r2, #9
 80396be:	d8b8      	bhi.n	8039632 <__ssvfiscanf_r+0x9a>
 80396c0:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 80396c4:	d1b5      	bne.n	8039632 <__ssvfiscanf_r+0x9a>
 80396c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80396c8:	220a      	movs	r2, #10
 80396ca:	fb02 3301 	mla	r3, r2, r1, r3
 80396ce:	3b30      	subs	r3, #48	@ 0x30
 80396d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80396d2:	e02a      	b.n	803972a <__ssvfiscanf_r+0x192>
 80396d4:	68bd      	ldr	r5, [r7, #8]
 80396d6:	6863      	ldr	r3, [r4, #4]
 80396d8:	2b00      	cmp	r3, #0
 80396da:	dd0e      	ble.n	80396fa <__ssvfiscanf_r+0x162>
 80396dc:	6823      	ldr	r3, [r4, #0]
 80396de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80396e2:	7819      	ldrb	r1, [r3, #0]
 80396e4:	4291      	cmp	r1, r2
 80396e6:	d1a4      	bne.n	8039632 <__ssvfiscanf_r+0x9a>
 80396e8:	3301      	adds	r3, #1
 80396ea:	6862      	ldr	r2, [r4, #4]
 80396ec:	6023      	str	r3, [r4, #0]
 80396ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80396f0:	3a01      	subs	r2, #1
 80396f2:	3301      	adds	r3, #1
 80396f4:	6062      	str	r2, [r4, #4]
 80396f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80396f8:	e76e      	b.n	80395d8 <__ssvfiscanf_r+0x40>
 80396fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80396fc:	4621      	mov	r1, r4
 80396fe:	f7ff fef4 	bl	80394ea <__ssrefill_r>
 8039702:	2800      	cmp	r0, #0
 8039704:	d0ea      	beq.n	80396dc <__ssvfiscanf_r+0x144>
 8039706:	69fb      	ldr	r3, [r7, #28]
 8039708:	b113      	cbz	r3, 8039710 <__ssvfiscanf_r+0x178>
 803970a:	89a3      	ldrh	r3, [r4, #12]
 803970c:	065b      	lsls	r3, r3, #25
 803970e:	d590      	bpl.n	8039632 <__ssvfiscanf_r+0x9a>
 8039710:	f1bb 0f00 	cmp.w	fp, #0
 8039714:	f040 8654 	bne.w	803a3c0 <__ssvfiscanf_r+0xe28>
 8039718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803971c:	61fb      	str	r3, [r7, #28]
 803971e:	e09a      	b.n	8039856 <__ssvfiscanf_r+0x2be>
 8039720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039722:	4333      	orrs	r3, r6
 8039724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039726:	d184      	bne.n	8039632 <__ssvfiscanf_r+0x9a>
 8039728:	2610      	movs	r6, #16
 803972a:	68bd      	ldr	r5, [r7, #8]
 803972c:	e774      	b.n	8039618 <__ssvfiscanf_r+0x80>
 803972e:	0731      	lsls	r1, r6, #28
 8039730:	f47f af7f 	bne.w	8039632 <__ssvfiscanf_r+0x9a>
 8039734:	786b      	ldrb	r3, [r5, #1]
 8039736:	2b6c      	cmp	r3, #108	@ 0x6c
 8039738:	d104      	bne.n	8039744 <__ssvfiscanf_r+0x1ac>
 803973a:	1cab      	adds	r3, r5, #2
 803973c:	60bb      	str	r3, [r7, #8]
 803973e:	f046 0602 	orr.w	r6, r6, #2
 8039742:	e7f2      	b.n	803972a <__ssvfiscanf_r+0x192>
 8039744:	f046 0601 	orr.w	r6, r6, #1
 8039748:	e7ef      	b.n	803972a <__ssvfiscanf_r+0x192>
 803974a:	0732      	lsls	r2, r6, #28
 803974c:	f47f af71 	bne.w	8039632 <__ssvfiscanf_r+0x9a>
 8039750:	786b      	ldrb	r3, [r5, #1]
 8039752:	2b68      	cmp	r3, #104	@ 0x68
 8039754:	bf03      	ittte	eq
 8039756:	1cab      	addeq	r3, r5, #2
 8039758:	60bb      	streq	r3, [r7, #8]
 803975a:	f046 0608 	orreq.w	r6, r6, #8
 803975e:	f046 0604 	orrne.w	r6, r6, #4
 8039762:	e7e2      	b.n	803972a <__ssvfiscanf_r+0x192>
 8039764:	0733      	lsls	r3, r6, #28
 8039766:	f47f af64 	bne.w	8039632 <__ssvfiscanf_r+0x9a>
 803976a:	e7e8      	b.n	803973e <__ssvfiscanf_r+0x1a6>
 803976c:	0735      	lsls	r5, r6, #28
 803976e:	d0dc      	beq.n	803972a <__ssvfiscanf_r+0x192>
 8039770:	e75f      	b.n	8039632 <__ssvfiscanf_r+0x9a>
 8039772:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8039776:	f47f af5c 	bne.w	8039632 <__ssvfiscanf_r+0x9a>
 803977a:	f1bb 0f00 	cmp.w	fp, #0
 803977e:	d104      	bne.n	803978a <__ssvfiscanf_r+0x1f2>
 8039780:	b082      	sub	sp, #8
 8039782:	f10d 0b08 	add.w	fp, sp, #8
 8039786:	e9cb 3300 	strd	r3, r3, [fp]
 803978a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 803978e:	e7cc      	b.n	803972a <__ssvfiscanf_r+0x192>
 8039790:	f046 0601 	orr.w	r6, r6, #1
 8039794:	4b0a      	ldr	r3, [pc, #40]	@ (80397c0 <__ssvfiscanf_r+0x228>)
 8039796:	e008      	b.n	80397aa <__ssvfiscanf_r+0x212>
 8039798:	f046 0601 	orr.w	r6, r6, #1
 803979c:	4b09      	ldr	r3, [pc, #36]	@ (80397c4 <__ssvfiscanf_r+0x22c>)
 803979e:	60fb      	str	r3, [r7, #12]
 80397a0:	2308      	movs	r3, #8
 80397a2:	617b      	str	r3, [r7, #20]
 80397a4:	2503      	movs	r5, #3
 80397a6:	e012      	b.n	80397ce <__ssvfiscanf_r+0x236>
 80397a8:	4b06      	ldr	r3, [pc, #24]	@ (80397c4 <__ssvfiscanf_r+0x22c>)
 80397aa:	60fb      	str	r3, [r7, #12]
 80397ac:	230a      	movs	r3, #10
 80397ae:	e7f8      	b.n	80397a2 <__ssvfiscanf_r+0x20a>
 80397b0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 80397b4:	4b03      	ldr	r3, [pc, #12]	@ (80397c4 <__ssvfiscanf_r+0x22c>)
 80397b6:	60fb      	str	r3, [r7, #12]
 80397b8:	2310      	movs	r3, #16
 80397ba:	e7f2      	b.n	80397a2 <__ssvfiscanf_r+0x20a>
 80397bc:	08045025 	.word	0x08045025
 80397c0:	080357e9 	.word	0x080357e9
 80397c4:	0803e5e9 	.word	0x0803e5e9
 80397c8:	f046 0601 	orr.w	r6, r6, #1
 80397cc:	2502      	movs	r5, #2
 80397ce:	6863      	ldr	r3, [r4, #4]
 80397d0:	2b00      	cmp	r3, #0
 80397d2:	dd7b      	ble.n	80398cc <__ssvfiscanf_r+0x334>
 80397d4:	0671      	lsls	r1, r6, #25
 80397d6:	d407      	bmi.n	80397e8 <__ssvfiscanf_r+0x250>
 80397d8:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 8039b64 <__ssvfiscanf_r+0x5cc>
 80397dc:	6823      	ldr	r3, [r4, #0]
 80397de:	781a      	ldrb	r2, [r3, #0]
 80397e0:	f818 2002 	ldrb.w	r2, [r8, r2]
 80397e4:	0712      	lsls	r2, r2, #28
 80397e6:	d479      	bmi.n	80398dc <__ssvfiscanf_r+0x344>
 80397e8:	2d02      	cmp	r5, #2
 80397ea:	f000 836f 	beq.w	8039ecc <__ssvfiscanf_r+0x934>
 80397ee:	2d03      	cmp	r5, #3
 80397f0:	f000 84f6 	beq.w	803a1e0 <__ssvfiscanf_r+0xc48>
 80397f4:	f006 0310 	and.w	r3, r6, #16
 80397f8:	2d01      	cmp	r5, #1
 80397fa:	613b      	str	r3, [r7, #16]
 80397fc:	f006 0501 	and.w	r5, r6, #1
 8039800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039802:	f000 81b1 	beq.w	8039b68 <__ssvfiscanf_r+0x5d0>
 8039806:	2b01      	cmp	r3, #1
 8039808:	bf38      	it	cc
 803980a:	2301      	movcc	r3, #1
 803980c:	4698      	mov	r8, r3
 803980e:	693b      	ldr	r3, [r7, #16]
 8039810:	2d00      	cmp	r5, #0
 8039812:	f000 813b 	beq.w	8039a8c <__ssvfiscanf_r+0x4f4>
 8039816:	2b00      	cmp	r3, #0
 8039818:	f040 80d8 	bne.w	80399cc <__ssvfiscanf_r+0x434>
 803981c:	6a3b      	ldr	r3, [r7, #32]
 803981e:	0636      	lsls	r6, r6, #24
 8039820:	f853 5b04 	ldr.w	r5, [r3], #4
 8039824:	623b      	str	r3, [r7, #32]
 8039826:	f140 80d7 	bpl.w	80399d8 <__ssvfiscanf_r+0x440>
 803982a:	b145      	cbz	r5, 803983e <__ssvfiscanf_r+0x2a6>
 803982c:	2080      	movs	r0, #128	@ 0x80
 803982e:	f7fe fe9d 	bl	803856c <malloc>
 8039832:	4606      	mov	r6, r0
 8039834:	2800      	cmp	r0, #0
 8039836:	d164      	bne.n	8039902 <__ssvfiscanf_r+0x36a>
 8039838:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803983c:	61fb      	str	r3, [r7, #28]
 803983e:	f1bb 0f00 	cmp.w	fp, #0
 8039842:	d008      	beq.n	8039856 <__ssvfiscanf_r+0x2be>
 8039844:	69fb      	ldr	r3, [r7, #28]
 8039846:	3301      	adds	r3, #1
 8039848:	f000 85ba 	beq.w	803a3c0 <__ssvfiscanf_r+0xe28>
 803984c:	f8db 0000 	ldr.w	r0, [fp]
 8039850:	b108      	cbz	r0, 8039856 <__ssvfiscanf_r+0x2be>
 8039852:	f7fe fe93 	bl	803857c <free>
 8039856:	69f8      	ldr	r0, [r7, #28]
 8039858:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 803985c:	46bd      	mov	sp, r7
 803985e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8039862:	68b9      	ldr	r1, [r7, #8]
 8039864:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8039868:	f003 fe67 	bl	803d53a <__sccl>
 803986c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8039870:	60b8      	str	r0, [r7, #8]
 8039872:	2501      	movs	r5, #1
 8039874:	e7ab      	b.n	80397ce <__ssvfiscanf_r+0x236>
 8039876:	f046 0601 	orr.w	r6, r6, #1
 803987a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 803987e:	2500      	movs	r5, #0
 8039880:	e7a5      	b.n	80397ce <__ssvfiscanf_r+0x236>
 8039882:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8039886:	e795      	b.n	80397b4 <__ssvfiscanf_r+0x21c>
 8039888:	06f0      	lsls	r0, r6, #27
 803988a:	f53f aea6 	bmi.w	80395da <__ssvfiscanf_r+0x42>
 803988e:	6a3a      	ldr	r2, [r7, #32]
 8039890:	0731      	lsls	r1, r6, #28
 8039892:	f852 3b04 	ldr.w	r3, [r2], #4
 8039896:	623a      	str	r2, [r7, #32]
 8039898:	d502      	bpl.n	80398a0 <__ssvfiscanf_r+0x308>
 803989a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803989c:	701a      	strb	r2, [r3, #0]
 803989e:	e69c      	b.n	80395da <__ssvfiscanf_r+0x42>
 80398a0:	0772      	lsls	r2, r6, #29
 80398a2:	d502      	bpl.n	80398aa <__ssvfiscanf_r+0x312>
 80398a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80398a6:	801a      	strh	r2, [r3, #0]
 80398a8:	e697      	b.n	80395da <__ssvfiscanf_r+0x42>
 80398aa:	07f5      	lsls	r5, r6, #31
 80398ac:	d502      	bpl.n	80398b4 <__ssvfiscanf_r+0x31c>
 80398ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80398b0:	601a      	str	r2, [r3, #0]
 80398b2:	e692      	b.n	80395da <__ssvfiscanf_r+0x42>
 80398b4:	07b0      	lsls	r0, r6, #30
 80398b6:	d5fa      	bpl.n	80398ae <__ssvfiscanf_r+0x316>
 80398b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80398ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80398bc:	17d2      	asrs	r2, r2, #31
 80398be:	e9c3 1200 	strd	r1, r2, [r3]
 80398c2:	e68a      	b.n	80395da <__ssvfiscanf_r+0x42>
 80398c4:	4ba6      	ldr	r3, [pc, #664]	@ (8039b60 <__ssvfiscanf_r+0x5c8>)
 80398c6:	60fb      	str	r3, [r7, #12]
 80398c8:	2300      	movs	r3, #0
 80398ca:	e76a      	b.n	80397a2 <__ssvfiscanf_r+0x20a>
 80398cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80398ce:	4621      	mov	r1, r4
 80398d0:	f7ff fe0b 	bl	80394ea <__ssrefill_r>
 80398d4:	2800      	cmp	r0, #0
 80398d6:	f43f af7d 	beq.w	80397d4 <__ssvfiscanf_r+0x23c>
 80398da:	e714      	b.n	8039706 <__ssvfiscanf_r+0x16e>
 80398dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80398de:	3201      	adds	r2, #1
 80398e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80398e2:	6862      	ldr	r2, [r4, #4]
 80398e4:	3a01      	subs	r2, #1
 80398e6:	2a00      	cmp	r2, #0
 80398e8:	6062      	str	r2, [r4, #4]
 80398ea:	dd02      	ble.n	80398f2 <__ssvfiscanf_r+0x35a>
 80398ec:	3301      	adds	r3, #1
 80398ee:	6023      	str	r3, [r4, #0]
 80398f0:	e774      	b.n	80397dc <__ssvfiscanf_r+0x244>
 80398f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80398f4:	4621      	mov	r1, r4
 80398f6:	f7ff fdf8 	bl	80394ea <__ssrefill_r>
 80398fa:	2800      	cmp	r0, #0
 80398fc:	f43f af6e 	beq.w	80397dc <__ssvfiscanf_r+0x244>
 8039900:	e701      	b.n	8039706 <__ssvfiscanf_r+0x16e>
 8039902:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8039906:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 803990a:	6028      	str	r0, [r5, #0]
 803990c:	4599      	cmp	r9, r3
 803990e:	d314      	bcc.n	803993a <__ssvfiscanf_r+0x3a2>
 8039910:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8039914:	4293      	cmp	r3, r2
 8039916:	f200 8553 	bhi.w	803a3c0 <__ssvfiscanf_r+0xe28>
 803991a:	3308      	adds	r3, #8
 803991c:	fa1f fa83 	uxth.w	sl, r3
 8039920:	f8db 0000 	ldr.w	r0, [fp]
 8039924:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8039928:	f003 fdaa 	bl	803d480 <realloc>
 803992c:	2800      	cmp	r0, #0
 803992e:	f000 8547 	beq.w	803a3c0 <__ssvfiscanf_r+0xe28>
 8039932:	f8cb 0000 	str.w	r0, [fp]
 8039936:	f8ab a004 	strh.w	sl, [fp, #4]
 803993a:	f8db 3000 	ldr.w	r3, [fp]
 803993e:	f109 0201 	add.w	r2, r9, #1
 8039942:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8039946:	46aa      	mov	sl, r5
 8039948:	f8ab 2006 	strh.w	r2, [fp, #6]
 803994c:	4635      	mov	r5, r6
 803994e:	f04f 0920 	mov.w	r9, #32
 8039952:	2200      	movs	r2, #0
 8039954:	62ba      	str	r2, [r7, #40]	@ 0x28
 8039956:	f7fd fd4b 	bl	80373f0 <__locale_mb_cur_max>
 803995a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 803995c:	4290      	cmp	r0, r2
 803995e:	f43f aed2 	beq.w	8039706 <__ssvfiscanf_r+0x16e>
 8039962:	6821      	ldr	r1, [r4, #0]
 8039964:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 8039968:	f811 0b01 	ldrb.w	r0, [r1], #1
 803996c:	f80c 0002 	strb.w	r0, [ip, r2]
 8039970:	1c53      	adds	r3, r2, #1
 8039972:	6862      	ldr	r2, [r4, #4]
 8039974:	3a01      	subs	r2, #1
 8039976:	e9c4 1200 	strd	r1, r2, [r4]
 803997a:	69ba      	ldr	r2, [r7, #24]
 803997c:	2a03      	cmp	r2, #3
 803997e:	d102      	bne.n	8039986 <__ssvfiscanf_r+0x3ee>
 8039980:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8039982:	2a04      	cmp	r2, #4
 8039984:	d007      	beq.n	8039996 <__ssvfiscanf_r+0x3fe>
 8039986:	2208      	movs	r2, #8
 8039988:	2100      	movs	r1, #0
 803998a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803998e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039990:	f7fc fba6 	bl	80360e0 <memset>
 8039994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039996:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 803999a:	9200      	str	r2, [sp, #0]
 803999c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803999e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80399a0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80399a4:	4629      	mov	r1, r5
 80399a6:	f005 f925 	bl	803ebf4 <_mbrtowc_r>
 80399aa:	4603      	mov	r3, r0
 80399ac:	61b8      	str	r0, [r7, #24]
 80399ae:	1c58      	adds	r0, r3, #1
 80399b0:	f43f aea9 	beq.w	8039706 <__ssvfiscanf_r+0x16e>
 80399b4:	461a      	mov	r2, r3
 80399b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80399b8:	b9b2      	cbnz	r2, 80399e8 <__ssvfiscanf_r+0x450>
 80399ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80399bc:	441a      	add	r2, r3
 80399be:	4613      	mov	r3, r2
 80399c0:	693a      	ldr	r2, [r7, #16]
 80399c2:	b172      	cbz	r2, 80399e2 <__ssvfiscanf_r+0x44a>
 80399c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80399c6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80399ca:	e019      	b.n	8039a00 <__ssvfiscanf_r+0x468>
 80399cc:	f04f 0900 	mov.w	r9, #0
 80399d0:	464e      	mov	r6, r9
 80399d2:	46ca      	mov	sl, r9
 80399d4:	464d      	mov	r5, r9
 80399d6:	e7bc      	b.n	8039952 <__ssvfiscanf_r+0x3ba>
 80399d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80399dc:	464e      	mov	r6, r9
 80399de:	46ca      	mov	sl, r9
 80399e0:	e7b7      	b.n	8039952 <__ssvfiscanf_r+0x3ba>
 80399e2:	693a      	ldr	r2, [r7, #16]
 80399e4:	602a      	str	r2, [r5, #0]
 80399e6:	e7ed      	b.n	80399c4 <__ssvfiscanf_r+0x42c>
 80399e8:	69ba      	ldr	r2, [r7, #24]
 80399ea:	3202      	adds	r2, #2
 80399ec:	d024      	beq.n	8039a38 <__ssvfiscanf_r+0x4a0>
 80399ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80399f0:	441a      	add	r2, r3
 80399f2:	69bb      	ldr	r3, [r7, #24]
 80399f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80399f6:	2b03      	cmp	r3, #3
 80399f8:	d1e5      	bne.n	80399c6 <__ssvfiscanf_r+0x42e>
 80399fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80399fc:	2b04      	cmp	r3, #4
 80399fe:	d1e2      	bne.n	80399c6 <__ssvfiscanf_r+0x42e>
 8039a00:	693b      	ldr	r3, [r7, #16]
 8039a02:	b9bb      	cbnz	r3, 8039a34 <__ssvfiscanf_r+0x49c>
 8039a04:	f1ba 0f00 	cmp.w	sl, #0
 8039a08:	d013      	beq.n	8039a32 <__ssvfiscanf_r+0x49a>
 8039a0a:	1bab      	subs	r3, r5, r6
 8039a0c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8039a10:	d80f      	bhi.n	8039a32 <__ssvfiscanf_r+0x49a>
 8039a12:	4630      	mov	r0, r6
 8039a14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8039a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039a1a:	f003 fd31 	bl	803d480 <realloc>
 8039a1e:	4606      	mov	r6, r0
 8039a20:	2800      	cmp	r0, #0
 8039a22:	f43f af09 	beq.w	8039838 <__ssvfiscanf_r+0x2a0>
 8039a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039a28:	f8ca 0000 	str.w	r0, [sl]
 8039a2c:	18c5      	adds	r5, r0, r3
 8039a2e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8039a32:	3504      	adds	r5, #4
 8039a34:	2200      	movs	r2, #0
 8039a36:	e000      	b.n	8039a3a <__ssvfiscanf_r+0x4a2>
 8039a38:	461a      	mov	r2, r3
 8039a3a:	6863      	ldr	r3, [r4, #4]
 8039a3c:	2b00      	cmp	r3, #0
 8039a3e:	dc13      	bgt.n	8039a68 <__ssvfiscanf_r+0x4d0>
 8039a40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039a42:	62ba      	str	r2, [r7, #40]	@ 0x28
 8039a44:	4621      	mov	r1, r4
 8039a46:	f7ff fd50 	bl	80394ea <__ssrefill_r>
 8039a4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8039a4c:	b160      	cbz	r0, 8039a68 <__ssvfiscanf_r+0x4d0>
 8039a4e:	2a00      	cmp	r2, #0
 8039a50:	f47f ae59 	bne.w	8039706 <__ssvfiscanf_r+0x16e>
 8039a54:	f1ba 0f00 	cmp.w	sl, #0
 8039a58:	d10b      	bne.n	8039a72 <__ssvfiscanf_r+0x4da>
 8039a5a:	693b      	ldr	r3, [r7, #16]
 8039a5c:	2b00      	cmp	r3, #0
 8039a5e:	f47f adbc 	bne.w	80395da <__ssvfiscanf_r+0x42>
 8039a62:	69fb      	ldr	r3, [r7, #28]
 8039a64:	3301      	adds	r3, #1
 8039a66:	e5b0      	b.n	80395ca <__ssvfiscanf_r+0x32>
 8039a68:	f1b8 0f00 	cmp.w	r8, #0
 8039a6c:	f47f af72 	bne.w	8039954 <__ssvfiscanf_r+0x3bc>
 8039a70:	e7f0      	b.n	8039a54 <__ssvfiscanf_r+0x4bc>
 8039a72:	1ba9      	subs	r1, r5, r6
 8039a74:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8039a78:	d9ef      	bls.n	8039a5a <__ssvfiscanf_r+0x4c2>
 8039a7a:	f8da 0000 	ldr.w	r0, [sl]
 8039a7e:	f003 fcff 	bl	803d480 <realloc>
 8039a82:	2800      	cmp	r0, #0
 8039a84:	d0e9      	beq.n	8039a5a <__ssvfiscanf_r+0x4c2>
 8039a86:	f8ca 0000 	str.w	r0, [sl]
 8039a8a:	e7e6      	b.n	8039a5a <__ssvfiscanf_r+0x4c2>
 8039a8c:	b1db      	cbz	r3, 8039ac6 <__ssvfiscanf_r+0x52e>
 8039a8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8039a92:	4598      	cmp	r8, r3
 8039a94:	dd10      	ble.n	8039ab8 <__ssvfiscanf_r+0x520>
 8039a96:	441a      	add	r2, r3
 8039a98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039a9a:	6022      	str	r2, [r4, #0]
 8039a9c:	4621      	mov	r1, r4
 8039a9e:	441d      	add	r5, r3
 8039aa0:	eba8 0803 	sub.w	r8, r8, r3
 8039aa4:	f7ff fd21 	bl	80394ea <__ssrefill_r>
 8039aa8:	2800      	cmp	r0, #0
 8039aaa:	d0f0      	beq.n	8039a8e <__ssvfiscanf_r+0x4f6>
 8039aac:	2d00      	cmp	r5, #0
 8039aae:	f43f ae2a 	beq.w	8039706 <__ssvfiscanf_r+0x16e>
 8039ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8039ab4:	442b      	add	r3, r5
 8039ab6:	e201      	b.n	8039ebc <__ssvfiscanf_r+0x924>
 8039ab8:	eba3 0308 	sub.w	r3, r3, r8
 8039abc:	4442      	add	r2, r8
 8039abe:	4445      	add	r5, r8
 8039ac0:	6063      	str	r3, [r4, #4]
 8039ac2:	6022      	str	r2, [r4, #0]
 8039ac4:	e7f5      	b.n	8039ab2 <__ssvfiscanf_r+0x51a>
 8039ac6:	6a3b      	ldr	r3, [r7, #32]
 8039ac8:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8039acc:	f853 5b04 	ldr.w	r5, [r3], #4
 8039ad0:	623b      	str	r3, [r7, #32]
 8039ad2:	d02d      	beq.n	8039b30 <__ssvfiscanf_r+0x598>
 8039ad4:	2d00      	cmp	r5, #0
 8039ad6:	f43f adac 	beq.w	8039632 <__ssvfiscanf_r+0x9a>
 8039ada:	4640      	mov	r0, r8
 8039adc:	f7fe fd46 	bl	803856c <malloc>
 8039ae0:	4681      	mov	r9, r0
 8039ae2:	2800      	cmp	r0, #0
 8039ae4:	f43f ae14 	beq.w	8039710 <__ssvfiscanf_r+0x178>
 8039ae8:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8039aec:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8039af0:	6028      	str	r0, [r5, #0]
 8039af2:	45b2      	cmp	sl, r6
 8039af4:	d312      	bcc.n	8039b1c <__ssvfiscanf_r+0x584>
 8039af6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8039afa:	429e      	cmp	r6, r3
 8039afc:	f200 8460 	bhi.w	803a3c0 <__ssvfiscanf_r+0xe28>
 8039b00:	3608      	adds	r6, #8
 8039b02:	b2b6      	uxth	r6, r6
 8039b04:	f8db 0000 	ldr.w	r0, [fp]
 8039b08:	00b1      	lsls	r1, r6, #2
 8039b0a:	f003 fcb9 	bl	803d480 <realloc>
 8039b0e:	2800      	cmp	r0, #0
 8039b10:	f000 8456 	beq.w	803a3c0 <__ssvfiscanf_r+0xe28>
 8039b14:	f8cb 0000 	str.w	r0, [fp]
 8039b18:	f8ab 6004 	strh.w	r6, [fp, #4]
 8039b1c:	f8db 3000 	ldr.w	r3, [fp]
 8039b20:	f10a 0201 	add.w	r2, sl, #1
 8039b24:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8039b28:	462e      	mov	r6, r5
 8039b2a:	f8ab 2006 	strh.w	r2, [fp, #6]
 8039b2e:	464d      	mov	r5, r9
 8039b30:	9400      	str	r4, [sp, #0]
 8039b32:	4629      	mov	r1, r5
 8039b34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039b36:	4643      	mov	r3, r8
 8039b38:	2201      	movs	r2, #1
 8039b3a:	f7ff fcf3 	bl	8039524 <_sfread_r>
 8039b3e:	4605      	mov	r5, r0
 8039b40:	2800      	cmp	r0, #0
 8039b42:	f43f ade0 	beq.w	8039706 <__ssvfiscanf_r+0x16e>
 8039b46:	b13e      	cbz	r6, 8039b58 <__ssvfiscanf_r+0x5c0>
 8039b48:	4580      	cmp	r8, r0
 8039b4a:	d905      	bls.n	8039b58 <__ssvfiscanf_r+0x5c0>
 8039b4c:	4601      	mov	r1, r0
 8039b4e:	6830      	ldr	r0, [r6, #0]
 8039b50:	f003 fc96 	bl	803d480 <realloc>
 8039b54:	b100      	cbz	r0, 8039b58 <__ssvfiscanf_r+0x5c0>
 8039b56:	6030      	str	r0, [r6, #0]
 8039b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8039b5a:	442b      	add	r3, r5
 8039b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8039b5e:	e780      	b.n	8039a62 <__ssvfiscanf_r+0x4ca>
 8039b60:	080357e9 	.word	0x080357e9
 8039b64:	08045025 	.word	0x08045025
 8039b68:	2b00      	cmp	r3, #0
 8039b6a:	bf08      	it	eq
 8039b6c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8039b70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039b72:	693b      	ldr	r3, [r7, #16]
 8039b74:	2d00      	cmp	r5, #0
 8039b76:	f000 8100 	beq.w	8039d7a <__ssvfiscanf_r+0x7e2>
 8039b7a:	2b00      	cmp	r3, #0
 8039b7c:	f040 80a5 	bne.w	8039cca <__ssvfiscanf_r+0x732>
 8039b80:	6a3b      	ldr	r3, [r7, #32]
 8039b82:	0631      	lsls	r1, r6, #24
 8039b84:	f853 5b04 	ldr.w	r5, [r3], #4
 8039b88:	623b      	str	r3, [r7, #32]
 8039b8a:	f140 80a5 	bpl.w	8039cd8 <__ssvfiscanf_r+0x740>
 8039b8e:	2d00      	cmp	r5, #0
 8039b90:	f43f ae55 	beq.w	803983e <__ssvfiscanf_r+0x2a6>
 8039b94:	2080      	movs	r0, #128	@ 0x80
 8039b96:	f7fe fce9 	bl	803856c <malloc>
 8039b9a:	4680      	mov	r8, r0
 8039b9c:	2800      	cmp	r0, #0
 8039b9e:	f43f ae4b 	beq.w	8039838 <__ssvfiscanf_r+0x2a0>
 8039ba2:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 8039ba6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8039baa:	6028      	str	r0, [r5, #0]
 8039bac:	429e      	cmp	r6, r3
 8039bae:	d314      	bcc.n	8039bda <__ssvfiscanf_r+0x642>
 8039bb0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8039bb4:	4293      	cmp	r3, r2
 8039bb6:	f200 8403 	bhi.w	803a3c0 <__ssvfiscanf_r+0xe28>
 8039bba:	3308      	adds	r3, #8
 8039bbc:	fa1f f983 	uxth.w	r9, r3
 8039bc0:	f8db 0000 	ldr.w	r0, [fp]
 8039bc4:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8039bc8:	f003 fc5a 	bl	803d480 <realloc>
 8039bcc:	2800      	cmp	r0, #0
 8039bce:	f000 83f7 	beq.w	803a3c0 <__ssvfiscanf_r+0xe28>
 8039bd2:	f8cb 0000 	str.w	r0, [fp]
 8039bd6:	f8ab 9004 	strh.w	r9, [fp, #4]
 8039bda:	f8db 3000 	ldr.w	r3, [fp]
 8039bde:	1c72      	adds	r2, r6, #1
 8039be0:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8039be4:	46aa      	mov	sl, r5
 8039be6:	f8ab 2006 	strh.w	r2, [fp, #6]
 8039bea:	4645      	mov	r5, r8
 8039bec:	f04f 0920 	mov.w	r9, #32
 8039bf0:	2600      	movs	r6, #0
 8039bf2:	f7fd fbfd 	bl	80373f0 <__locale_mb_cur_max>
 8039bf6:	4286      	cmp	r6, r0
 8039bf8:	f43f ad85 	beq.w	8039706 <__ssvfiscanf_r+0x16e>
 8039bfc:	1c73      	adds	r3, r6, #1
 8039bfe:	607b      	str	r3, [r7, #4]
 8039c00:	6823      	ldr	r3, [r4, #0]
 8039c02:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8039c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8039c0a:	558a      	strb	r2, [r1, r6]
 8039c0c:	6862      	ldr	r2, [r4, #4]
 8039c0e:	3a01      	subs	r2, #1
 8039c10:	e9c4 3200 	strd	r3, r2, [r4]
 8039c14:	69bb      	ldr	r3, [r7, #24]
 8039c16:	2b03      	cmp	r3, #3
 8039c18:	d102      	bne.n	8039c20 <__ssvfiscanf_r+0x688>
 8039c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8039c1c:	2b04      	cmp	r3, #4
 8039c1e:	d005      	beq.n	8039c2c <__ssvfiscanf_r+0x694>
 8039c20:	2208      	movs	r2, #8
 8039c22:	2100      	movs	r1, #0
 8039c24:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8039c28:	f7fc fa5a 	bl	80360e0 <memset>
 8039c2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8039c30:	9300      	str	r3, [sp, #0]
 8039c32:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8039c36:	687b      	ldr	r3, [r7, #4]
 8039c38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039c3a:	4629      	mov	r1, r5
 8039c3c:	f004 ffda 	bl	803ebf4 <_mbrtowc_r>
 8039c40:	1c42      	adds	r2, r0, #1
 8039c42:	61b8      	str	r0, [r7, #24]
 8039c44:	f43f ad5f 	beq.w	8039706 <__ssvfiscanf_r+0x16e>
 8039c48:	2800      	cmp	r0, #0
 8039c4a:	d14a      	bne.n	8039ce2 <__ssvfiscanf_r+0x74a>
 8039c4c:	6028      	str	r0, [r5, #0]
 8039c4e:	682e      	ldr	r6, [r5, #0]
 8039c50:	1c73      	adds	r3, r6, #1
 8039c52:	d056      	beq.n	8039d02 <__ssvfiscanf_r+0x76a>
 8039c54:	2208      	movs	r2, #8
 8039c56:	2100      	movs	r1, #0
 8039c58:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8039c5c:	f7fc fa40 	bl	80360e0 <memset>
 8039c60:	4b99      	ldr	r3, [pc, #612]	@ (8039ec8 <__ssvfiscanf_r+0x930>)
 8039c62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8039c68:	603b      	str	r3, [r7, #0]
 8039c6a:	4632      	mov	r2, r6
 8039c6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8039c70:	683e      	ldr	r6, [r7, #0]
 8039c72:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8039c76:	47b0      	blx	r6
 8039c78:	2801      	cmp	r0, #1
 8039c7a:	d144      	bne.n	8039d06 <__ssvfiscanf_r+0x76e>
 8039c7c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8039c80:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8039c84:	5c9b      	ldrb	r3, [r3, r2]
 8039c86:	2b00      	cmp	r3, #0
 8039c88:	d148      	bne.n	8039d1c <__ssvfiscanf_r+0x784>
 8039c8a:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 8039c8e:	687b      	ldr	r3, [r7, #4]
 8039c90:	2b00      	cmp	r3, #0
 8039c92:	d13a      	bne.n	8039d0a <__ssvfiscanf_r+0x772>
 8039c94:	693b      	ldr	r3, [r7, #16]
 8039c96:	2b00      	cmp	r3, #0
 8039c98:	f47f ac9f 	bne.w	80395da <__ssvfiscanf_r+0x42>
 8039c9c:	602b      	str	r3, [r5, #0]
 8039c9e:	f1ba 0f00 	cmp.w	sl, #0
 8039ca2:	f43f aede 	beq.w	8039a62 <__ssvfiscanf_r+0x4ca>
 8039ca6:	eba5 0108 	sub.w	r1, r5, r8
 8039caa:	108b      	asrs	r3, r1, #2
 8039cac:	3301      	adds	r3, #1
 8039cae:	4599      	cmp	r9, r3
 8039cb0:	f67f aed7 	bls.w	8039a62 <__ssvfiscanf_r+0x4ca>
 8039cb4:	f8da 0000 	ldr.w	r0, [sl]
 8039cb8:	3104      	adds	r1, #4
 8039cba:	f003 fbe1 	bl	803d480 <realloc>
 8039cbe:	2800      	cmp	r0, #0
 8039cc0:	f43f aecf 	beq.w	8039a62 <__ssvfiscanf_r+0x4ca>
 8039cc4:	f8ca 0000 	str.w	r0, [sl]
 8039cc8:	e6cb      	b.n	8039a62 <__ssvfiscanf_r+0x4ca>
 8039cca:	f04f 0900 	mov.w	r9, #0
 8039cce:	46c8      	mov	r8, r9
 8039cd0:	46ca      	mov	sl, r9
 8039cd2:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8039cd6:	e78b      	b.n	8039bf0 <__ssvfiscanf_r+0x658>
 8039cd8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8039cdc:	46c8      	mov	r8, r9
 8039cde:	46ca      	mov	sl, r9
 8039ce0:	e786      	b.n	8039bf0 <__ssvfiscanf_r+0x658>
 8039ce2:	69bb      	ldr	r3, [r7, #24]
 8039ce4:	3302      	adds	r3, #2
 8039ce6:	d1b2      	bne.n	8039c4e <__ssvfiscanf_r+0x6b6>
 8039ce8:	687e      	ldr	r6, [r7, #4]
 8039cea:	6863      	ldr	r3, [r4, #4]
 8039cec:	2b00      	cmp	r3, #0
 8039cee:	dc3f      	bgt.n	8039d70 <__ssvfiscanf_r+0x7d8>
 8039cf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039cf2:	4621      	mov	r1, r4
 8039cf4:	f7ff fbf9 	bl	80394ea <__ssrefill_r>
 8039cf8:	2800      	cmp	r0, #0
 8039cfa:	d039      	beq.n	8039d70 <__ssvfiscanf_r+0x7d8>
 8039cfc:	2e00      	cmp	r6, #0
 8039cfe:	d0c9      	beq.n	8039c94 <__ssvfiscanf_r+0x6fc>
 8039d00:	e501      	b.n	8039706 <__ssvfiscanf_r+0x16e>
 8039d02:	4632      	mov	r2, r6
 8039d04:	e7bc      	b.n	8039c80 <__ssvfiscanf_r+0x6e8>
 8039d06:	2200      	movs	r2, #0
 8039d08:	e7ba      	b.n	8039c80 <__ssvfiscanf_r+0x6e8>
 8039d0a:	687b      	ldr	r3, [r7, #4]
 8039d0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039d0e:	3b01      	subs	r3, #1
 8039d10:	4622      	mov	r2, r4
 8039d12:	5cf1      	ldrb	r1, [r6, r3]
 8039d14:	607b      	str	r3, [r7, #4]
 8039d16:	f7ff fbad 	bl	8039474 <_sungetc_r>
 8039d1a:	e7b8      	b.n	8039c8e <__ssvfiscanf_r+0x6f6>
 8039d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8039d1e:	687a      	ldr	r2, [r7, #4]
 8039d20:	4413      	add	r3, r2
 8039d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8039d24:	69bb      	ldr	r3, [r7, #24]
 8039d26:	2b03      	cmp	r3, #3
 8039d28:	d102      	bne.n	8039d30 <__ssvfiscanf_r+0x798>
 8039d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8039d2c:	2b04      	cmp	r3, #4
 8039d2e:	d002      	beq.n	8039d36 <__ssvfiscanf_r+0x79e>
 8039d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039d32:	3b01      	subs	r3, #1
 8039d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039d36:	693b      	ldr	r3, [r7, #16]
 8039d38:	b9c3      	cbnz	r3, 8039d6c <__ssvfiscanf_r+0x7d4>
 8039d3a:	3504      	adds	r5, #4
 8039d3c:	f1ba 0f00 	cmp.w	sl, #0
 8039d40:	d014      	beq.n	8039d6c <__ssvfiscanf_r+0x7d4>
 8039d42:	eba5 0608 	sub.w	r6, r5, r8
 8039d46:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8039d4a:	d80d      	bhi.n	8039d68 <__ssvfiscanf_r+0x7d0>
 8039d4c:	4640      	mov	r0, r8
 8039d4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8039d52:	f003 fb95 	bl	803d480 <realloc>
 8039d56:	4680      	mov	r8, r0
 8039d58:	2800      	cmp	r0, #0
 8039d5a:	f43f ad6d 	beq.w	8039838 <__ssvfiscanf_r+0x2a0>
 8039d5e:	1985      	adds	r5, r0, r6
 8039d60:	f8ca 0000 	str.w	r0, [sl]
 8039d64:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8039d68:	693e      	ldr	r6, [r7, #16]
 8039d6a:	e7be      	b.n	8039cea <__ssvfiscanf_r+0x752>
 8039d6c:	2600      	movs	r6, #0
 8039d6e:	e7bc      	b.n	8039cea <__ssvfiscanf_r+0x752>
 8039d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039d72:	2b00      	cmp	r3, #0
 8039d74:	f47f af3d 	bne.w	8039bf2 <__ssvfiscanf_r+0x65a>
 8039d78:	e78c      	b.n	8039c94 <__ssvfiscanf_r+0x6fc>
 8039d7a:	b1e3      	cbz	r3, 8039db6 <__ssvfiscanf_r+0x81e>
 8039d7c:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 8039d80:	6823      	ldr	r3, [r4, #0]
 8039d82:	781a      	ldrb	r2, [r3, #0]
 8039d84:	5cb2      	ldrb	r2, [r6, r2]
 8039d86:	b91a      	cbnz	r2, 8039d90 <__ssvfiscanf_r+0x7f8>
 8039d88:	2d00      	cmp	r5, #0
 8039d8a:	f47f ae92 	bne.w	8039ab2 <__ssvfiscanf_r+0x51a>
 8039d8e:	e450      	b.n	8039632 <__ssvfiscanf_r+0x9a>
 8039d90:	3301      	adds	r3, #1
 8039d92:	6862      	ldr	r2, [r4, #4]
 8039d94:	6023      	str	r3, [r4, #0]
 8039d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039d98:	3501      	adds	r5, #1
 8039d9a:	3a01      	subs	r2, #1
 8039d9c:	42ab      	cmp	r3, r5
 8039d9e:	6062      	str	r2, [r4, #4]
 8039da0:	f43f ae87 	beq.w	8039ab2 <__ssvfiscanf_r+0x51a>
 8039da4:	2a00      	cmp	r2, #0
 8039da6:	dceb      	bgt.n	8039d80 <__ssvfiscanf_r+0x7e8>
 8039da8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039daa:	4621      	mov	r1, r4
 8039dac:	f7ff fb9d 	bl	80394ea <__ssrefill_r>
 8039db0:	2800      	cmp	r0, #0
 8039db2:	d0e5      	beq.n	8039d80 <__ssvfiscanf_r+0x7e8>
 8039db4:	e67d      	b.n	8039ab2 <__ssvfiscanf_r+0x51a>
 8039db6:	6a3b      	ldr	r3, [r7, #32]
 8039db8:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 8039dbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8039dc0:	623b      	str	r3, [r7, #32]
 8039dc2:	d07e      	beq.n	8039ec2 <__ssvfiscanf_r+0x92a>
 8039dc4:	2d00      	cmp	r5, #0
 8039dc6:	f43f ac34 	beq.w	8039632 <__ssvfiscanf_r+0x9a>
 8039dca:	2020      	movs	r0, #32
 8039dcc:	f7fe fbce 	bl	803856c <malloc>
 8039dd0:	4680      	mov	r8, r0
 8039dd2:	2800      	cmp	r0, #0
 8039dd4:	f43f ac9c 	beq.w	8039710 <__ssvfiscanf_r+0x178>
 8039dd8:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8039ddc:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8039de0:	6028      	str	r0, [r5, #0]
 8039de2:	45b1      	cmp	r9, r6
 8039de4:	d312      	bcc.n	8039e0c <__ssvfiscanf_r+0x874>
 8039de6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8039dea:	429e      	cmp	r6, r3
 8039dec:	f200 82e8 	bhi.w	803a3c0 <__ssvfiscanf_r+0xe28>
 8039df0:	3608      	adds	r6, #8
 8039df2:	b2b6      	uxth	r6, r6
 8039df4:	f8db 0000 	ldr.w	r0, [fp]
 8039df8:	00b1      	lsls	r1, r6, #2
 8039dfa:	f003 fb41 	bl	803d480 <realloc>
 8039dfe:	2800      	cmp	r0, #0
 8039e00:	f000 82de 	beq.w	803a3c0 <__ssvfiscanf_r+0xe28>
 8039e04:	f8cb 0000 	str.w	r0, [fp]
 8039e08:	f8ab 6004 	strh.w	r6, [fp, #4]
 8039e0c:	f8db 3000 	ldr.w	r3, [fp]
 8039e10:	f109 0201 	add.w	r2, r9, #1
 8039e14:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8039e18:	46aa      	mov	sl, r5
 8039e1a:	f8ab 2006 	strh.w	r2, [fp, #6]
 8039e1e:	4645      	mov	r5, r8
 8039e20:	f04f 0920 	mov.w	r9, #32
 8039e24:	462e      	mov	r6, r5
 8039e26:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 8039e2a:	6823      	ldr	r3, [r4, #0]
 8039e2c:	781a      	ldrb	r2, [r3, #0]
 8039e2e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8039e32:	b362      	cbz	r2, 8039e8e <__ssvfiscanf_r+0x8f6>
 8039e34:	6862      	ldr	r2, [r4, #4]
 8039e36:	3a01      	subs	r2, #1
 8039e38:	6062      	str	r2, [r4, #4]
 8039e3a:	1c5a      	adds	r2, r3, #1
 8039e3c:	6022      	str	r2, [r4, #0]
 8039e3e:	781b      	ldrb	r3, [r3, #0]
 8039e40:	f805 3b01 	strb.w	r3, [r5], #1
 8039e44:	f1ba 0f00 	cmp.w	sl, #0
 8039e48:	d011      	beq.n	8039e6e <__ssvfiscanf_r+0x8d6>
 8039e4a:	1bab      	subs	r3, r5, r6
 8039e4c:	454b      	cmp	r3, r9
 8039e4e:	d30e      	bcc.n	8039e6e <__ssvfiscanf_r+0x8d6>
 8039e50:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8039e54:	4630      	mov	r0, r6
 8039e56:	4649      	mov	r1, r9
 8039e58:	613b      	str	r3, [r7, #16]
 8039e5a:	f003 fb11 	bl	803d480 <realloc>
 8039e5e:	4606      	mov	r6, r0
 8039e60:	2800      	cmp	r0, #0
 8039e62:	f43f ac55 	beq.w	8039710 <__ssvfiscanf_r+0x178>
 8039e66:	693b      	ldr	r3, [r7, #16]
 8039e68:	f8ca 0000 	str.w	r0, [sl]
 8039e6c:	18c5      	adds	r5, r0, r3
 8039e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039e70:	3b01      	subs	r3, #1
 8039e72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039e74:	d00b      	beq.n	8039e8e <__ssvfiscanf_r+0x8f6>
 8039e76:	6863      	ldr	r3, [r4, #4]
 8039e78:	2b00      	cmp	r3, #0
 8039e7a:	dcd6      	bgt.n	8039e2a <__ssvfiscanf_r+0x892>
 8039e7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039e7e:	4621      	mov	r1, r4
 8039e80:	f7ff fb33 	bl	80394ea <__ssrefill_r>
 8039e84:	2800      	cmp	r0, #0
 8039e86:	d0d0      	beq.n	8039e2a <__ssvfiscanf_r+0x892>
 8039e88:	42b5      	cmp	r5, r6
 8039e8a:	f43f ac3c 	beq.w	8039706 <__ssvfiscanf_r+0x16e>
 8039e8e:	1bae      	subs	r6, r5, r6
 8039e90:	f43f abcf 	beq.w	8039632 <__ssvfiscanf_r+0x9a>
 8039e94:	2300      	movs	r3, #0
 8039e96:	702b      	strb	r3, [r5, #0]
 8039e98:	f1ba 0f00 	cmp.w	sl, #0
 8039e9c:	d009      	beq.n	8039eb2 <__ssvfiscanf_r+0x91a>
 8039e9e:	1c71      	adds	r1, r6, #1
 8039ea0:	4589      	cmp	r9, r1
 8039ea2:	d906      	bls.n	8039eb2 <__ssvfiscanf_r+0x91a>
 8039ea4:	f8da 0000 	ldr.w	r0, [sl]
 8039ea8:	f003 faea 	bl	803d480 <realloc>
 8039eac:	b108      	cbz	r0, 8039eb2 <__ssvfiscanf_r+0x91a>
 8039eae:	f8ca 0000 	str.w	r0, [sl]
 8039eb2:	69fb      	ldr	r3, [r7, #28]
 8039eb4:	3301      	adds	r3, #1
 8039eb6:	61fb      	str	r3, [r7, #28]
 8039eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8039eba:	4433      	add	r3, r6
 8039ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8039ebe:	f7ff bb8c 	b.w	80395da <__ssvfiscanf_r+0x42>
 8039ec2:	46ca      	mov	sl, r9
 8039ec4:	e7ae      	b.n	8039e24 <__ssvfiscanf_r+0x88c>
 8039ec6:	bf00      	nop
 8039ec8:	200002d4 	.word	0x200002d4
 8039ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8039ece:	2b00      	cmp	r3, #0
 8039ed0:	bf08      	it	eq
 8039ed2:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8039ed6:	f016 0501 	ands.w	r5, r6, #1
 8039eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8039edc:	f006 0810 	and.w	r8, r6, #16
 8039ee0:	f000 80e1 	beq.w	803a0a6 <__ssvfiscanf_r+0xb0e>
 8039ee4:	f1b8 0f00 	cmp.w	r8, #0
 8039ee8:	f040 8089 	bne.w	8039ffe <__ssvfiscanf_r+0xa66>
 8039eec:	6a3b      	ldr	r3, [r7, #32]
 8039eee:	0636      	lsls	r6, r6, #24
 8039ef0:	f853 5b04 	ldr.w	r5, [r3], #4
 8039ef4:	623b      	str	r3, [r7, #32]
 8039ef6:	f140 8089 	bpl.w	803a00c <__ssvfiscanf_r+0xa74>
 8039efa:	2d00      	cmp	r5, #0
 8039efc:	f43f ac9f 	beq.w	803983e <__ssvfiscanf_r+0x2a6>
 8039f00:	2080      	movs	r0, #128	@ 0x80
 8039f02:	f7fe fb33 	bl	803856c <malloc>
 8039f06:	4606      	mov	r6, r0
 8039f08:	2800      	cmp	r0, #0
 8039f0a:	f43f ac95 	beq.w	8039838 <__ssvfiscanf_r+0x2a0>
 8039f0e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8039f12:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8039f16:	6028      	str	r0, [r5, #0]
 8039f18:	4599      	cmp	r9, r3
 8039f1a:	d314      	bcc.n	8039f46 <__ssvfiscanf_r+0x9ae>
 8039f1c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8039f20:	4293      	cmp	r3, r2
 8039f22:	f200 824d 	bhi.w	803a3c0 <__ssvfiscanf_r+0xe28>
 8039f26:	3308      	adds	r3, #8
 8039f28:	fa1f fa83 	uxth.w	sl, r3
 8039f2c:	f8db 0000 	ldr.w	r0, [fp]
 8039f30:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8039f34:	f003 faa4 	bl	803d480 <realloc>
 8039f38:	2800      	cmp	r0, #0
 8039f3a:	f000 8241 	beq.w	803a3c0 <__ssvfiscanf_r+0xe28>
 8039f3e:	f8cb 0000 	str.w	r0, [fp]
 8039f42:	f8ab a004 	strh.w	sl, [fp, #4]
 8039f46:	f8db 3000 	ldr.w	r3, [fp]
 8039f4a:	f109 0201 	add.w	r2, r9, #1
 8039f4e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8039f52:	46aa      	mov	sl, r5
 8039f54:	f8ab 2006 	strh.w	r2, [fp, #6]
 8039f58:	4635      	mov	r5, r6
 8039f5a:	f04f 0920 	mov.w	r9, #32
 8039f5e:	2300      	movs	r3, #0
 8039f60:	6822      	ldr	r2, [r4, #0]
 8039f62:	499e      	ldr	r1, [pc, #632]	@ (803a1dc <__ssvfiscanf_r+0xc44>)
 8039f64:	7812      	ldrb	r2, [r2, #0]
 8039f66:	5c8a      	ldrb	r2, [r1, r2]
 8039f68:	0711      	lsls	r1, r2, #28
 8039f6a:	d43c      	bmi.n	8039fe6 <__ssvfiscanf_r+0xa4e>
 8039f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8039f6e:	2a00      	cmp	r2, #0
 8039f70:	d039      	beq.n	8039fe6 <__ssvfiscanf_r+0xa4e>
 8039f72:	613b      	str	r3, [r7, #16]
 8039f74:	f7fd fa3c 	bl	80373f0 <__locale_mb_cur_max>
 8039f78:	693b      	ldr	r3, [r7, #16]
 8039f7a:	4298      	cmp	r0, r3
 8039f7c:	f43f abc3 	beq.w	8039706 <__ssvfiscanf_r+0x16e>
 8039f80:	1c5a      	adds	r2, r3, #1
 8039f82:	613a      	str	r2, [r7, #16]
 8039f84:	6822      	ldr	r2, [r4, #0]
 8039f86:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8039f8a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8039f8e:	54c8      	strb	r0, [r1, r3]
 8039f90:	6863      	ldr	r3, [r4, #4]
 8039f92:	3b01      	subs	r3, #1
 8039f94:	e9c4 2300 	strd	r2, r3, [r4]
 8039f98:	69bb      	ldr	r3, [r7, #24]
 8039f9a:	2b03      	cmp	r3, #3
 8039f9c:	d102      	bne.n	8039fa4 <__ssvfiscanf_r+0xa0c>
 8039f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8039fa0:	2b04      	cmp	r3, #4
 8039fa2:	d005      	beq.n	8039fb0 <__ssvfiscanf_r+0xa18>
 8039fa4:	2208      	movs	r2, #8
 8039fa6:	2100      	movs	r1, #0
 8039fa8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8039fac:	f7fc f898 	bl	80360e0 <memset>
 8039fb0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8039fb4:	9300      	str	r3, [sp, #0]
 8039fb6:	693b      	ldr	r3, [r7, #16]
 8039fb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8039fba:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8039fbe:	4629      	mov	r1, r5
 8039fc0:	f004 fe18 	bl	803ebf4 <_mbrtowc_r>
 8039fc4:	4603      	mov	r3, r0
 8039fc6:	61b8      	str	r0, [r7, #24]
 8039fc8:	1c58      	adds	r0, r3, #1
 8039fca:	f43f ab9c 	beq.w	8039706 <__ssvfiscanf_r+0x16e>
 8039fce:	bb0b      	cbnz	r3, 803a014 <__ssvfiscanf_r+0xa7c>
 8039fd0:	602b      	str	r3, [r5, #0]
 8039fd2:	6828      	ldr	r0, [r5, #0]
 8039fd4:	f004 fe28 	bl	803ec28 <iswspace>
 8039fd8:	4603      	mov	r3, r0
 8039fda:	2800      	cmp	r0, #0
 8039fdc:	d037      	beq.n	803a04e <__ssvfiscanf_r+0xab6>
 8039fde:	693a      	ldr	r2, [r7, #16]
 8039fe0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8039fe4:	bb4a      	cbnz	r2, 803a03a <__ssvfiscanf_r+0xaa2>
 8039fe6:	f1b8 0f00 	cmp.w	r8, #0
 8039fea:	f47f aaf6 	bne.w	80395da <__ssvfiscanf_r+0x42>
 8039fee:	f8c5 8000 	str.w	r8, [r5]
 8039ff2:	f1ba 0f00 	cmp.w	sl, #0
 8039ff6:	f43f ad34 	beq.w	8039a62 <__ssvfiscanf_r+0x4ca>
 8039ffa:	1ba9      	subs	r1, r5, r6
 8039ffc:	e655      	b.n	8039caa <__ssvfiscanf_r+0x712>
 8039ffe:	f04f 0900 	mov.w	r9, #0
 803a002:	464e      	mov	r6, r9
 803a004:	46ca      	mov	sl, r9
 803a006:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 803a00a:	e7a8      	b.n	8039f5e <__ssvfiscanf_r+0x9c6>
 803a00c:	46c1      	mov	r9, r8
 803a00e:	4646      	mov	r6, r8
 803a010:	46c2      	mov	sl, r8
 803a012:	e7a4      	b.n	8039f5e <__ssvfiscanf_r+0x9c6>
 803a014:	69bb      	ldr	r3, [r7, #24]
 803a016:	3302      	adds	r3, #2
 803a018:	d1db      	bne.n	8039fd2 <__ssvfiscanf_r+0xa3a>
 803a01a:	693b      	ldr	r3, [r7, #16]
 803a01c:	6862      	ldr	r2, [r4, #4]
 803a01e:	2a00      	cmp	r2, #0
 803a020:	dc9e      	bgt.n	8039f60 <__ssvfiscanf_r+0x9c8>
 803a022:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803a024:	613b      	str	r3, [r7, #16]
 803a026:	4621      	mov	r1, r4
 803a028:	f7ff fa5f 	bl	80394ea <__ssrefill_r>
 803a02c:	693b      	ldr	r3, [r7, #16]
 803a02e:	2800      	cmp	r0, #0
 803a030:	d096      	beq.n	8039f60 <__ssvfiscanf_r+0x9c8>
 803a032:	2b00      	cmp	r3, #0
 803a034:	f47f ab67 	bne.w	8039706 <__ssvfiscanf_r+0x16e>
 803a038:	e7d5      	b.n	8039fe6 <__ssvfiscanf_r+0xa4e>
 803a03a:	693a      	ldr	r2, [r7, #16]
 803a03c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803a03e:	3a01      	subs	r2, #1
 803a040:	613a      	str	r2, [r7, #16]
 803a042:	6939      	ldr	r1, [r7, #16]
 803a044:	4622      	mov	r2, r4
 803a046:	5c59      	ldrb	r1, [r3, r1]
 803a048:	f7ff fa14 	bl	8039474 <_sungetc_r>
 803a04c:	e7c7      	b.n	8039fde <__ssvfiscanf_r+0xa46>
 803a04e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803a050:	6939      	ldr	r1, [r7, #16]
 803a052:	440a      	add	r2, r1
 803a054:	62fa      	str	r2, [r7, #44]	@ 0x2c
 803a056:	69ba      	ldr	r2, [r7, #24]
 803a058:	2a03      	cmp	r2, #3
 803a05a:	d102      	bne.n	803a062 <__ssvfiscanf_r+0xaca>
 803a05c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 803a05e:	2a04      	cmp	r2, #4
 803a060:	d002      	beq.n	803a068 <__ssvfiscanf_r+0xad0>
 803a062:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 803a064:	3a01      	subs	r2, #1
 803a066:	62ba      	str	r2, [r7, #40]	@ 0x28
 803a068:	f1b8 0f00 	cmp.w	r8, #0
 803a06c:	d1d6      	bne.n	803a01c <__ssvfiscanf_r+0xa84>
 803a06e:	3504      	adds	r5, #4
 803a070:	f1ba 0f00 	cmp.w	sl, #0
 803a074:	d015      	beq.n	803a0a2 <__ssvfiscanf_r+0xb0a>
 803a076:	1bab      	subs	r3, r5, r6
 803a078:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 803a07c:	d80f      	bhi.n	803a09e <__ssvfiscanf_r+0xb06>
 803a07e:	4630      	mov	r0, r6
 803a080:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803a084:	613b      	str	r3, [r7, #16]
 803a086:	f003 f9fb 	bl	803d480 <realloc>
 803a08a:	4606      	mov	r6, r0
 803a08c:	2800      	cmp	r0, #0
 803a08e:	f43f abd3 	beq.w	8039838 <__ssvfiscanf_r+0x2a0>
 803a092:	693b      	ldr	r3, [r7, #16]
 803a094:	f8ca 0000 	str.w	r0, [sl]
 803a098:	18c5      	adds	r5, r0, r3
 803a09a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803a09e:	4643      	mov	r3, r8
 803a0a0:	e7bc      	b.n	803a01c <__ssvfiscanf_r+0xa84>
 803a0a2:	4653      	mov	r3, sl
 803a0a4:	e7ba      	b.n	803a01c <__ssvfiscanf_r+0xa84>
 803a0a6:	f1b8 0f00 	cmp.w	r8, #0
 803a0aa:	d019      	beq.n	803a0e0 <__ssvfiscanf_r+0xb48>
 803a0ac:	4e4b      	ldr	r6, [pc, #300]	@ (803a1dc <__ssvfiscanf_r+0xc44>)
 803a0ae:	6823      	ldr	r3, [r4, #0]
 803a0b0:	781a      	ldrb	r2, [r3, #0]
 803a0b2:	5cb2      	ldrb	r2, [r6, r2]
 803a0b4:	0712      	lsls	r2, r2, #28
 803a0b6:	f53f acfc 	bmi.w	8039ab2 <__ssvfiscanf_r+0x51a>
 803a0ba:	3301      	adds	r3, #1
 803a0bc:	6862      	ldr	r2, [r4, #4]
 803a0be:	6023      	str	r3, [r4, #0]
 803a0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803a0c2:	3501      	adds	r5, #1
 803a0c4:	3a01      	subs	r2, #1
 803a0c6:	429d      	cmp	r5, r3
 803a0c8:	6062      	str	r2, [r4, #4]
 803a0ca:	f43f acf2 	beq.w	8039ab2 <__ssvfiscanf_r+0x51a>
 803a0ce:	2a00      	cmp	r2, #0
 803a0d0:	dced      	bgt.n	803a0ae <__ssvfiscanf_r+0xb16>
 803a0d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803a0d4:	4621      	mov	r1, r4
 803a0d6:	f7ff fa08 	bl	80394ea <__ssrefill_r>
 803a0da:	2800      	cmp	r0, #0
 803a0dc:	d0e7      	beq.n	803a0ae <__ssvfiscanf_r+0xb16>
 803a0de:	e4e8      	b.n	8039ab2 <__ssvfiscanf_r+0x51a>
 803a0e0:	6a3b      	ldr	r3, [r7, #32]
 803a0e2:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803a0e6:	f853 5b04 	ldr.w	r5, [r3], #4
 803a0ea:	623b      	str	r3, [r7, #32]
 803a0ec:	d074      	beq.n	803a1d8 <__ssvfiscanf_r+0xc40>
 803a0ee:	2d00      	cmp	r5, #0
 803a0f0:	f43f aa9f 	beq.w	8039632 <__ssvfiscanf_r+0x9a>
 803a0f4:	2020      	movs	r0, #32
 803a0f6:	f7fe fa39 	bl	803856c <malloc>
 803a0fa:	4680      	mov	r8, r0
 803a0fc:	2800      	cmp	r0, #0
 803a0fe:	f43f ab07 	beq.w	8039710 <__ssvfiscanf_r+0x178>
 803a102:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 803a106:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 803a10a:	6028      	str	r0, [r5, #0]
 803a10c:	45b1      	cmp	r9, r6
 803a10e:	d312      	bcc.n	803a136 <__ssvfiscanf_r+0xb9e>
 803a110:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803a114:	429e      	cmp	r6, r3
 803a116:	f200 8153 	bhi.w	803a3c0 <__ssvfiscanf_r+0xe28>
 803a11a:	3608      	adds	r6, #8
 803a11c:	b2b6      	uxth	r6, r6
 803a11e:	f8db 0000 	ldr.w	r0, [fp]
 803a122:	00b1      	lsls	r1, r6, #2
 803a124:	f003 f9ac 	bl	803d480 <realloc>
 803a128:	2800      	cmp	r0, #0
 803a12a:	f000 8149 	beq.w	803a3c0 <__ssvfiscanf_r+0xe28>
 803a12e:	f8cb 0000 	str.w	r0, [fp]
 803a132:	f8ab 6004 	strh.w	r6, [fp, #4]
 803a136:	f8db 3000 	ldr.w	r3, [fp]
 803a13a:	f109 0201 	add.w	r2, r9, #1
 803a13e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 803a142:	46aa      	mov	sl, r5
 803a144:	f8ab 2006 	strh.w	r2, [fp, #6]
 803a148:	4645      	mov	r5, r8
 803a14a:	2620      	movs	r6, #32
 803a14c:	46a9      	mov	r9, r5
 803a14e:	6823      	ldr	r3, [r4, #0]
 803a150:	4922      	ldr	r1, [pc, #136]	@ (803a1dc <__ssvfiscanf_r+0xc44>)
 803a152:	781a      	ldrb	r2, [r3, #0]
 803a154:	5c8a      	ldrb	r2, [r1, r2]
 803a156:	0710      	lsls	r0, r2, #28
 803a158:	d428      	bmi.n	803a1ac <__ssvfiscanf_r+0xc14>
 803a15a:	6862      	ldr	r2, [r4, #4]
 803a15c:	3a01      	subs	r2, #1
 803a15e:	6062      	str	r2, [r4, #4]
 803a160:	1c5a      	adds	r2, r3, #1
 803a162:	6022      	str	r2, [r4, #0]
 803a164:	781b      	ldrb	r3, [r3, #0]
 803a166:	f805 3b01 	strb.w	r3, [r5], #1
 803a16a:	f1ba 0f00 	cmp.w	sl, #0
 803a16e:	d010      	beq.n	803a192 <__ssvfiscanf_r+0xbfa>
 803a170:	eba5 0809 	sub.w	r8, r5, r9
 803a174:	45b0      	cmp	r8, r6
 803a176:	d30c      	bcc.n	803a192 <__ssvfiscanf_r+0xbfa>
 803a178:	0076      	lsls	r6, r6, #1
 803a17a:	4648      	mov	r0, r9
 803a17c:	4631      	mov	r1, r6
 803a17e:	f003 f97f 	bl	803d480 <realloc>
 803a182:	4681      	mov	r9, r0
 803a184:	2800      	cmp	r0, #0
 803a186:	f43f aac3 	beq.w	8039710 <__ssvfiscanf_r+0x178>
 803a18a:	eb00 0508 	add.w	r5, r0, r8
 803a18e:	f8ca 0000 	str.w	r0, [sl]
 803a192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803a194:	3b01      	subs	r3, #1
 803a196:	62bb      	str	r3, [r7, #40]	@ 0x28
 803a198:	d008      	beq.n	803a1ac <__ssvfiscanf_r+0xc14>
 803a19a:	6863      	ldr	r3, [r4, #4]
 803a19c:	2b00      	cmp	r3, #0
 803a19e:	dcd6      	bgt.n	803a14e <__ssvfiscanf_r+0xbb6>
 803a1a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803a1a2:	4621      	mov	r1, r4
 803a1a4:	f7ff f9a1 	bl	80394ea <__ssrefill_r>
 803a1a8:	2800      	cmp	r0, #0
 803a1aa:	d0d0      	beq.n	803a14e <__ssvfiscanf_r+0xbb6>
 803a1ac:	2300      	movs	r3, #0
 803a1ae:	702b      	strb	r3, [r5, #0]
 803a1b0:	eba5 0509 	sub.w	r5, r5, r9
 803a1b4:	f1ba 0f00 	cmp.w	sl, #0
 803a1b8:	f43f acce 	beq.w	8039b58 <__ssvfiscanf_r+0x5c0>
 803a1bc:	1c69      	adds	r1, r5, #1
 803a1be:	428e      	cmp	r6, r1
 803a1c0:	f67f acca 	bls.w	8039b58 <__ssvfiscanf_r+0x5c0>
 803a1c4:	f8da 0000 	ldr.w	r0, [sl]
 803a1c8:	f003 f95a 	bl	803d480 <realloc>
 803a1cc:	2800      	cmp	r0, #0
 803a1ce:	f43f acc3 	beq.w	8039b58 <__ssvfiscanf_r+0x5c0>
 803a1d2:	f8ca 0000 	str.w	r0, [sl]
 803a1d6:	e4bf      	b.n	8039b58 <__ssvfiscanf_r+0x5c0>
 803a1d8:	46b2      	mov	sl, r6
 803a1da:	e7b7      	b.n	803a14c <__ssvfiscanf_r+0xbb4>
 803a1dc:	08045025 	.word	0x08045025
 803a1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803a1e2:	3b01      	subs	r3, #1
 803a1e4:	2b26      	cmp	r3, #38	@ 0x26
 803a1e6:	bf81      	itttt	hi
 803a1e8:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 803a1ea:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 803a1ee:	2327      	movhi	r3, #39	@ 0x27
 803a1f0:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 803a1f2:	bf98      	it	ls
 803a1f4:	f04f 0800 	movls.w	r8, #0
 803a1f8:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 803a1fc:	f04f 0900 	mov.w	r9, #0
 803a200:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 803a204:	6822      	ldr	r2, [r4, #0]
 803a206:	7813      	ldrb	r3, [r2, #0]
 803a208:	2b39      	cmp	r3, #57	@ 0x39
 803a20a:	d80f      	bhi.n	803a22c <__ssvfiscanf_r+0xc94>
 803a20c:	2b2a      	cmp	r3, #42	@ 0x2a
 803a20e:	d91a      	bls.n	803a246 <__ssvfiscanf_r+0xcae>
 803a210:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 803a214:	290e      	cmp	r1, #14
 803a216:	d816      	bhi.n	803a246 <__ssvfiscanf_r+0xcae>
 803a218:	e8df f001 	tbb	[pc, r1]
 803a21c:	15771577 	.word	0x15771577
 803a220:	67673e15 	.word	0x67673e15
 803a224:	67676767 	.word	0x67676767
 803a228:	6f67      	.short	0x6f67
 803a22a:	6f          	.byte	0x6f
 803a22b:	00          	.byte	0x00
 803a22c:	2b66      	cmp	r3, #102	@ 0x66
 803a22e:	d831      	bhi.n	803a294 <__ssvfiscanf_r+0xcfc>
 803a230:	2b60      	cmp	r3, #96	@ 0x60
 803a232:	d803      	bhi.n	803a23c <__ssvfiscanf_r+0xca4>
 803a234:	2b46      	cmp	r3, #70	@ 0x46
 803a236:	d804      	bhi.n	803a242 <__ssvfiscanf_r+0xcaa>
 803a238:	2b40      	cmp	r3, #64	@ 0x40
 803a23a:	d904      	bls.n	803a246 <__ssvfiscanf_r+0xcae>
 803a23c:	6979      	ldr	r1, [r7, #20]
 803a23e:	290a      	cmp	r1, #10
 803a240:	e061      	b.n	803a306 <__ssvfiscanf_r+0xd6e>
 803a242:	2b58      	cmp	r3, #88	@ 0x58
 803a244:	d066      	beq.n	803a314 <__ssvfiscanf_r+0xd7c>
 803a246:	05f1      	lsls	r1, r6, #23
 803a248:	d511      	bpl.n	803a26e <__ssvfiscanf_r+0xcd6>
 803a24a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803a24e:	459a      	cmp	sl, r3
 803a250:	d908      	bls.n	803a264 <__ssvfiscanf_r+0xccc>
 803a252:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 803a256:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803a258:	4622      	mov	r2, r4
 803a25a:	f7ff f90b 	bl	8039474 <_sungetc_r>
 803a25e:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 803a262:	46c2      	mov	sl, r8
 803a264:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803a268:	459a      	cmp	sl, r3
 803a26a:	f43f a9e2 	beq.w	8039632 <__ssvfiscanf_r+0x9a>
 803a26e:	f016 0210 	ands.w	r2, r6, #16
 803a272:	d16b      	bne.n	803a34c <__ssvfiscanf_r+0xdb4>
 803a274:	697b      	ldr	r3, [r7, #20]
 803a276:	f88a 2000 	strb.w	r2, [sl]
 803a27a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803a27c:	68fd      	ldr	r5, [r7, #12]
 803a27e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 803a282:	47a8      	blx	r5
 803a284:	6a3b      	ldr	r3, [r7, #32]
 803a286:	06b2      	lsls	r2, r6, #26
 803a288:	f103 0804 	add.w	r8, r3, #4
 803a28c:	d555      	bpl.n	803a33a <__ssvfiscanf_r+0xda2>
 803a28e:	681b      	ldr	r3, [r3, #0]
 803a290:	6018      	str	r0, [r3, #0]
 803a292:	e057      	b.n	803a344 <__ssvfiscanf_r+0xdac>
 803a294:	2b78      	cmp	r3, #120	@ 0x78
 803a296:	e7d5      	b.n	803a244 <__ssvfiscanf_r+0xcac>
 803a298:	0531      	lsls	r1, r6, #20
 803a29a:	d509      	bpl.n	803a2b0 <__ssvfiscanf_r+0xd18>
 803a29c:	6979      	ldr	r1, [r7, #20]
 803a29e:	b919      	cbnz	r1, 803a2a8 <__ssvfiscanf_r+0xd10>
 803a2a0:	2108      	movs	r1, #8
 803a2a2:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 803a2a6:	6179      	str	r1, [r7, #20]
 803a2a8:	0575      	lsls	r5, r6, #21
 803a2aa:	d506      	bpl.n	803a2ba <__ssvfiscanf_r+0xd22>
 803a2ac:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 803a2b0:	4655      	mov	r5, sl
 803a2b2:	f805 3b01 	strb.w	r3, [r5], #1
 803a2b6:	46aa      	mov	sl, r5
 803a2b8:	e00b      	b.n	803a2d2 <__ssvfiscanf_r+0xd3a>
 803a2ba:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 803a2be:	f1b8 0f00 	cmp.w	r8, #0
 803a2c2:	d004      	beq.n	803a2ce <__ssvfiscanf_r+0xd36>
 803a2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803a2c6:	3301      	adds	r3, #1
 803a2c8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803a2cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 803a2ce:	f109 0901 	add.w	r9, r9, #1
 803a2d2:	6863      	ldr	r3, [r4, #4]
 803a2d4:	3b01      	subs	r3, #1
 803a2d6:	2b00      	cmp	r3, #0
 803a2d8:	6063      	str	r3, [r4, #4]
 803a2da:	dd27      	ble.n	803a32c <__ssvfiscanf_r+0xd94>
 803a2dc:	3201      	adds	r2, #1
 803a2de:	6022      	str	r2, [r4, #0]
 803a2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803a2e2:	3b01      	subs	r3, #1
 803a2e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 803a2e6:	d18d      	bne.n	803a204 <__ssvfiscanf_r+0xc6c>
 803a2e8:	e7ad      	b.n	803a246 <__ssvfiscanf_r+0xcae>
 803a2ea:	6978      	ldr	r0, [r7, #20]
 803a2ec:	4936      	ldr	r1, [pc, #216]	@ (803a3c8 <__ssvfiscanf_r+0xe30>)
 803a2ee:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 803a2f2:	6179      	str	r1, [r7, #20]
 803a2f4:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 803a2f8:	e7da      	b.n	803a2b0 <__ssvfiscanf_r+0xd18>
 803a2fa:	6978      	ldr	r0, [r7, #20]
 803a2fc:	4932      	ldr	r1, [pc, #200]	@ (803a3c8 <__ssvfiscanf_r+0xe30>)
 803a2fe:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 803a302:	6179      	str	r1, [r7, #20]
 803a304:	2908      	cmp	r1, #8
 803a306:	dcf5      	bgt.n	803a2f4 <__ssvfiscanf_r+0xd5c>
 803a308:	e79d      	b.n	803a246 <__ssvfiscanf_r+0xcae>
 803a30a:	0630      	lsls	r0, r6, #24
 803a30c:	d59b      	bpl.n	803a246 <__ssvfiscanf_r+0xcae>
 803a30e:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 803a312:	e7cd      	b.n	803a2b0 <__ssvfiscanf_r+0xd18>
 803a314:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 803a318:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 803a31c:	d193      	bne.n	803a246 <__ssvfiscanf_r+0xcae>
 803a31e:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 803a322:	2110      	movs	r1, #16
 803a324:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 803a328:	6179      	str	r1, [r7, #20]
 803a32a:	e7c1      	b.n	803a2b0 <__ssvfiscanf_r+0xd18>
 803a32c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803a32e:	4621      	mov	r1, r4
 803a330:	f7ff f8db 	bl	80394ea <__ssrefill_r>
 803a334:	2800      	cmp	r0, #0
 803a336:	d0d3      	beq.n	803a2e0 <__ssvfiscanf_r+0xd48>
 803a338:	e785      	b.n	803a246 <__ssvfiscanf_r+0xcae>
 803a33a:	0733      	lsls	r3, r6, #28
 803a33c:	d50d      	bpl.n	803a35a <__ssvfiscanf_r+0xdc2>
 803a33e:	6a3b      	ldr	r3, [r7, #32]
 803a340:	681b      	ldr	r3, [r3, #0]
 803a342:	7018      	strb	r0, [r3, #0]
 803a344:	69fb      	ldr	r3, [r7, #28]
 803a346:	3301      	adds	r3, #1
 803a348:	e9c7 3807 	strd	r3, r8, [r7, #28]
 803a34c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803a350:	ebaa 0503 	sub.w	r5, sl, r3
 803a354:	444d      	add	r5, r9
 803a356:	f7ff bbac 	b.w	8039ab2 <__ssvfiscanf_r+0x51a>
 803a35a:	0775      	lsls	r5, r6, #29
 803a35c:	d503      	bpl.n	803a366 <__ssvfiscanf_r+0xdce>
 803a35e:	6a3b      	ldr	r3, [r7, #32]
 803a360:	681b      	ldr	r3, [r3, #0]
 803a362:	8018      	strh	r0, [r3, #0]
 803a364:	e7ee      	b.n	803a344 <__ssvfiscanf_r+0xdac>
 803a366:	f016 0201 	ands.w	r2, r6, #1
 803a36a:	d001      	beq.n	803a370 <__ssvfiscanf_r+0xdd8>
 803a36c:	6a3b      	ldr	r3, [r7, #32]
 803a36e:	e78e      	b.n	803a28e <__ssvfiscanf_r+0xcf6>
 803a370:	07b1      	lsls	r1, r6, #30
 803a372:	d5fb      	bpl.n	803a36c <__ssvfiscanf_r+0xdd4>
 803a374:	4b15      	ldr	r3, [pc, #84]	@ (803a3cc <__ssvfiscanf_r+0xe34>)
 803a376:	68f9      	ldr	r1, [r7, #12]
 803a378:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803a37a:	4299      	cmp	r1, r3
 803a37c:	697b      	ldr	r3, [r7, #20]
 803a37e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 803a382:	d106      	bne.n	803a392 <__ssvfiscanf_r+0xdfa>
 803a384:	f004 fc34 	bl	803ebf0 <_strtoull_r>
 803a388:	6a3b      	ldr	r3, [r7, #32]
 803a38a:	681b      	ldr	r3, [r3, #0]
 803a38c:	e9c3 0100 	strd	r0, r1, [r3]
 803a390:	e7d8      	b.n	803a344 <__ssvfiscanf_r+0xdac>
 803a392:	f004 fb81 	bl	803ea98 <_strtoll_r>
 803a396:	e7f7      	b.n	803a388 <__ssvfiscanf_r+0xdf0>
 803a398:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803a39c:	6818      	ldr	r0, [r3, #0]
 803a39e:	f7fe f8ed 	bl	803857c <free>
 803a3a2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803a3a6:	3401      	adds	r4, #1
 803a3a8:	601e      	str	r6, [r3, #0]
 803a3aa:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 803a3ae:	f8db 5000 	ldr.w	r5, [fp]
 803a3b2:	42a3      	cmp	r3, r4
 803a3b4:	dcf0      	bgt.n	803a398 <__ssvfiscanf_r+0xe00>
 803a3b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803a3ba:	61fb      	str	r3, [r7, #28]
 803a3bc:	f7ff ba46 	b.w	803984c <__ssvfiscanf_r+0x2b4>
 803a3c0:	2400      	movs	r4, #0
 803a3c2:	4626      	mov	r6, r4
 803a3c4:	e7f1      	b.n	803a3aa <__ssvfiscanf_r+0xe12>
 803a3c6:	bf00      	nop
 803a3c8:	080451bc 	.word	0x080451bc
 803a3cc:	0803e5e9 	.word	0x0803e5e9

0803a3d0 <_svfprintf_r>:
 803a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803a3d4:	b0d3      	sub	sp, #332	@ 0x14c
 803a3d6:	468b      	mov	fp, r1
 803a3d8:	4691      	mov	r9, r2
 803a3da:	461e      	mov	r6, r3
 803a3dc:	9003      	str	r0, [sp, #12]
 803a3de:	f7fd f80d 	bl	80373fc <_localeconv_r>
 803a3e2:	6803      	ldr	r3, [r0, #0]
 803a3e4:	9316      	str	r3, [sp, #88]	@ 0x58
 803a3e6:	4618      	mov	r0, r3
 803a3e8:	f7d5 ff5a 	bl	80102a0 <strlen>
 803a3ec:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803a3f0:	900d      	str	r0, [sp, #52]	@ 0x34
 803a3f2:	061b      	lsls	r3, r3, #24
 803a3f4:	d515      	bpl.n	803a422 <_svfprintf_r+0x52>
 803a3f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 803a3fa:	b993      	cbnz	r3, 803a422 <_svfprintf_r+0x52>
 803a3fc:	9803      	ldr	r0, [sp, #12]
 803a3fe:	2140      	movs	r1, #64	@ 0x40
 803a400:	f7fe f8c4 	bl	803858c <_malloc_r>
 803a404:	f8cb 0000 	str.w	r0, [fp]
 803a408:	f8cb 0010 	str.w	r0, [fp, #16]
 803a40c:	b930      	cbnz	r0, 803a41c <_svfprintf_r+0x4c>
 803a40e:	9a03      	ldr	r2, [sp, #12]
 803a410:	230c      	movs	r3, #12
 803a412:	6013      	str	r3, [r2, #0]
 803a414:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803a418:	930f      	str	r3, [sp, #60]	@ 0x3c
 803a41a:	e1f7      	b.n	803a80c <_svfprintf_r+0x43c>
 803a41c:	2340      	movs	r3, #64	@ 0x40
 803a41e:	f8cb 3014 	str.w	r3, [fp, #20]
 803a422:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 803a670 <_svfprintf_r+0x2a0>
 803a426:	2300      	movs	r3, #0
 803a428:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 803a42c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 803a430:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 803a434:	ac29      	add	r4, sp, #164	@ 0xa4
 803a436:	9426      	str	r4, [sp, #152]	@ 0x98
 803a438:	9304      	str	r3, [sp, #16]
 803a43a:	9309      	str	r3, [sp, #36]	@ 0x24
 803a43c:	9312      	str	r3, [sp, #72]	@ 0x48
 803a43e:	9317      	str	r3, [sp, #92]	@ 0x5c
 803a440:	930f      	str	r3, [sp, #60]	@ 0x3c
 803a442:	464b      	mov	r3, r9
 803a444:	461d      	mov	r5, r3
 803a446:	f813 2b01 	ldrb.w	r2, [r3], #1
 803a44a:	b10a      	cbz	r2, 803a450 <_svfprintf_r+0x80>
 803a44c:	2a25      	cmp	r2, #37	@ 0x25
 803a44e:	d1f9      	bne.n	803a444 <_svfprintf_r+0x74>
 803a450:	ebb5 0709 	subs.w	r7, r5, r9
 803a454:	d00d      	beq.n	803a472 <_svfprintf_r+0xa2>
 803a456:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803a458:	443b      	add	r3, r7
 803a45a:	9328      	str	r3, [sp, #160]	@ 0xa0
 803a45c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803a45e:	3301      	adds	r3, #1
 803a460:	2b07      	cmp	r3, #7
 803a462:	e9c4 9700 	strd	r9, r7, [r4]
 803a466:	9327      	str	r3, [sp, #156]	@ 0x9c
 803a468:	dc75      	bgt.n	803a556 <_svfprintf_r+0x186>
 803a46a:	3408      	adds	r4, #8
 803a46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803a46e:	443b      	add	r3, r7
 803a470:	930f      	str	r3, [sp, #60]	@ 0x3c
 803a472:	782b      	ldrb	r3, [r5, #0]
 803a474:	2b00      	cmp	r3, #0
 803a476:	f001 8148 	beq.w	803b70a <_svfprintf_r+0x133a>
 803a47a:	2200      	movs	r2, #0
 803a47c:	1c6b      	adds	r3, r5, #1
 803a47e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 803a482:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 803a486:	920e      	str	r2, [sp, #56]	@ 0x38
 803a488:	4615      	mov	r5, r2
 803a48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803a48e:	9206      	str	r2, [sp, #24]
 803a490:	930c      	str	r3, [sp, #48]	@ 0x30
 803a492:	9b06      	ldr	r3, [sp, #24]
 803a494:	3b20      	subs	r3, #32
 803a496:	2b5a      	cmp	r3, #90	@ 0x5a
 803a498:	f200 85a4 	bhi.w	803afe4 <_svfprintf_r+0xc14>
 803a49c:	e8df f013 	tbh	[pc, r3, lsl #1]
 803a4a0:	05a2009d 	.word	0x05a2009d
 803a4a4:	00a505a2 	.word	0x00a505a2
 803a4a8:	05a205a2 	.word	0x05a205a2
 803a4ac:	008505a2 	.word	0x008505a2
 803a4b0:	05a205a2 	.word	0x05a205a2
 803a4b4:	00b200a8 	.word	0x00b200a8
 803a4b8:	00af05a2 	.word	0x00af05a2
 803a4bc:	05a200b4 	.word	0x05a200b4
 803a4c0:	00d100ce 	.word	0x00d100ce
 803a4c4:	00d100d1 	.word	0x00d100d1
 803a4c8:	00d100d1 	.word	0x00d100d1
 803a4cc:	00d100d1 	.word	0x00d100d1
 803a4d0:	00d100d1 	.word	0x00d100d1
 803a4d4:	05a205a2 	.word	0x05a205a2
 803a4d8:	05a205a2 	.word	0x05a205a2
 803a4dc:	05a205a2 	.word	0x05a205a2
 803a4e0:	014705a2 	.word	0x014705a2
 803a4e4:	010805a2 	.word	0x010805a2
 803a4e8:	0147011b 	.word	0x0147011b
 803a4ec:	01470147 	.word	0x01470147
 803a4f0:	05a205a2 	.word	0x05a205a2
 803a4f4:	05a205a2 	.word	0x05a205a2
 803a4f8:	05a200e2 	.word	0x05a200e2
 803a4fc:	049d05a2 	.word	0x049d05a2
 803a500:	05a205a2 	.word	0x05a205a2
 803a504:	04e705a2 	.word	0x04e705a2
 803a508:	050805a2 	.word	0x050805a2
 803a50c:	05a205a2 	.word	0x05a205a2
 803a510:	05a2052a 	.word	0x05a2052a
 803a514:	05a205a2 	.word	0x05a205a2
 803a518:	05a205a2 	.word	0x05a205a2
 803a51c:	05a205a2 	.word	0x05a205a2
 803a520:	014705a2 	.word	0x014705a2
 803a524:	010805a2 	.word	0x010805a2
 803a528:	0147011d 	.word	0x0147011d
 803a52c:	01470147 	.word	0x01470147
 803a530:	011d00ee 	.word	0x011d00ee
 803a534:	05a20102 	.word	0x05a20102
 803a538:	05a200fb 	.word	0x05a200fb
 803a53c:	049f047e 	.word	0x049f047e
 803a540:	010204d6 	.word	0x010204d6
 803a544:	04e705a2 	.word	0x04e705a2
 803a548:	050a009b 	.word	0x050a009b
 803a54c:	05a205a2 	.word	0x05a205a2
 803a550:	05a20065 	.word	0x05a20065
 803a554:	009b      	.short	0x009b
 803a556:	9803      	ldr	r0, [sp, #12]
 803a558:	aa26      	add	r2, sp, #152	@ 0x98
 803a55a:	4659      	mov	r1, fp
 803a55c:	f7fe fac0 	bl	8038ae0 <__ssprint_r>
 803a560:	2800      	cmp	r0, #0
 803a562:	f040 814e 	bne.w	803a802 <_svfprintf_r+0x432>
 803a566:	ac29      	add	r4, sp, #164	@ 0xa4
 803a568:	e780      	b.n	803a46c <_svfprintf_r+0x9c>
 803a56a:	4b43      	ldr	r3, [pc, #268]	@ (803a678 <_svfprintf_r+0x2a8>)
 803a56c:	9319      	str	r3, [sp, #100]	@ 0x64
 803a56e:	f015 0320 	ands.w	r3, r5, #32
 803a572:	f000 84c2 	beq.w	803aefa <_svfprintf_r+0xb2a>
 803a576:	3607      	adds	r6, #7
 803a578:	f026 0307 	bic.w	r3, r6, #7
 803a57c:	461a      	mov	r2, r3
 803a57e:	685f      	ldr	r7, [r3, #4]
 803a580:	f852 6b08 	ldr.w	r6, [r2], #8
 803a584:	9207      	str	r2, [sp, #28]
 803a586:	07eb      	lsls	r3, r5, #31
 803a588:	d50a      	bpl.n	803a5a0 <_svfprintf_r+0x1d0>
 803a58a:	ea56 0307 	orrs.w	r3, r6, r7
 803a58e:	d007      	beq.n	803a5a0 <_svfprintf_r+0x1d0>
 803a590:	2330      	movs	r3, #48	@ 0x30
 803a592:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 803a596:	9b06      	ldr	r3, [sp, #24]
 803a598:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803a59c:	f045 0502 	orr.w	r5, r5, #2
 803a5a0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 803a5a4:	2302      	movs	r3, #2
 803a5a6:	f000 bc28 	b.w	803adfa <_svfprintf_r+0xa2a>
 803a5aa:	9803      	ldr	r0, [sp, #12]
 803a5ac:	f7fc ff26 	bl	80373fc <_localeconv_r>
 803a5b0:	6843      	ldr	r3, [r0, #4]
 803a5b2:	9317      	str	r3, [sp, #92]	@ 0x5c
 803a5b4:	4618      	mov	r0, r3
 803a5b6:	f7d5 fe73 	bl	80102a0 <strlen>
 803a5ba:	9012      	str	r0, [sp, #72]	@ 0x48
 803a5bc:	9803      	ldr	r0, [sp, #12]
 803a5be:	f7fc ff1d 	bl	80373fc <_localeconv_r>
 803a5c2:	6883      	ldr	r3, [r0, #8]
 803a5c4:	9309      	str	r3, [sp, #36]	@ 0x24
 803a5c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803a5c8:	b12b      	cbz	r3, 803a5d6 <_svfprintf_r+0x206>
 803a5ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803a5cc:	b11b      	cbz	r3, 803a5d6 <_svfprintf_r+0x206>
 803a5ce:	781b      	ldrb	r3, [r3, #0]
 803a5d0:	b10b      	cbz	r3, 803a5d6 <_svfprintf_r+0x206>
 803a5d2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 803a5d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803a5d8:	e757      	b.n	803a48a <_svfprintf_r+0xba>
 803a5da:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803a5de:	2b00      	cmp	r3, #0
 803a5e0:	d1f9      	bne.n	803a5d6 <_svfprintf_r+0x206>
 803a5e2:	2320      	movs	r3, #32
 803a5e4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803a5e8:	e7f5      	b.n	803a5d6 <_svfprintf_r+0x206>
 803a5ea:	f045 0501 	orr.w	r5, r5, #1
 803a5ee:	e7f2      	b.n	803a5d6 <_svfprintf_r+0x206>
 803a5f0:	f856 3b04 	ldr.w	r3, [r6], #4
 803a5f4:	930e      	str	r3, [sp, #56]	@ 0x38
 803a5f6:	2b00      	cmp	r3, #0
 803a5f8:	daed      	bge.n	803a5d6 <_svfprintf_r+0x206>
 803a5fa:	425b      	negs	r3, r3
 803a5fc:	930e      	str	r3, [sp, #56]	@ 0x38
 803a5fe:	f045 0504 	orr.w	r5, r5, #4
 803a602:	e7e8      	b.n	803a5d6 <_svfprintf_r+0x206>
 803a604:	232b      	movs	r3, #43	@ 0x2b
 803a606:	e7ed      	b.n	803a5e4 <_svfprintf_r+0x214>
 803a608:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803a60a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803a60e:	9206      	str	r2, [sp, #24]
 803a610:	2a2a      	cmp	r2, #42	@ 0x2a
 803a612:	d10f      	bne.n	803a634 <_svfprintf_r+0x264>
 803a614:	f856 2b04 	ldr.w	r2, [r6], #4
 803a618:	930c      	str	r3, [sp, #48]	@ 0x30
 803a61a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 803a61e:	e7da      	b.n	803a5d6 <_svfprintf_r+0x206>
 803a620:	fb01 2808 	mla	r8, r1, r8, r2
 803a624:	f813 2b01 	ldrb.w	r2, [r3], #1
 803a628:	9206      	str	r2, [sp, #24]
 803a62a:	9a06      	ldr	r2, [sp, #24]
 803a62c:	3a30      	subs	r2, #48	@ 0x30
 803a62e:	2a09      	cmp	r2, #9
 803a630:	d9f6      	bls.n	803a620 <_svfprintf_r+0x250>
 803a632:	e72d      	b.n	803a490 <_svfprintf_r+0xc0>
 803a634:	f04f 0800 	mov.w	r8, #0
 803a638:	210a      	movs	r1, #10
 803a63a:	e7f6      	b.n	803a62a <_svfprintf_r+0x25a>
 803a63c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 803a640:	e7c9      	b.n	803a5d6 <_svfprintf_r+0x206>
 803a642:	2200      	movs	r2, #0
 803a644:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803a646:	920e      	str	r2, [sp, #56]	@ 0x38
 803a648:	210a      	movs	r1, #10
 803a64a:	9a06      	ldr	r2, [sp, #24]
 803a64c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 803a64e:	3a30      	subs	r2, #48	@ 0x30
 803a650:	fb01 2200 	mla	r2, r1, r0, r2
 803a654:	920e      	str	r2, [sp, #56]	@ 0x38
 803a656:	f813 2b01 	ldrb.w	r2, [r3], #1
 803a65a:	9206      	str	r2, [sp, #24]
 803a65c:	3a30      	subs	r2, #48	@ 0x30
 803a65e:	2a09      	cmp	r2, #9
 803a660:	d9f3      	bls.n	803a64a <_svfprintf_r+0x27a>
 803a662:	e715      	b.n	803a490 <_svfprintf_r+0xc0>
 803a664:	f045 0508 	orr.w	r5, r5, #8
 803a668:	e7b5      	b.n	803a5d6 <_svfprintf_r+0x206>
 803a66a:	bf00      	nop
 803a66c:	f3af 8000 	nop.w
	...
 803a678:	08044c78 	.word	0x08044c78
 803a67c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803a67e:	781b      	ldrb	r3, [r3, #0]
 803a680:	2b68      	cmp	r3, #104	@ 0x68
 803a682:	bf01      	itttt	eq
 803a684:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 803a686:	3301      	addeq	r3, #1
 803a688:	930c      	streq	r3, [sp, #48]	@ 0x30
 803a68a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 803a68e:	bf18      	it	ne
 803a690:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 803a694:	e79f      	b.n	803a5d6 <_svfprintf_r+0x206>
 803a696:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803a698:	781b      	ldrb	r3, [r3, #0]
 803a69a:	2b6c      	cmp	r3, #108	@ 0x6c
 803a69c:	d105      	bne.n	803a6aa <_svfprintf_r+0x2da>
 803a69e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803a6a0:	3301      	adds	r3, #1
 803a6a2:	930c      	str	r3, [sp, #48]	@ 0x30
 803a6a4:	f045 0520 	orr.w	r5, r5, #32
 803a6a8:	e795      	b.n	803a5d6 <_svfprintf_r+0x206>
 803a6aa:	f045 0510 	orr.w	r5, r5, #16
 803a6ae:	e792      	b.n	803a5d6 <_svfprintf_r+0x206>
 803a6b0:	4632      	mov	r2, r6
 803a6b2:	f852 3b04 	ldr.w	r3, [r2], #4
 803a6b6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 803a6ba:	2300      	movs	r3, #0
 803a6bc:	9207      	str	r2, [sp, #28]
 803a6be:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803a6c2:	469a      	mov	sl, r3
 803a6c4:	f04f 0801 	mov.w	r8, #1
 803a6c8:	9310      	str	r3, [sp, #64]	@ 0x40
 803a6ca:	461f      	mov	r7, r3
 803a6cc:	9308      	str	r3, [sp, #32]
 803a6ce:	461e      	mov	r6, r3
 803a6d0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 803a6d4:	e1d2      	b.n	803aa7c <_svfprintf_r+0x6ac>
 803a6d6:	f045 0510 	orr.w	r5, r5, #16
 803a6da:	06af      	lsls	r7, r5, #26
 803a6dc:	d512      	bpl.n	803a704 <_svfprintf_r+0x334>
 803a6de:	3607      	adds	r6, #7
 803a6e0:	f026 0307 	bic.w	r3, r6, #7
 803a6e4:	461a      	mov	r2, r3
 803a6e6:	685f      	ldr	r7, [r3, #4]
 803a6e8:	f852 6b08 	ldr.w	r6, [r2], #8
 803a6ec:	9207      	str	r2, [sp, #28]
 803a6ee:	2f00      	cmp	r7, #0
 803a6f0:	da06      	bge.n	803a700 <_svfprintf_r+0x330>
 803a6f2:	4276      	negs	r6, r6
 803a6f4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 803a6f8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 803a6fc:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803a700:	2301      	movs	r3, #1
 803a702:	e37d      	b.n	803ae00 <_svfprintf_r+0xa30>
 803a704:	4633      	mov	r3, r6
 803a706:	06ee      	lsls	r6, r5, #27
 803a708:	f853 7b04 	ldr.w	r7, [r3], #4
 803a70c:	9307      	str	r3, [sp, #28]
 803a70e:	d502      	bpl.n	803a716 <_svfprintf_r+0x346>
 803a710:	463e      	mov	r6, r7
 803a712:	17ff      	asrs	r7, r7, #31
 803a714:	e7eb      	b.n	803a6ee <_svfprintf_r+0x31e>
 803a716:	0668      	lsls	r0, r5, #25
 803a718:	d503      	bpl.n	803a722 <_svfprintf_r+0x352>
 803a71a:	b23e      	sxth	r6, r7
 803a71c:	f347 37c0 	sbfx	r7, r7, #15, #1
 803a720:	e7e5      	b.n	803a6ee <_svfprintf_r+0x31e>
 803a722:	05a9      	lsls	r1, r5, #22
 803a724:	d5f4      	bpl.n	803a710 <_svfprintf_r+0x340>
 803a726:	b27e      	sxtb	r6, r7
 803a728:	f347 17c0 	sbfx	r7, r7, #7, #1
 803a72c:	e7df      	b.n	803a6ee <_svfprintf_r+0x31e>
 803a72e:	3607      	adds	r6, #7
 803a730:	f026 0307 	bic.w	r3, r6, #7
 803a734:	ecb3 7b02 	vldmia	r3!, {d7}
 803a738:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 803a73c:	9307      	str	r3, [sp, #28]
 803a73e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803a740:	931a      	str	r3, [sp, #104]	@ 0x68
 803a742:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803a744:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 803a748:	931b      	str	r3, [sp, #108]	@ 0x6c
 803a74a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803a74e:	4b81      	ldr	r3, [pc, #516]	@ (803a954 <_svfprintf_r+0x584>)
 803a750:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803a754:	f7d6 fa02 	bl	8010b5c <__aeabi_dcmpun>
 803a758:	bb10      	cbnz	r0, 803a7a0 <_svfprintf_r+0x3d0>
 803a75a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803a75e:	4b7d      	ldr	r3, [pc, #500]	@ (803a954 <_svfprintf_r+0x584>)
 803a760:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803a764:	f7d6 f9dc 	bl	8010b20 <__aeabi_dcmple>
 803a768:	b9d0      	cbnz	r0, 803a7a0 <_svfprintf_r+0x3d0>
 803a76a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803a76e:	2200      	movs	r2, #0
 803a770:	2300      	movs	r3, #0
 803a772:	f7d6 f9cb 	bl	8010b0c <__aeabi_dcmplt>
 803a776:	b110      	cbz	r0, 803a77e <_svfprintf_r+0x3ae>
 803a778:	232d      	movs	r3, #45	@ 0x2d
 803a77a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803a77e:	4a76      	ldr	r2, [pc, #472]	@ (803a958 <_svfprintf_r+0x588>)
 803a780:	4b76      	ldr	r3, [pc, #472]	@ (803a95c <_svfprintf_r+0x58c>)
 803a782:	9906      	ldr	r1, [sp, #24]
 803a784:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 803a788:	2947      	cmp	r1, #71	@ 0x47
 803a78a:	bfd4      	ite	le
 803a78c:	4691      	movle	r9, r2
 803a78e:	4699      	movgt	r9, r3
 803a790:	f04f 0a00 	mov.w	sl, #0
 803a794:	f04f 0803 	mov.w	r8, #3
 803a798:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 803a79c:	f000 bfec 	b.w	803b778 <_svfprintf_r+0x13a8>
 803a7a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 803a7a4:	4610      	mov	r0, r2
 803a7a6:	4619      	mov	r1, r3
 803a7a8:	f7d6 f9d8 	bl	8010b5c <__aeabi_dcmpun>
 803a7ac:	4682      	mov	sl, r0
 803a7ae:	b140      	cbz	r0, 803a7c2 <_svfprintf_r+0x3f2>
 803a7b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803a7b2:	4a6b      	ldr	r2, [pc, #428]	@ (803a960 <_svfprintf_r+0x590>)
 803a7b4:	2b00      	cmp	r3, #0
 803a7b6:	bfbc      	itt	lt
 803a7b8:	232d      	movlt	r3, #45	@ 0x2d
 803a7ba:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 803a7be:	4b69      	ldr	r3, [pc, #420]	@ (803a964 <_svfprintf_r+0x594>)
 803a7c0:	e7df      	b.n	803a782 <_svfprintf_r+0x3b2>
 803a7c2:	9b06      	ldr	r3, [sp, #24]
 803a7c4:	2b61      	cmp	r3, #97	@ 0x61
 803a7c6:	d025      	beq.n	803a814 <_svfprintf_r+0x444>
 803a7c8:	2b41      	cmp	r3, #65	@ 0x41
 803a7ca:	d125      	bne.n	803a818 <_svfprintf_r+0x448>
 803a7cc:	2358      	movs	r3, #88	@ 0x58
 803a7ce:	2230      	movs	r2, #48	@ 0x30
 803a7d0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 803a7d4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 803a7d8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803a7dc:	f045 0502 	orr.w	r5, r5, #2
 803a7e0:	f340 80a5 	ble.w	803a92e <_svfprintf_r+0x55e>
 803a7e4:	9803      	ldr	r0, [sp, #12]
 803a7e6:	f108 0101 	add.w	r1, r8, #1
 803a7ea:	f7fd fecf 	bl	803858c <_malloc_r>
 803a7ee:	4681      	mov	r9, r0
 803a7f0:	2800      	cmp	r0, #0
 803a7f2:	f040 80a1 	bne.w	803a938 <_svfprintf_r+0x568>
 803a7f6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803a7fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803a7fe:	f8ab 300c 	strh.w	r3, [fp, #12]
 803a802:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803a806:	065b      	lsls	r3, r3, #25
 803a808:	f53f ae04 	bmi.w	803a414 <_svfprintf_r+0x44>
 803a80c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 803a80e:	b053      	add	sp, #332	@ 0x14c
 803a810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803a814:	2378      	movs	r3, #120	@ 0x78
 803a816:	e7da      	b.n	803a7ce <_svfprintf_r+0x3fe>
 803a818:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 803a81c:	f000 808e 	beq.w	803a93c <_svfprintf_r+0x56c>
 803a820:	9b06      	ldr	r3, [sp, #24]
 803a822:	f023 0320 	bic.w	r3, r3, #32
 803a826:	2b47      	cmp	r3, #71	@ 0x47
 803a828:	d105      	bne.n	803a836 <_svfprintf_r+0x466>
 803a82a:	f1b8 0f00 	cmp.w	r8, #0
 803a82e:	d102      	bne.n	803a836 <_svfprintf_r+0x466>
 803a830:	46c2      	mov	sl, r8
 803a832:	f04f 0801 	mov.w	r8, #1
 803a836:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 803a83a:	9311      	str	r3, [sp, #68]	@ 0x44
 803a83c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803a83e:	2b00      	cmp	r3, #0
 803a840:	da7f      	bge.n	803a942 <_svfprintf_r+0x572>
 803a842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803a844:	9314      	str	r3, [sp, #80]	@ 0x50
 803a846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803a848:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 803a84c:	9315      	str	r3, [sp, #84]	@ 0x54
 803a84e:	232d      	movs	r3, #45	@ 0x2d
 803a850:	931c      	str	r3, [sp, #112]	@ 0x70
 803a852:	9b06      	ldr	r3, [sp, #24]
 803a854:	f023 0320 	bic.w	r3, r3, #32
 803a858:	2b41      	cmp	r3, #65	@ 0x41
 803a85a:	9308      	str	r3, [sp, #32]
 803a85c:	f040 81e6 	bne.w	803ac2c <_svfprintf_r+0x85c>
 803a860:	a820      	add	r0, sp, #128	@ 0x80
 803a862:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 803a866:	f7fc fe9b 	bl	80375a0 <frexp>
 803a86a:	2200      	movs	r2, #0
 803a86c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 803a870:	ec51 0b10 	vmov	r0, r1, d0
 803a874:	f7d5 fed8 	bl	8010628 <__aeabi_dmul>
 803a878:	4602      	mov	r2, r0
 803a87a:	460b      	mov	r3, r1
 803a87c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 803a880:	2200      	movs	r2, #0
 803a882:	2300      	movs	r3, #0
 803a884:	f7d6 f938 	bl	8010af8 <__aeabi_dcmpeq>
 803a888:	b108      	cbz	r0, 803a88e <_svfprintf_r+0x4be>
 803a88a:	2301      	movs	r3, #1
 803a88c:	9320      	str	r3, [sp, #128]	@ 0x80
 803a88e:	4a36      	ldr	r2, [pc, #216]	@ (803a968 <_svfprintf_r+0x598>)
 803a890:	4b36      	ldr	r3, [pc, #216]	@ (803a96c <_svfprintf_r+0x59c>)
 803a892:	9906      	ldr	r1, [sp, #24]
 803a894:	2961      	cmp	r1, #97	@ 0x61
 803a896:	bf18      	it	ne
 803a898:	461a      	movne	r2, r3
 803a89a:	9210      	str	r2, [sp, #64]	@ 0x40
 803a89c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 803a8a0:	464e      	mov	r6, r9
 803a8a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803a8a6:	4b32      	ldr	r3, [pc, #200]	@ (803a970 <_svfprintf_r+0x5a0>)
 803a8a8:	2200      	movs	r2, #0
 803a8aa:	f7d5 febd 	bl	8010628 <__aeabi_dmul>
 803a8ae:	4602      	mov	r2, r0
 803a8b0:	460b      	mov	r3, r1
 803a8b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 803a8b6:	f7d6 f967 	bl	8010b88 <__aeabi_d2iz>
 803a8ba:	9013      	str	r0, [sp, #76]	@ 0x4c
 803a8bc:	f7d5 fe4a 	bl	8010554 <__aeabi_i2d>
 803a8c0:	4602      	mov	r2, r0
 803a8c2:	460b      	mov	r3, r1
 803a8c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803a8c8:	f7d5 fcf6 	bl	80102b8 <__aeabi_dsub>
 803a8cc:	4602      	mov	r2, r0
 803a8ce:	460b      	mov	r3, r1
 803a8d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 803a8d4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 803a8d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803a8d8:	5c9b      	ldrb	r3, [r3, r2]
 803a8da:	f806 3b01 	strb.w	r3, [r6], #1
 803a8de:	1c7a      	adds	r2, r7, #1
 803a8e0:	d006      	beq.n	803a8f0 <_svfprintf_r+0x520>
 803a8e2:	1e7b      	subs	r3, r7, #1
 803a8e4:	931d      	str	r3, [sp, #116]	@ 0x74
 803a8e6:	2200      	movs	r2, #0
 803a8e8:	2300      	movs	r3, #0
 803a8ea:	f7d6 f905 	bl	8010af8 <__aeabi_dcmpeq>
 803a8ee:	b370      	cbz	r0, 803a94e <_svfprintf_r+0x57e>
 803a8f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803a8f4:	4b1f      	ldr	r3, [pc, #124]	@ (803a974 <_svfprintf_r+0x5a4>)
 803a8f6:	2200      	movs	r2, #0
 803a8f8:	f7d6 f926 	bl	8010b48 <__aeabi_dcmpgt>
 803a8fc:	2800      	cmp	r0, #0
 803a8fe:	d13b      	bne.n	803a978 <_svfprintf_r+0x5a8>
 803a900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803a904:	4b1b      	ldr	r3, [pc, #108]	@ (803a974 <_svfprintf_r+0x5a4>)
 803a906:	2200      	movs	r2, #0
 803a908:	f7d6 f8f6 	bl	8010af8 <__aeabi_dcmpeq>
 803a90c:	b110      	cbz	r0, 803a914 <_svfprintf_r+0x544>
 803a90e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803a910:	07db      	lsls	r3, r3, #31
 803a912:	d431      	bmi.n	803a978 <_svfprintf_r+0x5a8>
 803a914:	4633      	mov	r3, r6
 803a916:	19f1      	adds	r1, r6, r7
 803a918:	2030      	movs	r0, #48	@ 0x30
 803a91a:	1aca      	subs	r2, r1, r3
 803a91c:	2a00      	cmp	r2, #0
 803a91e:	f280 8182 	bge.w	803ac26 <_svfprintf_r+0x856>
 803a922:	1c7b      	adds	r3, r7, #1
 803a924:	3701      	adds	r7, #1
 803a926:	bfb8      	it	lt
 803a928:	2300      	movlt	r3, #0
 803a92a:	441e      	add	r6, r3
 803a92c:	e038      	b.n	803a9a0 <_svfprintf_r+0x5d0>
 803a92e:	f04f 0a00 	mov.w	sl, #0
 803a932:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 803a936:	e77e      	b.n	803a836 <_svfprintf_r+0x466>
 803a938:	4682      	mov	sl, r0
 803a93a:	e77c      	b.n	803a836 <_svfprintf_r+0x466>
 803a93c:	f04f 0806 	mov.w	r8, #6
 803a940:	e779      	b.n	803a836 <_svfprintf_r+0x466>
 803a942:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 803a946:	2300      	movs	r3, #0
 803a948:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 803a94c:	e780      	b.n	803a850 <_svfprintf_r+0x480>
 803a94e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 803a950:	e7a7      	b.n	803a8a2 <_svfprintf_r+0x4d2>
 803a952:	bf00      	nop
 803a954:	7fefffff 	.word	0x7fefffff
 803a958:	08044c68 	.word	0x08044c68
 803a95c:	08044c6c 	.word	0x08044c6c
 803a960:	08044c70 	.word	0x08044c70
 803a964:	08044c74 	.word	0x08044c74
 803a968:	08044c78 	.word	0x08044c78
 803a96c:	08044c89 	.word	0x08044c89
 803a970:	40300000 	.word	0x40300000
 803a974:	3fe00000 	.word	0x3fe00000
 803a978:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803a97a:	9624      	str	r6, [sp, #144]	@ 0x90
 803a97c:	7bd9      	ldrb	r1, [r3, #15]
 803a97e:	2030      	movs	r0, #48	@ 0x30
 803a980:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 803a982:	1e53      	subs	r3, r2, #1
 803a984:	9324      	str	r3, [sp, #144]	@ 0x90
 803a986:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 803a98a:	428b      	cmp	r3, r1
 803a98c:	f000 8148 	beq.w	803ac20 <_svfprintf_r+0x850>
 803a990:	2b39      	cmp	r3, #57	@ 0x39
 803a992:	bf0b      	itete	eq
 803a994:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 803a996:	3301      	addne	r3, #1
 803a998:	7a9b      	ldrbeq	r3, [r3, #10]
 803a99a:	b2db      	uxtbne	r3, r3
 803a99c:	f802 3c01 	strb.w	r3, [r2, #-1]
 803a9a0:	eba6 0309 	sub.w	r3, r6, r9
 803a9a4:	9304      	str	r3, [sp, #16]
 803a9a6:	9b08      	ldr	r3, [sp, #32]
 803a9a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803a9aa:	2b47      	cmp	r3, #71	@ 0x47
 803a9ac:	f040 8187 	bne.w	803acbe <_svfprintf_r+0x8ee>
 803a9b0:	1cf1      	adds	r1, r6, #3
 803a9b2:	db02      	blt.n	803a9ba <_svfprintf_r+0x5ea>
 803a9b4:	4546      	cmp	r6, r8
 803a9b6:	f340 81a5 	ble.w	803ad04 <_svfprintf_r+0x934>
 803a9ba:	9b06      	ldr	r3, [sp, #24]
 803a9bc:	3b02      	subs	r3, #2
 803a9be:	9306      	str	r3, [sp, #24]
 803a9c0:	9906      	ldr	r1, [sp, #24]
 803a9c2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 803a9c6:	f021 0120 	bic.w	r1, r1, #32
 803a9ca:	2941      	cmp	r1, #65	@ 0x41
 803a9cc:	bf08      	it	eq
 803a9ce:	320f      	addeq	r2, #15
 803a9d0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 803a9d4:	bf06      	itte	eq
 803a9d6:	b2d2      	uxtbeq	r2, r2
 803a9d8:	2101      	moveq	r1, #1
 803a9da:	2100      	movne	r1, #0
 803a9dc:	2b00      	cmp	r3, #0
 803a9de:	9320      	str	r3, [sp, #128]	@ 0x80
 803a9e0:	bfb8      	it	lt
 803a9e2:	f1c6 0301 	rsblt	r3, r6, #1
 803a9e6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 803a9ea:	bfb4      	ite	lt
 803a9ec:	222d      	movlt	r2, #45	@ 0x2d
 803a9ee:	222b      	movge	r2, #43	@ 0x2b
 803a9f0:	2b09      	cmp	r3, #9
 803a9f2:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 803a9f6:	f340 8178 	ble.w	803acea <_svfprintf_r+0x91a>
 803a9fa:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803a9fe:	270a      	movs	r7, #10
 803aa00:	4602      	mov	r2, r0
 803aa02:	fbb3 f6f7 	udiv	r6, r3, r7
 803aa06:	fb07 3116 	mls	r1, r7, r6, r3
 803aa0a:	3130      	adds	r1, #48	@ 0x30
 803aa0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 803aa10:	4619      	mov	r1, r3
 803aa12:	2963      	cmp	r1, #99	@ 0x63
 803aa14:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 803aa18:	4633      	mov	r3, r6
 803aa1a:	dcf1      	bgt.n	803aa00 <_svfprintf_r+0x630>
 803aa1c:	3330      	adds	r3, #48	@ 0x30
 803aa1e:	1e91      	subs	r1, r2, #2
 803aa20:	f800 3c01 	strb.w	r3, [r0, #-1]
 803aa24:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 803aa28:	460b      	mov	r3, r1
 803aa2a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803aa2e:	4283      	cmp	r3, r0
 803aa30:	f0c0 8156 	bcc.w	803ace0 <_svfprintf_r+0x910>
 803aa34:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 803aa38:	1a9b      	subs	r3, r3, r2
 803aa3a:	4281      	cmp	r1, r0
 803aa3c:	bf88      	it	hi
 803aa3e:	2300      	movhi	r3, #0
 803aa40:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 803aa44:	441a      	add	r2, r3
 803aa46:	ab22      	add	r3, sp, #136	@ 0x88
 803aa48:	1ad3      	subs	r3, r2, r3
 803aa4a:	9a04      	ldr	r2, [sp, #16]
 803aa4c:	9318      	str	r3, [sp, #96]	@ 0x60
 803aa4e:	2a01      	cmp	r2, #1
 803aa50:	eb03 0802 	add.w	r8, r3, r2
 803aa54:	dc01      	bgt.n	803aa5a <_svfprintf_r+0x68a>
 803aa56:	07ea      	lsls	r2, r5, #31
 803aa58:	d501      	bpl.n	803aa5e <_svfprintf_r+0x68e>
 803aa5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803aa5c:	4498      	add	r8, r3
 803aa5e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 803aa62:	2700      	movs	r7, #0
 803aa64:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 803aa68:	9311      	str	r3, [sp, #68]	@ 0x44
 803aa6a:	9708      	str	r7, [sp, #32]
 803aa6c:	463e      	mov	r6, r7
 803aa6e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 803aa70:	2b00      	cmp	r3, #0
 803aa72:	f040 818f 	bne.w	803ad94 <_svfprintf_r+0x9c4>
 803aa76:	2300      	movs	r3, #0
 803aa78:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 803aa7a:	9310      	str	r3, [sp, #64]	@ 0x40
 803aa7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803aa7e:	4543      	cmp	r3, r8
 803aa80:	bfb8      	it	lt
 803aa82:	4643      	movlt	r3, r8
 803aa84:	9311      	str	r3, [sp, #68]	@ 0x44
 803aa86:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803aa8a:	b113      	cbz	r3, 803aa92 <_svfprintf_r+0x6c2>
 803aa8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803aa8e:	3301      	adds	r3, #1
 803aa90:	9311      	str	r3, [sp, #68]	@ 0x44
 803aa92:	f015 0302 	ands.w	r3, r5, #2
 803aa96:	931c      	str	r3, [sp, #112]	@ 0x70
 803aa98:	bf1e      	ittt	ne
 803aa9a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 803aa9c:	3302      	addne	r3, #2
 803aa9e:	9311      	strne	r3, [sp, #68]	@ 0x44
 803aaa0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 803aaa4:	931d      	str	r3, [sp, #116]	@ 0x74
 803aaa6:	d122      	bne.n	803aaee <_svfprintf_r+0x71e>
 803aaa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803aaaa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803aaac:	1a9b      	subs	r3, r3, r2
 803aaae:	2b00      	cmp	r3, #0
 803aab0:	9313      	str	r3, [sp, #76]	@ 0x4c
 803aab2:	dd1c      	ble.n	803aaee <_svfprintf_r+0x71e>
 803aab4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803aab6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803aaba:	2810      	cmp	r0, #16
 803aabc:	489e      	ldr	r0, [pc, #632]	@ (803ad38 <_svfprintf_r+0x968>)
 803aabe:	6020      	str	r0, [r4, #0]
 803aac0:	f102 0201 	add.w	r2, r2, #1
 803aac4:	f104 0108 	add.w	r1, r4, #8
 803aac8:	f300 8298 	bgt.w	803affc <_svfprintf_r+0xc2c>
 803aacc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803aace:	6060      	str	r0, [r4, #4]
 803aad0:	4403      	add	r3, r0
 803aad2:	2a07      	cmp	r2, #7
 803aad4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803aad8:	f340 82a5 	ble.w	803b026 <_svfprintf_r+0xc56>
 803aadc:	9803      	ldr	r0, [sp, #12]
 803aade:	aa26      	add	r2, sp, #152	@ 0x98
 803aae0:	4659      	mov	r1, fp
 803aae2:	f7fd fffd 	bl	8038ae0 <__ssprint_r>
 803aae6:	2800      	cmp	r0, #0
 803aae8:	f040 85ed 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803aaec:	ac29      	add	r4, sp, #164	@ 0xa4
 803aaee:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 803aaf2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803aaf4:	b16a      	cbz	r2, 803ab12 <_svfprintf_r+0x742>
 803aaf6:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 803aafa:	6022      	str	r2, [r4, #0]
 803aafc:	2201      	movs	r2, #1
 803aafe:	4413      	add	r3, r2
 803ab00:	9328      	str	r3, [sp, #160]	@ 0xa0
 803ab02:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803ab04:	6062      	str	r2, [r4, #4]
 803ab06:	4413      	add	r3, r2
 803ab08:	2b07      	cmp	r3, #7
 803ab0a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803ab0c:	f300 828d 	bgt.w	803b02a <_svfprintf_r+0xc5a>
 803ab10:	3408      	adds	r4, #8
 803ab12:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 803ab14:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803ab16:	b162      	cbz	r2, 803ab32 <_svfprintf_r+0x762>
 803ab18:	aa1f      	add	r2, sp, #124	@ 0x7c
 803ab1a:	6022      	str	r2, [r4, #0]
 803ab1c:	2202      	movs	r2, #2
 803ab1e:	4413      	add	r3, r2
 803ab20:	9328      	str	r3, [sp, #160]	@ 0xa0
 803ab22:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803ab24:	6062      	str	r2, [r4, #4]
 803ab26:	3301      	adds	r3, #1
 803ab28:	2b07      	cmp	r3, #7
 803ab2a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803ab2c:	f300 8287 	bgt.w	803b03e <_svfprintf_r+0xc6e>
 803ab30:	3408      	adds	r4, #8
 803ab32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 803ab34:	2b80      	cmp	r3, #128	@ 0x80
 803ab36:	d122      	bne.n	803ab7e <_svfprintf_r+0x7ae>
 803ab38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803ab3a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803ab3c:	1a9b      	subs	r3, r3, r2
 803ab3e:	2b00      	cmp	r3, #0
 803ab40:	9313      	str	r3, [sp, #76]	@ 0x4c
 803ab42:	dd1c      	ble.n	803ab7e <_svfprintf_r+0x7ae>
 803ab44:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803ab46:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803ab4a:	2810      	cmp	r0, #16
 803ab4c:	487b      	ldr	r0, [pc, #492]	@ (803ad3c <_svfprintf_r+0x96c>)
 803ab4e:	6020      	str	r0, [r4, #0]
 803ab50:	f102 0201 	add.w	r2, r2, #1
 803ab54:	f104 0108 	add.w	r1, r4, #8
 803ab58:	f300 827b 	bgt.w	803b052 <_svfprintf_r+0xc82>
 803ab5c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803ab5e:	6060      	str	r0, [r4, #4]
 803ab60:	4403      	add	r3, r0
 803ab62:	2a07      	cmp	r2, #7
 803ab64:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803ab68:	f340 8288 	ble.w	803b07c <_svfprintf_r+0xcac>
 803ab6c:	9803      	ldr	r0, [sp, #12]
 803ab6e:	aa26      	add	r2, sp, #152	@ 0x98
 803ab70:	4659      	mov	r1, fp
 803ab72:	f7fd ffb5 	bl	8038ae0 <__ssprint_r>
 803ab76:	2800      	cmp	r0, #0
 803ab78:	f040 85a5 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803ab7c:	ac29      	add	r4, sp, #164	@ 0xa4
 803ab7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803ab80:	eba3 0308 	sub.w	r3, r3, r8
 803ab84:	2b00      	cmp	r3, #0
 803ab86:	9310      	str	r3, [sp, #64]	@ 0x40
 803ab88:	dd1c      	ble.n	803abc4 <_svfprintf_r+0x7f4>
 803ab8a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 803ab8c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803ab90:	2810      	cmp	r0, #16
 803ab92:	486a      	ldr	r0, [pc, #424]	@ (803ad3c <_svfprintf_r+0x96c>)
 803ab94:	6020      	str	r0, [r4, #0]
 803ab96:	f102 0201 	add.w	r2, r2, #1
 803ab9a:	f104 0108 	add.w	r1, r4, #8
 803ab9e:	f300 826f 	bgt.w	803b080 <_svfprintf_r+0xcb0>
 803aba2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 803aba4:	6060      	str	r0, [r4, #4]
 803aba6:	4403      	add	r3, r0
 803aba8:	2a07      	cmp	r2, #7
 803abaa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803abae:	f340 827c 	ble.w	803b0aa <_svfprintf_r+0xcda>
 803abb2:	9803      	ldr	r0, [sp, #12]
 803abb4:	aa26      	add	r2, sp, #152	@ 0x98
 803abb6:	4659      	mov	r1, fp
 803abb8:	f7fd ff92 	bl	8038ae0 <__ssprint_r>
 803abbc:	2800      	cmp	r0, #0
 803abbe:	f040 8582 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803abc2:	ac29      	add	r4, sp, #164	@ 0xa4
 803abc4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803abc6:	9310      	str	r3, [sp, #64]	@ 0x40
 803abc8:	05ea      	lsls	r2, r5, #23
 803abca:	f100 8275 	bmi.w	803b0b8 <_svfprintf_r+0xce8>
 803abce:	4443      	add	r3, r8
 803abd0:	9328      	str	r3, [sp, #160]	@ 0xa0
 803abd2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803abd4:	3301      	adds	r3, #1
 803abd6:	2b07      	cmp	r3, #7
 803abd8:	e9c4 9800 	strd	r9, r8, [r4]
 803abdc:	9327      	str	r3, [sp, #156]	@ 0x9c
 803abde:	f300 82b1 	bgt.w	803b144 <_svfprintf_r+0xd74>
 803abe2:	3408      	adds	r4, #8
 803abe4:	076a      	lsls	r2, r5, #29
 803abe6:	f100 8550 	bmi.w	803b68a <_svfprintf_r+0x12ba>
 803abea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 803abee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 803abf0:	428a      	cmp	r2, r1
 803abf2:	bfac      	ite	ge
 803abf4:	189b      	addge	r3, r3, r2
 803abf6:	185b      	addlt	r3, r3, r1
 803abf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 803abfa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803abfc:	b13b      	cbz	r3, 803ac0e <_svfprintf_r+0x83e>
 803abfe:	9803      	ldr	r0, [sp, #12]
 803ac00:	aa26      	add	r2, sp, #152	@ 0x98
 803ac02:	4659      	mov	r1, fp
 803ac04:	f7fd ff6c 	bl	8038ae0 <__ssprint_r>
 803ac08:	2800      	cmp	r0, #0
 803ac0a:	f040 855c 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803ac0e:	2300      	movs	r3, #0
 803ac10:	9327      	str	r3, [sp, #156]	@ 0x9c
 803ac12:	f1ba 0f00 	cmp.w	sl, #0
 803ac16:	f040 8572 	bne.w	803b6fe <_svfprintf_r+0x132e>
 803ac1a:	9e07      	ldr	r6, [sp, #28]
 803ac1c:	ac29      	add	r4, sp, #164	@ 0xa4
 803ac1e:	e0c6      	b.n	803adae <_svfprintf_r+0x9de>
 803ac20:	f802 0c01 	strb.w	r0, [r2, #-1]
 803ac24:	e6ac      	b.n	803a980 <_svfprintf_r+0x5b0>
 803ac26:	f803 0b01 	strb.w	r0, [r3], #1
 803ac2a:	e676      	b.n	803a91a <_svfprintf_r+0x54a>
 803ac2c:	9b08      	ldr	r3, [sp, #32]
 803ac2e:	2b46      	cmp	r3, #70	@ 0x46
 803ac30:	d005      	beq.n	803ac3e <_svfprintf_r+0x86e>
 803ac32:	2b45      	cmp	r3, #69	@ 0x45
 803ac34:	d11a      	bne.n	803ac6c <_svfprintf_r+0x89c>
 803ac36:	f108 0601 	add.w	r6, r8, #1
 803ac3a:	2102      	movs	r1, #2
 803ac3c:	e001      	b.n	803ac42 <_svfprintf_r+0x872>
 803ac3e:	4646      	mov	r6, r8
 803ac40:	2103      	movs	r1, #3
 803ac42:	ab24      	add	r3, sp, #144	@ 0x90
 803ac44:	9301      	str	r3, [sp, #4]
 803ac46:	ab21      	add	r3, sp, #132	@ 0x84
 803ac48:	9300      	str	r3, [sp, #0]
 803ac4a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 803ac4e:	ab20      	add	r3, sp, #128	@ 0x80
 803ac50:	9803      	ldr	r0, [sp, #12]
 803ac52:	4632      	mov	r2, r6
 803ac54:	f7fc fd80 	bl	8037758 <_dtoa_r>
 803ac58:	9b08      	ldr	r3, [sp, #32]
 803ac5a:	2b47      	cmp	r3, #71	@ 0x47
 803ac5c:	4681      	mov	r9, r0
 803ac5e:	d119      	bne.n	803ac94 <_svfprintf_r+0x8c4>
 803ac60:	07e8      	lsls	r0, r5, #31
 803ac62:	d405      	bmi.n	803ac70 <_svfprintf_r+0x8a0>
 803ac64:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 803ac66:	eba3 0309 	sub.w	r3, r3, r9
 803ac6a:	e69b      	b.n	803a9a4 <_svfprintf_r+0x5d4>
 803ac6c:	4646      	mov	r6, r8
 803ac6e:	e7e4      	b.n	803ac3a <_svfprintf_r+0x86a>
 803ac70:	eb09 0706 	add.w	r7, r9, r6
 803ac74:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 803ac78:	2200      	movs	r2, #0
 803ac7a:	2300      	movs	r3, #0
 803ac7c:	f7d5 ff3c 	bl	8010af8 <__aeabi_dcmpeq>
 803ac80:	b100      	cbz	r0, 803ac84 <_svfprintf_r+0x8b4>
 803ac82:	9724      	str	r7, [sp, #144]	@ 0x90
 803ac84:	2230      	movs	r2, #48	@ 0x30
 803ac86:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 803ac88:	429f      	cmp	r7, r3
 803ac8a:	d9eb      	bls.n	803ac64 <_svfprintf_r+0x894>
 803ac8c:	1c59      	adds	r1, r3, #1
 803ac8e:	9124      	str	r1, [sp, #144]	@ 0x90
 803ac90:	701a      	strb	r2, [r3, #0]
 803ac92:	e7f8      	b.n	803ac86 <_svfprintf_r+0x8b6>
 803ac94:	9b08      	ldr	r3, [sp, #32]
 803ac96:	2b46      	cmp	r3, #70	@ 0x46
 803ac98:	eb00 0706 	add.w	r7, r0, r6
 803ac9c:	d1ea      	bne.n	803ac74 <_svfprintf_r+0x8a4>
 803ac9e:	7803      	ldrb	r3, [r0, #0]
 803aca0:	2b30      	cmp	r3, #48	@ 0x30
 803aca2:	d109      	bne.n	803acb8 <_svfprintf_r+0x8e8>
 803aca4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 803aca8:	2200      	movs	r2, #0
 803acaa:	2300      	movs	r3, #0
 803acac:	f7d5 ff24 	bl	8010af8 <__aeabi_dcmpeq>
 803acb0:	b910      	cbnz	r0, 803acb8 <_svfprintf_r+0x8e8>
 803acb2:	f1c6 0601 	rsb	r6, r6, #1
 803acb6:	9620      	str	r6, [sp, #128]	@ 0x80
 803acb8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803acba:	441f      	add	r7, r3
 803acbc:	e7da      	b.n	803ac74 <_svfprintf_r+0x8a4>
 803acbe:	9b08      	ldr	r3, [sp, #32]
 803acc0:	2b46      	cmp	r3, #70	@ 0x46
 803acc2:	f47f ae7d 	bne.w	803a9c0 <_svfprintf_r+0x5f0>
 803acc6:	f005 0301 	and.w	r3, r5, #1
 803acca:	2e00      	cmp	r6, #0
 803accc:	ea43 0308 	orr.w	r3, r3, r8
 803acd0:	dd25      	ble.n	803ad1e <_svfprintf_r+0x94e>
 803acd2:	b37b      	cbz	r3, 803ad34 <_svfprintf_r+0x964>
 803acd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803acd6:	18f3      	adds	r3, r6, r3
 803acd8:	4498      	add	r8, r3
 803acda:	2366      	movs	r3, #102	@ 0x66
 803acdc:	9306      	str	r3, [sp, #24]
 803acde:	e033      	b.n	803ad48 <_svfprintf_r+0x978>
 803ace0:	f813 7b01 	ldrb.w	r7, [r3], #1
 803ace4:	f806 7f01 	strb.w	r7, [r6, #1]!
 803ace8:	e6a1      	b.n	803aa2e <_svfprintf_r+0x65e>
 803acea:	b941      	cbnz	r1, 803acfe <_svfprintf_r+0x92e>
 803acec:	2230      	movs	r2, #48	@ 0x30
 803acee:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 803acf2:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 803acf6:	3330      	adds	r3, #48	@ 0x30
 803acf8:	f802 3b01 	strb.w	r3, [r2], #1
 803acfc:	e6a3      	b.n	803aa46 <_svfprintf_r+0x676>
 803acfe:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 803ad02:	e7f8      	b.n	803acf6 <_svfprintf_r+0x926>
 803ad04:	9b04      	ldr	r3, [sp, #16]
 803ad06:	429e      	cmp	r6, r3
 803ad08:	da0d      	bge.n	803ad26 <_svfprintf_r+0x956>
 803ad0a:	9b04      	ldr	r3, [sp, #16]
 803ad0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803ad0e:	2e00      	cmp	r6, #0
 803ad10:	eb03 0802 	add.w	r8, r3, r2
 803ad14:	dc0c      	bgt.n	803ad30 <_svfprintf_r+0x960>
 803ad16:	f1c6 0301 	rsb	r3, r6, #1
 803ad1a:	4498      	add	r8, r3
 803ad1c:	e008      	b.n	803ad30 <_svfprintf_r+0x960>
 803ad1e:	b17b      	cbz	r3, 803ad40 <_svfprintf_r+0x970>
 803ad20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803ad22:	3301      	adds	r3, #1
 803ad24:	e7d8      	b.n	803acd8 <_svfprintf_r+0x908>
 803ad26:	07eb      	lsls	r3, r5, #31
 803ad28:	d521      	bpl.n	803ad6e <_svfprintf_r+0x99e>
 803ad2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803ad2c:	eb06 0803 	add.w	r8, r6, r3
 803ad30:	2367      	movs	r3, #103	@ 0x67
 803ad32:	e7d3      	b.n	803acdc <_svfprintf_r+0x90c>
 803ad34:	46b0      	mov	r8, r6
 803ad36:	e7d0      	b.n	803acda <_svfprintf_r+0x90a>
 803ad38:	080451ee 	.word	0x080451ee
 803ad3c:	080451de 	.word	0x080451de
 803ad40:	2366      	movs	r3, #102	@ 0x66
 803ad42:	9306      	str	r3, [sp, #24]
 803ad44:	f04f 0801 	mov.w	r8, #1
 803ad48:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 803ad4c:	9308      	str	r3, [sp, #32]
 803ad4e:	d01f      	beq.n	803ad90 <_svfprintf_r+0x9c0>
 803ad50:	2700      	movs	r7, #0
 803ad52:	2e00      	cmp	r6, #0
 803ad54:	9708      	str	r7, [sp, #32]
 803ad56:	f77f ae8a 	ble.w	803aa6e <_svfprintf_r+0x69e>
 803ad5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803ad5c:	781b      	ldrb	r3, [r3, #0]
 803ad5e:	2bff      	cmp	r3, #255	@ 0xff
 803ad60:	d107      	bne.n	803ad72 <_svfprintf_r+0x9a2>
 803ad62:	9b08      	ldr	r3, [sp, #32]
 803ad64:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 803ad66:	443b      	add	r3, r7
 803ad68:	fb02 8803 	mla	r8, r2, r3, r8
 803ad6c:	e67f      	b.n	803aa6e <_svfprintf_r+0x69e>
 803ad6e:	46b0      	mov	r8, r6
 803ad70:	e7de      	b.n	803ad30 <_svfprintf_r+0x960>
 803ad72:	42b3      	cmp	r3, r6
 803ad74:	daf5      	bge.n	803ad62 <_svfprintf_r+0x992>
 803ad76:	1af6      	subs	r6, r6, r3
 803ad78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803ad7a:	785b      	ldrb	r3, [r3, #1]
 803ad7c:	b133      	cbz	r3, 803ad8c <_svfprintf_r+0x9bc>
 803ad7e:	9b08      	ldr	r3, [sp, #32]
 803ad80:	3301      	adds	r3, #1
 803ad82:	9308      	str	r3, [sp, #32]
 803ad84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803ad86:	3301      	adds	r3, #1
 803ad88:	9309      	str	r3, [sp, #36]	@ 0x24
 803ad8a:	e7e6      	b.n	803ad5a <_svfprintf_r+0x98a>
 803ad8c:	3701      	adds	r7, #1
 803ad8e:	e7e4      	b.n	803ad5a <_svfprintf_r+0x98a>
 803ad90:	9f08      	ldr	r7, [sp, #32]
 803ad92:	e66c      	b.n	803aa6e <_svfprintf_r+0x69e>
 803ad94:	232d      	movs	r3, #45	@ 0x2d
 803ad96:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803ad9a:	e66c      	b.n	803aa76 <_svfprintf_r+0x6a6>
 803ad9c:	06af      	lsls	r7, r5, #26
 803ad9e:	d50a      	bpl.n	803adb6 <_svfprintf_r+0x9e6>
 803ada0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803ada2:	6833      	ldr	r3, [r6, #0]
 803ada4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 803ada6:	17d2      	asrs	r2, r2, #31
 803ada8:	e9c3 1200 	strd	r1, r2, [r3]
 803adac:	3604      	adds	r6, #4
 803adae:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 803adb2:	f7ff bb46 	b.w	803a442 <_svfprintf_r+0x72>
 803adb6:	06e8      	lsls	r0, r5, #27
 803adb8:	d503      	bpl.n	803adc2 <_svfprintf_r+0x9f2>
 803adba:	6833      	ldr	r3, [r6, #0]
 803adbc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803adbe:	601a      	str	r2, [r3, #0]
 803adc0:	e7f4      	b.n	803adac <_svfprintf_r+0x9dc>
 803adc2:	0669      	lsls	r1, r5, #25
 803adc4:	d503      	bpl.n	803adce <_svfprintf_r+0x9fe>
 803adc6:	6833      	ldr	r3, [r6, #0]
 803adc8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803adca:	801a      	strh	r2, [r3, #0]
 803adcc:	e7ee      	b.n	803adac <_svfprintf_r+0x9dc>
 803adce:	05aa      	lsls	r2, r5, #22
 803add0:	d5f3      	bpl.n	803adba <_svfprintf_r+0x9ea>
 803add2:	6833      	ldr	r3, [r6, #0]
 803add4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803add6:	701a      	strb	r2, [r3, #0]
 803add8:	e7e8      	b.n	803adac <_svfprintf_r+0x9dc>
 803adda:	f045 0510 	orr.w	r5, r5, #16
 803adde:	f015 0320 	ands.w	r3, r5, #32
 803ade2:	d020      	beq.n	803ae26 <_svfprintf_r+0xa56>
 803ade4:	3607      	adds	r6, #7
 803ade6:	f026 0307 	bic.w	r3, r6, #7
 803adea:	461a      	mov	r2, r3
 803adec:	685f      	ldr	r7, [r3, #4]
 803adee:	f852 6b08 	ldr.w	r6, [r2], #8
 803adf2:	9207      	str	r2, [sp, #28]
 803adf4:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 803adf8:	2300      	movs	r3, #0
 803adfa:	2200      	movs	r2, #0
 803adfc:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 803ae00:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 803ae04:	f000 848c 	beq.w	803b720 <_svfprintf_r+0x1350>
 803ae08:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 803ae0c:	9208      	str	r2, [sp, #32]
 803ae0e:	ea56 0207 	orrs.w	r2, r6, r7
 803ae12:	f040 848a 	bne.w	803b72a <_svfprintf_r+0x135a>
 803ae16:	f1b8 0f00 	cmp.w	r8, #0
 803ae1a:	f000 80db 	beq.w	803afd4 <_svfprintf_r+0xc04>
 803ae1e:	2b01      	cmp	r3, #1
 803ae20:	f040 8486 	bne.w	803b730 <_svfprintf_r+0x1360>
 803ae24:	e083      	b.n	803af2e <_svfprintf_r+0xb5e>
 803ae26:	4632      	mov	r2, r6
 803ae28:	f015 0710 	ands.w	r7, r5, #16
 803ae2c:	f852 6b04 	ldr.w	r6, [r2], #4
 803ae30:	9207      	str	r2, [sp, #28]
 803ae32:	d001      	beq.n	803ae38 <_svfprintf_r+0xa68>
 803ae34:	461f      	mov	r7, r3
 803ae36:	e7dd      	b.n	803adf4 <_svfprintf_r+0xa24>
 803ae38:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 803ae3c:	d001      	beq.n	803ae42 <_svfprintf_r+0xa72>
 803ae3e:	b2b6      	uxth	r6, r6
 803ae40:	e7d8      	b.n	803adf4 <_svfprintf_r+0xa24>
 803ae42:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 803ae46:	d0d5      	beq.n	803adf4 <_svfprintf_r+0xa24>
 803ae48:	b2f6      	uxtb	r6, r6
 803ae4a:	e7f3      	b.n	803ae34 <_svfprintf_r+0xa64>
 803ae4c:	4633      	mov	r3, r6
 803ae4e:	2278      	movs	r2, #120	@ 0x78
 803ae50:	f853 6b04 	ldr.w	r6, [r3], #4
 803ae54:	9307      	str	r3, [sp, #28]
 803ae56:	f647 0330 	movw	r3, #30768	@ 0x7830
 803ae5a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 803ae5e:	4b94      	ldr	r3, [pc, #592]	@ (803b0b0 <_svfprintf_r+0xce0>)
 803ae60:	9319      	str	r3, [sp, #100]	@ 0x64
 803ae62:	2700      	movs	r7, #0
 803ae64:	f045 0502 	orr.w	r5, r5, #2
 803ae68:	2302      	movs	r3, #2
 803ae6a:	9206      	str	r2, [sp, #24]
 803ae6c:	e7c5      	b.n	803adfa <_svfprintf_r+0xa2a>
 803ae6e:	4633      	mov	r3, r6
 803ae70:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 803ae74:	f853 9b04 	ldr.w	r9, [r3], #4
 803ae78:	9307      	str	r3, [sp, #28]
 803ae7a:	f04f 0600 	mov.w	r6, #0
 803ae7e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 803ae82:	d00f      	beq.n	803aea4 <_svfprintf_r+0xad4>
 803ae84:	4642      	mov	r2, r8
 803ae86:	4631      	mov	r1, r6
 803ae88:	4648      	mov	r0, r9
 803ae8a:	f7d5 f9b9 	bl	8010200 <memchr>
 803ae8e:	4682      	mov	sl, r0
 803ae90:	2800      	cmp	r0, #0
 803ae92:	f43f ac81 	beq.w	803a798 <_svfprintf_r+0x3c8>
 803ae96:	eba0 0809 	sub.w	r8, r0, r9
 803ae9a:	46b2      	mov	sl, r6
 803ae9c:	9610      	str	r6, [sp, #64]	@ 0x40
 803ae9e:	4637      	mov	r7, r6
 803aea0:	9608      	str	r6, [sp, #32]
 803aea2:	e5eb      	b.n	803aa7c <_svfprintf_r+0x6ac>
 803aea4:	4648      	mov	r0, r9
 803aea6:	f7d5 f9fb 	bl	80102a0 <strlen>
 803aeaa:	46b2      	mov	sl, r6
 803aeac:	4680      	mov	r8, r0
 803aeae:	e473      	b.n	803a798 <_svfprintf_r+0x3c8>
 803aeb0:	f045 0510 	orr.w	r5, r5, #16
 803aeb4:	f015 0320 	ands.w	r3, r5, #32
 803aeb8:	d009      	beq.n	803aece <_svfprintf_r+0xafe>
 803aeba:	3607      	adds	r6, #7
 803aebc:	f026 0307 	bic.w	r3, r6, #7
 803aec0:	461a      	mov	r2, r3
 803aec2:	685f      	ldr	r7, [r3, #4]
 803aec4:	f852 6b08 	ldr.w	r6, [r2], #8
 803aec8:	9207      	str	r2, [sp, #28]
 803aeca:	2301      	movs	r3, #1
 803aecc:	e795      	b.n	803adfa <_svfprintf_r+0xa2a>
 803aece:	4632      	mov	r2, r6
 803aed0:	f015 0710 	ands.w	r7, r5, #16
 803aed4:	f852 6b04 	ldr.w	r6, [r2], #4
 803aed8:	9207      	str	r2, [sp, #28]
 803aeda:	d001      	beq.n	803aee0 <_svfprintf_r+0xb10>
 803aedc:	461f      	mov	r7, r3
 803aede:	e7f4      	b.n	803aeca <_svfprintf_r+0xafa>
 803aee0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 803aee4:	d001      	beq.n	803aeea <_svfprintf_r+0xb1a>
 803aee6:	b2b6      	uxth	r6, r6
 803aee8:	e7ef      	b.n	803aeca <_svfprintf_r+0xafa>
 803aeea:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 803aeee:	d0ec      	beq.n	803aeca <_svfprintf_r+0xafa>
 803aef0:	b2f6      	uxtb	r6, r6
 803aef2:	e7f3      	b.n	803aedc <_svfprintf_r+0xb0c>
 803aef4:	4b6f      	ldr	r3, [pc, #444]	@ (803b0b4 <_svfprintf_r+0xce4>)
 803aef6:	f7ff bb39 	b.w	803a56c <_svfprintf_r+0x19c>
 803aefa:	4632      	mov	r2, r6
 803aefc:	f015 0710 	ands.w	r7, r5, #16
 803af00:	f852 6b04 	ldr.w	r6, [r2], #4
 803af04:	9207      	str	r2, [sp, #28]
 803af06:	d002      	beq.n	803af0e <_svfprintf_r+0xb3e>
 803af08:	461f      	mov	r7, r3
 803af0a:	f7ff bb3c 	b.w	803a586 <_svfprintf_r+0x1b6>
 803af0e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 803af12:	d002      	beq.n	803af1a <_svfprintf_r+0xb4a>
 803af14:	b2b6      	uxth	r6, r6
 803af16:	f7ff bb36 	b.w	803a586 <_svfprintf_r+0x1b6>
 803af1a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 803af1e:	f43f ab32 	beq.w	803a586 <_svfprintf_r+0x1b6>
 803af22:	b2f6      	uxtb	r6, r6
 803af24:	e7f0      	b.n	803af08 <_svfprintf_r+0xb38>
 803af26:	2e0a      	cmp	r6, #10
 803af28:	f177 0300 	sbcs.w	r3, r7, #0
 803af2c:	d207      	bcs.n	803af3e <_svfprintf_r+0xb6e>
 803af2e:	3630      	adds	r6, #48	@ 0x30
 803af30:	b2f6      	uxtb	r6, r6
 803af32:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 803af36:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 803af3a:	f000 bc15 	b.w	803b768 <_svfprintf_r+0x1398>
 803af3e:	2300      	movs	r3, #0
 803af40:	9304      	str	r3, [sp, #16]
 803af42:	9b08      	ldr	r3, [sp, #32]
 803af44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 803af48:	ad52      	add	r5, sp, #328	@ 0x148
 803af4a:	9310      	str	r3, [sp, #64]	@ 0x40
 803af4c:	220a      	movs	r2, #10
 803af4e:	2300      	movs	r3, #0
 803af50:	4630      	mov	r0, r6
 803af52:	4639      	mov	r1, r7
 803af54:	f7d5 ff00 	bl	8010d58 <__aeabi_uldivmod>
 803af58:	9b04      	ldr	r3, [sp, #16]
 803af5a:	9011      	str	r0, [sp, #68]	@ 0x44
 803af5c:	3301      	adds	r3, #1
 803af5e:	9304      	str	r3, [sp, #16]
 803af60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803af62:	3230      	adds	r2, #48	@ 0x30
 803af64:	468a      	mov	sl, r1
 803af66:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803af6a:	f805 2c01 	strb.w	r2, [r5, #-1]
 803af6e:	b1d3      	cbz	r3, 803afa6 <_svfprintf_r+0xbd6>
 803af70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803af72:	9a04      	ldr	r2, [sp, #16]
 803af74:	781b      	ldrb	r3, [r3, #0]
 803af76:	429a      	cmp	r2, r3
 803af78:	d115      	bne.n	803afa6 <_svfprintf_r+0xbd6>
 803af7a:	2aff      	cmp	r2, #255	@ 0xff
 803af7c:	d013      	beq.n	803afa6 <_svfprintf_r+0xbd6>
 803af7e:	2e0a      	cmp	r6, #10
 803af80:	f177 0300 	sbcs.w	r3, r7, #0
 803af84:	d30f      	bcc.n	803afa6 <_svfprintf_r+0xbd6>
 803af86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803af88:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 803af8a:	eba9 0903 	sub.w	r9, r9, r3
 803af8e:	461a      	mov	r2, r3
 803af90:	4648      	mov	r0, r9
 803af92:	f7fb f8ec 	bl	803616e <strncpy>
 803af96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803af98:	785b      	ldrb	r3, [r3, #1]
 803af9a:	b11b      	cbz	r3, 803afa4 <_svfprintf_r+0xbd4>
 803af9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803af9e:	3301      	adds	r3, #1
 803afa0:	9309      	str	r3, [sp, #36]	@ 0x24
 803afa2:	2300      	movs	r3, #0
 803afa4:	9304      	str	r3, [sp, #16]
 803afa6:	2e0a      	cmp	r6, #10
 803afa8:	f177 0700 	sbcs.w	r7, r7, #0
 803afac:	f0c0 83dc 	bcc.w	803b768 <_svfprintf_r+0x1398>
 803afb0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 803afb2:	4657      	mov	r7, sl
 803afb4:	464d      	mov	r5, r9
 803afb6:	e7c9      	b.n	803af4c <_svfprintf_r+0xb7c>
 803afb8:	f006 030f 	and.w	r3, r6, #15
 803afbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803afbe:	0936      	lsrs	r6, r6, #4
 803afc0:	5cd3      	ldrb	r3, [r2, r3]
 803afc2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 803afc6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 803afca:	093f      	lsrs	r7, r7, #4
 803afcc:	ea56 0307 	orrs.w	r3, r6, r7
 803afd0:	d1f2      	bne.n	803afb8 <_svfprintf_r+0xbe8>
 803afd2:	e3c9      	b.n	803b768 <_svfprintf_r+0x1398>
 803afd4:	b91b      	cbnz	r3, 803afde <_svfprintf_r+0xc0e>
 803afd6:	07e9      	lsls	r1, r5, #31
 803afd8:	d501      	bpl.n	803afde <_svfprintf_r+0xc0e>
 803afda:	2630      	movs	r6, #48	@ 0x30
 803afdc:	e7a9      	b.n	803af32 <_svfprintf_r+0xb62>
 803afde:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 803afe2:	e3c1      	b.n	803b768 <_svfprintf_r+0x1398>
 803afe4:	9b06      	ldr	r3, [sp, #24]
 803afe6:	2b00      	cmp	r3, #0
 803afe8:	f000 838f 	beq.w	803b70a <_svfprintf_r+0x133a>
 803afec:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 803aff0:	2300      	movs	r3, #0
 803aff2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803aff6:	9607      	str	r6, [sp, #28]
 803aff8:	f7ff bb63 	b.w	803a6c2 <_svfprintf_r+0x2f2>
 803affc:	2010      	movs	r0, #16
 803affe:	4403      	add	r3, r0
 803b000:	2a07      	cmp	r2, #7
 803b002:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803b006:	6060      	str	r0, [r4, #4]
 803b008:	dd08      	ble.n	803b01c <_svfprintf_r+0xc4c>
 803b00a:	9803      	ldr	r0, [sp, #12]
 803b00c:	aa26      	add	r2, sp, #152	@ 0x98
 803b00e:	4659      	mov	r1, fp
 803b010:	f7fd fd66 	bl	8038ae0 <__ssprint_r>
 803b014:	2800      	cmp	r0, #0
 803b016:	f040 8356 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b01a:	a929      	add	r1, sp, #164	@ 0xa4
 803b01c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803b01e:	3b10      	subs	r3, #16
 803b020:	9313      	str	r3, [sp, #76]	@ 0x4c
 803b022:	460c      	mov	r4, r1
 803b024:	e546      	b.n	803aab4 <_svfprintf_r+0x6e4>
 803b026:	460c      	mov	r4, r1
 803b028:	e561      	b.n	803aaee <_svfprintf_r+0x71e>
 803b02a:	9803      	ldr	r0, [sp, #12]
 803b02c:	aa26      	add	r2, sp, #152	@ 0x98
 803b02e:	4659      	mov	r1, fp
 803b030:	f7fd fd56 	bl	8038ae0 <__ssprint_r>
 803b034:	2800      	cmp	r0, #0
 803b036:	f040 8346 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b03a:	ac29      	add	r4, sp, #164	@ 0xa4
 803b03c:	e569      	b.n	803ab12 <_svfprintf_r+0x742>
 803b03e:	9803      	ldr	r0, [sp, #12]
 803b040:	aa26      	add	r2, sp, #152	@ 0x98
 803b042:	4659      	mov	r1, fp
 803b044:	f7fd fd4c 	bl	8038ae0 <__ssprint_r>
 803b048:	2800      	cmp	r0, #0
 803b04a:	f040 833c 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b04e:	ac29      	add	r4, sp, #164	@ 0xa4
 803b050:	e56f      	b.n	803ab32 <_svfprintf_r+0x762>
 803b052:	2010      	movs	r0, #16
 803b054:	4403      	add	r3, r0
 803b056:	2a07      	cmp	r2, #7
 803b058:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803b05c:	6060      	str	r0, [r4, #4]
 803b05e:	dd08      	ble.n	803b072 <_svfprintf_r+0xca2>
 803b060:	9803      	ldr	r0, [sp, #12]
 803b062:	aa26      	add	r2, sp, #152	@ 0x98
 803b064:	4659      	mov	r1, fp
 803b066:	f7fd fd3b 	bl	8038ae0 <__ssprint_r>
 803b06a:	2800      	cmp	r0, #0
 803b06c:	f040 832b 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b070:	a929      	add	r1, sp, #164	@ 0xa4
 803b072:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803b074:	3b10      	subs	r3, #16
 803b076:	9313      	str	r3, [sp, #76]	@ 0x4c
 803b078:	460c      	mov	r4, r1
 803b07a:	e563      	b.n	803ab44 <_svfprintf_r+0x774>
 803b07c:	460c      	mov	r4, r1
 803b07e:	e57e      	b.n	803ab7e <_svfprintf_r+0x7ae>
 803b080:	2010      	movs	r0, #16
 803b082:	4403      	add	r3, r0
 803b084:	2a07      	cmp	r2, #7
 803b086:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803b08a:	6060      	str	r0, [r4, #4]
 803b08c:	dd08      	ble.n	803b0a0 <_svfprintf_r+0xcd0>
 803b08e:	9803      	ldr	r0, [sp, #12]
 803b090:	aa26      	add	r2, sp, #152	@ 0x98
 803b092:	4659      	mov	r1, fp
 803b094:	f7fd fd24 	bl	8038ae0 <__ssprint_r>
 803b098:	2800      	cmp	r0, #0
 803b09a:	f040 8314 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b09e:	a929      	add	r1, sp, #164	@ 0xa4
 803b0a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803b0a2:	3b10      	subs	r3, #16
 803b0a4:	9310      	str	r3, [sp, #64]	@ 0x40
 803b0a6:	460c      	mov	r4, r1
 803b0a8:	e56f      	b.n	803ab8a <_svfprintf_r+0x7ba>
 803b0aa:	460c      	mov	r4, r1
 803b0ac:	e58a      	b.n	803abc4 <_svfprintf_r+0x7f4>
 803b0ae:	bf00      	nop
 803b0b0:	08044c78 	.word	0x08044c78
 803b0b4:	08044c89 	.word	0x08044c89
 803b0b8:	9b06      	ldr	r3, [sp, #24]
 803b0ba:	2b65      	cmp	r3, #101	@ 0x65
 803b0bc:	f340 8246 	ble.w	803b54c <_svfprintf_r+0x117c>
 803b0c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803b0c4:	2200      	movs	r2, #0
 803b0c6:	2300      	movs	r3, #0
 803b0c8:	f7d5 fd16 	bl	8010af8 <__aeabi_dcmpeq>
 803b0cc:	2800      	cmp	r0, #0
 803b0ce:	d06a      	beq.n	803b1a6 <_svfprintf_r+0xdd6>
 803b0d0:	4b73      	ldr	r3, [pc, #460]	@ (803b2a0 <_svfprintf_r+0xed0>)
 803b0d2:	6023      	str	r3, [r4, #0]
 803b0d4:	2301      	movs	r3, #1
 803b0d6:	6063      	str	r3, [r4, #4]
 803b0d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803b0da:	3301      	adds	r3, #1
 803b0dc:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b0de:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b0e0:	3301      	adds	r3, #1
 803b0e2:	2b07      	cmp	r3, #7
 803b0e4:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b0e6:	dc37      	bgt.n	803b158 <_svfprintf_r+0xd88>
 803b0e8:	3408      	adds	r4, #8
 803b0ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803b0ec:	9a04      	ldr	r2, [sp, #16]
 803b0ee:	4293      	cmp	r3, r2
 803b0f0:	db02      	blt.n	803b0f8 <_svfprintf_r+0xd28>
 803b0f2:	07ef      	lsls	r7, r5, #31
 803b0f4:	f57f ad76 	bpl.w	803abe4 <_svfprintf_r+0x814>
 803b0f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803b0fa:	6023      	str	r3, [r4, #0]
 803b0fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803b0fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803b100:	6063      	str	r3, [r4, #4]
 803b102:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b104:	4413      	add	r3, r2
 803b106:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b108:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b10a:	3301      	adds	r3, #1
 803b10c:	2b07      	cmp	r3, #7
 803b10e:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b110:	dc2c      	bgt.n	803b16c <_svfprintf_r+0xd9c>
 803b112:	3408      	adds	r4, #8
 803b114:	9b04      	ldr	r3, [sp, #16]
 803b116:	1e5e      	subs	r6, r3, #1
 803b118:	2e00      	cmp	r6, #0
 803b11a:	f77f ad63 	ble.w	803abe4 <_svfprintf_r+0x814>
 803b11e:	4f61      	ldr	r7, [pc, #388]	@ (803b2a4 <_svfprintf_r+0xed4>)
 803b120:	f04f 0810 	mov.w	r8, #16
 803b124:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803b128:	2e10      	cmp	r6, #16
 803b12a:	f103 0301 	add.w	r3, r3, #1
 803b12e:	f104 0108 	add.w	r1, r4, #8
 803b132:	6027      	str	r7, [r4, #0]
 803b134:	dc24      	bgt.n	803b180 <_svfprintf_r+0xdb0>
 803b136:	6066      	str	r6, [r4, #4]
 803b138:	2b07      	cmp	r3, #7
 803b13a:	4416      	add	r6, r2
 803b13c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 803b140:	f340 82a0 	ble.w	803b684 <_svfprintf_r+0x12b4>
 803b144:	9803      	ldr	r0, [sp, #12]
 803b146:	aa26      	add	r2, sp, #152	@ 0x98
 803b148:	4659      	mov	r1, fp
 803b14a:	f7fd fcc9 	bl	8038ae0 <__ssprint_r>
 803b14e:	2800      	cmp	r0, #0
 803b150:	f040 82b9 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b154:	ac29      	add	r4, sp, #164	@ 0xa4
 803b156:	e545      	b.n	803abe4 <_svfprintf_r+0x814>
 803b158:	9803      	ldr	r0, [sp, #12]
 803b15a:	aa26      	add	r2, sp, #152	@ 0x98
 803b15c:	4659      	mov	r1, fp
 803b15e:	f7fd fcbf 	bl	8038ae0 <__ssprint_r>
 803b162:	2800      	cmp	r0, #0
 803b164:	f040 82af 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b168:	ac29      	add	r4, sp, #164	@ 0xa4
 803b16a:	e7be      	b.n	803b0ea <_svfprintf_r+0xd1a>
 803b16c:	9803      	ldr	r0, [sp, #12]
 803b16e:	aa26      	add	r2, sp, #152	@ 0x98
 803b170:	4659      	mov	r1, fp
 803b172:	f7fd fcb5 	bl	8038ae0 <__ssprint_r>
 803b176:	2800      	cmp	r0, #0
 803b178:	f040 82a5 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b17c:	ac29      	add	r4, sp, #164	@ 0xa4
 803b17e:	e7c9      	b.n	803b114 <_svfprintf_r+0xd44>
 803b180:	3210      	adds	r2, #16
 803b182:	2b07      	cmp	r3, #7
 803b184:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803b188:	f8c4 8004 	str.w	r8, [r4, #4]
 803b18c:	dd08      	ble.n	803b1a0 <_svfprintf_r+0xdd0>
 803b18e:	9803      	ldr	r0, [sp, #12]
 803b190:	aa26      	add	r2, sp, #152	@ 0x98
 803b192:	4659      	mov	r1, fp
 803b194:	f7fd fca4 	bl	8038ae0 <__ssprint_r>
 803b198:	2800      	cmp	r0, #0
 803b19a:	f040 8294 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b19e:	a929      	add	r1, sp, #164	@ 0xa4
 803b1a0:	3e10      	subs	r6, #16
 803b1a2:	460c      	mov	r4, r1
 803b1a4:	e7be      	b.n	803b124 <_svfprintf_r+0xd54>
 803b1a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803b1a8:	2b00      	cmp	r3, #0
 803b1aa:	dc7d      	bgt.n	803b2a8 <_svfprintf_r+0xed8>
 803b1ac:	4b3c      	ldr	r3, [pc, #240]	@ (803b2a0 <_svfprintf_r+0xed0>)
 803b1ae:	6023      	str	r3, [r4, #0]
 803b1b0:	2301      	movs	r3, #1
 803b1b2:	6063      	str	r3, [r4, #4]
 803b1b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803b1b6:	3301      	adds	r3, #1
 803b1b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b1ba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b1bc:	3301      	adds	r3, #1
 803b1be:	2b07      	cmp	r3, #7
 803b1c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b1c2:	dc46      	bgt.n	803b252 <_svfprintf_r+0xe82>
 803b1c4:	3408      	adds	r4, #8
 803b1c6:	9904      	ldr	r1, [sp, #16]
 803b1c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803b1ca:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 803b1cc:	430b      	orrs	r3, r1
 803b1ce:	f005 0101 	and.w	r1, r5, #1
 803b1d2:	430b      	orrs	r3, r1
 803b1d4:	f43f ad06 	beq.w	803abe4 <_svfprintf_r+0x814>
 803b1d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803b1da:	6023      	str	r3, [r4, #0]
 803b1dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803b1de:	6063      	str	r3, [r4, #4]
 803b1e0:	441a      	add	r2, r3
 803b1e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b1e4:	9228      	str	r2, [sp, #160]	@ 0xa0
 803b1e6:	3301      	adds	r3, #1
 803b1e8:	2b07      	cmp	r3, #7
 803b1ea:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b1ec:	dc3b      	bgt.n	803b266 <_svfprintf_r+0xe96>
 803b1ee:	f104 0308 	add.w	r3, r4, #8
 803b1f2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803b1f4:	2e00      	cmp	r6, #0
 803b1f6:	da1b      	bge.n	803b230 <_svfprintf_r+0xe60>
 803b1f8:	4f2a      	ldr	r7, [pc, #168]	@ (803b2a4 <_svfprintf_r+0xed4>)
 803b1fa:	4276      	negs	r6, r6
 803b1fc:	461a      	mov	r2, r3
 803b1fe:	2410      	movs	r4, #16
 803b200:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 803b204:	2e10      	cmp	r6, #16
 803b206:	f101 0101 	add.w	r1, r1, #1
 803b20a:	f103 0308 	add.w	r3, r3, #8
 803b20e:	6017      	str	r7, [r2, #0]
 803b210:	dc33      	bgt.n	803b27a <_svfprintf_r+0xeaa>
 803b212:	6056      	str	r6, [r2, #4]
 803b214:	2907      	cmp	r1, #7
 803b216:	4406      	add	r6, r0
 803b218:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 803b21c:	dd08      	ble.n	803b230 <_svfprintf_r+0xe60>
 803b21e:	9803      	ldr	r0, [sp, #12]
 803b220:	aa26      	add	r2, sp, #152	@ 0x98
 803b222:	4659      	mov	r1, fp
 803b224:	f7fd fc5c 	bl	8038ae0 <__ssprint_r>
 803b228:	2800      	cmp	r0, #0
 803b22a:	f040 824c 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b22e:	ab29      	add	r3, sp, #164	@ 0xa4
 803b230:	9a04      	ldr	r2, [sp, #16]
 803b232:	9904      	ldr	r1, [sp, #16]
 803b234:	605a      	str	r2, [r3, #4]
 803b236:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 803b238:	f8c3 9000 	str.w	r9, [r3]
 803b23c:	440a      	add	r2, r1
 803b23e:	9228      	str	r2, [sp, #160]	@ 0xa0
 803b240:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 803b242:	3201      	adds	r2, #1
 803b244:	2a07      	cmp	r2, #7
 803b246:	9227      	str	r2, [sp, #156]	@ 0x9c
 803b248:	f73f af7c 	bgt.w	803b144 <_svfprintf_r+0xd74>
 803b24c:	f103 0408 	add.w	r4, r3, #8
 803b250:	e4c8      	b.n	803abe4 <_svfprintf_r+0x814>
 803b252:	9803      	ldr	r0, [sp, #12]
 803b254:	aa26      	add	r2, sp, #152	@ 0x98
 803b256:	4659      	mov	r1, fp
 803b258:	f7fd fc42 	bl	8038ae0 <__ssprint_r>
 803b25c:	2800      	cmp	r0, #0
 803b25e:	f040 8232 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b262:	ac29      	add	r4, sp, #164	@ 0xa4
 803b264:	e7af      	b.n	803b1c6 <_svfprintf_r+0xdf6>
 803b266:	9803      	ldr	r0, [sp, #12]
 803b268:	aa26      	add	r2, sp, #152	@ 0x98
 803b26a:	4659      	mov	r1, fp
 803b26c:	f7fd fc38 	bl	8038ae0 <__ssprint_r>
 803b270:	2800      	cmp	r0, #0
 803b272:	f040 8228 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b276:	ab29      	add	r3, sp, #164	@ 0xa4
 803b278:	e7bb      	b.n	803b1f2 <_svfprintf_r+0xe22>
 803b27a:	3010      	adds	r0, #16
 803b27c:	2907      	cmp	r1, #7
 803b27e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 803b282:	6054      	str	r4, [r2, #4]
 803b284:	dd08      	ble.n	803b298 <_svfprintf_r+0xec8>
 803b286:	9803      	ldr	r0, [sp, #12]
 803b288:	aa26      	add	r2, sp, #152	@ 0x98
 803b28a:	4659      	mov	r1, fp
 803b28c:	f7fd fc28 	bl	8038ae0 <__ssprint_r>
 803b290:	2800      	cmp	r0, #0
 803b292:	f040 8218 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b296:	ab29      	add	r3, sp, #164	@ 0xa4
 803b298:	3e10      	subs	r6, #16
 803b29a:	461a      	mov	r2, r3
 803b29c:	e7b0      	b.n	803b200 <_svfprintf_r+0xe30>
 803b29e:	bf00      	nop
 803b2a0:	08044c9a 	.word	0x08044c9a
 803b2a4:	080451de 	.word	0x080451de
 803b2a8:	9b04      	ldr	r3, [sp, #16]
 803b2aa:	444b      	add	r3, r9
 803b2ac:	9306      	str	r3, [sp, #24]
 803b2ae:	9b04      	ldr	r3, [sp, #16]
 803b2b0:	42b3      	cmp	r3, r6
 803b2b2:	bfa8      	it	ge
 803b2b4:	4633      	movge	r3, r6
 803b2b6:	2b00      	cmp	r3, #0
 803b2b8:	4698      	mov	r8, r3
 803b2ba:	dd0b      	ble.n	803b2d4 <_svfprintf_r+0xf04>
 803b2bc:	e9c4 9300 	strd	r9, r3, [r4]
 803b2c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803b2c2:	4443      	add	r3, r8
 803b2c4:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b2c6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b2c8:	3301      	adds	r3, #1
 803b2ca:	2b07      	cmp	r3, #7
 803b2cc:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b2ce:	f300 8089 	bgt.w	803b3e4 <_svfprintf_r+0x1014>
 803b2d2:	3408      	adds	r4, #8
 803b2d4:	4643      	mov	r3, r8
 803b2d6:	2b00      	cmp	r3, #0
 803b2d8:	bfac      	ite	ge
 803b2da:	eba6 0808 	subge.w	r8, r6, r8
 803b2de:	46b0      	movlt	r8, r6
 803b2e0:	f1b8 0f00 	cmp.w	r8, #0
 803b2e4:	dd1b      	ble.n	803b31e <_svfprintf_r+0xf4e>
 803b2e6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803b2ea:	4897      	ldr	r0, [pc, #604]	@ (803b548 <_svfprintf_r+0x1178>)
 803b2ec:	6020      	str	r0, [r4, #0]
 803b2ee:	f1b8 0f10 	cmp.w	r8, #16
 803b2f2:	f102 0201 	add.w	r2, r2, #1
 803b2f6:	f104 0108 	add.w	r1, r4, #8
 803b2fa:	dc7d      	bgt.n	803b3f8 <_svfprintf_r+0x1028>
 803b2fc:	4443      	add	r3, r8
 803b2fe:	2a07      	cmp	r2, #7
 803b300:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803b304:	f8c4 8004 	str.w	r8, [r4, #4]
 803b308:	f340 808a 	ble.w	803b420 <_svfprintf_r+0x1050>
 803b30c:	9803      	ldr	r0, [sp, #12]
 803b30e:	aa26      	add	r2, sp, #152	@ 0x98
 803b310:	4659      	mov	r1, fp
 803b312:	f7fd fbe5 	bl	8038ae0 <__ssprint_r>
 803b316:	2800      	cmp	r0, #0
 803b318:	f040 81d5 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b31c:	ac29      	add	r4, sp, #164	@ 0xa4
 803b31e:	eb09 0806 	add.w	r8, r9, r6
 803b322:	056e      	lsls	r6, r5, #21
 803b324:	d508      	bpl.n	803b338 <_svfprintf_r+0xf68>
 803b326:	9b08      	ldr	r3, [sp, #32]
 803b328:	2b00      	cmp	r3, #0
 803b32a:	d17b      	bne.n	803b424 <_svfprintf_r+0x1054>
 803b32c:	2f00      	cmp	r7, #0
 803b32e:	d17b      	bne.n	803b428 <_svfprintf_r+0x1058>
 803b330:	9b06      	ldr	r3, [sp, #24]
 803b332:	4598      	cmp	r8, r3
 803b334:	bf28      	it	cs
 803b336:	4698      	movcs	r8, r3
 803b338:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803b33a:	9a04      	ldr	r2, [sp, #16]
 803b33c:	4293      	cmp	r3, r2
 803b33e:	db01      	blt.n	803b344 <_svfprintf_r+0xf74>
 803b340:	07e8      	lsls	r0, r5, #31
 803b342:	d50e      	bpl.n	803b362 <_svfprintf_r+0xf92>
 803b344:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803b346:	6023      	str	r3, [r4, #0]
 803b348:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803b34a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803b34c:	6063      	str	r3, [r4, #4]
 803b34e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b350:	4413      	add	r3, r2
 803b352:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b354:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b356:	3301      	adds	r3, #1
 803b358:	2b07      	cmp	r3, #7
 803b35a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b35c:	f300 80df 	bgt.w	803b51e <_svfprintf_r+0x114e>
 803b360:	3408      	adds	r4, #8
 803b362:	9b04      	ldr	r3, [sp, #16]
 803b364:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 803b366:	1bdf      	subs	r7, r3, r7
 803b368:	9b06      	ldr	r3, [sp, #24]
 803b36a:	eba3 0308 	sub.w	r3, r3, r8
 803b36e:	429f      	cmp	r7, r3
 803b370:	bfa8      	it	ge
 803b372:	461f      	movge	r7, r3
 803b374:	2f00      	cmp	r7, #0
 803b376:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b378:	dd0a      	ble.n	803b390 <_svfprintf_r+0xfc0>
 803b37a:	443b      	add	r3, r7
 803b37c:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b37e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b380:	3301      	adds	r3, #1
 803b382:	2b07      	cmp	r3, #7
 803b384:	e9c4 8700 	strd	r8, r7, [r4]
 803b388:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b38a:	f300 80d2 	bgt.w	803b532 <_svfprintf_r+0x1162>
 803b38e:	3408      	adds	r4, #8
 803b390:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803b392:	9b04      	ldr	r3, [sp, #16]
 803b394:	2f00      	cmp	r7, #0
 803b396:	eba3 0606 	sub.w	r6, r3, r6
 803b39a:	bfa8      	it	ge
 803b39c:	1bf6      	subge	r6, r6, r7
 803b39e:	2e00      	cmp	r6, #0
 803b3a0:	f77f ac20 	ble.w	803abe4 <_svfprintf_r+0x814>
 803b3a4:	4f68      	ldr	r7, [pc, #416]	@ (803b548 <_svfprintf_r+0x1178>)
 803b3a6:	f04f 0810 	mov.w	r8, #16
 803b3aa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803b3ae:	2e10      	cmp	r6, #16
 803b3b0:	f103 0301 	add.w	r3, r3, #1
 803b3b4:	f104 0108 	add.w	r1, r4, #8
 803b3b8:	6027      	str	r7, [r4, #0]
 803b3ba:	f77f aebc 	ble.w	803b136 <_svfprintf_r+0xd66>
 803b3be:	3210      	adds	r2, #16
 803b3c0:	2b07      	cmp	r3, #7
 803b3c2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803b3c6:	f8c4 8004 	str.w	r8, [r4, #4]
 803b3ca:	dd08      	ble.n	803b3de <_svfprintf_r+0x100e>
 803b3cc:	9803      	ldr	r0, [sp, #12]
 803b3ce:	aa26      	add	r2, sp, #152	@ 0x98
 803b3d0:	4659      	mov	r1, fp
 803b3d2:	f7fd fb85 	bl	8038ae0 <__ssprint_r>
 803b3d6:	2800      	cmp	r0, #0
 803b3d8:	f040 8175 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b3dc:	a929      	add	r1, sp, #164	@ 0xa4
 803b3de:	3e10      	subs	r6, #16
 803b3e0:	460c      	mov	r4, r1
 803b3e2:	e7e2      	b.n	803b3aa <_svfprintf_r+0xfda>
 803b3e4:	9803      	ldr	r0, [sp, #12]
 803b3e6:	aa26      	add	r2, sp, #152	@ 0x98
 803b3e8:	4659      	mov	r1, fp
 803b3ea:	f7fd fb79 	bl	8038ae0 <__ssprint_r>
 803b3ee:	2800      	cmp	r0, #0
 803b3f0:	f040 8169 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b3f4:	ac29      	add	r4, sp, #164	@ 0xa4
 803b3f6:	e76d      	b.n	803b2d4 <_svfprintf_r+0xf04>
 803b3f8:	2010      	movs	r0, #16
 803b3fa:	4403      	add	r3, r0
 803b3fc:	2a07      	cmp	r2, #7
 803b3fe:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803b402:	6060      	str	r0, [r4, #4]
 803b404:	dd08      	ble.n	803b418 <_svfprintf_r+0x1048>
 803b406:	9803      	ldr	r0, [sp, #12]
 803b408:	aa26      	add	r2, sp, #152	@ 0x98
 803b40a:	4659      	mov	r1, fp
 803b40c:	f7fd fb68 	bl	8038ae0 <__ssprint_r>
 803b410:	2800      	cmp	r0, #0
 803b412:	f040 8158 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b416:	a929      	add	r1, sp, #164	@ 0xa4
 803b418:	f1a8 0810 	sub.w	r8, r8, #16
 803b41c:	460c      	mov	r4, r1
 803b41e:	e762      	b.n	803b2e6 <_svfprintf_r+0xf16>
 803b420:	460c      	mov	r4, r1
 803b422:	e77c      	b.n	803b31e <_svfprintf_r+0xf4e>
 803b424:	2f00      	cmp	r7, #0
 803b426:	d04a      	beq.n	803b4be <_svfprintf_r+0x10ee>
 803b428:	3f01      	subs	r7, #1
 803b42a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803b42c:	6023      	str	r3, [r4, #0]
 803b42e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803b430:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 803b432:	6063      	str	r3, [r4, #4]
 803b434:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b436:	4413      	add	r3, r2
 803b438:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b43a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b43c:	3301      	adds	r3, #1
 803b43e:	2b07      	cmp	r3, #7
 803b440:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b442:	dc43      	bgt.n	803b4cc <_svfprintf_r+0x10fc>
 803b444:	3408      	adds	r4, #8
 803b446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803b448:	781a      	ldrb	r2, [r3, #0]
 803b44a:	9b06      	ldr	r3, [sp, #24]
 803b44c:	eba3 0308 	sub.w	r3, r3, r8
 803b450:	429a      	cmp	r2, r3
 803b452:	bfa8      	it	ge
 803b454:	461a      	movge	r2, r3
 803b456:	2a00      	cmp	r2, #0
 803b458:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b45a:	4691      	mov	r9, r2
 803b45c:	dd09      	ble.n	803b472 <_svfprintf_r+0x10a2>
 803b45e:	4413      	add	r3, r2
 803b460:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b462:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b464:	3301      	adds	r3, #1
 803b466:	2b07      	cmp	r3, #7
 803b468:	e9c4 8200 	strd	r8, r2, [r4]
 803b46c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b46e:	dc37      	bgt.n	803b4e0 <_svfprintf_r+0x1110>
 803b470:	3408      	adds	r4, #8
 803b472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803b474:	781e      	ldrb	r6, [r3, #0]
 803b476:	f1b9 0f00 	cmp.w	r9, #0
 803b47a:	bfa8      	it	ge
 803b47c:	eba6 0609 	subge.w	r6, r6, r9
 803b480:	2e00      	cmp	r6, #0
 803b482:	dd18      	ble.n	803b4b6 <_svfprintf_r+0x10e6>
 803b484:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803b488:	482f      	ldr	r0, [pc, #188]	@ (803b548 <_svfprintf_r+0x1178>)
 803b48a:	6020      	str	r0, [r4, #0]
 803b48c:	2e10      	cmp	r6, #16
 803b48e:	f103 0301 	add.w	r3, r3, #1
 803b492:	f104 0108 	add.w	r1, r4, #8
 803b496:	dc2d      	bgt.n	803b4f4 <_svfprintf_r+0x1124>
 803b498:	6066      	str	r6, [r4, #4]
 803b49a:	2b07      	cmp	r3, #7
 803b49c:	4416      	add	r6, r2
 803b49e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 803b4a2:	dd3a      	ble.n	803b51a <_svfprintf_r+0x114a>
 803b4a4:	9803      	ldr	r0, [sp, #12]
 803b4a6:	aa26      	add	r2, sp, #152	@ 0x98
 803b4a8:	4659      	mov	r1, fp
 803b4aa:	f7fd fb19 	bl	8038ae0 <__ssprint_r>
 803b4ae:	2800      	cmp	r0, #0
 803b4b0:	f040 8109 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b4b4:	ac29      	add	r4, sp, #164	@ 0xa4
 803b4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803b4b8:	781b      	ldrb	r3, [r3, #0]
 803b4ba:	4498      	add	r8, r3
 803b4bc:	e733      	b.n	803b326 <_svfprintf_r+0xf56>
 803b4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803b4c0:	3b01      	subs	r3, #1
 803b4c2:	9309      	str	r3, [sp, #36]	@ 0x24
 803b4c4:	9b08      	ldr	r3, [sp, #32]
 803b4c6:	3b01      	subs	r3, #1
 803b4c8:	9308      	str	r3, [sp, #32]
 803b4ca:	e7ae      	b.n	803b42a <_svfprintf_r+0x105a>
 803b4cc:	9803      	ldr	r0, [sp, #12]
 803b4ce:	aa26      	add	r2, sp, #152	@ 0x98
 803b4d0:	4659      	mov	r1, fp
 803b4d2:	f7fd fb05 	bl	8038ae0 <__ssprint_r>
 803b4d6:	2800      	cmp	r0, #0
 803b4d8:	f040 80f5 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b4dc:	ac29      	add	r4, sp, #164	@ 0xa4
 803b4de:	e7b2      	b.n	803b446 <_svfprintf_r+0x1076>
 803b4e0:	9803      	ldr	r0, [sp, #12]
 803b4e2:	aa26      	add	r2, sp, #152	@ 0x98
 803b4e4:	4659      	mov	r1, fp
 803b4e6:	f7fd fafb 	bl	8038ae0 <__ssprint_r>
 803b4ea:	2800      	cmp	r0, #0
 803b4ec:	f040 80eb 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b4f0:	ac29      	add	r4, sp, #164	@ 0xa4
 803b4f2:	e7be      	b.n	803b472 <_svfprintf_r+0x10a2>
 803b4f4:	2010      	movs	r0, #16
 803b4f6:	4402      	add	r2, r0
 803b4f8:	2b07      	cmp	r3, #7
 803b4fa:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803b4fe:	6060      	str	r0, [r4, #4]
 803b500:	dd08      	ble.n	803b514 <_svfprintf_r+0x1144>
 803b502:	9803      	ldr	r0, [sp, #12]
 803b504:	aa26      	add	r2, sp, #152	@ 0x98
 803b506:	4659      	mov	r1, fp
 803b508:	f7fd faea 	bl	8038ae0 <__ssprint_r>
 803b50c:	2800      	cmp	r0, #0
 803b50e:	f040 80da 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b512:	a929      	add	r1, sp, #164	@ 0xa4
 803b514:	3e10      	subs	r6, #16
 803b516:	460c      	mov	r4, r1
 803b518:	e7b4      	b.n	803b484 <_svfprintf_r+0x10b4>
 803b51a:	460c      	mov	r4, r1
 803b51c:	e7cb      	b.n	803b4b6 <_svfprintf_r+0x10e6>
 803b51e:	9803      	ldr	r0, [sp, #12]
 803b520:	aa26      	add	r2, sp, #152	@ 0x98
 803b522:	4659      	mov	r1, fp
 803b524:	f7fd fadc 	bl	8038ae0 <__ssprint_r>
 803b528:	2800      	cmp	r0, #0
 803b52a:	f040 80cc 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b52e:	ac29      	add	r4, sp, #164	@ 0xa4
 803b530:	e717      	b.n	803b362 <_svfprintf_r+0xf92>
 803b532:	9803      	ldr	r0, [sp, #12]
 803b534:	aa26      	add	r2, sp, #152	@ 0x98
 803b536:	4659      	mov	r1, fp
 803b538:	f7fd fad2 	bl	8038ae0 <__ssprint_r>
 803b53c:	2800      	cmp	r0, #0
 803b53e:	f040 80c2 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b542:	ac29      	add	r4, sp, #164	@ 0xa4
 803b544:	e724      	b.n	803b390 <_svfprintf_r+0xfc0>
 803b546:	bf00      	nop
 803b548:	080451de 	.word	0x080451de
 803b54c:	9904      	ldr	r1, [sp, #16]
 803b54e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803b550:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 803b552:	2901      	cmp	r1, #1
 803b554:	f103 0301 	add.w	r3, r3, #1
 803b558:	f102 0201 	add.w	r2, r2, #1
 803b55c:	f104 0608 	add.w	r6, r4, #8
 803b560:	dc02      	bgt.n	803b568 <_svfprintf_r+0x1198>
 803b562:	07e9      	lsls	r1, r5, #31
 803b564:	f140 8083 	bpl.w	803b66e <_svfprintf_r+0x129e>
 803b568:	2101      	movs	r1, #1
 803b56a:	2a07      	cmp	r2, #7
 803b56c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803b570:	f8c4 9000 	str.w	r9, [r4]
 803b574:	6061      	str	r1, [r4, #4]
 803b576:	dd08      	ble.n	803b58a <_svfprintf_r+0x11ba>
 803b578:	9803      	ldr	r0, [sp, #12]
 803b57a:	aa26      	add	r2, sp, #152	@ 0x98
 803b57c:	4659      	mov	r1, fp
 803b57e:	f7fd faaf 	bl	8038ae0 <__ssprint_r>
 803b582:	2800      	cmp	r0, #0
 803b584:	f040 809f 	bne.w	803b6c6 <_svfprintf_r+0x12f6>
 803b588:	ae29      	add	r6, sp, #164	@ 0xa4
 803b58a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803b58c:	6033      	str	r3, [r6, #0]
 803b58e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803b590:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803b592:	6073      	str	r3, [r6, #4]
 803b594:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b596:	4413      	add	r3, r2
 803b598:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b59a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b59c:	3301      	adds	r3, #1
 803b59e:	2b07      	cmp	r3, #7
 803b5a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b5a2:	dc33      	bgt.n	803b60c <_svfprintf_r+0x123c>
 803b5a4:	3608      	adds	r6, #8
 803b5a6:	9b04      	ldr	r3, [sp, #16]
 803b5a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803b5ac:	1e5c      	subs	r4, r3, #1
 803b5ae:	2200      	movs	r2, #0
 803b5b0:	2300      	movs	r3, #0
 803b5b2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 803b5b6:	f7d5 fa9f 	bl	8010af8 <__aeabi_dcmpeq>
 803b5ba:	2800      	cmp	r0, #0
 803b5bc:	d12f      	bne.n	803b61e <_svfprintf_r+0x124e>
 803b5be:	f109 0201 	add.w	r2, r9, #1
 803b5c2:	e9c6 2400 	strd	r2, r4, [r6]
 803b5c6:	9a04      	ldr	r2, [sp, #16]
 803b5c8:	f108 0301 	add.w	r3, r8, #1
 803b5cc:	3f01      	subs	r7, #1
 803b5ce:	4417      	add	r7, r2
 803b5d0:	2b07      	cmp	r3, #7
 803b5d2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 803b5d6:	dd53      	ble.n	803b680 <_svfprintf_r+0x12b0>
 803b5d8:	9803      	ldr	r0, [sp, #12]
 803b5da:	aa26      	add	r2, sp, #152	@ 0x98
 803b5dc:	4659      	mov	r1, fp
 803b5de:	f7fd fa7f 	bl	8038ae0 <__ssprint_r>
 803b5e2:	2800      	cmp	r0, #0
 803b5e4:	d16f      	bne.n	803b6c6 <_svfprintf_r+0x12f6>
 803b5e6:	ae29      	add	r6, sp, #164	@ 0xa4
 803b5e8:	ab22      	add	r3, sp, #136	@ 0x88
 803b5ea:	6033      	str	r3, [r6, #0]
 803b5ec:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 803b5ee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 803b5f0:	6073      	str	r3, [r6, #4]
 803b5f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b5f4:	4413      	add	r3, r2
 803b5f6:	9328      	str	r3, [sp, #160]	@ 0xa0
 803b5f8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803b5fa:	3301      	adds	r3, #1
 803b5fc:	2b07      	cmp	r3, #7
 803b5fe:	9327      	str	r3, [sp, #156]	@ 0x9c
 803b600:	f73f ada0 	bgt.w	803b144 <_svfprintf_r+0xd74>
 803b604:	f106 0408 	add.w	r4, r6, #8
 803b608:	f7ff baec 	b.w	803abe4 <_svfprintf_r+0x814>
 803b60c:	9803      	ldr	r0, [sp, #12]
 803b60e:	aa26      	add	r2, sp, #152	@ 0x98
 803b610:	4659      	mov	r1, fp
 803b612:	f7fd fa65 	bl	8038ae0 <__ssprint_r>
 803b616:	2800      	cmp	r0, #0
 803b618:	d155      	bne.n	803b6c6 <_svfprintf_r+0x12f6>
 803b61a:	ae29      	add	r6, sp, #164	@ 0xa4
 803b61c:	e7c3      	b.n	803b5a6 <_svfprintf_r+0x11d6>
 803b61e:	9b04      	ldr	r3, [sp, #16]
 803b620:	2b01      	cmp	r3, #1
 803b622:	dde1      	ble.n	803b5e8 <_svfprintf_r+0x1218>
 803b624:	4f57      	ldr	r7, [pc, #348]	@ (803b784 <_svfprintf_r+0x13b4>)
 803b626:	f04f 0810 	mov.w	r8, #16
 803b62a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803b62e:	2c10      	cmp	r4, #16
 803b630:	f103 0301 	add.w	r3, r3, #1
 803b634:	f106 0108 	add.w	r1, r6, #8
 803b638:	6037      	str	r7, [r6, #0]
 803b63a:	dc07      	bgt.n	803b64c <_svfprintf_r+0x127c>
 803b63c:	6074      	str	r4, [r6, #4]
 803b63e:	2b07      	cmp	r3, #7
 803b640:	4414      	add	r4, r2
 803b642:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 803b646:	dcc7      	bgt.n	803b5d8 <_svfprintf_r+0x1208>
 803b648:	460e      	mov	r6, r1
 803b64a:	e7cd      	b.n	803b5e8 <_svfprintf_r+0x1218>
 803b64c:	3210      	adds	r2, #16
 803b64e:	2b07      	cmp	r3, #7
 803b650:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803b654:	f8c6 8004 	str.w	r8, [r6, #4]
 803b658:	dd06      	ble.n	803b668 <_svfprintf_r+0x1298>
 803b65a:	9803      	ldr	r0, [sp, #12]
 803b65c:	aa26      	add	r2, sp, #152	@ 0x98
 803b65e:	4659      	mov	r1, fp
 803b660:	f7fd fa3e 	bl	8038ae0 <__ssprint_r>
 803b664:	bb78      	cbnz	r0, 803b6c6 <_svfprintf_r+0x12f6>
 803b666:	a929      	add	r1, sp, #164	@ 0xa4
 803b668:	3c10      	subs	r4, #16
 803b66a:	460e      	mov	r6, r1
 803b66c:	e7dd      	b.n	803b62a <_svfprintf_r+0x125a>
 803b66e:	2101      	movs	r1, #1
 803b670:	2a07      	cmp	r2, #7
 803b672:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803b676:	f8c4 9000 	str.w	r9, [r4]
 803b67a:	6061      	str	r1, [r4, #4]
 803b67c:	ddb4      	ble.n	803b5e8 <_svfprintf_r+0x1218>
 803b67e:	e7ab      	b.n	803b5d8 <_svfprintf_r+0x1208>
 803b680:	3608      	adds	r6, #8
 803b682:	e7b1      	b.n	803b5e8 <_svfprintf_r+0x1218>
 803b684:	460c      	mov	r4, r1
 803b686:	f7ff baad 	b.w	803abe4 <_svfprintf_r+0x814>
 803b68a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803b68c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803b68e:	1a9d      	subs	r5, r3, r2
 803b690:	2d00      	cmp	r5, #0
 803b692:	f77f aaaa 	ble.w	803abea <_svfprintf_r+0x81a>
 803b696:	4e3c      	ldr	r6, [pc, #240]	@ (803b788 <_svfprintf_r+0x13b8>)
 803b698:	2710      	movs	r7, #16
 803b69a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803b69e:	2d10      	cmp	r5, #16
 803b6a0:	f103 0301 	add.w	r3, r3, #1
 803b6a4:	6026      	str	r6, [r4, #0]
 803b6a6:	dc18      	bgt.n	803b6da <_svfprintf_r+0x130a>
 803b6a8:	442a      	add	r2, r5
 803b6aa:	2b07      	cmp	r3, #7
 803b6ac:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803b6b0:	6065      	str	r5, [r4, #4]
 803b6b2:	f77f aa9a 	ble.w	803abea <_svfprintf_r+0x81a>
 803b6b6:	9803      	ldr	r0, [sp, #12]
 803b6b8:	aa26      	add	r2, sp, #152	@ 0x98
 803b6ba:	4659      	mov	r1, fp
 803b6bc:	f7fd fa10 	bl	8038ae0 <__ssprint_r>
 803b6c0:	2800      	cmp	r0, #0
 803b6c2:	f43f aa92 	beq.w	803abea <_svfprintf_r+0x81a>
 803b6c6:	f1ba 0f00 	cmp.w	sl, #0
 803b6ca:	f43f a89a 	beq.w	803a802 <_svfprintf_r+0x432>
 803b6ce:	9803      	ldr	r0, [sp, #12]
 803b6d0:	4651      	mov	r1, sl
 803b6d2:	f7fc fe43 	bl	803835c <_free_r>
 803b6d6:	f7ff b894 	b.w	803a802 <_svfprintf_r+0x432>
 803b6da:	3210      	adds	r2, #16
 803b6dc:	2b07      	cmp	r3, #7
 803b6de:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803b6e2:	6067      	str	r7, [r4, #4]
 803b6e4:	dc02      	bgt.n	803b6ec <_svfprintf_r+0x131c>
 803b6e6:	3408      	adds	r4, #8
 803b6e8:	3d10      	subs	r5, #16
 803b6ea:	e7d6      	b.n	803b69a <_svfprintf_r+0x12ca>
 803b6ec:	9803      	ldr	r0, [sp, #12]
 803b6ee:	aa26      	add	r2, sp, #152	@ 0x98
 803b6f0:	4659      	mov	r1, fp
 803b6f2:	f7fd f9f5 	bl	8038ae0 <__ssprint_r>
 803b6f6:	2800      	cmp	r0, #0
 803b6f8:	d1e5      	bne.n	803b6c6 <_svfprintf_r+0x12f6>
 803b6fa:	ac29      	add	r4, sp, #164	@ 0xa4
 803b6fc:	e7f4      	b.n	803b6e8 <_svfprintf_r+0x1318>
 803b6fe:	9803      	ldr	r0, [sp, #12]
 803b700:	4651      	mov	r1, sl
 803b702:	f7fc fe2b 	bl	803835c <_free_r>
 803b706:	f7ff ba88 	b.w	803ac1a <_svfprintf_r+0x84a>
 803b70a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803b70c:	2b00      	cmp	r3, #0
 803b70e:	f43f a878 	beq.w	803a802 <_svfprintf_r+0x432>
 803b712:	9803      	ldr	r0, [sp, #12]
 803b714:	aa26      	add	r2, sp, #152	@ 0x98
 803b716:	4659      	mov	r1, fp
 803b718:	f7fd f9e2 	bl	8038ae0 <__ssprint_r>
 803b71c:	f7ff b871 	b.w	803a802 <_svfprintf_r+0x432>
 803b720:	ea56 0207 	orrs.w	r2, r6, r7
 803b724:	9508      	str	r5, [sp, #32]
 803b726:	f43f ab7a 	beq.w	803ae1e <_svfprintf_r+0xa4e>
 803b72a:	2b01      	cmp	r3, #1
 803b72c:	f43f abfb 	beq.w	803af26 <_svfprintf_r+0xb56>
 803b730:	2b02      	cmp	r3, #2
 803b732:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 803b736:	f43f ac3f 	beq.w	803afb8 <_svfprintf_r+0xbe8>
 803b73a:	f006 0307 	and.w	r3, r6, #7
 803b73e:	08f6      	lsrs	r6, r6, #3
 803b740:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 803b744:	08ff      	lsrs	r7, r7, #3
 803b746:	3330      	adds	r3, #48	@ 0x30
 803b748:	ea56 0107 	orrs.w	r1, r6, r7
 803b74c:	464a      	mov	r2, r9
 803b74e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 803b752:	d1f2      	bne.n	803b73a <_svfprintf_r+0x136a>
 803b754:	9908      	ldr	r1, [sp, #32]
 803b756:	07c8      	lsls	r0, r1, #31
 803b758:	d506      	bpl.n	803b768 <_svfprintf_r+0x1398>
 803b75a:	2b30      	cmp	r3, #48	@ 0x30
 803b75c:	d004      	beq.n	803b768 <_svfprintf_r+0x1398>
 803b75e:	2330      	movs	r3, #48	@ 0x30
 803b760:	f809 3c01 	strb.w	r3, [r9, #-1]
 803b764:	f1a2 0902 	sub.w	r9, r2, #2
 803b768:	ab52      	add	r3, sp, #328	@ 0x148
 803b76a:	9d08      	ldr	r5, [sp, #32]
 803b76c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 803b770:	f04f 0a00 	mov.w	sl, #0
 803b774:	eba3 0809 	sub.w	r8, r3, r9
 803b778:	4657      	mov	r7, sl
 803b77a:	f8cd a020 	str.w	sl, [sp, #32]
 803b77e:	4656      	mov	r6, sl
 803b780:	f7ff b97c 	b.w	803aa7c <_svfprintf_r+0x6ac>
 803b784:	080451de 	.word	0x080451de
 803b788:	080451ee 	.word	0x080451ee

0803b78c <__swhatbuf_r>:
 803b78c:	b570      	push	{r4, r5, r6, lr}
 803b78e:	460c      	mov	r4, r1
 803b790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803b794:	2900      	cmp	r1, #0
 803b796:	b096      	sub	sp, #88	@ 0x58
 803b798:	4615      	mov	r5, r2
 803b79a:	461e      	mov	r6, r3
 803b79c:	da07      	bge.n	803b7ae <__swhatbuf_r+0x22>
 803b79e:	89a1      	ldrh	r1, [r4, #12]
 803b7a0:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 803b7a4:	d117      	bne.n	803b7d6 <__swhatbuf_r+0x4a>
 803b7a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803b7aa:	4608      	mov	r0, r1
 803b7ac:	e00f      	b.n	803b7ce <__swhatbuf_r+0x42>
 803b7ae:	466a      	mov	r2, sp
 803b7b0:	f003 f892 	bl	803e8d8 <_fstat_r>
 803b7b4:	2800      	cmp	r0, #0
 803b7b6:	dbf2      	blt.n	803b79e <__swhatbuf_r+0x12>
 803b7b8:	9901      	ldr	r1, [sp, #4]
 803b7ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 803b7be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 803b7c2:	4259      	negs	r1, r3
 803b7c4:	4159      	adcs	r1, r3
 803b7c6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 803b7ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803b7ce:	6031      	str	r1, [r6, #0]
 803b7d0:	602b      	str	r3, [r5, #0]
 803b7d2:	b016      	add	sp, #88	@ 0x58
 803b7d4:	bd70      	pop	{r4, r5, r6, pc}
 803b7d6:	2100      	movs	r1, #0
 803b7d8:	2340      	movs	r3, #64	@ 0x40
 803b7da:	e7e6      	b.n	803b7aa <__swhatbuf_r+0x1e>

0803b7dc <__smakebuf_r>:
 803b7dc:	898b      	ldrh	r3, [r1, #12]
 803b7de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803b7e0:	079d      	lsls	r5, r3, #30
 803b7e2:	4606      	mov	r6, r0
 803b7e4:	460c      	mov	r4, r1
 803b7e6:	d507      	bpl.n	803b7f8 <__smakebuf_r+0x1c>
 803b7e8:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 803b7ec:	6023      	str	r3, [r4, #0]
 803b7ee:	6123      	str	r3, [r4, #16]
 803b7f0:	2301      	movs	r3, #1
 803b7f2:	6163      	str	r3, [r4, #20]
 803b7f4:	b003      	add	sp, #12
 803b7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803b7f8:	ab01      	add	r3, sp, #4
 803b7fa:	466a      	mov	r2, sp
 803b7fc:	f7ff ffc6 	bl	803b78c <__swhatbuf_r>
 803b800:	9f00      	ldr	r7, [sp, #0]
 803b802:	4605      	mov	r5, r0
 803b804:	4639      	mov	r1, r7
 803b806:	4630      	mov	r0, r6
 803b808:	f7fc fec0 	bl	803858c <_malloc_r>
 803b80c:	b948      	cbnz	r0, 803b822 <__smakebuf_r+0x46>
 803b80e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803b812:	059a      	lsls	r2, r3, #22
 803b814:	d4ee      	bmi.n	803b7f4 <__smakebuf_r+0x18>
 803b816:	f023 0303 	bic.w	r3, r3, #3
 803b81a:	f043 0302 	orr.w	r3, r3, #2
 803b81e:	81a3      	strh	r3, [r4, #12]
 803b820:	e7e2      	b.n	803b7e8 <__smakebuf_r+0xc>
 803b822:	89a3      	ldrh	r3, [r4, #12]
 803b824:	6020      	str	r0, [r4, #0]
 803b826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803b82a:	81a3      	strh	r3, [r4, #12]
 803b82c:	9b01      	ldr	r3, [sp, #4]
 803b82e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 803b832:	b15b      	cbz	r3, 803b84c <__smakebuf_r+0x70>
 803b834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803b838:	4630      	mov	r0, r6
 803b83a:	f003 f85f 	bl	803e8fc <_isatty_r>
 803b83e:	b128      	cbz	r0, 803b84c <__smakebuf_r+0x70>
 803b840:	89a3      	ldrh	r3, [r4, #12]
 803b842:	f023 0303 	bic.w	r3, r3, #3
 803b846:	f043 0301 	orr.w	r3, r3, #1
 803b84a:	81a3      	strh	r3, [r4, #12]
 803b84c:	89a3      	ldrh	r3, [r4, #12]
 803b84e:	431d      	orrs	r5, r3
 803b850:	81a5      	strh	r5, [r4, #12]
 803b852:	e7cf      	b.n	803b7f4 <__smakebuf_r+0x18>

0803b854 <__ssvfscanf_r>:
 803b854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b858:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 803b85c:	461d      	mov	r5, r3
 803b85e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 803b862:	af02      	add	r7, sp, #8
 803b864:	049e      	lsls	r6, r3, #18
 803b866:	62b8      	str	r0, [r7, #40]	@ 0x28
 803b868:	460c      	mov	r4, r1
 803b86a:	617a      	str	r2, [r7, #20]
 803b86c:	d406      	bmi.n	803b87c <__ssvfscanf_r+0x28>
 803b86e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 803b872:	818b      	strh	r3, [r1, #12]
 803b874:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 803b876:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803b87a:	664b      	str	r3, [r1, #100]	@ 0x64
 803b87c:	2300      	movs	r3, #0
 803b87e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 803b882:	61bb      	str	r3, [r7, #24]
 803b884:	637b      	str	r3, [r7, #52]	@ 0x34
 803b886:	633b      	str	r3, [r7, #48]	@ 0x30
 803b888:	627b      	str	r3, [r7, #36]	@ 0x24
 803b88a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803b88e:	f818 3b01 	ldrb.w	r3, [r8], #1
 803b892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 803b894:	2b00      	cmp	r3, #0
 803b896:	f000 80d3 	beq.w	803ba40 <__ssvfscanf_r+0x1ec>
 803b89a:	4a84      	ldr	r2, [pc, #528]	@ (803baac <__ssvfscanf_r+0x258>)
 803b89c:	5cd6      	ldrb	r6, [r2, r3]
 803b89e:	f016 0608 	ands.w	r6, r6, #8
 803b8a2:	d01b      	beq.n	803b8dc <__ssvfscanf_r+0x88>
 803b8a4:	6863      	ldr	r3, [r4, #4]
 803b8a6:	2b00      	cmp	r3, #0
 803b8a8:	dd08      	ble.n	803b8bc <__ssvfscanf_r+0x68>
 803b8aa:	6823      	ldr	r3, [r4, #0]
 803b8ac:	497f      	ldr	r1, [pc, #508]	@ (803baac <__ssvfscanf_r+0x258>)
 803b8ae:	781a      	ldrb	r2, [r3, #0]
 803b8b0:	5c8a      	ldrb	r2, [r1, r2]
 803b8b2:	0710      	lsls	r0, r2, #28
 803b8b4:	d409      	bmi.n	803b8ca <__ssvfscanf_r+0x76>
 803b8b6:	f8c7 8014 	str.w	r8, [r7, #20]
 803b8ba:	e7e6      	b.n	803b88a <__ssvfscanf_r+0x36>
 803b8bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803b8be:	4621      	mov	r1, r4
 803b8c0:	f7fd fe13 	bl	80394ea <__ssrefill_r>
 803b8c4:	2800      	cmp	r0, #0
 803b8c6:	d0f0      	beq.n	803b8aa <__ssvfscanf_r+0x56>
 803b8c8:	e7f5      	b.n	803b8b6 <__ssvfscanf_r+0x62>
 803b8ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803b8cc:	3201      	adds	r2, #1
 803b8ce:	633a      	str	r2, [r7, #48]	@ 0x30
 803b8d0:	6862      	ldr	r2, [r4, #4]
 803b8d2:	3301      	adds	r3, #1
 803b8d4:	3a01      	subs	r2, #1
 803b8d6:	6062      	str	r2, [r4, #4]
 803b8d8:	6023      	str	r3, [r4, #0]
 803b8da:	e7e3      	b.n	803b8a4 <__ssvfscanf_r+0x50>
 803b8dc:	2b25      	cmp	r3, #37	@ 0x25
 803b8de:	d163      	bne.n	803b9a8 <__ssvfscanf_r+0x154>
 803b8e0:	62fe      	str	r6, [r7, #44]	@ 0x2c
 803b8e2:	4642      	mov	r2, r8
 803b8e4:	f812 3b01 	ldrb.w	r3, [r2], #1
 803b8e8:	617a      	str	r2, [r7, #20]
 803b8ea:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 803b8ee:	2a55      	cmp	r2, #85	@ 0x55
 803b8f0:	f200 816e 	bhi.w	803bbd0 <__ssvfscanf_r+0x37c>
 803b8f4:	e8df f012 	tbh	[pc, r2, lsl #1]
 803b8f8:	016c0056 	.word	0x016c0056
 803b8fc:	016c016c 	.word	0x016c016c
 803b900:	007d016c 	.word	0x007d016c
 803b904:	016c016c 	.word	0x016c016c
 803b908:	016c016c 	.word	0x016c016c
 803b90c:	00b9016c 	.word	0x00b9016c
 803b910:	00b900b9 	.word	0x00b900b9
 803b914:	00b900b9 	.word	0x00b900b9
 803b918:	00b900b9 	.word	0x00b900b9
 803b91c:	00b900b9 	.word	0x00b900b9
 803b920:	016c00b9 	.word	0x016c00b9
 803b924:	016c016c 	.word	0x016c016c
 803b928:	016c016c 	.word	0x016c016c
 803b92c:	016c016c 	.word	0x016c016c
 803b930:	016c00e0 	.word	0x016c00e0
 803b934:	00c3010a 	.word	0x00c3010a
 803b938:	00e000e0 	.word	0x00e000e0
 803b93c:	016c00e0 	.word	0x016c00e0
 803b940:	016c016c 	.word	0x016c016c
 803b944:	00a2016c 	.word	0x00a2016c
 803b948:	016c016c 	.word	0x016c016c
 803b94c:	016c00c7 	.word	0x016c00c7
 803b950:	016c016c 	.word	0x016c016c
 803b954:	016c00fa 	.word	0x016c00fa
 803b958:	016c016c 	.word	0x016c016c
 803b95c:	00d4016c 	.word	0x00d4016c
 803b960:	016c016c 	.word	0x016c016c
 803b964:	016c00ff 	.word	0x016c00ff
 803b968:	016c016c 	.word	0x016c016c
 803b96c:	016c016c 	.word	0x016c016c
 803b970:	016c00e0 	.word	0x016c00e0
 803b974:	00c5010c 	.word	0x00c5010c
 803b978:	00e000e0 	.word	0x00e000e0
 803b97c:	009400e0 	.word	0x009400e0
 803b980:	00a20130 	.word	0x00a20130
 803b984:	0085016c 	.word	0x0085016c
 803b988:	011400ac 	.word	0x011400ac
 803b98c:	011100c9 	.word	0x011100c9
 803b990:	016c016c 	.word	0x016c016c
 803b994:	00a900fc 	.word	0x00a900fc
 803b998:	016c00d0 	.word	0x016c00d0
 803b99c:	00d4016c 	.word	0x00d4016c
 803b9a0:	00a9016c 	.word	0x00a9016c
 803b9a4:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803b9a8:	6863      	ldr	r3, [r4, #4]
 803b9aa:	2b00      	cmp	r3, #0
 803b9ac:	dd0e      	ble.n	803b9cc <__ssvfscanf_r+0x178>
 803b9ae:	6823      	ldr	r3, [r4, #0]
 803b9b0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 803b9b4:	7819      	ldrb	r1, [r3, #0]
 803b9b6:	4291      	cmp	r1, r2
 803b9b8:	d142      	bne.n	803ba40 <__ssvfscanf_r+0x1ec>
 803b9ba:	3301      	adds	r3, #1
 803b9bc:	6862      	ldr	r2, [r4, #4]
 803b9be:	6023      	str	r3, [r4, #0]
 803b9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803b9c2:	3a01      	subs	r2, #1
 803b9c4:	3301      	adds	r3, #1
 803b9c6:	6062      	str	r2, [r4, #4]
 803b9c8:	633b      	str	r3, [r7, #48]	@ 0x30
 803b9ca:	e774      	b.n	803b8b6 <__ssvfscanf_r+0x62>
 803b9cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803b9ce:	4621      	mov	r1, r4
 803b9d0:	f7fd fd8b 	bl	80394ea <__ssrefill_r>
 803b9d4:	2800      	cmp	r0, #0
 803b9d6:	d0ea      	beq.n	803b9ae <__ssvfscanf_r+0x15a>
 803b9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803b9da:	b113      	cbz	r3, 803b9e2 <__ssvfscanf_r+0x18e>
 803b9dc:	89a3      	ldrh	r3, [r4, #12]
 803b9de:	065b      	lsls	r3, r3, #25
 803b9e0:	d52e      	bpl.n	803ba40 <__ssvfscanf_r+0x1ec>
 803b9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803b9e4:	2b00      	cmp	r3, #0
 803b9e6:	f041 809d 	bne.w	803cb24 <__ssvfscanf_r+0x12d0>
 803b9ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803b9ee:	627b      	str	r3, [r7, #36]	@ 0x24
 803b9f0:	e0f9      	b.n	803bbe6 <__ssvfscanf_r+0x392>
 803b9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803b9f4:	4333      	orrs	r3, r6
 803b9f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803b9f8:	d122      	bne.n	803ba40 <__ssvfscanf_r+0x1ec>
 803b9fa:	2610      	movs	r6, #16
 803b9fc:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803ba00:	e76f      	b.n	803b8e2 <__ssvfscanf_r+0x8e>
 803ba02:	0731      	lsls	r1, r6, #28
 803ba04:	d11c      	bne.n	803ba40 <__ssvfscanf_r+0x1ec>
 803ba06:	f898 3001 	ldrb.w	r3, [r8, #1]
 803ba0a:	2b6c      	cmp	r3, #108	@ 0x6c
 803ba0c:	d105      	bne.n	803ba1a <__ssvfscanf_r+0x1c6>
 803ba0e:	f108 0302 	add.w	r3, r8, #2
 803ba12:	617b      	str	r3, [r7, #20]
 803ba14:	f046 0602 	orr.w	r6, r6, #2
 803ba18:	e7f0      	b.n	803b9fc <__ssvfscanf_r+0x1a8>
 803ba1a:	f046 0601 	orr.w	r6, r6, #1
 803ba1e:	e7ed      	b.n	803b9fc <__ssvfscanf_r+0x1a8>
 803ba20:	0732      	lsls	r2, r6, #28
 803ba22:	d10d      	bne.n	803ba40 <__ssvfscanf_r+0x1ec>
 803ba24:	f898 3001 	ldrb.w	r3, [r8, #1]
 803ba28:	2b68      	cmp	r3, #104	@ 0x68
 803ba2a:	bf03      	ittte	eq
 803ba2c:	f108 0302 	addeq.w	r3, r8, #2
 803ba30:	617b      	streq	r3, [r7, #20]
 803ba32:	f046 0608 	orreq.w	r6, r6, #8
 803ba36:	f046 0604 	orrne.w	r6, r6, #4
 803ba3a:	e7df      	b.n	803b9fc <__ssvfscanf_r+0x1a8>
 803ba3c:	0733      	lsls	r3, r6, #28
 803ba3e:	d0e9      	beq.n	803ba14 <__ssvfscanf_r+0x1c0>
 803ba40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803ba42:	2b00      	cmp	r3, #0
 803ba44:	f000 80cf 	beq.w	803bbe6 <__ssvfscanf_r+0x392>
 803ba48:	e0c8      	b.n	803bbdc <__ssvfscanf_r+0x388>
 803ba4a:	0730      	lsls	r0, r6, #28
 803ba4c:	d0d6      	beq.n	803b9fc <__ssvfscanf_r+0x1a8>
 803ba4e:	e7f7      	b.n	803ba40 <__ssvfscanf_r+0x1ec>
 803ba50:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 803ba54:	d1f4      	bne.n	803ba40 <__ssvfscanf_r+0x1ec>
 803ba56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 803ba58:	b922      	cbnz	r2, 803ba64 <__ssvfscanf_r+0x210>
 803ba5a:	b082      	sub	sp, #8
 803ba5c:	aa02      	add	r2, sp, #8
 803ba5e:	e9c2 3300 	strd	r3, r3, [r2]
 803ba62:	637a      	str	r2, [r7, #52]	@ 0x34
 803ba64:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 803ba68:	e7c8      	b.n	803b9fc <__ssvfscanf_r+0x1a8>
 803ba6a:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 803ba6e:	d1e7      	bne.n	803ba40 <__ssvfscanf_r+0x1ec>
 803ba70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803ba72:	220a      	movs	r2, #10
 803ba74:	fb02 3301 	mla	r3, r2, r1, r3
 803ba78:	3b30      	subs	r3, #48	@ 0x30
 803ba7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803ba7c:	e7be      	b.n	803b9fc <__ssvfscanf_r+0x1a8>
 803ba7e:	f046 0601 	orr.w	r6, r6, #1
 803ba82:	4b0b      	ldr	r3, [pc, #44]	@ (803bab0 <__ssvfscanf_r+0x25c>)
 803ba84:	e009      	b.n	803ba9a <__ssvfscanf_r+0x246>
 803ba86:	f046 0601 	orr.w	r6, r6, #1
 803ba8a:	4b0a      	ldr	r3, [pc, #40]	@ (803bab4 <__ssvfscanf_r+0x260>)
 803ba8c:	61bb      	str	r3, [r7, #24]
 803ba8e:	2308      	movs	r3, #8
 803ba90:	61fb      	str	r3, [r7, #28]
 803ba92:	f04f 0803 	mov.w	r8, #3
 803ba96:	e011      	b.n	803babc <__ssvfscanf_r+0x268>
 803ba98:	4b06      	ldr	r3, [pc, #24]	@ (803bab4 <__ssvfscanf_r+0x260>)
 803ba9a:	61bb      	str	r3, [r7, #24]
 803ba9c:	230a      	movs	r3, #10
 803ba9e:	e7f7      	b.n	803ba90 <__ssvfscanf_r+0x23c>
 803baa0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 803baa4:	4b03      	ldr	r3, [pc, #12]	@ (803bab4 <__ssvfscanf_r+0x260>)
 803baa6:	61bb      	str	r3, [r7, #24]
 803baa8:	2310      	movs	r3, #16
 803baaa:	e7f1      	b.n	803ba90 <__ssvfscanf_r+0x23c>
 803baac:	08045025 	.word	0x08045025
 803bab0:	080357e9 	.word	0x080357e9
 803bab4:	0803e5e9 	.word	0x0803e5e9
 803bab8:	f04f 0804 	mov.w	r8, #4
 803babc:	6863      	ldr	r3, [r4, #4]
 803babe:	2b00      	cmp	r3, #0
 803bac0:	dd4e      	ble.n	803bb60 <__ssvfscanf_r+0x30c>
 803bac2:	0673      	lsls	r3, r6, #25
 803bac4:	d407      	bmi.n	803bad6 <__ssvfscanf_r+0x282>
 803bac6:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 803bdc4 <__ssvfscanf_r+0x570>
 803baca:	6823      	ldr	r3, [r4, #0]
 803bacc:	781a      	ldrb	r2, [r3, #0]
 803bace:	f819 2002 	ldrb.w	r2, [r9, r2]
 803bad2:	0710      	lsls	r0, r2, #28
 803bad4:	d44b      	bmi.n	803bb6e <__ssvfscanf_r+0x31a>
 803bad6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803bada:	f1b8 0f03 	cmp.w	r8, #3
 803bade:	d858      	bhi.n	803bb92 <__ssvfscanf_r+0x33e>
 803bae0:	e8df f018 	tbh	[pc, r8, lsl #1]
 803bae4:	037801c1 	.word	0x037801c1
 803bae8:	05f30514 	.word	0x05f30514
 803baec:	f046 0601 	orr.w	r6, r6, #1
 803baf0:	f04f 0802 	mov.w	r8, #2
 803baf4:	e7e2      	b.n	803babc <__ssvfscanf_r+0x268>
 803baf6:	6979      	ldr	r1, [r7, #20]
 803baf8:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 803bafc:	f001 fd1d 	bl	803d53a <__sccl>
 803bb00:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 803bb04:	6178      	str	r0, [r7, #20]
 803bb06:	f04f 0801 	mov.w	r8, #1
 803bb0a:	e7d7      	b.n	803babc <__ssvfscanf_r+0x268>
 803bb0c:	f046 0601 	orr.w	r6, r6, #1
 803bb10:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 803bb14:	f04f 0800 	mov.w	r8, #0
 803bb18:	e7d0      	b.n	803babc <__ssvfscanf_r+0x268>
 803bb1a:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 803bb1e:	e7c1      	b.n	803baa4 <__ssvfscanf_r+0x250>
 803bb20:	06f1      	lsls	r1, r6, #27
 803bb22:	f53f aeb2 	bmi.w	803b88a <__ssvfscanf_r+0x36>
 803bb26:	0732      	lsls	r2, r6, #28
 803bb28:	f855 3b04 	ldr.w	r3, [r5], #4
 803bb2c:	d502      	bpl.n	803bb34 <__ssvfscanf_r+0x2e0>
 803bb2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803bb30:	701a      	strb	r2, [r3, #0]
 803bb32:	e6aa      	b.n	803b88a <__ssvfscanf_r+0x36>
 803bb34:	0770      	lsls	r0, r6, #29
 803bb36:	d502      	bpl.n	803bb3e <__ssvfscanf_r+0x2ea>
 803bb38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803bb3a:	801a      	strh	r2, [r3, #0]
 803bb3c:	e6a5      	b.n	803b88a <__ssvfscanf_r+0x36>
 803bb3e:	07f1      	lsls	r1, r6, #31
 803bb40:	d502      	bpl.n	803bb48 <__ssvfscanf_r+0x2f4>
 803bb42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803bb44:	601a      	str	r2, [r3, #0]
 803bb46:	e6a0      	b.n	803b88a <__ssvfscanf_r+0x36>
 803bb48:	07b2      	lsls	r2, r6, #30
 803bb4a:	d5fa      	bpl.n	803bb42 <__ssvfscanf_r+0x2ee>
 803bb4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803bb4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 803bb50:	17d2      	asrs	r2, r2, #31
 803bb52:	e9c3 1200 	strd	r1, r2, [r3]
 803bb56:	e698      	b.n	803b88a <__ssvfscanf_r+0x36>
 803bb58:	4b99      	ldr	r3, [pc, #612]	@ (803bdc0 <__ssvfscanf_r+0x56c>)
 803bb5a:	61bb      	str	r3, [r7, #24]
 803bb5c:	2300      	movs	r3, #0
 803bb5e:	e797      	b.n	803ba90 <__ssvfscanf_r+0x23c>
 803bb60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bb62:	4621      	mov	r1, r4
 803bb64:	f7fd fcc1 	bl	80394ea <__ssrefill_r>
 803bb68:	2800      	cmp	r0, #0
 803bb6a:	d0aa      	beq.n	803bac2 <__ssvfscanf_r+0x26e>
 803bb6c:	e734      	b.n	803b9d8 <__ssvfscanf_r+0x184>
 803bb6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803bb70:	3201      	adds	r2, #1
 803bb72:	633a      	str	r2, [r7, #48]	@ 0x30
 803bb74:	6862      	ldr	r2, [r4, #4]
 803bb76:	3a01      	subs	r2, #1
 803bb78:	2a00      	cmp	r2, #0
 803bb7a:	6062      	str	r2, [r4, #4]
 803bb7c:	dd02      	ble.n	803bb84 <__ssvfscanf_r+0x330>
 803bb7e:	3301      	adds	r3, #1
 803bb80:	6023      	str	r3, [r4, #0]
 803bb82:	e7a2      	b.n	803baca <__ssvfscanf_r+0x276>
 803bb84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bb86:	4621      	mov	r1, r4
 803bb88:	f7fd fcaf 	bl	80394ea <__ssrefill_r>
 803bb8c:	2800      	cmp	r0, #0
 803bb8e:	d09c      	beq.n	803baca <__ssvfscanf_r+0x276>
 803bb90:	e722      	b.n	803b9d8 <__ssvfscanf_r+0x184>
 803bb92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803bb94:	2b01      	cmp	r3, #1
 803bb96:	bf38      	it	cc
 803bb98:	2301      	movcc	r3, #1
 803bb9a:	4698      	mov	r8, r3
 803bb9c:	f016 0301 	ands.w	r3, r6, #1
 803bba0:	f006 0b10 	and.w	fp, r6, #16
 803bba4:	f000 80eb 	beq.w	803bd7e <__ssvfscanf_r+0x52a>
 803bba8:	f1bb 0f00 	cmp.w	fp, #0
 803bbac:	f040 8085 	bne.w	803bcba <__ssvfscanf_r+0x466>
 803bbb0:	462b      	mov	r3, r5
 803bbb2:	0631      	lsls	r1, r6, #24
 803bbb4:	f853 5b04 	ldr.w	r5, [r3], #4
 803bbb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803bbba:	f140 8085 	bpl.w	803bcc8 <__ssvfscanf_r+0x474>
 803bbbe:	b13d      	cbz	r5, 803bbd0 <__ssvfscanf_r+0x37c>
 803bbc0:	2080      	movs	r0, #128	@ 0x80
 803bbc2:	f7fc fcd3 	bl	803856c <malloc>
 803bbc6:	4606      	mov	r6, r0
 803bbc8:	b998      	cbnz	r0, 803bbf2 <__ssvfscanf_r+0x39e>
 803bbca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803bbce:	627b      	str	r3, [r7, #36]	@ 0x24
 803bbd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bbd2:	b143      	cbz	r3, 803bbe6 <__ssvfscanf_r+0x392>
 803bbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803bbd6:	3301      	adds	r3, #1
 803bbd8:	f000 87a4 	beq.w	803cb24 <__ssvfscanf_r+0x12d0>
 803bbdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bbde:	6818      	ldr	r0, [r3, #0]
 803bbe0:	b108      	cbz	r0, 803bbe6 <__ssvfscanf_r+0x392>
 803bbe2:	f7fc fccb 	bl	803857c <free>
 803bbe6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803bbe8:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 803bbec:	46bd      	mov	sp, r7
 803bbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803bbf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bbf4:	6028      	str	r0, [r5, #0]
 803bbf6:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 803bbfa:	889b      	ldrh	r3, [r3, #4]
 803bbfc:	4599      	cmp	r9, r3
 803bbfe:	d314      	bcc.n	803bc2a <__ssvfscanf_r+0x3d6>
 803bc00:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 803bc04:	4293      	cmp	r3, r2
 803bc06:	f200 878d 	bhi.w	803cb24 <__ssvfscanf_r+0x12d0>
 803bc0a:	3308      	adds	r3, #8
 803bc0c:	fa1f fa83 	uxth.w	sl, r3
 803bc10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bc12:	ea4f 018a 	mov.w	r1, sl, lsl #2
 803bc16:	6818      	ldr	r0, [r3, #0]
 803bc18:	f001 fc32 	bl	803d480 <realloc>
 803bc1c:	2800      	cmp	r0, #0
 803bc1e:	f000 8781 	beq.w	803cb24 <__ssvfscanf_r+0x12d0>
 803bc22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bc24:	6018      	str	r0, [r3, #0]
 803bc26:	f8a3 a004 	strh.w	sl, [r3, #4]
 803bc2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bc2c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803bc2e:	681b      	ldr	r3, [r3, #0]
 803bc30:	f109 0201 	add.w	r2, r9, #1
 803bc34:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 803bc38:	46aa      	mov	sl, r5
 803bc3a:	80ca      	strh	r2, [r1, #6]
 803bc3c:	4635      	mov	r5, r6
 803bc3e:	f04f 0920 	mov.w	r9, #32
 803bc42:	2200      	movs	r2, #0
 803bc44:	613a      	str	r2, [r7, #16]
 803bc46:	f7fb fbd3 	bl	80373f0 <__locale_mb_cur_max>
 803bc4a:	693a      	ldr	r2, [r7, #16]
 803bc4c:	4290      	cmp	r0, r2
 803bc4e:	f43f aec3 	beq.w	803b9d8 <__ssvfscanf_r+0x184>
 803bc52:	6821      	ldr	r1, [r4, #0]
 803bc54:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 803bc58:	f811 0b01 	ldrb.w	r0, [r1], #1
 803bc5c:	f80c 0002 	strb.w	r0, [ip, r2]
 803bc60:	1c53      	adds	r3, r2, #1
 803bc62:	6862      	ldr	r2, [r4, #4]
 803bc64:	3a01      	subs	r2, #1
 803bc66:	e9c4 1200 	strd	r1, r2, [r4]
 803bc6a:	6a3a      	ldr	r2, [r7, #32]
 803bc6c:	2a03      	cmp	r2, #3
 803bc6e:	d102      	bne.n	803bc76 <__ssvfscanf_r+0x422>
 803bc70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 803bc72:	2a04      	cmp	r2, #4
 803bc74:	d007      	beq.n	803bc86 <__ssvfscanf_r+0x432>
 803bc76:	2208      	movs	r2, #8
 803bc78:	2100      	movs	r1, #0
 803bc7a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 803bc7e:	623b      	str	r3, [r7, #32]
 803bc80:	f7fa fa2e 	bl	80360e0 <memset>
 803bc84:	6a3b      	ldr	r3, [r7, #32]
 803bc86:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 803bc8a:	9200      	str	r2, [sp, #0]
 803bc8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bc8e:	613b      	str	r3, [r7, #16]
 803bc90:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 803bc94:	4629      	mov	r1, r5
 803bc96:	f002 ffad 	bl	803ebf4 <_mbrtowc_r>
 803bc9a:	1c42      	adds	r2, r0, #1
 803bc9c:	6238      	str	r0, [r7, #32]
 803bc9e:	f43f ae9b 	beq.w	803b9d8 <__ssvfscanf_r+0x184>
 803bca2:	693b      	ldr	r3, [r7, #16]
 803bca4:	b9b8      	cbnz	r0, 803bcd6 <__ssvfscanf_r+0x482>
 803bca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803bca8:	441a      	add	r2, r3
 803bcaa:	4613      	mov	r3, r2
 803bcac:	f1bb 0f00 	cmp.w	fp, #0
 803bcb0:	d00e      	beq.n	803bcd0 <__ssvfscanf_r+0x47c>
 803bcb2:	633b      	str	r3, [r7, #48]	@ 0x30
 803bcb4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803bcb8:	e019      	b.n	803bcee <__ssvfscanf_r+0x49a>
 803bcba:	f04f 0900 	mov.w	r9, #0
 803bcbe:	62fd      	str	r5, [r7, #44]	@ 0x2c
 803bcc0:	464e      	mov	r6, r9
 803bcc2:	46ca      	mov	sl, r9
 803bcc4:	464d      	mov	r5, r9
 803bcc6:	e7bc      	b.n	803bc42 <__ssvfscanf_r+0x3ee>
 803bcc8:	46d9      	mov	r9, fp
 803bcca:	465e      	mov	r6, fp
 803bccc:	46da      	mov	sl, fp
 803bcce:	e7b8      	b.n	803bc42 <__ssvfscanf_r+0x3ee>
 803bcd0:	f8c5 b000 	str.w	fp, [r5]
 803bcd4:	e7ed      	b.n	803bcb2 <__ssvfscanf_r+0x45e>
 803bcd6:	6a3a      	ldr	r2, [r7, #32]
 803bcd8:	3202      	adds	r2, #2
 803bcda:	d025      	beq.n	803bd28 <__ssvfscanf_r+0x4d4>
 803bcdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803bcde:	441a      	add	r2, r3
 803bce0:	6a3b      	ldr	r3, [r7, #32]
 803bce2:	633a      	str	r2, [r7, #48]	@ 0x30
 803bce4:	2b03      	cmp	r3, #3
 803bce6:	d1e5      	bne.n	803bcb4 <__ssvfscanf_r+0x460>
 803bce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 803bcea:	2b04      	cmp	r3, #4
 803bcec:	d1e2      	bne.n	803bcb4 <__ssvfscanf_r+0x460>
 803bcee:	f1bb 0f00 	cmp.w	fp, #0
 803bcf2:	d117      	bne.n	803bd24 <__ssvfscanf_r+0x4d0>
 803bcf4:	f1ba 0f00 	cmp.w	sl, #0
 803bcf8:	d013      	beq.n	803bd22 <__ssvfscanf_r+0x4ce>
 803bcfa:	1bab      	subs	r3, r5, r6
 803bcfc:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 803bd00:	d80f      	bhi.n	803bd22 <__ssvfscanf_r+0x4ce>
 803bd02:	4630      	mov	r0, r6
 803bd04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803bd08:	613b      	str	r3, [r7, #16]
 803bd0a:	f001 fbb9 	bl	803d480 <realloc>
 803bd0e:	4606      	mov	r6, r0
 803bd10:	2800      	cmp	r0, #0
 803bd12:	f43f af5a 	beq.w	803bbca <__ssvfscanf_r+0x376>
 803bd16:	693b      	ldr	r3, [r7, #16]
 803bd18:	f8ca 0000 	str.w	r0, [sl]
 803bd1c:	18c5      	adds	r5, r0, r3
 803bd1e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803bd22:	3504      	adds	r5, #4
 803bd24:	2200      	movs	r2, #0
 803bd26:	e000      	b.n	803bd2a <__ssvfscanf_r+0x4d6>
 803bd28:	461a      	mov	r2, r3
 803bd2a:	6863      	ldr	r3, [r4, #4]
 803bd2c:	2b00      	cmp	r3, #0
 803bd2e:	dc14      	bgt.n	803bd5a <__ssvfscanf_r+0x506>
 803bd30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bd32:	613a      	str	r2, [r7, #16]
 803bd34:	4621      	mov	r1, r4
 803bd36:	f7fd fbd8 	bl	80394ea <__ssrefill_r>
 803bd3a:	693a      	ldr	r2, [r7, #16]
 803bd3c:	b168      	cbz	r0, 803bd5a <__ssvfscanf_r+0x506>
 803bd3e:	2a00      	cmp	r2, #0
 803bd40:	f47f ae4a 	bne.w	803b9d8 <__ssvfscanf_r+0x184>
 803bd44:	f1ba 0f00 	cmp.w	sl, #0
 803bd48:	d10c      	bne.n	803bd64 <__ssvfscanf_r+0x510>
 803bd4a:	f1bb 0f00 	cmp.w	fp, #0
 803bd4e:	d102      	bne.n	803bd56 <__ssvfscanf_r+0x502>
 803bd50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803bd52:	3301      	adds	r3, #1
 803bd54:	627b      	str	r3, [r7, #36]	@ 0x24
 803bd56:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 803bd58:	e597      	b.n	803b88a <__ssvfscanf_r+0x36>
 803bd5a:	f1b8 0f00 	cmp.w	r8, #0
 803bd5e:	f47f af71 	bne.w	803bc44 <__ssvfscanf_r+0x3f0>
 803bd62:	e7ef      	b.n	803bd44 <__ssvfscanf_r+0x4f0>
 803bd64:	1ba9      	subs	r1, r5, r6
 803bd66:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 803bd6a:	d9ee      	bls.n	803bd4a <__ssvfscanf_r+0x4f6>
 803bd6c:	f8da 0000 	ldr.w	r0, [sl]
 803bd70:	f001 fb86 	bl	803d480 <realloc>
 803bd74:	2800      	cmp	r0, #0
 803bd76:	d0e8      	beq.n	803bd4a <__ssvfscanf_r+0x4f6>
 803bd78:	f8ca 0000 	str.w	r0, [sl]
 803bd7c:	e7e5      	b.n	803bd4a <__ssvfscanf_r+0x4f6>
 803bd7e:	f1bb 0f00 	cmp.w	fp, #0
 803bd82:	d021      	beq.n	803bdc8 <__ssvfscanf_r+0x574>
 803bd84:	461e      	mov	r6, r3
 803bd86:	e9d4 2300 	ldrd	r2, r3, [r4]
 803bd8a:	4598      	cmp	r8, r3
 803bd8c:	dd11      	ble.n	803bdb2 <__ssvfscanf_r+0x55e>
 803bd8e:	441a      	add	r2, r3
 803bd90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bd92:	6022      	str	r2, [r4, #0]
 803bd94:	4621      	mov	r1, r4
 803bd96:	441e      	add	r6, r3
 803bd98:	eba8 0803 	sub.w	r8, r8, r3
 803bd9c:	f7fd fba5 	bl	80394ea <__ssrefill_r>
 803bda0:	2800      	cmp	r0, #0
 803bda2:	d0f0      	beq.n	803bd86 <__ssvfscanf_r+0x532>
 803bda4:	2e00      	cmp	r6, #0
 803bda6:	f43f ae17 	beq.w	803b9d8 <__ssvfscanf_r+0x184>
 803bdaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803bdac:	4433      	add	r3, r6
 803bdae:	633b      	str	r3, [r7, #48]	@ 0x30
 803bdb0:	e56b      	b.n	803b88a <__ssvfscanf_r+0x36>
 803bdb2:	eba3 0308 	sub.w	r3, r3, r8
 803bdb6:	4442      	add	r2, r8
 803bdb8:	4446      	add	r6, r8
 803bdba:	6063      	str	r3, [r4, #4]
 803bdbc:	6022      	str	r2, [r4, #0]
 803bdbe:	e7f4      	b.n	803bdaa <__ssvfscanf_r+0x556>
 803bdc0:	080357e9 	.word	0x080357e9
 803bdc4:	08045025 	.word	0x08045025
 803bdc8:	46a9      	mov	r9, r5
 803bdca:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803bdce:	f859 5b04 	ldr.w	r5, [r9], #4
 803bdd2:	d02c      	beq.n	803be2e <__ssvfscanf_r+0x5da>
 803bdd4:	2d00      	cmp	r5, #0
 803bdd6:	f43f ae33 	beq.w	803ba40 <__ssvfscanf_r+0x1ec>
 803bdda:	4640      	mov	r0, r8
 803bddc:	f7fc fbc6 	bl	803856c <malloc>
 803bde0:	4682      	mov	sl, r0
 803bde2:	2800      	cmp	r0, #0
 803bde4:	f43f adfd 	beq.w	803b9e2 <__ssvfscanf_r+0x18e>
 803bde8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bdea:	6028      	str	r0, [r5, #0]
 803bdec:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 803bdf0:	889e      	ldrh	r6, [r3, #4]
 803bdf2:	45b3      	cmp	fp, r6
 803bdf4:	d311      	bcc.n	803be1a <__ssvfscanf_r+0x5c6>
 803bdf6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803bdfa:	429e      	cmp	r6, r3
 803bdfc:	f200 8692 	bhi.w	803cb24 <__ssvfscanf_r+0x12d0>
 803be00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803be02:	3608      	adds	r6, #8
 803be04:	b2b6      	uxth	r6, r6
 803be06:	6818      	ldr	r0, [r3, #0]
 803be08:	00b1      	lsls	r1, r6, #2
 803be0a:	f001 fb39 	bl	803d480 <realloc>
 803be0e:	2800      	cmp	r0, #0
 803be10:	f000 8688 	beq.w	803cb24 <__ssvfscanf_r+0x12d0>
 803be14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803be16:	6018      	str	r0, [r3, #0]
 803be18:	809e      	strh	r6, [r3, #4]
 803be1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803be1c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803be1e:	681b      	ldr	r3, [r3, #0]
 803be20:	f10b 0201 	add.w	r2, fp, #1
 803be24:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 803be28:	462e      	mov	r6, r5
 803be2a:	80ca      	strh	r2, [r1, #6]
 803be2c:	4655      	mov	r5, sl
 803be2e:	9400      	str	r4, [sp, #0]
 803be30:	4629      	mov	r1, r5
 803be32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803be34:	4643      	mov	r3, r8
 803be36:	2201      	movs	r2, #1
 803be38:	f7fd fb74 	bl	8039524 <_sfread_r>
 803be3c:	4605      	mov	r5, r0
 803be3e:	2800      	cmp	r0, #0
 803be40:	f43f adca 	beq.w	803b9d8 <__ssvfscanf_r+0x184>
 803be44:	b13e      	cbz	r6, 803be56 <__ssvfscanf_r+0x602>
 803be46:	4580      	cmp	r8, r0
 803be48:	d905      	bls.n	803be56 <__ssvfscanf_r+0x602>
 803be4a:	4601      	mov	r1, r0
 803be4c:	6830      	ldr	r0, [r6, #0]
 803be4e:	f001 fb17 	bl	803d480 <realloc>
 803be52:	b100      	cbz	r0, 803be56 <__ssvfscanf_r+0x602>
 803be54:	6030      	str	r0, [r6, #0]
 803be56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803be58:	442b      	add	r3, r5
 803be5a:	633b      	str	r3, [r7, #48]	@ 0x30
 803be5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803be5e:	3301      	adds	r3, #1
 803be60:	627b      	str	r3, [r7, #36]	@ 0x24
 803be62:	464d      	mov	r5, r9
 803be64:	e511      	b.n	803b88a <__ssvfscanf_r+0x36>
 803be66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803be68:	2b00      	cmp	r3, #0
 803be6a:	bf08      	it	eq
 803be6c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 803be70:	f016 0801 	ands.w	r8, r6, #1
 803be74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803be76:	f006 0a10 	and.w	sl, r6, #16
 803be7a:	f000 8101 	beq.w	803c080 <__ssvfscanf_r+0x82c>
 803be7e:	f1ba 0f00 	cmp.w	sl, #0
 803be82:	f040 80a4 	bne.w	803bfce <__ssvfscanf_r+0x77a>
 803be86:	462b      	mov	r3, r5
 803be88:	f853 5b04 	ldr.w	r5, [r3], #4
 803be8c:	60fb      	str	r3, [r7, #12]
 803be8e:	0633      	lsls	r3, r6, #24
 803be90:	f140 80a5 	bpl.w	803bfde <__ssvfscanf_r+0x78a>
 803be94:	2d00      	cmp	r5, #0
 803be96:	f43f ae9b 	beq.w	803bbd0 <__ssvfscanf_r+0x37c>
 803be9a:	2080      	movs	r0, #128	@ 0x80
 803be9c:	f7fc fb66 	bl	803856c <malloc>
 803bea0:	4680      	mov	r8, r0
 803bea2:	2800      	cmp	r0, #0
 803bea4:	f43f ae91 	beq.w	803bbca <__ssvfscanf_r+0x376>
 803bea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803beaa:	6028      	str	r0, [r5, #0]
 803beac:	88de      	ldrh	r6, [r3, #6]
 803beae:	889b      	ldrh	r3, [r3, #4]
 803beb0:	429e      	cmp	r6, r3
 803beb2:	d314      	bcc.n	803bede <__ssvfscanf_r+0x68a>
 803beb4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 803beb8:	4293      	cmp	r3, r2
 803beba:	f200 8633 	bhi.w	803cb24 <__ssvfscanf_r+0x12d0>
 803bebe:	3308      	adds	r3, #8
 803bec0:	fa1f f983 	uxth.w	r9, r3
 803bec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bec6:	ea4f 0189 	mov.w	r1, r9, lsl #2
 803beca:	6818      	ldr	r0, [r3, #0]
 803becc:	f001 fad8 	bl	803d480 <realloc>
 803bed0:	2800      	cmp	r0, #0
 803bed2:	f000 8627 	beq.w	803cb24 <__ssvfscanf_r+0x12d0>
 803bed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bed8:	6018      	str	r0, [r3, #0]
 803beda:	f8a3 9004 	strh.w	r9, [r3, #4]
 803bede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803bee0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803bee2:	681b      	ldr	r3, [r3, #0]
 803bee4:	1c72      	adds	r2, r6, #1
 803bee6:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 803beea:	46ab      	mov	fp, r5
 803beec:	80ca      	strh	r2, [r1, #6]
 803beee:	4645      	mov	r5, r8
 803bef0:	f04f 0920 	mov.w	r9, #32
 803bef4:	2600      	movs	r6, #0
 803bef6:	f7fb fa7b 	bl	80373f0 <__locale_mb_cur_max>
 803befa:	42b0      	cmp	r0, r6
 803befc:	f43f ad6c 	beq.w	803b9d8 <__ssvfscanf_r+0x184>
 803bf00:	1c73      	adds	r3, r6, #1
 803bf02:	613b      	str	r3, [r7, #16]
 803bf04:	6823      	ldr	r3, [r4, #0]
 803bf06:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803bf0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803bf0e:	558a      	strb	r2, [r1, r6]
 803bf10:	6862      	ldr	r2, [r4, #4]
 803bf12:	3a01      	subs	r2, #1
 803bf14:	e9c4 3200 	strd	r3, r2, [r4]
 803bf18:	6a3b      	ldr	r3, [r7, #32]
 803bf1a:	2b03      	cmp	r3, #3
 803bf1c:	d102      	bne.n	803bf24 <__ssvfscanf_r+0x6d0>
 803bf1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 803bf20:	2b04      	cmp	r3, #4
 803bf22:	d005      	beq.n	803bf30 <__ssvfscanf_r+0x6dc>
 803bf24:	2208      	movs	r2, #8
 803bf26:	2100      	movs	r1, #0
 803bf28:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803bf2c:	f7fa f8d8 	bl	80360e0 <memset>
 803bf30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 803bf34:	9300      	str	r3, [sp, #0]
 803bf36:	693b      	ldr	r3, [r7, #16]
 803bf38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bf3a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 803bf3e:	4629      	mov	r1, r5
 803bf40:	f002 fe58 	bl	803ebf4 <_mbrtowc_r>
 803bf44:	1c46      	adds	r6, r0, #1
 803bf46:	6238      	str	r0, [r7, #32]
 803bf48:	f43f ad46 	beq.w	803b9d8 <__ssvfscanf_r+0x184>
 803bf4c:	2800      	cmp	r0, #0
 803bf4e:	d14a      	bne.n	803bfe6 <__ssvfscanf_r+0x792>
 803bf50:	6028      	str	r0, [r5, #0]
 803bf52:	682e      	ldr	r6, [r5, #0]
 803bf54:	1c70      	adds	r0, r6, #1
 803bf56:	d056      	beq.n	803c006 <__ssvfscanf_r+0x7b2>
 803bf58:	2208      	movs	r2, #8
 803bf5a:	2100      	movs	r1, #0
 803bf5c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 803bf60:	f7fa f8be 	bl	80360e0 <memset>
 803bf64:	4b9a      	ldr	r3, [pc, #616]	@ (803c1d0 <__ssvfscanf_r+0x97c>)
 803bf66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bf68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 803bf6c:	60bb      	str	r3, [r7, #8]
 803bf6e:	4632      	mov	r2, r6
 803bf70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803bf74:	68be      	ldr	r6, [r7, #8]
 803bf76:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 803bf7a:	47b0      	blx	r6
 803bf7c:	2801      	cmp	r0, #1
 803bf7e:	d144      	bne.n	803c00a <__ssvfscanf_r+0x7b6>
 803bf80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 803bf84:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 803bf88:	5c9b      	ldrb	r3, [r3, r2]
 803bf8a:	2b00      	cmp	r3, #0
 803bf8c:	d148      	bne.n	803c020 <__ssvfscanf_r+0x7cc>
 803bf8e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 803bf92:	693b      	ldr	r3, [r7, #16]
 803bf94:	2b00      	cmp	r3, #0
 803bf96:	d13a      	bne.n	803c00e <__ssvfscanf_r+0x7ba>
 803bf98:	f1ba 0f00 	cmp.w	sl, #0
 803bf9c:	d115      	bne.n	803bfca <__ssvfscanf_r+0x776>
 803bf9e:	f8c5 a000 	str.w	sl, [r5]
 803bfa2:	f1bb 0f00 	cmp.w	fp, #0
 803bfa6:	d00d      	beq.n	803bfc4 <__ssvfscanf_r+0x770>
 803bfa8:	eba5 0108 	sub.w	r1, r5, r8
 803bfac:	108b      	asrs	r3, r1, #2
 803bfae:	3301      	adds	r3, #1
 803bfb0:	4599      	cmp	r9, r3
 803bfb2:	d907      	bls.n	803bfc4 <__ssvfscanf_r+0x770>
 803bfb4:	f8db 0000 	ldr.w	r0, [fp]
 803bfb8:	3104      	adds	r1, #4
 803bfba:	f001 fa61 	bl	803d480 <realloc>
 803bfbe:	b108      	cbz	r0, 803bfc4 <__ssvfscanf_r+0x770>
 803bfc0:	f8cb 0000 	str.w	r0, [fp]
 803bfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803bfc6:	3301      	adds	r3, #1
 803bfc8:	627b      	str	r3, [r7, #36]	@ 0x24
 803bfca:	68fd      	ldr	r5, [r7, #12]
 803bfcc:	e45d      	b.n	803b88a <__ssvfscanf_r+0x36>
 803bfce:	f04f 0900 	mov.w	r9, #0
 803bfd2:	60fd      	str	r5, [r7, #12]
 803bfd4:	46c8      	mov	r8, r9
 803bfd6:	46cb      	mov	fp, r9
 803bfd8:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 803bfdc:	e78a      	b.n	803bef4 <__ssvfscanf_r+0x6a0>
 803bfde:	46d1      	mov	r9, sl
 803bfe0:	46d0      	mov	r8, sl
 803bfe2:	46d3      	mov	fp, sl
 803bfe4:	e786      	b.n	803bef4 <__ssvfscanf_r+0x6a0>
 803bfe6:	6a3b      	ldr	r3, [r7, #32]
 803bfe8:	3302      	adds	r3, #2
 803bfea:	d1b2      	bne.n	803bf52 <__ssvfscanf_r+0x6fe>
 803bfec:	693e      	ldr	r6, [r7, #16]
 803bfee:	6863      	ldr	r3, [r4, #4]
 803bff0:	2b00      	cmp	r3, #0
 803bff2:	dc40      	bgt.n	803c076 <__ssvfscanf_r+0x822>
 803bff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803bff6:	4621      	mov	r1, r4
 803bff8:	f7fd fa77 	bl	80394ea <__ssrefill_r>
 803bffc:	2800      	cmp	r0, #0
 803bffe:	d03a      	beq.n	803c076 <__ssvfscanf_r+0x822>
 803c000:	2e00      	cmp	r6, #0
 803c002:	d0c9      	beq.n	803bf98 <__ssvfscanf_r+0x744>
 803c004:	e4e8      	b.n	803b9d8 <__ssvfscanf_r+0x184>
 803c006:	4632      	mov	r2, r6
 803c008:	e7bc      	b.n	803bf84 <__ssvfscanf_r+0x730>
 803c00a:	2200      	movs	r2, #0
 803c00c:	e7ba      	b.n	803bf84 <__ssvfscanf_r+0x730>
 803c00e:	693b      	ldr	r3, [r7, #16]
 803c010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c012:	3b01      	subs	r3, #1
 803c014:	4622      	mov	r2, r4
 803c016:	5cf1      	ldrb	r1, [r6, r3]
 803c018:	613b      	str	r3, [r7, #16]
 803c01a:	f7fd fa2b 	bl	8039474 <_sungetc_r>
 803c01e:	e7b8      	b.n	803bf92 <__ssvfscanf_r+0x73e>
 803c020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803c022:	693a      	ldr	r2, [r7, #16]
 803c024:	4413      	add	r3, r2
 803c026:	633b      	str	r3, [r7, #48]	@ 0x30
 803c028:	6a3b      	ldr	r3, [r7, #32]
 803c02a:	2b03      	cmp	r3, #3
 803c02c:	d102      	bne.n	803c034 <__ssvfscanf_r+0x7e0>
 803c02e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 803c030:	2b04      	cmp	r3, #4
 803c032:	d002      	beq.n	803c03a <__ssvfscanf_r+0x7e6>
 803c034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c036:	3b01      	subs	r3, #1
 803c038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803c03a:	f1ba 0f00 	cmp.w	sl, #0
 803c03e:	d118      	bne.n	803c072 <__ssvfscanf_r+0x81e>
 803c040:	3504      	adds	r5, #4
 803c042:	f1bb 0f00 	cmp.w	fp, #0
 803c046:	d014      	beq.n	803c072 <__ssvfscanf_r+0x81e>
 803c048:	eba5 0608 	sub.w	r6, r5, r8
 803c04c:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 803c050:	d80d      	bhi.n	803c06e <__ssvfscanf_r+0x81a>
 803c052:	4640      	mov	r0, r8
 803c054:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803c058:	f001 fa12 	bl	803d480 <realloc>
 803c05c:	4680      	mov	r8, r0
 803c05e:	2800      	cmp	r0, #0
 803c060:	f43f adb3 	beq.w	803bbca <__ssvfscanf_r+0x376>
 803c064:	1985      	adds	r5, r0, r6
 803c066:	f8cb 0000 	str.w	r0, [fp]
 803c06a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803c06e:	4656      	mov	r6, sl
 803c070:	e7bd      	b.n	803bfee <__ssvfscanf_r+0x79a>
 803c072:	2600      	movs	r6, #0
 803c074:	e7bb      	b.n	803bfee <__ssvfscanf_r+0x79a>
 803c076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c078:	2b00      	cmp	r3, #0
 803c07a:	f47f af3c 	bne.w	803bef6 <__ssvfscanf_r+0x6a2>
 803c07e:	e78b      	b.n	803bf98 <__ssvfscanf_r+0x744>
 803c080:	f1ba 0f00 	cmp.w	sl, #0
 803c084:	d01e      	beq.n	803c0c4 <__ssvfscanf_r+0x870>
 803c086:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 803c08a:	6823      	ldr	r3, [r4, #0]
 803c08c:	781a      	ldrb	r2, [r3, #0]
 803c08e:	5cb2      	ldrb	r2, [r6, r2]
 803c090:	b91a      	cbnz	r2, 803c09a <__ssvfscanf_r+0x846>
 803c092:	f1b8 0f00 	cmp.w	r8, #0
 803c096:	d112      	bne.n	803c0be <__ssvfscanf_r+0x86a>
 803c098:	e4d2      	b.n	803ba40 <__ssvfscanf_r+0x1ec>
 803c09a:	3301      	adds	r3, #1
 803c09c:	6862      	ldr	r2, [r4, #4]
 803c09e:	6023      	str	r3, [r4, #0]
 803c0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c0a2:	f108 0801 	add.w	r8, r8, #1
 803c0a6:	3a01      	subs	r2, #1
 803c0a8:	4543      	cmp	r3, r8
 803c0aa:	6062      	str	r2, [r4, #4]
 803c0ac:	d007      	beq.n	803c0be <__ssvfscanf_r+0x86a>
 803c0ae:	2a00      	cmp	r2, #0
 803c0b0:	dceb      	bgt.n	803c08a <__ssvfscanf_r+0x836>
 803c0b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c0b4:	4621      	mov	r1, r4
 803c0b6:	f7fd fa18 	bl	80394ea <__ssrefill_r>
 803c0ba:	2800      	cmp	r0, #0
 803c0bc:	d0e5      	beq.n	803c08a <__ssvfscanf_r+0x836>
 803c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803c0c0:	4443      	add	r3, r8
 803c0c2:	e674      	b.n	803bdae <__ssvfscanf_r+0x55a>
 803c0c4:	46a9      	mov	r9, r5
 803c0c6:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803c0ca:	f859 8b04 	ldr.w	r8, [r9], #4
 803c0ce:	d07d      	beq.n	803c1cc <__ssvfscanf_r+0x978>
 803c0d0:	f1b8 0f00 	cmp.w	r8, #0
 803c0d4:	f43f acb4 	beq.w	803ba40 <__ssvfscanf_r+0x1ec>
 803c0d8:	2020      	movs	r0, #32
 803c0da:	f7fc fa47 	bl	803856c <malloc>
 803c0de:	4606      	mov	r6, r0
 803c0e0:	2800      	cmp	r0, #0
 803c0e2:	f43f ac7e 	beq.w	803b9e2 <__ssvfscanf_r+0x18e>
 803c0e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c0e8:	f8c8 0000 	str.w	r0, [r8]
 803c0ec:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 803c0f0:	889d      	ldrh	r5, [r3, #4]
 803c0f2:	45aa      	cmp	sl, r5
 803c0f4:	d311      	bcc.n	803c11a <__ssvfscanf_r+0x8c6>
 803c0f6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803c0fa:	429d      	cmp	r5, r3
 803c0fc:	f200 8512 	bhi.w	803cb24 <__ssvfscanf_r+0x12d0>
 803c100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c102:	3508      	adds	r5, #8
 803c104:	b2ad      	uxth	r5, r5
 803c106:	6818      	ldr	r0, [r3, #0]
 803c108:	00a9      	lsls	r1, r5, #2
 803c10a:	f001 f9b9 	bl	803d480 <realloc>
 803c10e:	2800      	cmp	r0, #0
 803c110:	f000 8508 	beq.w	803cb24 <__ssvfscanf_r+0x12d0>
 803c114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c116:	6018      	str	r0, [r3, #0]
 803c118:	809d      	strh	r5, [r3, #4]
 803c11a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c11c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803c11e:	681b      	ldr	r3, [r3, #0]
 803c120:	f10a 0201 	add.w	r2, sl, #1
 803c124:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 803c128:	80ca      	strh	r2, [r1, #6]
 803c12a:	46c2      	mov	sl, r8
 803c12c:	46b0      	mov	r8, r6
 803c12e:	2620      	movs	r6, #32
 803c130:	4645      	mov	r5, r8
 803c132:	6823      	ldr	r3, [r4, #0]
 803c134:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 803c138:	781a      	ldrb	r2, [r3, #0]
 803c13a:	5c8a      	ldrb	r2, [r1, r2]
 803c13c:	b35a      	cbz	r2, 803c196 <__ssvfscanf_r+0x942>
 803c13e:	6862      	ldr	r2, [r4, #4]
 803c140:	3a01      	subs	r2, #1
 803c142:	6062      	str	r2, [r4, #4]
 803c144:	1c5a      	adds	r2, r3, #1
 803c146:	6022      	str	r2, [r4, #0]
 803c148:	781b      	ldrb	r3, [r3, #0]
 803c14a:	f808 3b01 	strb.w	r3, [r8], #1
 803c14e:	f1ba 0f00 	cmp.w	sl, #0
 803c152:	d010      	beq.n	803c176 <__ssvfscanf_r+0x922>
 803c154:	eba8 0b05 	sub.w	fp, r8, r5
 803c158:	45b3      	cmp	fp, r6
 803c15a:	d30c      	bcc.n	803c176 <__ssvfscanf_r+0x922>
 803c15c:	0076      	lsls	r6, r6, #1
 803c15e:	4628      	mov	r0, r5
 803c160:	4631      	mov	r1, r6
 803c162:	f001 f98d 	bl	803d480 <realloc>
 803c166:	4605      	mov	r5, r0
 803c168:	2800      	cmp	r0, #0
 803c16a:	f43f ac3a 	beq.w	803b9e2 <__ssvfscanf_r+0x18e>
 803c16e:	eb00 080b 	add.w	r8, r0, fp
 803c172:	f8ca 0000 	str.w	r0, [sl]
 803c176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c178:	3b01      	subs	r3, #1
 803c17a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803c17c:	d00b      	beq.n	803c196 <__ssvfscanf_r+0x942>
 803c17e:	6863      	ldr	r3, [r4, #4]
 803c180:	2b00      	cmp	r3, #0
 803c182:	dcd6      	bgt.n	803c132 <__ssvfscanf_r+0x8de>
 803c184:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c186:	4621      	mov	r1, r4
 803c188:	f7fd f9af 	bl	80394ea <__ssrefill_r>
 803c18c:	2800      	cmp	r0, #0
 803c18e:	d0d0      	beq.n	803c132 <__ssvfscanf_r+0x8de>
 803c190:	45a8      	cmp	r8, r5
 803c192:	f43f ac21 	beq.w	803b9d8 <__ssvfscanf_r+0x184>
 803c196:	ebb8 0505 	subs.w	r5, r8, r5
 803c19a:	f43f ac51 	beq.w	803ba40 <__ssvfscanf_r+0x1ec>
 803c19e:	2300      	movs	r3, #0
 803c1a0:	f888 3000 	strb.w	r3, [r8]
 803c1a4:	f1ba 0f00 	cmp.w	sl, #0
 803c1a8:	d009      	beq.n	803c1be <__ssvfscanf_r+0x96a>
 803c1aa:	1c69      	adds	r1, r5, #1
 803c1ac:	428e      	cmp	r6, r1
 803c1ae:	d906      	bls.n	803c1be <__ssvfscanf_r+0x96a>
 803c1b0:	f8da 0000 	ldr.w	r0, [sl]
 803c1b4:	f001 f964 	bl	803d480 <realloc>
 803c1b8:	b108      	cbz	r0, 803c1be <__ssvfscanf_r+0x96a>
 803c1ba:	f8ca 0000 	str.w	r0, [sl]
 803c1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803c1c0:	3301      	adds	r3, #1
 803c1c2:	627b      	str	r3, [r7, #36]	@ 0x24
 803c1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803c1c6:	442b      	add	r3, r5
 803c1c8:	633b      	str	r3, [r7, #48]	@ 0x30
 803c1ca:	e64a      	b.n	803be62 <__ssvfscanf_r+0x60e>
 803c1cc:	46b2      	mov	sl, r6
 803c1ce:	e7af      	b.n	803c130 <__ssvfscanf_r+0x8dc>
 803c1d0:	200002d4 	.word	0x200002d4
 803c1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c1d6:	2b00      	cmp	r3, #0
 803c1d8:	bf08      	it	eq
 803c1da:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 803c1de:	f016 0901 	ands.w	r9, r6, #1
 803c1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803c1e4:	f006 0810 	and.w	r8, r6, #16
 803c1e8:	f000 80ef 	beq.w	803c3ca <__ssvfscanf_r+0xb76>
 803c1ec:	f1b8 0f00 	cmp.w	r8, #0
 803c1f0:	f040 8098 	bne.w	803c324 <__ssvfscanf_r+0xad0>
 803c1f4:	462b      	mov	r3, r5
 803c1f6:	0631      	lsls	r1, r6, #24
 803c1f8:	f853 5b04 	ldr.w	r5, [r3], #4
 803c1fc:	613b      	str	r3, [r7, #16]
 803c1fe:	f140 8099 	bpl.w	803c334 <__ssvfscanf_r+0xae0>
 803c202:	2d00      	cmp	r5, #0
 803c204:	f43f ace4 	beq.w	803bbd0 <__ssvfscanf_r+0x37c>
 803c208:	2080      	movs	r0, #128	@ 0x80
 803c20a:	f7fc f9af 	bl	803856c <malloc>
 803c20e:	4606      	mov	r6, r0
 803c210:	2800      	cmp	r0, #0
 803c212:	f43f acda 	beq.w	803bbca <__ssvfscanf_r+0x376>
 803c216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c218:	6028      	str	r0, [r5, #0]
 803c21a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 803c21e:	889b      	ldrh	r3, [r3, #4]
 803c220:	4599      	cmp	r9, r3
 803c222:	d314      	bcc.n	803c24e <__ssvfscanf_r+0x9fa>
 803c224:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 803c228:	4293      	cmp	r3, r2
 803c22a:	f200 847b 	bhi.w	803cb24 <__ssvfscanf_r+0x12d0>
 803c22e:	3308      	adds	r3, #8
 803c230:	fa1f fa83 	uxth.w	sl, r3
 803c234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c236:	ea4f 018a 	mov.w	r1, sl, lsl #2
 803c23a:	6818      	ldr	r0, [r3, #0]
 803c23c:	f001 f920 	bl	803d480 <realloc>
 803c240:	2800      	cmp	r0, #0
 803c242:	f000 846f 	beq.w	803cb24 <__ssvfscanf_r+0x12d0>
 803c246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c248:	6018      	str	r0, [r3, #0]
 803c24a:	f8a3 a004 	strh.w	sl, [r3, #4]
 803c24e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c250:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803c252:	681b      	ldr	r3, [r3, #0]
 803c254:	f109 0201 	add.w	r2, r9, #1
 803c258:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 803c25c:	46aa      	mov	sl, r5
 803c25e:	80ca      	strh	r2, [r1, #6]
 803c260:	4635      	mov	r5, r6
 803c262:	f04f 0920 	mov.w	r9, #32
 803c266:	2300      	movs	r3, #0
 803c268:	6822      	ldr	r2, [r4, #0]
 803c26a:	49a7      	ldr	r1, [pc, #668]	@ (803c508 <__ssvfscanf_r+0xcb4>)
 803c26c:	7812      	ldrb	r2, [r2, #0]
 803c26e:	5c8a      	ldrb	r2, [r1, r2]
 803c270:	0710      	lsls	r0, r2, #28
 803c272:	d43c      	bmi.n	803c2ee <__ssvfscanf_r+0xa9a>
 803c274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803c276:	2a00      	cmp	r2, #0
 803c278:	d039      	beq.n	803c2ee <__ssvfscanf_r+0xa9a>
 803c27a:	60fb      	str	r3, [r7, #12]
 803c27c:	f7fb f8b8 	bl	80373f0 <__locale_mb_cur_max>
 803c280:	68fb      	ldr	r3, [r7, #12]
 803c282:	4298      	cmp	r0, r3
 803c284:	f43f aba8 	beq.w	803b9d8 <__ssvfscanf_r+0x184>
 803c288:	6822      	ldr	r2, [r4, #0]
 803c28a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803c28e:	f812 0b01 	ldrb.w	r0, [r2], #1
 803c292:	54c8      	strb	r0, [r1, r3]
 803c294:	f103 0b01 	add.w	fp, r3, #1
 803c298:	6863      	ldr	r3, [r4, #4]
 803c29a:	3b01      	subs	r3, #1
 803c29c:	e9c4 2300 	strd	r2, r3, [r4]
 803c2a0:	6a3b      	ldr	r3, [r7, #32]
 803c2a2:	2b03      	cmp	r3, #3
 803c2a4:	d102      	bne.n	803c2ac <__ssvfscanf_r+0xa58>
 803c2a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 803c2a8:	2b04      	cmp	r3, #4
 803c2aa:	d005      	beq.n	803c2b8 <__ssvfscanf_r+0xa64>
 803c2ac:	2208      	movs	r2, #8
 803c2ae:	2100      	movs	r1, #0
 803c2b0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 803c2b4:	f7f9 ff14 	bl	80360e0 <memset>
 803c2b8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803c2bc:	9300      	str	r3, [sp, #0]
 803c2be:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 803c2c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c2c4:	465b      	mov	r3, fp
 803c2c6:	4629      	mov	r1, r5
 803c2c8:	f002 fc94 	bl	803ebf4 <_mbrtowc_r>
 803c2cc:	1c42      	adds	r2, r0, #1
 803c2ce:	6238      	str	r0, [r7, #32]
 803c2d0:	f43f ab82 	beq.w	803b9d8 <__ssvfscanf_r+0x184>
 803c2d4:	bb90      	cbnz	r0, 803c33c <__ssvfscanf_r+0xae8>
 803c2d6:	6028      	str	r0, [r5, #0]
 803c2d8:	6828      	ldr	r0, [r5, #0]
 803c2da:	f002 fca5 	bl	803ec28 <iswspace>
 803c2de:	4603      	mov	r3, r0
 803c2e0:	2800      	cmp	r0, #0
 803c2e2:	d047      	beq.n	803c374 <__ssvfscanf_r+0xb20>
 803c2e4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 803c2e8:	f1bb 0f00 	cmp.w	fp, #0
 803c2ec:	d139      	bne.n	803c362 <__ssvfscanf_r+0xb0e>
 803c2ee:	f1b8 0f00 	cmp.w	r8, #0
 803c2f2:	d114      	bne.n	803c31e <__ssvfscanf_r+0xaca>
 803c2f4:	f8c5 8000 	str.w	r8, [r5]
 803c2f8:	f1ba 0f00 	cmp.w	sl, #0
 803c2fc:	d00c      	beq.n	803c318 <__ssvfscanf_r+0xac4>
 803c2fe:	1ba9      	subs	r1, r5, r6
 803c300:	108b      	asrs	r3, r1, #2
 803c302:	3301      	adds	r3, #1
 803c304:	4599      	cmp	r9, r3
 803c306:	d907      	bls.n	803c318 <__ssvfscanf_r+0xac4>
 803c308:	f8da 0000 	ldr.w	r0, [sl]
 803c30c:	3104      	adds	r1, #4
 803c30e:	f001 f8b7 	bl	803d480 <realloc>
 803c312:	b108      	cbz	r0, 803c318 <__ssvfscanf_r+0xac4>
 803c314:	f8ca 0000 	str.w	r0, [sl]
 803c318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803c31a:	3301      	adds	r3, #1
 803c31c:	627b      	str	r3, [r7, #36]	@ 0x24
 803c31e:	693d      	ldr	r5, [r7, #16]
 803c320:	f7ff bab3 	b.w	803b88a <__ssvfscanf_r+0x36>
 803c324:	f04f 0900 	mov.w	r9, #0
 803c328:	613d      	str	r5, [r7, #16]
 803c32a:	464e      	mov	r6, r9
 803c32c:	46ca      	mov	sl, r9
 803c32e:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 803c332:	e798      	b.n	803c266 <__ssvfscanf_r+0xa12>
 803c334:	46c1      	mov	r9, r8
 803c336:	4646      	mov	r6, r8
 803c338:	46c2      	mov	sl, r8
 803c33a:	e794      	b.n	803c266 <__ssvfscanf_r+0xa12>
 803c33c:	6a3b      	ldr	r3, [r7, #32]
 803c33e:	3302      	adds	r3, #2
 803c340:	d1ca      	bne.n	803c2d8 <__ssvfscanf_r+0xa84>
 803c342:	465b      	mov	r3, fp
 803c344:	6862      	ldr	r2, [r4, #4]
 803c346:	2a00      	cmp	r2, #0
 803c348:	dc8e      	bgt.n	803c268 <__ssvfscanf_r+0xa14>
 803c34a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c34c:	60fb      	str	r3, [r7, #12]
 803c34e:	4621      	mov	r1, r4
 803c350:	f7fd f8cb 	bl	80394ea <__ssrefill_r>
 803c354:	68fb      	ldr	r3, [r7, #12]
 803c356:	2800      	cmp	r0, #0
 803c358:	d086      	beq.n	803c268 <__ssvfscanf_r+0xa14>
 803c35a:	2b00      	cmp	r3, #0
 803c35c:	f47f ab3c 	bne.w	803b9d8 <__ssvfscanf_r+0x184>
 803c360:	e7c5      	b.n	803c2ee <__ssvfscanf_r+0xa9a>
 803c362:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803c366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c368:	f813 100b 	ldrb.w	r1, [r3, fp]
 803c36c:	4622      	mov	r2, r4
 803c36e:	f7fd f881 	bl	8039474 <_sungetc_r>
 803c372:	e7b7      	b.n	803c2e4 <__ssvfscanf_r+0xa90>
 803c374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803c376:	445a      	add	r2, fp
 803c378:	633a      	str	r2, [r7, #48]	@ 0x30
 803c37a:	6a3a      	ldr	r2, [r7, #32]
 803c37c:	2a03      	cmp	r2, #3
 803c37e:	d102      	bne.n	803c386 <__ssvfscanf_r+0xb32>
 803c380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 803c382:	2a04      	cmp	r2, #4
 803c384:	d002      	beq.n	803c38c <__ssvfscanf_r+0xb38>
 803c386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803c388:	3a01      	subs	r2, #1
 803c38a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 803c38c:	f1b8 0f00 	cmp.w	r8, #0
 803c390:	d1d8      	bne.n	803c344 <__ssvfscanf_r+0xaf0>
 803c392:	3504      	adds	r5, #4
 803c394:	f1ba 0f00 	cmp.w	sl, #0
 803c398:	d015      	beq.n	803c3c6 <__ssvfscanf_r+0xb72>
 803c39a:	eba5 0b06 	sub.w	fp, r5, r6
 803c39e:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 803c3a2:	d80e      	bhi.n	803c3c2 <__ssvfscanf_r+0xb6e>
 803c3a4:	4630      	mov	r0, r6
 803c3a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 803c3aa:	f001 f869 	bl	803d480 <realloc>
 803c3ae:	4606      	mov	r6, r0
 803c3b0:	2800      	cmp	r0, #0
 803c3b2:	f43f ac0a 	beq.w	803bbca <__ssvfscanf_r+0x376>
 803c3b6:	eb00 050b 	add.w	r5, r0, fp
 803c3ba:	f8ca 0000 	str.w	r0, [sl]
 803c3be:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803c3c2:	4643      	mov	r3, r8
 803c3c4:	e7be      	b.n	803c344 <__ssvfscanf_r+0xaf0>
 803c3c6:	4653      	mov	r3, sl
 803c3c8:	e7bc      	b.n	803c344 <__ssvfscanf_r+0xaf0>
 803c3ca:	f1b8 0f00 	cmp.w	r8, #0
 803c3ce:	d01a      	beq.n	803c406 <__ssvfscanf_r+0xbb2>
 803c3d0:	4e4d      	ldr	r6, [pc, #308]	@ (803c508 <__ssvfscanf_r+0xcb4>)
 803c3d2:	6823      	ldr	r3, [r4, #0]
 803c3d4:	781a      	ldrb	r2, [r3, #0]
 803c3d6:	5cb2      	ldrb	r2, [r6, r2]
 803c3d8:	0711      	lsls	r1, r2, #28
 803c3da:	d411      	bmi.n	803c400 <__ssvfscanf_r+0xbac>
 803c3dc:	3301      	adds	r3, #1
 803c3de:	6862      	ldr	r2, [r4, #4]
 803c3e0:	6023      	str	r3, [r4, #0]
 803c3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c3e4:	f109 0901 	add.w	r9, r9, #1
 803c3e8:	3a01      	subs	r2, #1
 803c3ea:	454b      	cmp	r3, r9
 803c3ec:	6062      	str	r2, [r4, #4]
 803c3ee:	d007      	beq.n	803c400 <__ssvfscanf_r+0xbac>
 803c3f0:	2a00      	cmp	r2, #0
 803c3f2:	dcee      	bgt.n	803c3d2 <__ssvfscanf_r+0xb7e>
 803c3f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c3f6:	4621      	mov	r1, r4
 803c3f8:	f7fd f877 	bl	80394ea <__ssrefill_r>
 803c3fc:	2800      	cmp	r0, #0
 803c3fe:	d0e8      	beq.n	803c3d2 <__ssvfscanf_r+0xb7e>
 803c400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803c402:	444b      	add	r3, r9
 803c404:	e4d3      	b.n	803bdae <__ssvfscanf_r+0x55a>
 803c406:	46a8      	mov	r8, r5
 803c408:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803c40c:	f858 5b04 	ldr.w	r5, [r8], #4
 803c410:	d077      	beq.n	803c502 <__ssvfscanf_r+0xcae>
 803c412:	2d00      	cmp	r5, #0
 803c414:	f43f ab14 	beq.w	803ba40 <__ssvfscanf_r+0x1ec>
 803c418:	2020      	movs	r0, #32
 803c41a:	f7fc f8a7 	bl	803856c <malloc>
 803c41e:	4681      	mov	r9, r0
 803c420:	2800      	cmp	r0, #0
 803c422:	f43f aade 	beq.w	803b9e2 <__ssvfscanf_r+0x18e>
 803c426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c428:	6028      	str	r0, [r5, #0]
 803c42a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 803c42e:	889e      	ldrh	r6, [r3, #4]
 803c430:	45b2      	cmp	sl, r6
 803c432:	d311      	bcc.n	803c458 <__ssvfscanf_r+0xc04>
 803c434:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803c438:	429e      	cmp	r6, r3
 803c43a:	f200 8373 	bhi.w	803cb24 <__ssvfscanf_r+0x12d0>
 803c43e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c440:	3608      	adds	r6, #8
 803c442:	b2b6      	uxth	r6, r6
 803c444:	6818      	ldr	r0, [r3, #0]
 803c446:	00b1      	lsls	r1, r6, #2
 803c448:	f001 f81a 	bl	803d480 <realloc>
 803c44c:	2800      	cmp	r0, #0
 803c44e:	f000 8369 	beq.w	803cb24 <__ssvfscanf_r+0x12d0>
 803c452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c454:	6018      	str	r0, [r3, #0]
 803c456:	809e      	strh	r6, [r3, #4]
 803c458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803c45a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803c45c:	681b      	ldr	r3, [r3, #0]
 803c45e:	f10a 0201 	add.w	r2, sl, #1
 803c462:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 803c466:	80ca      	strh	r2, [r1, #6]
 803c468:	46aa      	mov	sl, r5
 803c46a:	2620      	movs	r6, #32
 803c46c:	464d      	mov	r5, r9
 803c46e:	46a9      	mov	r9, r5
 803c470:	6823      	ldr	r3, [r4, #0]
 803c472:	4925      	ldr	r1, [pc, #148]	@ (803c508 <__ssvfscanf_r+0xcb4>)
 803c474:	781a      	ldrb	r2, [r3, #0]
 803c476:	5c8a      	ldrb	r2, [r1, r2]
 803c478:	0712      	lsls	r2, r2, #28
 803c47a:	d428      	bmi.n	803c4ce <__ssvfscanf_r+0xc7a>
 803c47c:	6862      	ldr	r2, [r4, #4]
 803c47e:	3a01      	subs	r2, #1
 803c480:	6062      	str	r2, [r4, #4]
 803c482:	1c5a      	adds	r2, r3, #1
 803c484:	6022      	str	r2, [r4, #0]
 803c486:	781b      	ldrb	r3, [r3, #0]
 803c488:	f805 3b01 	strb.w	r3, [r5], #1
 803c48c:	f1ba 0f00 	cmp.w	sl, #0
 803c490:	d010      	beq.n	803c4b4 <__ssvfscanf_r+0xc60>
 803c492:	eba5 0b09 	sub.w	fp, r5, r9
 803c496:	45b3      	cmp	fp, r6
 803c498:	d30c      	bcc.n	803c4b4 <__ssvfscanf_r+0xc60>
 803c49a:	0076      	lsls	r6, r6, #1
 803c49c:	4648      	mov	r0, r9
 803c49e:	4631      	mov	r1, r6
 803c4a0:	f000 ffee 	bl	803d480 <realloc>
 803c4a4:	4681      	mov	r9, r0
 803c4a6:	2800      	cmp	r0, #0
 803c4a8:	f43f aa9b 	beq.w	803b9e2 <__ssvfscanf_r+0x18e>
 803c4ac:	eb00 050b 	add.w	r5, r0, fp
 803c4b0:	f8ca 0000 	str.w	r0, [sl]
 803c4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c4b6:	3b01      	subs	r3, #1
 803c4b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803c4ba:	d008      	beq.n	803c4ce <__ssvfscanf_r+0xc7a>
 803c4bc:	6863      	ldr	r3, [r4, #4]
 803c4be:	2b00      	cmp	r3, #0
 803c4c0:	dcd6      	bgt.n	803c470 <__ssvfscanf_r+0xc1c>
 803c4c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c4c4:	4621      	mov	r1, r4
 803c4c6:	f7fd f810 	bl	80394ea <__ssrefill_r>
 803c4ca:	2800      	cmp	r0, #0
 803c4cc:	d0d0      	beq.n	803c470 <__ssvfscanf_r+0xc1c>
 803c4ce:	2300      	movs	r3, #0
 803c4d0:	702b      	strb	r3, [r5, #0]
 803c4d2:	eba5 0509 	sub.w	r5, r5, r9
 803c4d6:	f1ba 0f00 	cmp.w	sl, #0
 803c4da:	d009      	beq.n	803c4f0 <__ssvfscanf_r+0xc9c>
 803c4dc:	1c69      	adds	r1, r5, #1
 803c4de:	428e      	cmp	r6, r1
 803c4e0:	d906      	bls.n	803c4f0 <__ssvfscanf_r+0xc9c>
 803c4e2:	f8da 0000 	ldr.w	r0, [sl]
 803c4e6:	f000 ffcb 	bl	803d480 <realloc>
 803c4ea:	b108      	cbz	r0, 803c4f0 <__ssvfscanf_r+0xc9c>
 803c4ec:	f8ca 0000 	str.w	r0, [sl]
 803c4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803c4f2:	442b      	add	r3, r5
 803c4f4:	633b      	str	r3, [r7, #48]	@ 0x30
 803c4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803c4f8:	3301      	adds	r3, #1
 803c4fa:	627b      	str	r3, [r7, #36]	@ 0x24
 803c4fc:	4645      	mov	r5, r8
 803c4fe:	f7ff b9c4 	b.w	803b88a <__ssvfscanf_r+0x36>
 803c502:	46b2      	mov	sl, r6
 803c504:	e7b3      	b.n	803c46e <__ssvfscanf_r+0xc1a>
 803c506:	bf00      	nop
 803c508:	08045025 	.word	0x08045025
 803c50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c50e:	3b01      	subs	r3, #1
 803c510:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 803c514:	bf81      	itttt	hi
 803c516:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 803c518:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 803c51c:	eb03 090c 	addhi.w	r9, r3, ip
 803c520:	f240 135d 	movwhi	r3, #349	@ 0x15d
 803c524:	bf8c      	ite	hi
 803c526:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 803c528:	f04f 0900 	movls.w	r9, #0
 803c52c:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 803c530:	f04f 0a00 	mov.w	sl, #0
 803c534:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 803c538:	6822      	ldr	r2, [r4, #0]
 803c53a:	7813      	ldrb	r3, [r2, #0]
 803c53c:	2b39      	cmp	r3, #57	@ 0x39
 803c53e:	d80f      	bhi.n	803c560 <__ssvfscanf_r+0xd0c>
 803c540:	2b2a      	cmp	r3, #42	@ 0x2a
 803c542:	d91a      	bls.n	803c57a <__ssvfscanf_r+0xd26>
 803c544:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 803c548:	290e      	cmp	r1, #14
 803c54a:	d816      	bhi.n	803c57a <__ssvfscanf_r+0xd26>
 803c54c:	e8df f001 	tbb	[pc, r1]
 803c550:	15781578 	.word	0x15781578
 803c554:	68683f15 	.word	0x68683f15
 803c558:	68686868 	.word	0x68686868
 803c55c:	7068      	.short	0x7068
 803c55e:	70          	.byte	0x70
 803c55f:	00          	.byte	0x00
 803c560:	2b66      	cmp	r3, #102	@ 0x66
 803c562:	d832      	bhi.n	803c5ca <__ssvfscanf_r+0xd76>
 803c564:	2b60      	cmp	r3, #96	@ 0x60
 803c566:	d803      	bhi.n	803c570 <__ssvfscanf_r+0xd1c>
 803c568:	2b46      	cmp	r3, #70	@ 0x46
 803c56a:	d804      	bhi.n	803c576 <__ssvfscanf_r+0xd22>
 803c56c:	2b40      	cmp	r3, #64	@ 0x40
 803c56e:	d904      	bls.n	803c57a <__ssvfscanf_r+0xd26>
 803c570:	69f9      	ldr	r1, [r7, #28]
 803c572:	290a      	cmp	r1, #10
 803c574:	e062      	b.n	803c63c <__ssvfscanf_r+0xde8>
 803c576:	2b58      	cmp	r3, #88	@ 0x58
 803c578:	d068      	beq.n	803c64c <__ssvfscanf_r+0xdf8>
 803c57a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 803c57e:	d011      	beq.n	803c5a4 <__ssvfscanf_r+0xd50>
 803c580:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 803c584:	4598      	cmp	r8, r3
 803c586:	d908      	bls.n	803c59a <__ssvfscanf_r+0xd46>
 803c588:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 803c58c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c58e:	4622      	mov	r2, r4
 803c590:	f7fc ff70 	bl	8039474 <_sungetc_r>
 803c594:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 803c598:	46c8      	mov	r8, r9
 803c59a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 803c59e:	4598      	cmp	r8, r3
 803c5a0:	f43f aa4e 	beq.w	803ba40 <__ssvfscanf_r+0x1ec>
 803c5a4:	f01b 0210 	ands.w	r2, fp, #16
 803c5a8:	d16c      	bne.n	803c684 <__ssvfscanf_r+0xe30>
 803c5aa:	69fb      	ldr	r3, [r7, #28]
 803c5ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c5ae:	69be      	ldr	r6, [r7, #24]
 803c5b0:	f888 2000 	strb.w	r2, [r8]
 803c5b4:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803c5b8:	47b0      	blx	r6
 803c5ba:	f01b 0f20 	tst.w	fp, #32
 803c5be:	f105 0904 	add.w	r9, r5, #4
 803c5c2:	d056      	beq.n	803c672 <__ssvfscanf_r+0xe1e>
 803c5c4:	682b      	ldr	r3, [r5, #0]
 803c5c6:	6018      	str	r0, [r3, #0]
 803c5c8:	e058      	b.n	803c67c <__ssvfscanf_r+0xe28>
 803c5ca:	2b78      	cmp	r3, #120	@ 0x78
 803c5cc:	e7d4      	b.n	803c578 <__ssvfscanf_r+0xd24>
 803c5ce:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 803c5d2:	d00a      	beq.n	803c5ea <__ssvfscanf_r+0xd96>
 803c5d4:	69f9      	ldr	r1, [r7, #28]
 803c5d6:	b919      	cbnz	r1, 803c5e0 <__ssvfscanf_r+0xd8c>
 803c5d8:	2108      	movs	r1, #8
 803c5da:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 803c5de:	61f9      	str	r1, [r7, #28]
 803c5e0:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 803c5e4:	d004      	beq.n	803c5f0 <__ssvfscanf_r+0xd9c>
 803c5e6:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 803c5ea:	f808 3b01 	strb.w	r3, [r8], #1
 803c5ee:	e00b      	b.n	803c608 <__ssvfscanf_r+0xdb4>
 803c5f0:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 803c5f4:	f1b9 0f00 	cmp.w	r9, #0
 803c5f8:	d004      	beq.n	803c604 <__ssvfscanf_r+0xdb0>
 803c5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c5fc:	3301      	adds	r3, #1
 803c5fe:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 803c602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803c604:	f10a 0a01 	add.w	sl, sl, #1
 803c608:	6863      	ldr	r3, [r4, #4]
 803c60a:	3b01      	subs	r3, #1
 803c60c:	2b00      	cmp	r3, #0
 803c60e:	6063      	str	r3, [r4, #4]
 803c610:	dd28      	ble.n	803c664 <__ssvfscanf_r+0xe10>
 803c612:	3201      	adds	r2, #1
 803c614:	6022      	str	r2, [r4, #0]
 803c616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c618:	3b01      	subs	r3, #1
 803c61a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803c61c:	d18c      	bne.n	803c538 <__ssvfscanf_r+0xce4>
 803c61e:	e7ac      	b.n	803c57a <__ssvfscanf_r+0xd26>
 803c620:	69f8      	ldr	r0, [r7, #28]
 803c622:	499b      	ldr	r1, [pc, #620]	@ (803c890 <__ssvfscanf_r+0x103c>)
 803c624:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 803c628:	61f9      	str	r1, [r7, #28]
 803c62a:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 803c62e:	e7dc      	b.n	803c5ea <__ssvfscanf_r+0xd96>
 803c630:	69f8      	ldr	r0, [r7, #28]
 803c632:	4997      	ldr	r1, [pc, #604]	@ (803c890 <__ssvfscanf_r+0x103c>)
 803c634:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 803c638:	61f9      	str	r1, [r7, #28]
 803c63a:	2908      	cmp	r1, #8
 803c63c:	dcf5      	bgt.n	803c62a <__ssvfscanf_r+0xdd6>
 803c63e:	e79c      	b.n	803c57a <__ssvfscanf_r+0xd26>
 803c640:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 803c644:	d099      	beq.n	803c57a <__ssvfscanf_r+0xd26>
 803c646:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 803c64a:	e7ce      	b.n	803c5ea <__ssvfscanf_r+0xd96>
 803c64c:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 803c650:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 803c654:	d191      	bne.n	803c57a <__ssvfscanf_r+0xd26>
 803c656:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 803c65a:	2110      	movs	r1, #16
 803c65c:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 803c660:	61f9      	str	r1, [r7, #28]
 803c662:	e7c2      	b.n	803c5ea <__ssvfscanf_r+0xd96>
 803c664:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c666:	4621      	mov	r1, r4
 803c668:	f7fc ff3f 	bl	80394ea <__ssrefill_r>
 803c66c:	2800      	cmp	r0, #0
 803c66e:	d0d2      	beq.n	803c616 <__ssvfscanf_r+0xdc2>
 803c670:	e783      	b.n	803c57a <__ssvfscanf_r+0xd26>
 803c672:	f01b 0f08 	tst.w	fp, #8
 803c676:	d00b      	beq.n	803c690 <__ssvfscanf_r+0xe3c>
 803c678:	682b      	ldr	r3, [r5, #0]
 803c67a:	7018      	strb	r0, [r3, #0]
 803c67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803c67e:	3301      	adds	r3, #1
 803c680:	627b      	str	r3, [r7, #36]	@ 0x24
 803c682:	464d      	mov	r5, r9
 803c684:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 803c688:	eba8 0803 	sub.w	r8, r8, r3
 803c68c:	44d0      	add	r8, sl
 803c68e:	e516      	b.n	803c0be <__ssvfscanf_r+0x86a>
 803c690:	f01b 0f04 	tst.w	fp, #4
 803c694:	d002      	beq.n	803c69c <__ssvfscanf_r+0xe48>
 803c696:	682b      	ldr	r3, [r5, #0]
 803c698:	8018      	strh	r0, [r3, #0]
 803c69a:	e7ef      	b.n	803c67c <__ssvfscanf_r+0xe28>
 803c69c:	f01b 0201 	ands.w	r2, fp, #1
 803c6a0:	d190      	bne.n	803c5c4 <__ssvfscanf_r+0xd70>
 803c6a2:	f01b 0f02 	tst.w	fp, #2
 803c6a6:	d08d      	beq.n	803c5c4 <__ssvfscanf_r+0xd70>
 803c6a8:	4b7a      	ldr	r3, [pc, #488]	@ (803c894 <__ssvfscanf_r+0x1040>)
 803c6aa:	69b9      	ldr	r1, [r7, #24]
 803c6ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c6ae:	4299      	cmp	r1, r3
 803c6b0:	69fb      	ldr	r3, [r7, #28]
 803c6b2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803c6b6:	d105      	bne.n	803c6c4 <__ssvfscanf_r+0xe70>
 803c6b8:	f002 fa9a 	bl	803ebf0 <_strtoull_r>
 803c6bc:	682b      	ldr	r3, [r5, #0]
 803c6be:	e9c3 0100 	strd	r0, r1, [r3]
 803c6c2:	e7db      	b.n	803c67c <__ssvfscanf_r+0xe28>
 803c6c4:	f002 f9e8 	bl	803ea98 <_strtoll_r>
 803c6c8:	e7f8      	b.n	803c6bc <__ssvfscanf_r+0xe68>
 803c6ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c6cc:	f7fa fe96 	bl	80373fc <_localeconv_r>
 803c6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c6d2:	6802      	ldr	r2, [r0, #0]
 803c6d4:	3b01      	subs	r3, #1
 803c6d6:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 803c6da:	f04f 0800 	mov.w	r8, #0
 803c6de:	bf88      	it	hi
 803c6e0:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 803c6e2:	f8c7 8010 	str.w	r8, [r7, #16]
 803c6e6:	e9c7 8802 	strd	r8, r8, [r7, #8]
 803c6ea:	bf81      	itttt	hi
 803c6ec:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 803c6f0:	f240 115d 	movwhi	r1, #349	@ 0x15d
 803c6f4:	181b      	addhi	r3, r3, r0
 803c6f6:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 803c6f8:	bf98      	it	ls
 803c6fa:	2300      	movls	r3, #0
 803c6fc:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 803c700:	46c3      	mov	fp, r8
 803c702:	46c2      	mov	sl, r8
 803c704:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 803c708:	6821      	ldr	r1, [r4, #0]
 803c70a:	6079      	str	r1, [r7, #4]
 803c70c:	7808      	ldrb	r0, [r1, #0]
 803c70e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 803c712:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 803c716:	f200 8123 	bhi.w	803c960 <__ssvfscanf_r+0x110c>
 803c71a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 803c71e:	0089      	.short	0x0089
 803c720:	00890121 	.word	0x00890121
 803c724:	01210121 	.word	0x01210121
 803c728:	006f004f 	.word	0x006f004f
 803c72c:	006f006f 	.word	0x006f006f
 803c730:	006f006f 	.word	0x006f006f
 803c734:	006f006f 	.word	0x006f006f
 803c738:	006f006f 	.word	0x006f006f
 803c73c:	01210121 	.word	0x01210121
 803c740:	01210121 	.word	0x01210121
 803c744:	01210121 	.word	0x01210121
 803c748:	00af0121 	.word	0x00af0121
 803c74c:	006d006d 	.word	0x006d006d
 803c750:	011e006d 	.word	0x011e006d
 803c754:	012100ed 	.word	0x012100ed
 803c758:	00d60121 	.word	0x00d60121
 803c75c:	01210121 	.word	0x01210121
 803c760:	01210121 	.word	0x01210121
 803c764:	01210090 	.word	0x01210090
 803c768:	01210104 	.word	0x01210104
 803c76c:	01210121 	.word	0x01210121
 803c770:	012100f8 	.word	0x012100f8
 803c774:	01210121 	.word	0x01210121
 803c778:	00fe0073 	.word	0x00fe0073
 803c77c:	01210121 	.word	0x01210121
 803c780:	01210121 	.word	0x01210121
 803c784:	01210121 	.word	0x01210121
 803c788:	00af0121 	.word	0x00af0121
 803c78c:	006d006d 	.word	0x006d006d
 803c790:	011e006d 	.word	0x011e006d
 803c794:	012100ed 	.word	0x012100ed
 803c798:	00d60121 	.word	0x00d60121
 803c79c:	01210121 	.word	0x01210121
 803c7a0:	01210121 	.word	0x01210121
 803c7a4:	01210090 	.word	0x01210090
 803c7a8:	01210104 	.word	0x01210104
 803c7ac:	01210121 	.word	0x01210121
 803c7b0:	012100f8 	.word	0x012100f8
 803c7b4:	01210121 	.word	0x01210121
 803c7b8:	00fe0073 	.word	0x00fe0073
 803c7bc:	05f1      	lsls	r1, r6, #23
 803c7be:	d51d      	bpl.n	803c7fc <__ssvfscanf_r+0xfa8>
 803c7c0:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 803c7c4:	f10a 0a01 	add.w	sl, sl, #1
 803c7c8:	b11b      	cbz	r3, 803c7d2 <__ssvfscanf_r+0xf7e>
 803c7ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 803c7cc:	3001      	adds	r0, #1
 803c7ce:	3b01      	subs	r3, #1
 803c7d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 803c7d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 803c7d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803c7d6:	3001      	adds	r0, #1
 803c7d8:	6338      	str	r0, [r7, #48]	@ 0x30
 803c7da:	6860      	ldr	r0, [r4, #4]
 803c7dc:	3801      	subs	r0, #1
 803c7de:	3901      	subs	r1, #1
 803c7e0:	2800      	cmp	r0, #0
 803c7e2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 803c7e4:	6060      	str	r0, [r4, #4]
 803c7e6:	f340 80cc 	ble.w	803c982 <__ssvfscanf_r+0x112e>
 803c7ea:	6879      	ldr	r1, [r7, #4]
 803c7ec:	3101      	adds	r1, #1
 803c7ee:	6021      	str	r1, [r4, #0]
 803c7f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803c7f2:	2900      	cmp	r1, #0
 803c7f4:	d188      	bne.n	803c708 <__ssvfscanf_r+0xeb4>
 803c7f6:	e052      	b.n	803c89e <__ssvfscanf_r+0x104a>
 803c7f8:	0531      	lsls	r1, r6, #20
 803c7fa:	d550      	bpl.n	803c89e <__ssvfscanf_r+0x104a>
 803c7fc:	eb1b 0c08 	adds.w	ip, fp, r8
 803c800:	d041      	beq.n	803c886 <__ssvfscanf_r+0x1032>
 803c802:	e04c      	b.n	803c89e <__ssvfscanf_r+0x104a>
 803c804:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 803c808:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 803c80c:	d147      	bne.n	803c89e <__ssvfscanf_r+0x104a>
 803c80e:	f1ba 0f01 	cmp.w	sl, #1
 803c812:	d144      	bne.n	803c89e <__ssvfscanf_r+0x104a>
 803c814:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803c816:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 803c81a:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 803c81e:	3901      	subs	r1, #1
 803c820:	f809 cb01 	strb.w	ip, [r9], #1
 803c824:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 803c828:	62f9      	str	r1, [r7, #44]	@ 0x2c
 803c82a:	f04f 0a00 	mov.w	sl, #0
 803c82e:	e003      	b.n	803c838 <__ssvfscanf_r+0xfe4>
 803c830:	0631      	lsls	r1, r6, #24
 803c832:	d534      	bpl.n	803c89e <__ssvfscanf_r+0x104a>
 803c834:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 803c838:	f809 0b01 	strb.w	r0, [r9], #1
 803c83c:	e7c9      	b.n	803c7d2 <__ssvfscanf_r+0xf7e>
 803c83e:	f1bb 0f00 	cmp.w	fp, #0
 803c842:	d10c      	bne.n	803c85e <__ssvfscanf_r+0x100a>
 803c844:	f1ba 0f00 	cmp.w	sl, #0
 803c848:	d10d      	bne.n	803c866 <__ssvfscanf_r+0x1012>
 803c84a:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803c84e:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 803c852:	d108      	bne.n	803c866 <__ssvfscanf_r+0x1012>
 803c854:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 803c858:	f04f 0b01 	mov.w	fp, #1
 803c85c:	e7ec      	b.n	803c838 <__ssvfscanf_r+0xfe4>
 803c85e:	f1bb 0f02 	cmp.w	fp, #2
 803c862:	f000 8088 	beq.w	803c976 <__ssvfscanf_r+0x1122>
 803c866:	f1b8 0f01 	cmp.w	r8, #1
 803c86a:	d002      	beq.n	803c872 <__ssvfscanf_r+0x101e>
 803c86c:	f1b8 0f04 	cmp.w	r8, #4
 803c870:	d115      	bne.n	803c89e <__ssvfscanf_r+0x104a>
 803c872:	f108 0801 	add.w	r8, r8, #1
 803c876:	fa5f f888 	uxtb.w	r8, r8
 803c87a:	e7dd      	b.n	803c838 <__ssvfscanf_r+0xfe4>
 803c87c:	0531      	lsls	r1, r6, #20
 803c87e:	d50b      	bpl.n	803c898 <__ssvfscanf_r+0x1044>
 803c880:	eb1b 0c08 	adds.w	ip, fp, r8
 803c884:	d108      	bne.n	803c898 <__ssvfscanf_r+0x1044>
 803c886:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 803c88a:	46e0      	mov	r8, ip
 803c88c:	46e3      	mov	fp, ip
 803c88e:	e7d3      	b.n	803c838 <__ssvfscanf_r+0xfe4>
 803c890:	08045204 	.word	0x08045204
 803c894:	0803e5e9 	.word	0x0803e5e9
 803c898:	f1bb 0f01 	cmp.w	fp, #1
 803c89c:	d06e      	beq.n	803c97c <__ssvfscanf_r+0x1128>
 803c89e:	f1ba 0f00 	cmp.w	sl, #0
 803c8a2:	d001      	beq.n	803c8a8 <__ssvfscanf_r+0x1054>
 803c8a4:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 803c8a8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803c8ac:	f1bb 0f01 	cmp.w	fp, #1
 803c8b0:	d873      	bhi.n	803c99a <__ssvfscanf_r+0x1146>
 803c8b2:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803c8b6:	45a9      	cmp	r9, r5
 803c8b8:	f67f a8c2 	bls.w	803ba40 <__ssvfscanf_r+0x1ec>
 803c8bc:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 803c8c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c8c2:	4622      	mov	r2, r4
 803c8c4:	f7fc fdd6 	bl	8039474 <_sungetc_r>
 803c8c8:	e7f5      	b.n	803c8b6 <__ssvfscanf_r+0x1062>
 803c8ca:	f1b8 0f00 	cmp.w	r8, #0
 803c8ce:	d10d      	bne.n	803c8ec <__ssvfscanf_r+0x1098>
 803c8d0:	f1ba 0f00 	cmp.w	sl, #0
 803c8d4:	d1e6      	bne.n	803c8a4 <__ssvfscanf_r+0x1050>
 803c8d6:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803c8da:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 803c8de:	f040 8124 	bne.w	803cb2a <__ssvfscanf_r+0x12d6>
 803c8e2:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 803c8e6:	f04f 0801 	mov.w	r8, #1
 803c8ea:	e7a5      	b.n	803c838 <__ssvfscanf_r+0xfe4>
 803c8ec:	f1b8 0f03 	cmp.w	r8, #3
 803c8f0:	d0bf      	beq.n	803c872 <__ssvfscanf_r+0x101e>
 803c8f2:	f1b8 0f05 	cmp.w	r8, #5
 803c8f6:	e7bb      	b.n	803c870 <__ssvfscanf_r+0x101c>
 803c8f8:	0531      	lsls	r1, r6, #20
 803c8fa:	d502      	bpl.n	803c902 <__ssvfscanf_r+0x10ae>
 803c8fc:	eb1b 0c08 	adds.w	ip, fp, r8
 803c900:	d0c1      	beq.n	803c886 <__ssvfscanf_r+0x1032>
 803c902:	f1b8 0f02 	cmp.w	r8, #2
 803c906:	d1ca      	bne.n	803c89e <__ssvfscanf_r+0x104a>
 803c908:	f04f 0803 	mov.w	r8, #3
 803c90c:	e794      	b.n	803c838 <__ssvfscanf_r+0xfe4>
 803c90e:	f1b8 0f06 	cmp.w	r8, #6
 803c912:	d1c4      	bne.n	803c89e <__ssvfscanf_r+0x104a>
 803c914:	f04f 0807 	mov.w	r8, #7
 803c918:	e78e      	b.n	803c838 <__ssvfscanf_r+0xfe4>
 803c91a:	f1b8 0f07 	cmp.w	r8, #7
 803c91e:	d1be      	bne.n	803c89e <__ssvfscanf_r+0x104a>
 803c920:	f04f 0808 	mov.w	r8, #8
 803c924:	e788      	b.n	803c838 <__ssvfscanf_r+0xfe4>
 803c926:	0531      	lsls	r1, r6, #20
 803c928:	d5b9      	bpl.n	803c89e <__ssvfscanf_r+0x104a>
 803c92a:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 803c92e:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 803c932:	d005      	beq.n	803c940 <__ssvfscanf_r+0x10ec>
 803c934:	0571      	lsls	r1, r6, #21
 803c936:	d5b2      	bpl.n	803c89e <__ssvfscanf_r+0x104a>
 803c938:	f1ba 0f00 	cmp.w	sl, #0
 803c93c:	f000 80f5 	beq.w	803cb2a <__ssvfscanf_r+0x12d6>
 803c940:	05b1      	lsls	r1, r6, #22
 803c942:	bf58      	it	pl
 803c944:	6939      	ldrpl	r1, [r7, #16]
 803c946:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 803c94a:	bf5c      	itt	pl
 803c94c:	ebaa 0101 	subpl.w	r1, sl, r1
 803c950:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 803c954:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 803c958:	e767      	b.n	803c82a <__ssvfscanf_r+0xfd6>
 803c95a:	0531      	lsls	r1, r6, #20
 803c95c:	d5e5      	bpl.n	803c92a <__ssvfscanf_r+0x10d6>
 803c95e:	e74d      	b.n	803c7fc <__ssvfscanf_r+0xfa8>
 803c960:	f892 c000 	ldrb.w	ip, [r2]
 803c964:	4584      	cmp	ip, r0
 803c966:	d19a      	bne.n	803c89e <__ssvfscanf_r+0x104a>
 803c968:	05b1      	lsls	r1, r6, #22
 803c96a:	d598      	bpl.n	803c89e <__ssvfscanf_r+0x104a>
 803c96c:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 803c970:	f8c7 a010 	str.w	sl, [r7, #16]
 803c974:	e760      	b.n	803c838 <__ssvfscanf_r+0xfe4>
 803c976:	f04f 0b03 	mov.w	fp, #3
 803c97a:	e75d      	b.n	803c838 <__ssvfscanf_r+0xfe4>
 803c97c:	f04f 0b02 	mov.w	fp, #2
 803c980:	e75a      	b.n	803c838 <__ssvfscanf_r+0xfe4>
 803c982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c984:	4621      	mov	r1, r4
 803c986:	e9c7 2300 	strd	r2, r3, [r7]
 803c98a:	f7fc fdae 	bl	80394ea <__ssrefill_r>
 803c98e:	e9d7 2300 	ldrd	r2, r3, [r7]
 803c992:	2800      	cmp	r0, #0
 803c994:	f43f af2c 	beq.w	803c7f0 <__ssvfscanf_r+0xf9c>
 803c998:	e781      	b.n	803c89e <__ssvfscanf_r+0x104a>
 803c99a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 803c99e:	2b06      	cmp	r3, #6
 803c9a0:	d827      	bhi.n	803c9f2 <__ssvfscanf_r+0x119e>
 803c9a2:	f1b8 0f02 	cmp.w	r8, #2
 803c9a6:	d834      	bhi.n	803ca12 <__ssvfscanf_r+0x11be>
 803c9a8:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803c9ac:	45a9      	cmp	r9, r5
 803c9ae:	f67f a847 	bls.w	803ba40 <__ssvfscanf_r+0x1ec>
 803c9b2:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 803c9b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c9b8:	4622      	mov	r2, r4
 803c9ba:	f7fc fd5b 	bl	8039474 <_sungetc_r>
 803c9be:	e7f5      	b.n	803c9ac <__ssvfscanf_r+0x1158>
 803c9c0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 803c9c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803c9c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803c9c8:	4622      	mov	r2, r4
 803c9ca:	f7fc fd53 	bl	8039474 <_sungetc_r>
 803c9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803c9d0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803c9d4:	fa5f fb8b 	uxtb.w	fp, fp
 803c9d8:	f1bb 0f02 	cmp.w	fp, #2
 803c9dc:	d1f0      	bne.n	803c9c0 <__ssvfscanf_r+0x116c>
 803c9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803c9e0:	f1a8 0803 	sub.w	r8, r8, #3
 803c9e4:	fa5f f888 	uxtb.w	r8, r8
 803c9e8:	eba3 0308 	sub.w	r3, r3, r8
 803c9ec:	eba9 0908 	sub.w	r9, r9, r8
 803c9f0:	633b      	str	r3, [r7, #48]	@ 0x30
 803c9f2:	05f3      	lsls	r3, r6, #23
 803c9f4:	d52d      	bpl.n	803ca52 <__ssvfscanf_r+0x11fe>
 803c9f6:	0570      	lsls	r0, r6, #21
 803c9f8:	d50e      	bpl.n	803ca18 <__ssvfscanf_r+0x11c4>
 803c9fa:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803c9fe:	45a9      	cmp	r9, r5
 803ca00:	f67f a81e 	bls.w	803ba40 <__ssvfscanf_r+0x1ec>
 803ca04:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 803ca08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803ca0a:	4622      	mov	r2, r4
 803ca0c:	f7fc fd32 	bl	8039474 <_sungetc_r>
 803ca10:	e7f5      	b.n	803c9fe <__ssvfscanf_r+0x11aa>
 803ca12:	46c3      	mov	fp, r8
 803ca14:	464b      	mov	r3, r9
 803ca16:	e7db      	b.n	803c9d0 <__ssvfscanf_r+0x117c>
 803ca18:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 803ca1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803ca1e:	2965      	cmp	r1, #101	@ 0x65
 803ca20:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 803ca24:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 803ca28:	d00c      	beq.n	803ca44 <__ssvfscanf_r+0x11f0>
 803ca2a:	2945      	cmp	r1, #69	@ 0x45
 803ca2c:	d00a      	beq.n	803ca44 <__ssvfscanf_r+0x11f0>
 803ca2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803ca30:	4622      	mov	r2, r4
 803ca32:	f7fc fd1f 	bl	8039474 <_sungetc_r>
 803ca36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803ca38:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 803ca3c:	f1a9 0802 	sub.w	r8, r9, #2
 803ca40:	f1a3 0b02 	sub.w	fp, r3, #2
 803ca44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803ca46:	4622      	mov	r2, r4
 803ca48:	f7fc fd14 	bl	8039474 <_sungetc_r>
 803ca4c:	46c1      	mov	r9, r8
 803ca4e:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 803ca52:	f016 0210 	ands.w	r2, r6, #16
 803ca56:	f47e af18 	bne.w	803b88a <__ssvfscanf_r+0x36>
 803ca5a:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 803ca5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 803ca62:	f889 2000 	strb.w	r2, [r9]
 803ca66:	d119      	bne.n	803ca9c <__ssvfscanf_r+0x1248>
 803ca68:	693b      	ldr	r3, [r7, #16]
 803ca6a:	4553      	cmp	r3, sl
 803ca6c:	eba3 020a 	sub.w	r2, r3, sl
 803ca70:	d121      	bne.n	803cab6 <__ssvfscanf_r+0x1262>
 803ca72:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803ca76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803ca78:	2200      	movs	r2, #0
 803ca7a:	f001 fd41 	bl	803e500 <_strtod_r>
 803ca7e:	07f1      	lsls	r1, r6, #31
 803ca80:	ec59 8b10 	vmov	r8, r9, d0
 803ca84:	f105 0a04 	add.w	sl, r5, #4
 803ca88:	d520      	bpl.n	803cacc <__ssvfscanf_r+0x1278>
 803ca8a:	682b      	ldr	r3, [r5, #0]
 803ca8c:	ed83 0b00 	vstr	d0, [r3]
 803ca90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803ca92:	3301      	adds	r3, #1
 803ca94:	627b      	str	r3, [r7, #36]	@ 0x24
 803ca96:	4655      	mov	r5, sl
 803ca98:	f7fe bef7 	b.w	803b88a <__ssvfscanf_r+0x36>
 803ca9c:	68fb      	ldr	r3, [r7, #12]
 803ca9e:	2b00      	cmp	r3, #0
 803caa0:	d0e7      	beq.n	803ca72 <__ssvfscanf_r+0x121e>
 803caa2:	68b9      	ldr	r1, [r7, #8]
 803caa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803caa6:	230a      	movs	r3, #10
 803caa8:	3101      	adds	r1, #1
 803caaa:	f7f8 fe9d 	bl	80357e8 <_strtol_r>
 803caae:	68fb      	ldr	r3, [r7, #12]
 803cab0:	f8d7 9008 	ldr.w	r9, [r7, #8]
 803cab4:	1ac2      	subs	r2, r0, r3
 803cab6:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 803caba:	4599      	cmp	r9, r3
 803cabc:	bf28      	it	cs
 803cabe:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 803cac2:	491b      	ldr	r1, [pc, #108]	@ (803cb30 <__ssvfscanf_r+0x12dc>)
 803cac4:	4648      	mov	r0, r9
 803cac6:	f7f8 ff49 	bl	803595c <sprintf>
 803caca:	e7d2      	b.n	803ca72 <__ssvfscanf_r+0x121e>
 803cacc:	07b2      	lsls	r2, r6, #30
 803cace:	682d      	ldr	r5, [r5, #0]
 803cad0:	d502      	bpl.n	803cad8 <__ssvfscanf_r+0x1284>
 803cad2:	ed85 0b00 	vstr	d0, [r5]
 803cad6:	e7db      	b.n	803ca90 <__ssvfscanf_r+0x123c>
 803cad8:	4642      	mov	r2, r8
 803cada:	464b      	mov	r3, r9
 803cadc:	4640      	mov	r0, r8
 803cade:	4649      	mov	r1, r9
 803cae0:	f7d4 f83c 	bl	8010b5c <__aeabi_dcmpun>
 803cae4:	b128      	cbz	r0, 803caf2 <__ssvfscanf_r+0x129e>
 803cae6:	4813      	ldr	r0, [pc, #76]	@ (803cb34 <__ssvfscanf_r+0x12e0>)
 803cae8:	f002 f8f6 	bl	803ecd8 <nanf>
 803caec:	ed85 0a00 	vstr	s0, [r5]
 803caf0:	e7ce      	b.n	803ca90 <__ssvfscanf_r+0x123c>
 803caf2:	4640      	mov	r0, r8
 803caf4:	4649      	mov	r1, r9
 803caf6:	f7d4 f88f 	bl	8010c18 <__aeabi_d2f>
 803cafa:	6028      	str	r0, [r5, #0]
 803cafc:	e7c8      	b.n	803ca90 <__ssvfscanf_r+0x123c>
 803cafe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803cb02:	6818      	ldr	r0, [r3, #0]
 803cb04:	f7fb fd3a 	bl	803857c <free>
 803cb08:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803cb0c:	3401      	adds	r4, #1
 803cb0e:	601e      	str	r6, [r3, #0]
 803cb10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803cb12:	681d      	ldr	r5, [r3, #0]
 803cb14:	88db      	ldrh	r3, [r3, #6]
 803cb16:	42a3      	cmp	r3, r4
 803cb18:	dcf1      	bgt.n	803cafe <__ssvfscanf_r+0x12aa>
 803cb1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803cb1e:	627b      	str	r3, [r7, #36]	@ 0x24
 803cb20:	f7ff b85c 	b.w	803bbdc <__ssvfscanf_r+0x388>
 803cb24:	2400      	movs	r4, #0
 803cb26:	4626      	mov	r6, r4
 803cb28:	e7f2      	b.n	803cb10 <__ssvfscanf_r+0x12bc>
 803cb2a:	f04f 0a00 	mov.w	sl, #0
 803cb2e:	e6bb      	b.n	803c8a8 <__ssvfscanf_r+0x1054>
 803cb30:	080451fe 	.word	0x080451fe
 803cb34:	08044c67 	.word	0x08044c67

0803cb38 <_putc_r>:
 803cb38:	b570      	push	{r4, r5, r6, lr}
 803cb3a:	460d      	mov	r5, r1
 803cb3c:	4614      	mov	r4, r2
 803cb3e:	4606      	mov	r6, r0
 803cb40:	b118      	cbz	r0, 803cb4a <_putc_r+0x12>
 803cb42:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803cb44:	b90b      	cbnz	r3, 803cb4a <_putc_r+0x12>
 803cb46:	f7f9 f825 	bl	8035b94 <__sinit>
 803cb4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803cb4c:	07d8      	lsls	r0, r3, #31
 803cb4e:	d405      	bmi.n	803cb5c <_putc_r+0x24>
 803cb50:	89a3      	ldrh	r3, [r4, #12]
 803cb52:	0599      	lsls	r1, r3, #22
 803cb54:	d402      	bmi.n	803cb5c <_putc_r+0x24>
 803cb56:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803cb58:	f7fa fcfb 	bl	8037552 <__retarget_lock_acquire_recursive>
 803cb5c:	68a3      	ldr	r3, [r4, #8]
 803cb5e:	3b01      	subs	r3, #1
 803cb60:	2b00      	cmp	r3, #0
 803cb62:	60a3      	str	r3, [r4, #8]
 803cb64:	da05      	bge.n	803cb72 <_putc_r+0x3a>
 803cb66:	69a2      	ldr	r2, [r4, #24]
 803cb68:	4293      	cmp	r3, r2
 803cb6a:	db12      	blt.n	803cb92 <_putc_r+0x5a>
 803cb6c:	b2eb      	uxtb	r3, r5
 803cb6e:	2b0a      	cmp	r3, #10
 803cb70:	d00f      	beq.n	803cb92 <_putc_r+0x5a>
 803cb72:	6823      	ldr	r3, [r4, #0]
 803cb74:	1c5a      	adds	r2, r3, #1
 803cb76:	6022      	str	r2, [r4, #0]
 803cb78:	701d      	strb	r5, [r3, #0]
 803cb7a:	b2ed      	uxtb	r5, r5
 803cb7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803cb7e:	07da      	lsls	r2, r3, #31
 803cb80:	d405      	bmi.n	803cb8e <_putc_r+0x56>
 803cb82:	89a3      	ldrh	r3, [r4, #12]
 803cb84:	059b      	lsls	r3, r3, #22
 803cb86:	d402      	bmi.n	803cb8e <_putc_r+0x56>
 803cb88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803cb8a:	f7fa fce4 	bl	8037556 <__retarget_lock_release_recursive>
 803cb8e:	4628      	mov	r0, r5
 803cb90:	bd70      	pop	{r4, r5, r6, pc}
 803cb92:	4629      	mov	r1, r5
 803cb94:	4622      	mov	r2, r4
 803cb96:	4630      	mov	r0, r6
 803cb98:	f001 fd79 	bl	803e68e <__swbuf_r>
 803cb9c:	4605      	mov	r5, r0
 803cb9e:	e7ed      	b.n	803cb7c <_putc_r+0x44>

0803cba0 <__malloc_lock>:
 803cba0:	4801      	ldr	r0, [pc, #4]	@ (803cba8 <__malloc_lock+0x8>)
 803cba2:	f7fa bcd6 	b.w	8037552 <__retarget_lock_acquire_recursive>
 803cba6:	bf00      	nop
 803cba8:	20018346 	.word	0x20018346

0803cbac <__malloc_unlock>:
 803cbac:	4801      	ldr	r0, [pc, #4]	@ (803cbb4 <__malloc_unlock+0x8>)
 803cbae:	f7fa bcd2 	b.w	8037556 <__retarget_lock_release_recursive>
 803cbb2:	bf00      	nop
 803cbb4:	20018346 	.word	0x20018346

0803cbb8 <_Balloc>:
 803cbb8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 803cbba:	b570      	push	{r4, r5, r6, lr}
 803cbbc:	4605      	mov	r5, r0
 803cbbe:	460c      	mov	r4, r1
 803cbc0:	b17b      	cbz	r3, 803cbe2 <_Balloc+0x2a>
 803cbc2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 803cbc4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 803cbc8:	b9a0      	cbnz	r0, 803cbf4 <_Balloc+0x3c>
 803cbca:	2101      	movs	r1, #1
 803cbcc:	fa01 f604 	lsl.w	r6, r1, r4
 803cbd0:	1d72      	adds	r2, r6, #5
 803cbd2:	0092      	lsls	r2, r2, #2
 803cbd4:	4628      	mov	r0, r5
 803cbd6:	f002 f885 	bl	803ece4 <_calloc_r>
 803cbda:	b148      	cbz	r0, 803cbf0 <_Balloc+0x38>
 803cbdc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 803cbe0:	e00b      	b.n	803cbfa <_Balloc+0x42>
 803cbe2:	2221      	movs	r2, #33	@ 0x21
 803cbe4:	2104      	movs	r1, #4
 803cbe6:	f002 f87d 	bl	803ece4 <_calloc_r>
 803cbea:	6468      	str	r0, [r5, #68]	@ 0x44
 803cbec:	2800      	cmp	r0, #0
 803cbee:	d1e8      	bne.n	803cbc2 <_Balloc+0xa>
 803cbf0:	2000      	movs	r0, #0
 803cbf2:	bd70      	pop	{r4, r5, r6, pc}
 803cbf4:	6802      	ldr	r2, [r0, #0]
 803cbf6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 803cbfa:	2300      	movs	r3, #0
 803cbfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 803cc00:	e7f7      	b.n	803cbf2 <_Balloc+0x3a>

0803cc02 <_Bfree>:
 803cc02:	b131      	cbz	r1, 803cc12 <_Bfree+0x10>
 803cc04:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 803cc06:	684a      	ldr	r2, [r1, #4]
 803cc08:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 803cc0c:	6008      	str	r0, [r1, #0]
 803cc0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 803cc12:	4770      	bx	lr

0803cc14 <__multadd>:
 803cc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803cc18:	690d      	ldr	r5, [r1, #16]
 803cc1a:	4607      	mov	r7, r0
 803cc1c:	460c      	mov	r4, r1
 803cc1e:	461e      	mov	r6, r3
 803cc20:	f101 0c14 	add.w	ip, r1, #20
 803cc24:	2000      	movs	r0, #0
 803cc26:	f8dc 3000 	ldr.w	r3, [ip]
 803cc2a:	b299      	uxth	r1, r3
 803cc2c:	fb02 6101 	mla	r1, r2, r1, r6
 803cc30:	0c1e      	lsrs	r6, r3, #16
 803cc32:	0c0b      	lsrs	r3, r1, #16
 803cc34:	fb02 3306 	mla	r3, r2, r6, r3
 803cc38:	b289      	uxth	r1, r1
 803cc3a:	3001      	adds	r0, #1
 803cc3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 803cc40:	4285      	cmp	r5, r0
 803cc42:	f84c 1b04 	str.w	r1, [ip], #4
 803cc46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 803cc4a:	dcec      	bgt.n	803cc26 <__multadd+0x12>
 803cc4c:	b30e      	cbz	r6, 803cc92 <__multadd+0x7e>
 803cc4e:	68a3      	ldr	r3, [r4, #8]
 803cc50:	42ab      	cmp	r3, r5
 803cc52:	dc19      	bgt.n	803cc88 <__multadd+0x74>
 803cc54:	6861      	ldr	r1, [r4, #4]
 803cc56:	4638      	mov	r0, r7
 803cc58:	3101      	adds	r1, #1
 803cc5a:	f7ff ffad 	bl	803cbb8 <_Balloc>
 803cc5e:	4680      	mov	r8, r0
 803cc60:	b928      	cbnz	r0, 803cc6e <__multadd+0x5a>
 803cc62:	4602      	mov	r2, r0
 803cc64:	4b0c      	ldr	r3, [pc, #48]	@ (803cc98 <__multadd+0x84>)
 803cc66:	480d      	ldr	r0, [pc, #52]	@ (803cc9c <__multadd+0x88>)
 803cc68:	21ba      	movs	r1, #186	@ 0xba
 803cc6a:	f7f6 fce5 	bl	8033638 <__assert_func>
 803cc6e:	6922      	ldr	r2, [r4, #16]
 803cc70:	3202      	adds	r2, #2
 803cc72:	f104 010c 	add.w	r1, r4, #12
 803cc76:	0092      	lsls	r2, r2, #2
 803cc78:	300c      	adds	r0, #12
 803cc7a:	f7fa fc6d 	bl	8037558 <memcpy>
 803cc7e:	4621      	mov	r1, r4
 803cc80:	4638      	mov	r0, r7
 803cc82:	f7ff ffbe 	bl	803cc02 <_Bfree>
 803cc86:	4644      	mov	r4, r8
 803cc88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 803cc8c:	3501      	adds	r5, #1
 803cc8e:	615e      	str	r6, [r3, #20]
 803cc90:	6125      	str	r5, [r4, #16]
 803cc92:	4620      	mov	r0, r4
 803cc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803cc98:	08045132 	.word	0x08045132
 803cc9c:	08045226 	.word	0x08045226

0803cca0 <__s2b>:
 803cca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803cca4:	460c      	mov	r4, r1
 803cca6:	4615      	mov	r5, r2
 803cca8:	461f      	mov	r7, r3
 803ccaa:	2209      	movs	r2, #9
 803ccac:	3308      	adds	r3, #8
 803ccae:	4606      	mov	r6, r0
 803ccb0:	fb93 f3f2 	sdiv	r3, r3, r2
 803ccb4:	2100      	movs	r1, #0
 803ccb6:	2201      	movs	r2, #1
 803ccb8:	429a      	cmp	r2, r3
 803ccba:	db09      	blt.n	803ccd0 <__s2b+0x30>
 803ccbc:	4630      	mov	r0, r6
 803ccbe:	f7ff ff7b 	bl	803cbb8 <_Balloc>
 803ccc2:	b940      	cbnz	r0, 803ccd6 <__s2b+0x36>
 803ccc4:	4602      	mov	r2, r0
 803ccc6:	4b19      	ldr	r3, [pc, #100]	@ (803cd2c <__s2b+0x8c>)
 803ccc8:	4819      	ldr	r0, [pc, #100]	@ (803cd30 <__s2b+0x90>)
 803ccca:	21d3      	movs	r1, #211	@ 0xd3
 803cccc:	f7f6 fcb4 	bl	8033638 <__assert_func>
 803ccd0:	0052      	lsls	r2, r2, #1
 803ccd2:	3101      	adds	r1, #1
 803ccd4:	e7f0      	b.n	803ccb8 <__s2b+0x18>
 803ccd6:	9b08      	ldr	r3, [sp, #32]
 803ccd8:	6143      	str	r3, [r0, #20]
 803ccda:	2d09      	cmp	r5, #9
 803ccdc:	f04f 0301 	mov.w	r3, #1
 803cce0:	6103      	str	r3, [r0, #16]
 803cce2:	dd16      	ble.n	803cd12 <__s2b+0x72>
 803cce4:	f104 0909 	add.w	r9, r4, #9
 803cce8:	46c8      	mov	r8, r9
 803ccea:	442c      	add	r4, r5
 803ccec:	f818 3b01 	ldrb.w	r3, [r8], #1
 803ccf0:	4601      	mov	r1, r0
 803ccf2:	3b30      	subs	r3, #48	@ 0x30
 803ccf4:	220a      	movs	r2, #10
 803ccf6:	4630      	mov	r0, r6
 803ccf8:	f7ff ff8c 	bl	803cc14 <__multadd>
 803ccfc:	45a0      	cmp	r8, r4
 803ccfe:	d1f5      	bne.n	803ccec <__s2b+0x4c>
 803cd00:	f1a5 0408 	sub.w	r4, r5, #8
 803cd04:	444c      	add	r4, r9
 803cd06:	1b2d      	subs	r5, r5, r4
 803cd08:	1963      	adds	r3, r4, r5
 803cd0a:	42bb      	cmp	r3, r7
 803cd0c:	db04      	blt.n	803cd18 <__s2b+0x78>
 803cd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803cd12:	340a      	adds	r4, #10
 803cd14:	2509      	movs	r5, #9
 803cd16:	e7f6      	b.n	803cd06 <__s2b+0x66>
 803cd18:	f814 3b01 	ldrb.w	r3, [r4], #1
 803cd1c:	4601      	mov	r1, r0
 803cd1e:	3b30      	subs	r3, #48	@ 0x30
 803cd20:	220a      	movs	r2, #10
 803cd22:	4630      	mov	r0, r6
 803cd24:	f7ff ff76 	bl	803cc14 <__multadd>
 803cd28:	e7ee      	b.n	803cd08 <__s2b+0x68>
 803cd2a:	bf00      	nop
 803cd2c:	08045132 	.word	0x08045132
 803cd30:	08045226 	.word	0x08045226

0803cd34 <__hi0bits>:
 803cd34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 803cd38:	4603      	mov	r3, r0
 803cd3a:	bf36      	itet	cc
 803cd3c:	0403      	lslcc	r3, r0, #16
 803cd3e:	2000      	movcs	r0, #0
 803cd40:	2010      	movcc	r0, #16
 803cd42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 803cd46:	bf3c      	itt	cc
 803cd48:	021b      	lslcc	r3, r3, #8
 803cd4a:	3008      	addcc	r0, #8
 803cd4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 803cd50:	bf3c      	itt	cc
 803cd52:	011b      	lslcc	r3, r3, #4
 803cd54:	3004      	addcc	r0, #4
 803cd56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803cd5a:	bf3c      	itt	cc
 803cd5c:	009b      	lslcc	r3, r3, #2
 803cd5e:	3002      	addcc	r0, #2
 803cd60:	2b00      	cmp	r3, #0
 803cd62:	db05      	blt.n	803cd70 <__hi0bits+0x3c>
 803cd64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 803cd68:	f100 0001 	add.w	r0, r0, #1
 803cd6c:	bf08      	it	eq
 803cd6e:	2020      	moveq	r0, #32
 803cd70:	4770      	bx	lr

0803cd72 <__lo0bits>:
 803cd72:	6803      	ldr	r3, [r0, #0]
 803cd74:	4602      	mov	r2, r0
 803cd76:	f013 0007 	ands.w	r0, r3, #7
 803cd7a:	d00b      	beq.n	803cd94 <__lo0bits+0x22>
 803cd7c:	07d9      	lsls	r1, r3, #31
 803cd7e:	d421      	bmi.n	803cdc4 <__lo0bits+0x52>
 803cd80:	0798      	lsls	r0, r3, #30
 803cd82:	bf49      	itett	mi
 803cd84:	085b      	lsrmi	r3, r3, #1
 803cd86:	089b      	lsrpl	r3, r3, #2
 803cd88:	2001      	movmi	r0, #1
 803cd8a:	6013      	strmi	r3, [r2, #0]
 803cd8c:	bf5c      	itt	pl
 803cd8e:	6013      	strpl	r3, [r2, #0]
 803cd90:	2002      	movpl	r0, #2
 803cd92:	4770      	bx	lr
 803cd94:	b299      	uxth	r1, r3
 803cd96:	b909      	cbnz	r1, 803cd9c <__lo0bits+0x2a>
 803cd98:	0c1b      	lsrs	r3, r3, #16
 803cd9a:	2010      	movs	r0, #16
 803cd9c:	b2d9      	uxtb	r1, r3
 803cd9e:	b909      	cbnz	r1, 803cda4 <__lo0bits+0x32>
 803cda0:	3008      	adds	r0, #8
 803cda2:	0a1b      	lsrs	r3, r3, #8
 803cda4:	0719      	lsls	r1, r3, #28
 803cda6:	bf04      	itt	eq
 803cda8:	091b      	lsreq	r3, r3, #4
 803cdaa:	3004      	addeq	r0, #4
 803cdac:	0799      	lsls	r1, r3, #30
 803cdae:	bf04      	itt	eq
 803cdb0:	089b      	lsreq	r3, r3, #2
 803cdb2:	3002      	addeq	r0, #2
 803cdb4:	07d9      	lsls	r1, r3, #31
 803cdb6:	d403      	bmi.n	803cdc0 <__lo0bits+0x4e>
 803cdb8:	085b      	lsrs	r3, r3, #1
 803cdba:	f100 0001 	add.w	r0, r0, #1
 803cdbe:	d003      	beq.n	803cdc8 <__lo0bits+0x56>
 803cdc0:	6013      	str	r3, [r2, #0]
 803cdc2:	4770      	bx	lr
 803cdc4:	2000      	movs	r0, #0
 803cdc6:	4770      	bx	lr
 803cdc8:	2020      	movs	r0, #32
 803cdca:	4770      	bx	lr

0803cdcc <__i2b>:
 803cdcc:	b510      	push	{r4, lr}
 803cdce:	460c      	mov	r4, r1
 803cdd0:	2101      	movs	r1, #1
 803cdd2:	f7ff fef1 	bl	803cbb8 <_Balloc>
 803cdd6:	4602      	mov	r2, r0
 803cdd8:	b928      	cbnz	r0, 803cde6 <__i2b+0x1a>
 803cdda:	4b05      	ldr	r3, [pc, #20]	@ (803cdf0 <__i2b+0x24>)
 803cddc:	4805      	ldr	r0, [pc, #20]	@ (803cdf4 <__i2b+0x28>)
 803cdde:	f240 1145 	movw	r1, #325	@ 0x145
 803cde2:	f7f6 fc29 	bl	8033638 <__assert_func>
 803cde6:	2301      	movs	r3, #1
 803cde8:	6144      	str	r4, [r0, #20]
 803cdea:	6103      	str	r3, [r0, #16]
 803cdec:	bd10      	pop	{r4, pc}
 803cdee:	bf00      	nop
 803cdf0:	08045132 	.word	0x08045132
 803cdf4:	08045226 	.word	0x08045226

0803cdf8 <__multiply>:
 803cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803cdfc:	4614      	mov	r4, r2
 803cdfe:	690a      	ldr	r2, [r1, #16]
 803ce00:	6923      	ldr	r3, [r4, #16]
 803ce02:	429a      	cmp	r2, r3
 803ce04:	bfa8      	it	ge
 803ce06:	4623      	movge	r3, r4
 803ce08:	460f      	mov	r7, r1
 803ce0a:	bfa4      	itt	ge
 803ce0c:	460c      	movge	r4, r1
 803ce0e:	461f      	movge	r7, r3
 803ce10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 803ce14:	f8d7 9010 	ldr.w	r9, [r7, #16]
 803ce18:	68a3      	ldr	r3, [r4, #8]
 803ce1a:	6861      	ldr	r1, [r4, #4]
 803ce1c:	eb0a 0609 	add.w	r6, sl, r9
 803ce20:	42b3      	cmp	r3, r6
 803ce22:	b085      	sub	sp, #20
 803ce24:	bfb8      	it	lt
 803ce26:	3101      	addlt	r1, #1
 803ce28:	f7ff fec6 	bl	803cbb8 <_Balloc>
 803ce2c:	b930      	cbnz	r0, 803ce3c <__multiply+0x44>
 803ce2e:	4602      	mov	r2, r0
 803ce30:	4b44      	ldr	r3, [pc, #272]	@ (803cf44 <__multiply+0x14c>)
 803ce32:	4845      	ldr	r0, [pc, #276]	@ (803cf48 <__multiply+0x150>)
 803ce34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 803ce38:	f7f6 fbfe 	bl	8033638 <__assert_func>
 803ce3c:	f100 0514 	add.w	r5, r0, #20
 803ce40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 803ce44:	462b      	mov	r3, r5
 803ce46:	2200      	movs	r2, #0
 803ce48:	4543      	cmp	r3, r8
 803ce4a:	d321      	bcc.n	803ce90 <__multiply+0x98>
 803ce4c:	f107 0114 	add.w	r1, r7, #20
 803ce50:	f104 0214 	add.w	r2, r4, #20
 803ce54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 803ce58:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 803ce5c:	9302      	str	r3, [sp, #8]
 803ce5e:	1b13      	subs	r3, r2, r4
 803ce60:	3b15      	subs	r3, #21
 803ce62:	f023 0303 	bic.w	r3, r3, #3
 803ce66:	3304      	adds	r3, #4
 803ce68:	f104 0715 	add.w	r7, r4, #21
 803ce6c:	42ba      	cmp	r2, r7
 803ce6e:	bf38      	it	cc
 803ce70:	2304      	movcc	r3, #4
 803ce72:	9301      	str	r3, [sp, #4]
 803ce74:	9b02      	ldr	r3, [sp, #8]
 803ce76:	9103      	str	r1, [sp, #12]
 803ce78:	428b      	cmp	r3, r1
 803ce7a:	d80c      	bhi.n	803ce96 <__multiply+0x9e>
 803ce7c:	2e00      	cmp	r6, #0
 803ce7e:	dd03      	ble.n	803ce88 <__multiply+0x90>
 803ce80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 803ce84:	2b00      	cmp	r3, #0
 803ce86:	d05b      	beq.n	803cf40 <__multiply+0x148>
 803ce88:	6106      	str	r6, [r0, #16]
 803ce8a:	b005      	add	sp, #20
 803ce8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ce90:	f843 2b04 	str.w	r2, [r3], #4
 803ce94:	e7d8      	b.n	803ce48 <__multiply+0x50>
 803ce96:	f8b1 a000 	ldrh.w	sl, [r1]
 803ce9a:	f1ba 0f00 	cmp.w	sl, #0
 803ce9e:	d024      	beq.n	803ceea <__multiply+0xf2>
 803cea0:	f104 0e14 	add.w	lr, r4, #20
 803cea4:	46a9      	mov	r9, r5
 803cea6:	f04f 0c00 	mov.w	ip, #0
 803ceaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 803ceae:	f8d9 3000 	ldr.w	r3, [r9]
 803ceb2:	fa1f fb87 	uxth.w	fp, r7
 803ceb6:	b29b      	uxth	r3, r3
 803ceb8:	fb0a 330b 	mla	r3, sl, fp, r3
 803cebc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 803cec0:	f8d9 7000 	ldr.w	r7, [r9]
 803cec4:	4463      	add	r3, ip
 803cec6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 803ceca:	fb0a c70b 	mla	r7, sl, fp, ip
 803cece:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 803ced2:	b29b      	uxth	r3, r3
 803ced4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 803ced8:	4572      	cmp	r2, lr
 803ceda:	f849 3b04 	str.w	r3, [r9], #4
 803cede:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 803cee2:	d8e2      	bhi.n	803ceaa <__multiply+0xb2>
 803cee4:	9b01      	ldr	r3, [sp, #4]
 803cee6:	f845 c003 	str.w	ip, [r5, r3]
 803ceea:	9b03      	ldr	r3, [sp, #12]
 803ceec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 803cef0:	3104      	adds	r1, #4
 803cef2:	f1b9 0f00 	cmp.w	r9, #0
 803cef6:	d021      	beq.n	803cf3c <__multiply+0x144>
 803cef8:	682b      	ldr	r3, [r5, #0]
 803cefa:	f104 0c14 	add.w	ip, r4, #20
 803cefe:	46ae      	mov	lr, r5
 803cf00:	f04f 0a00 	mov.w	sl, #0
 803cf04:	f8bc b000 	ldrh.w	fp, [ip]
 803cf08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 803cf0c:	fb09 770b 	mla	r7, r9, fp, r7
 803cf10:	4457      	add	r7, sl
 803cf12:	b29b      	uxth	r3, r3
 803cf14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 803cf18:	f84e 3b04 	str.w	r3, [lr], #4
 803cf1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 803cf20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 803cf24:	f8be 3000 	ldrh.w	r3, [lr]
 803cf28:	fb09 330a 	mla	r3, r9, sl, r3
 803cf2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 803cf30:	4562      	cmp	r2, ip
 803cf32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 803cf36:	d8e5      	bhi.n	803cf04 <__multiply+0x10c>
 803cf38:	9f01      	ldr	r7, [sp, #4]
 803cf3a:	51eb      	str	r3, [r5, r7]
 803cf3c:	3504      	adds	r5, #4
 803cf3e:	e799      	b.n	803ce74 <__multiply+0x7c>
 803cf40:	3e01      	subs	r6, #1
 803cf42:	e79b      	b.n	803ce7c <__multiply+0x84>
 803cf44:	08045132 	.word	0x08045132
 803cf48:	08045226 	.word	0x08045226

0803cf4c <__pow5mult>:
 803cf4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803cf50:	4615      	mov	r5, r2
 803cf52:	f012 0203 	ands.w	r2, r2, #3
 803cf56:	4607      	mov	r7, r0
 803cf58:	460e      	mov	r6, r1
 803cf5a:	d007      	beq.n	803cf6c <__pow5mult+0x20>
 803cf5c:	4c1a      	ldr	r4, [pc, #104]	@ (803cfc8 <__pow5mult+0x7c>)
 803cf5e:	3a01      	subs	r2, #1
 803cf60:	2300      	movs	r3, #0
 803cf62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 803cf66:	f7ff fe55 	bl	803cc14 <__multadd>
 803cf6a:	4606      	mov	r6, r0
 803cf6c:	10ad      	asrs	r5, r5, #2
 803cf6e:	d027      	beq.n	803cfc0 <__pow5mult+0x74>
 803cf70:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 803cf72:	b944      	cbnz	r4, 803cf86 <__pow5mult+0x3a>
 803cf74:	f240 2171 	movw	r1, #625	@ 0x271
 803cf78:	4638      	mov	r0, r7
 803cf7a:	f7ff ff27 	bl	803cdcc <__i2b>
 803cf7e:	2300      	movs	r3, #0
 803cf80:	6438      	str	r0, [r7, #64]	@ 0x40
 803cf82:	4604      	mov	r4, r0
 803cf84:	6003      	str	r3, [r0, #0]
 803cf86:	f04f 0900 	mov.w	r9, #0
 803cf8a:	07eb      	lsls	r3, r5, #31
 803cf8c:	d50a      	bpl.n	803cfa4 <__pow5mult+0x58>
 803cf8e:	4631      	mov	r1, r6
 803cf90:	4622      	mov	r2, r4
 803cf92:	4638      	mov	r0, r7
 803cf94:	f7ff ff30 	bl	803cdf8 <__multiply>
 803cf98:	4631      	mov	r1, r6
 803cf9a:	4680      	mov	r8, r0
 803cf9c:	4638      	mov	r0, r7
 803cf9e:	f7ff fe30 	bl	803cc02 <_Bfree>
 803cfa2:	4646      	mov	r6, r8
 803cfa4:	106d      	asrs	r5, r5, #1
 803cfa6:	d00b      	beq.n	803cfc0 <__pow5mult+0x74>
 803cfa8:	6820      	ldr	r0, [r4, #0]
 803cfaa:	b938      	cbnz	r0, 803cfbc <__pow5mult+0x70>
 803cfac:	4622      	mov	r2, r4
 803cfae:	4621      	mov	r1, r4
 803cfb0:	4638      	mov	r0, r7
 803cfb2:	f7ff ff21 	bl	803cdf8 <__multiply>
 803cfb6:	6020      	str	r0, [r4, #0]
 803cfb8:	f8c0 9000 	str.w	r9, [r0]
 803cfbc:	4604      	mov	r4, r0
 803cfbe:	e7e4      	b.n	803cf8a <__pow5mult+0x3e>
 803cfc0:	4630      	mov	r0, r6
 803cfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803cfc6:	bf00      	nop
 803cfc8:	08045280 	.word	0x08045280

0803cfcc <__lshift>:
 803cfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803cfd0:	460c      	mov	r4, r1
 803cfd2:	6849      	ldr	r1, [r1, #4]
 803cfd4:	6923      	ldr	r3, [r4, #16]
 803cfd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 803cfda:	68a3      	ldr	r3, [r4, #8]
 803cfdc:	4607      	mov	r7, r0
 803cfde:	4691      	mov	r9, r2
 803cfe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 803cfe4:	f108 0601 	add.w	r6, r8, #1
 803cfe8:	42b3      	cmp	r3, r6
 803cfea:	db0b      	blt.n	803d004 <__lshift+0x38>
 803cfec:	4638      	mov	r0, r7
 803cfee:	f7ff fde3 	bl	803cbb8 <_Balloc>
 803cff2:	4605      	mov	r5, r0
 803cff4:	b948      	cbnz	r0, 803d00a <__lshift+0x3e>
 803cff6:	4602      	mov	r2, r0
 803cff8:	4b28      	ldr	r3, [pc, #160]	@ (803d09c <__lshift+0xd0>)
 803cffa:	4829      	ldr	r0, [pc, #164]	@ (803d0a0 <__lshift+0xd4>)
 803cffc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 803d000:	f7f6 fb1a 	bl	8033638 <__assert_func>
 803d004:	3101      	adds	r1, #1
 803d006:	005b      	lsls	r3, r3, #1
 803d008:	e7ee      	b.n	803cfe8 <__lshift+0x1c>
 803d00a:	2300      	movs	r3, #0
 803d00c:	f100 0114 	add.w	r1, r0, #20
 803d010:	f100 0210 	add.w	r2, r0, #16
 803d014:	4618      	mov	r0, r3
 803d016:	4553      	cmp	r3, sl
 803d018:	db33      	blt.n	803d082 <__lshift+0xb6>
 803d01a:	6920      	ldr	r0, [r4, #16]
 803d01c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 803d020:	f104 0314 	add.w	r3, r4, #20
 803d024:	f019 091f 	ands.w	r9, r9, #31
 803d028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 803d02c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 803d030:	d02b      	beq.n	803d08a <__lshift+0xbe>
 803d032:	f1c9 0e20 	rsb	lr, r9, #32
 803d036:	468a      	mov	sl, r1
 803d038:	2200      	movs	r2, #0
 803d03a:	6818      	ldr	r0, [r3, #0]
 803d03c:	fa00 f009 	lsl.w	r0, r0, r9
 803d040:	4310      	orrs	r0, r2
 803d042:	f84a 0b04 	str.w	r0, [sl], #4
 803d046:	f853 2b04 	ldr.w	r2, [r3], #4
 803d04a:	459c      	cmp	ip, r3
 803d04c:	fa22 f20e 	lsr.w	r2, r2, lr
 803d050:	d8f3      	bhi.n	803d03a <__lshift+0x6e>
 803d052:	ebac 0304 	sub.w	r3, ip, r4
 803d056:	3b15      	subs	r3, #21
 803d058:	f023 0303 	bic.w	r3, r3, #3
 803d05c:	3304      	adds	r3, #4
 803d05e:	f104 0015 	add.w	r0, r4, #21
 803d062:	4584      	cmp	ip, r0
 803d064:	bf38      	it	cc
 803d066:	2304      	movcc	r3, #4
 803d068:	50ca      	str	r2, [r1, r3]
 803d06a:	b10a      	cbz	r2, 803d070 <__lshift+0xa4>
 803d06c:	f108 0602 	add.w	r6, r8, #2
 803d070:	3e01      	subs	r6, #1
 803d072:	4638      	mov	r0, r7
 803d074:	612e      	str	r6, [r5, #16]
 803d076:	4621      	mov	r1, r4
 803d078:	f7ff fdc3 	bl	803cc02 <_Bfree>
 803d07c:	4628      	mov	r0, r5
 803d07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803d082:	f842 0f04 	str.w	r0, [r2, #4]!
 803d086:	3301      	adds	r3, #1
 803d088:	e7c5      	b.n	803d016 <__lshift+0x4a>
 803d08a:	3904      	subs	r1, #4
 803d08c:	f853 2b04 	ldr.w	r2, [r3], #4
 803d090:	f841 2f04 	str.w	r2, [r1, #4]!
 803d094:	459c      	cmp	ip, r3
 803d096:	d8f9      	bhi.n	803d08c <__lshift+0xc0>
 803d098:	e7ea      	b.n	803d070 <__lshift+0xa4>
 803d09a:	bf00      	nop
 803d09c:	08045132 	.word	0x08045132
 803d0a0:	08045226 	.word	0x08045226

0803d0a4 <__mcmp>:
 803d0a4:	690a      	ldr	r2, [r1, #16]
 803d0a6:	4603      	mov	r3, r0
 803d0a8:	6900      	ldr	r0, [r0, #16]
 803d0aa:	1a80      	subs	r0, r0, r2
 803d0ac:	b530      	push	{r4, r5, lr}
 803d0ae:	d10e      	bne.n	803d0ce <__mcmp+0x2a>
 803d0b0:	3314      	adds	r3, #20
 803d0b2:	3114      	adds	r1, #20
 803d0b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 803d0b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 803d0bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 803d0c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 803d0c4:	4295      	cmp	r5, r2
 803d0c6:	d003      	beq.n	803d0d0 <__mcmp+0x2c>
 803d0c8:	d205      	bcs.n	803d0d6 <__mcmp+0x32>
 803d0ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803d0ce:	bd30      	pop	{r4, r5, pc}
 803d0d0:	42a3      	cmp	r3, r4
 803d0d2:	d3f3      	bcc.n	803d0bc <__mcmp+0x18>
 803d0d4:	e7fb      	b.n	803d0ce <__mcmp+0x2a>
 803d0d6:	2001      	movs	r0, #1
 803d0d8:	e7f9      	b.n	803d0ce <__mcmp+0x2a>
	...

0803d0dc <__mdiff>:
 803d0dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d0e0:	4689      	mov	r9, r1
 803d0e2:	4606      	mov	r6, r0
 803d0e4:	4611      	mov	r1, r2
 803d0e6:	4648      	mov	r0, r9
 803d0e8:	4614      	mov	r4, r2
 803d0ea:	f7ff ffdb 	bl	803d0a4 <__mcmp>
 803d0ee:	1e05      	subs	r5, r0, #0
 803d0f0:	d112      	bne.n	803d118 <__mdiff+0x3c>
 803d0f2:	4629      	mov	r1, r5
 803d0f4:	4630      	mov	r0, r6
 803d0f6:	f7ff fd5f 	bl	803cbb8 <_Balloc>
 803d0fa:	4602      	mov	r2, r0
 803d0fc:	b928      	cbnz	r0, 803d10a <__mdiff+0x2e>
 803d0fe:	4b3f      	ldr	r3, [pc, #252]	@ (803d1fc <__mdiff+0x120>)
 803d100:	f240 2137 	movw	r1, #567	@ 0x237
 803d104:	483e      	ldr	r0, [pc, #248]	@ (803d200 <__mdiff+0x124>)
 803d106:	f7f6 fa97 	bl	8033638 <__assert_func>
 803d10a:	2301      	movs	r3, #1
 803d10c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 803d110:	4610      	mov	r0, r2
 803d112:	b003      	add	sp, #12
 803d114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d118:	bfbc      	itt	lt
 803d11a:	464b      	movlt	r3, r9
 803d11c:	46a1      	movlt	r9, r4
 803d11e:	4630      	mov	r0, r6
 803d120:	f8d9 1004 	ldr.w	r1, [r9, #4]
 803d124:	bfba      	itte	lt
 803d126:	461c      	movlt	r4, r3
 803d128:	2501      	movlt	r5, #1
 803d12a:	2500      	movge	r5, #0
 803d12c:	f7ff fd44 	bl	803cbb8 <_Balloc>
 803d130:	4602      	mov	r2, r0
 803d132:	b918      	cbnz	r0, 803d13c <__mdiff+0x60>
 803d134:	4b31      	ldr	r3, [pc, #196]	@ (803d1fc <__mdiff+0x120>)
 803d136:	f240 2145 	movw	r1, #581	@ 0x245
 803d13a:	e7e3      	b.n	803d104 <__mdiff+0x28>
 803d13c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 803d140:	6926      	ldr	r6, [r4, #16]
 803d142:	60c5      	str	r5, [r0, #12]
 803d144:	f109 0310 	add.w	r3, r9, #16
 803d148:	f109 0514 	add.w	r5, r9, #20
 803d14c:	f104 0e14 	add.w	lr, r4, #20
 803d150:	f100 0b14 	add.w	fp, r0, #20
 803d154:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 803d158:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 803d15c:	9301      	str	r3, [sp, #4]
 803d15e:	46d9      	mov	r9, fp
 803d160:	f04f 0c00 	mov.w	ip, #0
 803d164:	9b01      	ldr	r3, [sp, #4]
 803d166:	f85e 0b04 	ldr.w	r0, [lr], #4
 803d16a:	f853 af04 	ldr.w	sl, [r3, #4]!
 803d16e:	9301      	str	r3, [sp, #4]
 803d170:	fa1f f38a 	uxth.w	r3, sl
 803d174:	4619      	mov	r1, r3
 803d176:	b283      	uxth	r3, r0
 803d178:	1acb      	subs	r3, r1, r3
 803d17a:	0c00      	lsrs	r0, r0, #16
 803d17c:	4463      	add	r3, ip
 803d17e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 803d182:	eb00 4023 	add.w	r0, r0, r3, asr #16
 803d186:	b29b      	uxth	r3, r3
 803d188:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 803d18c:	4576      	cmp	r6, lr
 803d18e:	f849 3b04 	str.w	r3, [r9], #4
 803d192:	ea4f 4c20 	mov.w	ip, r0, asr #16
 803d196:	d8e5      	bhi.n	803d164 <__mdiff+0x88>
 803d198:	1b33      	subs	r3, r6, r4
 803d19a:	3b15      	subs	r3, #21
 803d19c:	f023 0303 	bic.w	r3, r3, #3
 803d1a0:	3415      	adds	r4, #21
 803d1a2:	3304      	adds	r3, #4
 803d1a4:	42a6      	cmp	r6, r4
 803d1a6:	bf38      	it	cc
 803d1a8:	2304      	movcc	r3, #4
 803d1aa:	441d      	add	r5, r3
 803d1ac:	445b      	add	r3, fp
 803d1ae:	461e      	mov	r6, r3
 803d1b0:	462c      	mov	r4, r5
 803d1b2:	4544      	cmp	r4, r8
 803d1b4:	d30e      	bcc.n	803d1d4 <__mdiff+0xf8>
 803d1b6:	f108 0103 	add.w	r1, r8, #3
 803d1ba:	1b49      	subs	r1, r1, r5
 803d1bc:	f021 0103 	bic.w	r1, r1, #3
 803d1c0:	3d03      	subs	r5, #3
 803d1c2:	45a8      	cmp	r8, r5
 803d1c4:	bf38      	it	cc
 803d1c6:	2100      	movcc	r1, #0
 803d1c8:	440b      	add	r3, r1
 803d1ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 803d1ce:	b191      	cbz	r1, 803d1f6 <__mdiff+0x11a>
 803d1d0:	6117      	str	r7, [r2, #16]
 803d1d2:	e79d      	b.n	803d110 <__mdiff+0x34>
 803d1d4:	f854 1b04 	ldr.w	r1, [r4], #4
 803d1d8:	46e6      	mov	lr, ip
 803d1da:	0c08      	lsrs	r0, r1, #16
 803d1dc:	fa1c fc81 	uxtah	ip, ip, r1
 803d1e0:	4471      	add	r1, lr
 803d1e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 803d1e6:	b289      	uxth	r1, r1
 803d1e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 803d1ec:	f846 1b04 	str.w	r1, [r6], #4
 803d1f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 803d1f4:	e7dd      	b.n	803d1b2 <__mdiff+0xd6>
 803d1f6:	3f01      	subs	r7, #1
 803d1f8:	e7e7      	b.n	803d1ca <__mdiff+0xee>
 803d1fa:	bf00      	nop
 803d1fc:	08045132 	.word	0x08045132
 803d200:	08045226 	.word	0x08045226

0803d204 <__ulp>:
 803d204:	b082      	sub	sp, #8
 803d206:	ed8d 0b00 	vstr	d0, [sp]
 803d20a:	9a01      	ldr	r2, [sp, #4]
 803d20c:	4b0f      	ldr	r3, [pc, #60]	@ (803d24c <__ulp+0x48>)
 803d20e:	4013      	ands	r3, r2
 803d210:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 803d214:	2b00      	cmp	r3, #0
 803d216:	dc08      	bgt.n	803d22a <__ulp+0x26>
 803d218:	425b      	negs	r3, r3
 803d21a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 803d21e:	ea4f 5223 	mov.w	r2, r3, asr #20
 803d222:	da04      	bge.n	803d22e <__ulp+0x2a>
 803d224:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 803d228:	4113      	asrs	r3, r2
 803d22a:	2200      	movs	r2, #0
 803d22c:	e008      	b.n	803d240 <__ulp+0x3c>
 803d22e:	f1a2 0314 	sub.w	r3, r2, #20
 803d232:	2b1e      	cmp	r3, #30
 803d234:	bfda      	itte	le
 803d236:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 803d23a:	40da      	lsrle	r2, r3
 803d23c:	2201      	movgt	r2, #1
 803d23e:	2300      	movs	r3, #0
 803d240:	4619      	mov	r1, r3
 803d242:	4610      	mov	r0, r2
 803d244:	ec41 0b10 	vmov	d0, r0, r1
 803d248:	b002      	add	sp, #8
 803d24a:	4770      	bx	lr
 803d24c:	7ff00000 	.word	0x7ff00000

0803d250 <__b2d>:
 803d250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803d254:	6906      	ldr	r6, [r0, #16]
 803d256:	f100 0814 	add.w	r8, r0, #20
 803d25a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 803d25e:	1f37      	subs	r7, r6, #4
 803d260:	f856 2c04 	ldr.w	r2, [r6, #-4]
 803d264:	4610      	mov	r0, r2
 803d266:	f7ff fd65 	bl	803cd34 <__hi0bits>
 803d26a:	f1c0 0320 	rsb	r3, r0, #32
 803d26e:	280a      	cmp	r0, #10
 803d270:	600b      	str	r3, [r1, #0]
 803d272:	491b      	ldr	r1, [pc, #108]	@ (803d2e0 <__b2d+0x90>)
 803d274:	dc15      	bgt.n	803d2a2 <__b2d+0x52>
 803d276:	f1c0 0c0b 	rsb	ip, r0, #11
 803d27a:	fa22 f30c 	lsr.w	r3, r2, ip
 803d27e:	45b8      	cmp	r8, r7
 803d280:	ea43 0501 	orr.w	r5, r3, r1
 803d284:	bf34      	ite	cc
 803d286:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 803d28a:	2300      	movcs	r3, #0
 803d28c:	3015      	adds	r0, #21
 803d28e:	fa02 f000 	lsl.w	r0, r2, r0
 803d292:	fa23 f30c 	lsr.w	r3, r3, ip
 803d296:	4303      	orrs	r3, r0
 803d298:	461c      	mov	r4, r3
 803d29a:	ec45 4b10 	vmov	d0, r4, r5
 803d29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803d2a2:	45b8      	cmp	r8, r7
 803d2a4:	bf3a      	itte	cc
 803d2a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 803d2aa:	f1a6 0708 	subcc.w	r7, r6, #8
 803d2ae:	2300      	movcs	r3, #0
 803d2b0:	380b      	subs	r0, #11
 803d2b2:	d012      	beq.n	803d2da <__b2d+0x8a>
 803d2b4:	f1c0 0120 	rsb	r1, r0, #32
 803d2b8:	fa23 f401 	lsr.w	r4, r3, r1
 803d2bc:	4082      	lsls	r2, r0
 803d2be:	4322      	orrs	r2, r4
 803d2c0:	4547      	cmp	r7, r8
 803d2c2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 803d2c6:	bf8c      	ite	hi
 803d2c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 803d2cc:	2200      	movls	r2, #0
 803d2ce:	4083      	lsls	r3, r0
 803d2d0:	40ca      	lsrs	r2, r1
 803d2d2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 803d2d6:	4313      	orrs	r3, r2
 803d2d8:	e7de      	b.n	803d298 <__b2d+0x48>
 803d2da:	ea42 0501 	orr.w	r5, r2, r1
 803d2de:	e7db      	b.n	803d298 <__b2d+0x48>
 803d2e0:	3ff00000 	.word	0x3ff00000

0803d2e4 <__d2b>:
 803d2e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 803d2e8:	460f      	mov	r7, r1
 803d2ea:	2101      	movs	r1, #1
 803d2ec:	ec59 8b10 	vmov	r8, r9, d0
 803d2f0:	4616      	mov	r6, r2
 803d2f2:	f7ff fc61 	bl	803cbb8 <_Balloc>
 803d2f6:	4604      	mov	r4, r0
 803d2f8:	b930      	cbnz	r0, 803d308 <__d2b+0x24>
 803d2fa:	4602      	mov	r2, r0
 803d2fc:	4b23      	ldr	r3, [pc, #140]	@ (803d38c <__d2b+0xa8>)
 803d2fe:	4824      	ldr	r0, [pc, #144]	@ (803d390 <__d2b+0xac>)
 803d300:	f240 310f 	movw	r1, #783	@ 0x30f
 803d304:	f7f6 f998 	bl	8033638 <__assert_func>
 803d308:	f3c9 550a 	ubfx	r5, r9, #20, #11
 803d30c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 803d310:	b10d      	cbz	r5, 803d316 <__d2b+0x32>
 803d312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 803d316:	9301      	str	r3, [sp, #4]
 803d318:	f1b8 0300 	subs.w	r3, r8, #0
 803d31c:	d023      	beq.n	803d366 <__d2b+0x82>
 803d31e:	4668      	mov	r0, sp
 803d320:	9300      	str	r3, [sp, #0]
 803d322:	f7ff fd26 	bl	803cd72 <__lo0bits>
 803d326:	e9dd 1200 	ldrd	r1, r2, [sp]
 803d32a:	b1d0      	cbz	r0, 803d362 <__d2b+0x7e>
 803d32c:	f1c0 0320 	rsb	r3, r0, #32
 803d330:	fa02 f303 	lsl.w	r3, r2, r3
 803d334:	430b      	orrs	r3, r1
 803d336:	40c2      	lsrs	r2, r0
 803d338:	6163      	str	r3, [r4, #20]
 803d33a:	9201      	str	r2, [sp, #4]
 803d33c:	9b01      	ldr	r3, [sp, #4]
 803d33e:	61a3      	str	r3, [r4, #24]
 803d340:	2b00      	cmp	r3, #0
 803d342:	bf0c      	ite	eq
 803d344:	2201      	moveq	r2, #1
 803d346:	2202      	movne	r2, #2
 803d348:	6122      	str	r2, [r4, #16]
 803d34a:	b1a5      	cbz	r5, 803d376 <__d2b+0x92>
 803d34c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 803d350:	4405      	add	r5, r0
 803d352:	603d      	str	r5, [r7, #0]
 803d354:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 803d358:	6030      	str	r0, [r6, #0]
 803d35a:	4620      	mov	r0, r4
 803d35c:	b003      	add	sp, #12
 803d35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803d362:	6161      	str	r1, [r4, #20]
 803d364:	e7ea      	b.n	803d33c <__d2b+0x58>
 803d366:	a801      	add	r0, sp, #4
 803d368:	f7ff fd03 	bl	803cd72 <__lo0bits>
 803d36c:	9b01      	ldr	r3, [sp, #4]
 803d36e:	6163      	str	r3, [r4, #20]
 803d370:	3020      	adds	r0, #32
 803d372:	2201      	movs	r2, #1
 803d374:	e7e8      	b.n	803d348 <__d2b+0x64>
 803d376:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 803d37a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 803d37e:	6038      	str	r0, [r7, #0]
 803d380:	6918      	ldr	r0, [r3, #16]
 803d382:	f7ff fcd7 	bl	803cd34 <__hi0bits>
 803d386:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 803d38a:	e7e5      	b.n	803d358 <__d2b+0x74>
 803d38c:	08045132 	.word	0x08045132
 803d390:	08045226 	.word	0x08045226

0803d394 <__ratio>:
 803d394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d398:	b085      	sub	sp, #20
 803d39a:	e9cd 1000 	strd	r1, r0, [sp]
 803d39e:	a902      	add	r1, sp, #8
 803d3a0:	f7ff ff56 	bl	803d250 <__b2d>
 803d3a4:	9800      	ldr	r0, [sp, #0]
 803d3a6:	a903      	add	r1, sp, #12
 803d3a8:	ec55 4b10 	vmov	r4, r5, d0
 803d3ac:	f7ff ff50 	bl	803d250 <__b2d>
 803d3b0:	9b01      	ldr	r3, [sp, #4]
 803d3b2:	6919      	ldr	r1, [r3, #16]
 803d3b4:	9b00      	ldr	r3, [sp, #0]
 803d3b6:	691b      	ldr	r3, [r3, #16]
 803d3b8:	1ac9      	subs	r1, r1, r3
 803d3ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 803d3be:	1a9b      	subs	r3, r3, r2
 803d3c0:	ec5b ab10 	vmov	sl, fp, d0
 803d3c4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 803d3c8:	2b00      	cmp	r3, #0
 803d3ca:	bfce      	itee	gt
 803d3cc:	462a      	movgt	r2, r5
 803d3ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 803d3d2:	465a      	movle	r2, fp
 803d3d4:	462f      	mov	r7, r5
 803d3d6:	46d9      	mov	r9, fp
 803d3d8:	bfcc      	ite	gt
 803d3da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 803d3de:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 803d3e2:	464b      	mov	r3, r9
 803d3e4:	4652      	mov	r2, sl
 803d3e6:	4620      	mov	r0, r4
 803d3e8:	4639      	mov	r1, r7
 803d3ea:	f7d3 fa47 	bl	801087c <__aeabi_ddiv>
 803d3ee:	ec41 0b10 	vmov	d0, r0, r1
 803d3f2:	b005      	add	sp, #20
 803d3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803d3f8 <__copybits>:
 803d3f8:	3901      	subs	r1, #1
 803d3fa:	b570      	push	{r4, r5, r6, lr}
 803d3fc:	1149      	asrs	r1, r1, #5
 803d3fe:	6914      	ldr	r4, [r2, #16]
 803d400:	3101      	adds	r1, #1
 803d402:	f102 0314 	add.w	r3, r2, #20
 803d406:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 803d40a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 803d40e:	1f05      	subs	r5, r0, #4
 803d410:	42a3      	cmp	r3, r4
 803d412:	d30c      	bcc.n	803d42e <__copybits+0x36>
 803d414:	1aa3      	subs	r3, r4, r2
 803d416:	3b11      	subs	r3, #17
 803d418:	f023 0303 	bic.w	r3, r3, #3
 803d41c:	3211      	adds	r2, #17
 803d41e:	42a2      	cmp	r2, r4
 803d420:	bf88      	it	hi
 803d422:	2300      	movhi	r3, #0
 803d424:	4418      	add	r0, r3
 803d426:	2300      	movs	r3, #0
 803d428:	4288      	cmp	r0, r1
 803d42a:	d305      	bcc.n	803d438 <__copybits+0x40>
 803d42c:	bd70      	pop	{r4, r5, r6, pc}
 803d42e:	f853 6b04 	ldr.w	r6, [r3], #4
 803d432:	f845 6f04 	str.w	r6, [r5, #4]!
 803d436:	e7eb      	b.n	803d410 <__copybits+0x18>
 803d438:	f840 3b04 	str.w	r3, [r0], #4
 803d43c:	e7f4      	b.n	803d428 <__copybits+0x30>

0803d43e <__any_on>:
 803d43e:	f100 0214 	add.w	r2, r0, #20
 803d442:	6900      	ldr	r0, [r0, #16]
 803d444:	114b      	asrs	r3, r1, #5
 803d446:	4298      	cmp	r0, r3
 803d448:	b510      	push	{r4, lr}
 803d44a:	db11      	blt.n	803d470 <__any_on+0x32>
 803d44c:	dd0a      	ble.n	803d464 <__any_on+0x26>
 803d44e:	f011 011f 	ands.w	r1, r1, #31
 803d452:	d007      	beq.n	803d464 <__any_on+0x26>
 803d454:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 803d458:	fa24 f001 	lsr.w	r0, r4, r1
 803d45c:	fa00 f101 	lsl.w	r1, r0, r1
 803d460:	428c      	cmp	r4, r1
 803d462:	d10b      	bne.n	803d47c <__any_on+0x3e>
 803d464:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 803d468:	4293      	cmp	r3, r2
 803d46a:	d803      	bhi.n	803d474 <__any_on+0x36>
 803d46c:	2000      	movs	r0, #0
 803d46e:	bd10      	pop	{r4, pc}
 803d470:	4603      	mov	r3, r0
 803d472:	e7f7      	b.n	803d464 <__any_on+0x26>
 803d474:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 803d478:	2900      	cmp	r1, #0
 803d47a:	d0f5      	beq.n	803d468 <__any_on+0x2a>
 803d47c:	2001      	movs	r0, #1
 803d47e:	e7f6      	b.n	803d46e <__any_on+0x30>

0803d480 <realloc>:
 803d480:	4b02      	ldr	r3, [pc, #8]	@ (803d48c <realloc+0xc>)
 803d482:	460a      	mov	r2, r1
 803d484:	4601      	mov	r1, r0
 803d486:	6818      	ldr	r0, [r3, #0]
 803d488:	f000 b890 	b.w	803d5ac <_realloc_r>
 803d48c:	20000440 	.word	0x20000440

0803d490 <_fclose_r>:
 803d490:	b570      	push	{r4, r5, r6, lr}
 803d492:	4605      	mov	r5, r0
 803d494:	460c      	mov	r4, r1
 803d496:	b1b1      	cbz	r1, 803d4c6 <_fclose_r+0x36>
 803d498:	b118      	cbz	r0, 803d4a2 <_fclose_r+0x12>
 803d49a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803d49c:	b90b      	cbnz	r3, 803d4a2 <_fclose_r+0x12>
 803d49e:	f7f8 fb79 	bl	8035b94 <__sinit>
 803d4a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803d4a4:	07de      	lsls	r6, r3, #31
 803d4a6:	d405      	bmi.n	803d4b4 <_fclose_r+0x24>
 803d4a8:	89a3      	ldrh	r3, [r4, #12]
 803d4aa:	0598      	lsls	r0, r3, #22
 803d4ac:	d402      	bmi.n	803d4b4 <_fclose_r+0x24>
 803d4ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803d4b0:	f7fa f84f 	bl	8037552 <__retarget_lock_acquire_recursive>
 803d4b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803d4b8:	b943      	cbnz	r3, 803d4cc <_fclose_r+0x3c>
 803d4ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803d4bc:	07d9      	lsls	r1, r3, #31
 803d4be:	d402      	bmi.n	803d4c6 <_fclose_r+0x36>
 803d4c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803d4c2:	f7fa f848 	bl	8037556 <__retarget_lock_release_recursive>
 803d4c6:	2600      	movs	r6, #0
 803d4c8:	4630      	mov	r0, r6
 803d4ca:	bd70      	pop	{r4, r5, r6, pc}
 803d4cc:	4621      	mov	r1, r4
 803d4ce:	4628      	mov	r0, r5
 803d4d0:	f7f8 f996 	bl	8035800 <__sflush_r>
 803d4d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 803d4d6:	4606      	mov	r6, r0
 803d4d8:	b133      	cbz	r3, 803d4e8 <_fclose_r+0x58>
 803d4da:	69e1      	ldr	r1, [r4, #28]
 803d4dc:	4628      	mov	r0, r5
 803d4de:	4798      	blx	r3
 803d4e0:	2800      	cmp	r0, #0
 803d4e2:	bfb8      	it	lt
 803d4e4:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 803d4e8:	89a3      	ldrh	r3, [r4, #12]
 803d4ea:	061a      	lsls	r2, r3, #24
 803d4ec:	d503      	bpl.n	803d4f6 <_fclose_r+0x66>
 803d4ee:	6921      	ldr	r1, [r4, #16]
 803d4f0:	4628      	mov	r0, r5
 803d4f2:	f7fa ff33 	bl	803835c <_free_r>
 803d4f6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 803d4f8:	b141      	cbz	r1, 803d50c <_fclose_r+0x7c>
 803d4fa:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803d4fe:	4299      	cmp	r1, r3
 803d500:	d002      	beq.n	803d508 <_fclose_r+0x78>
 803d502:	4628      	mov	r0, r5
 803d504:	f7fa ff2a 	bl	803835c <_free_r>
 803d508:	2300      	movs	r3, #0
 803d50a:	6323      	str	r3, [r4, #48]	@ 0x30
 803d50c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 803d50e:	b121      	cbz	r1, 803d51a <_fclose_r+0x8a>
 803d510:	4628      	mov	r0, r5
 803d512:	f7fa ff23 	bl	803835c <_free_r>
 803d516:	2300      	movs	r3, #0
 803d518:	6463      	str	r3, [r4, #68]	@ 0x44
 803d51a:	f7f8 fb2f 	bl	8035b7c <__sfp_lock_acquire>
 803d51e:	2300      	movs	r3, #0
 803d520:	81a3      	strh	r3, [r4, #12]
 803d522:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803d524:	07db      	lsls	r3, r3, #31
 803d526:	d402      	bmi.n	803d52e <_fclose_r+0x9e>
 803d528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803d52a:	f7fa f814 	bl	8037556 <__retarget_lock_release_recursive>
 803d52e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803d530:	f7fa f80d 	bl	803754e <__retarget_lock_close_recursive>
 803d534:	f7f8 fb28 	bl	8035b88 <__sfp_lock_release>
 803d538:	e7c6      	b.n	803d4c8 <_fclose_r+0x38>

0803d53a <__sccl>:
 803d53a:	b570      	push	{r4, r5, r6, lr}
 803d53c:	780b      	ldrb	r3, [r1, #0]
 803d53e:	4604      	mov	r4, r0
 803d540:	2b5e      	cmp	r3, #94	@ 0x5e
 803d542:	bf0b      	itete	eq
 803d544:	784b      	ldrbeq	r3, [r1, #1]
 803d546:	1c4a      	addne	r2, r1, #1
 803d548:	1c8a      	addeq	r2, r1, #2
 803d54a:	2100      	movne	r1, #0
 803d54c:	bf08      	it	eq
 803d54e:	2101      	moveq	r1, #1
 803d550:	3801      	subs	r0, #1
 803d552:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 803d556:	f800 1f01 	strb.w	r1, [r0, #1]!
 803d55a:	42a8      	cmp	r0, r5
 803d55c:	d1fb      	bne.n	803d556 <__sccl+0x1c>
 803d55e:	b90b      	cbnz	r3, 803d564 <__sccl+0x2a>
 803d560:	1e50      	subs	r0, r2, #1
 803d562:	bd70      	pop	{r4, r5, r6, pc}
 803d564:	f081 0101 	eor.w	r1, r1, #1
 803d568:	54e1      	strb	r1, [r4, r3]
 803d56a:	4610      	mov	r0, r2
 803d56c:	4602      	mov	r2, r0
 803d56e:	f812 5b01 	ldrb.w	r5, [r2], #1
 803d572:	2d2d      	cmp	r5, #45	@ 0x2d
 803d574:	d005      	beq.n	803d582 <__sccl+0x48>
 803d576:	2d5d      	cmp	r5, #93	@ 0x5d
 803d578:	d016      	beq.n	803d5a8 <__sccl+0x6e>
 803d57a:	2d00      	cmp	r5, #0
 803d57c:	d0f1      	beq.n	803d562 <__sccl+0x28>
 803d57e:	462b      	mov	r3, r5
 803d580:	e7f2      	b.n	803d568 <__sccl+0x2e>
 803d582:	7846      	ldrb	r6, [r0, #1]
 803d584:	2e5d      	cmp	r6, #93	@ 0x5d
 803d586:	d0fa      	beq.n	803d57e <__sccl+0x44>
 803d588:	42b3      	cmp	r3, r6
 803d58a:	dcf8      	bgt.n	803d57e <__sccl+0x44>
 803d58c:	3002      	adds	r0, #2
 803d58e:	461a      	mov	r2, r3
 803d590:	3201      	adds	r2, #1
 803d592:	4296      	cmp	r6, r2
 803d594:	54a1      	strb	r1, [r4, r2]
 803d596:	dcfb      	bgt.n	803d590 <__sccl+0x56>
 803d598:	1af2      	subs	r2, r6, r3
 803d59a:	3a01      	subs	r2, #1
 803d59c:	1c5d      	adds	r5, r3, #1
 803d59e:	42b3      	cmp	r3, r6
 803d5a0:	bfa8      	it	ge
 803d5a2:	2200      	movge	r2, #0
 803d5a4:	18ab      	adds	r3, r5, r2
 803d5a6:	e7e1      	b.n	803d56c <__sccl+0x32>
 803d5a8:	4610      	mov	r0, r2
 803d5aa:	e7da      	b.n	803d562 <__sccl+0x28>

0803d5ac <_realloc_r>:
 803d5ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d5b0:	4682      	mov	sl, r0
 803d5b2:	4693      	mov	fp, r2
 803d5b4:	460c      	mov	r4, r1
 803d5b6:	b929      	cbnz	r1, 803d5c4 <_realloc_r+0x18>
 803d5b8:	4611      	mov	r1, r2
 803d5ba:	b003      	add	sp, #12
 803d5bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d5c0:	f7fa bfe4 	b.w	803858c <_malloc_r>
 803d5c4:	f7ff faec 	bl	803cba0 <__malloc_lock>
 803d5c8:	f10b 080b 	add.w	r8, fp, #11
 803d5cc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 803d5d0:	f1b8 0f16 	cmp.w	r8, #22
 803d5d4:	f1a4 0908 	sub.w	r9, r4, #8
 803d5d8:	f025 0603 	bic.w	r6, r5, #3
 803d5dc:	d908      	bls.n	803d5f0 <_realloc_r+0x44>
 803d5de:	f038 0807 	bics.w	r8, r8, #7
 803d5e2:	d507      	bpl.n	803d5f4 <_realloc_r+0x48>
 803d5e4:	230c      	movs	r3, #12
 803d5e6:	f8ca 3000 	str.w	r3, [sl]
 803d5ea:	f04f 0b00 	mov.w	fp, #0
 803d5ee:	e032      	b.n	803d656 <_realloc_r+0xaa>
 803d5f0:	f04f 0810 	mov.w	r8, #16
 803d5f4:	45c3      	cmp	fp, r8
 803d5f6:	d8f5      	bhi.n	803d5e4 <_realloc_r+0x38>
 803d5f8:	4546      	cmp	r6, r8
 803d5fa:	f280 8174 	bge.w	803d8e6 <_realloc_r+0x33a>
 803d5fe:	4b9e      	ldr	r3, [pc, #632]	@ (803d878 <_realloc_r+0x2cc>)
 803d600:	f8d3 c008 	ldr.w	ip, [r3, #8]
 803d604:	eb09 0106 	add.w	r1, r9, r6
 803d608:	458c      	cmp	ip, r1
 803d60a:	6848      	ldr	r0, [r1, #4]
 803d60c:	d005      	beq.n	803d61a <_realloc_r+0x6e>
 803d60e:	f020 0201 	bic.w	r2, r0, #1
 803d612:	440a      	add	r2, r1
 803d614:	6852      	ldr	r2, [r2, #4]
 803d616:	07d7      	lsls	r7, r2, #31
 803d618:	d449      	bmi.n	803d6ae <_realloc_r+0x102>
 803d61a:	f020 0003 	bic.w	r0, r0, #3
 803d61e:	458c      	cmp	ip, r1
 803d620:	eb06 0700 	add.w	r7, r6, r0
 803d624:	d11b      	bne.n	803d65e <_realloc_r+0xb2>
 803d626:	f108 0210 	add.w	r2, r8, #16
 803d62a:	42ba      	cmp	r2, r7
 803d62c:	dc41      	bgt.n	803d6b2 <_realloc_r+0x106>
 803d62e:	eb09 0208 	add.w	r2, r9, r8
 803d632:	eba7 0708 	sub.w	r7, r7, r8
 803d636:	f047 0701 	orr.w	r7, r7, #1
 803d63a:	609a      	str	r2, [r3, #8]
 803d63c:	6057      	str	r7, [r2, #4]
 803d63e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803d642:	f003 0301 	and.w	r3, r3, #1
 803d646:	ea43 0308 	orr.w	r3, r3, r8
 803d64a:	f844 3c04 	str.w	r3, [r4, #-4]
 803d64e:	4650      	mov	r0, sl
 803d650:	f7ff faac 	bl	803cbac <__malloc_unlock>
 803d654:	46a3      	mov	fp, r4
 803d656:	4658      	mov	r0, fp
 803d658:	b003      	add	sp, #12
 803d65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d65e:	45b8      	cmp	r8, r7
 803d660:	dc27      	bgt.n	803d6b2 <_realloc_r+0x106>
 803d662:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 803d666:	60d3      	str	r3, [r2, #12]
 803d668:	609a      	str	r2, [r3, #8]
 803d66a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 803d66e:	eba7 0008 	sub.w	r0, r7, r8
 803d672:	280f      	cmp	r0, #15
 803d674:	f003 0301 	and.w	r3, r3, #1
 803d678:	eb09 0207 	add.w	r2, r9, r7
 803d67c:	f240 8135 	bls.w	803d8ea <_realloc_r+0x33e>
 803d680:	eb09 0108 	add.w	r1, r9, r8
 803d684:	ea48 0303 	orr.w	r3, r8, r3
 803d688:	f040 0001 	orr.w	r0, r0, #1
 803d68c:	f8c9 3004 	str.w	r3, [r9, #4]
 803d690:	6048      	str	r0, [r1, #4]
 803d692:	6853      	ldr	r3, [r2, #4]
 803d694:	f043 0301 	orr.w	r3, r3, #1
 803d698:	6053      	str	r3, [r2, #4]
 803d69a:	3108      	adds	r1, #8
 803d69c:	4650      	mov	r0, sl
 803d69e:	f7fa fe5d 	bl	803835c <_free_r>
 803d6a2:	4650      	mov	r0, sl
 803d6a4:	f7ff fa82 	bl	803cbac <__malloc_unlock>
 803d6a8:	f109 0b08 	add.w	fp, r9, #8
 803d6ac:	e7d3      	b.n	803d656 <_realloc_r+0xaa>
 803d6ae:	2000      	movs	r0, #0
 803d6b0:	4601      	mov	r1, r0
 803d6b2:	07ea      	lsls	r2, r5, #31
 803d6b4:	f100 80c7 	bmi.w	803d846 <_realloc_r+0x29a>
 803d6b8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 803d6bc:	eba9 0505 	sub.w	r5, r9, r5
 803d6c0:	686a      	ldr	r2, [r5, #4]
 803d6c2:	f022 0203 	bic.w	r2, r2, #3
 803d6c6:	4432      	add	r2, r6
 803d6c8:	9201      	str	r2, [sp, #4]
 803d6ca:	2900      	cmp	r1, #0
 803d6cc:	f000 8086 	beq.w	803d7dc <_realloc_r+0x230>
 803d6d0:	458c      	cmp	ip, r1
 803d6d2:	eb00 0702 	add.w	r7, r0, r2
 803d6d6:	d149      	bne.n	803d76c <_realloc_r+0x1c0>
 803d6d8:	f108 0210 	add.w	r2, r8, #16
 803d6dc:	42ba      	cmp	r2, r7
 803d6de:	dc7d      	bgt.n	803d7dc <_realloc_r+0x230>
 803d6e0:	46ab      	mov	fp, r5
 803d6e2:	68ea      	ldr	r2, [r5, #12]
 803d6e4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 803d6e8:	60ca      	str	r2, [r1, #12]
 803d6ea:	6091      	str	r1, [r2, #8]
 803d6ec:	1f32      	subs	r2, r6, #4
 803d6ee:	2a24      	cmp	r2, #36	@ 0x24
 803d6f0:	d836      	bhi.n	803d760 <_realloc_r+0x1b4>
 803d6f2:	2a13      	cmp	r2, #19
 803d6f4:	d932      	bls.n	803d75c <_realloc_r+0x1b0>
 803d6f6:	6821      	ldr	r1, [r4, #0]
 803d6f8:	60a9      	str	r1, [r5, #8]
 803d6fa:	6861      	ldr	r1, [r4, #4]
 803d6fc:	60e9      	str	r1, [r5, #12]
 803d6fe:	2a1b      	cmp	r2, #27
 803d700:	d81a      	bhi.n	803d738 <_realloc_r+0x18c>
 803d702:	3408      	adds	r4, #8
 803d704:	f105 0210 	add.w	r2, r5, #16
 803d708:	6821      	ldr	r1, [r4, #0]
 803d70a:	6011      	str	r1, [r2, #0]
 803d70c:	6861      	ldr	r1, [r4, #4]
 803d70e:	6051      	str	r1, [r2, #4]
 803d710:	68a1      	ldr	r1, [r4, #8]
 803d712:	6091      	str	r1, [r2, #8]
 803d714:	eb05 0208 	add.w	r2, r5, r8
 803d718:	eba7 0708 	sub.w	r7, r7, r8
 803d71c:	f047 0701 	orr.w	r7, r7, #1
 803d720:	609a      	str	r2, [r3, #8]
 803d722:	6057      	str	r7, [r2, #4]
 803d724:	686b      	ldr	r3, [r5, #4]
 803d726:	f003 0301 	and.w	r3, r3, #1
 803d72a:	ea43 0308 	orr.w	r3, r3, r8
 803d72e:	606b      	str	r3, [r5, #4]
 803d730:	4650      	mov	r0, sl
 803d732:	f7ff fa3b 	bl	803cbac <__malloc_unlock>
 803d736:	e78e      	b.n	803d656 <_realloc_r+0xaa>
 803d738:	68a1      	ldr	r1, [r4, #8]
 803d73a:	6129      	str	r1, [r5, #16]
 803d73c:	68e1      	ldr	r1, [r4, #12]
 803d73e:	6169      	str	r1, [r5, #20]
 803d740:	2a24      	cmp	r2, #36	@ 0x24
 803d742:	bf01      	itttt	eq
 803d744:	6922      	ldreq	r2, [r4, #16]
 803d746:	61aa      	streq	r2, [r5, #24]
 803d748:	6961      	ldreq	r1, [r4, #20]
 803d74a:	61e9      	streq	r1, [r5, #28]
 803d74c:	bf19      	ittee	ne
 803d74e:	3410      	addne	r4, #16
 803d750:	f105 0218 	addne.w	r2, r5, #24
 803d754:	f105 0220 	addeq.w	r2, r5, #32
 803d758:	3418      	addeq	r4, #24
 803d75a:	e7d5      	b.n	803d708 <_realloc_r+0x15c>
 803d75c:	465a      	mov	r2, fp
 803d75e:	e7d3      	b.n	803d708 <_realloc_r+0x15c>
 803d760:	4621      	mov	r1, r4
 803d762:	4658      	mov	r0, fp
 803d764:	f7f8 fca2 	bl	80360ac <memmove>
 803d768:	4b43      	ldr	r3, [pc, #268]	@ (803d878 <_realloc_r+0x2cc>)
 803d76a:	e7d3      	b.n	803d714 <_realloc_r+0x168>
 803d76c:	45b8      	cmp	r8, r7
 803d76e:	dc35      	bgt.n	803d7dc <_realloc_r+0x230>
 803d770:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 803d774:	4628      	mov	r0, r5
 803d776:	60d3      	str	r3, [r2, #12]
 803d778:	609a      	str	r2, [r3, #8]
 803d77a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803d77e:	68eb      	ldr	r3, [r5, #12]
 803d780:	60d3      	str	r3, [r2, #12]
 803d782:	609a      	str	r2, [r3, #8]
 803d784:	1f32      	subs	r2, r6, #4
 803d786:	2a24      	cmp	r2, #36	@ 0x24
 803d788:	d824      	bhi.n	803d7d4 <_realloc_r+0x228>
 803d78a:	2a13      	cmp	r2, #19
 803d78c:	d908      	bls.n	803d7a0 <_realloc_r+0x1f4>
 803d78e:	6823      	ldr	r3, [r4, #0]
 803d790:	60ab      	str	r3, [r5, #8]
 803d792:	6863      	ldr	r3, [r4, #4]
 803d794:	60eb      	str	r3, [r5, #12]
 803d796:	2a1b      	cmp	r2, #27
 803d798:	d80a      	bhi.n	803d7b0 <_realloc_r+0x204>
 803d79a:	3408      	adds	r4, #8
 803d79c:	f105 0010 	add.w	r0, r5, #16
 803d7a0:	6823      	ldr	r3, [r4, #0]
 803d7a2:	6003      	str	r3, [r0, #0]
 803d7a4:	6863      	ldr	r3, [r4, #4]
 803d7a6:	6043      	str	r3, [r0, #4]
 803d7a8:	68a3      	ldr	r3, [r4, #8]
 803d7aa:	6083      	str	r3, [r0, #8]
 803d7ac:	46a9      	mov	r9, r5
 803d7ae:	e75c      	b.n	803d66a <_realloc_r+0xbe>
 803d7b0:	68a3      	ldr	r3, [r4, #8]
 803d7b2:	612b      	str	r3, [r5, #16]
 803d7b4:	68e3      	ldr	r3, [r4, #12]
 803d7b6:	616b      	str	r3, [r5, #20]
 803d7b8:	2a24      	cmp	r2, #36	@ 0x24
 803d7ba:	bf01      	itttt	eq
 803d7bc:	6923      	ldreq	r3, [r4, #16]
 803d7be:	61ab      	streq	r3, [r5, #24]
 803d7c0:	6963      	ldreq	r3, [r4, #20]
 803d7c2:	61eb      	streq	r3, [r5, #28]
 803d7c4:	bf19      	ittee	ne
 803d7c6:	3410      	addne	r4, #16
 803d7c8:	f105 0018 	addne.w	r0, r5, #24
 803d7cc:	f105 0020 	addeq.w	r0, r5, #32
 803d7d0:	3418      	addeq	r4, #24
 803d7d2:	e7e5      	b.n	803d7a0 <_realloc_r+0x1f4>
 803d7d4:	4621      	mov	r1, r4
 803d7d6:	f7f8 fc69 	bl	80360ac <memmove>
 803d7da:	e7e7      	b.n	803d7ac <_realloc_r+0x200>
 803d7dc:	9b01      	ldr	r3, [sp, #4]
 803d7de:	4598      	cmp	r8, r3
 803d7e0:	dc31      	bgt.n	803d846 <_realloc_r+0x29a>
 803d7e2:	4628      	mov	r0, r5
 803d7e4:	68eb      	ldr	r3, [r5, #12]
 803d7e6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803d7ea:	60d3      	str	r3, [r2, #12]
 803d7ec:	609a      	str	r2, [r3, #8]
 803d7ee:	1f32      	subs	r2, r6, #4
 803d7f0:	2a24      	cmp	r2, #36	@ 0x24
 803d7f2:	d824      	bhi.n	803d83e <_realloc_r+0x292>
 803d7f4:	2a13      	cmp	r2, #19
 803d7f6:	d908      	bls.n	803d80a <_realloc_r+0x25e>
 803d7f8:	6823      	ldr	r3, [r4, #0]
 803d7fa:	60ab      	str	r3, [r5, #8]
 803d7fc:	6863      	ldr	r3, [r4, #4]
 803d7fe:	60eb      	str	r3, [r5, #12]
 803d800:	2a1b      	cmp	r2, #27
 803d802:	d80a      	bhi.n	803d81a <_realloc_r+0x26e>
 803d804:	3408      	adds	r4, #8
 803d806:	f105 0010 	add.w	r0, r5, #16
 803d80a:	6823      	ldr	r3, [r4, #0]
 803d80c:	6003      	str	r3, [r0, #0]
 803d80e:	6863      	ldr	r3, [r4, #4]
 803d810:	6043      	str	r3, [r0, #4]
 803d812:	68a3      	ldr	r3, [r4, #8]
 803d814:	6083      	str	r3, [r0, #8]
 803d816:	9f01      	ldr	r7, [sp, #4]
 803d818:	e7c8      	b.n	803d7ac <_realloc_r+0x200>
 803d81a:	68a3      	ldr	r3, [r4, #8]
 803d81c:	612b      	str	r3, [r5, #16]
 803d81e:	68e3      	ldr	r3, [r4, #12]
 803d820:	616b      	str	r3, [r5, #20]
 803d822:	2a24      	cmp	r2, #36	@ 0x24
 803d824:	bf01      	itttt	eq
 803d826:	6923      	ldreq	r3, [r4, #16]
 803d828:	61ab      	streq	r3, [r5, #24]
 803d82a:	6963      	ldreq	r3, [r4, #20]
 803d82c:	61eb      	streq	r3, [r5, #28]
 803d82e:	bf19      	ittee	ne
 803d830:	3410      	addne	r4, #16
 803d832:	f105 0018 	addne.w	r0, r5, #24
 803d836:	f105 0020 	addeq.w	r0, r5, #32
 803d83a:	3418      	addeq	r4, #24
 803d83c:	e7e5      	b.n	803d80a <_realloc_r+0x25e>
 803d83e:	4621      	mov	r1, r4
 803d840:	f7f8 fc34 	bl	80360ac <memmove>
 803d844:	e7e7      	b.n	803d816 <_realloc_r+0x26a>
 803d846:	4659      	mov	r1, fp
 803d848:	4650      	mov	r0, sl
 803d84a:	f7fa fe9f 	bl	803858c <_malloc_r>
 803d84e:	4683      	mov	fp, r0
 803d850:	b918      	cbnz	r0, 803d85a <_realloc_r+0x2ae>
 803d852:	4650      	mov	r0, sl
 803d854:	f7ff f9aa 	bl	803cbac <__malloc_unlock>
 803d858:	e6c7      	b.n	803d5ea <_realloc_r+0x3e>
 803d85a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803d85e:	f023 0301 	bic.w	r3, r3, #1
 803d862:	444b      	add	r3, r9
 803d864:	f1a0 0208 	sub.w	r2, r0, #8
 803d868:	4293      	cmp	r3, r2
 803d86a:	d107      	bne.n	803d87c <_realloc_r+0x2d0>
 803d86c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 803d870:	f027 0703 	bic.w	r7, r7, #3
 803d874:	4437      	add	r7, r6
 803d876:	e6f8      	b.n	803d66a <_realloc_r+0xbe>
 803d878:	20000574 	.word	0x20000574
 803d87c:	1f32      	subs	r2, r6, #4
 803d87e:	2a24      	cmp	r2, #36	@ 0x24
 803d880:	d82d      	bhi.n	803d8de <_realloc_r+0x332>
 803d882:	2a13      	cmp	r2, #19
 803d884:	d928      	bls.n	803d8d8 <_realloc_r+0x32c>
 803d886:	6823      	ldr	r3, [r4, #0]
 803d888:	6003      	str	r3, [r0, #0]
 803d88a:	6863      	ldr	r3, [r4, #4]
 803d88c:	6043      	str	r3, [r0, #4]
 803d88e:	2a1b      	cmp	r2, #27
 803d890:	d80e      	bhi.n	803d8b0 <_realloc_r+0x304>
 803d892:	f104 0208 	add.w	r2, r4, #8
 803d896:	f100 0308 	add.w	r3, r0, #8
 803d89a:	6811      	ldr	r1, [r2, #0]
 803d89c:	6019      	str	r1, [r3, #0]
 803d89e:	6851      	ldr	r1, [r2, #4]
 803d8a0:	6059      	str	r1, [r3, #4]
 803d8a2:	6892      	ldr	r2, [r2, #8]
 803d8a4:	609a      	str	r2, [r3, #8]
 803d8a6:	4621      	mov	r1, r4
 803d8a8:	4650      	mov	r0, sl
 803d8aa:	f7fa fd57 	bl	803835c <_free_r>
 803d8ae:	e73f      	b.n	803d730 <_realloc_r+0x184>
 803d8b0:	68a3      	ldr	r3, [r4, #8]
 803d8b2:	6083      	str	r3, [r0, #8]
 803d8b4:	68e3      	ldr	r3, [r4, #12]
 803d8b6:	60c3      	str	r3, [r0, #12]
 803d8b8:	2a24      	cmp	r2, #36	@ 0x24
 803d8ba:	bf01      	itttt	eq
 803d8bc:	6923      	ldreq	r3, [r4, #16]
 803d8be:	6103      	streq	r3, [r0, #16]
 803d8c0:	6961      	ldreq	r1, [r4, #20]
 803d8c2:	6141      	streq	r1, [r0, #20]
 803d8c4:	bf19      	ittee	ne
 803d8c6:	f104 0210 	addne.w	r2, r4, #16
 803d8ca:	f100 0310 	addne.w	r3, r0, #16
 803d8ce:	f104 0218 	addeq.w	r2, r4, #24
 803d8d2:	f100 0318 	addeq.w	r3, r0, #24
 803d8d6:	e7e0      	b.n	803d89a <_realloc_r+0x2ee>
 803d8d8:	4603      	mov	r3, r0
 803d8da:	4622      	mov	r2, r4
 803d8dc:	e7dd      	b.n	803d89a <_realloc_r+0x2ee>
 803d8de:	4621      	mov	r1, r4
 803d8e0:	f7f8 fbe4 	bl	80360ac <memmove>
 803d8e4:	e7df      	b.n	803d8a6 <_realloc_r+0x2fa>
 803d8e6:	4637      	mov	r7, r6
 803d8e8:	e6bf      	b.n	803d66a <_realloc_r+0xbe>
 803d8ea:	431f      	orrs	r7, r3
 803d8ec:	f8c9 7004 	str.w	r7, [r9, #4]
 803d8f0:	6853      	ldr	r3, [r2, #4]
 803d8f2:	f043 0301 	orr.w	r3, r3, #1
 803d8f6:	6053      	str	r3, [r2, #4]
 803d8f8:	e6d3      	b.n	803d6a2 <_realloc_r+0xf6>
 803d8fa:	bf00      	nop

0803d8fc <sulp>:
 803d8fc:	b570      	push	{r4, r5, r6, lr}
 803d8fe:	4604      	mov	r4, r0
 803d900:	460d      	mov	r5, r1
 803d902:	ec45 4b10 	vmov	d0, r4, r5
 803d906:	4616      	mov	r6, r2
 803d908:	f7ff fc7c 	bl	803d204 <__ulp>
 803d90c:	ec51 0b10 	vmov	r0, r1, d0
 803d910:	b17e      	cbz	r6, 803d932 <sulp+0x36>
 803d912:	f3c5 530a 	ubfx	r3, r5, #20, #11
 803d916:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803d91a:	2b00      	cmp	r3, #0
 803d91c:	dd09      	ble.n	803d932 <sulp+0x36>
 803d91e:	051b      	lsls	r3, r3, #20
 803d920:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 803d924:	2400      	movs	r4, #0
 803d926:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 803d92a:	4622      	mov	r2, r4
 803d92c:	462b      	mov	r3, r5
 803d92e:	f7d2 fe7b 	bl	8010628 <__aeabi_dmul>
 803d932:	ec41 0b10 	vmov	d0, r0, r1
 803d936:	bd70      	pop	{r4, r5, r6, pc}

0803d938 <_strtod_l>:
 803d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d93c:	b09f      	sub	sp, #124	@ 0x7c
 803d93e:	460c      	mov	r4, r1
 803d940:	9217      	str	r2, [sp, #92]	@ 0x5c
 803d942:	2200      	movs	r2, #0
 803d944:	921a      	str	r2, [sp, #104]	@ 0x68
 803d946:	9005      	str	r0, [sp, #20]
 803d948:	f04f 0a00 	mov.w	sl, #0
 803d94c:	f04f 0b00 	mov.w	fp, #0
 803d950:	460a      	mov	r2, r1
 803d952:	9219      	str	r2, [sp, #100]	@ 0x64
 803d954:	7811      	ldrb	r1, [r2, #0]
 803d956:	292b      	cmp	r1, #43	@ 0x2b
 803d958:	d04a      	beq.n	803d9f0 <_strtod_l+0xb8>
 803d95a:	d838      	bhi.n	803d9ce <_strtod_l+0x96>
 803d95c:	290d      	cmp	r1, #13
 803d95e:	d832      	bhi.n	803d9c6 <_strtod_l+0x8e>
 803d960:	2908      	cmp	r1, #8
 803d962:	d832      	bhi.n	803d9ca <_strtod_l+0x92>
 803d964:	2900      	cmp	r1, #0
 803d966:	d03b      	beq.n	803d9e0 <_strtod_l+0xa8>
 803d968:	2200      	movs	r2, #0
 803d96a:	920b      	str	r2, [sp, #44]	@ 0x2c
 803d96c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 803d96e:	782a      	ldrb	r2, [r5, #0]
 803d970:	2a30      	cmp	r2, #48	@ 0x30
 803d972:	f040 80b3 	bne.w	803dadc <_strtod_l+0x1a4>
 803d976:	786a      	ldrb	r2, [r5, #1]
 803d978:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803d97c:	2a58      	cmp	r2, #88	@ 0x58
 803d97e:	d16e      	bne.n	803da5e <_strtod_l+0x126>
 803d980:	9302      	str	r3, [sp, #8]
 803d982:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803d984:	9301      	str	r3, [sp, #4]
 803d986:	ab1a      	add	r3, sp, #104	@ 0x68
 803d988:	9300      	str	r3, [sp, #0]
 803d98a:	4a8e      	ldr	r2, [pc, #568]	@ (803dbc4 <_strtod_l+0x28c>)
 803d98c:	9805      	ldr	r0, [sp, #20]
 803d98e:	ab1b      	add	r3, sp, #108	@ 0x6c
 803d990:	a919      	add	r1, sp, #100	@ 0x64
 803d992:	f001 fa51 	bl	803ee38 <__gethex>
 803d996:	f010 060f 	ands.w	r6, r0, #15
 803d99a:	4604      	mov	r4, r0
 803d99c:	d005      	beq.n	803d9aa <_strtod_l+0x72>
 803d99e:	2e06      	cmp	r6, #6
 803d9a0:	d128      	bne.n	803d9f4 <_strtod_l+0xbc>
 803d9a2:	3501      	adds	r5, #1
 803d9a4:	2300      	movs	r3, #0
 803d9a6:	9519      	str	r5, [sp, #100]	@ 0x64
 803d9a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 803d9aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803d9ac:	2b00      	cmp	r3, #0
 803d9ae:	f040 858e 	bne.w	803e4ce <_strtod_l+0xb96>
 803d9b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803d9b4:	b1cb      	cbz	r3, 803d9ea <_strtod_l+0xb2>
 803d9b6:	4652      	mov	r2, sl
 803d9b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 803d9bc:	ec43 2b10 	vmov	d0, r2, r3
 803d9c0:	b01f      	add	sp, #124	@ 0x7c
 803d9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d9c6:	2920      	cmp	r1, #32
 803d9c8:	d1ce      	bne.n	803d968 <_strtod_l+0x30>
 803d9ca:	3201      	adds	r2, #1
 803d9cc:	e7c1      	b.n	803d952 <_strtod_l+0x1a>
 803d9ce:	292d      	cmp	r1, #45	@ 0x2d
 803d9d0:	d1ca      	bne.n	803d968 <_strtod_l+0x30>
 803d9d2:	2101      	movs	r1, #1
 803d9d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 803d9d6:	1c51      	adds	r1, r2, #1
 803d9d8:	9119      	str	r1, [sp, #100]	@ 0x64
 803d9da:	7852      	ldrb	r2, [r2, #1]
 803d9dc:	2a00      	cmp	r2, #0
 803d9de:	d1c5      	bne.n	803d96c <_strtod_l+0x34>
 803d9e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803d9e2:	9419      	str	r4, [sp, #100]	@ 0x64
 803d9e4:	2b00      	cmp	r3, #0
 803d9e6:	f040 8570 	bne.w	803e4ca <_strtod_l+0xb92>
 803d9ea:	4652      	mov	r2, sl
 803d9ec:	465b      	mov	r3, fp
 803d9ee:	e7e5      	b.n	803d9bc <_strtod_l+0x84>
 803d9f0:	2100      	movs	r1, #0
 803d9f2:	e7ef      	b.n	803d9d4 <_strtod_l+0x9c>
 803d9f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 803d9f6:	b13a      	cbz	r2, 803da08 <_strtod_l+0xd0>
 803d9f8:	2135      	movs	r1, #53	@ 0x35
 803d9fa:	a81c      	add	r0, sp, #112	@ 0x70
 803d9fc:	f7ff fcfc 	bl	803d3f8 <__copybits>
 803da00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803da02:	9805      	ldr	r0, [sp, #20]
 803da04:	f7ff f8fd 	bl	803cc02 <_Bfree>
 803da08:	3e01      	subs	r6, #1
 803da0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 803da0c:	2e04      	cmp	r6, #4
 803da0e:	d806      	bhi.n	803da1e <_strtod_l+0xe6>
 803da10:	e8df f006 	tbb	[pc, r6]
 803da14:	201d0314 	.word	0x201d0314
 803da18:	14          	.byte	0x14
 803da19:	00          	.byte	0x00
 803da1a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 803da1e:	05e1      	lsls	r1, r4, #23
 803da20:	bf48      	it	mi
 803da22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 803da26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803da2a:	0d1b      	lsrs	r3, r3, #20
 803da2c:	051b      	lsls	r3, r3, #20
 803da2e:	2b00      	cmp	r3, #0
 803da30:	d1bb      	bne.n	803d9aa <_strtod_l+0x72>
 803da32:	f7f9 fd59 	bl	80374e8 <__errno>
 803da36:	2322      	movs	r3, #34	@ 0x22
 803da38:	6003      	str	r3, [r0, #0]
 803da3a:	e7b6      	b.n	803d9aa <_strtod_l+0x72>
 803da3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 803da40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 803da44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 803da48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 803da4c:	e7e7      	b.n	803da1e <_strtod_l+0xe6>
 803da4e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 803dbcc <_strtod_l+0x294>
 803da52:	e7e4      	b.n	803da1e <_strtod_l+0xe6>
 803da54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 803da58:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 803da5c:	e7df      	b.n	803da1e <_strtod_l+0xe6>
 803da5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803da60:	1c5a      	adds	r2, r3, #1
 803da62:	9219      	str	r2, [sp, #100]	@ 0x64
 803da64:	785b      	ldrb	r3, [r3, #1]
 803da66:	2b30      	cmp	r3, #48	@ 0x30
 803da68:	d0f9      	beq.n	803da5e <_strtod_l+0x126>
 803da6a:	2b00      	cmp	r3, #0
 803da6c:	d09d      	beq.n	803d9aa <_strtod_l+0x72>
 803da6e:	2301      	movs	r3, #1
 803da70:	9309      	str	r3, [sp, #36]	@ 0x24
 803da72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803da74:	930c      	str	r3, [sp, #48]	@ 0x30
 803da76:	2300      	movs	r3, #0
 803da78:	9308      	str	r3, [sp, #32]
 803da7a:	930a      	str	r3, [sp, #40]	@ 0x28
 803da7c:	461f      	mov	r7, r3
 803da7e:	220a      	movs	r2, #10
 803da80:	9819      	ldr	r0, [sp, #100]	@ 0x64
 803da82:	7805      	ldrb	r5, [r0, #0]
 803da84:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 803da88:	b2d9      	uxtb	r1, r3
 803da8a:	2909      	cmp	r1, #9
 803da8c:	d928      	bls.n	803dae0 <_strtod_l+0x1a8>
 803da8e:	494e      	ldr	r1, [pc, #312]	@ (803dbc8 <_strtod_l+0x290>)
 803da90:	2201      	movs	r2, #1
 803da92:	f7f8 fb5a 	bl	803614a <strncmp>
 803da96:	2800      	cmp	r0, #0
 803da98:	d032      	beq.n	803db00 <_strtod_l+0x1c8>
 803da9a:	2000      	movs	r0, #0
 803da9c:	462a      	mov	r2, r5
 803da9e:	4681      	mov	r9, r0
 803daa0:	463d      	mov	r5, r7
 803daa2:	4603      	mov	r3, r0
 803daa4:	2a65      	cmp	r2, #101	@ 0x65
 803daa6:	d001      	beq.n	803daac <_strtod_l+0x174>
 803daa8:	2a45      	cmp	r2, #69	@ 0x45
 803daaa:	d114      	bne.n	803dad6 <_strtod_l+0x19e>
 803daac:	b91d      	cbnz	r5, 803dab6 <_strtod_l+0x17e>
 803daae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803dab0:	4302      	orrs	r2, r0
 803dab2:	d095      	beq.n	803d9e0 <_strtod_l+0xa8>
 803dab4:	2500      	movs	r5, #0
 803dab6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 803dab8:	1c62      	adds	r2, r4, #1
 803daba:	9219      	str	r2, [sp, #100]	@ 0x64
 803dabc:	7862      	ldrb	r2, [r4, #1]
 803dabe:	2a2b      	cmp	r2, #43	@ 0x2b
 803dac0:	d077      	beq.n	803dbb2 <_strtod_l+0x27a>
 803dac2:	2a2d      	cmp	r2, #45	@ 0x2d
 803dac4:	d07b      	beq.n	803dbbe <_strtod_l+0x286>
 803dac6:	f04f 0c00 	mov.w	ip, #0
 803daca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 803dace:	2909      	cmp	r1, #9
 803dad0:	f240 8082 	bls.w	803dbd8 <_strtod_l+0x2a0>
 803dad4:	9419      	str	r4, [sp, #100]	@ 0x64
 803dad6:	f04f 0800 	mov.w	r8, #0
 803dada:	e0a2      	b.n	803dc22 <_strtod_l+0x2ea>
 803dadc:	2300      	movs	r3, #0
 803dade:	e7c7      	b.n	803da70 <_strtod_l+0x138>
 803dae0:	2f08      	cmp	r7, #8
 803dae2:	bfd5      	itete	le
 803dae4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 803dae6:	9908      	ldrgt	r1, [sp, #32]
 803dae8:	fb02 3301 	mlale	r3, r2, r1, r3
 803daec:	fb02 3301 	mlagt	r3, r2, r1, r3
 803daf0:	f100 0001 	add.w	r0, r0, #1
 803daf4:	bfd4      	ite	le
 803daf6:	930a      	strle	r3, [sp, #40]	@ 0x28
 803daf8:	9308      	strgt	r3, [sp, #32]
 803dafa:	3701      	adds	r7, #1
 803dafc:	9019      	str	r0, [sp, #100]	@ 0x64
 803dafe:	e7bf      	b.n	803da80 <_strtod_l+0x148>
 803db00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803db02:	1c5a      	adds	r2, r3, #1
 803db04:	9219      	str	r2, [sp, #100]	@ 0x64
 803db06:	785a      	ldrb	r2, [r3, #1]
 803db08:	b37f      	cbz	r7, 803db6a <_strtod_l+0x232>
 803db0a:	4681      	mov	r9, r0
 803db0c:	463d      	mov	r5, r7
 803db0e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 803db12:	2b09      	cmp	r3, #9
 803db14:	d912      	bls.n	803db3c <_strtod_l+0x204>
 803db16:	2301      	movs	r3, #1
 803db18:	e7c4      	b.n	803daa4 <_strtod_l+0x16c>
 803db1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803db1c:	1c5a      	adds	r2, r3, #1
 803db1e:	9219      	str	r2, [sp, #100]	@ 0x64
 803db20:	785a      	ldrb	r2, [r3, #1]
 803db22:	3001      	adds	r0, #1
 803db24:	2a30      	cmp	r2, #48	@ 0x30
 803db26:	d0f8      	beq.n	803db1a <_strtod_l+0x1e2>
 803db28:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 803db2c:	2b08      	cmp	r3, #8
 803db2e:	f200 84d3 	bhi.w	803e4d8 <_strtod_l+0xba0>
 803db32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803db34:	930c      	str	r3, [sp, #48]	@ 0x30
 803db36:	4681      	mov	r9, r0
 803db38:	2000      	movs	r0, #0
 803db3a:	4605      	mov	r5, r0
 803db3c:	3a30      	subs	r2, #48	@ 0x30
 803db3e:	f100 0301 	add.w	r3, r0, #1
 803db42:	d02a      	beq.n	803db9a <_strtod_l+0x262>
 803db44:	4499      	add	r9, r3
 803db46:	eb00 0c05 	add.w	ip, r0, r5
 803db4a:	462b      	mov	r3, r5
 803db4c:	210a      	movs	r1, #10
 803db4e:	4563      	cmp	r3, ip
 803db50:	d10d      	bne.n	803db6e <_strtod_l+0x236>
 803db52:	1c69      	adds	r1, r5, #1
 803db54:	4401      	add	r1, r0
 803db56:	4428      	add	r0, r5
 803db58:	2808      	cmp	r0, #8
 803db5a:	dc16      	bgt.n	803db8a <_strtod_l+0x252>
 803db5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 803db5e:	230a      	movs	r3, #10
 803db60:	fb03 2300 	mla	r3, r3, r0, r2
 803db64:	930a      	str	r3, [sp, #40]	@ 0x28
 803db66:	2300      	movs	r3, #0
 803db68:	e018      	b.n	803db9c <_strtod_l+0x264>
 803db6a:	4638      	mov	r0, r7
 803db6c:	e7da      	b.n	803db24 <_strtod_l+0x1ec>
 803db6e:	2b08      	cmp	r3, #8
 803db70:	f103 0301 	add.w	r3, r3, #1
 803db74:	dc03      	bgt.n	803db7e <_strtod_l+0x246>
 803db76:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 803db78:	434e      	muls	r6, r1
 803db7a:	960a      	str	r6, [sp, #40]	@ 0x28
 803db7c:	e7e7      	b.n	803db4e <_strtod_l+0x216>
 803db7e:	2b10      	cmp	r3, #16
 803db80:	bfde      	ittt	le
 803db82:	9e08      	ldrle	r6, [sp, #32]
 803db84:	434e      	mulle	r6, r1
 803db86:	9608      	strle	r6, [sp, #32]
 803db88:	e7e1      	b.n	803db4e <_strtod_l+0x216>
 803db8a:	280f      	cmp	r0, #15
 803db8c:	dceb      	bgt.n	803db66 <_strtod_l+0x22e>
 803db8e:	9808      	ldr	r0, [sp, #32]
 803db90:	230a      	movs	r3, #10
 803db92:	fb03 2300 	mla	r3, r3, r0, r2
 803db96:	9308      	str	r3, [sp, #32]
 803db98:	e7e5      	b.n	803db66 <_strtod_l+0x22e>
 803db9a:	4629      	mov	r1, r5
 803db9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803db9e:	1c50      	adds	r0, r2, #1
 803dba0:	9019      	str	r0, [sp, #100]	@ 0x64
 803dba2:	7852      	ldrb	r2, [r2, #1]
 803dba4:	4618      	mov	r0, r3
 803dba6:	460d      	mov	r5, r1
 803dba8:	e7b1      	b.n	803db0e <_strtod_l+0x1d6>
 803dbaa:	f04f 0900 	mov.w	r9, #0
 803dbae:	2301      	movs	r3, #1
 803dbb0:	e77d      	b.n	803daae <_strtod_l+0x176>
 803dbb2:	f04f 0c00 	mov.w	ip, #0
 803dbb6:	1ca2      	adds	r2, r4, #2
 803dbb8:	9219      	str	r2, [sp, #100]	@ 0x64
 803dbba:	78a2      	ldrb	r2, [r4, #2]
 803dbbc:	e785      	b.n	803daca <_strtod_l+0x192>
 803dbbe:	f04f 0c01 	mov.w	ip, #1
 803dbc2:	e7f8      	b.n	803dbb6 <_strtod_l+0x27e>
 803dbc4:	08045394 	.word	0x08045394
 803dbc8:	08044dfa 	.word	0x08044dfa
 803dbcc:	7ff00000 	.word	0x7ff00000
 803dbd0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803dbd2:	1c51      	adds	r1, r2, #1
 803dbd4:	9119      	str	r1, [sp, #100]	@ 0x64
 803dbd6:	7852      	ldrb	r2, [r2, #1]
 803dbd8:	2a30      	cmp	r2, #48	@ 0x30
 803dbda:	d0f9      	beq.n	803dbd0 <_strtod_l+0x298>
 803dbdc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 803dbe0:	2908      	cmp	r1, #8
 803dbe2:	f63f af78 	bhi.w	803dad6 <_strtod_l+0x19e>
 803dbe6:	3a30      	subs	r2, #48	@ 0x30
 803dbe8:	920e      	str	r2, [sp, #56]	@ 0x38
 803dbea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803dbec:	920f      	str	r2, [sp, #60]	@ 0x3c
 803dbee:	f04f 080a 	mov.w	r8, #10
 803dbf2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803dbf4:	1c56      	adds	r6, r2, #1
 803dbf6:	9619      	str	r6, [sp, #100]	@ 0x64
 803dbf8:	7852      	ldrb	r2, [r2, #1]
 803dbfa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 803dbfe:	f1be 0f09 	cmp.w	lr, #9
 803dc02:	d939      	bls.n	803dc78 <_strtod_l+0x340>
 803dc04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 803dc06:	1a76      	subs	r6, r6, r1
 803dc08:	2e08      	cmp	r6, #8
 803dc0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 803dc0e:	dc03      	bgt.n	803dc18 <_strtod_l+0x2e0>
 803dc10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 803dc12:	4588      	cmp	r8, r1
 803dc14:	bfa8      	it	ge
 803dc16:	4688      	movge	r8, r1
 803dc18:	f1bc 0f00 	cmp.w	ip, #0
 803dc1c:	d001      	beq.n	803dc22 <_strtod_l+0x2ea>
 803dc1e:	f1c8 0800 	rsb	r8, r8, #0
 803dc22:	2d00      	cmp	r5, #0
 803dc24:	d14e      	bne.n	803dcc4 <_strtod_l+0x38c>
 803dc26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 803dc28:	4308      	orrs	r0, r1
 803dc2a:	f47f aebe 	bne.w	803d9aa <_strtod_l+0x72>
 803dc2e:	2b00      	cmp	r3, #0
 803dc30:	f47f aed6 	bne.w	803d9e0 <_strtod_l+0xa8>
 803dc34:	2a69      	cmp	r2, #105	@ 0x69
 803dc36:	d028      	beq.n	803dc8a <_strtod_l+0x352>
 803dc38:	dc25      	bgt.n	803dc86 <_strtod_l+0x34e>
 803dc3a:	2a49      	cmp	r2, #73	@ 0x49
 803dc3c:	d025      	beq.n	803dc8a <_strtod_l+0x352>
 803dc3e:	2a4e      	cmp	r2, #78	@ 0x4e
 803dc40:	f47f aece 	bne.w	803d9e0 <_strtod_l+0xa8>
 803dc44:	499b      	ldr	r1, [pc, #620]	@ (803deb4 <_strtod_l+0x57c>)
 803dc46:	a819      	add	r0, sp, #100	@ 0x64
 803dc48:	f001 fb18 	bl	803f27c <__match>
 803dc4c:	2800      	cmp	r0, #0
 803dc4e:	f43f aec7 	beq.w	803d9e0 <_strtod_l+0xa8>
 803dc52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803dc54:	781b      	ldrb	r3, [r3, #0]
 803dc56:	2b28      	cmp	r3, #40	@ 0x28
 803dc58:	d12e      	bne.n	803dcb8 <_strtod_l+0x380>
 803dc5a:	4997      	ldr	r1, [pc, #604]	@ (803deb8 <_strtod_l+0x580>)
 803dc5c:	aa1c      	add	r2, sp, #112	@ 0x70
 803dc5e:	a819      	add	r0, sp, #100	@ 0x64
 803dc60:	f001 fb20 	bl	803f2a4 <__hexnan>
 803dc64:	2805      	cmp	r0, #5
 803dc66:	d127      	bne.n	803dcb8 <_strtod_l+0x380>
 803dc68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 803dc6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 803dc6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 803dc72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 803dc76:	e698      	b.n	803d9aa <_strtod_l+0x72>
 803dc78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 803dc7a:	fb08 2101 	mla	r1, r8, r1, r2
 803dc7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 803dc82:	920e      	str	r2, [sp, #56]	@ 0x38
 803dc84:	e7b5      	b.n	803dbf2 <_strtod_l+0x2ba>
 803dc86:	2a6e      	cmp	r2, #110	@ 0x6e
 803dc88:	e7da      	b.n	803dc40 <_strtod_l+0x308>
 803dc8a:	498c      	ldr	r1, [pc, #560]	@ (803debc <_strtod_l+0x584>)
 803dc8c:	a819      	add	r0, sp, #100	@ 0x64
 803dc8e:	f001 faf5 	bl	803f27c <__match>
 803dc92:	2800      	cmp	r0, #0
 803dc94:	f43f aea4 	beq.w	803d9e0 <_strtod_l+0xa8>
 803dc98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803dc9a:	4989      	ldr	r1, [pc, #548]	@ (803dec0 <_strtod_l+0x588>)
 803dc9c:	3b01      	subs	r3, #1
 803dc9e:	a819      	add	r0, sp, #100	@ 0x64
 803dca0:	9319      	str	r3, [sp, #100]	@ 0x64
 803dca2:	f001 faeb 	bl	803f27c <__match>
 803dca6:	b910      	cbnz	r0, 803dcae <_strtod_l+0x376>
 803dca8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803dcaa:	3301      	adds	r3, #1
 803dcac:	9319      	str	r3, [sp, #100]	@ 0x64
 803dcae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 803ded0 <_strtod_l+0x598>
 803dcb2:	f04f 0a00 	mov.w	sl, #0
 803dcb6:	e678      	b.n	803d9aa <_strtod_l+0x72>
 803dcb8:	4882      	ldr	r0, [pc, #520]	@ (803dec4 <_strtod_l+0x58c>)
 803dcba:	f001 f805 	bl	803ecc8 <nan>
 803dcbe:	ec5b ab10 	vmov	sl, fp, d0
 803dcc2:	e672      	b.n	803d9aa <_strtod_l+0x72>
 803dcc4:	eba8 0309 	sub.w	r3, r8, r9
 803dcc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 803dcca:	9309      	str	r3, [sp, #36]	@ 0x24
 803dccc:	2f00      	cmp	r7, #0
 803dcce:	bf08      	it	eq
 803dcd0:	462f      	moveq	r7, r5
 803dcd2:	2d10      	cmp	r5, #16
 803dcd4:	462c      	mov	r4, r5
 803dcd6:	bfa8      	it	ge
 803dcd8:	2410      	movge	r4, #16
 803dcda:	f7d2 fc2b 	bl	8010534 <__aeabi_ui2d>
 803dcde:	2d09      	cmp	r5, #9
 803dce0:	4682      	mov	sl, r0
 803dce2:	468b      	mov	fp, r1
 803dce4:	dc13      	bgt.n	803dd0e <_strtod_l+0x3d6>
 803dce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803dce8:	2b00      	cmp	r3, #0
 803dcea:	f43f ae5e 	beq.w	803d9aa <_strtod_l+0x72>
 803dcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803dcf0:	dd78      	ble.n	803dde4 <_strtod_l+0x4ac>
 803dcf2:	2b16      	cmp	r3, #22
 803dcf4:	dc5f      	bgt.n	803ddb6 <_strtod_l+0x47e>
 803dcf6:	4974      	ldr	r1, [pc, #464]	@ (803dec8 <_strtod_l+0x590>)
 803dcf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 803dcfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 803dd00:	4652      	mov	r2, sl
 803dd02:	465b      	mov	r3, fp
 803dd04:	f7d2 fc90 	bl	8010628 <__aeabi_dmul>
 803dd08:	4682      	mov	sl, r0
 803dd0a:	468b      	mov	fp, r1
 803dd0c:	e64d      	b.n	803d9aa <_strtod_l+0x72>
 803dd0e:	4b6e      	ldr	r3, [pc, #440]	@ (803dec8 <_strtod_l+0x590>)
 803dd10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 803dd14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 803dd18:	f7d2 fc86 	bl	8010628 <__aeabi_dmul>
 803dd1c:	4682      	mov	sl, r0
 803dd1e:	9808      	ldr	r0, [sp, #32]
 803dd20:	468b      	mov	fp, r1
 803dd22:	f7d2 fc07 	bl	8010534 <__aeabi_ui2d>
 803dd26:	4602      	mov	r2, r0
 803dd28:	460b      	mov	r3, r1
 803dd2a:	4650      	mov	r0, sl
 803dd2c:	4659      	mov	r1, fp
 803dd2e:	f7d2 fac5 	bl	80102bc <__adddf3>
 803dd32:	2d0f      	cmp	r5, #15
 803dd34:	4682      	mov	sl, r0
 803dd36:	468b      	mov	fp, r1
 803dd38:	ddd5      	ble.n	803dce6 <_strtod_l+0x3ae>
 803dd3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803dd3c:	1b2c      	subs	r4, r5, r4
 803dd3e:	441c      	add	r4, r3
 803dd40:	2c00      	cmp	r4, #0
 803dd42:	f340 8096 	ble.w	803de72 <_strtod_l+0x53a>
 803dd46:	f014 030f 	ands.w	r3, r4, #15
 803dd4a:	d00a      	beq.n	803dd62 <_strtod_l+0x42a>
 803dd4c:	495e      	ldr	r1, [pc, #376]	@ (803dec8 <_strtod_l+0x590>)
 803dd4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 803dd52:	4652      	mov	r2, sl
 803dd54:	465b      	mov	r3, fp
 803dd56:	e9d1 0100 	ldrd	r0, r1, [r1]
 803dd5a:	f7d2 fc65 	bl	8010628 <__aeabi_dmul>
 803dd5e:	4682      	mov	sl, r0
 803dd60:	468b      	mov	fp, r1
 803dd62:	f034 040f 	bics.w	r4, r4, #15
 803dd66:	d073      	beq.n	803de50 <_strtod_l+0x518>
 803dd68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 803dd6c:	dd48      	ble.n	803de00 <_strtod_l+0x4c8>
 803dd6e:	2400      	movs	r4, #0
 803dd70:	46a0      	mov	r8, r4
 803dd72:	940a      	str	r4, [sp, #40]	@ 0x28
 803dd74:	46a1      	mov	r9, r4
 803dd76:	9a05      	ldr	r2, [sp, #20]
 803dd78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 803ded0 <_strtod_l+0x598>
 803dd7c:	2322      	movs	r3, #34	@ 0x22
 803dd7e:	6013      	str	r3, [r2, #0]
 803dd80:	f04f 0a00 	mov.w	sl, #0
 803dd84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803dd86:	2b00      	cmp	r3, #0
 803dd88:	f43f ae0f 	beq.w	803d9aa <_strtod_l+0x72>
 803dd8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803dd8e:	9805      	ldr	r0, [sp, #20]
 803dd90:	f7fe ff37 	bl	803cc02 <_Bfree>
 803dd94:	9805      	ldr	r0, [sp, #20]
 803dd96:	4649      	mov	r1, r9
 803dd98:	f7fe ff33 	bl	803cc02 <_Bfree>
 803dd9c:	9805      	ldr	r0, [sp, #20]
 803dd9e:	4641      	mov	r1, r8
 803dda0:	f7fe ff2f 	bl	803cc02 <_Bfree>
 803dda4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 803dda6:	9805      	ldr	r0, [sp, #20]
 803dda8:	f7fe ff2b 	bl	803cc02 <_Bfree>
 803ddac:	9805      	ldr	r0, [sp, #20]
 803ddae:	4621      	mov	r1, r4
 803ddb0:	f7fe ff27 	bl	803cc02 <_Bfree>
 803ddb4:	e5f9      	b.n	803d9aa <_strtod_l+0x72>
 803ddb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803ddb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 803ddbc:	4293      	cmp	r3, r2
 803ddbe:	dbbc      	blt.n	803dd3a <_strtod_l+0x402>
 803ddc0:	4c41      	ldr	r4, [pc, #260]	@ (803dec8 <_strtod_l+0x590>)
 803ddc2:	f1c5 050f 	rsb	r5, r5, #15
 803ddc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 803ddca:	4652      	mov	r2, sl
 803ddcc:	465b      	mov	r3, fp
 803ddce:	e9d1 0100 	ldrd	r0, r1, [r1]
 803ddd2:	f7d2 fc29 	bl	8010628 <__aeabi_dmul>
 803ddd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803ddd8:	1b5d      	subs	r5, r3, r5
 803ddda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 803ddde:	e9d4 2300 	ldrd	r2, r3, [r4]
 803dde2:	e78f      	b.n	803dd04 <_strtod_l+0x3cc>
 803dde4:	3316      	adds	r3, #22
 803dde6:	dba8      	blt.n	803dd3a <_strtod_l+0x402>
 803dde8:	4b37      	ldr	r3, [pc, #220]	@ (803dec8 <_strtod_l+0x590>)
 803ddea:	eba9 0808 	sub.w	r8, r9, r8
 803ddee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 803ddf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 803ddf6:	4650      	mov	r0, sl
 803ddf8:	4659      	mov	r1, fp
 803ddfa:	f7d2 fd3f 	bl	801087c <__aeabi_ddiv>
 803ddfe:	e783      	b.n	803dd08 <_strtod_l+0x3d0>
 803de00:	4b32      	ldr	r3, [pc, #200]	@ (803decc <_strtod_l+0x594>)
 803de02:	9308      	str	r3, [sp, #32]
 803de04:	2300      	movs	r3, #0
 803de06:	1124      	asrs	r4, r4, #4
 803de08:	4650      	mov	r0, sl
 803de0a:	4659      	mov	r1, fp
 803de0c:	461e      	mov	r6, r3
 803de0e:	2c01      	cmp	r4, #1
 803de10:	dc21      	bgt.n	803de56 <_strtod_l+0x51e>
 803de12:	b10b      	cbz	r3, 803de18 <_strtod_l+0x4e0>
 803de14:	4682      	mov	sl, r0
 803de16:	468b      	mov	fp, r1
 803de18:	492c      	ldr	r1, [pc, #176]	@ (803decc <_strtod_l+0x594>)
 803de1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 803de1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 803de22:	4652      	mov	r2, sl
 803de24:	465b      	mov	r3, fp
 803de26:	e9d1 0100 	ldrd	r0, r1, [r1]
 803de2a:	f7d2 fbfd 	bl	8010628 <__aeabi_dmul>
 803de2e:	4b28      	ldr	r3, [pc, #160]	@ (803ded0 <_strtod_l+0x598>)
 803de30:	460a      	mov	r2, r1
 803de32:	400b      	ands	r3, r1
 803de34:	4927      	ldr	r1, [pc, #156]	@ (803ded4 <_strtod_l+0x59c>)
 803de36:	428b      	cmp	r3, r1
 803de38:	4682      	mov	sl, r0
 803de3a:	d898      	bhi.n	803dd6e <_strtod_l+0x436>
 803de3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 803de40:	428b      	cmp	r3, r1
 803de42:	bf86      	itte	hi
 803de44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 803ded8 <_strtod_l+0x5a0>
 803de48:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 803de4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 803de50:	2300      	movs	r3, #0
 803de52:	9308      	str	r3, [sp, #32]
 803de54:	e07a      	b.n	803df4c <_strtod_l+0x614>
 803de56:	07e2      	lsls	r2, r4, #31
 803de58:	d505      	bpl.n	803de66 <_strtod_l+0x52e>
 803de5a:	9b08      	ldr	r3, [sp, #32]
 803de5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 803de60:	f7d2 fbe2 	bl	8010628 <__aeabi_dmul>
 803de64:	2301      	movs	r3, #1
 803de66:	9a08      	ldr	r2, [sp, #32]
 803de68:	3208      	adds	r2, #8
 803de6a:	3601      	adds	r6, #1
 803de6c:	1064      	asrs	r4, r4, #1
 803de6e:	9208      	str	r2, [sp, #32]
 803de70:	e7cd      	b.n	803de0e <_strtod_l+0x4d6>
 803de72:	d0ed      	beq.n	803de50 <_strtod_l+0x518>
 803de74:	4264      	negs	r4, r4
 803de76:	f014 020f 	ands.w	r2, r4, #15
 803de7a:	d00a      	beq.n	803de92 <_strtod_l+0x55a>
 803de7c:	4b12      	ldr	r3, [pc, #72]	@ (803dec8 <_strtod_l+0x590>)
 803de7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803de82:	4650      	mov	r0, sl
 803de84:	4659      	mov	r1, fp
 803de86:	e9d3 2300 	ldrd	r2, r3, [r3]
 803de8a:	f7d2 fcf7 	bl	801087c <__aeabi_ddiv>
 803de8e:	4682      	mov	sl, r0
 803de90:	468b      	mov	fp, r1
 803de92:	1124      	asrs	r4, r4, #4
 803de94:	d0dc      	beq.n	803de50 <_strtod_l+0x518>
 803de96:	2c1f      	cmp	r4, #31
 803de98:	dd20      	ble.n	803dedc <_strtod_l+0x5a4>
 803de9a:	2400      	movs	r4, #0
 803de9c:	46a0      	mov	r8, r4
 803de9e:	940a      	str	r4, [sp, #40]	@ 0x28
 803dea0:	46a1      	mov	r9, r4
 803dea2:	9a05      	ldr	r2, [sp, #20]
 803dea4:	2322      	movs	r3, #34	@ 0x22
 803dea6:	f04f 0a00 	mov.w	sl, #0
 803deaa:	f04f 0b00 	mov.w	fp, #0
 803deae:	6013      	str	r3, [r2, #0]
 803deb0:	e768      	b.n	803dd84 <_strtod_l+0x44c>
 803deb2:	bf00      	nop
 803deb4:	08044dfd 	.word	0x08044dfd
 803deb8:	08045380 	.word	0x08045380
 803debc:	08044c6d 	.word	0x08044c6d
 803dec0:	08045128 	.word	0x08045128
 803dec4:	08044c67 	.word	0x08044c67
 803dec8:	080452b8 	.word	0x080452b8
 803decc:	08045290 	.word	0x08045290
 803ded0:	7ff00000 	.word	0x7ff00000
 803ded4:	7ca00000 	.word	0x7ca00000
 803ded8:	7fefffff 	.word	0x7fefffff
 803dedc:	f014 0310 	ands.w	r3, r4, #16
 803dee0:	bf18      	it	ne
 803dee2:	236a      	movne	r3, #106	@ 0x6a
 803dee4:	4ea9      	ldr	r6, [pc, #676]	@ (803e18c <_strtod_l+0x854>)
 803dee6:	9308      	str	r3, [sp, #32]
 803dee8:	4650      	mov	r0, sl
 803deea:	4659      	mov	r1, fp
 803deec:	2300      	movs	r3, #0
 803deee:	07e2      	lsls	r2, r4, #31
 803def0:	d504      	bpl.n	803defc <_strtod_l+0x5c4>
 803def2:	e9d6 2300 	ldrd	r2, r3, [r6]
 803def6:	f7d2 fb97 	bl	8010628 <__aeabi_dmul>
 803defa:	2301      	movs	r3, #1
 803defc:	1064      	asrs	r4, r4, #1
 803defe:	f106 0608 	add.w	r6, r6, #8
 803df02:	d1f4      	bne.n	803deee <_strtod_l+0x5b6>
 803df04:	b10b      	cbz	r3, 803df0a <_strtod_l+0x5d2>
 803df06:	4682      	mov	sl, r0
 803df08:	468b      	mov	fp, r1
 803df0a:	9b08      	ldr	r3, [sp, #32]
 803df0c:	b1b3      	cbz	r3, 803df3c <_strtod_l+0x604>
 803df0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 803df12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 803df16:	2b00      	cmp	r3, #0
 803df18:	4659      	mov	r1, fp
 803df1a:	dd0f      	ble.n	803df3c <_strtod_l+0x604>
 803df1c:	2b1f      	cmp	r3, #31
 803df1e:	dd55      	ble.n	803dfcc <_strtod_l+0x694>
 803df20:	2b34      	cmp	r3, #52	@ 0x34
 803df22:	bfde      	ittt	le
 803df24:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 803df28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 803df2c:	4093      	lslle	r3, r2
 803df2e:	f04f 0a00 	mov.w	sl, #0
 803df32:	bfcc      	ite	gt
 803df34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 803df38:	ea03 0b01 	andle.w	fp, r3, r1
 803df3c:	2200      	movs	r2, #0
 803df3e:	2300      	movs	r3, #0
 803df40:	4650      	mov	r0, sl
 803df42:	4659      	mov	r1, fp
 803df44:	f7d2 fdd8 	bl	8010af8 <__aeabi_dcmpeq>
 803df48:	2800      	cmp	r0, #0
 803df4a:	d1a6      	bne.n	803de9a <_strtod_l+0x562>
 803df4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803df4e:	9300      	str	r3, [sp, #0]
 803df50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 803df52:	9805      	ldr	r0, [sp, #20]
 803df54:	462b      	mov	r3, r5
 803df56:	463a      	mov	r2, r7
 803df58:	f7fe fea2 	bl	803cca0 <__s2b>
 803df5c:	900a      	str	r0, [sp, #40]	@ 0x28
 803df5e:	2800      	cmp	r0, #0
 803df60:	f43f af05 	beq.w	803dd6e <_strtod_l+0x436>
 803df64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803df66:	2a00      	cmp	r2, #0
 803df68:	eba9 0308 	sub.w	r3, r9, r8
 803df6c:	bfa8      	it	ge
 803df6e:	2300      	movge	r3, #0
 803df70:	9312      	str	r3, [sp, #72]	@ 0x48
 803df72:	2400      	movs	r4, #0
 803df74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 803df78:	9316      	str	r3, [sp, #88]	@ 0x58
 803df7a:	46a0      	mov	r8, r4
 803df7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803df7e:	9805      	ldr	r0, [sp, #20]
 803df80:	6859      	ldr	r1, [r3, #4]
 803df82:	f7fe fe19 	bl	803cbb8 <_Balloc>
 803df86:	4681      	mov	r9, r0
 803df88:	2800      	cmp	r0, #0
 803df8a:	f43f aef4 	beq.w	803dd76 <_strtod_l+0x43e>
 803df8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803df90:	691a      	ldr	r2, [r3, #16]
 803df92:	3202      	adds	r2, #2
 803df94:	f103 010c 	add.w	r1, r3, #12
 803df98:	0092      	lsls	r2, r2, #2
 803df9a:	300c      	adds	r0, #12
 803df9c:	f7f9 fadc 	bl	8037558 <memcpy>
 803dfa0:	ec4b ab10 	vmov	d0, sl, fp
 803dfa4:	9805      	ldr	r0, [sp, #20]
 803dfa6:	aa1c      	add	r2, sp, #112	@ 0x70
 803dfa8:	a91b      	add	r1, sp, #108	@ 0x6c
 803dfaa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 803dfae:	f7ff f999 	bl	803d2e4 <__d2b>
 803dfb2:	901a      	str	r0, [sp, #104]	@ 0x68
 803dfb4:	2800      	cmp	r0, #0
 803dfb6:	f43f aede 	beq.w	803dd76 <_strtod_l+0x43e>
 803dfba:	9805      	ldr	r0, [sp, #20]
 803dfbc:	2101      	movs	r1, #1
 803dfbe:	f7fe ff05 	bl	803cdcc <__i2b>
 803dfc2:	4680      	mov	r8, r0
 803dfc4:	b948      	cbnz	r0, 803dfda <_strtod_l+0x6a2>
 803dfc6:	f04f 0800 	mov.w	r8, #0
 803dfca:	e6d4      	b.n	803dd76 <_strtod_l+0x43e>
 803dfcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803dfd0:	fa02 f303 	lsl.w	r3, r2, r3
 803dfd4:	ea03 0a0a 	and.w	sl, r3, sl
 803dfd8:	e7b0      	b.n	803df3c <_strtod_l+0x604>
 803dfda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 803dfdc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 803dfde:	2d00      	cmp	r5, #0
 803dfe0:	bfab      	itete	ge
 803dfe2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 803dfe4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 803dfe6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 803dfe8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 803dfea:	bfac      	ite	ge
 803dfec:	18ef      	addge	r7, r5, r3
 803dfee:	1b5e      	sublt	r6, r3, r5
 803dff0:	9b08      	ldr	r3, [sp, #32]
 803dff2:	1aed      	subs	r5, r5, r3
 803dff4:	4415      	add	r5, r2
 803dff6:	4b66      	ldr	r3, [pc, #408]	@ (803e190 <_strtod_l+0x858>)
 803dff8:	3d01      	subs	r5, #1
 803dffa:	429d      	cmp	r5, r3
 803dffc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 803e000:	da50      	bge.n	803e0a4 <_strtod_l+0x76c>
 803e002:	1b5b      	subs	r3, r3, r5
 803e004:	2b1f      	cmp	r3, #31
 803e006:	eba2 0203 	sub.w	r2, r2, r3
 803e00a:	f04f 0101 	mov.w	r1, #1
 803e00e:	dc3d      	bgt.n	803e08c <_strtod_l+0x754>
 803e010:	fa01 f303 	lsl.w	r3, r1, r3
 803e014:	9313      	str	r3, [sp, #76]	@ 0x4c
 803e016:	2300      	movs	r3, #0
 803e018:	9310      	str	r3, [sp, #64]	@ 0x40
 803e01a:	18bd      	adds	r5, r7, r2
 803e01c:	9b08      	ldr	r3, [sp, #32]
 803e01e:	42af      	cmp	r7, r5
 803e020:	4416      	add	r6, r2
 803e022:	441e      	add	r6, r3
 803e024:	463b      	mov	r3, r7
 803e026:	bfa8      	it	ge
 803e028:	462b      	movge	r3, r5
 803e02a:	42b3      	cmp	r3, r6
 803e02c:	bfa8      	it	ge
 803e02e:	4633      	movge	r3, r6
 803e030:	2b00      	cmp	r3, #0
 803e032:	bfc2      	ittt	gt
 803e034:	1aed      	subgt	r5, r5, r3
 803e036:	1af6      	subgt	r6, r6, r3
 803e038:	1aff      	subgt	r7, r7, r3
 803e03a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 803e03c:	2b00      	cmp	r3, #0
 803e03e:	dd16      	ble.n	803e06e <_strtod_l+0x736>
 803e040:	4641      	mov	r1, r8
 803e042:	9805      	ldr	r0, [sp, #20]
 803e044:	461a      	mov	r2, r3
 803e046:	f7fe ff81 	bl	803cf4c <__pow5mult>
 803e04a:	4680      	mov	r8, r0
 803e04c:	2800      	cmp	r0, #0
 803e04e:	d0ba      	beq.n	803dfc6 <_strtod_l+0x68e>
 803e050:	4601      	mov	r1, r0
 803e052:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 803e054:	9805      	ldr	r0, [sp, #20]
 803e056:	f7fe fecf 	bl	803cdf8 <__multiply>
 803e05a:	900e      	str	r0, [sp, #56]	@ 0x38
 803e05c:	2800      	cmp	r0, #0
 803e05e:	f43f ae8a 	beq.w	803dd76 <_strtod_l+0x43e>
 803e062:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803e064:	9805      	ldr	r0, [sp, #20]
 803e066:	f7fe fdcc 	bl	803cc02 <_Bfree>
 803e06a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803e06c:	931a      	str	r3, [sp, #104]	@ 0x68
 803e06e:	2d00      	cmp	r5, #0
 803e070:	dc1d      	bgt.n	803e0ae <_strtod_l+0x776>
 803e072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803e074:	2b00      	cmp	r3, #0
 803e076:	dd23      	ble.n	803e0c0 <_strtod_l+0x788>
 803e078:	4649      	mov	r1, r9
 803e07a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 803e07c:	9805      	ldr	r0, [sp, #20]
 803e07e:	f7fe ff65 	bl	803cf4c <__pow5mult>
 803e082:	4681      	mov	r9, r0
 803e084:	b9e0      	cbnz	r0, 803e0c0 <_strtod_l+0x788>
 803e086:	f04f 0900 	mov.w	r9, #0
 803e08a:	e674      	b.n	803dd76 <_strtod_l+0x43e>
 803e08c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 803e090:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 803e094:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 803e098:	35e2      	adds	r5, #226	@ 0xe2
 803e09a:	fa01 f305 	lsl.w	r3, r1, r5
 803e09e:	9310      	str	r3, [sp, #64]	@ 0x40
 803e0a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 803e0a2:	e7ba      	b.n	803e01a <_strtod_l+0x6e2>
 803e0a4:	2300      	movs	r3, #0
 803e0a6:	9310      	str	r3, [sp, #64]	@ 0x40
 803e0a8:	2301      	movs	r3, #1
 803e0aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 803e0ac:	e7b5      	b.n	803e01a <_strtod_l+0x6e2>
 803e0ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803e0b0:	9805      	ldr	r0, [sp, #20]
 803e0b2:	462a      	mov	r2, r5
 803e0b4:	f7fe ff8a 	bl	803cfcc <__lshift>
 803e0b8:	901a      	str	r0, [sp, #104]	@ 0x68
 803e0ba:	2800      	cmp	r0, #0
 803e0bc:	d1d9      	bne.n	803e072 <_strtod_l+0x73a>
 803e0be:	e65a      	b.n	803dd76 <_strtod_l+0x43e>
 803e0c0:	2e00      	cmp	r6, #0
 803e0c2:	dd07      	ble.n	803e0d4 <_strtod_l+0x79c>
 803e0c4:	4649      	mov	r1, r9
 803e0c6:	9805      	ldr	r0, [sp, #20]
 803e0c8:	4632      	mov	r2, r6
 803e0ca:	f7fe ff7f 	bl	803cfcc <__lshift>
 803e0ce:	4681      	mov	r9, r0
 803e0d0:	2800      	cmp	r0, #0
 803e0d2:	d0d8      	beq.n	803e086 <_strtod_l+0x74e>
 803e0d4:	2f00      	cmp	r7, #0
 803e0d6:	dd08      	ble.n	803e0ea <_strtod_l+0x7b2>
 803e0d8:	4641      	mov	r1, r8
 803e0da:	9805      	ldr	r0, [sp, #20]
 803e0dc:	463a      	mov	r2, r7
 803e0de:	f7fe ff75 	bl	803cfcc <__lshift>
 803e0e2:	4680      	mov	r8, r0
 803e0e4:	2800      	cmp	r0, #0
 803e0e6:	f43f ae46 	beq.w	803dd76 <_strtod_l+0x43e>
 803e0ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803e0ec:	9805      	ldr	r0, [sp, #20]
 803e0ee:	464a      	mov	r2, r9
 803e0f0:	f7fe fff4 	bl	803d0dc <__mdiff>
 803e0f4:	4604      	mov	r4, r0
 803e0f6:	2800      	cmp	r0, #0
 803e0f8:	f43f ae3d 	beq.w	803dd76 <_strtod_l+0x43e>
 803e0fc:	68c3      	ldr	r3, [r0, #12]
 803e0fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 803e100:	2300      	movs	r3, #0
 803e102:	60c3      	str	r3, [r0, #12]
 803e104:	4641      	mov	r1, r8
 803e106:	f7fe ffcd 	bl	803d0a4 <__mcmp>
 803e10a:	2800      	cmp	r0, #0
 803e10c:	da46      	bge.n	803e19c <_strtod_l+0x864>
 803e10e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803e110:	ea53 030a 	orrs.w	r3, r3, sl
 803e114:	d16c      	bne.n	803e1f0 <_strtod_l+0x8b8>
 803e116:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803e11a:	2b00      	cmp	r3, #0
 803e11c:	d168      	bne.n	803e1f0 <_strtod_l+0x8b8>
 803e11e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803e122:	0d1b      	lsrs	r3, r3, #20
 803e124:	051b      	lsls	r3, r3, #20
 803e126:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 803e12a:	d961      	bls.n	803e1f0 <_strtod_l+0x8b8>
 803e12c:	6963      	ldr	r3, [r4, #20]
 803e12e:	b913      	cbnz	r3, 803e136 <_strtod_l+0x7fe>
 803e130:	6923      	ldr	r3, [r4, #16]
 803e132:	2b01      	cmp	r3, #1
 803e134:	dd5c      	ble.n	803e1f0 <_strtod_l+0x8b8>
 803e136:	4621      	mov	r1, r4
 803e138:	2201      	movs	r2, #1
 803e13a:	9805      	ldr	r0, [sp, #20]
 803e13c:	f7fe ff46 	bl	803cfcc <__lshift>
 803e140:	4641      	mov	r1, r8
 803e142:	4604      	mov	r4, r0
 803e144:	f7fe ffae 	bl	803d0a4 <__mcmp>
 803e148:	2800      	cmp	r0, #0
 803e14a:	dd51      	ble.n	803e1f0 <_strtod_l+0x8b8>
 803e14c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803e150:	9a08      	ldr	r2, [sp, #32]
 803e152:	0d1b      	lsrs	r3, r3, #20
 803e154:	051b      	lsls	r3, r3, #20
 803e156:	2a00      	cmp	r2, #0
 803e158:	d06b      	beq.n	803e232 <_strtod_l+0x8fa>
 803e15a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 803e15e:	d868      	bhi.n	803e232 <_strtod_l+0x8fa>
 803e160:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 803e164:	f67f ae9d 	bls.w	803dea2 <_strtod_l+0x56a>
 803e168:	4b0a      	ldr	r3, [pc, #40]	@ (803e194 <_strtod_l+0x85c>)
 803e16a:	4650      	mov	r0, sl
 803e16c:	4659      	mov	r1, fp
 803e16e:	2200      	movs	r2, #0
 803e170:	f7d2 fa5a 	bl	8010628 <__aeabi_dmul>
 803e174:	4b08      	ldr	r3, [pc, #32]	@ (803e198 <_strtod_l+0x860>)
 803e176:	400b      	ands	r3, r1
 803e178:	4682      	mov	sl, r0
 803e17a:	468b      	mov	fp, r1
 803e17c:	2b00      	cmp	r3, #0
 803e17e:	f47f ae05 	bne.w	803dd8c <_strtod_l+0x454>
 803e182:	9a05      	ldr	r2, [sp, #20]
 803e184:	2322      	movs	r3, #34	@ 0x22
 803e186:	6013      	str	r3, [r2, #0]
 803e188:	e600      	b.n	803dd8c <_strtod_l+0x454>
 803e18a:	bf00      	nop
 803e18c:	080453a8 	.word	0x080453a8
 803e190:	fffffc02 	.word	0xfffffc02
 803e194:	39500000 	.word	0x39500000
 803e198:	7ff00000 	.word	0x7ff00000
 803e19c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 803e1a0:	d165      	bne.n	803e26e <_strtod_l+0x936>
 803e1a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803e1a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803e1a8:	b35a      	cbz	r2, 803e202 <_strtod_l+0x8ca>
 803e1aa:	4a9f      	ldr	r2, [pc, #636]	@ (803e428 <_strtod_l+0xaf0>)
 803e1ac:	4293      	cmp	r3, r2
 803e1ae:	d12b      	bne.n	803e208 <_strtod_l+0x8d0>
 803e1b0:	9b08      	ldr	r3, [sp, #32]
 803e1b2:	4651      	mov	r1, sl
 803e1b4:	b303      	cbz	r3, 803e1f8 <_strtod_l+0x8c0>
 803e1b6:	4b9d      	ldr	r3, [pc, #628]	@ (803e42c <_strtod_l+0xaf4>)
 803e1b8:	465a      	mov	r2, fp
 803e1ba:	4013      	ands	r3, r2
 803e1bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 803e1c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803e1c4:	d81b      	bhi.n	803e1fe <_strtod_l+0x8c6>
 803e1c6:	0d1b      	lsrs	r3, r3, #20
 803e1c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803e1cc:	fa02 f303 	lsl.w	r3, r2, r3
 803e1d0:	4299      	cmp	r1, r3
 803e1d2:	d119      	bne.n	803e208 <_strtod_l+0x8d0>
 803e1d4:	4b96      	ldr	r3, [pc, #600]	@ (803e430 <_strtod_l+0xaf8>)
 803e1d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803e1d8:	429a      	cmp	r2, r3
 803e1da:	d102      	bne.n	803e1e2 <_strtod_l+0x8aa>
 803e1dc:	3101      	adds	r1, #1
 803e1de:	f43f adca 	beq.w	803dd76 <_strtod_l+0x43e>
 803e1e2:	4b92      	ldr	r3, [pc, #584]	@ (803e42c <_strtod_l+0xaf4>)
 803e1e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803e1e6:	401a      	ands	r2, r3
 803e1e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 803e1ec:	f04f 0a00 	mov.w	sl, #0
 803e1f0:	9b08      	ldr	r3, [sp, #32]
 803e1f2:	2b00      	cmp	r3, #0
 803e1f4:	d1b8      	bne.n	803e168 <_strtod_l+0x830>
 803e1f6:	e5c9      	b.n	803dd8c <_strtod_l+0x454>
 803e1f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803e1fc:	e7e8      	b.n	803e1d0 <_strtod_l+0x898>
 803e1fe:	4613      	mov	r3, r2
 803e200:	e7e6      	b.n	803e1d0 <_strtod_l+0x898>
 803e202:	ea53 030a 	orrs.w	r3, r3, sl
 803e206:	d0a1      	beq.n	803e14c <_strtod_l+0x814>
 803e208:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803e20a:	b1db      	cbz	r3, 803e244 <_strtod_l+0x90c>
 803e20c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803e20e:	4213      	tst	r3, r2
 803e210:	d0ee      	beq.n	803e1f0 <_strtod_l+0x8b8>
 803e212:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803e214:	9a08      	ldr	r2, [sp, #32]
 803e216:	4650      	mov	r0, sl
 803e218:	4659      	mov	r1, fp
 803e21a:	b1bb      	cbz	r3, 803e24c <_strtod_l+0x914>
 803e21c:	f7ff fb6e 	bl	803d8fc <sulp>
 803e220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 803e224:	ec53 2b10 	vmov	r2, r3, d0
 803e228:	f7d2 f848 	bl	80102bc <__adddf3>
 803e22c:	4682      	mov	sl, r0
 803e22e:	468b      	mov	fp, r1
 803e230:	e7de      	b.n	803e1f0 <_strtod_l+0x8b8>
 803e232:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 803e236:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 803e23a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 803e23e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 803e242:	e7d5      	b.n	803e1f0 <_strtod_l+0x8b8>
 803e244:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 803e246:	ea13 0f0a 	tst.w	r3, sl
 803e24a:	e7e1      	b.n	803e210 <_strtod_l+0x8d8>
 803e24c:	f7ff fb56 	bl	803d8fc <sulp>
 803e250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 803e254:	ec53 2b10 	vmov	r2, r3, d0
 803e258:	f7d2 f82e 	bl	80102b8 <__aeabi_dsub>
 803e25c:	2200      	movs	r2, #0
 803e25e:	2300      	movs	r3, #0
 803e260:	4682      	mov	sl, r0
 803e262:	468b      	mov	fp, r1
 803e264:	f7d2 fc48 	bl	8010af8 <__aeabi_dcmpeq>
 803e268:	2800      	cmp	r0, #0
 803e26a:	d0c1      	beq.n	803e1f0 <_strtod_l+0x8b8>
 803e26c:	e619      	b.n	803dea2 <_strtod_l+0x56a>
 803e26e:	4641      	mov	r1, r8
 803e270:	4620      	mov	r0, r4
 803e272:	f7ff f88f 	bl	803d394 <__ratio>
 803e276:	ec57 6b10 	vmov	r6, r7, d0
 803e27a:	2200      	movs	r2, #0
 803e27c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 803e280:	4630      	mov	r0, r6
 803e282:	4639      	mov	r1, r7
 803e284:	f7d2 fc4c 	bl	8010b20 <__aeabi_dcmple>
 803e288:	2800      	cmp	r0, #0
 803e28a:	d06f      	beq.n	803e36c <_strtod_l+0xa34>
 803e28c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803e28e:	2b00      	cmp	r3, #0
 803e290:	d17a      	bne.n	803e388 <_strtod_l+0xa50>
 803e292:	f1ba 0f00 	cmp.w	sl, #0
 803e296:	d158      	bne.n	803e34a <_strtod_l+0xa12>
 803e298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803e29a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803e29e:	2b00      	cmp	r3, #0
 803e2a0:	d15a      	bne.n	803e358 <_strtod_l+0xa20>
 803e2a2:	4b64      	ldr	r3, [pc, #400]	@ (803e434 <_strtod_l+0xafc>)
 803e2a4:	2200      	movs	r2, #0
 803e2a6:	4630      	mov	r0, r6
 803e2a8:	4639      	mov	r1, r7
 803e2aa:	f7d2 fc2f 	bl	8010b0c <__aeabi_dcmplt>
 803e2ae:	2800      	cmp	r0, #0
 803e2b0:	d159      	bne.n	803e366 <_strtod_l+0xa2e>
 803e2b2:	4630      	mov	r0, r6
 803e2b4:	4639      	mov	r1, r7
 803e2b6:	4b60      	ldr	r3, [pc, #384]	@ (803e438 <_strtod_l+0xb00>)
 803e2b8:	2200      	movs	r2, #0
 803e2ba:	f7d2 f9b5 	bl	8010628 <__aeabi_dmul>
 803e2be:	4606      	mov	r6, r0
 803e2c0:	460f      	mov	r7, r1
 803e2c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 803e2c6:	9606      	str	r6, [sp, #24]
 803e2c8:	9307      	str	r3, [sp, #28]
 803e2ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 803e2ce:	4d57      	ldr	r5, [pc, #348]	@ (803e42c <_strtod_l+0xaf4>)
 803e2d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 803e2d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803e2d6:	401d      	ands	r5, r3
 803e2d8:	4b58      	ldr	r3, [pc, #352]	@ (803e43c <_strtod_l+0xb04>)
 803e2da:	429d      	cmp	r5, r3
 803e2dc:	f040 80b2 	bne.w	803e444 <_strtod_l+0xb0c>
 803e2e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803e2e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 803e2e6:	ec4b ab10 	vmov	d0, sl, fp
 803e2ea:	f7fe ff8b 	bl	803d204 <__ulp>
 803e2ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 803e2f2:	ec51 0b10 	vmov	r0, r1, d0
 803e2f6:	f7d2 f997 	bl	8010628 <__aeabi_dmul>
 803e2fa:	4652      	mov	r2, sl
 803e2fc:	465b      	mov	r3, fp
 803e2fe:	f7d1 ffdd 	bl	80102bc <__adddf3>
 803e302:	460b      	mov	r3, r1
 803e304:	4949      	ldr	r1, [pc, #292]	@ (803e42c <_strtod_l+0xaf4>)
 803e306:	4a4e      	ldr	r2, [pc, #312]	@ (803e440 <_strtod_l+0xb08>)
 803e308:	4019      	ands	r1, r3
 803e30a:	4291      	cmp	r1, r2
 803e30c:	4682      	mov	sl, r0
 803e30e:	d942      	bls.n	803e396 <_strtod_l+0xa5e>
 803e310:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803e312:	4b47      	ldr	r3, [pc, #284]	@ (803e430 <_strtod_l+0xaf8>)
 803e314:	429a      	cmp	r2, r3
 803e316:	d103      	bne.n	803e320 <_strtod_l+0x9e8>
 803e318:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803e31a:	3301      	adds	r3, #1
 803e31c:	f43f ad2b 	beq.w	803dd76 <_strtod_l+0x43e>
 803e320:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 803e430 <_strtod_l+0xaf8>
 803e324:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 803e328:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803e32a:	9805      	ldr	r0, [sp, #20]
 803e32c:	f7fe fc69 	bl	803cc02 <_Bfree>
 803e330:	9805      	ldr	r0, [sp, #20]
 803e332:	4649      	mov	r1, r9
 803e334:	f7fe fc65 	bl	803cc02 <_Bfree>
 803e338:	9805      	ldr	r0, [sp, #20]
 803e33a:	4641      	mov	r1, r8
 803e33c:	f7fe fc61 	bl	803cc02 <_Bfree>
 803e340:	9805      	ldr	r0, [sp, #20]
 803e342:	4621      	mov	r1, r4
 803e344:	f7fe fc5d 	bl	803cc02 <_Bfree>
 803e348:	e618      	b.n	803df7c <_strtod_l+0x644>
 803e34a:	f1ba 0f01 	cmp.w	sl, #1
 803e34e:	d103      	bne.n	803e358 <_strtod_l+0xa20>
 803e350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803e352:	2b00      	cmp	r3, #0
 803e354:	f43f ada5 	beq.w	803dea2 <_strtod_l+0x56a>
 803e358:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 803e408 <_strtod_l+0xad0>
 803e35c:	4f35      	ldr	r7, [pc, #212]	@ (803e434 <_strtod_l+0xafc>)
 803e35e:	ed8d 7b06 	vstr	d7, [sp, #24]
 803e362:	2600      	movs	r6, #0
 803e364:	e7b1      	b.n	803e2ca <_strtod_l+0x992>
 803e366:	4f34      	ldr	r7, [pc, #208]	@ (803e438 <_strtod_l+0xb00>)
 803e368:	2600      	movs	r6, #0
 803e36a:	e7aa      	b.n	803e2c2 <_strtod_l+0x98a>
 803e36c:	4b32      	ldr	r3, [pc, #200]	@ (803e438 <_strtod_l+0xb00>)
 803e36e:	4630      	mov	r0, r6
 803e370:	4639      	mov	r1, r7
 803e372:	2200      	movs	r2, #0
 803e374:	f7d2 f958 	bl	8010628 <__aeabi_dmul>
 803e378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803e37a:	4606      	mov	r6, r0
 803e37c:	460f      	mov	r7, r1
 803e37e:	2b00      	cmp	r3, #0
 803e380:	d09f      	beq.n	803e2c2 <_strtod_l+0x98a>
 803e382:	e9cd 6706 	strd	r6, r7, [sp, #24]
 803e386:	e7a0      	b.n	803e2ca <_strtod_l+0x992>
 803e388:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 803e410 <_strtod_l+0xad8>
 803e38c:	ed8d 7b06 	vstr	d7, [sp, #24]
 803e390:	ec57 6b17 	vmov	r6, r7, d7
 803e394:	e799      	b.n	803e2ca <_strtod_l+0x992>
 803e396:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 803e39a:	9b08      	ldr	r3, [sp, #32]
 803e39c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 803e3a0:	2b00      	cmp	r3, #0
 803e3a2:	d1c1      	bne.n	803e328 <_strtod_l+0x9f0>
 803e3a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803e3a8:	0d1b      	lsrs	r3, r3, #20
 803e3aa:	051b      	lsls	r3, r3, #20
 803e3ac:	429d      	cmp	r5, r3
 803e3ae:	d1bb      	bne.n	803e328 <_strtod_l+0x9f0>
 803e3b0:	4630      	mov	r0, r6
 803e3b2:	4639      	mov	r1, r7
 803e3b4:	f7d2 fcfc 	bl	8010db0 <__aeabi_d2lz>
 803e3b8:	f7d2 f908 	bl	80105cc <__aeabi_l2d>
 803e3bc:	4602      	mov	r2, r0
 803e3be:	460b      	mov	r3, r1
 803e3c0:	4630      	mov	r0, r6
 803e3c2:	4639      	mov	r1, r7
 803e3c4:	f7d1 ff78 	bl	80102b8 <__aeabi_dsub>
 803e3c8:	460b      	mov	r3, r1
 803e3ca:	4602      	mov	r2, r0
 803e3cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 803e3d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 803e3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803e3d6:	ea46 060a 	orr.w	r6, r6, sl
 803e3da:	431e      	orrs	r6, r3
 803e3dc:	d06f      	beq.n	803e4be <_strtod_l+0xb86>
 803e3de:	a30e      	add	r3, pc, #56	@ (adr r3, 803e418 <_strtod_l+0xae0>)
 803e3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 803e3e4:	f7d2 fb92 	bl	8010b0c <__aeabi_dcmplt>
 803e3e8:	2800      	cmp	r0, #0
 803e3ea:	f47f accf 	bne.w	803dd8c <_strtod_l+0x454>
 803e3ee:	a30c      	add	r3, pc, #48	@ (adr r3, 803e420 <_strtod_l+0xae8>)
 803e3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 803e3f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 803e3f8:	f7d2 fba6 	bl	8010b48 <__aeabi_dcmpgt>
 803e3fc:	2800      	cmp	r0, #0
 803e3fe:	d093      	beq.n	803e328 <_strtod_l+0x9f0>
 803e400:	e4c4      	b.n	803dd8c <_strtod_l+0x454>
 803e402:	bf00      	nop
 803e404:	f3af 8000 	nop.w
 803e408:	00000000 	.word	0x00000000
 803e40c:	bff00000 	.word	0xbff00000
 803e410:	00000000 	.word	0x00000000
 803e414:	3ff00000 	.word	0x3ff00000
 803e418:	94a03595 	.word	0x94a03595
 803e41c:	3fdfffff 	.word	0x3fdfffff
 803e420:	35afe535 	.word	0x35afe535
 803e424:	3fe00000 	.word	0x3fe00000
 803e428:	000fffff 	.word	0x000fffff
 803e42c:	7ff00000 	.word	0x7ff00000
 803e430:	7fefffff 	.word	0x7fefffff
 803e434:	3ff00000 	.word	0x3ff00000
 803e438:	3fe00000 	.word	0x3fe00000
 803e43c:	7fe00000 	.word	0x7fe00000
 803e440:	7c9fffff 	.word	0x7c9fffff
 803e444:	9b08      	ldr	r3, [sp, #32]
 803e446:	b323      	cbz	r3, 803e492 <_strtod_l+0xb5a>
 803e448:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 803e44c:	d821      	bhi.n	803e492 <_strtod_l+0xb5a>
 803e44e:	a328      	add	r3, pc, #160	@ (adr r3, 803e4f0 <_strtod_l+0xbb8>)
 803e450:	e9d3 2300 	ldrd	r2, r3, [r3]
 803e454:	4630      	mov	r0, r6
 803e456:	4639      	mov	r1, r7
 803e458:	f7d2 fb62 	bl	8010b20 <__aeabi_dcmple>
 803e45c:	b1a0      	cbz	r0, 803e488 <_strtod_l+0xb50>
 803e45e:	4639      	mov	r1, r7
 803e460:	4630      	mov	r0, r6
 803e462:	f7d2 fbb9 	bl	8010bd8 <__aeabi_d2uiz>
 803e466:	2801      	cmp	r0, #1
 803e468:	bf38      	it	cc
 803e46a:	2001      	movcc	r0, #1
 803e46c:	f7d2 f862 	bl	8010534 <__aeabi_ui2d>
 803e470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803e472:	4606      	mov	r6, r0
 803e474:	460f      	mov	r7, r1
 803e476:	b9fb      	cbnz	r3, 803e4b8 <_strtod_l+0xb80>
 803e478:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 803e47c:	9014      	str	r0, [sp, #80]	@ 0x50
 803e47e:	9315      	str	r3, [sp, #84]	@ 0x54
 803e480:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 803e484:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 803e488:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803e48a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 803e48e:	1b5b      	subs	r3, r3, r5
 803e490:	9311      	str	r3, [sp, #68]	@ 0x44
 803e492:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 803e496:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 803e49a:	f7fe feb3 	bl	803d204 <__ulp>
 803e49e:	4650      	mov	r0, sl
 803e4a0:	ec53 2b10 	vmov	r2, r3, d0
 803e4a4:	4659      	mov	r1, fp
 803e4a6:	f7d2 f8bf 	bl	8010628 <__aeabi_dmul>
 803e4aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 803e4ae:	f7d1 ff05 	bl	80102bc <__adddf3>
 803e4b2:	4682      	mov	sl, r0
 803e4b4:	468b      	mov	fp, r1
 803e4b6:	e770      	b.n	803e39a <_strtod_l+0xa62>
 803e4b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 803e4bc:	e7e0      	b.n	803e480 <_strtod_l+0xb48>
 803e4be:	a30e      	add	r3, pc, #56	@ (adr r3, 803e4f8 <_strtod_l+0xbc0>)
 803e4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 803e4c4:	f7d2 fb22 	bl	8010b0c <__aeabi_dcmplt>
 803e4c8:	e798      	b.n	803e3fc <_strtod_l+0xac4>
 803e4ca:	2300      	movs	r3, #0
 803e4cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 803e4ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 803e4d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803e4d2:	6013      	str	r3, [r2, #0]
 803e4d4:	f7ff ba6d 	b.w	803d9b2 <_strtod_l+0x7a>
 803e4d8:	2a65      	cmp	r2, #101	@ 0x65
 803e4da:	f43f ab66 	beq.w	803dbaa <_strtod_l+0x272>
 803e4de:	2a45      	cmp	r2, #69	@ 0x45
 803e4e0:	f43f ab63 	beq.w	803dbaa <_strtod_l+0x272>
 803e4e4:	2301      	movs	r3, #1
 803e4e6:	f7ff bb9e 	b.w	803dc26 <_strtod_l+0x2ee>
 803e4ea:	bf00      	nop
 803e4ec:	f3af 8000 	nop.w
 803e4f0:	ffc00000 	.word	0xffc00000
 803e4f4:	41dfffff 	.word	0x41dfffff
 803e4f8:	94a03595 	.word	0x94a03595
 803e4fc:	3fcfffff 	.word	0x3fcfffff

0803e500 <_strtod_r>:
 803e500:	4b01      	ldr	r3, [pc, #4]	@ (803e508 <_strtod_r+0x8>)
 803e502:	f7ff ba19 	b.w	803d938 <_strtod_l>
 803e506:	bf00      	nop
 803e508:	200002d4 	.word	0x200002d4

0803e50c <_strtoul_l.constprop.0>:
 803e50c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 803e510:	4e34      	ldr	r6, [pc, #208]	@ (803e5e4 <_strtoul_l.constprop.0+0xd8>)
 803e512:	4686      	mov	lr, r0
 803e514:	460d      	mov	r5, r1
 803e516:	4628      	mov	r0, r5
 803e518:	f815 4b01 	ldrb.w	r4, [r5], #1
 803e51c:	5d37      	ldrb	r7, [r6, r4]
 803e51e:	f017 0708 	ands.w	r7, r7, #8
 803e522:	d1f8      	bne.n	803e516 <_strtoul_l.constprop.0+0xa>
 803e524:	2c2d      	cmp	r4, #45	@ 0x2d
 803e526:	d12f      	bne.n	803e588 <_strtoul_l.constprop.0+0x7c>
 803e528:	782c      	ldrb	r4, [r5, #0]
 803e52a:	2701      	movs	r7, #1
 803e52c:	1c85      	adds	r5, r0, #2
 803e52e:	f033 0010 	bics.w	r0, r3, #16
 803e532:	d109      	bne.n	803e548 <_strtoul_l.constprop.0+0x3c>
 803e534:	2c30      	cmp	r4, #48	@ 0x30
 803e536:	d12c      	bne.n	803e592 <_strtoul_l.constprop.0+0x86>
 803e538:	7828      	ldrb	r0, [r5, #0]
 803e53a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 803e53e:	2858      	cmp	r0, #88	@ 0x58
 803e540:	d127      	bne.n	803e592 <_strtoul_l.constprop.0+0x86>
 803e542:	786c      	ldrb	r4, [r5, #1]
 803e544:	2310      	movs	r3, #16
 803e546:	3502      	adds	r5, #2
 803e548:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 803e54c:	2600      	movs	r6, #0
 803e54e:	fbb8 f8f3 	udiv	r8, r8, r3
 803e552:	fb03 f908 	mul.w	r9, r3, r8
 803e556:	ea6f 0909 	mvn.w	r9, r9
 803e55a:	4630      	mov	r0, r6
 803e55c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 803e560:	f1bc 0f09 	cmp.w	ip, #9
 803e564:	d81c      	bhi.n	803e5a0 <_strtoul_l.constprop.0+0x94>
 803e566:	4664      	mov	r4, ip
 803e568:	42a3      	cmp	r3, r4
 803e56a:	dd2a      	ble.n	803e5c2 <_strtoul_l.constprop.0+0xb6>
 803e56c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 803e570:	d007      	beq.n	803e582 <_strtoul_l.constprop.0+0x76>
 803e572:	4580      	cmp	r8, r0
 803e574:	d322      	bcc.n	803e5bc <_strtoul_l.constprop.0+0xb0>
 803e576:	d101      	bne.n	803e57c <_strtoul_l.constprop.0+0x70>
 803e578:	45a1      	cmp	r9, r4
 803e57a:	db1f      	blt.n	803e5bc <_strtoul_l.constprop.0+0xb0>
 803e57c:	fb00 4003 	mla	r0, r0, r3, r4
 803e580:	2601      	movs	r6, #1
 803e582:	f815 4b01 	ldrb.w	r4, [r5], #1
 803e586:	e7e9      	b.n	803e55c <_strtoul_l.constprop.0+0x50>
 803e588:	2c2b      	cmp	r4, #43	@ 0x2b
 803e58a:	bf04      	itt	eq
 803e58c:	782c      	ldrbeq	r4, [r5, #0]
 803e58e:	1c85      	addeq	r5, r0, #2
 803e590:	e7cd      	b.n	803e52e <_strtoul_l.constprop.0+0x22>
 803e592:	2b00      	cmp	r3, #0
 803e594:	d1d8      	bne.n	803e548 <_strtoul_l.constprop.0+0x3c>
 803e596:	2c30      	cmp	r4, #48	@ 0x30
 803e598:	bf0c      	ite	eq
 803e59a:	2308      	moveq	r3, #8
 803e59c:	230a      	movne	r3, #10
 803e59e:	e7d3      	b.n	803e548 <_strtoul_l.constprop.0+0x3c>
 803e5a0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 803e5a4:	f1bc 0f19 	cmp.w	ip, #25
 803e5a8:	d801      	bhi.n	803e5ae <_strtoul_l.constprop.0+0xa2>
 803e5aa:	3c37      	subs	r4, #55	@ 0x37
 803e5ac:	e7dc      	b.n	803e568 <_strtoul_l.constprop.0+0x5c>
 803e5ae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 803e5b2:	f1bc 0f19 	cmp.w	ip, #25
 803e5b6:	d804      	bhi.n	803e5c2 <_strtoul_l.constprop.0+0xb6>
 803e5b8:	3c57      	subs	r4, #87	@ 0x57
 803e5ba:	e7d5      	b.n	803e568 <_strtoul_l.constprop.0+0x5c>
 803e5bc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 803e5c0:	e7df      	b.n	803e582 <_strtoul_l.constprop.0+0x76>
 803e5c2:	1c73      	adds	r3, r6, #1
 803e5c4:	d106      	bne.n	803e5d4 <_strtoul_l.constprop.0+0xc8>
 803e5c6:	2322      	movs	r3, #34	@ 0x22
 803e5c8:	f8ce 3000 	str.w	r3, [lr]
 803e5cc:	4630      	mov	r0, r6
 803e5ce:	b932      	cbnz	r2, 803e5de <_strtoul_l.constprop.0+0xd2>
 803e5d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803e5d4:	b107      	cbz	r7, 803e5d8 <_strtoul_l.constprop.0+0xcc>
 803e5d6:	4240      	negs	r0, r0
 803e5d8:	2a00      	cmp	r2, #0
 803e5da:	d0f9      	beq.n	803e5d0 <_strtoul_l.constprop.0+0xc4>
 803e5dc:	b106      	cbz	r6, 803e5e0 <_strtoul_l.constprop.0+0xd4>
 803e5de:	1e69      	subs	r1, r5, #1
 803e5e0:	6011      	str	r1, [r2, #0]
 803e5e2:	e7f5      	b.n	803e5d0 <_strtoul_l.constprop.0+0xc4>
 803e5e4:	08045025 	.word	0x08045025

0803e5e8 <_strtoul_r>:
 803e5e8:	f7ff bf90 	b.w	803e50c <_strtoul_l.constprop.0>

0803e5ec <strtoul>:
 803e5ec:	4613      	mov	r3, r2
 803e5ee:	460a      	mov	r2, r1
 803e5f0:	4601      	mov	r1, r0
 803e5f2:	4802      	ldr	r0, [pc, #8]	@ (803e5fc <strtoul+0x10>)
 803e5f4:	6800      	ldr	r0, [r0, #0]
 803e5f6:	f7ff bf89 	b.w	803e50c <_strtoul_l.constprop.0>
 803e5fa:	bf00      	nop
 803e5fc:	20000440 	.word	0x20000440

0803e600 <__submore>:
 803e600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803e604:	460c      	mov	r4, r1
 803e606:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 803e608:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803e60c:	4299      	cmp	r1, r3
 803e60e:	d11d      	bne.n	803e64c <__submore+0x4c>
 803e610:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 803e614:	f7f9 ffba 	bl	803858c <_malloc_r>
 803e618:	b918      	cbnz	r0, 803e622 <__submore+0x22>
 803e61a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803e61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803e622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803e626:	6363      	str	r3, [r4, #52]	@ 0x34
 803e628:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 803e62c:	6320      	str	r0, [r4, #48]	@ 0x30
 803e62e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 803e632:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 803e636:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 803e63a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 803e63e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 803e642:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 803e646:	6020      	str	r0, [r4, #0]
 803e648:	2000      	movs	r0, #0
 803e64a:	e7e8      	b.n	803e61e <__submore+0x1e>
 803e64c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 803e64e:	0077      	lsls	r7, r6, #1
 803e650:	463a      	mov	r2, r7
 803e652:	f7fe ffab 	bl	803d5ac <_realloc_r>
 803e656:	4605      	mov	r5, r0
 803e658:	2800      	cmp	r0, #0
 803e65a:	d0de      	beq.n	803e61a <__submore+0x1a>
 803e65c:	eb00 0806 	add.w	r8, r0, r6
 803e660:	4601      	mov	r1, r0
 803e662:	4632      	mov	r2, r6
 803e664:	4640      	mov	r0, r8
 803e666:	f7f8 ff77 	bl	8037558 <memcpy>
 803e66a:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 803e66e:	f8c4 8000 	str.w	r8, [r4]
 803e672:	e7e9      	b.n	803e648 <__submore+0x48>

0803e674 <__ascii_wctomb>:
 803e674:	4603      	mov	r3, r0
 803e676:	4608      	mov	r0, r1
 803e678:	b141      	cbz	r1, 803e68c <__ascii_wctomb+0x18>
 803e67a:	2aff      	cmp	r2, #255	@ 0xff
 803e67c:	d904      	bls.n	803e688 <__ascii_wctomb+0x14>
 803e67e:	228a      	movs	r2, #138	@ 0x8a
 803e680:	601a      	str	r2, [r3, #0]
 803e682:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803e686:	4770      	bx	lr
 803e688:	700a      	strb	r2, [r1, #0]
 803e68a:	2001      	movs	r0, #1
 803e68c:	4770      	bx	lr

0803e68e <__swbuf_r>:
 803e68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803e690:	460e      	mov	r6, r1
 803e692:	4614      	mov	r4, r2
 803e694:	4605      	mov	r5, r0
 803e696:	b118      	cbz	r0, 803e6a0 <__swbuf_r+0x12>
 803e698:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803e69a:	b90b      	cbnz	r3, 803e6a0 <__swbuf_r+0x12>
 803e69c:	f7f7 fa7a 	bl	8035b94 <__sinit>
 803e6a0:	69a3      	ldr	r3, [r4, #24]
 803e6a2:	60a3      	str	r3, [r4, #8]
 803e6a4:	89a3      	ldrh	r3, [r4, #12]
 803e6a6:	0719      	lsls	r1, r3, #28
 803e6a8:	d501      	bpl.n	803e6ae <__swbuf_r+0x20>
 803e6aa:	6923      	ldr	r3, [r4, #16]
 803e6ac:	b943      	cbnz	r3, 803e6c0 <__swbuf_r+0x32>
 803e6ae:	4621      	mov	r1, r4
 803e6b0:	4628      	mov	r0, r5
 803e6b2:	f7f7 fc2b 	bl	8035f0c <__swsetup_r>
 803e6b6:	b118      	cbz	r0, 803e6c0 <__swbuf_r+0x32>
 803e6b8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 803e6bc:	4638      	mov	r0, r7
 803e6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803e6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803e6c4:	b2f6      	uxtb	r6, r6
 803e6c6:	049a      	lsls	r2, r3, #18
 803e6c8:	4637      	mov	r7, r6
 803e6ca:	d406      	bmi.n	803e6da <__swbuf_r+0x4c>
 803e6cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 803e6d0:	81a3      	strh	r3, [r4, #12]
 803e6d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803e6d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803e6d8:	6663      	str	r3, [r4, #100]	@ 0x64
 803e6da:	6823      	ldr	r3, [r4, #0]
 803e6dc:	6922      	ldr	r2, [r4, #16]
 803e6de:	1a98      	subs	r0, r3, r2
 803e6e0:	6963      	ldr	r3, [r4, #20]
 803e6e2:	4283      	cmp	r3, r0
 803e6e4:	dc05      	bgt.n	803e6f2 <__swbuf_r+0x64>
 803e6e6:	4621      	mov	r1, r4
 803e6e8:	4628      	mov	r0, r5
 803e6ea:	f7f7 f911 	bl	8035910 <_fflush_r>
 803e6ee:	2800      	cmp	r0, #0
 803e6f0:	d1e2      	bne.n	803e6b8 <__swbuf_r+0x2a>
 803e6f2:	68a3      	ldr	r3, [r4, #8]
 803e6f4:	3b01      	subs	r3, #1
 803e6f6:	60a3      	str	r3, [r4, #8]
 803e6f8:	6823      	ldr	r3, [r4, #0]
 803e6fa:	1c5a      	adds	r2, r3, #1
 803e6fc:	6022      	str	r2, [r4, #0]
 803e6fe:	701e      	strb	r6, [r3, #0]
 803e700:	6962      	ldr	r2, [r4, #20]
 803e702:	1c43      	adds	r3, r0, #1
 803e704:	429a      	cmp	r2, r3
 803e706:	d004      	beq.n	803e712 <__swbuf_r+0x84>
 803e708:	89a3      	ldrh	r3, [r4, #12]
 803e70a:	07db      	lsls	r3, r3, #31
 803e70c:	d5d6      	bpl.n	803e6bc <__swbuf_r+0x2e>
 803e70e:	2e0a      	cmp	r6, #10
 803e710:	d1d4      	bne.n	803e6bc <__swbuf_r+0x2e>
 803e712:	4621      	mov	r1, r4
 803e714:	4628      	mov	r0, r5
 803e716:	f7f7 f8fb 	bl	8035910 <_fflush_r>
 803e71a:	2800      	cmp	r0, #0
 803e71c:	d0ce      	beq.n	803e6bc <__swbuf_r+0x2e>
 803e71e:	e7cb      	b.n	803e6b8 <__swbuf_r+0x2a>

0803e720 <_raise_r>:
 803e720:	291f      	cmp	r1, #31
 803e722:	b538      	push	{r3, r4, r5, lr}
 803e724:	4605      	mov	r5, r0
 803e726:	460c      	mov	r4, r1
 803e728:	d904      	bls.n	803e734 <_raise_r+0x14>
 803e72a:	2316      	movs	r3, #22
 803e72c:	6003      	str	r3, [r0, #0]
 803e72e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803e732:	bd38      	pop	{r3, r4, r5, pc}
 803e734:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 803e738:	b112      	cbz	r2, 803e740 <_raise_r+0x20>
 803e73a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803e73e:	b94b      	cbnz	r3, 803e754 <_raise_r+0x34>
 803e740:	4628      	mov	r0, r5
 803e742:	f000 f8fd 	bl	803e940 <_getpid_r>
 803e746:	4622      	mov	r2, r4
 803e748:	4601      	mov	r1, r0
 803e74a:	4628      	mov	r0, r5
 803e74c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803e750:	f000 b8e4 	b.w	803e91c <_kill_r>
 803e754:	2b01      	cmp	r3, #1
 803e756:	d00a      	beq.n	803e76e <_raise_r+0x4e>
 803e758:	1c59      	adds	r1, r3, #1
 803e75a:	d103      	bne.n	803e764 <_raise_r+0x44>
 803e75c:	2316      	movs	r3, #22
 803e75e:	6003      	str	r3, [r0, #0]
 803e760:	2001      	movs	r0, #1
 803e762:	e7e6      	b.n	803e732 <_raise_r+0x12>
 803e764:	2100      	movs	r1, #0
 803e766:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 803e76a:	4620      	mov	r0, r4
 803e76c:	4798      	blx	r3
 803e76e:	2000      	movs	r0, #0
 803e770:	e7df      	b.n	803e732 <_raise_r+0x12>
	...

0803e774 <raise>:
 803e774:	4b02      	ldr	r3, [pc, #8]	@ (803e780 <raise+0xc>)
 803e776:	4601      	mov	r1, r0
 803e778:	6818      	ldr	r0, [r3, #0]
 803e77a:	f7ff bfd1 	b.w	803e720 <_raise_r>
 803e77e:	bf00      	nop
 803e780:	20000440 	.word	0x20000440

0803e784 <__gettzinfo>:
 803e784:	4800      	ldr	r0, [pc, #0]	@ (803e788 <__gettzinfo+0x4>)
 803e786:	4770      	bx	lr
 803e788:	20000980 	.word	0x20000980

0803e78c <gmtime_r>:
 803e78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803e790:	4a4d      	ldr	r2, [pc, #308]	@ (803e8c8 <gmtime_r+0x13c>)
 803e792:	460c      	mov	r4, r1
 803e794:	2300      	movs	r3, #0
 803e796:	e9d0 0100 	ldrd	r0, r1, [r0]
 803e79a:	f7d2 fa8d 	bl	8010cb8 <__aeabi_ldivmod>
 803e79e:	2a00      	cmp	r2, #0
 803e7a0:	bfbc      	itt	lt
 803e7a2:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 803e7a6:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 803e7aa:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 803e7ae:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 803e7b2:	fbb2 f3f1 	udiv	r3, r2, r1
 803e7b6:	fb01 2213 	mls	r2, r1, r3, r2
 803e7ba:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 803e7be:	bfac      	ite	ge
 803e7c0:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 803e7c4:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 803e7c8:	60a3      	str	r3, [r4, #8]
 803e7ca:	fbb2 f3f1 	udiv	r3, r2, r1
 803e7ce:	fb01 2213 	mls	r2, r1, r3, r2
 803e7d2:	6063      	str	r3, [r4, #4]
 803e7d4:	6022      	str	r2, [r4, #0]
 803e7d6:	1cc3      	adds	r3, r0, #3
 803e7d8:	2207      	movs	r2, #7
 803e7da:	fb93 f2f2 	sdiv	r2, r3, r2
 803e7de:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 803e7e2:	1a9b      	subs	r3, r3, r2
 803e7e4:	bf48      	it	mi
 803e7e6:	3307      	addmi	r3, #7
 803e7e8:	2800      	cmp	r0, #0
 803e7ea:	61a3      	str	r3, [r4, #24]
 803e7ec:	bfb8      	it	lt
 803e7ee:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 803e7f2:	4936      	ldr	r1, [pc, #216]	@ (803e8cc <gmtime_r+0x140>)
 803e7f4:	bfae      	itee	ge
 803e7f6:	fb90 f1f1 	sdivge	r1, r0, r1
 803e7fa:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 803e7fe:	fb93 f1f1 	sdivlt	r1, r3, r1
 803e802:	4b33      	ldr	r3, [pc, #204]	@ (803e8d0 <gmtime_r+0x144>)
 803e804:	fb03 0001 	mla	r0, r3, r1, r0
 803e808:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 803e80c:	fbb0 f3f3 	udiv	r3, r0, r3
 803e810:	4403      	add	r3, r0
 803e812:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 803e816:	fbb0 f2fc 	udiv	r2, r0, ip
 803e81a:	1a9b      	subs	r3, r3, r2
 803e81c:	f240 176d 	movw	r7, #365	@ 0x16d
 803e820:	4a2c      	ldr	r2, [pc, #176]	@ (803e8d4 <gmtime_r+0x148>)
 803e822:	fbb0 f2f2 	udiv	r2, r0, r2
 803e826:	2664      	movs	r6, #100	@ 0x64
 803e828:	1a9b      	subs	r3, r3, r2
 803e82a:	fbb3 f2f7 	udiv	r2, r3, r7
 803e82e:	fbb3 f3fc 	udiv	r3, r3, ip
 803e832:	fbb2 f5f6 	udiv	r5, r2, r6
 803e836:	1aeb      	subs	r3, r5, r3
 803e838:	4403      	add	r3, r0
 803e83a:	fb07 3312 	mls	r3, r7, r2, r3
 803e83e:	2099      	movs	r0, #153	@ 0x99
 803e840:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 803e844:	3702      	adds	r7, #2
 803e846:	f103 0e01 	add.w	lr, r3, #1
 803e84a:	fbb7 fcf0 	udiv	ip, r7, r0
 803e84e:	fb00 f00c 	mul.w	r0, r0, ip
 803e852:	3002      	adds	r0, #2
 803e854:	f04f 0805 	mov.w	r8, #5
 803e858:	fbb0 f0f8 	udiv	r0, r0, r8
 803e85c:	ebae 0000 	sub.w	r0, lr, r0
 803e860:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 803e864:	4577      	cmp	r7, lr
 803e866:	bf8c      	ite	hi
 803e868:	f06f 0709 	mvnhi.w	r7, #9
 803e86c:	2702      	movls	r7, #2
 803e86e:	4467      	add	r7, ip
 803e870:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 803e874:	fb0c 2101 	mla	r1, ip, r1, r2
 803e878:	2f01      	cmp	r7, #1
 803e87a:	bf98      	it	ls
 803e87c:	3101      	addls	r1, #1
 803e87e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 803e882:	d30c      	bcc.n	803e89e <gmtime_r+0x112>
 803e884:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 803e888:	61e3      	str	r3, [r4, #28]
 803e88a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 803e88e:	2300      	movs	r3, #0
 803e890:	60e0      	str	r0, [r4, #12]
 803e892:	e9c4 7104 	strd	r7, r1, [r4, #16]
 803e896:	6223      	str	r3, [r4, #32]
 803e898:	4620      	mov	r0, r4
 803e89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803e89e:	f012 0f03 	tst.w	r2, #3
 803e8a2:	d102      	bne.n	803e8aa <gmtime_r+0x11e>
 803e8a4:	fb06 2515 	mls	r5, r6, r5, r2
 803e8a8:	b95d      	cbnz	r5, 803e8c2 <gmtime_r+0x136>
 803e8aa:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 803e8ae:	fbb2 f6f5 	udiv	r6, r2, r5
 803e8b2:	fb05 2216 	mls	r2, r5, r6, r2
 803e8b6:	fab2 f282 	clz	r2, r2
 803e8ba:	0952      	lsrs	r2, r2, #5
 803e8bc:	333b      	adds	r3, #59	@ 0x3b
 803e8be:	4413      	add	r3, r2
 803e8c0:	e7e2      	b.n	803e888 <gmtime_r+0xfc>
 803e8c2:	2201      	movs	r2, #1
 803e8c4:	e7fa      	b.n	803e8bc <gmtime_r+0x130>
 803e8c6:	bf00      	nop
 803e8c8:	00015180 	.word	0x00015180
 803e8cc:	00023ab1 	.word	0x00023ab1
 803e8d0:	fffdc54f 	.word	0xfffdc54f
 803e8d4:	00023ab0 	.word	0x00023ab0

0803e8d8 <_fstat_r>:
 803e8d8:	b538      	push	{r3, r4, r5, lr}
 803e8da:	4d07      	ldr	r5, [pc, #28]	@ (803e8f8 <_fstat_r+0x20>)
 803e8dc:	2300      	movs	r3, #0
 803e8de:	4604      	mov	r4, r0
 803e8e0:	4608      	mov	r0, r1
 803e8e2:	4611      	mov	r1, r2
 803e8e4:	602b      	str	r3, [r5, #0]
 803e8e6:	f7d4 f833 	bl	8012950 <_fstat>
 803e8ea:	1c43      	adds	r3, r0, #1
 803e8ec:	d102      	bne.n	803e8f4 <_fstat_r+0x1c>
 803e8ee:	682b      	ldr	r3, [r5, #0]
 803e8f0:	b103      	cbz	r3, 803e8f4 <_fstat_r+0x1c>
 803e8f2:	6023      	str	r3, [r4, #0]
 803e8f4:	bd38      	pop	{r3, r4, r5, pc}
 803e8f6:	bf00      	nop
 803e8f8:	20018340 	.word	0x20018340

0803e8fc <_isatty_r>:
 803e8fc:	b538      	push	{r3, r4, r5, lr}
 803e8fe:	4d06      	ldr	r5, [pc, #24]	@ (803e918 <_isatty_r+0x1c>)
 803e900:	2300      	movs	r3, #0
 803e902:	4604      	mov	r4, r0
 803e904:	4608      	mov	r0, r1
 803e906:	602b      	str	r3, [r5, #0]
 803e908:	f7d4 f832 	bl	8012970 <_isatty>
 803e90c:	1c43      	adds	r3, r0, #1
 803e90e:	d102      	bne.n	803e916 <_isatty_r+0x1a>
 803e910:	682b      	ldr	r3, [r5, #0]
 803e912:	b103      	cbz	r3, 803e916 <_isatty_r+0x1a>
 803e914:	6023      	str	r3, [r4, #0]
 803e916:	bd38      	pop	{r3, r4, r5, pc}
 803e918:	20018340 	.word	0x20018340

0803e91c <_kill_r>:
 803e91c:	b538      	push	{r3, r4, r5, lr}
 803e91e:	4d07      	ldr	r5, [pc, #28]	@ (803e93c <_kill_r+0x20>)
 803e920:	2300      	movs	r3, #0
 803e922:	4604      	mov	r4, r0
 803e924:	4608      	mov	r0, r1
 803e926:	4611      	mov	r1, r2
 803e928:	602b      	str	r3, [r5, #0]
 803e92a:	f7d3 ffb1 	bl	8012890 <_kill>
 803e92e:	1c43      	adds	r3, r0, #1
 803e930:	d102      	bne.n	803e938 <_kill_r+0x1c>
 803e932:	682b      	ldr	r3, [r5, #0]
 803e934:	b103      	cbz	r3, 803e938 <_kill_r+0x1c>
 803e936:	6023      	str	r3, [r4, #0]
 803e938:	bd38      	pop	{r3, r4, r5, pc}
 803e93a:	bf00      	nop
 803e93c:	20018340 	.word	0x20018340

0803e940 <_getpid_r>:
 803e940:	f7d3 bf9e 	b.w	8012880 <_getpid>

0803e944 <_sbrk_r>:
 803e944:	b538      	push	{r3, r4, r5, lr}
 803e946:	4d06      	ldr	r5, [pc, #24]	@ (803e960 <_sbrk_r+0x1c>)
 803e948:	2300      	movs	r3, #0
 803e94a:	4604      	mov	r4, r0
 803e94c:	4608      	mov	r0, r1
 803e94e:	602b      	str	r3, [r5, #0]
 803e950:	f7d4 f826 	bl	80129a0 <_sbrk>
 803e954:	1c43      	adds	r3, r0, #1
 803e956:	d102      	bne.n	803e95e <_sbrk_r+0x1a>
 803e958:	682b      	ldr	r3, [r5, #0]
 803e95a:	b103      	cbz	r3, 803e95e <_sbrk_r+0x1a>
 803e95c:	6023      	str	r3, [r4, #0]
 803e95e:	bd38      	pop	{r3, r4, r5, pc}
 803e960:	20018340 	.word	0x20018340

0803e964 <sysconf>:
 803e964:	2808      	cmp	r0, #8
 803e966:	b508      	push	{r3, lr}
 803e968:	d006      	beq.n	803e978 <sysconf+0x14>
 803e96a:	f7f8 fdbd 	bl	80374e8 <__errno>
 803e96e:	2316      	movs	r3, #22
 803e970:	6003      	str	r3, [r0, #0]
 803e972:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803e976:	bd08      	pop	{r3, pc}
 803e978:	2080      	movs	r0, #128	@ 0x80
 803e97a:	e7fc      	b.n	803e976 <sysconf+0x12>

0803e97c <_strtoll_l.constprop.0>:
 803e97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803e980:	b085      	sub	sp, #20
 803e982:	4690      	mov	r8, r2
 803e984:	4a43      	ldr	r2, [pc, #268]	@ (803ea94 <_strtoll_l.constprop.0+0x118>)
 803e986:	9002      	str	r0, [sp, #8]
 803e988:	4689      	mov	r9, r1
 803e98a:	461e      	mov	r6, r3
 803e98c:	460d      	mov	r5, r1
 803e98e:	462b      	mov	r3, r5
 803e990:	f815 4b01 	ldrb.w	r4, [r5], #1
 803e994:	5d17      	ldrb	r7, [r2, r4]
 803e996:	f017 0708 	ands.w	r7, r7, #8
 803e99a:	d1f8      	bne.n	803e98e <_strtoll_l.constprop.0+0x12>
 803e99c:	2c2d      	cmp	r4, #45	@ 0x2d
 803e99e:	d149      	bne.n	803ea34 <_strtoll_l.constprop.0+0xb8>
 803e9a0:	782c      	ldrb	r4, [r5, #0]
 803e9a2:	2701      	movs	r7, #1
 803e9a4:	1c9d      	adds	r5, r3, #2
 803e9a6:	f036 0310 	bics.w	r3, r6, #16
 803e9aa:	d109      	bne.n	803e9c0 <_strtoll_l.constprop.0+0x44>
 803e9ac:	2c30      	cmp	r4, #48	@ 0x30
 803e9ae:	d146      	bne.n	803ea3e <_strtoll_l.constprop.0+0xc2>
 803e9b0:	782b      	ldrb	r3, [r5, #0]
 803e9b2:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 803e9b6:	2b58      	cmp	r3, #88	@ 0x58
 803e9b8:	d141      	bne.n	803ea3e <_strtoll_l.constprop.0+0xc2>
 803e9ba:	786c      	ldrb	r4, [r5, #1]
 803e9bc:	2610      	movs	r6, #16
 803e9be:	3502      	adds	r5, #2
 803e9c0:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 803e9c4:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 803e9c8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 803e9cc:	17f3      	asrs	r3, r6, #31
 803e9ce:	4632      	mov	r2, r6
 803e9d0:	4658      	mov	r0, fp
 803e9d2:	4651      	mov	r1, sl
 803e9d4:	9303      	str	r3, [sp, #12]
 803e9d6:	f7d2 f9bf 	bl	8010d58 <__aeabi_uldivmod>
 803e9da:	9201      	str	r2, [sp, #4]
 803e9dc:	2200      	movs	r2, #0
 803e9de:	468e      	mov	lr, r1
 803e9e0:	4684      	mov	ip, r0
 803e9e2:	4611      	mov	r1, r2
 803e9e4:	4610      	mov	r0, r2
 803e9e6:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 803e9ea:	2b09      	cmp	r3, #9
 803e9ec:	d905      	bls.n	803e9fa <_strtoll_l.constprop.0+0x7e>
 803e9ee:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 803e9f2:	2b19      	cmp	r3, #25
 803e9f4:	d82a      	bhi.n	803ea4c <_strtoll_l.constprop.0+0xd0>
 803e9f6:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 803e9fa:	429e      	cmp	r6, r3
 803e9fc:	dd30      	ble.n	803ea60 <_strtoll_l.constprop.0+0xe4>
 803e9fe:	1c54      	adds	r4, r2, #1
 803ea00:	d015      	beq.n	803ea2e <_strtoll_l.constprop.0+0xb2>
 803ea02:	4584      	cmp	ip, r0
 803ea04:	eb7e 0201 	sbcs.w	r2, lr, r1
 803ea08:	d327      	bcc.n	803ea5a <_strtoll_l.constprop.0+0xde>
 803ea0a:	458e      	cmp	lr, r1
 803ea0c:	bf08      	it	eq
 803ea0e:	4584      	cmpeq	ip, r0
 803ea10:	d102      	bne.n	803ea18 <_strtoll_l.constprop.0+0x9c>
 803ea12:	9a01      	ldr	r2, [sp, #4]
 803ea14:	429a      	cmp	r2, r3
 803ea16:	db20      	blt.n	803ea5a <_strtoll_l.constprop.0+0xde>
 803ea18:	9a03      	ldr	r2, [sp, #12]
 803ea1a:	4371      	muls	r1, r6
 803ea1c:	fb00 1102 	mla	r1, r0, r2, r1
 803ea20:	fba6 0200 	umull	r0, r2, r6, r0
 803ea24:	440a      	add	r2, r1
 803ea26:	1818      	adds	r0, r3, r0
 803ea28:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 803ea2c:	2201      	movs	r2, #1
 803ea2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 803ea32:	e7d8      	b.n	803e9e6 <_strtoll_l.constprop.0+0x6a>
 803ea34:	2c2b      	cmp	r4, #43	@ 0x2b
 803ea36:	bf04      	itt	eq
 803ea38:	782c      	ldrbeq	r4, [r5, #0]
 803ea3a:	1c9d      	addeq	r5, r3, #2
 803ea3c:	e7b3      	b.n	803e9a6 <_strtoll_l.constprop.0+0x2a>
 803ea3e:	2e00      	cmp	r6, #0
 803ea40:	d1be      	bne.n	803e9c0 <_strtoll_l.constprop.0+0x44>
 803ea42:	2c30      	cmp	r4, #48	@ 0x30
 803ea44:	bf0c      	ite	eq
 803ea46:	2608      	moveq	r6, #8
 803ea48:	260a      	movne	r6, #10
 803ea4a:	e7b9      	b.n	803e9c0 <_strtoll_l.constprop.0+0x44>
 803ea4c:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 803ea50:	2b19      	cmp	r3, #25
 803ea52:	d805      	bhi.n	803ea60 <_strtoll_l.constprop.0+0xe4>
 803ea54:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 803ea58:	e7cf      	b.n	803e9fa <_strtoll_l.constprop.0+0x7e>
 803ea5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803ea5e:	e7e6      	b.n	803ea2e <_strtoll_l.constprop.0+0xb2>
 803ea60:	1c53      	adds	r3, r2, #1
 803ea62:	d10a      	bne.n	803ea7a <_strtoll_l.constprop.0+0xfe>
 803ea64:	9a02      	ldr	r2, [sp, #8]
 803ea66:	2322      	movs	r3, #34	@ 0x22
 803ea68:	6013      	str	r3, [r2, #0]
 803ea6a:	4658      	mov	r0, fp
 803ea6c:	4651      	mov	r1, sl
 803ea6e:	f1b8 0f00 	cmp.w	r8, #0
 803ea72:	d10a      	bne.n	803ea8a <_strtoll_l.constprop.0+0x10e>
 803ea74:	b005      	add	sp, #20
 803ea76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ea7a:	b117      	cbz	r7, 803ea82 <_strtoll_l.constprop.0+0x106>
 803ea7c:	4240      	negs	r0, r0
 803ea7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 803ea82:	f1b8 0f00 	cmp.w	r8, #0
 803ea86:	d0f5      	beq.n	803ea74 <_strtoll_l.constprop.0+0xf8>
 803ea88:	b10a      	cbz	r2, 803ea8e <_strtoll_l.constprop.0+0x112>
 803ea8a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803ea8e:	f8c8 9000 	str.w	r9, [r8]
 803ea92:	e7ef      	b.n	803ea74 <_strtoll_l.constprop.0+0xf8>
 803ea94:	08045025 	.word	0x08045025

0803ea98 <_strtoll_r>:
 803ea98:	f7ff bf70 	b.w	803e97c <_strtoll_l.constprop.0>

0803ea9c <__libc_fini_array>:
 803ea9c:	b538      	push	{r3, r4, r5, lr}
 803ea9e:	4d07      	ldr	r5, [pc, #28]	@ (803eabc <__libc_fini_array+0x20>)
 803eaa0:	4c07      	ldr	r4, [pc, #28]	@ (803eac0 <__libc_fini_array+0x24>)
 803eaa2:	1b64      	subs	r4, r4, r5
 803eaa4:	10a4      	asrs	r4, r4, #2
 803eaa6:	b91c      	cbnz	r4, 803eab0 <__libc_fini_array+0x14>
 803eaa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803eaac:	f000 bc9c 	b.w	803f3e8 <_fini>
 803eab0:	3c01      	subs	r4, #1
 803eab2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803eab6:	4798      	blx	r3
 803eab8:	e7f5      	b.n	803eaa6 <__libc_fini_array+0xa>
 803eaba:	bf00      	nop
 803eabc:	08045440 	.word	0x08045440
 803eac0:	08045444 	.word	0x08045444

0803eac4 <_strtoull_l.constprop.0>:
 803eac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803eac8:	4691      	mov	r9, r2
 803eaca:	4a48      	ldr	r2, [pc, #288]	@ (803ebec <_strtoull_l.constprop.0+0x128>)
 803eacc:	9001      	str	r0, [sp, #4]
 803eace:	468a      	mov	sl, r1
 803ead0:	461e      	mov	r6, r3
 803ead2:	460d      	mov	r5, r1
 803ead4:	462b      	mov	r3, r5
 803ead6:	f815 4b01 	ldrb.w	r4, [r5], #1
 803eada:	5d17      	ldrb	r7, [r2, r4]
 803eadc:	f017 0708 	ands.w	r7, r7, #8
 803eae0:	d1f8      	bne.n	803ead4 <_strtoull_l.constprop.0+0x10>
 803eae2:	2c2d      	cmp	r4, #45	@ 0x2d
 803eae4:	d14a      	bne.n	803eb7c <_strtoull_l.constprop.0+0xb8>
 803eae6:	782c      	ldrb	r4, [r5, #0]
 803eae8:	2701      	movs	r7, #1
 803eaea:	1c9d      	adds	r5, r3, #2
 803eaec:	f036 0310 	bics.w	r3, r6, #16
 803eaf0:	d109      	bne.n	803eb06 <_strtoull_l.constprop.0+0x42>
 803eaf2:	2c30      	cmp	r4, #48	@ 0x30
 803eaf4:	d147      	bne.n	803eb86 <_strtoull_l.constprop.0+0xc2>
 803eaf6:	782b      	ldrb	r3, [r5, #0]
 803eaf8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 803eafc:	2b58      	cmp	r3, #88	@ 0x58
 803eafe:	d142      	bne.n	803eb86 <_strtoull_l.constprop.0+0xc2>
 803eb00:	786c      	ldrb	r4, [r5, #1]
 803eb02:	2610      	movs	r6, #16
 803eb04:	3502      	adds	r5, #2
 803eb06:	ea4f 7be6 	mov.w	fp, r6, asr #31
 803eb0a:	4632      	mov	r2, r6
 803eb0c:	465b      	mov	r3, fp
 803eb0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803eb12:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 803eb16:	f7d2 f91f 	bl	8010d58 <__aeabi_uldivmod>
 803eb1a:	4632      	mov	r2, r6
 803eb1c:	9000      	str	r0, [sp, #0]
 803eb1e:	4688      	mov	r8, r1
 803eb20:	465b      	mov	r3, fp
 803eb22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803eb26:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 803eb2a:	f7d2 f915 	bl	8010d58 <__aeabi_uldivmod>
 803eb2e:	2300      	movs	r3, #0
 803eb30:	4618      	mov	r0, r3
 803eb32:	4619      	mov	r1, r3
 803eb34:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 803eb38:	f1bc 0f09 	cmp.w	ip, #9
 803eb3c:	d82a      	bhi.n	803eb94 <_strtoull_l.constprop.0+0xd0>
 803eb3e:	4664      	mov	r4, ip
 803eb40:	42a6      	cmp	r6, r4
 803eb42:	dd38      	ble.n	803ebb6 <_strtoull_l.constprop.0+0xf2>
 803eb44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 803eb48:	d015      	beq.n	803eb76 <_strtoull_l.constprop.0+0xb2>
 803eb4a:	9b00      	ldr	r3, [sp, #0]
 803eb4c:	4283      	cmp	r3, r0
 803eb4e:	eb78 0301 	sbcs.w	r3, r8, r1
 803eb52:	d32d      	bcc.n	803ebb0 <_strtoull_l.constprop.0+0xec>
 803eb54:	9b00      	ldr	r3, [sp, #0]
 803eb56:	4588      	cmp	r8, r1
 803eb58:	bf08      	it	eq
 803eb5a:	4283      	cmpeq	r3, r0
 803eb5c:	d101      	bne.n	803eb62 <_strtoull_l.constprop.0+0x9e>
 803eb5e:	42a2      	cmp	r2, r4
 803eb60:	db26      	blt.n	803ebb0 <_strtoull_l.constprop.0+0xec>
 803eb62:	4371      	muls	r1, r6
 803eb64:	fb00 110b 	mla	r1, r0, fp, r1
 803eb68:	fba6 0300 	umull	r0, r3, r6, r0
 803eb6c:	4419      	add	r1, r3
 803eb6e:	1820      	adds	r0, r4, r0
 803eb70:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 803eb74:	2301      	movs	r3, #1
 803eb76:	f815 4b01 	ldrb.w	r4, [r5], #1
 803eb7a:	e7db      	b.n	803eb34 <_strtoull_l.constprop.0+0x70>
 803eb7c:	2c2b      	cmp	r4, #43	@ 0x2b
 803eb7e:	bf04      	itt	eq
 803eb80:	782c      	ldrbeq	r4, [r5, #0]
 803eb82:	1c9d      	addeq	r5, r3, #2
 803eb84:	e7b2      	b.n	803eaec <_strtoull_l.constprop.0+0x28>
 803eb86:	2e00      	cmp	r6, #0
 803eb88:	d1bd      	bne.n	803eb06 <_strtoull_l.constprop.0+0x42>
 803eb8a:	2c30      	cmp	r4, #48	@ 0x30
 803eb8c:	bf0c      	ite	eq
 803eb8e:	2608      	moveq	r6, #8
 803eb90:	260a      	movne	r6, #10
 803eb92:	e7b8      	b.n	803eb06 <_strtoull_l.constprop.0+0x42>
 803eb94:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 803eb98:	f1bc 0f19 	cmp.w	ip, #25
 803eb9c:	d801      	bhi.n	803eba2 <_strtoull_l.constprop.0+0xde>
 803eb9e:	3c37      	subs	r4, #55	@ 0x37
 803eba0:	e7ce      	b.n	803eb40 <_strtoull_l.constprop.0+0x7c>
 803eba2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 803eba6:	f1bc 0f19 	cmp.w	ip, #25
 803ebaa:	d804      	bhi.n	803ebb6 <_strtoull_l.constprop.0+0xf2>
 803ebac:	3c57      	subs	r4, #87	@ 0x57
 803ebae:	e7c7      	b.n	803eb40 <_strtoull_l.constprop.0+0x7c>
 803ebb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803ebb4:	e7df      	b.n	803eb76 <_strtoull_l.constprop.0+0xb2>
 803ebb6:	1c5a      	adds	r2, r3, #1
 803ebb8:	d10a      	bne.n	803ebd0 <_strtoull_l.constprop.0+0x10c>
 803ebba:	9901      	ldr	r1, [sp, #4]
 803ebbc:	2222      	movs	r2, #34	@ 0x22
 803ebbe:	600a      	str	r2, [r1, #0]
 803ebc0:	4618      	mov	r0, r3
 803ebc2:	4619      	mov	r1, r3
 803ebc4:	f1b9 0f00 	cmp.w	r9, #0
 803ebc8:	d10a      	bne.n	803ebe0 <_strtoull_l.constprop.0+0x11c>
 803ebca:	b003      	add	sp, #12
 803ebcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ebd0:	b117      	cbz	r7, 803ebd8 <_strtoull_l.constprop.0+0x114>
 803ebd2:	4240      	negs	r0, r0
 803ebd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 803ebd8:	f1b9 0f00 	cmp.w	r9, #0
 803ebdc:	d0f5      	beq.n	803ebca <_strtoull_l.constprop.0+0x106>
 803ebde:	b10b      	cbz	r3, 803ebe4 <_strtoull_l.constprop.0+0x120>
 803ebe0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 803ebe4:	f8c9 a000 	str.w	sl, [r9]
 803ebe8:	e7ef      	b.n	803ebca <_strtoull_l.constprop.0+0x106>
 803ebea:	bf00      	nop
 803ebec:	08045025 	.word	0x08045025

0803ebf0 <_strtoull_r>:
 803ebf0:	f7ff bf68 	b.w	803eac4 <_strtoull_l.constprop.0>

0803ebf4 <_mbrtowc_r>:
 803ebf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803ebf6:	4c0a      	ldr	r4, [pc, #40]	@ (803ec20 <_mbrtowc_r+0x2c>)
 803ebf8:	9e08      	ldr	r6, [sp, #32]
 803ebfa:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 803ebfe:	9600      	str	r6, [sp, #0]
 803ec00:	4605      	mov	r5, r0
 803ec02:	4614      	mov	r4, r2
 803ec04:	b912      	cbnz	r2, 803ec0c <_mbrtowc_r+0x18>
 803ec06:	4a07      	ldr	r2, [pc, #28]	@ (803ec24 <_mbrtowc_r+0x30>)
 803ec08:	2301      	movs	r3, #1
 803ec0a:	4621      	mov	r1, r4
 803ec0c:	47b8      	blx	r7
 803ec0e:	1c43      	adds	r3, r0, #1
 803ec10:	bf01      	itttt	eq
 803ec12:	2300      	moveq	r3, #0
 803ec14:	6033      	streq	r3, [r6, #0]
 803ec16:	238a      	moveq	r3, #138	@ 0x8a
 803ec18:	602b      	streq	r3, [r5, #0]
 803ec1a:	b003      	add	sp, #12
 803ec1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803ec1e:	bf00      	nop
 803ec20:	200002d4 	.word	0x200002d4
 803ec24:	08044c67 	.word	0x08044c67

0803ec28 <iswspace>:
 803ec28:	2100      	movs	r1, #0
 803ec2a:	f000 b801 	b.w	803ec30 <iswspace_l>
	...

0803ec30 <iswspace_l>:
 803ec30:	28ff      	cmp	r0, #255	@ 0xff
 803ec32:	bf9d      	ittte	ls
 803ec34:	4b02      	ldrls	r3, [pc, #8]	@ (803ec40 <iswspace_l+0x10>)
 803ec36:	5c18      	ldrbls	r0, [r3, r0]
 803ec38:	f000 0008 	andls.w	r0, r0, #8
 803ec3c:	2000      	movhi	r0, #0
 803ec3e:	4770      	bx	lr
 803ec40:	08045025 	.word	0x08045025

0803ec44 <__register_exitproc>:
 803ec44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803ec48:	f8df a074 	ldr.w	sl, [pc, #116]	@ 803ecc0 <__register_exitproc+0x7c>
 803ec4c:	4606      	mov	r6, r0
 803ec4e:	f8da 0000 	ldr.w	r0, [sl]
 803ec52:	4698      	mov	r8, r3
 803ec54:	460f      	mov	r7, r1
 803ec56:	4691      	mov	r9, r2
 803ec58:	f7f8 fc7b 	bl	8037552 <__retarget_lock_acquire_recursive>
 803ec5c:	4b16      	ldr	r3, [pc, #88]	@ (803ecb8 <__register_exitproc+0x74>)
 803ec5e:	681c      	ldr	r4, [r3, #0]
 803ec60:	b90c      	cbnz	r4, 803ec66 <__register_exitproc+0x22>
 803ec62:	4c16      	ldr	r4, [pc, #88]	@ (803ecbc <__register_exitproc+0x78>)
 803ec64:	601c      	str	r4, [r3, #0]
 803ec66:	6865      	ldr	r5, [r4, #4]
 803ec68:	f8da 0000 	ldr.w	r0, [sl]
 803ec6c:	2d1f      	cmp	r5, #31
 803ec6e:	dd05      	ble.n	803ec7c <__register_exitproc+0x38>
 803ec70:	f7f8 fc71 	bl	8037556 <__retarget_lock_release_recursive>
 803ec74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803ec78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803ec7c:	b19e      	cbz	r6, 803eca6 <__register_exitproc+0x62>
 803ec7e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 803ec82:	2201      	movs	r2, #1
 803ec84:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 803ec88:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 803ec8c:	40aa      	lsls	r2, r5
 803ec8e:	4313      	orrs	r3, r2
 803ec90:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 803ec94:	2e02      	cmp	r6, #2
 803ec96:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 803ec9a:	bf02      	ittt	eq
 803ec9c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 803eca0:	4313      	orreq	r3, r2
 803eca2:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 803eca6:	1c6b      	adds	r3, r5, #1
 803eca8:	3502      	adds	r5, #2
 803ecaa:	6063      	str	r3, [r4, #4]
 803ecac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 803ecb0:	f7f8 fc51 	bl	8037556 <__retarget_lock_release_recursive>
 803ecb4:	2000      	movs	r0, #0
 803ecb6:	e7df      	b.n	803ec78 <__register_exitproc+0x34>
 803ecb8:	2001834c 	.word	0x2001834c
 803ecbc:	20018384 	.word	0x20018384
 803ecc0:	20000568 	.word	0x20000568
 803ecc4:	00000000 	.word	0x00000000

0803ecc8 <nan>:
 803ecc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 803ecd0 <nan+0x8>
 803eccc:	4770      	bx	lr
 803ecce:	bf00      	nop
 803ecd0:	00000000 	.word	0x00000000
 803ecd4:	7ff80000 	.word	0x7ff80000

0803ecd8 <nanf>:
 803ecd8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 803ece0 <nanf+0x8>
 803ecdc:	4770      	bx	lr
 803ecde:	bf00      	nop
 803ece0:	7fc00000 	.word	0x7fc00000

0803ece4 <_calloc_r>:
 803ece4:	b538      	push	{r3, r4, r5, lr}
 803ece6:	fba1 1502 	umull	r1, r5, r1, r2
 803ecea:	b935      	cbnz	r5, 803ecfa <_calloc_r+0x16>
 803ecec:	f7f9 fc4e 	bl	803858c <_malloc_r>
 803ecf0:	4604      	mov	r4, r0
 803ecf2:	b938      	cbnz	r0, 803ed04 <_calloc_r+0x20>
 803ecf4:	2400      	movs	r4, #0
 803ecf6:	4620      	mov	r0, r4
 803ecf8:	bd38      	pop	{r3, r4, r5, pc}
 803ecfa:	f7f8 fbf5 	bl	80374e8 <__errno>
 803ecfe:	230c      	movs	r3, #12
 803ed00:	6003      	str	r3, [r0, #0]
 803ed02:	e7f7      	b.n	803ecf4 <_calloc_r+0x10>
 803ed04:	f850 2c04 	ldr.w	r2, [r0, #-4]
 803ed08:	f022 0203 	bic.w	r2, r2, #3
 803ed0c:	3a04      	subs	r2, #4
 803ed0e:	2a24      	cmp	r2, #36	@ 0x24
 803ed10:	d819      	bhi.n	803ed46 <_calloc_r+0x62>
 803ed12:	2a13      	cmp	r2, #19
 803ed14:	d915      	bls.n	803ed42 <_calloc_r+0x5e>
 803ed16:	2a1b      	cmp	r2, #27
 803ed18:	e9c0 5500 	strd	r5, r5, [r0]
 803ed1c:	d806      	bhi.n	803ed2c <_calloc_r+0x48>
 803ed1e:	f100 0308 	add.w	r3, r0, #8
 803ed22:	2200      	movs	r2, #0
 803ed24:	e9c3 2200 	strd	r2, r2, [r3]
 803ed28:	609a      	str	r2, [r3, #8]
 803ed2a:	e7e4      	b.n	803ecf6 <_calloc_r+0x12>
 803ed2c:	2a24      	cmp	r2, #36	@ 0x24
 803ed2e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 803ed32:	bf11      	iteee	ne
 803ed34:	f100 0310 	addne.w	r3, r0, #16
 803ed38:	6105      	streq	r5, [r0, #16]
 803ed3a:	f100 0318 	addeq.w	r3, r0, #24
 803ed3e:	6145      	streq	r5, [r0, #20]
 803ed40:	e7ef      	b.n	803ed22 <_calloc_r+0x3e>
 803ed42:	4603      	mov	r3, r0
 803ed44:	e7ed      	b.n	803ed22 <_calloc_r+0x3e>
 803ed46:	4629      	mov	r1, r5
 803ed48:	f7f7 f9ca 	bl	80360e0 <memset>
 803ed4c:	e7d3      	b.n	803ecf6 <_calloc_r+0x12>
	...

0803ed50 <__env_lock>:
 803ed50:	4801      	ldr	r0, [pc, #4]	@ (803ed58 <__env_lock+0x8>)
 803ed52:	f7f8 bbfe 	b.w	8037552 <__retarget_lock_acquire_recursive>
 803ed56:	bf00      	nop
 803ed58:	20018345 	.word	0x20018345

0803ed5c <__env_unlock>:
 803ed5c:	4801      	ldr	r0, [pc, #4]	@ (803ed64 <__env_unlock+0x8>)
 803ed5e:	f7f8 bbfa 	b.w	8037556 <__retarget_lock_release_recursive>
 803ed62:	bf00      	nop
 803ed64:	20018345 	.word	0x20018345

0803ed68 <rshift>:
 803ed68:	6903      	ldr	r3, [r0, #16]
 803ed6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 803ed6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 803ed72:	ea4f 1261 	mov.w	r2, r1, asr #5
 803ed76:	f100 0414 	add.w	r4, r0, #20
 803ed7a:	dd45      	ble.n	803ee08 <rshift+0xa0>
 803ed7c:	f011 011f 	ands.w	r1, r1, #31
 803ed80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 803ed84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 803ed88:	d10c      	bne.n	803eda4 <rshift+0x3c>
 803ed8a:	f100 0710 	add.w	r7, r0, #16
 803ed8e:	4629      	mov	r1, r5
 803ed90:	42b1      	cmp	r1, r6
 803ed92:	d334      	bcc.n	803edfe <rshift+0x96>
 803ed94:	1a9b      	subs	r3, r3, r2
 803ed96:	009b      	lsls	r3, r3, #2
 803ed98:	1eea      	subs	r2, r5, #3
 803ed9a:	4296      	cmp	r6, r2
 803ed9c:	bf38      	it	cc
 803ed9e:	2300      	movcc	r3, #0
 803eda0:	4423      	add	r3, r4
 803eda2:	e015      	b.n	803edd0 <rshift+0x68>
 803eda4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 803eda8:	f1c1 0820 	rsb	r8, r1, #32
 803edac:	40cf      	lsrs	r7, r1
 803edae:	f105 0e04 	add.w	lr, r5, #4
 803edb2:	46a1      	mov	r9, r4
 803edb4:	4576      	cmp	r6, lr
 803edb6:	46f4      	mov	ip, lr
 803edb8:	d815      	bhi.n	803ede6 <rshift+0x7e>
 803edba:	1a9a      	subs	r2, r3, r2
 803edbc:	0092      	lsls	r2, r2, #2
 803edbe:	3a04      	subs	r2, #4
 803edc0:	3501      	adds	r5, #1
 803edc2:	42ae      	cmp	r6, r5
 803edc4:	bf38      	it	cc
 803edc6:	2200      	movcc	r2, #0
 803edc8:	18a3      	adds	r3, r4, r2
 803edca:	50a7      	str	r7, [r4, r2]
 803edcc:	b107      	cbz	r7, 803edd0 <rshift+0x68>
 803edce:	3304      	adds	r3, #4
 803edd0:	1b1a      	subs	r2, r3, r4
 803edd2:	42a3      	cmp	r3, r4
 803edd4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 803edd8:	bf08      	it	eq
 803edda:	2300      	moveq	r3, #0
 803eddc:	6102      	str	r2, [r0, #16]
 803edde:	bf08      	it	eq
 803ede0:	6143      	streq	r3, [r0, #20]
 803ede2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803ede6:	f8dc c000 	ldr.w	ip, [ip]
 803edea:	fa0c fc08 	lsl.w	ip, ip, r8
 803edee:	ea4c 0707 	orr.w	r7, ip, r7
 803edf2:	f849 7b04 	str.w	r7, [r9], #4
 803edf6:	f85e 7b04 	ldr.w	r7, [lr], #4
 803edfa:	40cf      	lsrs	r7, r1
 803edfc:	e7da      	b.n	803edb4 <rshift+0x4c>
 803edfe:	f851 cb04 	ldr.w	ip, [r1], #4
 803ee02:	f847 cf04 	str.w	ip, [r7, #4]!
 803ee06:	e7c3      	b.n	803ed90 <rshift+0x28>
 803ee08:	4623      	mov	r3, r4
 803ee0a:	e7e1      	b.n	803edd0 <rshift+0x68>

0803ee0c <__hexdig_fun>:
 803ee0c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 803ee10:	2b09      	cmp	r3, #9
 803ee12:	d802      	bhi.n	803ee1a <__hexdig_fun+0xe>
 803ee14:	3820      	subs	r0, #32
 803ee16:	b2c0      	uxtb	r0, r0
 803ee18:	4770      	bx	lr
 803ee1a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 803ee1e:	2b05      	cmp	r3, #5
 803ee20:	d801      	bhi.n	803ee26 <__hexdig_fun+0x1a>
 803ee22:	3847      	subs	r0, #71	@ 0x47
 803ee24:	e7f7      	b.n	803ee16 <__hexdig_fun+0xa>
 803ee26:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 803ee2a:	2b05      	cmp	r3, #5
 803ee2c:	d801      	bhi.n	803ee32 <__hexdig_fun+0x26>
 803ee2e:	3827      	subs	r0, #39	@ 0x27
 803ee30:	e7f1      	b.n	803ee16 <__hexdig_fun+0xa>
 803ee32:	2000      	movs	r0, #0
 803ee34:	4770      	bx	lr
	...

0803ee38 <__gethex>:
 803ee38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803ee3c:	b085      	sub	sp, #20
 803ee3e:	468a      	mov	sl, r1
 803ee40:	9302      	str	r3, [sp, #8]
 803ee42:	680b      	ldr	r3, [r1, #0]
 803ee44:	9001      	str	r0, [sp, #4]
 803ee46:	4690      	mov	r8, r2
 803ee48:	1c9c      	adds	r4, r3, #2
 803ee4a:	46a1      	mov	r9, r4
 803ee4c:	f814 0b01 	ldrb.w	r0, [r4], #1
 803ee50:	2830      	cmp	r0, #48	@ 0x30
 803ee52:	d0fa      	beq.n	803ee4a <__gethex+0x12>
 803ee54:	eba9 0303 	sub.w	r3, r9, r3
 803ee58:	f1a3 0b02 	sub.w	fp, r3, #2
 803ee5c:	f7ff ffd6 	bl	803ee0c <__hexdig_fun>
 803ee60:	4605      	mov	r5, r0
 803ee62:	2800      	cmp	r0, #0
 803ee64:	d168      	bne.n	803ef38 <__gethex+0x100>
 803ee66:	49a0      	ldr	r1, [pc, #640]	@ (803f0e8 <__gethex+0x2b0>)
 803ee68:	2201      	movs	r2, #1
 803ee6a:	4648      	mov	r0, r9
 803ee6c:	f7f7 f96d 	bl	803614a <strncmp>
 803ee70:	4607      	mov	r7, r0
 803ee72:	2800      	cmp	r0, #0
 803ee74:	d167      	bne.n	803ef46 <__gethex+0x10e>
 803ee76:	f899 0001 	ldrb.w	r0, [r9, #1]
 803ee7a:	4626      	mov	r6, r4
 803ee7c:	f7ff ffc6 	bl	803ee0c <__hexdig_fun>
 803ee80:	2800      	cmp	r0, #0
 803ee82:	d062      	beq.n	803ef4a <__gethex+0x112>
 803ee84:	4623      	mov	r3, r4
 803ee86:	7818      	ldrb	r0, [r3, #0]
 803ee88:	2830      	cmp	r0, #48	@ 0x30
 803ee8a:	4699      	mov	r9, r3
 803ee8c:	f103 0301 	add.w	r3, r3, #1
 803ee90:	d0f9      	beq.n	803ee86 <__gethex+0x4e>
 803ee92:	f7ff ffbb 	bl	803ee0c <__hexdig_fun>
 803ee96:	fab0 f580 	clz	r5, r0
 803ee9a:	096d      	lsrs	r5, r5, #5
 803ee9c:	f04f 0b01 	mov.w	fp, #1
 803eea0:	464a      	mov	r2, r9
 803eea2:	4616      	mov	r6, r2
 803eea4:	3201      	adds	r2, #1
 803eea6:	7830      	ldrb	r0, [r6, #0]
 803eea8:	f7ff ffb0 	bl	803ee0c <__hexdig_fun>
 803eeac:	2800      	cmp	r0, #0
 803eeae:	d1f8      	bne.n	803eea2 <__gethex+0x6a>
 803eeb0:	498d      	ldr	r1, [pc, #564]	@ (803f0e8 <__gethex+0x2b0>)
 803eeb2:	2201      	movs	r2, #1
 803eeb4:	4630      	mov	r0, r6
 803eeb6:	f7f7 f948 	bl	803614a <strncmp>
 803eeba:	2800      	cmp	r0, #0
 803eebc:	d13f      	bne.n	803ef3e <__gethex+0x106>
 803eebe:	b944      	cbnz	r4, 803eed2 <__gethex+0x9a>
 803eec0:	1c74      	adds	r4, r6, #1
 803eec2:	4622      	mov	r2, r4
 803eec4:	4616      	mov	r6, r2
 803eec6:	3201      	adds	r2, #1
 803eec8:	7830      	ldrb	r0, [r6, #0]
 803eeca:	f7ff ff9f 	bl	803ee0c <__hexdig_fun>
 803eece:	2800      	cmp	r0, #0
 803eed0:	d1f8      	bne.n	803eec4 <__gethex+0x8c>
 803eed2:	1ba4      	subs	r4, r4, r6
 803eed4:	00a7      	lsls	r7, r4, #2
 803eed6:	7833      	ldrb	r3, [r6, #0]
 803eed8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 803eedc:	2b50      	cmp	r3, #80	@ 0x50
 803eede:	d13e      	bne.n	803ef5e <__gethex+0x126>
 803eee0:	7873      	ldrb	r3, [r6, #1]
 803eee2:	2b2b      	cmp	r3, #43	@ 0x2b
 803eee4:	d033      	beq.n	803ef4e <__gethex+0x116>
 803eee6:	2b2d      	cmp	r3, #45	@ 0x2d
 803eee8:	d034      	beq.n	803ef54 <__gethex+0x11c>
 803eeea:	1c71      	adds	r1, r6, #1
 803eeec:	2400      	movs	r4, #0
 803eeee:	7808      	ldrb	r0, [r1, #0]
 803eef0:	f7ff ff8c 	bl	803ee0c <__hexdig_fun>
 803eef4:	1e43      	subs	r3, r0, #1
 803eef6:	b2db      	uxtb	r3, r3
 803eef8:	2b18      	cmp	r3, #24
 803eefa:	d830      	bhi.n	803ef5e <__gethex+0x126>
 803eefc:	f1a0 0210 	sub.w	r2, r0, #16
 803ef00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 803ef04:	f7ff ff82 	bl	803ee0c <__hexdig_fun>
 803ef08:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 803ef0c:	fa5f fc8c 	uxtb.w	ip, ip
 803ef10:	f1bc 0f18 	cmp.w	ip, #24
 803ef14:	f04f 030a 	mov.w	r3, #10
 803ef18:	d91e      	bls.n	803ef58 <__gethex+0x120>
 803ef1a:	b104      	cbz	r4, 803ef1e <__gethex+0xe6>
 803ef1c:	4252      	negs	r2, r2
 803ef1e:	4417      	add	r7, r2
 803ef20:	f8ca 1000 	str.w	r1, [sl]
 803ef24:	b1ed      	cbz	r5, 803ef62 <__gethex+0x12a>
 803ef26:	f1bb 0f00 	cmp.w	fp, #0
 803ef2a:	bf0c      	ite	eq
 803ef2c:	2506      	moveq	r5, #6
 803ef2e:	2500      	movne	r5, #0
 803ef30:	4628      	mov	r0, r5
 803ef32:	b005      	add	sp, #20
 803ef34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ef38:	2500      	movs	r5, #0
 803ef3a:	462c      	mov	r4, r5
 803ef3c:	e7b0      	b.n	803eea0 <__gethex+0x68>
 803ef3e:	2c00      	cmp	r4, #0
 803ef40:	d1c7      	bne.n	803eed2 <__gethex+0x9a>
 803ef42:	4627      	mov	r7, r4
 803ef44:	e7c7      	b.n	803eed6 <__gethex+0x9e>
 803ef46:	464e      	mov	r6, r9
 803ef48:	462f      	mov	r7, r5
 803ef4a:	2501      	movs	r5, #1
 803ef4c:	e7c3      	b.n	803eed6 <__gethex+0x9e>
 803ef4e:	2400      	movs	r4, #0
 803ef50:	1cb1      	adds	r1, r6, #2
 803ef52:	e7cc      	b.n	803eeee <__gethex+0xb6>
 803ef54:	2401      	movs	r4, #1
 803ef56:	e7fb      	b.n	803ef50 <__gethex+0x118>
 803ef58:	fb03 0002 	mla	r0, r3, r2, r0
 803ef5c:	e7ce      	b.n	803eefc <__gethex+0xc4>
 803ef5e:	4631      	mov	r1, r6
 803ef60:	e7de      	b.n	803ef20 <__gethex+0xe8>
 803ef62:	eba6 0309 	sub.w	r3, r6, r9
 803ef66:	3b01      	subs	r3, #1
 803ef68:	4629      	mov	r1, r5
 803ef6a:	2b07      	cmp	r3, #7
 803ef6c:	dc0a      	bgt.n	803ef84 <__gethex+0x14c>
 803ef6e:	9801      	ldr	r0, [sp, #4]
 803ef70:	f7fd fe22 	bl	803cbb8 <_Balloc>
 803ef74:	4604      	mov	r4, r0
 803ef76:	b940      	cbnz	r0, 803ef8a <__gethex+0x152>
 803ef78:	4b5c      	ldr	r3, [pc, #368]	@ (803f0ec <__gethex+0x2b4>)
 803ef7a:	4602      	mov	r2, r0
 803ef7c:	21e4      	movs	r1, #228	@ 0xe4
 803ef7e:	485c      	ldr	r0, [pc, #368]	@ (803f0f0 <__gethex+0x2b8>)
 803ef80:	f7f4 fb5a 	bl	8033638 <__assert_func>
 803ef84:	3101      	adds	r1, #1
 803ef86:	105b      	asrs	r3, r3, #1
 803ef88:	e7ef      	b.n	803ef6a <__gethex+0x132>
 803ef8a:	f100 0a14 	add.w	sl, r0, #20
 803ef8e:	2300      	movs	r3, #0
 803ef90:	4655      	mov	r5, sl
 803ef92:	469b      	mov	fp, r3
 803ef94:	45b1      	cmp	r9, r6
 803ef96:	d337      	bcc.n	803f008 <__gethex+0x1d0>
 803ef98:	f845 bb04 	str.w	fp, [r5], #4
 803ef9c:	eba5 050a 	sub.w	r5, r5, sl
 803efa0:	10ad      	asrs	r5, r5, #2
 803efa2:	6125      	str	r5, [r4, #16]
 803efa4:	4658      	mov	r0, fp
 803efa6:	f7fd fec5 	bl	803cd34 <__hi0bits>
 803efaa:	016d      	lsls	r5, r5, #5
 803efac:	f8d8 6000 	ldr.w	r6, [r8]
 803efb0:	1a2d      	subs	r5, r5, r0
 803efb2:	42b5      	cmp	r5, r6
 803efb4:	dd54      	ble.n	803f060 <__gethex+0x228>
 803efb6:	1bad      	subs	r5, r5, r6
 803efb8:	4629      	mov	r1, r5
 803efba:	4620      	mov	r0, r4
 803efbc:	f7fe fa3f 	bl	803d43e <__any_on>
 803efc0:	4681      	mov	r9, r0
 803efc2:	b178      	cbz	r0, 803efe4 <__gethex+0x1ac>
 803efc4:	1e6b      	subs	r3, r5, #1
 803efc6:	1159      	asrs	r1, r3, #5
 803efc8:	f003 021f 	and.w	r2, r3, #31
 803efcc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 803efd0:	f04f 0901 	mov.w	r9, #1
 803efd4:	fa09 f202 	lsl.w	r2, r9, r2
 803efd8:	420a      	tst	r2, r1
 803efda:	d003      	beq.n	803efe4 <__gethex+0x1ac>
 803efdc:	454b      	cmp	r3, r9
 803efde:	dc36      	bgt.n	803f04e <__gethex+0x216>
 803efe0:	f04f 0902 	mov.w	r9, #2
 803efe4:	4629      	mov	r1, r5
 803efe6:	4620      	mov	r0, r4
 803efe8:	f7ff febe 	bl	803ed68 <rshift>
 803efec:	442f      	add	r7, r5
 803efee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 803eff2:	42bb      	cmp	r3, r7
 803eff4:	da42      	bge.n	803f07c <__gethex+0x244>
 803eff6:	9801      	ldr	r0, [sp, #4]
 803eff8:	4621      	mov	r1, r4
 803effa:	f7fd fe02 	bl	803cc02 <_Bfree>
 803effe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803f000:	2300      	movs	r3, #0
 803f002:	6013      	str	r3, [r2, #0]
 803f004:	25a3      	movs	r5, #163	@ 0xa3
 803f006:	e793      	b.n	803ef30 <__gethex+0xf8>
 803f008:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 803f00c:	2a2e      	cmp	r2, #46	@ 0x2e
 803f00e:	d012      	beq.n	803f036 <__gethex+0x1fe>
 803f010:	2b20      	cmp	r3, #32
 803f012:	d104      	bne.n	803f01e <__gethex+0x1e6>
 803f014:	f845 bb04 	str.w	fp, [r5], #4
 803f018:	f04f 0b00 	mov.w	fp, #0
 803f01c:	465b      	mov	r3, fp
 803f01e:	7830      	ldrb	r0, [r6, #0]
 803f020:	9303      	str	r3, [sp, #12]
 803f022:	f7ff fef3 	bl	803ee0c <__hexdig_fun>
 803f026:	9b03      	ldr	r3, [sp, #12]
 803f028:	f000 000f 	and.w	r0, r0, #15
 803f02c:	4098      	lsls	r0, r3
 803f02e:	ea4b 0b00 	orr.w	fp, fp, r0
 803f032:	3304      	adds	r3, #4
 803f034:	e7ae      	b.n	803ef94 <__gethex+0x15c>
 803f036:	45b1      	cmp	r9, r6
 803f038:	d8ea      	bhi.n	803f010 <__gethex+0x1d8>
 803f03a:	492b      	ldr	r1, [pc, #172]	@ (803f0e8 <__gethex+0x2b0>)
 803f03c:	9303      	str	r3, [sp, #12]
 803f03e:	2201      	movs	r2, #1
 803f040:	4630      	mov	r0, r6
 803f042:	f7f7 f882 	bl	803614a <strncmp>
 803f046:	9b03      	ldr	r3, [sp, #12]
 803f048:	2800      	cmp	r0, #0
 803f04a:	d1e1      	bne.n	803f010 <__gethex+0x1d8>
 803f04c:	e7a2      	b.n	803ef94 <__gethex+0x15c>
 803f04e:	1ea9      	subs	r1, r5, #2
 803f050:	4620      	mov	r0, r4
 803f052:	f7fe f9f4 	bl	803d43e <__any_on>
 803f056:	2800      	cmp	r0, #0
 803f058:	d0c2      	beq.n	803efe0 <__gethex+0x1a8>
 803f05a:	f04f 0903 	mov.w	r9, #3
 803f05e:	e7c1      	b.n	803efe4 <__gethex+0x1ac>
 803f060:	da09      	bge.n	803f076 <__gethex+0x23e>
 803f062:	1b75      	subs	r5, r6, r5
 803f064:	4621      	mov	r1, r4
 803f066:	9801      	ldr	r0, [sp, #4]
 803f068:	462a      	mov	r2, r5
 803f06a:	f7fd ffaf 	bl	803cfcc <__lshift>
 803f06e:	1b7f      	subs	r7, r7, r5
 803f070:	4604      	mov	r4, r0
 803f072:	f100 0a14 	add.w	sl, r0, #20
 803f076:	f04f 0900 	mov.w	r9, #0
 803f07a:	e7b8      	b.n	803efee <__gethex+0x1b6>
 803f07c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 803f080:	42bd      	cmp	r5, r7
 803f082:	dd6f      	ble.n	803f164 <__gethex+0x32c>
 803f084:	1bed      	subs	r5, r5, r7
 803f086:	42ae      	cmp	r6, r5
 803f088:	dc34      	bgt.n	803f0f4 <__gethex+0x2bc>
 803f08a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803f08e:	2b02      	cmp	r3, #2
 803f090:	d022      	beq.n	803f0d8 <__gethex+0x2a0>
 803f092:	2b03      	cmp	r3, #3
 803f094:	d024      	beq.n	803f0e0 <__gethex+0x2a8>
 803f096:	2b01      	cmp	r3, #1
 803f098:	d115      	bne.n	803f0c6 <__gethex+0x28e>
 803f09a:	42ae      	cmp	r6, r5
 803f09c:	d113      	bne.n	803f0c6 <__gethex+0x28e>
 803f09e:	2e01      	cmp	r6, #1
 803f0a0:	d10b      	bne.n	803f0ba <__gethex+0x282>
 803f0a2:	9a02      	ldr	r2, [sp, #8]
 803f0a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 803f0a8:	6013      	str	r3, [r2, #0]
 803f0aa:	2301      	movs	r3, #1
 803f0ac:	6123      	str	r3, [r4, #16]
 803f0ae:	f8ca 3000 	str.w	r3, [sl]
 803f0b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803f0b4:	2562      	movs	r5, #98	@ 0x62
 803f0b6:	601c      	str	r4, [r3, #0]
 803f0b8:	e73a      	b.n	803ef30 <__gethex+0xf8>
 803f0ba:	1e71      	subs	r1, r6, #1
 803f0bc:	4620      	mov	r0, r4
 803f0be:	f7fe f9be 	bl	803d43e <__any_on>
 803f0c2:	2800      	cmp	r0, #0
 803f0c4:	d1ed      	bne.n	803f0a2 <__gethex+0x26a>
 803f0c6:	9801      	ldr	r0, [sp, #4]
 803f0c8:	4621      	mov	r1, r4
 803f0ca:	f7fd fd9a 	bl	803cc02 <_Bfree>
 803f0ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803f0d0:	2300      	movs	r3, #0
 803f0d2:	6013      	str	r3, [r2, #0]
 803f0d4:	2550      	movs	r5, #80	@ 0x50
 803f0d6:	e72b      	b.n	803ef30 <__gethex+0xf8>
 803f0d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803f0da:	2b00      	cmp	r3, #0
 803f0dc:	d1f3      	bne.n	803f0c6 <__gethex+0x28e>
 803f0de:	e7e0      	b.n	803f0a2 <__gethex+0x26a>
 803f0e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803f0e2:	2b00      	cmp	r3, #0
 803f0e4:	d1dd      	bne.n	803f0a2 <__gethex+0x26a>
 803f0e6:	e7ee      	b.n	803f0c6 <__gethex+0x28e>
 803f0e8:	08044dfa 	.word	0x08044dfa
 803f0ec:	08045132 	.word	0x08045132
 803f0f0:	080453d0 	.word	0x080453d0
 803f0f4:	1e6f      	subs	r7, r5, #1
 803f0f6:	f1b9 0f00 	cmp.w	r9, #0
 803f0fa:	d130      	bne.n	803f15e <__gethex+0x326>
 803f0fc:	b127      	cbz	r7, 803f108 <__gethex+0x2d0>
 803f0fe:	4639      	mov	r1, r7
 803f100:	4620      	mov	r0, r4
 803f102:	f7fe f99c 	bl	803d43e <__any_on>
 803f106:	4681      	mov	r9, r0
 803f108:	117a      	asrs	r2, r7, #5
 803f10a:	2301      	movs	r3, #1
 803f10c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 803f110:	f007 071f 	and.w	r7, r7, #31
 803f114:	40bb      	lsls	r3, r7
 803f116:	4213      	tst	r3, r2
 803f118:	4629      	mov	r1, r5
 803f11a:	4620      	mov	r0, r4
 803f11c:	bf18      	it	ne
 803f11e:	f049 0902 	orrne.w	r9, r9, #2
 803f122:	f7ff fe21 	bl	803ed68 <rshift>
 803f126:	f8d8 7004 	ldr.w	r7, [r8, #4]
 803f12a:	1b76      	subs	r6, r6, r5
 803f12c:	2502      	movs	r5, #2
 803f12e:	f1b9 0f00 	cmp.w	r9, #0
 803f132:	d047      	beq.n	803f1c4 <__gethex+0x38c>
 803f134:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803f138:	2b02      	cmp	r3, #2
 803f13a:	d015      	beq.n	803f168 <__gethex+0x330>
 803f13c:	2b03      	cmp	r3, #3
 803f13e:	d017      	beq.n	803f170 <__gethex+0x338>
 803f140:	2b01      	cmp	r3, #1
 803f142:	d109      	bne.n	803f158 <__gethex+0x320>
 803f144:	f019 0f02 	tst.w	r9, #2
 803f148:	d006      	beq.n	803f158 <__gethex+0x320>
 803f14a:	f8da 3000 	ldr.w	r3, [sl]
 803f14e:	ea49 0903 	orr.w	r9, r9, r3
 803f152:	f019 0f01 	tst.w	r9, #1
 803f156:	d10e      	bne.n	803f176 <__gethex+0x33e>
 803f158:	f045 0510 	orr.w	r5, r5, #16
 803f15c:	e032      	b.n	803f1c4 <__gethex+0x38c>
 803f15e:	f04f 0901 	mov.w	r9, #1
 803f162:	e7d1      	b.n	803f108 <__gethex+0x2d0>
 803f164:	2501      	movs	r5, #1
 803f166:	e7e2      	b.n	803f12e <__gethex+0x2f6>
 803f168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803f16a:	f1c3 0301 	rsb	r3, r3, #1
 803f16e:	930f      	str	r3, [sp, #60]	@ 0x3c
 803f170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803f172:	2b00      	cmp	r3, #0
 803f174:	d0f0      	beq.n	803f158 <__gethex+0x320>
 803f176:	f8d4 b010 	ldr.w	fp, [r4, #16]
 803f17a:	f104 0314 	add.w	r3, r4, #20
 803f17e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 803f182:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 803f186:	f04f 0c00 	mov.w	ip, #0
 803f18a:	4618      	mov	r0, r3
 803f18c:	f853 2b04 	ldr.w	r2, [r3], #4
 803f190:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 803f194:	d01b      	beq.n	803f1ce <__gethex+0x396>
 803f196:	3201      	adds	r2, #1
 803f198:	6002      	str	r2, [r0, #0]
 803f19a:	2d02      	cmp	r5, #2
 803f19c:	f104 0314 	add.w	r3, r4, #20
 803f1a0:	d13c      	bne.n	803f21c <__gethex+0x3e4>
 803f1a2:	f8d8 2000 	ldr.w	r2, [r8]
 803f1a6:	3a01      	subs	r2, #1
 803f1a8:	42b2      	cmp	r2, r6
 803f1aa:	d109      	bne.n	803f1c0 <__gethex+0x388>
 803f1ac:	1171      	asrs	r1, r6, #5
 803f1ae:	2201      	movs	r2, #1
 803f1b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 803f1b4:	f006 061f 	and.w	r6, r6, #31
 803f1b8:	fa02 f606 	lsl.w	r6, r2, r6
 803f1bc:	421e      	tst	r6, r3
 803f1be:	d13a      	bne.n	803f236 <__gethex+0x3fe>
 803f1c0:	f045 0520 	orr.w	r5, r5, #32
 803f1c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803f1c6:	601c      	str	r4, [r3, #0]
 803f1c8:	9b02      	ldr	r3, [sp, #8]
 803f1ca:	601f      	str	r7, [r3, #0]
 803f1cc:	e6b0      	b.n	803ef30 <__gethex+0xf8>
 803f1ce:	4299      	cmp	r1, r3
 803f1d0:	f843 cc04 	str.w	ip, [r3, #-4]
 803f1d4:	d8d9      	bhi.n	803f18a <__gethex+0x352>
 803f1d6:	68a3      	ldr	r3, [r4, #8]
 803f1d8:	459b      	cmp	fp, r3
 803f1da:	db17      	blt.n	803f20c <__gethex+0x3d4>
 803f1dc:	6861      	ldr	r1, [r4, #4]
 803f1de:	9801      	ldr	r0, [sp, #4]
 803f1e0:	3101      	adds	r1, #1
 803f1e2:	f7fd fce9 	bl	803cbb8 <_Balloc>
 803f1e6:	4681      	mov	r9, r0
 803f1e8:	b918      	cbnz	r0, 803f1f2 <__gethex+0x3ba>
 803f1ea:	4b1a      	ldr	r3, [pc, #104]	@ (803f254 <__gethex+0x41c>)
 803f1ec:	4602      	mov	r2, r0
 803f1ee:	2184      	movs	r1, #132	@ 0x84
 803f1f0:	e6c5      	b.n	803ef7e <__gethex+0x146>
 803f1f2:	6922      	ldr	r2, [r4, #16]
 803f1f4:	3202      	adds	r2, #2
 803f1f6:	f104 010c 	add.w	r1, r4, #12
 803f1fa:	0092      	lsls	r2, r2, #2
 803f1fc:	300c      	adds	r0, #12
 803f1fe:	f7f8 f9ab 	bl	8037558 <memcpy>
 803f202:	4621      	mov	r1, r4
 803f204:	9801      	ldr	r0, [sp, #4]
 803f206:	f7fd fcfc 	bl	803cc02 <_Bfree>
 803f20a:	464c      	mov	r4, r9
 803f20c:	6923      	ldr	r3, [r4, #16]
 803f20e:	1c5a      	adds	r2, r3, #1
 803f210:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 803f214:	6122      	str	r2, [r4, #16]
 803f216:	2201      	movs	r2, #1
 803f218:	615a      	str	r2, [r3, #20]
 803f21a:	e7be      	b.n	803f19a <__gethex+0x362>
 803f21c:	6922      	ldr	r2, [r4, #16]
 803f21e:	455a      	cmp	r2, fp
 803f220:	dd0b      	ble.n	803f23a <__gethex+0x402>
 803f222:	2101      	movs	r1, #1
 803f224:	4620      	mov	r0, r4
 803f226:	f7ff fd9f 	bl	803ed68 <rshift>
 803f22a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 803f22e:	3701      	adds	r7, #1
 803f230:	42bb      	cmp	r3, r7
 803f232:	f6ff aee0 	blt.w	803eff6 <__gethex+0x1be>
 803f236:	2501      	movs	r5, #1
 803f238:	e7c2      	b.n	803f1c0 <__gethex+0x388>
 803f23a:	f016 061f 	ands.w	r6, r6, #31
 803f23e:	d0fa      	beq.n	803f236 <__gethex+0x3fe>
 803f240:	4453      	add	r3, sl
 803f242:	f1c6 0620 	rsb	r6, r6, #32
 803f246:	f853 0c04 	ldr.w	r0, [r3, #-4]
 803f24a:	f7fd fd73 	bl	803cd34 <__hi0bits>
 803f24e:	42b0      	cmp	r0, r6
 803f250:	dbe7      	blt.n	803f222 <__gethex+0x3ea>
 803f252:	e7f0      	b.n	803f236 <__gethex+0x3fe>
 803f254:	08045132 	.word	0x08045132

0803f258 <L_shift>:
 803f258:	f1c2 0208 	rsb	r2, r2, #8
 803f25c:	0092      	lsls	r2, r2, #2
 803f25e:	b570      	push	{r4, r5, r6, lr}
 803f260:	f1c2 0620 	rsb	r6, r2, #32
 803f264:	6843      	ldr	r3, [r0, #4]
 803f266:	6804      	ldr	r4, [r0, #0]
 803f268:	fa03 f506 	lsl.w	r5, r3, r6
 803f26c:	432c      	orrs	r4, r5
 803f26e:	40d3      	lsrs	r3, r2
 803f270:	6004      	str	r4, [r0, #0]
 803f272:	f840 3f04 	str.w	r3, [r0, #4]!
 803f276:	4288      	cmp	r0, r1
 803f278:	d3f4      	bcc.n	803f264 <L_shift+0xc>
 803f27a:	bd70      	pop	{r4, r5, r6, pc}

0803f27c <__match>:
 803f27c:	b530      	push	{r4, r5, lr}
 803f27e:	6803      	ldr	r3, [r0, #0]
 803f280:	3301      	adds	r3, #1
 803f282:	f811 4b01 	ldrb.w	r4, [r1], #1
 803f286:	b914      	cbnz	r4, 803f28e <__match+0x12>
 803f288:	6003      	str	r3, [r0, #0]
 803f28a:	2001      	movs	r0, #1
 803f28c:	bd30      	pop	{r4, r5, pc}
 803f28e:	f813 2b01 	ldrb.w	r2, [r3], #1
 803f292:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 803f296:	2d19      	cmp	r5, #25
 803f298:	bf98      	it	ls
 803f29a:	3220      	addls	r2, #32
 803f29c:	42a2      	cmp	r2, r4
 803f29e:	d0f0      	beq.n	803f282 <__match+0x6>
 803f2a0:	2000      	movs	r0, #0
 803f2a2:	e7f3      	b.n	803f28c <__match+0x10>

0803f2a4 <__hexnan>:
 803f2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803f2a8:	680b      	ldr	r3, [r1, #0]
 803f2aa:	6801      	ldr	r1, [r0, #0]
 803f2ac:	115e      	asrs	r6, r3, #5
 803f2ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 803f2b2:	f013 031f 	ands.w	r3, r3, #31
 803f2b6:	b087      	sub	sp, #28
 803f2b8:	bf18      	it	ne
 803f2ba:	3604      	addne	r6, #4
 803f2bc:	2500      	movs	r5, #0
 803f2be:	1f37      	subs	r7, r6, #4
 803f2c0:	4682      	mov	sl, r0
 803f2c2:	4690      	mov	r8, r2
 803f2c4:	9301      	str	r3, [sp, #4]
 803f2c6:	f846 5c04 	str.w	r5, [r6, #-4]
 803f2ca:	46b9      	mov	r9, r7
 803f2cc:	463c      	mov	r4, r7
 803f2ce:	9502      	str	r5, [sp, #8]
 803f2d0:	46ab      	mov	fp, r5
 803f2d2:	784a      	ldrb	r2, [r1, #1]
 803f2d4:	1c4b      	adds	r3, r1, #1
 803f2d6:	9303      	str	r3, [sp, #12]
 803f2d8:	b342      	cbz	r2, 803f32c <__hexnan+0x88>
 803f2da:	4610      	mov	r0, r2
 803f2dc:	9105      	str	r1, [sp, #20]
 803f2de:	9204      	str	r2, [sp, #16]
 803f2e0:	f7ff fd94 	bl	803ee0c <__hexdig_fun>
 803f2e4:	2800      	cmp	r0, #0
 803f2e6:	d151      	bne.n	803f38c <__hexnan+0xe8>
 803f2e8:	9a04      	ldr	r2, [sp, #16]
 803f2ea:	9905      	ldr	r1, [sp, #20]
 803f2ec:	2a20      	cmp	r2, #32
 803f2ee:	d818      	bhi.n	803f322 <__hexnan+0x7e>
 803f2f0:	9b02      	ldr	r3, [sp, #8]
 803f2f2:	459b      	cmp	fp, r3
 803f2f4:	dd13      	ble.n	803f31e <__hexnan+0x7a>
 803f2f6:	454c      	cmp	r4, r9
 803f2f8:	d206      	bcs.n	803f308 <__hexnan+0x64>
 803f2fa:	2d07      	cmp	r5, #7
 803f2fc:	dc04      	bgt.n	803f308 <__hexnan+0x64>
 803f2fe:	462a      	mov	r2, r5
 803f300:	4649      	mov	r1, r9
 803f302:	4620      	mov	r0, r4
 803f304:	f7ff ffa8 	bl	803f258 <L_shift>
 803f308:	4544      	cmp	r4, r8
 803f30a:	d952      	bls.n	803f3b2 <__hexnan+0x10e>
 803f30c:	2300      	movs	r3, #0
 803f30e:	f1a4 0904 	sub.w	r9, r4, #4
 803f312:	f844 3c04 	str.w	r3, [r4, #-4]
 803f316:	f8cd b008 	str.w	fp, [sp, #8]
 803f31a:	464c      	mov	r4, r9
 803f31c:	461d      	mov	r5, r3
 803f31e:	9903      	ldr	r1, [sp, #12]
 803f320:	e7d7      	b.n	803f2d2 <__hexnan+0x2e>
 803f322:	2a29      	cmp	r2, #41	@ 0x29
 803f324:	d157      	bne.n	803f3d6 <__hexnan+0x132>
 803f326:	3102      	adds	r1, #2
 803f328:	f8ca 1000 	str.w	r1, [sl]
 803f32c:	f1bb 0f00 	cmp.w	fp, #0
 803f330:	d051      	beq.n	803f3d6 <__hexnan+0x132>
 803f332:	454c      	cmp	r4, r9
 803f334:	d206      	bcs.n	803f344 <__hexnan+0xa0>
 803f336:	2d07      	cmp	r5, #7
 803f338:	dc04      	bgt.n	803f344 <__hexnan+0xa0>
 803f33a:	462a      	mov	r2, r5
 803f33c:	4649      	mov	r1, r9
 803f33e:	4620      	mov	r0, r4
 803f340:	f7ff ff8a 	bl	803f258 <L_shift>
 803f344:	4544      	cmp	r4, r8
 803f346:	d936      	bls.n	803f3b6 <__hexnan+0x112>
 803f348:	f1a8 0204 	sub.w	r2, r8, #4
 803f34c:	4623      	mov	r3, r4
 803f34e:	f853 1b04 	ldr.w	r1, [r3], #4
 803f352:	f842 1f04 	str.w	r1, [r2, #4]!
 803f356:	429f      	cmp	r7, r3
 803f358:	d2f9      	bcs.n	803f34e <__hexnan+0xaa>
 803f35a:	1b3b      	subs	r3, r7, r4
 803f35c:	f023 0303 	bic.w	r3, r3, #3
 803f360:	3304      	adds	r3, #4
 803f362:	3401      	adds	r4, #1
 803f364:	3e03      	subs	r6, #3
 803f366:	42b4      	cmp	r4, r6
 803f368:	bf88      	it	hi
 803f36a:	2304      	movhi	r3, #4
 803f36c:	4443      	add	r3, r8
 803f36e:	2200      	movs	r2, #0
 803f370:	f843 2b04 	str.w	r2, [r3], #4
 803f374:	429f      	cmp	r7, r3
 803f376:	d2fb      	bcs.n	803f370 <__hexnan+0xcc>
 803f378:	683b      	ldr	r3, [r7, #0]
 803f37a:	b91b      	cbnz	r3, 803f384 <__hexnan+0xe0>
 803f37c:	4547      	cmp	r7, r8
 803f37e:	d128      	bne.n	803f3d2 <__hexnan+0x12e>
 803f380:	2301      	movs	r3, #1
 803f382:	603b      	str	r3, [r7, #0]
 803f384:	2005      	movs	r0, #5
 803f386:	b007      	add	sp, #28
 803f388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803f38c:	3501      	adds	r5, #1
 803f38e:	2d08      	cmp	r5, #8
 803f390:	f10b 0b01 	add.w	fp, fp, #1
 803f394:	dd06      	ble.n	803f3a4 <__hexnan+0x100>
 803f396:	4544      	cmp	r4, r8
 803f398:	d9c1      	bls.n	803f31e <__hexnan+0x7a>
 803f39a:	2300      	movs	r3, #0
 803f39c:	f844 3c04 	str.w	r3, [r4, #-4]
 803f3a0:	2501      	movs	r5, #1
 803f3a2:	3c04      	subs	r4, #4
 803f3a4:	6822      	ldr	r2, [r4, #0]
 803f3a6:	f000 000f 	and.w	r0, r0, #15
 803f3aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 803f3ae:	6020      	str	r0, [r4, #0]
 803f3b0:	e7b5      	b.n	803f31e <__hexnan+0x7a>
 803f3b2:	2508      	movs	r5, #8
 803f3b4:	e7b3      	b.n	803f31e <__hexnan+0x7a>
 803f3b6:	9b01      	ldr	r3, [sp, #4]
 803f3b8:	2b00      	cmp	r3, #0
 803f3ba:	d0dd      	beq.n	803f378 <__hexnan+0xd4>
 803f3bc:	f1c3 0320 	rsb	r3, r3, #32
 803f3c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803f3c4:	40da      	lsrs	r2, r3
 803f3c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 803f3ca:	4013      	ands	r3, r2
 803f3cc:	f846 3c04 	str.w	r3, [r6, #-4]
 803f3d0:	e7d2      	b.n	803f378 <__hexnan+0xd4>
 803f3d2:	3f04      	subs	r7, #4
 803f3d4:	e7d0      	b.n	803f378 <__hexnan+0xd4>
 803f3d6:	2004      	movs	r0, #4
 803f3d8:	e7d5      	b.n	803f386 <__hexnan+0xe2>
	...

0803f3dc <_init>:
 803f3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803f3de:	bf00      	nop
 803f3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803f3e2:	bc08      	pop	{r3}
 803f3e4:	469e      	mov	lr, r3
 803f3e6:	4770      	bx	lr

0803f3e8 <_fini>:
 803f3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803f3ea:	bf00      	nop
 803f3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803f3ee:	bc08      	pop	{r3}
 803f3f0:	469e      	mov	lr, r3
 803f3f2:	4770      	bx	lr
